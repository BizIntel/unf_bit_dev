////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьВидимостьОтправкиЭлектронныхЧеков()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ) И 
		Объект.КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор Тогда
		Если Объект.КассаККМ.ПодключаемоеОборудование.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			Элементы.ГруппаНомерЧекаПраваяКолонка.Видимость = Истина;
		Иначе
			Элементы.ГруппаНомерЧекаПраваяКолонка.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаНомерЧекаПраваяКолонка.Видимость = Ложь;
	КонецЕсли;
	
	Если КассаККМИспользоватьБезПодключенияОборудования Тогда
		Элементы.ГруппаНомерЧекаПраваяКолонка.Видимость = Ложь;
	Конецесли;
	
КонецПроцедуры

// Процедура пересчитывает документ на клиенте.
//
&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Объект.СуммаДокумента = Объект.Запасы.Итог("Всего");
	
КонецПроцедуры // ПересчитатьДокументНаКлиенте()

// Процедура заполнения списка видов платежных карт.
//
&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	МассивВидовПлатежныхКарт = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКарт(Объект.ЭквайринговыйТерминал);
	
	Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
КонецПроцедуры // ПолучитьСписокВыбораВидовПлатежныхКарт()

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ФискальныйРегистратор = ?(
		ЗначениеЗаполнено(Объект.КассаККМ) И ЗначениеЗаполнено(Объект.КассаККМ.ПодключаемоеОборудование),
		Объект.КассаККМ.ПодключаемоеОборудование.Ссылка,
		Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);
	
	ЭквайринговыйТерминал = ?(
		ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование),
		Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование,
		Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);
	
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Доступность = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанные.Вставить(
		"Содержание",
		УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное),
			СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование),
			СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул)
	);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	СтруктураДанные.Вставить("НеобходимостьВводаАкцизнойМарки", СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Маркируемый);

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением));
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(
		Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма
	  - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	СуммаПередРасчетом = СтрокаТабличнойЧасти.Сумма;
	
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0
		    И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	СтрокаТабличнойЧасти.СуммаСкидки = СуммаПередРасчетом - СтрокаТабличнойЧасти.Сумма;
	
	// АвтоматическиеСкидки.
	ТребуетсяПересчет = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	
	// Если была изменена картинка, то фокус уходит из ТЧ и процедура ПересчитатьДокументНаКлиенте() не вызывается.
	Если ТребуетсяПересчет Тогда
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Процедура рассчитывает % скидки в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьПроцентСкидки(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена < СтрокаТабличнойЧасти.СуммаСкидки Тогда
		СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.СуммаСкидки;
	Если СтрокаТабличнойЧасти.Цена <> 0
	   И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = (1 - СтрокаТабличнойЧасти.Сумма / (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество)) * 100;
	Иначе
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
	КонецЕсли;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьПроцентСкидки()

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Дисконтная карта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ДисконтнаяКарта) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ДисконтнаяКарта%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ДисконтнаяКарта%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ДисконтнаяКарта%", Строка(СтруктураНадписи.ПроцентСкидкиПоДисконтнойКарте)+"% по карте"); //СокрЛП(Строка(СтруктураНадписи.ДисконтнаяКарта)));
	КонецЕсли;	
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()	

&НаСервереБезКонтекста
Функция ТранспортныйМодуль(Организация, Магазин)

	ТранспортныйМодуль = ИнтеграцияЕГАИСУНФ.ИспользуемыйТранспортныйМодуль(Организация, Магазин);
	Возврат ТранспортныйМодуль;

КонецФункции // ТранспортныйМодуль()

&НаКлиенте
Процедура ЗаполнитьТелефонАдресЭП()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		ТелефонАдресЭП = "Телефон";
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ТелефонАдресЭП = "АдресЭП";
	Иначе
		ТелефонАдресЭП = "НеОтправлять";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьТелефонАдресЭП()
	
	Если ТелефонАдресЭП = "Телефон" Тогда
		Объект.АдресЭП = "";
		Элементы.ГруппаТелефон.Видимость = Истина;
		Элементы.ГруппаАдресЭП.Видимость = Ложь;
	ИначеЕсли ТелефонАдресЭП = "АдресЭП" Тогда
		Объект.Телефон = "";
		Элементы.ГруппаТелефон.Видимость = Ложь;
		Элементы.ГруппаАдресЭП.Видимость = Истина;
	Иначе
		Объект.Телефон = "";
		Объект.АдресЭП = "";
		Элементы.ГруппаТелефон.Видимость = Ложь;
		Элементы.ГруппаАдресЭП.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает режим Только просмотр.
//
Процедура УстановитьРежимТолькоПросмотр()
	
	ТолькоПросмотр = Истина; // Чек пробит. Изменение информации запрещено.
	Элементы.ПробитьЧек.Доступность = Ложь;
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Доступность = Ложь;
	Элементы.ТелефонАдресЭП.Доступность = Ложь;
	
КонецПроцедуры // УстановитьРежимТолькоПросмотр()

// Процедура устанавливает видимость элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	ЗначениеВидимости = (Объект.ПоложениеЗаказаПокупателя = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке"));
	
	Элементы.Заказ.Видимость 		= ЗначениеВидимости;
	Элементы.ЗапасыЗаказ.Видимость	= НЕ ЗначениеВидимости;
	ЗаказВШапке 					= ЗначениеВидимости;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	
	Если ЗначениеЗаполнено(Объект.НомерЧекаККМ)
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		УстановитьРежимТолькоПросмотр();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьСписокВыбораВидовПлатежныхКарт();
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = УправлениеНебольшойФирмойСервер.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда	
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.НациональнаяВалюта.Получить()));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВидЦен, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВалютаДокумента, Объект.ВалютаДокумента, Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ЭТИспользоватьБезПодключенияОборудования = Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Видимость = НЕ ЭТИспользоватьБезПодключенияОборудования;
	
	Элементы.ЗапасыСуммаСкидки.Видимость = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	ПродажаСоСклада = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					= НЕ РазрешеноРедактированиеЦенДокументов ИЛИ НЕ ПродажаСоСклада;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов ИЛИ НЕ ПродажаСоСклада; 
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаСкидки.ТолькоПросмотр 			= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 				= НЕ РазрешеноРедактированиеЦенДокументов;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	УстановитьВидимостьОтправкиЭлектронныхЧеков();
	
	// Заказы покупателей в Рознице
	// Установка видимости реквизитов от пользовательских настроек
	УстановитьВидимостьОтПользовательскихНастроек(); 
	// Конец. Заказы покупателей в Рознице
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();

	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма;
	КонецЦикла;
	
	ПересчитатьДокументНаКлиенте();
	
	ЗаполнитьТелефонАдресЭП();
	УстановитьДоступностьТелефонАдресЭП();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЧтенииНаСервере формы.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	Элементы.ПробитьЧек.Доступность = НЕ Объект.ПометкаУдаления;
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриЗакрытии формы.
//
&НаКлиенте
Процедура ПриЗакрытии()

	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

	// АвтоматическиеСкидки
	// Выведем сообщение о рассчёте скидок, если нажата кнопка "Провести и закрыть" или форма закрывается по крестику, с сохранением изменений.
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаныПередЗаписью Тогда
		ПоказатьОповещениеПользователя("Изменение:", 
										ПолучитьНавигационнуюСсылку(Объект.Ссылка), 
										Строка(Объект.Ссылка)+". Автоматические скидки (наценки) рассчитаны!", 
										БиблиотекаКартинок.Информация32);
	КонецЕсли;
	// Конец АвтоматическиеСкидки

КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновитьФормуСпискаДокументовЧекККМ" Тогда
		Для каждого ТекСтрока Из Объект.Запасы Цикл
			ТекСтрока.СуммаСкидки = ТекСтрока.Цена * ТекСтрока.Количество - ТекСтрока.Сумма;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			РассчиталиСкидки = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Рассчитаны автоматические скидки (наценки)!";
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьФормуСпискаДокументовЧекККМ");
	
	ЗаполненЗаказ = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			ЗаполненЗаказ = Истина;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ЗаполненЗаказ Тогда
		Оповестить("Запись_ЧекККМ_с_ЗаказомПокупателя", Новый Структура("Ссылка, Номер, Дата", Объект.Ссылка, Объект.Номер, Объект.Дата));
	КонецЕсли;
	
	// РМК
	Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма")
		И СтрНайти(ЭтотОбъект.ВладелецФормы.ИмяФормы, "ФормаДокумента_РМК") > 0 
		Тогда
		Оповестить("РМК_Запись_ЧекККМВозврат", Новый Структура("Ссылка, Номер, Дата", Объект.Ссылка, Объект.Номер, Объект.Дата));
	КонецЕсли;
	// Конец РМК
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено)
	
	ОбщиеПараметры = Документы.ЧекККМ.ПодготовитьДанныеДляПробитияЧека(Объект, Объект.Ссылка, ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС, Истина);
	Возврат ОбщиеПараметры;
	
КонецФункции

// Процедура печати чека на фискальном регистраторе.
//
&НаКлиенте
Процедура ПробитьЧек()
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьПредупреждение = Ложь;
	
	Если НЕ ЭТИспользоватьБезПодключенияОборудования Тогда
		Для каждого ТекСтрока Из Объект.ОплатаПлатежнымиКартами Цикл
			Если НЕ ТекСтрока.ОплатаОтменена Тогда
				ТекстСообщения = НСтр("ru = 'Вначале нужно выполнить возврат оплаты по картам!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект, ПоказыватьПредупреждение) Тогда
		Если ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если НЕ ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
		ИЛИ КассаККМИспользоватьБезПодключенияОборудования Тогда 
		// Внешнее оборудование не используется
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Если РезультатПроведения = Истина
		И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
			УстановитьРежимТолькоПросмотр();
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтотОбъект.Доступность = Ложь;
		
		// Готовим данные
		ЕстьАлкогольнаяПродукцияЕГАИС = Неопределено;
		ТранспортныйМодуль = Неопределено;
		ДанныеЕГАИСДостаточны = Ложь;
		
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ТранспортныйМодуль, ДанныеЕГАИСДостаточны, ЕстьАлкогольнаяПродукцияЕГАИС);
		ОбщиеПараметры.ДатаВремя = ТекущаяДата();
		
		Контекст = Новый Структура();
		Контекст.Вставить("ЕстьАлкогольнаяПродукцияЕГАИС", ЕстьАлкогольнаяПродукцияЕГАИС);
		
		Если ЕстьАлкогольнаяПродукцияЕГАИС Тогда
			Если НЕ ДанныеЕГАИСДостаточны Тогда
				Возврат;
			КонецЕсли;
			Контекст.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ОбщиеПараметры, 
			ИдентификаторУстройстваФР,
			,
			ПослеОткрытияЧека,
			ПослеОшибкиПечатиЧека);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧек()

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	Если ПараметрыВыполнения.НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = ПараметрыВыполнения.НомерСмены;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = ПараметрыВыполнения.НомерЧека;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеПодписиЧека(
			Новый ОписаниеОповещения("ПечатьЧека_ПослеПолученияПодписиВЕГАИС", ЭтотОбъект, ПараметрыВыполнения),
			ПараметрыВыполнения.ВходныеПараметры,
			ДополнительныеПараметры.ТранспортныйМодуль,
			Истина
		);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеПолученияПодписиВЕГАИС(Результат, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполнения.ПродолжитьПечать = Результат.Результат;
	ПараметрыВыполнения.ОписаниеОшибки = Результат.ОписаниеОшибки;
	
	Если Результат.Результат Тогда
		ПараметрыВыполнения.Вставить("АдресЧека"  , Результат.АдресЧека);
		ПараметрыВыполнения.Вставить("ПодписьЧека", Результат.ПодписьЧека);
		
		ИННОрганизации = "";
		КППОрганизации = "";
		НаименованиеОрганизации = "";
		
		Если Результат.ТранспортныйМодуль <> Неопределено Тогда
			ИННОрганизации = Результат.ТранспортныйМодуль.ИНН;
			КППОрганизации = Результат.ТранспортныйМодуль.КПП;
			
			НаименованиеОрганизации = СокрЛП(Результат.ТранспортныйМодуль.ОрганизацияЕГАИС);
			Если ПустаяСтрока(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ПараметрыВыполнения.ВходныеПараметры.ОрганизацияНазвание;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВыполнения.Вставить("ИНН", ИННОрганизации);
		ПараметрыВыполнения.Вставить("КПП", КППОрганизации);
		ПараметрыВыполнения.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
		
		Объект.АдресЧекаЕГАИС = Результат.АдресЧека;
		Объект.ПодписьЧекаЕГАИС = Результат.ПодписьЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	ШапкаЧека.НомерЧека = ШапкаЧека.НомерЧека + 1000000;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
	
	Объект.АдресЧекаЕГАИС = "";
	Объект.ПодписьЧекаЕГАИС = "";
	
	Если ДополнительныеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС Тогда
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеПодписиЧека(
			Неопределено,
			ПараметрыВыполнения.ВходныеПараметры,
			ДополнительныеПараметры.ТранспортныйМодуль,
			Истина);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
			Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
				Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
				Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
			КонецЕсли;
		КонецЕсли;
		
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Если РезультатПроведения = Истина
			И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
			УстановитьРежимТолькоПросмотр();
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки НапечататьЧек командной панели.
//
&НаКлиенте
Процедура ПробитьЧекВыполнить()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если НЕ Отказ И ПроверитьЗаполнение() Тогда
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		ПробитьЧек();
	КонецЕсли;
	
КонецПроцедуры // ПробитьЧекВыполнить()

// Процедура - обработчик команды УдалитьОплатуКартой.
//
&НаКлиенте
Процедура ОтменитьОплату(Команда)
	
	ПоказыватьПредупреждение = Ложь;
	
	//Проверка выбранной строки в талице оплат платежными картами
	ТекущиеДанные = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите строку удаляемой оплаты картой.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект, ПоказыватьПредупреждение) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить возврат оплаты картой.'"));
		Возврат;
	КонецЕсли;
		
	Если НЕ ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Возврат;
	КонецЕсли;
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	
	// Выбор устройства ЭТ
	ИдентификаторУстройстваЭТ = ?(
		ЗначениеЗаполнено(ЭквайринговыйТерминал),
		ЭквайринговыйТерминал,
		Неопределено);
		
	// Выбор устройства ФР
	ИдентификаторУстройстваФР = ?(
		ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);
	
	Если ИдентификаторУстройстваЭТ <> Неопределено 
			И (ИдентификаторУстройстваФР <> Неопределено ИЛИ КассаККМИспользоватьБезПодключенияОборудования) Тогда
		
		ЭтотОбъект.Доступность = Ложь; // Блокируем интерфейс пользователя.
		
		ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
		ПараметрыОперации.ТипТранзакции  = "AuthorizeVoid";
		ПараметрыОперации.СуммаОперации  = СуммаОперации;
		ПараметрыОперации.НомерЧека      = НомерЧекаЭТ;
		ПараметрыОперации.СсылочныйНомер = НомерСсылкиОперации;
		
		Оповещение = Новый ОписаниеОповещения("ОтменаОперацииПоПлатежнойКартеЗавершение", ЭтотОбъект);
		МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(
			Оповещение,
			УникальныйИдентификатор, 
			ИдентификаторУстройстваЭТ,
			ИдентификаторУстройстваФР,
			ПараметрыОперации
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаОперацииПоПлатежнойКартеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина; // Разблокировка интерфейса пользователя.
	
	Если РезультатВыполнения.Результат Тогда
		ТекущиеДанные = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
		ТекущиеДанные.ОплатаОтменена = Истина;
		Записать();
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УстановитьДоступностьТелефонАдресЭП();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события ПриИзменении поля КассаККМ на сервере.
//
&НаСервере
Процедура КассаККМПриИзмененииНаСервере()
	
	СостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСменыНаДату(Объект.КассаККМ, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДатаСеанса()));
	
	Если ЗначениеЗаполнено(СостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СостояниеКассовойСмены);
		
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ);
	
	ПолучитьСсылкиНаОборудование();
	
	Объект.Подразделение = Объект.КассаККМ.Подразделение;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		Пользователь = Пользователи.ТекущийПользователь();
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
		ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Объект.Подразделение = ОсновноеПодразделение;
		
	КонецЕсли;
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	Элементы.ЗапасыЦена.ТолькоПросмотр = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	Элементы.ЗапасыСумма.ТолькоПросмотр = Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	
КонецПроцедуры // КассаККМПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля КассаККМ.
//
&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииНаСервере();
	УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // КассаККМПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал на сервере.
//
&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	ПолучитьСсылкиНаОборудование();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	ЭТИспользоватьБезПодключенияОборудования = Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Видимость = НЕ ЭТИспользоватьБезПодключенияОборудования;
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля Организация.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ЗАПАСЫ

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("Содержание", "");
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
	// Конец ДисконтныеКарты
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	//Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
	ОткрытьВводАкцизнойМарки(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
				
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = СтруктураДанные.Содержание;
			
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаСкидки.
//
&НаКлиенте
Процедура ЗапасыСуммаСкидкиПриИзменении(Элемент)
	
	РассчитатьПроцентСкидки();
	
КонецПроцедуры // ЗапасыСуммаСкидкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.Сумма;
	
	// АвтоматическиеСкидки.
	ТребуетсяПересчетАвтоматическихСкидок = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", ЭтотОбъект.ТекущийЭлемент.ТекущийЭлемент.Имя);
		
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриОкончанииРедактирования строки списка Запасы.
//
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	УправлениеНебольшойФирмойКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, ТекущиеДанные);
	УправлениеНебольшойФирмойКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СкидкиНаценки, ТекущиеДанные);
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления строки списка Запасы.
//
&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
КонецПроцедуры // ЗапасыПослеУдаления()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ОПЛАТА ПЛАТЕЖНЫМИ КАРТАМИ

// Процедура - обработчик события ПриОкончанииРедактирования строки списка ОплатаПлатежнымиКартами.
//
&НаКлиенте
Процедура ОплатаПлатежнымиКартамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ОплатаПлатежнымиКартамиПриОкончанииРедактирования()

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор);
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор)
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

# Область АвтоматическиеСкидки

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиНаценкиПоДокументуОснованиюСервер()

	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Запасы");
	
	МассивЧековККМ = Новый Массив;
	МассивЧековККМ.Добавить(Объект.ЧекККМ);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК СуммаАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ЧекККМЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЧекККМЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЧекККМЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.Характеристика,
	|	ЧекККМЗапасы.ЕдиницаИзмерения,
	|	ЧекККМЗапасы.Количество,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки,
	|	СкидкиНаценки.СкидкаНаценка.СпособПредоставления КАК СпособПредоставления
	|ИЗ
	|	Документ.ЧекККМ.СкидкиНаценки КАК СкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ПО СкидкиНаценки.Ссылка = ЧекККМЗапасы.Ссылка
	|			И СкидкиНаценки.КлючСвязи = ЧекККМЗапасы.КлючСвязи
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЧековККМ)";
	
	Запрос.УстановитьПараметр("МассивЧековККМ", МассивЧековККМ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СкидкиНаценкиЗаказа = МассивРезультатов[0].Выгрузить();
	
	Объект.СкидкиНаценки.Очистить();
	Для Каждого ТекущаяСтрокаДокумента Из Объект.Запасы Цикл
		ТекущаяСтрокаДокумента.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрокаДокумента.СуммаАвтоматическойСкидки = 0;
	КонецЦикла;
	
	РезультатРасчетаСкидокНаценок = Объект.СкидкиНаценки.Выгрузить();
	
	Для Каждого ТекущаяСтрокаЗаказа Из СкидкиНаценкиЗаказа Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", ТекущаяСтрокаЗаказа.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", ТекущаяСтрокаЗаказа.Характеристика);
		
		МассивСтрокДокумента = Объект.Запасы.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокДокумента.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоВЗаказе = ТекущаяСтрокаЗаказа.Количество * ТекущаяСтрокаЗаказа.Коэффициент;
		Распределено = 0;
		Для Каждого ТекущаяСтрокаДокумента Из МассивСтрокДокумента Цикл
			КоличествоКСписанию = ТекущаяСтрокаДокумента.Количество * 
									?(ТипЗнч(ТекущаяСтрокаДокумента.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"), 1, ТекущаяСтрокаДокумента.ЕдиницаИзмерения.Коэффициент);
			
			//ПересчитатьСуммы = КоличествоВЗаказе <> КоличествоКСписанию;
			//КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВЗаказе, 1);
			//Если КоэффициентПересчетаСкидки <> 1 Тогда
			//	ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
			//Иначе
			//	ТекущаяСуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки;
			//КонецЕсли;
			
			ПересчитатьСуммы = КоличествоВЗаказе <> КоличествоКСписанию;
			КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВЗаказе, 1);
			Если ЗначениеЗаполнено(ТекущаяСтрокаЗаказа.ЗначениеСкидкиНаценки) И ТекущаяСтрокаЗаказа.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
				ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаДокумента.Цена * ТекущаяСтрокаДокумента.Количество * ТекущаяСтрокаЗаказа.ЗначениеСкидкиНаценки / 100, 2);
			ИначеЕсли КоэффициентПересчетаСкидки <> 1 Тогда
				ТекущаяСуммаАвтоматическойСкидки = ОКР(ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки, 2);
			Иначе
				ТекущаяСуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки;
			КонецЕсли;
			
			СтрокаСкидки = РезультатРасчетаСкидокНаценок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, ТекущаяСтрокаЗаказа);
			СтрокаСкидки.Сумма = ТекущаяСуммаАвтоматическойСкидки;
			СтрокаСкидки.КлючСвязи = ТекущаяСтрокаДокумента.КлючСвязи;
			
			ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки = ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки - ТекущаяСуммаАвтоматическойСкидки;
			КоличествоВЗаказе = КоличествоВЗаказе - КоличествоКСписанию;
			Если КоличествоВЗаказе <=0 Или ТекущаяСтрокаЗаказа.СуммаАвтоматическойСкидки <=0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(Объект, "Запасы", РезультатРасчетаСкидокНаценок);
	
КонецПроцедуры

// Процедура - обработчик команды "РассчитатьСкидкиНаценки".
//
&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	РассчитатьСкидкиНаценкиПоДокументуОснованиюСервер();
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Ложь);
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
	ЕстьРучныеСкидки = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ТекущаяСтрока.Цена * ТекущаяСтрока.Количество * ТекущаяСтрока.ПроцентСкидкиНаценки / 100, 0);
		ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если ТекСуммаСкидки >= ТекущаяСтрока.Сумма И ТекущаяСтрока.Цена > 0 Тогда
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Истина;
		Иначе
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент()
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура; 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент()
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонокаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И Объект.Запасы.Количество() > 0 И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонокаТЧ);
	
КонецФункции

&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПримененныеСкидки(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Данные еще не записаны.
		|Переход к ""Примененные скидки"" возможен только после записи данных.
		|Данные будут записаны.";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПримененныеСкидкиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПараметрыФормы = Новый Структура("ДокументСсылка", Объект.Ссылка);
		ОткрытьФорму("Отчет.ПримененныеСкидкиВДокументе.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПримененныеСкидкиЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;

	Если Записать() Тогда
		ПараметрыФормы = Новый Структура("ДокументСсылка", Объект.Ссылка);
		ОткрытьФорму("Отчет.ПримененныеСкидкиВДокументе.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры // ПримененныеСкидкиЗавершение()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		//Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
	
	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
	
	СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
	СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
	СтрокаАкцизнаяМарка.КодАкцизнойМарки = РезультатОткрытияФормы;
	
	Если НЕ РезультатОткрытияФормы = Неопределено 
		И ТипЗнч(РезультатОткрытияФормы) = Тип("Строка") Тогда
		
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТЧ.Количество = 1;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТЧ);
		
	Иначе
		Если НЕ СтрокаТЧ = Неопределено Тогда
			Объект.Запасы.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(ИдентификаторСтроки, ТекущийКлючСвязи, Номенклатура)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура"             , Номенклатура);
	ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
	ПараметрыФормы.Вставить("ТекущийКлючСвязи"         , ТекущийКлючСвязи);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМарки", ЭтотОбъект, ДополнительныеПараметры);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаВводаАкцизнойМарки", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, РежимБлокировки); 
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьВводАкцизнойМарки(СтрокаТЧ)

	Если Не ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаТЧ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаТЧ.НеобходимостьВводаАкцизнойМарки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
		УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязи");
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	
	ВвестиАкцизнуюМарку(ИдентификаторСтроки, СтрокаТЧ.КлючСвязи, СтрокаТЧ.Номенклатура);
	
КонецФункции

# КонецОбласти
