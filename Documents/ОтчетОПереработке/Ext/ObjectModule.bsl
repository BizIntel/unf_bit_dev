#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет табличную часть по спецификации.
//
Процедура ЗаполнитьТабличнуюЧастьПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.Коэффициент КАК Коэффициент,
	|	ТаблицаПродукция.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)";
	
	Если ТаблицаУзлы = Неопределено Тогда
		Запасы.Очистить();
		ТаблицаПродукция = Продукция.Выгрузить();
		Массив = Новый Массив();
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10,3));
		ТаблицаПродукция.Колонки.Добавить("Коэффициент", ОписаниеТиповЧ);
		Для каждого СтрокаПродукция Из ТаблицаПродукция Цикл
			Если ЗначениеЗаполнено(СтрокаПродукция.ЕдиницаИзмерения)
				И ТипЗнч(СтрокаПродукция.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтрокаПродукция.Коэффициент = СтрокаПродукция.ЕдиницаИзмерения.Коэффициент;
			Иначе
				СтрокаПродукция.Коэффициент = 1;
			КонецЕсли;
		КонецЦикла;
		ТаблицаУзлы = ТаблицаПродукция.СкопироватьКолонки("НомерСтроки,Количество,Коэффициент,Спецификация");
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаУзлы);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтрокиПродукции,
	|	ТаблицаПродукция.Спецификация КАК СпецификацияПродукции,
	|	МИНИМУМ(ТаблицаМатериалы.НомерСтроки) КАК НомерСтрокиСостава,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ТаблицаМатериалы.Количество / ТаблицаМатериалы.КоличествоПродукции * ТаблицаПродукция.Коэффициент * ТаблицаПродукция.Количество) КАК Количество,
	|	ТаблицаМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаМатериалы.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаМатериалы.Спецификация КАК Спецификация
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК ТаблицаМатериалы
	|		ПО ТаблицаПродукция.Спецификация = ТаблицаМатериалы.Ссылка,
	|	Константа.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ГДЕ
	|	ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаМатериалы.ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаМатериалы.ДоляСтоимости,
	|	ТаблицаМатериалы.Спецификация,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПродукции,
	|	НомерСтрокиСостава";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			ТаблицаУзлы.Очистить();
			Если НЕ СтекСпецификацийУзлов.Найти(Выборка.Спецификация) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'При попытке заполнить табличную часть Материалы по спецификации,
									|обнаружено рекурсивное вхождение элемента'")+" "+Выборка.Номенклатура+" "+НСтр("ru = 'в спецификации'")+" "+Выборка.СпецификацияПродукции+"
									|Операция не выполнена!";
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			СтекСпецификацийУзлов.Добавить(Выборка.Спецификация);
			НоваяСтрока = ТаблицаУзлы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗаполнитьТабличнуюЧастьПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы);
		Иначе
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
				Иначе
					НоваяСтрока.СтавкаНДС = Организация.СтавкаНДСПоУмолчанию;
				КонецЕсли;
			Иначе
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СтекСпецификацийУзлов.Очистить();
	Запасы.Свернуть("Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, СтавкаНДС", "Количество");
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоСпецификации()

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация);
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ = &Заказ
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ = &Заказ
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (КурсыВалютыУчетаКурс / КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчетаКурс,
	|	КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Если Контрагент.ВестиРасчетыПоЗаказам Тогда
		Запрос.УстановитьПараметр("Заказ", ЗаказПокупателя);
	Иначе
		Запрос.УстановитьПараметр("Заказ", Документы.ЗаказПокупателя.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	СуммаОсталосьРаспределить = Продукция.Итог("Всего");
	СуммаОсталосьРаспределить = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
		СуммаОсталосьРаспределить,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
		Курс,
		?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
		Кратность
	);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока СуммаОсталосьРаспределить > 0 Цикл
		
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			
			Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна чем осталось распределить
				
				НоваяСтрока = Предоплата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
				СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаРасчетов;
				
			Иначе // сумма остатка больше чем нужно распределить
				
				НоваяСтрока = Предоплата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
				НоваяСтрока.СуммаРасчетов = СуммаОсталосьРаспределить;
				НоваяСтрока.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.СуммаРасчетов,
					ВыборкаРезультатаЗапроса.Курс,
					ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
					ВыборкаРезультатаЗапроса.Кратность,
					ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
				);
				СуммаОсталосьРаспределить = 0;
				
			КонецЕсли;
			
		Иначе
			
			СуммаОсталосьРаспределить = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет клонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Продукция.ЗагрузитьКолонку(Новый Массив(Продукция.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	&Заказ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Продукция.Выгрузить());
	Запрос.УстановитьПараметр("Заказ", ?(ЗначениеЗаполнено(ЗаказПокупателя), ЗаказПокупателя, Документы.ЗаказПокупателя.ПустаяСсылка()));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Продукция.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервам()

// Обработчик заполнения на основании документа ЗаказПокупателя.
//
// Параметры:
//	ДокументСсылкаЗаказПокупателя - ДокументСсылка.ЗаказПокупателя.
//	
Процедура ЗаполнитьПоЗаказПокупателя(ДокументСсылкаЗаказПокупателя) Экспорт
	
	Если ДокументСсылкаЗаказПокупателя.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Отчет о переработке на основании заказ-наряда!'");
	КонецЕсли;
	
	// Заполнение шапки.
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылкаЗаказПокупателя,
			Новый Структура("Организация, Контрагент, Договор, Ссылка, СтруктурнаяЕдиницаРезерв, ВидЦен, ВидСкидкиНаценки, ВалютаДокумента, НалогообложениеНДС, СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность, СостояниеЗаказа, Проведен"));
	
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДокументСсылкаЗаказПокупателя, ЗначенияРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Контрагент, Договор, ВидЦен, ВидСкидкиНаценки, ВалютаДокумента, НалогообложениеНДС, СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность");
	
	ЗаказПокупателя = ЗначенияРеквизитов.Ссылка;
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		СтруктурнаяЕдиница = ЗначенияРеквизитов.СтруктурнаяЕдиницаРезерв;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
		Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()), Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПокупателей.Номенклатура,
	|		ДвиженияДокументаЗаказыПокупателей.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыПринятыеОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыПринятыеОстатки.Договор КАК Договор,
	|	ЗапасыПринятыеОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыПринятыеОстатки.Характеристика КАК Характеристика,
	|	ЗапасыПринятыеОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыПринятыеОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ЗапасыПринятыеОстатки.СуммаРасчетов) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыПринятыеОстатки.Заказ КАК ЗаказПокупателя,
	|		ЗапасыПринятыеОстатки.Договор КАК Договор,
	|		ЗапасыПринятыеОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыПринятыеОстатки.Характеристика КАК Характеристика,
	|		ЗапасыПринятыеОстатки.Партия КАК Партия,
	|		ЗапасыПринятыеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыПринятыеОстатки.СуммаРасчетовОстаток КАК СуммаРасчетов
	|	ИЗ
	|		РегистрНакопления.ЗапасыПринятые.Остатки(
	|				,
	|				Заказ = &ДокументОснование
	|					И ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)) КАК ЗапасыПринятыеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасыПринятые.Заказ,
	|		ДвиженияДокументаЗапасыПринятые.Договор,
	|		ДвиженияДокументаЗапасыПринятые.Номенклатура,
	|		ДвиженияДокументаЗапасыПринятые.Характеристика,
	|		ДвиженияДокументаЗапасыПринятые.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасыПринятые.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасыПринятые.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасыПринятые.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасыПринятые.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасыПринятые.СуммаРасчетов, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасыПринятые.СуммаРасчетов, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗапасыПринятые КАК ДвиженияДокументаЗапасыПринятые
	|	ГДЕ
	|		ДвиженияДокументаЗапасыПринятые.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасыПринятые.ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)) КАК ЗапасыПринятыеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыПринятыеОстатки.ЗаказПокупателя,
	|	ЗапасыПринятыеОстатки.Договор,
	|	ЗапасыПринятыеОстатки.Номенклатура,
	|	ЗапасыПринятыеОстатки.Характеристика,
	|	ЗапасыПринятыеОстатки.Партия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗапасыПринятыеОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.Спецификация КАК Спецификация,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	// АвтоматическиеСкидки.
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		СкидкиНаценкиЗаказа = МассивРезультатов[3].Выгрузить();
		СкидкиНаценки.Очистить();
	КонецЕсли;
	// Конец АвтоматическиеСкидки.
	
	Продукция.Очистить();
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Продукция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				
				КоличествоКСписанию = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
				СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьСуммуСтрокиТабличнойЧасти(
					Новый Структура("Количество, Цена, Сумма, ПроцентСкидкиНаценки, СтавкаНДС, СуммаНДС, СуммаВключаетНДС, Всего",
						КоличествоКСписанию, Выборка.Цена, 0, Выборка.ПроцентСкидкиНаценки, Выборка.СтавкаНДС, 0, СуммаВключаетНДС, 0));
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
				
			КонецЕсли;
			
			// АвтоматическиеСкидки
			Если ИспользоватьАвтоматическиеСкидки Тогда
				КоличествоВДокументе = Выборка.Количество * Выборка.Коэффициент;
				ПересчитатьСуммы = КоличествоВДокументе <> КоличествоКСписанию;
				КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВДокументе, 1);
				Если КоэффициентПересчетаСкидки <> 1 Тогда
					НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
				КонецЕсли;
				
				// Формирование табличной части скидок
				СуммаКРаспределению = НоваяСтрока.СуммаАвтоматическойСкидки;
				
				ЕстьСтрокаСкидки = Ложь;
				Если Выборка.КлючСвязи <> 0 Тогда
					Для Каждого СтрокаСкидкиЗаказа ИЗ СкидкиНаценкиЗаказа.НайтиСтроки(
						Новый Структура("Заказ,КлючСвязи", ДокументСсылкаЗаказПокупателя, Выборка.КлючСвязи)) Цикл
						
						СтрокаСкидки = СкидкиНаценки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
						СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
						СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
						ЕстьСтрокаСкидки = Истина;
						
					КонецЦикла;
				КонецЕсли;
				
				Если ЕстьСтрокаСкидки И СуммаКРаспределению <> 0 Тогда
					СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
				КонецЕсли;
			КонецЕсли;
			// Конец АвтоматическиеСкидки
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// АвтоматическиеСкидки.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		РезультатРасчетаСкидокНаценок = СкидкиНаценки.Выгрузить();
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ЭтотОбъект, "Запасы", РезультатРасчетаСкидокНаценок);
	КонецЕсли;
	// Конец АвтоматическиеСкидки.
	
	Запасы.Очистить();
	ТаблицаОстатков = МассивРезультатов[1].Выгрузить();
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Для Каждого СтрокаЗапасы Из ТаблицаОстатков Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасы);
		
		Если СтрокаЗапасы.Сумма > 0 Тогда
			Если ВалютаДокумента = СтрокаЗапасы.Договор.ВалютаРасчетов Тогда
				Сумма = СтрокаЗапасы.Сумма;
			Иначе
				СтруктураКурсовВалют = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ВалютаДокумента, СтрокаЗапасы.Договор.ВалютаРасчетов, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
				Сумма = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
							СтрокаЗапасы.Сумма,
							СтруктураКурсовВалют.КурсНач,
							СтруктураКурсовВалют.Курс,
							СтруктураКурсовВалют.КратностьНач,
							СтруктураКурсовВалют.Кратность);
			КонецЕсли;
		Иначе
			Сумма = 0;
		КонецЕсли;
		
		НоваяСтрока.ЕдиницаИзмерения = СтрокаЗапасы.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Цена = Сумма / СтрокаЗапасы.Количество;
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Если ЗначениеЗаполнено(СтрокаЗапасы.Номенклатура.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = СтрокаЗапасы.Номенклатура.СтавкаНДС;
			Иначе
				НоваяСтрока.СтавкаНДС = Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;
		Иначе
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
		КонецЕсли;
		
		СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьСуммуСтрокиТабличнойЧасти(
					Новый Структура("Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СуммаВключаетНДС, Всего",
						СтрокаЗапасы.Количество, НоваяСтрока.Цена, 0, НоваяСтрока.СтавкаНДС, 0, СуммаВключаетНДС, 0));
						
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		
	КонецЦикла;
	
	// Заполнение резервов.
	Если Продукция.Количество() > 0
		И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		ЗаполнитьКолонкуРезервПоРезервам();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

// Обработчик заполнения на основании документа СборкаЗапасов.
//
// Параметры:
//	ДокументСсылкаСборкаЗапасов - ДокументСсылка.СборкаЗапасов.
//	
Процедура ЗаполнитьПоСборкаЗапасов(ДокументСсылкаСборкаЗапасов) Экспорт
	
	// Заполнение шапки.
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	ДокументСсылкаСборкаЗапасов,
	"Организация, ВидОперации, СтруктурнаяЕдиницаПродукции, ЯчейкаПродукции, ЗаказПокупателя");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов);
	
	Если ЗначенияРеквизитов.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		СтруктурнаяЕдиница = ЗначенияРеквизитов.СтруктурнаяЕдиницаПродукции;
		Ячейка = ЗначенияРеквизитов.ЯчейкаПродукции;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
		ТЧПродукция = "Запасы";
		ТЧМатериалы = "Продукция";
	Иначе
		ТЧПродукция = "Продукция";
		ТЧМатериалы = "Запасы";
	КонецЕсли;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Производство.Продукция.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		СерийныеНомера КАК СерийныеНомера,
	|		КлючСвязи КАК КлючСвязи,
	|		ВЫБОР
	|			КОГДА Производство.Продукция.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|				ТОГДА Производство.Продукция.Ссылка.Организация.СтавкаНДСПоУмолчанию
	|			ИНАЧЕ Производство.Продукция.Номенклатура.СтавкаНДС
	|		КОНЕЦ КАК СтавкаНДС,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Спецификация КАК Спецификация
	|	),
	|	Производство.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		СерийныеНомера КАК СерийныеНомера,
	|		КлючСвязи КАК КлючСвязи,
	|		ВЫБОР
	|			КОГДА Производство.Запасы.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|				ТОГДА Производство.Запасы.Ссылка.Организация.СтавкаНДСПоУмолчанию
	|			ИНАЧЕ Производство.Запасы.Номенклатура.СтавкаНДС
	|		КОНЕЦ КАК СтавкаНДС,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Спецификация КАК Спецификация
	|	),
	|	Производство.Отходы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		Количество КАК Количество,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	)
	|ИЗ
	|	Документ.СборкаЗапасов КАК Производство
	|ГДЕ
	|	Производство.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаСборкаЗапасов);
	
	Продукция.Очистить();
	Запасы.Очистить();
	Отходы.Очистить();
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Для каждого ВыборкаМатериалы Из Выборка[ТЧМатериалы].Выгрузить() Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаМатериалы);
		КонецЦикла;
		Для каждого ВыборкаПродукция Из Выборка[ТЧПродукция].Выгрузить() Цикл
			НоваяСтрока = Продукция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПродукция);
		КонецЦикла;
		Для каждого ВыборкаОтходы Из Выборка.Отходы.Выгрузить() Цикл
			НоваяСтрока = Отходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОтходы);
		КонецЦикла;
		
		РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДокументСсылкаСборкаЗапасов, ТЧПродукция);
		
	КонецЕсли;
	
	// Заполнение резервов.
	Если Продукция.Количество() > 0
		И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗаполнитьКолонкуРезервПоРезервам();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоСборкаЗапасов()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ВсегоПредоплата = Предоплата.Итог("СуммаПлатежа");
	ВсегоПродукция = Продукция.Итог("Всего");
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		Для каждого СтрокаПродукция Из Продукция Цикл
			
			Если СтрокаПродукция.Резерв > СтрокаПродукция.Количество Тогда
				
				ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Продукция"" количество отгружаемых позиций из резерва превышает общее количество запасов.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаПродукция.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Продукция",
					СтрокаПродукция.НомерСтроки,
					"Резерв",
					Отказ
				);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки Тогда
		Для каждого СтрокаПродукция Из Продукция Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаПродукция.Цена * СтрокаПродукция.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ОКР(ТекСумма * СтрокаПродукция.ПроцентСкидкиНаценки / 100, 2), 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаПродукция.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаПродукция.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаПродукция.Сумма) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %Номер% списка ""Продукция"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаПродукция.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Продукция",
					СтрокаПродукция.НомерСтроки,
					"Сумма",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	// Серийные номера
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ОрдерныйСклад") = Истина Тогда
		РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Продукция, СерийныеНомера, СтруктурнаяЕдиница, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.СборкаЗапасов")] = "ЗаполнитьПоСборкаЗапасов";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СуммаДокумента = Продукция.Итог("Всего");
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ОтчетОПереработке.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	// АвтоматическиеСкидки
	УправлениеНебольшойФирмойСервер.ОтразитьПредоставленныеАвтоматическиеСкидки(ДополнительныеСвойства, Движения, Отказ);

	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетОПереработке.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетОПереработке.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненная счет-фактура
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Предоплата.Очистить();
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура отмены проведения у подченненой счет фактуры
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится счет фактура %ПредставлениеСчетФактуры%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Отчет о переработке № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры //КонтрольПодчиненнойСчетФактуры()

#КонецОбласти

#КонецЕсли
