
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения на основании данных заполнения.
//
// Параметры:
//  ДанныеЗаполнения - Структура.
//
Процедура ОбработчикЗаполнения(ДанныеЗаполнения) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ОнЖе = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументыОснования(ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(ДокументыОснования) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьУникальностьСчетаФактуры();
	
	ЗаполнитьЗапасыПоТЧДокументыОснования();
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснования(ДанныеЗаполнения)
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		ДокументОснование				= ДанныеЗаполнения;
		ДокументыОснования.Очистить();
		НоваяСтрока 					= ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование	= ДанныеЗаполнения;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("ДокументЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование				= ДанныеЗаполнения.ДокументЗаполнения;
	ДокументыОснования.Очистить();
	
	НоваяСтрока 					= ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование	= ДанныеЗаполнения.ДокументЗаполнения;
	
КонецПроцедуры

Процедура ПроверитьУникальностьСчетаФактуры()
	
	Для каждого ТекСтрока Из ДокументыОснования Цикл
		
		Если ТипЗнч(ТекСтрока.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.ДокументОснование, "ДокументОснование, ВидОперации");
			Если УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(РеквизитыОснования.ДокументОснование) = Неопределено Тогда
				Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
					ВызватьИсключение НСтр("ru = 'Перед добавлением исправления счета-фактуры создайте счет-фактуру у документа-основания'");
				Иначе
					ВызватьИсключение НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте счет-фактуру у документа-основания'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ТекСтрока.ДокументОснование);
		
		Если Не ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НайденныйСчетФактура.Ссылка = Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для документа ""%1"" 
		|уже введен счет-фактура ""%2"".
		|Запись еще одного документа ""Счет-фактура"" не допускается!'"),
		ТекСтрока.ДокументОснование,
		НайденныйСчетФактура.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗапасыПоТЧДокументыОснования()
	
	Запасы.Очистить();
	Предоплата.Очистить();
	ДатаНомерДокументовОплаты.Очистить();
	
	Для каждого СтрокаДокументыОснования Из ДокументыОснования Цикл
		
		Если ТипЗнч(СтрокаДокументыОснования.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеВКассу") Тогда
			
			ЗаполнитьПоПоступлениеВКассу(СтрокаДокументыОснования.ДокументОснование);
			
		ИначеЕсли ТипЗнч(СтрокаДокументыОснования.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			
			ЗаполнитьПоПоступлениеНаСчет(СтрокаДокументыОснования.ДокументОснование);
			
		ИначеЕсли ТипЗнч(СтрокаДокументыОснования.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			
			ЗаполнитьПоОтчетуКомитенту(СтрокаДокументыОснования.ДокументОснование);
			
			// Эквайринг
		ИначеЕсли ТипЗнч(СтрокаДокументыОснования.ДокументОснование) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			
			ЗаполнитьПоОперацииПоПлатежнымКартам(СтрокаДокументыОснования.ДокументОснование);
			
			// Конец Эквайринг
			
		ИначеЕсли ТипЗнч(СтрокаДокументыОснования.ДокументОснование) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
			
			ЗаполнитьПоПриемуВРемонт(СтрокаДокументыОснования.ДокументОснование);
			
		Иначе
			
			ЗаполнитьПоПрочимДокументам(СтрокаДокументыОснования.ДокументОснование);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Договор.РасчетыВУсловныхЕдиницах И ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		Запасы.Свернуть(
		"Номенклатура, Содержание, Характеристика, Партия, ЕдиницаИзмерения, Цена, СтавкаНДС, СтранаПроисхождения, НомерГТД, ДокументОснование",
		"Количество, Сумма, СуммаНДС, Всего");
	Иначе
		Запасы.Свернуть(
		"Номенклатура, Содержание, Характеристика, Партия, ЕдиницаИзмерения, Цена, СтавкаНДС, СтранаПроисхождения, НомерГТД",
		"Количество, Сумма, СуммаНДС, Всего");
	КонецЕсли;

КонецПроцедуры

// Заполняет табличную часть запасами и распределяет суму аванса между строками
//
Процедура ЗаполнитьТабличнуюЧастьЗапасы(СтрокаРасшифровкиПлатежа, ДокументЗапасов)
	
	ИмяТабличнойЧасти	= "Запасы";
	
	СуммыРаспределения = Новый Структура;
	СуммыРаспределения.Вставить("Сумма", 	СтрокаРасшифровкиПлатежа.Сумма);
	СуммыРаспределения.Вставить("СуммаНДС", СтрокаРасшифровкиПлатежа.СуммаНДС);
	СуммыРаспределения.Вставить("Всего",	СтрокаРасшифровкиПлатежа.Всего);
	
	ВсегоПоДокументуЗапасов = 0;
	КоличествоСтрок = 0;
	Для каждого СтрокаТЧ Из ДокументЗапасов[ИмяТабличнойЧасти] Цикл
		
		Если СтрокаРасшифровкиПлатежа.СтавкаНДС = СтрокаТЧ.СтавкаНДС Тогда
			
			ВсегоПоДокументуЗапасов = ВсегоПоДокументуЗапасов + СтрокаТЧ.Всего;
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСтрок = 0
		ИЛИ ВсегоПоДокументуЗапасов = 0 Тогда
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровкиПлатежа);
		
		//Нет строк подходящих для распределения суммы, создадим "обезличенную" авансовую строку
		НоваяСтрока.Содержание = "Предварительная оплата";
		
		// Если ставка НДС не рсчетная, то подставим расчетную ставку
		Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И НЕ НоваяСтрока.СтавкаНДС.Расчетная Тогда
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(НоваяСтрока.СтавкаНДС);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из ДокументЗапасов[ИмяТабличнойЧасти] Цикл
		
		Если СтрокаРасшифровкиПлатежа.СтавкаНДС = СтрокаДокумента.СтавкаНДС Тогда
			
			НоваяСтрока = Запасы.Добавить();
			НоваяСтрока.Номенклатура		= СтрокаДокумента.Номенклатура;
			НоваяСтрока.Содержание			= СтрокаДокумента.Содержание;
			НоваяСтрока.Характеристика		= СтрокаДокумента.Характеристика;
			НоваяСтрока.Партия				= СтрокаДокумента.Партия;
			НоваяСтрока.ЕдиницаИзмерения	= СтрокаДокумента.ЕдиницаИзмерения;
			НоваяСтрока.Количество			= СтрокаДокумента.Количество;
			НоваяСтрока.СтавкаНДС			= СтрокаДокумента.СтавкаНДС;
			КоэфициентНоменклатуры 			= СтрокаДокумента.Всего / ВсегоПоДокументуЗапасов;
			
			Если КоличествоСтрок = 1 Тогда
				
				// Если последняя строка, перенесем оставшиеся суммы 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СуммыРаспределения);
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
				
			Иначе
				
				Для каждого Показатель Из СуммыРаспределения Цикл
					
					НоваяСтрока[Показатель.Ключ] = Окр(СтрокаРасшифровкиПлатежа[Показатель.Ключ] * КоэфициентНоменклатуры, 2);
					СуммыРаспределения.Вставить(Показатель.Ключ, Показатель.Значение - НоваяСтрока[Показатель.Ключ]);
					
					Если Показатель.Ключ = "Сумма" Тогда
						
						НоваяСтрока.Цена = НоваяСтрока.Сумма;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Если ставка НДС не рсчетная, то подставим расчетную ставку
			Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И НЕ НоваяСтрока.СтавкаНДС.Расчетная Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(НоваяСтрока.СтавкаНДС);
			КонецЕсли;
			
			КоличествоСтрок = КоличествоСтрок - 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТовараТабличнуюЧасть()

// Процедура заполняет документ на основании ОтчетКомитенту.
//
Процедура ЗаполнитьПоОтчетуКомитенту(ДанныеЗаполнения) Экспорт
	
	Запрос			= Новый Запрос;
	
	Запрос.Текст	= 
	"ВЫБРАТЬ
	|	ОтчетКомитентуЗапасы.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомитентуЗапасы.СуммаВознаграждения = 0
	|				ТОГДА 0
	|			КОГДА ОтчетКомитентуЗапасы.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетКомитентуЗапасы.СуммаВознаграждения / ((ОтчетКомитентуЗапасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ ОтчетКомитентуЗапасы.СуммаВознаграждения
	|		КОНЕЦ) КАК Цена,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомитентуЗапасы.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетКомитентуЗапасы.СуммаВознаграждения / ((ОтчетКомитентуЗапасы.СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ ОтчетКомитентуЗапасы.СуммаВознаграждения
	|		КОНЕЦ) КАК Сумма,
	|	ОтчетКомитентуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОтчетКомитентуЗапасы.СуммаНДСВознаграждения) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетКомитентуЗапасы.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетКомитентуЗапасы.СуммаВознаграждения
	|			ИНАЧЕ ОтчетКомитентуЗапасы.СуммаВознаграждения + ОтчетКомитентуЗапасы.СуммаНДСВознаграждения
	|		КОНЕЦ) КАК Всего
	|ПОМЕСТИТЬ Вознаграждение
	|ИЗ
	|	Документ.ОтчетКомитенту.Запасы КАК ОтчетКомитентуЗапасы
	|ГДЕ
	|	ОтчетКомитентуЗапасы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомитентуЗапасы.Ссылка,
	|	ОтчетКомитентуЗапасы.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор КАК Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	ИСТИНА КАК ОнЖе,
	|	""Комиссионное вознаграждение"" КАК Содержание,
	|	1 КАК Количество,
	|	Вознаграждение.Цена КАК Цена,
	|	Вознаграждение.Сумма КАК Сумма,
	|	Вознаграждение.СтавкаНДС КАК СтавкаНДС,
	|	Вознаграждение.СуммаНДС КАК СуммаНДС,
	|	Вознаграждение.Всего КАК Всего
	|ИЗ
	|	Документ.ОтчетКомитенту КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вознаграждение КАК Вознаграждение
	|		ПО Документ.Ссылка = Вознаграждение.Ссылка
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Ссылка,
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,
	|	Вознаграждение.Цена,
	|	Вознаграждение.Сумма,
	|	Вознаграждение.СтавкаНДС,
	|	Вознаграждение.СуммаНДС,
	|	Вознаграждение.Всего";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;
		
		Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
			
			СтруктураПоВалюте	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
			Курс 				= СтруктураПоВалюте.Курс;
			Кратность			= СтруктураПоВалюте.Кратность;
			
		КонецЕсли;
		
		Запасы.Очистить();
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИзРезультатаЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьПоОтчетуКомитенту()

// Процедура заполняет документ на основании ПоступлениеВКассу.
//
Процедура ЗаполнитьПоПоступлениеВКассу(ДанныеЗаполнения, ЗаполнениеПоНесколькимДокументам = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеДСРасшифровкаПлатежа.Ссылка КАК ПлатежныйДокумент,
	|	ПоступлениеДСРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоступлениеДСРасшифровкаПлатежа.СуммаПлатежа - ПоступлениеДСРасшифровкаПлатежа.СуммаНДС) КАК Сумма,
	|	СУММА(ПоступлениеДСРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ПоступлениеДСРасшифровкаПлатежа.СуммаПлатежа) КАК Всего,
	|	ПоступлениеДСРасшифровкаПлатежа.Заказ КАК ЗаказПокупателя,
	|	ПоступлениеДСРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	Документ.ПоступлениеВКассу.РасшифровкаПлатежа КАК ПоступлениеДСРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеДСРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ПоступлениеДСРасшифровкаПлатежа.ПризнакАванса
	|	И ПоступлениеДСРасшифровкаПлатежа.СтавкаНДС.Ставка > 0
	|	И НЕ ПоступлениеДСРасшифровкаПлатежа.СтавкаНДС.НеОблагается
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДСРасшифровкаПлатежа.Ссылка,
	|	ПоступлениеДСРасшифровкаПлатежа.СтавкаНДС,
	|	ПоступлениеДСРасшифровкаПлатежа.Заказ,
	|	ПоступлениеДСРасшифровкаПлатежа.СчетНаОплату";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверка данных для счета-фактуры на аванс
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстИсключения = НСтр("ru = 'Нет данных для счета-фактуры на аванс!
							|Основание ""%ДокументОснование"".'");
		
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ДокументОснование", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	//Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Проведен, ПометкаУдаления, Номер, Дата");
	
	Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ЭтотОбъект.Договор = ДанныеЗаполнения.РасшифровкаПлатежа[0].Договор;
		
	КонецЕсли;
	
	ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс;
	ДокументОснование = ДанныеЗаполнения;
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте 	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
		Курс 				= СтруктураПоВалюте.Курс;
		Кратность 			= СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	//Заполнение ТЧ
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		// Если счет указан, то берем перечень ТЧ из счета и распределяем сумму документа
		Если ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.СчетНаОплату) Тогда
			ДокументДляЗаполненияТЧ = ВыборкаРезультатаЗапроса.СчетНаОплату;
		ИначеЕсли ТипЗнч(ВыборкаРезультатаЗапроса.ЗаказПокупателя) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
			ДокументДляЗаполненияТЧ = Неопределено;
		Иначе
			ДокументДляЗаполненияТЧ = ВыборкаРезультатаЗапроса.ЗаказПокупателя;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументДляЗаполненияТЧ) Тогда
			
			ЗаполнитьТабличнуюЧастьЗапасы(ВыборкаРезультатаЗапроса, ДокументДляЗаполненияТЧ);
			
		Иначе
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			
			НоваяСтрока.Количество = 1;
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
			
			//Если номенклатура осталось пустой, заполним поле содержание
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.Содержание = "Предварительная оплата";
			КонецЕсли;
			
			// Если ставка НДС не рсчетная, то подставим расчетную ставку
			Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И НЕ НоваяСтрока.СтавкаНДС.Расчетная Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(НоваяСтрока.СтавкаНДС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДатаНомерДокументовОплаты = ДатаНомерДокументовОплаты.Добавить();
	СтрокаДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента = ДанныеЗаполнения.Дата;
	СтрокаДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента = ДанныеЗаполнения.Номер;
	
КонецПроцедуры // ЗаполнитьПоПоступлениеВКассу()

// Процедура заполняет документ на основании ПоступлениеНаСчет.
//
Процедура ЗаполнитьПоПоступлениеНаСчет(ДанныеЗаполнения, ЗаполнениеПоНесколькимДокументам = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеДСРасшифровкаПлатежа.Ссылка КАК ПлатежныйДокумент,
	|	ПоступлениеДСРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоступлениеДСРасшифровкаПлатежа.СуммаПлатежа - ПоступлениеДСРасшифровкаПлатежа.СуммаНДС) КАК Сумма,
	|	СУММА(ПоступлениеДСРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ПоступлениеДСРасшифровкаПлатежа.СуммаПлатежа) КАК Всего,
	|	ПоступлениеДСРасшифровкаПлатежа.Заказ КАК ЗаказПокупателя,
	|	ПоступлениеДСРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	Документ.ПоступлениеНаСчет.РасшифровкаПлатежа КАК ПоступлениеДСРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеДСРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ПоступлениеДСРасшифровкаПлатежа.ПризнакАванса
	|	И ПоступлениеДСРасшифровкаПлатежа.СтавкаНДС.Ставка > 0
	|	И НЕ ПоступлениеДСРасшифровкаПлатежа.СтавкаНДС.НеОблагается
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеДСРасшифровкаПлатежа.Ссылка,
	|	ПоступлениеДСРасшифровкаПлатежа.СтавкаНДС,
	|	ПоступлениеДСРасшифровкаПлатежа.Заказ,
	|	ПоступлениеДСРасшифровкаПлатежа.СчетНаОплату";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверка данных для счета-фактуры на аванс
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстИсключения = НСтр("ru = 'Нет данных для счета-фактуры на аванс!
							|Основание ""%ДокументОснование"".'");
		
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ДокументОснование", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	//Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Проведен, ПометкаУдаления, Номер, Дата");
	
	Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		Для каждого СтрокаРасшифровки Из ДанныеЗаполнения.РасшифровкаПлатежа Цикл
			
			Если СтрокаРасшифровки.СтавкаНДС.Ставка > 0 Тогда
				
				ЭтотОбъект.Договор = СтрокаРасшифровки.Договор;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДенежныхСредств;
	ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс;
	ДокументОснование = ДанныеЗаполнения;
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте 	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
		Курс 				= СтруктураПоВалюте.Курс;
		Кратность 			= СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	//Заполнение ТЧ
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		// Если счет указан, то берем перечень ТЧ из счета и распределяем сумму документа
		ДокументДляЗаполненияТЧ = ?(ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.СчетНаОплату),
				ВыборкаРезультатаЗапроса.СчетНаОплату,
				ВыборкаРезультатаЗапроса.ЗаказПокупателя);
		
		Если ЗначениеЗаполнено(ДокументДляЗаполненияТЧ) Тогда
			
			ЗаполнитьТабличнуюЧастьЗапасы(ВыборкаРезультатаЗапроса, ДокументДляЗаполненияТЧ);
			
		Иначе
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			
			НоваяСтрока.Количество = 1;
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
			
			//Если номенклатура осталось пустой, заполним поле содержание
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.Содержание = "Предварительная оплата";
			КонецЕсли;
			
			// Если ставка НДС не рсчетная, то подставим расчетную ставку
			Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И НЕ НоваяСтрока.СтавкаНДС.Расчетная Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(НоваяСтрока.СтавкаНДС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ДатаВходящегоДокумента)
		ИЛИ ЗначениеЗаполнено(ДанныеЗаполнения.НомерВходящегоДокумента) Тогда
		
		СтрокаДатаНомерДокументовОплаты = ДатаНомерДокументовОплаты.Добавить();
		СтрокаДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента = ДанныеЗаполнения.ДатаВходящегоДокумента;
		СтрокаДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента = ДанныеЗаполнения.НомерВходящегоДокумента;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПоступлениеНаСчет()

// Процедура заполняет документ на основании.
//
Процедура ЗаполнитьПоПокупателямОтчетаКомиссионера(СтруктураЗаполнения) Экспорт
	
	// Заполнение шапки.
	ДанныеЗаполнения = СтруктураЗаполнения.Ссылка;
	Дата = СтруктураЗаполнения.Дата;
	ВидОперации = Перечисления.ВидыОперацийСчетФактура.Продажа;
	Организация = СтруктураЗаполнения.Организация;
	Контрагент = СтруктураЗаполнения.Покупатель;
	Договор = СтруктураЗаполнения.Покупатель.ДоговорПоУмолчанию;
	СводныйКомиссионный = СтруктураЗаполнения.СводныйКомиссионный;
	ВалютаДокумента = СтруктураЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = СтруктураЗаполнения.СуммаВключаетНДС;
	Курс = СтруктураЗаполнения.Курс;
	Кратность  = СтруктураЗаполнения.Кратность;
	ОнЖе = Истина;
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	ДокументОснование = ДанныеЗаполнения;
	
	// Заполнение ТЧ.
	Запасы.Очистить();
	РезультатПоиска = СтруктураЗаполнения.Запасы;
	Для Каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
		ИначеЕсли СуммаВключаетНДС Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100) / НоваяСтрока.Количество;
		Иначе
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		КонецЕсли;
		
		Если СуммаВключаетНДС Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоПокупателямОтчетаКомиссионера()

// Процедура заполнения документа на основании расходной накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РасходнаяНакладная - расходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПриемуВРемонт(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ВидОперации = Перечисления.ВидыОперацийСчетФактура.Продажа;
		
	Организация = ДанныеЗаполнения.Организация;
	Контрагент = ДанныеЗаполнения.Контрагент;
	Договор = ДанныеЗаполнения.Договор;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	
	Если ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		Курс = ДанныеЗаполнения.Курс;
		Кратность = ДанныеЗаполнения.Кратность;
	Иначе
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Запасы.Очистить();
	
	СтрокаЗапасы = Запасы.Добавить();
	Если СокрЛП(ДанныеЗаполнения.ОписаниеРемонта)="" Тогда
		СтрокаЗапасы.Содержание = "Ремонт";
	Иначе	
		СтрокаЗапасы.Содержание = ДанныеЗаполнения.ОписаниеРемонта;
	КонецЕсли;
	
	СтрокаЗапасы.Количество = 1;
	СтрокаЗапасы.Всего = ДанныеЗаполнения.СуммаДокумента;
	СтрокаЗапасы.СтавкаНДС = ДанныеЗаполнения.СтавкаНДС;
	СтрокаЗапасы.СуммаНДС = ДанныеЗаполнения.СуммаНДС;
	
	СтрокаЗапасы.Сумма = СтрокаЗапасы.Всего - СтрокаЗапасы.СуммаНДС;
	СтрокаЗапасы.Цена = СтрокаЗапасы.Сумма;
	
КонецПроцедуры // ЗаполнитьПоРасходнаяНакладная()

// Процедура заполняет документ на основании.
//
Процедура ЗаполнитьПоПрочимДокументам(ДанныеЗаполнения) Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Тип("ДокументСсылка.РасходнаяНакладная"), "РасходнаяНакладная");
	Соответствие.Вставить(Тип("ДокументСсылка.КорректировкаРеализации"), "КорректировкаРеализации");
	Соответствие.Вставить(Тип("ДокументСсылка.ОтчетОПереработке"), "ОтчетОПереработке");
	Соответствие.Вставить(Тип("ДокументСсылка.АктВыполненныхРабот"), "АктВыполненныхРабот");
	Соответствие.Вставить(Тип("ДокументСсылка.ОтчетКомитенту"), "ОтчетКомитенту");
	Соответствие.Вставить(Тип("ДокументСсылка.ОтчетКомиссионера"), "ОтчетКомиссионера");
	Соответствие.Вставить(Тип("ДокументСсылка.СчетНаОплату"), "СчетНаОплату");
	Соответствие.Вставить(Тип("ДокументСсылка.ЗаказПокупателя"), "ЗаказПокупателя");
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ВызватьИсключение НСтр("ru = 'Счет-фактуру можно ввести только на основании заказ-наряда!'");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ИмяТабличнойЧасти = "РаботыИУслуги";
		Партия = "";
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		ИмяТабличнойЧасти = "Продукция";
		Партия = "
		|		Партия,";
	Иначе
		ИмяТабличнойЧасти = "Запасы";
		Партия = "
		|		Партия,";
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитенту")
	 ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		Содержание = "NULL";
	Иначе
		Содержание = "Содержание";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК ДокументОснование,";
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		Запрос.Текст = Запрос.Текст + "ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Аванс) КАК ВидОперации,";
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ВидОперацииКорректировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВидОперации");
		Если ВидОперацииКорректировки = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			Запрос.Текст = Запрос.Текст + "ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка) КАК ВидОперации,";
		Иначе
			Запрос.Текст = Запрос.Текст + "ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации,
				|	ИСТИНА КАК Исправление,";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "Документ.НомерИсправления,";
	Иначе
		Запрос.Текст = Запрос.Текст + "ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа) КАК ВидОперации,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	Документ.Организация,
	|	Документ.Контрагент,
	|	Документ.Договор КАК Договор,
	|	Документ.ВалютаДокумента,
	|	Документ.Курс,
	|	Документ.Кратность,"
	+ ?(ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная") 
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации"),
		"		Документ.Грузоотправитель КАК Грузоотправитель,
		|		Документ.Грузополучатель КАК Грузополучатель,
		|		ВЫБОР
		|			КОГДА Документ.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ОнЖе,",
		"		ИСТИНА КАК ОнЖе,")
	+ ?(ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.СчетНаОплату"),
		"Документ.Предоплата.(
		|		НомерСтроки,
		|		Документ,
		|		СуммаРасчетов,
		|		Курс,
		|		Кратность,
		|		СуммаПлатежа,
		|		Ссылка КАК ДокументОснование,
		|		Документ КАК ПредоплатаДокумент,
		|		Документ.Номер КАК Номер,
		|		Документ.Дата КАК Дата,
		|		Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
		|		Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|	),",
		"")
	+ "Документ." + ИмяТабличнойЧасти + ".(
	|		Номенклатура,
	|		Характеристика," + Партия + "
	|		" + Содержание + " КАК Содержание,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		ВЫБОР
	|			КОГДА Документ." + ИмяТабличнойЧасти + ".Количество = 0
	|				ТОГДА 0
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Выразить((Документ." + ИмяТабличнойЧасти + ".Сумма - Документ." + ИмяТабличнойЧасти + ".СуммаНДС) / Документ." + ИмяТабличнойЧасти + ".Количество КАК Число (15,2))
	|			ИНАЧЕ Документ." + ИмяТабличнойЧасти + ".Сумма / Документ." + ИмяТабличнойЧасти + ".Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Документ.СуммаВключаетНДС
	|				ТОГДА Документ." + ИмяТабличнойЧасти + ".Сумма / ((Документ." + ИмяТабличнойЧасти + ".СтавкаНДС.Ставка + 100) / 100)
	|			ИНАЧЕ Документ." + ИмяТабличнойЧасти + ".Сумма
	|		КОНЕЦ КАК Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,"
	+ ?(ИмяТабличнойЧасти = "Запасы"
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная") 
				ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") 
				ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя")),"
	|		СтранаПроисхождения,
	|		НомерГТД,",
	"") +
	"		Всего
	|	)"
	+ ?(ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя"), 
		",
		|	Документ.Работы.(
		|		Номенклатура,
		|		Характеристика,
		|		Содержание КАК Содержание,
		|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Документ.Работы.Количество *  Документ.Работы.Коэффициент *  Документ.Работы.Кратность КАК Количество,
		|		ВЫБОР
		|			КОГДА Документ.Работы.Количество *  Документ.Работы.Коэффициент *  Документ.Работы.Кратность = 0
		|				ТОГДА 0
		|			КОГДА Документ.СуммаВключаетНДС
		|				ТОГДА Документ.Работы.Сумма / ((Документ.Работы.СтавкаНДС.Ставка + 100) / 100) / (Документ.Работы.Количество *  Документ.Работы.Коэффициент *  Документ.Работы.Кратность)
		|			ИНАЧЕ Документ.Работы.Сумма / (Документ.Работы.Количество *  Документ.Работы.Коэффициент *  Документ.Работы.Кратность)
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР
		|			КОГДА Документ.СуммаВключаетНДС
		|				ТОГДА Документ.Работы.Сумма / ((Документ.Работы.СтавкаНДС.Ставка + 100) / 100)
		|			ИНАЧЕ Документ.Работы.Сумма
		|		КОНЕЦ КАК Сумма,
		|		СтавкаНДС,
		|		СуммаНДС,
		|		Всего
		|	)",
		"")
	+ "ИЗ
	|	Документ." + Соответствие.Получить(ТипЗнч(ДанныеЗаполнения)) + " КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;
		
		// Курс и кратность берутся из документа-основания.
		//Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		//	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		//	Курс = СтруктураПоВалюте.Курс;
		//	Кратность = СтруктураПоВалюте.Кратность;
		//КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			РеквизитыКорректировочногоСчетФактуры = Документы.СчетФактура.ПолучитьПараметрыЗаполненияКорректировочногоСчетаФактуры(ДанныеЗаполнения);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКорректировочногоСчетФактуры, "ИсправляемыйСчетФактура, ВидОперации, НомерИсходногоДокумента, 
				|ДатаИсходногоДокумента, НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента, НомерИсправления, Исправление");
				
			Если ДокументыОснования.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ДокументыОснования[0], РеквизитыКорректировочногоСчетФактуры, 
					"НомерИсходногоДокумента, ДатаИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаЗапасов = ВыборкаИзРезультатаЗапроса[ИмяТабличнойЧасти].Выгрузить();
		Для каждого СтрокаТаблицаЗапасов Из ТаблицаЗапасов Цикл
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаЗапасов);
			
			// Если ставка НДС не рсчетная, то подставим расчетную ставку
			Если ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс
				И ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС)
				И НЕ НоваяСтрока.СтавкаНДС.Расчетная Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(НоваяСтрока.СтавкаНДС);
			КонецЕсли;
			
			Если Договор.РасчетыВУсловныхЕдиницах И ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
				НоваяСтрока.ДокументОснование = ДанныеЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполним информацию о предоплате.
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.СчетНаОплату") Тогда
			ТаблицаПредоплаты = ВыборкаИзРезультатаЗапроса.Предоплата.Выгрузить();
			Для каждого СтрокаТаблицаПредоплаты Из ТаблицаПредоплаты Цикл
				Если ТипЗнч(СтрокаТаблицаПредоплаты.ПредоплатаДокумент) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицаПредоплаты.ДатаВходящегоДокумента)
					 ИЛИ ЗначениеЗаполнено(СтрокаТаблицаПредоплаты.НомерВходящегоДокумента) Тогда
						НоваяСтрока = ДатаНомерДокументовОплаты.Добавить();
						НоваяСтрока.ДатаПлатежноРасчетногоДокумента = СтрокаТаблицаПредоплаты.ДатаВходящегоДокумента;
						НоваяСтрока.НомерПлатежноРасчетногоДокумента = СтрокаТаблицаПредоплаты.НомерВходящегоДокумента;
					КонецЕсли;
				Иначе
					НоваяСтрока = ДатаНомерДокументовОплаты.Добавить();
					НоваяСтрока.ДатаПлатежноРасчетногоДокумента = СтрокаТаблицаПредоплаты.Дата;
					НоваяСтрока.НомерПлатежноРасчетногоДокумента = СтрокаТаблицаПредоплаты.Номер;
				КонецЕсли;
				
				Если НеобходимоОтразитьРублевыеСуммыДокумента() Тогда
					НоваяСтрокаПредоплата = Предоплата.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПредоплата, СтрокаТаблицаПредоплаты);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Работы = ВыборкаИзРезультатаЗапроса.Работы.Выгрузить();
			Для каждого ТекСтрокаРаботы Из Работы Цикл
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаРаботы);
				Если Договор.РасчетыВУсловныхЕдиницах И ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
					НоваяСтрока.ДокументОснование = ДанныеЗаполнения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
			ЭтотОбъект.ОснованиеПечати = ДанныеЗаполнения.ОснованиеПечати;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД()
	
	Возврат ГрузовыеТаможенныеДекларацииСервер.НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД(Ссылка);
	
КонецФункции

Функция НеобходимоОтразитьРублевыеСуммыДокумента()
	
	Возврат (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Продажа")
		ИЛИ
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Корректировка"))
		И Договор.РасчетыВУсловныхЕдиницах
		И ВалютаДокумента <> Константы.НациональнаяВалюта.Получить()
		И Договор.ВалютаРасчетов <> Константы.НациональнаяВалюта.Получить();
	
КонецФункции

#КонецОбласти

#Область Эквайринг

// Процедура заполняет документ на основании ПоступлениеВКассу.
//
Процедура ЗаполнитьПоОперацииПоПлатежнымКартам(ДанныеЗаполнения, ЗаполнениеПоНесколькимДокументам = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка КАК ПлатежныйДокумент,
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СуммаПлатежа - ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СуммаНДС) КАК Сумма,
	|	СУММА(ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СуммаПлатежа) КАК Всего,
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Заказ КАК ЗаказПокупателя,
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	Документ.ОперацияПоПлатежнымКартам.РасшифровкаПлатежа КАК ОперацияПоПлатежнымКартамРасшифровкаПлатежа
	|ГДЕ
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И ОперацияПоПлатежнымКартамРасшифровкаПлатежа.ПризнакАванса
	|	И ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СтавкаНДС.Ставка > 0
	|	И НЕ ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СтавкаНДС.НеОблагается
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Ссылка,
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СтавкаНДС,
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.Заказ,
	|	ОперацияПоПлатежнымКартамРасшифровкаПлатежа.СчетНаОплату";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверка данных для счета-фактуры на аванс
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстИсключения = НСтр("ru = 'Нет данных для счета-фактуры на аванс!
							|Основание ""%ДокументОснование"".'");
		
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ДокументОснование", ДанныеЗаполнения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	//Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Проведен, ПометкаУдаления, Номер, Дата");
	
	Если ДанныеЗаполнения.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ЭтотОбъект.Договор = ДанныеЗаполнения.РасшифровкаПлатежа[0].Договор;
		
	КонецЕсли;
	
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДенежныхСредств;
	ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс;
	ДокументОснование = ДанныеЗаполнения;
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		
		СтруктураПоВалюте 	= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
		Курс 				= СтруктураПоВалюте.Курс;
		Кратность 			= СтруктураПоВалюте.Кратность;
		
	КонецЕсли;
	
	//Заполнение ТЧ
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		// Если счет указан, то берем перечень ТЧ из счета и распределяем сумму документа
		ДокументДляЗаполненияТЧ = ?(ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.СчетНаОплату),
				ВыборкаРезультатаЗапроса.СчетНаОплату,
				ВыборкаРезультатаЗапроса.ЗаказПокупателя);
		
		Если ЗначениеЗаполнено(ДокументДляЗаполненияТЧ) Тогда
			
			ЗаполнитьТабличнуюЧастьЗапасы(ВыборкаРезультатаЗапроса, ДокументДляЗаполненияТЧ);
			
		Иначе
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			
			НоваяСтрока.Количество = 1;
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
			
			//Если номенклатура осталось пустой, заполним поле содержание
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.Содержание = "Предварительная оплата";
			КонецЕсли;
			
			// Если ставка НДС не рсчетная, то подставим расчетную ставку
			Если ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) И НЕ НоваяСтрока.СтавкаНДС.Расчетная Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(НоваяСтрока.СтавкаНДС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДатаНомерДокументовОплаты = ДатаНомерДокументовОплаты.Добавить();
	СтрокаДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента = ДанныеЗаполнения.Дата;
	СтрокаДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента = ДанныеЗаполнения.Номер;
	
КонецПроцедуры // ЗаполнитьПоПоступлениеВКассу()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ОбработчикЗаполнения");
	
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		ОнЖе = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента)
		И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ПроверяемыеРеквизиты.Добавить("Запасы.Количество");
		ПроверяемыеРеквизиты.Добавить("Запасы.Цена");
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") 
			ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
			//номенклатура не заполнена, вместо нее - содержание
		Иначе
			ПроверяемыеРеквизиты.Добавить("Запасы.Номенклатура");
			ПроверяемыеРеквизиты.Добавить("Запасы.ЕдиницаИзмерения");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Исправление Тогда
		
		ПроверяемыеРеквизиты.Добавить("НомерИсправления");
		ПроверяемыеРеквизиты.Добавить("ДатаИсправления");
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		Для каждого СтрокаТаблицыЗапасов Из Запасы Цикл
			
			Если НЕ ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс
				И ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НомерГТД)
				И (НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.СтранаПроисхождения)
				ИЛИ СтрокаТаблицыЗапасов.СтранаПроисхождения = Справочники.СтраныМира.Россия) Тогда
				
				ТекстОшибки = НСтр("ru = 'В строке [%НомерСтрокиСОшибкой%] не верно указана страна происхождения'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтрокиСОшибкой%", СокрЛП(СтрокаТаблицыЗапасов.НомерСтроки));
				
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект, 
				ТекстОшибки,
				"Запасы",
				СтрокаТаблицыЗапасов.НомерСтроки,
				"СтранаПроисхождения",
				Отказ
				);
				
			КонецЕсли;
			
			Если НЕ (ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс 
				ИЛИ ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента)
				И (ЗначениеЗаполнено(СтрокаТаблицыЗапасов.СтранаПроисхождения)
				И НЕ СтрокаТаблицыЗапасов.СтранаПроисхождения = Справочники.СтраныМира.Россия)
				И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НомерГТД) Тогда
				
				ТекстОшибки = НСтр("ru = 'В строке [%НомерСтрокиСОшибкой%] не указан номер ГТД'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтрокиСОшибкой%", СокрЛП(СтрокаТаблицыЗапасов.НомерСтроки));
				
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстОшибки,
				"Запасы",
				СтрокаТаблицыЗапасов.НомерСтроки,
				"НомерГТД",
				Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	//  Документ основание должен быть проведен (документы)
	МассивДокументовОснований		= ДокументыОснования.Выгрузить();
	НоваяСтрока						= МассивДокументовОснований.Добавить();
	НоваяСтрока.ДокументОснование	= ДокументОснование;
	
	МассивДокументовОснований.Свернуть("ДокументОснование");
	
	Для каждого СтрокаТаблицы Из МассивДокументовОснований Цикл
		
		ДокументОснование = СтрокаТаблицы.ДокументОснование;
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И НЕ ДокументОснование.Проведен Тогда
			
			ТекстОшибки = НСтр("ru = 'Документ-основание %ПредставлениеДокументаОснования% не проведен. Проведение счет фактуры невозможно.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеДокументаОснования%", """" + ТипЗнч(ДокументОснование) + " №" + ДокументОснование.Номер + " от " + ДокументОснование.Дата + """");
			
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстОшибки, , , , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Запасы.Сумма");
	КонецЕсли;
	
	Если НеобходимоОтразитьРублевыеСуммыДокумента() Тогда
		Если ДокументыОснования.Количество() > 1 Тогда
			
			Для Каждого ТекущаяСтрока Из Запасы Цикл
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование) Тогда
					ТекстОшибки = НСтр("ru = 'В строке [%НомерСтрокиСОшибкой%] не указан документ-основание'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтрокиСОшибкой%", СокрЛП(ТекущаяСтрока.НомерСтроки));
					
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстОшибки,
					"Запасы",
					ТекущаяСтрока.НомерСтроки,
					"ДокументОснование",
					Отказ
					);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекущаяСтрока Из Предоплата Цикл
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование) Тогда
					ТекстОшибки = НСтр("ru = 'В строке [%НомерСтрокиСОшибкой%] не указан документ-основание'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтрокиСОшибкой%", СокрЛП(ТекущаяСтрока.НомерСтроки));
					
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстОшибки,
					"Предоплата",
					ТекущаяСтрока.НомерСтроки,
					"ДокументОснование",
					Отказ
					);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДокументыОснования.Количество() = 1 И НЕ ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не выбран документ-основание.'");
			
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстОшибки, , , "ДокументОснование", Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка на уникальность счета-фактуры
	Если ЗначениеЗаполнено(ДокументОснование) И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ДокументОснование);
		Если ЗначениеЗаполнено(НайденныйСчетФактура) И НайденныйСчетФактура.Ссылка <> Ссылка Тогда
		
			ТекстСообщения = НСтр("ru = 'Для документа ""%Ссылка%"" 
									|уже введен счет-фактура ""%СчетФактура%"". 
									|Запись еще одного документа ""Счет-фактура"" не допускается!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ДокументОснование);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетФактура%", НайденныйСчетФактура.Ссылка);
			ПолеСообщения = "Объект.ДокументОснование";
			
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,,ПолеСообщения, Отказ);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
	Если НеобходимоОтразитьРублевыеСуммыДокумента() И ДокументыОснования.Количество() = 1 Тогда
		Для Каждого ТекущаяСтрока Из Запасы Цикл
			ТекущаяСтрока.ДокументОснование = ДокументыОснования[0].ДокументОснование;
		КонецЦикла;
		Для Каждого ТекущаяСтрока Из Предоплата Цикл
			ТекущаяСтрока.ДокументОснование = ДокументыОснования[0].ДокументОснование;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД() ИЛИ НеобходимоОтразитьРублевыеСуммыДокумента() Тогда
		
		// Инициализация дополнительных свойств для проведения документа.
		УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		ДополнительныеСвойства.Вставить("НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД", НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД());
		
		// Инициализация данных документа.
		Документы.СчетФактура.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
		// Подготовка наборов записей.
		УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
		
		// Отражение в разделах учета.
		УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
		
		// Рублевые суммы документов
		УправлениеНебольшойФирмойСервер.ОтразитьРублевыеСуммыДокументовВВалюте(ДополнительныеСвойства, Движения, Отказ);
		
		// Запись наборов записей.
		УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
		// Контроль
		Документы.СчетФактура.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
		
		ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.СчетФактура.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
		
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользуетсяОСНО")) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ФункциональнаяОпцияИспользоватьСчетаФактурыИсходящие.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли