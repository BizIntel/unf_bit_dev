#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаСчетФактура, СтруктураДополнительныеСвойства) Экспорт

	// Курсы валют нужно брать на даты документов-оснований.
	// У СФ может быть несоклько курсов валют.
	
	ТЗКурсыВалютДокументовОснований = Новый ТаблицаЗначений;
	ТЗКурсыВалютДокументовОснований.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТЗКурсыВалютДокументовОснований.Колонки.Добавить("ДокументОснование",
		ДокументСсылкаСчетФактура.Метаданные().ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип);
	ТЗКурсыВалютДокументовОснований.Колонки.Добавить("Курс", Новый ОписаниеТипов("Число"));
	ТЗКурсыВалютДокументовОснований.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	ТЗКурсыВалютДокументовОснований.Колонки.Добавить("КурсУпрВал", Новый ОписаниеТипов("Число"));
	ТЗКурсыВалютДокументовОснований.Колонки.Добавить("КратностьУпрВал", Новый ОписаниеТипов("Число"));
	ТЗКурсыВалютДокументовОснований.Колонки.Добавить("КурсРегВал", Новый ОписаниеТипов("Число"));
	ТЗКурсыВалютДокументовОснований.Колонки.Добавить("КратностьРегВал", Новый ОписаниеТипов("Число"));
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	ДокументВВалюте = (ДокументСсылкаСчетФактура.Договор.ВалютаРасчетов <> НациональнаяВалюта) И (ДокументСсылкаСчетФактура.ВалютаДокумента <> НациональнаяВалюта);
	ЭтоПродажа = (ДокументСсылкаСчетФактура.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Продажа
					ИЛИ
				  ДокументСсылкаСчетФактура.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка)
				И ДокументВВалюте;
	
	Если ЭтоПродажа Тогда
		
		ТЗДокументыОснований = ДокументСсылкаСчетФактура.ДокументыОснования.Выгрузить(, "ДокументОснование");
		ТЗДокументыОснований.Свернуть("ДокументОснование");
		
		Для Каждого ТекущаяСтрока Из ТЗДокументыОснований Цикл
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаКурсы = ТЗКурсыВалютДокументовОснований.Добавить();
			НоваяСтрокаКурсы.ДокументОснование = ТекущаяСтрока.ДокументОснование;
			
			// Валюта расчетов по договору.
			Если ТекущаяСтрока.ДокументОснование.ВалютаДокумента = НациональнаяВалюта Тогда
				СтруктураОтбора = Новый Структура("Валюта", ТекущаяСтрока.ДокументОснование.Договор.ВалютаРасчетов);
				СтруктураКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяСтрока.ДокументОснование.Дата, СтруктураОтбора);
				
				НоваяСтрокаКурсы.Курс = СтруктураКурсКратность.Курс;
				НоваяСтрокаКурсы.Кратность = СтруктураКурсКратность.Кратность;
			Иначе
				НоваяСтрокаКурсы.Курс = ТекущаяСтрока.ДокументОснование.Курс;
				НоваяСтрокаКурсы.Кратность = ТекущаяСтрока.ДокументОснование.Кратность;
			КонецЕсли;
			
			// Валюта учета.
			СтруктураОтбора = Новый Структура("Валюта", ВалютаУчета);
			СтруктураКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяСтрока.ДокументОснование.Дата, СтруктураОтбора);
			
			НоваяСтрокаКурсы.КурсУпрВал = СтруктураКурсКратность.Курс;
			НоваяСтрокаКурсы.КратностьУпрВал = СтруктураКурсКратность.Кратность;
			
			// Национальная валюта.
			Если ВалютаУчета = НациональнаяВалюта Тогда
				НоваяСтрокаКурсы.КурсРегВал = НоваяСтрокаКурсы.КурсУпрВал;
				НоваяСтрокаКурсы.КратностьРегВал = НоваяСтрокаКурсы.КратностьУпрВал;
			Иначе
				СтруктураОтбора = Новый Структура("Валюта", НациональнаяВалюта);
				СтруктураКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяСтрока.ДокументОснование.Дата, СтруктураОтбора);
				
				НоваяСтрокаКурсы.КурсРегВал = СтруктураКурсКратность.Курс;
				НоваяСтрокаКурсы.КратностьРегВал = СтруктураКурсКратность.Кратность;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТЗКурсыВалютДокументовОснований", ТЗКурсыВалютДокументовОснований);
	Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаНациональная", НациональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаНакладной", ДокументСсылкаСчетФактура.ВалютаДокумента);
	Запрос.УстановитьПараметр("ЭтоПродажа", ЭтоПродажа);
	
	Запрос.УстановитьПараметр("Ссылка"						, ДокументСсылкаСчетФактура);
	Запрос.УстановитьПараметр("Организация"					, СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени"				, СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики"	, СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии"			, СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	
	Запрос.УстановитьПараметр("НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД", СтруктураДополнительныеСвойства.НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КорректировкаРеализации.ОтражатьВУчете, ИСТИНА) КАК ОтражатьВУчете
	|ПОМЕСТИТЬ Вт_ОтражатьВУчете
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО СчетФактураДокументыОснования.ДокументОснование = КорректировкаРеализации.Ссылка
	|ГДЕ
	|	СчетФактураДокументыОснования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураДокументыОснования.Ссылка
	|ПОМЕСТИТЬ Вт_КорректируемыйСФ
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|ГДЕ
	|	СчетФактураДокументыОснования.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВЫРАЗИТЬ(СчетФактураДокументыОснования.ДокументОснование КАК Документ.КорректировкаРеализации).ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|			ГДЕ
	|				СчетФактураДокументыОснования.Ссылка = &Ссылка
	|				И ТИПЗНАЧЕНИЯ(СчетФактураДокументыОснования.ДокументОснование) = ТИП(Документ.КорректировкаРеализации))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	СчетФактураЗапасы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	МИНИМУМ(СчетФактураЗапасы.НомерСтроки) КАК НомерСтроки,
	|	СчетФактураЗапасы.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СчетФактураЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СчетФактураЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СчетФактураЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СчетФактураЗапасы.Количество
	|			ИНАЧЕ СчетФактураЗапасы.Количество * СчетФактураЗапасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ) КАК Количество,
	|	СчетФактураЗапасы.СтранаПроисхождения,
	|	СчетФактураЗапасы.НомерГТД
	|ИЗ
	|	Документ.СчетФактура.Запасы КАК СчетФактураЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_ОтражатьВУчете КАК Вт_ОтражатьВУчете
	|		ПО (Вт_ОтражатьВУчете.ОтражатьВУчете)
	|ГДЕ
	|	СчетФактураЗапасы.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И &НеобходимоОтразитьСчетФактуройЗапасыВРазрезеГТД
	|	И СчетФактураЗапасы.Ссылка = &Ссылка
	|	И (СчетФактураЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа)
	|			ИЛИ СчетФактураЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураЗапасы.СтранаПроисхождения,
	|	СчетФактураЗапасы.НомерГТД,
	|	СчетФактураЗапасы.Номенклатура,
	|	СчетФактураЗапасы.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СчетФактураЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СчетФактураЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыВРазрезеГТД.Организация,
	|	ЗапасыВРазрезеГТД.Период,
	|	ЗапасыВРазрезеГТД.ВидДвижения,
	|	ЗапасыВРазрезеГТД.НомерСтроки,
	|	ЗапасыВРазрезеГТД.Номенклатура,
	|	ЗапасыВРазрезеГТД.Характеристика,
	|	ЗапасыВРазрезеГТД.Партия,
	|	-ЗапасыВРазрезеГТД.Количество,
	|	ЗапасыВРазрезеГТД.СтранаПроисхождения,
	|	ЗапасыВРазрезеГТД.НомерГТД
	|ИЗ
	|	РегистрНакопления.ЗапасыВРазрезеГТД КАК ЗапасыВРазрезеГТД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_ОтражатьВУчете КАК Вт_ОтражатьВУчете
	|		ПО (Вт_ОтражатьВУчете.ОтражатьВУчете)
	|ГДЕ
	|	ЗапасыВРазрезеГТД.Регистратор В
	|			(ВЫБРАТЬ
	|				Вт_КорректируемыйСФ.Ссылка
	|			ИЗ
	|				Вт_КорректируемыйСФ КАК Вт_КорректируемыйСФ)
	|	И (ЗапасыВРазрезеГТД.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Продажа)
	|			ИЛИ ЗапасыВРазрезеГТД.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактура.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	СчетФактура.Договор.РасчетыВУсловныхЕдиницах КАК ДоговорРасчетыВУсловныхЕдиницах,
	|	СчетФактура.Контрагент,
	|	СчетФактура.ВалютаДокумента,
	|	СчетФактура.Кратность,
	|	СчетФактура.Курс,
	|	СчетФактура.Договор,
	|	СчетФактура.Дата
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка = &Ссылка
	|	И &ЭтоПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&МоментВремени,
	|			Валюта В (&ВалютаУчета, &ВалютаНациональная, &ВалютаНакладной)
	|				ИЛИ Валюта В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаШапка.ДоговорВалютаРасчетов
	|					ИЗ
	|						ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка)) КАК КурсыВалютСрезПоследних
	|ГДЕ
	|	&ЭтоПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗКурсыВалютДокументовОснований.ДокументОснование КАК ДокументОснование,
	|	ТЗКурсыВалютДокументовОснований.Курс КАК Курс,
	|	ТЗКурсыВалютДокументовОснований.Кратность КАК Кратность,
	|	ТЗКурсыВалютДокументовОснований.КурсУпрВал КАК КурсУпрВал,
	|	ТЗКурсыВалютДокументовОснований.КратностьУпрВал КАК КратностьУпрВал,
	|	ТЗКурсыВалютДокументовОснований.КурсРегВал КАК КурсРегВал,
	|	ТЗКурсыВалютДокументовОснований.КратностьРегВал КАК КратностьРегВал
	|ПОМЕСТИТЬ ВТ_КурсыДокОсн
	|ИЗ
	|	&ТЗКурсыВалютДокументовОснований КАК ТЗКурсыВалютДокументовОснований
	|ГДЕ
	|	&ЭтоПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураЗапасы.НомерСтроки КАК НомерСтроки,
	|	СчетФактураЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЛОЖЬ
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СчетФактураЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА СчетФактураЗапасы.СуммаНДС * ВТ_КурсыДокОсн.КурсРегВал * ВТ_КурсыДокОсн.КратностьУпрВал / (ВТ_КурсыДокОсн.КурсУпрВал * ВТ_КурсыДокОсн.КратностьРегВал)
	|					ИНАЧЕ СчетФактураЗапасы.СуммаНДС * ВТ_КурсыДокОсн.Курс * ВТ_КурсыДокОсн.КратностьУпрВал / (ВТ_КурсыДокОсн.КурсУпрВал * ВТ_КурсыДокОсн.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СчетФактураЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА СчетФактураЗапасы.СуммаНДС * ВТ_КурсыДокОсн.КурсРегВал * ВТ_КурсыДокОсн.КратностьУпрВал / (ВТ_КурсыДокОсн.КурсУпрВал * ВТ_КурсыДокОсн.КратностьРегВал)
	|			ИНАЧЕ СчетФактураЗапасы.СуммаНДС * ВТ_КурсыДокОсн.Курс * ВТ_КурсыДокОсн.КратностьУпрВал / (ВТ_КурсыДокОсн.КурсУпрВал * ВТ_КурсыДокОсн.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СчетФактураЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА СчетФактураЗапасы.Всего * ВТ_КурсыДокОсн.КурсРегВал * ВТ_КурсыДокОсн.КратностьУпрВал / (ВТ_КурсыДокОсн.КурсУпрВал * ВТ_КурсыДокОсн.КратностьРегВал)
	|			ИНАЧЕ СчетФактураЗапасы.Всего * ВТ_КурсыДокОсн.Курс * ВТ_КурсыДокОсн.КратностьУпрВал / (ВТ_КурсыДокОсн.КурсУпрВал * ВТ_КурсыДокОсн.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЛОЖЬ
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА СчетФактураЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА СчетФактураЗапасы.СуммаНДС * ВТ_КурсыДокОсн.КурсРегВал * ВТ_КурсыДокОсн.Кратность / (ВТ_КурсыДокОсн.Курс * ВТ_КурсыДокОсн.КратностьРегВал)
	|					ИНАЧЕ СчетФактураЗапасы.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СчетФактураЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА СчетФактураЗапасы.Всего * ВТ_КурсыДокОсн.КурсРегВал * ВТ_КурсыДокОсн.Кратность / (ВТ_КурсыДокОсн.Курс * ВТ_КурсыДокОсн.КратностьРегВал)
	|			ИНАЧЕ СчетФактураЗапасы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СчетФактураЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА СчетФактураЗапасы.Всего
	|			ИНАЧЕ СчетФактураЗапасы.Всего * ВТ_КурсыДокОсн.Курс * ВТ_КурсыДокОсн.КратностьРегВал / (ВТ_КурсыДокОсн.КурсРегВал * ВТ_КурсыДокОсн.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРуб,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СчетФактураЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА СчетФактураЗапасы.СуммаНДС
	|			ИНАЧЕ СчетФактураЗапасы.СуммаНДС * ВТ_КурсыДокОсн.Курс * ВТ_КурсыДокОсн.КратностьРегВал / (ВТ_КурсыДокОсн.КурсРегВал * ВТ_КурсыДокОсн.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСРуб,
	|	СчетФактураЗапасы.Всего КАК ВсегоВалютаДокумента,
	|	СчетФактураЗапасы.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	СчетФактураЗапасы.ДокументОснование,
	|	ВТ_КурсыДокОсн.Курс,
	|	ВТ_КурсыДокОсн.Кратность,
	|	ВТ_КурсыДокОсн.КурсУпрВал,
	|	ВТ_КурсыДокОсн.КратностьУпрВал,
	|	ВТ_КурсыДокОсн.КурсРегВал,
	|	ВТ_КурсыДокОсн.КратностьРегВал,
	|	СчетФактураЗапасы.Ссылка.Ссылка КАК Документ
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.СчетФактура.Запасы КАК СчетФактураЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыДокОсн КАК ВТ_КурсыДокОсн
	|		ПО (ВТ_КурсыДокОсн.ДокументОснование = СчетФактураЗапасы.ДокументОснование),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	СчетФактураЗапасы.Ссылка = &Ссылка
	|	И &ЭтоПродажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаПлатежа * ВТ_КурсыДокОсн.Курс * ВТ_КурсыДокОсн.КратностьУпрВал / (ВТ_КурсыДокОсн.КурсУпрВал * ВТ_КурсыДокОсн.Кратность) КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаРасчетов) КАК СуммаВал,
	|	ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаРубПоКурсуАванса,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ВТ_КурсыДокОсн.Курс / ВТ_КурсыДокОсн.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаРуб,
	|	ТаблицаДокумента.ДокументОснование,
	|	ВТ_КурсыДокОсн.Курс,
	|	ВТ_КурсыДокОсн.Кратность,
	|	ВТ_КурсыДокОсн.КурсУпрВал,
	|	ВТ_КурсыДокОсн.КратностьУпрВал,
	|	ВТ_КурсыДокОсн.КурсРегВал,
	|	ВТ_КурсыДокОсн.КратностьРегВал
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.СчетФактура.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыДокОсн КАК ВТ_КурсыДокОсн
	|		ПО (ВТ_КурсыДокОсн.ДокументОснование = ТаблицаДокумента.ДокументОснование)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И &ЭтоПродажа
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Документ,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.Ссылка.Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов,
	|	ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах,
	|	ТаблицаДокумента.ДокументОснование,
	|	ВТ_КурсыДокОсн.КратностьУпрВал,
	|	ВТ_КурсыДокОсн.КурсРегВал,
	|	ВТ_КурсыДокОсн.Курс,
	|	ВТ_КурсыДокОсн.Кратность,
	|	ВТ_КурсыДокОсн.КурсУпрВал,
	|	ВТ_КурсыДокОсн.КратностьРегВал";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", МассивРезультатов[2].Выгрузить());
	
	// Рублевые суммы документов
	Если ЭтоПродажа
		// Если расчеты в у.е. не ведутся, то печатная форма СФ на продажу (но не на аванс) печатается в валюте.
		// Регистры РасчетыСПокупателями не двигается.
		И ДокументСсылкаСчетФактура.Договор.РасчетыВУсловныхЕдиницах Тогда
		
		ТаблицаВзаиморасчеты = РублевыеСуммыДокументов.ПодготовитьТаблицуДокументаРасчетыВВалюте(ДокументСсылкаСчетФактура, СтруктураДополнительныеСвойства);
		РублевыеСуммыДокументов.РаспределитьАвансыПоТаблицеРеализации(ДокументСсылкаСчетФактура, СтруктураДополнительныеСвойства, ТаблицаВзаиморасчеты);
		РублевыеСуммыДокументов.СформироватьТаблицаРублевыеСуммыДокументовВВалюте(ДокументСсылкаСчетФактура, СтруктураДополнительныеСвойства);
		
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРублевыеСуммыДокументовВВалюте", Новый ТаблицаЗначений);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаСчетФактура, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временная таблицы "ДвиженияЗапасыВРазрезеГТДИзменение"
	// содержат записи, необходимо выполнить контроль поступления товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК Организация,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК Номенклатура,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТД,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК Характеристика,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК Партия,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхождения,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Номенклатура, НомерГТД, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		// Отрицательный остаток по товарам в разрезе ГТД.
		ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			
			ПредставлениеНоменклатурыТекст = УправлениеНебольшойФирмойСервер.ПредставлениеНоменклатуры(ВыборкаИзРезультатаЗапроса.Номенклатура,
				ВыборкаИзРезультатаЗапроса.Характеристика, 
				ВыборкаИзРезультатаЗапроса.Партия);

            Если ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.НомерГТД)Тогда
				ПредставлениеНоменклатурыТекст = ПредставлениеНоменклатурыТекст + " | """ + СокрЛП(ВыборкаИзРезультатаЗапроса.НомерГТД) + """";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.СтранаПроисхождения)Тогда
				ПредставлениеНоменклатурыТекст = ПредставлениеНоменклатурыТекст + " | """ + СокрЛП(ВыборкаИзРезультатаЗапроса.СтранаПроисхождения) + """";
			КонецЕсли;

			ТекстСообщения = НСтр(
					"ru = '%ПредставлениеНоменклатурыТекст% - отрицательный остаток запасов в разрезе ГТД.
					|Остаток запасов в разрезе ГТД (количество): %КоличествоОстаток%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеНоменклатурыТекст%", ПредставлениеНоменклатурыТекст);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОстаток%", ВыборкаИзРезультатаЗапроса.КоличествоОстатокЗапасыВРазрезеГТД);
								
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ДокументСсылкаСчетФактура.ПолучитьОбъект(), ТекстСообщения, Неопределено, Неопределено, "", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьПараметрыЗаполненияКорректировочногоСчетаФактуры(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализации.ВидОперации,
	|	КорректировкаРеализации.ДокументОснование КАК ДокументРеализации,
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации,
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации.ВидОперации КАК ИсправляемыйДокументРеализацииВидОперации
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование";
	
	РеквизитыОснования	= Запрос.Выполнить().Выбрать();
	РеквизитыОснования.Следующий();
	
	ОснованиеДляВидаОперации	= Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование);
	Если НЕ ЗначениеЗаполнено(ОснованиеДляВидаОперации) Тогда
		ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
	КонецЕсли;
	
	Реквизиты = Новый Структура("ВидОперации, Исправление, ИсправляемыйСчетФактура, НомерИсправления,
		|УчитыватьИсправлениеИсходногоДокумента, НомерИсходногоДокумента, ДатаИсходногоДокумента,
		|НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента,
		|НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента");
		
	ДанныеСчетФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(РеквизитыОснования.ИсправляемыйДокументРеализации);
	Если ДанныеСчетФактуры <> Неопределено Тогда
		Реквизиты.ИсправляемыйСчетФактура = ДанныеСчетФактуры.Ссылка;
	КонецЕсли;
	
	// ВидОперации, Исправление
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	Если ЗначениеЗаполнено(РеквизитыОснования.ИсправляемыйДокументРеализации)
		И (ТипЗнч(РеквизитыОснования.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")) 
		И РеквизитыОснования.ИсправляемыйДокументРеализацииВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		И РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		// Исправление корректировочного счета-фактуры
		Реквизиты.ВидОперации	= Перечисления.ВидыОперацийСчетФактура.Корректировка;
		Реквизиты.Исправление		= Истина;
		
	ИначеЕсли РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		// Корректировочный счет-фактура
		Реквизиты.ВидОперации	= Перечисления.ВидыОперацийСчетФактура.Корректировка;
		Реквизиты.Исправление		= Ложь;
		
		КорректировкаКорректировочногоСчетаФактуры = 
			ТипЗнч(Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(РеквизитыОснования.ДокументРеализации, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации");
				
	Иначе
	
		Если ТипЗнч(ОснованиеДляВидаОперации) = тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			// Исправление корректировочного счета-фактуры
			Реквизиты.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка;
		Иначе
			// По умолчанию: исправление счета-фактуры на реализацию
			Реквизиты.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Продажа;
		КонецЕсли;
	
		Реквизиты.Исправление	= Истина;
		
	КонецЕсли;
	
	ИсходныйДокументРеализации	= Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(РеквизитыОснования.ДокументРеализации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныйДокументРеализации",		ИсходныйДокументРеализации);
	Запрос.УстановитьПараметр("ДокументРеализации",				РеквизитыОснования.ДокументРеализации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректировочныйСчетФактура,
	|	ЛОЖЬ КАК Исправление,
	|	0 КАК НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ИсходныйДокументРеализации
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданныйДокументыОснования.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК УчитыватьИсправлениеИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументРеализации
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданныйДокументыОснования.Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	НомерИсправленияИсходногоДокумента	= 0;
	
	РеквизитыИсходногоСчетаФактуры	= МассивРезультатов[0].Выбрать();
	Если РеквизитыИсходногоСчетаФактуры.Следующий() Тогда
		
		Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура Тогда
			Реквизиты.ВидОперации	= Перечисления.ВидыОперацийСчетФактура.Корректировка;
		КонецЕсли;
		
		НомерИсправленияИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.НомерИсправления;
		
		// НомерИсходногоДокумента, ДатаИсходногоДокумента
		
		Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура ИЛИ РеквизитыИсходногоСчетаФактуры.Исправление Тогда
			
			Реквизиты.НомерИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.НомерИсходногоДокумента;
			Реквизиты.ДатаИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.ДатаИсходногоДокумента;
			
		Иначе
			
			Реквизиты.НомерИсходногоДокумента	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
													РеквизитыИсходногоСчетаФактуры.Номер, Истина, Ложь);
			Реквизиты.ДатаИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.Дата;
			
		КонецЕсли;
		
		// НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента
			
		Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура 
			И НЕ КорректировкаКорректировочногоСчетаФактуры Тогда
			
			Реквизиты.УчитыватьИсправлениеИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента;
			
			Если Реквизиты.УчитыватьИсправлениеИсходногоДокумента Тогда
				Реквизиты.НомерИсправленияИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.НомерИсправленияИсходногоДокумента;
				Реквизиты.ДатаИсправленияИсходногоДокумента		= РеквизитыИсходногоСчетаФактуры.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
			
		ИначеЕсли РеквизитыИсходногоСчетаФактуры.Исправление Тогда
				
			Реквизиты.УчитыватьИсправлениеИсходногоДокумента	= Истина;
			
			Реквизиты.НомерИсправленияИсходногоДокумента		= РеквизитыИсходногоСчетаФактуры.НомерИсправления;
			Реквизиты.ДатаИсправленияИсходногоДокумента			= РеквизитыИсходногоСчетаФактуры.Дата;
			
		КонецЕсли;
		
		// НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента
		
		Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура Тогда	
			
			Если РеквизитыИсходногоСчетаФактуры.Исправление Тогда
				Реквизиты.НомерИсправляемогоКорректировочногоДокумента	= РеквизитыИсходногоСчетаФактуры.НомерИсправляемогоКорректировочногоДокумента;
				Реквизиты.ДатаИсправляемогоКорректировочногоДокумента	= РеквизитыИсходногоСчетаФактуры.ДатаИсправляемогоКорректировочногоДокумента;
			ИначеЕсли Реквизиты.Исправление Тогда
				Реквизиты.НомерИсправляемогоКорректировочногоДокумента	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					РеквизитыИсходногоСчетаФактуры.Номер, Истина, Ложь);
				Реквизиты.ДатаИсправляемогоКорректировочногоДокумента	= РеквизитыИсходногоСчетаФактуры.Дата;
			ИначеЕсли КорректировкаКорректировочногоСчетаФактуры Тогда
				Реквизиты.НомерИсходногоДокумента	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					РеквизитыИсходногоСчетаФактуры.Номер, Истина, Ложь);
				Реквизиты.ДатаИсходногоДокумента	= РеквизитыИсходногоСчетаФактуры.Дата;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента
	
	ВыборкаНомерИсправления	= МассивРезультатов[1].Выбрать();
	Если ВыборкаНомерИсправления.Следующий() Тогда
	
		НомерИсправленияИсходногоДокумента	= Макс(НомерИсправленияИсходногоДокумента, ВыборкаНомерИсправления.НомерИсправленияИсходногоДокумента);
	
		Если Реквизиты.УчитыватьИсправлениеИсходногоДокумента = Неопределено
			И Реквизиты.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка
			И ЗначениеЗаполнено(ВыборкаНомерИсправления.НомерИсправленияИсходногоДокумента) Тогда
			
			ЗаполнитьЗначенияСвойств(Реквизиты, ВыборкаНомерИсправления);
			
		ИначеЕсли КорректировкаКорректировочногоСчетаФактуры Тогда
			ЗаполнитьЗначенияСвойств(Реквизиты, ВыборкаНомерИсправления);			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Реквизиты.Исправление Тогда
		Реквизиты.НомерИсправления = НомерИсправленияИсходногоДокумента + 1;
	КонецЕсли;
	
	Возврат Реквизиты;

КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

// Функция определяет присутствие запасов в счет-фактуре
//
Функция ЕстьЗапасы(Документ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СУММА(1) КАК КоличествоЗапасов
	|ИЗ
	|	Документ.СчетФактура.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Ссылка = &Документ
	|	И Запасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)");
	
	Запрос.УстановитьПараметр("Документ", Документ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат ?(Выборка.КоличествоЗапасов = NULL, Ложь, Выборка.КоличествоЗапасов > 0);
		
	КонецЕсли;
	
КонецФункции // ЕстьЗапасы()

// Процедура печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ЭтоУниверсальныйПередаточныйДокумент) Экспорт
	Перем Ошибки;
	
	ТабличныйДокумент			= Новый ТабличныйДокумент;
	
	НачалоИспользованияСФ1137	= Константы.НачалоИспользованияСФ1137.Получить();
	СтавкаНДС0 					= УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактура.Дата КАК ДатаДокумента,
	|	СчетФактура.Номер КАК Номер,
	|	СчетФактура.Контрагент КАК Покупатель,
	|	СчетФактура.Организация КАК Поставщик,
	|	СчетФактура.Организация.Префикс КАК Префикс,
	|	СчетФактура.Контрагент КАК Плательщик,
	|	СчетФактура.Грузоотправитель КАК Грузоотправитель,
	|	СчетФактура.Грузополучатель КАК Грузополучатель,
	|	СчетФактура.ОнЖе,
	|	ВЫБОР
	|		КОГДА СчетФактура.ОснованиеПечати = """"
	|			ТОГДА СчетФактура.Договор.Представление
	|		ИНАЧЕ СчетФактура.ОснованиеПечати
	|	КОНЕЦ КАК Основание,
	|	СчетФактура.ВалютаДокумента КАК Валюта,
	|	СчетФактура.ВидОперации КАК ВидОперации,
	|	СчетФактура.Организация КАК Руководитель,
	|	СчетФактура.Ссылка КАК Ссылка,
	|	1 КАК СтатусУПД,
	|	СчетФактура.НомерИсправления КАК НомерИсправления,
	|	СчетФактура.Дата КАК ДатаИсправления,
	|	ЕСТЬNULL(СчетФактура.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	СчетФактура.ДатаНомерДокументовОплаты.(
	|		Ссылка,
	|		НомерСтроки,
	|		ДатаПлатежноРасчетногоДокумента,
	|		НомерПлатежноРасчетногоДокумента
	|	),
	|	СчетФактура.Кратность,
	|	СчетФактура.Курс,
	|	СчетФактура.ДокументОснование КАК ДокументОснование,
	|	СчетФактура.ДокументыОснования.(
	|		ДокументОснование,
	|		ВЫБОР
	|			КОГДА СчетФактура.ДокументыОснования.ДокументОснование ССЫЛКА Документ.РасходнаяНакладная
	|					ИЛИ СчетФактура.ДокументыОснования.ДокументОснование ССЫЛКА Документ.КорректировкаРеализации
	|					ИЛИ СчетФактура.ДокументыОснования.ДокументОснование ССЫЛКА Документ.ОтчетОПереработке
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоРасходПереработка,
	|		ВЫБОР
	|			КОГДА СчетФактура.ДокументыОснования.ДокументОснование ССЫЛКА Документ.РасходнаяНакладная
	|					ИЛИ СчетФактура.ДокументыОснования.ДокументОснование ССЫЛКА Документ.КорректировкаРеализации
	|					ИЛИ СчетФактура.ДокументыОснования.ДокументОснование ССЫЛКА Документ.ОтчетОПереработке
	|				ТОГДА СчетФактура.ДокументыОснования.ДокументОснование.АдресДоставки
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК АдресДоставки
	|	) КАК ДокументыОснования
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивОбъектов)
	|	И (СчетФактура.Исправление
	|			ИЛИ СчетФактура.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Пока Шапка.Следующий() Цикл
		
		Если ЭтоУниверсальныйПередаточныйДокумент 
			И Шапка.ДатаДокумента < Дата('20130101') Тогда 
			
			ТекстСообщения = Нстр("ru = '__________________
										|Печать универсального передаточного документа доступна c 1 января 2013. 
										|Для документа %1 печатная форма не сформирована.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Шапка.Ссылка);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		КоличествоСтраниц = 1;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактура.ПФ_MXL_УниверсальныйПередаточныйДокумент");
			
		ИначеЕсли Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура_СчетФактура1137";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактура.ПФ_MXL_СчетФактура1137");
		
		ИначеЕсли Шапка.ДатаДокумента < '20090609' Тогда
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура_СчетФактура283";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактура.ПФ_MXL_СчетФактура283");
			
		Иначе
			
			ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура_СчетФактура451";		
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактура.ПФ_MXL_СчетФактура451");
			
		КонецЕсли;
		
		ЭтоСводныйСчетФактура = (ТипЗнч(Шапка.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера")) И Шапка.ДокументОснование.ВыписыватьСчетаФактурыСводно 
			И Шапка.ДатаДокумента >= '20150101' И Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Продажа;
		Если ЭтоСводныйСчетФактура Тогда
			
			Запрос = Новый Запрос("Выбрать Комиссионеры.Покупатель Из Документ.ОтчетКомиссионера.Покупатели КАК Комиссионеры Где Комиссионеры.СчетФактура = &СчетФактура");
			Запрос.УстановитьПараметр("СчетФактура", Шапка.Ссылка);
			ТаблицаПокупателей = Запрос.Выполнить().Выгрузить();
			ТаблицаПокупателей.Колонки.Добавить("СведенияОПокупателе");
			ТаблицаПокупателей.Колонки.Добавить("СведенияОГрузополучателе");
			Для каждого Строка Из ТаблицаПокупателей Цикл
				
				Строка.СведенияОПокупателе		= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Строка.Покупатель, Шапка.ДатаДокумента,	,	);
				Строка.СведенияОГрузополучателе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
					?(Шапка.ОнЖе, Строка.Покупатель, Шапка.Грузополучатель), 
					Шапка.ДатаДокумента,,);
				
			КонецЦикла;
			
			СведенияОПоставщике			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаДокумента,	,	);
			СведенияОГрузоотправителе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
				?(Шапка.ОнЖе, Шапка.Поставщик, Шапка.Грузоотправитель), 
				Шапка.ДатаДокумента,	,);
			
		Иначе
			
			СведенияОПокупателе			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.ДатаДокумента,	,	);
			СведенияОПоставщике			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаДокумента,	,	);
			
			СведенияОГрузоотправителе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
				?(Шапка.ОнЖе, Шапка.Поставщик, Шапка.Грузоотправитель), 
				Шапка.ДатаДокумента,	,);
				
			СведенияОГрузополучателе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
				?(Шапка.ОнЖе И НЕ ЗначениеЗаполнено(Шапка.Грузополучатель), Шапка.Покупатель, Шапка.Грузополучатель), 
				Шапка.ДатаДокумента,	,);
				
		КонецЕсли;
		
		ИспользоватьПересчет 		= Шапка.РасчетыВУсловныхЕдиницах И НЕ Шапка.Валюта = Константы.НациональнаяВалюта.Получить();
		
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 
			И НЕ ЭтоУниверсальныйПередаточныйДокумент Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаИнформация");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;
		
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			
			ОбластьМакета.Параметры.Номер = НомерДокумента;
			ОбластьМакета.Параметры.Дата = Формат(Шапка.ДатаДокумента, "ДФ='дд ММММ гггг'")+ " г.";
			
		Иначе
			
			ОбластьМакета.Параметры.Номер = "Счет-фактура № " + НомерДокумента
					+ " от " + Формат(Шапка.ДатаДокумента, "ДФ='дд ММММ гггг'")+ " г.";
					
		КонецЕсли;
		
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			
			Если ЗначениеЗаполнено(Шапка.НомерИсправления) Тогда
				ОбластьМакета.Параметры.НомерИсправления = Шапка.НомерИсправления;
				ОбластьМакета.Параметры.ДатаИсправления = Формат(Шапка.ДатаИсправления, "ДФ='дд ММММ гггг'")+ " г.";
			Иначе
				ОбластьМакета.Параметры.НомерИсправления = "--";
				ОбластьМакета.Параметры.ДатаИсправления = "--";
			КонецЕсли;
			
		Иначе
			
			Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
				
				ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Продавец: ");
		Если Шапка.ДатаДокумента < '20090609' Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщика =
				ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
				
		ИначеЕсли Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
				
			ОбластьМакета.Параметры.ПредставлениеПоставщика =
				ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
				
		Иначе
			
			ОбластьМакета.Параметры.ПредставлениеПоставщика =
				ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")
							+ " (" + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Представление,") + ")";
				
		КонецЕсли;
		
		ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Адрес: ");
		ОбластьМакета.Параметры.АдресПоставщика = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		
		ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "К платежно-расчетному документу ");
		
		ВыборкаСтрокДатаНомерДокументовОплаты = Шапка.ДатаНомерДокументовОплаты.Выбрать();
		Если ВыборкаСтрокДатаНомерДокументовОплаты.Количество() = 0 Тогда
			
			Если Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента
				ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс Тогда
				
				ОбластьМакета.Параметры.ПоДокументу = ЗаголовокПоля + "№ -- от --";
				
			Иначе
				
				ОбластьМакета.Параметры.ПоДокументу = ЗаголовокПоля + "№    от";
				
			КонецЕсли;
			
		Иначе
			
			Пока ВыборкаСтрокДатаНомерДокументовОплаты.Следующий() Цикл
				
				ОбластьМакета.Параметры.ПоДокументу =
					?(ЗначениеЗаполнено(ОбластьМакета.Параметры.ПоДокументу), ОбластьМакета.Параметры.ПоДокументу + ", ", ЗаголовокПоля)
					+ "№ "
					+ ВыборкаСтрокДатаНомерДокументовОплаты.НомерПлатежноРасчетногоДокумента
					+ " от "
					+ Формат(ВыборкаСтрокДатаНомерДокументовОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЭтоСводныйСчетФактура Тогда
			
			ЗаголовокПоляПокупатель = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Покупатель: ");
			ЗаголовокПоляАдрес = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Адрес: ");
			
			ПредставлениеПокупателя = "";
			ЗначениеАдресаПокупателя = "";
			ДанныеПокупателей = Новый Структура;
			Для каждого Строка Из ТаблицаПокупателей Цикл
				
				ПредставлениеПокупателя = ПредставлениеПокупателя + ?(ПустаяСтрока(ПредставлениеПокупателя), ЗаголовокПоляПокупатель, "; ") 
					+ УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(Строка.СведенияОПокупателе, "ПолноеНаименование,");
				
				ЗначениеАдресаПокупателя = ЗначениеАдресаПокупателя + ?(ПустаяСтрока(ЗначениеАдресаПокупателя), ЗаголовокПоляАдрес, "; ") 
					+ УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(Строка.СведенияОПокупателе, "ЮридическийАдрес,");
				
			КонецЦикла;
			
			ДанныеПокупателей.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
			ДанныеПокупателей.Вставить("АдресПокупателя", ЗначениеАдресаПокупателя);
			ОбластьМакета.Параметры.Заполнить(ДанныеПокупателей);
			
		Иначе
			
			ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Покупатель: ");
			ОбластьМакета.Параметры.ПредставлениеПокупателя = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			
			ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Адрес: ");
			ЗначениеАдресаПокупателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
			Если ПустаяСтрока(ЗначениеАдресаПокупателя) 
				И (Шапка.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Аванс 
					ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента) Тогда
					
					ОбластьМакета.Параметры.АдресПокупателя = ЗаголовокПоля + "--"; 
					
			Иначе
				
				ОбластьМакета.Параметры.АдресПокупателя = ЗаголовокПоля + ЗначениеАдресаПокупателя;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Шапка.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Аванс 
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
			
			ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Грузоотправитель и его адрес: ");
			Если Шапка.ОнЖе Тогда
				
				ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ЗаголовокПоля + НСтр("ru = 'он же'");
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
				
				ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ЗаголовокПоля + "--";
				
			Иначе
				
				ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование, ФактическийАдрес,");
				
			КонецЕсли; 
			
			Если ЭтоСводныйСчетФактура Тогда
				
				ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Грузополучатель и его адрес: ");
				ПредставлениеГрузополучателя  = "";
				Для каждого Строка Из ТаблицаПокупателей Цикл
					
					ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + ?(ПустаяСтрока(ПредставлениеГрузополучателя), ЗаголовокПоля, "; ") 
						+ УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(Строка.СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,");
					
				КонецЦикла;
				
				ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
				
			Иначе
				
				АдресДоставки = "";
				ТаблицаОснований = Шапка.ДокументыОснования.Выгрузить();
				СтрокаТаблицыЗначений = ТаблицаОснований.Найти(Истина, "ЭтоРасходПереработка");
				Если СтрокаТаблицыЗначений <> Неопределено Тогда
					
					АдресДоставки = СтрокаТаблицыЗначений.АдресДоставки;
					
				КонецЕсли;
				
				ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Грузополучатель и его адрес: ");
				Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
					
					Если ПустаяСтрока(АдресДоставки) Тогда
						
						ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,");
						
					Иначе
						
						ПредставлениеГрузополучателя = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,");
						ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + "; " + АдресДоставки;
						ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
						
					КонецЕсли;
					
				ИначеЕсли ЕстьЗапасы(Шапка.Ссылка) Тогда
					
					Если ПустаяСтрока(АдресДоставки) Тогда
						
						ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование, ФактическийАдрес,");
						
					Иначе
						
						ПредставлениеГрузополучателя = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
						ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + "; " + АдресДоставки;
						ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
						
					КонецЕсли;
					
				Иначе
					
					Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
						ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ЗаголовокПоля + "--";
						
					Иначе
						
						ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ЗаголовокПоля;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = "Грузоотправитель и его адрес: --";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = "Грузополучатель и его адрес: --";
			
		КонецЕсли;
		
		КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "ИНН/КПП продавца: ");
		ОбластьМакета.Параметры.ИННпоставщика = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
		Если ЭтоСводныйСчетФактура Тогда
			
			ИНН_КПП_Покупателя = "";
			Для каждого Строка Из ТаблицаПокупателей Цикл
				
				КПП = "";
				КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
				Если ЗначениеЗаполнено(КПП) Тогда 
					КПП = "/" + КПП;
				КонецЕсли;
				
				ИНН_КПП_Покупателя = ИНН_КПП_Покупателя + ?(ПустаяСтрока(ИНН_КПП_Покупателя),"","; ") 
					+ УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(Строка.СведенияОПокупателе, "ИНН,", Ложь) + КПП;
				
			КонецЦикла;
			
			ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "ИНН/КПП покупателя: ");
			ОбластьМакета.Параметры.ИННПокупателя = ЗаголовокПоля + ИНН_КПП_Покупателя;
			
		Иначе
			
			КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
			Если ЗначениеЗаполнено(КПП) Тогда 
				КПП = "/" + КПП;
			КонецЕсли;
			ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "ИНН/КПП покупателя: ");
			ОбластьМакета.Параметры.ИННПокупателя = ЗаголовокПоля + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
			
		КонецЕсли;
		
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ЗаголовокПоля = ?(ЭтоУниверсальныйПередаточныйДокумент, "", "Валюта: наименование, код ");
			
			Если НЕ ЗначениеЗаполнено(Шапка.Валюта) 
				ИЛИ ИспользоватьПересчет Тогда
				
				ОбластьМакета.Параметры.Валюта = ЗаголовокПоля + " Российский рубль,643 ";
				
			Иначе
				
				ОбластьМакета.Параметры.Валюта = ЗаголовокПоля + СокрЛП(Шапка.Валюта.НаименованиеПолное) + ", " + СокрЛП(Шапка.Валюта.Код) + "";
				
			КонецЕсли;
			
		Конецесли;
		
		Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ИтогоСтоимость	= 0;
		ИтогоСуммаНДС	= 0;
		ИтогоВсего		= 0;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Шапка.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	1 КАК ID,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ТОГДА ВложенныйЗапрос.Номенклатура.Артикул
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ТоварКод,
		|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ТОГДА ВложенныйЗапрос.Номенклатура.ТоварнаяНоменклатураВЭД.Код
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТНВЭДКод,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Код КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияКоэфициент КАК ЕдиницаИзмеренияКоэфициент,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Цена КАК Цена,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПересчет
		|			ТОГДА ВЫБОР
		|					КОГДА ВложенныйЗапрос.ВсегоРег ЕСТЬ NULL
		|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.СуммаБезНДС * &Курс / &Кратность КАК ЧИСЛО(15, 2))
		|					ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРег - ВложенныйЗапрос.СуммаНДСРег КАК ЧИСЛО(15, 2))
		|				КОНЕЦ
		|		ИНАЧЕ ВложенныйЗапрос.СуммаБезНДС
		|	КОНЕЦ КАК СуммаБезНДС,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПересчет
		|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаНДСРег, ВЫРАЗИТЬ(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
		|		ИНАЧЕ ВложенныйЗапрос.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПересчет
		|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.ВсегоРег, ВЫРАЗИТЬ(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
		|		ИНАЧЕ ВложенныйЗапрос.Всего
		|	КОНЕЦ КАК Всего,
		|	""без акциза"" КАК Акциз,
		|	ВложенныйЗапрос.НомерГТД,
		|	ВложенныйЗапрос.НомерГТД КАК ПредставлениеГТД,
		|	ВложенныйЗапрос.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ВложенныйЗапрос.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
		|	ВложенныйЗапрос.ПредставлениеСтраны,
		|	ВложенныйЗапрос.Содержание,
		|	ВложенныйЗапрос.ОнЖе
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(СчетФактураЗапасы.НомерСтроки) КАК НомерСтроки,
		|		СчетФактураЗапасы.Номенклатура КАК Номенклатура,
		|		СчетФактураЗапасы.Характеристика КАК Характеристика,
		|		СчетФактураЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДляПечати,
		|		СчетФактураЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияКоэфициент,
		|		СУММА(СчетФактураЗапасы.Количество) КАК Количество,
		|		ВЫБОР
		|			КОГДА &ИспользоватьПересчет
		|				ТОГДА ВЫБОР
		|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
		|							ТОГДА ВЫРАЗИТЬ(СчетФактураЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
		|						КОГДА СчетФактураЗапасы.Количество = 0
		|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
		|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / СчетФактураЗапасы.Количество КАК ЧИСЛО(15, 2))
		|					КОНЕЦ
		|			ИНАЧЕ СчетФактураЗапасы.Цена
		|		КОНЕЦ КАК Цена,
		|		СУММА(СчетФактураЗапасы.Сумма) КАК СуммаБезНДС,
		|		СчетФактураЗапасы.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(СчетФактураЗапасы.СуммаНДС) КАК СуммаНДС,
		|		СУММА(СчетФактураЗапасы.Всего) КАК Всего,
		|		СУММА(РублевыеСуммыДокументовВВалюте.Всего) КАК ВсегоРег,
		|		СУММА(РублевыеСуммыДокументовВВалюте.НДС) КАК СуммаНДСРег,
		|		СчетФактураЗапасы.НомерГТД КАК НомерГТД,
		|		СчетФактураЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
		|		СчетФактураЗапасы.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
		|		СчетФактураЗапасы.СтранаПроисхождения.Представление КАК ПредставлениеСтраны,
		|		ВЫРАЗИТЬ(СчетФактураЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|		СчетФактураЗапасы.Ссылка.ОнЖе КАК ОнЖе
		|	ИЗ
		|		Документ.СчетФактура.Запасы КАК СчетФактураЗапасы
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
		|			ПО СчетФактураЗапасы.Ссылка = РублевыеСуммыДокументовВВалюте.Регистратор
		|				И СчетФактураЗапасы.НомерСтроки = РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
		|	ГДЕ
		|		СчетФактураЗапасы.Ссылка = &Ссылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СчетФактураЗапасы.НомерГТД,
		|		СчетФактураЗапасы.ЕдиницаИзмерения,
		|		СчетФактураЗапасы.Номенклатура,
		|		ВЫРАЗИТЬ(СчетФактураЗапасы.Содержание КАК СТРОКА(1000)),
		|		СчетФактураЗапасы.Характеристика,
		|		СчетФактураЗапасы.СтавкаНДС,
		|		СчетФактураЗапасы.СтранаПроисхождения,
		|		СчетФактураЗапасы.СтранаПроисхождения.Код,
		|		СчетФактураЗапасы.СтранаПроисхождения.Представление,
		|		СчетФактураЗапасы.Ссылка.ОнЖе,
		|		СчетФактураЗапасы.Номенклатура.ЕдиницаИзмерения,
		|		ВЫБОР
		|			КОГДА &ИспользоватьПересчет
		|				ТОГДА ВЫБОР
		|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
		|							ТОГДА ВЫРАЗИТЬ(СчетФактураЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
		|						КОГДА СчетФактураЗапасы.Количество = 0
		|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
		|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / СчетФактураЗапасы.Количество КАК ЧИСЛО(15, 2))
		|					КОНЕЦ
		|			ИНАЧЕ СчетФактураЗапасы.Цена
		|		КОНЕЦ) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ИспользоватьПересчет", ИспользоватьПересчет);
		Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
		Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
		
		Если  Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.СуммовыеРазницы Тогда
			
			ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
			
			ОбластьМакета.Параметры.ТоварНаименование = "Суммы, связанные с расчетами по оплате (ст. 162 НК РФ)";
			
			Если ТаблицаПоТоварам.Количество() > 0 Тогда
				
				ОбластьМакета.Параметры.СтавкаНДС = ТаблицаПоТоварам[0].СтавкаНДС;
				ОбластьМакета.Параметры.СуммаНДС = ТаблицаПоТоварам[0].СуммаНДС;
				ОбластьМакета.Параметры.Всего = ТаблицаПоТоварам[0].Всего;
				
				ИтогоСтоимость	= 0;
				ИтогоСуммаНДС	= ТаблицаПоТоварам[0].СуммаНДС;
				ИтогоВсего		= ТаблицаПоТоварам[0].Всего;
				
			КонецЕсли;
			
			ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли  Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Продажа
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
			
			ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
			
			НомерСтроки = 0;
			НомерЛиста = 1;
			КоличествоСтрок = ТаблицаПоТоварам.Количество();
			
			Для Каждого Строчка Из ТаблицаПоТоварам Цикл
				
				Если Строчка.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(Строчка);
				
				НомерСтроки = НомерСтроки + 1;
				Если ЭтоУниверсальныйПередаточныйДокумент Тогда
					
					ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строчка.Содержание) Тогда
					
					ОбластьМакета.Параметры.ТоварНаименование = Строчка.Содержание;
					
				Иначе
					
					ОбластьМакета.Параметры.ТоварНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Строчка.ТоварНаименование, 
																Строчка.Характеристика, Строчка.Артикул);
					
				КонецЕсли;
				
				Если Шапка.ДатаДокумента >= Дата(2016, 07, 01) Тогда
					
					Если Строчка.СтавкаНДС = СтавкаНДС0
						И НЕ ПустаяСтрока(Строчка.ТНВЭДКод) Тогда
						
						ОбластьМакета.Параметры.ТоварНаименование = ОбластьМакета.Параметры.ТоварНаименование + НСтр("ru=', код ТН ВЭД '") + Строчка.ТНВЭДКод;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 
					И НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
					
					ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
					
					ОбластьМакета.Параметры.ЕдиницаИзмерения = "--";
					
				КонецЕсли;
				
				Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ОбластьМакета.Параметры.Акциз = "--";
					
				КонецЕсли;
				
				Коэффициент = 1;
				Если ТипЗнч(Строчка.ЕдиницаИзмеренияКоэфициент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					
					Коэффициент = Строчка.ЕдиницаИзмеренияКоэфициент.Коэффициент;
					
				КонецЕсли;
				
				Количество = Строчка.Количество * Коэффициент;
				
				ОбластьМакета.Параметры.Количество = Количество;
				
				Если Строчка.Цена <> 0 Тогда
					
					ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, (Строчка.Всего - Строчка.СуммаНДС) / Количество);
					
				Иначе
					
					ОбластьМакета.Параметры.Цена = Строчка.Цена * Коэффициент;
					
				КонецЕсли;
				
				// Из-за округления, для договоров в у.е. или валюте, будет не правильно получать сумму без НДС прямым пересчетом
				ОбластьМакета.Параметры.Стоимость = Строчка.Всего - Строчка.СуммаНДС;
				
				ОбластьМакета.Параметры.Всего = Строчка.Всего;
				
				Если ВРег(Строчка.СтавкаНДС) = "БЕЗ НДС" Тогда
					
					ОбластьМакета.Параметры.СтавкаНДС	= "без НДС";
					ОбластьМакета.Параметры.СуммаНДС	= "без НДС";
					
				Иначе
					
					ОбластьМакета.Параметры.СтавкаНДС	= Строчка.СтавкаНДС;
					ОбластьМакета.Параметры.СуммаНДС = Строчка.СуммаНДС;
					
				КонецЕсли;
				
				ИтогоСтоимость	= ИтогоСтоимость + (Строчка.Всего - Строчка.СуммаНДС);
				ИтогоСуммаНДС	= ИтогоСуммаНДС + Строчка.СуммаНДС;
				ИтогоВсего		= ИтогоВсего + Строчка.Всего;
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					Если Строка(Строчка.ПредставлениеСтраны) = ВРЕГ("Россия")
						ИЛИ ПустаяСтрока(Строчка.ПредставлениеСтраны)
						ИЛИ Строчка.СтранаПроисхождения = Справочники.СтраныМира.Россия Тогда
						
						ОбластьМакета.Параметры.ПредставлениеСтраны  = "--";
						ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
						
					КонецЕсли;
				
					Если ПустаяСтрока(Строчка.ПредставлениеГТД) Тогда
						
						ОбластьМакета.Параметры.ПредставлениеГТД = "--";
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭтоУниверсальныйПередаточныйДокумент
					И НЕ УправлениеНебольшойФирмойСервер.ПроверитьВыводСчетаФактурыНаСтраницу(ТабличныйДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерДокумента, ЭтоУниверсальныйПередаточныйДокумент) Тогда
					
					КоличествоСтраниц = КоличествоСтраниц + 1;
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
		ИначеЕсли Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс 
			ИЛИ Шапка.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	1 КАК ID,
			|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
			|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
			|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
			|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
			|	ВложенныйЗапрос.Характеристика КАК Характеристика,
			|	&СуммаБезНДС_Параметр КАК СуммаБезНДС,
			|	ВложенныйЗапрос.СтавкаНДС,
			|	&СуммаНДС_Параметр КАК СуммаНДС,
			|	&Всего_Параметр КАК Всего,
			|	""без акциза"" КАК Акциз,
			|	ВложенныйЗапрос.Содержание
			|ИЗ
			|	(ВЫБРАТЬ
			|		МИНИМУМ(СчетФактураЗапасы.НомерСтроки) КАК НомерСтроки,
			|		СчетФактураЗапасы.Номенклатура КАК Номенклатура,
			|		СчетФактураЗапасы.Характеристика КАК Характеристика,
			|		СУММА(СчетФактураЗапасы.Сумма) КАК СуммаБезНДС,
			|		СчетФактураЗапасы.СтавкаНДС КАК СтавкаНДС,
			|		СУММА(СчетФактураЗапасы.СуммаНДС) КАК СуммаНДС,
			|		СУММА(СчетФактураЗапасы.Всего) КАК Всего,
			|		ВЫРАЗИТЬ(СчетФактураЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание
			|	ИЗ
			|		Документ.СчетФактура.Запасы КАК СчетФактураЗапасы
			|	ГДЕ
			|		СчетФактураЗапасы.Ссылка = &Ссылка
			|	
			|	СГРУППИРОВАТЬ ПО
			|		СчетФактураЗапасы.Номенклатура,
			|		СчетФактураЗапасы.Характеристика,
			|		СчетФактураЗапасы.СтавкаНДС,
			|		ВЫРАЗИТЬ(СчетФактураЗапасы.Содержание КАК СТРОКА(1000))) КАК ВложенныйЗапрос
			|
			|УПОРЯДОЧИТЬ ПО
			|	ID,
			|	НомерСтроки";
			
			Если ИспользоватьПересчет Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаБезНДС_Параметр",	"Выразить(ВложенныйЗапрос.СуммаБезНДС * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр",		"Выразить(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр",			"Выразить(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК Число(15,2))");
				
				Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
				Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
				
			Иначе
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаБезНДС_Параметр", 	"ВложенныйЗапрос.СуммаБезНДС");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"	ВложенныйЗапрос.СуммаНДС");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 		"ВложенныйЗапрос.Всего");
				
			КонецЕсли;
			
			ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Строчка Из ТаблицаПоТоварам Цикл
				
				Если ЗначениеЗаполнено(Строчка.Содержание) Тогда
					
					ОбластьМакета.Параметры.ТоварНаименование = Строчка.Содержание;
					
				ИначеЕсли НЕ ЗначениеЗаполнено(Строчка.Номенклатура) Тогда
					
					ОбластьМакета.Параметры.ТоварНаименование = "Предварительная оплата";
					
				Иначе
					
					ОбластьМакета.Параметры.ТоварНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Строчка.ТоварНаименование, 
																		Строчка.Характеристика, Строчка.Артикул);
					
				КонецЕсли;
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
					ОбластьМакета.Параметры.ПредставлениеСтраны  = "--";
					ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
					ОбластьМакета.Параметры.ПредставлениеГТД = "--";
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.ЕдиницаИзмерения 	= "--";
				
				Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ОбластьМакета.Параметры.Акциз = Строчка.Акциз;
					
				Иначе
					
					ОбластьМакета.Параметры.Акциз = "--";
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Всего 				= Строчка.Всего;
				
				Если ВРег(Строчка.СтавкаНДС) = "БЕЗ НДС" Тогда
					
					ОбластьМакета.Параметры.СтавкаНДС	= "без НДС";
					ОбластьМакета.Параметры.СуммаНДС	= "без НДС";
					
				Иначе
					
					ОбластьМакета.Параметры.СтавкаНДС	= Строчка.СтавкаНДС;
					ОбластьМакета.Параметры.СуммаНДС = Строчка.СуммаНДС;
					
				КонецЕсли;
				
				ИтогоСуммаНДС	= ИтогоСуммаНДС + Строчка.СуммаНДС;
				ИтогоВсего		= ИтогоВсего + Строчка.Всего;
				
				Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
					
					ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогоСуммаНДС	= ИтогоСуммаНДС;
		ОбластьМакета.Параметры.ИтогоВсего		= ИтогоВсего;
		
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ОбластьМакета.Параметры.ИтогоСтоимость	= ?(ИтогоСтоимость = 0, "--", ИтогоСтоимость);
			
		Иначе
			
			ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Руководитель, Шапка.ДатаДокумента);
		
		Если Шапка.Руководитель.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ОбластьМакета.Параметры.ФИОПБОЮЛ = Руководители.ФИОРуководителя;
			Руководители.Удалить("ФИОРуководителя"); 
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Руководители);
		ОбластьМакета.Параметры.Свидетельство = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,");
		
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			
			ОбластьМакета.Параметры.КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
				УправлениеНебольшойФирмойСервер.ФормаМножественногоЧисла(НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц)
				);
			
		КонецЕсли;
		
		Если НЕ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 Тогда
			
			ПроставитьПрочеркиВПустыеПоля(ОбластьМакета);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			Если ТипЗнч(Шапка.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") 
				ИЛИ ТипЗнч(Шапка.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				Если ЗначениеЗаполнено(Шапка.ДокументОснование) Тогда
					
					Если ЗначениеЗаполнено(Шапка.ДокументОснование.ДоверенностьВыдана)
						ИЛИ ЗначениеЗаполнено(Шапка.ДокументОснование.ДоверенностьДата)
						ИЛИ ЗначениеЗаполнено(Шапка.ДокументОснование.ДоверенностьЛицо)
						ИЛИ ЗначениеЗаполнено(Шапка.ДокументОснование.ДоверенностьНомер)
					Тогда
						
						ОбластьМакета.Параметры.Основание = 
							Шапка.Основание + НСтр("ru ='; по доверенности №'") + Шапка.ДокументОснование.ДоверенностьНомер 
							+ НСтр("ru =' от '") + Формат(Шапка.ДокументОснование.ДоверенностьДата, "ДЛФ=DD") 
							+ НСтр("ru =' выданной '") + Шапка.ДокументОснование.ДоверенностьВыдана + " " 
							+ Шапка.ДокументОснование.ДоверенностьЛицо;
						
					Иначе
						
						ОбластьМакета.Параметры.Основание = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шапка.ДокументОснование, "ОснованиеПечати").ОснованиеПечати;
						
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
			ОбластьМакета.Параметры.ДатаОтгрузкиПередачи = Формат(Шапка.ДатаДокумента, "ДФ='« дд » ММММ гггг'");
			
			ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			Если НЕ ПустаяСтрока(СведенияОПоставщике.ИНН) 
				И НЕ ПустаяСтрока(СведенияОПоставщике.КПП) Тогда
				
				ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
					ПредставлениеОрганизации, СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП);
				
			ИначеЕсли НЕ ПустаяСтрока(СведенияОПоставщике.ИНН) Тогда
				
				ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
					ПредставлениеОрганизации, СведенияОПоставщике.ИНН);
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.ПредставлениеОрганизации = ПредставлениеОрганизации;
			
			ПредставлениеКонтрагента = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
			Если НЕ ПустаяСтрока(СведенияОПокупателе.ИНН)
				И НЕ ПустаяСтрока(СведенияОПокупателе.КПП) Тогда
				
				ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
					ПредставлениеКонтрагента, СведенияОПокупателе.ИНН, СведенияОПокупателе.КПП);
					
			ИначеЕсли НЕ ПустаяСтрока(СведенияОПокупателе.ИНН) Тогда
				
				ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
					ПредставлениеКонтрагента, СведенияОПокупателе.ИНН);
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.ПредставлениеКонтрагента = ПредставлениеКонтрагента;
			
			ОбластьМакета.Параметры.ДолжностьКладовщика = Руководители.КладовщикДолжность;
			ОбластьМакета.Параметры.ФИОКладовщика = Руководители.ФИОКладовщика;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатнаяФормаКорректировочныхСчетовФактур(МассивОбъектов, ОбъектыПечати, ЭтоУниверсальныйКорректировочныйДокумент) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактура.ПФ_MXL_СчетФактураКорректировочный1137");
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура_КорректировочныйСчетФактура";

	ДанныеСчетовФактур = ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(МассивОбъектов, 
		ТекстЗапросаПечатьКорректировочныхСчетовФактур(ЭтоУниверсальныйКорректировочныйДокумент), ЭтоУниверсальныйКорректировочныйДокумент);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаСФ ИЗ ДанныеСчетовФактур Цикл

		ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ, ЭтоУниверсальныйКорректировочныйДокумент);

		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаСФ.СчетФактура);

	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции

Функция ПолучитьДанныеДляПечатиКорректировочныхСчетовФактур(МассивОбъектов, ТекстЗапросаПоСчетамФактурам, ДополнитьДаннымиУПД = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НачалоИспользованияСФ1137", Константы.НачалоИспользованияСФ1137.Получить());
	Запрос.Текст = ТекстЗапросаПоСчетамФактурам;
	Результаты   = Запрос.ВыполнитьПакет();
	
	ВыборкаСФ = Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СчетФактура");
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений();
	ТаблицаСчетовФактур.Колонки.Добавить("ДанныеШапки");
	ТаблицаСчетовФактур.Колонки.Добавить("ТаблицаДокумента");
	ТаблицаСчетовФактур.Колонки.Добавить("ДокументыОснования");
	ТаблицаСчетовФактур.Колонки.Добавить("ВидСчетаФактуры");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактура");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураБезНДС");
	ТаблицаСчетовФактур.Колонки.Добавить("Ссылка");
	
	Пока ВыборкаСФ.Следующий() Цикл
		
		ТаблицаДокумента = Неопределено;
		ДокументыОснования = Новый Массив;
		ВыборкаПоОснованиям = ВыборкаСФ.Выбрать();
		Пока ВыборкаПоОснованиям.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
				Продолжить;
			КонецЕсли;
			ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
			ПараметрыОснования = ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(
				ВыборкаПоОснованиям.ДокументОснование, ВыборкаСФ.СчетФактура, ВыборкаСФ.ВидСчетаФактуры, Истина);
			
			Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
				Продолжить;
			Иначе
				Реквизиты = ПараметрыОснования.Реквизиты[0];
			КонецЕсли; 

			Если ТаблицаДокумента = Неопределено Тогда
				ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
			Иначе
				Для Каждого СтрокаТаблицы Из ПараметрыОснования.ТаблицаДокумента Цикл
					СтрокаТаблицаДокумента = ТаблицаДокумента.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаДокумента, СтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КолонкиГруппировок = ""
		+"Товар,"
		+"ТоварКод,"
		+"НаименованиеНоменклатуры,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС,"
		+"Акциз";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ТаблицаДокумента.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		ТаблицаДокумента.Колонки.Добавить("НомерСтроки");
		
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.СчетФактура = ВыборкаСФ.СчетФактура;
		СчетФактура.ВидСчетаФактуры = ВыборкаСФ.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС = ВыборкаСФ.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки = ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры(ВыборкаСФ, Реквизиты, ДополнитьДаннымиУПД);
		СчетФактура.ТаблицаДокумента = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаСФ.СчетФактура;
		
		Если ДополнитьДаннымиУПД Тогда
			РеквизитыПередаточныхДокументов = "";
			Для каждого Основание Из ДокументыОснования Цикл
				СсылкаНаСчетФактуру = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Основание.ИсправляемыйДокументРеализации);
				СсылкаНаСчетФактуру = ?(ЗначениеЗаполнено(СсылкаНаСчетФактуру), СсылкаНаСчетФактуру, Основание.ИсправляемыйДокументРеализации);
				
				НомерНаПечать	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СсылкаНаСчетФактуру.Номер, Истина, Ложь);
				ДатаНаПечать	= Формат(СсылкаНаСчетФактуру.Дата, "ДЛФ=D");
				РеквизитыПервичногоДокумента	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '№ %1 от %2'"),
					НомерНаПечать, ДатаНаПечать);
				
				РеквизитыПередаточныхДокументов = ?(РеквизитыПередаточныхДокументов = "", РеквизитыПередаточныхДокументов,РеквизитыПередаточныхДокументов + ", ") 
				+ "Универсальный передаточный документ " + РеквизитыПервичногоДокумента;
			КонецЦикла;
			СчетФактура.ДанныеШапки.Вставить("РеквизитыПередаточныхДокументов", РеквизитыПередаточныхДокументов);			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

Процедура ВывестиКорректировочныйСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ, ЭтоУниверсальныйКорректировочныйДокумент = Ложь) Экспорт
	
	ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
	
	// Вывод шапки
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	
	Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
		
		НомерСчетаФактуры = "Универсальный корректировочноый документ № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
		
		НомерСчетаФактуры = ДанныеШапки.Номер;
		ДатаСчетаФактуры = Формат(ДанныеШапки.Дата, "ДЛФ=ДД; ДП=--");
		ОбластьМакета.Параметры.Номер = НомерСчетаФактуры;
		ОбластьМакета.Параметры.Дата  = ДатаСчетаФактуры;
		
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = ДанныеШапки.НомерИсправленияКорректировочного;
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного  = Формат(ДанныеШапки.ДатаИсправленияКорректировочного, "ДЛФ=ДД; ДП=--");
		
		Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 0 Тогда
			Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
			ОбластьМакета.Параметры.НомерОснования 				= Основание.НомерСчетаФактуры;
			ОбластьМакета.Параметры.ДатаОсновнания  			= Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--");
			ОбластьМакета.Параметры.НомерИсправленияОснования 	= Основание.НомерИсправления;
			ОбластьМакета.Параметры.ДатаИсправленияОснования  	= Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");
		Иначе
			ОбластьМакета.Параметры.НомерОснования 				= "--";
			ОбластьМакета.Параметры.ДатаОсновнания  			= "--";
			ОбластьМакета.Параметры.НомерИсправленияОснования 	= "--";
			ОбластьМакета.Параметры.ДатаИсправленияОснования  	= "--";
		КонецЕсли;
		
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименованиеУКД;
		
		ОбластьМакета.Параметры.СтатусУКД  = ДанныеШапки.СтатусУКД;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ДанныеШапки.НаименованиеПродавца;
		ОбластьМакета.Параметры.ИННПоставщика = ДанныеШапки.ИННПродавца + ?(ЗначениеЗаполнено(ДанныеШапки.КПППродавца), "/" + ДанныеШапки.КПППродавца, "");
		ОбластьМакета.Параметры.АдресПоставщика = ДанныеШапки.АдресПродавца;
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ДанныеШапки.НаименованиеПокупателя;
		ОбластьМакета.Параметры.ИННПокупателя = ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, "");
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		
	Иначе
		НомерСчетаФактуры = ДанныеШапки.Номер;
		ДатаСчетаФактуры = Формат(ДанныеШапки.Дата, "ДЛФ=ДД; ДП=--");
		ОбластьМакета.Параметры.Номер = НомерСчетаФактуры;
		ОбластьМакета.Параметры.Дата  = ДатаСчетаФактуры;
		ОбластьМакета.Параметры.НомерИсправленияКорректировочного = ДанныеШапки.НомерИсправленияКорректировочного;
		ОбластьМакета.Параметры.ДатаИсправленияКорректировочного = Формат(ДанныеШапки.ДатаИсправленияКорректировочного, "ДЛФ=ДД; ДП=--");
		
		РеквизитыОснований = "";
		
		Для каждого Основание Из ДанныеШапки.ТаблицаРеквизитовОснований Цикл
			РеквизитыОснований = ?(РеквизитыОснований = "", РеквизитыОснований,РеквизитыОснований + ", ") + "№ " + Основание.НомерСчетаФактуры + " от " 
			+ Формат(Основание.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--") + ", с учетом исправления № "
			+ Основание.НомерИсправления + " от " + Формат(Основание.ДатаИсправления, "ДЛФ=ДД; ДП=--");	
		КонецЦикла;
		
		ОбластьМакета.Параметры.РеквизитыОснований = РеквизитыОснований;
		ОбластьМакета.Параметры.НаименованиеПродавца = ДанныеШапки.НаименованиеПродавца;
		ОбластьМакета.Параметры.АдресПродавца = ДанныеШапки.АдресПродавца;
		ОбластьМакета.Параметры.ИННКПППродавца = ДанныеШапки.ИННКПППродавца;
		ОбластьМакета.Параметры.НаименованиеПокупателя = ДанныеШапки.НаименованиеПокупателя;
		ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
		ОбластьМакета.Параметры.ИННКПППокупателя = ДанныеШапки.ИННКПППокупателя;
		ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименование;
		
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод заголовка таблицы
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТаблицаДокумента.Количество();
	
	// Вывод табличной части
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;

		ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
		ДозаполнитьСтрокуКорректировочногоСчетаФактуры(ОбластьМакета);
		
		Если ЭтоУниверсальныйКорректировочныйДокумент Тогда
			
			Если ДанныеШапки.СтатусУКД = 2 Тогда
				ОбластьМакета.Параметры.СтавкаНДС 	= "--";
				ОбластьМакета.Параметры.Акциз 		= "--";
				ОбластьМакета.Параметры.СуммаНДСДоИзменения = "--";
				ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "--";
				ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
				ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
			Иначе
				ОбластьМакета.Параметры.Акциз = "без акциза";
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеНебольшойФирмойСервер.ПроверитьВыводКорректировочногоСчетаФактурыНаСтраницу(
			ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры, ДатаСчетаФактуры, ЭтоУниверсальныйКорректировочныйДокумент);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Вывод итоговых сумм
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.РазницаБезНДСУменьшение	= ТаблицаДокумента.Итог("РазницаБезНДСУменьшение");
	ОбластьМакета.Параметры.РазницаБезНДСУвеличение	= ТаблицаДокумента.Итог("РазницаБезНДСУвеличение");
	ОбластьМакета.Параметры.РазницаСНДСУменьшение   = ТаблицаДокумента.Итог("РазницаСНДСУменьшение");
	ОбластьМакета.Параметры.РазницаСНДСУвеличение   = ТаблицаДокумента.Итог("РазницаСНДСУвеличение");
	Если ЭтоУниверсальныйКорректировочныйДокумент И ДанныеШапки.СтатусУКД = 2 Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";		
	ИначеЕсли ВыборкаСФ.СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "без НДС";
	Иначе
		ОбластьМакета.Параметры.РазницаНДСУменьшение    = ТаблицаДокумента.Итог("РазницаНДСУменьшение");
		ОбластьМакета.Параметры.РазницаНДСУвеличение    = ТаблицаДокумента.Итог("РазницаНДСУвеличение");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Вывод подвала
	
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, НомерЛиста,
		УправлениеНебольшойФирмойСервер.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), НомерЛиста));
			
	ДанныеШапки.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ДозаполнитьСтрокуКорректировочногоСчетаФактуры(ОбластьМакета)

	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения) Тогда
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		ОбластьМакета.Параметры.НаименованиеЕдиницыИзмерения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоДоИзменения) Тогда
		ОбластьМакета.Параметры.КоличествоДоИзменения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.КоличествоПослеИзменения) Тогда
		ОбластьМакета.Параметры.КоличествоПослеИзменения = "--";
	КонецЕсли;	
	       		
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаДоИзменения) Тогда
		ОбластьМакета.Параметры.ЦенаДоИзменения = "--";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЦенаПослеИзменения) Тогда
		ОбластьМакета.Параметры.ЦенаПослеИзменения = "--";
	КонецЕсли;	
	          		
	Если ОбластьМакета.Параметры.СтавкаНДС.НеОблагается Тогда
		ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
		ОбластьМакета.Параметры.СуммаНДСДоИзменения = "без НДС";
		ОбластьМакета.Параметры.СуммаНДСПослеИзменения = "без НДС";
		ОбластьМакета.Параметры.РазницаНДСУвеличение = "--";
		ОбластьМакета.Параметры.РазницаНДСУменьшение = "--";
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьДанныеДляПечатиКорректировочныхСчетовФактур(ДокументОснование, СчетФактура, ВидСчетаФактуры, ИспользуетсяПостановлениеНДС1137) Экспорт

	ДанныеДляПечати = Новый Структура;

	ПредставлениеПоставщика = "";
	АдресПоставщика         = "";
	Грузоотправитель        = "";
	ИННКПППоставщика        = "";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ПараметрыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, Новый Структура(
			"ДокументОснование, ВидДоговораКонтрагента", "ДокументОснование", "Договор.ВидДоговора"));
	КонецЕсли;
	
	ВалютаРеглУчета = Константы.НациональнаяВалюта.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаРеглУчета",                  ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДокументОснование",                ДокументОснование);
	Запрос.УстановитьПараметр("СчетФактура",                      СчетФактура);
	Запрос.УстановитьПараметр("ВидСчетаФактуры",                  ВидСчетаФактуры);
	Запрос.УстановитьПараметр("ТекстБезАкциза",                   ?(ИспользуетсяПостановлениеНДС1137, "без акциза", ""));
	Запрос.УстановитьПараметр("ИспользуетсяПостановлениеНДС1137", ИспользуетсяПостановлениеНДС1137);
	Запрос.УстановитьПараметр("ПустоеПодразделение",              Неопределено);
	Запрос.УстановитьПараметр("ПредставлениеПоставщика",          ПредставлениеПоставщика);
	Запрос.УстановитьПараметр("АдресПоставщика",                  АдресПоставщика);
	Запрос.УстановитьПараметр("ИННКПППоставщика",                 ИННКПППоставщика);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = Документы[ДокументОснование.Метаданные().Имя].ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц)
		+ ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[НомераТаблиц.Реквизиты].Пустой()
		ИЛИ Результат[НомераТаблиц.ТаблицаДокумента].Пустой() Тогда
		
		ДанныеДляПечати.Вставить("Реквизиты",        Неопределено);
		ДанныеДляПечати.Вставить("ТаблицаДокумента", Неопределено);

		Возврат ДанныеДляПечати;
		
	КонецЕсли;	

	ТаблицаРеквизиты = Результат[НомераТаблиц.Реквизиты].Выгрузить();
	ТаблицаДокумента = Результат[НомераТаблиц.ТаблицаДокумента].Выгрузить();
	Реквизиты        = ТаблицаРеквизиты[0];

	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.НаименованиеЕдиницыИзмерения) Тогда
			СтрокаДокумента.КоличествоДоИзменения    = 0;
			СтрокаДокумента.КоличествоПослеИзменения = 0;
			СтрокаДокумента.ЦенаДоИзменения          = 0;
			СтрокаДокумента.ЦенаПослеИзменения       = 0;
		Иначе
			Если СтрокаДокумента.КоличествоДоИзменения = 0 Тогда
				СтрокаДокумента.ЦенаДоИзменения = 0;
			ИначеЕсли СтрокаДокумента.ЦенаДоИзменения = 0 Тогда
				СтрокаДокумента.ЦенаДоИзменения = Окр(СтрокаДокумента.СтоимостьБезНДСДоИзменения / СтрокаДокумента.КоличествоДоИзменения, 2);
			КонецЕсли;
			Если СтрокаДокумента.КоличествоПослеИзменения = 0 Тогда
				СтрокаДокумента.ЦенаПослеИзменения = 0;
			ИначеЕсли СтрокаДокумента.ЦенаПослеИзменения = 0 Тогда
				СтрокаДокумента.ЦенаПослеИзменения = Окр(СтрокаДокумента.СтоимостьБезНДСПослеИзменения / СтрокаДокумента.КоличествоПослеИзменения, 2);
			КонецЕсли;
			Если СтрокаДокумента.КоличествоДоИзменения = 0 
				И СтрокаДокумента.КоличествоПослеИзменения = 0 Тогда
				СтрокаДокумента.НаименованиеЕдиницыИзмерения = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("Реквизиты",        ТаблицаРеквизиты);
	ДанныеДляПечати.Вставить("ТаблицаДокумента", ТаблицаДокумента);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПодготовитьДанныеШапкиКорректировочногоСчетаФактуры(ВыборкаСФ, Реквизиты, ДополнитьДаннымиУПД) Экспорт

	ДанныеШапки = Новый Структура;
	ТекстПустойПоказатель = "--";
	
	// Номер и дата
	Если ВыборкаСФ.Исправление И ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
		Номер = ВыборкаСФ.НомерИсправляемогоКорректировочногоДокумента;
		ДанныеШапки.Вставить("Дата", ВыборкаСФ.ДатаИсправляемогоКорректировочногоДокумента);
	Иначе
		Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаСФ.Номер, Истина, Ложь);
		ДанныеШапки.Вставить("Дата", ВыборкаСФ.Дата);
	КонецЕсли;
	
	ДанныеШапки.Вставить("Номер", СокрЛП(Номер));
	
	// Номер и дата исправления
	ДанныеШапки.Вставить("Исправление", ВыборкаСФ.Исправление);
	Если ВыборкаСФ.Исправление Тогда
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидыОперацийСчетФактура.Корректировка Тогда
			НомерИсправленияКорректировочного = ВыборкаСФ.НомерИсправления;
			ДатаИсправленияКорректировочного  = ВыборкаСФ.ДатаИсправления;
		Иначе
			НомерИсправленияКорректировочного = ВыборкаСФ.НомерИсправленияКорректировочного;
			ДатаИсправленияКорректировочного  = ВыборкаСФ.ДатаИсправленияКорректировочного;
		КонецЕсли;
	Иначе
		НомерИсправленияКорректировочного = "--";
		ДатаИсправленияКорректировочного  = '00010101';
	КонецЕсли;
	
	ДанныеШапки.Вставить("НомерИсправленияКорректировочного", НомерИсправленияКорректировочного);
	ДанныеШапки.Вставить("ДатаИсправленияКорректировочного",  ДатаИсправленияКорректировочного);
	
	ТаблицаРеквизитовОснований = Новый ТаблицаЗначений;
	ТаблицаРеквизитовОснований.Колонки.Добавить("НомерСчетаФактуры");
	ТаблицаРеквизитовОснований.Колонки.Добавить("ДатаСчетаФактуры");
	ТаблицаРеквизитовОснований.Колонки.Добавить("УчитыватьИсправлениеИсходногоДокумента");
	ТаблицаРеквизитовОснований.Колонки.Добавить("НомерИсправления");
	ТаблицаРеквизитовОснований.Колонки.Добавить("ДатаИсправления");
	
	ВыборкаОснования = ВыборкаСФ.Выбрать();
	Пока ВыборкаОснования.Следующий() Цикл
		
		НовоеОснование = ТаблицаРеквизитовОснований.Добавить();
		
		// Номер и дата исходного счета-фактуры
		НовоеОснование.НомерСчетаФактуры = СокрЛП(ВыборкаОснования.НомерИсходногоДокумента);
		
		НовоеОснование.ДатаСчетаФактуры  = ВыборкаОснования.ДатаИсходногоДокумента;
		
		НовоеОснование.УчитыватьИсправлениеИсходногоДокумента = ВыборкаОснования.УчитыватьИсправлениеИсходногоДокумента;
		// Номер и дата исправления исходного счета-фактуры
		Если ВыборкаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина Тогда
			НовоеОснование.НомерИсправления = ВыборкаОснования.НомерИсправленияИсходногоДокумента;
			НовоеОснование.ДатаИсправления	 = ВыборкаОснования.ДатаИсправленияИсходногоДокумента;
		Иначе
			НовоеОснование.НомерИсправления = "--";
			НовоеОснование.ДатаИсправления	= '00010101';
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаРеквизитовОснований.Свернуть("НомерСчетаФактуры,ДатаСчетаФактуры, УчитыватьИсправлениеИсходногоДокумента, НомерИсправления,ДатаИсправления");
	ДанныеШапки.Вставить("ТаблицаРеквизитовОснований", ТаблицаРеквизитовОснований);

	ДанныеШапки.Вставить("Поставщик", Реквизиты.Поставщик);
	
	// ИНН и КПП продавца
	ДанныеШапки.Вставить("ИННпродавца", Реквизиты.ИННпоставщика);
	ДанныеШапки.Вставить("КППпродавца", "");

	Если ТипЗнч(Реквизиты.Поставщик) = Тип("Строка") Тогда
		
		ДанныеШапки.Вставить("НаименованиеПродавца", Реквизиты.Поставщик);
		ДанныеШапки.Вставить("АдресПродавца",        Реквизиты.АдресПоставщика);
		ДанныеШапки.Вставить("ИННКППпродавца",       Реквизиты.ИННКПППоставщика);
		
	Иначе
		
		СведенияОПоставщике = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.ДатаСведений);
		
		ДанныеШапки.Вставить("НаименованиеПродавца",
			УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,"));
		
		// Адрес продавца
		ДанныеШапки.Вставить("АдресПродавца",
			УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
			
		ДанныеШапки.Вставить("ИННКППпродавца",
			ДанныеШапки.ИННпродавца
			+ ?(ЗначениеЗаполнено(ДанныеШапки.КППпродавца), "/", "")
			+ ДанныеШапки.КППпродавца);
		
	КонецЕсли;
	
	СведенияОПокупателе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.ДатаСведений);
	
	// Наименование покупателя
	ДанныеШапки.Вставить("Покупатель", Реквизиты.Покупатель);
	ДанныеШапки.Вставить("НаименованиеПокупателя",
		УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	
	// Адрес покупателя
	ДанныеШапки.Вставить("АдресПокупателя",
		УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
	
	// ИНН и КПП покупателя
	ДанныеШапки.Вставить("ИННпокупателя", Реквизиты.ИННпокупателя);
	ДанныеШапки.Вставить("КППпокупателя", "");
	
	ДанныеШапки.Вставить("ИННКППпокупателя",
		ДанныеШапки.ИННпокупателя
		+ ?(ЗначениеЗаполнено(ДанныеШапки.КППпокупателя), "/", "")
		+ ДанныеШапки.КППпокупателя);
	
	// Валюта
	Если ЗначениеЗаполнено(Реквизиты.Валюта) Тогда
		Валюта = Реквизиты.Валюта.НаименованиеПолное + ", " + Реквизиты.Валюта.Код;
	Иначе
		Валюта = "";		
	КонецЕсли;
	
	ДанныеШапки.Вставить("Валюта", Реквизиты.Валюта);
	ДанныеШапки.Вставить("ВалютаНаименование", "Валюта: наименование, код " + Валюта);
	ДанныеШапки.Вставить("ВалютаНаименованиеУКД", Валюта);

	// Данные для подвала
	Если ТипЗнч(Реквизиты.Поставщик) = Тип("Строка") Тогда
		ОрганизацияДляРеквизитовПодвала = Реквизиты.Организация;
	Иначе
		ОрганизацияДляРеквизитовПодвала = Реквизиты.Поставщик;
	КонецЕсли;
	
	Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(ОрганизацияДляРеквизитовПодвала, ВыборкаСФ.Дата);
	
	ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияДляРеквизитовПодвала, "ЮридическоеФизическоеЛицо");
	Если ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ДанныеШапки.Вставить("ФИОРуководителя", Руководители.ФИОРуководителя);
		ДанныеШапки.Вставить("Руководитель", Руководители.Руководитель);
		
		ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ФИОГлавногоБухгалтера);
		ДанныеШапки.Вставить("ГлавныйБухгалтер", Руководители.ГлавныйБухгалтер);
	Иначе
		
		ДанныеШапки.Вставить("Свидетельство", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
		
		ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияДляРеквизитовПодвала, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(ФизЛицо) Тогда
			ДанныеФизЛица = УправлениеНебольшойФирмойСервер.ДанныеФизЛица(, ФизЛицо, ВыборкаСФ.Дата, Истина);
			ДанныеШапки.Вставить("ФИОПБОЮЛ", ДанныеФизЛица.Представление);
		Иначе
			ДанныеШапки.Вставить("ФИОПБОЮЛ", Руководители.ФИОРуководителя);
		КонецЕсли;
		
	КонецЕсли;
	
	// Данные для универсального передаточного документа
	Если ДополнитьДаннымиУПД Тогда
		
		// Наименование экономического субъекта - составителя документа
		ПредставлениеПоставщика = ДанныеШапки.НаименованиеПродавца;
		ИННПоставщика           = ДанныеШапки.ИННПродавца;
		КПППоставщика           = ДанныеШапки.КПППродавца;
		
		Если ЗначениеЗаполнено(КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ПредставлениеПоставщика, ИННПоставщика, КПППоставщика);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеПоставщика, ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		ДанныеШапки.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		
		Если ЗначениеЗаполнено(ДанныеШапки.КППпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ДанныеШапки.НаименованиеПокупателя, ДанныеШапки.ИННпокупателя, ДанныеШапки.КППпокупателя);
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ИННпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ДанныеШапки.НаименованиеПокупателя, ДанныеШапки.ИННпокупателя);
		Иначе
			ПредставлениеКонтрагента = ДанныеШапки.НаименованиеПокупателя;
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
		
		ДанныеШапки.Вставить("Основание", Реквизиты.Основание);
		
		Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Реквизиты.Поставщик, ВыборкаСФ.Дата);
		ДанныеШапки.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
		ДанныеШапки.Вставить("ФИОРуководителяНакладная", Руководители.ФИОРуководителя);
		
		// Статус
		Если НЕ ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
			СтатусУКД = 2;
		Иначе
			СтатусУКД = 1;
		КонецЕсли;
		
		ДанныеШапки.Вставить("СтатусУКД", СтатусУКД);
			
	КонецЕсли;

    Возврат ДанныеШапки;

КонецФункции

Функция ТекстЗапросаПечатьКорректировочныхСчетовФактур(ДляУниверсальногоКорректировочногоДокумента = Ложь) Экспорт

	НачалоИспользованияСФ1137 = Константы.НачалоИспользованияСФ1137.Получить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыОснования.Ссылка КАК СчетФактура,
	|	ДокументыОснования.Ссылка.Дата КАК Дата,
	|	ДокументыОснования.Ссылка.Номер КАК Номер,
	|	ДокументыОснования.Ссылка.ВидОперации КАК ВидСчетаФактуры,
	|	ДокументыОснования.Ссылка.Исправление КАК Исправление,
	|	ДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	ДокументыОснования.Ссылка.Дата КАК ДатаИсправления,
	|	ДокументыОснования.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	ДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	ДокументыОснования.Ссылка.Дата КАК ДатаСведений,
	|	ЛОЖЬ КАК СчетФактураБезНДС,
	|	ДокументыОснования.Ссылка.Контрагент КАК Контрагент,
	|	ДокументыОснования.Ссылка.Контрагент.КПП КАК КППСчетаФактуры,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ДокументыОснования.НомерСтроки КАК НомерСтроки,
	|	ДокументыОснования.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	ДокументыОснования.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	ДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	ДокументыОснования.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Ссылка В(&МассивОбъектов)
	|	И &УсловиеПоДате
	|	И ДокументыОснования.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСчетФактура.Корректировка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СчетФактура,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(ВидСчетаФактуры),
	|	МАКСИМУМ(Исправление),
	|	МАКСИМУМ(НомерИсправления),
	|	МАКСИМУМ(ДатаИсправления),
	|	МАКСИМУМ(УчитыватьИсправлениеИсходногоДокумента),
	|	МАКСИМУМ(НомерИсправляемогоКорректировочногоДокумента),
	|	МАКСИМУМ(ДатаИсправляемогоКорректировочногоДокумента),
	|	МАКСИМУМ(СчетФактураБезНДС),
	|	МАКСИМУМ(ЭтоСчетФактураВыданный),
	|	МАКСИМУМ(НомерИсходногоДокумента),
	|	МАКСИМУМ(ДатаИсходногоДокумента),
	|	МАКСИМУМ(НомерИсправленияИсходногоДокумента),
	|	МАКСИМУМ(ДатаИсправленияИсходногоДокумента)
	|ПО
	|	СчетФактура";
	
	Если ДляУниверсальногоКорректировочногоДокумента Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате",
			"ДокументыОснования.Ссылка.Дата >= ДАТАВРЕМЯ(2013,1,1)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДате",
			"ДокументыОснования.Ссылка.Дата >= &НачалоИспользованияСФ1137");
	КонецЕсли;
	
	Возврат ТекстЗапроса + УправлениеНебольшойФирмойСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаДокумента", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Товар КАК Товар,
	|	ТаблицаДокумента.ТоварКод КАК ТоварКод,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаДокумента.ТоварНаименование КАК СТРОКА(10))) = """"
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ТаблицаДокумента.Товар)
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.ТоварНаименование КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.КоличествоДоИзменения,
	|	ТаблицаДокумента.КоличествоПослеИзменения,
	|	ТаблицаДокумента.ЦенаДоИзменения,
	|	ТаблицаДокумента.ЦенаПослеИзменения,
	|	ТаблицаДокумента.СтоимостьБезНДСДоИзменения,
	|	ТаблицаДокумента.СтоимостьБезНДСПослеИзменения,
	|	ТаблицаДокумента.СтавкаНДС,
	|	&ТекстБезАкциза КАК Акциз,
	|	ТаблицаДокумента.СуммаНДСДоИзменения,
	|	ТаблицаДокумента.СуммаНДСПослеИзменения,
	|	ТаблицаДокумента.СтоимостьСНДСДоИзменения,
	|	ТаблицаДокумента.СтоимостьСНДСПослеИзменения,
	|	ТаблицаДокумента.РазницаБезНДСУвеличение,
	|	ТаблицаДокумента.РазницаБезНДСУменьшение,
	|	ТаблицаДокумента.РазницаНДСУвеличение,
	|	ТаблицаДокумента.РазницаНДСУменьшение,
	|	ТаблицаДокумента.РазницаСНДСУвеличение,
	|	ТаблицаДокумента.РазницаСНДСУменьшение
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО ТаблицаДокумента.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабЧасти,
	|	НомерСтроки";

	Возврат ТекстЗапроса + УправлениеНебольшойФирмойСервер.ТекстРазделителяЗапросовПакета();

КонецФункции

// Процедура простоавляет прочерки в пустые поля.
//
Процедура ПроставитьПрочеркиВПустыеПоля(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если (СтрНайти(ТекПараметр, "Продавец:") <> 0)
			И (СокрЛП(ТекПараметр) = "Продавец:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Продавец: --");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Адрес:") <> 0)
			И(СокрЛП(ТекПараметр) = "Адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Адрес: --");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Идентификационный номер продавца (ИНН):") <> 0)
			И (СокрЛП(ТекПараметр) = "Идентификационный номер продавца (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер продавца (ИНН): --");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Грузоотправитель и его адрес:") <> 0)
			И (СокрЛП(ТекПараметр) = "Грузоотправитель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузоотправитель и его адрес: --");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Грузополучатель и его адрес:") <> 0)
			И (СокрЛП(ТекПараметр) = "Грузополучатель и его адрес:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Грузополучатель и его адрес: --");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "К платежно-расчетному документу №") <> 0)
			и (СокрЛП(ТекПараметр) = "К платежно-расчетному документу №  от") Тогда
			ОбластьМакета.Параметры.Установить(т, "К платежно-расчетному документу № -- от --");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Покупатель:") <> 0)
			И (СокрЛП(ТекПараметр) = "Покупатель:") Тогда
			ОбластьМакета.Параметры.Установить(т, "Покупатель: --");
			
		ИначеЕсли (СтрНайти(ТекПараметр, "Идентификационный номер покупателя (ИНН):") <> 0)
			И (СокрЛП(ТекПараметр) = "Идентификационный номер покупателя (ИНН):") Тогда
			ОбластьМакета.Параметры.Установить(т, "Идентификационный номер покупателя (ИНН): --");
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			
			ОбластьМакета.Параметры.Установить(т, "--");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьПрочеркиВПустыеПоля()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура", "Счет-фактура", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, Ложь));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактураКорректировочный") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактураКорректировочный", "Корректировочный счет-фактура", ПечатнаяФормаКорректировочныхСчетовФактур(МассивОбъектов, ОбъектыПечати, Ложь));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, Истина));
		
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура")
			И ПараметрыПечати.Свойство("Ошибки")
			И ПараметрыПечати.Ошибки <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ПараметрыПечати.Ошибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьСчетовФактур";
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ФункциональныеОпции = "ПередачаТоваровНаКомиссию,ПриемТоваровНаКомиссию,ИспользуетсяОСНО,ИспользоватьСчетаФактурыИсходящие,УчетГТД";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьУКД";
	КомандаПечати.Идентификатор = "УниверсальныйКорректировочныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный корректировочный документ'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьКорректировкиРеализаций";
	КомандаПечати.Порядок = 5;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли