
#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьВидимостьЭлементовВводаНаОсновании(ПоказатьСписком)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДокументОснование", "Видимость", НЕ ПоказатьСписком);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДокументыОснований", "Видимость", ПоказатьСписком);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыДокументОснование", "Видимость", ПоказатьСписком);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредоплатаДокументОснование", "Видимость", ПоказатьСписком);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДокументыОснованияВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.ДокументыОснования.Выгрузить(,
			"ДокументОснование"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьДокументыОснованияВХранилище()

&НаСервере
Процедура ПолучитьДокументыОснованияИзХранилища(АдресДокументыОснованияВХранилище)
	
	ТаблицаДокументыОснования = ПолучитьИзВременногоХранилища(АдресДокументыОснованияВХранилище);
	Объект.ДокументыОснования.Очистить();
	
	ДозаполнитьРеквизитыШапки = Истина;
	Для каждого СтрокаДокументыОснования Из ТаблицаДокументыОснования Цикл
		
		Строка = Объект.ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДокументыОснования);
		
		Если ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			РеквизитыКорректировочногоСчетФактуры = Документы.СчетФактура.ПолучитьПараметрыЗаполненияКорректировочногоСчетаФактуры(Строка.ДокументОснование);
			
			Если ДозаполнитьРеквизитыШапки Тогда
				ЗаполнитьЗначенияСвойств(Объект, РеквизитыКорректировочногоСчетФактуры, "ИсправляемыйСчетФактура, ВидОперации, НомерИсходногоДокумента, 
					|ДатаИсходногоДокумента, НомерИсправляемогоКорректировочногоДокумента, ДатаИсправляемогоКорректировочногоДокумента, НомерИсправления, Исправление");
				ДозаполнитьРеквизитыШапки = Ложь;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Строка, РеквизитыКорректировочногоСчетФактуры, 
				"НомерИсходногоДокумента, ДатаИсходногоДокумента, УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДокументыОснованияИзХранилища()

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) 
		И Объект.ДокументыОснования.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию"".
								|Продолжить выполнение операции?'");
								
	ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьЗаполненияДокументаПоОснованию", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
конецПроцедуры // ЗаполнитьПоДокументуОснованию()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(Объект.ВалютаДокумента) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты документа (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс документа (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
									
		НовыйКурсКратность = Новый Структура;
		НовыйКурсКратность.Вставить("КурсНовый", КурсНовый);
		НовыйКурсКратность.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьУстановкиНовогоКурсаИКратности", ЭтотОбъект, НовыйКурсКратность);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыДокумента()

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком()
	
	Элементы.ДокументыОснованияРедактироватьСписком.Пометка = НЕ Элементы.ДокументыОснованияРедактироватьСписком.Пометка;
	
	КоличествоСтрок = Объект.ДокументыОснования.Количество();
	
	Если НЕ Элементы.ДокументыОснованияРедактироватьСписком.Пометка
		И КоличествоСтрок > 1 Тогда
		
		Ответ = Неопределено;
		
		ДополнительныеПараметры = Новый Структура("КоличествоСтрок", КоличествоСтрок);
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru='Все указанные документы основания кроме первого будут удалены из списка. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		УстановитьВозможностьРедактированияСпискомФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
	
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Элементы.ДокументыОснованияРедактироватьСписком.Пометка = Истина;
		Возврат;
	КонецЕсли;
	
	Пока КоличествоСтрок > 1 Цикл
		Объект.ДокументыОснования.Удалить(Объект.ДокументыОснования[КоличествоСтрок - 1]);
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	
	Объект.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	
	
	УстановитьВозможностьРедактированияСпискомФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомФрагмент()
	
	ИзменитьВидимостьЭлементовВводаНаОсновании(Элементы.ДокументыОснованияРедактироватьСписком.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Новый Структура("ЗаполнитьПоДокументамОснованиям", Истина));
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	УстановитьВидимостьРеквизитов();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Процедура ЗаполнитьНомераГТДНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ПОЛУЧЕНИЕ ОСТАТКОВ ПО ГТД
	ВременнаяТаблицаЗапасы = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	ВременнаяТаблицаЗапасы.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	ВременнаяТаблицаЗапасы.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	Массив.Добавить(Тип("СправочникСсылка.ПартииНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	ВременнаяТаблицаЗапасы.Колонки.Добавить("Партия", ОписаниеТипов);
	
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		
		НоваяСтрока					= ВременнаяТаблицаЗапасы.Добавить();
		НоваяСтрока.Номенклатура	= СтрокаТЧ.Номенклатура;
		НоваяСтрока.Характеристика	= СтрокаТЧ.Характеристика;
		НоваяСтрока.Партия			= СтрокаТЧ.Партия;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураЗапасы.Номенклатура,
	|	СчетФактураЗапасы.Характеристика,
	|	СчетФактураЗапасы.Партия
	|ПОМЕСТИТЬ ТаблицаЗапасы
	|ИЗ
	|	&ВременнаяТаблицаЗапасы КАК СчетФактураЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗапасовПоРегиструГТД.СтранаПроисхождения,
	|	СУММА(ОстаткиЗапасовПоРегиструГТД.КоличествоОстаток) КАК КоличествоОстаток,
	|	ОстаткиЗапасовПоРегиструГТД.Номенклатура,
	|	ОстаткиЗапасовПоРегиструГТД.Характеристика,
	|	ОстаткиЗапасовПоРегиструГТД.Партия,
	|	ОстаткиЗапасовПоРегиструГТД.НомерГТД,
	|	ОстаткиЗапасовПоРегиструГТД.НомерГТД.Код КАК КодГТД,
	|	ОстаткиЗапасовПоРегиструГТД.ДатаГТД КАК ДатаГТД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения КАК СтранаПроисхождения,
	|		ЗапасыВРазрезеГТДОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыВРазрезеГТДОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыВРазрезеГТДОстатки.Характеристика КАК Характеристика,
	|		ЗапасыВРазрезеГТДОстатки.Партия КАК Партия,
	|		ЗапасыВРазрезеГТДОстатки.НомерГТД КАК НомерГТД,
	|		ЗапасыВРазрезеГТДОстатки.НомерГТД.Код КАК КодГТД,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ДатаГТД
	|	ИЗ
	|		ТаблицаЗапасы КАК ТаблицаЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(, Организация = &Организация) КАК ЗапасыВРазрезеГТДОстатки
	|			ПО ТаблицаЗапасы.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
	|				И ТаблицаЗапасы.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
	|				И ТаблицаЗапасы.Партия = ЗапасыВРазрезеГТДОстатки.Партия
	|	ГДЕ
	|		ЗапасыВРазрезеГТДОстатки.КоличествоОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущийДокументСчетФактура.СтранаПроисхождения,
	|		ВЫБОР
	|			КОГДА ТекущийДокументСчетФактура.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ТекущийДокументСчетФактура.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ТекущийДокументСчетФактура.Количество, 0)
	|		КОНЕЦ,
	|		ТекущийДокументСчетФактура.Номенклатура,
	|		ТекущийДокументСчетФактура.Характеристика,
	|		ТекущийДокументСчетФактура.Партия,
	|		ТекущийДокументСчетФактура.НомерГТД,
	|		ТекущийДокументСчетФактура.НомерГТД.Код,
	|		ДАТАВРЕМЯ(1, 1, 1)
	|	ИЗ
	|		РегистрНакопления.ЗапасыВРазрезеГТД КАК ТекущийДокументСчетФактура
	|	ГДЕ
	|		ТекущийДокументСчетФактура.Регистратор = &Ссылка
	|		И ТекущийДокументСчетФактура.Период <= &Период
	|		И ТекущийДокументСчетФактура.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ОстаткиЗапасовПоРегиструГТД
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗапасовПоРегиструГТД.СтранаПроисхождения,
	|	ОстаткиЗапасовПоРегиструГТД.Номенклатура,
	|	ОстаткиЗапасовПоРегиструГТД.Характеристика,
	|	ОстаткиЗапасовПоРегиструГТД.Партия,
	|	ОстаткиЗапасовПоРегиструГТД.НомерГТД,
	|	ОстаткиЗапасовПоРегиструГТД.НомерГТД.Код,
	|	ОстаткиЗапасовПоРегиструГТД.ДатаГТД");
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВременнаяТаблицаЗапасы", ВременнаяТаблицаЗапасы);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	ОстаткиПоГТД = Запрос.Выполнить().Выгрузить();
	
	// Выделим даты из номеров ГТД (даты должны быть в новом формате = 6 символов)
	Для каждого СтрокаТаблицы Из ОстаткиПоГТД Цикл
		
		СтрокаТаблицы.ДатаГТД = ГрузовыеТаможенныеДекларацииСервер.ВыделитьДатуИзНомераГТД(СтрокаТаблицы.КодГТД);
		
		//
		// Удалить лишнии строки! Дата документа не может быть старше номера ГТД.
		//
		
	КонецЦикла; 
	
	ОстаткиПоГТД.Сортировать("Номенклатура, Характеристика, Партия, ДатаГТД");
	
	// РАЗНЕСЕНИЕ ОСТАТКОВ
	ТаблицаЗапасы	= Объект.Запасы.Выгрузить();
	ТаблицаЗапасы.Очистить();
	
	СтруктураОтбора	= Новый Структура("Номенклатура, Характеристика, Партия");
	
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		
		СуммаПоСтроке		= СтрокаТЧ.Сумма;
		СуммаНДСПоСтроке	= СтрокаТЧ.СуммаНДС;
		ВсегоПоСтроке		= СтрокаТЧ.Всего;
		
		СтруктураОтбора.Номенклатура	= СтрокаТЧ.Номенклатура;
		СтруктураОтбора.Характеристика	= СтрокаТЧ.Характеристика;
		СтруктураОтбора.Партия			= СтрокаТЧ.Партия;
		
		МассивСтрокГТД		= ОстаткиПоГТД.НайтиСтроки(СтруктураОтбора);
		
		КоличествоОстаток	= СтрокаТЧ.Количество;
		Для каждого СтрокаМассива Из МассивСтрокГТД Цикл
			
			НоваяСтрока = ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			НоваяСтрока.НомерГТД			= СтрокаМассива.НомерГТД;
			НоваяСтрока.СтранаПроисхождения	= СтрокаМассива.СтранаПроисхождения;
			
			Если КоличествоОстаток <= СтрокаМассива.КоличествоОстаток Тогда
				
				НоваяСтрока.Количество			= КоличествоОстаток;
				СтрокаМассива.КоличествоОстаток	= СтрокаМассива.КоличествоОстаток - КоличествоОстаток;
				КоличествоОстаток				= 0;
				
				Если СтрокаМассива.КоличествоОстаток <= 0 Тогда
					
					ОстаткиПоГТД.Удалить(СтрокаМассива);
					
				КонецЕсли;
				
				НоваяСтрока.Сумма		= СуммаПоСтроке;
				НоваяСтрока.СуммаНДС	= СуммаНДСПоСтроке;
				НоваяСтрока.Всего		= ВсегоПоСтроке;
				
				Прервать;
				
			Иначе
				
				НоваяСтрока.Количество	= СтрокаМассива.КоличествоОстаток;
				КоличествоОстаток		= КоличествоОстаток - СтрокаМассива.КоличествоОстаток;
				ОстаткиПоГТД.Удалить(СтрокаМассива);
				
				НоваяСтрока.Сумма		= НоваяСтрока.Количество * НоваяСтрока.Цена;
				СтавкаНДС				= ?(ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС), НоваяСтрока.СтавкаНДС.Ставка, 0);
				НоваяСтрока.СуммаНДС	= НоваяСтрока.Сумма * СтавкаНДС / 100;
				НоваяСтрока.Всего		= НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
				
				СуммаПоСтроке			= СуммаПоСтроке - НоваяСтрока.Сумма;
				СуммаНДСПоСтроке		= СуммаНДСПоСтроке - НоваяСтрока.СуммаНДС;
				ВсегоПоСтроке			= ВсегоПоСтроке - НоваяСтрока.Всего;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОстаток > 0 Тогда
		
			НоваяСтрока				= ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
			НоваяСтрока.Количество			= КоличествоОстаток;
			НоваяСтрока.НомерГТД			= Справочники.НомераГТД.ПустаяСсылка();
			НоваяСтрока.СтранаПроисхождения = СтрокаТЧ.Номенклатура.СтранаПроисхождения;
			
			НоваяСтрока.Сумма				= СуммаПоСтроке;
			НоваяСтрока.СуммаНДС			= СуммаНДСПоСтроке;
			НоваяСтрока.Всего				= ВсегоПоСтроке;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Объект.Запасы.Загрузить(ТаблицаЗапасы);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ЗаполнитьНомераГТДНаСервере()

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДокумента));
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		ДанныеСтавкаНДС = СтруктураДанные.Номенклатура.СтавкаНДС;
	Иначе
		ДанныеСтавкаНДС = СтруктураДанные.Организация.СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	Если СтруктураДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс") 
		И ЗначениеЗаполнено(ДанныеСтавкаНДС) И НЕ ДанныеСтавкаНДС.Расчетная Тогда
		
		ДанныеСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(ДанныеСтавкаНДС);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("СтавкаНДС", ДанныеСтавкаНДС);
	
	СтруктураДанные.Вставить("Цена", 0);		
	СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	Если НЕ СтруктураДанные.Свойство("Количество") Тогда 
		СтруктураДанные.Вставить("Количество", 1);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДСОрганизации(СтруктураДанные)
	
	ДанныеСтавкаНДС = СтруктураДанные.Организация.СтавкаНДСПоУмолчанию;
	
	Если ЗначениеЗаполнено(ДанныеСтавкаНДС) И НЕ ДанныеСтавкаНДС.Расчетная Тогда
		
		ДанныеСтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(ДанныеСтавкаНДС);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("СтавкаНДС", ДанныеСтавкаНДС);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьСтавкуНДСОрганизации()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100;	
	
КонецПроцедуры // ПересчитатьСуммыДокумента() 

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
		
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Объект.Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	УстановитьВидимостьРеквизитов();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
		
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		Ложь
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервереБезКонтекста
Функция ТипНоменклатурыЗапас(НоменклатураСсылка)
	
	Возврат НоменклатураСсылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	
КонецФункции // ТипНоменклатурыЗапас()

&НаСервере
Функция ПоместитьЗапасыВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Запасы.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции // ПоместитьЗапасыВХранилище()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		НоваяСтрока.СтранаПроисхождения = НоваяСтрока.Номенклатура.СтранаПроисхождения;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Процедура ПолучитьЗапасыИзХранилищаДляЗаполненияНомеровГТД(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	
	Объект[ИмяТабличнойЧасти].Очистить();
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ПоместитьДокументыОплатыВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.ДатаНомерДокументовОплаты.Выгрузить(),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьДокументыОплатыВХранилище()

&НаСервере
Процедура ПолучитьДокументыОплатыИзХранилища(АдресДокументыОплатыВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресДокументыОплатыВХранилище);
	Объект.ДатаНомерДокументовОплаты.Загрузить(ТаблицаДляЗагрузки);
	
КонецПроцедуры // ПолучитьДокументыОплатыИзХранилища()

&НаСервере
Процедура УстановитьВидимостьРеквизитов()
	
	Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидОперации", "Доступность", Объект.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Корректировка И Не Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНомерДата", "Видимость", Не Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНомерДата1", "Видимость", Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсправлениеНомерДата", "Видимость", Объект.Исправление);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИсправляемый", "Видимость", Объект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка ИЛИ Объект.Исправление);
	
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерВходящегоДокумента, Формат(Объект.ДатаВходящегоДокумента,"ДЛФ=Д"));
		
	ИначеЕсли ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 от %2'"),
			Объект.НомерИсходногоДокумента, Формат(Объект.ДатаИсходногоДокумента,"ДЛФ=Д"));
		
	КонецЕсли;
		
	НадписьСчетФактура = ТекстНадписи;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Элементы.ЗапасыКоличество.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗапасыЦена.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗапасыСумма.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	// Видимость элементов для работы с таблицей "Предоплата".
	Элементы.СтраницаПредоплата.Видимость = ПолучитьВидимостьСтраницыПредоплата(Объект.ВидОперации, Объект.Договор, Объект.ВалютаДокумента);
	
КонецПроцедуры // УстановитьВидимостьРеквизитов()

&НаСервереБезКонтекста
Функция ПолучитьВидимостьСтраницыПредоплата(ВидОперации, Договор, ВалютаДокумента)
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	Возврат (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Продажа")
			ИЛИ
			ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Корректировка"))
			И Договор.ВалютаРасчетов <> НациональнаяВалюта
			И ВалютаДокумента <> НациональнаяВалюта
			И Договор.РасчетыВУсловныхЕдиницах;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Договор, Документ, Организация, Контрагент, ВидОперации, Отказ)
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
		ИЛИ Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора)
		И Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Получить() Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеВидаОперации(ИзменениеОперации = Истина)
	
	Если ИзменениеОперации Тогда
		Объект.ДокументыОснования.Очистить();
		Объект.ДокументОснование = Неопределено;
		Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	КонецЕсли;
	
	ЭтоАванс = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУправлениеВидимостьюПриАвансах", "Видимость", НЕ ЭтоАванс);
	
	Если ЭтоАванс Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.СчетНаОплату"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
		
		ДопустимыеТипыДокументОснование = Новый ОписаниеТипов(МассивОтбора);
		
		Элементы.ЗапасыНоменклатура.АвтоВыборНезаполненного		= Ложь;
		Элементы.ЗапасыНоменклатура.АвтоОтметкаНезаполненного	= Ложь;
		
		Для каждого СтрокаТЧ Из Объект.Запасы Цикл
			
			Если ИзменениеОперации И ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) И НЕ СтрокаТЧ.СтавкаНДС.Расчетная Тогда
				
				СтрокаТЧ.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСРасчетная(СтрокаТЧ.СтавкаНДС);
				
			КонецЕсли;
		
			СтрокаТЧ.СтранаПроисхождения = Неопределено;
			СтрокаТЧ.НомерГТД = Неопределено;
			
		КонецЦикла;
		
		Объект.Грузоотправитель = Неопределено;;
		Объект.Грузополучатель = Неопределено;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Корректировка") Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		
		ДопустимыеТипыДокументОснование = Новый ОписаниеТипов(МассивОтбора);
		
	Иначе
		
		Для каждого СтрокаТЧ Из Объект.Запасы Цикл
			
			Если ИзменениеОперации И ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) И СтрокаТЧ.СтавкаНДС.Расчетная Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура.СтавкаНДС) Тогда
					СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
				Иначе
					СтрокаТЧ.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаВозврат Тогда
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Иначе
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ПриемИПередачаВРемонт"));
		КонецЕсли;
		
		ДопустимыеТипыДокументОснование = Новый ОписаниеТипов(МассивОтбора);
		
		Элементы.ЗапасыНоменклатура.АвтоВыборНезаполненного		= Истина;
		Элементы.ЗапасыНоменклатура.АвтоОтметкаНезаполненного	= Истина;
		
		Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
			Элементы.Грузоотправитель.Доступность = Истина;
			Объект.ОнЖе = Ложь;
		Иначе
			Элементы.Грузоотправитель.Доступность = Ложь;
			Объект.ОнЖе = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДокументОснование.ОграничениеТипа = ДопустимыеТипыДокументОснование;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И
		(ТипЗнч(Объект.ДокументОснование) = Тип("ДокументССылка.ОтчетКомитенту")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриемИПередачаВРемонт")) Тогда
		
		Элементы.ЗапасыСодержание.Видимость 			= Истина;
		
		Элементы.ЗапасыНоменклатура.Видимость			= Ложь;
		Элементы.ЗапасыХарактеристика.Видимость			= Ложь;
		Элементы.ЗапасыПартия.Видимость 				= Ложь;
		Элементы.ЗапасыЕдиницаИзмерения.Видимость 		= Ложь;
		Элементы.ЗапасыСтранаПроисхождения.Видимость	= Ложь;
		Элементы.ЗапасыНомерГТД.Видимость				= Ложь;
		Элементы.ВидОперации.Доступность 				= Ложь;
		
	Иначе
		
		Элементы.ЗапасыНоменклатура.Видимость			= Истина;
		Элементы.ЗапасыХарактеристика.Видимость			= Истина;
		Элементы.ЗапасыПартия.Видимость 				= Истина;
		
		Элементы.ЗапасыЕдиницаИзмерения.Видимость 		= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ЗапасыКоличество.Видимость 			= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ЗапасыЦена.Видимость 					= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ЗапасыСтранаПроисхождения.Видимость 	= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ЗапасыНомерГТД.Видимость 				= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		
		Элементы.ГруппаЗаполнитьНомераГТД.Доступность	= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.УстановитьНомерГТД.Доступность			= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ВидОперации.Доступность 				= Истина;
		
	КонецЕсли;
	
	Элементы.СтраницаПредоплата.Видимость = ПолучитьВидимостьСтраницыПредоплата(Объект.ВидОперации, Объект.Договор, Объект.ВалютаДокумента);
	
КонецПроцедуры // ОбработатьИзменениеВидаОперации()

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
		
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.Договор);
		
		ВалютаРасчетовПередИзменением = Объект.ВалютаДокумента;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			
			Объект.Курс		= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0,		1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность= ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0,	1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
			
		КонецЕсли;
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(СтруктураДанные.ВалютаРасчетов)
			И Объект.Договор <> ДоговорПередИзменением
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов
			И Объект.Запасы.Количество() > 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
											|Необходимо проверить валюту документа!'");
			
			ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ТекстПредупреждения);
			
		КонецЕсли;
		
		УстановитьНадписьЦеныИВалюта();
		
		Элементы.СтраницаПредоплата.Видимость = ПолучитьВидимостьСтраницыПредоплата(Объект.ВидОперации, Объект.Договор, Объект.ВалютаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаДокументаПередИзменением, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Договор",			Объект.Договор);
	СтруктураПараметров.Вставить("ЭтоСчетФактура",	Истина);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", 			Объект.Курс);
	СтруктураПараметров.Вставить("Кратность", 		Объект.Кратность);
	СтруктураПараметров.Вставить("Организация",		Компания); 
	СтруктураПараметров.Вставить("ДатаДокумента",	Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения",ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаДокументаПередИзменением", ВалютаДокументаПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("ВидОперации", СтруктураДанные.ВидОперации);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.СчетФактура.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НайденнаяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("НаВозврат", НаВозврат);
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПоступлениеВКассу") ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПоступлениеНаСчет") Или
		ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
	
		Документ = ?(ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПоступлениеВКассу"), "ПоступлениеВКассу", "ПоступлениеНаСчет");
		Документ = ?(ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПоступлениеВКассу"), "ПоступлениеВКассу", 
			?(ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПоступлениеНаСчет"), "ПоступлениеНаСчет", "ОперацияПоПлатежнымКартам"));
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|		ПоступлениеВКассуРасшифровкаПлатежа.Договор КАК Договор
		|	ИЗ
		|		Документ." + Документ + ".РасшифровкаПлатежа КАК ПоступлениеВКассуРасшифровкаПлатежа
		|	ГДЕ
		|		ПоступлениеВКассуРасшифровкаПлатежа.Ссылка = &Ссылка
		|		И ПоступлениеВКассуРасшифровкаПлатежа.ПризнакАванса"
		);
		
		Запрос.УстановитьПараметр("Ссылка", Параметры.Основание);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НеОткрыватьФорму = Истина;
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания					= УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент					= Объект.Контрагент;
	Договор						= Объект.Договор;
	
	НациональнаяВалюта			= Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте			= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта 		= СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций") Тогда
		ЭлементКУдалению = Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийСчетФактура.Корректировка);
		Если ЭлементКУдалению <> Неопределено Тогда
			Элементы.ВидОперации.СписокВыбора.Удалить(ЭлементКУдалению);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента") Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.СчетНаОплату"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
		
		ДопустимыеТипыДокументОснование = Новый ОписаниеТипов(МассивОтбора);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Корректировка") Тогда
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		
		ДопустимыеТипыДокументОснование = Новый ОписаниеТипов(МассивОтбора);
		
	Иначе
		
		Если НаВозврат Тогда
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Иначе
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ПриемИПередачаВРемонт"));
		КонецЕсли;
		
		ДопустимыеТипыДокументОснование = Новый ОписаниеТипов(МассивОтбора);
		
		Элементы.ЗапасыНоменклатура.АвтоВыборНезаполненного = Истина;
		Элементы.ЗапасыНоменклатура.АвтоОтметкаНезаполненного = Истина;
		
	КонецЕсли;
	
	Если Объект.ОнЖе Тогда
		
		Элементы.Грузоотправитель.Доступность = Ложь;
		
	КонецЕсли;
	
	УправлениеНебольшойФирмойСервер.НастроитьГруппуЦеныИВалюты(ЭтаФорма);
	
	Элементы.ДокументОснование.ОграничениеТипа = ДопустимыеТипыДокументОснование;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументССылка.ОтчетКомитенту")
			ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриемИПередачаВРемонт")) Тогда
		
		Если НЕ (Параметры.Свойство("Основание")
			И ТипЗнч(Параметры.Основание) = Тип("Структура")
			И Параметры.Основание.Свойство("ЗаполнитьНомераГТД")
			И Параметры.Основание.ЗаполнитьНомераГТД) Тогда
		
			Элементы.ЗапасыСодержание.Видимость 			= Истина;
			
			Элементы.ЗапасыНоменклатура.Видимость			= Ложь;
			Элементы.ЗапасыХарактеристика.Видимость			= Ложь;
			Элементы.ЗапасыПартия.Видимость 				= Ложь;
			Элементы.ЗапасыЕдиницаИзмерения.Видимость 		= Ложь;
			Элементы.ЗапасыСтранаПроисхождения.Видимость	= Ложь;
			Элементы.ЗапасыНомерГТД.Видимость				= Ложь;
			Элементы.ВидОперации.Доступность 				= Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ЗапасыЕдиницаИзмерения.Видимость 		= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ЗапасыКоличество.Видимость 			= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ЗапасыЦена.Видимость 					= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ЗапасыСтранаПроисхождения.Видимость	= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.ЗапасыНомерГТД.Видимость 				= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		
		Элементы.ГруппаЗаполнитьНомераГТД.Доступность 	= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		Элементы.УстановитьНомерГТД.Доступность			= (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")) И (НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента"));
		
	КонецЕсли;
	
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	// Для СФ на основе документов комиссии:
	// Если не видно не номенклатуры не содержания, то нужно вкл. видимость для содержания
	Если НЕ (Элементы.ЗапасыНоменклатура.Видимость 
		И Элементы.ЗапасыСодержание.Видимость) Тогда
		
		Элементы.ЗапасыСодержание.Видимость = Истина;
		
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 		= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	
	Если НаВозврат Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки);
		НовыйМассив.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту);
		НовыйМассив.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику);
		НовыйМассив.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения);
		МассивДоступныхВидовОпераций = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", МассивДоступныхВидовОпераций);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДокументОснование.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	Элементы.СтраницаПредоплата.Заголовок = СтрЗаменить(РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента), "Предоплата", "Предоплата (для печати)");
	
	// ЭДО
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыЭДОПриСоздании);
	// Конец ЭДО
	
	// Установка видимости договора.
	УстановитьВидимостьРеквизитов();
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	// Конец ПодборНоменклатурыВДокументах
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НеОткрыватьФорму Тогда
		Отказ = Истина;
	Иначе
		УстановитьНадписьЦеныИВалюта();
	КонецЕсли;
	
	КоличествоСтрок = Объект.ДокументыОснования.Количество();
	Элементы.ДокументыОснованияРедактироватьСписком.Пометка = КоличествоСтрок > 1;
	ИзменитьВидимостьЭлементовВводаНаОсновании(Элементы.ДокументыОснованияРедактироватьСписком.Пометка);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
	УстановитьНадписьДокументыОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаВыбора" Тогда
		
		Для каждого ИдентификаторСтроки Из Элементы.Запасы.ВыделенныеСтроки Цикл
			
			СтрокаЗапасы = Объект.Запасы.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаЗапасы = Неопределено Тогда
				Продолжить;
			Иначе
				СтрокаЗапасы.НомерГТД = ВыбранноеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЗаписиКонтрагента"
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьРеквизитов();
		
	ИначеЕсли ИмяСобытия = "ЗаполнениеНомеровГТД"
		И ЗначениеЗаполнено(Параметр) 
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилищаДляЗаполненияНомеровГТД(АдресЗапасовВХранилище, "Запасы");
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Объект.Договор, Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
			КонецЕсли;
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если НЕ ВладелецФормы = Неопределено Тогда
		
		Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		
			ЗакрыватьПриВыборе = Ложь;
			
			Если СтрНайти(ВладелецФормы.ИмяФормы, "ФормаДокумента") <> 0 
				И (ЗначениеЗаполнено(Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВладелецФормы.Объект.Ссылка)))
				ИЛИ (ВладелецФормы.Объект.Ссылка = Объект.ДокументОснование)) Тогда
			
				ОповеститьОВыборе(УправлениеНебольшойФирмойКлиент.ПредставлениеСчетаФактуры(Объект.Дата, Объект.Номер));
			
			Иначе
			
				ОповеститьОВыборе("Ввести счет-фактуру");
				
				Структура = Новый Структура;
				Структура.Вставить("ДокументОснование", Объект.ДокументОснование);
				Структура.Вставить("Представление", УправлениеНебольшойФирмойКлиент.ПредставлениеСчетаФактуры(Объект.Дата, Объект.Номер));
				Оповестить("ОбновлениеТекстаПроСчетФактуру", Структура);
			
			КонецЕсли; 
			
		КонецЕсли;
		
	Иначе
		
		Структура = Новый Структура;
		Структура.Вставить("ДокументОснование", Объект.ДокументОснование);
		Структура.Вставить("Представление", УправлениеНебольшойФирмойКлиент.ПредставлениеСчетаФактуры(Объект.Дата, Объект.Номер));
		Оповестить("ОбновлениеТекстаПроСчетФактуру", Структура);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ПересчитатьКурсКратностьВалютыДокумента(СтруктураДанные);
		КонецЕсли;	
		
		УстановитьНадписьЦеныИВалюта();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	
	УстановитьНадписьЦеныИВалюта();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение( , Объект.ИсправляемыйСчетФактура);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент);
		Объект.Договор 	= СтруктураДанные.Договор;
		
		ОбработатьИзменениеДоговора();
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОнЖеПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ОнЖе Тогда
		
		Элементы.Грузоотправитель.Доступность	= Ложь;
		Объект.Грузоотправитель 				= Неопределено;
		
	Иначе
		
		Элементы.Грузоотправитель.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуНажатие(Элемент)
	
	СтандартнаяОбработка			= Ложь;
	Модифицированность 				= Истина;
	АдресДокументыОснованияВХранилище= ПоместитьДокументыОснованияВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресДокументыОснованияВХранилище,
		|Договор,
		|Контрагент,
		|Валюта,
		|Исправление,
		|ДопустимыеТипы",
		АдресДокументыОснованияВХранилище,
		Объект.Договор,
		Объект.Контрагент,
		Объект.ВалютаДокумента,
		Объект.Исправление,
		ДопустимыеТипыДокументОснование
	);
	
	Результат = Неопределено;
	ОткрытьФорму("Документ.СчетФактура.Форма.ФормаДокументыОснования", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("ПерейтиКСпискуНажатиеЗавершение", ЭтотОбъект, Новый Структура("АдресДокументыОснованияВХранилище", АдресДокументыОснованияВХранилище)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуНажатиеЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    АдресДокументыОснованияВХранилище = ДополнительныеПараметры.АдресДокументыОснованияВХранилище;
    
    
    Результат = Результат1;
    Если Результат = КодВозвратаДиалога.OK Тогда
        ПолучитьДокументыОснованияИзХранилища(АдресДокументыОснованияВХранилище);
    КонецЕсли;

КонецПроцедуры // ПерейтиКСпискуНажатие()

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Объект.ДокументыОснования.Добавить();
	КонецЕсли;
	
	Объект.ДокументыОснования[0].ДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

&НаКлиенте
Процедура ДокументыОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДокументыОплатыВХранилище = ПоместитьДокументыОплатыВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресДокументыОплатыВХранилище",
		АдресДокументыОплатыВХранилище
	);
	
	КодВозврата = Неопределено;

	
	ОткрытьФорму("Документ.СчетФактура.Форма.ФормаРедактированияДокументовОплаты", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("ДокументыОплатыНажатиеЗавершение", ЭтотОбъект, Новый Структура("АдресДокументыОплатыВХранилище", АдресДокументыОплатыВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОплатыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресДокументыОплатыВХранилище = ДополнительныеПараметры.АдресДокументыОплатыВХранилище;
    
    
    КодВозврата = Результат;
    Если КодВозврата = КодВозвратаДиалога.OK Тогда
        Модифицированность = Истина;
        ПолучитьДокументыОплатыИзХранилища(АдресДокументыОплатыВХранилище);
    КонецЕсли;
    
    УстановитьНадписьДокументыОплаты();

КонецПроцедуры // ДокументыОплатыНажатие()

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // ЦеныИВалютаНажатие()

#КонецОбласти

#Область ОбработчикиСобытийТаблиц

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока 
		И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.НаАвансКомитента")) Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		
		СтруктураДанные = ПолучитьСтавкуНДСОрганизации(СтруктураДанные);
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	Если НЕ СтрокаТабличнойЧасти.Количество = 0 Тогда 
		СтруктураДанные.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанные);
	СтрокаТабличнойЧасти.Содержание = "";
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = УправлениеНебольшойФирмойСервер.ПолучитьТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;	
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли (Коэффициент = 0) Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли; 		
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыВсегоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего * СтавкаНДС / (100 + СтавкаНДС);		
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего * 100 / (100 + СтавкаНДС);
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.Запасы.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура) Тогда
			
			ВыбранноеЗначение = Неопределено;
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыСтранаПроисхожденияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекстСообщения = "";
	ДанныеТекущейСтроки = Элементы.Запасы.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура) 
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
			ИЛИ (ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия")) Тогда
			
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", Символы.ПС) + 
				НСтр("ru = 'Учет ГТД для отечественных товаров не ведется!'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Запасы.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.НомерГТД) Тогда
			
			ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(ДанныеТекущейСтроки.НомерГТД));
			Если ДатаГТД > Объект.Дата Тогда
				
				ТекстВопроса = Нстр("ru ='Выбрана ГТД с датой регистрации старше, чем дата документа.
					|Продолжить?'");
				
				РезультатПредупреждения = Новый ОписаниеОповещения("ОбработкаРезультатаПредупрежденияОДатеГТД", ЭтотОбъект);
				ПоказатьВопрос(РезультатПредупреждения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекСтрока = Элементы.Запасы.ТекущиеДанные;
	СтуктураРеквизита = Новый Структура("Объект,ТабЧасть,НомерСтроки,ИмяРеквизита", "Объект","Запасы",ТекСтрока.НомерСтроки-1,"Содержание");
	ОбщегоНазначенияКлиентПереопределяемый.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект, СтуктураРеквизита, Строка(ТекСтрока.Номенклатура)+": содержание");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПредоплата

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Продажа"), Истина, Ложь), // Подбор
		Ложь, // ЕстьЗаказ
		Ложь, // ЗаказВШапке
		Компания, // Компания
		Неопределено, // Заказ
		Объект.Дата, // Дата
		Объект.Ссылка, // Ссылка
		Объект.Контрагент, // Контрагент
		Объект.Договор, // Договор
		Объект.Курс, // Курс
		Объект.Кратность, // Кратность
		Объект.ВалютаДокумента, // ВалютаДокумента
		Объект.Запасы.Итог("Всего") // СуммаДокумента
	);
	
	КодВозврата = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение1", ЭтотОбъект, Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора", АдресПредоплатаВХранилище, ПараметрыПодбора)));
	Возврат;
	
	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.СтраницаПредоплата.Заголовок = СтрЗаменить(РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента), "Предоплата", "Предоплата (для печати)");
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    ПараметрыПодбора = ДополнительныеПараметры.ПараметрыПодбора;
    
    
    КодВозврата = Результат;
    
    РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент1(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    
    КодВозврата = Результат;
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
    
    Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Продажа")
        И (КодВозврата = КодВозвратаДиалога.OK) Тогда
        ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;

КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
		
		СтруктураДанные = ПолучитьДанныеДокументПриИзменении(СтрокаТабличнойЧасти.Документ);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = СтруктураДанные.СуммаРасчетов;
		
		СтрокаТабличнойЧасти.Курс = 
			?(СтрокаТабличнойЧасти.Курс = 0,
				?(Объект.Курс = 0,
				1,
				Объект.Курс),
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность =
			?(СтрокаТабличнойЧасти.Кратность = 0,
				?(Объект.Кратность = 0,
				1,
				Объект.Кратность),
			СтрокаТабличнойЧасти.Кратность
		);
			
		СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументПриИзменении(Документ)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СуммаРасчетов", Документ.РасшифровкаПлатежа.Итог("СуммаРасчетов"));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДокументПриИзменении()

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ДокументыОснованияРедактироватьСписком(Команда)
	
	УстановитьВозможностьРедактированияСписком();
	
КонецПроцедуры // ДокументыОснованияРедактироватьСписком()

&НаКлиенте
Процедура ЗаполнитьНомераГТД(Команда)
	
	Если Объект.Запасы.Количество() < 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Незаполнена табличная часть с запасами. Выполнение не возможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса= НСтр("ru = 'В табличной части будут перезаполнены колонки ""Номер ГТД"" и ""Страна происхождения""! Продолжить?'");
	Оповещение	= Новый ОписаниеОповещения("ЗаполнитьНомераГТДЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераГТДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьНомераГТДНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьПоДокументуОснованию();
	УстановитьНадписьДокументыОплаты();
	
КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	Объект.Организация);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",		ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС"));
	ПараметрыПодбора.Вставить("СуммаВключаетНДС", 		Ложь);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент",	Ложь);
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	НЕ Элементы.ЗапасыЦена.ТолькоПросмотр);

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСчетФактура.Аванс") Тогда
		ПараметрыПодбора.Вставить("РасчетнаяСтавкаНДС", Истина);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура УстановитьНомерГТД(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана строка табличной части. Выполнение не возможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",, ЭтотОбъект);
	
КонецПроцедуры // УстановитьНомерГТД()

&НаКлиенте
Процедура ПодборНомеровГТД(Команда)
	
	Если Объект.Запасы.Количество() < 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Незаполнена табличная часть с запасами. Выполнение не возможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ДатаДокумента",							Объект.Дата);
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца",	УникальныйИдентификатор);
	ПараметрыПодбора.Вставить("АдресЗапасовВХранилище",					ПоместитьЗапасыВХранилище());
	
	ОткрытьФорму("ОбщаяФорма.ПодборНомеровГТД", ПараметрыПодбора);
	
КонецПроцедуры // ПодборНомеровГТД()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиенте
Процедура УстановитьНадписьЦеныИВалюта()
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ЦеныИВалюта = НСтр("ru = '%Валюта%'");
		ЦеныИВалюта = СтрЗаменить(ЦеныИВалюта, "%Валюта%", СокрЛП(Строка(Объект.ВалютаДокумента)));
		
	Иначе
		
		ЦеныИВалюта = НСтр("ru = '<Валюта не указана>'");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаКлиенте
Процедура УстановитьНадписьДокументыОплаты()
	
	ДокументыОплаты = "";
	
	Если Объект.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
		ДокументыОплаты = НСтр("ru='Редактировать...'");
	КонецЕсли;
	
	Для каждого ТекСтрока Из Объект.ДатаНомерДокументовОплаты Цикл
		ДокументыОплаты =
			?(ДокументыОплаты = "", "", ДокументыОплаты + ", ")
		  + "№ "
		  + ТекСтрока.НомерПлатежноРасчетногоДокумента
		  + " от "
		  + Формат(ТекСтрока.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yy");
	КонецЦикла;
	  
	Если Объект.ДатаНомерДокументовОплаты.Количество() = 1 Тогда
		Элементы.ДокументыОплаты.Заголовок = "Документ оплаты";
	Иначе
		Элементы.ДокументыОплаты.Заголовок = "Документы оплаты";
	КонецЕсли;
	
КонецПроцедуры // УстановитьНадписьДокументыОплаты()

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОпределитьНеобходимостьЗаполненияДокументаПоОснованию(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу();
		ОбработатьИзменениеВидаОперации(Ложь);
		
		УстановитьНадписьЦеныИВалюта();
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьЗаполненияДокументаПоОснованию()

&НаКлиенте
Процедура ОпределитьНеобходимостьУстановкиНовогоКурсаИКратности(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		УстановитьНадписьЦеныИВалюта();
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаПоНовомуКурсу()

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура")
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Модифицированность		= Истина;
		
		Объект.ВалютаДокумента	= РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс				= РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность		= РезультатЗакрытия.КратностьРасчетов;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ДополнительныеПараметры.ВалютаДокументаПередИзменением, "Запасы");
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьНадписьЦеныИВалюта();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиенте
Процедура ОбработкаРезультатаПредупрежденияОДатеГТД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ДанныеТекущейСтроки = Элементы.Запасы.ТекущиеДанные;
		ДанныеТекущейСтроки.НомерГТД = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРезультатаПредупрежденияОДатеГТД()

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",        Объект.Организация);
		СтруктураДанные.Вставить("ВидОперации", Объект.ВидОперации);
		СтруктураДанные.Вставить("Номенклатура",       Строка.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		Если НЕ ЗначениеЗаполнено(Строка.СтранаПроисхождения) Тогда
			Строка.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
