
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииПриЧтенииНаСервере();
		
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ГрупповоеИзменениеСтрок
	Если ЗначениеЗаполнено(ПланИзменениеСтрокДействие)
		И НЕ ЗавершениеРаботы Тогда
		
		СохранитьНастройкиГрупповогоИзменения(ПланИзменениеСтрокДействие);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборПроизведен"
		И ЗначениеЗаполнено(Параметр)
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		ОбработатьПодбор(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьТаблицуИзКроссТаблицыПланирования(ТекущийОбъект.Запасы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПланирования Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОбъектПланирования) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка",
				"Заполнение",
				РеквизитыСценария.ПредставлениеИзмерения,
				СтрокаТаблицы.НомерСтроки,
				Элементы.СтраницаПлан.Заголовок
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаПланирования", СтрокаТаблицы.НомерСтроки, "ОбъектПланирования"),
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если РеквизитыСценария.ПланироватьКоличество Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВсегоКоличество) Тогда
				
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					"Заполнение",
					НСтр("ru='Количество'"),
					СтрокаТаблицы.НомерСтроки,
					Элементы.СтраницаПлан.Заголовок
				);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаПланирования", СтрокаТаблицы.НомерСтроки, "КолонкаКоличество_0"),
					,
					Отказ
				);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					"Заполнение",
					НСтр("ru='Единица измерения'"),
					СтрокаТаблицы.НомерСтроки,
					Элементы.СтраницаПлан.Заголовок
				);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаПланирования", СтрокаТаблицы.НомерСтроки, "ЕдиницаИзмерения"),
					,
					Отказ
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийПланированияПриИзменении(Элемент)
	
	Если ТаблицаПланирования.Количество() > 0 И ЗначениеЗаполнено(РеквизитыДоИзменения.СценарийПланирования) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаданВопросОбИзмененииСценария", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='План содержит введенные данные.
			|При продолжении, состав колонок будет приведен в соответствие новому сценарию.
			|
			|Продолжить?'");
		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.Заголовок = НСтр("ru='Подтверждение изменения сценария'");
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ПараметрыВопроса);
		
	Иначе
		
		ПриИзмененииСценарияСервер();
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПланированияПриИзменении(Элемент)
	
	ПриИзмененииПериодаПланированияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПланированияПриИзменении(Элемент)
	
	ПриИзмененииПериодаПланированияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Изменился префикс, очищаем номер для перепрефиксации в подписке на событие "ПриУстановкеНовогоНомера"
	Объект.Номер = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаДокумента",		Объект.Дата);
	ПараметрыФормы.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ПерезаполнитьЦены",	Ложь);
	ПараметрыФормы.Вставить("ПересчитатьЦены",		Ложь);
	ПараметрыФормы.Вставить("БылиВнесеныИзменения",	Ложь);
	
	Если РеквизитыСценария.ПланироватьКоличество Тогда
		ПараметрыФормы.Вставить("ВидЦен",			Объект.ВидЦен);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦеныИВалютаФормаЗакрыта", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИзменениеСтрокДействиеПриИзменении(Элемент)
	
	УправлениеВидимостьюГрупповогоИзменения(ЭтотОбъект);
	УправлениеОформлениемГрупповогоИзменения(ЭтотОбъект);
	
	ПланИзменениеСтрокЗначение = Элементы.ПланИзменениеСтрокЗначение.ОграничениеТипа.ПривестиЗначение(ПланИзменениеСтрокЗначение);
	ТекущийЭлемент = Элементы.ПланИзменениеСтрокЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	УправлениеОформлениемГрупповогоИзменения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПланирования

&НаКлиенте
Процедура ТаблицаПланированияПриИзменении(Элемент)
	
	ЗаполнитьНомераСтрокТаблицы(ЭтотОбъект);
	РассчитатьКоличествоСтрок(ЭтотОбъект);
	РассчитатьИтогПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланированияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьКоличествоСтрок(ЭтотОбъект);
	РассчитатьИтогПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланированияПослеУдаления(Элемент)
	
	ЗаполнитьНомераСтрокТаблицы(ЭтотОбъект);
	РассчитатьКоличествоСтрок(ЭтотОбъект);
	РассчитатьИтогПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланированияОбъектПланированияПриИзменении(Элемент)
	
	Если Не РеквизитыСценария.ИзмерениеПланирования = ПредопределенноеЗначение("Перечисление.ИзмеренияПланирования.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаПланирования.ТекущиеДанные;
	
	ДействияНаСервере = Новый Структура;
	
	Если РеквизитыСценария.ПланироватьКоличество Тогда
		ДействияНаСервере.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ОбъектПланирования);
		ДействияНаСервере.Вставить("Цена", ПолучитьСтруктуруПересчетаЦены(Объект, ТекущиеДанные));
	КонецЕсли;
	
	Если ЭтотОбъект.ИспользоватьХарактеристики Тогда
		ДействияНаСервере.Вставить("ИспользуютсяХарактеристики", ТекущиеДанные.ОбъектПланирования);
	КонецЕсли;
	
	Если ДействияНаСервере.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьДанныеСервер(ДействияНаСервере);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДействияНаСервере);
	
	Если РеквизитыСценария.ПланироватьКоличество Тогда
		РассчитатьСуммуВСтрокеПоКоличествуИЦене(ТекущиеДанные, Периоды);
		РассчитатьИтогиВСтроке(ТекущиеДанные, Периоды);
		РассчитатьИтогПоДокументу(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланированияХарактеристикаПриИзменении(Элемент)
	
	Если Не РеквизитыСценария.ПланироватьКоличество Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаПланирования.ТекущиеДанные;
	
	ДействияНаСервере = Новый Структура;
	ДействияНаСервере.Вставить("Цена", ПолучитьСтруктуруПересчетаЦены(Объект, ТекущиеДанные));
	
	ПолучитьДанныеСервер(ДействияНаСервере);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДействияНаСервере);
	
	РассчитатьСуммуВСтрокеПоКоличествуИЦене(ТекущиеДанные, Периоды);
	РассчитатьИтогиВСтроке(ТекущиеДанные, Периоды);
	РассчитатьИтогПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланированияЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПланирования.ТекущиеДанные;
	
	Если ТекущиеДанные.ЕдиницаИзмерения = ВыбранноеЗначение
		Или ТекущиеДанные.Цена = 0
		Или (ТипЗнч(ТекущиеДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
			И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Цена = ТекущиеДанные.Цена * ОтношениеКоэффициентовЕдиницИзмерения(ТекущиеДанные.ЕдиницаИзмерения, ВыбранноеЗначение);
	
	РассчитатьСуммуВСтрокеПоКоличествуИЦене(ТекущиеДанные, Периоды);
	РассчитатьИтогиВСтроке(ТекущиеДанные, Периоды);
	РассчитатьИтогПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланированияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПланирования.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеПоКоличествуИЦене(ТекущиеДанные, Периоды);
	РассчитатьИтогиВСтроке(ТекущиеДанные, Периоды);
	РассчитатьИтогПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КолонкаКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПланирования.ТекущиеДанные;
	
	Индекс = Сред(Элемент.Имя, СтрДлина("КолонкаКоличество_")+1);
	ТекущиеДанные["КолонкаСумма_" + Индекс] = ТекущиеДанные["КолонкаКоличество_" + Индекс] * ТекущиеДанные.Цена;
	
	РассчитатьИтогиВСтроке(ТекущиеДанные, Периоды);
	РассчитатьИтогПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КолонкаСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПланирования.ТекущиеДанные;
	
	РассчитатьИтогиВСтроке(ТекущиеДанные, Периоды);
	РассчитатьИтогПоДокументу(ЭтотОбъект);
	
	Если РеквизитыСценария.ПланироватьКоличество И ТекущиеДанные.ВсегоКоличество > 0 Тогда
		ТекущиеДанные.Цена = ТекущиеДанные.ВсегоСумма / ТекущиеДанные.ВсегоКоличество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьПериод(Команда)
	
	УправлениеНебольшойФирмойКлиент.РедактироватьПериод(
		Объект,
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПланирования", "ОкончаниеПланирования"),
		Новый ОписаниеОповещения("УстановитьПериодЗавершение", ЭтотОбъект)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период",					Объект.Дата);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента",	Объект.Организация);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент",	Истина); //Используем параметр что бы скрыть колонки с остатками.
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	Не Элементы.ТаблицаПланированияЦена.ТолькоПросмотр);
	
	Если РеквизитыСценария.ПланироватьКоличество Тогда
		ПараметрыПодбора.Вставить("ВидЦен",				Объект.ВидЦен);
		ПараметрыПодбора.Вставить("Валюта",				Объект.ВалютаДокумента);
		ПараметрыПодбора.Вставить("СуммаВключаетНДС",	Истина);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	ТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	ТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	ТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПланируемымПродажам(Команда)
	
	ОткрытьНастройкиЗаполненияПоСхеме("СКД_ПланПродаж", НСтр("ru='Настройки заполнения по запланированным продажам'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоФактическимПродажам(Команда)
	
	ОткрытьНастройкиЗаполненияПоСхеме("СКД_ФактПродаж", НСтр("ru='Настройки заполнения по фактическим продажам'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИзменитьСтроки(Команда)
	
	РежимГрупповогоИзменения = Не РежимГрупповогоИзменения;
	
	УправлениеВидимостьюГрупповогоИзменения(ЭтотОбъект);
	
	Если РежимГрупповогоИзменения Тогда
		ИзменитьПометки(ЭтотОбъект, Истина);
		СделатьРезервнуюКопиюТаблицыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланИзменитьПометки(Команда)
	
	ИзменитьПометки(ЭтотОбъект, ?(Элементы.ПланИзменитьПометки.Картинка = БиблиотекаКартинок.УстановитьФлажки, Ложь, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПланВыполнитьДействие(Команда)
	
	ОтборСтрок = Новый Структура("Пометка", Истина);
	ОтмеченныеСтроки = ТаблицаПланирования.НайтиСтроки(ОтборСтрок);
	
	Если ПланИзменениеСтрокДействие <> ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента")
		И ОтмеченныеСтроки.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Нет выбранных строк.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПланИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		Для Каждого СтрокаТаблицы Из ОтмеченныеСтроки Цикл
			
			Для Индекс = 0 По Периоды.Количество()-1 Цикл
				СтрокаТаблицы["КолонкаСумма_" + Индекс] = СтрокаТаблицы["КолонкаСумма_" + Индекс] * (100 + ПланИзменениеСтрокЗначение) / 100;
			КонецЦикла;
			
			РассчитатьИтогиВСтроке(СтрокаТаблицы, Периоды);
			
			Если РеквизитыСценария.ПланироватьКоличество И СтрокаТаблицы.ВсегоКоличество > 0 Тогда
				СтрокаТаблицы.Цена = СтрокаТаблицы.ВсегоСумма / СтрокаТаблицы.ВсегоКоличество;
			КонецЕсли;
			
		КонецЦикла;
		
		РассчитатьИтогПоДокументу(ЭтотОбъект);
		
	ИначеЕсли ПланИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		Для Каждого СтрокаТаблицы Из ОтмеченныеСтроки Цикл
			СтрокаТаблицы.Цена = УправлениеНебольшойФирмойКлиентСервер.ОкруглитьЦену(СтрокаТаблицы.Цена, ПланИзменениеСтрокЗначение, Ложь);
		КонецЦикла;
		
		РассчитатьСуммуПоВсемСтрокамПоКоличествуИЦене(ЭтотОбъект);
		РассчитатьИтогиПоВсемСтрокам(ЭтотОбъект);
		
	ИначеЕсли ПланИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ПерезаполнитьЦены(ПланИзменениеСтрокЗначение, ОтборСтрок);
		
		РассчитатьСуммуПоВсемСтрокамПоКоличествуИЦене(ЭтотОбъект);
		РассчитатьИтогиПоВсемСтрокам(ЭтотОбъект);
		
	ИначеЕсли ПланИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		// Установить количество для всех периодов
		
		Для Каждого СтрокаТаблицы Из ОтмеченныеСтроки Цикл
			Для Индекс = 0 По Периоды.Количество()-1 Цикл
				СтрокаТаблицы["КолонкаКоличество_" + Индекс] = ПланИзменениеСтрокЗначение;
			КонецЦикла;
		КонецЦикла;
		
		РассчитатьСуммуПоВсемСтрокамПоКоличествуИЦене(ЭтотОбъект);
		РассчитатьИтогиПоВсемСтрокам(ЭтотОбъект);
		
	ИначеЕсли ПланИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		// Установить сумму для всех периодов
		
		Для Каждого СтрокаТаблицы Из ОтмеченныеСтроки Цикл
			
			Для Индекс = 0 По Периоды.Количество()-1 Цикл
				СтрокаТаблицы["КолонкаСумма_" + Индекс] = ПланИзменениеСтрокЗначение;
			КонецЦикла;
			
			РассчитатьИтогиВСтроке(СтрокаТаблицы, Периоды);
			
			Если РеквизитыСценария.ПланироватьКоличество Тогда
				СтрокаТаблицы.Цена = СтрокаТаблицы.ВсегоСумма / СтрокаТаблицы.ВсегоКоличество;
			КонецЕсли;
			
		КонецЦикла;
		
		РассчитатьИтогПоДокументу(ЭтотОбъект);
		
	ИначеЕсли ПланИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПокупателя") Тогда
		
		Для Каждого СтрокаТаблицы Из ОтмеченныеСтроки Цикл
			СтрокаТаблицы.ЗаказПокупателя = ПланИзменениеСтрокЗначение;
		КонецЦикла;
		
	ИначеЕсли ПланИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ДобавитьИзДокументаСервер();
		
		РассчитатьКоличествоСтрок(ЭтотОбъект);
		Если РеквизитыСценария.ПланироватьКоличество Тогда
			РассчитатьСуммуПоВсемСтрокамПоКоличествуИЦене(ЭтотОбъект);
			РассчитатьИтогиПоВсемСтрокам(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ПланИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки") Тогда
		
		Для Каждого СтрокаТаблицы Из ОтмеченныеСтроки Цикл
			ТаблицаПланирования.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ЗаполнитьНомераСтрокТаблицы(ЭтотОбъект);
		РассчитатьКоличествоСтрок(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОтменитьИзменения(Команда)
	
	РежимГрупповогоИзменения = Ложь;
	
	УправлениеВидимостьюГрупповогоИзменения(ЭтотОбъект);
	
	ВосстановитьИзРезервнойКопииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		"ТаблицаПланированияХарактеристика",
		"ТаблицаПланирования.ИспользуютсяХарактеристики"
	);
	
КонецПроцедуры

// Устанавливаем условное оформление для характеристик номенклатуры
//
// Параметры:
// 		Форма - Форма - Содержит данную форму 
// 		ИмяПоляВводаХарактеристики - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика"
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "характеристики используются",
//									если он отличается от "Объект.Товары.ХарактеристикиИспользуются"
// 
&НаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
																ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаХарактеристики].Имя);
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПланирования.ИспользуютсяХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",				ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",	Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",					НСтр("ru='<характеристики не используются>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",			Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
	ЦветФонаАктивногоПоля = ЦветаСтиля.ФонУправляющегоПоля;
	
	УчетВалютныхОпераций		= ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	ИспользоватьХарактеристики	= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	ПрочитатьРеквизитыСценария(РеквизитыСценария, Объект.СценарийПланирования);
	СохранитьЗначенияРеквизитовОбъекта(ЭтотОбъект);
	
	ОбновитьСтруктуруТаблицыПланирования();
	ЗаполнитьКроссТаблицуПланированияИзТаблицы(Объект.Запасы);
	ЗаполнитьИспользованиеХарактеристикДляНоменклатуры();
	
	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействийГрупповогоИзменения();
	ЗагрузитьНастройкиГрупповогоИзменения();
	УправлениеВидимостьюГрупповогоИзменения(ЭтотОбъект);
	УправлениеОформлениемГрупповогоИзменения(ЭтотОбъект);
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПрочитатьРеквизитыСценария(СтруктураРеквизитов, знач Сценарий)
	
	Реквизиты = "Периодичность, ИзмерениеПланирования, ДетализироватьДоЗаказа, ПланироватьКоличество";
	Если СтруктураРеквизитов = Неопределено Тогда
		СтруктураРеквизитов = Новый Структура(Реквизиты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, Реквизиты));
		СтруктураРеквизитов.Вставить("ПредставлениеИзмерения", Строка(СтруктураРеквизитов.ИзмерениеПланирования));
	Иначе
		СтруктураРеквизитов.Периодичность			= Перечисления.Периодичность.ПустаяСсылка();
		СтруктураРеквизитов.ИзмерениеПланирования	= Перечисления.ИзмеренияПланирования.ПустаяСсылка();
		СтруктураРеквизитов.ДетализироватьДоЗаказа	= Ложь;
		СтруктураРеквизитов.ПланироватьКоличество	= Ложь;
		СтруктураРеквизитов.Вставить("ПредставлениеИзмерения", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначенияРеквизитовОбъекта(Форма)
	
	Реквизиты = "СценарийПланирования, НачалоПланирования, ОкончаниеПланирования";
	Если Форма.РеквизитыДоИзменения = Неопределено Тогда
		Форма.РеквизитыДоИзменения = Новый Структура(Реквизиты);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма.РеквизитыДоИзменения, Форма.Объект, Реквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруТаблицыПланирования()
	
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	
	// 1. Удаление ранее добавленных элементов формы
	Для Индекс = 0 По Периоды.Количество()-1 Цикл
		ИмяГруппыКолонокПериода = "ТаблицаПланированияПериод_" + Индекс;
		Элементы.Удалить(Элементы[ИмяГруппыКолонокПериода]);
	КонецЦикла;
	
	// 2. Удаление ранее добавленных реквизитов таблицы формы
	РеквизитыПланирования = ПолучитьРеквизиты("ТаблицаПланирования");
	
	Для Каждого РеквизитПланирования Из РеквизитыПланирования Цикл
		Если СтрНачинаетсяС(РеквизитПланирования.Имя, "КолонкаКоличество_")
			Или СтрНачинаетсяС(РеквизитПланирования.Имя, "КолонкаСумма_") Тогда
			
			УдаляемыеРеквизиты.Добавить("ТаблицаПланирования." + РеквизитПланирования.Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	// 3. Разбивка по периодам
	ТаблицаПериодов = РеквизитФормыВЗначение("Периоды");
	ЗаполнитьТаблицуПериодов(ТаблицаПериодов, Объект.НачалоПланирования, Объект.ОкончаниеПланирования, РеквизитыСценария.Периодичность);
	ПроверитьКоличествоПериодов(ТаблицаПериодов);
	ЗначениеВРеквизитФормы(ТаблицаПериодов, "Периоды");
	
	// 4. Добавление реквизитов таблицы формы
	Число_15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный);
	Число_15_3 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный);
	
	Для Индекс = 0 По Периоды.Количество()-1 Цикл
		
		Если РеквизитыСценария.ПланироватьКоличество Тогда
			
			РеквизитФормы = Новый РеквизитФормы("КолонкаКоличество_" + Индекс, Число_15_3, "ТаблицаПланирования", НСтр("ru='Количество'"), Истина);
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			
		КонецЕсли;
		
		РеквизитФормы = Новый РеквизитФормы("КолонкаСумма_" + Индекс, Число_15_2, "ТаблицаПланирования", НСтр("ru='Сумма'"), Истина);
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// 5. Добавление элементов формы
	Для Индекс = 0 По Периоды.Количество()-1 Цикл
		
		ГруппаКолонок = Элементы.Добавить("ТаблицаПланированияПериод_" + Индекс, Тип("ГруппаФормы"), Элементы.ТаблицаПланирования);
		ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонок.Группировка = ГруппировкаКолонок.Горизонтальная;
		ГруппаКолонок.ОтображатьВШапке = Истина;
		ГруппаКолонок.Заголовок = Периоды.Получить(Индекс).ЗаголовокКолонки;
		
		Если РеквизитыСценария.ПланироватьКоличество Тогда
			
			НовыйЭлемент = Элементы.Добавить("КолонкаКоличество_" + Индекс, Тип("ПолеФормы"), ГруппаКолонок);
			НовыйЭлемент.ПутьКДанным = "ТаблицаПланирования." + "КолонкаКоличество_" + Индекс;
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Ширина = 10;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_КолонкаКоличествоПриИзменении");
			
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("КолонкаСумма_" + Индекс, Тип("ПолеФормы"), ГруппаКолонок);
		НовыйЭлемент.ПутьКДанным = "ТаблицаПланирования." + "КолонкаСумма_" + Индекс;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Ширина = 10;
		НовыйЭлемент.ОтображатьВШапке = РеквизитыСценария.ПланироватьКоличество;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_КолонкаСуммаПриИзменении");
		
	КонецЦикла;
	
	// 6. Свдиг итоговых показатели в конец таблицы
	Элементы.Переместить(Элементы.ТаблицаПланированияВсегоКоличество, Элементы.ТаблицаПланирования);
	Элементы.Переместить(Элементы.ТаблицаПланированияВсегоСумма, Элементы.ТаблицаПланирования);
	Элементы.Переместить(Элементы.ТаблицаПланированияРастяжение, Элементы.ТаблицаПланирования);
	
КонецПроцедуры

// Процедура заполняет таблицу периодов, последовательно датам с заданной периодичностью, для получения полей и их заголовков
//
// Параметры:
//  ТаблицаПериоды - ТаблицаЗначений - Таблица, которую заполняем отрезками заданной периодичности
//  ДатаНачала     - Дата - Дата начала периода
//  ДатаОкончания  - Дата - Дата окончания периода
//  Периодичность  - ПеречислениеСсылка.Периодичность - Периодичность с которой нужно заполнить таблицу
&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуПериодов(ТаблицаПериоды, Знач ДатаНачала, Знач ДатаОкончания, Знач Периодичность)
	
	ТаблицаПериоды.Очистить();
	
	Если Не ЗначениеЗаполнено(Периодичность)
		Или Не ЗначениеЗаполнено(ДатаНачала)
		Или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДобавлениеДатаНачала = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(ДатаНачала, Периодичность);
	ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Периодичность);
	
	Пока ДобавлениеДатаНачала < КонецДня(ДатаОкончания) Цикл
		
		НоваяСтрока = ТаблицаПериоды.Добавить();
		НоваяСтрока.ДатаНачала = ДобавлениеДатаНачала;
		НоваяСтрока.ДатаОкончания = ДобавлениеДатаОкончания;
		НоваяСтрока.ЗаголовокКолонки = ПланированиеКлиентСервер.СформироватьЗаголовокПериода(ДобавлениеДатаНачала, ДобавлениеДатаОкончания, Периодичность);
		
		ДобавлениеДатаНачала = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(ДобавлениеДатаОкончания + 1 , Периодичность);
		ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДобавлениеДатаОкончания + 1, Периодичность);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИспользованиеХарактеристикДляНоменклатуры()
	
	Если Не ИспользоватьХарактеристики
		Или Не РеквизитыСценария.ИзмерениеПланирования = Перечисления.ИзмеренияПланирования.Номенклатура Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНомераСтрокТаблицы(ЭтотОбъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Таблица.ОбъектПланирования КАК Справочник.Номенклатура) КАК Номенклатура
		|ПОМЕСТИТЬ втТаблицаНоменклатуры
		|ИЗ
		|	&КоллекцияДанных КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
		|	втТаблицаНоменклатуры.Номенклатура.ИспользоватьХарактеристики КАК ИспользуютсяХарактеристики
		|ИЗ
		|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("КоллекцияДанных", ТаблицаПланирования.Выгрузить(,"НомерСтроки, ОбъектПланирования"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Индекс = 0 По ТаблицаПланирования.Количество()-1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(ТаблицаПланирования[Индекс], Выборка, "ИспользуютсяХарактеристики");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСценарияСервер()
	
	СохранитьЗначенияРеквизитовОбъекта(ЭтотОбъект);
	ПрочитатьРеквизитыСценария(РеквизитыСценария, Объект.СценарийПланирования);
	ОбновитьСтруктуруТаблицыПланирования();
	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	РежимГрупповогоИзменения = Ложь;
	ЗаполнитьСписокДействийГрупповогоИзменения();
	УправлениеВидимостьюГрупповогоИзменения(ЭтотОбъект);
	УправлениеОформлениемГрупповогоИзменения(ЭтотОбъект);
	ПланИзменениеСтрокЗначение = Элементы.ПланИзменениеСтрокЗначение.ОграничениеТипа.ПривестиЗначение(ПланИзменениеСтрокЗначение);
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаПланированияСервер()
	
	СохранитьЗначенияРеквизитовОбъекта(ЭтотОбъект);
	ОбновитьСтруктуруТаблицыПланирования();
	РассчитатьИтогиПоВсемСтрокам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ЭтоПланированиеПоНоменклатуре = РеквизитыСценария.ИзмерениеПланирования = ПредопределенноеЗначение("Перечисление.ИзмеренияПланирования.Номенклатура");
	
	Элементы.ЦеныИВалюта.Видимость = УчетВалютныхОпераций Или РеквизитыСценария.ПланироватьКоличество;
	Элементы.ТаблицаПланированияПодбор.Видимость = ЭтоПланированиеПоНоменклатуре;
	
	Элементы.ТаблицаПланированияОбъектПланирования.Заголовок	= РеквизитыСценария.ПредставлениеИзмерения;
	Элементы.ТаблицаПланированияХарактеристика.Видимость		= ЭтоПланированиеПоНоменклатуре;
	Элементы.ТаблицаПланированияЕдиницаИзмерения.Видимость		= РеквизитыСценария.ПланироватьКоличество;
	Элементы.ТаблицаПланированияЦена.Видимость					= РеквизитыСценария.ПланироватьКоличество;
	Элементы.ТаблицаПланированияВсегоКоличество.Видимость		= РеквизитыСценария.ПланироватьКоличество;
	Элементы.ТаблицаПланированияЗаказПокупателя.Видимость		= РеквизитыСценария.ДетализироватьДоЗаказа;
	
	Если ЗначениеЗаполнено(РеквизитыСценария.ИзмерениеПланирования) Тогда
		
		ОписаниеТипов = ПланированиеКлиентСервер.ОписаниеТипаПланированияПоИзмерению(РеквизитыСценария.ИзмерениеПланирования);
		
		Элементы.ТаблицаПланированияОбъектПланирования.ОграничениеТипа = ОписаниеТипов;
		Элементы.ТаблицаПланированияОбъектПланирования.ВыборГруппИЭлементов = ?(
			РеквизитыСценария.ИзмерениеПланирования = ПредопределенноеЗначение("Перечисление.ИзмеренияПланирования.ГруппаНоменклатуры"),
			ГруппыИЭлементы.Группы,
			ГруппыИЭлементы.Элементы
		);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПланирования Цикл
			СтрокаТаблицы.ОбъектПланирования = ОписаниеТипов.ПривестиЗначение(СтрокаТаблицы.ОбъектПланирования);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИзКроссТаблицыПланирования(Таблица)
	
	Таблица.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПланирования Цикл
		
		Для Индекс = 0 По Периоды.Количество()-1 Цикл
			
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				СтрокаТаблицы,
				"ОбъектПланирования, Характеристика, ЕдиницаИзмерения, Цена, ЗаказПокупателя"
			);
			
			НоваяСтрока.ДатаПланирования = Периоды.Получить(Индекс).ДатаНачала;
			НоваяСтрока.Сумма = СтрокаТаблицы["КолонкаСумма_" + Индекс];
			
			Если РеквизитыСценария.ПланироватьКоличество Тогда
				НоваяСтрока.Количество = СтрокаТаблицы["КолонкаКоличество_" + Индекс];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКроссТаблицуПланированияИзТаблицы(Таблица, ОчищатьПередЗаполнением = Истина)
	
	Если ОчищатьПередЗаполнением Тогда
		ТаблицаПланирования.Очистить();
	КонецЕсли;
	
	Отбор = Новый Структура("ДатаНачала");
	НоваяСтрока = Неопределено;
	
	СвойстваЗаполнения = "ОбъектПланирования";
	Если РеквизитыСценария.ИзмерениеПланирования = Перечисления.ИзмеренияПланирования.Номенклатура Тогда
		СвойстваЗаполнения = СвойстваЗаполнения + ?(ИспользоватьХарактеристики, ",Характеристика", "") + ",ЕдиницаИзмерения";
	КонецЕсли;
	Если РеквизитыСценария.ДетализироватьДоЗаказа Тогда
		СвойстваЗаполнения = СвойстваЗаполнения + ",ЗаказПокупателя";
	КонецЕсли;
	ГруппировкиТаблицы = СтрРазделить(СвойстваЗаполнения, ",");
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		ДобавлятьНовуюСтрокуКроссТаблицы = Ложь;
		Если НоваяСтрока = Неопределено Тогда
			ДобавлятьНовуюСтрокуКроссТаблицы = Истина;
		Иначе
			Для Каждого ГруппировкаТаблицы Из ГруппировкиТаблицы Цикл
				Если СтрокаТаблицы[ГруппировкаТаблицы] <> НоваяСтрока[ГруппировкаТаблицы] Тогда
					ДобавлятьНовуюСтрокуКроссТаблицы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДобавлятьНовуюСтрокуКроссТаблицы Тогда
			
			НоваяСтрока = ТаблицаПланирования.Добавить();
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				СтрокаТаблицы,
				СвойстваЗаполнения
			);
			
		КонецЕсли;
		
		Отбор.ДатаНачала = СтрокаТаблицы.ДатаПланирования;
		НайденныеСтроки = Периоды.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Индекс = Периоды.Индекс(НайденныеСтроки[0]);
			НоваяСтрока["КолонкаСумма_" + Индекс] = СтрокаТаблицы.Сумма;
			
			Если РеквизитыСценария.ПланироватьКоличество Тогда
				НоваяСтрока["КолонкаКоличество_" + Индекс] = СтрокаТаблицы.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьНомераСтрокТаблицы(ЭтотОбъект);
	РассчитатьКоличествоСтрок(ЭтотОбъект);
	РассчитатьИтогиПоВсемСтрокам(ЭтотОбъект);
	
	Если РеквизитыСценария.ПланироватьКоличество Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПланирования Цикл
			Если СтрокаТаблицы.ВсегоКоличество > 0 Тогда
				СтрокаТаблицы.Цена = СтрокаТаблицы.ВсегоСумма / СтрокаТаблицы.ВсегоКоличество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	
	ТекстНадписи = "";
	
	// Валюта.
	Если Форма.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(Объект.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если Форма.РеквизитыСценария.ПланироватьКоличество И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(Объект.ВидЦен)));
	КонецЕсли;
	
	Форма.ЦеныИВалюта = ТекстНадписи;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаЦены(Объект, СтрокаТЧ)
	
	Результат = Новый Структура("ВидЦен,ДатаОбработки,ВалютаДокумента,Номенклатура,Характеристика,Коэффициент");
	
	Результат.ВидЦен			= Объект.ВидЦен;
	Результат.ДатаОбработки		= Объект.Дата;
	Результат.ВалютаДокумента	= Объект.ВалютаДокумента;
	Результат.Номенклатура		= СтрокаТЧ.ОбъектПланирования;
	Результат.Характеристика	= СтрокаТЧ.Характеристика;
	Результат.Коэффициент		= 1;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьДанныеСервер(Действия)
	
	Если Действия.Свойство("ЕдиницаИзмерения") Тогда
		Действия.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действия.ЕдиницаИзмерения, "ЕдиницаИзмерения");
	КонецЕсли;
	
	Если Действия.Свойство("ИспользуютсяХарактеристики") Тогда
		Действия.ИспользуютсяХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действия.ИспользуютсяХарактеристики, "ИспользоватьХарактеристики");
	КонецЕсли;
	
	Если Действия.Свойство("Цена") Тогда
		Действия.Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(Действия.Цена);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтношениеКоэффициентовЕдиницИзмерения(ПредыдущаяЕдиницаИзмерения, НоваяЕдиницаИзмерения)
	
	КоэффициентПредыдущейЕдиницыИзмерения = ?(
		ТипЗнч(ПредыдущаяЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),
		1,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущаяЕдиницаИзмерения, "Коэффициент")
	);
	
	КоэффициентНовойЕдиницыИзмерения = ?(
		ТипЗнч(НоваяЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"),
		1,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяЕдиницаИзмерения, "Коэффициент")
	);
	
	Если КоэффициентПредыдущейЕдиницыИзмерения = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат КоэффициентНовойЕдиницыИзмерения / КоэффициентПредыдущейЕдиницыИзмерения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПланПродаж(РезультатРасчета)
	
	Если Не ЭтоАдресВременногоХранилища(РезультатРасчета.АдресВХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаполнения = ПолучитьИзВременногоХранилища(РезультатРасчета.АдресВХранилище);
	
	ЗаполнитьКроссТаблицуПланированияИзТаблицы(ТаблицаЗаполнения, РезультатРасчета.ОчищатьПередЗаполнением);
	ЗаполнитьИспользованиеХарактеристикДляНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦены(ВидЦен = Неопределено, ПараметрыОтбора = Неопределено)
	
	Если Не РеквизитыСценария.ПланироватьКоличество
		Или Не РеквизитыСценария.ИзмерениеПланирования = Перечисления.ИзмеренияПланирования.Номенклатура Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНомераСтрокТаблицы(ЭтотОбъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Таблица.ОбъектПланирования КАК Справочник.Номенклатура) КАК Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.ЕдиницаИзмерения
		|ПОМЕСТИТЬ втТаблицаНоменклатуры
		|ИЗ
		|	&КоллекцияДанных КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ВалютаЦены,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентЕдиницыИзмеренияВЦенах,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(втТаблицаНоменклатуры.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|			ТОГДА ВЫРАЗИТЬ(втТаблицаНоменклатуры.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентЕдиницыИзмеренияВДокументе,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ втЦены
		|ИЗ
		|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ДатаСреза,
		|				(Номенклатура, Характеристика) В
		|						(ВЫБРАТЬ
		|							втТаблицаНоменклатуры.Номенклатура,
		|							втТаблицаНоменклатуры.Характеристика
		|						ИЗ
		|							втТаблицаНоменклатуры)
		|					И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО втТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И втТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|			И (ЦеныНоменклатурыСрезПоследних.Актуальность = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЦены.НомерСтроки КАК НомерСтроки,
		|	втЦены.ПорядокОкругления КАК ПорядокОкругления,
		|	втЦены.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
		|	втЦены.Цена * ЕСТЬNULL(КурсыВалютыВидЦены.Курс, 1) * ЕСТЬNULL(КурсыВалютыДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютыДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютыВидЦены.Кратность, 1)) * втЦены.КоэффициентЕдиницыИзмеренияВДокументе / втЦены.КоэффициентЕдиницыИзмеренияВЦенах КАК Цена
		|ИЗ
		|	втЦены КАК втЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, Валюта = &ВалютаДокумента) КАК КурсыВалютыДокумента
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|				&ДатаСреза,
		|				Валюта В
		|					(ВЫБРАТЬ
		|						втЦены.ВалютаЦены
		|					ИЗ
		|						втЦены)) КАК КурсыВалютыВидЦены
		|		ПО втЦены.ВалютаЦены = КурсыВалютыВидЦены.Валюта
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("КоллекцияДанных", ТаблицаПланирования.Выгрузить(ПараметрыОтбора, "НомерСтроки, ОбъектПланирования, Характеристика, ЕдиницаИзмерения"));
	Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВидЦен", ?(ВидЦен = Неопределено, Объект.ВидЦен, ВидЦен));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ПараметрыОтбора = Неопределено Тогда
		ЗаполняемаяКоллекция = ТаблицаПланирования;
	Иначе
		ЗаполняемаяКоллекция = ТаблицаПланирования.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЗаполняемаяКоллекция Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		СтрокаТаблицы.Цена = УправлениеНебольшойФирмойКлиентСервер.ОкруглитьЦену(
			Выборка.Цена,
			Выборка.ПорядокОкругления,
			Выборка.ОкруглятьВБольшуюСторону
		);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодбор(АдресВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = ТаблицаПланирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		НоваяСтрока.ОбъектПланирования	= СтрокаЗагрузки.Номенклатура;
		
		Если РеквизитыСценария.ПланироватьКоличество И Периоды.Количество() > 0 Тогда
			НоваяСтрока["КолонкаКоличество_0"]	= СтрокаЗагрузки.Количество;
			НоваяСтрока["КолонкаСумма_0"]		= СтрокаЗагрузки.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьКоличествоСтрок(ЭтотОбъект);
	РассчитатьИтогиПоВсемСтрокам(ЭтотОбъект);
	
	Если РеквизитыСценария.ПланироватьКоличество Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПланирования Цикл
			Если СтрокаТаблицы.ВсегоКоличество > 0 Тогда
				СтрокаТаблицы.Цена = СтрокаТаблицы.ВсегоСумма / СтрокаТаблицы.ВсегоКоличество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьИспользованиеХарактеристикДляНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКоличествоПериодов(ТаблицаПериодов)
	
	МаксКоличествоПериодов = 60; // Ограничение производительности формы
	
	Если ТаблицаПериодов.Количество() > МаксКоличествоПериодов Тогда
		
		Пока ТаблицаПериодов.Количество() > МаксКоличествоПериодов Цикл
			ТаблицаПериодов.Удалить(ТаблицаПериодов.Количество()-1);
		КонецЦикла;
		
		Объект.ОкончаниеПланирования = ТаблицаПериодов[ТаблицаПериодов.Количество()-1].ДатаОкончания;
		СохранитьЗначенияРеквизитовОбъекта(ЭтотОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Выбран слишком большой период. Период окончания был изменен.
				|Для планирования на длительный срок, вы можете ввести несколько планов продаж или выбрать сценарий с большей периодичностью.'"), , , "Объект.ОкончаниеПланирования");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РассчетныеПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомераСтрокТаблицы(Форма)
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаПланирования Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоСтрок(Форма)
	
	Форма.ПланКоличествоСтрок = Форма.ТаблицаПланирования.Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиВСтроке(СтрокаТаблицы, Периоды)
	
	СтрокаТаблицы.ВсегоКоличество	= 0;
	СтрокаТаблицы.ВсегоСумма		= 0;
	
	Для Индекс = 0 По Периоды.Количество()-1 Цикл
		
		ЗначениеКолонки = 0;
		
		Если СтрокаТаблицы.Свойство("КолонкаКоличество_" + Индекс, ЗначениеКолонки) Тогда
			СтрокаТаблицы.ВсегоКоличество = СтрокаТаблицы.ВсегоКоличество + ЗначениеКолонки;
		КонецЕсли;
		
		Если СтрокаТаблицы.Свойство("КолонкаСумма_" + Индекс, ЗначениеКолонки) Тогда
			СтрокаТаблицы.ВсегоСумма = СтрокаТаблицы.ВсегоСумма + ЗначениеКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоВсемСтрокам(Форма)
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаПланирования Цикл
		РассчитатьИтогиВСтроке(СтрокаТаблицы, Форма.Периоды);
	КонецЦикла;
	
	РассчитатьИтогПоДокументу(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуВСтрокеПоКоличествуИЦене(СтрокаТаблицы, Периоды)
	
	Для Индекс = 0 По Периоды.Количество()-1 Цикл
		СтрокаТаблицы["КолонкаСумма_" + Индекс] = СтрокаТаблицы["КолонкаКоличество_" + Индекс] * СтрокаТаблицы.Цена;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуПоВсемСтрокамПоКоличествуИЦене(Форма)
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаПланирования Цикл
		РассчитатьСуммуВСтрокеПоКоличествуИЦене(СтрокаТаблицы, Форма.Периоды);
	КонецЦикла;
	
	РассчитатьИтогПоДокументу(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогПоДокументу(Форма)
	
	Форма.ПланИтогСумма = Форма.ТаблицаПланирования.Итог("ВсегоСумма");
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныеДействия

&НаКлиенте
Процедура ЗаданВопросОбИзмененииСценария(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("Значение") И Результат.Значение = КодВозвратаДиалога.Да Тогда
		ПриИзмененииСценарияСервер();
		УправлениеФормой();
	Иначе
		Объект.СценарийПланирования = РеквизитыДоИзменения.СценарийПланирования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериодаПланированияКлиент()
	
	ПланированиеКлиентСервер.УстановитьНачалоОкончаниеПериодаПланирования(РеквизитыСценария.Периодичность, Объект.НачалоПланирования, Объект.ОкончаниеПланирования);
	
	Если Объект.НачалоПланирования <> РеквизитыДоИзменения.НачалоПланирования
		Или Объект.ОкончаниеПланирования <> РеквизитыДоИзменения.ОкончаниеПланирования Тогда
		
		Если ТаблицаПланирования.Количество() > 0
			И (Объект.НачалоПланирования > РеквизитыДоИзменения.НачалоПланирования
				Или Объект.ОкончаниеПланирования < РеквизитыДоИзменения.ОкончаниеПланирования) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаданВопросОбИзмененииПериодаПланирования", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='План содержит данные.
				|При продолжении будет изменен состав периодов.
				|
				|Продолжить?'");
			ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
			ПараметрыВопроса.Заголовок = НСтр("ru='Подтверждение изменения периода планирования'");
			ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
			СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ПараметрыВопроса);
			
		Иначе
			
			ПриИзмененииПериодаПланированияСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданВопросОбИзмененииПериодаПланирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("Значение") И Результат.Значение = КодВозвратаДиалога.Да Тогда
		ПриИзмененииПериодаПланированияСервер();
	Иначе
		Объект.НачалоПланирования = РеквизитыДоИзменения.НачалоПланирования;
		Объект.ОкончаниеПланирования = РеквизитыДоИзменения.ОкончаниеПланирования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииПериодаПланированияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаФормаЗакрыта(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		
		Модифицированность = Истина;
		ЗаблокироватьДанныеФормыДляРедактирования();
		
		ЗаполнитьЗначенияСвойств(Объект, Результат, "ВидЦен, ВалютаДокумента, Курс, Кратность");
		СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
		
		Если РеквизитыСценария.ПланироватьКоличество
			И (Результат.ПерезаполнитьЦены Или Результат.ПересчитатьЦены) Тогда
			
			ПерезаполнитьЦены();
			
			РассчитатьСуммуПоВсемСтрокамПоКоличествуИЦене(ЭтотОбъект);
			РассчитатьИтогиПоВсемСтрокам(ЭтотОбъект);
			РассчитатьИтогПоДокументу(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗаполненияПоСхеме(ИмяСхемы, Заголовок = "")
	
	НачальныйОтбор = Новый Структура;
	НачальныйОтбор.Вставить("Организация",			Объект.Организация);
	НачальныйОтбор.Вставить("Подразделение",		Объект.СтруктурнаяЕдиница);
	НачальныйОтбор.Вставить("СценарийПланирования",	Объект.СценарийПланирования);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторВладельца",	УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ИмяМакетаСКД",				ИмяСхемы);
	ПараметрыФормы.Вставить("Заголовок",				Заголовок);
	ПараметрыФормы.Вставить("Периодичность",			РеквизитыСценария.Периодичность);
	ПараметрыФормы.Вставить("ИзмерениеПланирования",	РеквизитыСценария.ИзмерениеПланирования);
	ПараметрыФормы.Вставить("ДетализироватьДоЗаказа",	РеквизитыСценария.ДетализироватьДоЗаказа);
	ПараметрыФормы.Вставить("КоличествоПериодов",		Периоды.Количество());
	ПараметрыФормы.Вставить("НачалоПланирования",		Объект.НачалоПланирования);
	ПараметрыФормы.Вставить("ТекущийДокумент",			Объект.Ссылка);
	ПараметрыФормы.Вставить("НачальныйОтбор",			НачальныйОтбор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗаполненияФормаЗакрыта", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ПланПродаж.Форма.НастройкиЗаполнения", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияФормаЗакрыта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьПланПродаж(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПометки(Форма, Пометка)
	
	Форма.Элементы.ПланИзменитьПометки.Картинка		= ?(Пометка, БиблиотекаКартинок.УстановитьФлажки, БиблиотекаКартинок.СнятьФлажки);
	Форма.Элементы.ПланИзменитьПометки.Заголовок	= ?(Пометка, НСтр("ru='Снять пометки'"), НСтр("ru='Установить пометки'"));
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаПланирования Цикл
		СтрокаТаблицы.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДействийГрупповогоИзменения()
	
	Элементы.ПланИзменениеСтрокДействие.СписокВыбора.Очистить();
	
	Действия = Новый Массив;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	
	Если РеквизитыСценария.ПланироватьКоличество Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
	КонецЕсли;
	
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
	
	Если РеквизитыСценария.ДетализироватьДоЗаказа Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПокупателя);
	КонецЕсли;
	
	Если РеквизитыСценария.ИзмерениеПланирования = Перечисления.ИзмеренияПланирования.Номенклатура Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	КонецЕсли;
	
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Для Каждого Действие Из Действия Цикл
		Элементы.ПланИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ПредставлениеДействияГрупповогоИзменения(Действие));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДействияГрупповогоИзменения(ДействиеПеречисление)
	
	Если ДействиеПеречисление = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		Возврат НСтр("ru='Изменить суммы на процент'");
	ИначеЕсли ДействиеПеречисление = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		Возврат НСтр("ru='Установить количество для всех периодов'");
	ИначеЕсли ДействиеПеречисление = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		Возврат НСтр("ru='Установить сумму для всех периодов'");
	КонецЕсли;
	
	ДействиеПредставление = Строка(ДействиеПеречисление);
	Возврат Лев(ДействиеПредставление, СтрНайти(ДействиеПредставление, "@") - 1);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЗаголовкаОбъектаДействия(ДействиеПеречисление)
	
	Если ДействиеПеречисление = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		Возврат НСтр("ru='Количество'");
	ИначеЕсли ДействиеПеречисление = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		Возврат НСтр("ru='Сумма'");
	КонецЕсли;
	
	ДействиеПредставление = Строка(ДействиеПеречисление);
	Возврат Прав(ДействиеПредставление, СтрДлина(ДействиеПредставление) - СтрНайти(ДействиеПредставление, "@"));
	
КонецФункции

&НаСервереБезКонтекста
Функция ОграничениеТипаЗначенияПоДействию(ДействиеПеречисление)
	
	Соответствие = Новый Соответствие;
	МассивТипов = Новый Массив;
	
	Соответствие.Вставить(
		Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент,
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 2, ДопустимыйЗнак.Любой));
		
	Соответствие.Вставить(
		Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены,
		Новый ОписаниеТипов("ПеречислениеСсылка.ПорядкиОкругления"));
		
	Соответствие.Вставить(
		Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду,
		Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		
	Соответствие.Вставить(
		Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		
	Соответствие.Вставить(
		Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный));
		
	Соответствие.Вставить(
		Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПокупателя,
		Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
		
	МассивТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ИнвентаризацияЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ОприходованиеЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПеремещениеЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
	МассивТипов.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СборкаЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СписаниеЗапасов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплату"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	
	Соответствие.Вставить(
		Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента,
		Новый ОписаниеТипов(МассивТипов));
		
	Соответствие.Вставить(
		Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки,
		Новый ОписаниеТипов());
		
	Возврат Соответствие[ДействиеПеречисление];
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяТабличнойЧастиПоТипуДокумента(ТипДокумента)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Тип("ДокументСсылка.АктВыполненныхРабот"),	"РаботыИУслуги");
	Соответствие.Вставить(Тип("ДокументСсылка.ЗаказНаПроизводство"),	"Продукция");
	Соответствие.Вставить(Тип("ДокументСсылка.ЗаказПокупателя"),		"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.ЗаказПоставщику"),		"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.ИнвентаризацияЗапасов"),	"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.ОприходованиеЗапасов"),	"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.ПеремещениеЗапасов"),		"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.ПриходнаяНакладная"),		"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.РасходнаяНакладная"),		"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.СборкаЗапасов"),			"Продукция");
	Соответствие.Вставить(Тип("ДокументСсылка.СписаниеЗапасов"),		"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.СчетНаОплату"),			"Запасы");
	Соответствие.Вставить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"),	"Запасы");
	
	Возврат Соответствие[ТипДокумента];
	
КонецФункции

&НаСервере
Процедура СделатьРезервнуюКопиюТаблицыСервер()
	
	ПланРезервнаяКопияТаблицыАдрес = ПоместитьВоВременноеХранилище(ТаблицаПланирования.Выгрузить(), УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИзРезервнойКопииСервер()
	
	ТаблицаПланирования.Загрузить(ПолучитьИзВременногоХранилища(ПланРезервнаяКопияТаблицыАдрес));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюГрупповогоИзменения(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ПланИзменениеСтрок.Видимость = Форма.РежимГрупповогоИзменения;
	Элементы.ТаблицаПланированияПометка.Видимость = Форма.РежимГрупповогоИзменения;
	Элементы.ТаблицаПланированияНомерСтроки.Видимость = Не Форма.РежимГрупповогоИзменения;
	
	Если ЗначениеЗаполнено(Форма.ПланИзменениеСтрокДействие) Тогда
		
		Элементы.ПланИзменениеСтрокЗначение.Заголовок = ПредставлениеЗаголовкаОбъектаДействия(Форма.ПланИзменениеСтрокДействие);
		Элементы.ПланИзменениеСтрокЗначение.ОграничениеТипа = ОграничениеТипаЗначенияПоДействию(Форма.ПланИзменениеСтрокДействие);
		
	Иначе
		
		Элементы.ПланИзменениеСтрокЗначение.Заголовок = НСтр("ru='Значение'");
		Элементы.ПланИзменениеСтрокЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		
	КонецЕсли;
	
	Элементы.ПланИзменениеСтрокЗначение.Доступность = ЗначениеЗаполнено(Форма.ПланИзменениеСтрокДействие);
	Элементы.ПланИзменениеСтрокЗначение.Видимость = Форма.ПланИзменениеСтрокДействие <> ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеОформлениемГрупповогоИзменения(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПланИзменениеСтрокДействие.ЦветФона = ?(
		Не ЗначениеЗаполнено(Форма.ПланИзменениеСтрокДействие),
		Форма.ЦветФонаАктивногоПоля,
		Форма.ЦветФонаПоля
	);
	
	Элементы.ГруппаПланИзменениеСтрокЗначение.ЦветФона = ?(
		ЗначениеЗаполнено(Форма.ПланИзменениеСтрокДействие) И Не ЗначениеЗаполнено(Форма.ПланИзменениеСтрокЗначение),
		Форма.ЦветФонаАктивногоПоля,
		Форма.ЦветФонаПоля
	);
	
	Элементы.ГруппаПланВыполнитьДействие.ЦветФона = ?(
		ЗначениеЗаполнено(Форма.ПланИзменениеСтрокДействие) И ЗначениеЗаполнено(Форма.ПланИзменениеСтрокЗначение),
		Форма.ЦветФонаАктивногоПоля,
		Форма.ЦветФонаПоля
	);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзДокументаСервер()
	
	Если Не РеквизитыСценария.ИзмерениеПланирования = Перечисления.ИзмеренияПланирования.Номенклатура Тогда
		Возврат;
	КонецЕсли;
	
	// Оставим пометки только у добавленных из документа.
	ИзменитьПометки(ЭтотОбъект, Ложь);
	
	ДопустимыеТипыНоменклатуры = Новый Массив;
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Запас);
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ДопустимыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументТЧ.Номенклатура КАК Номенклатура,
		|	ДокументТЧ.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДокументТЧ.Количество КАК Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ДокументТЧ
		|ГДЕ
		|	ДокументТЧ.Ссылка = &Документ
		|	И ДокументТЧ.Номенклатура.ТипНоменклатуры В(&ТипыНоменклатуры)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументТЧ.НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказПокупателя", ПланИзменениеСтрокЗначение.Метаданные().Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Запасы", ИмяТабличнойЧастиПоТипуДокумента(ТипЗнч(ПланИзменениеСтрокЗначение)));
	
	Запрос.УстановитьПараметр("Документ", ПланИзменениеСтрокЗначение);
	Запрос.УстановитьПараметр("ТипыНоменклатуры", ДопустимыеТипыНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаПланирования.Добавить();
		НоваяСтрока.Пометка = Истина;
		НоваяСтрока.ОбъектПланирования = Выборка.Номенклатура;
		
		Если РеквизитыСценария.ПланироватьКоличество И Периоды.Количество() > 0 Тогда
			НоваяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			НоваяСтрока["КолонкаКоличество_0"] = Выборка.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	ПерезаполнитьЦены(,Новый Структура("Пометка", Истина));
	ЗаполнитьИспользованиеХарактеристикДляНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиГрупповогоИзменения()
	
	КлючОбъекта = "ГрупповоеИзменениеСтрок";
	
	КлючНастроек = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		"[ИмяДокумента]_[ИмяТаблицы]",
		Новый Структура("ИмяДокумента, ИмяТаблицы", "ПланПродаж", "ТаблицаПланирования")
	);
	Настройка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек);
	
	Если Элементы.ПланИзменениеСтрокДействие.СписокВыбора.НайтиПоЗначению(Настройка) <> Неопределено Тогда
		ПланИзменениеСтрокДействие = Настройка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПланИзменениеСтрокДействие) И Элементы.ПланИзменениеСтрокДействие.СписокВыбора.Количество() > 0 Тогда
		ПланИзменениеСтрокДействие = Элементы.ПланИзменениеСтрокДействие.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиГрупповогоИзменения(ДействиеПеречисление)
	
	КлючОбъекта = "ГрупповоеИзменениеСтрок";
	
	КлючНастроек = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		"[ИмяДокумента]_[ИмяТаблицы]",
		Новый Структура("ИмяДокумента, ИмяТаблицы", "ПланПродаж", "ТаблицаПланирования")
	);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, ДействиеПеречисление);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
