#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет КАК Количество
		|ИЗ
		|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасов
		|ГДЕ
		|	ИнвентаризацияЗапасов.Ссылка = &ДокументОснование
		|	И (ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет > 0
		|			ИЛИ ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет < 0)");
		
		Запрос.УстановитьПараметр("ДокументОснование", Параметры.Основание);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НеОткрыватьФорму = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	
	ОбновитьРеквизитыВидимостиФормы();
	УправлениеВидимостью();
	
	// Сформируем надпись цены.
	СтруктураНадписи = Новый Структура("ВидЦен", Объект.ВидЦен);
	ПредставлениеЦены = СформироватьНадписьЦены(СтруктураНадписи);
	
	// Установка способа выбора структурной единицы в зависимости от ФО.
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
	КонецЕсли;
	
	ВосстановитьНастройкиОтборов();
	
	//Установить надписи счет-фактура и основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() И
		ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПриходныйОрдер") И
		НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьСписокДокументОснование();
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	// Конец ПодборНоменклатурыВДокументах
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НеОткрыватьФорму Тогда
		ВызватьИсключение НСтр("ru = 'Нет данных для оформления пересортицы!'");
		Отказ = Истина;
	КонецЕсли;
	
	ОбновитьЗаголовкиОтборов();
	
	УправлениеФормой();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураНастроекОтборов = Новый Структура;
	СтруктураНастроекОтборов.Вставить("СписокНоменклатуры", СписокНоменклатуры);
	СтруктураНастроекОтборов.Вставить("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	СтруктураНастроекОтборов.Вставить("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	
	ТекущийОбъект.НастройкиОтборов = Новый ХранилищеЗначения(СтруктураНастроекОтборов);
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, Параметр.ЭтоОприходование);
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОСписанииКиЗГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ


КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НЕ ВыборОснования И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		ЗаполнитьПоИнвентаризацииВсеРасходженияНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиница.
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ОбновитьРеквизитыВидимостиФормы();
	УправлениеФормой();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

&НаКлиенте
Процедура РедактироватьЦены(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦены();
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦены()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦены()
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", Ложь);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	
	СтруктураЦеныИВалюта = Неопределено;
	
	ОткрытьФорму("Документ.ОприходованиеЗапасов.Форма.ФормаВыбораВидаЦен", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // 2. Открвыаем форму "Цены и Валюта".
    СтруктураЦеныИВалюта = Результат;
    
    // 3. Перезаполняем табличную часть "Запасы" если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")
        И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
        
        Объект.ВидЦен = СтруктураЦеныИВалюта.ВидЦен;
        
        // Пересчитываем цены по виду цен.
        Если СтруктураЦеныИВалюта.ПерезаполнитьЦены Тогда
            ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенНаКлиенте();
        КонецЕсли;
        
    КонецЕсли;
    
    // Сформируем надпись цены.
    СтруктураНадписи = Новый Структура("ВидЦен", Объект.ВидЦен);
    ПредставлениеЦены = СформироватьНадписьЦены(СтруктураНадписи);

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦены()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦены(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	Иначе
		ТекстНадписи = ТекстНадписи + НСтр("ru = 'указать вид цен'");
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦены()

&НаСервереБезКонтекста
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере(СтруктураДанных, ТабличнаяЧастьДокумента)
	
	СтруктураДанных.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
	УправлениеНебольшойФирмойСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере()

&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенНаКлиенте()
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата", Объект.Дата);
	СтруктураДанных.Вставить("Организация", Компания);
	СтруктураДанных.Вставить("ВидЦен", Объект.ВидЦен);
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НоменклатураОприходование) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТЧ.НоменклатураОприходование);
		СтрокаТабличнойЧасти.Вставить("Характеристика", СтрокаТЧ.ХарактеристикаОприходование);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмеренияОприходование);
		СтрокаТабличнойЧасти.Вставить("Цена", 0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураОприходование", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаОприходование", СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОприходование", СтрокаТЧ.ЕдиницаИзмерения);
		
		РезультатПоиска = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			СтрокаРезультат.Сумма = СтрокаРезультат.Количество * СтрокаРезультат.Цена;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаСервере
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенНаСервере()
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата", Объект.Дата);
	СтруктураДанных.Вставить("Организация", Компания);
	СтруктураДанных.Вставить("ВидЦен", Объект.ВидЦен);
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.НоменклатураОприходование) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура", СтрокаТЧ.НоменклатураОприходование);
		СтрокаТабличнойЧасти.Вставить("Характеристика", СтрокаТЧ.ХарактеристикаОприходование);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения", СтрокаТЧ.ЕдиницаИзмеренияОприходование);
		СтрокаТабличнойЧасти.Вставить("Цена", 0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	ПолучитьЦеныТабличнойЧастиПоВидуЦенНаСервере(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураОприходование", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаОприходование", СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОприходование", СтрокаТЧ.ЕдиницаИзмерения);
		
		РезультатПоиска = Объект.Запасы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			СтрокаРезультат.Сумма = СтрокаРезультат.Количество * СтрокаРезультат.Цена;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование.Добавить("Документ.ИнвентаризацияЗапасов.ФормаВыбора", "Инвентаризация запасов");
	СписокДокументОснование.Добавить("Документ.ПриходныйОрдер.ФормаВыбора", "Приходный ордер");
	//Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
	//	СписокДокументОснование.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", "Прием и передача в ремонт");
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыЗапасы

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = 1;
	
	СтрокаТабличнойЧасти.НеобходимостьВводаСправкиНаАлкоголь = СтруктураДанные.ЭтоАлкогольнаяПродукция;
	
	//Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураОприходованиеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.НоменклатураОприходование);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.ХарактеристикаОприходование);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Истина);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмеренияОприходование = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхожденияОприходование = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТДОприходование = Неопределено;
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаОприходованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.НоменклатураОприходование);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.ХарактеристикаОприходование);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмеренияОприходование);
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерийныеНомера = "";
		Элемент.ТекущиеДанные.СерийныеНомераОприходование = "";
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера();
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомераОприходование" Тогда
		ОткрытьПодборСерийныеНомера(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	Для Каждого ТекущаяСтрокаИдентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанные,, ИспользоватьСерийныеНомераОстатки);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомераОприходование, ТекущиеДанные,, ИспользоватьСерийныеНомераОстатки, "СерийныеНомераОприходование");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Цена = ?(СтрокаТабличнойЧасти.Количество = 0, 0, СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество);

КонецПроцедуры // ЗапасыСуммаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		//Выбрать основание
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		
		Если СписокДокументОснование.Количество()>1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		Иначе
			ОткрытьФорму("Документ.ИнвентаризацияЗапасов.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		КонецЕсли; 
		
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) тогда
			возврат;
		КонецЕсли;
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоТипу(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ВыборОснования = Истина;
		ОткрытьФорму(ВыбИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещенияВопрос, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу();		
    КонецЕсли;

КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризацииВсеРасходжения(Команда)
	
	ВыборОснования = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) ИЛИ ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		
		ПараметрыВыбораИнвентаризации = Новый Структура("Организация, СтруктурнаяЕдиница", Объект.Организация, Объект.СтруктурнаяЕдиница);
		ОткрытьФорму("Документ.ИнвентаризацияЗапасов.ФормаВыбора", ПараметрыВыбораИнвентаризации, ЭтотОбъект, УникальныйИдентификатор);
		
	Иначе
		
		ОповещениеПослеОтветаНаВопрос = Новый ОписаниеОповещения("ЗаполнитьПоИнвентаризацииВсеРасходженияВопросЗавершение", ЭтотОбъект);
		
		КнопкиВопрос = Новый СписокЗначений;
		КнопкиВопрос.Добавить(КодВозвратаДиалога.Да, "Документ-основание");
		КнопкиВопрос.Добавить(КодВозвратаДиалога.Нет, "Другая инвентаризация");
		КнопкиВопрос.Добавить(КодВозвратаДиалога.Отмена, "Отмена");
		
		ПоказатьВопрос(ОповещениеПослеОтветаНаВопрос, НСтр("ru = 'Использовать документ-основание или выбрать другую инвентаризацию?'"), КнопкиВопрос);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение отрицательными остатаками
#Область ЗаполнениеОтрицательнымиОстатками

&НаКлиенте
Процедура ЗаполнитьВсемиОтрицательнымиОстаткамиНаСкладе(Команда)
	
	ДанныеДобавлены = ЗаполнитьВсемиОтрицательнымиОстаткамиНаСкладеНаСервере();
	Если НЕ ДанныеДобавлены Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нет данных для заполнения.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВсемиОтрицательнымиОстаткамиНаСкладеНаСервере()
	
	ЕстьОтборПоНоменклатуре = СписокНоменклатуры.Количество() > 0;
	ЕстьОтборПоГруппамНоменклатуры = СписокГруппНоменклатуры.Количество() > 0;
	ЕстьОтборПоКатегориямНоменклатуры = СписокКатегорийНоменклатуры.Количество() > 0;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЗначениеЗаполнено(Объект.Ячейка) Тогда
		Запрос.Текст = CформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе();
		Запрос.УстановитьПараметр("Ячейка", Объект.Ячейка);
	Иначе
		Запрос.Текст = CформироватьТекстЗапросаПоОстаткамНаСкладе();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	Если ЕстьОтборПоНоменклатуре Тогда
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Номенклатура В (&СписокНоменклатуры)", "");
	КонецЕсли;
	
	Если ЕстьОтборПоГруппамНоменклатуры Тогда
		Запрос.УстановитьПараметр("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)", "");
	КонецЕсли;
	
	Если ЕстьОтборПоКатегориямНоменклатуры Тогда
		Запрос.УстановитьПараметр("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Номенклатура.КатегорияНоменклатуры В (&СписокКатегорийНоменклатуры)", "");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	ЗапасыОстаткиИнвентаризация.Номенклатура КАК НоменклатураОприходование,
	|	ЗапасыОстаткиИнвентаризация.ЕдиницаИзмерения КАК ЕдиницаИзмеренияОприходование,
	|	ЗапасыОстаткиИнвентаризация.Характеристика КАК ХарактеристикаОприходование,
	|	ЗапасыОстаткиИнвентаризация.Партия КАК ПартияОприходование,
	|	-ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0) КАК КоличествоУчет,
	|	ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.СуммаУчет, 0) КАК СуммаУчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0) <= 0
	|				ИЛИ ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Сумма, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Сумма, 0) / ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0)
	|	КОНЕЦ КАК ЦенаУчет,
	|	ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Сумма, 0) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ЗапасыОстаткиИнвентаризация.ПризнакВЯчейке
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Количество, 0) < 0
	|						ТОГДА -ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.Количество, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0) < 0
	|					ТОГДА -ЕСТЬNULL(ЗапасыОстаткиИнвентаризация.КоличествоУчет, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Отклонение,
	|	СпрНоменклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗапасыОстаткиИнвентаризация КАК ЗапасыОстаткиИнвентаризация
	|		ПО СпрНоменклатура.Ссылка = ЗапасыОстаткиИнвентаризация.Номенклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&СписокНоменклатуры)
	|	И СпрНоменклатура.Недействителен = ЛОЖЬ
	|	И СпрНоменклатура.Ссылка В ИЕРАРХИИ(&СписокГруппНоменклатуры)
	|	И СпрНоменклатура.КатегорияНоменклатуры В(&СписокКатегорийНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ,
	|	Наименование УБЫВ";
	
	Если ЕстьОтборПоНоменклатуре Тогда
		Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Ссылка В (&СписокНоменклатуры)", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпрНоменклатура.Ссылка В(&СписокНоменклатуры)", "ИСТИНА");
	КонецЕсли;
	
	Если ЕстьОтборПоГруппамНоменклатуры Тогда
		Запрос.УстановитьПараметр("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Ссылка В ИЕРАРХИИ(&СписокГруппНоменклатуры)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СпрНоменклатура.Ссылка В ИЕРАРХИИ(&СписокГруппНоменклатуры)", "");
	КонецЕсли;
	
	Если ЕстьОтборПоКатегориямНоменклатуры Тогда
		Запрос.УстановитьПараметр("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СпрНоменклатура.КатегорияНоменклатуры В(&СписокКатегорийНоменклатуры)", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДобавлены = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.НоменклатураОприходование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ячейка)
			И Выборка.Количество <> Выборка.КоличествоУчет
			И Выборка.Количество <> 0 Тогда
			
			ДанныеДобавлены = Истина;
			
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Количество = Выборка.Количество;
			
			Если Выборка.ЦенаУчет = 0 Тогда
				НоваяСтрока.Цена = 0;
				НоваяСтрока.Сумма = 0;
			Иначе
				НоваяСтрока.Цена = ?(Выборка.ЦенаУчет < 0, Выборка.ЦенаУчет * (-1), Выборка.ЦенаУчет);
				НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			КонецЕсли;
			
			НоваяСтрока.СуммаУчет = НоваяСтрока.Сумма;
			
		ИначеЕсли Выборка.КоличествоУчет <> 0 Тогда
			
			ДанныеДобавлены = Истина;
			
			НоваяСтрока = Объект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Количество = Выборка.КоличествоУчет;
			
			Если Выборка.ЦенаУчет = 0 Тогда
				НоваяСтрока.Сумма = 0;
			Иначе
				НоваяСтрока.Цена = ?(Выборка.ЦенаУчет < 0, Выборка.ЦенаУчет * (-1), Выборка.ЦенаУчет);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДобавлены;
	
КонецФункции

// Процедура заполняет табличную часть "Запасы" по остаткам
// 
&НаСервере
Функция ПолучитьОстаткиНаСкладе() Экспорт
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЗначениеЗаполнено(Объект.Ячейка) Тогда
		Запрос.Текст = CформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе();
		Запрос.УстановитьПараметр("Ячейка", Объект.Ячейка);
	Иначе
		Запрос.Текст = CформироватьТекстЗапросаПоОстаткамНаСкладе();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	
	Запрос.Выполнить();
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает текст запроса по остаткам на складе.
//
&НаСервере
Функция CформироватьТекстЗапросаПоОстаткамНаСкладе() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ПризнакВЯчейке,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоУчет,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаУчет,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК Сумма
	|ПОМЕСТИТЬ ЗапасыОстаткиИнвентаризация
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)
	|				И Номенклатура.КатегорияНоменклатуры В (&СписокКатегорийНоменклатуры)) КАК ЗапасыОстатки
	|ГДЕ
	|	ЗапасыОстатки.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ЗапасыОстатки.КоличествоОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения";
	
	Возврат ТекстЗапроса;
	
КонецФункции // CформироватьТекстЗапросаПоОстаткамНаСкладе()

// Функция возвращает текст запроса по остаткам в ячейке на складе.
//
&НаСервере
Функция CформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ПризнакВЯчейке,
	|	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоУчет,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаУчет,
	|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК Сумма
	|ПОМЕСТИТЬ ЗапасыОстаткиИнвентаризация
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|				И Ячейка = &Ячейка
	|				И Номенклатура В (&СписокНоменклатуры)
	|				И Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)
	|				И Номенклатура.КатегорияНоменклатуры В (&СписокКатегорийНоменклатуры)) КАК ЗапасыНаСкладахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				&Период,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|					И Номенклатура В (&СписокНоменклатуры)
	|					И Номенклатура В ИЕРАРХИИ (&СписокГруппНоменклатуры)
	|					И Номенклатура.КатегорияНоменклатуры В (&СписокКатегорийНоменклатуры)) КАК ЗапасыОстатки
	|		ПО ЗапасыНаСкладахОстатки.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ЗапасыНаСкладахОстатки.Характеристика = ЗапасыОстатки.Характеристика
	|			И ЗапасыНаСкладахОстатки.Партия = ЗапасыОстатки.Партия
	|ГДЕ
	|	ЗапасыОстатки.КоличествоОстаток < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыНаСкладахОстатки.Партия,
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Характеристика,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения";
	
	Возврат ТекстЗапроса;
	
КонецФункции // CформироватьТекстЗапросаПоОстаткамВЯчейкеНаСкладе()

&НаКлиенте
Процедура ОчиститьОтборПоНоменклатуреНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоНоменклатуре();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоГруппамНоменклатурыНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоГруппамНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоКатегориямНоменклатурыНажатие(Элемент)
	
	ОчиститьУсловиеОтбораПоКатегориямНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоНоменклатуре(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоНоменклатуре");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоГруппамНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоГруппамНоменклатуры");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокГруппНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоКатегориямНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидОтбора", "ОтборПоКатегориямНоменклатуры");
	ПараметрыФормы.Вставить("СписокЗначенийОтбора", СписокКатегорийНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтборЗавершение",ЭтотОбъект);
	ОткрытьФорму("Документ.ИнвентаризацияЗапасов.Форма.ФормаВыбораЗначенийОтбора", ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗавершение(Результат,Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СписокЗначенийОтбора = ПолучитьИзВременногоХранилища(Результат.АдресСпискаЗначенийОтбора);
		ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокЗначенийОтбора);
		
		ВидОтбора = Результат.ВидОтбора;
		Если ВидОтбора = "ОтборПоНоменклатуре" Тогда
			СписокНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоНоменклатуре.Заголовок = ЗаголовокСписка;
		ИначеЕсли ВидОтбора = "ОтборПоГруппамНоменклатуры" Тогда
			СписокГруппНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = ЗаголовокСписка;
		Иначе
			СписокКатегорийНоменклатуры = СписокЗначенийОтбора;
			Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = ЗаголовокСписка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет заголовки отборов условий проведения инвентаризации.
//
&НаКлиенте
Процедура ОбновитьЗаголовкиОтборов()

	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокНоменклатуры);
	Элементы.УстановитьОтборПоНоменклатуре.Заголовок = ЗаголовокСписка;
	
	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокГруппНоменклатуры);
	Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = ЗаголовокСписка;
	
	ЗаголовокСписка = СформироватьЗаголовокОтбораИзСписка(СписокКатегорийНоменклатуры);
	Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = ЗаголовокСписка;

КонецПроцедуры // ОбновитьЗаголовкиОтборов()

// Восстанавливает настройки отборов условий проведения инвентаризации.
//
&НаСервере
Процедура ВосстановитьНастройкиОтборов()

	СтруктураНастроекОтборов = РеквизитФормыВЗначение("Объект").НастройкиОтборов.Получить();
	Если ТипЗнч(СтруктураНастроекОтборов) = Тип("Структура") Тогда
		СтруктураНастроекОтборов.Свойство("СписокНоменклатуры", СписокНоменклатуры);
		СтруктураНастроекОтборов.Свойство("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
		СтруктураНастроекОтборов.Свойство("СписокКатегорийНоменклатуры", СписокКатегорийНоменклатуры);
	КонецЕсли;

КонецПроцедуры // ВосстановитьНастройкиОтборов()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоНоменклатуре()

	СписокНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоНоменклатуре.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоНоменклатуре()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоГруппамНоменклатуры()

	СписокГруппНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоГруппамНоменклатуры.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоГруппамНоменклатуры()

&НаКлиенте
Процедура ОчиститьУсловиеОтбораПоКатегориямНоменклатуры()

	СписокКатегорийНоменклатуры.Очистить();
	Элементы.УстановитьОтборПоКатегориямНоменклатуры.Заголовок = НСтр("ru = 'Отбор не установлен'");

КонецПроцедуры // ОчиститьУсловиеОтбораПоКатегориямНоменклатуры()

&НаКлиенте
Функция СформироватьЗаголовокОтбораИзСписка(СписокЭлементов)
	
	ЗаголовокОтбораСтрока = "";
	Для каждого ЭлементСписка Из СписокЭлементов Цикл
		
		ЗаголовокОтбораСтрока = ЗаголовокОтбораСтрока + ?(ЗаголовокОтбораСтрока = "","","; ") + ЭлементСписка.Представление;
		
	КонецЦикла;
	
	Если ЗаголовокОтбораСтрока = "" Тогда
		ЗаголовокОтбораСтрока = НСтр("ru = 'Отбор не установлен'");
	КонецЕсли;
	
	Возврат ЗаголовокОтбораСтрока;
	
КонецФункции // СформироватьЗаголовокОтбораИзСписка()

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоИнвентаризацииВсеРасходженияВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоИнвентаризацииВсеРасходженияНаСервере(Объект.ДокументОснование);
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ПараметрыВыбораИнвентаризации = Новый Структура("Организация, СтруктурнаяЕдиница", Объект.Организация, Объект.СтруктурнаяЕдиница);
		ОткрытьФорму("Документ.ИнвентаризацияЗапасов.ФормаВыбора", ПараметрыВыбораИнвентаризации, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеВСтроке(ТекущаяСтрока, ЭтоОприходование = Ложь)
	
	Если ЭтоОприходование <> Неопределено И ЭтоОприходование Тогда
		ТекущаяСтрока.НоменклатураОприходование = Неопределено;
		ТекущаяСтрока.ХарактеристикаОприходование = Неопределено;
		ТекущаяСтрока.ПартияОприходование = Неопределено;
		ТекущаяСтрока.СерийныеНомераОприходование = Неопределено;
		ТекущаяСтрока.ЕдиницаИзмеренияОприходование = Неопределено;
		ТекущаяСтрока.СтранаПроисхожденияОприходование = Неопределено;
		ТекущаяСтрока.НомерГТДОприходование = Неопределено;
		
		ТекущаяСтрока.Цена = 0;
		ТекущаяСтрока.Сумма = 0;
	Иначе
		ТекущаяСтрока.Номенклатура = Неопределено;
		ТекущаяСтрока.Характеристика = Неопределено;
		ТекущаяСтрока.Партия = Неопределено;
		ТекущаяСтрока.СерийныеНомера = Неопределено;
		ТекущаяСтрока.ЕдиницаИзмерения = Неопределено;
		ТекущаяСтрока.СтранаПроисхождения = Неопределено;
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.НеобходимостьВводаСправкиНаАлкоголь = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИнформациюОСписанииПриходовании(ЭтоОприходование = Ложь)
	
	Модифицированность = Истина;
	Для Каждого ТекущаяСтрокаИдентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
		ОчиститьДанныеВСтроке(ТекущаяСтрока, ЭтоОприходование);
		
		//Серийные номера
		Если ЭтоОприходование <> Неопределено И ЭтоОприходование Тогда
			РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомераОприходование, ТекущаяСтрока,,ИспользоватьСерийныеНомераОстатки, "СерийныеНомераОприходование");
		Иначе
			РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущаяСтрока,,ИспользоватьСерийныеНомераОстатки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписываемуюНоменклатуру(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОчиститьСписываемуюПриходуемуюНоменклатуруЗавершение", ЭтотОбъект, Ложь);
	ПоказатьВопрос(
		ОписаниеОповещенияВопрос, 
		НСтр("ru = 'Очистить списываемую номенклатуру?'"), 
		РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПриходуемуюНоменклатуру(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОчиститьСписываемуюПриходуемуюНоменклатуруЗавершение", ЭтотОбъект, Истина);
	ПоказатьВопрос(
		ОписаниеОповещенияВопрос, 
		НСтр("ru = 'Очистить приходуемую номенклатуру?'"), 
		РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписываемуюПриходуемуюНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьИнформациюОСписанииПриходовании(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ПоменятьМестамиДанныеОСписанииИОприходовании(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ПоменятьМестамиДанныеОСписанииИОприходованииЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещенияВопрос, 
		НСтр("ru = 'Поменять данные о списании и оприходовании?'"), 
		РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьМестамиДанныеОСписанииИОприходованииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоменятьМестамиДанныеОСписанииИОприходованииФрагмент();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ПоменятьМестамиДанныеОСписанииИОприходованииФрагмент()
	
	Модифицированность = Истина;
	Для Каждого ТекущаяСтрокаИдентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
		
		ТекДанныеСписания = Новый Структура();
		
		ТекДанныеСписания.Вставить("НоменклатураОприходование", ТекущаяСтрока.Номенклатура);
		ТекДанныеСписания.Вставить("ХарактеристикаОприходование", ТекущаяСтрока.Характеристика);
		ТекДанныеСписания.Вставить("ПартияОприходование", ТекущаяСтрока.Партия);
		ТекДанныеСписания.Вставить("СерийныеНомераОприходование", ТекущаяСтрока.СерийныеНомера);
		ТекДанныеСписания.Вставить("ЕдиницаИзмеренияОприходование", ТекущаяСтрока.ЕдиницаИзмерения);
		ТекДанныеСписания.Вставить("СтранаПроисхожденияОприходование", ТекущаяСтрока.СтранаПроисхождения);
		ТекДанныеСписания.Вставить("НомерГТДОприходование", ТекущаяСтрока.НомерГТД);
		
		ТекущаяСтрока.Номенклатура = ТекущаяСтрока.НоменклатураОприходование;
		ТекущаяСтрока.Характеристика = ТекущаяСтрока.ХарактеристикаОприходование;
		ТекущаяСтрока.Партия = ТекущаяСтрока.ПартияОприходование;
		ТекущаяСтрока.СерийныеНомера = ТекущаяСтрока.СерийныеНомераОприходование;
		ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрока.ЕдиницаИзмеренияОприходование;
		ТекущаяСтрока.СтранаПроисхождения = ТекущаяСтрока.СтранаПроисхожденияОприходование;
		ТекущаяСтрока.НомерГТД = ТекущаяСтрока.НомерГТДОприходование;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекДанныеСписания);
		
		// Заполним цену и сумму
		Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
			
			СтруктураДанные = Новый Структура();
			СтруктураДанные.Вставить("Номенклатура", ТекущаяСтрока.НоменклатураОприходование);
			СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Характеристика", ТекущаяСтрока.ХарактеристикаОприходование);
			СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
			СтруктураДанные.Вставить("Коэффициент", 1);
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, Истина);
			
			ТекущаяСтрока.Цена = СтруктураДанные.Цена;
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
			
		КонецЕсли;
		
		// Перекинем данные о серийных номерах
		СтруктураПоиска = Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		МассивСтрок = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
		
		// Запомним данные из ТЧ СерийныеНомера.
		МассивСерийныхНомеровСписание = Новый Массив;
		
		Для Каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
			
			СтруктураСтрока = Новый Структура("СерийныйНомер, КлючСвязи", ТекущаяСтрокаМассива.СерийныйНомер, ТекущаяСтрокаМассива.КлючСвязи);
			МассивСерийныхНомеровСписание.Добавить(СтруктураСтрока);
			
		КонецЦикла;
		
		// Удалим строки с серийными номерами в ТЧ СерийныеНомера.
		Сч = МассивСтрок.Количество() - 1;
		Пока Сч >= 0 Цикл
			Объект.СерийныеНомера.Удалить(МассивСтрок[Сч]);
			Сч = Сч - 1;
		КонецЦикла;
		
		// Обработаем данные из ТЧ СерийныеНомераОприходование
		МассивСтрок = Объект.СерийныеНомераОприходование.НайтиСтроки(СтруктураПоиска);
		
		Сч = МассивСтрок.Количество() - 1;
		Пока Сч >= 0 Цикл
			
			ТекущаяСтрокаМассива = МассивСтрок[Сч];
			
			НоваяСтрокаСерийныеНомераСписание = Объект.СерийныеНомера.Добавить();
			НоваяСтрокаСерийныеНомераСписание.КлючСвязи = ТекущаяСтрокаМассива.КлючСвязи;
			НоваяСтрокаСерийныеНомераСписание.СерийныйНомер = ТекущаяСтрокаМассива.СерийныйНомер;
			
			Объект.СерийныеНомераОприходование.Удалить(ТекущаяСтрокаМассива);
			
			Сч = Сч - 1;
		КонецЦикла;
		
		Для каждого ТекущаяСтрокаМассива Из МассивСерийныхНомеровСписание Цикл
		
			НоваяСтрокаСерийныеНомераОприходование = Объект.СерийныеНомераОприходование.Добавить();
			НоваяСтрокаСерийныеНомераОприходование.КлючСвязи = ТекущаяСтрокаМассива.КлючСвязи;
			НоваяСтрокаСерийныеНомераОприходование.СерийныйНомер = ТекущаяСтрокаМассива.СерийныйНомер;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Табличная часть не заполнена.'"));
	Иначе
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещенияВопрос, 
			НСтр("ru = 'Табличная часть будет очищена, продолжить?'"),
			РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Запасы.Очистить();
		Объект.СерийныеНомера.Очистить();
		Объект.СерийныеНомераОприходование.Очистить();
	КонецЕсли;
	
КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура РазделитьСписываемуюИПриходуемуюНоменклатуру(Команда)
	
	РазделитьСписываемуюИПриходуемуюНоменклатуру2();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьСписываемуюИПриходуемуюНоменклатуру2(ТолькоВыделенные = Истина)
	
	Модифицированность = Истина;
	
	Если ТолькоВыделенные Тогда
		
		Для Каждого ВыделеннаяСтрокаИдентификатор Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ВыделеннаяСтрока = Объект.Запасы.НайтиПоИдентификатору(ВыделеннаяСтрокаИдентификатор);
			Если НЕ ВыделеннаяСтрока.Номенклатура.Пустая() И НЕ ВыделеннаяСтрока.НоменклатураОприходование.Пустая() Тогда
				
				РазделитьСтроку(ВыделеннаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ВыделеннаяСтрока Из Объект.Запасы Цикл
			Если НЕ ВыделеннаяСтрока.Номенклатура.Пустая() И НЕ ВыделеннаяСтрока.НоменклатураОприходование.Пустая() Тогда
				
				РазделитьСтроку(ВыделеннаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделитьСтроку(ВыделеннаяСтрока)
	
	НоваяСтрока = Объект.Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыделеннаяСтрока);
	
	ОчиститьДанныеВСтроке(ВыделеннаяСтрока, Истина);
	ОчиститьДанныеВСтроке(НоваяСтрока, Ложь);
	
	НоваяСтрока.КлючСвязи = 0;
	УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, НоваяСтрока, "КлючСвязи");
	
	СтарыйКлючСвязи = ВыделеннаяСтрока.КлючСвязи;
	ЭтоОприходование = Истина;
	УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаКлиенте(НоваяСтрока, СтарыйКлючСвязи, ЭтоОприходование);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаКлиенте(НоваяСтрока, СтарыйКлючСвязи, ЭтоОприходование, КоличествоСтрок = 0)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", СтарыйКлючСвязи);
	
	Если ЭтоОприходование Тогда
		МассивСтрок = Объект.СерийныеНомераОприходование.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	ТекСч = 0;
	Для каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
		ТекСч = ТекСч + 1;
		Если КоличествоСтрок > 0 И ТекСч > КоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		ТекущаяСтрокаМассива.КлючСвязи = НоваяСтрока.КлючСвязи;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаСервере(НоваяСтрока, СтарыйКлючСвязи, ЭтоОприходование, КоличествоСтрок = 0)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", СтарыйКлючСвязи);
	
	Если ЭтоОприходование Тогда
		МассивСтрок = Объект.СерийныеНомераОприходование.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	ТекСч = 0;
	Для каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
		ТекСч = ТекСч + 1;
		Если КоличествоСтрок > 0 И ТекСч > КоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		ТекущаяСтрокаМассива.КлючСвязи = НоваяСтрока.КлючСвязи;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьАвтоматически(Команда)
	
	РазделитьСписываемуюИПриходуемуюНоменклатуру2(Ложь);
	
	Результат = ЗачестьПоПересортицеАвтоСервер();
	Если Результат = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Среди списываемых и приходуемых товаров нет товаров, по которым возможно провести автоматический зачет.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗачестьПоПересортицеАвтоСервер()
	
	Результат = 0;
			
	// по пересортице
	ТаблицаВариантов = ПолучитьВариантыЗачетаПоПересортицеСервер();
	ЗачестьТоварыПоПересортице(ТаблицаВариантов, Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьВариантыЗачетаПоПересортицеСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Объект.Запасы.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Партия,
	|	ТаблицаТовары.СерийныеНомера
	|ПОМЕСТИТЬ ТаблицаКСписанию
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НоменклатураОприходование,
	|	ТаблицаТовары.ХарактеристикаОприходование,
	|	ТаблицаТовары.ПартияОприходование,
	|	ТаблицаТовары.СерийныеНомераОприходование
	|ПОМЕСТИТЬ ТаблицаКОприходованию
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НоменклатураОприходование <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКСписанию.Номенклатура,
	|	ТаблицаКСписанию.Характеристика,
	|	ТаблицаКСписанию.Партия,
	|	ТаблицаКСписанию.СерийныеНомера,
	|	ТаблицаКОприходованию.НоменклатураОприходование,
	|	ТаблицаКОприходованию.ХарактеристикаОприходование,
	|	ТаблицаКОприходованию.ПартияОприходование,
	|	ТаблицаКОприходованию.СерийныеНомераОприходование,
	|	ВЫБОР
	|		КОГДА ТаблицаКСписанию.Характеристика = ТаблицаКОприходованию.ХарактеристикаОприходование
	|				И ТаблицаКСписанию.Партия = ТаблицаКОприходованию.ПартияОприходование
	|				И ТаблицаКСписанию.СерийныеНомера = ТаблицаКОприходованию.СерийныеНомераОприходование
	|			ТОГДА 1
	|		КОГДА ТаблицаКСписанию.Характеристика = ТаблицаКОприходованию.ХарактеристикаОприходование
	|				И ТаблицаКСписанию.Партия = ТаблицаКОприходованию.ПартияОприходование
	|			ТОГДА 2
	|		КОГДА ТаблицаКСписанию.Характеристика = ТаблицаКОприходованию.ХарактеристикаОприходование
	|				И ТаблицаКСписанию.СерийныеНомера = ТаблицаКОприходованию.СерийныеНомераОприходование
	|			ТОГДА 3
	|		КОГДА ТаблицаКСписанию.Характеристика = ТаблицаКОприходованию.ХарактеристикаОприходование
	|			ТОГДА 4
	|		КОГДА ТаблицаКСписанию.Партия = ТаблицаКОприходованию.ПартияОприходование
	|				И ТаблицаКСписанию.СерийныеНомера = ТаблицаКОприходованию.СерийныеНомераОприходование
	|			ТОГДА 5
	|		КОГДА ТаблицаКСписанию.Партия = ТаблицаКОприходованию.ПартияОприходование
	|			ТОГДА 6
	|		КОГДА ТаблицаКСписанию.СерийныеНомера = ТаблицаКОприходованию.СерийныеНомераОприходование
	|			ТОГДА 7
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ТаблицаКСписанию КАК ТаблицаКСписанию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКОприходованию КАК ТаблицаКОприходованию
	|		ПО ТаблицаКСписанию.Номенклатура = ТаблицаКОприходованию.НоменклатураОприходование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКОприходованию.НоменклатураОприходование,
	|	Приоритет,
	|	ТаблицаКОприходованию.ХарактеристикаОприходование,
	|	ТаблицаКОприходованию.ПартияОприходование,
	|	ТаблицаКОприходованию.СерийныеНомераОприходование,
	|	ТаблицаКСписанию.Номенклатура,
	|	ТаблицаКСписанию.Характеристика,
	|	ТаблицаКСписанию.Партия,
	|	ТаблицаКСписанию.СерийныеНомера";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

&НаСервере
Процедура ЗачестьТоварыПоПересортице(ТаблицаВариантов, Результат)
	
	ТаблицаТоваров = ТаблицаВариантов.Скопировать(, "НоменклатураОприходование, ХарактеристикаОприходование, ПартияОприходование, СерийныеНомераОприходование");
	ТаблицаТоваров.Свернуть("НоменклатураОприходование, ХарактеристикаОприходование, ПартияОприходование, СерийныеНомераОприходование");
	Для Каждого ТекущаяСтрокаТаблицаТоваров Из ТаблицаТоваров Цикл
		
		Если ТекущаяСтрокаТаблицаТоваров.НоменклатураОприходование.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрокВариантов = ТаблицаВариантов.НайтиСтроки(
			Новый Структура("НоменклатураОприходование, ХарактеристикаОприходование, ПартияОприходование, СерийныеНомераОприходование",
				ТекущаяСтрокаТаблицаТоваров.НоменклатураОприходование, ТекущаяСтрокаТаблицаТоваров.ХарактеристикаОприходование,
				ТекущаяСтрокаТаблицаТоваров.ПартияОприходование, ТекущаяСтрокаТаблицаТоваров.СерийныеНомераОприходование));
		
		МассивСтрокТоварыОприходование = Объект.Запасы.НайтиСтроки(
			Новый Структура("НоменклатураОприходование, ХарактеристикаОприходование, ПартияОприходование, СерийныеНомераОприходование, Номенклатура",
				ТекущаяСтрокаТаблицаТоваров.НоменклатураОприходование, ТекущаяСтрокаТаблицаТоваров.ХарактеристикаОприходование,
				ТекущаяСтрокаТаблицаТоваров.ПартияОприходование, ТекущаяСтрокаТаблицаТоваров.СерийныеНомераОприходование, Справочники.Номенклатура.ПустаяСсылка()));
		
		Если МассивСтрокТоварыОприходование.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТоварыОприходование = МассивСтрокТоварыОприходование[0];
		НужноРаспределить = СтрокаТоварыОприходование.Количество;
		Для Каждого Вариант Из МассивСтрокВариантов Цикл
			МассивСтрокТоварыСписываемые = Объект.Запасы.НайтиСтроки(
				Новый Структура("Номенклатура, Характеристика, Партия, СерийныеНомера, НоменклатураОприходование",
					Вариант.Номенклатура, Вариант.Характеристика, Вариант.Партия, Вариант.СерийныеНомера, Справочники.Номенклатура.ПустаяСсылка()));
				//Новый Структура("Номенклатура, НоменклатураОприходование",
				//	Вариант.Номенклатура, Справочники.Номенклатура.ПустаяСсылка()));
			
			Если МассивСтрокТоварыСписываемые.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТоварыСписываемые = МассивСтрокТоварыСписываемые[0];
			
			НужноРаспределить = НужноРаспределить - Мин(СтрокаТоварыОприходование.Количество, СтрокаТоварыСписываемые.Количество);
			
			Результат = Результат + 1;
			
			МенятьСерийныеНомераСтрока = Ложь;
			Сопоставить2СтрокиНаСервере(СтрокаТоварыОприходование, СтрокаТоварыСписываемые, МенятьСерийныеНомераСтрока);
			
			Если НужноРаспределить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			//Если СтрокаТоварыОприходование.Количество <= СтрокаТоварыСписываемые.Количество Тогда
			//	
			//	СтрокаТоварыСписываемые.Количество = СтрокаТоварыСписываемые.Количество - СтрокаТоварыОприходование.Количество;
			//	
			//	ЗаполнитьДанныеОСписываемойНоменклатуреНаСервере(СтрокаТоварыОприходование, СтрокаТоварыСписываемые);
			//	
			//	Если СтрокаТоварыСписываемые.Количество = 0 Тогда
			//		Объект.Запасы.Удалить(СтрокаТоварыСписываемые);
			//	КонецЕсли;
			//	
			//Иначе
			//	
			//	КоличествоВНовойСтроке = СтрокаТоварыОприходование.Количество - СтрокаТоварыСписываемые.Количество;
			//	СтрокаТоварыОприходование.Количество = СтрокаТоварыСписываемые.Количество;
			//	
			//	НоваяСтрокаОприходование = Объект.Запасы.Добавить();
			//	ЗаполнитьЗначенияСвойств(НоваяСтрокаОприходование, СтрокаТоварыОприходование);
			//	НоваяСтрокаОприходование.Количество = КоличествоВНовойСтроке;
			//	
			//	ЗаполнитьДанныеОСписываемойНоменклатуреНаСервере(СтрокаТоварыОприходование, СтрокаТоварыСписываемые);
			//	Объект.Запасы.Удалить(СтрокаТоварыСписываемые);
			//	
			//КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбнвоитьИнформациюОСерийныхНомерахВТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ОбнвоитьИнформациюОСерийныхНомерахВТЧ()
	
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		Если НЕ ТекущаяСтрока.Номенклатура.Пустая() Тогда
			ТекущаяСтрока.СерийныеНомера = ПолучитьПредставлениеСерийныхНомеровНаСервере(ТекущаяСтрока, Ложь);
		КонецЕсли;
		Если НЕ ТекущаяСтрока.НоменклатураОприходование.Пустая() Тогда
			ТекущаяСтрока.СерийныеНомераОприходование = ПолучитьПредставлениеСерийныхНомеровНаСервере(ТекущаяСтрока, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОСписываемойНоменклатуреНаСервере(СтрокаТоварыПриходуемые, СтрокаТоварыСписываемые, МенятьСерийныеНомераСтрока = Истина)
	
	СтрокаТоварыПриходуемые.Номенклатура = СтрокаТоварыСписываемые.Номенклатура;
	СтрокаТоварыПриходуемые.Характеристика = СтрокаТоварыСписываемые.Характеристика;
	СтрокаТоварыПриходуемые.Партия = СтрокаТоварыСписываемые.Партия;
	Если МенятьСерийныеНомераСтрока Тогда
		СтрокаТоварыПриходуемые.СерийныеНомера = СтрокаТоварыСписываемые.СерийныеНомера;
	КонецЕсли;
	СтрокаТоварыПриходуемые.ЕдиницаИзмерения = СтрокаТоварыСписываемые.ЕдиницаИзмерения;
	СтрокаТоварыПриходуемые.СтранаПроисхождения = СтрокаТоварыСписываемые.СтранаПроисхождения;
	СтрокаТоварыПриходуемые.НомерГТД = СтрокаТоварыСписываемые.НомерГТД;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОСписываемойНоменклатуреНаКлиенте(СтрокаТоварыПриходуемые, СтрокаТоварыСписываемые)
	
	СтрокаТоварыПриходуемые.Номенклатура = СтрокаТоварыСписываемые.Номенклатура;
	СтрокаТоварыПриходуемые.Характеристика = СтрокаТоварыСписываемые.Характеристика;
	СтрокаТоварыПриходуемые.Партия = СтрокаТоварыСписываемые.Партия;
	//СтрокаТоварыПриходуемые.СерийныеНомера = СтрокаТоварыСписываемые.СерийныеНомера;
	СтрокаТоварыПриходуемые.ЕдиницаИзмерения = СтрокаТоварыСписываемые.ЕдиницаИзмерения;
	СтрокаТоварыПриходуемые.СтранаПроисхождения = СтрокаТоварыСписываемые.СтранаПроисхождения;
	СтрокаТоварыПриходуемые.НомерГТД = СтрокаТоварыСписываемые.НомерГТД;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеОПриходуемойНоменклатуреНаКлиенте(СтрокаТоварыПриходуемые, СтрокаТоварыСписываемые)
	
	СтрокаТоварыСписываемые.НоменклатураОприходование = СтрокаТоварыПриходуемые.НоменклатураОприходование;
	СтрокаТоварыСписываемые.ХарактеристикаОприходование = СтрокаТоварыПриходуемые.ХарактеристикаОприходование;
	СтрокаТоварыСписываемые.ПартияОприходование = СтрокаТоварыПриходуемые.ПартияОприходование;
	//СтрокаТоварыСписываемые.СерийныеНомераОприходование = СтрокаТоварыПриходуемые.СерийныеНомераОприходование;
	СтрокаТоварыСписываемые.ЕдиницаИзмеренияОприходование = СтрокаТоварыПриходуемые.ЕдиницаИзмеренияОприходование;
	СтрокаТоварыСписываемые.СтранаПроисхожденияОприходование = СтрокаТоварыПриходуемые.СтранаПроисхожденияОприходование;
	СтрокаТоварыСписываемые.НомерГТДОприходование = СтрокаТоварыПриходуемые.НомерГТДОприходование;
	
	СтрокаТоварыСписываемые.Цена = СтрокаТоварыПриходуемые.Цена;
	СтрокаТоварыСписываемые.Сумма = СтрокаТоварыПриходуемые.Сумма;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОПриходуемойНоменклатуреНаСервере(СтрокаТоварыПриходуемые, СтрокаТоварыСписываемые, МенятьСерийныеНомераСтрока = Истина)
	
	СтрокаТоварыСписываемые.НоменклатураОприходование = СтрокаТоварыПриходуемые.НоменклатураОприходование;
	СтрокаТоварыСписываемые.ХарактеристикаОприходование = СтрокаТоварыПриходуемые.ХарактеристикаОприходование;
	СтрокаТоварыСписываемые.ПартияОприходование = СтрокаТоварыПриходуемые.ПартияОприходование;
	//СтрокаТоварыСписываемые.СерийныеНомераОприходование = СтрокаТоварыПриходуемые.СерийныеНомераОприходование;
	СтрокаТоварыСписываемые.ЕдиницаИзмеренияОприходование = СтрокаТоварыПриходуемые.ЕдиницаИзмеренияОприходование;
	СтрокаТоварыСписываемые.СтранаПроисхожденияОприходование = СтрокаТоварыПриходуемые.СтранаПроисхожденияОприходование;
	СтрокаТоварыСписываемые.НомерГТДОприходование = СтрокаТоварыПриходуемые.НомерГТДОприходование;
	
	СтрокаТоварыСписываемые.Цена = СтрокаТоварыПриходуемые.Цена;
	СтрокаТоварыСписываемые.Сумма = СтрокаТоварыПриходуемые.Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура Сопоставить2Выделенных(Команда)
	
	Модифицированность = Истина;
	
	Если Элементы.Запасы.ВыделенныеСтроки.Количество() <> 2 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите, удерживая клавишу ""Ctrl"", в табличной части 2 строки и нажмите эту кнопку'"));
		Возврат;
	КонецЕсли;
	
	Строка1 = Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ВыделенныеСтроки[0]);
	Строка2 = Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ВыделенныеСтроки[1]);
	
	Если (ЗначениеЗаполнено(Строка1.Номенклатура) И ЗначениеЗаполнено(Строка1.НоменклатураОприходование))
		ИЛИ
		(ЗначениеЗаполнено(Строка2.Номенклатура) И ЗначениеЗаполнено(Строка2.НоменклатураОприходование))
		ИЛИ
		(ЗначениеЗаполнено(Строка1.Номенклатура) И ЗначениеЗаполнено(Строка2.Номенклатура)
			И НЕ ЗначениеЗаполнено(Строка1.НоменклатураОприходование) И НЕ ЗначениеЗаполнено(Строка2.НоменклатураОприходование))
		ИЛИ
		(НЕ ЗначениеЗаполнено(Строка1.Номенклатура) И НЕ ЗначениеЗаполнено(Строка2.Номенклатура)
			И ЗначениеЗаполнено(Строка1.НоменклатураОприходование) И ЗначениеЗаполнено(Строка2.НоменклатураОприходование))
		Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В одной строке должна быть выбрана только списываемая номенклатура, а в другой только приходуемая номенклатура.'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Строка1.НоменклатураОприходование) Тогда
		СтрокаОприходование = Строка1;
		СтрокаСписание = Строка2;
	Иначе
		СтрокаОприходование = Строка2;
		СтрокаСписание = Строка1;
	КонецЕсли;
	
	Сопоставить2СтрокиНаКлиенте(СтрокаОприходование, СтрокаСписание);
	
КонецПроцедуры

&НаКлиенте
Процедура Сопоставить2СтрокиНаКлиенте(СтрокаОприходование, СтрокаСписание)
	
	Если СтрокаОприходование.Количество >= СтрокаСписание.Количество Тогда
		
		НужноУдалитьСтрокуОприходование = (СтрокаОприходование.Количество = СтрокаСписание.Количество);
		
		СтрокаОприходование.Количество = СтрокаОприходование.Количество - СтрокаСписание.Количество;
		
		ЗаполнитьДанныеОПриходуемойНоменклатуреНаКлиенте(СтрокаОприходование, СтрокаСписание);
		
		СтарыйКлючСвязи = СтрокаОприходование.КлючСвязи;
		ЭтоОприходование = Истина;
		
		Если НужноУдалитьСтрокуОприходование Тогда
			УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаКлиенте(СтрокаСписание, СтарыйКлючСвязи, ЭтоОприходование);
			СтрокаСписание.СерийныеНомераОприходование = СтрокаОприходование.СерийныеНомераОприходование;
			
			Объект.Запасы.Удалить(СтрокаОприходование);
		Иначе
			УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаКлиенте(СтрокаСписание, СтарыйКлючСвязи, ЭтоОприходование, СтрокаСписание.Количество);
			СтрокаСписание.СерийныеНомераОприходование = ПолучитьПредставлениеСерийныхНомеровНаКлиенте(СтрокаСписание, ЭтоОприходование);
			СтрокаОприходование.СерийныеНомераОприходование = ПолучитьПредставлениеСерийныхНомеровНаКлиенте(СтрокаОприходование, ЭтоОприходование);
		КонецЕсли;
		
	Иначе
		
		СтрокаСписание.Количество = СтрокаСписание.Количество - СтрокаОприходование.Количество;
		
		ЗаполнитьДанныеОСписываемойНоменклатуреНаКлиенте(СтрокаОприходование, СтрокаСписание);
		
		СтарыйКлючСвязи = СтрокаСписание.КлючСвязи;
		ЭтоОприходование = Ложь;
		УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаКлиенте(СтрокаОприходование, СтарыйКлючСвязи, ЭтоОприходование, СтрокаОприходование.Количество);
		СтрокаСписание.СерийныеНомера = ПолучитьПредставлениеСерийныхНомеровНаКлиенте(СтрокаСписание, ЭтоОприходование);
		СтрокаОприходование.СерийныеНомера = ПолучитьПредставлениеСерийныхНомеровНаКлиенте(СтрокаОприходование, ЭтоОприходование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Сопоставить2СтрокиНаСервере(СтрокаОприходование, СтрокаСписание, МенятьСерийныеНомераСтрока = Истина)
	
	Если СтрокаОприходование.Количество >= СтрокаСписание.Количество Тогда
		
		НужноУдалитьСтрокуОприходование = (СтрокаОприходование.Количество = СтрокаСписание.Количество);
		
		СтрокаОприходование.Количество = СтрокаОприходование.Количество - СтрокаСписание.Количество;
		
		ЗаполнитьДанныеОПриходуемойНоменклатуреНаСервере(СтрокаОприходование, СтрокаСписание, МенятьСерийныеНомераСтрока);
		
		СтарыйКлючСвязи = СтрокаОприходование.КлючСвязи;
		ЭтоОприходование = Истина;
		
		Если НужноУдалитьСтрокуОприходование Тогда
			УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаСервере(СтрокаСписание, СтарыйКлючСвязи, ЭтоОприходование);
			Если МенятьСерийныеНомераСтрока Тогда
				СтрокаСписание.СерийныеНомераОприходование = СтрокаОприходование.СерийныеНомераОприходование;
			КонецЕсли;
			
			Объект.Запасы.Удалить(СтрокаОприходование);
		Иначе
			УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаСервере(СтрокаСписание, СтарыйКлючСвязи, ЭтоОприходование, СтрокаСписание.Количество);
			Если МенятьСерийныеНомераСтрока Тогда
				СтрокаСписание.СерийныеНомераОприходование = ПолучитьПредставлениеСерийныхНомеровНаСервере(СтрокаСписание, ЭтоОприходование);
				СтрокаОприходование.СерийныеНомераОприходование = ПолучитьПредставлениеСерийныхНомеровНаСервере(СтрокаОприходование, ЭтоОприходование);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		СтрокаСписание.Количество = СтрокаСписание.Количество - СтрокаОприходование.Количество;
		
		ЗаполнитьДанныеОСписываемойНоменклатуреНаСервере(СтрокаОприходование, СтрокаСписание, МенятьСерийныеНомераСтрока);
		
		СтарыйКлючСвязи = СтрокаСписание.КлючСвязи;
		ЭтоОприходование = Ложь;
		УстановитьНовыйКлючСвязиВТаблицеСерийныхНомеровНаСервере(СтрокаОприходование, СтарыйКлючСвязи, ЭтоОприходование, СтрокаОприходование.Количество);
		Если МенятьСерийныеНомераСтрока Тогда
			СтрокаСписание.СерийныеНомера = ПолучитьПредставлениеСерийныхНомеровНаСервере(СтрокаСписание, ЭтоОприходование);
			СтрокаОприходование.СерийныеНомера = ПолучитьПредставлениеСерийныхНомеровНаСервере(СтрокаОприходование, ЭтоОприходование);
		КонецЕсли;
		
	КонецЕсли;
	
	Если 1 = 0 Тогда
		Если СтрокаОприходование.Количество >= СтрокаСписание.Количество Тогда
			
			НужноУдалитьСтрокуОприходование = (СтрокаОприходование.Количество = СтрокаСписание.Количество);
			
			СтрокаОприходование.Количество = СтрокаОприходование.Количество - СтрокаСписание.Количество;
			
			ЗаполнитьДанныеОПриходуемойНоменклатуреНаСервере(СтрокаОприходование, СтрокаСписание);
			
			Если НужноУдалитьСтрокуОприходование Тогда
				Объект.Запасы.Удалить(СтрокаОприходование);
			КонецЕсли;
			
		Иначе
			
			СтрокаСписание.Количество = СтрокаСписание.Количество - СтрокаОприходование.Количество;
			
			ЗаполнитьДанныеОСписываемойНоменклатуреНаСервере(СтрокаОприходование, СтрокаСписание);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеСерийныхНомеровНаКлиенте(ТекущаяСтрока, ЭтоОприходование = Ложь)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
	Если ЭтоОприходование Тогда
		МассивСтрок = Объект.СерийныеНомераОприходование.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	СтроковоеПредставлениеСерийныхНомеров = "";
	Для Каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
		СтроковоеПредставлениеСерийныхНомеров = СтроковоеПредставлениеСерийныхНомеров + ТекущаяСтрокаМассива.СерийныйНомер+"; ";
	КонецЦикла;
	СтроковоеПредставлениеСерийныхНомеров = Лев(СтроковоеПредставлениеСерийныхНомеров, Мин(СтрДлина(СтроковоеПредставлениеСерийныхНомеров)-2,150));
	
	Возврат СтроковоеПредставлениеСерийныхНомеров;
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСерийныхНомеровНаСервере(ТекущаяСтрока, ЭтоОприходование = Ложь)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
	Если ЭтоОприходование Тогда
		МассивСтрок = Объект.СерийныеНомераОприходование.НайтиСтроки(СтруктураПоиска);
	Иначе
		МассивСтрок = Объект.СерийныеНомера.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	СтроковоеПредставлениеСерийныхНомеров = "";
	Для Каждого ТекущаяСтрокаМассива Из МассивСтрок Цикл
		СтроковоеПредставлениеСерийныхНомеров = СтроковоеПредставлениеСерийныхНомеров + ТекущаяСтрокаМассива.СерийныйНомер+"; ";
	КонецЦикла;
	СтроковоеПредставлениеСерийныхНомеров = Лев(СтроковоеПредставлениеСерийныхНомеров, Мин(СтрДлина(СтроковоеПредставлениеСерийныхНомеров)-2,150));
	
	Возврат СтроковоеПредставлениеСерийныхНомеров;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ЭтоОприходование = Ложь)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("ЭтоАлкогольнаяПродукция", СтруктураДанные.Номенклатура.АлкогольнаяПродукция);
	
	Если ЭтоОприходование Тогда
		Если СтруктураДанные.Свойство("ВидЦен") Тогда
			СтруктураДанные.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
			Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);
		Иначе
			СтруктураДанные.Вставить("Цена", 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()	

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", 1);
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВалютаДокумента", Константы.ВалютаУчета.Получить());
	Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Процедура ЗаполнитьПоИнвентаризацииВсеРасходженияНаСервере(ДокументДляЗаполнения)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоИнвентаризацииВсеРасходжения(ДокументДляЗаполнения, Истина);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ПересортицаЗапасов.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количетсве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", 	Объект.СтруктурнаяЕдиница);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборВыполнить()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы", Ложь);
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура ОбновитьРеквизитыВидимостиФормы()
	
	СтрокаРеквизитов = "ТипСтруктурнойЕдиницы, ОрдерныйСклад";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтруктурнаяЕдиница, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
	УчетПоЯчейкам = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	
КонецПроцедуры

// Получает признак Ордерного склада.
//
&НаКлиенте
Процедура УправлениеФормой()
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) 
		И НЕ ОрдерныйСклад 
		И НЕ ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница") 
		И УчетПоЯчейкам Тогда
		
		Элементы.Ячейка.Видимость = Истина;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Ложь;
	Иначе
		Элементы.Ячейка.Видимость = Ложь;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Истина;
	КонецЕсли;
	
	Если ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		
		Объект.СписатьЗапасыИзЭксплуатации = Истина;
		Элементы.ЗапасыПодбор.Видимость = Ложь;
		
	Иначе
		
		Объект.СписатьЗапасыИзЭксплуатации = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Истина;
		
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСерийныеНомераОприходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера(ЭтоОприходование = Ложь)
	
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор, ЭтоОприходование);
	ПараметрыСерийныхНомеров.Вставить("ЭтоОприходование", ЭтоОприходование);
	
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки, ЭтоОприходование = Ложь)
	
	Модифицированность = Истина;
	
	ПараметрыИменаПолей = Новый Структура;
	ПараметрыИменаПолей.Вставить("ИмяТЧСерийныеНомера", ?(ЭтоОприходование, "СерийныеНомераОприходование", "СерийныеНомера"));
	ПараметрыИменаПолей.Вставить("ЭтоОприходование", ЭтоОприходование);
	
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
	
КонецФункции

Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор, ЭтоОприходование = Ложь)
	
	Если ЭтоОприходование Тогда
		Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор,,, "СерийныеНомераОприходование",, ЭтоОприходование);
	Иначе
		Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, Элементы.Запасы.ТекущиеДанные);
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, Элементы.Запасы.ТекущиеДанные, "СерийныеНомераОприходование");
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

#КонецОбласти

#Область ИнтеграцяГИСМ

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстУведомленияОСписанииГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентУНФ.ТекстУведомленияОСписанииКиЗГИСМОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер()
	
	ИнтеграцияГИСМУНФ.СформироватьТекстУведомлениеОСписанииКиЗ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Запасы[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходоватьТоварыПоСебестоимостиСписанияПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()
	
	Элементы.ЗапасыЦена.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.ЗапасыСумма.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.ГруппаИтогиСумма.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.Корреспонденция.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.КорреспонденцияОприходование.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	Элементы.ГруппаПредставлениеЦены.Видимость = Не Объект.ПриходоватьТоварыПоСебестоимостиСписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникКорректировкиОстатковЕГАИС(Команда)
	
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияПомощника();
	ПараметрыОткрытия = Новый Структура("Организация, ТорговаяТочка", Объект.Организация, Объект.СтруктурнаяЕдиница);
	ОткрытьФорму("Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияПомощника()
	
	ОрганизацияОтборСтруктура = Новый Структура("Поле, Значение", "Организация", Объект.Организация);
	СкладОтборСтруктура = Новый Структура("Поле, Значение", "ТорговаяТочка", Объект.СтруктурнаяЕдиница);
	
	ОтборМассив = Новый Массив;
	ОтборМассив.Добавить(ОрганизацияОтборСтруктура);
	
	МассивРезультат = РегистрыСведений.НастройкиОбменаЕГАИС.ДоступныеТранспортныеМодули(ОтборМассив);
	
	СтруктураДляВозврата = Новый Структура;
	
	Если ЗначениеЗаполнено(МассивРезультат) Тогда
		СтруктураДляВозврата.Вставить("ОрганизацияЕГАИС", МассивРезультат[0].ОрганизацияЕГАИС);
	КонецЕсли;
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

#КонецОбласти