
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СозданПоКомандеИзФормыСписка") Тогда
		СозданПоКомандеИзФормыСписка = Параметры.СозданПоКомандеИзФормыСписка;
	Иначе
		СозданПоКомандеИзФормыСписка = Ложь;
	КонецЕсли;
	
	ФормаСоздана = Истина;
	
	// Предопределенные значения
	ВариантЗаполненияРасшифровкиАвтоматически = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Автоматически");
	ВариантЗаполненияРасшифровкиСПомощником = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.СПомощником");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	
	ВидОперацииПоставщику = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
	ВидОперацииПокупателю = Перечисления.ВидыОперацийРасходИзКассы.Покупателю;
	
	УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	// Конец Предопределенные значения
	
	// Зачет долгов
	Если Объект.ВариантЗаполненияРасшифровки.Пустая() ИЛИ
		(Объект.Ссылка.Пустая() И Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание)) Тогда
		Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную;
	ИначеЕсли Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВариантЗаполненияРасшифровки");
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			Объект.ВариантЗаполненияРасшифровки = СохраненноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьИнформациюОСуммеИВалютеОснования();
	// Конец Зачет долгов
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтотОбъект, Элементы.ИнформационныеСсылки);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0
	   И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли;
	
	// ФО Использовать подсистему Зарплата.
	УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата();
	
	Если Объект.Ссылка.Пустая()
	И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
	    Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
			Объект.ВидОперации = ВидОперацииПоставщику;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент)
		   И Объект.РасшифровкаПлатежа.Количество() > 0
		И НЕ ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
				Объект.РасшифровкаПлатежа[0].Договор = Объект.Контрагент.ДоговорПоУмолчанию;
			КонецЕсли;
			Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
				Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
					ДоговорВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов));
					Объект.РасшифровкаПлатежа[0].Курс = ?(ДоговорВалютаКурсКратность.Курс = 0, 1, ДоговорВалютаКурсКратность.Курс);
					Объект.РасшифровкаПлатежа[0].Кратность = ?(ДоговорВалютаКурсКратность.Кратность = 0, 1, ДоговорВалютаКурсКратность.Кратность);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Статья может прийти из шаблона документа или из документа планирования и тогда её заполнять не нужно.
		Если НЕ (Параметры.ЗначенияЗаполнения.Свойство("ШаблонДокумента") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ШаблонДокумента) И
				Параметры.ЗначенияЗаполнения.Свойство("Статья") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Статья)
			)
			И НЕ (
				(ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПеремещениеДСПлан"))
				И НЕ Параметры.Основание.СтатьяДвиженияДенежныхСредств.Пустая()
				)
			Тогда
			
			УстановитьСтатьюДДС();
			Если НЕ Объект.Контрагент.Пустая() Тогда
				УстановитьСтатьиДДСВРасшифровкеПлатежа();
			КонецЕсли;
			
		ИначеЕсли	((ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПеремещениеДСПлан"))
					И НЕ Параметры.Основание.СтатьяДвиженияДенежныхСредств.Пустая()
					)
			Тогда
			
			Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
				И ( Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги) Тогда
				Объект.УчитыватьВНУ = Истина;
			Иначе
				Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Установка реквизитов формы.
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	// Зачет долгов
	УстановитьВидимостьКурсаВалюты(Объект.ВалютаДенежныхСредств);
	// Конец Зачет долгов
	
	СтруктурнаяЕдиницаПодразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	
	ДополнитьСписокВыбораВидовОпераций();
	
	СозданиеНового = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
	   И НЕ ЗначениеЗаполнено(Параметры.Основание)
	   И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
		СозданиеНового = Истина;
	Иначе
		УстановитьВидимостьНалогообложениеНДС();
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Объект.Организация.СтавкаНДСПоУмолчанию;
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	// Зачет долгов
	СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	// Конец Зачет долгов
	
	ВидОперации = Объект.ВидОперации;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	Корреспонденция = Объект.Корреспонденция;
	
	// Счет фактура и документ-основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	Элементы.ДокументОснованиеНадписьАвто.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	Элементы.ДокументОснованиеНадписьВручную.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	Элементы.ДокументОснованиеНадписьСПомощником.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	// Конец Счет фактура и документ-основание
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	УстановитьВидимостьПечатиЧека();
	
	ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов = Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Получить();
	
	УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(СозданиеНового);
		
	// Зачет долгов
	Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаЗаполнениеСПомощником;
	ИначеЕсли Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную Тогда
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
	КонецЕсли;
	
	ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа();
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	// Конец Зачет долгов
	
	ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
		Элементы.НаправлениеДеятельностиНалоги.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		Элементы.ВыплатаЗаработнойПлатыСотрудникуНаправлениеДеятельности.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
		Элементы.ВыплатаЗаработнойПлатыНаправлениеДеятельности.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Заполнение табличной части при вводе документа из рабочего места.
	Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
	   И Параметры.ЗначенияЗаполнения.Свойство("ЗаполнитьРасшифровкаПлатежа")
	   И Параметры.ЗначенияЗаполнения.ЗаполнитьРасшифровкаПлатежа Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтрокаТабличнойЧасти.СтавкаНДС.Ставка + 100) / 100);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(Истина);
	УстановитьВидимостьРеквизитовРасчетов();
	УстановитьВидимостьИДоступность();
	
	ТекущийПользовательСистемы = ПользователиКлиентСервер.ТекущийПользователь();
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// Остатки ДС и взаиморасчетов на форме
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС();
	// Конец Остатки ДС и взаиморасчетов на форме
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		Элементы.РасчетыПрочие.Видимость = Ложь;
		Элементы.ПодвалВручнуюЛево.Видимость = Ложь;
		Элементы.СуммаНДСВручную.Видимость = Ложь;
		Элементы.ГруппаКасса.Видимость = Ложь;
		Элементы.ВидОперации.Видимость = Ложь;
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		Элементы.АвторДокумента.Видимость = Ложь;
		Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ФормаОбработкаНастройкаПрограммыБольшеВозможностейКонтекст.Видимость = Ложь;
		Элементы.ГруппаСсылки.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаЗаказ.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаПризнакАванса.Видимость = Ложь;
		
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = "Готово";
	КонецЕсли;
	// Конец МобильноеПриложение
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УставитьТекущуюСтраницу();
	
	ЗаполнитьТелефонАдресЭП();
	УстановитьДоступностьТелефонАдресЭП();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Контрагент = Параметр Тогда
			УстановитьВидимостьРеквизитовРасчетов();
		КонецЕсли;
	КонецЕсли;
	
	// Прочие расчеты
	Если ИмяСобытия = "Запись_ПланСчетовУправленческий" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Корреспонденция = Параметр Тогда
			УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		КонецЕсли;
	КонецЕсли;
	// Конец Прочие расчеты
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Зачет долгов
	Если ФормаСоздана Тогда
		НастроитьЭлементыРаспределенияДолговНаСервере(Истина);
	КонецЕсли;
	// Конец Зачет долгов
	
	ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	// Зачет долгов с помощником
	// Удалим строку с авансом, если он = 0, и строки с нулевыми суммами.
	Если ВидОперации = ВидОперацииПоставщику Тогда
		Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		//Если Элементы.СтраницыИтоги.ТекущаяСтраница = Элементы.СтраницаРаспределениеСПомощником Тогда
			
			Если СуммаПлатежаАванс = 0 Тогда
				
				СтрокаАванса = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокиАванса);
				Если СтрокаАванса <> Неопределено Тогда
					Объект.РасшифровкаПлатежа.Удалить(СтрокаАванса.НомерСтроки - 1);
				КонецЕсли;
				
			ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И
				Объект.ДоговорДляЗачетаАвансаСПомощником.Пустая() Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не выбран договор для учета аванса. Документ не проведен!";
				Сообщение.Поле = "Объект.ДоговорДляЗачетаАвансаСПомощником";
				Сообщение.Сообщить();
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Индекс = Объект.РасшифровкаПлатежа.Количество() - 1;
			Пока Индекс >= 0 Цикл
				ТекущаяСтрока = Объект.РасшифровкаПлатежа[Индекс];
				Если ТекущаяСтрока.СуммаРасчетов = 0 И ТекущаяСтрока.СуммаПлатежа = 0 Тогда
					Объект.РасшифровкаПлатежа.Удалить(Индекс);
				КонецЕсли;
				
				Индекс = Индекс - 1;
			КонецЦикла;
		ИначеЕсли Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически Тогда
			
			Объект.РасшифровкаПлатежа.Очистить();
			ДобавитьСтрокуАвансаНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	// Конец Зачет долгов с помощником
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Если ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически Тогда
			ПроверитьСоответствиеДоговораУсловиямДокумента(Объект.ДоговорыАвтоЗачетаДолгов, ТекстСообщения, Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Отказ, Объект.ДоговорКредитаЗайма);
		Иначе
			ПроверитьСоответствиеДоговораУсловиямДокумента(Объект.РасшифровкаПлатежа, ТекстСообщения, Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Отказ, Объект.ДоговорКредитаЗайма);
		КонецЕсли;
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			Сообщение.Сообщить();
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Прочие расчеты
	Если ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Или
		ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
	КонецЕсли;
	
	// Конец Прочие расчеты
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС();
	
	// Зачет долгов
	ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа();
	
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_ВариантЗаполненияРасшифровки", Объект.ВариантЗаполненияРасшифровки);
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	// Конец Зачет долгов

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если СозданПоКомандеИзФормыСписка Тогда
		ПараметрыОповещения = Новый Структура("Ссылка", Объект.Ссылка);
		Оповестить("Запись_РасходИзКассы", ПараметрыОповещения);
	КонецЕсли;
	
	// Оповещение об оплате.
	ОповеститьОбОплатеСчета = Ложь;
	ОповеститьОбОплатеЗаказа = Ложь;
	
	Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату)
		);
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ)
		);
	КонецЦикла;
	
	Если ОповеститьОбОплатеСчета Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплату"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	КонецЕсли;
	
	Если ОповеститьОбОплатеЗаказа Тогда
		Оповестить("ОповещениеОбОплатеЗаказа");
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	// РМК
	Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма")
		И СтрНайти(ЭтотОбъект.ВладелецФормы.ИмяФормы, "ФормаДокумента_РМК") > 0 
		Тогда
		Оповестить("РМК_Запись_РКО", Новый Структура("Ссылка, Номер, Дата, ВидОперации", Объект.Ссылка, Объект.Номер, Объект.Дата, Объект.ВидОперации));
	КонецЕсли;
	// Конец РМК
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Элементы.ДокументОснованиеНадписьАвто.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Элементы.ДокументОснованиеНадписьВручную.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Элементы.ДокументОснованиеНадписьСПомощником.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
		
		ДокументОснованиеВалютаПредставление = "";
		ДокументОснованиеСумма = 0;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		//Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, ПолучитьСписокДляВыбораДокументаОснования(), Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) тогда
			возврат;
		КонецЕсли;
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоТипу(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику И 
		(Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником 
		ИЛИ
		Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически)Тогда
		Объект.РасшифровкаПлатежа.Очистить();
		ДобавитьСтрокуАвансаНаКлиенте();
		ПересчитатьИтогиПриИзмененииАвансаНаКлиенте(Истина);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация, Объект.Дата);
	
	Если НЕ ЗначениеЗаполнено(Объект.Выдать) Тогда
		Объект.Выдать = СтруктураДанные.КонтрагентНаименованиеПолное;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда 
		
		Объект.РасшифровкаПлатежа[0].Договор = СтруктураДанные.Договор;
		
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
			Объект.РасшифровкаПлатежа[0].Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс
			);
			Объект.РасшифровкаПлатежа[0].Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
			);
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа[0].Курс = ?(
			Объект.РасшифровкаПлатежа[0].Курс = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Курс
		);
		Объект.РасшифровкаПлатежа[0].Кратность = ?(
			Объект.РасшифровкаПлатежа[0].Кратность = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Кратность
		);
		
		Объект.РасшифровкаПлатежа[0].СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа,
			Курс,
			Объект.РасшифровкаПлатежа[0].Курс,
			Кратность,
			Объект.РасшифровкаПлатежа[0].Кратность
		);
		
	КонецЕсли;
	
	// Статьи ДДС
	УстановитьСтатьиДДСВРасшифровкеПлатежа();
	// Конец Статьи ДДС
	
	// Прочие расчеты
	Если СтруктураДанные.Свойство("ДоговорКредитаЗаймаПоУмолчанию") Тогда
		Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗаймаПоУмолчанию;
		ОбработатьИзменениеДоговораКредитаИлиЗайма();
	КонецЕсли;
	// Конец Прочие расчеты
	
	// Зачет долгов
	Объект.ДоговорДляЗачетаАвансаСПомощником = СтруктураДанные.Договор;
	СоздатьЭлементыДоговоровЗачетаДолгов();
	// Конец Зачет долгов
	
	Если ЗначениеЗаполнено(СтруктураДанные.СтатьяДДСПоУмолчанию) Тогда
		Объект.Статья = СтруктураДанные.СтатьяДДСПоУмолчанию;
		Объект.УчитыватьВНУ = СтруктураДанные.УчитыватьВНУ;
	КонецЕсли;
	
	ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	Если ВестиРасчетыПоДокументам И Объект.ВидОперации = ВидОперацииПокупателю Тогда
		Для Каждого ТекущаяСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ТекущаяСтрокаРасшифровки.ПризнакАванса = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперации <> ВидОперацииПередИзменением Тогда
		УставитьТекущуюСтраницу();
		ОчиститьРеквизитыНеОтносящиесяКОперации();
		ВидОперацииПриИзмененииНаСервере();
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		// Помощник зачета долгов
		Если Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
			ПерезаполнитьПолеДатаДокБольшеДатыДокументаВТаблицеДолгов();
		КонецЕсли;
		// Конец Помощник зачета долгов
		
		// Обновление курсов расчетов
		СтруктураДанные.Вставить("ОбновитьКурсыРасчетов", (Объект.РасшифровкаПлатежа.Количество() > 0 И Объект.РасшифровкаПлатежа.Итог("Курс") > 0 И
			Объект.РасшифровкаПлатежа.Количество() <> Объект.РасшифровкаПлатежа.Итог("Курс")));
		СтруктураДанные.Вставить("ОбновитьКурсыРасчетовТекстВопроса", НСтр("ru = 'Изменилась дата документа. Установить курс расчетов в соответствии с курсом валюты договора?'"));
		// Конец Обновление курсов расчетов
		
		ТекстСообщения = НСтр("ru = 'Изменился курс валюты кассы. Пересчитать суммы документа?'");
		ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	
	// Касса по умолчанию
	Если СтруктураДанные.Свойство("Касса") Тогда
		Объект.Касса = СтруктураДанные.Касса;
		Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств;
	КонецЕсли;
	
	Если Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		ЗаполнитьДолги(Истина);
	КонецЕсли;
	
	УстановитьНастройкиУчетаВНалогообложении();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
		ТекстСообщения = НСтр("ru = 'Изменилась валюта кассы. Список ""Платежные ведомости"" будет очищен.'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ВалютаДенежныхСредствПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекстСообщения", ТекстСообщения)), ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	ТекстСообщения = ДополнительныеПараметры.ТекстСообщения;
	
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзмененииФрагмент()
	
	Перем СтруктураДанные, ТекстСообщения;
	
	ПредыдущаяВалюдаДС = Объект.ВалютаДенежныхСредств;
	
	СтруктураДанные = ПолучитьДанныеВалютаДенежныхСредствПриИзменении(
	Объект.Дата,
	Объект.ВалютаДенежныхСредств
	);
	
	ТекстСообщения = НСтр("ru = 'Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);

	Если Объект.ВидОперации = ВидОперацииПоставщику И НЕ ЗначениеЗаполнено(ПредыдущаяВалюдаДС) И НЕ Объект.ВалютаДенежныхСредств.Пустая() Тогда
		ЗаполнитьДолги(Истина);
	Иначе
		УстановитьЗаголовкиКолонокТабличныхЧастей(Объект.ВалютаДенежныхСредств);
	КонецЕсли;
	
КонецПроцедуры // ВалютаДенежныхСредствПриИзменении()

&НаКлиенте
Процедура ПодотчетникПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеПодотчетникПриИзменении(Объект.Подотчетник, Объект.Дата);
	Объект.Выдать = СтруктураДанные.ПодотчетникНаименование;
	Объект.ПоДокументу =
		Строка(СтруктураДанные.ДокументВид)
	  + " серия "
	  + СтруктураДанные.ДокументСерия
	  + ", номер "
	  + СтруктураДанные.ДокументНомер
	  + ", выданный "
	  + Формат(СтруктураДанные.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")
	  + " "
	  + СтруктураДанные.ДокументКемВыдан;
	
КонецПроцедуры // ПодотчетникПриИзменении()

&НаКлиенте
Процедура КорреспонденцияПриИзменении(Элемент)
	
	Если Корреспонденция <> Объект.Корреспонденция Тогда
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Истина);
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Корреспонденция = Объект.Корреспонденция;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	// Зачет долгов
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	// Конец Зачет долгов
	
	СуммаДокументаПриИзмененииФрагмент();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

&НаКлиенте
Процедура СуммаДокументаПриИзмененииФрагмент()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 И
		НЕ (Объект.ВидОперации = ВидОперацииПоставщику И 
		Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником) Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
		
		РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ВидОперацииПоставщику Тогда
		
		Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
			Если Объект.СуммаДокумента = ТаблицаДолгов.Итог("ДолгВалПлатежа") Тогда
				ЗачестьДолгиАвтоматическиФрагмент();
			Иначе
				ПересчитатьИтогиПриИзмененииАвансаНаСервере(Истина);
			КонецЕсли;
		ИначеЕсли Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически И Объект.ДоговорыАвтоЗачетаДолгов.Количество() = 1 Тогда
			Объект.ДоговорыАвтоЗачетаДолгов[0].СуммаПлатежа = Объект.СуммаДокумента;
			ПересчитатьИтогиПриИзмененииАвансаНаСервере();
		Иначе
			ПересчитатьИтогиПриИзмененииАвансаНаСервере();
		КонецЕсли;
		
	Иначе
		
		СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	КонецЕсли;
	
КонецПроцедуры // СуммаДокументаПриИзменении()

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	ПредыдущаяВалюдаДС = Объект.ВалютаДенежныхСредств;
	
	Объект.ВалютаДенежныхСредств = ?(
		ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств),
		Объект.ВалютаДенежныхСредств,
		ПолучитьВалютуПоУмолчаниюКассыНаСервере(Объект.Касса)
	);
	
	КассаПриИзмененииФрагмент(ПредыдущаяВалюдаДС);
	
КонецПроцедуры // КассаПриИзменении()

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтотОбъект.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаПлатежа = ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(СтрокаТабличнойЧасти.Ведомость);
	
КонецПроцедуры // ВыплатаЗаработнойПлатыВедомостьПриИзменении()

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	 = Ложь;
	
	ДатаКалендаряПриОткрытии = ?(ЗначениеЗаполнено(Объект.ПериодРегистрации), Объект.ПериодРегистрации, УправлениеНебольшойФирмойПовтИсп.ПолучитьТекущуюДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", УправлениеНебольшойФирмойКлиент.ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииНачалоВыбора()

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.Касса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.Касса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	
	НастроитьЭлементыРаспределенияДолговНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Если Объект.ВидОперации = ВидОперацииПоставщику Тогда
		
		СуммаИтог = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		Если СуммаИтог <> 0 И СуммаИтог <> Объект.СуммаДокумента
			И Объект.ВариантЗаполненияРасшифровки <> ВариантЗаполненияРасшифровкиАвтоматически
			Тогда
			НадписьВСкобках = ?(Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную, 
				НСтр("ru = 'разнесено вручную'"), 
				НСтр("ru = 'зачтено + аванс'"));
			
			Элемент.СписокВыбора.Добавить(СуммаИтог, ""+СуммаИтог+" ("+НадписьВСкобках+")");
		КонецЕсли;
		
		Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
			СуммаИтогЗачесть = ТаблицаДолгов.Итог("ДолгВалПлатежа");
			Если СуммаИтогЗачесть <> 0 И СуммаИтогЗачесть <> Объект.СуммаДокумента Тогда
				Элемент.СписокВыбора.Добавить(СуммаИтогЗачесть, ""+СуммаИтогЗачесть+НСтр("ru = ' (текущий долг)'"));
			КонецЕсли;
		ИначеЕсли Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически Тогда
			СуммаИтогЗачесть = Объект.ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
			Если СуммаИтогЗачесть <> 0 И СуммаИтогЗачесть <> Объект.СуммаДокумента Тогда
				Элемент.СписокВыбора.Добавить(СуммаИтогЗачесть, ""+СуммаИтогЗачесть+НСтр("ru = ' (разнесено по договорам)'"));
			КонецЕсли;
		КонецЕсли;
		
		Если ОстатокВзаиморасчетов < 0 И (-ОстатокВзаиморасчетов) <> Объект.СуммаДокумента Тогда
			Элемент.СписокВыбора.Добавить(-ОстатокВзаиморасчетов, ""+(-ОстатокВзаиморасчетов)+НСтр("ru = ' (мы должны)'"));
		КонецЕсли;
		
		Если ОстатокДенежныхСредств > 0 И (ОстатокДенежныхСредств) <> Объект.СуммаДокумента Тогда
			Элемент.СписокВыбора.Добавить(ОстатокДенежныхСредств, ""+(ОстатокДенежныхСредств)+НСтр("ru = ' (остаток в кассе)'"));
		КонецЕсли;
		
		Если Элемент.СписокВыбора.Количество() = 0 Тогда
			Элемент.СписокВыбора.Добавить(Объект.СуммаДокумента, НСтр("ru = 'Нет данных для заполнения'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПоДоговоруПриИзменении(Элемент)
	
	Если Элементы.СнятьОтборПоДоговору.Доступность Тогда
		
		Для каждого ЭлементОтбораСтрок Из Элементы.ТаблицаДолгов.ОтборСтрок Цикл
			ВыполнитьПоискПоДоговоруНаСервере(ЭлементОтбораСтрок.Ключ);
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Подотчетник.Пустая() Тогда
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект,НСтр("ru = 'Сначала нужно выбрать подотчетника'"),,,"Объект.Подотчетник");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаПередУдалением()

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти);

КонецПроцедуры // РасшифровкаПлатежаДоговорПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораДоговораКонтрагента(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику") Тогда
		Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.ДокументПланирования = Неопределено;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю")
		И ВестиРасчетыПоДокументам Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов признак аванса всегда установлен!'"));
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов нельзя установить признак аванса!'"));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса , СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры // РасшифровкаПлатежаПризнакАвансаПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаДокументПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииДокументаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику") Тогда
		
		Режим = РежимДиалогаВопрос.ОК;
		ПоказатьПредупреждение(, НСтр("ru = 'Для вида расчета с признаком ""Аванс"" документом расчетов будет текущий!'"));
		
	Иначе
		
		ЭтоРасчетыСПокупателями = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
		
		СтруктураОтбор = Новый Структура();
		СтруктураОтбор.Вставить("Контрагент", Объект.Контрагент);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтруктураОтбор.Вставить("Договор", СтрокаТабличнойЧасти.Договор);
		КонецЕсли;
		Если НЕ УчетПоКомпании Тогда
			СтруктураОтбор.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		СтруктураПараметры = Новый Структура("Отбор, ЭтоРасчетыСПокупателями, ТипДокумента",
			СтруктураОтбор,
			ЭтоРасчетыСПокупателями,
			ТипЗнч(Объект.Ссылка)
		);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыборДокументаРасчетов", СтруктураПараметры, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаДокументНачалоВыбора()

&НаКлиенте
Процедура РасшифровкаПлатежаДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыборДокументаРасчетов(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаСуммаРасчетовПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные)
	
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаНаКлиенте(ТекущиеДанные, "Курс");
		
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежа.ТекущиеДанные, "Кратность");
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКратностьПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
		
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РасшифровкаПлатежаСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику Тогда
		РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	Если Объект.Контрагент.ВестиРасчетыПоЗаказам Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату) И 
			НЕ ЗначениеЗаполнено(ТекущиеДанные.Заказ) И
			ТипЗнч(ТекущиеДанные.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И
			ТипЗнч(ТекущиеДанные.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ТекущиеДанные.Заказ = ТекущиеДанные.СчетНаОплату.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику Тогда
		РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаЗаказПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	Если Объект.Контрагент.ВестиУчетОплатыПоСчетам Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Заказ) И 
			НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату) И
			ТипЗнч(ТекущиеДанные.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплатуПоставщика.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
			|ГДЕ
			|	СчетНаОплатуПоставщика.ДокументОснование = &ДокументОснование";
			
			Запрос.УстановитьПараметр("ДокументОснование", ТекущиеДанные.Заказ);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() = 1
				И Выборка.Следующий() Тогда
				
				ТекущиеДанные.СчетНаОплату = Выборка.СчетНаОплату;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти, ИмяКолонки = "СуммаПлатежа")
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтруктураДанные = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор
		);
		
	Если СтрокаТабличнойЧасти.СуммаПлатежа = 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = 0;
		СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
	ИначеЕсли Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

&НаСервере
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(СтрокаТабличнойЧасти, ДолгВалДоговора = 0, ДолгВалПлатежа = 0)
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтруктураДанные = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор
		);
		
	Если СтрокаТабличнойЧасти.СуммаПлатежа = 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = 0;
		СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
	ИначеЕсли Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		Если ДолгВалДоговора <> 0 И ДолгВалПлатежа = СтрокаТабличнойЧасти.СуммаПлатежа Тогда
			СтрокаТабличнойЧасти.СуммаРасчетов = ДолгВалДоговора;
		Иначе
			СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаПлатежа,
				Курс,
				СтрокаТабличнойЧасти.Курс,
				Кратность,
				СтрокаТабличнойЧасти.Кратность
			);
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

&НаКлиенте
Процедура РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДокументыПланированияРасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.СуммаРасчетов = ТекущаяСтрока.СуммаПлатежа;
	КонецЕсли;
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДолгов

&НаКлиенте
Процедура ТаблицаДолговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаДолговДокумент" Тогда
		ТекущиеДанные = Элементы.ТаблицаДолгов.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Документ);
			ОткрытьФорму("Документ."+ПолучитьИмяТипаДокумента(ТекущиеДанные.Документ)+".ФормаОбъекта", ПараметрыОткрытия);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ТаблицаДолговЗаказ" ИЛИ Поле.Имя = "ТаблицаДолговЗаказКогдаНетУчетаПоДокументам" Тогда
		ТекущиеДанные = Элементы.ТаблицаДолгов.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Заказ) Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Заказ);
			Если ТипЗнч(ТекущиеДанные.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", ПараметрыОткрытия);
			Иначе
				ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", ПараметрыОткрытия);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДолговВыбранПриИзменении(Элемент)
	
	ТаблицаДолговВыбранПриИзмененииЗавершение(Элементы.ТаблицаДолгов.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаДолговВыбранПриИзмененииЗавершение(ИдентификаторТаблицыДолгов)
	
	ТекущаяСтрокаДолгов = ТаблицаДолгов.НайтиПоИдентификатору(ИдентификаторТаблицыДолгов);
	
	Если ТекущаяСтрокаДолгов.Выбран Тогда // Возможно, требуется добавить новую строку.
		ПриИзмененииВТаблицеДолгов("Выбран", ТекущаяСтрокаДолгов.ПолучитьИдентификатор());
	Иначе
		ТекущаяСтрокаРасшифровки = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущаяСтрокаДолгов.ИдентификаторСтрокиРасшифровкиПлатежа);
		Если ТекущаяСтрокаРасшифровки <> Неопределено Тогда
			ТекущаяСтрокаРасшифровки.СуммаРасчетов = 0;
			ТекущаяСтрокаРасшифровки.СуммаПлатежа = 0;
			ТекущаяСтрокаРасшифровки.СуммаНДС = 0;
		КонецЕсли;
		
		ТекущаяСтрокаДолгов.СуммаРасчетов = 0;
		ТекущаяСтрокаДолгов.Зачесть = 0;
		ТекущаяСтрокаДолгов.ЗачестьВыбрано = 0;
		
		ПересчитатьИтогиПриИзмененииАвансаНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДолговЗачестьПриИзменении(Элемент)
	
	ТекущаяСтрокаДолгов = Элементы.ТаблицаДолгов.ТекущиеДанные;
	
	ТекущаяСтрокаДолгов.Выбран = Истина;
	ПриИзмененииВТаблицеДолгов("Зачесть", ТекущаяСтрокаДолгов.ПолучитьИдентификатор(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДолговСуммаРасчетовПриИзменении(Элемент)
	
	ТекущаяСтрокаДолгов = Элементы.ТаблицаДолгов.ТекущиеДанные;
	
	ТекущаяСтрокаДолгов.Выбран = Истина;
	ПриИзмененииВТаблицеДолгов("СуммаРасчетов", ТекущаяСтрокаДолгов.ПолучитьИдентификатор(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДолговКурсПриИзменении(Элемент)
	
	ТаблицаДолговКурсПриИзмененииФрагмент(Элементы.ТаблицаДолгов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДолговКурсПриИзмененииФрагмент(ТекущаяСтрокаДолгов)
	
	ТекущаяСтрокаДолгов.Выбран = Истина;
	ПриИзмененииВТаблицеДолгов("Курс", ТекущаяСтрокаДолгов.ПолучитьИдентификатор(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДолговКратностьПриИзменении(Элемент)
	
	ТекущаяСтрокаДолгов = Элементы.ТаблицаДолгов.ТекущиеДанные;
	
	ТекущаяСтрокаДолгов.Выбран = Истина;
	ПриИзмененииВТаблицеДолгов("Кратность", ТекущаяСтрокаДолгов.ПолучитьИдентификатор(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДолговСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрокаДолгов = Элементы.ТаблицаДолгов.ТекущиеДанные;
	
	ТекущаяСтрокаДолгов.Выбран = Истина;
	ПриИзмененииВТаблицеДолгов("СтавкаНДС", ТекущаяСтрокаДолгов.ПолучитьИдентификатор(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДолговСчетПриИзменении(Элемент)
	
	ТекущаяСтрокаДолгов = Элементы.ТаблицаДолгов.ТекущиеДанные;
	ТекущаяСтрокаДолгов.Выбран = Истина;
	ПриИзмененииВТаблицеДолгов("СчетНаОплату", ТекущаяСтрокаДолгов.ПолучитьИдентификатор(), Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале валюту!'"));
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкаПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресРасшифровкаПлатежаВХранилище,
		|Компания,
		|Дата,
		|Контрагент,
		|Ссылка,
		|ВидОперации,
		|ВалютаДенежныхСредств,
		|СуммаДокумента",
		АдресРасшифровкаПлатежаВХранилище,
		Компания,
		Объект.Дата,
		Объект.Контрагент,
		Объект.Ссылка,
		Объект.ВидОперации,
		Объект.ВалютаДенежныхСредств,
		Объект.СуммаДокумента
	);
		
	Результат = Неопределено;

		
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолговПоставщикам", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект, Новый Структура("АдресРасшифровкаПлатежаВХранилище", АдресРасшифровкаПлатежаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресРасшифровкаПлатежаВХранилище = ДополнительныеПараметры.АдресРасшифровкаПлатежаВХранилище;
	
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		
		ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище);
		ИмяТабличнойЧасти = "РасшифровкаПлатежа";
		Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.СтавкаНДС) Тогда
				СтрокаРасшифровкаПлатежа.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			РассчитатьСуммуПлатежаНаКлиенте(СтрокаРасшифровкаПлатежа);
		КонецЦикла;
		
		УставитьТекущуюСтраницу();
		
		Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено,Нстр("ru='Не выбран документ основание!'"));
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан"))
		И НЕ ДокументУтвержден(Объект.ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести перемещение денег на основании неутвержденного планового документа!'");
	КонецЕсли;
	
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Документу-основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		
		Если Объект.РасшифровкаПлатежа.Количество() = 0
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		ВидОперации = Объект.ВидОперации;
		ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
		ДатаДокумента = Объект.Дата;
		
		УставитьТекущуюСтраницу();
		ЗаполнитьПоОснованиюЗавершениеНаСервере();
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьПредупреждение = Ложь;
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект, ПоказыватьПредупреждение) Тогда
		Если ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
			
КонецПроцедуры // НапечататьЧекВыполнить()

// Подготовка таблицы товаров
	//	ТаблицаТоваров = Новый Массив();
	//	
	//	СтрокаТаблицыТоваров = Новый СписокЗначений();
	//	СтрокаТаблицыТоваров.Добавить(НСтр("ru = 'Оплата от:'") + " " + Объект.ПринятоОт + Символы.ПС
	//	+ НСтр("ru = 'Основание:'") + " " + Объект.Основание); //  1 - Наименование
	//	СтрокаТаблицыТоваров.Добавить("");					   //  2 - Штрихкод
	//	СтрокаТаблицыТоваров.Добавить("");					   //  3 - Артикул
	//	СтрокаТаблицыТоваров.Добавить(НомерСекции);			   //  4 - Номер отдела
	//	СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  //  5 - Цена за позицию без скидки
	//	СтрокаТаблицыТоваров.Добавить(1);					   //  6 - Количество
	//	СтрокаТаблицыТоваров.Добавить("");					   //  7 - Наименование скидки/наценки
	//	СтрокаТаблицыТоваров.Добавить(0);					   //  8 - Сумма скидки/наценки
	//	СтрокаТаблицыТоваров.Добавить(0);					   //  9 - Процент скидки/наценки
	//	СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  // 10 - Сумма позиции со скидкой
	//	СтрокаТаблицыТоваров.Добавить(0);					   // 11 - Номер налога (1)
	//	СтрокаТаблицыТоваров.Добавить(0);					   // 12 - Сумма налога (1)
	//	СтрокаТаблицыТоваров.Добавить(0);					   // 13 - Процент налога (1)
	//	СтрокаТаблицыТоваров.Добавить(0);					   // 14 - Номер налога (2)
	//	СтрокаТаблицыТоваров.Добавить(0);					   // 15 - Сумма налога (2)
	//	СтрокаТаблицыТоваров.Добавить(0);					   // 16 - Процент налога (2)
	//	СтрокаТаблицыТоваров.Добавить("");					   // 17 - Наименование секции форматирования товарной строки
	//	
	//	ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры)
	
	НаименованиеТовара = 
		НСтр("ru = 'Выдать: '")
		+ ДокументОбъект.Выдать
		+ НСтр("ru = ', Основание: '")
		+ ДокументОбъект.Основание;
	
	Для каждого ТекСтрока Из ДокументОбъект.РасшифровкаПлатежа Цикл
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекСтрока.СтавкаНДС); 
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		СтрокаПозицииЧека.Наименование = НаименованиеТовара;
		СтрокаПозицииЧека.Количество   = 1;
		СтрокаПозицииЧека.Цена         = ТекСтрока.СуммаПлатежа; //  5 - Цена за позицию без скидки;
		СтрокаПозицииЧека.Сумма        = ТекСтрока.СуммаПлатежа;
		СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
		СтрокаПозицииЧека.НомерСекции  = 1;
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР, ЭтоВозврат) 
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ДополнитьТоварамиПараметрыПриПробитииЧека(Объект, ОбщиеПараметры);
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура("НаименованиеПолное, ИНН, КПП");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, СтруктураРеквизитов);
	
	КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоФискальномуУстройству(ИдентификаторУстройстваФР);
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена касса ККМ соответсвующая устройству %устройство%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%устройство%", ИдентификаторУстройстваФР);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С, ЭлектронныйЧекEmailПередаютсяПрограммой1С, СерийныйНомер");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, СтруктураРеквизитов);
		
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор);
	
	ОбщиеПараметры.ТипРасчета = ?(ЭтоВозврат,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
		
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассира;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	АдресМагазина = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.КодСистемыНалогообложения = РозничныеПродажиСервер.ПолучитьКодСистемыНалогообложения(
		Объект.Организация,
		,
		Объект.Дата);
		
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", 0);
	СтрокаОплаты.Вставить("Сумма", Объект.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР, ЭтоВозврат);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	Контекст = Новый Структура();
	
	Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
	ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
	
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповещение, 
		УникальныйИдентификатор, 
		ОбщиеПараметры, 
		ИдентификаторУстройстваФР,
		,
		ПослеОткрытияЧека
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	Если ПараметрыВыполнения.НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = ПараметрыВыполнения.НомерСмены;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = ПараметрыВыполнения.НомерЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровку(Команда)
	
	Если Объект.СуммаДокумента = 0 Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Укажите вначале сумму документа.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале валюту!'"));
		Возврат;
	КонецЕсли;
	
	Ответ = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРасшифровкуЗавершение", ЭтотОбъект), 
		НСтр("ru='Расшифровка будет полностью перезаполнена. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику") Тогда
		
		ЗаполнитьРасшифровкуПлатежа();
		
	КонецЕсли;
	
	УставитьТекущуюСтраницу();
	
КонецПроцедуры // ЗаполнитьРасшифровку()

&НаКлиенте
Процедура ОбновитьКурсВТекущейСтрокеРасшифровки(Команда)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(Объект.Дата, ТекущиеДанные.Договор);
	ТекущиеДанные.Курс = СтруктураДанных.ДоговорВалютаКурсКратность.Курс;
	ТекущиеДанные.Кратность = СтруктураДанных.ДоговорВалютаКурсКратность.Кратность;
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьДолгиАвтоматически(Команда)
	
	ЗачестьДолгиАвтоматическиФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоДоговору(Команда)
	
	СписокПодменю = Новый СписокЗначений;
	СписокПодменю.Добавить("Договор", "Фильтр по договору");
	СписокПодменю.Добавить("ДолгВалДоговора", "Фильтр по сумме долга");
	СписокПодменю.Добавить("Документ", "Фильтр по документу");
	СписокПодменю.Добавить("Заказ", "Фильтр по заказу");
	
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("УстановитьОтборПоДоговоруЗавершение", ЭтотОбъект), СписокПодменю, Элементы.УстановитьОтборПоДоговору);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоДоговоруЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если РезультатЗавершения <> Неопределено Тогда
		ВыполнитьПоискПоДоговоруНаСервере(РезультатЗавершения.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтборПоДоговору(Команда)
	СнятьОтборПоДоговоруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицаДолгов(Команда)
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	Если Объект.Организация.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале организацию!'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДолги(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УстановитьДоступностьТелефонАдресЭП();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого элОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(элОтбора.Имя,"Отбор.","");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, элОтбора.Значение);
		КонецЦикла;
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Элементы.ДокументОснованиеНадписьАвто.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Элементы.ДокументОснованиеНадписьВручную.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Элементы.ДокументОснованиеНадписьСПомощником.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ПерезаполнитьПолеДатаДокБольшеДатыДокументаВТаблицеДолгов()
	
	Для Каждого ТекущаяСтрока Из ТаблицаДолгов Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.Документ) Тогда
			ТекущаяСтрока.ДатаДокБольшеДатыДокумента = (КонецДня(ТекущаяСтрока.ДатаДокумента) > КонецДня(Объект.Дата));
		Иначе
			ТекущаяСтрока.ДатаДокБольшеДатыДокумента = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииФрагмент(ПредыдущаяВалюдаДС)
	
	Если НЕ ЗначениеЗаполнено(ПредыдущаяВалюдаДС) И НЕ Объект.ВалютаДенежныхСредств.Пустая() Тогда
		ЗаполнитьДолги(Истина);
	КонецЕсли;
	ОбновитьВидимостьИОстаткиДС();
	
КонецПроцедуры // КассаПриИзменении()

&НаСервере
Процедура ПересчитатьСуммуРасчетовВСпискеДолгов(ТекущаяСтрокаРасшифровки, ТекущаяСтрокаДолгов, ИмяКолонки, ДолгВалДоговора = 0, ДолгВалПлатежа = 0)
	
	ТекущаяСтрокаРасшифровки.СуммаПлатежа = ТекущаяСтрокаДолгов.Зачесть;
	
	РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(ТекущаяСтрокаРасшифровки, ДолгВалДоговора, ДолгВалПлатежа);
	
	ТекущаяСтрокаДолгов.СуммаРасчетов = ТекущаяСтрокаРасшифровки.СуммаРасчетов;
	ТекущаяСтрокаДолгов.Курс = ТекущаяСтрокаРасшифровки.Курс;
	// Обновим кратность на случай, если пользователь обнулил курс и кратность, когда сумма расчетов и сумма платежа были = 0.
	ТекущаяСтрокаДолгов.Кратность = ТекущаяСтрокаРасшифровки.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПлатежаВСпискеДолгов(ТекущаяСтрокаРасшифровки, ТекущаяСтрокаДолгов, ИмяКолонки)
	
	ТекущаяСтрокаРасшифровки.СуммаРасчетов = ТекущаяСтрокаДолгов.СуммаРасчетов;
	
	РассчитатьСуммуПлатежаНаСервере(ТекущаяСтрокаРасшифровки);
	
	ТекущаяСтрокаДолгов.Зачесть = ТекущаяСтрокаРасшифровки.СуммаПлатежа;
	ТекущаяСтрокаДолгов.ЗачестьВыбрано = ?(ТекущаяСтрокаДолгов.Выбран, ТекущаяСтрокаРасшифровки.СуммаПлатежа, 0);
	ТекущаяСтрокаДолгов.Курс = ТекущаяСтрокаРасшифровки.Курс;
	// Обновим кратность на случай, если пользователь обнулил курс и кратность, когда сумма расчетов и сумма платежа были = 0.
	ТекущаяСтрокаДолгов.Кратность = ТекущаяСтрокаРасшифровки.Кратность;
	
КонецПроцедуры

&НаСервере
Процедура ЗачестьДолгиАвтоматическиФрагмент()
	
	Для Каждого ТекущаяСтрока Из ТаблицаДолгов Цикл
		Если ТекущаяСтрока.Выбран Тогда
			ТекущаяСтрока.Выбран = Ложь;
			ТаблицаДолговВыбранПриИзмененииЗавершение(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	// Отметка у всех строк снята, а значит аванс = сумме документа!
	// Эта строка нужна для случая, когда в строке не было отмечено ни одной строки.
	// Если отмечена хоть одна строка, то сумма аванса будет обновлена при снятии отметки.
	СуммаПлатежаАванс = Объект.СуммаДокумента;
	
	НужноРаспределить = Объект.СуммаДокумента;
	Для Каждого ТекущаяСтрока Из ТаблицаДолгов Цикл
		
		Если ТекущаяСтрока.ДолгВалПлатежа <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НужноРаспределить <= 0 Тогда
			Прервать;
		Иначе
			ТекущаяСтрока.Зачесть = Мин(НужноРаспределить, ТекущаяСтрока.ДолгВалПлатежа);
			ТекущаяСтрока.Выбран = Истина;
			ТекущаяСтрока.ЗачестьВыбрано = ТекущаяСтрока.Зачесть;
			
			ТаблицаДолговВыбранПриИзмененииЗавершение(ТекущаяСтрока.ПолучитьИдентификатор());
			
			НужноРаспределить = НужноРаспределить - ТекущаяСтрока.Зачесть;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьОтборПоДоговоруНаСервере()
	
	Элементы.ТаблицаДолгов.ОтборСтрок = Неопределено;
	Элементы.СнятьОтборПоДоговору.Доступность = Ложь;
	Элементы.УстановитьОтборПоДоговору.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	ПлательщикУСН =  СистемаНалогообложенияСтруктура.ПлательщикУСН;
	
	Если Не ПлательщикУСН Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
			Элементы.УчитыватьВНУ.Видимость = Истина;
		Иначе
			Элементы.УчитыватьВНУ.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаУчетВНУ.Видимость = Элементы.УчитыватьВНУ.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	Если ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТелефонАдресЭП()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		ТелефонАдресЭП = "Телефон";
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ТелефонАдресЭП = "АдресЭП";
	Иначе
		ТелефонАдресЭП = "НеОтправлять";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьТелефонАдресЭП()
	
	Если ТелефонАдресЭП = "Телефон" Тогда
		Если НЕ ТолькоПросмотр Тогда
			Объект.АдресЭП = "";
		КонецЕсли;
		Элементы.ГруппаТелефон.Видимость = Истина;
		Элементы.ГруппаАдресЭП.Видимость = Ложь;
	ИначеЕсли ТелефонАдресЭП = "АдресЭП" Тогда
		Если НЕ ТолькоПросмотр Тогда
			Объект.Телефон = "";
		КонецЕсли;
		Элементы.ГруппаТелефон.Видимость = Ложь;
		Элементы.ГруппаАдресЭП.Видимость = Истина;
	Иначе
		Если НЕ ТолькоПросмотр Тогда
			Объект.Телефон = "";
			Объект.АдресЭП = "";
		КонецЕсли;
		Элементы.ГруппаТелефон.Видимость = Ложь;
		Элементы.ГруппаАдресЭП.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДляВыбораДокументаОснования()
	
СписокОснований = Новый СписокЗначений;
	
	СписокОснований.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", "Приходная накладная");
	
	// МобильноеПриложение
	Если НЕ МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		СписокОснований.Добавить("Документ.НачислениеНалогов.ФормаВыбора", "Начисление налогов");
		СписокОснований.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", "Заказ поставщику");
		СписокОснований.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", "Счет на оплату (полученный)");
		СписокОснований.Добавить("Документ.ДополнительныеРасходы.ФормаВыбора", "Дополнительные расходы");
		СписокОснований.Добавить("Документ.ПлатежнаяВедомость.ФормаВыбора", "Платежная ведомость");
		Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
			СписокОснований.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", "Отчет комиссионера");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
			СписокОснований.Добавить("Документ.ОтчетКомитенту.ФормаВыбора", "Отчет комитенту");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			СписокОснований.Добавить("Документ.ПеремещениеДСПлан.ФормаВыбора", "Перемещение денег (план)");
			СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", "Заявка на расход денег");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			СписокОснований.Добавить("Документ.НачисленияПоКредитамИЗаймам.ФормаВыбора", "Начисления по кредитам и займам");
			СписокОснований.Добавить("Документ.ДоговорКредитаИЗайма.ФормаВыбора", "Договор кредита (займа)");
		КонецЕсли;
		
	Конецесли;
	// Конец МобильноеПриложение
	
	СписокОснований.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат СписокОснований;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатьюДДСПриСменеВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	ИначеЕсли (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	КонецЕсли;
	
	Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И ( Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги) Тогда
		Объект.УчитыватьВНУ = Истина;
	Иначе
		Если ЗначениеЗаполнено(Объект.Статья) Тогда
			Объект.УчитыватьВНУ = Объект.Статья.УчитыватьВНУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаСервере
Процедура УстановитьСтатьюДДС()
	
	СтруктураДанных = ПолучитьДанныеСтатьиДДС();
	
	Объект.Статья = СтруктураДанных.Статья;
	Объект.УчитыватьВНУ = СтруктураДанных.УчитыватьВНУ;
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаСервере
Процедура ДополнитьСписокВыбораВидовОпераций()
	
	СписокВидовОпераций = ДвиженияДенежныхСредствВызовСервера.ПолучитьСписокВидовОперацийРасходДСКасса();
	Элементы.ВидОперации.СписокВыбора.ЗагрузитьЗначения(СписокВидовОпераций.ВыгрузитьЗначения());
	
КонецПроцедуры // ДополнитСписокВыбораВидовОпераций()

&НаСервере
Процедура ЗаполнитьИнформациюОСуммеИВалютеОснования()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Попытка
			ДокументОснованиеСумма = Объект.ДокументОснование.СуммаДокумента;
			ДокументОснованиеВалютаПредставление = Объект.ДокументОснование.ВалютаДокумента.СимвольноеПредставление;
		Исключение
			// Нет реквизита "СуммаДокумента" или "ВалютаДокумента".
			ДокументОснованиеСумма = 0;
			ДокументОснованиеВалютаПредставление = "";
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	УстановитьВидимостьНалогообложениеНДС();
	УстановитьВидимостьРеквизитовРасчетов();
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	ЗаполнитьИнформациюОСуммеИВалютеОснования();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Функция ПоместитьРасшифровкаПлатежаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.РасшифровкаПлатежа.Выгрузить(,
			"Договор,
			|ПризнакАванса,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище, Очищать = Истина)
	
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище);
	Если Очищать Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	Для каждого СтрокаРасшифровкаПлатежа Из ТаблицаРасшифровкаПлатежа Цикл
		Строка = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаРасшифровкаПлатежа);
		Если НЕ Строка.Договор.Пустая() Тогда
			Строка.СтатьяДДС = Строка.Договор.СтатьяДДСПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасшифровкаПлатежаИзХранилища()

&НаСервере
Процедура ПересчитатьСуммыДокумента(Курс, Кратность, ПересчитатьСуммуПлатежа, ДополнительныеПараметры)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаТабличнойЧасти.Договор.ВалютаРасчетов = Объект.ВалютаДенежныхСредств Тогда
			Если ПересчитатьСуммуПлатежа Тогда
				СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаРасчетов;
				СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
				РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
			Иначе
				СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ПересчитатьСуммуПлатежа Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				Курс,
				СтрокаТабличнойЧасти.Кратность,
				Кратность
			);
			СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
			РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.Курс = ?(
				СтрокаТабличнойЧасти.Курс = 0,
				1,
				СтрокаТабличнойЧасти.Курс
			);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтрокаТабличнойЧасти.Кратность = 0,
				1,
				СтрокаТабличнойЧасти.Кратность
			);
			СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаПлатежа,
				Курс,
				СтрокаТабличнойЧасти.Курс,
				Кратность,
				СтрокаТабличнойЧасти.Кратность
			);
		КонецЕсли;
	КонецЦикла;
	
	// Если нужно, то пересчитаем суммы в ТЧ ДоговорыАвтоЗачетаДолгов.
	Если ПересчитатьСуммуПлатежа И Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически Тогда
		Для каждого СтрокаТабличнойЧасти Из Объект.ДоговорыАвтоЗачетаДолгов Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаПлатежа,
				ДополнительныеПараметры.КурсПередИзменением,
				Курс,
				ДополнительныеПараметры.КратностьПередИзменением,
				Кратность
			);
		КонецЦикла;
		Объект.СуммаДокумента = Объект.ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
	ИначеЕсли ПересчитатьСуммуПлатежа Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	Если Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		ЗаполнитьСуммовыеПоказателиТаблицыДолговПоРасшифровкеПлатежа();
	Иначе
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения)
	
	КурсПередИзменением = Курс;
	КратностьПередИзменением = Кратность;
	
	Если ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Курс = ?(
			СтруктураДанные.ВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Курс
		);
		Кратность = ?(
			СтруктураДанные.ВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Кратность
		);
	КонецЕсли;
	
	// Если курс валюты не изменился или не заполнена валюта денежных средств
	// или документ не заполнен, то ничего не делаем.
	Если (Курс = КурсПередИзменением
		И Кратность = КратностьПередИзменением)
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств)) 
	 ИЛИ (Объект.РасшифровкаПлатежа.Итог("СуммаРасчетов") = 0
	 И НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)) Тогда
		
		// Обновить курсы расчетов
		// Если в расшифровке платежа есть курс <> 1, то предложим его перезаполнить.
		Если НЕ (Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически) И
			СтруктураДанные.Свойство("ОбновитьКурсыРасчетов") И СтруктураДанные.ОбновитьКурсыРасчетов Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы", ЭтотОбъект), СтруктураДанные.ОбновитьКурсыРасчетовТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		// Конец Обновить курсы расчетов
		
		Возврат;
	КонецЕсли; 
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("КурсПередИзменением", КурсПередИзменением);
	ПараметрыВопроса.Вставить("КратностьПередИзменением", КратностьПередИзменением);
	
	// Обновить курсы расчетов
	Если СтруктураДанные.Свойство("ОбновитьКурсыРасчетов") Тогда
		ПараметрыВопроса.Вставить("ОбновитьКурсыРасчетов", СтруктураДанные.ОбновитьКурсыРасчетов);
		ПараметрыВопроса.Вставить("ОбновитьКурсыРасчетовТекстВопроса", СтруктураДанные.ОбновитьКурсыРасчетовТекстВопроса);
	КонецЕсли;
	// Конец Обновить курсы расчетов
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОПересчетеСуммыПриИзмененииКурсаВалютыДенежныхСредствЗавершение", ЭтотОбъект, ПараметрыВопроса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств()

&НаКлиенте
Процедура ВопросОПересчетеСуммыПриИзмененииКурсаВалютыДенежныхСредствЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КурсПередИзменением = ДополнительныеПараметры.КурсПередИзменением;
		КратностьПередИзменением = ДополнительныеПараметры.КратностьПередИзменением;
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 
		   И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда // для вида операции "Зарплата" пересчитывается только шапка.
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю")
			 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику") Тогда
				ПересчитатьСуммыДокумента(Курс, Кратность, Истина, ДополнительныеПараметры);
			// Прочие расчеты
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
				ПересчитатьСуммыДокумента(Курс, Кратность, Истина, ДополнительныеПараметры);
			// Конец Прочие расчеты
			Иначе
				СуммаДокументаРавнаИтогуСуммыПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Объект.СуммаДокумента;
				
				Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл // для видов операций с планируемыми платежами пересчитываем сумму плана.
					СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
						СтрокаТабличнойЧасти.СуммаПлатежа,
						КурсПередИзменением,
						Курс,
						КратностьПередИзменением,
						Кратность
					);
					
					РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
				КонецЦикла;
					
				Если СуммаДокументаРавнаИтогуСуммыПлатежа Тогда
					Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				Иначе
					Объект.СуммаДокумента = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
						Объект.СуммаДокумента,
						КурсПередИзменением,
						Курс,
						КратностьПередИзменением,
						Кратность
					);
				КонецЕсли;
				
				ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
			КонецЕсли;
		Иначе
			Объект.СуммаДокумента = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				КурсПередИзменением,
				Курс,
				КратностьПередИзменением,
				Кратность
			);
		КонецЕсли;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПересчитатьСуммыДокумента(Курс, Кратность, Ложь, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;

	// Обновить курсы расчетов
	Если ДополнительныеПараметры.Свойство("ОбновитьКурсыРасчетов")  И ДополнительныеПараметры.ОбновитьКурсыРасчетов Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы", ЭтотОбъект),
			ДополнительныеПараметры.ОбновитьКурсыРасчетовТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	// Конец Обновить курсы расчетов
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуПлатежаНаКлиенте(СтрокаТабличнойЧасти, ИмяКолонки = "")
	
	СтруктураДанные = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор
		);
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		?(СтруктураДанные.ДоговорВалютаКурсКратность.Курс =0, 1, СтруктураДанные.ДоговорВалютаКурсКратность.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	Если СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = 0;
		СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
	ИначеЕсли Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаРасчетов;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаПлатежа = 0 ИЛИ
		(ИмяКолонки = "Курс" ИЛИ ИмяКолонки = "Кратность") Тогда
		Если СтрокаТабличнойЧасти.Курс = 0 Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				Курс,
				СтрокаТабличнойЧасти.Кратность,
				Кратность
			);
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс, //СтрокаТабличнойЧасти.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры // РассчитатьСуммуПлатежаНаКлиенте()

&НаСервере
Процедура РассчитатьСуммуПлатежаНаСервере(СтрокаТабличнойЧасти, ИмяКолонки = "")
	
	СтруктураДанные = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор
		);
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		?(СтруктураДанные.ДоговорВалютаКурсКратность.Курс =0, 1, СтруктураДанные.ДоговорВалютаКурсКратность.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	Если СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = 0;
		СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
	ИначеЕсли Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаРасчетов;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаПлатежа = 0 ИЛИ
		(ИмяКолонки = "Курс" ИЛИ ИмяКолонки = "Кратность") Тогда
		Если СтрокаТабличнойЧасти.Курс = 0 Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = 0;
		Иначе
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				Курс,
				СтрокаТабличнойЧасти.Кратность,
				Кратность
			);
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс, //СтрокаТабличнойЧасти.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	
КонецПроцедуры // РассчитатьСуммуПлатежаНаСервере()

&НаКлиенте
Процедура РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
		
КонецПроцедуры // РассчитатьСуммуНДСНаКлиенте()

&НаСервере
Процедура РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
		
КонецПроцедуры // РассчитатьСуммуНДСНаКлиенте()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация, Дата)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"КонтрагентНаименованиеПолное",
		Контрагент.НаименованиеПолное
	);
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ДоговорВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
		)
	);
	
	СтруктураДанные.Вставить(
		"ВестиРасчетыПоДокументам",
		Контрагент.ВестиРасчетыПоДокументам
	);
	
	// Прочие расчеты
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		ДоговорКредитаЗаймаПоУмолчанию = ПолучитьДоговорКредитаЗаймаПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
		СтруктураДанные.Вставить(
			"ДоговорКредитаЗаймаПоУмолчанию",
			ДоговорКредитаЗаймаПоУмолчанию
		);
	КонецЕсли;
	// Конец Прочие расчеты
	
	УстановитьВидимостьРеквизитовРасчетов();
	
	// Зачет долгов
	Если Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		ЗаполнитьДолги(Истина);
	КонецЕсли;
	// Конец Зачет долгов
	
	СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", Контрагент.СтатьяДДСПоУмолчанию);
	Если ЗначениеЗаполнено(Контрагент.СтатьяДДСПоУмолчанию) Тогда
		СтруктураДанные.Вставить("УчитыватьВНУ", СтатьяУчитываетсяВНУ(Контрагент.СтатьяДДСПоУмолчанию, Организация, Дата));
	Иначе
		СтруктураДанных = ПолучитьДанныеСтатьиДДС();
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", СтруктураДанных.Статья);
		СтруктураДанные.Вставить("УчитыватьВНУ", СтруктураДанных.УчитыватьВНУ);
	КонецЕсли;
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервере
Процедура УстановитьВидимостьРеквизитовРасчетов()
	
	КонтрагентВестиРасчетыПоДоговорам = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	
	Элементы.РасшифровкаПлатежаДоговор.Видимость = КонтрагентВестиРасчетыПоДоговорам;
	Элементы.ГруппаДоговоров.Видимость = КонтрагентВестиРасчетыПоДоговорам;
	Элементы.РасшифровкаПлатежаДокумент.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
	
	// МобильноеПриложение
	Если НЕ МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.РасшифровкаПлатежаЗаказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
	КонецЕсли;
	// Конец МобильноеПриложение

	// Прочие расчеты
	Элементы.ПрочиеРасчетыДоговор.Видимость = КонтрагентВестиРасчетыПоДоговорам;
	// Конец Прочие расчеты
	
	// Помощник зачета долгов
	Элементы.ТаблицаДолговДокумент.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
	Элементы.ТаблицаДолговГруппаСуммаДокумента.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
	Элементы.ТаблицаДолговЗаказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам И Объект.Контрагент.ВестиРасчетыПоДокументам;
	Элементы.ТаблицаДолговЗаказКогдаНетУчетаПоДокументам.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам И НЕ Объект.Контрагент.ВестиРасчетыПоДокументам;
	Элементы.ТаблицаДолговГруппаСуммаЗаказа.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.ТаблицаДолговСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
	Элементы.ТаблицаДолговГруппаСуммаСчета.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
	Элементы.ТаблицаДолговДоговор.Видимость = КонтрагентВестиРасчетыПоДоговорам;
	Элементы.ДоговорДляЗачетаАвансаСПомощником.Видимость = КонтрагентВестиРасчетыПоДоговорам;
	// Когда только по договорам, то сделаем ширину поля с договором больше.
	Если НЕ Объект.Контрагент.ВестиРасчетыПоЗаказам И НЕ Объект.Контрагент.ВестиРасчетыПоДокументам И
		КонтрагентВестиРасчетыПоДоговорам Тогда
		Элементы.ТаблицаДолговДоговор.Ширина = 25 + Элементы.ТаблицаДолговДокумент.Ширина;
	Иначе
		Элементы.ТаблицаДолговДоговор.Ширина = 25;
	КонецЕсли;
	// Конец Помощник зачета долгов
	
	Элементы.РасшифровкаПлатежаДоговорВалютаРасчетовСимвольноеПредставление.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
КонецПроцедуры // УстановитьВидимостьРеквизитовРасчетов()

&НаСервере
Функция ПолучитьДанныеВалютаДенежныхСредствПриИзменении(Дата, ВалютаДенежныхСредств)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ВалютаДенежныхСредств)
		)
	);
	
	СтруктураДанные.Вставить("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	ОбновитьДолгиВПомощникеЗачетаДолгов(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеВалютаДенежныхСредствПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПодотчетникПриИзменении(Подотчетник, Дата)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ПодотчетникНаименование", "");
	СтруктураДанные.Вставить("ДокументВид", "");
	СтруктураДанные.Вставить("ДокументСерия", "");
	СтруктураДанные.Вставить("ДокументНомер", "");
	СтруктураДанные.Вставить("ДокументДатаВыдачи", "");
	СтруктураДанные.Вставить("ДокументКемВыдан", "");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Период,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо,
	|	ПРЕДСТАВЛЕНИЕ(ДокументыФизическихЛицСрезПоследних.Физлицо) КАК ПодотчетникНаименование,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения,
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛицСрезПоследних.Представление,
	|	ДокументыФизическихЛицСрезПоследних.УдалитьВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, ) КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Подотчетник
	|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность";
	
	Запрос.УстановитьПараметр("Подотчетник", Подотчетник.ФизЛицо);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	СтруктураДанные.ПодотчетникНаименование = Подотчетник.Наименование;
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
	
		СтруктураДанные.ПодотчетникНаименование = ВыборкаРезультатаЗапроса.ПодотчетникНаименование;
		СтруктураДанные.ДокументВид = ВыборкаРезультатаЗапроса.ВидДокумента;
		СтруктураДанные.ДокументСерия = ВыборкаРезультатаЗапроса.Серия;
		СтруктураДанные.ДокументНомер = ВыборкаРезультатаЗапроса.Номер;
		СтруктураДанные.ДокументДатаВыдачи = ВыборкаРезультатаЗапроса.ДатаВыдачи;
		СтруктураДанные.ДокументКемВыдан = ВыборкаРезультатаЗапроса.КемВыдан;
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПодотчетникПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(Дата, Договор, ДокументПланирования = Неопределено, СтатьяДДС = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", Договор.ВалютаРасчетов)
		)
	);
	СтруктураДанные.Вставить("ВалютаРасчетов", Договор.ВалютаРасчетов);
	// Статья в заявке на расход (РасходДСПЛан) приоритетнее.
	Если ЗначениеЗаполнено(ДокументПланирования) Тогда
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", СтатьяДДС);
	Иначе
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", Договор.СтатьяДДСПоУмолчанию);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении()

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(); // Прочие расчеты
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"Компания",
		УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация)
	);
	
	// Касса по умолчанию
	УправлениеНебольшойФирмойСервер.ДобавитьВСтруктуруИнформациюОКассеПоУмолчаниюДляОрганизации(СтруктураДанные, Объект, Объект.ВалютаДенежныхСредств, "ВалютаДенежныхСредств");
	
	Если СтруктураДанные.Свойство("Касса") Тогда
		ОбновитьВидимостьИОстаткиДС(СтруктураДанные.Касса);
	Иначе
		ОбновитьВидимостьИОстаткиДС();
	КонецЕсли;
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(Ведомость)
	
	Возврат Ведомость.Сотрудники.Итог("СуммаПлатежа");
	
КонецФункции // ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении()

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере(ЗаполнятьНалогообложение = Истина)
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	УстановитьВидимостьПечатиЧека();
	
	// Прочие расчеты
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Объект.РасшифровкаПлатежа[0].СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	// Конец Прочие расчеты
	ИначеЕсли ЗаполнятьНалогообложение Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	КонецЕсли;
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	УстановитьСтатьюДДСПриСменеВидаОперации();
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоУмолчанию()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Объект.Организация.СтавкаНДСПоУмолчанию;
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоУмолчанию()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
		
		Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
		
	Иначе
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	
	Если (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику)
		И НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		
	Иначе
		
		ЗаполнитьСтавкуНДСПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура УстановитьВидимостьДокументыПланирования()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
		Элементы.ДокументыПланирования.Видимость = Ложь;
	// Прочие расчеты
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		Элементы.ДокументыПланирования.Видимость = Ложь;
	// Конец Прочие расчеты
	Иначе
		Элементы.ДокументыПланирования.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(ВосстанавливатьСтавкиНДС = Истина)
	
	ЗаполнитьСтавкуНДСПоУмолчанию();
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			Элементы.СуммаНДС.Видимость = Истина;
			
		КонецЕсли;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
		
		Если ВосстанавливатьСтавкиНДС Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			
		КонецЕсли;
		
		Если ВосстанавливатьСтавкиНДС Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДокументыПланирования();
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура УстановитьВидимостьНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			
		КонецЕсли;
		
		СтавкаНДСПоУмолчанию = Объект.Организация.СтавкаНДСПоУмолчанию;
		
	Иначе
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
	КонецЕсли;
	СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	
КонецПроцедуры // УстановитьВидимостьНалогообложениеНДС()

&НаСервере
Процедура УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(ПриСозданииНаСервере = Ложь)
	
	Элементы.РасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	Элементы.ПрочиеРасчетыСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	Элементы.РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	Элементы.РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	Элементы.Подвал.Видимость = Истина;
	Элементы.СтраницыРасчетовСКонтрагентомПодвал.Видимость = Ложь;
	
	Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
	Элементы.РасчетыСПодотчетником.Видимость = Ложь;
	Элементы.ВыплатаЗаработнойПлатыСотруднику.Видимость = Ложь;
	Элементы.ВыплатыЗаработнойПлаты.Видимость = Ложь;
	Элементы.РасчетыПоНалогам.Видимость = Ложь;
	Элементы.РасчетыПрочие.Видимость = Ложь;
	Элементы.ПеремещениеВКассуККМ.Видимость = Ложь;
	
	Элементы.НалогообложениеНДС.Видимость = Ложь;
	Элементы.СуммаДокумента.Ширина = 14;
	
	Элементы.Подотчетник.Видимость = Ложь;
	Элементы.ГруппаКонтрагент.Видимость = Ложь;
	
	// Прочие расчеты
	Элементы.РасчетыПоКредитам.Видимость = Ложь;
	Элементы.РасчетыПоКредитам.Заголовок = "Расчеты по кредитам";
	Элементы.ДоговорЗаймаСотруднику.Видимость = Ложь;
	Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Ложь;
	Элементы.ДоговорКредита.Видимость = Ложь;
	Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Ложь;
	Элементы.ГруппаИнформацияПоДоговору.Видимость = Ложь;
	Элементы.Сотрудник.Видимость = Ложь;
	//Элементы.ОснованиеЗаполнить.Видимость = Истина;
	// Конец Прочие расчеты
	Элементы.СчетОрганизации.Видимость = Ложь;
	
	Элементы.СуммаДокумента.КнопкаВыпадающегоСписка = Ложь;
	Элементы.РасчетыПрочиеКорреспонденция.Заголовок = "Корреспонденция";
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику") Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПодбор.Видимость = Истина;
		Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Истина;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = "Поставщик";
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		Элементы.СуммаПлатежа.Видимость = Истина;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Разнесено'");
		Элементы.СуммаРасчетов.Видимость = НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		
		Элементы.СуммаРазнесеноВручную.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		Элементы.СуммаРасчетовРазнесеноВручную.Видимость = НЕ Элементы.СуммаРазнесеноВручную.Видимость;
		
		Элементы.СуммаНДС.Видимость = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		// Подвал
		Элементы.Подвал.Видимость = Ложь;
		Элементы.СтраницыРасчетовСКонтрагентомПодвал.Видимость = Истина;
		Элементы.СуммаРазнесеноВручную.Заголовок = "Итого разнесено вручную";
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПодбор.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = "Покупатель";
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		Элементы.СуммаПлатежа.Видимость = Истина;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаРасчетов.Видимость = НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		
		Элементы.СуммаРазнесеноВручную.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		Элементы.СуммаРасчетовРазнесеноВручную.Видимость = НЕ Элементы.СуммаРазнесеноВручную.Видимость;
		
		Элементы.СуммаНДС.Видимость = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		// Зачет долгов
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
		Элементы.РасчетыСКонтрагентом.Заголовок = "Зачет долгов";
		
		// Подвал
		Элементы.Подвал.Видимость = Ложь;
		Элементы.СтраницыРасчетовСКонтрагентомПодвал.Видимость = Истина;
		Элементы.СуммаРазнесеноВручную.Заголовок = "Итого разнесено";
		// Конец Зачет долгов
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Подотчетнику") Тогда
		
		Элементы.РасчетыСПодотчетником.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		Элементы.Подотчетник.Заголовок = "Подотчетник";
		Элементы.СуммаДокумента.Ширина = 13;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		//Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда
		
		Элементы.ВыплатаЗаработнойПлатыСотруднику.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		Элементы.Подотчетник.Заголовок = "Сотрудник";
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
		
		Элементы.ВыплатыЗаработнойПлаты.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = Ложь;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Налоги") Тогда
		
		Элементы.РасчетыПоНалогам.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ") Тогда
		
		Элементы.ПеремещениеВКассуККМ.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
	// Прочие расчеты
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Прочее") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НаРасходы") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
		Элементы.РасчетыПрочиеКорреспонденция.Заголовок = "Статья расходов";
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = Ложь;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = "Контрагент";
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Истина;
		Элементы.ПрочиеРасчетыДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Истина;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Идентификатор = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Тогда
		
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.РасчетыПоКредитам.Заголовок = "Расчеты по займам";
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Ложь;
		
		//Элементы.ОснованиеЗаполнить.Видимость = Ложь;
		
		Элементы.ДоговорЗаймаСотруднику.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
		
		Элементы.ГруппаИнформацияПоДоговору.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = "Банк";
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Истина;
		
		//Элементы.ОснованиеЗаполнить.Видимость = Ложь;
		
		Элементы.ДоговорКредита.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
		
		Элементы.ГруппаИнформацияПоДоговору.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаРасчетов.Видимость = Истина;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	// Конец Прочие расчеты
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Прочее") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк") Тогда
		
		Элементы.СчетОрганизации.Видимость = Истина;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Ложь;
	Иначе
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Сумма платежа'"));
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимостьДокументыПланирования();
	
	// Зачет долгов
	НастроитьЭлементыРаспределенияДолговНаСервере(ПриСозданииНаСервере);
	// Конец Зачет долгов
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
КонецПроцедуры // УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации()

&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
		
		СтрокаТабличнойЧасти.СтатьяДДС = СтруктураДанные.СтатьяДДСПоУмолчанию;
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаПлатежа,
		Курс,
		СтрокаТабличнойЧасти.Курс,
		Кратность,
		СтрокаТабличнойЧасти.Кратность
	);
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

&НаСервере
Процедура ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтруктураДанные = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
				Объект.Дата,
				СтрокаТабличнойЧасти.Договор
			);
			СтрокаТабличнойЧасти.Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс
			);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
			);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
	КонецЦикла;
		
	Если Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		ЗаполнитьСуммовыеПоказателиТаблицыДолговПоРасшифровкеПлатежа();
	ИначеЕсли Объект.ВидОперации = ВидОперацииПоставщику Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

&НаКлиенте
Процедура ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы(КнопкаРезультат, ДополнительныеПараметры) Экспорт

	Если КнопкаРезультат = КодВозвратаДиалога.Да Тогда
		ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере();
	КонецЕсли;

КонецПроцедуры // ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммыЗавершение()

&НаКлиенте
Процедура ОбработатьНачалоВыбораДоговораКонтрагента(Элемент, СтандартнаяОбработка, Знач ТекущийДоговор = Неопределено)
	
	Если ТекущийДоговор = Неопределено Тогда
		Если Элементы.РасшифровкаПлатежа.ТекущиеДанные = Неопределено Тогда
			Возврат;
		Иначе
			ТекущийДоговор = Элементы.РасшифровкаПлатежа.ТекущиеДанные.Договор;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, ТекущийДоговор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

&НаКлиенте
Процедура ОбработатьВыборДокументаРасчетов(ДанныеДокумента)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти.Документ = ДанныеДокумента.Документ;
		СтрокаТабличнойЧасти.Заказ = ДанныеДокумента.Заказ;
		СтрокаТабличнойЧасти.СчетНаОплату = ДанныеДокумента.СчетНаОплату;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтрокаТабличнойЧасти.Договор = ДанныеДокумента.Договор;
			ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ВыполнитьДействияПриИзмененииДокументаРасчетов();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборДокументаРасчетов()

&НаКлиенте
Процедура ВыполнитьДействияПриИзмененииДокументаРасчетов()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			
		Иначе
			
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействияПриИзмененииДокументаРасчетов()

&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа(ТекущийОбъект = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьРасшифровкуПлатежа();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежа()

&НаСервере
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата()
	
	СписокВидовОпераций = ДвиженияДенежныхСредствВызовСервера.ПолучитьСписокВидовОперацийРасходДСКасса();
	Элементы.ВидОперации.СписокВыбора.ЗагрузитьЗначения(СписокВидовОпераций.ВыгрузитьЗначения());
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата()

&НаСервереБезКонтекста
Функция ПолучитьВалютуПоУмолчаниюКассыНаСервере(Касса)
	
	Возврат Касса.ВалютаПоУмолчанию;
	
КонецФункции // ПолучитьВалютуПоУмолчаниюКассыНаСервере()

&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(Знач ТЧРасшифровкаПлатежа, ТекстСообщения, Документ, Организация, Контрагент, ВидОперации, Отказ, ДоговорКредитаЗайма)
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
		ИЛИ Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	// Прочие расчеты
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		
		СписокВидовДоговора = Новый СписокЗначений;
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный);
		
		Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, ДоговорКредитаЗайма, Организация, Контрагент, СписокВидовДоговора)
			И Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Получить() Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
	// Конец Прочие расчеты
	
		СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
		
		Для каждого СтрокаТабличнойЧасти Из ТЧРасшифровкаПлатежа Цикл
			
			Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, СтрокаТабличнойЧасти.Договор, Организация, Контрагент, СписокВидовДоговора)
				И Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Получить() Тогда
				
				Отказ = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументУтвержден(ДокументОснование)
	
	Возврат ДокументОснование.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.Утвержден;
	
КонецФункции // ДокументУтвержден()

&НаСервереБезКонтекста
Функция СтатьяУчитываетсяВНУ(Статья, Организация, Дата)
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Организация, Дата);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "УчитыватьВНУ") И СистемаНалогообложенияСтруктура.ПлательщикУСН;
КонецФункции


&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	ОстатокВзаиморасчетов = 0;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
	Элементы.Контрагент.МаксимальнаяШирина = 22;
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент, ОстатокВзаиморасчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиДС(Касса = Неопределено)
	
	Если Касса = Неопределено Тогда
		ТекущаяКасса = Объект.Касса;
	Иначе
		ТекущаяКасса = Касса;
	КонецЕсли;
	
	Элементы.ОстатокДенежныхСредств.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ТекущаяКасса);
	ОстатокДенежныхСредств = 0;

	Если НЕ Элементы.ОстатокДенежныхСредств.Видимость Тогда
		//Только для новых объектов
		Элементы.Касса.АвтоМаксимальнаяШирина = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.Касса.АвтоМаксимальнаяШирина = Ложь;
	Элементы.Касса.МаксимальнаяШирина = 22;
	Элементы.ОстатокДенежныхСредств.Заголовок = ДвиженияДенежныхСредствВызовСервера.ЗаголовокНадписиОстатковДС(ТекущаяКасса, Объект.Организация, ОстатокДенежныхСредств);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДолги(ПересчитыватьСлужебныеДанные)
	
	// Не будем в табличную часть помещать документы, дата которых больше даты текущего документа.
	Если Объект.Контрагент.Пустая() Тогда
		ТаблицаДолгов.Очистить();
		ОпределитьТекущуюСтраницуПомощника();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ РасчетыСПоставщикамиОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПоставщикамиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДокументаРасчетыСПоставщиками.Контрагент,
	|	ДвиженияДокументаРасчетыСПоставщиками.Организация,
	|	ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|	ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|	ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|	ВЫБОР
	|		КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|ГДЕ
	|	ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|	И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|	И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|	И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
	|	РасчетыСПоставщикамиОстатки.Организация КАК Организация,
	|	РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК ДолгВалДоговора,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|	КурсыВалютРасчетов.Курс КАК Курс,
	|	КурсыВалютРасчетов.Кратность КАК Кратность,
	|	0 КАК Вниз,
	|	""+"" КАК Добавить
	|ПОМЕСТИТЬ ВременнаяТаблицаДолгов
	|ИЗ
	|	РасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), ) КАК КурсыВалютРасчетов
	|		ПО РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Контрагент,
	|	РасчетыСПоставщикамиОстатки.Организация,
	|	РасчетыСПоставщикамиОстатки.Договор,
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.Документ.Дата,
	|	КурсыВалютРасчетов.Курс,
	|	КурсыВалютРасчетов.Кратность
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПоставщика.Ссылка) КАК КоличествоСчетов,
	|	СчетНаОплатуПоставщика.ДокументОснование КАК ЗаказПоставщику
	|ПОМЕСТИТЬ ВременнаяТаблицаКолвоСчетовПоЗаказу
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
	|		ПО СчетНаОплатуПоставщика.ДокументОснование = РасчетыСПоставщикамиОстатки.Заказ
	|			И (СчетНаОплатуПоставщика.ДокументОснование <> НЕОПРЕДЕЛЕНО)
	|			И (НЕ СчетНаОплатуПоставщика.ДокументОснование ЕСТЬ NULL )
	|			И (СчетНаОплатуПоставщика.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|ГДЕ
	|	СчетНаОплатуПоставщика.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуПоставщика.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщика.Ссылка КАК СчетНаОПлату,
	|	СчетНаОплатуПоставщика.ДокументОснование КАК Заказ
	|ПОМЕСТИТЬ ВременнаяТаблицаСчетаНаОплату
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаКолвоСчетовПоЗаказу КАК ВременнаяТаблицаКолвоСчетовПоЗаказу
	|		ПО СчетНаОплатуПоставщика.ДокументОснование = ВременнаяТаблицаКолвоСчетовПоЗаказу.ЗаказПоставщику
	|			И (ВременнаяТаблицаКолвоСчетовПоЗаказу.КоличествоСчетов = 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДолгов.Организация,
	|	ВременнаяТаблицаДолгов.Договор КАК Договор,
	|	ВременнаяТаблицаДолгов.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаДолгов.Заказ ЕСТЬ NULL 
	|				ИЛИ ВременнаяТаблицаДолгов.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИЛИ ВременнаяТаблицаДолгов.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВременнаяТаблицаДолгов.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ВременнаяТаблицаДолгов.Заказ.Дата КАК ДатаЗаказа,
	|	ВременнаяТаблицаДолгов.ДолгВалДоговора,
	|	ВременнаяТаблицаДолгов.ДокументДата КАК ДатаДокумента,
	|	ВременнаяТаблицаДолгов.Курс,
	|	ВременнаяТаблицаДолгов.Кратность,
	|	ВременнаяТаблицаДолгов.Вниз,
	|	ВременнаяТаблицаДолгов.Добавить,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблицаДолгов.Документ) = ТИП(Документ.ОтчетПереработчика)
	|			ТОГДА ВременнаяТаблицаДолгов.Документ.Сумма
	|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблицаДолгов.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ВременнаяТаблицаДолгов.Документ.СуммаУчета
	|		ИНАЧЕ ВременнаяТаблицаДолгов.Документ.СуммаДокумента
	|	КОНЕЦ КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблицаДолгов.Документ) = ТИП(Документ.РасходИзКассы)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВременнаяТаблицаДолгов.Документ) = ТИП(Документ.РасходСоСчета)
	|			ТОГДА ВременнаяТаблицаДолгов.Документ.ВалютаДенежныхСредств.СимвольноеПредставление
	|		КОГДА ТИПЗНАЧЕНИЯ(ВременнаяТаблицаДолгов.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ВалютаУчета.Значение.СимвольноеПредставление
	|		ИНАЧЕ ВременнаяТаблицаДолгов.Документ.ВалютаДокумента.СимвольноеПредставление
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВременнаяТаблицаДолгов.ДолгВалДоговора * ВременнаяТаблицаДолгов.Курс * КурсыВалютСрезПоследних.Кратность / (ВременнаяТаблицаДолгов.Кратность * КурсыВалютСрезПоследних.Курс) КАК ДолгВалПлатежа,
	|	&СтавкаНДС,
	|	ВременнаяТаблицаДолгов.Заказ.СуммаДокумента КАК СуммаЗаказа,
	|	ВременнаяТаблицаДолгов.Заказ.ВалютаДокумента.СимвольноеПредставление КАК ВалютаЗаказа,
	|	-1 КАК ИдентификаторСтрокиРасшифровкиПлатежа,
	|	ВременнаяТаблицаДолгов.Договор.ВалютаРасчетов.СимвольноеПредставление КАК ВалютаДоговора,
	|	ВременнаяТаблицаДолгов.Договор.ВалютаРасчетов КАК ВалютаДоговораСсылка,
	|	ВременнаяТаблицаДолгов.Курс КАК КурсИсходный,
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОПлату,
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОПлату.ВалютаДокумента.СимвольноеПредставление КАК ВалютаСчета,
	|	ВременнаяТаблицаСчетаНаОплату.СчетНаОПлату.СуммаДокумента КАК СуммаСчета,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаДолгов.Контрагент.ВестиРасчетыПоДокументам
	|				И КОНЕЦПЕРИОДА(ВременнаяТаблицаДолгов.ДокументДата, ДЕНЬ) > КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаДокБольшеДатыДокумента,
	|	ВЫБОР
	|		КОГДА НЕ ВременнаяТаблицаДолгов.Контрагент.ВестиРасчетыПоДокументам
	|				И ВременнаяТаблицаДолгов.Контрагент.ВестиРасчетыПоЗаказам
	|				И КОНЕЦПЕРИОДА(ВременнаяТаблицаДолгов.Заказ.Дата, ДЕНЬ) > КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаЗаказаБольшеДатыДокумента
	|ИЗ
	|	ВременнаяТаблицаДолгов КАК ВременнаяТаблицаДолгов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаСчетаНаОплату КАК ВременнаяТаблицаСчетаНаОплату
	|		ПО ВременнаяТаблицаДолгов.Заказ = ВременнаяТаблицаСчетаНаОплату.Заказ,
	|	Константа.ВалютаУчета КАК ВалютаУчета,
	|	РегистрСведений.КурсыВалют.СрезПоследних(КОНЕЦПЕРИОДА(&Период, ДЕНЬ), Валюта = &Валюта) КАК КурсыВалютСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Заказ,
	|	Договор
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Период", ?(Объект.Дата = '00010101', ТекущаяДатаСеанса(), Объект.Дата));
	Запрос.УстановитьПараметр("Валюта", Объект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СтавкаНДС", СтавкаНДСПоУмолчанию);
	
	НуженОтборПоДоговорам = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
	Если Объект.Контрагент.ВестиРасчетыПоДоговорам
	   И НуженОтборПоДоговорам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ТекстДоговорОтбор", "И Договор.ВидДоговора В (&СписокВидовДоговоров)");
		Запрос.УстановитьПараметр("СписокВидовДоговоров", Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Объект.Ссылка, ВидОперации));
	КонецЕсли;
	
	ТЗДолгов = Запрос.Выполнить().Выгрузить();
	ТаблицаДолгов.Загрузить(ТЗДолгов);
	
	Для Каждого ТекущаяСтрока Из ТаблицаДолгов Цикл
		ДолгВалДоговораСтрока = ТекущаяСтрока.ДолгВалДоговора;
		ДолгВалДоговораСтрока = СтрЗаменить(ДолгВалДоговораСтрока, Символы.НПП, "");
		ТекущаяСтрока.ДолгВалДоговораСтрока = ДолгВалДоговораСтрока;
	КонецЦикла;
	
	Если ТаблицаДолгов.Количество() = 0 Тогда
		Элементы.ТаблицаДолгов.Подсказка = ""; //"Долги отсутствуют";
	Иначе
		Элементы.ТаблицаДолгов.Подсказка = "";
	КонецЕсли;
	
	Элементы.ГруппаФильтры.Видимость = ТаблицаДолгов.Количество() > 5;
	Если НЕ Элементы.ГруппаФильтры.Видимость Тогда
		Элементы.ТаблицаДолгов.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Если ПересчитыватьСлужебныеДанные Тогда
		РаспределитьРасшифровкуПоТаблицеДолгов();
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	КонецЕсли;
	
	ОпределитьТекущуюСтраницуПомощника();
	
КонецПроцедуры // ЗаполнитьДолги()

&НаКлиенте
Процедура ПересчитатьИтогиПриИзмененииАвансаНаКлиенте(ОбновитьВидимостьАвансовогоДоговора = Ложь)
	
	СуммаПлатежаАванс = Объект.РасшифровкаПлатежа.Итог("Аванс");
	СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СуммаЗачтено = СуммаПлатежаДляУсловногоОформления - СуммаПлатежаАванс;
	СуммаРазнесено = ТаблицаДолгов.Итог("ЗачестьВыбрано") + СуммаПлатежаАванс;
	
	Если ОбновитьВидимостьАвансовогоДоговора Тогда
		НастроитьДоступностьСуммыИДоговораАванса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиПриИзмененииАвансаНаСервере(ОбновитьСтрокуАванса = Ложь)
	
	Если ОбновитьСтрокуАванса Тогда
		ОбновитьСуммаВСтрокеАванса();
	КонецЕсли;
	
	СуммаПлатежаАванс = Объект.РасшифровкаПлатежа.Итог("Аванс");
	СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СуммаЗачтено = СуммаПлатежаДляУсловногоОформления - СуммаПлатежаАванс;
	СуммаРазнесено = ТаблицаДолгов.Итог("ЗачестьВыбрано") + СуммаПлатежаАванс;
	
	РассчитатьСуммуНДСПоУмолчаниюНаСервере();
	
	НастроитьДоступностьСуммыИДоговораАванса();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуНДСПоУмолчаниюНаСервере()
	
	ИтогоРазнесено = Объект.ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
	//СуммаНДСПоУмолчанию = Объект.СуммаДокумента - (Объект.СуммаДокумента) / ((СтавкаНДСПоУмолчаниюЧисло + 100) / 100);
	СуммаНДСПоУмолчанию = ИтогоРазнесено - (ИтогоРазнесено) / ((СтавкаНДСПоУмолчаниюЧисло + 100) / 100);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДСПоУмолчаниюНаКлиенте()
	
	ИтогоРазнесено = Объект.ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
	СуммаНДСПоУмолчанию = ИтогоРазнесено - (ИтогоРазнесено) / ((СтавкаНДСПоУмолчаниюЧисло + 100) / 100);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьСуммыИДоговораАванса()
	
	ДоступностьПредыдущееЗначение = Элементы.ГруппаСПомощникомИтогиАванс.Доступность;
	Элементы.ГруппаСПомощникомИтогиАванс.Доступность = Не (СуммаПлатежаАванс = 0);
	// Возможно, что фокус ушел из таблицы долгов.
	Если ДоступностьПредыдущееЗначение <> Элементы.ГруппаСПомощникомИтогиАванс.Доступность Тогда
		ТекущийЭлемент = Элементы.ТаблицаДолгов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетаНаОплатуПриИзменении(СчетНаОплату)

	СтруктураВозврат = Новый Структура("Сумма, Валюта", 0, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПоставщика.СуммаДокумента,
		|	СчетНаОплатуПоставщика.ВалютаДокумента
		|ИЗ
		|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
		|ГДЕ
		|	СчетНаОплатуПоставщика.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СчетНаОплату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтруктураВозврат.Вставить("Сумма", ВыборкаДетальныеЗаписи.СуммаДокумента);
		СтруктураВозврат.Вставить("Валюта", УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВыборкаДетальныеЗаписи.ВалютаДокумента));
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции // ПолучитьДанныеСчетаНаОплатуПриИзменении()

&НаСервере
Процедура ЗаполнитьСуммовыеПоказателиТаблицыДолговПоРасшифровкеПлатежа()

	Для Каждого ТекущаяСтрокаДолгов Из ТаблицаДолгов Цикл
		ТекущаяСтрокаРасшифровки = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущаяСтрокаДолгов.ИдентификаторСтрокиРасшифровкиПлатежа);
		Если ТекущаяСтрокаРасшифровки <> Неопределено Тогда
			ТекущаяСтрокаДолгов.СуммаРасчетов = ТекущаяСтрокаРасшифровки.СуммаРасчетов;
			ТекущаяСтрокаДолгов.Курс = ТекущаяСтрокаРасшифровки.Курс;
			ТекущаяСтрокаДолгов.Кратность = ТекущаяСтрокаРасшифровки.Кратность;
			ТекущаяСтрокаДолгов.Зачесть = ТекущаяСтрокаРасшифровки.СуммаПлатежа;
			ТекущаяСтрокаДолгов.ЗачестьВыбрано = ?(ТекущаяСтрокаДолгов.Выбран, ТекущаяСтрокаДолгов.Зачесть, 0);
		КонецЕсли;
	КонецЦикла;

	СуммаЗачтено = ТаблицаДолгов.Итог("ЗачестьВыбрано");
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	
	Если Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		ОбновитьДолгиВПомощникеЗачетаДолгов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	НапечататьЧекДоступность = Ложь;
	
	Кнопка = Элементы.Найти("НапечататьЧек");
	Если Кнопка <> Неопределено Тогда
		
		Если (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее)
		   И ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование")
		   И НЕ ТолькоПросмотр Тогда
			НапечататьЧекДоступность = Истина;
		КонецЕсли;
		
		Кнопка.Доступность = НапечататьЧекДоступность;
		Элементы.НомерЧекаККМ.Видимость = НапечататьЧекДоступность;
		Элементы.ГруппаОтправкаЧека.Видимость = НапечататьЧекДоступность;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УставитьТекущуюСтраницу()
	
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КоличествоСтрок = 1;
	КонецЕсли;
	
КонецПроцедуры // УставитьТекущуюСтраницу()

&НаКлиенте
Процедура ОчиститьРеквизитыНеОтносящиесяКОперации()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Подотчетнику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользовательСистемы, "ОсновноеПодразделение");
			Объект.Подразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, СтруктурнаяЕдиницаПодразделение);
		КонецЕсли;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Прочее") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НаРасходы") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Налоги") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	// Прочие расчеты
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	// Конец Прочие расчеты
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	КонецЕсли;
	
	Корреспонденция = Объект.Корреспонденция;
	
КонецПроцедуры // ОчиститьРеквизитыНеОтносящиесяКОперации()

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоступныеТипы()
	
	// Прочие расчеты
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
		УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлементаСчетаКорреспонденции();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НаРасходы") Тогда
		УстановитьПараметрыВыбораНаРасходыНаСервереДляЭлементаСчетаКорреспонденции();
	Иначе
		УстановитьПараметрыВыбораПоМетаданнымДляЭлементаСчетаКорреспонденции();
	КонецЕсли;
	// Конец Прочие расчеты
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", , );
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = "Оплачиваемый документ отгрузки товаров, работ и услуг контрагентом";

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", ,);
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = "Документ расчетов с контрагентом, по которому осуществляется возврат денежных средств";
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораДоступныеТипы()

&НаСервере
Процедура УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(ОчиститьАналитику = Ложь)
	
	Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	
	Если Объект.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
		Элементы.НаправлениеДеятельности.Видимость = Истина;
		Элементы.Подразделение.Видимость = Истина;
		Элементы.Заказ.Видимость = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользовательСистемы, "ОсновноеПодразделение");
			Объект.Подразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		КонецЕсли;
	Иначе
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Налоги // для ввода на основании
		   И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов
			И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
		   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику) Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
			Объект.Подразделение = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Элементы.НаправлениеДеятельности.Видимость = Ложь;
		Элементы.Подразделение.Видимость = Ложь;
		Элементы.Заказ.Видимость = Ложь;
		
	КонецЕсли;
	
	// Прочие расчеты
	Если (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы) Тогда
		
		АналитикаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Корреспонденция, "АналитикаДоходовИРасходов");
		
		Если ОчиститьАналитику И ЗначениеЗаполнено(АналитикаСчета) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(АналитикаСчета);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
			Объект.АналитикаПрочихДоходовИРасходов = Новый(АналитикаСчета);
		ИначеЕсли ЗначениеЗаполнено(АналитикаСчета) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(АналитикаСчета);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
		Иначе // Очистить и не заполнена аналитика.
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = "Аналитика расходов";
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "<Не настроена у этого счета>";
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Ложь;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		КонецЕсли;
		
	Иначе
		Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	КонецЕсли;
	// Конец Прочие расчеты
	
	УстановитьВидимостьДокументыПланирования();
	
КонецПроцедуры // УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции()

&НаСервере
Процедура УстановитьВидимостьКурсаВалюты(ВалютаДенежныхСредств)
	
	Элементы.Курс.Видимость = (ВалютаДенежныхСредств <> Константы.НациональнаяВалюта.Получить());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
	
	// Документ основание.
	НовыйМассив = Новый Массив();
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ПараметрыВыбораДокументаОснования = НовыеПараметры;
	// Конец Документ основание.
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ГруппаСтатья.Видимость = Истина;
	// Конец МобильноеПриложение
	Иначе
		Элементы.ГруппаСтатья.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура НастроитьЭлементДоговораЗайма()
	
	Элементы.ДоговорЗаймаСотруднику.Доступность = НЕ Объект.Подотчетник.Пустая();
	Если Элементы.ДоговорЗаймаСотруднику.Доступность Тогда
		Элементы.ДоговорЗаймаСотруднику.ПодсказкаВвода = "";
	Иначе
		Элементы.ДоговорЗаймаСотруднику.ПодсказкаВвода = НСтр("ru = 'Чтобы выбрать договор, выберите сотрудника'");
	КонецЕсли;
	
	Элементы.ДоговорКредита.Доступность = НЕ Объект.Контрагент.Пустая();
	Если Элементы.ДоговорКредита.Доступность Тогда
		Элементы.ДоговорКредита.ПодсказкаВвода = "";
	Иначе
		Элементы.ДоговорКредита.ПодсказкаВвода = НСтр("ru = 'Чтобы выбрать договор, выберите банк'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область ПрочиеРасчеты

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура ДоговорЗаймаСотрудникуПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораКредитаИлиЗайма()
	
	ДанныеДоговораЗаймаСотруднику = ДоговорКредитаЗаймаПриИзмененииНаСервере(Объект.ДоговорКредитаЗайма, Объект.Дата);
	Объект.ВалютаДенежныхСредств = ДанныеДоговораЗаймаСотруднику.ВалютаРасчетов;
	
	ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоговорКредитаЗаймаПриИзмененииНаСервере(ДоговорКредитаЗайма, Дата)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("ВалютаРасчетов", ДоговорКредитаЗайма.ВалютаРасчетов);
	СтруктураДанные.Вставить("Контрагент", ДоговорКредитаЗайма.Контрагент);
	СтруктураДанные.Вставить("Сотрудник", ДоговорКредитаЗайма.Сотрудник);
	СтруктураДанные.Вставить("ЭтоДоговорЗайма", ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
		
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСотрудникПриИзменении(Объект.Подотчетник, Объект.Дата, Объект.Организация);
	Объект.Выдать = СтруктураДанные.ПодотчетникНаименование;
	Объект.ПоДокументу =
		Строка(СтруктураДанные.ДокументВид)
	  + " серия "
	  + СтруктураДанные.ДокументСерия
	  + ", номер "
	  + СтруктураДанные.ДокументНомер
	  + ", выданный "
	  + Формат(СтруктураДанные.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")
	  + " "
	  + СтруктураДанные.ДокументКемВыдан;
	  
	Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗайма;
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудникПриИзменении(Сотрудник, Дата, Организация)
	
	СтруктураДанные = ПолучитьДанныеПодотчетникПриИзменении(Сотрудник, Дата);
	
	СтруктураДанные.Вставить("ДоговорКредитаЗайма", Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Сотрудник, Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПодотчетникПриИзменении()

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧасти

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПослеУдаления(Элемент)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		УставитьТекущуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсПриИзменении(Элемент)
		
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКратностьПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
	);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
		
		СтрокаТабличнойЧасти.СтатьяДДС = Неопределено; //Выводятся данные только одной строки, т.ч. статью будем брать из подвала.
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = Неопределено;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаПлатежа,
		Курс,
		СтрокаТабличнойЧасти.Курс,
		Кратность,
		СтрокаТабличнойЧасти.Кратность
	);
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Контрагент.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Сначала выберите контрагента'");
		Сообщение.Поле = "Объект.Контрагент";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКратностьПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаНаКлиенте(Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
	);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКоманд

&НаСервере
Процедура ЗаполнитьПоДоговоруЗаймаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход
		|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
		|			,
		|			,
		|			,
		|			ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма.ВалютаРасчетов,
		|	ВЫБОР
		|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА -РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
		|		ИНАЧЕ РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам
		|ГДЕ
		|	РасчетыПоКредитамИЗаймам.Регистратор = &Ссылка
		|	И РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|	И РасчетыПоКредитамИЗаймам.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалПриход) КАК ОсновнойДолгВалПриход,
		|	ДоговорКредитаЗайма.СуммаДокумента
		|ИЗ
		|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаЗайма
		|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорКредитаЗайма.ВалютаРасчетов
		|ГДЕ
		|	ДоговорКредитаЗайма.Ссылка = &ДоговорКредитаЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	ДоговорКредитаЗайма.СуммаДокумента";
	
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ВалютаДенежныхСредств = Выборка.ВалютаРасчетов;
		ТекстСообщения = "";
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалПриход Тогда
			ТекстСообщения = "По договору займа уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалПриход Тогда
			ТекстСообщения = "По договору займа уже выдана вся сумма "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		Иначе
			Объект.СуммаДокумента = Выборка.СуммаДокумента - Выборка.ОсновнойДолгВалПриход;
		КонецЕсли;
		
		Если ТекстСообщения <> "" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле = "ДоговорКредитаЗайма";
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		Объект.СуммаДокумента = Объект.ДоговорКредитаЗайма.СуммаДокумента;
		Объект.ВалютаДенежныхСредств = Объект.ДоговорКредитаЗайма.ВалютаРасчетов;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруЗайма(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Выберите договор");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДоговоруЗаймаНаСервере();
	СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредита(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Выберите договор");
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкиПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	ПараметрыОтбора = Новый Структура("
		|АдресРасшифровкиПлатежаВХранилище,
		|Организация,
		|Регистратор,
		|ИдентификаторФормыДокумента,
		|ВидОперации,
		|Дата,
		|Валюта,
		|ДоговорКредитаЗайма,
		|СуммаДокумента,
		|Контрагент,
		|СтавкаНДСПоУмолчанию,
		|СуммаПлатежа,
		|Курс,
		|Кратность,
		|Сотрудник",
		АдресРасшифровкиПлатежаВХранилище,
		Объект.Организация,
		Объект.Ссылка,
		УникальныйИдентификатор,
		Объект.ВидОперации,
		Объект.Дата,
		Объект.ВалютаДенежныхСредств,
		Объект.ДоговорКредитаЗайма,
		Объект.СуммаДокумента,
		Объект.Контрагент,
		СтавкаНДСПоУмолчанию,
		Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"),
		Курс,
		Кратность,
		Объект.Подотчетник);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЗаполненияРасшифровкиПлатежаПоКредитамИЗаймам", 
						ПараметрыОтбора,
						ЭтотОбъект,,,,Новый ОписаниеОповещения("ЗаполнитьПоДоговоруКредитаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредитаЗавершение(РезультатЗаполнения, ПараметрыЗавершения) Экспорт

	Если ТипЗнч(РезультатЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьСуммуДокумента = Ложь;
		Если РезультатЗаполнения.Свойство("ОчищатьТабличнуюЧастьПриЗаполнении") И РезультатЗаполнения.ОчищатьТабличнуюЧастьПриЗаполнении Тогда
			Объект.РасшифровкаПлатежа.Очистить();
			ЗаполнитьСуммуДокумента = Истина;
		КонецЕсли;
		Если РезультатЗаполнения.Свойство("АдресРасшифровкиПлатежаВХранилище") Тогда
			ПолучитьРасшифровкаПлатежаИзХранилища(РезультатЗаполнения.АдресРасшифровкиПлатежаВХранилище, Ложь);
			
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнитьСуммуДокумента Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.РасчетыПрочиеКорреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Дебиторы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Кредиторы);
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНаРасходыНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.РасчетыПрочиеКорреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Расходы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		ИначеЕсли Параметр.Имя = "ЗаголовокСчета" Тогда
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("ЗаголовокСчета", "Статья расходов"));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПоМетаданнымДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.РасчетыПрочиеКорреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	ПараметрыВыбораИзМетаданных = Объект.Ссылка.Метаданные().Реквизиты.Корреспонденция.ПараметрыВыбора;
	Для Каждого Параметр Из ПараметрыВыбораИзМетаданных Цикл
		ПараметрыВыбораЭлемента.Добавить(Параметр);
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоКредитуЗаймуНаСервере()
	
	НастроитьЭлементДоговораЗайма();
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		Элементы.НадписьИнформацияПоКредиту.Заголовок = "<Выберите договор кредита (займа)>";
		Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = "";
		
		Элементы.НадписьИнформацияПоКредиту.ЦветТекста = ЦветаСтиля.ЦветРамки;
		Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = ЦветаСтиля.ЦветРамки;
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Тогда
		ЗаполнитьИнформациюПоЗаймуНаСервере();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		ЗаполнитьИнформациюПоКредитуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоКредитуНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПоследних(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ОсновнойДолгВалОстаток) КАК ОсновнойДолгВалОстаток,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ПроцентыВалОстаток) КАК ПроцентыВалОстаток,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.КомиссияВалОстаток) КАК КомиссияВалОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Остатки(, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК РасчетыПоКредитамИЗаймамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПервых(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПервых";
	
	Запрос.УстановитьПараметр("ДатаСрезаПоследних", ?(Объект.Дата = '00010101', НачалоДня(ТекущаяДата()), НачалоДня(Объект.Дата)));
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	Если Объект.ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику Тогда
		Множитель = 1;
	Иначе
		Множитель = -1;
	КонецЕсли;
	
	ВыборкаГрафик = МРезультатов[0].Выбрать();
	ВыборкаГрафикБудущиеМесяцы = МРезультатов[2].Выбрать();
	
	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Если ВыборкаГрафикБудущиеМесяцы.Следующий() Тогда
		
		Если НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафикБудущиеМесяцы.Период) Тогда
			ДатаПлатежа = "" + Формат(ВыборкаГрафикБудущиеМесяцы.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ДатаПлатежа = "" + Формат(ВыборкаГрафикБудущиеМесяцы.Период, "ДФ=dd.MM.yyyy") + " (не в тек. месяце)";
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
			
		НадписьИнформацияПоКредиту = "Дата платежа: "+ДатаПлатежа+". Сумма долга: "+Формат(ВыборкаГрафикБудущиеМесяцы.СуммаОсновногоДолга, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(ВыборкаГрафикБудущиеМесяцы.СуммаПроцентов, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(ВыборкаГрафикБудущиеМесяцы.СуммаКомиссии, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаГрафикБудущиеМесяцы.ВалютаРасчетовПредставление +")";
		
	ИначеЕсли ВыборкаГрафик.Следующий() Тогда
		
		Если НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафик.Период) Тогда
			ДатаПлатежа = "" + Формат(ВыборкаГрафик.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ДатаПлатежа = "" + Формат(ВыборкаГрафик.Период, "ДФ=dd.MM.yyyy") + " (не в тек. месяце)";
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
			
		НадписьИнформацияПоКредиту = "Дата платежа: "+ДатаПлатежа+". Сумма долга: "+Формат(ВыборкаГрафик.СуммаОсновногоДолга, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(ВыборкаГрафик.СуммаПроцентов, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(ВыборкаГрафик.СуммаКомиссии, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаГрафик.ВалютаРасчетовПредставление +")";
		
	Иначе
		
		НадписьИнформацияПоКредиту = "Дата платежа: <не определена>";
		
	КонецЕсли;
	
	ВыборкаОстатки = МРезультатов[1].Выбрать();
	Если ВыборкаОстатки.Следующий() Тогда
		
		НадписьОстатокДолгаПоКредиту = "Остаток долга: "+Формат(Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(Множитель * ВыборкаОстатки.ПроцентыВалОстаток, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(Множитель * ВыборкаОстатки.КомиссияВалОстаток, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаОстатки.ВалютаРасчетовПредставление +")";
			
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток >= 0 И (Множитель * ВыборкаОстатки.ПроцентыВалОстаток < 0 ИЛИ 
			Множитель * ВыборкаОстатки.КомиссияВалОстаток < 0) Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток < 0 Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
	Иначе
		
		НадписьОстатокДолгаПоКредиту = "Остаток долга: <не определен> "
		
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоЗаймуНаСервере()

	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход
		|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
		|			,
		|			,
		|			,
		|			ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалПриход) КАК ОсновнойДолгВалПриход,
		|	ДоговорКредитаЗайма.СуммаДокумента
		|ИЗ
		|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаЗайма
		|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорКредитаЗайма.ВалютаРасчетов
		|ГДЕ
		|	ДоговорКредитаЗайма.Ссылка = &ДоговорКредитаЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	ДоговорКредитаЗайма.СуммаДокумента";
	
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Компания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НадписьИнформацияПоКредиту = "Сумма займа: "+Выборка.СуммаДокумента+" ("+Выборка.ВалютаРасчетов+")";
		
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалПриход Тогда
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалПриход)+" ("+Выборка.ВалютаРасчетов+")"+
				". Уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалПриход Тогда
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: 0 ("+Выборка.ВалютаРасчетов+")";
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалПриход)+" ("+Выборка.ВалютаРасчетов+")"+
				". Уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		КонецЕсли;
	Иначе
		НадписьИнформацияПоКредиту = "Сумма займа: "+Объект.ДоговорКредитаЗайма.СуммаДокумента+" ("+Объект.ДоговорКредитаЗайма.ВалютаРасчетов+")";
		НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+Объект.ДоговорКредитаЗайма.СуммаДокумента+" ("+Объект.ДоговорКредитаЗайма.ВалютаРасчетов+")";
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорКредитаЗаймаПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерДокумента = Документы.ДоговорКредитаИЗайма;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(?(ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам, 
		Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный,
		Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику));
	
	ДоговорКредитаЗаймаПоУмолчанию = МенеджерДокумента.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорКредитаЗаймаПоУмолчанию;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Разобрать

&НаСервере
Процедура ПриИзмененииВТаблицеДолгов(ИмяКолонки, ТекущаяСтрокаДолговИдентификатор, УстанавливатьЗачитываемуюСумму = Истина)
	
	ТекущаяСтрокаДолгов = ТаблицаДолгов.НайтиПоИдентификатору(ТекущаяСтрокаДолговИдентификатор);
	
	ТекущаяСтрокаРасшифровки = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущаяСтрокаДолгов.ИдентификаторСтрокиРасшифровкиПлатежа);
	Если ТекущаяСтрокаРасшифровки = Неопределено Тогда
		ТекущаяСтрокаРасшифровки = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаРасшифровки, ТекущаяСтрокаДолгов);
	КонецЕсли;
	
	Если УстанавливатьЗачитываемуюСумму Тогда
		Если СуммаПлатежаАванс = 0 И ИсходнаяСуммаРавнаНулю Тогда
			ТекущаяСтрокаДолгов.Зачесть = ТекущаяСтрокаДолгов.ДолгВалПлатежа;
		Иначе
			ТекущаяСтрокаДолгов.Зачесть = Мин(СуммаПлатежаАванс, ТекущаяСтрокаДолгов.ДолгВалПлатежа);
		КонецЕсли;
	КонецЕсли;
	
	// Алгоритмы работы с суммами и курсом должны быть одинаковы в обоих режимах: "С помощником" и "Вручную".
	Если ИмяКолонки = "Зачесть" Или ИмяКолонки = "Выбран" Тогда
		
		ПересчитатьСуммуРасчетовВСпискеДолгов(ТекущаяСтрокаРасшифровки,
			ТекущаяСтрокаДолгов,
			ИмяКолонки, 
			ТекущаяСтрокаДолгов.ДолгВалДоговора, 
			ТекущаяСтрокаДолгов.ДолгВалПлатежа
		);
		
		ТекущаяСтрокаДолгов.ДолгВалПлатежа = РассчитатьСуммуДолгаВВалютеПлатежа(
			ТекущаяСтрокаДолгов.ДолгВалДоговора,
			ТекущаяСтрокаДолгов.Курс,
			ТекущаяСтрокаДолгов.Кратность,
			ТекущаяСтрокаДолгов.Договор
		);
		
	ИначеЕсли ИмяКолонки = "СуммаРасчетов" Тогда
		
		ПересчитатьСуммуПлатежаВСпискеДолгов(ТекущаяСтрокаРасшифровки, ТекущаяСтрокаДолгов, ИмяКолонки);
		
		ТекущаяСтрокаДолгов.ДолгВалПлатежа = РассчитатьСуммуДолгаВВалютеПлатежа(
			ТекущаяСтрокаДолгов.ДолгВалДоговора,
			ТекущаяСтрокаДолгов.Курс,
			ТекущаяСтрокаДолгов.Кратность,
			ТекущаяСтрокаДолгов.Договор
		);
		
	ИначеЕсли ИмяКолонки = "СтавкаНДС" Тогда
		
		ТекущаяСтрокаРасшифровки.СтавкаНДС = ТекущаяСтрокаДолгов.СтавкаНДС;
		РассчитатьСуммуНДСНаСервере(ТекущаяСтрокаРасшифровки);
		
	ИначеЕсли ИмяКолонки = "Курс" ИЛИ ИмяКолонки = "Кратность" Тогда
		
		Если ТекущаяСтрокаДолгов.СуммаРасчетов <> 0 ИЛИ ТекущаяСтрокаДолгов.Зачесть <> 0 Тогда
			ТекущаяСтрокаРасшифровки.Курс = ТекущаяСтрокаДолгов.Курс;
			ТекущаяСтрокаРасшифровки.Кратность = ТекущаяСтрокаДолгов.Кратность;
			
			РассчитатьСуммуПлатежаНаСервере(ТекущаяСтрокаРасшифровки, ИмяКолонки);
			ТекущаяСтрокаДолгов.Зачесть = ТекущаяСтрокаРасшифровки.СуммаПлатежа;
			
			// На случай, если пользователь обнулил курс или кратность.
			ТекущаяСтрокаДолгов.Курс = ТекущаяСтрокаРасшифровки.Курс;
			ТекущаяСтрокаДолгов.Кратность = ТекущаяСтрокаРасшифровки.Кратность;
			
			ТекущаяСтрокаДолгов.ДолгВалПлатежа = РассчитатьСуммуДолгаВВалютеПлатежа(
				ТекущаяСтрокаДолгов.ДолгВалДоговора,
				ТекущаяСтрокаДолгов.Курс,
				ТекущаяСтрокаДолгов.Кратность,
				ТекущаяСтрокаДолгов.Договор
			);
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "СчетНаОплату" Тогда
		
		ТекущаяСтрокаРасшифровки.СчетНаОплату = ТекущаяСтрокаДолгов.СчетНаОплату;
		СтуркутраДанных = ПолучитьДанныеСчетаНаОплатуПриИзменении(ТекущаяСтрокаДолгов.СчетНаОплату);
		ТекущаяСтрокаДолгов.СуммаСчета = СтуркутраДанных.Сумма;
		ТекущаяСтрокаДолгов.ВалютаСчета = СтуркутраДанных.Валюта;
		
	КонецЕсли;
	
	ТекущаяСтрокаДолгов.ИдентификаторСтрокиРасшифровкиПлатежа = ТекущаяСтрокаРасшифровки.ПолучитьИдентификатор();
	ТекущаяСтрокаДолгов.ЗачестьВыбрано = ?(ТекущаяСтрокаДолгов.Выбран, ТекущаяСтрокаДолгов.Зачесть, 0);
	Если ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = ТаблицаДолгов.Итог("ЗачестьВыбрано");
	КонецЕсли;
	ПересчитатьИтогиПриИзмененииАвансаНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммаВСтрокеАванса()
	
	СтрокаАванса = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокиАванса);
	ТекущаяСуммаАванса = Объект.СуммаДокумента - ТаблицаДолгов.Итог("ЗачестьВыбрано");
	Если СтрокаАванса = Неопределено И ТекущаяСуммаАванса > 0 Тогда
		СтрокаАванса = ДобавитьСтрокуАвансаНаСервере();
	КонецЕсли;
	Если СтрокаАванса <> Неопределено Тогда
		СтрокаАванса.СуммаПлатежа = ТекущаяСуммаАванса;
		СтрокаАванса.Аванс = СтрокаАванса.СуммаПлатежа;
		
		РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(СтрокаАванса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДоговоровЗачетаДолгов(ПриСозданииНаСервере = Ложь)
	
	Если ПриСозданииНаСервере Тогда
		Для Каждого ТекущаяСтрокаДоговора Из Объект.ДоговорыАвтоЗачетаДолгов Цикл
			ДобавитьДоговорЗачетаДолговНажатиеНаСервере(ТекущаяСтрокаДоговора);
		КонецЦикла;
	Иначе
		ТЗДоговоров = Объект.РасшифровкаПлатежа.Выгрузить(, "Договор");
		ТЗДоговоров.Свернуть("Договор");
		
		МассивЭлементовДляУдаления = Новый Массив;
		Для Каждого ЭлементДобавленногоДоговора Из Элементы.ГруппаДобавленныхДоговоровСлева.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(ЭлементДобавленногоДоговора);
		КонецЦикла;
		Для Каждого ЭлементДобавленногоДоговора Из Элементы.ГруппаДобавленныхДоговоровСправа.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(ЭлементДобавленногоДоговора);
		КонецЦикла;
		
		Для Каждого ЭлементДобавленногоДоговора Из МассивЭлементовДляУдаления Цикл
			Элементы.Удалить(ЭлементДобавленногоДоговора);
		КонецЦикла;
		Элементы.ГруппаДобавленныхДоговоровСправа.Видимость = Ложь;
		
		Если ТЗДоговоров.Количество() = 0 Тогда
			Объект.ДоговорыАвтоЗачетаДолгов.Очистить();
		Иначе
			Объект.ДоговорыАвтоЗачетаДолгов.Очистить();
			
			ЭтоПерваяСтрока = Истина;
			Для Каждого ДоговорЗачетаДолгов Из ТЗДоговоров Цикл
				Если ДоговорЗачетаДолгов.Договор.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Объект.ДоговорыАвтоЗачетаДолгов.Добавить();
				НоваяСтрока.Договор = ДоговорЗачетаДолгов.Договор;
				Если ЭтоПерваяСтрока Тогда
					ЭтоПерваяСтрока = Ложь;
					НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
				КонецЕсли;
				
				ДобавитьДоговорЗачетаДолговНажатиеНаСервере();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// На случай, когда в расшифровки платежа только строки с незаполненым договором.
	Если Объект.ДоговорыАвтоЗачетаДолгов.Количество() = 0 Тогда
		НоваяСтрока = Объект.ДоговорыАвтоЗачетаДолгов.Добавить();
		ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
		НоваяСтрока.Договор = ДоговорПоУмолчанию;
		НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
		
		ДобавитьДоговорЗачетаДолговНажатиеНаСервере();
	КонецЕсли;
	
	РассчитатьСуммуНДСПоУмолчаниюНаСервере();
	СформироватьЗаголовокГруппыЗачетаДолгов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыНовойСтрокиТаблицыДолгов(НоваяСтрока, ТекущаяСтрокаРасшифровки)
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаРасшифровки);
	НоваяСтрока.КурсИсходный = НоваяСтрока.Курс;
	НоваяСтрока.Зачесть = ТекущаяСтрокаРасшифровки.СуммаПлатежа;
	НоваяСтрока.ЗачестьВыбрано = ТекущаяСтрокаРасшифровки.СуммаПлатежа;
	НоваяСтрока.Выбран = Истина;
	НоваяСтрока.ИдентификаторСтрокиРасшифровкиПлатежа = ТекущаяСтрокаРасшифровки.ПолучитьИдентификатор();
	Если ЗначениеЗаполнено(ТекущаяСтрокаРасшифровки.Документ) Тогда
		НоваяСтрока.ДатаДокумента = ТекущаяСтрокаРасшифровки.Документ.Дата;
		Попытка
			Если ТипЗнч(ТекущаяСтрокаРасшифровки.Документ) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
				НоваяСтрока.СуммаДокумента = ТекущаяСтрокаРасшифровки.Документ.Сумма;
			ИначеЕсли ТипЗнч(ТекущаяСтрокаРасшифровки.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
				НоваяСтрока.СуммаДокумента = ТекущаяСтрокаРасшифровки.Документ.СуммаУчета;
			Иначе
				НоваяСтрока.СуммаДокумента = ТекущаяСтрокаРасшифровки.Документ.СуммаДокумента;
			КонецЕсли;
			Если ТипЗнч(ТекущаяСтрокаРасшифровки.Документ) = Тип("ДокументСсылка.РасходИзКассы") ИЛИ
				ТипЗнч(ТекущаяСтрокаРасшифровки.Документ) = Тип("ДокументСсылка.РасходСоСчета") Тогда
				НоваяСтрока.ВалютаДокумента = ТекущаяСтрокаРасшифровки.Документ.ВалютаДенежныхСредств.СимвольноеПредставление;
			ИначеЕсли ТипЗнч(ТекущаяСтрокаРасшифровки.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
				НоваяСтрока.ВалютаДокумента = Константы.ВалютаУчета.Получить().СимвольноеПредставление;
			Иначе
				НоваяСтрока.ВалютаДокумента = ТекущаяСтрокаРасшифровки.Документ.ВалютаДокумента.СимвольноеПредставление;
			КонецЕсли;
		Исключение
			// Пользователю об этом сообщать не будем.
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрокаРасшифровки.Заказ) Тогда
		НоваяСтрока.ДатаЗаказа = ТекущаяСтрокаРасшифровки.Заказ.Дата;
		НоваяСтрока.ВалютаЗаказа = ТекущаяСтрокаРасшифровки.Заказ.ВалютаДокумента;
		НоваяСтрока.СуммаЗаказа = ТекущаяСтрокаРасшифровки.Заказ.СуммаДокумента;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрокаРасшифровки.Договор) Тогда
		НоваяСтрока.ВалютаДоговора = ТекущаяСтрокаРасшифровки.Договор.ВалютаРасчетов.СимвольноеПредставление;
		НоваяСтрока.ВалютаДоговораСсылка = ТекущаяСтрокаРасшифровки.Договор.ВалютаРасчетов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрокаРасшифровки.СчетНаОплату) Тогда
		НоваяСтрока.СуммаСчета = ТекущаяСтрокаРасшифровки.СчетНаОплату.СуммаДокумента;
		НоваяСтрока.ВалютаСчета = ТекущаяСтрокаРасшифровки.СчетНаОплату.ВалютаДокумента;
	КонецЕсли;
	НоваяСтрока.ДатаДокБольшеДатыДокумента = (Объект.Контрагент.ВестиРасчетыПоДокументам И КонецДня(НоваяСтрока.ДатаДокумента) > КонецДня(НоваяСтрока.ДатаЗаказа));
	НоваяСтрока.ДатаЗаказаБольшеДатыДокумента = НЕ Объект.Контрагент.ВестиРасчетыПоДокументам И Объект.Контрагент.ВестиРасчетыПоЗаказам И
		КонецДня(НоваяСтрока.ДатаДокумента) > КонецДня(НоваяСтрока.ДатаЗаказа);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьРасшифровкуПоТаблицеДолгов()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 ИЛИ
		Объект.Контрагент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем расшифровку платежа.
	ЕстьСтрокаАванса = Ложь;
	ИдентификаторСтрокиАванса = "";
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого ТекущаяСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если ТекущаяСтрокаРасшифровки.ПризнакАванса Тогда
			Если Не ЕстьСтрокаАванса Тогда
				
				ЕстьСтрокаАванса = Истина;
				Объект.ДоговорДляЗачетаАвансаСПомощником = ТекущаяСтрокаРасшифровки.Договор;
				ИдентификаторСтрокиАванса = ТекущаяСтрокаРасшифровки.ПолучитьИдентификатор();
				
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Строки, в которых не выбраны данные для идентификации строк в помощнике переходят в аванс.
		Если ТекущаяСтрокаРасшифровки.Договор.Пустая() ИЛИ
			(Объект.Контрагент.ВестиРасчетыПоДокументам И НЕ ЗначениеЗаполнено(ТекущаяСтрокаРасшифровки.Документ)) ИЛИ
			(ТекущаяСтрокаРасшифровки.СуммаРасчетов = 0 И ТекущаяСтрокаРасшифровки.СуммаПлатежа = 0) Тогда
			МассивУдаляемыхСтрок.Добавить(ТекущаяСтрокаРасшифровки);
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Договор", ТекущаяСтрокаРасшифровки.Договор);
		Если Объект.Контрагент.ВестиРасчетыПоДокументам Тогда
			ПараметрыОтбора.Вставить("Документ", ТекущаяСтрокаРасшифровки.Документ);
		КонецЕсли;
		Если Объект.Контрагент.ВестиРасчетыПоЗаказам Тогда
			ПараметрыОтбора.Вставить("Заказ", ?(ЗначениеЗаполнено(ТекущаяСтрокаРасшифровки.Заказ), ТекущаяСтрокаРасшифровки.Заказ, Документы.ЗаказПоставщику.ПустаяСсылка()));
		КонецЕсли;
		
		МассивСтрок = ТаблицаДолгов.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			ТекущаяСтрокаДолгов = МассивСтрок[0];
			
			ТекущаяСтрокаДолгов.Зачесть = ТекущаяСтрокаРасшифровки.СуммаПлатежа;
			ТекущаяСтрокаДолгов.Выбран = (ТекущаяСтрокаРасшифровки.СуммаПлатежа > 0);
			ТекущаяСтрокаДолгов.ЗачестьВыбрано = ?(ТекущаяСтрокаДолгов.Выбран, ТекущаяСтрокаРасшифровки.СуммаПлатежа, 0);
			
			ЗаполнитьЗначенияСвойств(
				МассивСтрок[0],
				ТекущаяСтрокаРасшифровки,
				"СтавкаНДС, СуммаРасчетов, Курс, Кратность, СчетНаОплату");
				
			МассивСтрок[0].ИдентификаторСтрокиРасшифровкиПлатежа = ТекущаяСтрокаРасшифровки.ПолучитьИдентификатор();
			
			// Курс в расшифровке может отличаться от курса валюты на дату документа.
			// Нужно обновить информацию о сумме долга в валюте платежа.
			ТекущаяСтрокаДолгов.ДолгВалПлатежа = РассчитатьСуммуДолгаВВалютеПлатежа(
				ТекущаяСтрокаДолгов.ДолгВалДоговора,
				ТекущаяСтрокаДолгов.Курс,
				ТекущаяСтрокаДолгов.Кратность,
				ТекущаяСтрокаДолгов.Договор
			);
			
		Иначе
			НоваяСтрока = ТаблицаДолгов.Добавить();
			ЗаполнитьРеквизитыНовойСтрокиТаблицыДолгов(НоваяСтрока, ТекущаяСтрокаРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	// Сумму удаляемых строк перенесем в аванс.
	ДельтаСуммыАванса = 0;
	СчУдаляемыхСтрок = МассивУдаляемыхСтрок.Количество();
	Пока СчУдаляемыхСтрок > 0 Цикл
		УдаляемаяСтрока = МассивУдаляемыхСтрок[СчУдаляемыхСтрок - 1];
		ДельтаСуммыАванса = ДельтаСуммыАванса + УдаляемаяСтрока.СуммаПлатежа;
		Объект.РасшифровкаПлатежа.Удалить(Объект.РасшифровкаПлатежа.Индекс(УдаляемаяСтрока));
		СчУдаляемыхСтрок = СчУдаляемыхСтрок - 1;
	КонецЦикла;
	
	// Добавим строку аванса, если это нужно. В этом случае аванс = 0.
	Если НЕ ЕстьСтрокаАванса Тогда
		СтрокаАванса = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаАванса.ПризнакАванса = Истина;
		СтрокаАванса.СуммаПлатежа = ДельтаСуммыАванса;
		//СтрокаАванса.Аванс = ДельтаСуммыАванса;
		СтрокаАванса.Договор = Объект.ДоговорДляЗачетаАвансаСПомощником;
		РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(СтрокаАванса);
		
		ИдентификаторСтрокиАванса = СтрокаАванса.ПолучитьИдентификатор();
	ИначеЕсли ДельтаСуммыАванса > 0 Тогда
		СтрокаАванса = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокиАванса);
		СтрокаАванса.СуммаПлатежа = СтрокаАванса.СуммаПлатежа + ДельтаСуммыАванса;
		РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(СтрокаАванса);
	КонецЕсли;
	
	ТаблицаДолгов.Сортировать("ДатаДокумента, Документ, ДатаЗаказа, Заказ, Договор");
	
	// Найдём первую строку, где есть долг и сделаем ее текущей.
	Для Каждого ТекущаяСтрока Из ТаблицаДолгов Цикл
		Если ТекущаяСтрока.СуммаРасчетов > 0 ИЛИ ТекущаяСтрока.Зачесть > 0 Тогда
			Элементы.ТаблицаДолгов.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуАвансаНаСервере()
	
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ПризнакАванса = Истина;
	НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
	НоваяСтрока.Аванс = Объект.СуммаДокумента;
	НоваяСтрока.Договор = Объект.ДоговорДляЗачетаАвансаСПомощником;
	РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(НоваяСтрока);
	
	ИдентификаторСтрокиАванса = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуАвансаНаКлиенте()
	
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ПризнакАванса = Истина;
	НоваяСтрока.СуммаПлатежа = Объект.СуммаДокумента;
	НоваяСтрока.Аванс = Объект.СуммаДокумента;
	Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически Тогда
		Если Объект.ДоговорыАвтоЗачетаДолгов.Количество() > 0 Тогда
			НоваяСтрока.Договор = Объект.ДоговорыАвтоЗачетаДолгов[0].Договор;
		КонецЕсли;
	Иначе
		НоваяСтрока.Договор = Объект.ДоговорДляЗачетаАвансаСПомощником;
	КонецЕсли;
	РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(НоваяСтрока);
	
	ИдентификаторСтрокиАванса = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокуСАвансомИСтрокиСНулевымиЗначениями()
	
	Если СуммаПлатежаАванс = 0 И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		//Элементы.СтраницыИтоги.ТекущаяСтраница = Элементы.СтраницаРаспределениеСПомощником Тогда
		СтрокаАванса = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокиАванса);
		Если СтрокаАванса <> Неопределено Тогда
			Объект.РасшифровкаПлатежа.Удалить(СтрокаАванса.НомерСтроки - 1);
		КонецЕсли;
		ИдентификаторСтрокиАванса = "";
	КонецЕсли;
	
	Индекс = Объект.РасшифровкаПлатежа.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ТекущаяСтрока = Объект.РасшифровкаПлатежа[Индекс];
		Если ТекущаяСтрока.СуммаРасчетов = 0 И ТекущаяСтрока.СуммаПлатежа = 0 Тогда
			Объект.РасшифровкаПлатежа.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыРаспределенияДолговНаСервере(ПриСозданииНаСервере = Ложь)
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
		
		Элементы.ВариантЗаполненияРасшифровки.Видимость = Ложь;
		Элементы.ДекорацияРазделитель6.Видимость = Ложь;
		Элементы.КоманднаяПанельПомощника.Видимость = Ложь;
		Элементы.ГруппаФильтры.Видимость = Ложь;
		Элементы.КоманднаяПанельРучногоЗаполнения.Видимость = Истина;
		Элементы.СтраницыРасчетовСКонтрагентомПодвал.ТекущаяСтраница = Элементы.ПодвалВручную;
		
	Иначе
		
		//**********************************************************************************************************
		// Настроим видимость.
		Элементы.ВариантЗаполненияРасшифровки.Видимость = Истина;
		Элементы.ДекорацияРазделитель6.Видимость = Истина;
		Элементы.КоманднаяПанельПомощника.Видимость = Истина;
		Элементы.ГруппаФильтры.Видимость = Ложь;
		
		// При вводе на основании заполним информацию о договре аванса из первой строки расшифровки платежа.
		Если ПриСозданииНаСервере И Объект.Ссылка.Пустая() И Объект.ДоговорДляЗачетаАвансаСПомощником.Пустая() И Параметры.Свойство("Основание") Тогда
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.ДоговорДляЗачетаАвансаСПомощником = Объект.РасшифровкаПлатежа[0].Договор;
			Иначе
				Объект.ДоговорДляЗачетаАвансаСПомощником = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
		КонецЕсли;
		
		//**********************************************************************************************************
		// Автоматическое заполнение.
		Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически Тогда
			
			// Удалим строку с авансом, если он = 0, и строки с нулевыми суммами.
			Если Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаЗаполнениеСПомощником Тогда
				УдалитьСтрокуСАвансомИСтрокиСНулевымиЗначениями();
			КонецЕсли;
			
			// Заполнение элементов
			СоздатьЭлементыДоговоровЗачетаДолгов(ПриСозданииНаСервере);
			
			//**********************************************************************************************************
			// Настройка видимости и заголовков
			Элементы.КоманднаяПанельПомощника.Видимость = Ложь;
			Элементы.КоманднаяПанельРучногоЗаполнения.Видимость = Ложь;
			
			//Элементы.СуммаПлатежаАванс.Видимость = Ложь;
			Элементы.СуммаДокумента.КнопкаВыпадающегоСписка = Истина;
			
			//Элементы.СтраницыИтоги.ТекущаяСтраница = Элементы.СтраницаРаспределениеАвтоматическое;
			Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаАвтоматическоеЗаполнение;
			Элементы.СтраницыРасчетовСКонтрагентомПодвал.ТекущаяСтраница = Элементы.ПодвалАвто;
			
		//**********************************************************************************************************
		// Заполнение с помощником.
		ИначеЕсли Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
			
			// Заполнение элементов
			//Если ПриСозданииНаСервере И Не Объект.Ссылка.Пустая() Тогда // Открываем ранее заполненный документ.
			
			// Если перешли с автоматического режима, то все строки удалим и добавим только одну, с договором по умолчанию.
			Если Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаАвтоматическоеЗаполнение Тогда
				Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
					ДобавитьСтрокуАвансаНаСервере();
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьДолги(Ложь);
			РаспределитьРасшифровкуПоТаблицеДолгов();
			
			//**********************************************************************************************************
			// Настройка видимости и заголовков
			
			Элементы.КоманднаяПанельПомощника.Видимость = Истина;
			Элементы.КоманднаяПанельРучногоЗаполнения.Видимость = Ложь;
			
			//Элементы.СуммаПлатежаАванс.Видимость = Истина;
			Элементы.СуммаДокумента.КнопкаВыпадающегоСписка = Истина; // Для сулчая, когда хотят зачесть больше, чем изначально планировалось.
			
			Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаЗаполнениеСПомощником;
			Элементы.СтраницыРасчетовСКонтрагентомПодвал.ТекущаяСтраница = Элементы.ПодвалСПомощником;
			
		//**********************************************************************************************************
		// Ручное заполнение.
		ИначеЕсли Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную Тогда
			
			//Элементы.РасчетыСКонтрагентом.ПутьКДаннымЗаголовка = "Объект.РасшифровкаПлатежа.КоличествоСтрок";
			
			// Удалим строку с авансом, если он = 0, и строки с нулевыми суммами.
			Если Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаЗаполнениеСПомощником Тогда
				УдалитьСтрокуСАвансомИСтрокиСНулевымиЗначениями();
			КонецЕсли;
			
			//**********************************************************************************************************
			// Заполнение элементов
			КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
		
			Если КоличествоСтрок = 0 Тогда
				Объект.РасшифровкаПлатежа.Добавить();
				Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
				РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаСервере(Объект.РасшифровкаПлатежа[0]);
				КоличествоСтрок = 1;
			КонецЕсли;
			
			//**********************************************************************************************************
			// Настройка видимости и заголовков
			Элементы.КоманднаяПанельПомощника.Видимость = Ложь;
			Элементы.КоманднаяПанельРучногоЗаполнения.Видимость = Истина;
			
			//Элементы.СуммаПлатежаАванс.Видимость = Истина;
			Элементы.СуммаДокумента.КнопкаВыпадающегоСписка = Истина;
			
			Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
			Элементы.СтраницыРасчетовСКонтрагентомПодвал.ТекущаяСтраница = Элементы.ПодвалВручную;
			
		КонецЕсли;
		
		//**********************************************************************************************************
		// Общие действия
		СуммаЗачтено = ТаблицаДолгов.Итог("ЗачестьВыбрано");
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
		СформироватьЗаголовокГруппыЗачетаДолгов();
		УстановитьЗаголовкиКолонокТабличныхЧастей(Объект.ВалютаДенежныхСредств);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискПоДоговоруНаСервере(Знач ИмяКолонкиТЧ)
	
	ОтборПоСуммеЧисло = Ложь;
	Если СтрНайти(ИмяКолонкиТЧ, "ДолгВал") > 0 Тогда
		Если СтрНайти(ИмяКолонкиТЧ, "Строка") > 0 Тогда
			ИмяКолонкиТЧ = СтрЗаменить(ИмяКолонкиТЧ, "Строка", "");
		КонецЕсли;
		
		Попытка
			СтруктураОтбора = Новый Структура(ИмяКолонкиТЧ, Число(СтрокаПоискаПоДоговору));
			Если ТаблицаДолгов.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
				СтруктураОтбора = Новый Структура(ИмяКолонкиТЧ+"Строка", СокрЛП(СтрЗаменить(СтрокаПоискаПоДоговору, Символы.НПП, "")));
			КонецЕсли;
		Исключение
			СтруктураОтбора = Новый Структура(ИмяКолонкиТЧ+"Строка", СокрЛП(СтрЗаменить(СтрокаПоискаПоДоговору, Символы.НПП, "")));
		КонецПопытки;
	Иначе
		СтруктураОтбора = Новый Структура(ИмяКолонкиТЧ, СокрЛП(СтрокаПоискаПоДоговору));
	КонецЕсли;
	Элементы.ТаблицаДолгов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.СнятьОтборПоДоговору.Доступность = Истина;
	Элементы.УстановитьОтборПоДоговору.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокГруппыЗачетаДолгов()
	
	// Автоматическое заполнение.
	Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически Тогда
		
		Если Объект.Контрагент.Пустая() Или НЕ Объект.Контрагент.ВестиРасчетыПоДоговорам Тогда
			Элементы.РасчетыСКонтрагентом.Заголовок = "Зачет долгов: автоматически";
		Иначе
			КоличествоСтрок = Объект.ДоговорыАвтоЗачетаДолгов.Количество();
			Если КоличествоСтрок = 1 И ЗначениеЗаполнено(Объект.ДоговорыАвтоЗачетаДолгов[0].Договор) Тогда
				Элементы.РасчетыСКонтрагентом.Заголовок = "Зачет долгов: автоматически по договору """+Объект.ДоговорыАвтоЗачетаДолгов[0].Договор+"""";
			ИначеЕсли КоличествоСтрок > 1 Тогда
				Если КоличествоСтрок > 4 Тогда
					Элементы.РасчетыСКонтрагентом.Заголовок = НСтр("ru = 'Зачет долгов: автоматически по нескольким договорам ('") + КоличествоСтрок + ")";
				Иначе
					ЗаголовокГруппы = НСтр("ru = 'Зачет долгов: автоматически по %КоличествоСтрок%-м договорам'");
					ЗаголовокГруппы = СтрЗаменить(ЗаголовокГруппы, "%КоличествоСтрок%", КоличествоСтрок);
					Элементы.РасчетыСКонтрагентом.Заголовок = ЗаголовокГруппы;
				КонецЕсли;
			Иначе
				Элементы.РасчетыСКонтрагентом.Заголовок = "Зачет долгов: автоматически (выберите договор)";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиСПомощником Тогда
		
		ОпределитьТекущуюСтраницуПомощника();
		Элементы.РасчетыСКонтрагентом.Заголовок = НСтр("ru = 'Зачет долгов: с помощником'");
		
	// Ручное заполнение.
	ИначеЕсли Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную Тогда
		
		Элементы.РасчетыСКонтрагентом.Заголовок = НСтр("ru = 'Зачет долгов: вручную'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТекущуюСтраницуПомощника()
	
	Если ТаблицаДолгов.Количество() = 0 Тогда
		Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаНетДанныхВПомощнике;
	Иначе
		Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаЕстьДанныеВПомощнике;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоговорЗачетаДолговНажатие(Элемент)
	
	ТекущаяСтрока = Объект.ДоговорыАвтоЗачетаДолгов.Добавить();
	ДобавитьДоговорЗачетаДолговНажатиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДоговорЗачетаДолговНажатиеНаСервере(ТекущаяСтрокаТаблицыДоговоровАвтоЗачета = Неопределено)
	
	// Добавление элемента для последней добавленной в таблицу строки.
	Если ТекущаяСтрокаТаблицыДоговоровАвтоЗачета = Неопределено Тогда
		ИндексДоговораУчетаРасчетов = Объект.ДоговорыАвтоЗачетаДолгов.Количество() - 1;
	// Добавление элемента для строки, которая передана в качестве параметра.
	Иначе
		ИндексДоговораУчетаРасчетов = Объект.ДоговорыАвтоЗачетаДолгов.Индекс(ТекущаяСтрокаТаблицыДоговоровАвтоЗачета);
	КонецЕсли;
	
	// Создадим элемент для договора.
	ПолеДоговора = Элементы.Добавить("ДоговорАвтоЗачетаДолгов_" + ИндексДоговораУчетаРасчетов,
		Тип("ПолеФормы"),
		Элементы.ГруппаДобавленныхДоговоровСлева
	);
	
	ПолеДоговора.Вид = ВидПоляФормы.ПолеВвода;
	ПолеДоговора.ПутьКДанным = "Объект.ДоговорыАвтоЗачетаДолгов[" + ИндексДоговораУчетаРасчетов + "].Договор";
	ПолеДоговора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	ПолеДоговора.Заголовок = ?(ИндексДоговораУчетаРасчетов = 0, НСтр("ru = 'По договору'"), НСтр("ru = 'и по договору'"));
	ПолеДоговора.РастягиватьПоГоризонтали = Истина;
	ПолеДоговора.УстановитьДействие("ПриИзменении", "Подключаемый_ДоговорыАвтоЗачетаДолговДоговорПриИзменении");
	ПолеДоговора.УстановитьДействие("НачалоВыбора", "Подключаемый_ДоговорыАвтоЗачетаДолговДоговорНачалоВыбора");
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	ПолеДоговора.СвязиПараметровВыбора = НовыеСвязи;
	ПолеДоговора.АвтоОтметкаНезаполненного = Ложь;
	ПолеДоговора.ПодсказкаВвода = "Если не выбран, то игнорируется";
	
	// Создадим элемент для суммы платежа.
	ДобавитьСуммуПлатежаЗачетаДолгов(ИндексДоговораУчетаРасчетов);
	
	// Если договоров > 1, тогда выводим сумму, которая будет зачтена для каждого договора.
	Если ИндексДоговораУчетаРасчетов = 1 Тогда
		Элементы.ГруппаДобавленныхДоговоровСправа.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуммуПлатежаЗачетаДолгов(ИндексДоговораУчетаРасчетов)

	// Поле суммы.
	ПолеСуммыПлатежа = Элементы.Добавить("СуммаПлатежаАвтоЗачетаДолгов_" + ИндексДоговораУчетаРасчетов,
			Тип("ПолеФормы"),
			Элементы.ГруппаДобавленныхДоговоровСправа
		);
		
	ПолеСуммыПлатежа.Вид = ВидПоляФормы.ПолеВвода;
	ПолеСуммыПлатежа.ПутьКДанным = "Объект.ДоговорыАвтоЗачетаДолгов[" + ИндексДоговораУчетаРасчетов + "].СуммаПлатежа";
	ПолеСуммыПлатежа.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	ПолеСуммыПлатежа.Заголовок = НСтр("ru = 'сумма'");
	ПолеСуммыПлатежа.РастягиватьПоГоризонтали = Ложь;
	ПолеСуммыПлатежа.Ширина = 11;
	ПолеСуммыПлатежа.АвтоОтметкаНезаполненного = Ложь;
	ПолеСуммыПлатежа.УстановитьДействие("ПриИзменении", "Подключаемый_ДоговорыАвтоЗачетаДолговСуммаПлатежаПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДоговорыАвтоЗачетаДолговДоговорПриИзменении(Элемент)
	
	СформироватьЗаголовокГруппыЗачетаДолгов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДоговорыАвтоЗачетаДолговДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НомерСимвола = СтрНайти(Элемент.Имя, "_");
	Если НомерСимвола = 0 Тогда
		ОбработатьНачалоВыбораДоговораКонтрагента(Элемент, СтандартнаяОбработка);
	Иначе
		Попытка
			Индекс = Число(Сред(Элемент.Имя, НомерСимвола + 1));
			ОбработатьНачалоВыбораДоговораКонтрагента(Элемент, СтандартнаяОбработка, Объект.ДоговорыАвтоЗачетаДолгов[Индекс].Договор);
		Исключение
			ОбработатьНачалоВыбораДоговораКонтрагента(Элемент, СтандартнаяОбработка);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДоговорыАвтоЗачетаДолговСуммаПлатежаПриИзменении(Элемент)
	
	Если ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
		СуммаДокументаПриИзмененииФрагмент();
	Иначе
		РассчитатьСуммуНДСПоУмолчаниюНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорДляЗачетаАванса2ПриИзменении(Элемент)
	
	СтрокаАванса = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтрокиАванса);
	Если СтрокаАванса <> Неопределено Тогда
		СтрокаАванса.Договор = Объект.ДоговорДляЗачетаАвансаСПомощником;
		ОбработатьИзменениеДоговораКонтрагента(СтрокаАванса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорДляЗачетаАванса2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сначала нужно выбрать поставщика'"));
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяТипаДокумента(СсылкаНаДокумент)

	Возврат СсылкаНаДокумент.Метаданные().Имя;

КонецФункции // ПолучитьИмяТипаДокумента()

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.СуммаДокумента = ВыбранноеЗначение;
	СуммаДокументаПриИзменении(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокТабличныхЧастей(ВалютаСсылка)
	
	// Долги будем всегда выводить в валюте документа, чтобы было легче распределить.
	ПредставлениеВалюты = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВалютаСсылка);
	
	Элементы.ТаблицаДолговДолгВалПлатежа.Заголовок = НСтр("ru = 'Текущий долг '")+ПредставлениеВалюты;
	Элементы.ТаблицаДолговЗачесть.Заголовок = НСтр("ru = 'Зачитываем '")+ПредставлениеВалюты;
	
	Элементы.РасшифровкаПлатежаСуммаПлатежа.Заголовок = НСтр("ru = 'Сумма '")+ПредставлениеВалюты;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСуммуДолгаВВалютеПлатежа(ПараметрДолгВалДоговора, ПараметрКурс, ПараметрКратность, ПараметрДоговор, ПараметрыБанковскогоСчета = Неопределено)
	
	Если ПараметрыБанковскогоСчета = Неопределено Тогда
		ТекущаяВалютаДС = Объект.ВалютаДенежныхСредств;
		ТекущийКурс = Курс;
		ТекущаяКратность = Кратность;
	Иначе
		ТекущаяВалютаДС = ПараметрыБанковскогоСчета.ВалютаДенежныхСредств;
		ТекущийКурс = ПараметрыБанковскогоСчета.ВалютаКурсКратность.Курс;
		ТекущаяКратность = ПараметрыБанковскогоСчета.ВалютаКурсКратность.Кратность;
	КонецЕсли;
	Если ПараметрДоговор.ВалютаРасчетов = ТекущаяВалютаДС Тогда
		Возврат ПараметрДолгВалДоговора;
	Иначе
		Возврат УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			ПараметрДолгВалДоговора,
			ПараметрКурс,
			ТекущийКурс,
			ПараметрКратность,
			ТекущаяКратность
		)
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа()
	
	Для каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		ТекущаяСтрока.Аванс = ?(ТекущаяСтрока.ПризнакАванса , ТекущаяСтрока.СуммаПлатежа, 0);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДолгиВПомощникеЗачетаДолгов(ПараметрыБанковскогоСчета = Неопределено)
	
	Для Каждого ТекущаяСтрокаДолгов Из ТаблицаДолгов Цикл
		ТекущаяСтрокаДолгов.ДолгВалПлатежа = РассчитатьСуммуДолгаВВалютеПлатежа(
			ТекущаяСтрокаДолгов.ДолгВалДоговора,
			ТекущаяСтрокаДолгов.Курс,
			ТекущаяСтрокаДолгов.Кратность,
			ТекущаяСтрокаДолгов.Договор,
			ПараметрыБанковскогоСчета
		);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникомРасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыПланированияРасшифровкаПлатежа.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасчетыДокументПланированияПриИзменении(Элемент)
	
	// Для совместимости с БП 3.0 выводятся данные только одной строки. Статью будем брать из подвала.
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюЗавершениеНаСервере()
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	ВидОперацииПриИзмененииНаСервере(Ложь);
	
	Если Объект.ВидОперации = ВидОперацииПоставщику И Объект.ВариантЗаполненияРасшифровки <> ВариантЗаполненияРасшифровкиВручную Тогда
		Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную;
		НастроитьЭлементыРаспределенияДолговНаСервере();
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")) Тогда
		
		УстановитьСтатьюДДС();
		Если НЕ Объект.Контрагент.Пустая() Тогда
			УстановитьСтатьиДДСВРасшифровкеПлатежа();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтатьиДДС()
	
	СтруктураДляВозврата = Новый Структура;
	
	Если НЕ Объект.Контрагент.Пустая() И НЕ Объект.Контрагент.СтатьяДДСПоУмолчанию.Пустая() Тогда
		СтруктураДляВозврата.Вставить("Статья", Объект.Контрагент.СтатьяДДСПоУмолчанию);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам);
	Иначе
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.Прочее);
	КонецЕсли;
	
	Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И ( Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги) Тогда
		СтруктураДляВозврата.Вставить("УчитыватьВНУ", Истина);
	Иначе
		Если ЗначениеЗаполнено(Объект.Статья) Тогда
			СтруктураДляВозврата.Вставить("УчитыватьВНУ", Объект.Статья.УчитыватьВНУ);
		Иначе
			СтруктураДляВозврата.Вставить("УчитыватьВНУ", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПолучитьДанныеСтатьиДДС()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументаПланированияПриИзменении(ДокументПланирования)
	
	СтруктураДанных = Новый Структура("СтатьяДДС", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходДСПлан.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.РасходДСПлан КАК РасходДСПлан
		|ГДЕ
		|	РасходДСПлан.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПланирования);
	
	Если ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходДСПлан КАК РасходДСПлан", "Документ.ПеремещениеДСПлан КАК РасходДСПлан");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Вставить("СтатьяДДС", Выборка.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(Договор, ДокументПланирования = Неопределено, СтатьяДДС = Неопределено)
	
	// Статья в заявке на расход (РасходДСПЛан) приоритетнее.
	Если ЗначениеЗаполнено(ДокументПланирования) Тогда
		Возврат СтатьяДДС;
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		Возврат Договор.СтатьяДДСПоУмолчанию;
	Иначе
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении()

&НаСервере
Процедура УстановитьСтатьиДДСВРасшифровкеПлатежа();
	
	Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
			ТекущаяСтрока.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		ИначеЕсли Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
			ТекущаяСтрока.СтатьяДДС = ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(ТекущаяСтрока.Договор,
				ТекущаяСтрока.ДокументПланирования,
				ТекущаяСтрока.СтатьяДДС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
