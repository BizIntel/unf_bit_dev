#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтефейс

// Перезаполняет ТЧ Запасы на основании ТЧ РасшифровкаБиллинга.
//
// Параметры:
//  СчетНаОплату - Структура, СправочникОбъект - Объект документа СчетНаОплату.
//
Процедура ПерезаполнитьЗапасыПоРасшифровкеБиллинга(СчетНаОплату) Экспорт
	
	СчетНаОплату.Запасы.Очистить();
	
	РасшифровкаЗапасов = СчетНаОплату.РасшифровкаБиллинга.Выгрузить();
	РасшифровкаЗапасов.Колонки.Добавить("ПредставлениеВСчетеЕдиницаИзмерения", 
		Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения,СправочникСсылка.КлассификаторЕдиницИзмерения")
	);
	
	ЕстьНезаполненныеСтрокиВРасшифровке = Ложь;
	Для каждого Стр Из РасшифровкаЗапасов Цикл
		
		Если Стр.Количество = 0
			ИЛИ Стр.Цена = 0
			ИЛИ Стр.Сумма = 0
			ИЛИ ТипЗнч(Стр.ОбъектДоговораОбслуживания) = Тип("ПланСчетовСсылка.Управленческий") 
				И НЕ ЗначениеЗаполнено(Стр.ПредставлениеВСчете) Тогда
			
			ЕстьНезаполненныеСтрокиВРасшифровке = Истина;
			Прервать;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.ПредставлениеВСчете) Тогда
			Стр.ПредставлениеВСчете = Стр.ОбъектДоговораОбслуживания;
			Стр.ПредставлениеВСчетеЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
		Иначе
			Стр.ПредставлениеВСчетеЕдиницаИзмерения = Стр.ПредставлениеВСчете.ЕдиницаИзмерения;
			Стр.Характеристика = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНезаполненныеСтрокиВРасшифровке Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаЗапасов.Свернуть("ПредставлениеВСчете,ПредставлениеВСчетеЕдиницаИзмерения,Характеристика", "Количество,Сумма");
	
	Для каждого Стр Из РасшифровкаЗапасов Цикл
		
		НоваяСтрока = СчетНаОплату.Запасы.Добавить();
		НоваяСтрока.Номенклатура     = Стр.ПредставлениеВСчете;
		НоваяСтрока.Характеристика   = Стр.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения = Стр.ПредставлениеВСчетеЕдиницаИзмерения;
		НоваяСтрока.Количество       = Стр.Количество;
		НоваяСтрока.Цена             = Стр.Сумма / Стр.Количество;
		НоваяСтрока.Сумма            = Стр.Сумма;
		
		СтруктураДанные = Новый Структура();
		
		СтруктураДанные.Вставить("Организация",      СчетНаОплату.Организация);
		СтруктураДанные.Вставить("ДатаОбработки",    СчетНаОплату.Дата);
		СтруктураДанные.Вставить("ВидЦен",           СчетНаОплату.ВидЦен);
		СтруктураДанные.Вставить("ВалютаДокумента",  СчетНаОплату.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", СчетНаОплату.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Номенклатура",     НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",   Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтруктураДанные.Вставить("Коэффициент",      1);
		СтруктураДанные.Вставить("НалогообложениеНДС", СчетНаОплату.НалогообложениеНДС);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", СчетНаОплату.ВидСкидкиНаценки);
		
		// ДисконтныеКарты
		СтруктураДанные.Вставить("ДисконтнаяКарта", СчетНаОплату.ДисконтнаяКарта);
		СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", СчетНаОплату.ПроцентСкидкиПоДисконтнойКарте);		
		// Конец ДисконтныеКарты
		
		СтруктураДанные = РаботаСФормойДокумента.ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрока.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		НоваяСтрока.Содержание = "";
		
		Если НоваяСтрока.ПроцентСкидкиНаценки = 100 Тогда
			НоваяСтрока.Сумма = 0;
		ИначеЕсли НоваяСтрока.ПроцентСкидкиНаценки <> 0
				И НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Сумма * (1 - НоваяСтрока.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		
		НоваяСтрока.СуммаНДС = ?(СчетНаОплату.СуммаВключаетНДС, 
										  НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
										  НоваяСтрока.Сумма * СтавкаНДС / 100);
		
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(СчетНаОплату.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
		// АвтоматическиеСкидки.
		НоваяСтрока.ПроцентАвтоматическойСкидки = 0;
		НоваяСтрока.СуммаАвтоматическойСкидки = 0;
		// Конец АвтоматическиеСкидки
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ТЧ РасшифровкаБиллинга на основании ТЧ Запасы.
// Используется при вводе на основании.
//
Процедура ЗаполнитьРасшифровкуБиллинга(СчетНаОплату) Экспорт
	
	СчетНаОплату.РасшифровкаБиллинга.Очистить();
	Для каждого Стр Из СчетНаОплату.Запасы Цикл
		
		НоваяСтрока = СчетНаОплату.РасшифровкаБиллинга.Добавить();
		НоваяСтрока.ОбъектДоговораОбслуживания = Стр.Номенклатура;
		НоваяСтрока.Характеристика             = Стр.Характеристика;
		НоваяСтрока.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
		НоваяСтрока.Количество       = Стр.Количество;
		НоваяСтрока.Цена             = Стр.Цена;
		НоваяСтрока.Сумма            = Стр.Цена * Стр.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирования таблицы платежного календаря.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПриходДенежныхСредствПлан - Текущий документ
//	ДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//
Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаОплаты КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.ТипДенежныхСредств,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|			ТОГДА ТаблицаДокумента.Ссылка.Касса
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ТаблицаДокумента.Ссылка.БанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКасса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|						КОГДА КурсыВалютРасчетов.Курс <> 0
	|								И КурсыВалютДокумента.Кратность <> 0
	|							ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|						ИНАЧЕ 1
	|					КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаДокумента.СуммаОплаты
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.СчетНаОплату.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

// Процедура формирования таблицы счетов на оплату.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПриходДенежныхСредствПлан - Текущий документ
//	ДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ТаблицаДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.СчетНаОплату КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.СуммаДокумента <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу данных документа.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПриходДенежныхСредствПлан - Текущий документ
//	СтруктураДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//	
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Содержание", "Содержание", ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000, , , , , НастройкиЗагрузкиДанных.СодержаниеВидимо);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", "Ставка НДС", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаНДС", "Сумма НДС", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
		
		// Содержание
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Содержание, СтрокаТаблицыФормы.Содержание_ВходящиеДанные);
		
		// Характеристика по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Партия по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
		
		// СтавкаНДС по наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
		
		// СуммаНДС
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаНДС, СтрокаТаблицыФормы.СуммаНДС_ВходящиеДанные, 0);
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
		И (СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас 
			ИЛИ СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга)
		И СтрокаТаблицыФормы.Количество <> 0;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Процедура печати документа
//
Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.Номер КАК Номер,
	|	СчетНаОплату.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплату.Контрагент КАК Контрагент,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.Организация.Префикс КАК Префикс,
	|	СчетНаОплату.УсловияСчетаЗаказа КАК ДополнительныеУсловия,
	|	СчетНаОплату.Комментарий КАК Комментарий,
	|	СчетНаОплату.Договор,
	|	СчетНаОплату.ДокументОснование,
	|	СчетНаОплату.Подразделение,
	|	СчетНаОплату.Ответственный,
	|	СчетНаОплату.Автор,
	|	СчетНаОплату.ДисконтнаяКарта,
	|	СчетНаОплату.ПроцентСкидкиПоДисконтнойКарте,
	|	СчетНаОплату.Запасы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Количество КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА СчетНаОплату.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ СчетНаОплату.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		НомерСтроки КАК НомерСтроки,
	|		СуммаАвтоматическойСкидки,
	|		Номенклатура.Спецификация КАК Спецификация
	|	),
	|	СчетНаОплату.ПлатежныйКалендарь.(
	|		ПроцентОплаты,
	|		СуммаОплаты,
	|		СуммаНДСОплаты
	|	)
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		ТаблицаПредоплаты = Шапка.ПлатежныйКалендарь.Выгрузить(); 
				
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИмяМакета + "_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплату.ПФ_MXL_" + ИмяМакета);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		//Для совместимости со старыми макетами
		Если Макет.Области.Найти("ЗаглавиеСЛоготипом") <> Неопределено
			И Макет.Области.Найти("ЗаглавиеБезЛоготипа") <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Шапка.Организация.ФайлЛоготип) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеСЛоготипом");
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе // Если картинки не выбраны печатаем обычный заголовок
					
					ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");
					
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		
		//Новый вариант макета содержит логотип в области ЗаголовокСчетаСЛоготипом
		Если Макет.Области.Найти("ЗаголовокСчетаСЛоготипом") <> Неопределено
			И ЗначениеЗаполнено(Шапка.Организация.ФайлЛоготип) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
		ИначеЕсли Макет.Области.Найти("ЗаголовокСчета") <> Неопределено Тогда
			
			// Если картинки не выбраны печатаем обычный заголовок	
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
			
		Иначе
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			ОбластьМакета.Параметры.БанкПолучателяПредставление = СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город;
		КонецЕсли; 
		ОбластьМакета.Параметры.ИНН = СведенияОбОрганизации.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОбОрганизации.КПП;
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ?(ПустаяСтрока(СведенияОбОрганизации.ТекстКорреспондента), СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.ТекстКорреспондента);
		ОбластьМакета.Параметры.БИКБанкаПолучателя = СведенияОбОрганизации.БИК;
		ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = СведенияОбОрганизации.КоррСчет;
		ОбластьМакета.Параметры.СчетПолучателяПредставление = СведенияОбОрганизации.НомерСчета;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ТекстЗаголовка = "Счет на оплату № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;

		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
																	ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
			КонецЕсли;
						
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего		= Всего 	+ ВыборкаСтрокЗапасы.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если СуммаНДС = 0 Тогда
			
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			
		Иначе
			
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
			
		КонецЕсли; 
		
		Если ИмяМакета = "СчетНаЧастичнуюОплату" Тогда
			
			Если СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДСкОплате = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
			Иначе
				ОбластьМакета.Параметры.НДСкОплате = ?(Шапка.СуммаВключаетНДС, "В том числе НДС оплаты:", "Сумма НДС оплаты:");
				Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
					ОбластьМакета.Параметры.ВсегоНДСкОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаНДСОплаты"));
				Иначе
					ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
				КонецЕсли;
			КонецЕсли; 
			
			Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
				ОбластьМакета.Параметры.ВсегоКОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаОплаты"));
				ОбластьМакета.Параметры.ПроцентОплаты = ТаблицаПредоплаты.Итог("ПроцентОплаты");
			Иначе
				ОбластьМакета.Параметры.ВсегоКОплате = "-";
				ОбластьМакета.Параметры.ПроцентОплаты = "-";
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеНебольшойФирмойСервер.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Дополнительные условия
		Если ЗначениеЗаполнено(Шапка.ДополнительныеУсловия) И
			ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловия")) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительныеУсловия");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			
			// Добавим отступ перед текстом
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим построчно многострочный текст
			// для того, чтобы корректно печатались длинные тексты
			ТекстДополнительныхУсловий = Шапка.ДополнительныеУсловия.ТекстУсловий;
			ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
				СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		//*************************
		//Изменения внесены ООО Бизнес-Интеллект   //  ПечатьСчетНаОплату()
		//*************************		
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		Руководители = бизЗаполнениеДокументов.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация,
		ПользовательИБ.УникальныйИдентификатор, Шапка.ДатаДокумента);
		
		ОбластьМакета.Параметры.ФИОРуководителя		= Руководители.ФИОРуководителя;
		ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ФИОГлавногоБухгалтера;
		ОбластьМакета.Параметры.ПредставлениеПодписанта = Руководители.ПредставлениеПодписантаРуководителя;
		
		//*************************
		//Конец изменений
		//*************************
					
		//Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
		//
		//ОбластьМакета.Параметры.ФИОРуководителя = Руководители.ФИОРуководителя;
		//ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ФИОГлавногоБухгалтера;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплату()

// Процедура печати документа
//
Функция ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.Номер КАК Номер,
	|	СчетНаОплату.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплату.Контрагент КАК Контрагент,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.Организация.Префикс КАК Префикс,
	|	СчетНаОплату.УсловияСчетаЗаказа КАК ДополнительныеУсловия,
	|	СчетНаОплату.Комментарий КАК Комментарий,
	|	СчетНаОплату.Договор,
	|	СчетНаОплату.ДокументОснование,
	|	СчетНаОплату.Подразделение,
	|	СчетНаОплату.Ответственный,
	|	СчетНаОплату.Автор,
	|	СчетНаОплату.ДисконтнаяКарта,
	|	СчетНаОплату.ПроцентСкидкиПоДисконтнойКарте,
	|	СчетНаОплату.Запасы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Количество КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА СчетНаОплату.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ СчетНаОплату.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		НомерСтроки КАК НомерСтроки,
	|		СуммаАвтоматическойСкидки,
	|		Номенклатура.Спецификация КАК Спецификация
	|	),
	|	СчетНаОплату.ПлатежныйКалендарь.(
	|		ПроцентОплаты,
	|		СуммаОплаты,
	|		СуммаНДСОплаты
	|	)
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		ТаблицаПредоплаты = Шапка.ПлатежныйКалендарь.Выгрузить(); 
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИмяМакета + "_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплату.ПФ_MXL_" + ИмяМакета);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		//Для совместимости со старыми макетами
		Если Макет.Области.Найти("ЗаглавиеСЛоготипом") <> Неопределено
			И Макет.Области.Найти("ЗаглавиеБезЛоготипа") <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Шапка.Организация.ФайлЛоготип) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеСЛоготипом");
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе // Если картинки не выбраны печатаем обычный заголовок
					
					ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");
					
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		//Новый вариант макета содержит логотип в области ЗаголовокСчетаСЛоготипом
		Если Макет.Области.Найти("ЗаголовокСчетаСЛоготипом") <> Неопределено
			И ЗначениеЗаполнено(Шапка.Организация.ФайлЛоготип) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
		ИначеЕсли Макет.Области.Найти("ЗаголовокСчета") <> Неопределено Тогда
			
			// Если картинки не выбраны печатаем обычный заголовок	
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
				
		Иначе
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			ОбластьМакета.Параметры.БанкПолучателяПредставление = СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город;
		КонецЕсли; 
		ОбластьМакета.Параметры.ИНН = СведенияОбОрганизации.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОбОрганизации.КПП;
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ?(ПустаяСтрока(СведенияОбОрганизации.ТекстКорреспондента), СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.ТекстКорреспондента);
		ОбластьМакета.Параметры.БИКБанкаПолучателя = СведенияОбОрганизации.БИК;
		ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = СведенияОбОрганизации.КоррСчет;
		ОбластьМакета.Параметры.СчетПолучателяПредставление = СведенияОбОрганизации.НомерСчета;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ТекстЗаголовка = "Счет на оплату № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;

		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
																	ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
			КонецЕсли;
						
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего		= Всего		+ ВыборкаСтрокЗапасы.Всего;
		
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если СуммаНДС = 0 Тогда
			
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			
		Иначе
			
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
			
		КонецЕсли; 
		
		Если ИмяМакета = "СчетНаЧастичнуюОплату" Тогда
			
			Если СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДСкОплате = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
			Иначе
				ОбластьМакета.Параметры.НДСкОплате = ?(Шапка.СуммаВключаетНДС, "В том числе НДС оплаты:", "Сумма НДС оплаты:");
				Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
					ОбластьМакета.Параметры.ВсегоНДСкОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаНДСОплаты"));
				Иначе
					ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
				КонецЕсли;
			КонецЕсли; 
			
			Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
				ОбластьМакета.Параметры.ВсегоКОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаОплаты"));
				ОбластьМакета.Параметры.ПроцентОплаты = ТаблицаПредоплаты.Итог("ПроцентОплаты");
			Иначе
				ОбластьМакета.Параметры.ВсегоКОплате = "-";
				ОбластьМакета.Параметры.ПроцентОплаты = "-";
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеНебольшойФирмойСервер.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Дополнительные условия
		Если ЗначениеЗаполнено(Шапка.ДополнительныеУсловия) И
			ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловия")) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительныеУсловия");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			
			// Добавим отступ перед текстом
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим построчно многострочный текст
			// для того, чтобы корректно печатались длинные тексты
			ТекстДополнительныхУсловий = Шапка.ДополнительныеУсловия.ТекстУсловий;
			ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
				СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;		
		
		Если Макет.Области.Найти("ПодвалСчетаСФаксимильнойПечатью") <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Шапка.Организация.ФайлФаксимильнаяПечать) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатью");
				ОбластьМакета.Параметры.Заполнить(Шапка);
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлФаксимильнаяПечать);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru ='Факсимиле для организации не установлена. Установка факсимиле выполняется в карточке организации, раздел ""Настройка печати"".'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
				ОбластьМакета.Параметры.Заполнить(Шапка);
				
				Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
				
				ОбластьМакета.Параметры.ФИОРуководителя = Руководители.ФИОРуководителя;
				ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ФИОГлавногоБухгалтера;
				
			КонецЕсли;
			
		Иначе
			
			// Добавлять второе предупреждение не нужно, так как предупреждение добавлено при попытке вывести заголовок.
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплатуСФаксимильнойПодписью()

// Процедура печати приложения к договору
//
Функция ПечатьПриложениеКДоговору(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.Номер КАК Номер,
	|	СчетНаОплату.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплату.Контрагент КАК Контрагент,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.Организация.Префикс КАК Префикс,
	|	СчетНаОплату.Запасы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Количество КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА СчетНаОплату.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ СчетНаОплату.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		НомерСтроки КАК НомерСтроки,
	|		СуммаАвтоматическойСкидки
	|	),
	|	СчетНаОплату.ПлатежныйКалендарь.(
	|		ПроцентОплаты,
	|		СуммаОплаты,
	|		СуммаНДСОплаты
	|	),
	|	ДоговорыКонтрагентов.Ссылка КАК СсылкаДоговора,
	|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО СчетНаОплату.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		ТаблицаПредоплаты = Шапка.ПлатежныйКалендарь.Выгрузить(); 
				
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИмяМакета + "_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетНаОплату.ПФ_MXL_" + ИмяМакета);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "к договору № "
												+ Шапка.НомерДоговора
												+ " от "
												+ Формат(Шапка.ДатаДоговора, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;

		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
																	ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
			КонецЕсли;
						
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего		= Всего 	+ ВыборкаСтрокЗапасы.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			
		Иначе
			
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
			
		КонецЕсли; 
		
		Если ИмяМакета = "СчетНаЧастичнуюОплату" Тогда
			
			Если СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДСкОплате = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
			Иначе
				ОбластьМакета.Параметры.НДСкОплате = ?(Шапка.СуммаВключаетНДС, "В том числе НДС оплаты:", "Сумма НДС оплаты:");
				Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
					ОбластьМакета.Параметры.ВсегоНДСкОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаНДСОплаты"));
				Иначе
					ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
				КонецЕсли;
			КонецЕсли; 
			
			Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
				ОбластьМакета.Параметры.ВсегоКОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаОплаты"));
				ОбластьМакета.Параметры.ПроцентОплаты = ТаблицаПредоплаты.Итог("ПроцентОплаты");
			Иначе
				ОбластьМакета.Параметры.ВсегоКОплате = "-";
				ОбластьМакета.Параметры.ПроцентОплаты = "-";
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеНебольшойФирмойСервер.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплату()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ЗаполнитьПараметрыЭлектроннойПочты = Истина;
	
	// Счет на оплату
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплату", "Счет на оплату", ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, "СчетНаОплату"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплатуСФаксимильнойПодписью") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплатуСФаксимильнойПодписью", "Счет на оплату", ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивОбъектов, ОбъектыПечати, "СчетНаОплату"));
		
	КонецЕсли;
	
	// Счет на частичную оплату
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплату") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплату", "Счет на оплату (частичная оплата)", ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, "СчетНаЧастичнуюОплату"));
	
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплатуСФаксимильнойПодписью") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплатуСФаксимильнойПодписью", "Счет на оплату (частичная оплата)", ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивОбъектов, ОбъектыПечати, "СчетНаЧастичнуюОплату"));
	
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	Если ЗаполнитьПараметрыЭлектроннойПочты Тогда
		
		УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
	// Приложение к договору
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриложениеКДоговору") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриложениеКДоговору", "Приложение к договору", ПечатьПриложениеКДоговору(МассивОбъектов, ОбъектыПечати, "ПриложениеКДоговору"));
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.Порядок = 1;
	
	// Счет на оплату (частичная оплата)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаЧастичнуюОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на частичную оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.Порядок = 4;
	
	// Видимость команд печати с факсимиле не будет регулироваться признаком заполненности поле в Организации
	// для того, что бы пользователи знали про данную возможность
	
	// Счет на оплату с факсимиле
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплатуСФаксимильнойПодписью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (с факсимиле)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью";
	КомандаПечати.Порядок = 7;
	
	// Счет на оплату с факсимиле (частичная оплата)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаЧастичнуюОплатуСФаксимильнойПодписью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на частичную оплату (с факсимиле)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью";
	КомандаПечати.Порядок = 10;
	
	// Договор
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.СформироватьБланкиДоговоров";
	КомандаПечати.Идентификатор = "БланкДоговора";
	КомандаПечати.Представление = НСтр("ru = 'Форма договора'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 14;
	
	// Приложение к договору
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриложениеКДоговору";
	КомандаПечати.Представление = НСтр("ru = 'Приложение к договору'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 17;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли