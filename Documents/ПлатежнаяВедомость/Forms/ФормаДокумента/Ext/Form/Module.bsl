////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура заполняет табличную часть Сотрудники остатками по начислениям.
//
Процедура ЗаполнитьПоОстаткамНаСервере()	
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоОстаткамНаСервере();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура заполняет табличную часть Сотрудники по подразделению.
//
Процедура ЗаполнитьПоПодразделениюНаСервере()	
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоПодразделениюНаСервере();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаКлиенте
// Процедура заполняет табличную часть Сотрудники остатками по начислениям.
//
Процедура ПересчитатьСуммуПоВалюте(СтрокаТабличнойЧасти, ИзмененоНачисление, ИзмененоКВыдаче, ДополнительныеПараметры = Неопределено)
	
	//
	// Если изменены обе валюты, расчет суммы выдачи происходит по сумме начисления
	//
	
	Если ИзмененоНачисление Тогда
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			СтрокаТабличнойЧасти.СуммаРасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаРасчетов, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, Объект.ВалютаРасчетов, ДополнительныеПараметры.КурсПередИзменением, Объект.Курс, ДополнительныеПараметры.КратностьПередИзменением, Объект.Кратность);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаРасчетов, Объект.ВалютаРасчетов, Объект.ВалютаДокумента, Объект.Курс, КурсВалютаДокумента, Объект.Кратность, КратностьВалютаДокумента);
		
	ИначеЕсли ИзмененоКВыдаче Тогда
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			СтрокаТабличнойЧасти.СуммаПлатежа = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаПлатежа, ДополнительныеПараметры.ВалютаДокументаПередИзменением, Объект.ВалютаДокумента, ДополнительныеПараметры.КурсВалютаДокументаПередИзменением, КурсВалютаДокумента, ДополнительныеПараметры.КратностьВалютаДокументаПередИзменением, КратностьВалютаДокумента);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаРасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаПлатежа, Объект.ВалютаДокумента, Объект.ВалютаРасчетов, КурсВалютаДокумента, Объект.Курс, КратностьВалютаДокумента, Объект.Кратность);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет табличную часть Сотрудники остатками по начислениям.
//
Процедура УстановитьВидимостьОтВалюты()
	
	ВалютаРасчетовОтличаетсяОтВалютыДокумента = (Объект.ВалютаДокумента <> Объект.ВалютаРасчетов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиСуммаРасчетов", "Видимость", ВалютаРасчетовОтличаетсяОтВалютыДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиИтогСуммаРасчетов", "Видимость", ВалютаРасчетовОтличаетсяОтВалютыДокумента);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СотрудникиВалютаРасчетов", "Видимость", ВалютаРасчетовОтличаетсяОтВалютыДокумента);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ВалютаДокумента",			Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсВалютаДокумента",		КурсВалютаДокумента);
	СтруктураПараметров.Вставить("КратностьВалютаДокумента",КратностьВалютаДокумента);
	
	СтруктураПараметров.Вставить("ВалютаРасчетов",			Объект.ВалютаРасчетов);
	СтруктураПараметров.Вставить("Курс",					Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",				Объект.Кратность);
	
	СтруктураПараметров.Вставить("Организация",				Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",			Объект.Дата);
	СтруктураПараметров.Вставить("ПересчитатьЦеныПоВалюте",	Ложь);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",	Ложь);
	
	СтруктураЦеныИВалюта = Неопределено;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВалютаРасчетовПередИзменением", Объект.ВалютаРасчетов);
	ДополнительныеПараметры.Вставить("КурсПередИзменением" ,Объект.Курс);
	ДополнительныеПараметры.Вставить("КратностьПередИзменением" ,Объект.Кратность);
	
	ДополнительныеПараметры.Вставить("ВалютаДокументаПередИзменением", Объект.ВалютаДокумента);
	ДополнительныеПараметры.Вставить("КурсВалютаДокументаПередИзменением" ,КурсВалютаДокумента);
	ДополнительныеПараметры.Вставить("КратностьВалютаДокументаПередИзменением" ,КратностьВалютаДокумента);
	
	ОткрытьФорму("Документ.ПлатежнаяВедомость.Форма.ФормаВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураЦеныИВалюта = Результат;
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента		= СтруктураЦеныИВалюта.ВалютаДокумента;
		КурсВалютаДокумента			= СтруктураЦеныИВалюта.КурсВалютаДокумента;
		КратностьВалютаДокумента	= СтруктураЦеныИВалюта.КратностьВалютаДокумента;
		
		Объект.ВалютаРасчетов 	= СтруктураЦеныИВалюта.ВалютаРасчетов;
		Объект.Курс 			= СтруктураЦеныИВалюта.Курс;
		Объект.Кратность 		= СтруктураЦеныИВалюта.Кратность;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.ПересчитатьЦеныПоВалюте Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл
				
				ПересчитатьСуммуПоВалюте(СтрокаТабличнойЧасти, СтруктураЦеныИВалюта.ИзмененаВалютаРасчетов, СтруктураЦеныИВалюта.ИзмененаВалютаДокумента, ДополнительныеПараметры);
				
			КонецЦикла; 
			
		ИначеЕсли СтруктураЦеныИВалюта.ВалютаРасчетов <> ДополнительныеПараметры.ВалютаРасчетовПередИзменением 
			И СтруктураЦеныИВалюта.ВалютаДокумента <> ДополнительныеПараметры.ВалютаДокументаПередИзменением Тогда
			
			// пропустить
			
		ИначеЕсли СтруктураЦеныИВалюта.ВалютаРасчетов <> ДополнительныеПараметры.ВалютаРасчетовПередИзменением 
			ИЛИ СтруктураЦеныИВалюта.ВалютаДокумента <> ДополнительныеПараметры.ВалютаДокументаПередИзменением Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Объект.Сотрудники Цикл
				
				ПересчитатьСуммуПоВалюте(СтрокаТабличнойЧасти, Ложь, Истина, ДополнительныеПараметры);
				
			КонецЦикла; 
			
		КонецЕсли;
		
		УстановитьВидимостьОтВалюты();
		
	КонецЕсли;
	
	// Заполним данные формы.
	ЦеныИВалюта = НСтр("ru = 'Док %1 • Нач. %2'");
	ЦеныИВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЦеныИВалюта, СокрЛП(Строка(Объект.ВалютаДокумента)), СокрЛП(Строка(Объект.ВалютаРасчетов)));
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
// В процедуре осуществляется
// - инициализация параметров формы,
// - установка параметров функциональных опций формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	Если Объект.ВалютаРасчетов = Объект.ВалютаДокумента Тогда
		
		КурсВалютаДокумента = Объект.Курс;
		КратностьВалютаДокумента = Объект.Кратность;
		
	Иначе
		
		КурсВалютыДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		КурсВалютаДокумента = КурсВалютыДокумента.Курс;
		КратностьВалютаДокумента = КурсВалютыДокумента.Кратность;
		
	КонецЕсли;
	
	// Заполним данные формы.
	ЦеныИВалюта = НСтр("ru = 'Док. %1 • Нач. %2'");
	ЦеныИВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЦеныИВалюта, СокрЛП(Строка(Объект.ВалютаДокумента)), СокрЛП(Строка(Объект.ВалютаРасчетов)));
	
	УстановитьВидимостьОтВалюты();
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		Если Элементы.Найти("СотрудникиСотрудникКод") <> Неопределено Тогда
			Элементы.СотрудникиСотрудникКод.Видимость = Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы ОбработкаВыбора
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события ЗаполнитьИРассчитатьВыполнить формы.
//
Процедура ЗаполнитьПоОстаткам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполнено подразделение!'");
		Сообщение.Поле = "Объект.СтруктурнаяЕдиница";
 		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСервере();		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделению(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполнено подразделение!'");
		Сообщение.Поле = "Объект.СтруктурнаяЕдиница";
 		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоПодразделениюНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Регулирования реквизита ПериодРегистрации
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события НачалоВыбора реквизита ПериодРегистрации
//
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	 = Ложь;
	
	ДатаКалендаряПриОткрытии = ?(ЗначениеЗаполнено(Объект.ПериодРегистрации), Объект.ПериодРегистрации, УправлениеНебольшойФирмойПовтИсп.ПолучитьТекущуюДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", УправлениеНебольшойФирмойКлиент.ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СуммаРасчетов.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура СуммаРасчетовПриИзменении(Элемент)
	
	ПересчитатьСуммуПоВалюте(Элементы.Сотрудники.ТекущиеДанные, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СуммаРасчетов.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура СотрудникиСуммаПлатежаПриИзменении(Элемент)
	
	ПересчитатьСуммуПоВалюте(Элементы.Сотрудники.ТекущиеДанные, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Нажатие поля ЦеныИВалюта.
//
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры // ЦеныИВалютаНажатие()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти