
&НаКлиенте
Перем ОбновитьПодчиненнуюСчетФактуру;

#Область ОбработчикиСобытийФормы

// Процедура - обработчик выбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактура.Форма.ФормаДокумента" Тогда
		СчетФактураТекст = ВыбранноеЗначение;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры 

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.ДокументОснование = Объект.Ссылка Тогда
				СчетФактураТекст = Параметр.Представление;
				Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(Параметр.Представление);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Контрагент = Параметр Тогда
			УстановитьВидимостьРеквизитовРасчетов();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры //ОбработкаОповещения()

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СозданПоКомандеИзФормыСписка") Тогда
		СозданПоКомандеИзФормыСписка = Параметры.СозданПоКомандеИзФормыСписка;
	Иначе
		СозданПоКомандеИзФормыСписка = Ложь;
	КонецЕсли;
	
	// Предопределенные значения
	ВидОперацииОплата = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;
	ВидОперацииВозврат = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю;
	
	УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	// Конец Предопределенные значения
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьСписокВыбораВидовПлатежныхКарт();
	КонецЕсли;
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если ДокументОбъект.ЭтоНовый()
	И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Если ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
			ДокументОбъект.Заполнить(Параметры.ДокументОснование);
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.БанковскийСчет)
			И ТипЗнч(Объект.БанковскийСчет.Владелец) <> Тип("СправочникСсылка.Организации") Тогда
			Объект.БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Организация)
			И ЗначениеЗаполнено(Объект.БанковскийСчет)
			И Объект.БанковскийСчет.Владелец <> Объект.Организация Тогда
			Объект.Организация = Объект.БанковскийСчет.Владелец;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Если ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
				Если Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств Тогда
					Объект.БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
				КонецЕсли;
			Иначе
				Объект.БанковскийСчет = Объект.Организация.БанковскийСчетПоУмолчанию;
				Объект.ВалютаДенежныхСредств = Объект.БанковскийСчет.ВалютаДенежныхСредств;
			КонецЕсли;
		Иначе
			Объект.ВалютаДенежныхСредств = Объект.БанковскийСчет.ВалютаДенежныхСредств;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент)
			И Объект.РасшифровкаПлатежа.Количество() > 0
			И НЕ ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
				Объект.РасшифровкаПлатежа[0].Договор = Объект.Контрагент.ДоговорПоУмолчанию;
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
				ДоговорВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов));
				Объект.РасшифровкаПлатежа[0].Курс = ?(ДоговорВалютаКурсКратность.Курс = 0, 1, ДоговорВалютаКурсКратность.Курс);
				Объект.РасшифровкаПлатежа[0].Кратность = ?(ДоговорВалютаКурсКратность.Кратность = 0, 1, ДоговорВалютаКурсКратность.Кратность);
			КонецЕсли;
		КонецЕсли;
		// Статья может прийти из шаблона документа и тогда её заполнять не нужно.
		Если НЕ (Параметры.ЗначенияЗаполнения.Свойство("ШаблонДокумента") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ШаблонДокумента) И
			Параметры.ЗначенияЗаполнения.Свойство("Статья") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Статья)) Тогда
			УстановитьСтатьюДДС();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) 
			ИЛИ Объект.Организация <> Объект.ЭквайринговыйТерминал.Организация Тогда
			Объект.ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(Объект.БанковскийСчет, Объект.Организация);
		КонецЕсли;
		
		ЭквайринговыйТерминалПриИзмененииНаСервере();
	КонецЕсли;
	
	// Установка реквизитов формы.
	Эквайрер = Объект.ЭквайринговыйТерминал.Эквайрер;
	ЭТИспользоватьБезПодключенияОборудования = Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.ВалютаУчета.Получить()));
	
	КурсВалютыУчета = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	КратностьВалютыУчета = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
	   И НЕ ЗначениеЗаполнено(Параметры.Основание)
	   И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	Иначе
		УстановитьВидимостьНалогообложениеНДС();
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Объект.Организация.СтавкаНДСПоУмолчанию;
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	ВидОперации = Объект.ВидОперации;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	Если ТипЗнч(Объект.ЭквайринговыйТерминал.Касса) = Тип("СправочникСсылка.Кассы") ТОгда
		КассаККМИспользоватьБезПодключенияОборудования = Истина;
	Иначе
		КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	КонецЕсли;
	
	ЭквайринговыйТерминалРеквизитФормы = Объект.ЭквайринговыйТерминал;
	
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(НайденныйСчетФактура,,СчетФактураТекст);
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НапечататьЧекДоступность = Ложь;
	
	Кнопка = Элементы.Найти("НапечататьЧек");
	Если Кнопка <> Неопределено Тогда
		
		НапечататьЧекДоступность = Истина;
		
		Кнопка.Доступность = НапечататьЧекДоступность;
		
	КонецЕсли;
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	// Заполнение табличной части при вводе документа из рабочего места.
	Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
	   И Параметры.ЗначенияЗаполнения.Свойство("ЗаполнитьРасшифровкаПлатежа")
	   И Параметры.ЗначенияЗаполнения.ЗаполнитьРасшифровкаПлатежа Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтрокаТабличнойЧасти.СтавкаНДС.Ставка + 100) / 100);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	УстановитьВидимостьРеквизитовРасчетов();
	УстановитьВидимостьИДоступность();
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// Остатки ДС и взаиморасчетов на форме
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	// Конец Остатки ДС и взаиморасчетов на форме
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
	УстановитьДоступностьКнопок();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьКнопок();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если СозданПоКомандеИзФормыСписка Тогда
		ПараметрыОповещения = Новый Структура("Ссылка", Объект.Ссылка);
		Оповестить("Запись_ОперацияПоПлатежнымКартам", ПараметрыОповещения);
	КонецЕсли;
	
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	
	// Оповещенее об оплате.
	ОповеститьОбОплатеСчета = Ложь;
	ОповеститьОбОплатеЗаказа = Ложь;
	
	Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату)
		);
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ)
		);
	КонецЦикла;
	
	Если ОповеститьОбОплатеСчета Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплату"));
	КонецЕсли;
	
	Если ОповеститьОбОплатеЗаказа Тогда
		Оповестить("ОповещениеОбОплатеЗаказа");
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	//Если НЕ СчетФактураТекст = "Ввести счет-фактуру"
	Если НЕ СчетФактураТекст = ""
		И ?(НЕ ОбновитьПодчиненнуюСчетФактуру = Неопределено, ОбновитьПодчиненнуюСчетФактуру, Ложь) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект),
			НСтр("ru = 'В документе были произведены изменения. Требуется ли повторно заполнить подчиненный Счет-фактуру?'"),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПослеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УправлениеНебольшойФирмойСервер.ИзменитьПодчиненнуюСчетФактуру(Объект.Ссылка);
		Оповестить("ОбновитьДокументИБПослеЗаполнения");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
// В процедуре устанавливается текущая страница в зависимости от операции.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущуюСтраницу();
	
	ЗаполнитьТелефонАдресЭП();
	УстановитьДоступностьТелефонАдресЭП();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриОткрытии()

//Процедура - обработчик события формы ПередЗаписью
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ДокументОперацияПоПлатежнымКартам");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбновитьПодчиненнуюСчетФактуру = Модифицированность;
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		ПроверитьСоответствиеДоговораУсловиямДокумента(Объект.РасшифровкаПлатежа, ТекстСообщения, Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			Сообщение.Сообщить();
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ВидОперации = ВидОперацииВозврат Тогда
			НеСоответствуютРеквизитыОплаты = Ложь;
			Если ТипЗнч(Объект.ОперацияПоПлатежнымКартамШапка) = Тип("ДокументСсылка.ЧекККМ") Тогда
				Если Объект.ЭквайринговыйТерминал <> Объект.ОперацияПоПлатежнымКартамШапка.ЭквайринговыйТерминал Тогда
					НеСоответствуютРеквизитыОплаты = Истина;
				Иначе
					ПараметрыПоиска = Новый Структура("ВидПлатежнойКарты, НомерПлатежнойКарты", Объект.ВидПлатежнойКарты, Объект.НомерПлатежнойКарты);
					
					МассивСтрок = Объект.ОперацияПоПлатежнымКартамШапка.ОплатаПлатежнымиКартами.НайтиСтроки(ПараметрыПоиска);
					Если МассивСтрок.Количество() = 0 Тогда
						НеСоответствуютРеквизитыОплаты = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Объект.ВидПлатежнойКарты <> Объект.ОперацияПоПлатежнымКартамШапка.ВидПлатежнойКарты ИЛИ
					Объект.НомерПлатежнойКарты <> Объект.ОперацияПоПлатежнымКартамШапка.НомерПлатежнойКарты ИЛИ
					Объект.ЭквайринговыйТерминал <> Объект.ОперацияПоПлатежнымКартамШапка.ЭквайринговыйТерминал Тогда
					НеСоответствуютРеквизитыОплаты = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НеСоответствуютРеквизитыОплаты Тогда
				Отказ = Истина;
				
				ТекстСообщения = НСтр("ru = 'В текущем документы указаны реквизиты оплаты, которые не совпадают с реквзитами в документе оплаты. Проверьте эквайринговый терминал, вид и номер платежной карты.'");
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
				Сообщение.Сообщить();
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтаФорма);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
КонецПроцедуры

// Процедура обработчик события ОбработкаПроверкиЗаполненияНаСервере.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СчетФактураИОснование

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеНебольшойФирмойКлиент.ОткрытьСчетФактуру(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДляВыбораДокументаОснования()
	
	СписокОснований = Новый СписокЗначений;
		
	Если ПолучитьФункциональнуюОпцию("УчетВнеоборотныхАктивов") Тогда
		СписокОснований.Добавить("Документ.ПередачаВА.ФормаВыбора", "Продажа имущества");
	КонецЕсли;
	
	СписокОснований.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", "Расходная накладная");
	СписокОснований.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", "Приходная накладная");
	СписокОснований.Добавить("Документ.АктВыполненныхРабот.ФормаВыбора", "Акт выполненных работ");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
		СписокОснований.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", "Прием и передача в ремонт");
	КонецЕсли;
	СписокОснований.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", "Заказ покупателя");
	СписокОснований.Добавить("Документ.ОперацияПоПлатежнымКартам.ФормаВыбора", "Операция по платежным картам");
	СписокОснований.Добавить("Документ.СчетНаОплату.ФормаВыбора", "Счет на оплату");
	СписокОснований.Добавить("Документ.ПоступлениеДСПлан.ФормаВыбора", "Поступление денег (план)");
	
	СписокОснований.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат СписокОснований;
	
КонецФункции

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		//Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, ПолучитьСписокДляВыбораДокументаОснования(), Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) тогда
			возврат;
		КонецЕсли;
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоТипу(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого элОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(элОтбора.Имя,"Отбор.","");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, элОтбора.Значение);
		КонецЦикла;
		Если СтрНайти(ВыбИмяФормы.Значение, "Документ.ПриходнаяНакладная.") <> 0 Тогда
			ИмяПоляОтбора = "ВидОперации";
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"));
		КонецЕсли;
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ПараметрыОткрытияФормы = Новый Структура("Отбор", СтруктураПараметровОтбора);
		ОткрытьФорму(ВыбИмяФормы.Значение, ПараметрыОткрытияФормы, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

#КонецОбласти

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация, Объект.Дата);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда 
		
		Объект.РасшифровкаПлатежа[0].Договор = СтруктураДанные.Договор;
		
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
			Объект.РасшифровкаПлатежа[0].Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс
			);
			Объект.РасшифровкаПлатежа[0].Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
			);
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа[0].Курс = ?(
			Объект.РасшифровкаПлатежа[0].Курс = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Курс
		);
		Объект.РасшифровкаПлатежа[0].Кратность = ?(
			Объект.РасшифровкаПлатежа[0].Кратность = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Кратность
		);
		
		Объект.РасшифровкаПлатежа[0].СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа,
			Курс,
			Объект.РасшифровкаПлатежа[0].Курс,
			Кратность,
			Объект.РасшифровкаПлатежа[0].Кратность
		);
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события ВидОперацииПриИзменении.
// Управляет страницами при изменении вида операции документа.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперации <> ВидОперацииПередИзменением Тогда
		УстановитьТекущуюСтраницу();
		ОчиститьРеквизитыНеОтносящиесяКОперации();
		ВидОперацииПриИзмененииНаСервере();
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Изменился курс валюты кассы. Пересчитать суммы документа?'");
		ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	
	Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств;
	
	Объект.ЭквайринговыйТерминал = СтруктураДанные.ЭквайринговыйТерминал;
	ЭквайринговыйТерминалПриИзмененииНаСервере();
	БанковскийСчетПриИзменении();
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Объект.РасшифровкаПлатежа[0].Договор = Неопределено;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Изменилась валюта банковского счета. Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Валюта
// Осуществляет пересчет табличной части РасшифровкаПлатежа.
//
&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеВалютаДенежныхСредствПриИзменении(
		Объект.Дата,
		Объект.ВалютаДенежныхСредств
	);
	
	ТекстСообщения = НСтр("ru = 'Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
	
КонецПроцедуры // ВалютаДенежныхСредствПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаДокумента.
//
&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
	
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	РассчитатьСуммуУчета();
	РассчитатьСуммуКомиссии();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода НалогообложениеНДС.
//
&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
КонецПроцедуры // НалогообложениеНДСПриИзменении()

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ВалютаДенежныхСредствПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеБанковскийСчетПриИзменении(Дата, БанковскийСчет)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", БанковскийСчет.ВалютаДенежныхСредств)
		)
	);
	СтруктураДанные.Вставить(
		"ВалютаДенежныхСредств",
		БанковскийСчет.ВалютаДенежныхСредств
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеБанковскийСчетПриИзменении()

// Процедура - обработчик события ПриИзменении поля ЭквайринговыйТерминал на сервере.
//
&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	Объект.ЭквайрерБеретКомиссиюЗаВозвратДС = Объект.ЭквайринговыйТерминал.ЭквайрерБеретКомиссиюЗаВозвратДС;
	Объект.БанковскийСчет = Объект.ЭквайринговыйТерминал.БанковскийСчетЭквайринг;
	ЭТКасса = Объект.ЭквайринговыйТерминал.Касса;
	Если ТипЗнч(ЭТКасса) = Тип("СправочникСсылка.КассыККМ") ТОгда
		Объект.КассаККМ = Объект.ЭквайринговыйТерминал.Касса;
		КассаККМИспользоватьБезПодключенияОборудования = Объект.КассаККМ.ИспользоватьБезПодключенияОборудования;
	Иначе
		Объект.Касса = Объект.ЭквайринговыйТерминал.Касса;
		КассаККМИспользоватьБезПодключенияОборудования = Истина;
	КонецЕсли;
	
	Эквайрер = Объект.ЭквайринговыйТерминал.Эквайрер;
	ЭТИспользоватьБезПодключенияОборудования = Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования;
	
	ПолучитьСсылкиНаОборудование();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	
КонецПроцедуры // ЭквайринговыйТерминалПриИзмененииНаСервере()

// Процедура - обработчик события ПриИзменении поля ввода ЭквайринговыйТерминал.
//
&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	ЭквайринговыйТерминалРеквизитФормыПередИзменением = ЭквайринговыйТерминалРеквизитФормы;
	ЭквайринговыйТерминалРеквизитФормы = Объект.ЭквайринговыйТерминал;
	
	Если ЭквайринговыйТерминалРеквизитФормы <> ЭквайринговыйТерминалРеквизитФормыПередИзменением Тогда
		ЭквайринговыйТерминалПриИзмененииНаСервере();
		ВидПлатежнойКартыПриИзмененииФрагмент();
		БанковскийСчетПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода БанковскийСчет.
//
&НаКлиенте
Процедура БанковскийСчетПриИзменении()
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	
	СтруктураДанные = ПолучитьДанныеБанковскийСчетПриИзменении(
		Объект.Дата,
		Объект.БанковскийСчет
	);
	
	Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств;
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Изменилась валюта банковского счета. Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
	
КонецПроцедуры // БанковскийСчетПриИзменении()

&НаКлиенте
Процедура ОстатокВзаиморасчетовНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "ОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

// Процедура - обработчик события ПередУдалением табличной части РасшифровкаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаПередУдалением()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаДоговор.
// Устанавливает курс и кратность валюты договора.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКонтрагента();
	
КонецПроцедуры // РасшифровкаПлатежаДоговорПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода РасшифровкаПлатежаДоговор.
// Устанавливает курс и кратность валюты договора.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораДоговораКонтрагента(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаВидРасчетов.
// Очищает реквизит документ если тип расчетов - "Аванс".
//
&НаКлиенте
Процедура РасшифровкаПлатежаПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя") Тогда
		Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.ДокументПланирования = Неопределено;
		КонецЕсли;
	Иначе
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов признак аванса всегда установлен!'"));
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов нельзя установить признак аванса!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаПризнакАвансаПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода РасшифровкаПлатежаДокумент.
// Передает в параметры текущее значение реквизита.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя") Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для вида расчета с признаком ""Аванс"" документом расчетов будет текущий!'"));
		
	Иначе
		
		ЭтоРасчетыСПокупателями = Истина;
		
		СтруктураОтбор = Новый Структура();
		СтруктураОтбор.Вставить("Контрагент", Объект.Контрагент);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтруктураОтбор.Вставить("Договор", СтрокаТабличнойЧасти.Договор);
		КонецЕсли;
		Если НЕ УчетПоКомпании Тогда
			СтруктураОтбор.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		
		СтруктураПараметры = Новый Структура("Отбор, ЭтоРасчетыСПокупателями, ТипДокумента",
			СтруктураОтбор,
			ЭтоРасчетыСПокупателями,
			ТипЗнч(Объект.Ссылка)
		);
		
		ОткрытьФорму("ОбщаяФорма.ФормаВыборДокументаРасчетов", СтруктураПараметры, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаДокументНачалоВыбора()

// Процедура - обработчик события ОбработкаВыбора поля ввода РасшифровкаПлатежаДокумент.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыборДокументаРасчетов(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля вв РасшифровкаПлатежаСуммаРасчетов.
// Расчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
		РассчитатьСуммуКомиссии();
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаСуммаРасчетовПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаКурс.
// Расчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаКратность.
// Расчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаКратностьПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКратностьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаПлатежа.
// Расчитывает курс и кратность валюты расчетов и сумму НДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
	);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСтавкаНДС.
// Расчитывает сумму НДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РасшифровкаПлатежаСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаДокумент.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииДокументаРасчетов();
	
КонецПроцедуры // РасшифровкаПлатежаДокументПриИзменении() 

// Процедура - обработчик события ПриОкончанииРедактирования табличной части РасшифровкаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Объект.СуммаКомиссииПоДоговору = Объект.ПроцентКомиссии * Объект.СуммаДокумента / 100;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВидПлатежнойКарты.
//
&НаКлиенте
Процедура ВидПлатежнойКартыПриИзменении(Элемент)
	
	ВидПлатежнойКартыПриИзмененииФрагмент();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВидПлатежнойКарты.
//
&НаКлиенте
Процедура ВидПлатежнойКартыПриИзмененииФрагмент()
	
	МСтрок = ТаблицаВидовКартИПроцентовКомиссии.НайтиСтроки(Новый Структура("ВидПлатежнойКарты", Объект.ВидПлатежнойКарты));
	Если МСтрок.Количество() > 0 Тогда
		Объект.ПроцентКомиссии = МСтрок[0].ПроцентКомиссии;
		Объект.СуммаКомиссииПоДоговору = МСтрок[0].ПроцентКомиссии * Объект.СуммаДокумента / 100;
	Иначе
		Объект.ПроцентКомиссии = 0;
		Объект.СуммаКомиссииПоДоговору = 0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ПроцентКомиссии.
//
&НаКлиенте
Процедура ПроцентКомиссииПриИзменении(Элемент)
	
	РассчитатьСуммуКомиссии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "НапечататьЧек" командной панели.
//
&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0
	И НЕ КассаККМИспользоватьБезПодключенияОборудования Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьПредупреждение = Ложь;
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект, ПоказыватьПредупреждение) Тогда
		Если ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;	
		
	Если НЕ ИспользоватьПодключаемоеОборудование 
		ИЛИ КассаККМИспользоватьБезПодключенияОборудования Тогда
		// Внешнее оборудование не используется
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли; 		
		Модифицированность = Истина; 		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));		
		Возврат;
	КонецЕсли;
		
	ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
		ФискальныйРегистратор,
		Неопределено);

	Если ИдентификаторУстройстваФР <> Неопределено Тогда
		
		ЭтотОбъект.Доступность = Ложь;
		
		ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека();
		Если ОбщиеПараметры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ОбщиеПараметры.ДатаВремя = ТекущаяДата();
		
		Контекст = Новый Структура();
		
		Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
		ПослеОткрытияЧека     = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, Контекст);
		ПослеОшибкиПечатиЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОшибкиПечатиЧека", ЭтотОбъект, Контекст);
		
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
			Оповещение, 
			УникальныйИдентификатор, 
			ОбщиеПараметры, 
			ИдентификаторУстройстваФР,
			,
			ПослеОткрытияЧека,
			ПослеОшибкиПечатиЧека
		);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
			
КонецПроцедуры // НапечататьЧек()

&НаСервереБезКонтекста
Функция ПолучитьПолноеНаименованиеКонтрагентаДляПечати(Контрагент)
	
	Возврат Контрагент.НаименованиеПолное
	
КонецФункции

// Подготовка таблицы товаров
&НаСервере
Процедура ДополнитьТоварамиПараметрыПриПробитииЧека(ДокументОбъект, ОбщиеПараметры)
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) 
		И (ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ПередачаВА")
		ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная")
		ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ПриемИПередачаВРемонт")) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ДокументОснование, "СуммаДокумента, ВалютаДокумента");
		Если ДокументОбъект.ВалютаДенежныхСредств = СтруктураРеквизитов.ВалютаДокумента
			И ДокументОбъект.СуммаДокумента = СтруктураРеквизитов.СуммаДокумента Тогда
			Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
				СтруктураДопРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ДокументОснование, "ОписаниеРемонта, СтавкаНДС");
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтруктураДопРеквизитов.СтавкаНДС); 
				СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
				СтрокаПозицииЧека.Наименование = СтруктураДопРеквизитов.ОписаниеРемонта;
				СтрокаПозицииЧека.Количество   = 1;
				СтрокаПозицииЧека.Цена         = СтруктураРеквизитов.СуммаДокумента; //  5 - Цена за позицию без скидки;
				СтрокаПозицииЧека.Сумма        = СтруктураРеквизитов.СуммаДокумента;
				СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
				СтрокаПозицииЧека.НомерСекции  = 1;
				ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
			ИначеЕсли ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				ДополнитьТоварамиПоДокументу(ДокументОбъект.ДокументОснование, ОбщиеПараметры, "РаботыИУслуги");
			ИначеЕсли ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ПередачаВА") Тогда
				ДополнитьТоварамиПоДокументу(ДокументОбъект.ДокументОснование, ОбщиеПараметры, "ВнеоборотныеАктивы");
			ИначеЕсли ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
				И ДокументОбъект.ДокументОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
				ДополнитьТоварамиПоДокументу(ДокументОбъект.ДокументОснование, ОбщиеПараметры, "Работы");
				ДополнитьТоварамиПоДокументу(ДокументОбъект.ДокументОснование, ОбщиеПараметры);
			Иначе
				ДополнитьТоварамиПоДокументу(ДокументОбъект.ДокументОснование, ОбщиеПараметры);
			КонецЕсли;
		Иначе
			ДополнитьТоварамиПоТаблицеДокумента(ДокументОбъект, ОбщиеПараметры);
		КонецЕсли;
	Иначе
		ДополнитьТоварамиПоТаблицеДокумента(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТоварамиПоТаблицеДокумента(ДокументОбъект, ОбщиеПараметры)
	
	ТабличнаяЧасть = ДокументОбъект.РасшифровкаПлатежа;
	Если ТабличнаяЧасть.Количество() = 1 
		И ЗначениеЗаполнено(ТабличнаяЧасть[0].Документ) 
		И (ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.ПередачаВА")
		ИЛИ ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.РасходнаяНакладная")
		ИЛИ ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.ПриемИПередачаВРемонт"))
		И ТабличнаяЧасть[0].СуммаПлатежа = ДокументОбъект.СуммаДокумента
		И ТабличнаяЧасть[0].СуммаПлатежа = ТабличнаяЧасть[0].Документ.СуммаДокумента Тогда
		Если ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ДополнитьТоварамиПоДокументу(ТабличнаяЧасть[0].Документ, ОбщиеПараметры, "РаботыИУслуги");
		ИначеЕсли ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.ПередачаВА") Тогда
			ДополнитьТоварамиПоДокументу(ТабличнаяЧасть[0].Документ, ОбщиеПараметры, "ВнеоборотныеАктивы");
		ИначеЕсли ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
			СтруктураДопРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТабличнаяЧасть[0].Документ, "ОписаниеРемонта, СтавкаНДС");
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтруктураДопРеквизитов.СтавкаНДС); 
			СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
			СтрокаПозицииЧека.Наименование = СтруктураДопРеквизитов.ОписаниеРемонта;
			СтрокаПозицииЧека.Количество   = 1;
			СтрокаПозицииЧека.Цена         = ТабличнаяЧасть[0].СуммаПлатежа; //  5 - Цена за позицию без скидки;
			СтрокаПозицииЧека.Сумма        = ТабличнаяЧасть[0].СуммаПлатежа;
			СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
			СтрокаПозицииЧека.НомерСекции  = 1;
			ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		ИначеЕсли ТипЗнч(ТабличнаяЧасть[0].Документ) = Тип("ДокументСсылка.ЗаказПокупателя")
			И ТабличнаяЧасть[0].Документ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ДополнитьТоварамиПоДокументу(ТабличнаяЧасть[0].Документ, ОбщиеПараметры, "Работы");
			ДополнитьТоварамиПоДокументу(ТабличнаяЧасть[0].Документ, ОбщиеПараметры);
		Иначе
			ДополнитьТоварамиПоДокументу(ТабличнаяЧасть[0].Документ, ОбщиеПараметры);
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть.Количество() = 1 
		И ЗначениеЗаполнено(ТабличнаяЧасть[0].Заказ)
		И ТипЗнч(ТабличнаяЧасть[0].Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ТабличнаяЧасть[0].СуммаПлатежа = ДокументОбъект.СуммаДокумента
		И ТабличнаяЧасть[0].СуммаПлатежа = ТабличнаяЧасть[0].Заказ.СуммаДокумента Тогда
		Если ТабличнаяЧасть[0].Заказ.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ДополнитьТоварамиПоДокументу(ТабличнаяЧасть[0].Заказ, ОбщиеПараметры, "Работы");
		КонецЕсли;
		ДополнитьТоварамиПоДокументу(ТабличнаяЧасть[0].Заказ, ОбщиеПараметры);
	ИначеЕсли ТабличнаяЧасть.Количество() = 1 
		И ЗначениеЗаполнено(ТабличнаяЧасть[0].СчетНаОплату)
		И ТабличнаяЧасть[0].СуммаПлатежа = ДокументОбъект.СуммаДокумента
		И ТабличнаяЧасть[0].СуммаПлатежа = ТабличнаяЧасть[0].СчетНаОплату.СуммаДокумента Тогда
		ДополнитьТоварамиПоДокументу(ТабличнаяЧасть[0].СчетНаОплату, ОбщиеПараметры);
	Иначе
		ДополнитьАвансамиИОплатамиПоТаблицеДокумента(ДокументОбъект, ОбщиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьАвансамиИОплатамиПоТаблицеДокумента(ДокументОбъект, ОбщиеПараметры)
	
	ПринятоОт = ПолучитьПолноеНаименованиеКонтрагентаДляПечати(Объект.Контрагент);
	
	НаименованиеАванса = 
	НСтр("ru = 'Аванс от: '")
	+ ПринятоОт
	+ НСтр("ru = ', Основание: '")
	+ ДокументОбъект.ДокументОснование;
	
	Для каждого ТекСтрока Из ДокументОбъект.РасшифровкаПлатежа Цикл
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекСтрока.СтавкаНДС); 
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		Если ТекСтрока.ПризнакАванса Тогда 
			СтрокаПозицииЧека.Наименование = НаименованиеАванса;
		Иначе
			НаименованиеТовара = 
			НСтр("ru = 'Оплата от: '")
			+ ПринятоОт
			+ НСтр("ru = ', Основание: '")
			+ ТекСтрока.Документ;
			СтрокаПозицииЧека.Наименование = НаименованиеТовара;
		КонецЕсли;
		СтрокаПозицииЧека.Количество   = 1;
		СтрокаПозицииЧека.Цена         = ТекСтрока.СуммаПлатежа; //  5 - Цена за позицию без скидки;
		СтрокаПозицииЧека.Сумма        = ТекСтрока.СуммаПлатежа;
		СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
		СтрокаПозицииЧека.НомерСекции  = 2;
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТоварамиПоДокументу(ДокументОбъект, ОбщиеПараметры, ТабличнаяЧасть = "Запасы")
	
	Для Каждого СтрокаТЧ Из ДокументОбъект[ТабличнаяЧасть] Цикл
		
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТЧ.СтавкаНДС);
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека(); 
		
		Если ТабличнаяЧасть = "ВнеоборотныеАктивы" Тогда
			СтрокаПозицииЧека.Наименование = Строка(СтрокаТЧ.ВнеоборотныйАктив);
			СтрокаПозицииЧека.Количество = 1;
			СтрокаПозицииЧека.Цена = СтрокаТЧ.Всего;
		ИначеЕсли ТабличнаяЧасть = "Расходы" Тогда
			СтрокаПозицииЧека.Наименование = Строка(СтрокаТЧ.Номенклатура);
			СтрокаПозицииЧека.Количество = СтрокаТЧ.Количество;
			СтрокаПозицииЧека.Цена = СтрокаТЧ.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС / ?(СтрокаТЧ.Количество = 0, 1, СтрокаТЧ.Количество)); //  5 - Цена за позицию без скидки;
		Иначе
			СтрокаПозицииЧека.Наименование = Строка(СтрокаТЧ.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + Строка(СтрокаТЧ.Характеристика) + ")", "");
			СтрокаПозицииЧека.Количество = СтрокаТЧ.Количество;
			СтрокаПозицииЧека.Цена = СтрокаТЧ.Цена + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС / ?(СтрокаТЧ.Количество = 0, 1, СтрокаТЧ.Количество)); //  5 - Цена за позицию без скидки;
		КонецЕсли;
		
		СтрокаПозицииЧека.Сумма        = СтрокаТЧ.Всего;
		СтрокаПозицииЧека.НомерСекции  = 1;
		СтрокаПозицииЧека.СтавкаНДС    = СтавкаНДС;
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека()
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	ДополнитьТоварамиПараметрыПриПробитииЧека(Объект, ОбщиеПараметры);
	
	// Общие параметры чека
	СтруктураРеквизитов = Новый Структура("НаименованиеПолное, ИНН, КПП");
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С, ЭлектронныйЧекEmailПередаютсяПрограммой1С, СерийныйНомер");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.КассаККМ, СтруктураРеквизитов);
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор);
	
	ОбщиеПараметры.ТипРасчета = ?(Объект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств);
		
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассира;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	АдресМагазина = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.КодСистемыНалогообложения = РозничныеПродажиСервер.ПолучитьКодСистемыНалогообложения(
		Объект.Организация,
		,
		Объект.Дата);
		
	СтрокаОплаты = Новый Структура();
	СтрокаОплаты.Вставить("ТипОплаты", 1);
	СтрокаОплаты.Вставить("Сумма", Объект.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	Если ПараметрыВыполнения.НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСмены = ПараметрыВыполнения.НомерСмены;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧека = ПараметрыВыполнения.НомерЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт

	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	ШапкаЧека.НомерЧека = ШапкаЧека.НомерЧека + 1000000;
	
	Если ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств") Тогда
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств");
	Иначе
		ШапкаЧека.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
		КонецЕсли;
		
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Выполнить команды Подбор.
// Открывает форму подбора долгообразующих документов.
//
&НаКлиенте
Процедура Подбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале валюту!'"));
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкаПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресРасшифровкаПлатежаВХранилище,
		|Компания,
		|Дата,
		|Контрагент,
		|Ссылка,
		|ВидОперации,
		|ВалютаДенежныхСредств,
		|СуммаДокумента",
		АдресРасшифровкаПлатежаВХранилище,
		Компания,
		Объект.Дата,
		Объект.Контрагент,
		Объект.Ссылка,
		Объект.ВидОперации,
		Объект.ВалютаДенежныхСредств,
		Объект.СуммаДокумента
	);
	
	Результат = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя") Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолговПокупателей", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект, Новый Структура("АдресРасшифровкаПлатежаВХранилище", АдресРасшифровкаПлатежаВХранилище)));
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолговПоставщикам", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект, Новый Структура("АдресРасшифровкаПлатежаВХранилище", АдресРасшифровкаПлатежаВХранилище)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресРасшифровкаПлатежаВХранилище = ДополнительныеПараметры.АдресРасшифровкаПлатежаВХранилище;
	
	Если Результат = КодВозвратаДиалога.OK Тогда
		
		ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище);
		ИмяТабличнойЧасти = "РасшифровкаПлатежа";
		Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.СтавкаНДС) Тогда
				СтрокаРасшифровкаПлатежа.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			РассчитатьСуммуПлатежа(СтрокаРасшифровкаПлатежа);
		КонецЦикла;
		
		УстановитьТекущуюСтраницу();
		
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // Подбор()

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" командной панели
// табличного поля.
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено,Нстр("ru='Не выбран документ основание!'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОплатаПлатежнымиКартами(ДокументОснование)
	
	СписокОплатаКартами = Новый СписокЗначений;
	Сч = 0;
	
	Для Каждого ОплатаПлатежнойКартой Из ДокументОснование.ОплатаПлатежнымиКартами Цикл
		Сч = Сч + 1;
		Текст = ""+Сч+". "+ОплатаПлатежнойКартой.ВидПлатежнойКарты+" "+ОплатаПлатежнойКартой.НомерПлатежнойКарты+". Сумма = "+ОплатаПлатежнойКартой.Сумма;
		СписокОплатаКартами.Добавить(Сч-1, Текст);
	КонецЦикла;
	
	Возврат СписокОплатаКартами;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОрганизацияДоИзменения = Объект.Организация;
		
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		
		Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			Объект.РасшифровкаПлатежа.Добавить();
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		ВидОперацииПриИзменении(Элементы.ВидОперации);
		Если ОрганизацияДоИзменения <> Объект.Организация Тогда
			ОрганизацияПриИзменении(Элементы.Организация);
		Иначе
			ЭквайринговыйТерминалПриИзменении(Элементы.ЭквайринговыйТерминал);
		КонецЕсли;
		ДатаДокумента = Объект.Дата;
		
		РассчитатьСуммуКомиссии();
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура ЗаполнитьПоОперацииОплатыЗавершениеПослеВыбораСтрокиОплаты(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	Иначе
		ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ЗаполнитьПоОперацииОплатыЗавершениеФрагмент(ДополнительныеПараметры, ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОперацииОплаты" командной панели
// табличного поля.
//
&НаКлиенте
Процедура ЗаполнитьПоОперацииОплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОперацияПоПлатежнымКартамШапка) Тогда
		ПоказатьПредупреждение(Неопределено,Нстр("ru='Не выбран документ оплаты!'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОперацииОплатыЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по документу оплаты! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОперацииОплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ТипЗнч(Объект.ОперацияПоПлатежнымКартамШапка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			СписокОплатаПлатежнымиКартами = ПолучитьСписокОплатаПлатежнымиКартами(Объект.ОперацияПоПлатежнымКартамШапка);
			
			Если СписокОплатаПлатежнымиКартами.Количество() = 0 Тогда
				ПоказатьПредупреждение(Неопределено, "В чеке ККМ нет оплаты платежными картами!");
				Возврат;
			ИначеЕсли СписокОплатаПлатежнымиКартами.Количество() = 1 Тогда
				ЗаполнитьПоОперацииОплатыЗавершениеФрагмент(ДополнительныеПараметры);
			Иначе
				СписокОплатаПлатежнымиКартами.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ЗаполнитьПоОперацииОплатыЗавершениеПослеВыбораСтрокиОплаты", ЭтотОбъект), "Выберите строку оплаты");
			КонецЕсли;
		Иначе
			ЗаполнитьПоОперацииОплатыЗавершениеФрагмент(ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОперацииОплатыЗавершениеФрагмент(ДополнительныеПараметры, НомерСтрокиОплатыКартамиВЧекеККМ = 0) Экспорт
	
	Если ТипЗнч(Объект.ОперацияПоПлатежнымКартамШапка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		СтруктураДляЗаполнения = Новый Структура("Документ, НомерСтроки", Объект.ОперацияПоПлатежнымКартамШапка, НомерСтрокиОплатыКартамиВЧекеККМ);
		ЭтоВозвратНаОснованииПрихода = ЗаполнитьПоДокументу(СтруктураДляЗаполнения);
	Иначе
		ЭтоВозвратНаОснованииПрихода = ЗаполнитьПоДокументу(Объект.ОперацияПоПлатежнымКартамШапка);
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли;
	
	Если ВидОперации = ВидОперацииОплата Тогда
		ВидОперации = Неопределено;
		ВидОперацииПриИзменении(Элементы.ВидОперации);
	КонецЕсли;
	ЭквайринговыйТерминалПриИзменении(Элементы.ЭквайринговыйТерминал);
	
	Если ЭтоВозвратНаОснованииПрихода Тогда
		ВидПлатежнойКартыПриИзменении(Элементы.ВидПлатежнойКарты);
	КонецЕсли;
		
	ДатаДокумента = Объект.Дата;
	
	СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
	
КонецПроцедуры // ЗаполнитьПоОснованию()

// Процедура - обработчик команды ЗаполнитьРасшифровку.
//
&НаКлиенте
Процедура ЗаполнитьРасшифровку(Команда)
	
	Если Объект.СуммаДокумента = 0 Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Укажите вначале сумму документа.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале валюту!'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРасшифровкуЗавершение", ЭтотОбъект), 
		НСтр("ru='Расшифровка будет полностью перезаполнена. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя") Тогда
		ЗаполнитьРасшифровкуПлатежа();
	КонецЕсли;
	
	УстановитьТекущуюСтраницу();

КонецПроцедуры // ЗаполнитьРасшифровку()

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма документа
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
&НаКлиенте
Функция ПроверитьВозможностьПечатиЧека(ПоказыватьПредупреждение = Ложь) Экспорт
	
	ПечататьЧек = Истина;
	
	// Если объект модифицирован - выполним проведение.
	Если Модифицированность Тогда
		
		Попытка
			Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
				Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
					ПечататьЧек = Ложь;
				КонецЕсли;
			Иначе
				Если НЕ Объект.Проведен Тогда
					Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись)) Тогда
						ПечататьЧек = Ложь;
					КонецЕсли;
				Иначе
					Если НЕ Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
						ПечататьЧек = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			
			ПоказыватьПредупреждение = Истина;
			ПечататьЧек = Ложь;
		КонецПопытки;
			
	КонецЕсли;
	
	Возврат ПечататьЧек;

КонецФункции // ПроверитьВозможностьПечатиЧека()

// Процедура - обработчик команды ДобавитьОплатуКартой.
//
&НаКлиенте
Процедура ДобавитьОплатуКартой(Команда)
	
	Если ПустаяСтрока(Объект.НомерПлатежнойКарты) Тогда
		ДобавитьОплатуКартойПослеОтветаНаВопрос(КодВозвратаДиалога.Да);
	Иначе
		ОписаниеОповещенияДобавитьОплатуКартой = Новый ОписаниеОповещения("ДобавитьОплатуКартойПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияДобавитьОплатуКартой, НСтр("ru = 'Номер карты уже заполнен. 
		|Продолжить оформление оплаты картой с использованием эквайрингового терминала?'"), РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНеобходимыеДанныеДляРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ)
	
	ПараметрыЭТ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыЭТ(Объект.ЭквайринговыйТерминал);
	ПараметрыЭТ.ИспользоватьБезПодключенияОборудования = ПараметрыЭТ.ИспользоватьБезПодключенияОборудования ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
	ПараметрыКассыККМ = УправлениеНебольшойФирмойПовтИсп.ПолучитьПараметрыКассыККМ(Справочники.КассыККМ.ПустаяСсылка());
	ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования ИЛИ НЕ ИспользоватьПодключаемоеОборудование;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартойПослеОтветаНаВопрос(Значение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Перем ПараметрыКассыККМ, ПараметрыЭТ;
	
	Если Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьВозможностьПечатиЧека(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьНеобходимыеДанныеДляРаботыСКартой(ПараметрыКассыККМ, ПараметрыЭТ);
	
	// Предварительно авторизуем операцию.
	ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Объект.СуммаДокумента, Объект.СуммаДокумента);
	ПараметрыФормы.Вставить("ЗапретРедактированияСуммы", Истина);
	Если ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
		ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("СписокТиповКарт", Новый СписокЗначений());
	Индекс = 0;
	Для Каждого ВидКарты Из Элементы.ВидПлатежнойКарты.СписокВыбора Цикл
		ПараметрыФормы.СписокТиповКарт.Добавить(Индекс, ВидКарты.Значение);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПараметрДействия = Новый Структура;
	ПараметрДействия.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ПараметрДействия.Вставить("ПараметрыЭТ", ПараметрыЭТ);
	ПараметрДействия.Вставить("СуммаОперации", 0);
	ПараметрДействия.Вставить("НомерКарты", "");
	ПараметрДействия.Вставить("НомерСсылкиОперации", "");
	ПараметрДействия.Вставить("НомерЧекаЭТ", 0);
	ПараметрДействия.Вставить("НомерЧекаККМ", Объект.Номер);
	ПараметрДействия.Вставить("СтрокаСлипЧека", "");
	ПараметрДействия.Вставить("ТипКарты", Неопределено);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя") Тогда
		ПараметрДействия.Вставить("ТипТранзакции", "AuthorizeSales");
	Иначе
		ПараметрДействия.Вставить("ТипТранзакции", "AuthorizeRefund");
		ПараметрыФормы.Вставить("УказатьДополнительныеДанные", Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТ", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы,,,,, ОбработчикОповещения, Режим); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТ(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если ТипЗнч(РезультатОткрытияФормы) = Тип("Структура") Тогда
		
		ПараметрДействия.СуммаОперации = РезультатОткрытияФормы.Сумма;
		ПараметрДействия.ТипКарты			 = РезультатОткрытияФормы.ТипКарты;
		
		Если ПараметрДействия.ПараметрыЭТ.ИспользоватьБезПодключенияОборудования Тогда
			
			ПараметрДействия.НомерКарты          = РезультатОткрытияФормы.НомерКарты;
			ПараметрДействия.НомерСсылкиОперации = РезультатОткрытияФормы.СсылочныйНомер;
			ПараметрДействия.НомерЧекаЭТ         = РезультатОткрытияФормы.НомерЧека;
			
			ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'") + " "+ ПараметрДействия.СуммаОперации  + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Символы.ПС;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
			
			ДополнительныеПараметры = Новый Структура; 
			ДополнительныеПараметры.Вставить("ПараметрДействия", ПараметрДействия);
			ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросУспешностиОплатыКартой", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ЭтаФорма.Доступность = Ложь;
			
			ПараметрыОперации = МенеджерОборудованияКлиент.ПараметрыВыполненияЭквайринговойОперации();
			ПараметрыОперации.ТипТранзакции  = ПараметрДействия.ТипТранзакции;
			ПараметрыОперации.СуммаОперации  = РезультатОткрытияФормы.Сумма;
			ПараметрыОперации.НомерЧека      = РезультатОткрытияФормы.НомерЧека;
			ПараметрыОперации.СсылочныйНомер = РезультатОткрытияФормы.СсылочныйНомер;
			
			Если ФискальныйРегистратор.Пустая() Тогда
				УстройствоПечати = ПараметрДействия.ПараметрыКассыККМ.ИдентификаторУстройства;
				УстройствоПечати = ?(ПустаяСтрока(УстройствоПечати), Неопределено, УстройствоПечати);
			Иначе
				УстройствоПечати = ФискальныйРегистратор;
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ОповещениеОткрытьФормуАвторизацииЭТЗавершение", ЭтотОбъект, ПараметрДействия);
			МенеджерОборудованияКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(Оповещение, УникальныйИдентификатор, 
			ПараметрДействия.ПараметрыЭТ.ИдентификаторУстройства, УстройствоПечати, ПараметрыОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросУспешностиОплатыКартой(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрДействия = ДополнительныеПараметры.ПараметрДействия;
	
	Если НЕ (РезультатВопроса = КодВозвратаДиалога.Да) Тогда
		СтрокаСлипЧека = "";
		ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗавершитьОплатуКартой(ПараметрДействия);
	
КонецПроцедуры


&НаКлиенте
Процедура ОповещениеОткрытьФормуАвторизацииЭТЗавершение(РезультатВыполнения, ПараметрДействия) Экспорт 
	
	ЭтаФорма.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ПараметрДействия.НомерКарты          = РезультатВыполнения.НомерКарты;
		ПараметрДействия.НомерСсылкиОперации = РезультатВыполнения.СсылочныйНомер;
		ПараметрДействия.НомерЧекаЭТ         = РезультатВыполнения.НомерЧекаЭТ;
		ПараметрДействия.СтрокаСлипЧека      = РезультатВыполнения.ТекстСлипЧека;
		ЗавершитьОплатуКартой(ПараметрДействия);
	Иначе
		ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
			|""%ОписаниеОшибки%"".
			|Оплата по карте не была произведена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплатуКартой(ПараметрДействия)
	
	
	//Сохранить в таблице данные оплаты картой
	ВидКарты = Элементы.ВидПлатежнойКарты.СписокВыбора[ПараметрДействия.ТипКарты].Значение;
	Объект.ВидПлатежнойКарты = ВидКарты;
	ВидПлатежнойКартыПриИзменении(Элементы.ВидПлатежнойКарты);
	
	Объект.НомерПлатежнойКарты = ПараметрДействия.НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
	
	Если Объект.СуммаДокумента <> ПараметрДействия.СуммаОперации Тогда
		Объект.СуммаДокумента = ПараметрДействия.СуммаОперации;
		СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
	КонецЕсли;
	
	Объект.СсылочныйНомер      = ПараметрДействия.НомерСсылкиОперации;	
	Объект.НомерЧекаЭТ         = ПараметрДействия.НомерЧекаЭТ;

	Попытка
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось выполнить проведение документа!'");
		Сообщение.Сообщить();
		Записать();
	КонецПопытки;
	
КонецПроцедуры

// Процедура - обработчик команды УдалитьОплатуКартой.
//
&НаКлиенте
Процедура УдалитьОплатуКартой(Команда)
	
	ДобавитьОплатуКартойПослеОтветаНаВопрос(КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Процедура - обработчик команды НапечататьПоследнийСлипЧек.
//
&НаКлиенте
Процедура НапечататьПоследнийСлипЧек(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента()Тогда // Проверка на определенность рабочего места ВО
			ИдентификаторУстройстваФР = Неопределено;
			ОписаниеОшибки            = "";
			
			СтрокаСлипЧека = "";
			Если Не глПодключаемоеОборудование.Свойство("ПоследнийСлипЧек", СтрокаСлипЧека)
			 Или ТипЗнч(СтрокаСлипЧека) <> Тип("Строка")
			 Или ПустаяСтрока(СтрокаСлипЧека) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Слип-чек отсутствует.
				|Возможно для данного сеанса еще не выполнялась эквайринговая операция.'"));
				Возврат;
			КонецЕсли;
			
			// Выбор устройства ФР
			ИдентификаторУстройстваФР = ?(ЗначениеЗаполнено(ФискальныйРегистратор),
										  ФискальныйРегистратор,
										  Неопределено);
			
			Если ИдентификаторУстройстваФР <> Неопределено Тогда
				// Подключение устройства ФР
				РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																								ИдентификаторУстройстваФР,
																								ОписаниеОшибки);
				
				Если РезультатФР Тогда
					
					ВходныеПараметры  = Новый Массив();
					ВходныеПараметры.Добавить(СтрокаСлипЧека);
					ВыходныеПараметры = Неопределено;
					
					РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
																			  "PrintText",
																			  ВходныеПараметры,
																			  ВыходныеПараметры);
					Если Не РезультатФР Тогда
						ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
						|""%ОписаниеОшибки%"".'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
													 "%ОписаниеОшибки%",
													 ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
					// Отключение устройства ФР
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
																					 ИдентификаторУстройстваФР);
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
					|""%ОписаниеОшибки%"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УстановитьДоступностьТелефонАдресЭП();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обработки изменения поля Вид операции на сервере.
//
&НаСервере
Процедура УстановитьСтатьюДДСПриСменеВидаОперации()
	
	Если (Объект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	Иначе
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

// Процедура устанавлиевает статью ДДС при открытии формы.
//
&НаСервере
Процедура УстановитьСтатьюДДС()
	
	Если (Объект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	Иначе
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Функция ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	УстановитьВидимостьНалогообложениеНДС();
	УстановитьВидимостьРеквизитовРасчетов();
	
	Возврат (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная"));
	
КонецФункции // ЗаполнитьПоДокументу()

// Функция помещает табличную часть РасшифровкаРасчетов во временное хранилище
// и возвращает адрес
//
&НаСервере
Функция ПоместитьРасшифровкаПлатежаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.РасшифровкаПлатежа.Выгрузить(,
			"Договор,
			|ПризнакАванса,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

// Функция получает табличную часть РасшифровкаРасчетов из временного хранилища.
//
&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище)
	
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище);
	Объект.РасшифровкаПлатежа.Очистить();
	Для каждого СтрокаРасшифровкаПлатежа Из ТаблицаРасшифровкаПлатежа Цикл
		Строка = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаРасшифровкаПлатежа);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасшифровкаПлатежаИзХранилища()

// Выполняет пересчет сумм по валюте табличной части документа после изменения
// банковского счета или кассы.
//
&НаКлиенте
Процедура ПересчитатьСуммыДокумента(Курс, Кратность, ПересчитатьСуммуПлатежа)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		Если ПересчитатьСуммуПлатежа Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				Курс,
				СтрокаТабличнойЧасти.Кратность,
				Кратность
			);
			РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.Курс = ?(
				СтрокаТабличнойЧасти.Курс = 0,
				1,
				СтрокаТабличнойЧасти.Курс
			);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтрокаТабличнойЧасти.Кратность = 0,
				1,
				СтрокаТабличнойЧасти.Кратность
			);
			СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаПлатежа,
				Курс,
				СтрокаТабличнойЧасти.Курс,
				Кратность,
				СтрокаТабличнойЧасти.Кратность
			);
		КонецЕсли;
	КонецЦикла;
	
	Если ПересчитатьСуммуПлатежа Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

// Выполняет пересчет сумм по валюте денежных средств.
//
&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения)
	
	КурсПередИзменением = Курс;
	КратностьПередИзменением = Кратность;
	
	Если ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Курс = ?(
			СтруктураДанные.ВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Курс
		);
		Кратность = ?(
			СтруктураДанные.ВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Кратность
		);
	КонецЕсли;
	
	// Если курс валюты не изменился или не заполнена валюта денежных средств
	// или документ не заполнен, то ничего не делаем.
	Если (Курс = КурсПередИзменением
		И Кратность = КратностьПередИзменением)
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств))
	 ИЛИ (Объект.РасшифровкаПлатежа.Итог("СуммаРасчетов") = 0
	 И НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КурсПередИзменением", КурсПередИзменением);
	ДополнительныеПараметры.Вставить("КратностьПередИзменением", КратностьПередИзменением);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаСуммыДокумента", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств()

// Выполняем пересчет суммы платежа в переданной строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуПлатежа(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		Курс,
		СтрокаТабличнойЧасти.Кратность,
		Кратность
	);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

// Выполняем пересчет суммы платежа в переданной строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуКомиссии()
	
	Объект.СуммаКомиссииПоДоговору = Объект.ПроцентКомиссии * Объект.СуммаДокумента / 100;
	
КонецПроцедуры

// Выполняем пересчет суммы учета.
//
&НаКлиенте
Процедура РассчитатьСуммуУчета()
	
	Объект.Курс = ?(
		Объект.Курс = 0,
		1,
		Объект.Курс
	);
	Объект.Кратность = ?(
		Объект.Кратность = 0,
		1,
		Объект.Кратность
	);
	
	Объект.СуммаУчета = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		Объект.СуммаДокумента,
		Объект.Курс,
		КурсВалютыУчета,
		Объект.Кратность,
		КратностьВалютыУчета
	);
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

// Выполняет пересчет сумм по валюте табличной части документа после изменения
// банковского счета или кассы.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация, Дата)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"КонтрагентНаименованиеПолное",
		Контрагент.НаименованиеПолное
	);
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ДоговорВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
		)
	);
	
	СтруктураДанные.Вставить(
		"ВестиРасчетыПоДоговорам",
		Контрагент.ВестиРасчетыПоДоговорам
	);
	
	СтруктураДанные.Вставить(
		"ВестиРасчетыПоДокументам",
		Контрагент.ВестиРасчетыПоДокументам
	);
	
	СтруктураДанные.Вставить(
		"ВестиРасчетыПоЗаказам",
		Контрагент.ВестиРасчетыПоЗаказам
	);
	
	СтруктураДанные.Вставить(
		"ВестиУчетОплатыПоСчетам",
		Контрагент.ВестиУчетОплатыПоСчетам
	);
	
	УстановитьВидимостьРеквизитовРасчетов();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Процедура устанавливает видимость реквизитов расчетов.
//
&НаСервере
Процедура УстановитьВидимостьРеквизитовРасчетов()
	
	Элементы.РасшифровкаПлатежаДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	Элементы.РасшифровкаПлатежаДокумент.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
	Элементы.РасшифровкаПлатежаЗаказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
	
КонецПроцедуры // УстановитьВидимостьРеквизитовРасчетов()

// Получает набор данных с сервера для процедуры ВалютаДенежныхСредствПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеВалютаДенежныхСредствПриИзменении(Дата, ВалютаДенежныхСредств)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ВалютаДенежныхСредств)
		)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеВалютаДенежныхСредствПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(Дата, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ДоговорВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", Договор.ВалютаРасчетов)
		)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"Компания",
		УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация)
	);
	СтруктураДанные.Вставить(
		"БанковскийСчет",
		Объект.Организация.БанковскийСчетПоУмолчанию
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Объект.Дата,
			Новый Структура("Валюта", Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств)
		)
	);
	СтруктураДанные.Вставить(
		"ВалютаДенежныхСредств",
		Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств
	);
	
	СтруктураДанные.Вставить(
		"ЭквайринговыйТерминал", 
		Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчаниюДляОперацииЭквайринга(Объект.Организация.БанковскийСчетПоУмолчанию, Объект.Организация)
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;

КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Процедура заполняет ставку НДС по умолчанию.
//
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоУмолчанию()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Объект.Организация.СтавкаНДСПоУмолчанию;
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоУмолчанию()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя Тогда
		
		Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка Тогда
		
		Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, Объект.КассаККМ.СтруктурнаяЕдиница, Объект.Дата);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
		
		Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, Объект.СтруктурнаяЕдиница, Объект.Дата);
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		
	Иначе
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	
	Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПодотчетника
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПокупкаВалюты)
	   И НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		
	Иначе
		
		ЗаполнитьСтавкуНДСПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
//
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(ВосстанавливатьСтавкиНДС = Истина)
	
	ЗаполнитьСтавкуНДСПоУмолчанию();
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			Элементы.СуммаНДС.Видимость = Истина;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
			
			Элементы.РозничнаяВыручкаРасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РозничнаяВыручкаРасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			Элементы.СуммаНДС.Видимость = Истина;
			
		КонецЕсли;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
		
		Если ВосстанавливатьСтавкиНДС Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
			
			Элементы.РозничнаяВыручкаРасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РозничнаяВыручкаРасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			
		КонецЕсли;
		
		Если ВосстанавливатьСтавкиНДС Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура устанавливает видимость поля Налогообложение.
//
&НаСервере
Процедура УстановитьВидимостьНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
		 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
			
			Элементы.РозничнаяВыручкаРасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РозничнаяВыручкаРасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			
		КонецЕсли;
		
		СтавкаНДСПоУмолчанию = Объект.Организация.СтавкаНДСПоУмолчанию;
		
	Иначе
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручка
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РозничнаяВыручкаСуммовойУчет Тогда
			
			Элементы.РозничнаяВыручкаРасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РозничнаяВыручкаРасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьНалогообложениеНДС()

// Процедура устанавливает видимость элементов в зависимости от вида операции.
//
&НаСервере
Процедура УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации()
	
	Элементы.СуммаДокумента.Ширина = 14;
	Элементы.Контрагент.Видимость = Ложь;
	
	Элементы.РасшифровкаПлатежаПодбор.Видимость = Истина;
	Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Истина;
	Элементы.Контрагент.Видимость = Истина;
	Элементы.Контрагент.Заголовок = "Покупатель";
	НовыйМассив = Новый Массив();
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
	
	Элементы.СуммаПлатежа.Видимость = Истина;
	Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
	Элементы.СуммаРасчетов.Видимость = НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю Тогда
		Элементы.ПроцентКомиссии.Видимость = Объект.ЭквайрерБеретКомиссиюЗаВозвратДС;
		Элементы.СуммаКомиссииПоДоговору.Видимость = Объект.ЭквайрерБеретКомиссиюЗаВозвратДС;
		Элементы.ОперацияЗаполнить.Видимость = Истина;
		Элементы.ЭквайрерБеретКомиссиюЗаВозвратДС.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Ложь;
	Иначе
		Элементы.ПроцентКомиссии.Видимость = Истина;
		Элементы.СуммаКомиссииПоДоговору.Видимость = Истина;
		Элементы.ОперацияЗаполнить.Видимость = Ложь;
		Элементы.ЭквайрерБеретКомиссиюЗаВозвратДС.Видимость = Ложь;
		Элементы.СчетФактураНадпись.Видимость = Истина;
	КонецЕсли;
	
	ПоказыватьКнопки = ЗначениеЗаполнено(ЭквайринговыйТерминал) И (ЗначениеЗаполнено(ФискальныйРегистратор) ИЛИ КассаККМИспользоватьБезПодключенияОборудования);
	Элементы.ОплатитьКартой.Видимость = (Объект.ВидОперации = ВидОперацииОплата); //И ПоказыватьКнопки;
	Элементы.ВернутьНаКарту.Видимость = (Объект.ВидОперации <> ВидОперацииОплата); //И ПоказыватьКнопки;
	Элементы.ДекорацияРазделитель2.Видимость = (Не Элементы.ОплатитьКартой.Видимость И Не Элементы.ВернутьНаКарту.Видимость);
	УстановитьДоступностьКнопок();
	
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		Элементы.Касса.Видимость = (ТипЗнч(Объект.ЭквайринговыйТерминал.Касса) = Тип("СправочникСсылка.Кассы"));
		Элементы.КассаККМ.Видимость = Не Элементы.Касса.Видимость;
	Иначе
		Элементы.Касса.Видимость = Ложь;
		Элементы.КассаККМ.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ВидПлатежнойКарты.ТолькоПросмотр = НЕ ЭТИспользоватьБезПодключенияОборудования;
	Элементы.НомерПлатежнойКарты.ТолькоПросмотр = НЕ ЭТИспользоватьБезПодключенияОборудования;
	Элементы.НомерЧекаЭТ.ТолькоПросмотр = НЕ ЭТИспользоватьБезПодключенияОборудования;
	Элементы.СсылочныйНомер.ТолькоПросмотр = НЕ ЭТИспользоватьБезПодключенияОборудования;
	
КонецПроцедуры // УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации()

// Процедура выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагента()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаПлатежа,
		Курс,
		СтрокаТабличнойЧасти.Курс,
		Кратность,
		СтрокаТабличнойЧасти.Кратность
	);
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

// Процедура выполняет действия при начале выбора договора контрагента.
//
&НаКлиенте
Процедура ОбработатьНачалоВыбораДоговораКонтрагента(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

// Процедура заполняет строку ТЧ РасшифровкаПлатежа данными документа расчетов.
//
&НаКлиенте
Процедура ОбработатьВыборДокументаРасчетов(ДанныеДокумента)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти.Документ = ДанныеДокумента.Документ;
		СтрокаТабличнойЧасти.Заказ = ДанныеДокумента.Заказ;
		СтрокаТабличнойЧасти.СчетНаОплату = ДанныеДокумента.СчетНаОплату;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтрокаТабличнойЧасти.Договор = ДанныеДокумента.Договор;
			ОбработатьИзменениеДоговораКонтрагента();
		КонецЕсли;
		
		ВыполнитьДействияПриИзмененииДокументаРасчетов();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборДокументаРасчетов()

// Процедура определяет признак аванса в зависимости от типа документа расчетов.
//
&НаКлиенте
Процедура ВыполнитьДействияПриИзмененииДокументаРасчетов()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю") Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			
		Иначе
			
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействияПриИзмененииДокументаРасчетов()

// Процедура заполняет расшифровку платежа.
//
&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа(ТекущийОбъект = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьРасшифровкуПлатежа();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежа()

// Проверяет соответствие реквизитов договора "Организация" и "ВидДоговора" условиям документа.
//
&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(Знач ТЧРасшифровкаПлатежа, ТекстСообщения, Документ, Организация, Контрагент, ВидОперации, Отказ)
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
		ИЛИ Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	Для каждого СтрокаТабличнойЧасти Из ТЧРасшифровкаПлатежа Цикл
		
		Если НЕ МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, СтрокаТабличнойЧасти.Договор, Организация, Контрагент, СписокВидовДоговора)
			И Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Получить() Тогда
			
			Отказ = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);

	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
	//Элементы.Контрагент.МаксимальнаяШирина = 20;
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

#Область ПодключаемоеОборудование

// Процедура заполнения списка видов платежных карт.
//
&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	ТаблицаВидовКартИПроцентовКомиссии.Очистить();
	
	ТекущаяТаблицаВидовКартИПроцентовКомиссии = Справочники.ЭквайринговыеТерминалы.ВидыПлатежныхКартИПроцентыКомиссии(Объект.ЭквайринговыйТерминал);
	Если ТекущаяТаблицаВидовКартИПроцентовКомиссии.Количество() > 0 Тогда
		ТаблицаВидовКартИПроцентовКомиссии.Загрузить(ТекущаяТаблицаВидовКартИПроцентовКомиссии);
		Элементы.ВидПлатежнойКарты.СписокВыбора.ЗагрузитьЗначения(ТекущаяТаблицаВидовКартИПроцентовКомиссии.ВыгрузитьКолонку("ВидПлатежнойКарты"));
	Иначе
		Элементы.ВидПлатежнойКарты.СписокВыбора.Очистить();
	КОнецЕсли;
	
КонецПроцедуры // ПолучитьСписокВыбораВидовПлатежныхКарт()

// Получает ссылки на внешнее оборудование.
//
&НаСервере
Процедура ПолучитьСсылкиНаОборудование()

	ФискальныйРегистратор = ?(
		ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ПО"
	  И ЗначениеЗаполнено(Объект.КассаККМ)
	  И ЗначениеЗаполнено(Объект.КассаККМ.ПодключаемоеОборудование),
	  Объект.КассаККМ.ПодключаемоеОборудование.Ссылка,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	ЭквайринговыйТерминал = ?(
		ИспользоватьПодключаемоеОборудование
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
	  И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование)
	  И НЕ Объект.ЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования,
	  Объект.ЭквайринговыйТерминал.ПодключаемоеОборудование,
	  Справочники.ПодключаемоеОборудование.ПустаяСсылка()
	);

	// Контекстное меню
	Элементы.КонтекстноеМенюГруппаАвтоматизированнойОплатыКартами.Видимость = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	Элементы.НапечататьПоследнийСлипЧек.Видимость = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	
КонецПроцедуры // ПолучитьСсылкиНаОборудование()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

// Процедура-обработчик результата вопроса о пересчете суммы документа. 
//
//
&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаСуммыДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПересчитатьСуммыДокумента(Курс, Кратность, Истина);
		Иначе
			Объект.СуммаДокумента = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				ДополнительныеПараметры.КурсПередИзменением,
				Курс,
				ДополнительныеПараметры.КратностьПередИзменением,
				Кратность
			);
		КонецЕсли;
		
	Иначе
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПересчитатьСуммыДокумента(Курс, Кратность, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьСуммуКомиссии();
	
КонецПроцедуры // ОпределитьНеобходимостьЗаполненияДокументаПоОснованию()

#КонецОбласти

#Область УправлениеВнешимВидомФормы

// Процедура устанавливает основное подразделение и доступность кнопки "НапечататьЧек".
//
&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	НапечататьЧекДоступность = Ложь;
	
	Кнопка = Элементы.Найти("НапечататьЧек");
	Если Кнопка <> Неопределено Тогда
		
		НапечататьЧекДоступность = Истина;
		
		Кнопка.Доступность = НапечататьЧекДоступность;
		Элементы.НомерЧекаККМ.Видимость = НапечататьЧекДоступность;
		
	КонецЕсли;
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	УстановитьСтатьюДДСПриСменеВидаОперации();
	
КонецПроцедуры // УстановитьОсновноеПодразделениеИДоступностьПечатиЧека()

// Процедура устанавливает текущую страницу в зависимости от вида операции.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()
	
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КоличествоСтрок = 1;
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

// Процедура очищает реквизиты, которые ранее могли быть заполнены, но не
// относятся к текущей операции.
//
&НаКлиенте
Процедура ОчиститьРеквизитыНеОтносящиесяКОперации()
	
	Если ВидОперации = ВидОперацииОплата Тогда
		Объект.ОперацияПоПлатежнымКартамШапка = ПредопределенноеЗначение("Документ.ОперацияПоПлатежнымКартам.ПустаяСсылка");
		
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
		КонецЦикла;
		
	Иначе // Возврат.
		
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьРеквизитыНеОтносящиесяКОперации()

// Процедура устанавливает связи параметров выбора и доступные типы.
//
&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоступныеТипы()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя") Тогда
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ВариантРемонта") <> Перечисления.ВариантыРемонта.НашаМастерскаяМногоэтапныйРемонт
			Тогда
			//ПриемИПередачаВРемонт это одновременно и заказ, и документ расхода
			Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПриемИПередачаВРемонт");
			Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПриемИПередачаВРемонт");
		Иначе
			
			Массив = Новый Массив();
			Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
			Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
			Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
			Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
			Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
			Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
			Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
			
			ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
			Элементы.РасшифровкаПлатежа.ПодчиненныеЭлементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", , );
			Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
			
		КонецЕсли;
		
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Заголовок = "Документ к зачету";
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = "Оплачиваемый документ отгрузки товаров, работ и услуг контрагенту";
		
	Иначе
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОперацияПоПлатежнымКартам"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, ,);
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", , );
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Заголовок = "Документ к зачету";
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = "Документ расчетов с контрагентом, по которому осуществляется возврат денежных средств";
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораДоступныеТипы()

&НаСервере
Процедура УстановитьДоступностьКнопок()
	
	Элементы.ОплатитьКартой.Доступность = ЗначениеЗаполнено(ЭквайринговыйТерминал);// И Объект.Проведен;
	Элементы.ВернутьНаКарту.Доступность = ЗначениеЗаполнено(ЭквайринговыйТерминал);// И Объект.Проведен;
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
	
	// Документ основание.
	НовыйМассив = Новый Массив();
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ПараметрыВыбораДокументаОснования = НовыеПараметры;
	// Конец Документ основание.
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуКартамиВОптовойТорговле") ИЛИ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснованиеНадпись.Видимость = Истина;
	Иначе
		Элементы.ДокументОснованиеНадпись.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаКлиенте
Процедура ЗаполнитьТелефонАдресЭП()
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		ТелефонАдресЭП = "Телефон";
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		ТелефонАдресЭП = "АдресЭП";
	Иначе
		ТелефонАдресЭП = "НеОтправлять";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьТелефонАдресЭП()
	
	Если ТелефонАдресЭП = "Телефон" Тогда
		Объект.АдресЭП = "";
		Элементы.ГруппаТелефон.Видимость = Истина;
		Элементы.ГруппаАдресЭП.Видимость = Ложь;
	ИначеЕсли ТелефонАдресЭП = "АдресЭП" Тогда
		Объект.Телефон = "";
		Элементы.ГруппаТелефон.Видимость = Ложь;
		Элементы.ГруппаАдресЭП.Видимость = Истина;
	Иначе
		Объект.Телефон = "";
		Объект.АдресЭП = "";
		Элементы.ГруппаТелефон.Видимость = Ложь;
		Элементы.ГруппаАдресЭП.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти
