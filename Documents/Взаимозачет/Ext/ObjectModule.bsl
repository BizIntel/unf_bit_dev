#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

//Процедура заполнения документа на основании сверки взаиморасчетов
//
Процедура ЗаполнитьПоСверкеВзаиморасчетов(ДокументСверкаВзаиморасчетов) Экспорт
	
	ЭтотОбъект.ДокументОснование 	= ДокументСверкаВзаиморасчетов;
	ЭтотОбъект.Организация			= ДокументСверкаВзаиморасчетов.Организация;
	Для каждого СтрокаДоговораКонтрагента Из ДокументСверкаВзаиморасчетов.ДоговорыКонтрагентов Цикл
		
		Если СтрокаДоговораКонтрагента.Отметка Тогда
			
			ДоговорКонтрагента = СтрокаДоговораКонтрагента.Договор;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем 
			ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоров.СКомиссионером Тогда
			
			ЭтотОбъект.ВидОперации			= Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя;
			ЭтотОбъект.КонтрагентИсточник	= ДокументСверкаВзаиморасчетов.Контрагент;
			
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоров.СПоставщиком 
			ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоров.СКомитентом Тогда
			
			ЭтотОбъект.ВидОперации			= Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику;
			ЭтотОбъект.Контрагент			= ДокументСверкаВзаиморасчетов.Контрагент;
			
		КонецЕсли;
		
		СальдоПоДаннымОрганизации	= ДокументСверкаВзаиморасчетов.ДанныеОрганизации.Итог("СуммаДолгКонтрагента") - ДокументСверкаВзаиморасчетов.ДанныеОрганизации.Итог("СуммаДолгОрганизации");
		СальдоПоДаннымКонтрагента	= ДокументСверкаВзаиморасчетов.ДанныеКонтрагента.Итог("СуммаДолгОрганизации") - ДокументСверкаВзаиморасчетов.ДанныеКонтрагента.Итог("СуммаДолгКонтрагента");
		Расхождение					= СальдоПоДаннымОрганизации - СальдоПоДаннымКонтрагента;
		
		Корреспонденция = ?(Расхождение < 0, ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПрочиеРасходы);
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьПоСверкеВзаиморасчетов()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументРасчетов) Тогда
		ДокументРасчетов = Неопределено;
	КонецЕсли;
	
	Для каждого ТекСтрока Из Дебитор Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			ТекСтрока.Документ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока Из Кредитор Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			ТекСтрока.Документ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя Тогда
			Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику Тогда
			Заказ = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Взаимозачет
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя Тогда
		Если НЕ ЗначениеЗаполнено(СуммаРасчетов)
			И НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
			Для каждого ТекСтрока Из Дебитор Цикл
				СуммаРасчетов = СуммаРасчетов + ТекСтрока.СуммаРасчетов;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СуммаУчета) Тогда
			Для каждого ТекСтрока Из Дебитор Цикл
				СуммаУчета = СуммаУчета + ТекСтрока.СуммаУчета;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику Тогда
		Если НЕ ЗначениеЗаполнено(СуммаРасчетов)
			И НЕ ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций") Тогда
			Для каждого ТекСтрока Из Кредитор Цикл
				СуммаРасчетов = СуммаРасчетов + ТекСтрока.СуммаРасчетов;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СуммаУчета) Тогда
			Для каждого ТекСтрока Из Кредитор Цикл
				СуммаУчета = СуммаУчета + ТекСтрока.СуммаУчета;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Взаимозачет Тогда
		
		ДебиторСуммаУчета = Дебитор.Итог("СуммаУчета");
		КредиторСуммаУчета = Кредитор.Итог("СуммаУчета");
		
		Если ДебиторСуммаУчета <> КредиторСуммаУчета Тогда
			ТекстСообщения = НСтр("ru = 'Сумма учета табличной части ""Расчеты с покупателем"", не равна сумме учета по табличной части ""Расчеты с поставщиком""!'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Дебитор",
				1,
				"СуммаУчета",
				Отказ
			);
		КонецЕсли;
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СуммаРасчетов");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Курс");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кратность");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СуммаУчета");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		
		Если НЕ КонтрагентИсточник.ВестиРасчетыПоДоговорам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Дебитор.Договор");
			Для каждого СтрокаТЧ Из Дебитор Цикл
				СтрокаТЧ.Договор = КонтрагентИсточник.ДоговорПоУмолчанию;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ КонтрагентИсточник.ВестиРасчетыПоДокументам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Дебитор.Документ");
		КонецЕсли;
		
		Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кредитор.Договор");
			Для каждого СтрокаТЧ Из Кредитор Цикл
				СтрокаТЧ.Договор = Контрагент.ДоговорПоУмолчанию;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ Контрагент.ВестиРасчетыПоДокументам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кредитор.Документ");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя Тогда
		
		ДебиторСуммаУчета = Дебитор.Итог("СуммаУчета");
		ТекстСообщения = НСтр("ru = 'Сумма учета, не равна сумме учета табличной части ""Расчеты с покупателем""!'");
		
		Если ДебиторСуммаУчета <> СуммаУчета Тогда
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				Неопределено,
				1,
				"СуммаУчета",
				Отказ
			);
		КонецЕсли;
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		
		Если НЕ КонтрагентИсточник.ВестиРасчетыПоДоговорам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Дебитор.Договор");
			Для каждого СтрокаТЧ Из Дебитор Цикл
				СтрокаТЧ.Договор = КонтрагентИсточник.ДоговорПоУмолчанию;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ КонтрагентИсточник.ВестиРасчетыПоДокументам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Дебитор.Документ");
		КонецЕсли;
		
		Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
			Договор = Контрагент.ДоговорПоУмолчанию;
		КонецЕсли;
		
		Если НЕ Контрагент.ВестиРасчетыПоДокументам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Документ");
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику Тогда
		
		КредиторСуммаУчета = Кредитор.Итог("СуммаУчета");
		
		Если КредиторСуммаУчета <> СуммаУчета Тогда
			ТекстСообщения = НСтр("ru = 'Сумма учета, не равна сумме учета табличной части ""Расчеты с поставщиком""!'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				Неопределено,
				1,
				"СуммаУчета",
				Отказ
			);
		КонецЕсли;
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Корреспонденция");
		
		Если НЕ КонтрагентИсточник.ВестиРасчетыПоДоговорам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кредитор.Договор");
			Для каждого СтрокаТЧ Из Кредитор Цикл
				СтрокаТЧ.Договор = КонтрагентИсточник.ДоговорПоУмолчанию;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ КонтрагентИсточник.ВестиРасчетыПоДокументам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кредитор.Документ");
		КонецЕсли;
		
		Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
			Договор = Контрагент.ДоговорПоУмолчанию;
		КонецЕсли;
		
		Если НЕ Контрагент.ВестиРасчетыПоДокументам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Документ");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя Тогда
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СуммаРасчетов");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Курс");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кратность");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СуммаУчета");
		
		Если НЕ КонтрагентИсточник.ВестиРасчетыПоДоговорам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Дебитор.Договор");
			Для каждого СтрокаТЧ Из Дебитор Цикл
				СтрокаТЧ.Договор = КонтрагентИсточник.ДоговорПоУмолчанию;
			КонецЦикла;
		КонецЕсли;
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Дебитор.Документ");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику Тогда
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "КонтрагентИсточник");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СуммаРасчетов");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Курс");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кратность");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "СуммаУчета");
		
		Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
			УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кредитор.Договор");
			Для каждого СтрокаТЧ Из Кредитор Цикл
				СтрокаТЧ.Договор = Контрагент.ДоговорПоУмолчанию;
			КонецЦикла;
		КонецЕсли;
			
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Кредитор.Документ");
		
	КонецЕсли
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.Взаимозачет.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.Взаимозачет.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.Взаимозачет.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

//Процедура - обработчик события ОбработкаЗаполнения объекта
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.СверкаВзаиморасчетов")] = "ЗаполнитьПоСверкеВзаиморасчетов";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли