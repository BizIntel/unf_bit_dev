
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидОперации = Объект.ВидОперации;
	
	Контрагент = Объект.КонтрагентИсточник;
	КонтрагентПолучатель = Объект.Контрагент;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Константы.ВалютаУчета.Получить()));
	Курс = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Курс);
	Кратность = ?(СтруктураПоВалюте.Курс = 0, 1, СтруктураПоВалюте.Кратность);
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	УстановитьСвязиПараметровВыбора();
	УстановитьВидимостьИДоступность();
	
	ПроверкаЗаполнениеНеВыполнялась = Истина;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступныеТипы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр) Тогда
			Если Параметр = Объект.Контрагент
			 ИЛИ Параметр = Объект.КонтрагентИсточник Тогда
				УстановитьВидимостьИДоступность();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПроверкаЗаполнениеНеВыполнялась Тогда
		
		Если (Объект.Ссылка.Пустая() ИЛИ Модифицированность)
			И УправлениеНебольшойФирмойПовтИсп.ОбменСБухгалтериейНастроен() Тогда
			
			ТекстОшибки = "";
			ПроверитьКорректностьЗаполненияРеквизитовДокумента(ТекстОшибки);
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				
				Отказ = Истина;
				ОтказатьсяОтЗаписиДокумента = Истина;
				ОписаниеОповещенияЗакрытияФормыСОшибками = Новый ОписаниеОповещения("ОпределитьНеобходимостьЗакрытияФормыСОшибками", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещенияЗакрытияФормыСОшибками, ТекстОшибки, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		
		ПроверкаЗаполнениеНеВыполнялась = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповещение об оплате.
	ОповеститьОбОплатеЗаказа = Ложь;
	ОповеститьОбОплатеСчета = Ложь;
	
	Для каждого ТекСтрока Из Объект.Дебитор Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату)
		);
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ)
		);
	КонецЦикла;
	
	Для каждого ТекСтрока Из Объект.Кредитор Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату)
		);
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ)
		);
	КонецЦикла;
	
	Если ОповеститьОбОплатеСчета Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплату"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	КонецЕсли;

	Если ОповеститьОбОплатеЗаказа Тогда
		Оповестить("ОповещениеОбОплатеЗаказа");
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	Если ВидОперации <> ВидОперацииПередИзменением Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
			Объект.Договор = Неопределено;
			Объект.ДокументРасчетов = Неопределено;
			Объект.ПризнакАванса = Ложь;
			Объект.СуммаРасчетов = 0;
			Объект.Курс = 0;
			Объект.Кратность = 0;
			Объект.СуммаУчета = 0;
			Для каждого Строка Из Объект.Кредитор Цикл
				Строка.Договор = Неопределено;
				Строка.Документ = Неопределено;
				Строка.Заказ = Неопределено;
				Строка.СчетНаОплату = Неопределено;
			КонецЦикла;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя") Тогда
			Объект.Кредитор.Очистить();
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
			Объект.Дебитор.Очистить();
			Для каждого Строка Из Объект.Кредитор Цикл
				Строка.Договор = Неопределено;
				Строка.Документ = Неопределено;
				Строка.Заказ = Неопределено;
				Строка.СчетНаОплату = Неопределено;
			КонецЦикла;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя") Тогда
			Объект.Кредитор.Очистить();
			Объект.Контрагент = Неопределено;
			Объект.ДокументРасчетов = Неопределено;
			Объект.ПризнакАванса = Ложь;
			Объект.СуммаРасчетов = 0;
			Объект.Курс = 0;
			Объект.Кратность = 0;
			Объект.СуммаУчета = 0;
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику") Тогда
			Объект.Дебитор.Очистить();
			Объект.КонтрагентИсточник = Неопределено;
			Объект.ДокументРасчетов = Неопределено;
			Объект.ПризнакАванса = Ложь;
			Объект.СуммаРасчетов = 0;
			Объект.Курс = 0;
			Объект.Кратность = 0;
			Объект.СуммаУчета = 0;
		КонецЕсли;
		УстановитьСвязиПараметровВыбора();
		УстановитьВидимостьИДоступность();
		УстановитьДоступныеТипы();
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
	Если Контрагент <> Объект.КонтрагентИсточник Тогда
		Для каждого Строка Из Объект.Дебитор Цикл
			Строка.Договор = Неопределено;
			Строка.Документ = Неопределено;
			Строка.Заказ = Неопределено;
			Строка.СчетНаОплату = Неопределено;
		КонецЦикла;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
			Для каждого Строка Из Объект.Кредитор Цикл
				Строка.Договор = Неопределено;
				Строка.Документ = Неопределено;
				Строка.Заказ = Неопределено;
				Строка.СчетНаОплату = Неопределено;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Контрагент = Объект.КонтрагентИсточник;
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура КонтрагентПолучательПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
	Если КонтрагентПолучатель <> Объект.Контрагент Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
			Для каждого Строка Из Объект.Кредитор Цикл
				Строка.Договор = Неопределено;
				Строка.Документ = Неопределено;
				Строка.Заказ = Неопределено;
				Строка.СчетНаОплату = Неопределено;
			КонецЦикла;
		КонецЕсли;
		Объект.Договор = Неопределено;
	КонецЕсли;
	КонтрагентПолучатель = Объект.Контрагент;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	Объект.Договор = СтруктураДанные.Договор;
	
КонецПроцедуры // КонтрагентПолучательПриИзменении()

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Объект.Дата,
		Объект.Договор
	);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(Объект);
	
КонецПроцедуры // ДоговорПриИзменении()

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаРасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуУчета(Объект);
	
КонецПроцедуры // СуммаРасчетовПриИзменении()

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	
	РассчитатьСуммуУчета(Объект);
	
КонецПроцедуры // КурсПриИзменении()

&НаКлиенте
Процедура КратностьПриИзменении(Элемент)
	
	РассчитатьСуммуУчета(Объект);
	
КонецПроцедуры // КратностьПриИзменении()

&НаКлиенте
Процедура СуммаУчетаПриИзменении(Элемент)
	
	РассчитатьСуммуРасчетов(Объект);
	
КонецПроцедуры // СуммаУчетаПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументРасчетовПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 ИЛИ ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеНаСчет")
	 ИЛИ ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.РасходСоСчета")
	 ИЛИ ТипЗнч(Объект.ДокументРасчетов) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Объект.ПризнакАванса = Истина;
	Иначе
		Объект.ПризнакАванса = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДебитор

&НаКлиенте
Процедура ДебиторДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Объект.Дата,
		СтрокаТабличнойЧасти.Договор
	);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда 
		СтрокаТабличнойЧасти.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		СтрокаТабличнойЧасти.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторДоговорПриИзменении()

&НаКлиенте
Процедура ДебиторДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Дебитор.ТекущиеДанные;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.КонтрагентИсточник, ТекущиеДанные.Договор, Объект.ВидОперации, "Дебитор");
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДебиторКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторКурсПриИзменении()

&НаКлиенте
Процедура ДебиторКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторКратностьПриИзменении()

&НаКлиенте
Процедура ДебиторСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторСуммаРасчетовПриИзменении()

&НаКлиенте
Процедура ДебиторСуммаУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	РассчитатьСуммуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторСуммаУчетаПриИзменении()

&НаКлиенте
Процедура ДебиторДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	Иначе
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДебиторДокументПриИзменении()

&НаКлиенте
Процедура ДебиторПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Дебитор.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКредитор

&НаКлиенте
Процедура КредиторДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(
		Объект.Дата,
		СтрокаТабличнойЧасти.Договор
	);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда 
		СтрокаТабличнойЧасти.Курс      = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		СтрокаТабличнойЧасти.Кратность = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	КонецЕсли;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // КредиторДоговорПриИзменении()

&НаКлиенте
Процедура КредиторДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
		КонтрагентКредитор = Объект.КонтрагентИсточник;
	Иначе
		КонтрагентКредитор = Объект.Контрагент;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Кредитор.ТекущиеДанные;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, КонтрагентКредитор, ТекущиеДанные.Договор, Объект.ВидОперации, "Кредитор");
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДебиторКурсПриИзменении()

&НаКлиенте
Процедура КредиторКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // КредиторКратностьПриИзменении()

&НаКлиенте
Процедура КредиторСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	РассчитатьСуммуУчета(СтрокаТабличнойЧасти);
	
КонецПроцедуры // КредиторСуммаРасчетовПриИзменении()

&НаКлиенте
Процедура КредиторСуммаУчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	РассчитатьСуммуРасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры // КредиторСуммаУчетаПриИзменении()

&НаКлиенте
Процедура КредиторДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	Иначе
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры // КредиторДокументПриИзменении()

&НаКлиенте
Процедура КредиторПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Кредитор.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборРасчетыСПокупателем(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале покупателя!'"));
		Возврат;
	КонецЕсли;
	
	АдресДебиторВХранилище = ПоместитьДебиторВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресДебиторВХранилище,
		|Компания,
		|Дата,
		|Контрагент,
		|Ссылка",
		АдресДебиторВХранилище,
		Компания,
		Объект.Дата,
		Объект.КонтрагентИсточник,
		Объект.Ссылка
	);
	
	Результат = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовИДолговПокупателей", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("ПодборРасчетыСПокупателемЗавершение", ЭтотОбъект, Новый Структура("АдресДебиторВХранилище", АдресДебиторВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПокупателемЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    АдресДебиторВХранилище = ДополнительныеПараметры.АдресДебиторВХранилище;
    
    
    Результат = Результат1;
    Если Результат = КодВозвратаДиалога.OK Тогда
        ПолучитьДебиторИзХранилища(АдресДебиторВХранилище);
    КонецЕсли;

КонецПроцедуры // ПодборРасчетыСПокупателем()

&НаКлиенте
Процедура ПодборРасчетыСПоставщиком(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале поставщика!'"));
		Возврат;
	КонецЕсли;
	
	АдресКредиторВХранилище = ПоместитьКредиторВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресДебиторВХранилище,
		|Компания,
		|Дата,
		|Контрагент,
		|Ссылка",
		АдресКредиторВХранилище,
		Компания,
		Объект.Дата,
		?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику"), Объект.КонтрагентИсточник, Объект.Контрагент),
		Объект.Ссылка
	);
	
	Результат = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовИДолговПоставщикам", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("ПодборРасчетыСПоставщикомЗавершение", ЭтотОбъект, Новый Структура("АдресКредиторВХранилище", АдресКредиторВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРасчетыСПоставщикомЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    АдресКредиторВХранилище = ДополнительныеПараметры.АдресКредиторВХранилище;
    
    
    Результат = Результат1;
    Если Результат = КодВозвратаДиалога.OK Тогда
        ПолучитьКредиторИзХранилища(АдресКредиторВХранилище);
    КонецЕсли;

КонецПроцедуры // ПодборРасчетыСПоставщиком()

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Сообщение				= Новый СообщениеПользователю;
		Сообщение.Текст			= НСтр("ru = 'Выберите документ основание.'");
		Сообщение.ПутьКДанным	= "ДокументОснование";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса 	= НСтр("ru = 'Документ будит очищен и заполнен по документу-основанию. Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоДокументуОснованиюЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, );
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ 			= Результат;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ЗаполнитьПоДокументу();
        
    КонецЕсли;

КонецПроцедуры //ЗаполнитьПоДокументуОснованию()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоместитьДебиторВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Дебитор.Выгрузить(,
			"Договор,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|СуммаУчета,
			|Курс,
			|Кратность,
			|ПризнакАванса"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьДебиторВХранилище()

&НаСервере
Процедура ПолучитьДебиторИзХранилища(АдресДебиторВХранилище)
	
	ТаблицаДебитор = ПолучитьИзВременногоХранилища(АдресДебиторВХранилище);
	Объект.Дебитор.Очистить();
	Для каждого СтрокаДебитор Из ТаблицаДебитор Цикл
		Строка = Объект.Дебитор.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДебитор);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДебиторИзХранилища()

&НаСервере
Функция ПоместитьКредиторВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Кредитор.Выгрузить(,
			"Договор,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|СуммаУчета,
			|Курс,
			|Кратность,
			|ПризнакАванса"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьКредиторВХранилище()

&НаСервере
Процедура ПолучитьКредиторИзХранилища(АдресКредиторВХранилище)
	
	ТаблицаКредитор = ПолучитьИзВременногоХранилища(АдресКредиторВХранилище);
	Объект.Кредитор.Очистить();
	Для каждого СтрокаКредитор Из ТаблицаКредитор Цикл
		Строка = Объект.Кредитор.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаКредитор);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьКредиторИзХранилища()

&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	ДокументОснование 	= Объект.ДокументОснование;
	
	//Очистим данные документа
	Объект.Дебитор.Очистить();
	Объект.Кредитор.Очистить();
	Документ = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(Документ, Документы.Взаимозачет.ПустаяСсылка(), , "Номер, Дата, ВидОперации");
	
	//Заполним по документу-основанию
	Документ.Заполнить(ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры //ЗаполнитьПоДокументу()

&НаКлиенте
Процедура РассчитатьСуммуУчета(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Курс      = ?(СтрокаТабличнойЧасти.Курс      = 0, 1, СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаУчета = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		Курс,
		СтрокаТабличнойЧасти.Кратность,
		Кратность
	);
	
КонецПроцедуры // РассчитатьСуммуУчета()

&НаКлиенте
Процедура РассчитатьСуммуРасчетов(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Курс      = ?(СтрокаТабличнойЧасти.Курс = 0, 1, СтрокаТабличнойЧасти.Курс);
	СтрокаТабличнойЧасти.Кратность = ?(СтрокаТабличнойЧасти.Кратность = 0, 1, СтрокаТабличнойЧасти.Кратность);
	
	СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаУчета,
		Курс,
		СтрокаТабличнойЧасти.Курс,
		Кратность,
		СтрокаТабличнойЧасти.Кратность
	);
	
КонецПроцедуры // РассчитатьСуммуРасчетов()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", Договор.ВалютаРасчетов)
		)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить(
		"Компания",
		УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервере
Процедура УстановитьСвязиПараметровВыбора()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "КонтрагентПолучатель");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДоговор.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "КонтрагентПолучатель");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДокумент.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторЗаказ.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Покупатель", Истина));
		Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		Элементы.КонтрагентПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДоговор.СвязиПараметровВыбора = НовыеСвязи;
		
		НовыйМассив = Новый Массив;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторДокумент.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторЗаказ.СвязиПараметровВыбора = НовыеСвязи;
		Элементы.Кредитор.ПодчиненныеЭлементы.КредиторСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
	Иначе
		
		НовыйФиксированныйМассив = Новый ФиксированныйМассив(Новый Массив);
		Элементы.Контрагент.ПараметрыВыбора = НовыйФиксированныйМассив;
		Элементы.КонтрагентПолучатель.ПараметрыВыбора = НовыйФиксированныйМассив;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвязиПараметровВыбора() 

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.Взаимозачет") Тогда
		
		Элементы.Получатель.Видимость = Ложь;
		Элементы.РасчетыСДебитором.Видимость = Истина;
		Элементы.РасчетыСКредитором.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		Элементы.Контрагент.Заголовок = "Покупатель";
		Элементы.КонтрагентПолучатель.Заголовок = "Поставщик";
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ДебиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.ДебиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДебиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.ДебиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.КредиторДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.КредиторДокумент.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.КредиторЗаказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.КредиторСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя") Тогда
		
		Элементы.Получатель.Видимость = Истина;
		Элементы.РасчетыСДебитором.Видимость = Истина;
		Элементы.РасчетыСКредитором.Видимость = Ложь;
		Элементы.Корреспонденция.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		Элементы.Контрагент.Заголовок = "Покупатель";
		Элементы.КонтрагентПолучатель.Заголовок = "Покупатель-получатель";
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ДебиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.ДебиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДебиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.ДебиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.ДокументРасчетов.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Элементы.ПризнакАванса.ТолькоПросмотр = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.Заказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.СчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
		
		Элементы.Получатель.Видимость = Истина;
		Элементы.РасчетыСДебитором.Видимость = Ложь;
		Элементы.РасчетыСКредитором.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		Элементы.Контрагент.Заголовок = "Поставщик";
		Элементы.КонтрагентПолучатель.Заголовок = "Поставщик-получатель";
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.КредиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.КредиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.КонтрагентИсточник) Тогда
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.КредиторПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Истина;
		Элементы.КредиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.КредиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
		Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.ДокументРасчетов.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Элементы.ПризнакАванса.ТолькоПросмотр = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Иначе
			Элементы.ПризнакАванса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.Заказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.СчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПокупателя") Тогда
		
		Элементы.Получатель.Видимость = Ложь;
		Элементы.РасчетыСДебитором.Видимость = Истина;
		Элементы.РасчетыСКредитором.Видимость = Ложь;
		Элементы.Корреспонденция.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Видимость = Ложь;
		Элементы.Контрагент.Заголовок = "Покупатель";
		
		Элементы.ДебиторДоговор.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДоговорам;
		Элементы.ДебиторДокумент.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоДокументам;
		Элементы.ДебиторДокумент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДебиторПризнакАванса.ТолькоПросмотр = Ложь;
		Элементы.ДебиторЗаказ.Видимость = Объект.КонтрагентИсточник.ВестиРасчетыПоЗаказам;
		Элементы.ДебиторСчетНаОплату.Видимость = Объект.КонтрагентИсточник.ВестиУчетОплатыПоСчетам;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.КорректировкаДолгаПоставщику") Тогда
		
		Элементы.Получатель.Видимость = Ложь;
		Элементы.РасчетыСДебитором.Видимость = Ложь;
		Элементы.РасчетыСКредитором.Видимость = Истина;
		Элементы.Корреспонденция.Видимость = Истина;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.КонтрагентПолучатель.Видимость = Истина;
		Элементы.КонтрагентПолучатель.Заголовок = "Поставщик";
		
		Элементы.КредиторДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.КредиторДокумент.Видимость = Объект.Контрагент.ВестиРасчетыПоДокументам;
		Элементы.КредиторПризнакАванса.ТолькоПросмотр = Ложь;
		Элементы.КредиторДокумент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КредиторЗаказ.Видимость = Объект.Контрагент.ВестиРасчетыПоЗаказам;
		Элементы.КредиторСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаКлиенте
Процедура УстановитьДоступныеТипы()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя") Тогда
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.ДокументРасчетов.ОграничениеТипа = ДопустимыеТипы;
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", , );
		Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.СчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВзаимозачет.ПереуступкаДолгаПоставщику") Тогда
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		Массив.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.ДокументРасчетов.ОграничениеТипа = ДопустимыеТипы;
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", , );
		Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.СчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвязиПараметровВыбораДоступныеТипы()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации, ИмяТабличнойЧасти = "")
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации, ИмяТабличнойЧасти);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ПроверитьКорректностьЗаполненияРеквизитовДокумента(ТекстВопроса)

	СуммаАвансовДебитор  = 0;
	СуммаАвансовКредитор = 0;
	
	МассивДоговоров = Новый Массив;
	МассивДоговоров.Добавить(Объект.Договор);
	
	Для каждого СтрокаТаблицы Из Объект.Дебитор Цикл
		
		Если СтрокаТаблицы.ПризнакАванса Тогда
			СуммаАвансовДебитор = СуммаАвансовДебитор + СтрокаТаблицы.СуммаРасчетов;
		КонецЕсли;
		
		МассивДоговоров.Добавить(СтрокаТаблицы.Договор);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.Кредитор Цикл
		
		Если СтрокаТаблицы.ПризнакАванса Тогда
			СуммаАвансовКредитор = СуммаАвансовКредитор + СтрокаТаблицы.СуммаРасчетов;
		КонецЕсли;
		
		МассивДоговоров.Добавить(СтрокаТаблицы.Договор);
	КонецЦикла;
	
	// Проверка на наличие нескольких валют
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивДоговоров)
	|	И ДоговорыКонтрагентов.Ссылка <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ оформленный в нескольких валютах не будет перенесен в ""Бухгалтерию предприятия"".
			|
			|Продолжить запись документа?'");
			
		Возврат;
		
	КонецЕсли;
	
	// Проверка на корректность оформления операции Взаимозачет
	Если Объект.ВидОперации = Перечисления.ВидыОперацийВзаимозачет.Взаимозачет
		И СуммаАвансовДебитор <> СуммаАвансовКредитор Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ, у которого сумма авансов в табличной части ""Расчеты с покупателем"" не соответствует
			|сумме авансов в табличной части ""Расчеты с поставщиком"" не будет перенесен в ""Бухгалтерию предприятия"".
			|
			|Продолжить запись документа?'");
			
		Возврат;
		
	КонецЕсли;

КонецПроцедуры // ПроверитьКорректностьЗаполненияРеквизитовДокумента()

&НаКлиенте
Процедура ОпределитьНеобходимостьЗакрытияФормыСОшибками(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		ПроверкаЗаполнениеНеВыполнялась = Ложь;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентПриИзменении(СсылкаНаДокумент, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("Договор", РаботаСКонтрагентамиУНФ.ПолучитьДоговорПоУмолчанию(СсылкаНаДокумент, Контрагент, Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
