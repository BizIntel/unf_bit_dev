&НаКлиенте
Перем ОбновитьПодчиненнуюСчетФактуру;

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВидЦенКонтрагента, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВидЦенКонтрагента, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Объект.СтавкаНДСВознаграждения = Компания.СтавкаНДСПоУмолчанию;
	
	//Установить надписи счет-фактура и основание
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(НайденныйСчетФактура,,СчетФактураТекст);
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий();
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();	
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

//Процедура - обработчик события формы ПередЗаписью
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбновитьПодчиненнуюСчетФактуру = Модифицированность;
	
КонецПроцедуры

// Процедура обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Объект.Договор, Объект.Ссылка, Объект.Организация, Объект.Контрагент, Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = Перечисления.ДаНет.Да
			И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

// Процедура заполняет авансы.
//
&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры // ЗаполнитьПредоплату()

&НаКлиенте
// Процедура - обработчик события ПослеЗаписи.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если НЕ СчетФактураТекст = ""
		И ?(НЕ ОбновитьПодчиненнуюСчетФактуру = Неопределено, ОбновитьПодчиненнуюСчетФактуру, Ложь) Тогда
		
		ТекстВопроса = НСтр("ru = 'В документе были произведены изменения.
			|Требуется ли повторно заполнить подчиненный Счет-фактуру?'");
									
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьЗаполненияПодчиненногоСчетФактуры", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку(Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриОткрытии.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьИДоступность(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений();
	// Конец ГрупповоеИзменениеСтрок
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события ПриЗакрытии.
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
		// Конец ГрупповоеИзменениеСтрок
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
// Процедура - обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		СчетФактураТекст = Параметр.Представление;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(Параметр.Представление);
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище = Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти();
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик выбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактура.Форма.ФормаДокумента" Тогда
		
		СчетФактураТекст = ВыбранноеЗначение;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ОтчетКомитенту.Форма.ФормаПодбораПоПродажам" Тогда
		
		ПолучитьЗапасыПринятыеИзХранилища(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоКонтрагенту" 
//
&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Команда)
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоКонтрагентуЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоОснованию(Объект.Контрагент);
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	Объект.СтавкаНДСВознаграждения = СтруктураДанные.СтавкаНДС;
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СпособРасчетаКомиссионногоВознаграждения.
//
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаКомиссионногоВознаграждения <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается")
		И ЗначениеЗаполнено(Объект.ПроцентКомиссионногоВознаграждения) Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			
			Ответ = Неопределено;

			
			ПоказатьВопрос(Новый ОписаниеОповещения("СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение", ЭтотОбъект), "Изменился способ расчета. Пересчитать комиссионное вознаграждение?", 
			               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
            Возврат; 
		КонецЕсли;
	КонецЕсли;
	
	СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
            РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
        КонецЦикла;
    КонецЕсли; 
    
    СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзмененииФрагмент()
    
    УстановитьВидимостьИДоступность(ЭтотОбъект);

КонецПроцедуры // СпособРасчетаКомиссионногоВознагражденияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДСВознаграждения.
//
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Ответ = Неопределено;


	ПоказатьВопрос(Новый ОписаниеОповещения("СтавкаНДСВознагражденияПриИзмененииЗавершение", ЭтотОбъект), "Пересчитать суммы НДС вознаграждения?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
    
    Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
        
        СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС, 
        СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
        СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
        
    КонецЦикла;

КонецПроцедуры // СтавкаНДСВознагражденияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ПроцентКомиссионногоВознаграждения.
//
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)
	
	Если Объект.Запасы.Количество() > 0 Тогда
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроцентКомиссионногоВознагражденияПриИзмененииЗавершение", ЭтотОбъект), "Изменился процент вознаграждения. Пересчитать комиссионное вознаграждение", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентКомиссионногоВознагражденияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    // Надо предложить пересчитать комиссионное вознаграждение.
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
            РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры // ПроцентКомиссионногоВознагражденияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		Объект.Договор = СтруктураДанные.Договор;
		
		СтруктураДанные.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", КонтрагентВестиРасчетыПоЗаказамПередИзменением);
		СтруктураДанные.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
		
		ОбработатьИзменениеДоговора(СтруктураДанные);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Договор.
//
&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеНебольшойФирмойКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
// Процедура - обработчик события ПриНачалеРедактирования табличной части Запасы.
//
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерийныеНомера = "";
	КонецЕсли;	
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = 0;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	
	СтрокаТабличнойЧасти.ЦенаПоступления = СтруктураДанные.ЦенаПоступления;
	
	СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(
		Объект.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.СуммаПоступления
		- (СтрокаТабличнойЧасти.СуммаПоступления)
		/ ((СтавкаНДС + 100)
		/ 100),
		СтрокаТабличнойЧасти.СуммаПоступления
		* СтавкаНДС
		/ 100
	);
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
	//Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("ДатаОбработки",		Объект.Дата);
		СтруктураДанные.Вставить("ВидЦенКонтрагента",	Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 		 	СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("ЕдиницаИзмерения",	СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		СтруктураДанные.Вставить("ЦенаПоступления",		СтрокаТабличнойЧасти.ЦенаПоступления);
		
		СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.ЦенаПоступления = СтруктураДанные.ЦенаПоступления;
		
		СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;
	
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);

		СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
    		
        РассчитатьСуммуВСтрокеТабличнойЧасти();
		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма поступления.
	СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ЦенаПоступления.
//
Процедура ЗапасыЦенаПоступленияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма поступления.
	СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыЦенаПоступленияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СуммаПоступления.
//
Процедура ЗапасыСуммаПоступленияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПоступления = СтрокаТабличнойЧасти.СуммаПоступления / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Сумма НДС поступления.
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
		
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры // ЗапасыСуммаПоступленияПриИзменении

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СуммаВознаграждения.
//
Процедура ЗапасыСуммаВознагражденияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
			
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);
	
КонецПроцедуры // ЗапасыСуммаВознагражденияПриИзменении(Элемент)

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
// Процедура - обработчик команды командной панели табличной части.
//
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ТекЭлемент.ЗаказПоставщику;
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		Истина, // Подбор
		Истина, // ЕстьЗаказ
		Ложь, // ЗаказВШапке
		Компания, // Компания
		?(КонтрагентВестиРасчетыПоЗаказам, МассивЗаказов, Неопределено), // Заказ
		Объект.Дата, // Дата
		Объект.Ссылка, // Ссылка
		Объект.Контрагент, // Контрагент
		Объект.Договор, // Договор
		Объект.Курс, // Курс
		Объект.Кратность, // Кратность
		Объект.ВалютаДокумента, // ВалютаДокумента
		Объект.Запасы.Итог("Всего") // СуммаДокумента
	);
	
	КодВозврата = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПоставщикам", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект, Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    
    КодВозврата = Результат;
    
    Если КодВозврата = КодВозвратаДиалога.OK Тогда
        ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
    КонецЕсли;

КонецПроцедуры // РедактироватьЗачетПредоплаты()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	// Сумма поступления.
	СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(
		Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100
	);
	
	// Сумма вознаграждения.
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура обрабатывает измение реквизитов документов Вид цен и Валюта расчетов
//
Процедура ОбработатьИзменениеВидаЦенКонтрагентовИВалютыРасчетов(ПараметрыДокумента)
	
	ДоговорПередИзменением = ПараметрыДокумента.ДоговорПередИзменением;
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ВопросВидЦенКонтрагента = ПараметрыДокумента.ВопросВидЦенКонтрагента;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦенКонтрагента = ДанныеДоговора.ВидЦенКонтрагента;
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", 
		Объект.ВалютаДокумента, 
		ВалютаРасчетов, 
		Объект.Курс, 
		КурсНациональнаяВалюта, 
		Объект.СуммаВключаетНДС, 
		УчетВалютныхОпераций, 
		Объект.ВидЦенКонтрагента, 
		Объект.НалогообложениеНДС
		);
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ИзменилсяВидЦен Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, 
						|отличный от установленного в документе! 
						|Пересчитать документ в соответствии с договором?'") + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
										|Необходимо проверить валюту документа!'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦенКонтрагента Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе! 
						|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенКонтрагентовИВалютыРасчетов()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ОрганизацияПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Компания.СтавкаНДСПоУмолчанию);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		ЦенаПоступления = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("ЦенаПоступления", ЦенаПоступления);
		
	Иначе
		
		СтруктураДанные.Вставить("ЦенаПоступления", 0);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()	

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;		
		
		ЦенаПоступления = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("ЦенаПоступления", ЦенаПоступления);
		
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()	

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе	
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()	

&НаСервере
// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ВидЦенКонтрагента",
		ДоговорПоУмолчанию.ВидЦенКонтрагента
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидЦенКонтрагента",
		ДоговорПоУмолчанию.ВидЦенКонтрагента
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦенКонтрагента), ДоговорПоУмолчанию.ВидЦенКонтрагента.ЦенаВключаетНДС, Неопределено)
	);
	
	УстановитьВидимостьДоговора();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();	
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидЦенКонтрагента",
		Договор.ВидЦенКонтрагента
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦенКонтрагента), Договор.ВидЦенКонтрагента.ЦенаВключаетНДС, Неопределено)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервере
// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
											
			СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);								
											
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДСПоступления.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.СуммаНДСПоступления = 0;
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаКлиенте
// Рассчитывается сумма НДС в строке табличной части.
//
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС() 

&НаКлиенте
// Процедура рассчитывает сумму в строке табличной части.
//
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

&НаКлиенте
// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)

	Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда

	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
	
		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПоступления) / 100;

	Иначе
		
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
		
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаВознаграждения - (СтрокаТабличнойЧасти.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаВознаграждения * СтавкаНДС / 100);

КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

&НаКлиенте
// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитатьЦеныПоступленияТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти) 
	
	СтруктураКурсы = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, ФормаДокумента.Объект.ВалютаДокумента, ФормаДокумента.Объект.Дата);
																   
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("ЦенаПоступления") Тогда
			
			СтрокаТабличнойЧасти.ЦенаПоступления = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
																	
																	
			СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;
	
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);

			СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);														
						
		// Сумма.	
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("СуммаПоступления") Тогда
			
			СтрокаТабличнойЧасти.СуммаПоступления = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаПоступления, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);																												
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	        СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(ФормаДокумента.Объект.СуммаВключаетНДС, 
								  				СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
								  				СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
			
		КонецЕсли;
        		        
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныПоступленияТабличнойЧастиПоВалюте()

&НаКлиенте
// Выполняем пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитаемСуммуПоступленияТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти)
																	   
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		Если СтрокаТабличнойЧасти.Свойство("ЦенаПоступления") Тогда
			Если ФормаДокумента.Объект.СуммаВключаетНДС Тогда
				СтрокаТабличнойЧасти.ЦенаПоступления = (СтрокаТабличнойЧасти.ЦенаПоступления * (100 + СтавкаНДС)) / 100;
			Иначе
				СтрокаТабличнойЧасти.ЦенаПоступления = (СтрокаТабличнойЧасти.ЦенаПоступления * 100) / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПоступления;
	
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);

		СтрокаТабличнойЧасти.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
													СтрокаТабличнойЧасти.СуммаПоступления - (СтрокаТабличнойЧасти.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
													СтрокаТабличнойЧасти.СуммаПоступления * СтавкаНДС / 100);
		        
	КонецЦикла;

КонецПроцедуры // ПересчитаемСуммуПоступленияТабличнойЧастиПоФлагуСуммаВключаетНДС()

&НаКлиенте
// Процедура пересчитывает курс и кратность валюты расчетов при изменении
// даты документа.
//
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыРасчетовЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
        Возврат;		
		
	КонецЕсли;	
	
	// Сформируем надпись цены и валюты.
	ПересчитатьКурсКратностьВалютыРасчетовФрагмент();
КОнецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    КратностьНовый = ДополнительныеПараметры.КратностьНовый;
    КурсНовый = ДополнительныеПараметры.КурсНовый;
    
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        Объект.Курс = КурсНовый;
        Объект.Кратность = КратностьНовый;
        
        Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
            СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
            СтрокаТабличнойЧасти.СуммаРасчетов,
            СтрокаТабличнойЧасти.Курс,
            ?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
            СтрокаТабличнойЧасти.Кратность,
            ?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
        КонецЦикла;
        
    КонецЕсли;		
    
    
    ПересчитатьКурсКратностьВалютыРасчетовФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовФрагмент()
    
    Перем СтруктураНадписи;
    
    СтруктураНадписи = Новый Структура("ВидЦенКонтрагента, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВидЦенКонтрагента, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
    ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

&НаКлиенте
// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость",Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",Ложь);
	СтруктураПараметров.Вставить("ВидЦенКонтрагента", 	Объект.ВидЦенКонтрагента);
	СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает текст надписи "Цены и валюта".
//
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен контрагента.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦенКонтрагента) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦенКонтрагента%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦенКонтрагента%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦенКонтрагента%", СокрЛП(Строка(СтруктураНадписи.ВидЦенКонтрагента)));
	КонецЕсли;
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда
		Если СтруктураНадписи.СуммаВключаетНДС Тогда
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
			Если ЗначениеЗаполнено(СтруктураДанные.ВидЦенКонтрагента) Тогда
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
				СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦенКонтрагента", СтруктураДанные.ВидЦенКонтрагента);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
				КонецЕсли;
			КонецЕсли;
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ОтчетКомитенту.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.ЦенаПоступления = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПоступления;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.СуммаПоступления = НоваяСтрока.Количество * НоваяСтрока.ЦенаПоступления;
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				НоваяСтрока.СуммаНДСПоступления = ?(
					Объект.СуммаВключаетНДС,
					НоваяСтрока.СуммаПоступления
					- (НоваяСтрока.СуммаПоступления)
					/ ((СтавкаНДС + 100)
					/ 100),
					НоваяСтрока.СуммаПоступления
					*
					СтавкаНДС
					/ 100
				);
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоОснованию(Основание)
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.Контрагенты") тогда
	
		// Добавим в структуру заполнения реквизиты, которые уже 
		// указаны в документе
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Контрагент",  Основание);
		ДанныеЗаполнения.Вставить("Договор", 	 Объект.Договор);
		ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
		ДанныеЗаполнения.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		Документ.Заполнить(ДанныеЗаполнения);
		
	Иначе
		
		Документ.Заполнить(Основание);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
    Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
     КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Процедура устанавливает видимость договора в зависимости от установленного параметра контрагенту.
//
&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ПараметрыРасчетовСКонтрагентом = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам");
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.Договор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.Договор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

// Проверяет соответствие реквизитов договора "Организация" и "ВидДоговора" условиям документа.
//
&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Договор, Документ, Организация, Контрагент, Отказ)
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
		ИЛИ Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора)
		И Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Получить() Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ПараметрыДокумента = Новый Структура;
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
			
		Иначе
			
			ПараметрыДокумента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", ДанныеДоговора.КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", ДанныеДоговора.КонтрагентПередИзменением);
			
		КонецЕсли;
		
		ВопросПредоплата = (Объект.Предоплата.Количество() > 0 И Объект.Договор <> ДоговорПередИзменением);
		
		ИзменилсяВидЦен = Объект.ВидЦенКонтрагента <> ДанныеДоговора.ВидЦенКонтрагента И ЗначениеЗаполнено(ДанныеДоговора.ВидЦенКонтрагента);
		ВопросВидЦенКонтрагента = (ЗначениеЗаполнено(Объект.Договор) И ИзменилсяВидЦен);
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
			И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И Объект.Запасы.Количество() > 0;
		
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
		ПараметрыДокумента.Вставить("ВопросВидЦенКонтрагента", ВопросВидЦенКонтрагента);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", Элементы.Договор.Видимость);
		
		Если ВопросПредоплата = Истина Тогда
			
			ТекстВопроса = НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьОбновитьЗачетыАванса", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбработатьИзменениеВидаЦенКонтрагентовИВалютыРасчетов(ПараметрыДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.МаксимальнаяШирина = ?(Элементы.ОстатокВзаиморасчетов.Видимость, 18, 36);
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата открытия формы "Цены и валюты"
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		Объект.ВидЦенКонтрагента = РезультатЗакрытия.ВидЦенКонтрагента;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы")
			
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда	
			
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы");
			ПересчитатьЦеныПоступленияТабличнойЧастиПоВалюте(ЭтотОбъект, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы");
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
			ПересчитаемСуммуПоступленияТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
			
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			// Сумма вознаграждения.
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность)
				);
				
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура("ВидЦенКонтрагента, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", 
		Объект.ВидЦенКонтрагента, 
		Объект.ВалютаДокумента, 
		ВалютаРасчетов, 
		Объект.Курс, 
		КурсНациональнаяВалюта, 
		Объект.СуммаВключаетНДС, 
		УчетВалютныхОпераций, 
		Объект.НалогообложениеНДС
		);
	
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиенте
// Процедура-обработчик ответа на вопрос о заполнении подчиненного документа Счет-фактура
//
Процедура ОпределитьНеобходимостьЗаполненияПодчиненногоСчетФактуры(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		УправлениеНебольшойФирмойСервер.ИзменитьПодчиненнуюСчетФактуру(Объект.Ссылка);
		Оповестить("ОбновитьДокументИБПослеЗаполнения");
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьЗаполненияПодчиненногоСчетФактуры()

&НаКлиенте
// Процедура-обработчик ответа на вопрос о повторном зачете авансов
//
Процедура ОпределитьНеобходимостьОбновитьЗачетыАванса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Предоплата.Очистить();
		ОбработатьИзменениеВидаЦенКонтрагентовИВалютыРасчетов(ДополнительныеПараметры);
		
	Иначе
		
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		
		Если ДополнительныеПараметры.Свойство("КонтрагентПередИзменением") Тогда
			
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьОбновитьЗачетАванса()

&НаКлиенте
// Процедура-обработчик ответа на вопрос о пересчете документа по данным договора
//
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		ДанныеДоговора = ДополнительныеПараметры.ДанныеДоговора;
		
		Объект.ВидЦенКонтрагента = ДанныеДоговора.ВидЦенКонтрагента;
		СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", 
			Объект.ВалютаДокумента, 
			ВалютаРасчетов, 
			Объект.Курс, 
			КурсНациональнаяВалюта, 
			Объект.СуммаВключаетНДС, 
			УчетВалютныхОпераций, 
			Объект.ВидЦенКонтрагента, 
			Объект.НалогообложениеНДС
			);
			
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// Пересчитываем цены по виду цен.
		Если Объект.Запасы.Количество() > 0 Тогда
			
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
// Процедура - обработчик события Действие команды Подбор
//
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",	   	Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("ВидЦенКонтрагента", 		Объект.ВидЦенКонтрагента);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	Объект.Организация);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", 	Истина);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
		
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборВыполнить()

// Процедура - обработчик события Действие команды Подбор по продажам.
//
&НаКлиенте
Процедура ПодборПоПродажам(Команда)
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Организация"" не заполнено'");
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,, "Организация", Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,, "Контрагент", Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено'");
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения,,, "Договор", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура("
		|Компания,
		|Организация,
		|Контрагент,
		|Договор,
		|ВалютаДокумента,
		|ВидЦенКонтрагента,
		|ДатаДокумента,
		|ТекущийДокумент",
		Компания,
		Объект.Организация,
		Объект.Контрагент,
		Объект.Договор,
		Объект.ВалютаДокумента,
		Объект.ВидЦенКонтрагента,
		Объект.Дата,
		Объект.Ссылка
	);
	
	ОткрытьФорму("Документ.ОтчетКомитенту.Форма.ФормаПодбораПоПродажам", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборПоПродажам()

&НаСервере
// Функция получает список товаров из временного хранилища
//
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		НоваяСтрока.ЦенаПоступления 	= СтрокаЗагрузки.Цена;
		НоваяСтрока.СуммаПоступления 	= СтрокаЗагрузки.Сумма;
		НоваяСтрока.СуммаНДСПоступления = СтрокаЗагрузки.СуммаНДС;
		
		СтрокаЗагрузки.Цена 	= 0;
		СтрокаЗагрузки.Сумма 	= 0;
		СтрокаЗагрузки.СуммаНДС = 0;
		СтрокаЗагрузки.Всего 	= 0;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// Функция получает список запасов принятых из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыПринятыеИзХранилища(АдресЗапасовПринятыхВХранилище)
	
	ЗапасыПринятые = ПолучитьИзВременногоХранилища(АдресЗапасовПринятыхВХранилище);
	
	Для каждого СтрокаТабличнойЧасти Из ЗапасыПринятые Цикл
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		НоваяСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
		Если СтрокаТабличнойЧасти.Количество > СтрокаТабличнойЧасти.Остаток
			ИЛИ СтрокаТабличнойЧасти.Количество = 0 Тогда
			НоваяСтрока.Цена = 0;
			НоваяСтрока.Сумма = 0;
			НоваяСтрока.ЦенаПоступления = 0;
		ИначеЕсли СтрокаТабличнойЧасти.Количество < СтрокаТабличнойЧасти.Остаток Тогда
			НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
		КонецЕсли;
		НоваяСтрока.СуммаПоступления = НоваяСтрока.ЦенаПоступления * НоваяСтрока.Количество;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		
		НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС,
								НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
								НоваяСтрока.Сумма * СтавкаНДС / 100);
		
		НоваяСтрока.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		
		НоваяСтрока.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС,
											НоваяСтрока.СуммаПоступления - (НоваяСтрока.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
											НоваяСтрока.СуммаПоступления * СтавкаНДС / 100);
		
		Если Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи") Тогда
			НоваяСтрока.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * НоваяСтрока.Сумма / 100;
		ИначеЕсли Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления") Тогда
			НоваяСтрока.СуммаВознаграждения = Объект.ПроцентКомиссионногоВознаграждения * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;
		Иначе
			НоваяСтрока.СуммаВознаграждения = 0;
		КонецЕсли;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Объект.СтавкаНДСВознаграждения);
		НоваяСтрока.СуммаНДСВознаграждения = ?(Объект.СуммаВключаетНДС,
												НоваяСтрока.СуммаВознаграждения - (НоваяСтрока.СуммаВознаграждения) / ((СтавкаНДС + 100) / 100),
												НоваяСтрока.СуммаВознаграждения * СтавкаНДС / 100);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыПринятыеИзХранилища()

&НаСервере
// Функция помещает список авансов во временное хранилище и возвращает адрес
//
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
// Функция получает список авансов из временного хранилища
//
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидом

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьИДоступность(Форма)
	
	Если Форма.Объект.СпособРасчетаКомиссионногоВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		
		Форма.Объект.ПроцентКомиссионногоВознаграждения = 0;
		Форма.Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Ложь;
		
	Иначе
		
		Форма.Элементы.ПроцентКомиссионногоВознаграждения.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количетсве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			РассчитатьКомиссионноеВознаграждение(Строка);
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Строка.СтавкаНДС);
			Строка.СуммаНДСПоступления = ?(Объект.СуммаВключаетНДС, 
												Строка.СуммаПоступления - (Строка.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
												Строка.СуммаПоступления * СтавкаНДС / 100);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = "Запасы" Тогда
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			
			СтруктураДанные = Новый Структура();
			
			СтруктураДанные.Вставить("Организация", 	   Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", 	   Строка.Номенклатура);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			
			Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
			
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
				СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("Коэффициент", 1);
				
			КонецЕсли;
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Строка.ЦенаПоступления) Тогда
				Строка.ЦенаПоступления = Строка.Цена;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.СуммаПоступления) Тогда
				Строка.СуммаПоступления = Строка.Сумма;
			КонецЕсли;
			
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

// Процедура - обработчик нажатия кнопки Снять флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку(Ложь);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Установить флажки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку(Истина);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Изменить в ТЧ Запасы.
// Показывает/скрывает панель редактирования таблицы.
//
&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Выполнить в панели редактирования таблицы
// Производит выбранные преобразования с таблицей
//
&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Отменить в панели редактирования таблицы
// Скрывает панель редактирования и восстанавливает данные таблицы до внесения изменений
//
&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокДействие.
//
&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений();
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ЗапасыИзменениеСтрокЗначение.
//
&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

// Устанавливает/снимает пометку для всех строк таблицы.
//
&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Открывает/закрывает панель редактирования ТЧ.
//
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
// Управляет сохранением/отменой изменений в ТЧ.
//
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные
	);
	
КонецПроцедуры

// Управляет оформлением панели редактирования таблицы.
//
&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

// Записывает в пользовательские настройки последнее выбранное действие для изменения таблицы.
//
&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

// Производит пересчет связанных реквизитов в строках таблицы после из группового изменения.
//
&НаКлиенте
Процедура ОбработатьТаблицу()
	
	ОбработатьТаблицуНаСервере();
	
	ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(Строка);
			
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
			РассчитатьКомиссионноеВознаграждение(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Производит пересчет связанных реквизитов в строках таблицы после из группового изменения.
//
&НаСервере
Процедура ОбработатьТаблицуНаСервере()
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыИзменениеСтрокДействие,
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
		ЗапасыИзменениеСтрокЗначение,
		"ЗапасыНоменклатура"
	);
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого Строка Из ИзменяемыеСтроки Цикл
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Организация", Объект.Организация);
			СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
			СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
			
			Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
				
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
				СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
				СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("Коэффициент", 1);
				
			КонецЕсли;
			
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = 1;
			КонецЕсли;
			Строка.Цена = 0;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
			Строка.ЦенаПоступления = СтруктураДанные.ЦенаПоступления;
			
			Строка.СуммаПоступления = Строка.Количество * Строка.ЦенаПоступления;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(Строка.СтавкаНДС);
			
			Строка.СуммаНДСПоступления = ?(
				Объект.СуммаВключаетНДС,
				Строка.СуммаПоступления
				- (Строка.СуммаПоступления)
				/ ((СтавкаНДС + 100)
				/ 100),
				Строка.СуммаПоступления
				* СтавкаНДС
				/ 100
			);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет в зависимости от выбранного действия изменяемый реквизит и связанный с ним элемент на форме.
//
&НаКлиенте
Процедура ОпределитьОбъектИзменений()
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПокупателя") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Покупатель";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПокупатель";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьДатуРеализации") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ДатаРеализации";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыДатаРеализации";
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
		ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

// Создает набор необходимых реквизитов и элементов формы для управления оформлением панели редактирования.
//
&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	Возврат НаборЭлементов;
	
КонецФункции

// Заполняет список выбора реквизита Действие в панели редактирования ТЧ
//
&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	
	Действия = Новый Массив;
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
	Если РазрешеноРедактированиеЦенДокументов Тогда
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
	КонецЕсли;
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьПокупателя);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьДатуРеализации);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
	Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
	
	Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
	Для каждого Действие Из Действия Цикл
		ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор)
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
