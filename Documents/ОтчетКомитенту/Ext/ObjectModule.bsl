#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату()Экспорт
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "ЗаказПоставщику, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;
		ТекСтрока.ВсегоРасч = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("ЗаказПоставщику", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("ЗаказПоставщику Возр");

	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщикамиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПоставщиками.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПоставщиками.Заказ В (&Заказ)
	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПоставщикамиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс / РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("ЗаказПоставщику"));
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "ЗаказПоставщику");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч  Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредоплату()

// Процедура вызывается после заполнения документа.
//
Процедура ЗаполнитьПоРеквизитамШапки()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",		УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
	Запрос.УстановитьПараметр("Договор",			Договор);
	Запрос.УстановитьПараметр("ВалютаРасчетов",		Договор.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаДокумента",	ВалютаДокумента);
	Запрос.УстановитьПараметр("КонецПериода",		ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	ВидЦенКонтрагента);
	Запрос.УстановитьПараметр("ВалютаВидаЦен",		ВидЦенКонтрагента.ВалютаЦены);
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	Запрос.УстановитьПараметр("ВалютаУчета",		Константы.ВалютаУчета.Получить());
	
	// Определяем дату последнего отчета
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетКомитенту.Дата КАК Дата
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Проведен
	|	И ОтчетКомитенту.Организация = &Организация
	|	И ОтчетКомитенту.Контрагент = &Контрагент
	|	И ОтчетКомитенту.Договор = &Договор
	|	И ОтчетКомитенту.Дата < &КонецПериода
	|	И ОтчетКомитенту.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Запрос.УстановитьПараметр("НачалоПериода",Неопределено);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Запрос.УстановитьПараметр("НачалоПериода",Выборка.Дата);
	КонецЕсли;
	
	// Определяем объем проданного товара и цены поступления
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиОбороты.Организация.СтавкаНДСПоУмолчанию КАК СтавкаНДСОрганизации,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.Номенклатура.СтавкаНДС КАК СтавкаНДСНоменклатуры,
	|	ПродажиОбороты.Характеристика,
	|	ПродажиОбороты.Партия,
	|	ПродажиОбороты.ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПродажиОбороты.Документ) = ТИП(Документ.РасходнаяНакладная)
	|			ТОГДА ПродажиОбороты.Документ.Контрагент
	|	КОНЕЦ КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПродажиОбороты.Документ) = ТИП(Документ.РасходнаяНакладная)
	|			ТОГДА ПродажиОбороты.Документ.Дата
	|	КОНЕЦ КАК ДатаРеализации,
	|	ПродажиОбороты.КоличествоОборот КАК Количество,
	|	ПродажиОбороты.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ПродажиОбороты.КоличествоОборот > 0
	|			ТОГДА ВЫБОР
	|					КОГДА &ВалютаДокумента = &ВалютаУчета
	|						ТОГДА ПродажиОбороты.СуммаОборот / ПродажиОбороты.КоличествоОборот
	|					ИНАЧЕ ЕСТЬNULL(ПродажиОбороты.СуммаОборот * КурсВалютыУчета.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыУчета.Кратность), 0) / ПродажиОбороты.КоличествоОборот
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ВалютаДокумента = &ВалютаУчета
	|			ТОГДА ПродажиОбороты.СуммаОборот
	|		ИНАЧЕ ПродажиОбороты.СуммаОборот * КурсВалютыУчета.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыУчета.Кратность)
	|	КОНЕЦ КАК Сумма,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &ВалютаДокумента = &ВалютаВидаЦен
	|				ТОГДА ФиксированныеЦеныПоступления.Цена
	|			ИНАЧЕ ФиксированныеЦеныПоступления.Цена * КурсВалютыВидаЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидаЦен.Кратность)
	|		КОНЕЦ, ВЫБОР
	|			КОГДА ЗапасыПринятыеОстатки.КоличествоОстаток > 0
	|				ТОГДА ВЫБОР
	|						КОГДА &ВалютаДокумента = &ВалютаРасчетов
	|							ТОГДА ЗапасыПринятыеОстатки.СуммаРасчетовОстаток / ЗапасыПринятыеОстатки.КоличествоОстаток
	|						ИНАЧЕ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток * КурсВалютыРасчетов.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыРасчетов.Кратность), 0) / ЗапасыПринятыеОстатки.КоличествоОстаток
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦенаПоступления,
	|	ЗапасыПринятыеОстатки.Заказ КАК ЗаказПоставщику
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				И Партия.ВладелецПартии = &Контрагент) КАК ПродажиОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПринятые.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И ТипПриемаПередачи = ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)) КАК ЗапасыПринятыеОстатки
	|		ПО (ЗапасыПринятыеОстатки.Номенклатура = ПродажиОбороты.Номенклатура)
	|			И (ЗапасыПринятыеОстатки.Характеристика = ПродажиОбороты.Характеристика)
	|			И (ЗапасыПринятыеОстатки.Партия = ПродажиОбороты.Партия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|				&КонецПериода,
	|				ВидЦенКонтрагента = &ВидЦенКонтрагента
	|					И Актуальность) КАК ФиксированныеЦеныПоступления
	|		ПО (ФиксированныеЦеныПоступления.Номенклатура = ПродажиОбороты.Номенклатура)
	|			И (ФиксированныеЦеныПоступления.Характеристика = ПродажиОбороты.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаРасчетов) КАК КурсВалютыРасчетов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаУчета) КАК КурсВалютыУчета
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаВидаЦен) КАК КурсВалютыВидаЦен
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПродажиОбороты.КоличествоОборот > 0
	|	И ЗапасыПринятыеОстатки.КоличествоОстаток > 0";
	
	ЧислоСтавкиНДСВознаграждения = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСВознаграждения);
	
	// Перезаполняем табличную часть Запасы
	Запасы.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		// Ставка НДС, СуммаНДС и Всего
		Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтавкаНДСНоменклатуры) Тогда
			НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДСНоменклатуры;
		Иначе
			НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДСОрганизации;
		КонецЕсли;
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		
		НоваяСтрока.СуммаНДС = ?(СуммаВключаетНДС, 
								 НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
								 НоваяСтрока.Сумма * СтавкаНДС / 100);
		
		НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
		
		// Сумма поступления и НДС поступления.
		НоваяСтрока.СуммаПоступления = НоваяСтрока.Количество * НоваяСтрока.ЦенаПоступления;
		
		НоваяСтрока.СуммаНДСПоступления = ?(СуммаВключаетНДС, 
											НоваяСтрока.СуммаПоступления - (НоваяСтрока.СуммаПоступления) / ((СтавкаНДС + 100) / 100),
											НоваяСтрока.СуммаПоступления * СтавкаНДС / 100);
		
		// Комиссионное вознаграждение
		Если СпособРасчетаКомиссионногоВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

			Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
	
				НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения * НоваяСтрока.Сумма / 100;
	
			ИначеЕсли СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления Тогда

				НоваяСтрока.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения * (НоваяСтрока.Сумма - НоваяСтрока.СуммаПоступления) / 100;

			Иначе
		
				НоваяСтрока.СуммаВознаграждения = 0;
		
			КонецЕсли;
			
		КонецЕсли;
	
		НоваяСтрока.СуммаНДСВознаграждения = ?(СуммаВключаетНДС, 
												НоваяСтрока.СуммаВознаграждения - (НоваяСтрока.СуммаВознаграждения) / ((ЧислоСтавкиНДСВознаграждения + 100) / 100),
												НоваяСтрока.СуммаВознаграждения * ЧислоСтавкиНДСВознаграждения / 100);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоРеквизитамШапки()

Процедура ЗаполнитьПоКонтрагенту(ДанныеЗаполнения) Экспорт
	
	Контрагент = ДанныеЗаполнения;
	Договор = ДанныеЗаполнения.ДоговорПоУмолчанию;
	
	ВалютаДокумента = Договор.ВалютаРасчетов;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
	Курс = СтруктураПоВалюте.Курс;
	Кратность = СтруктураПоВалюте.Кратность;
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Если Организация <> ЗначениеНастройки Тогда
			Организация = ЗначениеНастройки;
		КонецЕсли;
	Иначе
		Организация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;
	
	НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Дата);
	
	ЗаполнитьПоРеквизитамШапки();
	
КонецПроцедуры

// Обработчик заполнения на основании документа ПриходнаяНакладная.
//
// Параметры:
//	ДокументСсылкаПриходнаяНакладная - ДокументСсылка.ПриходнаяНакладная.
//	
Процедура ЗаполнитьПоПриходнаяНакладная(ДокументСсылкаПриходнаяНакладная) Экспорт
	
	Если ДокументСсылкаПриходнаяНакладная.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нельзя ввести Отчет комитенту на основании операции ""%1""!'"),
		ДокументСсылкаПриходнаяНакладная.ВидОперации);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Организация КАК Организация,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Контрагент КАК Контрагент,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Договор КАК Договор,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.ВидЦенКонтрагента КАК ВидЦенКонтрагента,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Курс КАК Курс,
	|	ПриходнаяНакладнаяЗапасы.Ссылка.Кратность КАК Кратность,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ПриходнаяНакладнаяЗапасы.Партия КАК Партия,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяЗапасы.Цена КАК ЦенаПоступления,
	|	ПриходнаяНакладнаяЗапасы.Сумма КАК СуммаПоступления,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСПоступления,
	|	ПриходнаяНакладнаяЗапасы.Заказ КАК ЗаказПоставщику,
	|	ПриходнаяНакладнаяЗапасы.СерийныеНомера
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаПриходнаяНакладная);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		
		ВыборкаИзРезультатаЗапроса.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		
		Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
			СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВыборкаИзРезультатаЗапроса.ВалютаРасчетов));
			Курс = СтруктураПоВалюте.Курс;
			Кратность = СтруктураПоВалюте.Кратность;
		КонецЕсли;
		
		ВыборкаИзРезультатаЗапроса.Сбросить();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИзРезультатаЗапроса);
		КонецЦикла;
		
		РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДокументСсылкаПриходнаяНакладная);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПриходнаяНакладная()

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	ЗаполнитьПоРеквизитамШапки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("СправочникСсылка.Контрагенты")] = "ЗаполнитьПоКонтрагенту";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнаяНакладная";
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "ЗаказПоставщику, Всего");
	ТаблицаЗапасы.Свернуть("ЗаказПоставщику", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	КоличествоЗапасы = Запасы.Количество();
	
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаРаботыИУслуги = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = Запасы.Найти(Строка.Заказ, "ЗаказПоставщику");
			Всего = ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего);
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "ЗаказПоставщику");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "ЗаказПоставщику"), НайденнаяСтрокаЗапасы);
			Всего = ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего);
		Иначе
			Всего = Запасы.Итог("Всего");
		КонецЕсли;
		
		Если НайденнаяСтрокаЗапасы = Неопределено
		   И КоличествоЗапасы > 0
		   И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличной части ""Запасы""!'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				,
				ТекстСообщения,
				Неопределено,
				Неопределено,
				"ПредоплатаИтогСуммаРасчетовВалюта",
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	// Серийные номера - указываем справочно, контроль не требуется
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ОтчетКомитенту.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетКомитенту.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетКомитенту.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненная счет-фактура
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Предоплата.Очистить();
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура отмены проведения у подченненой счет фактуры
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится счет фактура %ПредставлениеСчетФактуры%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Отчет комитенту  № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры //КонтрольПодчиненнойСчетФактуры()

#КонецОбласти

#КонецЕсли