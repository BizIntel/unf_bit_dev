#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "ЗаказПокупателя, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		ТекСтрока.ВсегоРасч = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("ЗаказПокупателя", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("ЗаказПокупателя Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В (&Заказ)
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (КурсыВалютыУчетаКурс / КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчетаКурс,
	|	КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("ЗаказПокупателя"));
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "ЗаказПокупателя");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик заполнения на основании документа ПриходнаяНакладная.
//
// Параметры:
//	ДокументСсылкаПриходнаяНакладная - ДокументСсылка.ПриходнаяНакладная.
//	
Процедура ЗаполнитьПоРасходнаяНакладная(ДокументСсылкаПриходнаяНакладная) Экспорт
	
	Если ДокументСсылкаПриходнаяНакладная.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Нельзя ввести Отчет комиссионера на основании операции ""%1""'"),
		ДокументСсылкаПриходнаяНакладная.ВидОперации);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Ссылка.Организация КАК Организация,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент КАК Контрагент,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор КАК Договор,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	РасходнаяНакладнаяЗапасы.Ссылка.ВидЦен КАК ВидЦен,
	|	РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходнаяНакладнаяЗапасы.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РасходнаяНакладнаяЗапасы.Ссылка.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Курс КАК Курс,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Кратность КАК Кратность,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Номенклатура.СтранаПроисхождения В (ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия), ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.СтранаПроисхождения
	|	КОНЕЦ КАК СтранаПроисхождения,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	РасходнаяНакладнаяЗапасы.Партия КАК Партия,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.Цена КАК ЦенаПередачи,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК СуммаПередачи,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСПередачи,
	|	РасходнаяНакладнаяЗапасы.Заказ КАК ЗаказПокупателя,
	|	0 КАК КлючСвязи,
	|	РасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязиСерийныеНомера
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаПриходнаяНакладная);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	ВыборкаИзРезультатаЗапроса.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
		Дата,
		Новый Структура("Валюта", ВыборкаИзРезультатаЗапроса.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	НоваяСтрока = Покупатели.Добавить();
	НоваяСтрока.Покупатель = ВыборкаИзРезультатаЗапроса.Контрагент;
	НоваяСтрока.КлючСвязи = ВыборкаИзРезультатаЗапроса.КлючСвязи;
	
	ВыборкаИзРезультатаЗапроса.Сбросить();
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИзРезультатаЗапроса);
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		СерийныеНомера.Загрузить(ДокументСсылкаПриходнаяНакладная.СерийныеНомера.Выгрузить());
		Для каждого стр Из Запасы Цикл
			стр.СерийныеНомера = РаботаССерийнымиНомерамиКлиентСервер.СтроковоеПредставлениеСерийныхНомеровСтроки(СерийныеНомера, стр.КлючСвязиСерийныеНомера);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоРасходнаяНакладная()

// Процедура формирует счет-фактуры для покупателей.
//
Процедура СформироватьСчетаФактурыПокупатели(СсылкаНового)
	
	ТаблицаПодчиненныхСчетФактур = ПолучитьСписокПодчиненныхСчетФактурПокупателей();
	Для каждого СтрокаТабличнойЧасти Из Покупатели Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Покупатель) Тогда
			 СтрокаТабличнойЧасти.ВыставленСФ = Ложь;
		КонецЕсли;
		
		Если Не СтрокаТабличнойЧасти.ВыставленСФ
			ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Документы.СчетФактура.ПустаяСсылка();
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Использован", Ложь);
		ПараметрыОтбора.Вставить("Контрагент", СтрокаТабличнойЧасти.Покупатель);
		ПараметрыОтбора.Вставить("Дата", СтрокаТабличнойЧасти.ДатаСФ);
		
		СформированаНоваяСчФ = Ложь;
		РезультатПоиска = ТаблицаПодчиненныхСчетФактур.НайтиСтроки(ПараметрыОтбора);
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ДокСчетФактура = Документы.СчетФактура.СоздатьДокумент();
			ДокСчетФактура.Дата = СтрокаТабличнойЧасти.ДатаСФ;
			СформированаНоваяСчФ = Истина;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
				ИндексПоиска = 0;
				РезультатИндекс = Неопределено;
				Для каждого СтрокаПоиска Из РезультатПоиска Цикл
					Если СтрокаПоиска.Ссылка = СтрокаТабличнойЧасти.СчетФактура Тогда
						РезультатИндекс = ИндексПоиска;
					КонецЕсли;
					ИндексПоиска = ИндексПоиска + 1;
				КонецЦикла;
				Если РезультатИндекс = Неопределено Тогда
					НайденнаяСчФ = РезультатПоиска[0].Ссылка;
					РезультатПоиска[0].Использован = Истина;
				Иначе
					НайденнаяСчФ = РезультатПоиска[РезультатИндекс].Ссылка;
					РезультатПоиска[РезультатИндекс].Использован = Истина;
				КонецЕсли;
			Иначе
				НайденнаяСчФ = РезультатПоиска[0].Ссылка;
				РезультатПоиска[0].Использован = Истина;
			КонецЕсли;
			
			ДокСчетФактура = НайденнаяСчФ.ПолучитьОбъект();
			
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		Если СсылкаНового = Неопределено Тогда
			СтруктураДанных.Вставить("Ссылка", Ссылка);
		Иначе
			СтруктураДанных.Вставить("Ссылка", СсылкаНового);
		КонецЕсли;
		СтруктураДанных.Вставить("Дата", СтрокаТабличнойЧасти.ДатаСФ);
		СтруктураДанных.Вставить("Организация", Организация);
		СтруктураДанных.Вставить("Покупатель", СтрокаТабличнойЧасти.Покупатель);
		СтруктураДанных.Вставить("СводныйКомиссионный", Ложь);
		СтруктураДанных.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанных.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанных.Вставить("Курс", Курс);
		СтруктураДанных.Вставить("Кратность", Кратность);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		РезультатПоиска = Запасы.НайтиСтроки(ПараметрыОтбора);
		
		СтруктураДанных.Вставить("Запасы", РезультатПоиска);
		
		ДокСчетФактура.ЗаполнитьПоПокупателямОтчетаКомиссионера(СтруктураДанных);
		ДокСчетФактура.Записать();
		
		СтрокаТабличнойЧасти.СчетФактура = ДокСчетФактура.Ссылка;
		
		Если СформированаНоваяСчФ Тогда
			ТекстСообщения = НСтр("ru = 'Сформирован документ %ПредставлениеСчетФактуры%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + ДокСчетФактура.Номер + " от " + ДокСчетФактура.Дата + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСчетаФактурыПокупатели()

// Процедура формирует счет-фактуры для покупателей.
//
Процедура СформироватьСчетаФактурыСводно(СсылкаНового)
	
	ТаблицаПодчиненныхСчетФактур = ПолучитьСписокПодчиненныхСчетФактурПокупателей();
	КлючСвязиПокупателиСводно = Новый Массив;
	Для каждого СтрокаТабличнойЧасти Из Покупатели Цикл
		
		Если КлючСвязиПокупателиСводно.Найти(СтрокаТабличнойЧасти.КлючСвязи) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Покупатель) Тогда
			 СтрокаТабличнойЧасти.ВыставленСФ = Ложь;
		КонецЕсли;
		
		Если Не СтрокаТабличнойЧасти.ВыставленСФ
			ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаСФ) Тогда
			СтрокаТабличнойЧасти.СчетФактура = Документы.СчетФактура.ПустаяСсылка();
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Использован", Ложь);
		ПараметрыОтбора.Вставить("Контрагент", Контрагент);
		ПараметрыОтбора.Вставить("Дата", СтрокаТабличнойЧасти.ДатаСФ);
		
		СформированаНоваяСчФ = Ложь;
		РезультатПоиска = ТаблицаПодчиненныхСчетФактур.НайтиСтроки(ПараметрыОтбора);
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ДокСчетФактура = Документы.СчетФактура.СоздатьДокумент();
			ДокСчетФактура.Дата = СтрокаТабличнойЧасти.ДатаСФ;
			СформированаНоваяСчФ = Истина;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
				ИндексПоиска = 0;
				РезультатИндекс = Неопределено;
				Для каждого СтрокаПоиска Из РезультатПоиска Цикл
					Если СтрокаПоиска.Ссылка = СтрокаТабличнойЧасти.СчетФактура Тогда
						РезультатИндекс = ИндексПоиска;
					КонецЕсли;
					ИндексПоиска = ИндексПоиска + 1;
				КонецЦикла;
				Если РезультатИндекс = Неопределено Тогда
					НайденнаяСчФ = РезультатПоиска[0].Ссылка;
					РезультатПоиска[0].Использован = Истина;
				Иначе
					НайденнаяСчФ = РезультатПоиска[РезультатИндекс].Ссылка;
					РезультатПоиска[РезультатИндекс].Использован = Истина;
				КонецЕсли;
			Иначе
				НайденнаяСчФ = РезультатПоиска[0].Ссылка;
				РезультатПоиска[0].Использован = Истина;
			КонецЕсли;
			
			ДокСчетФактура = НайденнаяСчФ.ПолучитьОбъект();
			
		КонецЕсли;
		
		ПараметрыОтбораСводно = Новый Структура;
		ПараметрыОтбораСводно.Вставить("ДатаСФ", СтрокаТабличнойЧасти.ДатаСФ);
		РезультатПоискаСводно = Покупатели.НайтиСтроки(ПараметрыОтбораСводно);
		
		КлючСвязиСводно = Новый Массив;
		Для каждого СтрокаСводно Из РезультатПоискаСводно Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаСводно.Покупатель) Тогда
				СтрокаСводно.ВыставленСФ = Ложь;
			КонецЕсли;
				
			Если Не СтрокаСводно.ВыставленСФ
				ИЛИ Не ЗначениеЗаполнено(СтрокаСводно.ДатаСФ) Тогда
				СтрокаСводно.СчетФактура = Документы.СчетФактура.ПустаяСсылка();
				Продолжить;
			КонецЕсли;
			
			КлючСвязиСводно.Добавить(СтрокаСводно.КлючСвязи);
			КлючСвязиПокупателиСводно.Добавить(СтрокаСводно.КлючСвязи);
			
		КонецЦикла;
		
		СтруктураДанных = Новый Структура;
		Если СсылкаНового = Неопределено Тогда
			СтруктураДанных.Вставить("Ссылка", Ссылка);
		Иначе
			СтруктураДанных.Вставить("Ссылка", СсылкаНового);
		КонецЕсли;
		СтруктураДанных.Вставить("Дата", СтрокаТабличнойЧасти.ДатаСФ);
		СтруктураДанных.Вставить("Организация", Организация);
		СтруктураДанных.Вставить("Покупатель", Контрагент);
		СтруктураДанных.Вставить("СводныйКомиссионный", Истина);
		СтруктураДанных.Вставить("ВалютаДокумента", ВалютаДокумента);
		СтруктураДанных.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		СтруктураДанных.Вставить("Курс", Курс);
		СтруктураДанных.Вставить("Кратность", Кратность);
		
		МассивСтрокЗапасы = Новый Массив;
		Для каждого СтрокаЗапасы Из Запасы Цикл
			Если КлючСвязиСводно.Найти(СтрокаЗапасы.КлючСвязи) <> Неопределено Тогда
				МассивСтрокЗапасы.Добавить(СтрокаЗапасы);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураДанных.Вставить("Запасы", МассивСтрокЗапасы);
		
		ДокСчетФактура.ЗаполнитьПоПокупателямОтчетаКомиссионера(СтруктураДанных);
		ДокСчетФактура.Записать();
		
		Для каждого СтрокаПокупатели Из Покупатели Цикл
			Если КлючСвязиСводно.Найти(СтрокаПокупатели.КлючСвязи) <> Неопределено Тогда
				СтрокаПокупатели.СчетФактура = ДокСчетФактура.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Если СформированаНоваяСчФ Тогда
			ТекстСообщения = НСтр("ru = 'Сформирован документ %ПредставлениеСчетФактуры%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + ДокСчетФактура.Номер + " от " + ДокСчетФактура.Дата + """");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // СформироватьСчетаФактурыСводно()

// Процедура формирует счет-фактуры.
//
Процедура СформироватьСчетаФактуры(СсылкаНового = Неопределено)
	
	Если ВыписыватьСчетаФактурыСводно Тогда
		СформироватьСчетаФактурыСводно(СсылкаНового);
	Иначе
		СформироватьСчетаФактурыПокупатели(СсылкаНового);
	КонецЕсли;
	
КонецПроцедуры // СформироватьСчетаФактуры()

// Процедура отмены проведения у подченненой счет фактуры (полученной)
//
Процедура КонтрольПодчиненнойСчетФактурыПолученной()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка, Истина);
	Если НЕ СтруктураСчетаФактуры = Неопределено Тогда
		
		СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
		Если СчетФактура.Проведен Тогда
			
			ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится %ПредставлениеСчетФактуры%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Отчет комиссионера № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (полученная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка);
	Если НЕ СтруктураСчетаФактуры = Неопределено Тогда
		
		СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
		Если СчетФактура.Проведен Тогда
			
			ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится счет фактура %ПредставлениеСчетФактуры%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Отчет комиссионера № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //КонтрольПодчиненнойСчетФактуры()

// Функция обновляет параметры подчиненных счет-фактур.
//
Функция ПолучитьСписокПодчиненныхСчетФактурПокупателей()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ) КАК Дата,
	|	ЛОЖЬ КАК Использован,
	|	Док.Ссылка КАК Ссылка,
	|	Док.Контрагент КАК Контрагент
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетФактураДокументОснования.Дата КАК Дата,
	|		СчетФактураДокументОснования.Ссылка КАК Ссылка,
	|		СчетФактураДокументОснования.Контрагент КАК Контрагент
	|	ИЗ
	|		Документ.СчетФактура КАК СчетФактураДокументОснования
	|	ГДЕ
	|		СчетФактураДокументОснования.ДокументОснование = &ДокументОснование
	|		И НЕ СчетФактураДокументОснования.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетФактураДокументыОснования.Ссылка.Дата,
	|		СчетФактураДокументыОснования.Ссылка,
	|		СчетФактураДокументыОснования.Ссылка.Контрагент
	|	ИЗ
	|		Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|	ГДЕ
	|		СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
	|		И НЕ СчетФактураДокументыОснования.Ссылка.ПометкаУдаления) КАК Док";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("СписокКонтрагентов", Покупатели.ВыгрузитьКолонку("Покупатель"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСписокПодчиненныхСчетФактурПокупателей()

// Процедура обновляет параметры подчиненных счет-фактур.
//
Процедура ОбновитьСсылкиСчетФактур() Экспорт
	
	// Удаляем незадействованные счета-фактуры.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК Номер,
	|	Док.Дата КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетФактураДокументОснования.Ссылка КАК Ссылка,
	|		СчетФактураДокументОснования.Номер КАК Номер,
	|		СчетФактураДокументОснования.Дата КАК Дата
	|	ИЗ
	|		Документ.СчетФактура КАК СчетФактураДокументОснования
	|	ГДЕ
	|		СчетФактураДокументОснования.ДокументОснование = &ДокументОснование
	|		И (НЕ СчетФактураДокументОснования.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетФактураДокументыОснования.Ссылка,
	|		СчетФактураДокументыОснования.Ссылка.Номер,
	|		СчетФактураДокументыОснования.Ссылка.Дата
	|	ИЗ
	|		Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|	ГДЕ
	|		СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
	|		И (НЕ СчетФактураДокументыОснования.Ссылка.ПометкаУдаления)) КАК Док";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	ТаблицаСчетФактур = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаСчФ Из ТаблицаСчетФактур Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СчетФактура", СтрокаСчФ.Ссылка);
		ПараметрыОтбора.Вставить("ВыставленСФ", Истина);
		РезультатПоиска = Покупатели.НайтиСтроки(ПараметрыОтбора);
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ТекущаяСчФ = СтрокаСчФ.Ссылка.ПолучитьОбъект();
			Если ТекущаяСчФ.ДокументыОснования.Количество() > 0 Тогда
				
				СтрокаОснование = ТекущаяСчФ.ДокументыОснования.Найти(Ссылка, "ДокументОснование");
				Если НЕ СтрокаОснование = Неопределено Тогда
					
					ТекущаяСчФ.ДокументыОснования.Удалить(СтрокаОснование);
					ТекущаяСчФ.Записать();
					
					ТекстСообщения = НСтр("ru = 'Из документа %ПредставлениеСчетФактуры% удалена ссылка на текщий документ.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + ТекущаяСчФ.Номер + " от " + ТекущаяСчФ.Дата + """");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			Иначе
				
				ТекущаяСчФ.УстановитьПометкуУдаления(Истина);
				ТекущаяСчФ.Записать();
				
				ТекстСообщения = НСтр("ru = 'Документа %ПредставлениеСчетФактуры% помечен на удаление.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + ТекущаяСчФ.Номер + " от " + ТекущаяСчФ.Дата + """");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаПодчиненныхСчетФактур(Проведен);
	
КонецПроцедуры // ОбновитьСсылкиСчетФактур()

// Процедура отмены / проведения у подченненых счет-фактур.
//
Процедура ОбработкаПодчиненныхСчетФактур(Провести = Истина)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакПроведения", НЕ Провести);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК Номер,
	|	Док.Дата КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетФактураДокументОснования.Ссылка КАК Ссылка,
	|		СчетФактураДокументОснования.Номер КАК Номер,
	|		СчетФактураДокументОснования.Дата КАК Дата
	|	ИЗ
	|		Документ.СчетФактура КАК СчетФактураДокументОснования
	|	ГДЕ
	|		СчетФактураДокументОснования.Проведен = &ПризнакПроведения
	|		И СчетФактураДокументОснования.ДокументОснование = &ДокументОснование
	|		И (НЕ СчетФактураДокументОснования.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетФактураДокументыОснования.Ссылка,
	|		СчетФактураДокументыОснования.Ссылка.Номер,
	|		СчетФактураДокументыОснования.Ссылка.Дата
	|	ИЗ
	|		Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|	ГДЕ
	|		СчетФактураДокументыОснования.Ссылка.Проведен = &ПризнакПроведения
	|		И СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
	|		И (НЕ СчетФактураДокументыОснования.Ссылка.ПометкаУдаления)) КАК Док";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		Если Провести И НЕ ТекущийДокумент.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеПроведен = ТекущийДокумент.Проведен;
		
		ТекущийДокумент.Проведен = Провести;
		ТекущийДокумент.Записать();
		
		Если СостояниеПроведен И НЕ Провести Тогда
			
			ТекстСообщения = НСтр("ru = 'Распроведена счет-фактура %ПредставлениеСчетФактуры%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + ТекущийДокумент.Номер + " от " + ТекущийДокумент.Дата + """");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		ИначеЕсли Не СостояниеПроведен И Провести Тогда
			
			ТекстСообщения = НСтр("ru = 'Проведена счет-фактура %ПредставлениеСчетФактуры%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + ТекущийДокумент.Номер + " от " + ТекущийДокумент.Дата + """");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодчиненныхСчетФактур()

// Процедура синхронизирует пометку удаления для подчиненных счет-фактур.
//
Процедура СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометитьНаУдаление = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакУдаления", НЕ ПометитьНаУдаление);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетФактураДокументОснования.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.СчетФактура КАК СчетФактураДокументОснования
	|	ГДЕ
	|		СчетФактураДокументОснования.ДокументОснование = &ДокументОснование
	|		И СчетФактураДокументОснования.ПометкаУдаления = &ПризнакУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетФактураДокументыОснования.Ссылка
	|	ИЗ
	|		Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|	ГДЕ
	|		СчетФактураДокументыОснования.ДокументОснование = &ДокументОснование
	|		И СчетФактураДокументыОснования.Ссылка.ПометкаУдаления = &ПризнакУдаления) КАК Док";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		ТекущийДокумент.Проведен = ?(ПометитьНаУдаление, Ложь, ТекущийДокумент.Проведен);
		ТекущийДокумент.ПометкаУдаления = ПометитьНаУдаление;
		ТекущийДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры // СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "ЗаказПокупателя, Всего");
	ТаблицаЗапасы.Свернуть("ЗаказПокупателя", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	КоличествоЗапасы = Запасы.Количество();
	
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаРаботыИУслуги = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = Запасы.Найти(Строка.Заказ, "ЗаказПокупателя");
			Всего = ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего);
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "ЗаказПокупателя");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "ЗаказПокупателя"), НайденнаяСтрокаЗапасы);
			Всего = ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего);
		Иначе
			Всего = Запасы.Итог("Всего");
		КонецЕсли;
		
		Если НайденнаяСтрокаЗапасы = Неопределено
		   И КоличествоЗапасы > 0
		   И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличной части ""Запасы""!'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				,
				ТекстСообщения,
				Неопределено,
				Неопределено,
				"ПредоплатаИтогСуммаРасчетовВалюта",
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРасходнаяНакладная";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
	СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометкаУдаления);
	
	Если НЕ ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СформироватьСчетаФактуры();
		Иначе
			СсылкаНового = ПолучитьСсылкуНового();
			Если НЕ ЗначениеЗаполнено(СсылкаНового) Тогда
				СсылкаНового = Документы.ОтчетКомиссионера.ПолучитьСсылку();
			КонецЕсли;
			СформироватьСчетаФактуры(СсылкаНового);
			УстановитьСсылкуНового(СсылкаНового);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ОтчетКомиссионера.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПереданные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетКомиссионера.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
	// Подчиненные счет-фактуры.
	Если НЕ Отказ Тогда
		
		ОбработкаПодчиненныхСчетФактур();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетКомиссионера.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненные счет-фактуры.
	Если НЕ Отказ Тогда
		
		ОбработкаПодчиненныхСчетФактур(Ложь);
		
	КонецЕсли;
	
	// Подчиненная счет-фактура (полученная).
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактурыПолученной();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Предоплата.Очистить();
	
	// Счета-фактуры на реализованные товары и услуги
	ВыписыватьСчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И Дата >= '20150101';
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#КонецЕсли