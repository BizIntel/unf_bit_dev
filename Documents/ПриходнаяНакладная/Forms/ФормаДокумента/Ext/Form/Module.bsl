
#Область ОписаниеПеременных

&НаКлиенте
Перем КопированиеСтрокиЗапасы;

&НаКлиенте
Перем КопированиеСтрокиРасходы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	Заказ = Объект.Заказ;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Если Параметры.Свойство("ВидОперацииВозврат") Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Параметры.Основание) 
			И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
			ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС(Истина);
		КонецЕсли;
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	
	Объект.НДСВключатьВСтоимость = Истина;
	УправлениеНебольшойФирмойСервер.НастроитьГруппуЦеныИВалюты(ЭтаФорма);
	
	ПолучитьСтруктуруВидовОпераций();
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦенКонтрагента, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	//Установить текст СчетФактура
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Истина);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(НайденныйСчетФактура, Истина, СчетФактураТекст);
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	ЗаполнитьСписокДокументОснование();

	ЗаполнитьНаличиеОшибокДанныхЕГАИССервер();
	
	ИспользуетсяРегистрацияРозничныхПродажВЕГАИС = УправлениеНебольшойФирмойСервер.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	
	УстановитьВидимостьИДоступность();
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
	ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	КонтрольНаСкладеОтключен = НЕ Константы.КонтролироватьОстаткиПриПроведении.Получить();
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Расходы");
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий("Запасы");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Запасы"), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку("Запасы", Истина);
	
	ЗаполнитьСписокДействий("Расходы");
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Расходы"), ЭтотОбъект.РасходыИзменениеСтрокДействие);
	РасходыИзменениеСтрокДействиеПриОткрытии = РасходыИзменениеСтрокДействие;
	УстановитьПометку("Расходы", Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// ЭДО
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыЭДОПриСоздании);
	// Конец ЭДО
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Расходы");
	// Конец ПодборНоменклатурыВДокументах
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ПриходнаяНакладная.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	//Ручные скидки
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	//Конец Ручные скидки
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);	

	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ВидОперации.Видимость = Ложь;
		Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ФормаНастройкаДокумента.Видимость = Ложь;
		Элементы.ПоказатьВЖурналеКонтрагентов.Видимость = Ложь;
		Элементы.ФормаОбработкаНастройкаПрограммыБольшеВозможностейКонтекст.Видимость = Ложь;
		Элементы.ГруппаПредоплата.Видимость = Ложь;
		Элементы.ГруппаДополнительно.Видимость = Ложь;
		Элементы.ЗапасыИтогСуммаНДС.Видимость = Ложь;
		Элементы.ГруппаСсылки.Видимость = Ложь;
		Элементы.ГруппаЦеныИВалюта.Видимость = Ложь;
		Элементы.ЗапасыГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.ЗапасыЗапасыПодбор.Видимость = Ложь;
		Элементы.ЗапасыЗагрузкаИзФайлаЗапасы.Видимость = Ложь;
		Элементы.ЗапасыИзменитьСтроки.Видимость = Ложь;
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ВключатьРасходыВСебестоимость.Видимость = Ложь;
		Элементы.РасходыГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.РасходыЗагрузкаИзФайлаУслуги.Видимость = Ложь;
		Элементы.РасходыИзменитьСтроки.Видимость = Ложь;
		Элементы.РасходыРасходыПодбор.Видимость = Ложь;
		Элементы.РасходыСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыСуммаНДС.Видимость = Ложь;
		Элементы.ГруппаЗаказОснование.Видимость = Ложь;
		Элементы.РасходыЗаказПоставщику.Видимость = Ложь;
		Элементы.Скидки.Видимость = Ложь;
		
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанельКомандыЭДО.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = "Готово";
	КонецЕсли;
	// Конец МобильноеПриложение

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.ПриходнаяНакладная",
		ЭтотОбъект.ВладелецФормы,
		ЭтотОбъект.ОснованиеСоздания
	);
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("Запасы");
	ОпределитьОбъектИзменений("Расходы");
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента" Тогда
		СчетФактураТекст = ВыбранноеЗначение;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(ВыбранноеЗначение, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуруПолученный" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		СчетФактураТекст = Параметр.Представление;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(Параметр.Представление, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ТекущаяСтраницаЗапасы	= Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЗапасы;
		ИмяТабличнойЧасти 		= ?(ТекущаяСтраницаЗапасы, "Запасы", "Расходы");
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ТекущаяСтраницаЗапасы, ТекущаяСтраницаЗапасы);
		
		ОбновитьПодвалФормы();
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИзменилосьКоличество = ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Если ИзменилосьКоличество Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
		КонецЕсли; 
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Расходы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОВвозеМаркированныхТоваровИзЕАЭСГИСМ"
		Или ИмяСобытия = "Запись_УведомлениеОбИмпортеМаркированныхТоваровГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
		ОбновитьРеквизитыОбменаСГИСМ();
	КонецЕсли;
	
		Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьРеквизитыОбменаСГИСМ();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры // ОбработкаОповещения()
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//+ ГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	ОбновитьРеквизитыОбменаСГИСМ();
	//- ГИСМ
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Объект.Договор, Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.ВидОперации, Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = Перечисления.ДаНет.Да
			И ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
			И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Обработчик механизма "Свойства"
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО

	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку("Запасы", Истина);
	КонецЕсли;
	Если Элементы.ГруппаРасходыИзменениеСтрок.Видимость Тогда
		УстановитьПометку("Расходы", Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	ЗаполнитьНаличиеОшибокДанныхЕГАИССервер();
	УстановитьДоступностьЭлементовЕГАИС();
	
	//+ ГИСМ
	СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер();
	ОбновитьРеквизитыОбменаСГИСМ();
	//- ГИСМ
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполненЗаказ = Ложь;
	ЗаполненЗаказВозврат = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			Если ТипЗнч(СтрокаТЧ.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ЗаполненЗаказ = Истина;
			Иначе
				ЗаполненЗаказВозврат = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненЗаказ Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	// РМК
	Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма")
		И СтрНайти(ЭтотОбъект.ВладелецФормы.ИмяФормы, "ФормаДокумента_РМК") > 0 
		Тогда
		Оповестить("РМК_Запись_ПриходнаяНакладнаяВозврат", Новый Структура("Ссылка, Номер, Дата, ВидОперации", Объект.Ссылка, Объект.Номер, Объект.Дата, Объект.ВидОперации));
	КонецЕсли;
	// Конец РМК
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
		СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦенКонтрагента, Объект.НалогообложениеНДС);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦенКонтрагента, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура ВключатьРасходыВСебестоимостьПриИзменении(Элемент)
	
	Если Объект.ВключатьРасходыВСебестоимость Тогда
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Ложь;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Ложь;
		Элементы.РаспределитьРасходы.Видимость = Истина;
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Истина;
		
	Иначе
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Истина;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Истина;
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Истина;
		Элементы.РаспределитьРасходы.Видимость = Ложь;
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Ложь;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.СуммаРасходов = 0;
		КонецЦикла;
		
		Для каждого СтрокаРасходы из Объект.Расходы Цикл
			СтрокаРасходы.СтруктурнаяЕдиница = ОсновноеПодразделение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВключатьРасходыВСебестоимостьПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ОчиститьОснованиеПриИзменениеКонтрагентаДоговора();
		
		ВидимостьДоговораПередИзменением = Элементы.Договор.Видимость;
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		
		Объект.Договор = СтруктураДанные.Договор;
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		Если Объект.Предоплата.Количество() > 0
		   И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("КонтрагентПередИзменением, ДоговорПередИзменением, КонтрагентВестиРасчетыПоЗаказамПередИзменением, ВидимостьДоговораПередИзменением, СтруктураДанные", КонтрагентПередИзменением, ДоговорПередИзменением, КонтрагентВестиРасчетыПоЗаказамПередИзменением, ВидимостьДоговораПередИзменением, СтруктураДанные)),
				НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'"),
				РежимДиалогаВопрос.ДаНет
			);
			Возврат;
			
		КонецЕсли;
		
		КонтрагентПриИзмененииФрагмент(ДоговорПередИзменением, СтруктураДанные);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
		Объект.Заказ = Элементы.Заказ.ОграничениеТипа.ПривестиЗначение(Заказ);
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе 
		Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
		Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Объект.Заказ = Элементы.Заказ.ОграничениеТипа.ПривестиЗначение(Заказ);
		КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
		Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииФрагмент(ДополнительныеПараметры.ДоговорПередИзменением, ДополнительныеПараметры.СтруктураДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагмент(ДоговорПередИзменением, СтруктураДанные)
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	
	Если НЕ СтруктураДанные.СуммаВключаетНДС = Неопределено Тогда
		Объект.СуммаВключаетНДС = СтруктураДанные.СуммаВключаетНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	ИзменилсяВидЦен = Объект.ВидЦенКонтрагента <> СтруктураДанные.ВидЦенКонтрагента 
		И ЗначениеЗаполнено(СтруктураДанные.ВидЦенКонтрагента) И СтруктураДанные.УчетЦенКонтрагентов;
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов;
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов
		И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Расходы.Количество() > 0);
	
	СтруктураДанные.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	
	Заказ = Объект.Заказ;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦенКонтрагента = СтруктураДанные.ВидЦенКонтрагента;
		Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
			
			Объект.РегистрироватьЦеныПоставщика = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		
		Если ИзменилсяВидЦен Тогда
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе! 
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
			|Необходимо проверить валюту документа!'"
		);
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) 
		И ИзменилсяВидЦен Тогда
		
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
		
		Объект.ВидЦенКонтрагента	= СтруктураДанные.ВидЦенКонтрагента;
		СтруктураНадписи 			= 
			Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", 
							Объект.ВалютаДокумента, 
							ВалютаРасчетов, 
							Объект.Курс, 
							КурсНациональнаяВалюта, 
							Объект.СуммаВключаетНДС, 
							УчетВалютныхОпераций, 
							Объект.ВидЦенКонтрагента, 
							Объект.НалогообложениеНДС);
							
		ЦеныИВалюта 				= СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ПересчетНеобходим Тогда
			
			Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе! 
									|Пересчитать документ в соответствии с договором?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентПриИзмененииФрагментЗавершение", ЭтотОбъект, Новый Структура("ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные", ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные)), 
				Сообщение,
				РежимДиалогаВопрос.ДаНет
			);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураНадписи 			= 
			Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", 
							Объект.ВалютаДокумента, 
							ВалютаРасчетов, 
							Объект.Курс, 
							КурсНациональнаяВалюта, 
							Объект.СуммаВключаетНДС, 
							УчетВалютныхОпераций, 
							Объект.ВидЦенКонтрагента, 
							Объект.НалогообложениеНДС);
							
		ЦеныИВалюта 				= СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы");
		ОбновитьПодвалФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры // ДоговорПриИзменении()

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	ЗаказПередИзменением = Заказ;
	Заказ = Объект.Заказ;
	
	Если Объект.Предоплата.Количество() > 0
	   И ЗаказПередИзменением <> Объект.Заказ
	   И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика") Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаказПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ЗаказПередИзменением", ЗаказПередИзменением)), НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'"), Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаказПередИзменением = ДополнительныеПараметры.ЗаказПередИзменением;
	
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Объект.Заказ = ЗаказПередИзменением;
		Заказ = ЗаказПередИзменением;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ЗаказПриИзменении()

&НаКлиенте
Процедура ДокументОснованиеПриИзменении()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя")
		И (НЕ ЗначениеЗаполнено(Объект.ДокументОснование)
		ИЛИ (ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.РасходнаяНакладная")
			И ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ЧекККМ")
			И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
			И ПолучитьВидОперацииДокументаОснования() <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд")))) 
		Тогда
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = Истина;
		
	Иначе
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = Ложь;
		Если Объект.Запасы.Количество() > 0 Тогда
			Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
				СтрокаЗапасы.Себестоимость = 0;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		//Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДокументОснование, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) тогда
			возврат;
		КонецЕсли;
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоТипу(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументОснование()
	
	СписокДокументОснование.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", "Заказ покупателя");
	СписокДокументОснование.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", "Заказ поставщику");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРемонты") Тогда
		СписокДокументОснование.Добавить("Документ.ПриемИПередачаВРемонт.ФормаВыбора", "Прием и передача в ремонт");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
		СписокДокументОснование.Добавить("Документ.ПриходныйОрдер.ФормаВыбора", "Приходный ордер");
	КонецЕсли;
	СписокДокументОснование.Добавить("Документ.РасходнаяНакладная.ФормаВыбора", "Расходная накладная");
	СписокДокументОснование.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", "Счет на оплату поставщика");
	Если ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") Тогда
		СписокДокументОснование.Добавить("Документ.ЧекККМ.ФормаВыбора", "Чек ККМ");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		СписокДокументОснование.Добавить("Документ.ТТНВходящаяЕГАИС.ФормаВыбора", "Товарно-транспортная накладная ЕГАИС");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеНебольшойФирмойКлиент.ОткрытьСчетФактуру(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	Модифицированность = Истина;
	
	ОбработатьТаблицу("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма;
	Модифицированность = Истина;
	
	ОбработатьТаблицу("Запасы");
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры
// Конец ИнтеграцияГИСМ


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыПоДаннымПоставщикаЕГАИС

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаЕГАИСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.ПолученИзЕГАИС Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаЕГАИСПередУдалением(Элемент, Отказ)
	Если Объект.ПолученИзЕГАИС Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаЕГАИСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаполнитьНаличиеОшибокДанныхЕГАИСКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаЕГАИСНоменклатураПриИзменении(Элемент)
	ТоварыПоДаннымПоставщикаЕГАИСНоменклатураПриИзмененииКлиент()
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаЕГАИСНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТоварыПоДаннымПоставщикаЕГАИС.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	МассивАлкогольнойПродукции = Новый Массив;
	МассивАлкогольнойПродукции.Добавить(ТекущиеДанные.АлкогольнаяПродукция);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("АлкогольнаяПродукция", МассивАлкогольнойПродукции);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных);
	СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
	СтруктураПараметры.Вставить("РежимВыбора", Истина);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИСПриИзмененииНоменклатуры", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма", СтруктураПараметры, Элемент,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерийныеНомера = "";
	КонецЕсли;	
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	Если КопированиеСтрокиЗапасы = Неопределено ИЛИ НЕ КопированиеСтрокиЗапасы Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиЗапасы = Ложь;
	КонецЕсли;	
	
КонецПроцедуры // ЗапасыПриИзменении()

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		КопированиеСтрокиЗапасы = Истина;
    КонецЕсли;
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	УправлениеНебольшойФирмойКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.АкцизныеМарки, ТекущиеДанные);
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки = СтруктураДанные.НеобходимостьВводаАкцизнойМарки;
	
	//Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	ОткрытьВводАкцизнойМарки(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
	Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
	
		СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 				СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);		
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
		
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = "";
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = УправлениеНебольшойФирмойСервер.ПолучитьТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
		
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
		
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;	
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	//Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	//Конец Ручная скидка	
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Запасы.ТекущиеДанные;
	СтуктураРеквизита = Новый Структура("Объект,ТабЧасть,НомерСтроки,ИмяРеквизита", "Объект","Запасы",ТекСтрока.НомерСтроки-1,"Содержание");
	ОбщегоНазначенияКлиентПереопределяемый.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект, СтуктураРеквизита, Строка(ТекСтрока.Номенклатура)+": содержание");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	Если КопированиеСтрокиРасходы = Неопределено ИЛИ НЕ КопированиеСтрокиРасходы Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиРасходы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РасходыПриИзменении()

&НаКлиенте
Процедура РасходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		КопированиеСтрокиРасходы = Истина;
    КонецЕсли;
	
КонецПроцедуры // РасходыПередНачаломДобавления()

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		
	КонецЕсли;
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
КонецПроцедуры // РасходыПриНачалеРедактирования()

&НаКлиенте
Процедура РасходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", "");
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = 0;
	СтрокаТабличнойЧасти.Сумма = 0;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.СуммаНДС = 0;
	СтрокаТабличнойЧасти.Всего = 0;
	СтрокаТабличнойЧасти.Содержание = "";
	
	Если СтруктураДанные.ОчиститьЗаказИПодразделение Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = Неопределено;
		СтрокаТабличнойЧасти.Заказ = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
	КонецЕсли;
	
	Если СтруктураДанные.ОчиститьНаправлениеДеятельности Тогда
		СтрокаТабличнойЧасти.НаправлениеДеятельности = Неопределено;
	Иначе
		СтрокаТабличнойЧасти.НаправлениеДеятельности = СтруктураДанные.НаправлениеДеятельности;
	КонецЕсли;
	
КонецПроцедуры // РасходыНоменклатураПриИзменении()

&НаКлиенте
Процедура РасходыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
		ШаблонСодержания = УправлениеНебольшойФирмойСервер.ПолучитьТекстСодержания(СтрокаТабличнойЧасти.Номенклатура);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Расходы");
	
КонецПроцедуры // РасходыКоличествоПриИзменении()

&НаКлиенте
Процедура РасходыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Расходы");
	
КонецПроцедуры // РасходыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Расходы");
	
КонецПроцедуры // РасходыЦенаПриИзменении()

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РасходыСуммаПриИзменении()

&НаКлиенте
Процедура РасходыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РасходыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РасходыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РасходыСуммаНДСПриИзменении()

&НаКлиенте
Процедура РасходыНаправлениеДеятельностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияНаправленияДеятельности Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для данного расхода направление деятельности не указывается!'"));
	КонецЕсли;
	
КонецПроцедуры // РасходыНаправлениеДеятельностиНачалоВыбора()

&НаКлиенте
Процедура РасходыСтруктурнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияПодразделения Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для этого расхода подразделение не указывается!'"));
	КонецЕсли;
	
КонецПроцедуры // РасходыСтруктурнаяЕдиницаНачалоВыбора()

&НаКлиенте
Процедура РасходыЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЗаказНачалоВыбора(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НЕ СтруктураДанные.ВозможностьУказанияЗаказа Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Для этого расхода заказ не указывается!'"));
	КонецЕсли;
	
КонецПроцедуры // РасходыЗаказНачалоВыбора()

&НаКлиенте
Процедура РасходыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ТекСтрока = Элементы.Расходы.ТекущиеДанные;
	СтуктураРеквизита = Новый Структура("Объект,ТабЧасть,НомерСтроки,ИмяРеквизита", "Объект","Расходы",ТекСтрока.НомерСтроки-1,"Содержание");
	ОбщегоНазначенияКлиентПереопределяемый.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект, СтуктураРеквизита, Строка(ТекСтрока.Номенклатура)+": содержание");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РаспределитьРасходыПоКоличеству(Команда)
	
	РаспределитьТабЧастьРасходыПоКоличеству();
		
КонецПроцедуры // РаспределитьРасходыПоКоличеству()

&НаКлиенте
Процедура РаспределитьРасходыПоСумме(Команда)
	
	РаспределитьТабЧастьРасходыПоСумме();
		
КонецПроцедуры // РаспределитьРасходыПоСумме()

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ?(ТекЭлемент.Заказ = Неопределено, ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"), ТекЭлемент.Заказ);
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	Для каждого ТекЭлемент Из Объект.Расходы Цикл
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ТекЭлемент.ЗаказПоставщику;
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"), Истина, Ложь), // Подбор
		Истина, // ЕстьЗаказ
		ЗаказВШапке, // ЗаказВШапке
		Компания, // Компания
		?(КонтрагентВестиРасчетыПоЗаказам, ?(ЗаказВШапке, Объект.Заказ, МассивЗаказов), Неопределено), // Заказ
		Объект.Дата, // Дата
		Объект.Ссылка, // Ссылка
		Объект.Контрагент, // Контрагент
		Объект.Договор, // Договор
		Объект.Курс, // Курс
		Объект.Кратность, // Кратность
		Объект.ВалютаДокумента, // ВалютаДокумента
		Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего")
	);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика") Тогда
		КодВозврата = Неопределено;

		ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПоставщикам", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение1", ЭтотОбъект, Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора", АдресПредоплатаВХранилище, ПараметрыПодбора)));
        Возврат;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект, Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
        Возврат;
	КонецЕсли;
	
	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    ПараметрыПодбора = ДополнительныеПараметры.ПараметрыПодбора;
    
    
    КодВозврата = Результат;
    
    РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент1(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    
    КодВозврата = Результат;
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
    
    Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика")
        ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"))
        И (КодВозврата = КодВозвратаДиалога.OK) Тогда
        ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
    КонецЕсли;

КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Ответ = Неопределено;
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ЗаполнитьПоДокументу(Объект.ДокументОснование);
        УстановитьВидимостьИДоступность();
        
        СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦенКонтрагента, Объект.НалогообложениеНДС);
        ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
        
        ОбновитьПодвалФормы();
        
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Ответ = Неопределено;
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу(Объект.Заказ);
        УстановитьВидимостьИДоступность();
        
        СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦенКонтрагента, Объект.НалогообложениеНДС);
        ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
        
        ОбновитьПодвалФормы();
        
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказу()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура НастройкаДокумента(Команда)
	
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеЗаказаПоставщикуВДокументахПоступления", 	Объект.ПоложениеЗаказаПоставщику);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", 								Ложь);
	
	СтруктураНастройкаДокумента = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.НастройкаДокумента", СтруктураПараметров,,,,, Новый ОписаниеОповещения("НастройкаДокументаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// 2. Открвыаем форму "Цены и Валюта".
	СтруктураНастройкаДокумента = Результат;
	
	// 3. Применяем изменения, сделанные в форме "Настройка документа".
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
		Объект.ПоложениеЗаказаПоставщику = СтруктураНастройкаДокумента.ПоложениеЗаказаПоставщикуВДокументахПоступления;
		УстановитьВидимостьОтПользовательскихНастроек();
		
		// ГрупповоеИзменениеСтрок
		ЗаполнитьСписокДействий("Запасы");
		
	КонецЕсли;
	
КонецПроцедуры

// ЕГАИС
&НаКлиенте
Процедура ОтобратьДляЗаполнения(Команда)
	
	ОтборСтруктура = Новый Структура;
	
	Элементы.ТоварыПоДаннымПоставщикаЕГАИСОтобратьДляЗаполнения.Пометка = НЕ Элементы.ТоварыПоДаннымПоставщикаЕГАИСОтобратьДляЗаполнения.Пометка;
	Если Элементы.ТоварыПоДаннымПоставщикаЕГАИСОтобратьДляЗаполнения.Пометка Тогда
		ОтборСтруктура.Вставить("ЕстьОшибкиВЗаполненииСтроки", Истина);
		Элементы.ТоварыПоДаннымПоставщикаЕГАИС.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтруктура);
	Иначе
		Элементы.ТоварыПоДаннымПоставщикаЕГАИС.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоФактуПоДаннымПоставщика(Команда)
	
	Если ЕстьОшибкиСоответствияЕГАИСКлиент() Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Заполните соответствие номенлатуры ЕГАИС'"));
		Возврат;
	КонецЕсли;
	
	
	Если Объект.Запасы.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДанныеЕГАИС", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличная часть ""Товары"" будет перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьПоДанныеЕГАИССервер();
		ОбновитьПодвалФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьАктЕГАИС(Команда)
	
	Если Модифицированность ИЛИ НЕ Объект.Проведен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Перед выполнение операции необходимо провести документ.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Запасы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для выполнения операции товары должны быть заполнены.'"),, "Запасы", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ПолученИзЕГАИС Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеПередачаДанныхВЕГАИС", ЭтотОбъект);
		
		Если Не Объект.ЕстьРасхождения Тогда
			ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПодтвержденияТТН");
		Иначе
			ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктРасхожденийТТН");
			ЗаполнитьРасхожденияВТТН(Объект.Ссылка, Объект.ТоварноТранспортнаяНакладнаяЕГАИС);
		КонецЕсли;
		
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
		ВходныеПараметры.ДокументСсылка = Объект.ТоварноТранспортнаяНакладнаяЕГАИС;
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
			ОбработчикОповещения,
			ВидДокумента,
			ВходныеПараметры);
		
		Оповестить("ОбновитьСписокЗапросовЕГАИС");
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ПодписьЧекаЕГАИС) Тогда
			ТекстСообщения = НСтр("ru = 'Данные уже переданы в ЕГАИС'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если (КонтрольНаСкладеОтключен
			ИЛИ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект)) Тогда
			НапечататьЧекКлиент();
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.ТоварыПоДаннымПоставщикаЕГАИС.ВыделенныеСтроки;
	
	МассивАлкогольнойПродукции = Новый Массив;
	МассивИдентификаторовСтрок = Новый Массив;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.ТоварыПоДаннымПоставщика.Получить(ВыделеннаяСтрока);
		МассивАлкогольнойПродукции.Добавить(СтрокаТаблицы.АлкогольнаяПродукция);
		МассивИдентификаторовСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("АлкогольнаяПродукция", МассивАлкогольнойПродукции);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных,);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("АдресВХранилище", АдресВХранилище);
	СтруктураПараметры.Вставить("ТТН", Объект.ТоварноТранспортнаяНакладнаяЕГАИС);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АлкогольнаяПродукция", МассивИдентификаторовСтрок);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИС", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма", СтруктураПараметры, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКонтрагентов(Команда)
	ВыделенныеСтроки = Элементы.ТоварыПоДаннымПоставщикаЕГАИС.ВыделенныеСтроки;
	
	МассивАлкогольнойПродукции = Новый Массив;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.ТоварыПоДаннымПоставщика.Получить(ВыделеннаяСтрока);
		МассивАлкогольнойПродукции.Добавить(СтрокаТаблицы.АлкогольнаяПродукция);
	КонецЦикла;
	
	МассивКонтрагентов = СопоставитьКонтрагентовНаСервере(МассивАлкогольнойПродукции, Объект.ТоварноТранспортнаяНакладнаяЕГАИС);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОрганизацииЕГАИС", МассивКонтрагентов);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных,);
	СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
	
	ДополнительныеПараметры = Новый Структура;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуСопоставлениеОрганизацийЕГАИС", ЭтотОбъект, ДополнительныеПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.СопоставлениеОрганизацийЕГАИС.Форма", СтруктураПараметры, УникальныйИдентификатор,,,, ОбработчикОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРасхожденияПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовЕГАИС();

КонецПроцедуры
// Конец ЕГАИС

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура("Отбор", Новый Структура("Контрагент, Договор", Контрагент, Договор));
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ДокументОснованиеПриИзменении();
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
		Элементы.РасходыСтавкаНДС.Видимость = Истина;
		Элементы.РасходыСуммаНДС.Видимость = Истина;
		Элементы.РасходыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
		Элементы.РасходыСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыСуммаНДС.Видимость = Ложь;
		Элементы.РасходыВсего.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДоговора();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура ОчиститьОснованиеПриИзменениеКонтрагентаДоговора()
	
	Если НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПриходныйОрдер") 
		И НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЧекККМ")
		И НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		Объект.ДокументОснование = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьОснованиеПриИзменениеКонтрагентаДоговора()

&НаСервере
Процедура РаспределитьТабЧастьРасходыПоКоличеству()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьТабЧастьРасходыПоКоличеству();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

&НаСервере
Процедура РаспределитьТабЧастьРасходыПоСумме()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.РаспределитьТабЧастьРасходыПоСумме();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();

	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("ОчиститьЗаказИПодразделение", Ложь);
	СтруктураДанные.Вставить("ОчиститьНаправлениеДеятельности", Ложь);
	СтруктураДанные.Вставить("НаправлениеДеятельности", СтруктураДанные.Номенклатура.НаправлениеДеятельности);
	
	Если СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		СтруктураДанные.ОчиститьЗаказИПодразделение = Истина;
	КонецЕсли;
	
	Если СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
	   И СтруктураДанные.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
		СтруктураДанные.ОчиститьНаправлениеДеятельности = Истина;
	КонецЕсли;
	
	СтруктураДанные.Вставить("НеобходимостьВводаАкцизнойМарки", СтруктураДанные.Номенклатура.ВидАлкогольнойПродукции.Маркируемый);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;		
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
				
	КонецЕсли;	
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура;
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияНаправленияДеятельности = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
		ВозможностьУказанияНаправленияДеятельности = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияНаправленияДеятельности", ВозможностьУказанияНаправленияДеятельности);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНаправлениеДеятельностиНачалоВыбора()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияПодразделения = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		ВозможностьУказанияПодразделения = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияПодразделения", ВозможностьУказанияПодразделения);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаказНачалоВыбора(Номенклатура)
	
	СтруктураДанные = Новый Структура;
	
	ВозможностьУказанияЗаказа = Истина;
	
	Если Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
	   И Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
		ВозможностьУказанияЗаказа = Ложь;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ВозможностьУказанияЗаказа", ВозможностьУказанияЗаказа);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаНачалоВыбора()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ВидЦенКонтрагента",
		ДоговорПоУмолчанию.ВидЦенКонтрагента
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦенКонтрагента), ДоговорПоУмолчанию.ВидЦенКонтрагента.ЦенаВключаетНДС, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"УчетЦенКонтрагентов",
		ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов")
	);
	
	УстановитьВидимостьДоговора();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидЦенКонтрагента",
		Договор.ВидЦенКонтрагента
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦенКонтрагента), Договор.ВидЦенКонтрагента.ЦенаВключаетНДС, Неопределено)
	);
	
	СтруктураДанные.Вставить(
		"УчетЦенКонтрагентов",
		ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов")
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервере
Функция ПолучитьВидОперацииДокументаОснования()
	
	Возврат Объект.ДокументОснование.ВидОперации;
	
КонецФункции // ПолучитьВидОперацииДокументаОснования()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения Тогда
		
		Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		
	КонецЕсли;
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
					
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Элементы.РасходыСтавкаНДС.Видимость = Истина;
		Элементы.РасходыСуммаНДС.Видимость = Истина;
		Элементы.РасходыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Элементы.ТоварыПоДаннымПоставщикаЕГАИССтавкаНДС.Видимость = Истина;
		Элементы.ТоварыПоДаннымПоставщикаЕГАИССуммаНДС.Видимость = Истина;
		Элементы.ТоварыПоДаннымПоставщикаЕГАИСВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ТоварыПоДаннымПоставщика Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
			
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Элементы.РасходыСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыСуммаНДС.Видимость = Ложь;
		Элементы.РасходыВсего.Видимость = Ложь;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Элементы.ТоварыПоДаннымПоставщикаЕГАИССтавкаНДС.Видимость = Ложь;
		Элементы.ТоварыПоДаннымПоставщикаЕГАИССуммаНДС.Видимость = Ложь;
		Элементы.ТоварыПоДаннымПоставщикаЕГАИСВсего.Видимость = Ложь;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ТоварыПоДаннымПоставщика Цикл
			
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти, СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		
		//Скидки
		Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
			
			СтрокаТабличнойЧасти.Сумма = 0;
			
		ИначеЕсли НЕ СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0
			И НЕ СтрокаТабличнойЧасти.Количество = 0 Тогда
			
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
			
		КонецЕсли;
	
	КонецЕсли; 
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	//Ручная скидка - заполнение полей ввода на форме
	СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
	//Конец Ручная скидка
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено И ИмяТабличнойЧасти="Запасы" Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыРасчетовЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
	
	ПересчитатьКурсКратностьВалютыРасчетовФрагмент();
	
КОнецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		КонецЦикла;
		
	КонецЕсли;
	
	ПересчитатьКурсКратностьВалютыРасчетовФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовФрагмент()
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦенКонтрагента, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	  Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			  Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ВидЦенКонтрагента", 	  Объект.ВидЦенКонтрагента);
	СтруктураПараметров.Вставить("РегистрироватьЦеныПоставщика", Объект.РегистрироватьЦеныПоставщика);
	СтруктураПараметров.Вставить("ТекстПредупреждения",	  ТекстПредупреждения);
	// ДисконтныеКарты
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
		СтруктураПараметров.Вставить("ДисконтнаяКарта",	  Объект.ДисконтнаяКарта);
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
		
	// Вид цен контрагента.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦенКонтрагента) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦенКонтрагента%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦенКонтрагента%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦенКонтрагента%", СокрЛП(Строка(СтруктураНадписи.ВидЦенКонтрагента)));
	КонецЕсли;
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе		
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;	
	КонецЕсли;	
 
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
КонецПроцедуры // ОбновитьПодвалФормы()

&НаКлиенте
Процедура ОповещениеОткрытьФормуВводаАкцизнойМарки(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	СтрокаТЧ = Объект.Запасы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязи", ДополнительныеПараметры.ТекущийКлючСвязи);
	
	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаАкцизнаяМарка Из МассивАкцизныхМарок Цикл
		Объект.АкцизныеМарки.Удалить(СтрокаАкцизнаяМарка);
	КонецЦикла;
	
	СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
	СтрокаАкцизнаяМарка.КлючСвязи = ДополнительныеПараметры.ТекущийКлючСвязи;
	СтрокаАкцизнаяМарка.КодАкцизнойМарки = РезультатОткрытияФормы;
	
	Если НЕ РезультатОткрытияФормы = Неопределено 
		И ТипЗнч(РезультатОткрытияФормы) = Тип("Строка") Тогда
		
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТЧ.Количество = 1;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТЧ);
		
	Иначе
		Если НЕ СтрокаТЧ = Неопределено Тогда
			Объект.Запасы.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАкцизнуюМарку(ИдентификаторСтроки, ТекущийКлючСвязи, Номенклатура)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура"             , Номенклатура);
	ПараметрыФормы.Вставить("ПредставлениеНоменклатуры", Строка(Номенклатура));
	ПараметрыФормы.Вставить("ТекущийКлючСвязи"         , ТекущийКлючСвязи);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ТекущийКлючСвязи", ТекущийКлючСвязи);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеОткрытьФормуВводаАкцизнойМарки", ЭтотОбъект, ДополнительныеПараметры);
	РежимБлокировки = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаВводаАкцизнойМарки", ПараметрыФормы, ЭтотОбъект,,,, ОбработчикОповещения, РежимБлокировки); 
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьВводАкцизнойМарки(СтрокаТЧ)

	Если Не ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
		Возврат Ложь;
	ИначеЕсли Не Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
		Возврат Ложь;
	ИначеЕсли СтрокаТЧ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат Ложь;
	ИначеЕсли НЕ СтрокаТЧ.НеобходимостьВводаАкцизнойМарки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
		УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьКлючСвязи(Объект.Запасы, СтрокаТЧ, "КлючСвязи");
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
	
	ВвестиАкцизнуюМарку(ИдентификаторСтроки, СтрокаТЧ.КлючСвязи, СтрокаТЧ.Номенклатура);
	
КонецФункции

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено 
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
			Если ЗначениеЗаполнено(СтруктураДанные.ВидЦенКонтрагента) Тогда
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
				СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦенКонтрагента", СтруктураДанные.ВидЦенКонтрагента);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
				КонецЕсли;
			КонецЕсли;
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ПриходнаяНакладная.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0
				ИЛИ (ИспользуетсяРегистрацияРозничныхПродажВЕГАИС И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки) Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
				НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
				НоваяСтрока.НеобходимостьВводаАкцизнойМарки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.НеобходимостьВводаАкцизнойМарки;
				РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", НоваяСтрока);
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки Тогда
					ДобавленныеСтроки.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа, ДобавленныеСтроки);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	ДобавленныеСтроки	= НедобавленныеШтрихкоды.ДобавленныеСтроки;
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОткрытьВводАкцизнойМарки(ДобавленныеСтроки[0]);
		Возврат;
	КонецЕсли;
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	КонтрагентВестиРасчетыПоЗаказам = Объект.Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Договор, Документ, Организация, Контрагент, ВидОперации, Отказ)
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
		ИЛИ Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора)
		И Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Получить() Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	Объект.СтруктурнаяЕдиница = ОсновнойСклад;
	
	Объект.Предоплата.Очистить();
	УстановитьВидимостьИДоступность(Истина);
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦенКонтрагента, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговора()
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ОчиститьОснованиеПриИзменениеКонтрагентаДоговора();
		
		Если Объект.Предоплата.Количество() > 0
		   И Объект.Договор <> ДоговорПередИзменением Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораЗавершение", ЭтотОбъект, Новый Структура("ДоговорПередИзменением", ДоговорПередИзменением)),
				НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'"),
				РежимДиалогаВопрос.ДаНет
			);
			Возврат;
			
		КонецЕсли;
		
		ОбработатьИзменениеДоговораФрагмент(ДоговорПередИзменением);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
		Заказ = Объект.Заказ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Объект.Заказ = Элементы.Заказ.ОграничениеТипа.ПривестиЗначение(Заказ);
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеДоговораФрагмент(ДополнительныеПараметры.ДоговорПередИзменением);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагмент(ДоговорПередИзменением)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
	
	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	
	Если НЕ СтруктураДанные.СуммаВключаетНДС = Неопределено Тогда
		Объект.СуммаВключаетНДС = СтруктураДанные.СуммаВключаетНДС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	ИзменилсяВидЦен = Объект.ВидЦенКонтрагента <> СтруктураДанные.ВидЦенКонтрагента 
		И ЗначениеЗаполнено(СтруктураДанные.ВидЦенКонтрагента) И СтруктураДанные.УчетЦенКонтрагентов;
	НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
		И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов;
	ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов
		И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Расходы.Количество() > 0);
		
	СтруктураДанные.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
	
	Заказ = Объект.Заказ;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦенКонтрагента = СтруктураДанные.ВидЦенКонтрагента;
		Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
			
			Объект.РегистрироватьЦеныПоставщика = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		
		Если ИзменилсяВидЦен Тогда
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
				|отличные от установленных в документе! 
				|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
									|Необходимо проверить валюту документа!'");
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ИзменилсяВидЦен, ТекстПредупреждения);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) 
		И ИзменилсяВидЦен Тогда
		
		ПересчетНеобходим = (Объект.Запасы.Количество() > 0);
		
		Объект.ВидЦенКонтрагента	= СтруктураДанные.ВидЦенКонтрагента;
		СтруктураНадписи 			= 
			Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", 
							Объект.ВалютаДокумента, 
							ВалютаРасчетов, 
							Объект.Курс, 
							КурсНациональнаяВалюта, 
							Объект.СуммаВключаетНДС, 
							УчетВалютныхОпераций, 
							Объект.ВидЦенКонтрагента, 
							Объект.НалогообложениеНДС);
		
		ЦеныИВалюта 				= СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ПересчетНеобходим Тогда
			
			Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает вид цен, отличный от установленного в документе! 
									|Пересчитать документ в соответствии с договором?'");
										
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьИзменениеДоговораФрагментЗавершение", ЭтотОбъект, Новый Структура("ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные", ДоговорПередИзменением, ВалютаРасчетовПередИзменением, СтруктураДанные)), 
				Сообщение,
				РежимДиалогаВопрос.ДаНет
			);
			Возврат;
		
		КонецЕсли;
		
	Иначе
		
		СтруктураНадписи 			= 
			Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", 
							Объект.ВалютаДокумента, 
							ВалютаРасчетов, 
							Объект.Курс, 
							КурсНациональнаяВалюта, 
							Объект.СуммаВключаетНДС, 
							УчетВалютныхОпераций, 
							Объект.ВидЦенКонтрагента, 
							Объект.НалогообложениеНДС);
		
		ЦеныИВалюта 				= СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы");
		ОбновитьПодвалФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры // ЗаполнитьПредоплату()

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = НЕ Элементы.ОстатокВзаиморасчетов.Видимость;

	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	// 3. Перезаполняем табличную часть "Запасы" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура")
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		Объект.ВидЦенКонтрагента = РезультатЗакрытия.ВидЦенКонтрагента;
		Объект.РегистрироватьЦеныПоставщика = РезультатЗакрытия.РегистрироватьЦеныПоставщика;
		// ДисконтныеКарты
		Если ЗначениеЗаполнено(РезультатЗакрытия.ДисконтнаяКарта) И ЗначениеЗаполнено(РезультатЗакрытия.Контрагент) И Не Объект.Контрагент.Пустая() Тогда
			Если РезультатЗакрытия.Контрагент = Объект.Контрагент Тогда
				Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
			Иначе // Выдадим сообщение и не будем менять данные о дисконтной карте.
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
				,
				"Контрагент",
				"Объект");
			КонецЕсли;
		Иначе
			Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
		КонецЕсли;
		// Конец ДисконтныеКарты
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ЭтотОбъект, "Запасы");
		КонецЕсли;

		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы");
		КонецЕсли;
		
		Если РезультатЗакрытия.ПересчитатьЦены Тогда
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Расходы");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.СуммаВключаетНДС <> РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
		КонецЕсли;
		
		Если РезультатЗакрытия.СуммаВключаетНДС <> РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Расходы");
		КонецЕсли;
			
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦенКонтрагента, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение()

#КонецОбласти

#Область Подбор

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти	= "Запасы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период",					Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",			Компания);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница",		Объект.СтруктурнаяЕдиница);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента",	Объект.Организация);
	ПараметрыПодбора.Вставить("ВидЦенКонтрагента",		Объект.ВидЦенКонтрагента);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент",	Истина);
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	НЕ Элементы.ЗапасыЦена.ТолькоПросмотр);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ЗапасыПодбор()

&НаКлиенте
Процедура РасходыПодбор(Команда)
	
	ИмяТабличнойЧасти	= "Расходы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период",					Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",			Компания);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница",		Объект.СтруктурнаяЕдиница);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента",	Объект.Организация);
	ПараметрыПодбора.Вставить("ВидЦен",					Неопределено);
	ПараметрыПодбора.Вставить("ИспользуютсяХарактеристики", Ложь);
	ПараметрыПодбора.Вставить("ИспользуютсяПартии",		Ложь);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент",	Истина);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборВыполнить()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ИмяТабличнойЧасти = "Запасы" Тогда
			
			Если НоваяСтрока.НеобходимостьВводаАкцизнойМарки
				И ЗначениеЗаполнено(СтрокаЗагрузки.КодАкцизнойМарки) Тогда
				УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьКлючСвязи(Объект[ИмяТабличнойЧасти], НоваяСтрока, "КлючСвязи");
				
				СтрокаАкцизнаяМарка = Объект.АкцизныеМарки.Добавить();
				СтрокаАкцизнаяМарка.КлючСвязи = НоваяСтрока.КлючСвязи;
				СтрокаАкцизнаяМарка.КодАкцизнойМарки = СтрокаЗагрузки.КодАкцизнойМарки;
			КонецЕсли;
		
		ИначеЕсли ИмяТабличнойЧасти = "Расходы" Тогда
			
			Если СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.НезавершенноеПроизводство
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.КосвенныеЗатраты Тогда
				
				// Не указывается
				
			Иначе
				
				НоваяСтрока.СтруктурнаяЕдиница = ОсновноеПодразделение;
				
			КонецЕсли;
			
			Если СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Расходы
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.СебестоимостьПродаж
				И СтрокаЗагрузки.Номенклатура.СчетУчетаЗатрат.ТипСчета <> Перечисления.ТипыСчетов.Доходы Тогда
				
				// Не указывается
				
			Иначе
				
				НоваяСтрока.НаправлениеДеятельности = СтрокаЗагрузки.Номенклатура.НаправлениеДеятельности;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Пометка") Тогда
			
			НоваяСтрока.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера") Тогда
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
		
	Иначе
		
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);
		
	КонецЕсли;
	
	Элементы.Заказ.ОграничениеТипа = ДопустимыеТипы;
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказ.ОграничениеТипа = ДопустимыеТипы;
	
	// ГрупповоеИзменениеСтрок
	Если ИзмененВидОперации Тогда
		ЗаполнитьСписокДействий("Запасы");
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя") Тогда
		Элементы.ЗапасыИзменениеСтрокЗначение.ОграничениеТипа = ДопустимыеТипы;
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	ЭтоПоступлениеОтПоставщика = (Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика);
	Если ЭтоПоступлениеОтПоставщика Тогда
		
		Элементы.ВключатьРасходыВСебестоимость.Видимость = Истина;
		Элементы.Расходы.Видимость = Истина;
		Элементы.ГруппаРасходыКоманднаяПанель.Видимость = Истина;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Истина;
		
		Если Объект.ВключатьРасходыВСебестоимость Тогда
			
			Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Ложь;
			Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Ложь;
			Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Ложь;
			Элементы.РаспределитьРасходы.Видимость = Истина;
			Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Истина;
			
		Иначе
			
			Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Истина;
			Элементы.Расходы.ПодчиненныеЭлементы.РасходыСтруктурнаяЕдиница.Видимость = Истина;
			Элементы.Расходы.ПодчиненныеЭлементы.РасходыНаправлениеДеятельности.Видимость = Истина;
			Элементы.РаспределитьРасходы.Видимость = Ложь;
			Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Ложь;
			
		КонецЕсли;
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
		МассивСобственныеЗапасыИТоварыНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		Элементы.ВключатьРасходыВСебестоимость.Видимость = Ложь;
		Элементы.Расходы.Видимость = Ложь;
		Элементы.ГруппаРасходыКоманднаяПанель.Видимость = Ложь;
		Элементы.ГруппаРасходыИзменениеСтрок.Видимость = Ложь;
		Элементы.РаспределитьРасходы.Видимость = Ложь;
		
		Объект.ВключатьРасходыВСебестоимость = Ложь;
		Объект.Расходы.Очистить();
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСуммаРасходов.Видимость = Ложь;
		Если Объект.Запасы.Количество() > 0 Тогда
			
			Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
				
				СтрокаЗапасы.СуммаРасходов = 0;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НовыйМассив = Новый Массив();
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию")
		 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
		Иначе
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
		КонецЕсли;
		
		МассивСобственныеЗапасыИТоварыНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.СтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	ЭтоВозвратОтПокупателя = (Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
	Если ЭтоВозвратОтПокупателя
		И (НЕ ЗначениеЗаполнено(Объект.ДокументОснование)
		ИЛИ (ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.РасходнаяНакладная")
			И ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ЧекККМ")
			И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
			И Объект.ДокументОснование.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд)))
		Тогда
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = Истина;
		
	Иначе
		
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыСебестоимость.Видимость = Ложь;
		Если Объект.Запасы.Количество() > 0 Тогда
			Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
				СтрокаЗапасы.Себестоимость = 0;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыНомерГТД", "Видимость", ЭтоПоступлениеОтПоставщика ИЛИ ЭтоВозвратОтПокупателя);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтранаПроисхождения", "Видимость", ЭтоПоступлениеОтПоставщика ИЛИ ЭтоВозвратОтПокупателя);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Видимость", ЭтоПоступлениеОтПоставщика ИЛИ ЭтоВозвратОтПокупателя);
	Если НЕ (ЭтоПоступлениеОтПоставщика ИЛИ ЭтоВозвратОтПокупателя) Тогда
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			
			СтрокаЗапасы.НомерГТД = Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭтоНеВозврат = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика")
					И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя")
					И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера")
					И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения");
					
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЗагрузкаИзФайлаЗапасы", "Видимость", ЭтоНеВозврат);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасходыЗагрузкаИзФайлаУслуги", "Видимость", ЭтоНеВозврат);
	
	// Партии.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
		МассивСобственныеЗапасыИТоварыНаКомиссии = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивСобственныеЗапасыИТоварыНаКомиссии);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыПартия.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	// Зачет предоплаты.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
		Элементы.Предоплата.Видимость = Истина;
	Иначе
		Элементы.Предоплата.Видимость = Ложь;
	КонецЕсли;
	
	// Заказ при отв. хранение.
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения") Тогда
		Элементы.Заказ.Видимость = Ложь;
		Элементы.ЗаполнитьПоЗаказу.Видимость = Ложь;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказ.Видимость = Ложь;
	Иначе
		Элементы.Заказ.Видимость = Истина;
		Элементы.ЗаполнитьПоЗаказу.Видимость = Истина;
		Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЗаказ.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
	 ИЛИ Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Ложь;
	Иначе
		Элементы.Расходы.ПодчиненныеЭлементы.РасходыЗаказ.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница)
		ИЛИ Объект.СтруктурнаяЕдиница.ОрдерныйСклад
		ИЛИ Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
		ИЛИ Объект.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		Элементы.Ячейка.Видимость = Ложь;
	Иначе
		Элементы.Ячейка.Видимость = Истина;
	КонецЕсли;
	Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = НЕ УправлениеНебольшойФирмойПовтИсп.ВключеноИспользованиеЯчеек() ИЛИ НЕ Элементы.Ячейка.Видимость;
	
	// Ставка НДС, Сумма НДС, Всего.
	Если ИзмененВидОперации Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	Иначе
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
			Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
			Элементы.ЗапасыСуммаНДС.Видимость = Истина;
			Элементы.ЗапасыВсего.Видимость = Истина;
			Элементы.РасходыСтавкаНДС.Видимость = Истина;
			Элементы.РасходыСуммаНДС.Видимость = Истина;
			Элементы.РасходыВсего.Видимость = Истина;
			Элементы.СчетФактураНадпись.Видимость = Истина;
			
		Иначе
			
			Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
			Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
			Элементы.ЗапасыВсего.Видимость = Ложь;
			Элементы.РасходыСтавкаНДС.Видимость = Ложь;
			Элементы.РасходыСуммаНДС.Видимость = Ложь;
			Элементы.РасходыВсего.Видимость = Ложь;
			Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
				Элементы.СчетФактураНадпись.Видимость = Истина;
			Иначе
				Элементы.СчетФактураНадпись.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить заголовок Контрагента: Покупатель или Поставщик
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение")
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Элементы.Контрагент.Заголовок = "Поставщик";
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения") Тогда
		Элементы.Контрагент.Заголовок = "Получатель";
	Иначе	
		Элементы.Контрагент.Заголовок = "Покупатель";
	КонецЕсли;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов()
		ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыЗакупки");
		
	Элементы.ЗапасыЦена.ТолькоПросмотр 		= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр 	= НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.Скидки.ТолькоПросмотр			= НЕ РазрешеноРедактированиеЦенДокументов;
	
	// Обновим подвал формы.
	ИтогВсего = Объект.Запасы.Итог("Всего") + Объект.Расходы.Итог("Всего");
	ИтогСуммаНДС = Объект.Запасы.Итог("СуммаНДС") + Объект.Расходы.Итог("СуммаНДС");
	
	// Установка видимости и доступности элементов ЕГАИС
	УстановитьДоступностьЭлементовЕГАИС();
	
	УстановитьВидимостьОтПользовательскихНастроек();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	Если Объект.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Элементы.Заказ.Видимость = Истина;
		Элементы.ЗаполнитьПоЗаказу.Видимость = Истина;
		Элементы.ЗапасыЗаказ.Видимость = Ложь;
		ЗаказВШапке = Истина;
	Иначе
		Элементы.Заказ.Видимость = Ложь;
		Элементы.ЗаполнитьПоЗаказу.Видимость = Ложь;
		Элементы.ЗапасыЗаказ.Видимость = Истина;
		ЗаказВШапке = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаСервере
Процедура ПолучитьСтруктуруВидовОпераций()
	
	Если Параметры.Свойство("ВидОперацииВозврат") Тогда
		
		Элементы.ВидОперации.СписокВыбора.Очистить();
		
	Иначе
		
		Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветхранение") Тогда
			Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя);
	
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветхранение") Тогда
		Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратСОтветхранения);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСтруктуруВидовОпераций()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Расходы");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВставитьСтроки(Команда)
	
	ВставитьСтроки("Расходы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, КоличествоВставленных)
	
	Если ИмяТЧ = "Запасы" Тогда
		Количество = Объект[ИмяТЧ].Количество();
		
		Для Итератор = 1 По КоличествоВставленных Цикл
			Строка = Объект[ИмяТЧ][Количество - Итератор];
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", Строка);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация",        Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = "Запасы" Тогда
			
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
		ИначеЕсли ИмяТЧ = "Расходы" Тогда
			
			Строка.СтруктурнаяЕдиница = ОсновноеПодразделение;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку("Запасы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку("Запасы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Запасы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Запасы");
	НастроитьОформлениеПанелиРедактирования("Запасы", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСнятьФлажки(Команда)
	УстановитьПометку("Расходы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РасходыУстановитьФлажки(Команда)
	УстановитьПометку("Расходы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасходыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Расходы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Расходы");
	НастроитьОформлениеПанелиРедактирования("Расходы", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Расходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Запасы");
	НастроитьОформлениеПанелиРедактирования("Запасы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования("Запасы", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Расходы");
	НастроитьОформлениеПанелиРедактирования("Расходы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования("Расходы", 3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = "Запасы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ЗапасыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "РасходыРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес],
		СостояниеПерехода,
		ИзменяетДанные
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "Запасы" Тогда
		РеквизитЗначение = "ЗапасыИзменениеСтрокЗначение";
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		РеквизитЗначение = "РасходыИзменениеСтрокЗначение";
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]
	);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	СохраняемыеНастройки = "";
	
	Если ЗапасыИзменениеСтрокДействие <> ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Запасы";
	КонецЕсли;
	
	Если РасходыИзменениеСтрокДействие <> РасходыИзменениеСтрокДействиеПриОткрытии Тогда
		Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
			СохраняемыеНастройки = СохраняемыеНастройки + ",";
		КонецЕсли;
		СохраняемыеНастройки = СохраняемыеНастройки + "Расходы";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	Если ИмяТЧ = "Запасы" Тогда
		ВыполненноеДействие = ЗапасыИзменениеСтрокДействие;
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		ВыполненноеДействие = РасходыИзменениеСтрокДействие;
	КонецЕсли;
	
	ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ, Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента")
			И ИмяТЧ = "Запасы" Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ, Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
			//Ручные скидки
			СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект, ИмяТЧ);
			//Конец Ручные скидки
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			// Скидка.
			Если Строка.ПроцентСкидкиНаценки = 100 Тогда
				Строка.Цена = 0;
			ИначеЕсли Строка.ПроцентСкидкиНаценки <> 0 И Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / ((1 - Строка.ПроцентСкидкиНаценки / 100) * Строка.Количество);
			КонецЕсли;	
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
			//Ручная скидка - заполнение полей ввода на форме
			СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
			//Конец Ручная скидка
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Запасы,
			ЗапасыИзменениеСтрокДействие,
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
			ЗапасыИзменениеСтрокЗначение,
			"ЗапасыНоменклатура"
		);
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				
				Если ЗначениеЗаполнено(Объект.ВидЦенКонтрагента) Тогда
					
					СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
					СтруктураДанные.Вставить("ВидЦенКонтрагента", Объект.ВидЦенКонтрагента);
					СтруктураДанные.Вставить("Коэффициент", 1);
					
				КонецЕсли;
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
					Строка.Количество = 1;
				КонецЕсли;
				Строка.Цена = СтруктураДанные.Цена;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Содержание = "";
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД Тогда
			
			ПараметрыПодбора = Новый Структура;
			ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
			ПараметрыПодбора.Вставить("Организация", Объект.Организация);
			
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				
				ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
				
			КонецЕсли;
			
			ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
			ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
			ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения Тогда
			
			ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Расходы,
			РасходыИзменениеСтрокДействие,
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
			РасходыИзменениеСтрокЗначение,
			"РасходыНоменклатура"
		);
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
			ИзменяемыеСтроки = Объект.Расходы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				СтруктураДанные = Новый Структура();
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", "");
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
					Строка.Количество = 1;
				КонецЕсли;
				Строка.Цена = 0;
				Строка.Сумма = 0;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.СуммаНДС = 0;
				Строка.Всего = 0;
				Строка.Содержание = "";
				
				Если СтруктураДанные.ОчиститьЗаказИПодразделение Тогда
					Строка.СтруктурнаяЕдиница = Неопределено;
					Строка.Заказ = Неопределено;
				ИначеЕсли НЕ ЗначениеЗаполнено(Строка.СтруктурнаяЕдиница) Тогда
					Строка.СтруктурнаяЕдиница = ОсновноеПодразделение;
				КонецЕсли;
				
				Если СтруктураДанные.ОчиститьНаправлениеДеятельности Тогда
					Строка.НаправлениеДеятельности = Неопределено;
				Иначе
					Строка.НаправлениеДеятельности = СтруктураДанные.НаправлениеДеятельности;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Заказ";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЗаказ";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
	
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		
		Если РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыЦена";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыЦена";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыСумма";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыСумма";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "РасходыСтавкаНДС";
			
		ИначеЕсли РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ РасходыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РасходыИзменениеСтрокОбъектИзмененийРеквизит = "";
			РасходыИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Расходы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаРасходыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РасходыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РасходыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РасходыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.РасходыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.РасходыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РасходыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РасходыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РасходыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РасходыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РасходыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РасходыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РасходыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Расходы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаРасходыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РасходыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РасходыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РасходыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.РасходыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.РасходыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РасходыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РасходыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РасходыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РасходыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РасходыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РасходыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РасходыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьСуммы);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦены);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Если НЕ ЗаказВШапке Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
			
			ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Ложь, ИмяТЧ);
			
		КонецЕсли;
		
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЗаказПоставщикуЗаказПокупателя
			И Действия.Найти(ЗапасыИзменениеСтрокДействие) = Неопределено Тогда
			
			ЗапасыИзменениеСтрокДействие = Неопределено;
			ГрупповоеИзменениеСтрокСервер.НастроитьИсходнуюПанельРедактирования(ЗапасыИзменениеСтрокЗначение, НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьСерийныеНомера);
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.РасходыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.РасходыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
КонецПроцедуры

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

&НаКлиенте
Процедура ЗаполнитьНаличиеОшибокДанныхЕГАИСКлиент()
	
	Если Объект.ТоварыПоДаннымПоставщика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.ТоварыПоДаннымПоставщика Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Истина;
		Иначе
			СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаличиеОшибокДанныхЕГАИССервер()
	
	Если Объект.ТоварыПоДаннымПоставщика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.ТоварыПоДаннымПоставщика Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Истина;
		Иначе
			СтрокаТаблицы.ЕстьОшибкиВЗаполненииСтроки = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДанныеЕГАИС(ОтветНаВопрос, Параметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДанныеЕГАИССервер();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Функция ПодготовкаДанныхДляПередачиДанныеВЕГАИС(ТранспортныйМодуль, ДанныеЕГАИСДостаточны)
	
	// Готовим данные
	ВходныеПараметры  = Новый Массив;
	
	ДанныеЕГАИСДостаточны = Истина;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаТоваров = УправлениеНебольшойФирмойСервер.ПодготовкаДанныхДляОтправкиВЕГАИС(ДокументОбъект, ДанныеЕГАИСДостаточны);
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	АдресМагазина = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Объект.СтруктурнаяЕдиница, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
	
	// Подготовка таблицы общих параметров
	НомерСменыЧисло = Число("2" + Формат(Объект.Дата, "ДФ=yyyyMMdd"));
	
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер, Истина, Истина);
	НомерНаПечатьЧисло = Число(НомерНаПечать);
	
	ТипЧека = 1;
	ОбщиеПараметры = Новый Массив();
	ОбщиеПараметры.Добавить(ТипЧека);               // 1 - Тип чека (0-продажа, 1-возврат)
	ОбщиеПараметры.Добавить(Истина);                // 2 - Признак фискального чека
	ОбщиеПараметры.Добавить(Неопределено);          // 3 - Печать копии чека
	ОбщиеПараметры.Добавить(Объект.СуммаДокумента); // 4 - Сумма по чеку без скидок/наценок
	ОбщиеПараметры.Добавить(Объект.СуммаДокумента); // 5 - Сумма по чеку с учетом всех скидок/наценок
	ОбщиеПараметры.Добавить("");                    // 6 - Номер дисконтной карты
	ОбщиеПараметры.Добавить(НСтр("ru = 'ДОБРО ПОЖАЛОВАТЬ'"));   // 7 - Текст шапки (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(НСтр("ru = 'СПАСИБО ЗА ПОКУПКУ'")); // 8 - Текст подвала (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(НомерСменыЧисло);             //  9 - Номер смены (для копии чека)
	ОбщиеПараметры.Добавить(НомерНаПечатьЧисло);          // 10 - Номер чека (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(1);                           // 11 - Номер кассы (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(Объект.Дата);                 // 12 - Дата и время документа 
	ОбщиеПараметры.Добавить(Объект.Ответственный);        // 13 - Кассир (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(СведенияОбОрганизации.ПолноеНаименование); // 14 - Название организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(СведенияОбОрганизации.ИНН);   // 15 - ИНН организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
	ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала
	// Параметры для работы ЕГАИС
	ОбщиеПараметры.Добавить(СведенияОбОрганизации.КПП);          // 18 - КПП организации (Для чека ЕНВД)
	ОбщиеПараметры.Добавить(Строка(Объект.СтруктурнаяЕдиница));  // 19 - Наименование магазина
	ОбщиеПараметры.Добавить(АдресМагазина);                      // 20 - Адрес магазина
	
	Если ЗначениеЗаполнено(СведенияОбОрганизации.КПП) Тогда
		ЗаводскойНомерККМ = СведенияОбОрганизации.КПП;
	Иначе
		ЗаводскойНомерККМ = "1";
	КонецЕсли;
	ОбщиеПараметры.Добавить(ЗаводскойНомерККМ); // 21 - Заводской номер ККМ
	
	МассивОплат = Новый Массив();
	
	// Наличные
	СтрокаОплаты = Новый СписокЗначений();
	СтрокаОплаты.Добавить(0);
	СтрокаОплаты.Добавить(Объект.СуммаДокумента);
	СтрокаОплаты.Добавить("Наличная оплата");
	СтрокаОплаты.Добавить("");
	МассивОплат.Добавить(СтрокаОплаты);
	
	ВходныеПараметры.Добавить(ТаблицаТоваров);
	ВходныеПараметры.Добавить(МассивОплат);
	ВходныеПараметры.Добавить(ОбщиеПараметры);
	
	ТранспортныйМодуль = ИнтеграцияЕГАИСУНФ.ИспользуемыйТранспортныйМодуль(Объект.Организация, Объект.СтруктурнаяЕдиница);
	
	Возврат ВходныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура НапечататьЧекКлиент()
	
	ТранспортныйМодуль = Неопределено;
	ДанныеЕГАИСДостаточны = Ложь;
	ВходныеПараметры  = ПодготовкаДанныхДляПередачиДанныеВЕГАИС(ТранспортныйМодуль, ДанныеЕГАИСДостаточны);
	
	Если НЕ ДанныеЕГАИСДостаточны Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("НапечататьСлипЧекНаКлиентеЗавершение", ЭтотОбъект);
	Контекст = Новый Структура("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ОбработчикОповещения = Новый ОписаниеОповещения("НапечататьСлипЧекЗавершение", ЭтотОбъект, Контекст);
	ЭтотОбъект.Доступность = Ложь;
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеПодписиЧека(
		ОбработчикОповещения,
		ВходныеПараметры,
		ТранспортныйМодуль,
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьСлипЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Объект.Дата          = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Объект.АдресЧекаЕГАИС = РезультатВыполнения.АдресЧека;
		Объект.ПодписьЧекаЕГАИС = РезультатВыполнения.ПодписьЧека;
		Объект.АктПереданВЕГАИС = Истина;
		
		Модифицированность = Истина;
		
		РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, РезультатЗаписи);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Дополнительное описание: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеПриЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьСлипЧекНаКлиентеЗавершение(ЧекПробит, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	УстановитьДоступностьЭлементовЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИСПриИзмененииНоменклатуры(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатОткрытияФормы = Неопределено Тогда
		ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщикаЕГАИС.ТекущиеДанные;
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока.Номенклатура = РезультатОткрытияФормы;
			ТоварыПоДаннымПоставщикаЕГАИСНоменклатураПриИзмененииКлиент()
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИС(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИССервер(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОткрытьФормуСопоставлениеОрганизацийЕГАИС(РезультатОткрытияФормы, ДополнительныеПараметры) Экспорт
	
	ОповещениеОткрытьФормуСопоставлениеОрганизацийЕГАИССервер(ДополнительныеПараметры);
	
	КонтрагентПриИзменении(Элементы.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПередачаДанныхВЕГАИС(ДанныеОтЕГАИС, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДанныеОтЕГАИС = Неопределено Тогда
		Если НЕ ДанныеОтЕГАИС.Результат Тогда
			СтрокаСообщения = НСтр("ru = 'Ошибка передачи данных в ЕГАИС'") 
							  + Символы.ПС + ДанныеОтЕГАИС.ОписаниеОшибки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Иначе
			Объект.АктПереданВЕГАИС = Истина;
			Модифицированность = Истина;
			Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		
		УстановитьДоступностьЭлементовЕГАИС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресВХранилище(ИмяТаблицы = "")
	
	ВозвращаемыйАдрес = "";
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ВозвращаемыйАдрес = ПоместитьВоВременноеХранилище(Объект[ИмяТаблицы].Выгрузить(), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ВозвращаемыйАдрес;

КонецФункции

&НаКлиенте
Функция ЕстьОшибкиСоответствияЕГАИСКлиент()
	
	Если НЕ Объект.ПолученИзЕГАИС Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЕстьОшибкиВЗаполненииСтроки", Истина);
	
	МассивСтрок = Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиСоответствияЕГАИССервер()
	
	Если НЕ Объект.ПолученИзЕГАИС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЕстьОшибкиВЗаполненииСтроки", Истина);
	
	МассивСтрок = Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(СтруктураПоиска);
	
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаписатьСоответствиеНеСопоставленыхТоваровЕГАИС()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.АлкогольнаяПродукция,
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.ИдентификаторУпаковки,
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.Номенклатура,
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.Характеристика,
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.ЕдиницаИзмерения КАК Упаковка
	|ПОМЕСТИТЬ Вт_ДанныеЕГАИС
	|ИЗ
	|	&ТоварыПоДаннымПоставщика КАК ПриходнаяНакладнаяТоварыПоДаннымПоставщика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ДанныеЕГАИС.АлкогольнаяПродукция,
	|	Вт_ДанныеЕГАИС.ИдентификаторУпаковки,
	|	Вт_ДанныеЕГАИС.Номенклатура,
	|	Вт_ДанныеЕГАИС.Характеристика,
	|	Вт_ДанныеЕГАИС.Упаковка
	|ИЗ
	|	Вт_ДанныеЕГАИС КАК Вт_ДанныеЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО Вт_ДанныеЕГАИС.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|			И Вт_ДанныеЕГАИС.ИдентификаторУпаковки = СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ТоварыПоДаннымПоставщика", Объект.ТоварыПоДаннымПоставщика.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.АлкогольнаяПродукция)
			ИЛИ Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДанныеЕГАИССервер()
	
	ЗаписатьСоответствиеНеСопоставленыхТоваровЕГАИС();
	
	Объект.Запасы.Очистить();
	
	Для каждого СтрокаТаблицы Из Объект.ТоварыПоДаннымПоставщика Цикл
		
		СтрокаТаблицыТовары = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыТовары, СтрокаТаблицы);
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТаблицы.СтавкаНДС);
		СтрокаТаблицыТовары.СуммаНДС = ?(Объект.СуммаВключаетНДС, СтрокаТаблицыТовары.Сумма - (СтрокаТаблицыТовары.Сумма) / ((СтавкаНДС + 100) / 100), СтрокаТаблицыТовары.Сумма * СтавкаНДС / 100);
		СтрокаТаблицыТовары.Всего = СтрокаТаблицыТовары.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицыТовары.СуммаНДС);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРасхожденияВТТН(Накладная, ТТН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.ИдентификаторСтроки,
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.АлкогольнаяПродукция,
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.Количество
	|ПОМЕСТИТЬ ТаблицаПоступленияДанныеПоставщика
	|ИЗ
	|	Документ.ПриходнаяНакладная.ТоварыПоДаннымПоставщика КАК ПриходнаяНакладнаяТоварыПоДаннымПоставщика
	|ГДЕ
	|	ПриходнаяНакладнаяТоварыПоДаннымПоставщика.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.ИдентификаторСтроки,
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка,
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.СправкаБ
	|ПОМЕСТИТЬ ТаблицаТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТоварноТранспортнаяНакладнаяЕГАИСТовары
	|ГДЕ
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка = &СсылкаТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоступленияДанныеПоставщика.ИдентификаторСтроки,
	|	ТаблицаПоступленияДанныеПоставщика.АлкогольнаяПродукция,
	|	ТаблицаПоступленияДанныеПоставщика.Количество,
	|	ТаблицаТТН.СправкаБ
	|ПОМЕСТИТЬ ТаблицаТТНПоДаннымПоставщика
	|ИЗ
	|	ТаблицаПоступленияДанныеПоставщика КАК ТаблицаПоступленияДанныеПоставщика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТТН КАК ТаблицаТТН
	|		ПО ТаблицаПоступленияДанныеПоставщика.ИдентификаторСтроки = ТаблицаТТН.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.ИдентификаторСтроки,
	|	ПриходнаяНакладнаяЗапасы.Количество
	|ПОМЕСТИТЬ ТоварыПоФакту
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТТНПоДаннымПоставщика.ИдентификаторСтроки,
	|	ТаблицаТТНПоДаннымПоставщика.АлкогольнаяПродукция,
	|	ТаблицаТТНПоДаннымПоставщика.Количество,
	|	ТаблицаТТНПоДаннымПоставщика.СправкаБ,
	|	ЕСТЬNULL(ТоварыПоФакту.Количество, 0) КАК КоличествоФакт
	|ПОМЕСТИТЬ ТаблицаСравнения
	|ИЗ
	|	ТаблицаТТНПоДаннымПоставщика КАК ТаблицаТТНПоДаннымПоставщика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПоФакту КАК ТоварыПоФакту
	|		ПО ТаблицаТТНПоДаннымПоставщика.ИдентификаторСтроки = ТоварыПоФакту.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСравнения.ИдентификаторСтроки,
	|	ТаблицаСравнения.АлкогольнаяПродукция,
	|	ТаблицаСравнения.СправкаБ,
	|	ТаблицаСравнения.КоличествоФакт
	|ИЗ
	|	ТаблицаСравнения КАК ТаблицаСравнения";
	
	Запрос.УстановитьПараметр("Ссылка", Накладная);
	Запрос.УстановитьПараметр("СсылкаТТН", ТТН);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТТНОбъект = ТТН.ПолучитьОбъект();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденнаяСтрока = ТТНОбъект.Товары.Найти(Выборка.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.КоличествоФакт = Выборка.КоличествоФакт;
		КонецЕсли;
		
	КонецЦикла;
	
	ТТНОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовЕГАИС()
	
	// Форма
	Если Не ЭтотОбъект.ТолькоПросмотр Тогда // проверка на доступность по дате запрета
		ЭтотОбъект.ТолькоПросмотр = Объект.АктПереданВЕГАИС;
	КонецЕсли;
	
	// Шапка
	Элементы.ФормаОтправитьАктЕГАИС.Видимость = Объект.ПолученИзЕГАИС 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
		
	Элементы.ФормаОтправитьАктЕГАИС.Доступность = Объект.Проведен И НЕ Объект.АктПереданВЕГАИС;
	
	Элементы.ЕстьРасхождения.Видимость = Объект.ПолученИзЕГАИС;
	
	// РаботаСНоменклатуройЕГАИС
	Элементы.СтраницаРаботаСНоменклатуройЕГАИС.Видимость = Объект.ПолученИзЕГАИС;
	
	ДоступностьТабличнойЧастиЗапасы = ДоступностьТабличнойЧастиЗапасыСервер();
	
	Если Объект.ПолученИзЕГАИС Тогда
		
		// Товары по факту
		Элементы.ЗапасыПоискПоШтрихкоду.Доступность = Ложь;
		Элементы.ЗапасыЗагрузитьДанныеИзТСД.Доступность = Ложь;
		Элементы.ЗапасыПолучитьВес.Доступность = Ложь;
		Элементы.ЗапасыЗапасыПодбор.Доступность = Ложь;
		Элементы.ЗапасыГруппаКопированиеСтрок.Доступность = Ложь;
		Элементы.ЗапасыЗагрузкаИзФайлаЗапасы.Доступность = Ложь;
		Элементы.РаспределитьРасходы.Доступность = Ложь;
		Элементы.ЗапасыИзменитьСтроки.Доступность = Ложь;
		
		МассивИсключений = Новый Массив;
		УстановитьДоступностьПодчиненныхЭлементов(Элементы.Запасы.КонтекстноеМеню.ПодчиненныеЭлементы, ДоступностьТабличнойЧастиЗапасы, МассивИсключений);
		
	КонецЕсли;
	
	Элементы.ИтогиЕГАИС.Видимость = Объект.ПолученИзЕГАИС И Объект.ЕстьРасхождения;
	Элементы.Запасы.ТолькоПросмотр = Не ДоступностьТабличнойЧастиЗапасы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПодчиненныхЭлементов(ИзменяемыеПодчиненныеЭлементы, Доступность, МассивИсключений)

	Для каждого ПодчиненныйЭлемент Из ИзменяемыеПодчиненныеЭлементы Цикл
		
		ИмяРеквизита = ПодчиненныйЭлемент.Имя;
		Если МассивИсключений.Найти(ИмяРеквизита) = Неопределено Тогда
			ПодчиненныйЭлемент.Доступность = Доступность;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДоступностьТабличнойЧастиЗапасыСервер()
	ДоступностьТабличнойЧастиТовары = Истина;
	Если Объект.ПолученИзЕГАИС Тогда
		Если НЕ Объект.ЕстьРасхождения Тогда
			ДоступностьТабличнойЧастиТовары = Ложь;
		ИначеЕсли ЕстьОшибкиСоответствияЕГАИССервер() Тогда
			ДоступностьТабличнойЧастиТовары = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступностьТабличнойЧастиТовары;
	
КонецФункции

&НаКлиенте
Функция ДоступностьТабличнойЧастиЗапасыКлиент()
	ДоступностьТабличнойЧастиТовары = Истина;
	Если Объект.ПолученИзЕГАИС Тогда
		Если НЕ Объект.ЕстьРасхождения Тогда
			ДоступностьТабличнойЧастиТовары = Ложь;
		ИначеЕсли ЕстьОшибкиСоответствияЕГАИСКлиент() Тогда
			ДоступностьТабличнойЧастиТовары = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступностьТабличнойЧастиТовары;
	
КонецФункции

&НаКлиенте
Процедура ТоварыПоДаннымПоставщикаЕГАИСНоменклатураПриИзмененииКлиент()
	
	ТекущаяСтрока = Элементы.ТоварыПоДаннымПоставщикаЕГАИС.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ТекущаяСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	ТекущаяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
	СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьСуммуСтрокиТабличнойЧасти(
		Новый Структура("Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СуммаВключаетНДС, Всего",
			ТекущаяСтрока.Количество, ТекущаяСтрока.Цена, 0, ТекущаяСтрока.СтавкаНДС, 0, Объект.СуммаВключаетНДС, 0));
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураДанных, "СтавкаНДС, СуммаНДС, Всего");
	
	Элементы.Запасы.Доступность = ДоступностьТабличнойЧастиЗапасыКлиент();
		
КонецПроцедуры

&НаСервере
Процедура ОповещениеОткрытьФормуСопоставлениеНоменклатурыЕГАИССервер(ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровТоварыПоДаннымПоставщика.АлкогольнаяПродукция,
	|	ПоступлениеТоваровТоварыПоДаннымПоставщика.ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	&ТоварыПоДаннымПоставщика КАК ПоступлениеТоваровТоварыПоДаннымПоставщика
	|ГДЕ
	|	ПоступлениеТоваровТоварыПоДаннымПоставщика.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.АлкогольнаяПродукция,
	|	ТаблицаВЗапросе.ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаСОтборомПоИдентификаторам
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|ГДЕ
	|	ТаблицаВЗапросе.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтборомПоИдентификаторам.АлкогольнаяПродукция,
	|	ТаблицаСОтборомПоИдентификаторам.ИдентификаторСтроки,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.Упаковка КАК ЕдиницаИзмерения,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения
	|ИЗ
	|	ТаблицаСОтборомПоИдентификаторам КАК ТаблицаСОтборомПоИдентификаторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаСОтборомПоИдентификаторам.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция";
	
	Запрос.УстановитьПараметр("ТоварыПоДаннымПоставщика", Объект.ТоварыПоДаннымПоставщика.Выгрузить());
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ДополнительныеПараметры.АлкогольнаяПродукция);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтроки", Выборка.ИдентификаторСтроки);
		
		МассивСтрок = Объект.ТоварыПоДаннымПоставщика.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТаблицы = МассивСтрок[0];
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка,, "АлкогольнаяПродукция, ИдентификаторСтроки");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
			СтрокаТаблицы.ЕдиницаИзмерения = Выборка.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		СтрокаТаблицы.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
		СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьСуммуСтрокиТабличнойЧасти(
			Новый Структура("Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СуммаВключаетНДС, Всего",
				СтрокаТаблицы.Количество, СтрокаТаблицы.Цена, 0, СтрокаТаблицы.СтавкаНДС, 0, Объект.СуммаВключаетНДС, 0));
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураДанных, "СуммаНДС, Всего");
		
	КонецЦикла;
	
	ЗаполнитьНаличиеОшибокДанныхЕГАИССервер();
	Элементы.Запасы.Доступность = ДоступностьТабличнойЧастиЗапасыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОповещениеОткрытьФормуСопоставлениеОрганизацийЕГАИССервер(ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК Поставщик
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоответствиеОрганизацийЕГАИС.Контрагент ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ СоответствиеОрганизацийЕГАИС.Контрагент
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
	|		ПО ТаблицаВЗапросе.Поставщик = СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ТоварноТранспортнаяНакладнаяЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Объект.Контрагент = Выборка.Контрагент;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СопоставитьКонтрагентовНаСервере(МассивАлкогольнойПродукции, ТТН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Импортер
	|ПОМЕСТИТЬ ТаблицаАлкогольнойПродукции
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка В(&МассивАлкогольнойПродукции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Производитель КАК ОрганизацияЕГАИС
	|ИЗ
	|	ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|ГДЕ
	|	ТаблицаАлкогольнойПродукции.Производитель <> &ПустаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Импортер
	|ИЗ
	|	ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|ГДЕ
	|	ТаблицаАлкогольнойПродукции.Импортер <> &ПустаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &ТТН";
	
	Запрос.УстановитьПараметр("МассивАлкогольнойПродукции", МассивАлкогольнойПродукции);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТТН", ТТН);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ТаблицаКонтрагентов = Результат.Выгрузить();
	
	Возврат ТаблицаКонтрагентов.ВыгрузитьКолонку("ОрганизацияЕГАИС");
	
КонецФункции

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор);
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор)
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныйПараметр) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныйПараметр);
	
	Если ДополнительныйПараметр = "Услуги" Тогда 
		Для каждого СтрокаТаблицы Из Объект.Расходы Цикл 
			РассчитатьСуммуВСтрокеТабличнойЧасти("Расходы", СтрокаТаблицы);
		КонецЦикла;
	Иначе
		Для каждого СтрокаТаблицы Из Объект.Запасы Цикл 
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ТипЗагрузки)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗагрузки = "Услуги" Тогда
			Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТовары = Объект.Расходы.Добавить();
			НоваяСтрокаТовары.НаправлениеДеятельности = СтрокаТаблицы.НаправлениеДеятельности;
		Иначе
			Если СтрокаТаблицы.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрокаТовары = Объект.Запасы.Добавить();
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
			НоваяСтрокаТовары.Партия = СтрокаТаблицы.Партия;
		КонецЕсли;
		
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		НоваяСтрокаТовары.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
		Иначе
			НоваяСтрокаТовары.СтавкаНДС = СтрокаТаблицы.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаУслуги(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы";
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ПриходнаяНакладная.Расходы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка услуг из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы";
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ПриходнаяНакладная.Запасы");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном","ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	НастройкиЗагрузкиДанных.Вставить("СодержаниеВидимо", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			ОбновитьПодвалФормы();
			
		КонецЕсли;
		
	Иначе
		
		ТипЗагрузки = ?(ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы", "Услуги", "Запасы");
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки, ТипЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВТабличноеПолеЗапасы(ТаблицаСопоставленияДанных)
	
	Попытка
		
		НачатьТранзакцию();
			
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				
				ИменаСвойств = "Номенклатура, Содержание, Количество, ЕдиницаИзмерения, СтавкаНДС";
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Партия";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
					
					ИменаСвойств = ИменаСвойств + ", СтранаПроисхождения, НомерГТД";
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС), НоваяСтрока.Номенклатура.СтавкаНДС, Объект.Организация.СтавкаНДСПоУмолчанию);
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
							НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
							НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				НоваяСтрока.Заказ = СтрокаТаблицы.Заказ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВТабличноеПолеРасходы(ТаблицаСопоставленияДанных)
	
	Попытка
		
		НачатьТранзакцию();
			
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Расходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Номенклатура, Содержание, Количество, ЕдиницаИзмерения, СтавкаНДС");
				
				НоваяСтрока.Цена = СтрокаТаблицы.Цена;
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
				Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
						
						НоваяСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС), НоваяСтрока.Номенклатура.СтавкаНДС, Объект.Организация.СтавкаНДСПоУмолчанию);
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаНДС) Тогда
						
						НоваяСтрока.СуммаНДС = СтрокаТаблицы.СуммаНДС;
						
					Иначе
						
						СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
						
						НоваяСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
							НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
							НоваяСтрока.Сумма * СтавкаНДС / 100);
						
					КонецЕсли;
					
				Иначе
					
					НоваяСтрока.СтавкаНДС = ?(Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС,
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
						УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
					
					НоваяСтрока.СуммаНДС = 0;
					
				КонецЕсли;
				
				НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
				НоваяСтрока.Заказ = СтрокаТаблицы.Заказ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
	Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Запасы" Тогда
		
		ЗагрузитьДанныеВТабличноеПолеЗапасы(ТаблицаСопоставленияДанных);
		
	ИначеЕсли РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ПриходнаяНакладная.ТабличнаяЧасть.Расходы" Тогда
		
		ЗагрузитьДанныеВТабличноеПолеРасходы(ТаблицаСопоставленияДанных);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиБиблиотек_1

//+ ГИСМ
&НаКлиенте
Процедура ТекстУведомленияГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМКлиентУНФ.ТекстУведомленияОбИмпортеВвозеИзЕАЭСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭССервер()
	
	ИнтеграцияГИСМУНФ.СформироватьТекстУведомлениеОбИмпортеВвозеИзЕАЭС(ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Ложь;
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ  Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.Основание = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ЦветГиперссылки,
		,
		ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Возврат товаров от клиента был изменен. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Возврат товаров от клиента не записан. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусГИСМ()
	
	ВидимостьКомандГИСМ = Объект.ЕстьМаркируемаяПродукцияГИСМ
		И Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя;
	
	Элементы.СтатусГИСМ.Видимость = ВидимостьКомандГИСМ;
	
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ ИЛИ НЕ Объект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтатусГИСМ         = Перечисления.СтатусыИнформированияГИСМ.Черновик;
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СтатусыИнформированияГИСМ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыИнформированияГИСМ.Черновик)) КАК СтатусГИСМ,
		|	ВЫБОР
		|		КОГДА СтатусыИнформированияГИСМ.ДальнейшееДействие В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СтатусыИнформированияГИСМ.ДальнейшееДействие, ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные))
		|	КОНЕЦ КАК ДальнейшееДействие
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ВозвратТоваровОтКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
		|		ПО (СтатусыИнформированияГИСМ.Документ = ВозвратТоваровОтКлиента.Ссылка)
		|ГДЕ
		|	ВозвратТоваровОтКлиента.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияГИСМ.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусГИСМ         = Выборка.СтатусГИСМ;
			ДальнейшееДействие = Выборка.ДальнейшееДействие;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтатусГИСМПредставление = ИнтеграцияГИСМ.ПредставлениеСтатусаГИСМ(
		СтатусГИСМ,
		ДальнейшееДействие,
		Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыОбменаСГИСМ()
	
	СформироватьНадписьМаркировкаПродукции();
	ОбновитьСтатусГИСМ();
	
КонецПроцедуры

#КонецОбласти
