&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Элементы.Подразделение.Видимость = ИнтеграцияГИСМ.ИспользоватьПодразделения();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ИнтеграцияГИСМПереопределяемый.ЗаполнитьПодменюОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВыпущеноПолучено();
	ОбновитьСтатусГИСМ();
	УправлениеДоступностью(ЭтотОбъект);
	
	ИнтеграцияГИСМПереопределяемый.ЗаполнитьСлужебныеРеквизитыТабличнойЧастиЗаявкиНаВыпускКиЗ(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ОбновитьСтатусГИСМ();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		ОбновитьСтатусГИСМ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.СпособПолучения = Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.СамостоятельноеПолучениеУЭмитента Тогда
		
		МассивНепроверяемыхРеквизитов = Новый Массив;
		МассивНепроверяемыхРеквизитов.Добавить("ПредставлениеАдресаДоставки");
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.Основание);
	Оповестить("Запись_ЗаявкаНаВыпускКиЗГИСМ", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияГИСМКлиентПереопределяемый.ИсточникВыбораЭтоФормаПодбора(ИсточникВыбора) Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Заявка на выпуск КиЗ ГИСМ была изменена. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусГИСМОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Заявка на выпуск КиЗ ГИСМ не записана. Записать?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусГИСМОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаДоставкиПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ПредставлениеАдресаДоставки = "";
		КомментарийАдресаДоставки   = "";
		Объект.АдресДоставки        = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииАдресаДоставки.
	ПредставлениеАдресаДоставки = Текст;
	Объект.АдресДоставки = ЗначенияПолейКонтактнойИнформацииСервер(Текст, ВидКонтактнойИнформацииАдресаДоставки, КомментарийАдресаДоставки);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> ПредставлениеАдресаДоставки Тогда
		ПредставлениеАдресаДоставки = Элемент.ТекстРедактирования;
		Объект.АдресДоставки        = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформацииАдресаДоставки);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           Объект.АдресДоставки);
	ПараметрыОткрытия.Вставить("Представление",           ПредставлениеАдресаДоставки);
	ПараметрыОткрытия.Вставить("Комментарий",             КомментарийАдресаДоставки);
	
	// Переопределямый заголовок формы, по умолчанию отобразятся данные по ВидКонтактнойИнформации.
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Адрес доставки'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаДоставкиОчистка(Элемент, СтандартнаяОбработка)
	// Сбрасываем как представления, так и внутренние значения полей.
	ПредставлениеАдресаДоставки = "";
	КомментарийАдресаДоставки   = "";
	Объект.АдресДоставки        = "";
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	ПредставлениеАдресаДоставки = ВыбранноеЗначение.Представление;
	КомментарийАдресаДоставки   = ВыбранноеЗначение.Комментарий;
	Объект.АдресДоставки        = ВыбранноеЗначение.КонтактнаяИнформация;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Объект.GLNКонтрагента = GLNКонтрагента(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийАдресаДоставкиПриИзменении(Элемент)
	ЗаполнитьКомментарийАдресаДоставкиСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказанныеКиЗ

&НаКлиенте
Процедура ЗаказанныеКиЗПриИзменении(Элемент)
	
	ИнтеграцияГИСМКлиентПереопределяемый.ЗаявкаНаВыпускКиЗЗаказанныеКиЗПриИзменении(ЭтотОбъект, КэшированныеЗначения, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказанныеКиЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаказанныеКиЗ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЗаказанныеКиЗ.ТолькоПросмотр
		И Поле.Имя = "ЗаказанныеКиЗНоменклатура"
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыпущенныеКиЗ

&НаКлиенте
Процедура ВыпущенныеКиЗПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВыпущенныеКиЗ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ЕстьПроблема = Ложь;
	Иначе
		ЕстьПроблема = ТекущиеДанные.ЕстьПроблема;
	КонецЕсли;
	
	Если ЕстьПроблема Тогда
		Элементы.СтраницыКартинкиПроблема.ТекущаяСтраница = Элементы.СтраницаЕстьПроблема;
	Иначе
		Элементы.СтраницыКартинкиПроблема.ТекущаяСтраница = Элементы.СтраницаНетПроблемы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпущенныеКиЗПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.ВыпущенныеКиЗ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.ТекущийЭлемент.Имя = "ВыпущенныеКиЗДокументПоступления" Тогда
		
		Элементы.ВыпущенныеКиЗДокументПоступления.СписокВыбора.Очистить();
		
		НайденныеСтроки = КандидатыВДокументыПоступления.НайтиСтроки(Новый Структура("НомерКиЗ", ТекущиеДанные.НомерКиЗ));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.ВыпущенныеКиЗДокументПоступления.СписокВыбора.ЗагрузитьЗначения(
			           НайденныеСтроки[0].СписокДокументовПоступления.ВыгрузитьЗначения());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпущенныеКиЗДокументПоступленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыпущенныеКиЗ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПоступления) Тогда
		ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить");
	Иначе
		НайденныеСтроки = КандидатыВДокументыПоступления.НайтиСтроки(Новый Структура("НомерКиЗ", ТекущиеДанные.НомерКиЗ));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ВыбратьПоступление");
		Иначе
			ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпущенныеКиЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыпущенныеКиЗ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ВыпущенныеКиЗДокументПоступления"
		И ЗначениеЗаполнено(ТекущиеДанные.ДокументПоступления)
		И (ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.КПередаче")
		   Или ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Передано")
		   Или ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ПринятоГИСМ")) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДокументПоступления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоступления(Команда)
	
	ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ЗаполнитьПоступлениеЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Документы поступления по неподтвержденным КиЗ будут перезаполнены. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоступлениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПоступлениямСервер();
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	ПерезаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВыбратьПоступление(Команда)
	
	ИнтеграцияГИСМКлиент.УстановитьОтборСтрокВТЧ(ЭтотОбъект, "ВыпущенныеКиЗ", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ВыбратьПоступление"), Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКПередаче(Команда)
	
	ИнтеграцияГИСМКлиент.УстановитьОтборСтрокВТЧ(ЭтотОбъект, "ВыпущенныеКиЗ", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.КПередаче"), Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНеСоответствуютЗаказаннымКиЗ(Команда)
	
	ИнтеграцияГИСМКлиент.УстановитьОтборСтрокВТЧ(ЭтотОбъект, "ВыпущенныеКиЗ", Истина, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОжидаетсяПоступление(Команда)
	
	ИнтеграцияГИСМКлиент.УстановитьОтборСтрокВТЧ(ЭтотОбъект, "ВыпущенныеКиЗ", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление"), Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПередано(Команда)
	
	ИнтеграцияГИСМКлиент.УстановитьОтборСтрокВТЧ(ЭтотОбъект, "ВыпущенныеКиЗ", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Передано"), Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПодтвердить(Команда)
	
	ИнтеграцияГИСМКлиент.УстановитьОтборСтрокВТЧ(ЭтотОбъект, "ВыпущенныеКиЗ", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить"), Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборОтклоненоГИСМ(Команда)
	
	ИнтеграцияГИСМКлиент.УстановитьОтборСтрокВТЧ(ЭтотОбъект, "ВыпущенныеКиЗ", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ"), Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПолучениеВыделенныхСтрок(Команда)
	
	ВыделенныеСтроки = Элементы.ВыпущенныеКиЗ.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано ни одной строки для подтверждения.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КоличествоУстановленныхСостоянийКПодтверждению = 0;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Элементы.ВыпущенныеКиЗ.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить")
			Или ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ"))
			И ЗначениеЗаполнено(ТекущиеДанные.ДокументПоступления) Тогда
			
			ТекущиеДанные.СостояниеПодтверждения = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.КПередаче");
			КоличествоУстановленныхСостоянийКПодтверждению = КоличествоУстановленныхСостоянийКПодтверждению + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоУстановленныхСостоянийКПодтверждению > 0 Тогда
		ТекстОповещения = НСтр("ru = 'Состояние ""К передаче"" установлено для %1 из %2 строк'");
		ТекстОповещения = СтрШаблон(ТекстОповещения, КоличествоУстановленныхСостоянийКПодтверждению, КоличествоУстановленныхСостоянийКПодтверждению);
	Иначе
		ТекстОповещения = НСтр("ru = 'Отсутствуют строки с состоянием ""Подтвердить"" или ""Отклонено ГИСМ""'");
	КонецЕсли;
	ТекстЗаголовка  = НСтр("ru = 'Подтверждение получения'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПолучение(Команда)
	
	КоличествоСтрок = Объект.ВыпущенныеКиЗ.Количество();
	Если КоличествоСтрок = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет строк для подтверждения.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КоличествоУстановленныхСостоянийКПодтверждению = ПодтвердитьПолучениеСервер();
	
	Если КоличествоУстановленныхСостоянийКПодтверждению > 0 Тогда
		ТекстОповещения = НСтр("ru = 'Состояние ""К передаче"" установлено для %1 из %2 строк'");
		ТекстОповещения = СтрШаблон(ТекстОповещения, КоличествоУстановленныхСостоянийКПодтверждению, КоличествоУстановленныхСостоянийКПодтверждению);
	Иначе
		ТекстОповещения = НСтр("ru = 'Отсутствуют строки с состоянием ""Подтвердить"" или ""Отклонено ГИСМ""'");
	КонецЕсли;
	ТекстЗаголовка  = НСтр("ru = 'Подтверждение получения'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Функция ПодтвердитьПолучениеСервер()
	
	КоличествоУстановленныхСостоянийКПодтверждению = 0;
	
	Для Каждого ТекСтрока Из Объект.ВыпущенныеКиЗ Цикл
		
		Если (ТекСтрока.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить
			Или ТекСтрока.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ)
			И ЗначениеЗаполнено(ТекСтрока.ДокументПоступления) Тогда
			
			ТекСтрока.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.КПередаче;
			КоличествоУстановленныхСостоянийКПодтверждению = КоличествоУстановленныхСостоянийКПодтверждению + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоУстановленныхСостоянийКПодтверждению;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПринятоГИСМ(Команда)
	
	ИнтеграцияГИСМКлиент.УстановитьОтборСтрокВТЧ(ЭтотОбъект, "ВыпущенныеКиЗ", ПредопределенноеЗначение("Перечисление.СостоянияОтправкиПодтвержденияГИСМ.ПринятоГИСМ"), Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьGLNПоИННКПП(Команда)
	
	ИнтеграцияГИСМКлиент.ПолучитьGLNПоИННКПП(ЭтотОбъект);
	
КонецПроцедуры

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	ИнтеграцияГИСМКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаДанных"));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьПолучение" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаПодтверждения"));
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗакрытьЗаявку" Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтеграцияГИСМКлиент.ПодготовитьСообщениеКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()

	ИнтеграцияГИСМПереопределяемый.ЗаполнитьЗаявкуНаВыпускКиЗНаОснованииДругогоДокумента(Объект, Объект.Основание, "", Истина);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()

	ОбновитьВыпущеноПолучено();
	ОбновитьСтатусГИСМ();
	УправлениеДоступностью(ЭтотОбъект);
	
	НомерГИСМ = Формат(Объект.НомерГИСМ, "ЧГ=");
	
	УправлениеОтметкойНезаполненногоАдреса(ЭтотОбъект);
	
	ИнтеграцияГИСМПереопределяемый.ЗаполнитьСлужебныеРеквизитыТабличнойЧастиЗаявкиНаВыпускКиЗ(ЭтотОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусГИСМ()

	СтатусГИСМ         = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Черновик;
	СтатусПоступления  = Перечисления.СтатусыПоступленийГИСМ.ОжидаетсяПоступление;
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяЭмитентом)
		|			ТОГДА ВЫБОР
		|					КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиЭмитентомКиЗГИСМ.ПустаяСсылка)
		|						ТОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
		|					ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусОбработкиЭмитентом
		|				КОНЕЦ
		|		ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусЗаявкиНаВыпускКиЗ
		|	КОНЕЦ КАК СтатусЗаявкиНаВыпускКиЗ,
		|	ВЫБОР
		|		КОГДА СтатусыЗаявокНаВыпускКиЗГИСМ.ДальнейшееДействие В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПустаяСсылка)
		|		ИНАЧЕ СтатусыЗаявокНаВыпускКиЗГИСМ.ДальнейшееДействие
		|	КОНЕЦ КАК ДальнейшееДействие,
		|	СтатусыЗаявокНаВыпускКиЗГИСМ.СтатусПоступления
		|ИЗ
		|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
		|ГДЕ
		|	СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ = &ЗаявкаНаВыпускКиЗ";
		
		Запрос.УстановитьПараметр("ЗаявкаНаВыпускКиЗ", Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияГИСМ.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусГИСМ         = Выборка.СтатусЗаявкиНаВыпускКиЗ;
			СтатусПоступления  = Выборка.СтатусПоступления;
			ДальнейшееДействие = Выборка.ДальнейшееДействие;
			
		КонецЕсли;
		
	Иначе
		
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
		
	КонецЕсли;
	
	СтатусыЦветТекстаТребуетВниманияГИСМ = Новый Массив;
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаФНС);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ);
	СтатусыЦветТекстаТребуетВниманияГИСМ.Добавить(Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаЭмитентом);
	
	Если СтатусыЦветТекстаТребуетВниманияГИСМ.Найти(СтатусГИСМ) <> Неопределено Тогда
		СтатусГИСМПредставление = Новый ФорматированнаяСтрока(Строка(СтатусГИСМ),,ЦветаСтиля.ЦветТекстаТребуетВниманияГИСМ);
	Иначе
		СтатусГИСМПредставление = Новый ФорматированнаяСтрока(Строка(СтатусГИСМ));
	КонецЕсли;
	
	Если ДляСтатусаЗаявкиИмеетСмыслСтатусПоступления(СтатусГИСМ)
		И ЗначениеЗаполнено(СтатусПоступления) Тогда
		СтатусГИСМПредставление = Новый ФорматированнаяСтрока(СтатусГИСМПредставление, ", ", НРег(Строка(СтатусПоступления)));
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку);
	СтатусГИСМПредставление = ИнтеграцияГИСМ.ПредставлениеСтатусаГИСМ(
		СтатусГИСМПредставление,
		ДальнейшееДействие,
		ДопустимыеДействия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДляСтатусаЗаявкиИмеетСмыслСтатусПоступления(СтатусЗаявки)

	Если СтатусЗаявки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЭмитентомКиЗГИСМ.ОтгруженоЗаказчику")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЭмитентомКиЗГИСМ.ЖдетСамовывоза")
		Или СтатусЗаявки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиЭмитентомКиЗГИСМ.ПереданоГрузоперевозчику") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
#Область ЗаказанныеКиЗ

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказанныеКиЗВыпущено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказанныеКиЗ.ВыпущеноБольшеЧемЗаказано");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаказанныеКиЗПоступило.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаказанныеКиЗ.ПоступилоБольшеЧемЗаказано");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГИСМ);
	
#КонецОбласти

#Область ВыпущенныеКиЗ

	СписокСостоянийНедоступныИзменения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.СписокСостоянийНедоступныИзмененияПоступления();
	
	СписокСостоянийНеТребуетсяПоступление = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.СписокСостоянийНеТребуетсяПоступление();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпущенныеКиЗДокументПоступления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыпущенныеКиЗ.СостояниеПодтверждения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСостоянийНедоступныИзменения;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпущенныеКиЗДокументПоступления.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыпущенныеКиЗ.СостояниеПодтверждения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСостоянийНеТребуетсяПоступление;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпущенныеКиЗСостояниеПодтверждения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыпущенныеКиЗ.СостояниеПодтверждения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГИСМ);
	
#КонецОбласти

	ИнтеграцияГИСМПереопределяемый.ДополнитьУсловноеОформлениеЗаявкаНаВыпускКиЗ(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	СтатусЗаявкиЧерновик  = (Форма.СтатусГИСМ = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВыпускКиЗГИСМ.Черновик"));
	ЗаявкаПоОснованию        = ЗначениеЗаполнено(Форма.Объект.Основание);
	
	Форма.Элементы.Организация.ТолькоПросмотр                        = (ЗаявкаПоОснованию Или Не СтатусЗаявкиЧерновик) И ЗначениеЗаполнено(Форма.Объект.Организация);
	Форма.Элементы.Контрагент.ТолькоПросмотр                         = (ЗаявкаПоОснованию Или Не СтатусЗаявкиЧерновик) И ЗначениеЗаполнено(Форма.Объект.Контрагент);
	Форма.Элементы.НомерДоговора.ТолькоПросмотр                      = Не СтатусЗаявкиЧерновик;
	Форма.Элементы.GLNКонтрагента.ТолькоПросмотр                     = Не СтатусЗаявкиЧерновик И ЗначениеЗаполнено(Форма.Объект.GLNКонтрагента);
	Форма.Элементы.ДатаДоговора.ТолькоПросмотр                       = Не СтатусЗаявкиЧерновик;
	Форма.Элементы.СпособПолучения.ТолькоПросмотр                    = Не СтатусЗаявкиЧерновик;
	Форма.Элементы.ПредставлениеАдресаДоставки.ТолькоПросмотр        = Не СтатусЗаявкиЧерновик;
	Форма.Элементы.КомментарийАдресаДоставки.ТолькоПросмотр          = Не СтатусЗаявкиЧерновик;
	Форма.Элементы.ДляМаркировкиОстатков.ТолькоПросмотр              = Не СтатусЗаявкиЧерновик;
	Форма.Элементы.ЗаказанныеКиЗ.ТолькоПросмотр                      = ЗаявкаПоОснованию Или Не СтатусЗаявкиЧерновик;
	Форма.Элементы.ЗаказанныеКиЗОткрытьПодбор.Доступность            = Не ЗаявкаПоОснованию И СтатусЗаявкиЧерновик;;
	Форма.Элементы.ЗаказанныеКиЗПерезаполнитьПоОснованию.Доступность = ЗаявкаПоОснованию И СтатусЗаявкиЧерновик;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеОтметкойНезаполненногоАдреса(Форма)

	Если Форма.Объект.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияИзготовленныхКИЗГИСМ.СамостоятельноеПолучениеУЭмитента") Тогда
		Форма.Элементы.ПредставлениеАдресаДоставки.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.ПредставлениеАдресаДоставки.ОтметкаНезаполненного = Ложь;
	Иначе
		Форма.Элементы.ПредставлениеАдресаДоставки.АвтоОтметкаНезаполненного = Истина;
		Форма.Элементы.ПредставлениеАдресаДоставки.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Форма.ПредставлениеАдресаДоставки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ИнтеграцияГИСМКлиентПереопределяемый.ОткрытьПодборЗаказываемыхКиЗ(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ИнтеграцияГИСМПереопределяемый.ОбработкаПодбораЗаявкиНаВыпускКиЗ(ЭтотОбъект, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПолученоВыпущено()
	
	Для каждого СтрокаЗаказанныйКиз Из Объект.ЗаказанныеКиЗ Цикл
		
		СтрокаЗаказанныйКиз.Поступило = 0;
		СтрокаЗаказанныйКиз.Выпущено  = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПроблемыЗаказано()

	Для каждого СтрокаВыпущенныйКиз Из Объект.ВыпущенныеКиЗ Цикл
		
		СтрокаВыпущенныйКиз.ЕстьПроблема      = Ложь;
		СтрокаВыпущенныйКиз.ОписаниеПроблемы  = "";
		
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ОбновитьВыпущеноПолучено()

	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВыпущенныеКиЗ.Количество() = 0 Тогда
		
		ОчиститьПолученоВыпущено();
		Возврат;
		
	КонецЕсли;
	
	ОчиститьПолученоВыпущено();
	ОчиститьПроблемыЗаказано();
	
	ИнтеграцияГИСМПереопределяемый.ОбновитьКолонкиВыпущеноПолученоВТЧЗаказанныеКиЗ(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПоступлениямСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КандидатыВДокументыПоступления.Очистить();
	ПустаяСсылкаДокументПоступления = Неопределено;
	
	Запрос = ИнтеграцияГИСМПереопределяемый.ЗапросПоПоступившимКиЗ(Объект);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаНомераКиЗ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНомераКиЗ.Следующий() Цикл
		
		НоваяСтрокаКандидаты = КандидатыВДокументыПоступления.Добавить();
		НоваяСтрокаКандидаты.НомерКиЗ = ВыборкаНомераКиЗ.НомерКиЗ;
		ТекущийДокументПоступленияПравильный = Ложь;
		
		ВыборкаДетали = ВыборкаНомераКиЗ.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаДетали.ДокументПоступленияКандидат) Тогда
				НоваяСтрокаКандидаты.СписокДокументовПоступления.Добавить(ВыборкаДетали.ДокументПоступленияКандидат);
			КонецЕсли;
			Если ВыборкаДетали.ДокументПоступления = ВыборкаДетали.ДокументПоступленияКандидат
				И ЗначениеЗаполнено(ВыборкаДетали.ДокументПоступления) Тогда
				ТекущийДокументПоступленияПравильный = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ТекущийДокументПоступленияПравильный Тогда
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("НомерКиЗ", ВыборкаНомераКиЗ.НомерКиЗ);
			НайденныеСтроки = Объект.ВыпущенныеКиЗ.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого НайденнаяСтроки Из НайденныеСтроки Цикл
				
				КоличествоКандитатовВПоступление =  НоваяСтрокаКандидаты.СписокДокументовПоступления.Количество();
				Если КоличествоКандитатовВПоступление = 1 Тогда
					НайденнаяСтроки.ДокументПоступления = НоваяСтрокаКандидаты.СписокДокументовПоступления.Получить(0).Значение;
					НайденнаяСтроки.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.Подтвердить;
				Иначе
					НайденнаяСтроки.ДокументПоступления = ПустаяСсылкаДокументПоступления;
					Если КоличествоКандитатовВПоступление = 0 Тогда
						НайденнаяСтроки.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОжидаетсяПоступление;
					Иначе
						НайденнаяСтроки.СостояниеПодтверждения = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ВыбратьПоступление;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	// Реквизит формы, контролирующий работу с адресом доставки.
	// Используемые поля аналогичны полям справочника ВидыКонтактнойИнформации.
	ВидКонтактнойИнформацииАдресаДоставки = Новый Структура;
	ВидКонтактнойИнформацииАдресаДоставки.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидКонтактнойИнформацииАдресаДоставки.Вставить("АдресТолькоРоссийский",        Истина);
	ВидКонтактнойИнформацииАдресаДоставки.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформацииАдресаДоставки.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	ПредставлениеАдресаДоставки = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Объект.АдресДоставки);
	КомментарийАдресаДоставки   = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(Объект.АдресДоставки);
	
КонецПроцедуры

// Устанавливаем новый комментарий для адреса доставки.
// 
&НаСервере
Процедура ЗаполнитьКомментарийАдресаДоставкиСервер()
	
	Если ПустаяСтрока(Объект.АдресДоставки) Тогда
		// Необходимо инициализировать данные.
		Объект.АдресДоставки = ЗначенияПолейКонтактнойИнформацииСервер(ПредставлениеАдресаДоставки, ВидКонтактнойИнформацииАдресаДоставки, КомментарийАдресаДоставки);
		Возврат;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(Объект.АдресДоставки, КомментарийАдресаДоставки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СпособПолученияПриИзменении(Элемент)
	
	УправлениеОтметкойНезаполненногоАдреса(ЭтотОбъект);
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция GLNКонтрагента(Контрагент)
	
	Возврат ИнтеграцияГИСМ.ПоследнийУказанныйВДокументахGLNКонтрагента(Контрагент);
	
КонецФункции

#КонецОбласти
