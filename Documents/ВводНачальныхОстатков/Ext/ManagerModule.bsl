#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Процедура формирования таблицы счетов на оплату.
//
// Параметры:
//	ДокументСсылкаВводНачальныхОстатков - ДокументСсылка.ВводНачальныхОстатков - Текущий документ
//	СтруктураДополнительныеСвойства - Структура - Дополнительные свойства документа
//
Процедура ИнициализироватьДанныеДокументаОплатаСчетовИЗаказов(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСПокупателями.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	РасчетыСПокупателями.ЗаказПокупателя КАК СчетНаОплату,
	|	РасчетыСПокупателями.СуммаВал КАК СуммаАванса
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Контрагент.ВестиУчетОплатыПоСчетам
	|	И РасчетыСПокупателями.Ссылка = &Ссылка
	|	И РасчетыСПокупателями.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И РасчетыСПокупателями.ПризнакАванса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПокупателями.Ссылка.Дата,
	|	&Организация,
	|	РасчетыСПокупателями.СчетНаОплату,
	|	РасчетыСПокупателями.СуммаВал
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Контрагент.ВестиУчетОплатыПоСчетам
	|	И РасчетыСПокупателями.Ссылка = &Ссылка
	|	И РасчетыСПокупателями.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|	И РасчетыСПокупателями.ПризнакАванса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Ссылка.Дата,
	|	&Организация,
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.СуммаВал
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Контрагент.ВестиУчетОплатыПоСчетам
	|	И РасчетыСПоставщиками.Ссылка = &Ссылка
	|	И РасчетыСПоставщиками.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	И РасчетыСПоставщиками.ПризнакАванса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.Ссылка.Дата,
	|	&Организация,
	|	РасчетыСПоставщиками.СчетНаОплату,
	|	РасчетыСПоставщиками.СуммаВал
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Контрагент.ВестиУчетОплатыПоСчетам
	|	И РасчетыСПоставщиками.Ссылка = &Ссылка
	|	И РасчетыСПоставщиками.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|	И РасчетыСПоставщиками.ПризнакАванса";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаОплатаСчетовИЗаказов()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаУправленческий(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Управленческий.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	Управленческий.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА Управленческий.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ДебетКредит.Дебет)
	|			ТОГДА Управленческий.Счет
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный)
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА Управленческий.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ДебетКредит.Дебет)
	|			ТОГДА ВЫБОР
	|					КОГДА Управленческий.Счет.Валютный
	|						ТОГДА Управленческий.Валюта
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА Управленческий.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ДебетКредит.Дебет)
	|			ТОГДА ВЫБОР
	|					КОГДА Управленческий.Счет.Валютный
	|						ТОГДА Управленческий.СуммаВал
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА Управленческий.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ДебетКредит.Дебет)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный)
	|		ИНАЧЕ Управленческий.Счет
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА Управленческий.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ДебетКредит.Дебет)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Управленческий.Счет.Валютный
	|					ТОГДА Управленческий.Валюта
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА Управленческий.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ДебетКредит.Дебет)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Управленческий.Счет.Валютный
	|					ТОГДА Управленческий.СуммаВал
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаВалКт,
	|	Управленческий.Валюта КАК Валюта,
	|	Управленческий.СуммаВал КАК СуммаВал,
	|	&Содержание КАК Содержание
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ПрочиеРазделы КАК Управленческий
	|ГДЕ
	|	Управленческий.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Ввод начальных остатков'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаУправленческий()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРасчетыСПодотчетниками(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПодотчетниками.Ссылка КАК Ссылка,
	|	РасчетыСПодотчетниками.Ссылка.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ЛОЖЬ
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения,
	|	МИНИМУМ(РасчетыСПодотчетниками.НомерСтроки) КАК НомерСтроки,
	|	&Организация КАК Организация,
	|	РасчетыСПодотчетниками.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ИСТИНА
	|			ТОГДА РасчетыСПодотчетниками.Сотрудник.СчетРасчетовПоПерерасходу
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ЛОЖЬ
	|			ТОГДА РасчетыСПодотчетниками.Сотрудник.СчетРасчетовСПодотчетниками
	|	КОНЕЦ КАК СчетУчета,
	|	РасчетыСПодотчетниками.Валюта КАК Валюта,
	|	РасчетыСПодотчетниками.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ЛОЖЬ
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ИСТИНА
	|			ТОГДА &ПогашениеДолгаПодотчетнику
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ЛОЖЬ
	|			ТОГДА &ВозникновениеДолгаПодотчетника
	|	КОНЕЦ КАК СодержаниеПроводки,
	|	СУММА(РасчетыСПодотчетниками.СуммаВал) КАК СуммаВал,
	|	СУММА(РасчетыСПодотчетниками.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПодотчетниками КАК РасчетыСПодотчетниками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	РасчетыСПодотчетниками.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Константы.ВалютаУчета,
	|	РасчетыСПодотчетниками.Ссылка,
	|	РасчетыСПодотчетниками.Сотрудник,
	|	РасчетыСПодотчетниками.Валюта,
	|	РасчетыСПодотчетниками.Документ,
	|	РасчетыСПодотчетниками.Перерасход,
	|	РасчетыСПодотчетниками.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ИСТИНА
	|			ТОГДА РасчетыСПодотчетниками.Сотрудник.СчетРасчетовПоПерерасходу
	|		КОГДА РасчетыСПодотчетниками.Перерасход = ЛОЖЬ
	|			ТОГДА РасчетыСПодотчетниками.Сотрудник.СчетРасчетовСПодотчетниками
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.Сотрудник.СчетРасчетовСПодотчетниками КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Сотрудник.СчетРасчетовСПодотчетниками.Валютный
	|			ТОГДА ТаблицаДокумента.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Сотрудник.СчетРасчетовСПодотчетниками.Валютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	0 КАК СуммаВалКт,
	|	&ВозникновениеДолгаПодотчетника КАК Содержание
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПодотчетниками КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Перерасход = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&Организация,
	|	ТаблицаДокумента.Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаДокумента.Сотрудник.СчетРасчетовПоПерерасходу,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Сотрудник.СчетРасчетовПоПерерасходу.Валютный
	|			ТОГДА ТаблицаДокумента.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Сотрудник.СчетРасчетовПоПерерасходу.Валютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&ПогашениеДолгаПодотчетнику
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПодотчетниками КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Перерасход = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеДолгаПодотчетника", НСтр("ru = 'Ввод остатков задолженности подотчетника'"));
	Запрос.УстановитьПараметр("ПогашениеДолгаПодотчетнику", НСтр("ru = 'Ввод остатков задолженности перед подотчетником'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПодотчетниками", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[1].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРасчетыСПодотчетниками()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРасчетыСПерсоналом(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПерсоналом.Ссылка КАК Ссылка,
	|	РасчетыСПерсоналом.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МИНИМУМ(РасчетыСПерсоналом.НомерСтроки) КАК НомерСтроки,
	|	&Организация КАК Организация,
	|	РасчетыСПерсоналом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасчетыСПерсоналом.Сотрудник КАК Сотрудник,
	|	РасчетыСПерсоналом.Сотрудник.СчетРасчетовСПерсоналом КАК СчетУчета,
	|	РасчетыСПерсоналом.Валюта КАК Валюта,
	|	НАЧАЛОПЕРИОДА(РасчетыСПерсоналом.ПериодРегистрации, МЕСЯЦ) КАК ПериодРегистрации,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит) КАК ВидДвиженияУправленческий,
	|	&ВозникновениеОбязательствПередПерсоналом КАК СодержаниеПроводки,
	|	СУММА(РасчетыСПерсоналом.СуммаВал) КАК СуммаВал,
	|	СУММА(РасчетыСПерсоналом.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПерсоналом КАК РасчетыСПерсоналом
	|ГДЕ
	|	РасчетыСПерсоналом.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПерсоналом.Ссылка,
	|	РасчетыСПерсоналом.Сотрудник,
	|	РасчетыСПерсоналом.СтруктурнаяЕдиница,
	|	РасчетыСПерсоналом.Валюта,
	|	РасчетыСПерсоналом.ПериодРегистрации,
	|	РасчетыСПерсоналом.Ссылка.Дата,
	|	РасчетыСПерсоналом.Сотрудник.СчетРасчетовСПерсоналом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	0 КАК СуммаВалДт,
	|	ТаблицаДокумента.Сотрудник.СчетРасчетовСПерсоналом КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Сотрудник.СчетРасчетовСПерсоналом.Валютный
	|			ТОГДА ТаблицаДокумента.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Сотрудник.СчетРасчетовСПерсоналом.Валютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	&ВозникновениеОбязательствПередПерсоналом КАК Содержание
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПерсоналом КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПередПерсоналом", НСтр("ru = 'Возникновение обязательств перед персоналом'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПерсоналом", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[1].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРасчетыСПерсоналом()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРасчетыПоНалогам(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыПоНалогам.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	МИНИМУМ(РасчетыПоНалогам.НомерСтроки) КАК НомерСтроки,
	|	&Организация КАК Организация,
	|	РасчетыПоНалогам.ВидНалога КАК ВидНалога,
	|	РасчетыПоНалогам.ВидНалога.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит) КАК ВидДвиженияУправленческий,
	|	&НачислениеНалога КАК СодержаниеПроводки,
	|	СУММА(РасчетыПоНалогам.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогам КАК РасчетыПоНалогам
	|ГДЕ
	|	РасчетыПоНалогам.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыПоНалогам.Ссылка,
	|	РасчетыПоНалогам.ВидНалога,
	|	РасчетыПоНалогам.Ссылка.Дата,
	|	РасчетыПоНалогам.ВидНалога.СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	0 КАК СуммаВалДт,
	|	ТаблицаДокумента.ВидНалога.СчетУчета КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	0 КАК СуммаВалКт,
	|	&НачислениеНалога КАК Содержание
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоНалогам КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("НачислениеНалога", НСтр("ru = 'Ввод остатков задолженности перед бюджетом'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыПоНалогам", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[1].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРасчетыПоНалогам()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРасчетыСПокупателями(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПокупателями.Ссылка.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения,
	|	МИНИМУМ(РасчетыСПокупателями.НомерСтроки) КАК НомерСтроки,
	|	&Организация КАК Организация,
	|	РасчетыСПокупателями.Контрагент КАК Контрагент,
	|	РасчетыСПокупателями.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА РасчетыСПокупателями.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.пустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателями.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	РасчетыСПокупателями.Договор.ВалютаРасчетов КАК Валюта,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		КОГДА РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|	КОНЕЦ КАК ТипРасчетов,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|		КОГДА РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА &ВозникновениеОбязательствПокупателя
	|		КОГДА РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА &ПогашениеОбязательствПокупателя
	|	КОНЕЦ КАК СодержаниеПроводки,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА РасчетыСПокупателями.Контрагент.СчетУчетаРасчетовСПокупателем
	|		КОГДА РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА РасчетыСПокупателями.Контрагент.СчетУчетаАвансовПокупателя
	|	КОНЕЦ КАК СчетУчета,
	|	СУММА(РасчетыСПокупателями.СуммаВал) КАК СуммаВал,
	|	СУММА(РасчетыСПокупателями.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.ПризнакАванса,
	|	РасчетыСПокупателями.ЗаказПокупателя,
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.Ссылка,
	|	РасчетыСПокупателями.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА РасчетыСПокупателями.Контрагент.СчетУчетаРасчетовСПокупателем
	|		КОГДА РасчетыСПокупателями.ПризнакАванса
	|			ТОГДА РасчетыСПокупателями.Контрагент.СчетУчетаАвансовПокупателя
	|	КОНЕЦ,
	|	РасчетыСПокупателями.Договор.ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА РасчетыСПокупателями.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.пустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПокупателями.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПокупателями.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаДокумента.Договор.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	0 КАК СуммаВалКт,
	|	&ВозникновениеОбязательствПокупателя КАК Содержание
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПокупателями КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.ПризнакАванса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&Организация,
	|	ТаблицаДокумента.Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаДокумента.Договор.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&ПогашениеОбязательствПокупателя
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПокупателями КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ПризнакАванса
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru = 'Ввод остатков задолженности покупателей'"));
	Запрос.УстановитьПараметр("ПогашениеОбязательствПокупателя", НСтр("ru = 'Ввод остатков авансов от покупателей'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[1].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРасчетыСПокупателями()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРасчетыСПоставщиками(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПоставщиками.Ссылка.Дата КАК Период,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения,
	|	МИНИМУМ(РасчетыСПоставщиками.НомерСтроки) КАК НомерСтроки,
	|	&Организация КАК Организация,
	|	РасчетыСПоставщиками.Контрагент КАК Контрагент,
	|	РасчетыСПоставщиками.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА РасчетыСПоставщиками.ЗаказПоставщику
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.пустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщиками.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	РасчетыСПоставщиками.Договор.ВалютаРасчетов КАК Валюта,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		КОГДА РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|	КОНЕЦ КАК ТипРасчетов,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|		КОГДА РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|	КОНЕЦ КАК ВидДвиженияУправленческий,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА &ВозникновениеОбязательствПередПоставщиком
	|		КОГДА РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА &ПогашениеОбязательствПередПоставщиком
	|	КОНЕЦ КАК СодержаниеПроводки,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА РасчетыСПоставщиками.Контрагент.СчетУчетаРасчетовСПоставщиком
	|		КОГДА РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА РасчетыСПоставщиками.Контрагент.СчетУчетаАвансовПоставщику
	|	КОНЕЦ КАК СчетУчета,
	|	СУММА(РасчетыСПоставщиками.СуммаВал) КАК СуммаВал,
	|	СУММА(РасчетыСПоставщиками.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Контрагент,
	|	РасчетыСПоставщиками.Договор,
	|	РасчетыСПоставщиками.ПризнакАванса,
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.Документ,
	|	РасчетыСПоставщиками.Ссылка,
	|	РасчетыСПоставщиками.Ссылка.Дата,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА РасчетыСПоставщиками.Контрагент.СчетУчетаРасчетовСПоставщиком
	|		КОГДА РасчетыСПоставщиками.ПризнакАванса
	|			ТОГДА РасчетыСПоставщиками.Контрагент.СчетУчетаАвансовПоставщику
	|	КОНЕЦ,
	|	РасчетыСПоставщиками.Договор.ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Контрагент.ВестиРасчетыПоЗаказам
	|			ТОГДА РасчетыСПоставщиками.ЗаказПоставщику
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.пустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА РасчетыСПоставщиками.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	0 КАК СуммаВалДт,
	|	ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА ТаблицаДокумента.Договор.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	&ВозникновениеОбязательствПередПоставщиком КАК Содержание
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПоставщиками КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.ПризнакАванса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&Организация,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику.Валютный
	|			ТОГДА ТаблицаДокумента.Договор.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Контрагент.СчетУчетаАвансовПоставщику.Валютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	&ПогашениеОбязательствПередПоставщиком
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПоставщиками КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ПризнакАванса
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки");
 
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПередПоставщиком", НСтр("ru = 'Ввод остатков задолженности поставщикам'"));
	Запрос.УстановитьПараметр("ПогашениеОбязательствПередПоставщиком", НСтр("ru = 'Ввод остатков авансов поставщикам'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками", МассивРезультатов[0].Выгрузить());
	
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Количество() > 0 Тогда
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[1].Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРасчетыСПоставщиками()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаДоходыИРасходыНераспределенные(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.АвансовыйОтчет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|		ИНАЧЕ ТаблицаДокумента.Документ.Статья
	|	КОНЕЦ КАК Статья,
	|	0 КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК СуммаРасходов
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПоставщиками КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ПризнакАванса
	|	И НЕ(ТаблицаДокумента.Договор.ЭтоДоговорОбслуживания
	|				И ТаблицаДокумента.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	&Организация,
	|	ТаблицаДокумента.Документ,
	|	ТаблицаДокумента.Документ.Статья,
	|	ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПокупателями КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ПризнакАванса
	|	И НЕ(ТаблицаДокумента.Договор.ЭтоДоговорОбслуживания
	|				И ТаблицаДокумента.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
 
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
		
КонецПроцедуры // ИнициализироватьДанныеДокументаДоходыИРасходыНераспределенные()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаДоходыИРасходыКассовыйМетод(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.АвансовыйОтчет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|		ИНАЧЕ ТаблицаДокумента.Документ.Статья
	|	КОНЕЦ КАК Статья,
	|	0 КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК СуммаРасходов
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПоставщиками КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ(ТаблицаДокумента.Договор.ЭтоДоговорОбслуживания
	|				И ТаблицаДокумента.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	И ТаблицаДокумента.ПризнакАванса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	&Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаДокумента.Документ.Статья,
	|	ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПокупателями КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ(ТаблицаДокумента.Договор.ЭтоДоговорОбслуживания
	|				И ТаблицаДокумента.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	И ТаблицаДокумента.ПризнакАванса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки");
 
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаДоходыИРасходыОтложенные(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ОсновноеНаправление) КАК НаправлениеДеятельности,
	|	0 КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК СуммаРасходов
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПоставщиками КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.ПризнакАванса
	|	И НЕ(ТаблицаДокумента.Договор.ЭтоДоговорОбслуживания
	|				И ТаблицаДокумента.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	&Организация,
	|	ТаблицаДокумента.Документ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ОсновноеНаправление),
	|	ТаблицаДокумента.Сумма,
	|	0
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыСПокупателями КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.ПризнакАванса
	|	И НЕ(ТаблицаДокумента.Договор.ЭтоДоговорОбслуживания
	|				И ТаблицаДокумента.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыОтложенные()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаДенежныеСредства(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДенежныеСредства.Ссылка.Дата КАК Период,
	|	МИНИМУМ(ДенежныеСредства.НомерСтроки) КАК НомерСтроки,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДенежныеСредства.БанковскийСчетКасса) = ТИП(Справочник.Кассы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.БезНаличные)
	|	КОНЕЦ КАК ТипДенежныхСредств,
	|	ДенежныеСредства.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ДенежныеСредства.ВалютаДенежныхСредств КАК Валюта,
	|	ДенежныеСредства.БанковскийСчетКасса.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ВводНачальныхОстатков) КАК Статья,
	|	ДенежныеСредства.БанковскийСчетКасса КАК Аналитика,
	|	&СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ДенежныеСредства.СуммаВал) КАК СуммаВал,
	|	СУММА(ДенежныеСредства.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДенежныеСредства КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредства.Ссылка,
	|	ДенежныеСредства.ВалютаДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДенежныеСредства.БанковскийСчетКасса) = ТИП(Справочник.Кассы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.БезНаличные)
	|	КОНЕЦ,
	|	ДенежныеСредства.БанковскийСчетКасса,
	|	ДенежныеСредства.Ссылка.Дата,
	|	ДенежныеСредства.БанковскийСчетКасса.СчетУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.БанковскийСчетКасса.СчетУчета КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.БанковскийСчетКасса.СчетУчета.Валютный
	|			ТОГДА ТаблицаДокумента.ВалютаДенежныхСредств
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.БанковскийСчетКасса.СчетУчета.Валютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	0 КАК СуммаВалКт,
	|	&СодержаниеПроводки КАК Содержание
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ДенежныеСредства КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("СодержаниеПроводки", НСтр("ru = 'Ввод остатков денежных средств'"));
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредства", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[1].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаДенежныеСредства()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаЗапасы(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковЗапасы.Порядок КАК Порядок,
	|	ВводНачальныхОстатковЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВводНачальныхОстатковЗапасы.Период КАК Период,
	|	ВводНачальныхОстатковЗапасы.Организация КАК Организация,
	|	ВводНачальныхОстатковЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВводНачальныхОстатковЗапасы.СчетУчета КАК СчетУчета,
	|	ВводНачальныхОстатковЗапасы.Номенклатура КАК Номенклатура,
	|	ВводНачальныхОстатковЗапасы.Характеристика КАК Характеристика,
	|	ВводНачальныхОстатковЗапасы.Партия КАК Партия,
	|	ВводНачальныхОстатковЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВводНачальныхОстатковЗапасы.Количество КАК Количество,
	|	ВводНачальныхОстатковЗапасы.Сумма КАК Сумма,
	|	ИСТИНА КАК ФиксированнаяСтоимость,
	|	ВводНачальныхОстатковЗапасы.ВидДвиженияУправленческий КАК ВидДвиженияУправленческий,
	|	ВводНачальныхОстатковЗапасы.СодержаниеПроводки КАК СодержаниеПроводки
	|ИЗ
	|	(ВЫБРАТЬ
	|		0 КАК Порядок,
	|		ВводНачальныхОстатковЗапасы.НомерСтроки КАК НомерСтроки,
	|		ВводНачальныхОстатковЗапасы.Ссылка.Дата КАК Период,
	|		&Организация КАК Организация,
	|		ВводНачальныхОстатковЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ВЫБОР
	|			КОГДА ВводНачальныхОстатковЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ИЛИ ВводНачальныхОстатковЗапасы.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|				ТОГДА ВводНачальныхОстатковЗапасы.Номенклатура.СчетУчетаЗапасов
	|			ИНАЧЕ ВводНачальныхОстатковЗапасы.Номенклатура.СчетУчетаЗатрат
	|		КОНЕЦ КАК СчетУчета,
	|		ВводНачальныхОстатковЗапасы.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА &ИспользоватьХарактеристики
	|				ТОГДА ВводНачальныхОстатковЗапасы.Характеристика
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ КАК Характеристика,
	|		ВЫБОР
	|			КОГДА &ИспользоватьПартии
	|				ТОГДА ВводНачальныхОстатковЗапасы.Партия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ КАК Партия,
	|		ВводНачальныхОстатковЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА ВводНачальныхОстатковЗапасы.Количество
	|			ИНАЧЕ ВводНачальныхОстатковЗапасы.Количество * ВводНачальныхОстатковЗапасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК Количество,
	|		ВводНачальныхОстатковЗапасы.Сумма КАК Сумма,
	|		ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет) КАК ВидДвиженияУправленческий,
	|		&ОприходованиеЗапасов КАК СодержаниеПроводки
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.Запасы КАК ВводНачальныхОстатковЗапасы
	|	ГДЕ
	|		ВводНачальныхОстатковЗапасы.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		ВводНачальныхОстатковПрямыеЗатраты.НомерСтроки,
	|		ВводНачальныхОстатковПрямыеЗатраты.Ссылка.Дата,
	|		&Организация,
	|		ВводНачальныхОстатковПрямыеЗатраты.СтруктурнаяЕдиница,
	|		ВводНачальныхОстатковПрямыеЗатраты.СчетЗатрат,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|		ВводНачальныхОстатковПрямыеЗатраты.ЗаказПокупателя,
	|		0,
	|		ВводНачальныхОстатковПрямыеЗатраты.Сумма,
	|		ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет),
	|		&ОприходованиеЗатрат
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.ПрямыеЗатраты КАК ВводНачальныхОстатковПрямыеЗатраты
	|	ГДЕ
	|		ВводНачальныхОстатковПрямыеЗатраты.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2,
	|		ВводНачальныхОстатковЗапасыПринятые.НомерСтроки,
	|		ВводНачальныхОстатковЗапасыПринятые.Ссылка.Дата,
	|		&Организация,
	|		ВводНачальныхОстатковЗапасыПринятые.СтруктурнаяЕдиница,
	|		ВводНачальныхОстатковЗапасыПринятые.Номенклатура.СчетУчетаЗапасов,
	|		ВводНачальныхОстатковЗапасыПринятые.Номенклатура,
	|		ВЫБОР
	|			КОГДА &ИспользоватьХарактеристики
	|				ТОГДА ВводНачальныхОстатковЗапасыПринятые.Характеристика
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ИспользоватьПартии
	|				ТОГДА ВводНачальныхОстатковЗапасыПринятые.Партия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВводНачальныхОстатковЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|					И (НЕ &ИспользоватьРезервирование)
	|				ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ИНАЧЕ ВводНачальныхОстатковЗапасыПринятые.Заказ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковЗапасыПринятые.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА ВводНачальныхОстатковЗапасыПринятые.Количество
	|			ИНАЧЕ ВводНачальныхОстатковЗапасыПринятые.Количество * ВводНачальныхОстатковЗапасыПринятые.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ,
	|		0,
	|		ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет),
	|		&ОприходованиеЗапасовПринятых
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.ЗапасыПринятые КАК ВводНачальныхОстатковЗапасыПринятые
	|	ГДЕ
	|		ВводНачальныхОстатковЗапасыПринятые.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		3,
	|		ВводНачальныхОстатковЗапасыПереданные.НомерСтроки,
	|		ВводНачальныхОстатковЗапасыПереданные.Ссылка.Дата,
	|		&Организация,
	|		ВводНачальныхОстатковЗапасыПереданные.Контрагент,
	|		ВводНачальныхОстатковЗапасыПереданные.Номенклатура.СчетУчетаЗапасов,
	|		ВводНачальныхОстатковЗапасыПереданные.Номенклатура,
	|		ВЫБОР
	|			КОГДА &ИспользоватьХарактеристики
	|				ТОГДА ВводНачальныхОстатковЗапасыПереданные.Характеристика
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ИспользоватьПартии
	|				ТОГДА ВводНачальныхОстатковЗапасыПереданные.Партия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		КОНЕЦ,
	|		ВводНачальныхОстатковЗапасыПереданные.Заказ,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковЗапасыПереданные.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА ВводНачальныхОстатковЗапасыПереданные.Количество
	|			ИНАЧЕ ВводНачальныхОстатковЗапасыПереданные.Количество * ВводНачальныхОстатковЗапасыПереданные.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ,
	|		ВводНачальныхОстатковЗапасыПереданные.Себестоимость,
	|		ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет),
	|		&ОприходованиеЗапасовПереданных
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.ЗапасыПереданные КАК ВводНачальныхОстатковЗапасыПереданные
	|	ГДЕ
	|		ВводНачальныхОстатковЗапасыПереданные.Ссылка = &Ссылка) КАК ВводНачальныхОстатковЗапасы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Порядок,
	|	ВводНачальныхОстатковЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВводНачальныхОстатковЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ВводНачальныхОстатковЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ВводНачальныхОстатковЗапасы.Ячейка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ячейка,
	|	ВводНачальныхОстатковЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ВводНачальныхОстатковЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ВводНачальныхОстатковЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ВводНачальныхОстатковЗапасы.Количество
	|		ИНАЧЕ ВводНачальныхОстатковЗапасы.Количество * ВводНачальныхОстатковЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Запасы КАК ВводНачальныхОстатковЗапасы
	|ГДЕ
	|	ВводНачальныхОстатковЗапасы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ВводНачальныхОстатковЗапасыПринятые.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ВводНачальныхОстатковЗапасыПринятые.Ссылка.Дата,
	|	&Организация,
	|	ВводНачальныхОстатковЗапасыПринятые.СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Ячейка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВводНачальныхОстатковЗапасыПринятые.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковЗапасыПринятые.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Количество
	|		ИНАЧЕ ВводНачальныхОстатковЗапасыПринятые.Количество * ВводНачальныхОстатковЗапасыПринятые.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ЗапасыПринятые КАК ВводНачальныхОстатковЗапасыПринятые
	|ГДЕ
	|	ВводНачальныхОстатковЗапасыПринятые.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВводНачальныхОстатковЗапасыПереданные.Ссылка.Дата КАК Период,
	|	ВводНачальныхОстатковЗапасыПереданные.НомерСтроки,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВводНачальныхОстатковЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
	|		КОГДА ВводНачальныхОстатковЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)
	|		КОГДА ВводНачальныхОстатковЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипПриемаПередачи,
	|	ВводНачальныхОстатковЗапасыПереданные.Контрагент,
	|	ВводНачальныхОстатковЗапасыПереданные.Договор,
	|	ВЫБОР
	|		КОГДА ВводНачальныхОстатковЗапасыПереданные.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ВводНачальныхОстатковЗапасыПереданные.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВводНачальныхОстатковЗапасыПереданные.Заказ
	|		КОГДА ВводНачальныхОстатковЗапасыПереданные.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ВводНачальныхОстатковЗапасыПереданные.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ВводНачальныхОстатковЗапасыПереданные.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Заказ,
	|	ВводНачальныхОстатковЗапасыПереданные.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ВводНачальныхОстатковЗапасыПереданные.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ВводНачальныхОстатковЗапасыПереданные.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВводНачальныхОстатковЗапасыПереданные.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковЗапасыПереданные.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ВводНачальныхОстатковЗапасыПереданные.Количество
	|		ИНАЧЕ ВводНачальныхОстатковЗапасыПереданные.Количество * ВводНачальныхОстатковЗапасыПереданные.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВводНачальныхОстатковЗапасыПереданные.СуммаРасчетов
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ЗапасыПереданные КАК ВводНачальныхОстатковЗапасыПереданные
	|ГДЕ
	|	ВводНачальныхОстатковЗапасыПереданные.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВводНачальныхОстатковЗапасыПринятые.Ссылка.Дата КАК Период,
	|	ВводНачальныхОстатковЗапасыПринятые.НомерСтроки,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВводНачальныхОстатковЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)
	|		КОГДА ВводНачальныхОстатковЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)
	|		КОГДА ВводНачальныхОстатковЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипПриемаПередачи,
	|	ВводНачальныхОстатковЗапасыПринятые.Контрагент КАК Контрагент,
	|	ВводНачальныхОстатковЗапасыПринятые.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ВводНачальныхОстатковЗапасыПринятые.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И ВводНачальныхОстатковЗапасыПринятые.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Заказ
	|		КОГДА ВводНачальныхОстатковЗапасыПринятые.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ВводНачальныхОстатковЗапасыПринятые.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Заказ,
	|	ВводНачальныхОстатковЗапасыПринятые.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВводНачальныхОстатковЗапасыПринятые.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковЗапасыПринятые.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ВводНачальныхОстатковЗапасыПринятые.Количество
	|		ИНАЧЕ ВводНачальныхОстатковЗапасыПринятые.Количество * ВводНачальныхОстатковЗапасыПринятые.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВводНачальныхОстатковЗапасыПринятые.СуммаРасчетов КАК СуммаРасчетов,
	|	ВводНачальныхОстатковЗапасыПринятые.СуммаРасчетов КАК Сумма,
	|	ВводНачальныхОстатковЗапасыПринятые.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет) КАК ВидДвиженияУправленческий,
	|	&ПриемЗапасов КАК СодержаниеПроводки
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ЗапасыПринятые КАК ВводНачальныхОстатковЗапасыПринятые
	|ГДЕ
	|	ВводНачальныхОстатковЗапасыПринятые.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВводНачальныхОстатковЗапасыВРазрезеГТД.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВводНачальныхОстатковЗапасыВРазрезеГТД.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ВводНачальныхОстатковЗапасыВРазрезеГТД.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ВводНачальныхОстатковЗапасыВРазрезеГТД.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ВводНачальныхОстатковЗапасыВРазрезеГТД.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВводНачальныхОстатковЗапасыВРазрезеГТД.НомерГТД КАК НомерГТД,
	|	ВводНачальныхОстатковЗапасыВРазрезеГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВводНачальныхОстатковЗапасыВРазрезеГТД.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ВводНачальныхОстатковЗапасыВРазрезеГТД.Количество
	|		ИНАЧЕ ВводНачальныхОстатковЗапасыВРазрезеГТД.Количество * ВводНачальныхОстатковЗапасыВРазрезеГТД.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ЗапасыВРазрезеГТД КАК ВводНачальныхОстатковЗапасыВРазрезеГТД
	|ГДЕ
	|	ВводНачальныхОстатковЗапасыВРазрезеГТД.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ТаблицаДокумента.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)
	|			ТОГДА ТаблицаДокумента.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	0 КАК СуммаВалДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	0 КАК СуммаВалКт,
	|	&ОприходованиеЗапасов КАК Содержание
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Запасы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&Организация,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.СчетЗатрат,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	&ОприходованиеЗатрат
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ПрямыеЗатраты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&Организация,
	|	ТаблицаДокумента.Себестоимость,
	|	ТаблицаДокумента.Номенклатура.СчетУчетаЗапасов,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	&ОприходованиеЗапасовПереданных
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ЗапасыПереданные КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Себестоимость <> 0
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата КАК Период,
	|	ТаблицаЗапасы.Ссылка.Дата КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Приход) КАК Операция,
	|	ТаблицаСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	&Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	1 КАК Количество
	|ИЗ
	|	Документ.ВводНачальныхОстатков.Запасы КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатков.СерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаЗапасы.Ссылка = ТаблицаСерийныеНомера.Ссылка
	|		И ТаблицаЗапасы.КлючСвязи = ТаблицаСерийныеНомера.КлючСвязи
	|ГДЕ
	|	ТаблицаЗапасы.Ссылка = &Ссылка И ТаблицаСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьРезервирование", Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить());
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("ОприходованиеЗатрат", НСтр("ru = 'Оприходование затрат'"));
	Запрос.УстановитьПараметр("ОприходованиеЗапасовПринятых", НСтр("ru = 'Оприходование запасов принятых'"));
	Запрос.УстановитьПараметр("ОприходованиеЗапасовПереданных", НСтр("ru = 'Оприходование запасов переданных'"));
	Запрос.УстановитьПараметр("ПриемЗапасов", НСтр("ru = 'Прием запасов'"));
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПереданные", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", МассивРезультатов[4].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[5].Выгрузить());

	// Серийные номера
	РезультатЗапроса = МассивРезультатов[6].Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // ИнициализироватьДанныеДокументаЗапасы()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеВнеоборотныеАктивы(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ТаблицаДокумента.ВнеоборотныйАктив.СпособАмортизации КАК СпособАмортизации,
	|	ТаблицаДокумента.ВнеоборотныйАктив.НачальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ТаблицаДокумента.ТекущееСостояниеВнеоборотногоАктива КАК ТекущееСостояниеВнеоборотногоАктива,
	|	ТаблицаДокумента.ТекущаяВыработкаКоличество КАК ТекущаяВыработкаКоличество,
	|	ТаблицаДокумента.ТекущаяНачисленнаяАмортизация КАК ТекущаяНачисленнаяАмортизация,
	|	ТаблицаДокумента.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ИСТИНА КАК ВводитьВЭксплуатацию,
	|	ТаблицаДокумента.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ТекущаяНачисленнаяАмортизация <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачислятьАмортизациюВТекущемМесяце,
	|	ТаблицаДокумента.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВременнаяТаблицаВнеоборотныеАктивы
	|ИЗ
	|	Документ.ВводНачальныхОстатков.ВнеоборотныеАктивы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ТекущееСостояниеВнеоборотногоАктива КАК Состояние,
	|	ТаблицаДокумента.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ТаблицаДокумента.НачислятьАмортизациюВТекущемМесяце КАК НачислятьАмортизациюВТекущемМесяце
	|ИЗ
	|	ВременнаяТаблицаВнеоборотныеАктивы КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаДокумента.ПервоначальнаяСтоимость КАК СтоимостьДляВычисленияАмортизации,
	|	ТаблицаДокумента.НачислятьАмортизациюВТекущемМесяце КАК ПрименитьВТекущемМесяце,
	|	ТаблицаДокумента.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаДокумента.СчетЗатрат КАК СчетЗатрат,
	|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	ВременнаяТаблицаВнеоборотныеАктивы КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ТаблицаДокумента.ПервоначальнаяСтоимость КАК Стоимость,
	|	0 КАК Амортизация,
	|	&ПринятиеВнеоборотногоАктиваКУчету КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаВнеоборотныеАктивы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ПервоначальнаяСтоимость > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Организация,
	|	ТаблицаДокумента.ВнеоборотныйАктив,
	|	0,
	|	ТаблицаДокумента.ТекущаяНачисленнаяАмортизация,
	|	&НачислениеАмортизации
	|ИЗ
	|	ВременнаяТаблицаВнеоборотныеАктивы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ТекущаяНачисленнаяАмортизация > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ТаблицаДокумента.ТекущаяВыработкаКоличество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаВнеоборотныеАктивы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СпособАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииВнеоборотныхАктивов.ПропорциональноОбъемуПродукции)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ПервоначальнаяСтоимость КАК Сумма,
	|	ТаблицаДокумента.ВнеоборотныйАктив.СчетУчета КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВнеоборотныйАктив.СчетУчета.Валютный
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВнеоборотныйАктив.СчетУчета.Валютный
	|			ТОГДА 0
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	0 КАК СуммаВалКт,
	|	&ПринятиеВнеоборотногоАктиваКУчету КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаВнеоборотныеАктивы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ПервоначальнаяСтоимость > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	&Организация,
	|	ТаблицаДокумента.ТекущаяНачисленнаяАмортизация,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ТаблицаДокумента.ВнеоборотныйАктив.СчетАмортизации,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВнеоборотныйАктив.СчетАмортизации.Валютный
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВнеоборотныйАктив.СчетАмортизации.Валютный
	|			ТОГДА 0
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	&НачислениеАмортизации
	|ИЗ
	|	ВременнаяТаблицаВнеоборотныеАктивы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ТекущаяНачисленнаяАмортизация > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ПринятиеВнеоборотногоАктиваКУчету", НСтр("ru = 'Ввод начальных остатков по внеоборотным активам'"));
	Запрос.УстановитьПараметр("НачислениеАмортизации", НСтр("ru = 'Ввод начальных остатков по амортизации'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();

    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянияВнеоборотныхАктивов", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметрыВнеоборотныхАктивов", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВнеоборотныеАктивы", МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкаВнеоборотныхАктивов", МассивРезультатов[4].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", МассивРезультатов[5].Выгрузить());

КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРасчетыПоЭквайрингу(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВводНачальныхОстатковРасчетыПоЭквайрингу.НомерСтроки) КАК НомерСтроки,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.ЭквайринговыйТерминал,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Сумма КАК Сумма,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Комиссия КАК Комиссия,
	|	&РасчетыПоЭквайрингу КАК СодержаниеПроводки,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.СуммаВал,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.КомиссияВал
	|ИЗ
	|	Документ.ВводНачальныхОстатков.РасчетыПоЭквайрингу КАК ВводНачальныхОстатковРасчетыПоЭквайрингу
	|ГДЕ
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Ссылка = &Ссылка
	|	И &ВестиУчетРасчетовСБанкомЭквайрером И НЕ &РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Ссылка,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Ссылка.Дата,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.ЭквайринговыйТерминал,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Сумма,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.Комиссия,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.СуммаВал,
	|	ВводНачальныхОстатковРасчетыПоЭквайрингу.КомиссияВал");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаВводНачальныхОстатков);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("РасчетыПоЭквайрингу", НСтр("ru = 'Ввод остатков расчетов по эквайрингу'"));
	Запрос.УстановитьПараметр("ВестиУчетРасчетовСБанкомЭквайрером", ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером"));
	Запрос.УстановитьПараметр("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям", ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
    СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыПоЭквайрингу", МассивРезультатов[0].Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРасчетыСПерсоналом()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства) Экспорт

	РазделУчета = ДокументСсылкаВводНачальныхОстатков.РазделУчета;

	Если      РазделУчета = "Имущество" Тогда

		ИнициализироватьДанныеВнеоборотныеАктивы(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);

	ИначеЕсли РазделУчета = "Запасы" Тогда

		ИнициализироватьДанныеДокументаЗапасы(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);

	ИначеЕсли РазделУчета = "Денежные средства" Тогда

		ИнициализироватьДанныеДокументаДенежныеСредства(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);

	ИначеЕсли РазделУчета = "Расчеты с поставщиками и покупателями" Тогда

		ИнициализироватьДанныеДокументаРасчетыСПокупателями(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);
		ИнициализироватьДанныеДокументаРасчетыСПоставщиками(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);
		ИнициализироватьДанныеДокументаДоходыИРасходыНераспределенные(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);
		ИнициализироватьДанныеДокументаДоходыИРасходыКассовыйМетод(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);
		ИнициализироватьДанныеДокументаДоходыИРасходыОтложенные(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);
		ИнициализироватьДанныеДокументаОплатаСчетовИЗаказов(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);
		
	ИначеЕсли РазделУчета = "Расчеты по налогам" Тогда

		ИнициализироватьДанныеДокументаРасчетыПоНалогам(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);

	ИначеЕсли РазделУчета = "Расчеты с персоналом" Тогда

		ИнициализироватьДанныеДокументаРасчетыСПерсоналом(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);

	ИначеЕсли РазделУчета = "Расчеты с подотчетниками" Тогда
		
		ИнициализироватьДанныеДокументаРасчетыСПодотчетниками(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);

	ИначеЕсли РазделУчета = "Прочие разделы" Тогда

		ИнициализироватьДанныеДокументаУправленческий(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);

	// Эквайринг
	ИначеЕсли РазделУчета = "Эквайринг" Тогда

		ИнициализироватьДанныеДокументаРасчетыПоЭквайрингу(ДокументСсылкаВводНачальныхОстатков, СтруктураДополнительныеСвойства);

	// Конец Эквайринг
	КонецЕсли;

КонецПроцедуры // ИнициализироватьДанныеДокумента()

// КОНТРОЛЬ

// Контроль раздела учета ДенежныеСредства.
//
Процедура ВыполнитьКонтрольДенежныеСредства(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь)
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияДенежныеСредстваИзменение"
	// содержат записи, необходимо выполнить контроль отрицательных остатков.
	
	Если СтруктураВременныеТаблицы.ДвиженияДенежныеСредстваИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияДенежныеСредстваИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваИзменение.БанковскийСчетКасса) КАК БанковскийСчетКассаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваИзменение.Валюта) КАК ВалютаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияДенежныеСредстваИзменение.ТипДенежныхСредств) КАК ТипДенежныхСредствПредставление,
		|	ДвиженияДенежныеСредстваИзменение.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияДенежныеСредстваИзменение.СуммаВалИзменение + ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаВалОстаток, 0) КАК ОстатокДенежныхСредств,
		|	ДвиженияДенежныеСредстваИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияДенежныеСредстваИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияДенежныеСредстваИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияДенежныеСредстваИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияДенежныеСредстваИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияДенежныеСредстваИзменение.СуммаВалИзменение КАК СуммаВалИзменение
		|ИЗ
		|	ДвиженияДенежныеСредстваИзменение КАК ДвиженияДенежныеСредстваИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ТипДенежныхСредств, БанковскийСчетКасса, Валюта) В
		|					(ВЫБРАТЬ
		|						ДвиженияДенежныеСредстваИзменение.Организация КАК Организация,
		|						ДвиженияДенежныеСредстваИзменение.ТипДенежныхСредств КАК ТипДенежныхСредств,
		|						ДвиженияДенежныеСредстваИзменение.БанковскийСчетКасса КАК БанковскийСчетКасса,
		|						ДвиженияДенежныеСредстваИзменение.Валюта КАК Валюта
		|					ИЗ
		|						ДвиженияДенежныеСредстваИзменение КАК ДвиженияДенежныеСредстваИзменение)) КАК ДенежныеСредстваОстатки
		|		ПО ДвиженияДенежныеСредстваИзменение.Организация = ДенежныеСредстваОстатки.Организация
		|			И ДвиженияДенежныеСредстваИзменение.ТипДенежныхСредств = ДенежныеСредстваОстатки.ТипДенежныхСредств
		|			И ДвиженияДенежныеСредстваИзменение.БанковскийСчетКасса = ДенежныеСредстваОстатки.БанковскийСчетКасса
		|			И ДвиженияДенежныеСредстваИзменение.Валюта = ДенежныеСредстваОстатки.Валюта
		|ГДЕ
		|	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаВалОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.Выполнить();
		
		// Отрицательный остаток по денежным средствам.
		Если НЕ МассивРезультатов.Пустой() Тогда
			
			ДокументОбъектВводНачальныхОстатков = ДокументСсылкаВводНачальныхОстатков.ПолучитьОбъект();
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов.Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредства(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Контроль раздела учета РасчетыСПокупателями.
//
Процедура ВыполнитьКонтрольРасчетыСПокупателями(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь)
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияРасчетыСПокупателямиИзменение"
	// содержат записи, необходимо выполнить контроль отрицательных остатков.
	
	Если СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Контрагент) КАК КонтрагентПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Договор) КАК ДоговорПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов) КАК ВалютаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Документ) КАК ДокументПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.Заказ) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов) КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Контрагент, Договор, Документ, Заказ, ТипРасчетов) В
		|					(ВЫБРАТЬ
		|						ДвиженияРасчетыСПокупателямиИзменение.Организация КАК Организация,
		|						ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК Контрагент,
		|						ДвиженияРасчетыСПокупателямиИзменение.Договор КАК Договор,
		|						ДвиженияРасчетыСПокупателямиИзменение.Документ КАК Документ,
		|						ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК Заказ,
		|						ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|					ИЗ
		|						ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение)) КАК РасчетыСПокупателямиОстатки
		|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
		|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
		|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|				ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
		|			ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.Выполнить();
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов.Пустой() Тогда
			
			ДокументОбъектВводНачальныхОстатков = ДокументСсылкаВводНачальныхОстатков.ПолучитьОбъект();
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов.Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Контроль раздела учета РасчетыСПоставщиками.
//
Процедура ВыполнитьКонтрольРасчетыСПоставщиками(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь)
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияРасчетыСПоставщикамиИзменение"
	// содержат записи, необходимо выполнить контроль отрицательных остатков.
	
	Если СтруктураВременныеТаблицы.ДвиженияРасчетыСПоставщикамиИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияРасчетыСПоставщикамиИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПоставщикамиИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПоставщикамиИзменение.Контрагент) КАК КонтрагентПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПоставщикамиИзменение.Договор) КАК ДоговорПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПоставщикамиИзменение.Договор.ВалютаРасчетов) КАК ВалютаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПоставщикамиИзменение.Документ) КАК ДокументПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПоставщикамиИзменение.Заказ) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов) КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВыданныхАвансов,
		|	ДвиженияРасчетыСПоставщикамиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПоставщикамиИзменение КАК ДвиженияРасчетыСПоставщикамиИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Контрагент, Договор, Документ, Заказ, ТипРасчетов) В
		|					(ВЫБРАТЬ
		|						ДвиженияРасчетыСПоставщикамиИзменение.Организация КАК Организация,
		|						ДвиженияРасчетыСПоставщикамиИзменение.Контрагент КАК Контрагент,
		|						ДвиженияРасчетыСПоставщикамиИзменение.Договор КАК Договор,
		|						ДвиженияРасчетыСПоставщикамиИзменение.Документ КАК Документ,
		|						ДвиженияРасчетыСПоставщикамиИзменение.Заказ КАК Заказ,
		|						ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов КАК ТипРасчетов
		|					ИЗ
		|						ДвиженияРасчетыСПоставщикамиИзменение КАК ДвиженияРасчетыСПоставщикамиИзменение)) КАК РасчетыСПоставщикамиОстатки
		|		ПО ДвиженияРасчетыСПоставщикамиИзменение.Организация = РасчетыСПоставщикамиОстатки.Организация
		|			И ДвиженияРасчетыСПоставщикамиИзменение.Контрагент = РасчетыСПоставщикамиОстатки.Контрагент
		|			И ДвиженияРасчетыСПоставщикамиИзменение.Договор = РасчетыСПоставщикамиОстатки.Договор
		|			И ДвиженияРасчетыСПоставщикамиИзменение.Документ = РасчетыСПоставщикамиОстатки.Документ
		|			И ДвиженияРасчетыСПоставщикамиИзменение.Заказ = РасчетыСПоставщикамиОстатки.Заказ
		|			И ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов = РасчетыСПоставщикамиОстатки.ТипРасчетов
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ДвиженияРасчетыСПоставщикамиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|				ТОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) > 0
		|			ИНАЧЕ ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) < 0
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.Выполнить();
		
		// Отрицательный остаток по расчетам с поставщиками.
		Если НЕ МассивРезультатов.Пустой() Тогда
			
			ДокументОбъектВводНачальныхОстатков = ДокументСсылкаВводНачальныхОстатков.ПолучитьОбъект();
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов.Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПоставщиками(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Контроль раздела учета РасчетыСПодотчетниками.
//
Процедура ВыполнитьКонтрольРасчетыСПодотчетниками(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь)
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияРасчетыСПодотчетникамиИзменение"
	// содержат записи, необходимо выполнить контроль отрицательных остатков.
	
	Если СтруктураВременныеТаблицы.ДвиженияРасчетыСПодотчетникамиИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияРасчетыСПодотчетникамиИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПодотчетникамиИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПодотчетникамиИзменение.Сотрудник) КАК СотрудникПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПодотчетникамиИзменение.Валюта) КАК ВалютаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРасчетыСПодотчетникамиИзменение.Документ) КАК ДокументПредставление,
		|	ЕСТЬNULL(РасчетыСПодотчетникамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПодотчетникамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПодотчетникамиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПодотчетникамиОстатки.СуммаВалОстаток, 0) КАК ОстатокУПодотчетногоЛица,
		|	ДвиженияРасчетыСПодотчетникамиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПодотчетникамиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПодотчетникамиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПодотчетникамиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПодотчетникамиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПодотчетникамиИзменение.СуммаВалИзменение КАК СуммаВалИзменение
		|ИЗ
		|	ДвиженияРасчетыСПодотчетникамиИзменение КАК ДвиженияРасчетыСПодотчетникамиИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПодотчетниками.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Сотрудник, Валюта, Документ) В
		|					(ВЫБРАТЬ
		|						ДвиженияРасчетыСПодотчетникамиИзменение.Организация КАК Организация,
		|						ДвиженияРасчетыСПодотчетникамиИзменение.Сотрудник КАК Сотрудник,
		|						ДвиженияРасчетыСПодотчетникамиИзменение.Валюта КАК Валюта,
		|						ДвиженияРасчетыСПодотчетникамиИзменение.Документ КАК Документ
		|					ИЗ
		|						ДвиженияРасчетыСПодотчетникамиИзменение КАК ДвиженияРасчетыСПодотчетникамиИзменение)) КАК РасчетыСПодотчетникамиОстатки
		|		ПО ДвиженияРасчетыСПодотчетникамиИзменение.Организация = РасчетыСПодотчетникамиОстатки.Организация
		|			И ДвиженияРасчетыСПодотчетникамиИзменение.Сотрудник = РасчетыСПодотчетникамиОстатки.Сотрудник
		|			И ДвиженияРасчетыСПодотчетникамиИзменение.Валюта = РасчетыСПодотчетникамиОстатки.Валюта
		|			И ДвиженияРасчетыСПодотчетникамиИзменение.Документ = РасчетыСПодотчетникамиОстатки.Документ
		|ГДЕ
		|	(ТИПЗНАЧЕНИЯ(РасчетыСПодотчетникамиОстатки.Документ) = ТИП(Документ.АвансовыйОтчет)
		|				И ЕСТЬNULL(РасчетыСПодотчетникамиОстатки.СуммаВалОстаток, 0) > 0
		|			ИЛИ ТИПЗНАЧЕНИЯ(РасчетыСПодотчетникамиОстатки.Документ) <> ТИП(Документ.АвансовыйОтчет)
		|				И ЕСТЬNULL(РасчетыСПодотчетникамиОстатки.СуммаВалОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.Выполнить();
		
		// Отрицательный остаток по расчетам с подотчетными лицами.
		Если НЕ МассивРезультатов.Пустой() Тогда
			
			ДокументОбъектВводНачальныхОстатков = ДокументСсылкаВводНачальныхОстатков.ПолучитьОбъект();
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов.Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПодотчетниками(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Контроль раздела учета Запасы.
//
Процедура ВыполнитьКонтрольЗапасы(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь)
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;

	// Если временные таблицы "ДвиженияЗаказыПокупателейИзменение", "ДвиженияВнутренниеЗаказыИзменение",
	// "ДвиженияЗаказыПоставщикамИзменение", "ДвиженияЗаказыНаПроизводствоИзменение",
	// "ДвиженияУчетЗапасовИЗатратИзменение", "ДвиженияЗапасыВМестахХраненияИзменение",
	// "ДвиженияТоварыПереданныеИзменение", "ДвиженияТоварыПринятыеИзменение"
	// содержат записи, необходимо выполнить контроль отрицательных остатков.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПереданныеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПереданныеИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПереданныеИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи) КАК ТипПриемаПередачиПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПереданныеИзменение.Контрагент) КАК КонтрагентПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПереданныеИзменение.Договор) КАК ДоговорПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПереданныеИзменение.Заказ) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПереданныеИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПереданныеИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПереданныеИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПереданныеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПереданные,
		|	ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПереданные,
		|	ЕСТЬNULL(ДвиженияЗапасыПереданныеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПереданные,
		|	ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПереданные
		|ИЗ
		|	ДвиженияЗапасыПереданныеИзменение КАК ДвиженияЗапасыПереданныеИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПереданные.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ТипПриемаПередачи, Контрагент, Договор, Заказ, Номенклатура, Характеристика, Партия) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыПереданныеИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачи,
		|						ДвиженияЗапасыПереданныеИзменение.Контрагент КАК Контрагент,
		|						ДвиженияЗапасыПереданныеИзменение.Договор КАК Договор,
		|						ДвиженияЗапасыПереданныеИзменение.Заказ КАК Заказ,
		|						ДвиженияЗапасыПереданныеИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыПереданныеИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыПереданныеИзменение.Партия КАК Партия
		|					ИЗ
		|						ДвиженияЗапасыПереданныеИзменение КАК ДвиженияЗапасыПереданныеИзменение)) КАК ЗапасыПереданныеОстатки
		|		ПО ДвиженияЗапасыПереданныеИзменение.Организация = ЗапасыПереданныеОстатки.Организация
		|			И ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи = ЗапасыПереданныеОстатки.ТипПриемаПередачи
		|			И ДвиженияЗапасыПереданныеИзменение.Контрагент = ЗапасыПереданныеОстатки.Контрагент
		|			И ДвиженияЗапасыПереданныеИзменение.Договор = ЗапасыПереданныеОстатки.Договор
		|			И ДвиженияЗапасыПереданныеИзменение.Заказ = ЗапасыПереданныеОстатки.Заказ
		|			И ДвиженияЗапасыПереданныеИзменение.Номенклатура = ЗапасыПереданныеОстатки.Номенклатура
		|			И ДвиженияЗапасыПереданныеИзменение.Характеристика = ЗапасыПереданныеОстатки.Характеристика
		|			И ДвиженияЗапасыПереданныеИзменение.Партия = ЗапасыПереданныеОстатки.Партия
		|ГДЕ
		|	(ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) < 0
		|			ИЛИ ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи) КАК ТипПриемаПередачиПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Контрагент) КАК КонтрагентПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Договор) КАК ДоговорПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Заказ) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПринятые.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ТипПриемаПередачи, Контрагент, Договор, Заказ, Номенклатура, Характеристика, Партия) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыПринятыеИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачи,
		|						ДвиженияЗапасыПринятыеИзменение.Контрагент КАК Контрагент,
		|						ДвиженияЗапасыПринятыеИзменение.Договор КАК Договор,
		|						ДвиженияЗапасыПринятыеИзменение.Заказ КАК Заказ,
		|						ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыПринятыеИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыПринятыеИзменение.Партия КАК Партия
		|					ИЗ
		|						ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение)) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И ДвиженияЗапасыПринятыеИзменение.Контрагент = ЗапасыПринятыеОстатки.Контрагент
		|			И ДвиженияЗапасыПринятыеИзменение.Договор = ЗапасыПринятыеОстатки.Договор
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|ГДЕ
		|	(ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|			ИЛИ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой() Тогда
			
			ДокументОбъектВводНачальныхОстатков = ДокументСсылкаВводНачальныхОстатков.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладахСписком(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов и затрат.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыСписком(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток товаров переданных.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПереданныеСписком(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета товаров принятых.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятыеСписком(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов в разрезе ГТД.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Контроль раздела учета ВнеоборотныеАктивы.
//
Процедура ВыполнитьКонтрольВнеоборотныеАктивы(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь)
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;

	// Если временные таблицы "ДвиженияВнеоборотныеАктивыИзменение"
	// содержат записи, необходимо выполнить контроль отрицательных остатков.
	
	Если СтруктураВременныеТаблицы.ДвиженияВнеоборотныеАктивыИзменение Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияВнеоборотныеАктивыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияВнеоборотныеАктивыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияВнеоборотныеАктивыИзменение.ВнеоборотныйАктив) КАК ВнеоборотныйАктивПредставление,
		|	ЕСТЬNULL(ВнеоборотныеАктивыОстатки.СтоимостьОстаток, 0) КАК СтоимостьОстаток,
		|	ЕСТЬNULL(ВнеоборотныеАктивыОстатки.АмортизацияОстаток, 0) КАК АмортизацияОстаток,
		|	ДвиженияВнеоборотныеАктивыИзменение.СтоимостьПередЗаписью КАК СтоимостьПередЗаписью,
		|	ДвиженияВнеоборотныеАктивыИзменение.СтоимостьПриЗаписи КАК СтоимостьПриЗаписи,
		|	ДвиженияВнеоборотныеАктивыИзменение.СтоимостьИзменение КАК СтоимостьИзменение,
		|	ДвиженияВнеоборотныеАктивыИзменение.СтоимостьИзменение + ЕСТЬNULL(ВнеоборотныеАктивыОстатки.СтоимостьОстаток, 0) КАК ОстаточнаяСтоимость,
		|	ДвиженияВнеоборотныеАктивыИзменение.АмортизацияПередЗаписью КАК АмортизацияПередЗаписью,
		|	ДвиженияВнеоборотныеАктивыИзменение.АмортизацияПриЗаписи КАК АмортизацияПриЗаписи,
		|	ДвиженияВнеоборотныеАктивыИзменение.АмортизацияИзменение КАК АмортизацияИзменение,
		|	ДвиженияВнеоборотныеАктивыИзменение.АмортизацияИзменение + ЕСТЬNULL(ВнеоборотныеАктивыОстатки.АмортизацияОстаток, 0) КАК НачисленнаяАмортизация
		|ИЗ
		|	ДвиженияВнеоборотныеАктивыИзменение КАК ДвиженияВнеоборотныеАктивыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнеоборотныеАктивы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ВнеоборотныйАктив) В
		|					(ВЫБРАТЬ
		|						ДвиженияВнеоборотныеАктивыИзменение.Организация КАК Организация,
		|						ДвиженияВнеоборотныеАктивыИзменение.ВнеоборотныйАктив КАК ВнеоборотныйАктив
		|					ИЗ
		|						ДвиженияВнеоборотныеАктивыИзменение КАК ДвиженияВнеоборотныеАктивыИзменение)) КАК ВнеоборотныеАктивыОстатки
		|		ПО (ДвиженияВнеоборотныеАктивыИзменение.Организация = ДвиженияВнеоборотныеАктивыИзменение.Организация)
		|			И (ДвиженияВнеоборотныеАктивыИзменение.ВнеоборотныйАктив = ДвиженияВнеоборотныеАктивыИзменение.ВнеоборотныйАктив)
		|ГДЕ
		|	(ЕСТЬNULL(ВнеоборотныеАктивыОстатки.СтоимостьОстаток, 0) < 0
		|			ИЛИ ЕСТЬNULL(ВнеоборотныеАктивыОстатки.АмортизацияОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		// Отрицательный остаток по амортизации имущества.
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ДокументОбъектВводНачальныхОстатков = ДокументСсылкаВводНачальныхОстатков.ПолучитьОбъект();
			
			ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструВнеоборотныеАктивы(ДокументОбъектВводНачальныхОстатков, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;

	РазделУчета = ДокументСсылкаВводНачальныхОстатков.РазделУчета;

	Если РазделУчета = "Имущество" Тогда

		ВыполнитьКонтрольВнеоборотныеАктивы(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь);

	ИначеЕсли РазделУчета = "Запасы" Тогда

		ВыполнитьКонтрольЗапасы(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь);

	ИначеЕсли РазделУчета = "Денежные средства" Тогда

		ВыполнитьКонтрольДенежныеСредства(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь);

	ИначеЕсли РазделУчета = "Расчеты с поставщиками и покупателями" Тогда

		ВыполнитьКонтрольРасчетыСПокупателями(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь);
		ВыполнитьКонтрольРасчетыСПоставщиками(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь);

	ИначеЕсли РазделУчета = "Расчеты с подотчетниками" Тогда
		
		ВыполнитьКонтрольРасчетыСПодотчетниками(ДокументСсылкаВводНачальныхОстатков, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь);

	КонецЕсли;

КонецПроцедуры

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПриОпределенииЗначенияПоУмолчанию(СправочникСсылка, ИмяРеквизита, ВходящиеДанные, СтрокаСопоставлена, ЗначениеПоУмолчанию)
	
	Если СтрокаСопоставлена 
		И НЕ ЗначениеЗаполнено(ВходящиеДанные) 
		И ЗначениеЗаполнено(СправочникСсылка[ИмяРеквизита]) Тогда
		
		ЗначениеПоУмолчанию = СправочникСсылка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока60 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(60));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000= Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло10_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	
	Если ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы" Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиница", "Склад (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
		Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Ячейки");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Ячейка", "Ячейка (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 4, , Истина);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПринятые" Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПриходнаяНакладная");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидОперации", "Вид операции (Комиссия / Переработка / Ответхранение)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиница", "Склад (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
		Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Ячейки");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Ячейка", "Ячейка (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контрагент", "Поставщик (ИНН или наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Договор", "Договор контрагента (наименование либо номер)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерЗаказаПоставщику", "Номер заказа поставщику", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Заказ");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаЗаказаПоставщику", "Дата заказа поставщику", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Заказ");
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 4, , Истина);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка, , , Истина);
			
		КонецЕсли;
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЦенаПродажи", "Цена учета", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаРасчетов", "Сумма расчетов", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПереданные" Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасходнаяНакладная");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидОперации", "Вид операции (Комиссия / Переработка / Ответхранение)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контрагент", "Покупатель (ИНН или наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Договор", "Договор контрагента (наименование либо номер)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерЗаказаПокупателя", "Номер заказа покупателя", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Заказ");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаЗаказаПокупателя", "Дата заказа покупателя", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Заказ");
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 4, , Истина);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена учета", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Себестоимость", "Себестоимость", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЦенаПродажи", "Цена продажи", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаРасчетов", "Сумма расчетов", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыВРазрезеГТД" Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 4, , Истина);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);

		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтраныМира");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтранаПроисхождения", "Страна происхождения", ОписаниеТиповСтрока60, ОписаниеТиповКолонка, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НомераГТД");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерГТД", "Номер ГТД", ОписаниеТиповСтрока30, ОписаниеТиповКолонка, , , Истина);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями" Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контрагент", "Контрагент (ИНН или наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Договор", "Договор контрагента (наименование либо номер)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ПризнакАванса", "Это аванс?", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерЗаказаПокупателя", "Номер заказа покупателя", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Заказ");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаЗаказаПокупателя", "Дата заказа покупателя", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Заказ");
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		МассивТипов.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов(МассивТипов);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидРасчетногоДокумента", "Вид расчетного документа", ОписаниеТиповСтрока50, ОписаниеТиповКолонка, "Документ");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерРасчетногоДокумента", "Номер расчетного документа", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Документ");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаРасчетногоДокумента", "Дата расчетного документа", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Документ");
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаВал", "Сумма (вал.)", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Сумма", "Сумма", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерСчетаПокупателя", "Номер счета к оплате", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Счет", , , );
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаСчетаПокупателя", "Дата счета к оплате", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Счет", , , );
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками" Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Контрагент", "Контрагент (ИНН или наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Договор", "Договор контрагента (наименование либо номер)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ПризнакАванса", "Это аванс?", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , Ложь);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерЗаказаПоставщику", "Номер заказа поставщику", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Заказ");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаЗаказаПоставщику", "Дата заказа поставщику", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Заказ");
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		МассивТипов.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
		МассивТипов.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов(МассивТипов);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидРасчетногоДокумента", "Вид расчетного документа", ОписаниеТиповСтрока50, ОписаниеТиповКолонка, "Документ");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерРасчетногоДокумента", "Номер расчетного документа", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Документ");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаРасчетногоДокумента", "Дата расчетного документа", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Документ");
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаВал", "Сумма (вал.)", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Сумма", "Сумма", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерСчетаПокупателя", "Номер счета к оплате", ОписаниеТиповСтрока25, ОписаниеТиповСтрока25, "Счет");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаСчетаПокупателя", "Дата счета к оплате", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Счет");
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПерсоналом" Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиница", "Подразделение (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Сотрудник", "Сотрудник (ФИО или таб. номер)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Валюты");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Валюта", "Валюта (цифровой или символьный код)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаВал", "Сумма (вал.)", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Сумма", "Сумма", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ПериодРегистрации", "Период регистрации", ОписаниеТиповСтрока25, ОписаниеТиповДата);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ВнеоборотныеАктивы" Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ВнеоборотныеАктивы");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВнеоборотныйАктив", "Имущество (наименование или инв. номер)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, , , Истина);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НачислятьАмортизацию", "Начислять амортизацию?", ОписаниеТиповСтрока25, ОписаниеТиповБулево);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ОбъемПродукцииРаботДляВычисленияАмортизации", "Объем продукции (работ)", ОписаниеТиповСтрока25, ОписаниеТиповЧисло10_0);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокИспользованияДляВычисленияАмортизации", "Срок (мес.)", ОписаниеТиповСтрока25, ОписаниеТиповЧисло10_0);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ТекущаяВыработкаКоличество", "Выработка", ОписаниеТиповСтрока25, ОписаниеТиповЧисло10_0);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ТекущаяНачисленнаяАмортизация", "Текущая амортизация", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияВнеоборотныхАктивов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ТекущееСостояниеВнеоборотногоАктива", "Снят с учета?", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтруктурнаяЕдиница", "Подразделение (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетЗатрат", "Счет затрат (код)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности", "Направление деятельности (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Если НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы" Тогда
		
		Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
		ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
		
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
		
		Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
		ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями" Тогда
		
		Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_РасчетыСПокупателями_xlsx");
		ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
		
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_РасчетыСПокупателями_mxl");
		
		Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_РасчетыСПокупателями_csv");
		ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
		
	ИначеЕсли НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками" Тогда
		
		Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_РасчетыСПоставщиками_xlsx");
		ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
		
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_РасчетыСПоставщиками_mxl");
		
		Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_РасчетыСПоставщиками_csv");
		ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		Если ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы" Тогда
			
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
			ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
			
			// СтруктурнаяЕдиница по наименованию
			ЗначениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Склад", СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, ЭтаСтрокаСопоставлена, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиница, СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
				
				// Ячейка по наименованию
				ЗначениеПоУмолчанию = Справочники.Ячейки.ПустаяСсылка();
				ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Ячейка", СтрокаТаблицыФормы.Ячейка_ВходящиеДанные, ЭтаСтрокаСопоставлена, ЗначениеПоУмолчанию);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЯчейку(СтрокаТаблицыФормы.Ячейка, СтрокаТаблицыФормы.Ячейка_ВходящиеДанные, ЗначениеПоУмолчанию);
				
			КонецЕсли;
			
			Если ЭтаСтрокаСопоставлена Тогда
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					// Характеристика по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					// Партия по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Количество
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
			
			// ЕдиницыИзмерения по Наименованию, Владельцу
			ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// Цена
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПринятые" Тогда
			
			// Вид операции
			ВидОперацииСтрокой = НРег(СтрокаТаблицыФормы.ВидОперации_ВходящиеДанные);
			Если ВидОперацииСтрокой="комиссия" ИЛИ ВидОперацииСтрокой="приемнакомиссию" ИЛИ ВидОперацииСтрокой="прием на комиссию" Тогда
				СтрокаТаблицыФормы.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию;
			ИначеЕсли ВидОперацииСтрокой="переработка" ИЛИ ВидОперацииСтрокой="приемвпереработку" ИЛИ ВидОперацииСтрокой="прием в переработку" Тогда
				СтрокаТаблицыФормы.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку;
			ИначеЕсли ВидОперацииСтрокой="ответхранение" ИЛИ ВидОперацииСтрокой="приемнаответхранение" ИЛИ ВидОперацииСтрокой="прием на ответхранение" Тогда
				СтрокаТаблицыФормы.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение;
			КонецЕсли; 
			
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
			ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
			
			// Контрагент по ИНН, Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКонтрагента(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.Контрагент_ВходящиеДанные, СтрокаТаблицыФормы.Контрагент_ВходящиеДанные, СтрокаТаблицыФормы.Контрагент_ВходящиеДанные);
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Контрагент) Тогда
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДоговор(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.Договор, СтрокаТаблицыФормы.Договор_ВходящиеДанные);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказПоНомеруДате(СтрокаТаблицыФормы.Заказ, "ЗаказПоставщику", СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.НомерЗаказаПоставщику, СтрокаТаблицыФормы.ДатаЗаказаПоставщику);
			КонецЕсли;
			
			// СтруктурнаяЕдиница по наименованию
			ЗначениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Склад", СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, ЭтаСтрокаСопоставлена, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиница, СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
				
				// Ячейка по наименованию
				ЗначениеПоУмолчанию = Справочники.Ячейки.ПустаяСсылка();
				ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Ячейка", СтрокаТаблицыФормы.Ячейка_ВходящиеДанные, ЭтаСтрокаСопоставлена, ЗначениеПоУмолчанию);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЯчейку(СтрокаТаблицыФормы.Ячейка, СтрокаТаблицыФормы.Ячейка_ВходящиеДанные, ЗначениеПоУмолчанию);
				
			КонецЕсли;
			
			Если ЭтаСтрокаСопоставлена Тогда
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					// Характеристика по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					// Партия по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Количество
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
			
			// ЕдиницыИзмерения по Наименованию, Владельцу
			ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// Цена и СуммаРасчетов
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ЦенаПродажи, СтрокаТаблицыФормы.ЦенаПродажи_ВходящиеДанные, 0);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаРасчетов, СтрокаТаблицыФормы.СуммаРасчетов_ВходящиеДанные, 0);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПереданные" Тогда
			
			// Вид операции
			ВидОперацииСтрокой = НРег(СтрокаТаблицыФормы.ВидОперации_ВходящиеДанные);
			Если ВидОперацииСтрокой="комиссия" ИЛИ ВидОперацииСтрокой="передачанакомиссию" ИЛИ ВидОперацииСтрокой="передача на комиссию" Тогда
				СтрокаТаблицыФормы.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию;
			ИначеЕсли ВидОперацииСтрокой="переработка" ИЛИ ВидОперацииСтрокой="передачавпереработку" ИЛИ ВидОперацииСтрокой="передача в переработку" Тогда
				СтрокаТаблицыФормы.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку;
			ИначеЕсли ВидОперацииСтрокой="ответхранение" ИЛИ ВидОперацииСтрокой="передачанаответхранение" ИЛИ ВидОперацииСтрокой="передача на ответхранение" Тогда
				СтрокаТаблицыФормы.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение;
			КонецЕсли; 
			
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
			ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
			
			// Контрагент по ИНН, Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКонтрагента(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.Контрагент_ВходящиеДанные, СтрокаТаблицыФормы.Контрагент_ВходящиеДанные, СтрокаТаблицыФормы.Контрагент_ВходящиеДанные);
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Контрагент) Тогда
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДоговор(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.Договор, СтрокаТаблицыФормы.Договор_ВходящиеДанные);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказПоНомеруДате(СтрокаТаблицыФормы.Заказ, "ЗаказПокупателя", СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.НомерЗаказаПокупателя, СтрокаТаблицыФормы.ДатаЗаказаПокупателя);
			КонецЕсли;
			
			Если ЭтаСтрокаСопоставлена Тогда
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					// Характеристика по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					// Партия по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Количество
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
			
			// ЕдиницыИзмерения по Наименованию, Владельцу
			ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// ЦенаПродажи и СуммаРасчетов
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ЦенаПродажи, СтрокаТаблицыФормы.ЦенаПродажи_ВходящиеДанные, 0);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаРасчетов, СтрокаТаблицыФормы.СуммаРасчетов_ВходящиеДанные, 0);
			
			// Цена и Себестоимость
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 0);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Себестоимость, СтрокаТаблицыФормы.Себестоимость_ВходящиеДанные, 0);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыВРазрезеГТД" Тогда
			
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
			ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
			
			Если ЭтаСтрокаСопоставлена Тогда
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					// Характеристика по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
					
					// Партия по Владельцу и Наименованию
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Количество
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
			
			// ЕдиницыИзмерения по Наименованию, Владельцу
			ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// СтранаПроисхождения, НомерГТД
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтрануПроисхождения(СтрокаТаблицыФормы.СтранаПроисхождения, СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, Неопределено);
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.СтранаПроисхождения)
				И СтрокаТаблицыФормы.СтранаПроисхождения <> Справочники.СтраныМира.Россия Тогда
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНомерГТД(СтрокаТаблицыФормы.НомерГТД, СтрокаТаблицыФормы.НомерГТД_ВходящиеДанные);
			КонецЕсли;
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями" Тогда
			
			// Контрагент по ИНН, Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПоставщика(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.Контрагент_ВходящиеДанные);
			ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Контрагент);
			
			Если ЭтаСтрокаСопоставлена Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДоговор(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.Договор, СтрокаТаблицыФормы.Договор_ВходящиеДанные);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказПоНомеруДате(СтрокаТаблицыФормы.Заказ, "ЗаказПокупателя", СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.НомерЗаказаПокупателя, СтрокаТаблицыФормы.ДатаЗаказаПокупателя);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРасчетныйДокументПоНомеруДате(СтрокаТаблицыФормы.Документ, СтрокаТаблицыФормы.ВидРасчетногоДокумента, СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.НомерРасчетногоДокумента, СтрокаТаблицыФормы.ДатаРасчетногоДокумента);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетПоНомеруДате(СтрокаТаблицыФормы.Счет, СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.НомерСчетаПокупателя, СтрокаТаблицыФормы.ДатаСчетаПокупателя);
				
			КонецЕсли;
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ПризнакАванса, СтрокаТаблицыФормы.ПризнакАванса_ВходящиеДанные);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаВал, СтрокаТаблицыФормы.СуммаВал_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Сумма, СтрокаТаблицыФормы.Сумма_ВходящиеДанные);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками" Тогда
			
			// Контрагент по ИНН, Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПоставщика(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.Контрагент_ВходящиеДанные);
			ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Контрагент);
			
			Если ЭтаСтрокаСопоставлена Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДоговор(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.Договор, СтрокаТаблицыФормы.Договор_ВходящиеДанные);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказПоНомеруДате(СтрокаТаблицыФормы.Заказ, "ЗаказПоставщику", СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.НомерЗаказаПоставщику, СтрокаТаблицыФормы.ДатаЗаказаПоставщику);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРасчетныйДокументПоНомеруДате(СтрокаТаблицыФормы.Документ, СтрокаТаблицыФормы.ВидРасчетногоДокумента, СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.НомерРасчетногоДокумента, СтрокаТаблицыФормы.ДатаРасчетногоДокумента);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетПоНомеруДате(СтрокаТаблицыФормы.Счет, СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.НомерСчетаПокупателя, СтрокаТаблицыФормы.ДатаСчетаПокупателя);
				
			КонецЕсли;
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ПризнакАванса, СтрокаТаблицыФормы.ПризнакАванса_ВходящиеДанные);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаВал, СтрокаТаблицыФормы.СуммаВал_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Сумма, СтрокаТаблицыФормы.Сумма_ВходящиеДанные);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПерсоналом" Тогда
			
			// Сотрудник по ФИО или таб. номеру
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСотрудника(СтрокаТаблицыФормы.Сотрудник, СтрокаТаблицыФормы.Сотрудник_ВходящиеДанные);
			ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Сотрудник);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьВалюту(СтрокаТаблицыФормы.Валюта, СтрокаТаблицыФормы.Валюта_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаВал, СтрокаТаблицыФормы.СуммаВал_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Сумма, СтрокаТаблицыФормы.Сумма_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.ПериодРегистрации, СтрокаТаблицыФормы.ПериодРегистрации_ВходящиеДанные);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ВнеоборотныеАктивы" Тогда
			
			// ВнеоборотныйАктив по наименованию или инв. номеру
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьВнеоборотныйАктив(СтрокаТаблицыФормы.ВнеоборотныйАктив, СтрокаТаблицыФормы.ВнеоборотныйАктив_ВходящиеДанные);
			ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.ВнеоборотныйАктив);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ОбъемПродукцииРаботДляВычисленияАмортизации, СтрокаТаблицыФормы.ОбъемПродукцииРаботДляВычисленияАмортизации_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СрокИспользованияДляВычисленияАмортизации, СтрокаТаблицыФормы.СрокИспользованияДляВычисленияАмортизации_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ТекущаяВыработкаКоличество, СтрокаТаблицыФормы.ТекущаяВыработкаКоличество_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ТекущаяНачисленнаяАмортизация, СтрокаТаблицыФормы.ТекущаяНачисленнаяАмортизация_ВходящиеДанные);
			
			Если ПустаяСтрока(СтрокаТаблицыФормы.НачислятьАмортизацию_ВходящиеДанные) Тогда
				СтрокаТаблицыФормы.НачислятьАмортизацию = Истина;
			Иначе
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.НачислятьАмортизацию, СтрокаТаблицыФормы.НачислятьАмортизацию_ВходящиеДанные);
			КонецЕсли;
			
			СнятСУчета = Ложь;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СнятСУчета, СтрокаТаблицыФормы.ТекущееСостояниеВнеоборотногоАктива_ВходящиеДанные);
			Если НЕ ТипЗнч(СнятСУчета)=Тип("Булево") Тогда
				СнятСУчета = Ложь;
			КонецЕсли; 
			СтрокаТаблицыФормы.ТекущееСостояниеВнеоборотногоАктива = ?(СнятСУчета, 
			Перечисления.СостоянияВнеоборотныхАктивов.СнятСУчета,
			Перечисления.СостоянияВнеоборотныхАктивов.ПринятКУчету);
			
			// СтруктурнаяЕдиница по наименованию
			ЗначениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.СтруктурнаяЕдиница, СтрокаТаблицыФормы.СтруктурнаяЕдиница_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// СчетЗатрат по коду
			ЗначениеПоУмолчанию = ПланыСчетов.Управленческий.АмортизацияВнеоборотныхАктивов;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаЗатрат(СтрокаТаблицыФормы.СчетЗатрат, СтрокаТаблицыФормы.СчетЗатрат_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// НаправлениеДеятельности по наименованию
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.ОсновноеНаправление;
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
		ИЛИ ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
			И СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас // Только запасы
			И СтрокаТаблицыФормы.Количество <> 0 И СтрокаТаблицыФормы.Цена <> 0;
			
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПринятые" 
		ИЛИ ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПереданные" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Контрагент)
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
			И СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас // Только запасы
			И СтрокаТаблицыФормы.Количество <> 0;
			
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыВРазрезеГТД" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.СтранаПроисхождения)
			И НЕ СтрокаТаблицыФормы.СтранаПроисхождения=Справочники.СтраныМира.Россия
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.НомерГТД)
			И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
			И СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас // Только запасы
			И СтрокаТаблицыФормы.Количество <> 0;
			
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями" 
		ИЛИ ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Контрагент);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПерсоналом" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Сотрудник);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ВнеоборотныеАктивы" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.ВнеоборотныйАктив);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ОстаткиВведены() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Комментарий", "# Документ введен помощником ввода остатков.");
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	НЕ ВводНачальныхОстатков.ПометкаУдаления
	|	И ВводНачальныхОстатков.Комментарий ПОДОБНО &Комментарий";
	Возврат НЕ Запрос.Выполнить().Пустой(); 
	
КонецФункции

#КонецОбласти 

#КонецЕсли
