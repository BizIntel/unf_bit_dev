
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСписокРазделовУчета();
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Наличные = Перечисления.ТипыДенежныхСредств.Наличные;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	ВалютаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	
	ПолучитьСтруктуруВидовОпераций();
	УстановитьВидимостьДоступностьЭлементов();
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		Если Элементы.Найти("РасчетыСПерсоналомСотрудникКод") <> Неопределено Тогда
			Элементы.РасчетыСПерсоналомСотрудникКод.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.Найти("РасчетыСПодотчетникамиСотрудникКод") <> Неопределено Тогда
			Элементы.РасчетыСПодотчетникамиСотрудникКод.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
	Склад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	ОсновнойСклад = ?(Склад.ОрдерныйСклад, Неопределено, Склад);
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить()
		И ОсновнойСклад <> Неопределено Тогда
		
		Элементы.ЗапасыПринятыеСтруктурнаяЕдиница.Видимость = Ложь;
		
	КонецЕсли;
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	// Заполнение дополнительных реквизитов табличной части.
	УстановитьВидимостьРеквизитовРасчетов(, , , , "РасчетыСПоставщиками");
	УстановитьВидимостьРеквизитовРасчетов(, , , , "РасчетыСПокупателями");
	УстановитьВидимостьРеквизитовРасчетов(, , , , "ЗапасыПереданные");
	УстановитьВидимостьРеквизитовРасчетов(, , , , "ЗапасыПринятые");
	
	// ФО Использовать подсистему Производство.
	УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость			= ИспользоватьПодключаемоеОборудование;
	Элементы.ЗапасыПереданныеЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ЗапасыПринятыеЗагрузитьДанныеИзТСД.Видимость   = ИспользоватьПодключаемоеОборудование;
	Элементы.ЗапасыВРазрезеГТДЗагрузитьДанныеИзТСД.Видимость= ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УставитьТекущуюСтраницу();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр) Тогда
			Для каждого ТекСтрока Из Объект.ЗапасыПереданные Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					УстановитьВидимостьРеквизитовРасчетов(, , , , "ЗапасыПереданные");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из Объект.ЗапасыПринятые Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					УстановитьВидимостьРеквизитовРасчетов(, , , , "ЗапасыПринятые");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из Объект.РасчетыСПокупателями Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					УстановитьВидимостьРеквизитовРасчетов(, , , , "РасчетыСПокупателями");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из Объект.РасчетыСПоставщиками Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					УстановитьВидимостьРеквизитовРасчетов(, , , , "РасчетыСПоставщиками");
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);

	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заполнение дополнительных реквизитов табличной части.
	УстановитьВидимостьРеквизитовРасчетов(, , , , "РасчетыСПоставщиками");
	УстановитьВидимостьРеквизитовРасчетов(, , , , "РасчетыСПокупателями");
	УстановитьВидимостьРеквизитовРасчетов(, , , , "ЗапасыПереданные");
	УстановитьВидимостьРеквизитовРасчетов(, , , , "ЗапасыПринятые");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура РазделУчетаПриИзменении(Элемент)
	
	// Установка текущей страницы формы.
	УставитьТекущуюСтраницу();
	УстановитьВидимостьДоступностьЭлементов();
	
	Объект.ВнеоборотныеАктивы.Очистить();
	Объект.Запасы.Очистить();
	Объект.ПрямыеЗатраты.Очистить();
	Объект.ЗапасыПринятые.Очистить();
	Объект.ЗапасыПереданные.Очистить();
	Объект.ДенежныеСредства.Очистить();
	Объект.РасчетыСПокупателями.Очистить();
	Объект.РасчетыСПоставщиками.Очистить();
	Объект.РасчетыПоНалогам.Очистить();
	Объект.РасчетыСПерсоналом.Очистить();
	Объект.РасчетыСПодотчетниками.Очистить();
	Объект.ПрочиеРазделы.Очистить();
	Объект.РасчетыПоЭквайрингу.Очистить();
	
КонецПроцедуры // РазделУчетаПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВнеоборотныеАктивы

&НаКлиенте
Процедура ВнеоборотныеАктивыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
 
		СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыПриНачалеРедактирования()

&НаКлиенте
Процедура ВнеоборотныеАктивыОбъемПродукцииРаботДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если НЕ СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыОбъемПродукцииРаботДляВычисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыСрокИспользованияДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Срок использования для вычисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыСрокИспользованияДляВычисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыВнеоборотныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	Иначе
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
		СтрокаТабличнойЧасти.ТекущаяВыработкаКоличество = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыВнеоборотныйАктивПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыТекущаяВыработкаКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если НЕ СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.ТекущаяВыработкаКоличество = 0;
	КонецЕсли;

КонецПроцедуры // ВнеоборотныеАктивыТекущаяВыработкаКоличествоПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрямыеЗатраты

&НаКлиенте
Процедура ПрямыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
 
		СтрокаТабличнойЧасти = Элементы.ПрямыеЗатраты.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока
	   И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если ЗначениеЗаполнено(ОсновнойСклад) Тогда
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновнойСклад;
		Иначе
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерийныеНомера = "";
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера();
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриНачалеРедактирования()

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
	//Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
			ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
			РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
		КонецЦикла;
	КонецЕсли;
	//Серийные номера	
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасыПереданные

&НаКлиенте
Процедура ЗапасыПереданныеПриАктивизацииЯчейки(Элемент)
	
	// Доступность типов заказов.
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыПереданныеЗаказ" Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
			
		Иначе
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);	
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = ДопустимыеТипы;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПереданныеПриАктивизацииЯчейки()

&НаКлиенте
Процедура ЗапасыПереданныеПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовРасчетов(, , , , "ЗапасыПереданные");
	
КонецПроцедуры // ЗапасыПереданныеПослеУдаления()

&НаКлиенте
Процедура ЗапасыПереданныеВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Договор = ПолучитьДоговорПоУмолчанию(
		Объект.Ссылка, СтрокаТабличнойЧасти.Контрагент, Объект.Организация, "ЗапасыПереданные", СтрокаТабличнойЧасти.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(
		СтрокаТабличнойЧасти.Контрагент, Объект.Организация, "ЗапасыПереданные", СтрокаТабличнойЧасти.ВидОперации);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
КонецПроцедуры // ЗапасыПереданныеКонтрагентПриИзменении()

&НаКлиенте
Процедура ЗапасыПереданныеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, 
		Объект.Организация, 
		СтрокаТабличнойЧасти.Контрагент, 
		СтрокаТабличнойЧасти.Договор, 
		СтрокаТабличнойЧасти.ВидОперации, 
		"ЗапасыПереданные"
	);
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПереданные.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
КонецПроцедуры // ЗапасыПереданныеНоменклатураПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасыПринятые

&НаКлиенте
Процедура ЗапасыПринятыеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновнойСклад;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПринятыеПриНачалеРедактирования()

&НаКлиенте
Процедура ЗапасыПринятыеПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовРасчетов(, , , , "ЗапасыПринятые");
	
КонецПроцедуры // ЗапасыПринятыеПослеУдаления()

&НаКлиенте
Процедура ЗапасыПринятыеПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Доступность типов заказов.
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыПринятыеЗаказ" Тогда
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
			
		Иначе
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);	
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = ДопустимыеТипы;
		
	// Партии.
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЗапасыПринятыеПартия" Тогда	
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПринятыеПриАктивизацииЯчейки()

&НаКлиенте
Процедура ЗапасыПринятыеВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Договор = ПолучитьДоговорПоУмолчанию(
		Объект.Ссылка, СтрокаТабличнойЧасти.Контрагент, Объект.Организация, "ЗапасыПринятые", СтрокаТабличнойЧасти.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Объект.Организация, "ЗапасыПринятые", СтрокаТабличнойЧасти.ВидОперации);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
КонецПроцедуры // ЗапасыПринятыеКонтрагентПриИзменении()

&НаКлиенте
Процедура ЗапасыПринятыеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, 
		Объект.Организация, 
		СтрокаТабличнойЧасти.Контрагент,
		СтрокаТабличнойЧасти.Договор, 
		СтрокаТабличнойЧасти.ВидОперации,
		"ЗапасыПринятые"
	);
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПринятыеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыПринятые.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
КонецПроцедуры // ЗапасыПереданныеНоменклатураПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасыВРазрезеГТД

&НаКлиенте
Процедура ЗапасыВРазрезеГТДНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
	ОчиститьНомерГТДПриИзмененииСтраны();
	
КонецПроцедуры // ЗапасыВРазрезеГТДНоменклатураПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДенежныеСредства

&НаКлиенте
Процедура ДенежныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	
КонецПроцедуры // ДенежныеСредстваПриНачалеРедактирования()

&НаКлиенте
Процедура ДенежныеСредстваБанковскийСчетКассаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;

	СтруктураДанные = ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(СтрокаТабличнойЧасти.БанковскийСчетКасса);
	
	СтрокаТабличнойЧасти.ВалютаДенежныхСредств = СтруктураДанные.Валюта;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
		Объект.Дата
	);

КонецПроцедуры // ДенежныеСредстваБанковскийСчетКассаПриИзменении()

&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
																 Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура ДенежныеСредстваСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
																 Объект.Дата);

КонецПроцедуры // ДенежныеСредстваСуммаВалПриИзменении()

&НаКлиенте
Процедура ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ДенежныеСредства.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеДенежныеСредстваВалютаДенежныхСредствНачалоВыбора(СтрокаТабличнойЧасти.БанковскийСчетКасса);
	
	// Если тип денежных средств изменился, необходимо выполнить соответствующие действия.
	Если ЗначениеЗаполнено(СтруктураДанные.ТипДенежныхСредств)
	   И СтруктураДанные.ТипДенежныхСредств <> Наличные Тогда
		ПоказатьПредупреждение(Неопределено,НСТР("ru='Для банковского счета нельзя изменить валюту денежных средств!'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры // ДенежныеСредстваВалютаДенежныхСредствНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПокупателями

&НаКлиенте
Процедура РасчетыСПокупателямиКонтрагентПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Объект.Организация, "РасчетыСПокупателями");
		
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаРасчетов,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПокупателямиКонтрагентПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(СтрокаТабличнойЧасти.Договор);

	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаРасчетов,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПокупателямиДоговорПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, 
		Объект.Организация, 
		СтрокаТабличнойЧасти.Контрагент, 
		СтрокаТабличнойЧасти.Договор, 
		Неопределено, 
		"РасчетыСПокупателями"
	);
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПокупателямиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(СтрокаТабличнойЧасти.Договор);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаРасчетов,
																 Объект.Дата);

КонецПроцедуры // РасчетыСДебиторамиСуммаВалПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовРасчетов(, , , , "РасчетыСПокупателями");
	
КонецПроцедуры // РасчетыСПокупателямиПослеУдаления()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПоставщиками

&НаКлиенте
Процедура РасчетыСПоставщикамиКонтрагентПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Объект.Организация, "РасчетыСПоставщиками");
		
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
		
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаРасчетов,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПоставщикамиКонтрагентПриИзменении()

&НаКлиенте
Процедура РасчетыСПоставщикамиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(СтрокаТабличнойЧасти.Договор);

	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаРасчетов,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПоставщикамиДоговорПриИзменении()

&НаКлиенте
Процедура РасчетыСПоставщикамиДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка,
		Объект.Организация,
		СтрокаТабличнойЧасти.Контрагент,
		СтрокаТабличнойЧасти.Договор, 
		Неопределено,
		"РасчетыСПоставщиками"
	);
	
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(СтрокаТабличнойЧасти.Договор);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаРасчетов,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПоставщикамиСуммаВалПриИзменении()

&НаКлиенте
Процедура РасчетыСПоставщикамиПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовРасчетов(, , , , "РасчетыСПоставщиками");
	
КонецПроцедуры // РасчетыСПоставщикамиПослеУдаления()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПерсоналом

&НаКлиенте
Процедура РасчетыСПерсоналомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.РасчетыСПерсоналом.ТекущиеДанные;
		СтрокаТабличнойЧасти.Валюта = ВалютаПоУмолчанию;
		
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
		
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПерсоналомПриНачалеРедактирования()

&НаКлиенте
Процедура РасчетыСПерсоналомВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПерсоналом.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.Валюта,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПерсоналомВалютаПриИзменении()

&НаКлиенте
Процедура РасчетыСПерсоналомСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПерсоналом.ТекущиеДанные;

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.Валюта,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПерсоналомСуммаВалПриИзменении()

&НаКлиенте
Процедура РасчетыСПерсоналомПериодРегистрацииПриИзменении(Элемент)
	
	ТекСтрока = Элементы.РасчетыСПерсоналом.ТекущиеДанные;
	ТекСтрока.ПериодРегистрации = НачалоМесяца(ТекСтрока.ПериодРегистрации);
	
КонецПроцедуры // РасчетыСПерсоналомПериодРегистрацииПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыСПодотчетниками

&НаКлиенте
Процедура РасчетыСПодотчетникамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
		СтрокаТабличнойЧасти.Валюта = ВалютаПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПодотчетникамиПриНачалеРедактирования()

&НаКлиенте
Процедура РасчетыСПодотчетникамиВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.Валюта,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПодотчетникамиВалютаПриИзменении()

&НаКлиенте
Процедура РасчетыСПодотчетникамиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.Валюта,
																 Объект.Дата);

КонецПроцедуры // РасчетыСПодотчетнымиЛицамиСуммаВалПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРазделы

&НаКлиенте
Процедура ПрочиеРазделыСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(ТекущаяСтрока.Счет);
	
	Если СтруктураДанные.Валютный Тогда
		ТекущаяСтрока.Валюта = СтруктураДанные.Валюта;
		ТекущаяСтрока.СуммаВал = ТекущаяСтрока.Сумма;
	Иначе
		ТекущаяСтрока.Валюта = Неопределено;
		ТекущаяСтрока.СуммаВал = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыСчетПриИзменении()

&НаКлиенте
Процедура ПрочиеРазделыВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(ТекущаяСтрока.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыВалютаНачалоВыбора()

&НаКлиенте
Процедура ПрочиеРазделыВалютаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(ТекущаяСтрока.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		ТекущаяСтрока.Валюта = Неопределено;
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыВалютаПриИзменении()

&НаКлиенте
Процедура ПрочиеРазделыСуммаВалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(ТекущаяСтрока.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыСуммаВалНачалоВыбора()

&НаКлиенте
Процедура ПрочиеРазделыСуммаВалПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(ТекущаяСтрока.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		ТекущаяСтрока.СуммаВал = Неопределено;
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПрочиеРазделыСуммаВалПриИзменении()

&НаКлиенте
Процедура РасчетыСПоставщикамиПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПоставщикамиПризнакАвансаПриИзменении()

&НаКлиенте
Процедура РасчетыСПоставщикамиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПоставщиками.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПоставщикамиДокументПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПокупателямиПризнакАвансаПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасчетыСПокупателями.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РасчетыСПокупателямиДокументПриИзменении()

&НаКлиенте
Процедура АвтоформированиеПриИзменении(Элемент)
	
	Если Объект.Автоформирование Тогда
		Для каждого СтрокаТЧ Из Объект.РасчетыСПокупателями Цикл
			СтрокаТЧ.Документ = Неопределено;
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Объект.РасчетыСПоставщиками Цикл
			СтрокаТЧ.Документ = Неопределено;
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Объект.РасчетыСПодотчетниками Цикл
			СтрокаТЧ.Документ = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // АвтоформированиеПриИзменении()

&НаСервереБезКонтекста
Функция ТипНоменклатурыЗапас(НоменклатураСсылка)
	
	Возврат НоменклатураСсылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	
КонецФункции // ТипНоменклатурыЗапас()

&НаКлиенте
Процедура ЗапасыВРазрезеГТДНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыВРазрезеГТДНомерГТДНачалоВыбора()

&НаКлиенте
Процедура ЗапасыВРазрезеГТДСтранаПроисхожденияПриИзменении(Элемент)
	
	ОчиститьНомерГТДПриИзмененииСтраны();

КонецПроцедуры // ЗапасыВРазрезеГТДСтранаПроисхожденияПриИзменении()

&НаКлиенте
Процедура ОчиститьНомерГТДПриИзмененииСтраны()
	
	ДанныеТекущейСтроки = Элементы.ЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
			ИЛИ ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			ДанныеТекущейСтроки.НомерГТД = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОчиститьНомерГТДПриИзмененииСтраны()

&НаКлиенте
Процедура ПрочиеРазделыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПрочиеРазделы.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(ТекущаяСтрока.Счет);
	Если СтруктураДанные.Валюта = ТекущаяСтрока.Валюта Тогда
		ТекущаяСтрока.СуммаВал = ТекущаяСтрока.Сумма;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, Элементы.Запасы.ТекущиеДанные);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	УправлениеНебольшойФирмойКлиентСервер.УдалитьСтрокиПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьСписокРазделовУчета()
	
	// ФО Использовать подсистему Зарплата.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить()
		ИЛИ Объект.РазделУчета = "Расчеты с персоналом" Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить("Расчеты с персоналом", "Расчеты с персоналом");
	КонецЕсли;
	
	// ФО Использовать Имущество.
	Если Константы.ФункциональнаяОпцияУчетВнеоборотныхАктивов.Получить()
		ИЛИ Объект.РазделУчета = "Имущество" Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить("Имущество", "Имущество");
	КонецЕсли;
	
	// Прочее.
	Элементы.РазделУчета.СписокВыбора.Добавить("Прочие разделы", "Прочие разделы");
	
	// Эквайринг
	Если Не ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям") 
		И ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером") Тогда
		Элементы.РазделУчета.СписокВыбора.Добавить("Эквайринг", "Эквайринг");
	КонецЕсли;
	// Конец Эквайринг
	
КонецПроцедуры // СформироватьСписокРазделовУчета()

// Функция получает имя страницы для раздела учета документа.
//
// Параметры:
//	РазделУчета - ПеречислениеСсылка.РазделыУчета - Раздел учета
//
// Возвращаемое значение:
//	Строка - Имя страницы, соответствующая разделй учета
//
&НаКлиенте
Функция ПолучитьИмяСтраницы(РазделУчета)

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Имущество", "ГруппаВнеоборотныеАктивы");
	Соответствие.Вставить("Запасы", "ГруппаЗапасы");
	Соответствие.Вставить("Денежные средства", "ГруппаДенежныеСредства");
	Соответствие.Вставить("Расчеты с поставщиками и покупателями", "ГруппаРасчетыСКонтрагентами");
	Соответствие.Вставить("Расчеты по налогам", "ГруппаРасчетыПоНалогам");
	Соответствие.Вставить("Расчеты с персоналом", "ГруппаРасчетыСПерсоналом");
	Соответствие.Вставить("Расчеты с подотчетниками", "ГруппаРасчетыСПодотчетниками");
	Соответствие.Вставить("Прочие разделы", "ГруппаПрочиеРазделы");
	Соответствие.Вставить("Эквайринг", "ГруппаРасчетыПоЭквайрингу"); // Эквайринг
	
	ИмяСтраницы = Соответствие.Получить(РазделУчета);
	
	Возврат ИмяСтраницы;

КонецФункции // ПолучитьИмяСтраницы()

&НаКлиенте
Процедура УставитьТекущуюСтраницу()
	
	Элемент = Элементы.Найти(ПолучитьИмяСтраницы(Объект.РазделУчета));
	
	Если Элемент <> Неопределено Тогда
		ЭтаФорма.Элементы.Страницы.ТекущаяСтраница = Элемент;
	КонецЕсли;
	
КонецПроцедуры // УставитьТекущуюСтраницу()

// Процедура формирует соответствие видов операций.
//
&НаСервере
Процедура ПолучитьСтруктуруВидовОпераций()
	
	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		Элементы.ЗапасыПринятые.ПодчиненныеЭлементы.ЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
		Элементы.ЗапасыПринятые.ПодчиненныеЭлементы.ЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветхранение") Тогда
		Элементы.ЗапасыПринятые.ПодчиненныеЭлементы.ЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
		Элементы.ЗапасыПереданные.ПодчиненныеЭлементы.ЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.ЗапасыПереданные.ПодчиненныеЭлементы.ЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветхранение") Тогда
		Элементы.ЗапасыПереданные.ПодчиненныеЭлементы.ЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСтруктуруВидовОпераций()

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Если Объект.РазделУчета = "Расчеты с поставщиками и покупателями"
		ИЛИ Объект.РазделУчета = "Расчеты с подотчетниками" Тогда
		
		Элементы.Автоформирование.Видимость = Истина;
		
	Иначе
		
		Элементы.Автоформирование.Видимость = Ложь;
		Объект.Автоформирование = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить(
		"Компания",
		УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация)		
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетПриИзменении(Счет) Экспорт
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Валютный", Счет.Валютный);
	СтруктураДанные.Вставить("Валюта", Константы.ВалютаУчета.Получить());
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСчетПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеВнеоборотныйАктив(ВнеоборотныйАктив)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СпособАмортизацииПропорциональноОбъемуПродукции", ВнеоборотныйАктив.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииВнеоборотныхАктивов.ПропорциональноОбъемуПродукции);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеВнеоборотныйАктив()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении(БанковскийСчетКасса)

	СтруктураДанные = Новый Структура();

	Если ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаПоУмолчанию);
	ИначеЕсли ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтруктураДанные.Вставить("Валюта", БанковскийСчетКасса.ВалютаДенежныхСредств);
	Иначе
		СтруктураДанные.Вставить("Валюта", Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДенежныеСредстваБанковскийСчетКассаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДенежныеСредстваВалютаДенежныхСредствНачалоВыбора(БанковскийСчетКасса)

	СтруктураДанные = Новый Структура();

	Если ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		СтруктураДанные.Вставить("ТипДенежныхСредств", Перечисления.ТипыДенежныхСредств.Наличные);
	ИначеЕсли ТипЗнч(БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		СтруктураДанные.Вставить("ТипДенежныхСредств", Перечисления.ТипыДенежныхСредств.Безналичные);
	Иначе
		СтруктураДанные.Вставить("ТипДенежныхСредств", Неопределено);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДенежныеСредстваВалютаДенежныхСредствНачалоВыбора()

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации = Неопределено)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	Если (ИмяТабличнойЧасти = "ЗапасыПереданные"
		ИЛИ ИмяТабличнойЧасти = "ЗапасыПринятые")
		И Не ЗначениеЗаполнено(ВидОперации) Тогда
		
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации, ИмяТабличнойЧасти);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации = Неопределено)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить("ВестиРасчетыПоДоговорам", Контрагент.ВестиРасчетыПоДоговорам);
	СтруктураДанные.Вставить("ВестиРасчетыПоДокументам", Контрагент.ВестиРасчетыПоДокументам);
	СтруктураДанные.Вставить("ВестиРасчетыПоЗаказам", Контрагент.ВестиРасчетыПоЗаказам);
	СтруктураДанные.Вставить("ВестиУчетОплатыПоСчетам", Контрагент.ВестиУчетОплатыПоСчетам);
	
	УстановитьВидимостьРеквизитовРасчетов(
		Контрагент.ВестиРасчетыПоДоговорам,
		Контрагент.ВестиРасчетыПоДокументам,
		Контрагент.ВестиРасчетыПоЗаказам,
		Контрагент.ВестиУчетОплатыПоСчетам,
		ИмяТабличнойЧасти
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервере
Процедура УстановитьВидимостьРеквизитовРасчетов(Знач ВестиРасчетыПоДоговорам = Ложь, Знач ВестиРасчетыПоДокументам = Ложь, Знач ВестиРасчетыПоЗаказам = Ложь, Знач ВестиУчетОплатыПоСчетам = Ложь, ИмяТабличнойЧасти)
	
	ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(Объект[ИмяТабличнойЧасти]);
	
	Для каждого ТекСтрока Из Объект[ИмяТабличнойЧасти] Цикл
		Если ТекСтрока.ВестиРасчетыПоДоговорам Тогда
			ВестиРасчетыПоДоговорам = Истина;
		КонецЕсли;
		Если ТекСтрока.ВестиРасчетыПоДокументам Тогда
			ВестиРасчетыПоДокументам = Истина;
		КонецЕсли;
		Если ТекСтрока.ВестиРасчетыПоЗаказам Тогда
			ВестиРасчетыПоЗаказам = Истина;
		КонецЕсли;
		Если ТекСтрока.ВестиУчетОплатыПоСчетам Тогда
			ВестиУчетОплатыПоСчетам = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТабличнойЧасти = "РасчетыСПоставщиками" Тогда
		Элементы.РасчетыСПоставщикамиДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.РасчетыСПоставщикамиДокумент.Видимость = ВестиРасчетыПоДокументам;
		Элементы.РасчетыСПоставщикамиЗаказПоставщику.Видимость = ВестиРасчетыПоЗаказам;
		Элементы.РасчетыСПоставщикамиСчетНаОплату.Видимость = ВестиУчетОплатыПоСчетам;
	ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
		Элементы.РасчетыСПокупателямиДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.РасчетыСПокупателямиДокумент.Видимость = ВестиРасчетыПоДокументам;
		Элементы.РасчетыСПокупателямиЗаказПокупателя.Видимость = ВестиРасчетыПоЗаказам;
		Элементы.РасчетыСПокупателямиСчетНаОплату.Видимость = ВестиУчетОплатыПоСчетам;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПереданные" Тогда
		Элементы.ЗапасыПереданныеДоговор.Видимость = ВестиРасчетыПоДоговорам;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		Элементы.ЗапасыПринятыеДоговор.Видимость = ВестиРасчетыПоДоговорам;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьРеквизитовРасчетов()

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(КоллекцияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	Таблица.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаКонтрагента
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаКонтрагента.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам
	|ИЗ
	|	ТаблицаКонтрагента КАК ТаблицаКонтрагента";
	
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( ,"НомерСтроки, Контрагент"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Сч = 0 По КоллекцияДанных.Количество() - 1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Сч], Выборка, "ВестиРасчетыПоДоговорам, ВестиРасчетыПоДокументам, ВестиРасчетыПоЗаказам, ВестиУчетОплатыПоСчетам");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                    - сумма в валюте, которую следует пересчитать.
//	Валюта    - Справочник.Ссылка.Валюты - валюте, из которой следует пересчитать.
// 	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте упр. учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВВалютуУчета(СуммаВал, Валюта, ДатаКурса) Экспорт

    Сумма = 0;

	Если ЗначениеЗаполнено(Валюта) Тогда

		ВалютаУчета = Константы.ВалютаУчета.Получить();

		СтруктураКурсовВалют = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(Валюта, ВалютаУчета, ДатаКурса);

		Сумма = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(СуммаВал,
	                                                           СтруктураКурсовВалют.КурсНач,
	                                                           СтруктураКурсовВалют.Курс,
	                                                           СтруктураКурсовВалют.КратностьНач,
	                                                           СтруктураКурсовВалют.Кратность);

	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчитатьИзВалют()

&НаСервере
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство()
	
	// Производство.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
		
		// Установка способа выбора структурной единицы в зависимости от ФО.
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Элементы.ЗапасыСтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
			Если ЗначениеЗаполнено(ОсновнойСклад) Тогда
				Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(ОсновнойСклад);
			КонецЕсли;
			Элементы.ЗапасыСтруктурнаяЕдиница.СписокВыбора.Добавить(ОсновноеПодразделение);
			
		КонецЕсли;
		
	Иначе
		
		Если Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
			МассивТипыСтруктурныхЕдиниц = Новый ФиксированныйМассив(НовыйМассив);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивТипыСтруктурныхЕдиниц);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы.ЗапасыСтруктурнаяЕдиница.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			Элементы.ЗапасыСтруктурнаяЕдиница.Видимость = Ложь;
			
		КонецЕсли;
		
		Элементы.ГруппаПрямыеЗатраты.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводство()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации, ИмяТабличнойЧасти)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации, ИмяТабличнойЧасти);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ПодключаемоеОборудование

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные, ИмяТабличнойЧасти = "Запасы")
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	ИмяТекущейСтраницы = Элементы.ГруппаЗапасыСтраницы.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "ГруппаЗапасыСклад" Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаЗапасыПереданные" Тогда
		ИмяТабличнойЧасти = "ЗапасыПереданные";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаЗапасыПринятые" Тогда
		ИмяТабличнойЧасти = "ЗапасыПринятые";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаЗапасыВРазрезеГТД" Тогда
		ИмяТабличнойЧасти = "ЗапасыВРазрезеГТД";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;

	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные, ИмяТабличнойЧасти);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
				НоваяСтрока.Номенклатура	= ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика	= ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия			= ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество		= ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения= ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				Если НоваяСтрока.Свойство("СтруктурнаяЕдиница") Тогда
					НоваяСтрока.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
				КонецЕсли;
				Если НоваяСтрока.Свойство("СтранаПроисхождения") Тогда
					НоваяСтрока.СтранаПроисхождения = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтранаПроисхождения;
				КонецЕсли;
				Если НоваяСтрока.Свойство("Сумма") Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				КонецЕсли;
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			Иначе
				
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Если НоваяСтрока.Свойство("Сумма") Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				КонецЕсли;
				Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
			Если ИмяТабличнойЧасти="Запасы" Тогда
				Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
					РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

#КонецОбласти

#Область Эквайринг

&НаКлиенте
Процедура РасчетыПоЭквайрингуСуммаВалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 Объект.Дата);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(ЭквайринговыйТерминал)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаДенежныхСредств",
		ЭквайринговыйТерминал.БанковскийСчетЭквайринг.ВалютаДенежныхСредств
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура РасчетыПоЭквайрингуКомиссияВалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоЭквайрингуЭквайринговыйТерминалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.РасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 Объект.Дата);

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 Объект.Дата);

КонецПроцедуры

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор)
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаКлиенте
Процедура ЗагрузитьДанныеИзВнешнегоИсточникаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзВнешнегоИсточникаРасчетыСПокупателями(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзВнешнегоИсточникаРасчетыСПоставщиками(Команда)
	
	НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		ПолноеИмяОбъектаЗаполнения = ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения;
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			Если ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы" Тогда
				
				ОбработатьПодготовленныеДанныеЗапасы(РезультатЗагрузки);
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПокупателями(РезультатЗагрузки);
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПоставщиками(РезультатЗагрузки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасы(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВводНачальныхОстатков, , Нстр("ru ='Запасы: '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПокупателями(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.РасчетыСПокупателями.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Контрагент, Договор, ПризнакАванса, СуммаВал, Сумма", );
				
				СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Объект.Организация, "РасчетыСПокупателями");
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					
					НоваяСтрока.Договор = СтруктураДанные.Договор;
					
				КонецЕсли;
				
				НоваяСтрока.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
				НоваяСтрока.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
				НоваяСтрока.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
				НоваяСтрока.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
				
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал, СтруктураДанные.ВалютаРасчетов, Объект.Дата);
				
				Если НоваяСтрока.ВестиРасчетыПоЗаказам Тогда
					
					НоваяСтрока.ЗаказПокупателя = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиРасчетыПоДокументам Тогда
					
					НоваяСтрока.Документ = СтрокаТаблицы.Документ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиУчетОплатыПоСчетам Тогда
					
					НоваяСтрока.СчетНаОплату = СтрокаТаблицы.Счет;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВводНачальныхОстатков, , Нстр("ru ='Расчеты с покупателями: '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПоставщиками(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект.РасчетыСПоставщиками.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Контрагент, Договор, ПризнакАванса, СуммаВал, Сумма", );
				
				СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Объект.Организация, "РасчетыСПоставщиками");
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					
					НоваяСтрока.Договор = СтруктураДанные.Договор;
					
				КонецЕсли;
				
				НоваяСтрока.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
				НоваяСтрока.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
				НоваяСтрока.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
				НоваяСтрока.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
				
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал, СтруктураДанные.ВалютаРасчетов, Объект.Дата);
				
				Если НоваяСтрока.ВестиРасчетыПоЗаказам Тогда
					
					НоваяСтрока.ЗаказПоставщику = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиРасчетыПоДокументам Тогда
					
					НоваяСтрока.Документ = СтрокаТаблицы.Документ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиУчетОплатыПоСчетам Тогда
					
					НоваяСтрока.СчетНаОплату = СтрокаТаблицы.Счет;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ВводНачальныхОстатков, , Нстр("ru ='Расчеты с покупателями: '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
