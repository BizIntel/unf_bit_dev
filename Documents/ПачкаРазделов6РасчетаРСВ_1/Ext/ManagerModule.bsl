#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования файлов.

Процедура ОбработкаФормированияФайла(Объект) Экспорт
	Возврат;	
КонецПроцедуры


Функция СформироватьФайлРасчета6(Объект, ИмяФайла)Экспорт
	
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить(Объект);
	
	ФайлыДокументов = ФайлыДокументов(СписокДокументов, ТекущаяДатаСеанса());
	
	Результат = ФайлыДокументов.Получить(Объект);
	Если Результат = Неопределено Тогда
		Возврат "";
	Иначе
		ИмяФайла =  Результат.ИмяФайла;
		
		Возврат Результат.ТекстФайла;
	КонецЕсли;
	
КонецФункции


Функция ФайлыДокументов(СписокДокументов, ДатаПодписи) Экспорт
	Результаты = Новый Соответствие;
		
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДляПечати(СписокДокументов).Выбрать();
	
	ВыборкаПоРаботникам = СформироватьЗапросПоСотрудникамДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоДоходам = СформироватьЗапросПоЗаработкуДляПечати(СписокДокументов).Выбрать();
	ВыборкаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах = СформироватьЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(СписокДокументов).Выбрать();
		
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР70_2010XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = СправкиПоНДФЛ.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);

	ТипДокументовПачки = "СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";
	
	ФорматВходящейОписи = СправкиПоНДФЛ.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "Опись_Разделов_6");
	ФорматВходящейОписи.НомерВПачке.Значение = 1;
	ФорматРаздела6 = СправкиПоНДФЛ.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "Раздел_6");
	ФорматЗаписейСуммаВыплат = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматРаздела6.СведенияОсуммеВыплатИвознагражденийВпользуЗЛ.Значение);
	ФорматРаздела6.Удалить("СведенияОсуммеВыплатИвознагражденийВпользуЗЛ");
	ФорматСуммаВзносовНаОПС = Новый Структура("СуммаВзносовНаОПС", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматРаздела6.СуммаВзносовНаОПС));
	ФорматРаздела6.Удалить("СуммаВзносовНаОПС");
	ФорматЗаписейОкорректировках = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматРаздела6.СведенияОкорректировках.Значение);
	ФорматРаздела6.Удалить("СведенияОкорректировках");
	ФорматЗаписейВыплатПоДопТарифу = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматРаздела6.СведенияОсуммеВыплатИвознагражденийПоДопТарифу.Значение);
	ФорматРаздела6.Удалить("СведенияОсуммеВыплатИвознагражденийПоДопТарифу");
	ФорматСтажевыйПериод = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматРаздела6.СтажевыйПериод.Значение);
	ФорматРаздела6.Удалить("СтажевыйПериод");
	ФорматДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматРаздела6.ДатаЗаполнения));
	ФорматРаздела6.Удалить("ДатаЗаполнения");
	
	ФорматДатаЗаполнения.ДатаЗаполнения.Значение = ДатаПодписи;
	
	ВыборкаПоКорректирующимСведениям = СформироватьЗапросПоКорректирующимСведениям(СписокДокументов).Выбрать();

	ИменаПолейДоходов = Новый Массив();
	ИменаПолейДоходов.Добавить("ТипСтроки");
	ИменаПолейДоходов.Добавить("Месяц");
	ИменаПолейДоходов.Добавить("КодКатегории");
	ИменаПолейДоходов.Добавить("СуммаВыплатИныхВознаграждений");
	ИменаПолейДоходов.Добавить("НеПревышающиеВсего");
	ИменаПолейДоходов.Добавить("НеПревышающиеПоДоговорам");
	ИменаПолейДоходов.Добавить("ПревышающиеПредельную");
	ИменаПолейДоходовПоДопТарифу = Новый Массив();
	ИменаПолейДоходовПоДопТарифу.Добавить("ТипСтроки");
	ИменаПолейДоходовПоДопТарифу.Добавить("Месяц");
	ИменаПолейДоходовПоДопТарифу.Добавить("КодСпециальнойОценкиУсловийТруда");
	ИменаПолейДоходовПоДопТарифу.Добавить("СуммаВыплатПоДопТарифу27_1");
	ИменаПолейДоходовПоДопТарифу.Добавить("СуммаВыплатПоДопТарифу27_2_18");
	
		
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоДоходам.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах.СледующийПоЗначениюПоля("Ссылка");
		
		
		// Создаем начальное дерево
		ДеревоВыгрузки = СправкиПоНДФЛ.СоздатьДеревоXML();
		УзелПФР = ПерсонифицированныйУчет.УзелФайлаПФР(ДеревоВыгрузки);
		ИмяФайла = ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР;
		УчетСтраховыхВзносов.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, ДеревоФормата, ИмяФайла);
		УзелПачкаВходящихДокументов = СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		НаборЗаписейВходящаяОпись = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматВходящейОписи);
		НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = Формат(ВыборкаПоШапкеДокумента.НомерПачки, "ЧГ="); 
		НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ДатаПодписи;
		УчетСтраховыхВзносов.ЗаполнитьСоставительПачки(НаборЗаписейВходящаяОпись.СоставительПачки.Значение, ВыборкаПоШапкеДокумента); // ОрганизацияЮрФизЛицо, ОрганизацияИНН, ОрганизацияКПП, ОрганизацияОГРН, ОрганизацияНаименованиеОКОПФ, ОрганизацияНаименованиеПолное, ОрганизацияНаименованиеСокращенное
		// заполним состав документов
		НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
		НаборЗаписейСоставДокументов.Количество.Значение = 1;
		НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
		НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокументовПачки;
		НаборЗаписейНаличиеДокументов.Количество = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;

		НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.ОтчетныйПериод.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод, УчетСтраховыхВзносов.ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			НаборЗаписейВходящаяОпись.Удалить("КорректируемыйОтчетныйПериод");
		Иначе
			НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.КорректируемыйОтчетныйПериод.Значение;
			ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод, УчетСтраховыхВзносов.ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.КорректируемыйПериод));
		КонецЕсли;
		НаборЗаписейВходящаяОпись.БазаДляНачисленияСтраховыхВзносовНеПревышающаяПредельную.Значение = ВыборкаПоШапкеДокумента.БазаНеПревышающаяПредельную;
		НаборЗаписейВходящаяОпись.СтраховыхВзносовОПС.Значение = ВыборкаПоШапкеДокумента.НачисленоСтраховая;
		
		ДанныеВходящейОписи = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(НаборЗаписейВходящаяОпись);
		
		СправкиПоНДФЛ.ДобавитьИнформациюВДерево(СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "СВЕДЕНИЯ_ПО_ПАЧКЕ_ДОКУМЕНТОВ_РАЗДЕЛА_6",""), НаборЗаписейВходящаяОпись);
		
		НаборЗаписейПачки = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматРаздела6);
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
			НаборЗаписейПачки.Удалить("СведенияОсуммеВыплатИвознагражденийВпользуЗЛ");
			НаборЗаписейПачки.Удалить("СуммаВзносовНаОПС");
			НаборЗаписейПачки.Удалить("СведенияОкорректировках");
			НаборЗаписейПачки.Удалить("СведенияОсуммеВыплатИвознагражденийПоДопТарифу");
			НаборЗаписейПачки.Удалить("СтажевыйПериод");
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			НаборЗаписейПачки.Удалить("КорректируемыйОтчетныйПериод");
			НаборЗаписейПачки.Удалить("РегистрационныйНомерКорректируемогоПериода");
		КонецЕсли;

		Если ВыборкаПоРаботникам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка)) Тогда
				
			НомерДокументаВПачке = 1;
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") цикл
				ВыборкаПоДоходам.СледующийПоЗначениюПоля("НомерСтрокиСотрудник");
				ВыборкаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах.СледующийПоЗначениюПоля("НомерСтрокиСотрудник");
				
				СтруктураПоиска = Новый Структура("Ссылка, Сотрудник");
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);								
				
				НаборЗаписейРаздела6 = НаборЗаписейПачки; 
				
				// Общие данные пачки - берем их из описи
				НаборЗаписейРаздела6.ТипСведений.Значение = ДанныеВходящейОписи.ТипСведений.Значение;
				НаборЗаписейРаздела6.РегистрационныйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.РегистрационныйНомер.Значение;
				ЗаполнитьЗначенияСвойств(НаборЗаписейРаздела6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.ОтчетныйПериод.Значение);
				Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписейРаздела6.КорректируемыйОтчетныйПериод.Значение, ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
					Если ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФРвКорректируемыйПериод,"-","")) Тогда
						НаборЗаписейРаздела6.РегистрационныйНомерКорректируемогоПериода.Значение = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФРвКорректируемыйПериод;
					Иначе
						НаборЗаписейРаздела6.РегистрационныйНомерКорректируемогоПериода.НеВыводитьВФайл = Истина;
					КонецЕсли;
				КонецЕсли;
				
				// Данные по физлицу
				НомерДокументаВПачке = НомерДокументаВПачке + 1;
				
				Фамилия = СокрЛП(ВыборкаПоРаботникам.Фамилия);
				Имя = СокрЛП(ВыборкаПоРаботникам.Имя);
				Отчество = СокрЛП(ВыборкаПоРаботникам.Отчество);
				
				НаборЗаписейРаздела6.НомерВПачке.Значение = НомерДокументаВПачке;
				НаборЗаписейРаздела6.СтраховойНомер.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
				НаборЗаписейФИО = НаборЗаписейРаздела6.ФИО.Значение;
				НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
				НаборЗаписейФИО.Имя = ВРег(Имя);
				НаборЗаписейФИО.Отчество = ВРег(Отчество);
					
				ФорматДатаЗаполнения.ДатаЗаполнения.Значение = ДатаПодписи;

				Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда // заполнение отменяющей формы завершено
					
					УзелСотрудника = СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
					СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейРаздела6);
					
					// Выводим ДатаЗаполнения
					СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелСотрудника, ФорматДатаЗаполнения);
					Продолжить;
					
				КонецЕсли;
				
				УзелСотрудника = СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
				СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейРаздела6);
				
				//СведенияОЗаработке
				ВывестиДоходыВФайл(УзелСотрудника, ФорматЗаписейСуммаВыплат,  "СведенияОсуммеВыплатИвознагражденийВпользуЗЛ", ВыборкаПоШапкеДокумента.ОтчетныйПериод, ВыборкаПоДоходам, "КатегорияЗастрахованныхЛиц", "4", ИменаПолейДоходов);
				
				// Выводим взносы
				ФорматСуммаВзносовНаОПС.СуммаВзносовНаОПС.Значение = ВыборкаПоРаботникам.НачисленоСтраховая;
				СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелСотрудника, ФорматСуммаВзносовНаОПС);
				
				//Корр.сведения
				Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
					ВыборкаПоКорректирующимСведениям.Сбросить();
					Если ВыборкаПоКорректирующимСведениям.НайтиСледующий(СтруктураПоиска) Тогда
						ВыборкаПоКорректирующимСведениям.СледующийПоЗначениюПоля("Ссылка");
						ВыборкаПоКорректирующимСведениям.СледующийПоЗначениюПоля("Сотрудник");
	
						ДоначисленоНаОПС = 0;
						ДоначисленоСтраховая = 0;
						ДоначисленоНакопительная = 0;
						НомерСтроки = 1;
						
						Пока ВыборкаПоКорректирующимСведениям.Следующий() Цикл
							
							ДанныеДляФайла = ФорматЗаписейОкорректировках;
							Если ВыборкаПоКорректирующимСведениям.КорректируемыйПериод < '20140101' Тогда
								ДанныеДляФайла.СуммаДоначисленныхВзносовОПС.НеВыводитьВФайл = Истина;
								ДанныеДляФайла.СуммаДоначисленныхВзносовНаСтраховую.Значение = ВыборкаПоКорректирующимСведениям.ДоначисленоСтраховая;
								ДанныеДляФайла.СуммаДоначисленныхВзносовНаНакопительную.Значение = ВыборкаПоКорректирующимСведениям.ДоначисленоНакопительная;
							Иначе
								ДанныеДляФайла.СуммаДоначисленныхВзносовНаСтраховую.НеВыводитьВФайл = Истина;
								ДанныеДляФайла.СуммаДоначисленныхВзносовНаНакопительную.НеВыводитьВФайл = Истина;
								ДанныеДляФайла.СуммаДоначисленныхВзносовОПС.Значение = ВыборкаПоКорректирующимСведениям.ДоначисленоНаОПС;
							КонецЕсли;
							
							ДанныеДляФайла.Год.Значение = ВыборкаПоКорректирующимСведениям.КорректируемыйГод;
							ДанныеДляФайла.Квартал.Значение = "";
							ДанныеДляФайла.ТипСтроки.Значение = "МЕСЦ";
							ДанныеДляФайла.НомерСтроки.Значение = НомерСтроки;
							
							СправкиПоНДФЛ.ДобавитьИнформациюВДерево(СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(УзелСотрудника, "СведенияОкорректировках",""), ДанныеДляФайла);
							НомерСтроки = НомерСтроки + 1;
							
							ДоначисленоНаОПС = ДоначисленоНаОПС + ВыборкаПоКорректирующимСведениям.ДоначисленоНаОПС;
							ДоначисленоСтраховая = ДоначисленоСтраховая + ВыборкаПоКорректирующимСведениям.ДоначисленоСтраховая;
							ДоначисленоНакопительная = ДоначисленоНакопительная + ВыборкаПоКорректирующимСведениям.ДоначисленоНакопительная;
														
						КонецЦикла;
						
						ДанныеДляФайла = ФорматЗаписейОкорректировках;
						ДанныеДляФайла.Квартал.НеВыводитьВФайл = Истина;
						ДанныеДляФайла.Год.НеВыводитьВФайл = Истина;
						ДанныеДляФайла.ТипСтроки.Значение = "ИТОГ";
						ДанныеДляФайла.НомерСтроки.Значение = НомерСтроки;
						ДанныеДляФайла.СуммаДоначисленныхВзносовОПС.Значение = ДоначисленоНаОПС;
						ДанныеДляФайла.СуммаДоначисленныхВзносовНаСтраховую.Значение = ДоначисленоСтраховая;
						ДанныеДляФайла.СуммаДоначисленныхВзносовНаНакопительную.Значение = ДоначисленоНакопительная;
						СправкиПоНДФЛ.ДобавитьИнформациюВДерево(СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(УзелСотрудника, "СведенияОкорректировках",""), ДанныеДляФайла);
						
					КонецЕсли;
				КонецЕсли;
				
				//СведенияОЗаработкеНаВредныхИТяжелыхРаботах
				ВывестиДоходыВФайл(УзелСотрудника, ФорматЗаписейВыплатПоДопТарифу, "СведенияОсуммеВыплатИвознагражденийПоДопТарифу", ВыборкаПоШапкеДокумента.ОтчетныйПериод, ВыборкаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах, "КлассУсловийТруда", "7", ИменаПолейДоходовПоДопТарифу);
				
				// Выводим стаж
				УчетСтраховыхВзносов.ВписатьЗаписиОСтажеВНаборДанных2014(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам);
				
				// Выводим ДатаЗаполнения
				СправкиПоНДФЛ.ДобавитьИнформациюВДерево(УзелСотрудника, ФорматДатаЗаполнения);
				
			КонецЦикла; // по сотрудникам
		
		КонецЕсли;
		
		ТекстФайла = УчетСтраховыхВзносов.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
		ТекстФайла = СтрЗаменить(СтрЗаменить(ТекстФайла, "СуммаВыплатПоДопТарифу27_1", "СуммаВыплатПоДопТарифу27-1"), "СуммаВыплатПоДопТарифу27_2_18", "СуммаВыплатПоДопТарифу27-2-18");
		
		ОписаниеФайла = Новый Структура("ТекстФайла, ИмяФайла", ТекстФайла, ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР);
		
		Результаты.Вставить(ВыборкаПоШапкеДокумента.Ссылка, ОписаниеФайла);
	КонецЦикла;
		
	Возврат Результаты;
	
КонецФункции 

Процедура ВывестиДоходыВФайл(УзелСотрудника, НаборЗаписейВыплат, Тэг, ОтчетныйПериод, Данные, ИмяПоляГруппировки, ПерваяЦифраКодаСтроки, ИменаПолей)
	
	Если Данные.ЗаработокЗаполнен Тогда
		ВтораяЦифраКода = 0;
		НомерСтроки = 1;
		Пока Данные.СледующийПоЗначениюПоля(ИмяПоляГруппировки) Цикл
			ДанныеДляФайла = НаборЗаписейВыплат;			
			Пока Данные.Следующий() Цикл
				ДанныеДляФайла = НаборЗаписейВыплат;
				Для каждого ИмяПоля Из ИменаПолей Цикл
					ДанныеДляФайла[ИмяПоля].Значение = Данные[ИмяПоля]
				КонецЦикла;
				Если Данные.Месяц = 0 Тогда
					ДанныеДляФайла.Месяц.НеВыводитьВФайл = Истина;
					МесяцПериода = 0
				Иначе
					МесяцПериода = Данные.Месяц - Месяц(ОтчетныйПериод) + 1;
				КонецЕсли;
				ДанныеДляФайла.КодСтроки.Значение = ПерваяЦифраКодаСтроки + ВтораяЦифраКода + "" + МесяцПериода;
				ДанныеДляФайла.НомерСтроки.Значение = НомерСтроки;
				СправкиПоНДФЛ.ДобавитьИнформациюВДерево(СправкиПоНДФЛ.ДобавитьУзелВДеревоXML(УзелСотрудника, Тэг,""), ДанныеДляФайла);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
			ВтораяЦифраКода = ВтораяЦифраКода + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции печати.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ФормаРаздел6";
	КомандаПечати.Представление = НСтр("ru = 'Раздел 6'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ФормаРаздел6") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ФормаРаздел6", "'Раздел 6", СформироватьПечатнуюФормуРаздела6РСВ_1(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоШапкеДляПечати(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.ПачкаРазделов6РасчетаРСВ_1";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "ОкончаниеОтчетногоПериода";
	ОписаниеИсточникаДанных.СписокСсылок = МассивСсылок;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	КОЛИЧЕСТВО(ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.НомерСтроки) КАК Количество,
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработке КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка В(&МассивСсылок)
	|	И ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1.Ссылка КАК Ссылка,
	|	ПачкаРазделов6РасчетаРСВ_1.Организация,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганиазции,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ОрганизацияЮрФизЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1.ОтчетныйПериод,
	|	ПачкаРазделов6РасчетаРСВ_1.ОкончаниеОтчетногоПериода,
	|	ПачкаРазделов6РасчетаРСВ_1.ТипСведенийСЗВ,
	|	ПачкаРазделов6РасчетаРСВ_1.КорректируемыйПериод,
	|	ПачкаРазделов6РасчетаРСВ_1.Руководитель КАК Руководитель,
	|	ПачкаРазделов6РасчетаРСВ_1.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ПачкаРазделов6РасчетаРСВ_1.Дата,
	|	ПачкаРазделов6РасчетаРСВ_1.НомерПачки,
	|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР,
	|	ПачкаРазделов6РасчетаРСВ_1.РегистрационныйНомерПФРвКорректируемыйПериод,
	|	ИтогиПоВзносам.НачисленоСтраховая КАК НачисленоСтраховая,
	|	ИтогиПоВзносам.Количество КАК КоличествоЗастрахованныхЛиц,
	|	ЕСТЬNULL(Доходы.ОблагаетсяВзносамиДоПредельнойВеличины, 0) КАК БазаНеПревышающаяПредельную,
	|	ПачкаРазделов6РасчетаРСВ_1.ИмяФайлаДляПФР
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ПачкаРазделов6РасчетаРСВ_1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО ПачкаРазделов6РасчетаРСВ_1.Организация = СведенияОбОрганизациях.Организация
	|			И ПачкаРазделов6РасчетаРСВ_1.ОкончаниеОтчетногоПериода = СведенияОбОрганизациях.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК ИтогиПоВзносам
	|		ПО ПачкаРазделов6РасчетаРСВ_1.Ссылка = ИтогиПоВзносам.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходы КАК Доходы
	|		ПО ПачкаРазделов6РасчетаРСВ_1.Ссылка = Доходы.Ссылка
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	УчетСтраховыхВзносов.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1.Ссылка КАК Ссылка,
	|	ПачкаРазделов6РасчетаРСВ_1.РегистрационныйНомерПФР КАК ОрганизацияРегистрационныйНомерПФР,
	|	ПачкаРазделов6РасчетаРСВ_1.НаименованиеОрганиазции КАК ОрганизацияНаименование,
	|	ПачкаРазделов6РасчетаРСВ_1.ОрганизацияЮрФизЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1.ИНН КАК ОрганизацияИНН,
	|	ПачкаРазделов6РасчетаРСВ_1.КПП КАК ОрганизацияКПП,
	|	ПачкаРазделов6РасчетаРСВ_1.ОГРН КАК ОрганизацияОГРН,
	|	ПачкаРазделов6РасчетаРСВ_1.КодПоОКПО КАК ОрганизацияКодПоОКПО,
	|	ПачкаРазделов6РасчетаРСВ_1.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПачкаРазделов6РасчетаРСВ_1.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
	|	ПачкаРазделов6РасчетаРСВ_1.ОтчетныйПериод,
	|	ПачкаРазделов6РасчетаРСВ_1.ТипСведенийСЗВ,
	|	ПачкаРазделов6РасчетаРСВ_1.КорректируемыйПериод,
	|	ЕСТЬNULL(ВТФИОПоследние.Фамилия, """") + "" "" + ЕСТЬNULL(ВТФИОПоследние.Имя, """") + "" "" + ЕСТЬNULL(ВТФИОПоследние.Отчество, """") КАК Руководитель,
	|	ПачкаРазделов6РасчетаРСВ_1.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ПачкаРазделов6РасчетаРСВ_1.Дата,
	|	ПачкаРазделов6РасчетаРСВ_1.НомерПачки,
	|	ПачкаРазделов6РасчетаРСВ_1.НачисленоСтраховая,
	|	ПачкаРазделов6РасчетаРСВ_1.БазаНеПревышающаяПредельную,
	|	ПачкаРазделов6РасчетаРСВ_1.РегистрационныйНомерПФРвКорректируемыйПериод,
	|	ПачкаРазделов6РасчетаРСВ_1.КоличествоЗастрахованныхЛиц,
	|	ПачкаРазделов6РасчетаРСВ_1.ИмяФайлаДляПФР
	|ИЗ
	|	ВТДанныеДокументов КАК ПачкаРазделов6РасчетаРСВ_1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОПоследние
	|		ПО ПачкаРазделов6РасчетаРСВ_1.Ссылка = ВТФИОПоследние.Ссылка
	|			И ПачкаРазделов6РасчетаРСВ_1.Руководитель = ВТФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросПоСотрудникамДляПечати(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.НомерСтроки КАК НомерСтроки,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.СтраховойНомерПФР,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Фамилия,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Имя,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Отчество,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.НачисленоСтраховая,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ДоначисленоСтраховая,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	"""" КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	"""" КАК ОсобыеУсловияТрудаКод,
	|	"""" КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	"""" КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	"""" КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.НомерСтроки КАК НомерСтроки,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.СтраховойНомерПФР,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Фамилия,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Имя,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Отчество,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.НачисленоСтраховая,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ДоначисленоСтраховая,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСтаж,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажаКод
	|ИЗ
	|	ВТСотрудникиДокумента КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка = ЗаписиОСтаже.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросПоЗаработкуДляПечати(МассивОбъектов)
	
	ТаблицаКодовКатегорий = Новый ТаблицаЗначений;
	ТаблицаКодовКатегорий.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(10)));
	ТаблицаКодовКатегорий.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗастрахованныхЛицДляПФР"));
	Для каждого Элемент Из Перечисления.КатегорииЗастрахованныхЛицДляПФР Цикл
		НоваяСтрока = ТаблицаКодовКатегорий.Добавить();
		НоваяСтрока.Код = ОбщегоНазначения.ИмяЗначенияПеречисления(Элемент);                            
		НоваяСтрока.Категория = Элемент;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТаблицаКодовКатегорий",	ТаблицаКодовКатегорий);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКодовКатегорий.Код КАК КодКатегории,
	|	ТаблицаКодовКатегорий.Категория
	|ПОМЕСТИТЬ ВТКодыКатегорий
	|ИЗ
	|	&ТаблицаКодовКатегорий КАК ТаблицаКодовКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц КАК Месяц,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Заработок) КАК Заработок,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины) КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	КодыКатегорий.КодКатегории,
	|	ВЫБОР
	|		КОГДА ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц = 0
	|			ТОГДА ""ИТОГ""
	|		ИНАЧЕ ""МЕСЦ""
	|	КОНЕЦ КАК ТипСтроки,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Заработок) КАК СуммаВыплатИныхВознаграждений,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины) КАК НеПревышающиеВсего,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины) КАК НеПревышающиеПоДоговорам,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины) КАК ПревышающиеПредельную,
	|	ВЫБОР
	|		КОГДА ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработке КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке
	|		ПО Сотрудники.Ссылка = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорий КАК КодыКатегорий
	|		ПО (ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КатегорияЗастрахованныхЛиц = КодыКатегорий.Категория)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка,
	|	Сотрудники.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	КодыКатегорий.КодКатегории,
	|	Сотрудники.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	КатегорияЗастрахованныхЛиц,
	|	Месяц";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(МассивОбъектов) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц КАК Месяц,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	""""  КАК КодКлассаУсловийТруда,
	|	ВЫБОР
	|		КОГДА ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц = 0
	|			ТОГДА ""ИТОГ""
	|		ИНАЧЕ ""МЕСЦ""
	|	КОНЕЦ КАК ТипСтроки,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) КАК СуммаВыплатПоДопТарифу27_1,
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК СуммаВыплатПоДопТарифу27_2_18,
	|	 """" КАК КодСпециальнойОценкиУсловийТруда,
	|	Сотрудники.НомерСтроки КАК НомерСтрокиСотрудник,
	|	ВЫБОР
	|		КОГДА ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаработокЗаполнен,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КлассУсловийТруда
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработкеНаВредныхИТяжелыхРаботах КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке
	|		ПО Сотрудники.Ссылка = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка
	|			И Сотрудники.Сотрудник = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Ссылка,
	|	Сотрудники.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц,
	|	Сотрудники.НомерСтроки,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КлассУсловийТруда
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтрокиСотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КлассУсловийТруда,
	|	Месяц";
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция СформироватьЗапросПоКорректирующимСведениям(Ссылки, ИсходныйДокумент = Неопределено)  Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.УстановитьПараметр("УсловиеИсходныйДокумент", ИсходныйДокумент);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник
	|ПОМЕСТИТЬ ВТФизлицаИсходныхФорм
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В(&Ссылки)
	|	И &УсловиеИсходныйДокумент
	|	И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Сотрудник,
	|	ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.КорректируемыйПериод,
	|	ПачкаДокументовСЗВ_6_4РаботникиОрганизации.ДоначисленоСтраховая,
	|	ПачкаДокументовСЗВ_6_4РаботникиОрганизации.ДоначисленоНакопительная,
	|	0 КАК ДоначисленоНаОПС
	|ПОМЕСТИТЬ ВТДанныеКорректирующихФорм
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ПачкаДокументовСЗВ_6_4РаботникиОрганизации
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|	И ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Ссылка В(&Ссылки)
	|	И ПачкаДокументовСЗВ_6_4РаботникиОрганизации.Сотрудник В
	|			(ВЫБРАТЬ
	|				ФизлицаИсходныхФорм.Сотрудник
	|			ИЗ
	|				ВТФизлицаИсходныхФорм КАК ФизлицаИсходныхФорм)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|
	|ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Сотрудник,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.КорректируемыйПериод,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоначисленоСтраховая,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ДоначисленоНакопительная,
	|	0
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка В(&Ссылки)
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Сотрудник В
	|			(ВЫБРАТЬ
	|				ФизлицаИсходныхФорм.Сотрудник
	|			ИЗ
	|				ВТФизлицаИсходныхФорм КАК ФизлицаИсходныхФорм)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка.КорректируемыйПериод,
	|	0,
	|	0,
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.ДоначисленоСтраховая
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|	И ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка В(&Ссылки)
	|	И ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Сотрудник В
	|			(ВЫБРАТЬ
	|				ФизлицаИсходныхФорм.Сотрудник
	|			ИЗ
	|				ВТФизлицаИсходныхФорм КАК ФизлицаИсходныхФорм)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизлицаИсходныхФорм.Ссылка КАК Ссылка,
	|	ФизлицаИсходныхФорм.Сотрудник КАК Сотрудник,
	|	ДанныеКорректирующихФорм.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ГОД(ДанныеКорректирующихФорм.КорректируемыйПериод) КАК КорректируемыйГод,
	|	СУММА(ДанныеКорректирующихФорм.ДоначисленоСтраховая) КАК ДоначисленоСтраховая,
	|	СУММА(ДанныеКорректирующихФорм.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
	|	СУММА(ДанныеКорректирующихФорм.ДоначисленоНаОПС) КАК ДоначисленоНаОПС
	|ИЗ
	|	ВТФизлицаИсходныхФорм КАК ФизлицаИсходныхФорм
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеКорректирующихФорм КАК ДанныеКорректирующихФорм
	|		ПО ФизлицаИсходныхФорм.Сотрудник = ДанныеКорректирующихФорм.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизлицаИсходныхФорм.Ссылка,
	|	ФизлицаИсходныхФорм.Сотрудник,
	|	ДанныеКорректирующихФорм.КорректируемыйПериод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	КорректируемыйПериод";
	
	Если ИсходныйДокумент = Неопределено Тогда
		ТекстУсловияИсходныйДокумент = "ИСТИНА";
	Иначе
		ТекстУсловияИсходныйДокумент = "ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка = &УсловиеИсходныйДокумент";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИсходныйДокумент", ТекстУсловияИсходныйДокумент);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТабличныеДокументыРаздела6РСВ_1(МассивОбъектов, ДокументыКомплекта, ОбъектыПечати = Неопределено, НумероватьСтраницы = Ложь, НомерПервойСтраницы = 0, НомерПоследнейСтраницы = 0) Экспорт
	ТаблицаПоДоходам = Документы.ПачкаРазделов6РасчетаРСВ_1.ПустаяСсылка().СведенияОЗаработке.ВыгрузитьКолонки();
	ТаблицаПоДоходам.Колонки.Добавить("КодКатегории", Новый ОписаниеТипов("Строка"));
	ТаблицаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах = Документы.ПачкаРазделов6РасчетаРСВ_1.ПустаяСсылка().СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ВыгрузитьКолонки();
	ТаблицаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах.Колонки.Добавить("КодКлассаУсловийТруда", Новый ОписаниеТипов("Строка"));
	
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоРаботникам = СформироватьЗапросПоСотрудникамДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоДоходам = СформироватьЗапросПоЗаработкуДляПечати(МассивОбъектов).Выбрать();
	ВыборкаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах = СформироватьЗапросПоДоходамЗанятыхНаВредныхИТяжелыхРаботахДляПечати(МассивОбъектов).Выбрать();
	
	Результаты = Новый Массив;
		
	ВыборкаПоКорректирующимСведениям = СформироватьЗапросПоКорректирующимСведениям(ДокументыКомплекта).Выбрать();
	
	Макет = ПолучитьМакет("ФормаРаздел6");
	
	// Рабочие области макета
	ОбластьВерхнийКолонтитул	= Макет.ПолучитьОбласть("ВерхнийКолонтитул");
	ОбластьНижнийКолонтитул		= Макет.ПолучитьОбласть("НижнийКолонтитул");
	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьСведенияОЗаработкеСтрока	= Макет.ПолучитьОбласть("СведенияОЗаработкеСтрока");
	ОбластьВзносов				= Макет.ПолучитьОбласть("Взносы");
	ОбластьКорректирующиеСведенияСтрока	= Макет.ПолучитьОбласть("КорректирующиеСведенияСтрока");
	ОбластьКорректирующиеСведенияИтого	= Макет.ПолучитьОбласть("КорректирующиеСведенияИтого");
	ОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботахЗаголовок	= Макет.ПолучитьОбласть("СведенияОЗаработкеНаВредныхИТяжелыхРаботахЗаголовок");
	ОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботахСтрока	= Макет.ПолучитьОбласть("СведенияОЗаработкеНаВредныхИТяжелыхРаботахСтрока");
	ОбластьПустаяСтрока	= Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьВредниковПустая = Макет.ПолучитьОбласть("ОбластьВредниковПустая");
	ОбластьВредниковПустая2Часть = Макет.ПолучитьОбласть("ОбластьВредниковПустая2Часть");
	
	ОбластьЗаработокПустая = Макет.ПолучитьОбласть("ОбластьЗаработокПустая");
	ОбластьЗаработокПустая2Часть = Макет.ПолучитьОбласть("ОбластьЗаработокПустая2Часть");

	ОбластьСтажНачало			= Макет.ПолучитьОбласть("СтажНачало");
	ОбластьСтаж					= Макет.ПолучитьОбласть("Стаж");
	
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
	ВыводимыеОбласти.Добавить(ОбластьНижнийКолонтитул);
	ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
	ТекущийНомерСтраницы = НомерПервойСтраницы;
	
	СтруктураПоиска = Новый Структура("Сотрудник, Ссылка");
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		ДокументРезультат = Новый ТабличныйДокумент;
		
		Если НумероватьСтраницы Тогда
			ТекущийЛист = Новый ТабличныйДокумент;
		Иначе
			ТекущийЛист = Неопределено;
		КонецЕсли;	
		
		Справочники.КомплектыОтчетностиПерсучета.ДобавитьТабличныйДокументВКоллекциюПечатуемыхОбъектов(Результаты, ДокументРезультат, ВыборкаПоШапкеДокумента);
		
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПачкаРазделов6РасчетаРСВ_1";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР," ","");
		РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьВерхнийКолонтитул, "НомРег", 12);
		
		ИнформацияОПачке = Новый Структура;
		ИнформацияОПачке.Вставить("КодОтчетногоПериода", Месяц(КонецКвартала(ВыборкаПоШапкеДокумента.ОтчетныйПериод))%12);
		ИнформацияОПачке.Вставить("ЭтоИсходныйДокумент", ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
		ИнформацияОПачке.Вставить("ЭтоКорректирующийДокумент", ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ);
		ИнформацияОПачке.Вставить("ЭтоОтменяющийДокумент", ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ);
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			ИнформацияОПачке.Вставить("КодКорректируемогоПериода", Месяц(КонецКвартала(ВыборкаПоШапкеДокумента.КорректируемыйПериод))%12);
		КонецЕсли;
		
		ОбластьШапка.Параметры.Заполнить(ИнформацияОПачке);
		ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод),"ЧГ=0"), ОбластьШапка, "ОтчетныйГод", 4);
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФРвКорректируемыйПериод," ","");
			РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
			ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "РегистрационныйНомерПФРвКорректируемыйПериод", 12);
			ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(Формат(Год(ВыборкаПоШапкеДокумента.КорректируемыйПериод),"ЧГ=0"), ОбластьШапка, "КорректируемыйГод", 4);
			
			ПериодДанных = ВыборкаПоШапкеДокумента.КорректируемыйПериод;
		Иначе
			ПериодДанных = ВыборкаПоШапкеДокумента.ОтчетныйПериод;	
		КонецЕсли;
		
		ОбластьНижнийКолонтитул.Параметры.ДатаПодписиПолная = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=dd.MM.yyyy; ДП=' '");
		
		ВыборкаПоРаботникам.Сбросить();
		Если ВыборкаПоРаботникам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка)) Тогда
			ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Ссылка");
			ВыборкаПоДоходам.СледующийПоЗначениюПоля("Ссылка");
			ВыборкаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах.СледующийПоЗначениюПоля("Ссылка");

			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				ВыборкаПоДоходам.СледующийПоЗначениюПоля("НомерСтрокиСотрудник");
				ВыборкаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах.СледующийПоЗначениюПоля("НомерСтрокиСотрудник");
									
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоРаботникам);
				
				ОчиститьОбластьСтаж(ОбластьСтаж);
				ОчиститьОбластьСведенияОЗаработке(ОбластьСведенияОЗаработкеСтрока);
				ОчиститьОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботах(ОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботахСтрока);
				ОчиститьОбластьКорректирующиеСведения(ОбластьКорректирующиеСведенияСтрока);
				ОчиститьОбластьКорректирующиеСведенияИтого(ОбластьКорректирующиеСведенияИтого);
				 									
				ПерсонифицированныйУчет.ПроставитьНомерСтраницыВЯчейках(НумероватьСтраницы, ТекущийНомерСтраницы, ОбластьВерхнийКолонтитул);
				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьВерхнийКолонтитул);
				ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
				
				// Данные по физлицу
				ОбластьШапка.Параметры.Заполнить(ВыборкаПоРаботникам);
				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьШапка);
				
				ВывестиОбластьСведенияОЗаработке(
					ДокументРезультат, 
					ТекущийЛист,
					ОбластьСведенияОЗаработкеСтрока, 
					ВыборкаПоДоходам, 
					ВыборкаПоРаботникам.Ссылка,  
					ВыборкаПоРаботникам.Сотрудник, 
					ПериодДанных, 
					"КатегорияЗастрахованныхЛиц", 
					ТаблицаПоДоходам,
					ОбластьЗаработокПустая,
					ОбластьЗаработокПустая2Часть);
				
				ОбластьВзносов.Параметры.НачисленоСтраховаяРубли = Цел(ВыборкаПоРаботникам.НачисленоСтраховая);
				ДробнаяЧасть = ВыборкаПоРаботникам.НачисленоСтраховая - Цел(ВыборкаПоРаботникам.НачисленоСтраховая);
				ОбластьВзносов.Параметры.НачисленоСтраховаяКопейки = ДробнаяЧасть * 100; 
				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьВзносов);
				
				Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
					ВыборкаПоКорректирующимСведениям.Сбросить();
					Если ВыборкаПоКорректирующимСведениям.НайтиСледующий(СтруктураПоиска) Тогда
						ВыборкаПоКорректирующимСведениям.СледующийПоЗначениюПоля("Ссылка");
						ВыборкаПоКорректирующимСведениям.СледующийПоЗначениюПоля("Сотрудник");
						
						ДоначисленоНаОПС = 0;
						ДоначисленоСтраховая = 0;
						ДоначисленоНакопительная = 0;
						Пока ВыборкаПоКорректирующимСведениям.Следующий() Цикл
							ДоначисленоНаОПС = ДоначисленоНаОПС + ВыборкаПоКорректирующимСведениям.ДоначисленоНаОПС;
							ДоначисленоСтраховая = ДоначисленоСтраховая + ВыборкаПоКорректирующимСведениям.ДоначисленоСтраховая;
							ДоначисленоНакопительная = ДоначисленоНакопительная + ВыборкаПоКорректирующимСведениям.ДоначисленоНакопительная;
							ОбластьКорректирующиеСведенияСтрока.Параметры.Заполнить(ВыборкаПоКорректирующимСведениям);
							ОбластьКорректирующиеСведенияСтрока.Параметры.КодКорректируемогоПериода = "";
							ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьКорректирующиеСведенияСтрока);
						КонецЦикла;
						ОбластьКорректирующиеСведенияИтого.Параметры.ДоначисленоНаОПС = ДоначисленоНаОПС;
						ОбластьКорректирующиеСведенияИтого.Параметры.ДоначисленоСтраховая = ДоначисленоСтраховая;
						ОбластьКорректирующиеСведенияИтого.Параметры.ДоначисленоНакопительная = ДоначисленоНакопительная;
					Иначе
						ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьКорректирующиеСведенияСтрока);
						ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьКорректирующиеСведенияСтрока);
					КонецЕсли;
				Иначе
					ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьКорректирующиеСведенияСтрока);
					ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьКорректирующиеСведенияСтрока);
				КонецЕсли;
				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьКорректирующиеСведенияИтого);
				
				Если НумероватьСтраницы Тогда 
					Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ВыводимыеОбласти, Ложь) Цикл
						ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьПустаяСтрока);
					КонецЦикла;
				КонецЕсли;	
				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьНижнийКолонтитул, Истина);
				
				ПерсонифицированныйУчет.ПроставитьНомерСтраницыВЯчейках(НумероватьСтраницы, ТекущийНомерСтраницы, ОбластьВерхнийКолонтитул);
				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьВерхнийКолонтитул);
				ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
				
				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботахЗаголовок);
				
				ВывестиОбластьСведенияОЗаработке(
					ДокументРезультат, 
					ТекущийЛист,
					ОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботахСтрока, 
					ВыборкаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах, 
					ВыборкаПоРаботникам.Ссылка,  
					ВыборкаПоРаботникам.Сотрудник, 
					ПериодДанных, 
					"КодКлассаУсловийТруда",
					ТаблицаПоДоходамЗанятыхНаВредныхИТяжелыхРаботах,
					ОбластьВредниковПустая,
					ОбластьВредниковПустая2Часть);
				
				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьСтажНачало);
				Если ВыборкаПоРаботникам.ЗаполненСтаж Тогда
					НомерСтроки = 0;
					Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
						НомерСтроки = НомерСтроки + 1;
						
						ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтаж, НомерСтроки);
						ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьСтаж);
						
						Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
							Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							НомерСтроки = НомерСтроки + 1;
							
							ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтаж, НомерСтроки);
							ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьСтаж);
							
						КонецЦикла;	
					КонецЦикла;
				Иначе
					ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьСтаж);
				КонецЕсли; // Записи о стаже
				
				Если НумероватьСтраницы Тогда					
					Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ВыводимыеОбласти, Ложь) Цикл
						ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьПустаяСтрока);
					КонецЦикла;
				КонецЕсли;	

				ВывестиОбласть(ДокументРезультат, ТекущийЛист, ОбластьНижнийКолонтитул, Истина);
				
			КонецЦикла; // по сотрудникам
		КонецЕсли;
		
	КонецЦикла;
	
	НомерПоследнейСтраницы = ТекущийНомерСтраницы - 1;	
	
	Возврат Результаты;
КонецФункции

Процедура ВывестиОбласть(ДокументРезультат, ТекущийЛист = Неопределено, ВыводимаяОбласть, ЗавершатьТекущийЛист = Ложь, ПроверятьВывод = Ложь, ПроверяемыеОбласти = Неопределено)
	Если ТекущийЛист = Неопределено Тогда
		Если ПроверятьВывод Тогда
		    Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ПроверяемыеОбласти) Тогда
		        ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();		        
			КонецЕсли;
		ИначеЕсли ЗавершатьТекущийЛист Тогда
			 ДокументРезультат.Вывести(ВыводимаяОбласть); 
			 ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						 
			 Возврат;
		 КонецЕсли;	
		 
		 ДокументРезультат.Вывести(ВыводимаяОбласть);  
	Иначе	
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	    ТекущийЛист.АвтоМасштаб = ДокументРезультат.АвтоМасштаб;
		
		Если ПроверятьВывод Тогда
		    Если Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ПроверяемыеОбласти) Тогда
		        ТекущийЛист.ВывестиГоризонтальныйРазделительСтраниц();
		        
		        ДокументРезультат.Вывести(ТекущийЛист);
		        
		        ТекущийЛист = Новый ТабличныйДокумент;
			КонецЕсли;
		ИначеЕсли ЗавершатьТекущийЛист Тогда
			 ТекущийЛист.Вывести(ВыводимаяОбласть); 
			 ТекущийЛист.ВывестиГоризонтальныйРазделительСтраниц();
			 ДокументРезультат.Вывести(ТекущийЛист);
			 
			 ТекущийЛист = Новый ТабличныйДокумент;
			 
			 Возврат;
		КонецЕсли;
			     
	    ТекущийЛист.Вывести(ВыводимаяОбласть);    
	КонецЕсли;	
КонецПроцедуры 

Функция СформироватьПечатнуюФормуРаздела6РСВ_1(МассивОбъектов, ОбъектыПечати, НумероватьСтраницы = Истина, НомерПервойСтраницы = 1, НомерПоследнейСтраницы = 1) Экспорт
	ТабличныеДокументы = ТабличныеДокументыРаздела6РСВ_1(МассивОбъектов, МассивОбъектов, ОбъектыПечати, НумероватьСтраницы, НомерПервойСтраницы, НомерПоследнейСтраницы);	
	
	Возврат Справочники.КомплектыОтчетностиПерсучета.ОбъединитьТабличныеДокументы(ТабличныеДокументы);
КонецФункции	

Процедура ВывестиОбластьСведенияОЗаработке(ТабличныйДокумент, ТекущийЛист, ОбастьЗаработок, ВыборкаПоСтрокамЗаработка, Ссылка, Сотрудник, ОтчетныйПериод, ИмяПоляГруппировки, ВременнаяТаблица, ОбластьЗаработокПустая, ОбластьЗаработокПустаяЧасть2)
	Если ТекущийЛист = Неопределено Тогда
		ВыведеноСтрок = ТабличныйДокумент.ВысотаТаблицы;
	Иначе
		ВыведеноСтрок = ТекущийЛист.ВысотаТаблицы;
	КонецЕсли;	
		
	Если ВыборкаПоСтрокамЗаработка.ЗаработокЗаполнен Тогда
		
		ВтораяЦифраКода = 0;
		Пока ВыборкаПоСтрокамЗаработка.СледующийПоЗначениюПоля(ИмяПоляГруппировки) Цикл			
			ВременнаяТаблица.Очистить();
			Пока ВыборкаПоСтрокамЗаработка.Следующий() Цикл
				СтрокаТаблицы = ВременнаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоСтрокамЗаработка);
			КонецЦикла;
			
			ПредыдущийМесяц = 0;
			Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
				Если СтрокаТЗ.Месяц = 0 Тогда
					МесяцПериода = 0
				Иначе
					МесяцПериода = СтрокаТЗ.Месяц - Месяц(ОтчетныйПериод) + 1;
				КонецЕсли;
				Если МесяцПериода > ПредыдущийМесяц + 1 Тогда
					Для СчПараметр = 0 По ОбастьЗаработок.Параметры.Количество() - 1 Цикл
						ОбастьЗаработок.Параметры[СчПараметр] = ""
					КонецЦикла;
					Для СчМесяцев = ПредыдущийМесяц + 1 По МесяцПериода - 1 Цикл
						ОбастьЗаработок.Параметры.НазваниеСтроки = "" + СчМесяцев + " месяц";
						ОбастьЗаработок.Параметры.КодСтроки = "" + ВтораяЦифраКода + "" + СчМесяцев;
						ВывестиОбласть(ТабличныйДокумент, ТекущийЛист, ОбастьЗаработок);
					КонецЦикла;
				КонецЕсли;
				ОбастьЗаработок.Параметры.Заполнить(СтрокаТЗ);
				Если МесяцПериода = 0 Тогда
					ОбастьЗаработок.Параметры.НазваниеСтроки = "Всего с начала расчетного периода, в том числе за последние три месяца отчетного периода:";
				Иначе
					ОбастьЗаработок.Параметры.НазваниеСтроки = "" + МесяцПериода + " месяц";
				КонецЕсли;
				ОбастьЗаработок.Параметры.КодСтроки = "" + ВтораяЦифраКода + "" + МесяцПериода;
				ВывестиОбласть(ТабличныйДокумент, ТекущийЛист, ОбастьЗаработок);
				ПредыдущийМесяц = МесяцПериода;
			КонецЦикла;
			Если ПредыдущийМесяц < 3 Тогда
				Для СчПараметр = 0 По ОбастьЗаработок.Параметры.Количество() - 1 Цикл
					ОбастьЗаработок.Параметры[СчПараметр] = ""
				КонецЦикла;
				Для СчМесяцев = ПредыдущийМесяц + 1 По 3 Цикл
					ОбастьЗаработок.Параметры.НазваниеСтроки = "" + СчМесяцев + " месяц";
					ОбастьЗаработок.Параметры.КодСтроки = "" + ВтораяЦифраКода + "" + СчМесяцев;
					ВывестиОбласть(ТабличныйДокумент, ТекущийЛист, ОбастьЗаработок);
				КонецЦикла;
			КонецЕсли;
			
			ВтораяЦифраКода = ВтораяЦифраКода + 1;
		КонецЦикла;
	Иначе	
		ВывестиОбласть(ТабличныйДокумент, ТекущийЛист, ОбластьЗаработокПустая);
	КонецЕсли;
	
	Если ТекущийЛист = Неопределено Тогда
		Если ТабличныйДокумент.ВысотаТаблицы - ВыведеноСтрок < 8 Тогда
			ВывестиОбласть(ТабличныйДокумент, ТекущийЛист, ОбластьЗаработокПустаяЧасть2);
		КонецЕсли;	
	Иначе	
		Если ТекущийЛист.ВысотаТаблицы - ВыведеноСтрок < 8 Тогда
			ВывестиОбласть(ТабличныйДокумент, ТекущийЛист, ОбластьЗаработокПустаяЧасть2);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж, НомерСтроки)
	
	ОбластьСтаж.Параметры.НомерСтроки = НомерСтроки;
	ОбластьСтаж.Параметры.ДатаНачалаПериода = ВыборкаЗаписейСтажа.ДатаНачалаПериода;
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = ВыборкаЗаписейСтажа.ДатаОкончанияПериода;
	
	ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
	ОбластьСтаж.Параметры.ДопТУ = ПерсонифицированныйУчет.ПредставлениеПараметровТерриториальныхУсловий(ВыборкаЗаписейСтажа);
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.КодПозицииСпискаКод = ВыборкаЗаписейСтажа.КодПозицииСпискаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПерсонифицированныйУчет.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	
	ПерсонифицированныйУчет.ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ОчиститьОбластьСтаж(ОбластьСтаж)
	Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
		ОбластьСтаж.Параметры[СчПараметр] = ""
	КонецЦикла;	
КонецПроцедуры

Процедура ОчиститьОбластьКорректирующиеСведения(ОбластьКорректирующиеСведения)
	Для СчПараметр = 0 По ОбластьКорректирующиеСведения.Параметры.Количество() - 1 Цикл
		ОбластьКорректирующиеСведения.Параметры[СчПараметр] = ""
	КонецЦикла;
КонецПроцедуры

Процедура ОчиститьОбластьКорректирующиеСведенияИтого(ОбластьКорректирующиеСведенияИтого)
	Для СчПараметр = 0 По ОбластьКорректирующиеСведенияИтого.Параметры.Количество() - 1 Цикл
		ОбластьКорректирующиеСведенияИтого.Параметры[СчПараметр] = ""
	КонецЦикла
КонецПроцедуры

Процедура ОчиститьОбластьСведенияОЗаработке(ОбластьСведенияОЗаработке)
	Для СчПараметр = 0 По ОбластьСведенияОЗаработке.Параметры.Количество() - 1 Цикл
		ОбластьСведенияОЗаработке.Параметры[СчПараметр] = ""
	КонецЦикла;	
КонецПроцедуры

Процедура ОчиститьОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботах(ОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботах)
	Для СчПараметр = 0 По ОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботах.Параметры.Количество() - 1 Цикл
		ОбластьСведенияОЗаработкеНаВредныхИТяжелыхРаботах.Параметры[СчПараметр] = ""
	КонецЦикла;	
КонецПроцедуры

#КонецЕсли