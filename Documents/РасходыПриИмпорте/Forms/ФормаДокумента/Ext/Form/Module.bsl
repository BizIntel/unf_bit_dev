
#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания					= УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент					= Объект.Контрагент;
	Договор						= Объект.Договор;
	Заказ						= Объект.ЗаказПоставщику;
	ВалютаРасчетов				= Объект.Договор.ВалютаРасчетов;
	НациональнаяВалюта			= Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте			= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта		= СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	СчетУчетаНДСПоУмолчанию 	= ПланыСчетов.Управленческий.Налоги;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НаправлениеДеятельности", "Видимость", Объект.ТаможенныйШтраф <> 0);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетУчетаЗатрат", "Видимость", Объект.ТаможенныйШтраф <> 0);
	
	ОбменСБухгалтериейНастроен = УправлениеНебольшойФирмойПовтИсп.ОбменСБухгалтериейНастроен();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыДокументПартии", "Видимость", ОбменСБухгалтериейНастроен);
	
	// Установка видимости договора.
	УстановитьВидимостьДоговора();
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// ГрупповоеИзменениеСтрок
	ИнициализироватьГрупповоеИзменениеСтрок();
	// Конец ГрупповоеИзменениеСтрок
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		УстановитьВидимостьДоговора();
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ТаможенныйШтраф <> 0
		И НЕ (ЗначениеЗаполнено(Объект.НаправлениеДеятельности)
				И ЗначениеЗаполнено(Объект.СчетУчетаЗатрат)) Тогда
				
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновныеСведения;
		ТекстОшибки = НСтр("ru ='Проверьте заполнение направления деятельности и счета затрат'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		
	Иначе
		
		// СтандартныеПодсистемы.ОценкаПроизводительности
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
		КонецЕсли;
		// СтандартныеПодсистемы.ОценкаПроизводительности
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Объект.Договор, Объект.Ссылка, Объект.Организация, Объект.Контрагент, Отказ);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу();
	НастроитьОформлениеПанелиРедактирования(4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования(Истина);
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
		
		Элементы.ЗапасыИзменениеСтрокЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьИсходноеМесто") Тогда
		
		Элементы.ЗапасыИзменениеСтрокЗначение.СписокВыбора.Очистить();
		
		ДанныеТекущегоРаздела = Элементы.Разделы.ТекущиеДанные;
		
		Элементы.ЗапасыИзменениеСтрокЗначение.ОграничениеТипа = Новый ОписаниеТипов("Число");
		Для СчетчикРазделов = 1 По Объект.Разделы.Количество() Цикл
			
			Если НЕ ДанныеТекущегоРаздела.НомерСтроки = СчетчикРазделов Тогда
				
				Элементы.ЗапасыИзменениеСтрокЗначение.СписокВыбора.Добавить(СчетчикРазделов, "Раздел " + СчетчикРазделов);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Элементы.ЗапасыИзменениеСтрокЗначение.СписокВыбора.Количество() = 1 Тогда
			
			ЗапасыИзменениеСтрокЗначение = Элементы.ЗапасыИзменениеСтрокЗначение.СписокВыбора[0].Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	
	УстановитьПометку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	
	УстановитьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Команда) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.ТекущиеДанные.Пометка = Истина;
	
	ДанныеТекущегоРаздела = Элементы.Разделы.ТекущиеДанные;
	Элемент.ТекущиеДанные.НомерРаздела = Элементы.Разделы.ТекущиеДанные.НомерСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаРаздела = Элементы.Разделы.ТекущиеДанные;
	СтрокаЗапасы = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаЗапасы.Номенклатура);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаЗапасы.Количество			= 1;
	СтрокаЗапасы.НомерРаздела		= СтрокаРаздела.НомерСтроки;
	СтрокаЗапасы.СуммаПошлины		= 0;
	СтрокаЗапасы.СуммаНДС			= 0;
	СтрокаЗапасы.СтранаПроисхождения= СтруктураДанные.СтранаПроисхождения;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация);
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	КонтрагентВестиРасчетыПоЗаказамПередИзменением = КонтрагентВестиРасчетыПоЗаказам;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанных = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		Объект.Договор = СтруктураДанных.Договор;
		
		СтруктураДанных.Вставить("КонтрагентПередИзменением", КонтрагентПередИзменением);
		СтруктураДанных.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", КонтрагентВестиРасчетыПоЗаказамПередИзменением);
		
		ОбработатьИзменениеДоговора(СтруктураДанных);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
		Объект.ЗаказПоставщику = Заказ;
		
	КонецЕсли;
	
	Заказ = Объект.ЗаказПоставщику;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПоставщикуПриИзменении(Элемент)
	
	Если Объект.Предоплата.Количество() > 0
		И Объект.ЗаказПоставщику <> Заказ
		И КонтрагентВестиРасчетыПоЗаказам Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаказПоставщикуПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Зачет предоплаты будет очищен, продолжить?'"), Режим, 0);
		Возврат;
	КонецЕсли;
	
	ЗаказПоставщикуПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПоставщикуПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Объект.ЗаказПоставщику = Заказ;
		Возврат;
	КонецЕсли;
	
	ЗаказПоставщикуПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаказПоставщикуПриИзмененииФрагмент()
	
	Заказ = Объект.ЗаказПоставщику;

КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыТаможеннаяСтоимостьПриИзменении(Элемент)
	
	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	ПриИзмененииСтоимостиСтавкиПошлины(НомерРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПроцентПошлиныПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.Разделы.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		НомерРаздела = Объект.Разделы.Индекс(ДанныеТекущейСтроки) + 1;
		ПриИзмененииСтоимостиСтавкиПошлины(НомерРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаПошлиныПриИзменении(Элемент)
	
	ПриИзмененииСуммыПошлиныСтавкиНДС(Элементы.Разделы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСуммыПошлиныСтавкиНДС(Элементы.Разделы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаНДСПриИзменении(Элемент)
	
	ВычислитьСуммуДокумента();
	РаспределитьНДСИПошлинуПоРазделуСервер(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ДанныеТекущейСтроки = Элементы.Разделы.ТекущиеДанные;
	Если НЕ ДанныеТекущейСтроки = Неопределено Тогда
		
		ИдентификаторСтроки = ДанныеТекущейСтроки.ПолучитьИдентификатор();
		ЗаполнитьСведенияОРазделе(ИдентификаторСтроки);
		
		Если Объект.Разделы.Количество() > 1 Тогда
			
			Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьИсходноеМесто"), НСтр("ru ='Перенести строки в другой раздел'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока
		ИЛИ НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетУчетаНДС) Тогда
		
		Элемент.ТекущиеДанные.СчетУчетаНДС = СчетУчетаНДСПоУмолчанию;
		
	КонецЕсли;
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ТаможеннаяСтоимость = 0;
		Элемент.ТекущиеДанные.СуммаПошлины = 0;
		Элемент.ТекущиеДанные.СуммаНДС= 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПередУдалением(Элемент, Отказ)

	НомерРаздела = Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1;
	УдалитьТоварыРаздела(НомерРаздела);

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыФактурнаяСтоимостьПриИзменении(Элемент)
	
	ПересчитатьИтогиРаздела(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1, "ТаможеннаяСтоимость");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаПошлиныПриИзменении(Элемент)
	
	ПересчитатьИтогиРаздела(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1, "СуммаПошлины");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	ПересчитатьИтогиРаздела(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1, "СуммаНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.Разделы.ТекущиеДанные = Неопределено  Тогда
		
		ТекстОшибки = НСтр("ru ='Необходимо выделить раздел, для которого добавляются запасы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Разделы", , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ПересчитатьИтогиРаздела(Объект.Разделы.Индекс(Элементы.Разделы.ТекущиеДанные) + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаможенныйСборПриИзменении(Элемент)
	
	ВычислитьСуммуДокумента();
	
	РаспределитьСуммуСбораПоЗапасам();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаможенныйШтрафПриИзменении(Элемент)
	
	СуммаЗаполнена = Объект.ТаможенныйШтраф <> 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НаправлениеДеятельности", "Видимость", СуммаЗаполнена);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СчетУчетаЗатрат", "Видимость", СуммаЗаполнена);
	
	Если СуммаЗаполнена Тогда
		
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.СчетУчетаЗатрат = Неопределено;
		
	КонецЕсли;
	
	ВычислитьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	
	РаспределитьСуммуСбораПоЗапасам();
	
	СтрокаРаздела = Элементы.Разделы.ТекущиеДанные;
	Если СтрокаРаздела <> Неопределено Тогда
		
		ЗаполнитьСведенияОРазделе(СтрокаРаздела.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

#Область РеквизитыОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыКопированиеСтрок

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастроитьОформлениеПанелиРедактирования(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(3);
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыГрупповоеИзменение

&НаКлиенте
Процедура ЗапасыПометкаПриИзменении(Элемент)
	
	ГрупповоеИзменениеСтрокКлиент.СтрокаПометкаПриИзменении(Объект.Запасы, Элементы.ЗапасыУстановитьФлажки, Элементы.ЗапасыСнятьФлажки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования(2);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция РаспределитьПропорционально(Знач ИсхСумма, СоответствиеКоэф, Знач Точность = 2)
	
	Если СоответствиеКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Для каждого ЭлементСоответствия Из СоответствиеКоэф Цикл
		
		МодульЧисла = ?(ЭлементСоответствия.Значение > 0, ЭлементСоответствия.Значение, - ЭлементСоответствия.Значение);
		
		Если МаксЗнач < МодульЧисла Тогда
			
			МаксЗнач = МодульЧисла;
			ИндексМакс = ЭлементСоответствия.Ключ;
			
		КонецЕсли;
		
		СуммаКоэф = СуммаКоэф + ЭлементСоответствия.Значение;
		
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СоответствиеНовыйхСумм = Новый Соответствие;
	Для каждого ЭлементСоответствия Из СоответствиеКоэф Цикл
		
		НоваяСумма = Окр(ИсхСумма * ЭлементСоответствия.Значение / СуммаКоэф, Точность, 1);
		СоответствиеНовыйхСумм.Вставить(ЭлементСоответствия.Ключ, НоваяСумма);
		РаспрСумма = РаспрСумма + НоваяСумма;
		
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом
	Если Не РаспрСумма = ИсхСумма Тогда
		
		ЗначениеЭлемента = СоответствиеНовыйхСумм.Получить(ИндексМакс);
		ЗначениеЭлемента = ЗначениеЭлемента + (ИсхСумма - РаспрСумма);
		
		СоответствиеНовыйхСумм.Вставить(ИндексМакс, ЗначениеЭлемента);
		
	КонецЕсли;
	
	Возврат СоответствиеНовыйхСумм;
	
КонецФункции

&НаКлиенте
Процедура РаспределитьСуммуТаможенногоСбораПоКолонкамТаблицыЗапасов(РаспределяемаяСумма, ТаблицаЗапасов, ИмяКолонки, ИмяКолонкиБазы)

	Если РаспределяемаяСумма <> 0 Тогда
		
		СоответствиеСтарыхСумм = Новый Соответствие;
		Для каждого СтрокаЗапасов Из ТаблицаЗапасов Цикл
			
			СоответствиеСтарыхСумм.Вставить(СтрокаЗапасов.ПолучитьИдентификатор(), СтрокаЗапасов[?(ПустаяСтрока(ИмяКолонкиБазы), ИмяКолонки, ИмяКолонкиБазы)]);
			
		КонецЦикла;
		
		СоответствиеНовыхСумм = РаспределитьПропорционально(РаспределяемаяСумма, СоответствиеСтарыхСумм);
		
		Если ТипЗнч(СоответствиеНовыхСумм) = Тип("Соответствие") Тогда
			
			Для каждого ЭлементСоответствия Из СоответствиеНовыхСумм Цикл
				
				СтрокаТаблицы = ТаблицаЗапасов.НайтиПоИдентификатору(ЭлементСоответствия.Ключ);
				СтрокаТаблицы[ИмяКолонки] = ЭлементСоответствия.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для каждого СтрокаЗапасов Из ТаблицаЗапасов Цикл
			
			СтрокаЗапасов[ИмяКолонки] = 0;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		ПараметрыДокумента = Новый Структура;
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
			
		Иначе
			
			ПараметрыДокумента.Вставить("КонтрагентПередИзменением", ДанныеДоговора.КонтрагентПередИзменением);
			ПараметрыДокумента.Вставить("КонтрагентВестиРасчетыПоЗаказамПередИзменением", ДанныеДоговора.КонтрагентВестиРасчетыПоЗаказамПередИзменением);
			ПараметрыДокумента.Вставить("ВидимостьДоговораПередИзменением", Элементы.Договор.Видимость);
			
		КонецЕсли;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
			И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Разделы.Количество() > 0);
		
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		
		ОбработатьИзменениеДоговораИВалютыРасчетов(ПараметрыДокумента);
		
	Иначе
		
		Объект.ЗаказПоставщику = Заказ;
		
	КонецЕсли;
	
	Заказ = Объект.ЗаказПоставщику;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	Если Объект.ВалютаДокумента = НациональнаяВалюта Тогда
		
		СуммаПошлины = СтрокаТабличнойЧасти.СуммаПошлины;
		
	Иначе
		
		СуммаПошлины = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПошлины,
			Объект.ВалютаДокумента,
			НациональнаяВалюта,
			Объект.Курс,
			1,
			Объект.Кратность,
			1);
		
	КонецЕсли;
	
	СтавкаНДС 		= УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	БазаРасчетаНДС	= СтрокаТабличнойЧасти.ТаможеннаяСтоимость + СуммаПошлины;
	
	СтрокаТабличнойЧасти.СуммаНДС = БазаРасчетаНДС * СтавкаНДС / 100;
	
	ВычислитьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыРасчетовЗавершение", ЭтотОбъект, Новый Структура("КратностьНовый, КурсНовый", КратностьНовый, КурсНовый)), ТекстСообщения, Режим, 0);
		Возврат;
		
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	ПересчитатьКурсКратностьВалютыРасчетовФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КратностьНовый = ДополнительныеПараметры.КратностьНовый;
	КурсНовый = ДополнительныеПараметры.КурсНовый;
	
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = КурсНовый;
		Объект.Кратность = КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаРасчетов,
			СтрокаТабличнойЧасти.Курс,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
			СтрокаТабличнойЧасти.Кратность,
			?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		КонецЦикла;
		
	КонецЕсли;
	
	
	ПересчитатьКурсКратностьВалютыРасчетовФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовФрагмент()
	
	Перем СтруктураНадписи;
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость",Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент",			Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				Объект.Договор);
	СтруктураПараметров.Вставить("Организация",			Компания);
	СтруктураПараметров.Вставить("ДатаДокумента",		Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",Ложь);
	СтруктураПараметров.Вставить("ТекстПредупреждения",	ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораИВалютыРасчетов(ПараметрыДокумента)
	
	ДоговорПередИзменением = ПараметрыДокумента.ДоговорПередИзменением;
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс	  = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	Заказ = Объект.ЗаказПоставщику;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждение = НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом!
										|Необходимо проверить валюту документа!'");
										
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, ТекстПредупреждение);
		
	Иначе
		
		СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", 
			Объект.ВалютаДокумента, 
			ВалютаРасчетов, 
			Объект.Курс, 
			КурсНациональнаяВалюта, 
			Объект.СуммаВключаетНДС, 
			УчетВалютныхОпераций, 
			Объект.НалогообложениеНДС);
			
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
	Если ПараметрыДокумента.Свойство("ИзменитьПеременнуюВалютаРасчетов") Тогда
		
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
		
		// Пересчитываем цены по валюте.
		Если РезультатЗакрытия.ПересчитатьЦены Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ВалютаРасчетовПередИзменением, "Запасы");
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ВалютаРасчетовПередИзменением, "Разделы");
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если РезультатЗакрытия.СуммаВключаетНДС <> РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Разделы");
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС",
		Объект.ВалютаДокумента,
		ВалютаРасчетов,
		Объект.Курс,
		КурсНациональнаяВалюта,
		Объект.СуммаВключаетНДС,
		УчетВалютныхОпераций,
		Объект.НалогообложениеНДС);
		
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНеобходимостьОбновитьЗачетыАванса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Предоплата.Очистить();
		ОбработатьИзменениеДоговораИВалютыРасчетов(ДополнительныеПараметры);
		
	Иначе
		
		Объект.Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		Договор = ДополнительныеПараметры.ДоговорПередИзменением;
		
		Если ДополнительныеПараметры.Свойство("КонтрагентПередИзменением") Тогда
			
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьСуммуПошлиныГТД(Знач ДанныеСтроки, Знач ДанныеОбъекта, Знач ВалютаРеглУчета)

	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.ВалютаДокумента) Тогда
		
		ТаможеннаяСтоимостьВал = ДанныеСтроки.ТаможеннаяСтоимость;
		
	Иначе
		
		ТаможеннаяСтоимостьВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ДанныеСтроки.ТаможеннаяСтоимость,
			ДанныеОбъекта.ВалютаДокумента, 
			ДанныеОбъекта.ВалютаРегламентированногоУчета,
			ДанныеОбъекта.КурсДокумента, 
			1,
			ДанныеОбъекта.КратностьДокумента, 
			1);
			
	КонецЕсли;

	Возврат ТаможеннаяСтоимостьВал * ДанныеСтроки.СтавкаПошлины / 100;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСтоимостиСтавкиПошлины(НомерРаздела)
	
	СтрокаРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	
	ДанныеОбъекта = Новый Структура("ВалютаДокумента,КурсВзаиморасчетов,КратностьВзаиморасчетов");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("Ссылка", Объект.Ссылка);
	ДанныеОбъекта.Вставить("ВалютаРасчетов", ВалютаРасчетов);
	ДанныеОбъекта.Вставить("ВалютаРегламентированногоУчета", НациональнаяВалюта);
	ДанныеОбъекта.Вставить("КурсДокумента", Объект.Курс);
	ДанныеОбъекта.Вставить("КратностьДокумента", Объект.Кратность);
	
	ДанныеСтроки = Новый Структура("ТаможеннаяСтоимость, СтавкаПошлины, СуммаПошлины, СтавкаНДС, СуммаНДС, НомерСтроки");
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаРаздела);
	
	СтрокаРаздела.СуммаПошлины = РассчитатьСуммуПошлиныГТД(ДанныеСтроки, ДанныеОбъекта, НациональнаяВалюта);
	ДанныеСтроки.СуммаПошлины  = СтрокаРаздела.СуммаПошлины;
	РассчитатьСуммуНДС(СтрокаРаздела);
	
	ВычислитьСуммуДокумента();
	
	РаспределитьНДСИПошлинуПоРазделуСервер(НомерРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыПошлиныСтавкиНДС(СтрокаРаздела)
	
	РассчитатьСуммуНДС(СтрокаРаздела);
	РаспределитьНДСИПошлинуПоРазделуСервер(Объект.Разделы.Индекс(СтрокаРаздела) + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОРазделе(ИдентификаторСтроки)
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ДанныеСтрокиРаздела = Объект.Разделы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		НомерРаздела = ДанныеСтрокиРаздела.НомерСтроки;
		ТоварыВРазделе = Объект.Запасы.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
		КоличествоТоваровВРазделе = ?(ТипЗнч(ТоварыВРазделе) = Тип("Массив"), ТоварыВРазделе.Количество(), 0);
			
		СтрокаСведений = НСтр("ru ='В этом разделе строк товаров: %1'");
		СтрокаСведений = СтрШаблон(СтрокаСведений, КоличествоТоваровВРазделе);
		
		ДанныеСтрокиРаздела.СведенияОРазделеГТД = СтрокаСведений;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиРаздела(НомерРаздела, ИмяКолонки = "")
	
	Если НомерРаздела = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеРаздела = Объект.Разделы.Получить(НомерРаздела - 1);
	СтараяТаможеннаяСтоимость = ДанныеРаздела.ТаможеннаяСтоимость;
	
	Итоги = Новый Структура("СуммаПошлины,СуммаНДС,ТаможеннаяСтоимость", 0, 0, 0);
	
	ТоварыРаздела = Объект.Запасы.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаТаблицы Из ТоварыРаздела Цикл
		
		Итоги.СуммаПошлины			= Итоги.СуммаПошлины + СтрокаТаблицы.СуммаПошлины;
		Итоги.СуммаНДС				= Итоги.СуммаНДС + СтрокаТаблицы.СуммаНДС;
		Итоги.ТаможеннаяСтоимость	= Итоги.ТаможеннаяСтоимость + СтрокаТаблицы.ФактурнаяСтоимость;
		
	КонецЦикла;
	
	Если ИмяКолонки = "" Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеРаздела, Итоги);
		
	Иначе
		
		ДанныеРаздела[ИмяКолонки] = Итоги[ИмяКолонки];
		
	КонецЕсли; 
	
	Если СтараяТаможеннаяСтоимость <> ДанныеРаздела.ТаможеннаяСтоимость Тогда
		
		ПриИзмененииСтоимостиСтавкиПошлины(НомерРаздела);
		
	КонецЕсли;
	
	ВычислитьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Разделы.Итог("СуммаНДС") + Объект.Разделы.Итог("СуммаПошлины") + Объект.ТаможенныйСбор + Объект.ТаможенныйШтраф;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		
		Если ПустаяСтрока(ТекстНадписи) Тогда
			
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
			
		Иначе
			
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
			
		КонецЕсли;
		
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
		
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	ТекстНадписи = ТекстНадписи 
		+ ?(ПустаяСтрока(ТекстНадписи), "", " • ")
		+ ?(СтруктураНадписи.СуммаВключаетНДС, НСтр("ru = 'Сумма включает НДС'"), НСтр("ru = 'Сумма не включает НДС'"));
	
	Возврат ТекстНадписи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаНовая, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Договор, Документ, Организация, Контрагент, Отказ)
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
		ИЛИ Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора)
		И Константы.НеПроводитьДокументыСНекорректнымиДоговорами.Получить() Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура РаспределитьСуммуСбораПоЗапасам()
	
	Если Объект.ТаможенныйСбор = 0
		ИЛИ Объект.Запасы.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РаспределитьСуммуТаможенногоСбораПоКолонкамТаблицыЗапасов(Объект.ТаможенныйСбор, Объект.Запасы, "СуммаСбора", "ФактурнаяСтоимость");
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
		
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	УстановитьВидимостьДоговора();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	КонтрагентВестиРасчетыПоЗаказам = Объект.Контрагент.ВестиРасчетыПоЗаказам;
	Элементы.Договор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.Контрагент.АвтоМаксимальнаяШирина = НЕ Элементы.ОстатокВзаиморасчетов.Видимость;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьНДСИПошлинуПоРазделуСервер(НомерРаздела)
	
	СтрокаРаздела 		= Объект.Разделы.Получить(НомерРаздела - 1);
	ТаможеннаяСтоимость	= СтрокаРаздела.ТаможеннаяСтоимость;
	СуммаПошлины		= СтрокаРаздела.СуммаПошлины;
	СуммаНДС			= СтрокаРаздела.СуммаНДС;
	
	МассивСтрок  = Объект.Запасы.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	БазисРаспределения = Новый Массив;
	
	ВсегоСтоимость = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		БазисРаспределения.Добавить(ЭлементМассива.ФактурнаяСтоимость);
		
	КонецЦикла;
	
	Всего			= ВсегоСтоимость;
	ВсегоПошлина	= СуммаПошлины;
	ВсегоНДС		= СуммаНДС;
	
	Если ВсегоСтоимость = 0 Тогда
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			ТекстСообщения = НСтр("ru='Общая сумма фактурной стоимости раздела %1 нулевая!
									|Распределение невозможно.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерРаздела);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Товары", "Объект");
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ СуммаПошлины = 0 Тогда
		
		МассивРезультатаРаспределения_Пошлина = Документы.РасходыПриИмпорте.РаспределитьПропорционально(СуммаПошлины, БазисРаспределения);
		
	КонецЕсли;
	
	Если НЕ СуммаНДС = 0 Тогда
		
		МассивРезультатаРаспределения_НДС = Документы.РасходыПриИмпорте.РаспределитьПропорционально(СуммаНДС, БазисРаспределения);
		
	КонецЕсли;
	
	Для ИндексСтроки = 0 по МассивСтрок.Количество() - 1 Цикл
		
		СтрокаМассива				= МассивСтрок[ИндексСтроки];
		СтрокаМассива.СуммаПошлины	= ?(СуммаПошлины = 0,	0, МассивРезультатаРаспределения_Пошлина[ИндексСтроки]);
		СтрокаМассива.СуммаНДС		= ?(СуммаНДС = 0,		0, МассивРезультатаРаспределения_НДС[ИндексСтроки]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТоварыРаздела(НомерРаздела)
	
	МассивСтрок = Объект.Запасы.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для Каждого СтрокаРаздела Из МассивСтрок Цикл
		
		Объект.Запасы.Удалить(СтрокаРаздела);
		
	КонецЦикла;
	
	Если Объект.Разделы.Количество() > НомерРаздела Тогда
		
		ПересчитатьНомераРазделов(НомерРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНомераРазделов(НомерУдаленногоРаздела)
	
	Для каждого СтрокаТовары Из Объект.Запасы Цикл
		
		Если СтрокаТовары.НомерРаздела > НомерУдаленногоРаздела Тогда
			
			СтрокаТовары.НомерРаздела = СтрокаТовары.НомерРаздела - 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеКопированиеСтрок

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(ЭтаФорма, КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные)
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект.Запасы,
		ЗапасыРезервнаяКопияТаблицыАдрес,
		СостояниеПерехода,
		ИзменяетДанные
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(Пометка)
	
	Элементы.ЗапасыСнятьФлажки.Видимость = НЕ Элементы.ЗапасыСнятьФлажки.Видимость;
	Элементы.ЗапасыУстановитьФлажки.Видимость = НЕ Элементы.ЗапасыУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект.Запасы Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	Если ЗапасыИзменениеСтрокДействие = ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер()
	
	ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер());
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		
		Если ИмяТЧ = "Запасы" Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Коэффициент) Тогда
				Строка.Коэффициент = 1;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеГрупповоеИзменение

&НаКлиенте
Процедура ОбработатьТаблицу()
	Перем Ошибки;
	
	СтрокаРаздела = Элементы.Разделы.ТекущиеДанные;
	Если СтрокаРаздела = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Укажите раздел ГТД, в который необходимо добавить товары'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Разделы", ТекстОшибки, "");
		
	Иначе
		
		ОбработатьТаблицуНаСервере(СтрокаРаздела.ПолучитьИдентификатор(), Ошибки);
		
	КонецЕсли;
	
	Если НЕ Ошибки = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат;
		
	КонецЕсли;
	
	Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД")
		ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
		Тогда
		
		ЗаполнитьСведенияОРазделе(СтрокаРаздела.ПолучитьИдентификатор());
		ПересчитатьИтогиРаздела(СтрокаРаздела.НомерСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(Состояние, СохранитьИзменения = Неопределено)
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(),
		Состояние,
		ЗапасыИзменениеСтрокЗначение
	);
	
	ТипизироватьПоле_ЗапасыИзменениеСтрокЗначение();
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент()
	
	НаборЭлементов = Новый Структура();
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("ГруппаДействие", Элементы.ГруппаЗапасыВыборДействия);
	НаборЭлементов.Вставить("ГруппаЗначение", Элементы.ГруппаЗапасыВыборЗначения);
	НаборЭлементов.Вставить("ГруппаВыполнить", Элементы.ГруппаЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтаФорма.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", ""); 				// Неактуально
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", Неопределено);// Неактуально
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьГрупповоеИзменениеСтрок()
	
	ЗаполнитьСписокДействий();
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер(), ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИдентификаторРаздела, Ошибки)
	
	Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьДокументыПартий Тогда
		
		ПодобратьДокументыПартий(ИдентификаторРаздела, Ошибки);
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента Тогда
		
		ДобавитьСтрокиВРазделИзДокумента(ИдентификаторРаздела, Ошибки);
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД Тогда
		
		ДобавитьСтрокиВРазделИзДокументовПриходнаяНакладная(ИдентификаторРаздела, Ошибки);
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСуммаСбора", "Доступность", Истина);
		
	ИначеЕсли ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки Тогда
		
		ПомеченныеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для каждого СтрокаТаблицы Из ПомеченныеСтроки Цикл
			
			Объект.Запасы.Удалить(СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТипизироватьПоле_ЗапасыИзменениеСтрокЗначение()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	
	Элементы.ЗапасыИзменениеСтрокЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИзменяетДанные = Неопределено)
	Перем СостояниеПерехода;
	
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(),
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРазделы", "Доступность", НЕ Элементы.ГруппаЗапасыИзменениеСтрок.Видимость);
	
	УправлениеРезервнымиКопиямиТаблицы(СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер()
	
	НаборЭлементов = Новый Структура;
	НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
	НаборЭлементов.Вставить("ДокументСсылка", Объект.Ссылка);
	НаборЭлементов.Вставить("ПанельРедактирования", Элементы.ГруппаЗапасыИзменениеСтрок);
	НаборЭлементов.Вставить("ГруппаДействие", Элементы.ГруппаЗапасыВыборДействия);
	НаборЭлементов.Вставить("ГруппаЗначение", Элементы.ГруппаЗапасыВыборЗначения);
	НаборЭлементов.Вставить("ГруппаВыполнить", Элементы.ГруппаЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
	НаборЭлементов.Вставить("КолонкаПометка", Элементы.ЗапасыПометка);
	НаборЭлементов.Вставить("КолонкаНомерСтроки", Элементы.ЗапасыНомерСтроки);
	НаборЭлементов.Вставить("Действие", ЭтаФорма.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("ДействиеЭлемент", Элементы.ЗапасыИзменениеСтрокДействие);
	НаборЭлементов.Вставить("Значение", ЭтаФорма.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ЗначениеЭлемент", Элементы.ЗапасыИзменениеСтрокЗначение);
	НаборЭлементов.Вставить("ОбъектИзменений", "");					//Неактуально
	НаборЭлементов.Вставить("КолонкаОбъектИзменений", Неопределено);//Неактуально
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий()
	
	СписокВыбораДействий = Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора;
	
	СписокВыбораДействий.Очистить();
	
	ОбменСБухгалтериейНастроен = УправлениеНебольшойФирмойПовтИсп.ОбменСБухгалтериейНастроен();
	Если ОбменСБухгалтериейНастроен Тогда
		
		СписокВыбораДействий.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьДокументыПартий,		НСтр("ru ='Подобрать документы партий'"));
		
	КонецЕсли;
	
	СписокВыбораДействий.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента,			НСтр("ru ='Добавить строки из документа'"));
	СписокВыбораДействий.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД,				НСтр("ru ='Добавить строки по номеру ГТД из приходных накладных'"));
	СписокВыбораДействий.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам,		НСтр("ru ='Уточнить суммы распределения таможенного сбора'"));
	СписокВыбораДействий.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки, 					НСтр("ru ='Удалить строки'"));
	
	Если Объект.Разделы.Количество() > 1 Тогда
		
		СписокВыбораДействий.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьИсходноеМесто,	НСтр("ru ='Перенести строки в другой раздел'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументыПартий(ИдентификаторРаздела, Ошибки)
	
	СтрокаРаздела = Объект.Разделы.НайтиПоИдентификатору(ИдентификаторРаздела);
	Если СтрокаРаздела = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Укажите раздел ГТД, в который необходимо добавить товары'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Разделы", ТекстОшибки, "");
		
	КонецЕсли;
	
	Если НЕ Ошибки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивСтрок = Объект.Запасы.НайтиСтроки(Новый Структура("НомерРаздела", СтрокаРаздела.НомерСтроки));
	ТаблицаЗапасов = Объект.Запасы.Выгрузить(МассивСтрок);
	
	Если ТаблицаЗапасов.Количество() < 1 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстаЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасов.НомерСтроки КАК НомерСтроки
	|	,ТаблицаЗапасов.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасов.Характеристика КАК Характеристика
	|	,ТаблицаЗапасов.Партия КАК Партия
	|	,ТаблицаЗапасов.СтранаПроисхождения КАК СтранаПроисхождения
	|Поместить ДанныеПоДокументам
	|Из &ТаблицаЗапасов КАК ТаблицаЗапасов
	|;
	|
	|Выбрать
	|	ДанныеПоДокументам.НомерСтроки КАК НомерСтроки
	|	,ДанныеПоДокументам.Номенклатура КАК Номенклатура
	|	,ДанныеПоДокументам.Характеристика КАК Характеристика
	|	,ДанныеПоДокументам.Партия КАК Партия
	|	,ДанныеПоДокументам.СтранаПроисхождения КАК СтранаПроисхождения
	|	,Максимум(ТабличнаяЧастьДокумента.Ссылка.Дата) КАК Период
	|Поместить ДанныеПоПериодам
	|Из ДанныеПоДокументам КАК ДанныеПоДокументам
	|	Соединение Документ.ПриходнаяНакладная.Запасы КАК ТабличнаяЧастьДокумента
	|	По ДанныеПоДокументам.Номенклатура = ТабличнаяЧастьДокумента.Номенклатура
	|		И ДанныеПоДокументам.Характеристика = ТабличнаяЧастьДокумента.Характеристика
	|		И ДанныеПоДокументам.Партия = ТабличнаяЧастьДокумента.Партия
	|		И ДанныеПоДокументам.СтранаПроисхождения = ТабличнаяЧастьДокумента.СтранаПроисхождения
	|		И ТабличнаяЧастьДокумента.НомерГТД = &НомерГТД
	|Сгруппировать по
	|	ДанныеПоДокументам.НомерСтроки
	|	,ДанныеПоДокументам.Номенклатура
	|	,ДанныеПоДокументам.Характеристика
	|	,ДанныеПоДокументам.Партия
	|	,ДанныеПоДокументам.СтранаПроисхождения
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеПоПериодам.НомерСтроки КАК НомерСтроки
	|	,ДанныеПоПериодам.Номенклатура КАК Номенклатура
	|	,ДанныеПоПериодам.Характеристика КАК Характеристика
	|	,ДанныеПоПериодам.Партия КАК Партия
	|	,ДанныеПоПериодам.СтранаПроисхождения КАК СтранаПроисхождения
	|	,ТабличнаяЧастьДокумента.Ссылка КАК ДокументПартии
	|Из ДанныеПоПериодам КАК ДанныеПоПериодам
	|	Соединение Документ.ПриходнаяНакладная.Запасы КАК ТабличнаяЧастьДокумента
	|	По ДанныеПоПериодам.Номенклатура = ТабличнаяЧастьДокумента.Номенклатура
	|		И ДанныеПоПериодам.Характеристика = ТабличнаяЧастьДокумента.Характеристика
	|		И ДанныеПоПериодам.Партия = ТабличнаяЧастьДокумента.Партия
	|		И ДанныеПоПериодам.СтранаПроисхождения = ТабличнаяЧастьДокумента.СтранаПроисхождения
	|		И ДанныеПоПериодам.Период = ТабличнаяЧастьДокумента.Ссылка.Дата
	|";
	
	Запрос = Новый Запрос(ТекстаЗапроса);
	Запрос.УстановитьПараметр("ТаблицаЗапасов", ТаблицаЗапасов);
	Запрос.УстановитьПараметр("НомерГТД", Объект.НомерГТД);
	ТаблицаДокументовПартий = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаЗапасов Из МассивСтрок Цикл
		
		НайденныеСтроки = ТаблицаДокументовПартий.НайтиСтроки(Новый Структура("НомерСтроки", СтрокаЗапасов.НомерСтроки));
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаЗапасов, НайденныеСтроки[0], "ДокументПартии");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиВРазделИзДокумента(ИдентификаторРаздела, Ошибки)
	
	Если НЕ ЗначениеЗаполнено(ЗапасыИзменениеСтрокЗначение) Тогда
		
		ТекстОшибки = НСтр("ru ='Для заполнения необходимо выбрать документ'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "ЗапасыИзменениеСтрокЗначение", ТекстОшибки, "");
		
	КонецЕсли;
	
	СтрокаРаздела = Объект.Разделы.НайтиПоИдентификатору(ИдентификаторРаздела);
	Если СтрокаРаздела = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Укажите раздел ГТД, в который необходимо добавить товары'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Разделы", ТекстОшибки, "");
		
	КонецЕсли;
	
	Если НЕ Ошибки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧастьДокумента.Номенклатура КАК Номенклатура
	|	,ТабличнаяЧастьДокумента.Характеристика КАК Характеристика
	|	,&ИмяПоляПартия КАК Партия
	|	,&ИмяПоляСтранаПроисхождения КАК СтранаПроисхождения
	|	,ТабличнаяЧастьДокумента.Количество КАК Количество
	|	,ТабличнаяЧастьДокумента.Сумма КАК Сумма
	|	,ТабличнаяЧастьДокумента.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	&ИмяТаблицыДокумента КАК ТабличнаяЧастьДокумента
	|ГДЕ
	|	ТабличнаяЧастьДокумента.Ссылка = &Ссылка И &ПроверкаНомераГТД";
	
	Если ТипЗнч(ЗапасыИзменениеСтрокЗначение) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяПоляПартия", "NULL");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяПоляСтранаПроисхождения", "ТабличнаяЧастьДокумента.Номенклатура.СтранаПроисхождения");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыДокумента", "Документ.ЗаказПоставщику.Запасы");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ПроверкаНомераГТД", "Истина");
		
	ИначеЕсли ТипЗнч(ЗапасыИзменениеСтрокЗначение) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяПоляПартия", "ТабличнаяЧастьДокумента.Партия");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяПоляСтранаПроисхождения", "ТабличнаяЧастьДокумента.СтранаПроисхождения");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыДокумента", "Документ.ПриходнаяНакладная.Запасы");
		
		ТекстЗамены = ?(ЗначениеЗаполнено(Объект.НомерГТД), "ТабличнаяЧастьДокумента.НомерГТД = &НомерГТД", "Истина");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ПроверкаНомераГТД", ТекстЗамены);
		
	ИначеЕсли ТипЗнч(ЗапасыИзменениеСтрокЗначение) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяПоляПартия", "ТабличнаяЧастьДокумента.Партия");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяПоляСтранаПроисхождения", "ТабличнаяЧастьДокумента.Номенклатура.СтранаПроисхождения");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ИмяТаблицыДокумента", "Документ.СчетНаОплатуПоставщика.Запасы");
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&ПроверкаНомераГТД", "Истина");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ШаблонТекстаЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ЗапасыИзменениеСтрокЗначение);
	Запрос.УстановитьПараметр("НомерГТД", Объект.НомерГТД);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Номенклатура, Характеристика, Партия, СтранаПроисхождения, Количество");
		
		НоваяСтрока.НомерРаздела = СтрокаРаздела.НомерСтроки;
		НоваяСтрока.ФактурнаяСтоимость = ?(Выборка.СуммаВключаетНДС, Выборка.Сумма - Выборка.Сумма*100/118, Выборка.Сумма);
		
		Если ТипЗнч(ЗапасыИзменениеСтрокЗначение) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
			
			НоваяСтрока.ДокументПартии = ЗапасыИзменениеСтрокЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиВРазделИзДокументовПриходнаяНакладная(ИдентификаторРаздела, Ошибки)
	
	СтрокаРаздела = Объект.Разделы.НайтиПоИдентификатору(ИдентификаторРаздела);
	Если СтрокаРаздела = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru ='Укажите раздел ГТД, в который необходимо добавить товары'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Разделы", ТекстОшибки, "");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерГТД) Тогда
		
		ТекстОшибки = НСтр("ru ='Укажите номер ГТД'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Разделы", ТекстОшибки, "");
		
	КонецЕсли;
	
	Если НЕ Ошибки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧастьДокумента.Номенклатура КАК Номенклатура
	|	,ТабличнаяЧастьДокумента.Характеристика КАК Характеристика
	|	,ТабличнаяЧастьДокумента.Партия КАК Партия
	|	,ТабличнаяЧастьДокумента.СтранаПроисхождения КАК СтранаПроисхождения
	|	,Сумма(ТабличнаяЧастьДокумента.Количество) КАК Количество
	|	,Сумма(ТабличнаяЧастьДокумента.Сумма) КАК Сумма
	|	,ТабличнаяЧастьДокумента.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
	|Из
	|	Документ.ПриходнаяНакладная.Запасы КАК ТабличнаяЧастьДокумента
	|Где
	|	ТабличнаяЧастьДокумента.НомерГТД = &НомерГТД
	|Сгруппировать по
	|	ТабличнаяЧастьДокумента.Номенклатура
	|	,ТабличнаяЧастьДокумента.Характеристика
	|	,ТабличнаяЧастьДокумента.Партия
	|	,ТабличнаяЧастьДокумента.СтранаПроисхождения
	|	,ТабличнаяЧастьДокумента.Ссылка.СуммаВключаетНДС";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НомерГТД", Объект.НомерГТД);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Номенклатура, Характеристика, Партия, СтранаПроисхождения, Количество");
		
		НоваяСтрока.НомерРаздела = СтрокаРаздела.НомерСтроки;
		НоваяСтрока.ФактурнаяСтоимость = ?(Выборка.СуммаВключаетНДС, Выборка.Сумма - Выборка.Сумма*100/118, Выборка.Сумма);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Разделы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НомерРаздела = Объект.Разделы.Индекс(СтрокаТабличнойЧасти) + 1;
	
	//Элементы.Разделы.ТекущаяСтрока = Объект.Разделы[НомерРаздела - 1].ПолучитьИдентификатор();
	Элементы.Запасы.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерРаздела", НомерРаздела);
	
	ЗаголовокНомерРаздела = Формат(НомерРаздела, "ЧЦ=");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти