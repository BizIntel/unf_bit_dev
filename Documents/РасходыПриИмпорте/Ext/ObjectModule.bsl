#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании приходная накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ПриходнаяНакладная - приходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения) Экспорт
	
	Организация				= ДанныеЗаполнения.Организация;
	СтруктурнаяЕдиница		= ДанныеЗаполнения.СтруктурнаяЕдиница;
	ВалютаДокумента			= Константы.НациональнаяВалюта.Получить();
	Курс					= ДанныеЗаполнения.Курс;
	Кратность				= ДанныеЗаполнения.Кратность;
	СуммаВключаетНДС		= ДанныеЗаполнения.СуммаВключаетНДС;
	НДСВключатьВСтоимость	= Истина;
	НалогообложениеНДС		= Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
	
	Если ДанныеЗаполнения.Запасы.Количество() > 0 Тогда
		
		НомерГТД			= ДанныеЗаполнения.Запасы[0].НомерГТД;
		
	КонецЕсли;
	
	КоличествоТоваровВРазделе = 0;
	
	Разделы.Очистить();
	Запасы.Очистить();
	
	НовыйРаздел = Разделы.Добавить();
	НовыйРаздел.СтавкаНДС = Организация.СтавкаНДСПоУмолчанию;
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.НомерРаздела		= 1;
		НоваяСтрока.ФактурнаяСтоимость	= СтрокаТабличнойЧасти.Сумма;
		НоваяСтрока.СуммаНДС			= СтрокаТабличнойЧасти.СуммаНДС;
		
		НовыйРаздел.ТаможеннаяСтоимость = НовыйРаздел.ТаможеннаяСтоимость + НоваяСтрока.ФактурнаяСтоимость;
		НовыйРаздел.СуммаНДС			= НовыйРаздел.СуммаНДС + НоваяСтрока.СуммаНДС;
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Заказ) = Тип("ДокументСсылка.ЗаказПоставщику")
			И ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
			
			НоваяСтрока.ЗаказПокупателя = СтрокаТабличнойЧасти.Заказ.ЗаказПокупателя;
			
		КонецЕсли;
		
		НоваяСтрока.ДокументПартии = ДанныеЗаполнения.Ссылка;
		
		КоличествоТоваровВРазделе = КоличествоТоваровВРазделе + 1;
		
	КонецЦикла;
	
	СтрокаСведений = НСтр("ru ='В этом разделе строк товаров: %1'");
	НовыйРаздел.СведенияОРазделеГТД = СтрШаблон(СтрокаСведений, КоличествоТоваровВРазделе);
	
	СуммаДокумента = НовыйРаздел.СуммаНДС;
	
КонецПроцедуры // ЗаполнитьПоПриходнойНакладной()

#КонецОбласти

#Область ОбработчикиСобыий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		
		Договор = Контрагент.ДоговорПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РасходыПриИмпорте.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПрочимиКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	//Документы.РасходыПриИмпорте.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходыПриИмпорте.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#КонецЕсли