&НаКлиенте
Процедура БылВыездПриИзменении(Элемент)
			
	Если Объект.БылВыезд Тогда
		УстановитьВидимостьКоличествоВыездов(Истина);
		Если НЕ ЗначениеЗаполнено(Объект.КоличествоВыездов) Тогда
			Объект.КоличествоВыездов = 1;		
		КонецЕсли;
		ПересчитатьСуммуВыезда();
		ПересчитатьСуммуДокумента();
	Иначе
		УстановитьВидимостьКоличествоВыездов(Ложь);
		Объект.КоличествоВыездов = 0;
		ПересчитатьСуммуВыезда();
		ПересчитатьСуммуДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВидУслугиПриИзменении(Элемент)
	
	//Показать или Скрыть колонку документа отгрузки ИТС в зависимости от того какой вид услуги выбран
	//И при этом включить или отключить проверку заполнения ячейки.
	// <<< УДАЛИТЬ УправлениеСвойствамиПоляДокОтгрузкиИТС();<<< 
	
	//Дальше чего-то Индус наделал
	//Творчество индуса хотя бы работает
	
	ТекущаяСтрокаУслуги = Элементы.Услуги.ТекущиеДанные;
	СписокНоменклатуры = ПолучитьСписокНоменклатурыПоВидуУслуги(ТекущаяСтрокаУслуги.ВидУслуги);
	
	НоваяНоменклатура = СписокНоменклатуры[0];
	СтараяНоменклатура = ТекущаяСтрокаУслуги.Номенклатура;
	
	Если НоваяНоменклатура = СтараяНоменклатура Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.УслугиНоменклатура.СписокВыбора.ЗагрузитьЗначения(СписокНоменклатуры);
	
	Если СписокНоменклатуры.Количество() = 1 Тогда	
		
		ТекущаяСтрокаУслуги.Номенклатура = СписокНоменклатуры[0];
		УслугиНоменклатураПриИзменении(Элемент);
		
	Иначе
		
		ТекущаяСтрокаУслуги.Номенклатура = Неопределено;
		ТекущаяСтрокаУслуги.Количество = Неопределено;
		ТекущаяСтрокаУслуги.ЕдиницаИзмерения = Неопределено;
		ТекущаяСтрокаУслуги.Цена = Неопределено;
		ТекущаяСтрокаУслуги.Сумма = Неопределено;
		ПересчитатьСуммуДокумента();
		
	КонецЕсли;
	
		
КонецПроцедуры

//Удалить
&НаКлиенте
Процедура УправлениеСвойствамиПоляДокОтгрузкиИТС()
	
	ТекущаяСтрокаУслуги = Элементы.Услуги.ТекущиеДанные;
	
	Если СокрЛП (ТекущаяСтрокаУслуги.ВидУслуги) = "ИТС Подписки" Тогда
		
		Элементы.УслугиДокументОтгрузкиИТС.Видимость = Истина;
	    //Включить проверку заполнения поля ДокументОтгрузкиИТС 
	Иначе 	
		Элементы.УслугиДокументОтгрузкиИТС.Видимость =  Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюПоляДокОтгрузкиИТС()
//<<<<Удалить

&НаСервереБезКонтекста
Функция  ПолучитьСписокНоменклатурыПоВидуУслуги(ВидУслуги)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	BizВидыУслугСписокНоменклатуры.Номенклатура
	|ИЗ
	|	Справочник.BizВидыУслуг.СписокНоменклатуры КАК BizВидыУслугСписокНоменклатуры
	|ГДЕ
	|	BizВидыУслугСписокНоменклатуры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ВидУслуги);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокНоменклатуры = Новый Массив;
	
	Если Выборка.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Пока Выборка.Следующий() Цикл
			СписокНоменклатуры.Добавить(Выборка.Номенклатура);	
		КонецЦикла;
		
		Возврат СписокНоменклатуры;
		
	КонецЕсли;
	
КонецФункции // ПолучитьНоменклатуруПоВидуУслуги()

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекСтрокаУслуги = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрокаУслуги = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("ДатаОбработки",	 Объект.Дата);
	СтруктураДанных.Вставить("Номенклатура", ТекСтрокаУслуги.Номенклатура);
	СтруктураДанных.Вставить("Характеристика", ТекСтрокаУслуги.Характеристика);	
	СтруктураДанных.Вставить("ВидЦенЗакупочная", Объект.ВидЦенЗакупочная);
	СтруктураДанных.Вставить("ВидЦенОптовая", Объект.ВидЦенОптовая);	
	СтруктураДанных.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("Коэффициент", 1);
	
	ПолучитьДанныеПоНоменклатуре(СтруктураДанных);
	
	ТекСтрокаУслуги.ЕдиницаИзмерения = СтруктураДанных.ЕдиницаИзмерения;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаУслуги.Количество) Тогда
		ТекСтрокаУслуги.Количество = 1;	
	КонецЕсли; 
	
	ТекСтрокаУслуги.Цена = СтруктураДанных.Цена;
	ПосчитатьСуммуСтрокеТЧУслуги();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоНоменклатуре(СтруктураДанных)
	
	Если Ложь Тогда
		СтруктураДанных = Новый Структура();	
	КонецЕсли;
	
	СтруктураДанных.Вставить("ЕдиницаИзмерения", СтруктураДанных.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанных.Вставить("ВидЦен",СтруктураДанных.ВидЦенЗакупочная);
	УчетнаяЦенаПоНоменклатуре = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
	
	СтруктураДанных.Вставить("ВидЦен",СтруктураДанных.ВидЦенОптовая);
	ОптоваяЦенаПоНоменклатуре = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
	
	Цена = ОптоваяЦенаПоНоменклатуре - УчетнаяЦенаПоНоменклатуре;
	
	СтруктураДанных.Вставить("Цена", Цена);
	
КонецПроцедуры // ОбработатьСтрокуТЧУслуги()

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокеТЧУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПосчитатьСуммуСтрокеТЧУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПосчитатьЦенуСтрокеТЧУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьСуммуСтрокеТЧУслуги()
	
	ТекСтрокаУслуги = Элементы.Услуги.ТекущиеДанные;
	ТекСтрокаУслуги.Сумма = ТекСтрокаУслуги.Количество * ТекСтрокаУслуги.Цена;
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры // ПосчитатьСуммуСтрокеТЧУслуги()

&НаКлиенте
Процедура ПосчитатьЦенуСтрокеТЧУслуги()
	
	ТекСтрокаУслуги = Элементы.Услуги.ТекущиеДанные;
	ТекСтрокаУслуги.Цена = ТекСтрокаУслуги.Сумма / ТекСтрокаУслуги.Количество;
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры // ПосчитатьЦенуСтрокеТЧУслуги()

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма") + Объект.СуммаВыездов;	
	
КонецПроцедуры // ПересчитатьСуммуДокумента()

&НаСервереБезКонтекста
Функция ПолучитьЦенуВыезда(СтруктураДанных)
	
	СтруктураДанных.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ЦенаВыезда = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);
	Возврат ЦенаВыезда;
	
КонецФункции // ПолучитьКОличествоВыезда()

&НаКлиенте
Процедура КоличествоВыездовПриИзменении(Элемент)
	
	ПересчитатьСуммуВыезда();
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуВыезда()
	
	Объект.СуммаВыездов = Объект.КоличествоВыездов * Объект.ЦенаВыезда;	
	
КонецПроцедуры // ПересчитатьСуммуВыезда()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
	СостояниеВРаботе = Справочники.СостоянияЗаказовПокупателей.ВРаботе;
	СостояниеВыполнен =  Справочники.СостоянияЗаказовПокупателей.Завершен;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеЗаказа) Тогда
		Объект.СостояниеЗаказа = СостояниеВРаботе;
	КонецЕсли;
	
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		Объект.Исполнитель = Пользователи.ТекущийПользователь();
		Объект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		Объект.НоменклатураВыезда = Константы.BizНоменклатураВыезда.Получить();
		Объект.ВидЦенЗакупочная = Справочники.ВидыЦен.Учетная;
		Объект.ВидЦенОптовая = Справочники.ВидыЦен.Оптовая;
		//Объект.ВидОперации = Перечисления.бизВидыСопровожденияКлиентов.ПодпискиИТС;
		
	    

				
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("ДатаОбработки",	 Объект.Дата);	
		СтруктураДанных.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанных.Вставить("ВидЦен", Объект.ВидЦенОптовая);
		СтруктураДанных.Вставить("Коэффициент", 1);
		СтруктураДанных.Вставить("Номенклатура", Объект.НоменклатураВыезда);		
		Объект.ЦенаВыезда = ПолучитьЦенуВыезда(СтруктураДанных);		
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда		
		Элементы.УслугиЦена.ТолькоПросмотр = Ложь;	
		Элементы.УслугиСумма.ТолькоПросмотр = Ложь;	
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.BizСтатусОбслуживанияКлиента.Завершен 
	ИЛИ Объект.Статус = Перечисления.BizСтатусОбслуживанияКлиента.КОплате
	Тогда
		Если РольДоступна("ПолныеПрава") Тогда
			ЭтаФорма.Доступность = Истина;	
		Иначе 	
			ЭтаФорма.Доступность = Ложь;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)	
УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект)
КонецПроцедуры  

&НаКлиенте
Процедура УстановитьВидимостьКоличествоВыездов(БулевоВидимость)

	Элементы.КоличествоВыездов.Видимость = БулевоВидимость;	

КонецПроцедуры // УстановитьВидимостьКоличествоВыездов()


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказатьФормуПоВидуОперации();
	
	Если Объект.БылВыезд Тогда	
		УстановитьВидимостьКоличествоВыездов(Истина);
		Объект.БылВыезд = Истина;	
	Иначе	
		УстановитьВидимостьКоличествоВыездов(Ложь);
		Объект.БылВыезд = Ложь;	
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуПоВидуОперации()
 	
	Если СокрЛП (Объект.ВидОперации) = "Услуги сопровождения ПП" Тогда
		Элементы.ДокументОтгрузкиИТС.Видимость = Ложь;
		Элементы.ГруппаТЧПодпискиИТС.Видимость = Ложь;
		Элементы.Услуги.Видимость = Истина;
		Элементы.СуммаВыездов.Видимость = Истина;
		Элементы.ГруппаВыезды.Видимость = Истина;
		Элементы.ЗНГруппаСтатусы.Видимость = Ложь;
		Элементы.ГруппаКоммандыИПоля.Видимость = Истина;
		Элементы.БезТарификации.Видимость = Истина;
	Иначе 
		Элементы.Услуги.Видимость = Ложь;
		Элементы.ГруппаВыезды.Видимость = Ложь;
		Элементы.СуммаВыездов.Видимость = Ложь;
		Элементы.ГруппаТЧПодпискиИТС.Видимость = Истина;
		Элементы.ДокументОтгрузкиИТС.Видимость = Истина;
		Элементы.Статус.Видимость = Ложь;
		Элементы.ГруппаШапкаЦентрГруппаШапкаПраво.Видимость = Ложь;
		Элементы.ГруппаКоммандыИПоля.Видимость = Ложь;
		Элементы.БезТарификации.Видимость = Ложь;
		//Управлять статусом обслуживания ИТС в зависимости от реквизитов СостояниеЗаказа и Закрыт
		
		Если Объект.СостояниеЗаказа = СостояниеВыполнен Тогда 
			Элементы.ЗНСтатусыЗначения.ТекущаяСтраница = Элементы.ЗНВыполнен;
		ИначеЕсли Объект.СостояниеЗаказа = СостояниеВРаботе И Объект.Закрыт = Ложь Тогда
			Элементы.ЗНСтатусыЗначения.ТекущаяСтраница = Элементы.ЗНВРаботе;
		ИначеЕсли Объект.СостояниеЗаказа = СостояниеВРаботе И Объект.Закрыт  Тогда
			Элементы.ЗНСтатусыЗначения.ТекущаяСтраница = Элементы.ЗНОтменен;
		КонецЕсли;		
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура УправлятьСтатусомОбслуживанияИТС()

	
КонецПроцедуры // УправлятьСтатусомОбслуживанияИТС()


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ РольДоступна("ПолныеПрава") 
	И ТекущийОбъект.Статус = Перечисления.BizСтатусОбслуживанияКлиента.НаИсправление	
	Тогда
		ТекущийОбъект.Статус = Перечисления.BizСтатусОбслуживанияКлиента.ВРаботе;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	 ПодтвердитьРешениеОЗаполненииТЧТовары(Элемент.ТекстРедактирования);
	
КонецПроцедуры

//Выбрать вид операции, 
//вывести вопрос о согласии пользователя на очистку табличных частей документа
//В случае утвердительного ответа перейти к смене втда операции
&НаКлиенте
Процедура ПодтвердитьРешениеОЗаполненииТЧТовары(ВидОперации)
    НаименованиеТЧ = ?(ВидОперации = "Услуги сопровождения ПП","ПодпискиИТС","Услуги");
	Если Объект[НаименованиеТЧ].Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект,НаименованиеТЧ );
	    ПоказатьВопрос(Оповещение,ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьФормуПоВидуОперации();
	КонецЕсли;
	
КонецПроцедуры // ПодтвердитьРешениеОЗаполненииТЧТовары()

//Обработать возврат кода диалога в результате ответа пользователя на вопрос о желании произвести заполнение ТЧ товары
&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ТабличнаяЧасть)Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект[ТабличнаяЧасть].Очистить();
		ПоказатьФормуПоВидуОперации();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	Объект.ПодпискиИТС.Очистить();
	ЗаполнитьТЧПодписки();
	ЗаполнитьТЧДокументыНаПечать();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПодписки()
	
Объект.ПодпискиИТС.Очистить();
	//Сформировать запрос к регистру накопления ДискиИТС


Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	бизДискиИТСОстатки.Организация,
               |	бизДискиИТСОстатки.ВидПодписки,
               |	бизДискиИТСОстатки.ПериодПодписки,
               |	бизДискиИТСОстатки.СрокПодписки,
               |	бизДискиИТСОстатки.КоличествоОстаток,
               |	бизОплатаИТССрезПоследних.Цена,
               |	ВЫБОР
               |		КОГДА бизНарядыНаИТССрезПоследних.Доставка
               |			ТОГДА бизОплатаИТССрезПоследних.ТарифДоставки
               |		ИНАЧЕ бизОплатаИТССрезПоследних.Вознаграждение
               |	КОНЕЦ КАК Вознаграждение,
               |	бизНарядыНаИТССрезПоследних.Доставка,
               |	бизНарядыНаИТССрезПоследних.СервисИнженер
               |ИЗ
               |	РегистрСведений.бизНарядыНаИТС.СрезПоследних(&Период, Контрагент = &Контрагент) КАК бизНарядыНаИТССрезПоследних
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бизДискиИТС.Остатки(&Период, Контрагент = &Контрагент) КАК бизДискиИТСОстатки
               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бизОплатаИТС.СрезПоследних(&Период, ) КАК бизОплатаИТССрезПоследних
               |			ПО бизДискиИТСОстатки.ВидПодписки = бизОплатаИТССрезПоследних.ВидПодписки
               |				И бизДискиИТСОстатки.СрокПодписки = бизОплатаИТССрезПоследних.СрокПодписки
               |		ПО бизНарядыНаИТССрезПоследних.Контрагент = бизДискиИТСОстатки.Контрагент";
Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
Запрос.УстановитьПараметр("Период",Объект.Дата);
СотрудникПользователя = бизСлужебныйНаСервере.ПолучитьСсылкуНаСотрудникаПользователя(Объект.Исполнитель);
Запрос.УстановитьПараметр("СервисИнженер", СотрудникПользователя);

ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();

Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

	Строка = Объект.ПодпискиИТС.Добавить();
	Строка.Организация = ВыборкаДетальныеЗаписи.Организация;
	Строка.ВидПодписки = ВыборкаДетальныеЗаписи.ВидПодписки;
	Строка.ПериодПодписки = ВыборкаДетальныеЗаписи.ПериодПодписки;
	Строка.Доставка = ВыборкаДетальныеЗаписи.Доставка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СотрудникиПользователя.Пользователь КАК Исполнитель
	               |ИЗ
	               |	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	               |ГДЕ
	               |	СотрудникиПользователя.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", ВыборкаДетальныеЗаписи.СервисИнженер);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();		
	КонецЕсли;
	
	Строка.Исполнитель = Выборка.Исполнитель;
	Строка.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;
	Строка.Цена = ВыборкаДетальныеЗаписи.Цена;
	Строка.СрокПодписки = ВыборкаДетальныеЗаписи.СрокПодписки;
	Строка.Вознаграждение = ВыборкаДетальныеЗаписи.Вознаграждение;
	Строка.Статус = ? (Объект.СостояниеЗаказа = СостояниеВыполнен, Перечисления.BizСтатусОбслуживанияКлиента.КОплате, Перечисления.BizСтатусОбслуживанияКлиента.ВРаботе);
	
КонецЦикла;

КонецПроцедуры
&НаСервере
Процедура ЗаполнитьТЧДокументыНаПечать()
    ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДокументыНаПечать.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИСТИНА КАК Пометка,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателя.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.бизВидыДокументов.ЗаказНаряд)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЗаказПокупателя.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.бизВидыДокументов.ЗаказНаПродажу)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ВидДокумента,
	               |	ЗаказПокупателя.Ссылка КАК Документ,
	               |	ЗаказПокупателя.СуммаДокумента КАК Сумма
	               |ПОМЕСТИТЬ ВыборкаЗаПериод
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Контрагент = &Контрагент
	               |	И ЗаказПокупателя.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачалаУчета, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И НЕ ЗаказПокупателя.Запасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	               |	И НЕ ЗаказПокупателя.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказПокупателя.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ЗаказПокупателя.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.бизВидыДокументов.ЗаказНаряд)
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ЗаказПокупателя.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу)
	               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.бизВидыДокументов.ЗаказНаПродажу)
	               |			КОНЕЦ
	               |	КОНЕЦ,
	               |	ЗаказПокупателя.СуммаДокумента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ИСТИНА,
	               |	ЗНАЧЕНИЕ(Перечисление.бизВидыДокументов.РасходнаяНакладная),
	               |	РасходнаяНакладная.Ссылка,
	               |	РасходнаяНакладная.СуммаДокумента
	               |ИЗ
	               |	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	               |ГДЕ
	               |	РасходнаяНакладная.Контрагент = &Контрагент
	               |	И РасходнаяНакладная.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачалаУчета, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И РасходнаяНакладная.Запасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |	И РасходнаяНакладная.Запасы.Номенклатура.КатегорияНоменклатуры <> &КатегорияНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	BizАктОбслуживанияКлиентаДокументыНаПечать.Ссылка КАК Ссылка,
	               |	BizАктОбслуживанияКлиентаДокументыНаПечать.Документ КАК Документ
	               |ПОМЕСТИТЬ ВыборкаЗаПериодАктОбсл
	               |ИЗ
	               |	Документ.BizАктОбслуживанияКлиента.ДокументыНаПечать КАК BizАктОбслуживанияКлиентаДокументыНаПечать
	               |ГДЕ
	               |	BizАктОбслуживанияКлиентаДокументыНаПечать.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачалаУчета, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	               |	И BizАктОбслуживанияКлиентаДокументыНаПечать.Ссылка.Контрагент = &Контрагент
	               |	И BizАктОбслуживанияКлиентаДокументыНаПечать.Ссылка <> &ТекущийДокумент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыборкаЗаПериод.Пометка,
	               |	ВыборкаЗаПериод.ВидДокумента,
	               |	ВыборкаЗаПериод.Документ,
	               |	ВыборкаЗаПериод.Сумма
	               |ИЗ
	               |	ВыборкаЗаПериод КАК ВыборкаЗаПериод
	               |ГДЕ
	               |	НЕ ВыборкаЗаПериод.Документ В
	               |				(ВЫБРАТЬ
	               |					ВыборкаЗаПериодАктОбсл.Документ
	               |				ИЗ
	               |					ВыборкаЗаПериодАктОбсл КАК ВыборкаЗаПериодАктОбсл)";
	Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
	Запрос.УстановитьПараметр("ДатаНачалаУчета",Константы.бизДатаНачалаПечатиДокументов.Получить());
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	Запрос.УстановитьПараметр("КатегорияНоменклатуры",Справочники.КатегорииНоменклатуры.НайтиПоНаименованию("Подписки ИТС"));
	Запрос.УстановитьПараметр("ТекущийДокумент",Объект.Ссылка);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ТаблицаЗначений = РезультатЗапроса.Выгрузить();
	
	ДокументОбъект.ДокументыНаПечать.Загрузить(ТаблицаЗначений);
    ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура ДокументОтгрузкиИТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ПолучитьМассивСсылокНаДокументыОтгрузки();
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ФиксированныеНастройки",ФиксированныеНастройки);
	ОткрытьФорму("Документ.РасходнаяНакладная.ФормаВыбора",ЗначенияОтбора,Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСсылокНаДокументыОтгрузки()
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	РасходнаяНакладнаяЗапасы.Ссылка
               |ИЗ
               |	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
               |ГДЕ
			   |	РасходнаяНакладнаяЗапасы.Номенклатура.КатегорияНоменклатуры = &КатегорияНоменклатуры
               |	И РасходнаяНакладнаяЗапасы.Ссылка.Контрагент = &Контрагент
               |	И РасходнаяНакладнаяЗапасы.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
               |	И РасходнаяНакладнаяЗапасы.Ссылка.Проведен = ИСТИНА";
Запрос.УстановитьПараметр("КатегорияНоменклатуры",Справочники.КатегорииНоменклатуры.НайтиПоНаименованию("Подписки ИТС"));
Запрос.УстановитьПараметр("Контрагент",Объект.Контрагент);
Запрос.УстановитьПараметр("Дата",Объект.Дата);
ТЗ = Запрос.Выполнить().Выгрузить();
РасходныеНакладныеМассив = ТЗ.ВыгрузитьКолонку("Ссылка");
Возврат РасходныеНакладныеМассив;

КонецФункции // ПолучитьМассивСсылокНаДокументыОтгрузки()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Если Объект.ВидОперации = ПолучитьВидОперации() Тогда
	ЗаполнитьТЧПодписки();
	ЗаполнитьТЧДокументыНаПечать();
	МассивДокументовОтгрузки = ПолучитьМассивСсылокНаДокументыОтгрузки();
	
	Попытка	
	Объект.ДокументОтгрузкиИТС = МассивДокументовОтгрузки[0];	
	Исключение
	КонецПопытки;
	
	ОбновитьСуммуДокумента();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВидОперации()
	Возврат Перечисления.бизВидыСопровожденияКлиентов.ПодпискиИТС;
КонецФункции // ПолучитьВидОперации()

&НаКлиенте
Процедура ДокументОтгрузкиИТСПриИзменении(Элемент)
 ОбновитьСуммуДокумента();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммуДокумента()
Объект.СуммаДокумента = Объект.ДокументОтгрузкиИТС.СуммаДокумента;
КонецПроцедуры // ОбновитьСуммуДокумента()

&НаКлиенте
Процедура ЗНВРаботеВыполнить(Команда)
	Элементы.ЗНСтатусыЗначения.ТекущаяСтраница = Элементы.ЗНВыполнен;
	Объект.СостояниеЗаказа = СостояниеВыполнен;
	Объект.Закрыт = Истина;
	
	Для каждого Запись Из Объект.ПодпискиИТС Цикл
	    Запись.Статус = ПредопределенноеЗначение("Перечисление.BizСтатусОбслуживанияКлиента.КОплате");	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗНВРаботеОтменить(Команда)
	Элементы.ЗНСтатусыЗначения.ТекущаяСтраница = Элементы.ЗНОтменен;
	Объект.СостояниеЗаказа = СостояниеВРаботе;
	Объект.Закрыт = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗНВыполненВРаботу(Команда)
	Элементы.ЗНСтатусыЗначения.ТекущаяСтраница = Элементы.ЗНВРаботе;
	Объект.СостояниеЗаказа = СостояниеВРаботе;
	Объект.Закрыт = Ложь;
	
	Для каждого Запись Из Объект.ПодпискиИТС Цикл
	    Запись.Статус = ПредопределенноеЗначение("Перечисление.BizСтатусОбслуживанияКлиента.ВРаботе");	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗНОтмененВРаботу(Команда)
	Элементы.ЗНСтатусыЗначения.ТекущаяСтраница = Элементы.ЗНВРаботе;
	Объект.СостояниеЗаказа = СостояниеВРаботе;
	Объект.Закрыт = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	ТекДанные = Элементы.Услуги.ТекущиеДанные;
	ТекДанные.Сумма = ТекДанные.Цена*ТекДанные.Количество - ТекДанные.СуммаСкидки;
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиПриИзменении(Элемент)
	СуммаДокумента=Объект.СуммаДокумента;
	Если СуммаДокумента = 0 Тогда
		Возврат
	КонецЕсли;
	Если Объект.СуммаВыездов > 0 Тогда
	     СуммаДокумента = СуммаДокумента-Объект.СуммаВыездов;
	КонецЕсли;
	
	Для каждого Строка Из Объект.Услуги Цикл
		СуммаБезСкидки=Строка.Цена*Строка.Количество;
		КоэффициентСкидки =  СуммаБезСкидки/СуммаДокумента;
		Строка.СуммаСкидки = Объект.СуммаСкидки*КоэффициентСкидки;
		Строка.Сумма = СуммаБезСкидки-Строка.СуммаСкидки;		
	КонецЦикла;
	Объект.СуммаСкидки = Объект.СуммаВыездов+Объект.Услуги.Итог("СуммаСкидки");
	Объект.СуммаДокумента = Объект.СуммаВыездов+Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры







