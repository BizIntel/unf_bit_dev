#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	ЗаказВШапке = (ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке);
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		ИначеЕсли ЗаказВШапке Тогда
			ТекСтрока.Заказ = Заказ;
		Иначе
			ТекСтрока.Заказ = ?(ТекСтрока.Заказ = Неопределено, Документы.ЗаказПокупателя.ПустаяСсылка(), ТекСтрока.Заказ);
		КонецЕсли;
		ТекСтрока.ВсегоРасч = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("Заказ", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("Заказ Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаРегОстаток) КАК СуммаРегОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРегОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаРег, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В(&Заказ)
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРег, 0) = 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|						КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|							ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|						ИНАЧЕ 1
	|					КОНЕЦ * (РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс / РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность)
	|			ИНАЧЕ РасчетыСПокупателямиОстатки.СуммаРег / ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|						ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРегОстаток, 0) КАК СуммаРег,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";

	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "Заказ");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредоплату()

// Обработчик заполнения документа по структуре
//
// Параметры:
//
Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Основание, "ВидОперации") = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Расходную накладную на основании заказ-наряда!'");
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("МассивЗаказовПокупателей") Тогда
		ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДокументОснованиеПродажа") Тогда
		ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения.ДокументОснованиеПродажа, "Продажа");
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДокументОснованиеВозврат") Тогда
		ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения.ДокументОснованиеВозврат, "Возврат");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик заполнения документа на основании Приходной накладной.
//
// Параметры:
//  ДанныеЗаполнения - Структура - Основание для заполнения документа.
//
Процедура ЗаполнитьПоПриходнойНакладной(ДанныеЗаполнения, Операция = "") Экспорт
	
	// Заполнение шапки документа.
	Если Операция = "Продажа" Тогда
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика
			ИЛИ ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
		Иначе
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможен ввод операции ""Продажа покупателю"" на основании операции - ""%1""!'"),
			ДанныеЗаполнения.ВидОперации);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	ИначеЕсли Операция = "Возврат" Тогда
				
		Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки;
		ИначеЕсли ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение Тогда
			ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения;
		Иначе
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможен ввод операции ""Возврат"" на основании операции - ""%1""!'"),
			ДанныеЗаполнения.ВидОперации);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки") 
		И ДанныеЗаполнения.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Заказ = ДанныеЗаполнения.Заказ;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения Тогда
		Контрагент = ДанныеЗаполнения.Контрагент;
		Договор = ДанныеЗаполнения.Договор;
		НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС;
	Иначе	
		НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Дата);
	КонецЕсли;
	
	СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
	Ячейка = ДанныеЗаполнения.Ячейка;
	ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
	НДСВключатьВСтоимость = ДанныеЗаполнения.НДСВключатьВСтоимость;
	
	Курс = ДанныеЗаполнения.Курс;
	Кратность = ДанныеЗаполнения.Кратность;
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	СерийныеНомера.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти, ,"Цена, Сумма, СуммаНДС, Всего");
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти, "СтранаПроисхождения, НомерГТД");
			
		КонецЕсли;
		
		НоваяСтрока.ТипНоменклатурыЗапас = (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
		
		Если НЕ ДанныеЗаполнения.ПоложениеЗаказаПоставщику = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке
			И УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки") Тогда
			НоваяСтрока.Заказ = Неопределено;
		КонецЕсли;
		
		Если НалогообложениеНДС = ДанныеЗаполнения.НалогообложениеНДС Тогда
			Продолжить;
		КонецЕсли;
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = Организация.СтавкаНДСПоУмолчанию;
				КонецЕсли;
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
					СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
					СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
					СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
					СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
				
			КонецЦикла;
			
		Иначе
			
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;
			
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
				
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
				
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры // ЗаполнитьПоПриходнаяНакладная()

// Обработчик заполнения на основании Заказа покупателя.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ПриходнаяНакладная - Основание для заполнения документа.
//
Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	
	Если ЭтоВводНаОснованииЗаказНаряда(ДанныеЗаполнения) Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Расходную накладную на основании заказ-наряда!'");
	КонецЕсли;
	
	// Основание и настройка документа.
	МассивЗаказов = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивЗаказовПокупателей") Тогда
		МассивЗаказов = ДанныеЗаполнения.МассивЗаказовПокупателей;
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
	Иначе
		МассивЗаказов.Добавить(ДанныеЗаполнения.Ссылка);
		ПоложениеЗаказаПокупателя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПоложениеЗаказаПокупателяВДокументахОтгрузки");
		Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
			ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		КонецЕсли;
		Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			Заказ = ДанныеЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение шапки.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ОснованиеСсылка,
	|	ЗаказПокупателя.Проведен КАК ОснованиеПроведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателя.Организация.БанковскийСчетПоУмолчанию
	|		ИНАЧЕ ЗаказПокупателя.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА РезервированиеЗапасов.Значение
	|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
	|	ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Курс
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
	|			ТОГДА ЗаказПокупателя.Кратность
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказПокупателя.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивЗаказов)";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияПроверяемыхРеквизитов = Новый Структура("СостояниеЗаказа, Проведен", Выборка.СостояниеЗаказа, Выборка.ОснованиеПроведен);
		Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
		Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя В (&МассивЗаказов)
	|					И (Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя,
	|		ДвиженияДокументаЗаказыПокупателей.Номенклатура,
	|		ДвиженияДокументаЗаказыПокупателей.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ЗаказПокупателя,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка В(&МассивЗаказов)
	|	И (ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Заказ,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивЗаказов)";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя,Номенклатура,Характеристика");
	
	// АвтоматическиеСкидки.
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		СкидкиНаценкиЗаказа = МассивРезультатов[2].Выгрузить();
		СкидкиНаценки.Очистить();
	КонецЕсли;
	// Конец АвтоматическиеСкидки.
	
	Запасы.Очистить();
	СерийныеНомера.Очистить();
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.Заказ);
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			КоличествоКСписанию = Окр(Выборка.Количество * Выборка.Коэффициент, 3);
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				
				КоличествоКСписанию = Окр((КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент, 3);
				
				СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьСуммуСтрокиТабличнойЧасти(
					Новый Структура("Количество, Цена, Сумма, ПроцентСкидкиНаценки, СтавкаНДС, СуммаНДС, СуммаВключаетНДС, Всего",
						КоличествоКСписанию, Выборка.Цена, 0, Выборка.ПроцентСкидкиНаценки, Выборка.СтавкаНДС, 0, СуммаВключаетНДС, 0));
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
				
			КонецЕсли;
			
			// АвтоматическиеСкидки
			Если ИспользоватьАвтоматическиеСкидки Тогда
				КоличествоВДокументе = Выборка.Количество * Выборка.Коэффициент;
				ПересчитатьСуммы = КоличествоВДокументе <> КоличествоКСписанию;
				КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВДокументе, 1);
				Если КоэффициентПересчетаСкидки <> 1 Тогда
					НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
				КонецЕсли;
				
				// Формирование табличной части скидок
				СуммаКРаспределению = НоваяСтрока.СуммаАвтоматическойСкидки;
				
				ЕстьСтрокаСкидки = Ложь;
				Если Выборка.КлючСвязи <> 0 Тогда
					Для Каждого СтрокаСкидкиЗаказа ИЗ СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("Заказ,КлючСвязи", Выборка.Заказ, Выборка.КлючСвязи)) Цикл
						
						СтрокаСкидки = СкидкиНаценки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
						СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
						СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
						ЕстьСтрокаСкидки = Истина;
						
					КонецЦикла;
				КонецЕсли;
				
				Если ЕстьСтрокаСкидки И СуммаКРаспределению <> 0 Тогда
					СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
				КонецЕсли;
			КонецЕсли;
			// Конец АвтоматическиеСкидки
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение резервов.
	Если Запасы.Количество() > 0
		И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗаполнитьКолонкуРезервПоРезервам();
	КонецЕсли;
	
	// АвтоматическиеСкидки.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		РезультатРасчетаСкидокНаценок = СкидкиНаценки.Выгрузить();
		СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ЭтотОбъект, "Запасы", РезультатРасчетаСкидокНаценок);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

// Обработчик заполнения документа на основании Заказа поставщику.
//
// Параметры:
//  ЗаказПоставщику - ДокументСсылка.ЗаказПоставщику.
//
Процедура ЗаполнитьПоЗаказуПоставщику(ЗаказПоставщику) Экспорт
	
	Если УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки") Тогда
		Заказ = ЗаказПоставщику.Ссылка;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	// Заполнение шапки.
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказПоставщику,
	"Организация, ВидОперации, СтруктурнаяЕдиницаРезерв, Контрагент, Договор, ВалютаДокумента, НалогообложениеНДС, СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность, СостояниеЗаказа, Проведен");
	
	Документы.ЗаказПоставщику.ПроверитьВозможностьВводаНаОснованииЗаказаПоставщику(ЗаказПоставщику, ЗначенияРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Контрагент, Договор, ВалютаДокумента, НалогообложениеНДС, СуммаВключаетНДС, НДСВключатьВСтоимость, Курс, Кратность");
	ЭтотОбъект.ДокументОснование = ЗаказПоставщику;
	
	Если НЕ ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()), Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	// Заполнение табличной части.
	Запасы.Очистить();
	СерийныеНомера.Очистить();
	Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку Тогда
		ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку;
		СтруктурнаяЕдиница = ЗначенияРеквизитов.СтруктурнаяЕдиницаРезерв;
		НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
		ЗаполнитьПоЗаказПоставщикуНаПереработку(ЗаказПоставщику);
	Иначе
		ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику;
		ЗаполнитьПоЗаказПоставщикуНаЗакупку(ЗаказПоставщику);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщику()

// Процедура заполнения документа на основании заказа поставщику.
//
// Параметры:
//  ДанныеЗаполнения - Структура - Данные заполнения документа
//
Процедура ЗаполнитьПоЗаказПоставщикуНаПереработку(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ЗаказыОстатки.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗаказыОстатки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ЗаказыОстатки.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ЗаказыОстатки.Заказ.Организация.СтавкаНДСПоУмолчанию
	|		ИНАЧЕ ЗаказыОстатки.Номенклатура.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	ЗаказыОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказыОстатки.Заказ КАК Заказ,
	|	СУММА(ЗаказыОстатки.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПоставщикуМатериалы.НомерСтроки КАК НомерСтроки,
	|		ЗаказПоставщикуМатериалы.Номенклатура КАК Номенклатура,
	|		ЗаказПоставщикуМатериалы.Характеристика КАК Характеристика,
	|		ЗаказПоставщикуМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказПоставщикуМатериалы.Ссылка КАК Заказ,
	|		ЗаказПоставщикуМатериалы.Количество КАК Количество
	|	ИЗ
	|		Документ.ЗаказПоставщику.Материалы КАК ЗаказПоставщикуМатериалы
	|	ГДЕ
	|		ЗаказПоставщикуМатериалы.Ссылка = &ДокументОснование
	|		И ЗаказПоставщикуМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриходнаяНакладнаяЗапасы.НомерСтроки,
	|		ПриходнаяНакладнаяЗапасы.Номенклатура,
	|		ПриходнаяНакладнаяЗапасы.Характеристика,
	|		ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|		ПриходнаяНакладнаяЗапасы.Заказ,
	|		ПриходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|	ГДЕ
	|		ПриходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И ПриходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика)
	|		И ПриходнаяНакладнаяЗапасы.Заказ = &ДокументОснование
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасходнаяНакладнаяЗапасы.НомерСтроки,
	|		РасходнаяНакладнаяЗапасы.Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Характеристика,
	|		РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|		РасходнаяНакладнаяЗапасы.Заказ,
	|		-РасходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|	ГДЕ
	|		РасходнаяНакладнаяЗапасы.Ссылка.Проведен
	|		И РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|		И РасходнаяНакладнаяЗапасы.Заказ = &ДокументОснование
	|		И НЕ РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЗаказыОстатки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЗаказыОстатки.Номенклатура,
	|	ВЫБОР
	|		КОГДА ЗаказыОстатки.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ЗаказыОстатки.Заказ.Организация.СтавкаНДСПоУмолчанию
	|		ИНАЧЕ ЗаказыОстатки.Номенклатура.СтавкаНДС
	|	КОНЕЦ,
	|	ЗаказыОстатки.Характеристика,
	|	ЗаказыОстатки.ЕдиницаИзмерения,
	|	ЗаказыОстатки.Заказ,
	|	ЗаказыОстатки.Номенклатура.СтранаПроисхождения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.Количество) > 0";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если НЕ НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
	// Заполнение резервов.
	Если Запасы.Количество() > 0
		И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗаполнитьКолонкуРезервПоРезервам();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщикуНаПереработку()

// Процедура заполнения документа на основании заказа поставщику.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказПоставщикуНаЗакупку(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				ЗаказПоставщику = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗаказыПоставщикам.Номенклатура,
	|		ДвиженияДокументаЗаказыПоставщикам.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗаказыПоставщикам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПоставщикам.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПоставщикам.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК ДвиженияДокументаЗаказыПоставщикам
	|	ГДЕ
	|		ДвиженияДокументаЗаказыПоставщикам.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗаказыПоставщикам.ЗаказПоставщику = &ДокументОснование) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипНоменклатурыЗапас,
	|	ЗаказПоставщикуЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПоставщикуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПоставщикуЗапасы.Количество КАК Количество,
	|	ЗаказПоставщикуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПоставщикуЗапасы.Цена КАК Цена,
	|	ЗаказПоставщикуЗапасы.Сумма КАК Сумма,
	|	ЗаказПоставщикуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщикуЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщикуЗапасы.Всего КАК Всего,
	|	ЗаказПоставщикуЗапасы.Содержание КАК Содержание,
	|	ЗаказПоставщикуЗапасы.Ссылка КАК Заказ
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Ссылка = &ДокументОснование
	|	И ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	Выборка = МассивРезультатов[1].Выбрать();
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		
		МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество() = 0 Тогда
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) = Выборка.Количество Тогда
			
			Продолжить;
			
		ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) > Выборка.Количество Тогда
			
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - Выборка.Количество * Выборка.Коэффициент;
			Продолжить;
			
		ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) < Выборка.Количество Тогда
			
			КоличествоКСписанию = -1 * (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент - Выборка.Количество);
			МассивСтрокОстатков[0].КоличествоОстаток = 0;
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьСуммуСтрокиТабличнойЧасти(
				Новый Структура("Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, СуммаВключаетНДС, Всего",
					КоличествоКСписанию, Выборка.Цена, 0, Выборка.СтавкаНДС, 0, СуммаВключаетНДС, 0));
					
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоЗаказПоставщикуНаЗакупку()

// Процедура заполнения документа на основании приходной накладной.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ПриходнаяНакладная - приходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоСчетуНаОплату(ДанныеЗаполнения) Экспорт
	
	// Заполнение шапки документа.
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения.Ссылка;
	
	ВидОперации			= Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	Организация			= ДанныеЗаполнения.Организация;
	
	БанковскийСчет		= ДанныеЗаполнения.БанковскийСчет;
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) 
		И ЗначениеЗаполнено(Организация) Тогда
		
		БанковскийСчет = Организация.БанковскийСчетПоУмолчанию;
		
	КонецЕсли;
	
	Контрагент			= ДанныеЗаполнения.Контрагент;
	Договор				= ДанныеЗаполнения.Договор;
	ВидЦен				= ДанныеЗаполнения.ВидЦен;
	ВидСкидкиНаценки	= ДанныеЗаполнения.ВидСкидкиНаценки;
	ВалютаДокумента		= ДанныеЗаполнения.ВалютаДокумента;
	СуммаВключаетНДС	= ДанныеЗаполнения.СуммаВключаетНДС;
	НалогообложениеНДС	= ДанныеЗаполнения.НалогообложениеНДС;
	// ДисконтныеКарты
	ДисконтнаяКарта = ДанныеЗаполнения.ДисконтнаяКарта;
	ПроцентСкидкиПоДисконтнойКарте = ДанныеЗаполнения.ПроцентСкидкиПоДисконтнойКарте;
	// Конец ДисконтныеКарты
		
	Если ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		Курс		= ДанныеЗаполнения.Курс;
		Кратность	= ДанныеЗаполнения.Кратность;
	Иначе
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс		= СтруктураПоВалюте.Курс;
		Кратность	= СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	ЗаказВТабличнойЧасти = НЕ УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки");	
	Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаказПокупателяДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ЗаказПокупателяДляЗаполнения = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗаказВТабличнойЧасти Тогда
		Заказ = ЗаказПокупателяДляЗаполнения;
	КонецЕсли;
	 
	// Заполнение табличной части документа.
	Запасы.Очистить();
	СерийныеНомера.Очистить();
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			ИЛИ СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
			НоваяСтрока.ТипНоменклатурыЗапас = (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
			
			Если ЗаказВТабличнойЧасти Тогда
				
				НоваяСтрока.Заказ = ЗаказПокупателяДляЗаполнения;
				
			КонецЕсли;
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
				
				НоваяСтрока.СтранаПроисхождения = СтрокаТабличнойЧасти.Номенклатура.СтранаПроисхождения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// АвтоматическиеСкидки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
		СкидкиНаценки.Очистить();
		Для каждого СтрокаТабличнойЧасти Из ДанныеЗаполнения.СкидкиНаценки Цикл
			Если Запасы.Найти(СтрокаТабличнойЧасти.КлючСвязи, "КлючСвязи") <> Неопределено Тогда
				НоваяСтрокаСкидкиНаценки = СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСкидкиНаценки, СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // ЗаполнитьПоСчетНаОплату()

// Обработчик заполнения на основании ПеремещениеЗапасов.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ПеремещениеЗапасов - Основание для заполнения документа.
//
Процедура ЗаполнитьПоПеремещениюЗапасов(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
		ДокументСсылкаПеремещениеЗапасов = ДанныеЗаполнения;
	Иначе
		возврат;
	КонецЕсли;
	
	//Если перемещение введено на основании заказа покупателя, заполняем расходную накладную на основании этого заказа, но со складом-получателем перемещения
	ТабЗаказов = ДокументСсылкаПеремещениеЗапасов.Запасы.Выгрузить(,"ЗаказПокупателя");
	ТабЗаказов.Свернуть("ЗаказПокупателя");
	Если ТабЗаказов.Количество() = 1 И ЗначениеЗаполнено(ТабЗаказов[0].ЗаказПокупателя) Тогда
		ОдинЗаказПокупателяВСтроках = Истина;
	Иначе
		ОдинЗаказПокупателяВСтроках = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылкаПеремещениеЗапасов.ЗаказПокупателя) ИЛИ (НЕ ОдинЗаказПокупателяВСтроках) Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.СтруктурнаяЕдиницаПолучатель КАК СтруктурнаяЕдиница,
		|	ТаблицаДокумента.ЯчейкаПолучатель КАК Ячейка,
		|	ТаблицаДокумента.Запасы.(
		|		НомерСтроки,
		|		Номенклатура,
		|		ВЫБОР
		|			КОГДА ТаблицаДокумента.Запасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ТипНоменклатурыЗапас,
		|		Характеристика,
		|		Партия,
		|		ЕдиницаИзмерения,
		|		Количество,
		|		Резерв,
		|		ЗаказПокупателя,
		|		СерийныеНомера,
		|		КлючСвязи
		|	)
		|ИЗ
		|	Документ.ПеремещениеЗапасов КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПеремещениеЗапасов);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		Запасы.Загрузить(Выборка.Запасы.Выгрузить());
		
		РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДокументСсылкаПеремещениеЗапасов);
		
	Иначе
		
		ЭтотОбъект.Заказ = ДокументСсылкаПеремещениеЗапасов.ЗаказПокупателя;
		
		// Заполнение шапки.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Заказ,
		|	ЗаказПокупателя.Ссылка КАК ОснованиеСсылка,
		|	&ДокументСсылкаПеремещениеЗапасов КАК ДокументОснование,
		|	ЗаказПокупателя.Проведен КАК ОснованиеПроведен,
		|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ЗаказПокупателя.Организация.БанковскийСчетПоУмолчанию
		|		ИНАЧЕ ЗаказПокупателя.БанковскийСчет
		|	КОНЕЦ КАК БанковскийСчет,
		|	ВЫБОР
		|		КОГДА РезервированиеЗапасов.Значение
		|			ТОГДА ЗаказПокупателя.СтруктурнаяЕдиницаРезерв
		|	КОНЕЦ КАК СтруктурнаяЕдиницаОтправитель,
		|   &СкладПолучатель КАК СтруктурнаяЕдиница,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Договор КАК Договор,
		|	ЗаказПокупателя.ВидЦен КАК ВидЦен,
		|	ЗаказПокупателя.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
		|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
		|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
		|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
		|			ТОГДА ЗаказПокупателя.Курс
		|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
		|	КОНЕЦ КАК Курс,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.ВалютаДокумента = НациональнаяВалюта.Значение
		|			ТОГДА ЗаказПокупателя.Кратность
		|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
		|	КОНЕЦ КАК Кратность
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних
		|		ПО ЗаказПокупателя.Договор.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта},
		|	Константа.НациональнаяВалюта КАК НациональнаяВалюта,
		|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК РезервированиеЗапасов
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ЗаказВПеремещенииЗапасов";
		
		Запрос.УстановитьПараметр("ЗаказВПеремещенииЗапасов", ДокументСсылкаПеремещениеЗапасов.ЗаказПокупателя);
		Запрос.УстановитьПараметр("СкладПолучатель", ДокументСсылкаПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель);
		Запрос.УстановитьПараметр("ДокументСсылкаПеремещениеЗапасов", ДокументСсылкаПеремещениеЗапасов);
		Запрос.УстановитьПараметр("ДатаДокумента", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗначенияПроверяемыхРеквизитов = Новый Структура("СостояниеЗаказа, Проведен", Выборка.СостояниеЗаказа, Выборка.ОснованиеПроведен);
			Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(Выборка.ОснованиеСсылка, ЗначенияПроверяемыхРеквизитов);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойСклад");
			Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение табличной части.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыОстатки.Характеристика КАК Характеристика,
		|	СУММА(ВЫБОР
		|			КОГДА ЗаказыОстатки.КоличествоОстаток - ПеремещениеКоличество.Количество >= 0
		|				ТОГДА ПеремещениеКоличество.Количество
		|			ИНАЧЕ ЗаказыОстатки.КоличествоОстаток
		|		КОНЕЦ) КАК КоличествоОстаток,
		|	ЗаказыОстатки.КоличествоОстаток КАК ЗаказыОстаток,
		|	ПеремещениеКоличество.Количество КАК ПеремещениеОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
		|		ПеремещениеЗапасовЗапасы.Характеристика КАК Характеристика,
		|		СУММА(ПеремещениеЗапасовЗапасы.Количество) КАК Количество,
		|		ПеремещениеЗапасовЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
		|	ИЗ
		|		Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
		|	ГДЕ
		|		ПеремещениеЗапасовЗапасы.Ссылка = &Перемещение
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПеремещениеЗапасовЗапасы.Номенклатура,
		|		ПеремещениеЗапасовЗапасы.Характеристика,
		|		ПеремещениеЗапасовЗапасы.ЗаказПокупателя) КАК ПеремещениеКоличество
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗаказыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|			ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|			ЗаказыОстатки.Характеристика КАК Характеристика,
		|			ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|		ИЗ
		|			РегистрНакопления.ЗаказыПокупателей.Остатки(
		|					,
		|					ЗаказПокупателя = &ЗаказПокупателя
		|						И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗаказыОстатки
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ДвиженияДокументаЗаказыПокупателей.ЗаказПокупателя,
		|			ДвиженияДокументаЗаказыПокупателей.Номенклатура,
		|			ДвиженияДокументаЗаказыПокупателей.Характеристика,
		|			ВЫБОР
		|				КОГДА ДвиженияДокументаЗаказыПокупателей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					ТОГДА ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
		|				ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗаказыПокупателей.Количество, 0)
		|			КОНЕЦ
		|		ИЗ
		|			РегистрНакопления.ЗаказыПокупателей КАК ДвиженияДокументаЗаказыПокупателей
		|		ГДЕ
		|			ДвиженияДокументаЗаказыПокупателей.Регистратор = &Ссылка) КАК ЗаказыОстатки
		|		ПО ПеремещениеКоличество.Номенклатура = ЗаказыОстатки.Номенклатура
		|			И ПеремещениеКоличество.Характеристика = ЗаказыОстатки.Характеристика
		|			И ПеремещениеКоличество.ЗаказПокупателя = ЗаказыОстатки.ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.ЗаказПокупателя,
		|	ЗаказыОстатки.Номенклатура,
		|	ЗаказыОстатки.Характеристика,
		|	ЗаказыОстатки.КоличествоОстаток,
		|	ПеремещениеКоличество.Количество
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяЗапасы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
		|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипНоменклатурыЗапас,
		|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	ЗаказПокупателяЗапасы.Количество КАК Количество,
		|	ЗаказПокупателяЗапасы.Партия КАК Партия,
		|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяЗапасы.Цена КАК Цена,
		|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ЗаказПокупателяЗапасы.Всего КАК Всего,
		|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
		|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
		|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки,
		|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки,
		|	ЗаказПокупателяЗапасы.КлючСвязи,
		|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки1,
		|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки1
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
		|	И (ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ИЛИ ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СкидкиНаценки.Ссылка КАК Заказ,
		|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
		|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
		|	СкидкиНаценки.Сумма КАК Сумма
		|ИЗ
		|	Документ.ЗаказПокупателя.СкидкиНаценки КАК СкидкиНаценки
		|ГДЕ
		|	СкидкиНаценки.Ссылка = &ЗаказПокупателя";
		
		Запрос.УстановитьПараметр("ЗаказПокупателя", ДокументСсылкаПеремещениеЗапасов.ЗаказПокупателя);
		Запрос.УстановитьПараметр("Перемещение", ДокументСсылкаПеремещениеЗапасов);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("ЗаказПокупателя,Номенклатура,Характеристика");
		
		// АвтоматическиеСкидки.
		ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
		Если ИспользоватьАвтоматическиеСкидки Тогда
			СкидкиНаценкиЗаказа = МассивРезультатов[2].Выгрузить();
			СкидкиНаценки.Очистить();
		КонецЕсли;
		// Конец АвтоматическиеСкидки.
		
		Запасы.Очистить();
		СерийныеНомера.Очистить();
		Если ТаблицаОстатков.Количество() > 0 Тогда
			
			Выборка = МассивРезультатов[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтруктураДляПоиска = Новый Структура;
				СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.Заказ);
				СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
				СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
				
				МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
				Если МассивСтрокОстатков.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
				Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
					
					КоличествоКСписанию = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
					
					СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьСуммуСтрокиТабличнойЧасти(
					Новый Структура("Количество, Цена, Сумма, ПроцентСкидкиНаценки, СтавкаНДС, СуммаНДС, СуммаВключаетНДС, Всего",
					КоличествоКСписанию, Выборка.Цена, 0, Выборка.ПроцентСкидкиНаценки, Выборка.СтавкаНДС, 0, СуммаВключаетНДС, 0));
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
					
				КонецЕсли;
				
				
				// АвтоматическиеСкидки
				Если ИспользоватьАвтоматическиеСкидки Тогда
					КоличествоВДокументе = Выборка.Количество * Выборка.Коэффициент;
					ПересчитатьСуммы = КоличествоВДокументе <> КоличествоКСписанию;
					КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, КоличествоКСписанию / КоличествоВДокументе, 1);
					Если КоэффициентПересчетаСкидки <> 1 Тогда
						НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(Выборка.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
					КонецЕсли;
					
					// Формирование табличной части скидок
					СуммаКРаспределению = НоваяСтрока.СуммаАвтоматическойСкидки;
					
					ЕстьСтрокаСкидки = Ложь;
					Если Выборка.КлючСвязи <> 0 Тогда
						Для Каждого СтрокаСкидкиЗаказа ИЗ СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("Заказ,КлючСвязи", Выборка.Заказ, Выборка.КлючСвязи)) Цикл
							
							СтрокаСкидки = СкидкиНаценки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
							СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
							СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
							ЕстьСтрокаСкидки = Истина;
							
						КонецЦикла;
					КонецЕсли;
					
					Если ЕстьСтрокаСкидки И СуммаКРаспределению <> 0 Тогда
						СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
					КонецЕсли;
				КонецЕсли;
				// Конец АвтоматическиеСкидки
				
				Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
					ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		//Заполнение резервов.
		Если Запасы.Количество() > 0
			И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
			И ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
			ЗаполнитьКолонкуРезервПоРезервам();
		КонецЕсли;
		
		// АвтоматическиеСкидки.
		Если ИспользоватьАвтоматическиеСкидки Тогда
			РезультатРасчетаСкидокНаценок = СкидкиНаценки.Выгрузить();
			СкидкиНаценкиСервер.ПрименитьРезультатРасчетаСкидокКОбъекту(ЭтотОбъект, "Запасы", РезультатРасчетаСкидокНаценок);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоПеремещениюЗапасов()

// Обработчик заполнения на основании ПеремещениеЗапасов.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ПеремещениеЗапасов - Основание для заполнения документа.
//
Процедура ЗаполнитьПоСборкеЗапасов(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СборкаЗапасов") Тогда
		ДокументСсылкаСборкаЗапасов = ДанныеЗаполнения;
	Иначе
		возврат;
	КонецЕсли;
	
	Если УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки") Тогда
		Заказ = ДанныеЗаполнения.ЗаказПокупателя;
	Иначе
		Заказ = Неопределено;
	КонецЕсли;
	
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Дата);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.СтруктурнаяЕдиницаПродукции) 
		И ДанныеЗаполнения.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		
		СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиницаПродукции;
		Ячейка = ДанныеЗаполнения.ЯчейкаПродукции;
	Иначе
		СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ЗаказПокупателя) Тогда
		Контрагент = ДанныеЗаполнения.ЗаказПокупателя.Контрагент;
		Договор = ДанныеЗаполнения.ЗаказПокупателя.Договор;
		ВидЦен = ДанныеЗаполнения.ЗаказПокупателя.ВидЦен;
		
		ВалютаДокумента = ДанныеЗаполнения.ЗаказПокупателя.ВалютаДокумента;
		СуммаВключаетНДС = ДанныеЗаполнения.ЗаказПокупателя.СуммаВключаетНДС;
		НДСВключатьВСтоимость = ДанныеЗаполнения.ЗаказПокупателя.НДСВключатьВСтоимость;
		
		Курс = ДанныеЗаполнения.ЗаказПокупателя.Курс;
		Кратность = ДанныеЗаполнения.ЗаказПокупателя.Кратность;
	КонецЕсли; 
	
	ЗаполнятьРезерв = ЗначениеЗаполнено(ДанныеЗаполнения.ЗаказПокупателя) И ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	// Заполнение табличной части документа.
	Запасы.Очистить();
	СерийныеНомера.Очистить();
	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		ТабЧастьЗаполнения = ДанныеЗаполнения.Продукция;
	Иначе
		ТабЧастьЗаполнения = ДанныеЗаполнения.Запасы;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ТабЧастьЗаполнения Цикл
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.ТипНоменклатурыЗапас = (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
		
		Если НЕ УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеЗаказаПокупателяВДокументахОтгрузки") Тогда
			НоваяСтрока.Заказ = ДанныеЗаполнения.ЗаказПокупателя;
		КонецЕсли;
		
		Если ЗаполнятьРезерв Тогда
			НоваяСтрока.Резерв = НоваяСтрока.Количество;
		КонецЕсли;
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
			
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				Иначе
					СтрокаТабличнойЧасти.СтавкаНДС = Организация.СтавкаНДСПоУмолчанию;
				КонецЕсли;	
				
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
				СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
										  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
										  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
				
			КонецЦикла;
			
		Иначе
						
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Иначе
				СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			КонецЕсли;	
			
			Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
				
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения, "Продукция", "СерийныеНомераПродукция");
	Иначе
		РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПеремещениюЗапасов()

// Обработчик заполнения на основании ПеремещениеЗапасов.
//
// Параметры:
//  ДанныеЗаполнения - Структура, ДокументСсылка.ПеремещениеЗапасов - Основание для заполнения документа.
//
Процедура ЗаполнитьПоПриемуВРемонт(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		ДокументСсылкаПриемВРемонт= ДанныеЗаполнения;
	Иначе
		возврат;
	КонецЕсли;
	
	// Заполнение шапки документа.
	ЭтотОбъект.ДокументОснование = ДокументСсылкаПриемВРемонт.Ссылка;
	Организация = ДокументСсылкаПриемВРемонт.Организация;
	Контрагент = ДокументСсылкаПриемВРемонт.Контрагент;
	Договор = ДокументСсылкаПриемВРемонт.Договор;
	
	ВидЦен = Договор.ВидЦен;
	ВидСкидкиНаценки = Договор.ВидСкидкиНаценки;
	ВалютаДокумента = Договор.ВалютаРасчетов;
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено);
	НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Дата);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
	Курс = СтруктураПоВалюте.Курс;
	Кратность = СтруктураПоВалюте.Кратность;
	
КонецПроцедуры

// Процедура заполняет клонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &ЗаказВШапке
	|			ТОГДА &Заказ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|						И ТаблицаЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ТаблицаЗапасы.Заказ
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	ЗаказВШапке = ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.УстановитьПараметр("ЗаказВШапке", ЗаказВШапке);
	Запрос.УстановитьПараметр("Заказ", ?(ЗначениеЗаполнено(Заказ), Заказ, Документы.ЗаказПокупателя.ПустаяСсылка()));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если НЕ ЗаказВШапке Тогда
			СтруктураДляПоиска.Вставить("Заказ", Выборка.ЗаказПокупателя);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервам()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплату";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеЗапасов")] = "ЗаполнитьПоПеремещениюЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.СборкаЗапасов")] = "ЗаполнитьПоСборкеЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриемИПередачаВРемонт")] = "ЗаполнитьПоПриемуВРемонт";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
		КонецЦикла;
		Если Контрагент.ВестиРасчетыПоЗаказам Тогда
			Для каждого СтрокаТабличнойЧасти Из Предоплата Цикл
				СтрокаТабличнойЧасти.Заказ = ?(ЗначениеЗаполнено(Заказ), Заказ, Неопределено);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// ИнтеграцияГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМУНФ.ЕстьМаркируемаяПродукцияГИСМ(Запасы);
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения Тогда
		ПроверяемыеРеквизиты.Добавить("Запасы.Партия");
	КонецЕсли;
	
	ЗаказВШапке = ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗапасы.Свернуть("Заказ", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	Если ЗаказВШапке Тогда
		Для каждого СтрокаЗапасы Из ТаблицаЗапасы Цикл
			СтрокаЗапасы.Заказ = Заказ;
		КонецЦикла;
		Если Контрагент.ВестиРасчетыПоЗаказам Тогда
			Для каждого СтрокаПредоплата Из ТаблицаПредоплата Цикл
				СтрокаПредоплата.Заказ = Заказ;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗапасы = Запасы.Количество();
	
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаЗапасы = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка()
		   И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Строка.Заказ, "Заказ");
			Всего = ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего);
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "Заказ");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);				
			Всего = ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего);
		Иначе
			Всего = Запасы.Итог("Всего");
		КонецЕсли;
		
		Если НайденнаяСтрокаЗапасы = Неопределено
		   И КоличествоЗапасы > 0
		   И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличных частях ""Запасы"" или ""Расходы""!'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				,
				ТекстСообщения,
				Неопределено,
				Неопределено,
				"ПредоплатаИтогСуммаРасчетовВалюта",
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И (ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию) Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
				
				ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Запасы и услуги"" количество отгружаемых позиций из резерва превышает общее количество запасов.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Резерв",
					Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаЗапасы.Цена * СтрокаЗапасы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ОКР(ТекСумма * СтрокаЗапасы.ПроцентСкидкиНаценки / 100, 2), 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаЗапасы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %Номер% списка ""Запасы"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Сумма",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	// Серийные номера
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ОрдерныйСклад") = Истина Тогда
		РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Запасы, СерийныеНомера, СтруктурнаяЕдиница, ЭтотОбъект);
	КонецЕсли;
	
	// Биллинг
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг")
		И Договор.ЭтоДоговорОбслуживания Тогда
		
		Для Каждого Стр Из Запасы Цикл
			Если НЕ УправлениеНебольшойФирмойСервер.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, Стр.Номенклатура, Стр.Характеристика) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Запрещено проводить незапланированные товары/услуги по текущему договору обслуживания!'"),
					Договор.ДоговорОбслуживанияТарифныйПлан,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Запасы", Стр.НомерСтроки, "Номенклатура"),,
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.РасходнаяНакладная.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПереданные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПотребностьВЗапасах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	УправлениеНебольшойФирмойСервер.ОтразитьПродажиПоДисконтнойКарте(ДополнительныеСвойства, Движения, Отказ);
	// АвтоматическиеСкидки
	УправлениеНебольшойФирмойСервер.ОтразитьПредоставленныеАвтоматическиеСкидки(ДополнительныеСвойства, Движения, Отказ);
	// Эквайринг
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетодЭквайринг(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Биллинг
	УправлениеНебольшойФирмойСервер.ОтразитьВыполнениеДоговораОбслуживания(ДополнительныеСвойства, Движения, Отказ);
	
	// Рублевые суммы документов
	УправлениеНебольшойФирмойСервер.ОтразитьРублевыеСуммыДокументовВВалюте(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходнаяНакладная.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.РасходнаяНакладная.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненная счет-фактура
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	Предоплата.Очистить();
	
	ПереданВЕГАИС = Неопределено;
	ТоварноТранспортнаяНакладнаяЕГАИС = Неопределено;
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура отмены проведения у подченненой счет фактуры
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится счет фактура %ПредставлениеСчетФактуры%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Расходная накладная № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры //КонтрольПодчиненнойСчетФактуры()

Функция ЭтоВводНаОснованииЗаказНаряда(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидОперацииЗаказаПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВидОперации");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		Тогда
		ВидОперацииЗаказаПокупателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Основание, "ВидОперации");
	КонецЕсли;
	
	Возврат ВидОперацииЗаказаПокупателя = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
КонецФункции

#КонецОбласти

#КонецЕсли