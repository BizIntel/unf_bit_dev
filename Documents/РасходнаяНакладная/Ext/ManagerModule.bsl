#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Проведение

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Возврат,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ТаблицаЗапасы.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.ПодразделениеПродажи
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.Ответственный
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ответственный,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация КАК КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				И ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК КоррЗаказПокупателя,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|				ТОГДА -1 * ТаблицаЗапасы.Количество
	|			ИНАЧЕ ТаблицаЗапасы.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|					ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|				ТОГДА 0
	|			КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ТОГДА -1 * ТаблицаЗапасы.Сумма
	|			ИНАЧЕ ТаблицаЗапасы.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	0 КАК Себестоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФиксированнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаСебестоимость
	|		ИНАЧЕ ТаблицаЗапасы.КоррСчетУчета
	|	КОНЕЦ КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ КАК Содержание,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ТаблицаЗапасы.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.ПодразделениеПродажи
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.Ответственный
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Ответственный,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|				И НЕ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ
	|		КОГДА ТаблицаЗапасы.КоррЗаказ ССЫЛКА Документ.ЗаказПоставщику
	|				И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				И ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ТаблицаЗапасы.КоррЗаказ.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ТаблицаЗапасы.СчетУчетаСебестоимость
	|		ИНАЧЕ ТаблицаЗапасы.КоррСчетУчета
	|	КОНЕЦ,
	|	ТаблицаЗапасы.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(&ОприходованиеЗапасов КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100))
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	Если ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю 
		ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию 
		ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку
		ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение Тогда
		
		СформироватьТаблицаЗапасыПродажа(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		
	ИначеЕсли ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
		
		СформироватьТаблицаЗапасыВозврат(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

Процедура СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Период КАК Период
	|	,ТаблицаЗапасыНаСкладах.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяССылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период
	|	,ТаблицаЗапасыНаСкладах.Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродажа(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.Заказ
	|			КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|					И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация КАК Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ТаблицаЗапасы.Характеристика КАК Характеристика,
	|						ТаблицаЗапасы.Партия КАК Партия,
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.Заказ
	|										КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|												И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|											ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.Заказ
	|										КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|												И ТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|											ТОГДА ТаблицаЗапасы.Заказ.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				
	|					ОБЪЕДИНИТЬ ВСЕ
	|				
	|					ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	Передача = (ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию
				ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку
				ИЛИ ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение);
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Резерв), СтрокаТаблицаЗапасы.Резерв, 0);
		КоличествоТребуетсяСвободныйОстаток = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Количество), СтрокаТаблицаЗапасы.Количество, 0);
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
			КонецЕсли;
			
			Если Передача Тогда
				
				// Приход.
				СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы,,"СтруктурнаяЕдиница, КоррСтруктурнаяЕдиница");
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				
				СтрокаТаблицыПриход.Организация = СтрокаТаблицаЗапасы.КоррОрганизация;
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				
				СтрокаТаблицыПриход.КоррОрганизация = СтрокаТаблицаЗапасы.Организация;
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяРезерв;
				
				СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Передача запасов'"); 
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
			Иначе
				
				Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				
				ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					
					// Продвигаем доходы и расходы.
					СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
					
					СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
					СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
					СтрокаДоходыИРасходы.СуммаДоходов = 0;
					СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
					СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
					
					СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
					
				КонецЕсли;
				
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
					// Продвигаем себестоимость продаж.
					СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
					СтрокаПродажи.Количество = 0;
					СтрокаПродажи.Сумма = 0;
					СтрокаПродажи.СуммаНДС = 0;
					СтрокаПродажи.Себестоимость = СуммаКСписанию;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			// Сформируем проводки.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
			КонецЕсли;
			
			Если Передача Тогда
				
				// Приход.
				СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы,,"СтруктурнаяЕдиница, КоррСтруктурнаяЕдиница");
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.Организация = СтрокаТаблицаЗапасы.КоррОрганизация;
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
 
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррОрганизация = СтрокаТаблицаЗапасы.Организация;
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
 
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяСвободныйОстаток;
				
				СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Передача запасов'");
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
			Иначе
				
				Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
								
				ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					
					// Продвигаем доходы и расходы.
					СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
					
					СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
					СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
					СтрокаДоходыИРасходы.СуммаДоходов = 0;
					СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
					СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
					
					СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
					
				КонецЕсли;
				
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
					// Продвигаем себестоимость продаж.
					СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
					СтрокаПродажи.Количество = 0;
					СтрокаПродажи.Сумма = 0;
					СтрокаПродажи.СуммаНДС = 0;
					СтрокаПродажи.Себестоимость = СуммаКСписанию;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродажа()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыВозврат(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	ОснованиеНакладная = Неопределено;
	Если ЗначениеЗаполнено(ДокументСсылкаРасходнаяНакладная.ДокументОснование)
		И ТипЗнч(ДокументСсылкаРасходнаяНакладная.ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		ОснованиеНакладная = ДокументСсылкаРасходнаяНакладная.ДокументОснование;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Если ЗначениеЗаполнено(ОснованиеНакладная) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Запасы.Организация КАК Организация,
		|	Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	Запасы.СчетУчета КАК СчетУчета,
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.Партия КАК Партия,
		|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
		|	СУММА(Запасы.Количество) КАК КоличествоОстаток,
		|	СУММА(Запасы.Сумма) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Запасы КАК Запасы
		|ГДЕ
		|	Запасы.Регистратор = &ОснованиеНакладная
		|
		|СГРУППИРОВАТЬ ПО
		|	Запасы.Организация,
		|	Запасы.СтруктурнаяЕдиница,
		|	Запасы.СчетУчета,
		|	Запасы.Номенклатура,
		|	Запасы.Характеристика,
		|	Запасы.Партия";
		
		Запрос.УстановитьПараметр("ОснованиеНакладная", ОснованиеНакладная);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗапасыОстатки.Организация КАК Организация,
		|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
		|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыОстатки.Характеристика КАК Характеристика,
		|	ЗапасыОстатки.Партия КАК Партия,
		|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗапасыОстатки.Организация КАК Организация,
		|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
		|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|		ЗапасыОстатки.Характеристика КАК Характеристика,
		|		ЗапасыОстатки.Партия КАК Партия,
		|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
		|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
		|	ИЗ
		|		РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ТаблицаЗапасы.Организация,
		|						ТаблицаЗапасы.СтруктурнаяЕдиница,
		|						ТаблицаЗапасы.СчетУчета,
		|						ТаблицаЗапасы.Номенклатура,
		|						ТаблицаЗапасы.Характеристика,
		|						ТаблицаЗапасы.Партия,
		|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ИЗ
		|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗапасыОстатки.Организация,
		|		ЗапасыОстатки.СтруктурнаяЕдиница,
		|		ЗапасыОстатки.СчетУчета,
		|		ЗапасыОстатки.Номенклатура,
		|		ЗапасыОстатки.Характеристика,
		|		ЗапасыОстатки.Партия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаЗапасы.Организация,
		|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
		|		ДвиженияДокументаЗапасы.СчетУчета,
		|		ДвиженияДокументаЗапасы.Номенклатура,
		|		ДвиженияДокументаЗапасы.Характеристика,
		|		ДвиженияДокументаЗапасы.Партия,
		|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
		|	ГДЕ
		|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
		|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыОстатки.Организация,
		|	ЗапасыОстатки.СтруктурнаяЕдиница,
		|	ЗапасыОстатки.СчетУчета,
		|	ЗапасыОстатки.Номенклатура,
		|	ЗапасыОстатки.Характеристика,
		|	ЗапасыОстатки.Партия,
		|	ЗапасыОстатки.ЗаказПокупателя";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
		Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяСвободныйОстаток = -СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Запасы.
			Если Окр((СтрокаТаблицаЗапасы.Сумма + СуммаКСписанию), 2, 1) <> 0 Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
				
				РасчетнаяСумма = -(СтрокаТаблицыРасход.Сумма + СуммаКСписанию);
				СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаТаблицыРасход.Сумма = РасчетнаяСумма;
				
				СтрокаТаблицыРасход.Количество = 0;
				СтрокаТаблицыРасход.ДокументПродажи = ДокументСсылкаРасходнаяНакладная;
				СтрокаТаблицыРасход.Возврат = Истина;
				СтрокаТаблицыРасход.ФиксированнаяСтоимость = Истина;
				
				// Доходы и расходы.
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = Неопределено;
				СтрокаДоходыИРасходы.ЗаказПокупателя = Неопределено;
				СтрокаДоходыИРасходы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Прочее;
				Если СтрокаТаблицыРасход.Сумма < 0 Тогда
					СтрокаДоходыИРасходы.СчетУчета = ПланыСчетов.Управленческий.ПрочиеРасходы;
					СтрокаДоходыИРасходы.СуммаРасходов = - СтрокаТаблицыРасход.Сумма;
				Иначе
					СтрокаДоходыИРасходы.СчетУчета = ПланыСчетов.Управленческий.ПрочиеДоходы;
					СтрокаДоходыИРасходы.СуммаДоходов = СтрокаТаблицыРасход.Сумма;
				КонецЕсли;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
				// Управленческий.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				Если СтрокаТаблицыРасход.Сумма < 0 Тогда
					СтрокаТаблицаУправленческий.СчетДт = ПланыСчетов.Управленческий.ПрочиеРасходы;
					СтрокаТаблицаУправленческий.СчетКт = СтрокаТаблицаЗапасы.СчетКт;
					СтрокаТаблицаУправленческий.Сумма = - СтрокаТаблицыРасход.Сумма;
				Иначе
					СтрокаТаблицаУправленческий.СчетДт = СтрокаТаблицаЗапасы.СчетКт;
					СтрокаТаблицаУправленческий.СчетКт = ПланыСчетов.Управленческий.ПрочиеДоходы;
					СтрокаТаблицаУправленческий.Сумма = СтрокаТаблицыРасход.Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаЗапасыВозврат()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗакупки(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗакупки.Период КАК Период,
	|	ТаблицаЗакупки.Организация КАК Организация,
	|	ТаблицаЗакупки.Номенклатура КАК Номенклатура,
	|	ТаблицаЗакупки.Характеристика КАК Характеристика,
	|	ТаблицаЗакупки.Партия КАК Партия,
	|	ТаблицаЗакупки.Заказ КАК ЗаказПоставщику,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЗакупки.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|				И ТаблицаЗакупки.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|			ТОГДА ТаблицаЗакупки.ДокументОснование
	|		ИНАЧЕ ТаблицаЗакупки.Документ
	|	КОНЕЦ КАК Документ,
	|	ТаблицаЗакупки.СтавкаНДС КАК СтавкаНДС,
	|	-СУММА(ТаблицаЗакупки.Количество) КАК Количество,
	|	-СУММА(ТаблицаЗакупки.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	-СУММА(ТаблицаЗакупки.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗакупки
	|ГДЕ
	|	ТаблицаЗакупки.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (ТаблицаЗакупки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ИЛИ ТаблицаЗакупки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗакупки.Период,
	|	ТаблицаЗакупки.Организация,
	|	ТаблицаЗакупки.Номенклатура,
	|	ТаблицаЗакупки.Характеристика,
	|	ТаблицаЗакупки.Партия,
	|	ТаблицаЗакупки.Заказ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаЗакупки.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|				И ТаблицаЗакупки.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|			ТОГДА ТаблицаЗакупки.ДокументОснование
	|		ИНАЧЕ ТаблицаЗакупки.Документ
	|	КОНЕЦ,
	|	ТаблицаЗакупки.СтавкаНДС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗакупки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗакупки()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаПродажи.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	0 КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	ТаблицаПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Период,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаПродажи.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи,
	|	ТаблицаПродажи.Ответственный";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыпускПродукции(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВыпускПродукции.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВыпускПродукции.Период КАК Период,
	|	ТаблицаВыпускПродукции.Организация КАК Организация,
	|	ТаблицаВыпускПродукции.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаВыпускПродукции.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаВыпускПродукции.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	СУММА(ТаблицаВыпускПродукции.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаВыпускПродукции
	|ГДЕ
	|	ТаблицаВыпускПродукции.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыпускПродукции.Период,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.ПодразделениеПродажи,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаВыпускПродукции.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ТаблицаВыпускПродукции.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаВыпускПродукции()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыКРасходуСоСкладов(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыКРасходуСоСкладов.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыКРасходуСоСкладов.Период КАК Период,
	|	ТаблицаЗапасыКРасходуСоСкладов.Организация КАК Организация,
	|	ТаблицаЗапасыКРасходуСоСкладов.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыКРасходуСоСкладов.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыКРасходуСоСкладов.Партия КАК Партия,
	|	ТаблицаЗапасыКРасходуСоСкладов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ТаблицаЗапасыКРасходуСоСкладов.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыКРасходуСоСкладов
	|ГДЕ
	|	ТаблицаЗапасыКРасходуСоСкладов.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыКРасходуСоСкладов.ОрдерныйСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыКРасходуСоСкладов.Период,
	|	ТаблицаЗапасыКРасходуСоСкладов.Организация,
	|	ТаблицаЗапасыКРасходуСоСкладов.Номенклатура,
	|	ТаблицаЗапасыКРасходуСоСкладов.Характеристика,
	|	ТаблицаЗапасыКРасходуСоСкладов.Партия,
	|	ТаблицаЗапасыКРасходуСоСкладов.СтруктурнаяЕдиница";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыКРасходуСоСкладов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПринятые(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	МИНИМУМ(ТаблицаЗапасыПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПринятые.Период КАК Период,
	|	ТаблицаЗапасыПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПринятые.Партия КАК Партия,
	|	ТаблицаЗапасыПринятые.Контрагент КАК Контрагент,
	|	ТаблицаЗапасыПринятые.Договор КАК Договор,
	|	ТаблицаЗапасыПринятые.Заказ КАК Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)
	|		КОГДА ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ КАК ТипПриемаПередачи,
	|	-СУММА(ТаблицаЗапасыПринятые.Количество) КАК Количество,
	|	-СУММА(ТаблицаЗапасыПринятые.СуммаРасчетовПринятыеПереданные) КАК СуммаРасчетов,
	|	-СУММА(ТаблицаЗапасыПринятые.СуммаРасчетовПринятыеПереданные) КАК Сумма,
	|	0 КАК СуммаПродажи,
	|	&ВалютаУпрУчета КАК Валюта,
	|	-СУММА(ТаблицаЗапасыПринятые.СуммаРасчетовПринятыеПереданные) КАК СуммаВал,
	|	ВЫРАЗИТЬ(&ПриемЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПринятые
	|ГДЕ
	|	ТаблицаЗапасыПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ИЛИ ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|			ИЛИ ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПринятые.Период,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	ТаблицаЗапасыПринятые.Контрагент,
	|	ТаблицаЗапасыПринятые.Договор,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеОтКомитента)
	|		КОГДА ТаблицаЗапасыПринятые.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПоступлениеВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	МИНИМУМ(ТаблицаЗапасыПринятые.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасыПринятые.Период,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту),
	|	СУММА(ТаблицаЗапасыПринятые.Количество),
	|	0,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма),
	|	СУММА(ТаблицаЗапасыПринятые.Сумма),
	|	&ВалютаУпрУчета,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма),
	|	ВЫРАЗИТЬ(&ПриемЗапасовТоварыНаКомиссии КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПринятые
	|ГДЕ
	|	ТаблицаЗапасыПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыПринятые.ТоварыНаКомиссии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПринятые.Период,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	ТаблицаЗапасыПринятые.Контрагент,
	|	ТаблицаЗапасыПринятые.Договор,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаЗапасыПринятые.СчетУчета";
	
	Запрос.УстановитьПараметр("ПриемЗапасов", "");
	Запрос.УстановитьПараметр("ПриемЗапасовТоварыНаКомиссии", НСтр("ru = 'Прием запасов'"));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПринятые()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПереданные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПереданные.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПереданные.Период КАК Период,
	|	ТаблицаЗапасыПереданные.Организация КАК Организация,
	|	ТаблицаЗапасыПереданные.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПереданные.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПереданные.Партия КАК Партия,
	|	ТаблицаЗапасыПереданные.Контрагент КАК Контрагент,
	|	ТаблицаЗапасыПереданные.Договор КАК Договор,
	|	ТаблицаЗапасыПереданные.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыПереданные.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасыПереданные.СуммаРасчетовПринятыеПереданные) КАК СуммаРасчетов
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПереданные
	|ГДЕ
	|	ТаблицаЗапасыПереданные.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ИЛИ ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ИЛИ ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПереданные.Период,
	|	ТаблицаЗапасыПереданные.Организация,
	|	ТаблицаЗапасыПереданные.Номенклатура,
	|	ТаблицаЗапасыПереданные.Характеристика,
	|	ТаблицаЗапасыПереданные.Партия,
	|	ТаблицаЗапасыПереданные.Контрагент,
	|	ТаблицаЗапасыПереданные.Договор,
	|	ТаблицаЗапасыПереданные.Заказ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаКомиссионеру)
	|		КОГДА ТаблицаЗапасыПереданные.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ПередачаВПереработку)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтветственноеХранение)
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПереданные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПереданные()  

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Период КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.Заказ КАК ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	ТаблицаЗаказыПокупателей.Заказ <> НЕОПРЕДЕЛЕНО
	|	И (ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ИЛИ ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ИЛИ ТаблицаЗаказыПокупателей.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.Заказ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПоставщикам(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПоставщикам.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПоставщикам.Период КАК Период,
	|	ТаблицаЗаказыПоставщикам.Организация КАК Организация,
	|	ТаблицаЗаказыПоставщикам.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПоставщикам.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПоставщикам.Заказ КАК ЗаказПоставщику,
	|	-СУММА(ТаблицаЗаказыПоставщикам.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПоставщикам
	|ГДЕ
	|	ТаблицаЗаказыПоставщикам.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗаказыПоставщикам.Заказ <> НЕОПРЕДЕЛЕНО
	|	И (ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ИЛИ ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ИЛИ ТаблицаЗаказыПоставщикам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПоставщикам.Период,
	|	ТаблицаЗаказыПоставщикам.Организация,
	|	ТаблицаЗаказыПоставщикам.Номенклатура,
	|	ТаблицаЗаказыПоставщикам.Характеристика,
	|	ТаблицаЗаказыПоставщикам.Заказ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПоставщикам", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПоставщикам()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Период КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.Заказ КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&Выручка КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	ТаблицаДоходыИРасходы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И ТаблицаДоходыИРасходы.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.Заказ,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ОтрицательнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ПоложительнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Выручка", НСтр("ru='Выручка от продажи'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПотребностьВЗапасах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПотребностьВЗапасах.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ТаблицаПотребностьВЗапасах.Номенклатура КАК Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|				И ТаблицаПотребностьВЗапасах.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ЕСТЬNULL(ТаблицаПотребностьВЗапасах.Заказ.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	СУММА(ТаблицаПотребностьВЗапасах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПотребностьВЗапасах,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ТаблицаПотребностьВЗапасах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаПотребностьВЗапасах.Заказ <> НЕОПРЕДЕЛЕНО
	|	И ТаблицаПотребностьВЗапасах.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПотребностьВЗапасах.Период,
	|	ТаблицаПотребностьВЗапасах.Организация,
	|	ТаблицаПотребностьВЗапасах.Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|				И ТаблицаПотребностьВЗапасах.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|			ТОГДА ЕСТЬNULL(ТаблицаПотребностьВЗапасах.Заказ.ЗаказПокупателя, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПотребностьВЗапасах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru='Возникновение обязательств покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	// Формирование временной таблицы по расчетам с покупателями.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.Период КАК Дата,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчета,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ВозникновениеОбязательствПокупателя КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателями
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И ТаблицаДокумента.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ТипРасчетов,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.ДокументКуда
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.ДокументКуда
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Валюта,
	|	Документ,
	|	Заказ,
	|	ТипРасчетов,
	|	СчетУчета";
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПоставщиками(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("СторнированиеДолга", НСтр("ru='Сторнирование долга'"));
	Запрос.УстановитьПараметр("ВосстановлениеПредоплаты", НСтр("ru='Восстановление предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&СторнированиеДолга КАК СодержаниеПроводки,
	|	ТаблицаДокумента.Период КАК Дата,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком КАК СчетУчета,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|							И ТаблицаДокумента.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ТаблицаДокумента.ДокументОснование
	|					ИНАЧЕ ТаблицаДокумента.Документ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	-СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	-СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|	-СУММА(ТаблицаДокумента.Сумма) КАК СуммаДляОстатка,
	|	-СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВалДляОстатка
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщиками
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|							И ТаблицаДокумента.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ТаблицаДокумента.ДокументОснование
	|					ИНАЧЕ ТаблицаДокумента.Документ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&ВосстановлениеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|							И ТаблицаДокумента.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ТаблицаДокумента.ДокументОснование
	|					ИНАЧЕ &Ссылка
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал)
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ДокументОснование) = ТИП(Документ.ПриходнаяНакладная)
	|							И ТаблицаДокумента.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ПриходнаяНакладная.ПустаяСсылка)
	|						ТОГДА ТаблицаДокумента.ДокументОснование
	|					ИНАЧЕ &Ссылка
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&ВосстановлениеПредоплаты,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал)
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Валюта,
	|	Документ,
	|	Заказ,
	|	ТипРасчетов,
	|	СчетУчета";
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПоставщиками.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПоставщиками.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПоставщиками.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПоставщиками КАК ВременнаяТаблицаРасчетыСПоставщиками";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщиками");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПоставщиками(Запрос.МенеджерВременныхТаблиц, Ложь, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И ТаблицаДокумента.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Статья КАК Статья
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыДоходыИРасходыОтложенные = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	
	ТаблицаПредоплатаДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Скопировать();
	ТаблицаПредоплатаДоходыИРасходыОтложенные.Очистить();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыОтложенные Из ТаблицаЗапасыДоходыИРасходыОтложенные Цикл
			Если СуммаКСписанию = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов > СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов = СуммаКСписанию;
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПредоплатаДоходыИРасходыОтложенные Из ТаблицаПредоплатаДоходыИРасходыОтложенные Цикл
		СтрокаЗапасыДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасыДоходыИРасходыОтложенные, СтрокаПредоплатаДоходыИРасходыОтложенные);
		СтрокаЗапасыДоходыИРасходыОтложенные.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаЗапасыДоходыИРасходыОтложенные.НеРаспределено = -СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов;
	КонецЦикла;
	
	ВыборкаРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Статья = ВыборкаРезультатаЗапроса.Статья;
	Иначе
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ,
	|	&Статья КАК Статья,
	|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Таблица.СуммаДоходов КАК СуммаДоходов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.УстановитьПараметр("Таблица", ТаблицаПредоплатаДоходыИРасходыОтложенные);
	Запрос.УстановитьПараметр("Статья", Статья);
	
	Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", ТаблицаЗапасыДоходыИРасходыОтложенные);
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыОтложенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДокументДата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	-ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период,
	|	Таблица.Организация,
	|	Таблица.НаправлениеДеятельности,
	|	Таблица.Статья,
	|	Таблица.СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Период КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|	И ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Период,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА -ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА -ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ТаблицаУправленческий.Сумма,
	|	&СторнированиеПоставки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Сумма,
	|	&ЗачетПредоплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Период КАК Период,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный КАК СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|		СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|		СУММА(ТаблицаДокумента.Сумма) КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Период КАК Период,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.СчетУчетаАвансовПокупателя.Валютный КАК СчетУчетаАвансовПокупателяВалютный,
	|			ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.СчетУчетаРасчетовСПокупателем.Валютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|			ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|			ТаблицаДокумента.СуммаВал КАК СуммаВал,
	|			ТаблицаДокумента.Сумма КАК Сумма
	|		ИЗ
	|			ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			0,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Период,
	|		ТаблицаДокумента.Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаДокумента.Сумма) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.Сумма) <= -0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) <= -0.005)) КАК ТаблицаДокумента
	|ГДЕ
	|	&ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПоставщиком.Валютный
	|			ТОГДА -ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаАвансовПоставщику,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПоставщику.Валютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПоставщику.Валютный
	|			ТОГДА -ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	-ТаблицаДокумента.Сумма,
	|	&СторнированиеПредоплаты
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ОтрицательнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ПоложительнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницРасчетыСПоставщиками КАК ТаблицаУправленческий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета КАК СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный КАК СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный КАК СчетУчетаВалютный,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаУправленческий
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("СторнированиеПредоплаты", НСтр("ru = 'Сторнирование предоплаты'"));
	Запрос.УстановитьПараметр("СторнированиеПоставки", НСтр("ru = 'Сторнирование поставки'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ВидОперации", ДокументСсылкаРасходнаяНакладная.ВидОперации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнымКартам.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаРасходнаяНакладная.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	ТаблицаПродажи.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Период,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область АвтоматическиеСкидки

// Формирует таблицу значений, содержащую данные для проведения по регистру ПредоставленныеАвтоматическиеСкидки.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаРасходнаяНакладная.СкидкиНаценки.Количество() = 0 Или НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК АвтоматическаяСкидка,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаЗапасы.Контрагент КАК ПолучательСкидки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам()

#КонецОбласти

#Область Биллинг

// Формирует таблицу значений, содержащую данные для проведения по регистру ВыполнениеДоговоровОбслуживания.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыполнениеДоговораОбслуживания(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговораОбслуживания", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Период,
	|	ВременнаяТаблицаЗапасы.Договор,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК ОбъектДоговораОбслуживания,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ИСТИНА КАК УказанаСтоимость,
	|	ВременнаяТаблицаЗапасы.Количество,
	|	ВременнаяТаблицаЗапасы.СуммаВал КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоДоговорОбслуживания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговораОбслуживания", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока30 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(30));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Содержание", "Содержание", ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000, , , , , НастройкиЗагрузкиДанных.СодержаниеВидимо);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Резерв", "Резерв", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , , , ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", "Ставка НДС", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаНДС", "Сумма НДС", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	
	ВидимостьЗаказаПокупателя = (НастройкиЗагрузкиДанных.ПоложениеЗаказаВДокументе = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	ОписаниеТиповКолонка = Новый ОписаниеТипов(МассивТипов);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Заказ", "Заказ (покупатель/поставщик)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ВидимостьЗаказаПокупателя);
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтраныМира");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтранаПроисхождения", "Страна происхождения", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НомераГТД");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НомерГТД", "Номер ГТД", ОписаниеТиповСтрока30, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
		
		// Содержание
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Содержание, СтрокаТаблицыФормы.Содержание_ВходящиеДанные);
		
		// Характеристика по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Партия по Владельцу и Наименованию
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Количество
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
		
		// Резерв
		Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Резерв, СтрокаТаблицыФормы.Резерв_ВходящиеДанные, 0);
			
		КонецЕсли;
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
		
		// СтавкаНДС по наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
		
		// СуммаНДС
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаНДС, СтрокаТаблицыФормы.СуммаНДС_ВходящиеДанные, 0);
		
		// Заказ
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЗаказ(СтрокаТаблицыФормы.Заказ, СтрокаТаблицыФормы.Заказ_ВходящиеДанные);
		
		// Страна и ГТД
		Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
			
			ЗначениеПоУмолчанию = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
				
				ЗначениеПоУмолчанию = СтрокаТаблицыФормы.Номенклатура.СтранаПроисхождения;
				
			КонецЕсли;
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтрануПроисхождения(СтрокаТаблицыФормы.СтранаПроисхождения, СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			Если ЗначениеЗаполнено(СтрокаТаблицыФормы.СтранаПроисхождения)
				И СтрокаТаблицыФормы.СтранаПроисхождения <> Справочники.СтраныМира.Россия Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНомерГТД(СтрокаТаблицыФормы.НомерГТД, СтрокаТаблицыФормы.НомерГТД_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
		И (СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас 
			ИЛИ СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга)
		И СтрокаТаблицыФормы.Количество <> 0;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Процедура формирования печатной формы Универсального передаточного документа
//
Функция СформироватьУниверсальныйПередаточныйДокумент(ТабличныйДокумент, ТекущийДокумент)
	
	НачалоИспользованияСФ1137	= Константы.НачалоИспользованияСФ1137.Получить();
	СтруктураЗаполненияСекции	= Новый Структура;
	СтавкаНДС0					= УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактура.ПФ_MXL_УниверсальныйПередаточныйДокумент");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка КАК Ссылка
	|	,РасходнаяНакладная.Дата КАК ДатаДокумента
	|	,РасходнаяНакладная.Номер КАК Номер
	|	,РасходнаяНакладная.Организация.Префикс КАК Префикс
	|	,РасходнаяНакладная.Организация КАК Организация
	|	,РасходнаяНакладная.Организация КАК Поставщик
	|	,РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет
	|	,РасходнаяНакладная.Контрагент КАК Покупатель
	|	,ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Контрагент
	|		ИНАЧЕ РасходнаяНакладная.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель
	|	,РасходнаяНакладная.АдресДоставки КАК АдресДоставки
	|	,ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Организация
	|		ИНАЧЕ РасходнаяНакладная.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель
	|	,РасходнаяНакладная.Контрагент КАК Плательщик
	|	,РасходнаяНакладная.Договор.Представление КАК Основание
	|	,ЕСТЬNULL(РасходнаяНакладная.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах
	|	,РасходнаяНакладная.ВалютаДокумента КАК Валюта
	|	,РасходнаяНакладная.СуммаВключаетНДС
	|	,РасходнаяНакладная.НДСВключатьВСтоимость
	|	,РасходнаяНакладная.Курс
	|	,РасходнаяНакладная.Кратность
	|	,РасходнаяНакладная.Руководитель КАК Руководитель
	|	,РасходнаяНакладная.ГлавныйБухгалтер КАК ГлавныйБухгалтер
	|	,РасходнаяНакладная.Отпустил КАК Отпустил
	|	,РасходнаяНакладная.ДоверенностьВыдана КАК ДоверенностьВыдана
	|	,РасходнаяНакладная.ДоверенностьДата КАК ДоверенностьДата
	|	,РасходнаяНакладная.ДоверенностьЛицо КАК ДоверенностьЛицо
	|	,РасходнаяНакладная.ДоверенностьНомер КАК ДоверенностьНомер
	|	,РасходнаяНакладная.ОтпустилДолжность КАК ОтпустилДолжность
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ИспользоватьПересчет = Шапка.РасчетыВУсловныхЕдиницах И (Шапка.Валюта <> Константы.НациональнаяВалюта.Получить());
	
	Запрос.УстановитьПараметр("ИспользоватьПересчет", ИспользоватьПересчет);
	Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
	Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ТоварНаименование,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура.Код КАК ЗапасКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТНВЭДКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	0 КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ВЫБОР
	|					КОГДА ВложенныйЗапрос.ВсегоРуб ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|					КОГДА ВложенныйЗапрос.СуммаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРуб КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРуб - ВложенныйЗапрос.СуммаНДСРуб КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаНДСРуб, ВЫРАЗИТЬ(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВложенныйЗапрос.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.ВсегоРуб, ВЫРАЗИТЬ(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВложенныйЗапрос.Всего
	|	КОНЕЦ КАК Всего,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|		РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА &ИспользоватьПересчет
	|				ТОГДА ВЫБОР
	|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
	|							ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|						КОГДА РасходнаяНакладнаяЗапасы.Количество = 0
	|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
	|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / РасходнаяНакладнаяЗапасы.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
	|		КОНЕЦ КАК Цена,
	|		СУММА(РасходнаяНакладнаяЗапасы.Количество) КАК Количество,
	|		СУММА(РасходнаяНакладнаяЗапасы.Сумма) КАК Сумма,
	|		СУММА(РасходнаяНакладнаяЗапасы.СуммаНДС) КАК СуммаНДС,
	|		СУММА(РасходнаяНакладнаяЗапасы.Всего) КАК Всего,
	|		МИНИМУМ(РасходнаяНакладнаяЗапасы.НомерСтроки) КАК НомерСтроки,
	|		РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|		ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|		СУММА(РублевыеСуммыДокументовВВалюте.Всего) КАК ВсегоРуб,
	|		СУММА(РублевыеСуммыДокументовВВалюте.НДС) КАК СуммаНДСРуб,
	|		РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	ИЗ
	|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|			ПО РасходнаяНакладнаяЗапасы.Ссылка = РублевыеСуммыДокументовВВалюте.Регистратор
	|				И РасходнаяНакладнаяЗапасы.НомерСтроки = РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|	ГДЕ
	|		РасходнаяНакладнаяЗапасы.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасходнаяНакладнаяЗапасы.Номенклатура,
	|		РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|		РасходнаяНакладнаяЗапасы.СтавкаНДС,
	|		РасходнаяНакладнаяЗапасы.Характеристика,
	|		ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)),
	|		РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС,
	|		ВЫБОР
	|			КОГДА &ИспользоватьПересчет
	|				ТОГДА ВЫБОР
	|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
	|							ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|						КОГДА РасходнаяНакладнаяЗапасы.Количество = 0
	|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
	|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / РасходнаяНакладнаяЗапасы.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
	|		КОНЕЦ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	КоличествоСтраниц = 1;
	
	СведенияОПокупателе			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.ДатаДокумента,	,	);
	СведенияОПоставщике			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаДокумента,	,	);
	
	ФлагОнЖе = (Шапка.Поставщик = Шапка.Грузоотправитель);
	
	СведенияОГрузоотправителе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
		?(ФлагОнЖе, Шапка.Поставщик, Шапка.Грузоотправитель), 
		Шапка.ДатаДокумента,	,);
		
	СведенияОГрузополучателе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
		?(ФлагОнЖе И НЕ ЗначениеЗаполнено(Шапка.Грузополучатель), Шапка.Покупатель, Шапка.Грузополучатель), 
		Шапка.ДатаДокумента,	,);
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	СчетФактураВыданный = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Шапка.Ссылка, Ложь);
	НоменДляПечати = ?(ЗначениеЗаполнено(СчетФактураВыданный), СчетФактураВыданный.Номер, Шапка.Номер);
	Если Шапка.ДатаДокумента < Дата('20110101') Тогда
		
		НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(НоменДляПечати, Шапка.Префикс);
		
	Иначе
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НоменДляПечати, Истина, Истина);
		
	КонецЕсли;
	
	СтруктураЗаполненияСекции.Вставить("Номер", НомерДокумента);
	СтруктураЗаполненияСекции.Вставить("Дата", Формат(?(ЗначениеЗаполнено(СчетФактураВыданный), СчетФактураВыданный.Дата, Шапка.ДатаДокумента), "ДФ='дд ММММ гггг'")+ " г.");
	СтруктураЗаполненияСекции.Вставить("НомерИсправления", "--");
	СтруктураЗаполненияСекции.Вставить("ДатаИсправления", "--");
	
	ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	Если НЕ (Шапка.ДатаДокумента < '20090609' ИЛИ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137) Тогда
		
		ПредставлениеПоставщика = ПредставлениеПоставщика + " (" + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Представление,") + ")";
		
	КонецЕсли;
	
	СтруктураЗаполненияСекции.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	
	ЗначениеАдресаПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	СтруктураЗаполненияСекции.Вставить("АдресПоставщика", ?(ПустаяСтрока(ЗначениеАдресаПоставщика), "--", ЗначениеАдресаПоставщика));
	СтруктураЗаполненияСекции.Вставить("ПоДокументу", "-- от --");
	СтруктураЗаполненияСекции.Вставить("ПредставлениеПокупателя", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	
	ЗначениеАдресаПокупателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	СтруктураЗаполненияСекции.Вставить("АдресПокупателя", ?(ПустаяСтрока(ЗначениеАдресаПокупателя), "--", ЗначениеАдресаПокупателя));
	
	Если ФлагОнЖе Тогда
		
		ПредставлениеГрузоотправителя = "он же";
		
	ИначеЕсли ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
		
		ПредставлениеГрузоотправителя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование, ФактическийАдрес,");
		
	Иначе
		
		ПредставлениеГрузоотправителя = "--";
		
	КонецЕсли; 
	СтруктураЗаполненияСекции.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
		
		Если ПустаяСтрока(Шапка.АдресДоставки) Тогда
			
			ПредставлениеГрузополучателя  = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,");
			
		Иначе
			
			ПредставлениеГрузополучателя  = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,");
			ПредставлениеГрузополучателя  = ПредставлениеГрузополучателя + "; " + Шапка.АдресДоставки;
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеГрузополучателя = "--";
		
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	
	КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ИННпоставщика", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП);
	
	КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда 
		КПП = "/" + КПП;
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ИННПокупателя", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП);
	
	Если Шапка.Валюта <> Константы.НациональнаяВалюта.Получить()
		И НЕ ИспользоватьПересчет Тогда
		
		Валюта = СокрЛП(Шапка.Валюта.НаименованиеПолное) + ", " + СокрЛП(Шапка.Валюта.Код) + "";
		
	Иначе
		
		Валюта = "Российский рубль,643";
		
	Конецесли;
	СтруктураЗаполненияСекции.Вставить("Валюта", Валюта);
	СтруктураЗаполненияСекции.Вставить("СтатусУПД", "2");
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку ТЧ накладной
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим ТЧ накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	ИтогоСтоимость	= 0;
	ИтогоСуммаНДС	= 0;
	ИтогоВсего		= 0;
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТабличнаяЧасть.Количество();
	
	Для Каждого Строчка Из ТабличнаяЧасть Цикл
		
		СтруктураЗаполненияСекции.Очистить();
		
		НомерСтроки = НомерСтроки + 1;
		
		СтруктураЗаполненияСекции.Вставить("НомерСтроки", НомерСтроки);
		СтруктураЗаполненияСекции.Вставить("ТоварКод", Строчка.Артикул);
		
		ТоварНаименование = Строчка.Содержание;
		Если ПустаяСтрока(ТоварНаименование) Тогда
			
			ТоварНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Строчка.ТоварНаименование, Строчка.Характеристика, Строчка.Артикул);
			
		КонецЕсли;
		
		Если Шапка.ДатаДокумента >= Дата(2016, 07, 01) Тогда
			
			Если Строчка.СтавкаНДС = СтавкаНДС0
				И НЕ ПустаяСтрока(Строчка.ТНВЭДКод) Тогда
				
				ТоварНаименование = ТоварНаименование + НСтр("ru=', код ТН ВЭД '") + Строчка.ТНВЭДКод;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("ТоварНаименование", ТоварНаименование);
		
		ЕдиницаИзмеренияКод = Строчка.ЕдиницаИзмеренияКод;
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 
			И НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
			
			ЕдиницаИзмеренияКод = "--";
			
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмеренияКод", ЕдиницаИзмеренияКод);
		
		ЕдиницаИзмерения = Строчка.ЕдиницаИзмерения;
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 
			И НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = "--";
			
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураЗаполненияСекции.Вставить("Акциз", ?(Шапка.ДатаДокумента < НачалоИспользованияСФ1137, "", Нстр("ru = 'без акциза'")));
		СтруктураЗаполненияСекции.Вставить("Количество", Строчка.Количество);
		
		Если Строчка.Цена = 0 ИЛИ Строчка.Количество = 0 Тогда
			
			СтруктураЗаполненияСекции.Вставить("Цена", "--");
			
		Иначе
			
			СтруктураЗаполненияСекции.Вставить("Цена", Окр((Строчка.Всего - Строчка.СуммаНДС) / Строчка.Количество,2));
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("Стоимость", Строчка.Всего - Строчка.СуммаНДС);
		СтруктураЗаполненияСекции.Вставить("Всего", Строчка.Всего);
		
		Если ВРег(Строчка.СтавкаНДС) = "БЕЗ НДС" Тогда
			
			СтруктураЗаполненияСекции.Вставить("СтавкаНДС", Нстр("ru ='без НДС'"));
			СтруктураЗаполненияСекции.Вставить("СуммаНДС", Нстр("ru ='без НДС'"));
			
		Иначе
			
			СтруктураЗаполненияСекции.Вставить("СтавкаНДС",Строчка.СтавкаНДС);
			СтруктураЗаполненияСекции.Вставить("СуммаНДС", Строчка.СуммаНДС);
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("СтранаПроисхожденияКод", "--");
		СтруктураЗаполненияСекции.Вставить("ПредставлениеСтраны", "--");
		СтруктураЗаполненияСекции.Вставить("ПредставлениеГТД", "--");
		
		ИтогоСтоимость	= ИтогоСтоимость + (Строчка.Всего - Строчка.СуммаНДС);
		ИтогоСуммаНДС	= ИтогоСуммаНДС + Строчка.СуммаНДС;
		ИтогоВсего		= ИтогоВсего + Строчка.Всего;
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		
		Если НЕ УправлениеНебольшойФирмойСервер.ПроверитьВыводСчетаФактурыНаСтраницу(ТабличныйДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерДокумента, Истина) Тогда
			
			КоличествоСтраниц = КоличествоСтраниц + 1;
			
		КонецЕсли;
		
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Выводим область ИТОГО
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	СтруктураЗаполненияСекции.Очистить();
	СтруктураЗаполненияСекции.Вставить("ИтогоСуммаНДС", ИтогоСуммаНДС);
	СтруктураЗаполненияСекции.Вставить("ИтогоВсего", ИтогоВсего);
	СтруктураЗаполненияСекции.Вставить("ИтогоСтоимость", ?(ИтогоСтоимость = 0, "--", ИтогоСтоимость));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим область Подвал
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОтветственныеЛицаОрганизации = Новый Структура;
	
	ФИОРуководитель = "";
	УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОРуководитель, Строка(Шапка.Руководитель));
	Если Шапка.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		ОтветственныеЛицаОрганизации.Вставить("ФИОПБОЮЛ", ФИОРуководитель);
		
	Иначе
		
		ОтветственныеЛицаОрганизации.Вставить("ФИОРуководителя", ФИОРуководитель);
		
	КонецЕсли;
	
	ОтветственныеЛицаОрганизации.Вставить("КоличествоЛистов", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
			УправлениеНебольшойФирмойСервер.ФормаМножественногоЧисла(НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц))
		);
	
	ОтветственныеЛицаОрганизации.Вставить("Свидетельство", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
	
	ФИОКладовщика = "";
	УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОКладовщика, Строка(Шапка.Отпустил));
	ОтветственныеЛицаОрганизации.Вставить("ФИОКладовщика", ФИОКладовщика);
	ОтветственныеЛицаОрганизации.Вставить("ДолжностьКладовщика", Шапка.ОтпустилДолжность);
	
	ФИОГлавногоБухгалтера = "";
	УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОГлавногоБухгалтера, Строка(Шапка.ГлавныйБухгалтер));
	ОтветственныеЛицаОрганизации.Вставить("ФИОГлавногоБухгалтера", ФИОГлавногоБухгалтера);
	
	ОбластьМакета.Параметры.Заполнить(ОтветственныеЛицаОрганизации);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим область Подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
	СтруктураЗаполненияСекции.Очистить();
	Если ЗначениеЗаполнено(Шапка.ДоверенностьВыдана)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьДата)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьЛицо)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьНомер) Тогда
		
		ТекстОснования = Шапка.Основание + НСтр("ru ='; по доверенности №'") + Шапка.ДоверенностьНомер 
			+ НСтр("ru =' от '") + Формат(Шапка.ДоверенностьДата, "ДЛФ=DD") 
			+ НСтр("ru =' выданной '") + Шапка.ДоверенностьВыдана + " " 
			+ Шапка.ДоверенностьЛицо;
			
		СтруктураЗаполненияСекции.Вставить("Основание", ТекстОснования);
		
	Иначе
		
		СтруктураЗаполненияСекции.Вставить("Основание", Шапка.Основание);
		
	КонецЕсли;
	
	СтруктураЗаполненияСекции.Вставить("ДатаОтгрузкиПередачи", Формат(Шапка.ДатаДокумента, "ДФ='« дд » ММММ гггг'"));
	
	ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	Если НЕ ПустаяСтрока(СведенияОПоставщике.ИНН) 
		И НЕ ПустаяСтрока(СведенияОПоставщике.КПП) Тогда
		
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			ПредставлениеОрганизации, СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП);
		
	ИначеЕсли НЕ ПустаяСтрока(СведенияОПоставщике.ИНН) Тогда
		
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			ПредставлениеОрганизации, СведенияОПоставщике.ИНН);
		
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
			
	ПредставлениеКонтрагента = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	Если НЕ ПустаяСтрока(СведенияОПокупателе.ИНН)
		И НЕ ПустаяСтрока(СведенияОПокупателе.КПП) Тогда
		
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			ПредставлениеКонтрагента, СведенияОПокупателе.ИНН, СведенияОПокупателе.КПП);
			
	ИначеЕсли НЕ ПустаяСтрока(СведенияОПокупателе.ИНН) Тогда
		
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			ПредставлениеКонтрагента, СведенияОПокупателе.ИНН);
		
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	СтруктураЗаполненияСекции.Вставить("ДолжностьКладовщика", ОтветственныеЛицаОрганизации.ДолжностьКладовщика);
	СтруктураЗаполненияСекции.Вставить("ФИОКладовщика", ОтветственныеЛицаОрганизации.ФИОКладовщика);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьУниверсальныйПередаточныйДокумент()

// Процедура формирования печатной формы Акта об оказании услуг
//
Функция СформироватьАктОбОказанииУслуг(ТабличныйДокумент, ТекущийДокумент, Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходнаяНакладная.Номер,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	РасходнаяНакладная.Отпустил КАК ОтветственныйПредставление,
	|	РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код,
	|		ЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС,
	|		Всего,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ РасходнаяНакладная.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		СуммаАвтоматическойСкидки
	|	)
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_АктОбОказанииУслуг";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходнаяНакладная.ПФ_MXL_Накладная");
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
	СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
	
	Если Шапка.ДатаДокумента < Дата('20110101') Тогда
		
		НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		
	Иначе
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Акт № " + НомерДокумента + " от " + Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;
	Если ЕстьСкидки Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
		
	Иначе
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
	КонецЕсли;
	
	СтруктураЗаполненияСекции = Новый Структура;
	
	ППУслуги	= 0;
	Сумма		= 0;
	СуммаНДС	= 0;
	Всего		= 0;
	Количество	= 0;
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
	
		Если ВыборкаСтрокЗапасы.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Очистить();
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		
		ППУслуги = ППУслуги + 1;
		СтруктураЗаполненияСекции.Вставить("НомерСтроки", ППУслуги);
		
		ОписаниеУслуги = ?(ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание),
			ВыборкаСтрокЗапасы.Содержание,
			УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул));
			
		СтруктураЗаполненияСекции.Вставить("Запас", ОписаниеУслуги);
		
		Если ЕстьСкидки Тогда
			
			Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
				
				Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
				
				СтруктураЗаполненияСекции.Вставить("Скидка", 			Скидка);
				СтруктураЗаполненияСекции.Вставить("СуммаБезСкидки",	Скидка);
				
			ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
				СтруктураЗаполненияСекции.Вставить("Скидка", 			0);
				СтруктураЗаполненияСекции.Вставить("СуммаБезСкидки",	ВыборкаСтрокЗапасы.Сумма);
				
			Иначе
				
				Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
				СтруктураЗаполненияСекции.Вставить("Скидка", 			Скидка);
				СтруктураЗаполненияСекции.Вставить("СуммаБезСкидки",	ВыборкаСтрокЗапасы.Сумма + Скидка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Сумма		= Сумма 	+ ВыборкаСтрокЗапасы.Сумма;
		СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
		Всего		= Всего		+ ВыборкаСтрокЗапасы.Всего;
		Количество	= Количество+ 1;
		
	КонецЦикла;
	
	СтруктураЗаполненияСекции.Очистить();
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	СтруктураЗаполненияСекции.Вставить("Всего", УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма));
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СтруктураЗаполненияСекции.Очистить();
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	Если СуммаНДС = 0 Тогда
		
		СтруктураЗаполненияСекции.Вставить("НДС",		Нстр("ru='Без налога (НДС)'"));
		СтруктураЗаполненияСекции.Вставить("ВсегоНДС",	Нстр("ru='-'"));
		
	Иначе
		
		СтруктураЗаполненияСекции.Вставить("НДС",		?(Шапка.СуммаВключаетНДС, Нстр("ru ='В том числе НДС:'"), Нстр("ru ='Сумма НДС:'")));
		СтруктураЗаполненияСекции.Вставить("ВсегоНДС",	УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС));
		
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Макет.Области.Найти("ПодписьАктаВыполненныхРабот") <> Неопределено Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписьАктаВыполненныхРабот");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Иначе
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет для формирования документа ""Акт об оказании услуг"". 
			|Штатный механизм печати может работать некоректно.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	СтруктураЗаполненияСекции.Очистить();
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Всего;
	СтруктураЗаполненияСекции.Вставить("ИтоговаяСтрока",  Нстр("ru ='Всего наименований '") + Строка(Количество) + Нстр("ru =', на сумму '") + УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
	СтруктураЗаполненияСекции.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецФункции // СформироватьАктОбОказанииУслуг()

Процедура СформироватьТОРГ12(ТабличныйДокумент, ТекущийДокумент, ИмяМакета, Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	РасходнаяНакладная.Номер КАК Номер,
	|	РасходнаяНакладная.Организация КАК Руководители,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	РасходнаяНакладная.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Контрагент
	|		ИНАЧЕ РасходнаяНакладная.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	РасходнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Организация
	|		ИНАЧЕ РасходнаяНакладная.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РасходнаяНакладная.Контрагент КАК Плательщик,
	|	РасходнаяНакладная.Договор.Представление КАК Основание,
	|	РасходнаяНакладная.ВалютаДокумента,
	|	РасходнаяНакладная.СуммаВключаетНДС,
	|	РасходнаяНакладная.НДСВключатьВСтоимость,
	|	РасходнаяНакладная.Курс,
	|	РасходнаяНакладная.Кратность,
	|	РасходнаяНакладная.ОснованиеПечати КАК ОснованиеПечати,
	|	РасходнаяНакладная.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ОснованиеПечатиСсылка ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РасходнаяНакладная.ОснованиеПечатиСсылка.НомерДоговора
	|		ИНАЧЕ РасходнаяНакладная.ОснованиеПечатиСсылка.Номер
	|	КОНЕЦ КАК ОснованиеНомер,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ОснованиеПечатиСсылка ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РасходнаяНакладная.ОснованиеПечатиСсылка.ДатаДоговора
	|		ИНАЧЕ РасходнаяНакладная.ОснованиеПечатиСсылка.Дата
	|	КОНЕЦ КАК ОснованиеДата,
	|	РасходнаяНакладная.Руководитель КАК Руководитель,
	|	РасходнаяНакладная.РуководительДолжность КАК РуководительДолжность,
	|	РасходнаяНакладная.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	РасходнаяНакладная.Отпустил КАК Отпустил,
	|	РасходнаяНакладная.ОтпустилДолжность КАК ОтпустилДолжность,
	|	РасходнаяНакладная.ДоверенностьВыдана,
	|	РасходнаяНакладная.ДоверенностьДата,
	|	РасходнаяНакладная.ДоверенностьЛицо,
	|	РасходнаяНакладная.ДоверенностьНомер,
	|	РасходнаяНакладная.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	// Печать в валюте нужна только в случае, когда сброшен флаг "в у.е." в карточке договора.
	//ИспользоватьПересчет = (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
	ИспользоватьПересчет = Шапка.РасчетыВУсловныхЕдиницах И (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.УстановитьПараметр("ИспользоватьПересчет", ИспользоватьПересчет);
	
	Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
	Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ЗапасНаименование,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура.Код КАК ЗапасКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияДокумент КАК ЕдиницаИзмеренияДокумент,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияДокумент КАК ВидУпаковки,
	|	0 КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	0 КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ВЫБОР
	|					КОГДА ВложенныйЗапрос.ВсегоРуб ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|					КОГДА ВложенныйЗапрос.СуммаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРуб КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРуб - ВложенныйЗапрос.СуммаНДСРуб КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаНДСРуб, ВЫРАЗИТЬ(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВложенныйЗапрос.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.ВсегоРуб, ВЫРАЗИТЬ(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВложенныйЗапрос.Всего
	|	КОНЕЦ КАК Всего,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДляПечати,
	|		РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|		РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА &ИспользоватьПересчет
	|				ТОГДА ВЫБОР
	|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
	|							ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|						КОГДА РасходнаяНакладнаяЗапасы.Количество = 0
	|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
	|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / РасходнаяНакладнаяЗапасы.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
	|		КОНЕЦ КАК Цена,
	|		СУММА(РасходнаяНакладнаяЗапасы.Количество) КАК Количество,
	|		СУММА(РасходнаяНакладнаяЗапасы.Сумма) КАК Сумма,
	|		СУММА(РасходнаяНакладнаяЗапасы.СуммаНДС) КАК СуммаНДС,
	|		СУММА(РасходнаяНакладнаяЗапасы.Всего) КАК Всего,
	|		МИНИМУМ(РасходнаяНакладнаяЗапасы.НомерСтроки) КАК НомерСтроки,
	|		РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|		ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|		СУММА(РублевыеСуммыДокументовВВалюте.Всего) КАК ВсегоРуб,
	|		СУММА(РублевыеСуммыДокументовВВалюте.НДС) КАК СуммаНДСРуб,
	|		РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
	|	ИЗ
	|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|			ПО РасходнаяНакладнаяЗапасы.Ссылка = РублевыеСуммыДокументовВВалюте.Регистратор
	|				И РасходнаяНакладнаяЗапасы.НомерСтроки = РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|	ГДЕ
	|		РасходнаяНакладнаяЗапасы.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасходнаяНакладнаяЗапасы.Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения,
	|		РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|		РасходнаяНакладнаяЗапасы.СтавкаНДС,
	|		РасходнаяНакладнаяЗапасы.Цена,
	|		РасходнаяНакладнаяЗапасы.Характеристика,
	|		ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)),
	|		РасходнаяНакладнаяЗапасы.Ссылка.СуммаВключаетНДС,
	|		ВЫБОР
	|			КОГДА &ИспользоватьПересчет
	|				ТОГДА ВЫБОР
	|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
	|							ТОГДА ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|						КОГДА РасходнаяНакладнаяЗапасы.Количество = 0
	|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
	|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / РасходнаяНакладнаяЗапасы.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			ИНАЧЕ РасходнаяНакладнаяЗапасы.Цена
	|		КОНЕЦ) КАК ВложенныйЗапрос
	|ГДЕ
	|	&УсловиеФильтраУслуг
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФильтраУслуг", 
		?(ИмяМакета = "ТОРГ12", "НЕ ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)", "ИСТИНА"));
	
	ЗапросЗапасы = Запрос.Выполнить().Выгрузить();
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_ТОРГ12";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходнаяНакладная.ПФ_MXL_ТОРГ12");
	
	ОбластьМакетаШапка				= Макет.ПолучитьОбласть("Шапка");
	ОбластьМакетаЗаголовокТаблицы	= Макет.ПолучитьОбласть("ЗаголовокТаб");
	ОбластьМакетаСтрока				= Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаИтогоПоСтранице	= Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьМакетаВсего				= Макет.ПолучитьОбласть("Всего");
	ОбластьМакетаПодвал				= Макет.ПолучитьОбласть("Подвал");
	
	// Выводим общие реквизиты шапки
	
	СведенияОПоставщике			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация,		Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
	СведенияОГрузоотправителе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузоотправитель,Шапка.ДатаДокумента, ,);
	СведенияОПокупателе			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент,		Шапка.ДатаДокумента, , Шапка.БанковскийСчетКонтрагента);
	СведенияОГрузополучателе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузополучатель,	Шапка.ДатаДокумента, ,);
	
	ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
	
	Если Шапка.ДатаДокумента < Дата('20110101') Тогда
		НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
	Иначе
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.НомерДокумента = НомерДокумента;
	ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
	
	Если Шапка.Организация = Шапка.Грузоотправитель Тогда
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет");
	Иначе
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет");
	КонецЕсли;
	
	ПредставлениеГрузополучателя = "";
	Если ПустаяСтрока(Шапка.АдресДоставки) Тогда
		
		ПредставлениеГрузополучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
	Иначе
		
		ПредставлениеГрузополучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН");
		ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + ", " + Шапка.АдресДоставки + ", ";
		ПредставлениеГрузополучателя = ПредставлениеГрузополучателя + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,"Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
	КонецЕсли;
	
	ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
	ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика      = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике);
	ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика     = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе);
	
	// Выводим всевозможные коды	
	ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО		= СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП	= "";
	ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО	= СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО		= СведенияОПоставщике.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО		= СведенияОПокупателе.КодПоОКПО;
	ОбластьМакетаШапка.Параметры.ОснованиеНомер			= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.ОснованиеНомер, Истина, Истина);
	ОбластьМакетаШапка.Параметры.ОснованиеДата			= Шапка.ОснованиеДата;
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
	ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
	//ОбластьМакетаШапка.Параметры.Основание				= Шапка.ОснованиеПечати;
	
	//*************************
	//Изменения внесены ООО Бизнес-Интеллект // ПечатнаяФорма()
	//*************************	
	ОбластьМакетаШапка.Параметры.Основание = Шапка.Основание;
	//*************************
	//Конец изменений
	//*************************
		
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	// Инициализация счетчика страниц
	НомерСтраницы = 1;
	
	// Инициализация итогов по странице
	ИтогоМестНаСтранице       = 0;
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	
	// Инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	
	// Инициализация счетчика строк
	НомерСтроки     = 0;
	КоличествоСтрок = ЗапросЗапасы.Количество();
	
	// Выводим заголовок многострочной части
	ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Выводим многострочную часть докмента
	Для Каждого ВыборкаСтрок Из ЗапросЗапасы Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
		
		ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
			
			ОбластьМакетаСтрока.Параметры.ВидУпаковки 			= "";
			ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте	= "";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаСтрок.Содержание) Тогда
			ОбластьМакетаСтрока.Параметры.ЗапасНаименование = ВыборкаСтрок.Содержание;
		Иначе
			ОбластьМакетаСтрока.Параметры.ЗапасНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрок.ЗапасНаименование, 
			ВыборкаСтрок.Характеристика, ВыборкаСтрок.Артикул);
		КонецЕсли;
		
		СуммаСНДС = ВыборкаСтрок.Всего;
		
		КоличествоМест	= ВыборкаСтрок.КоличествоМест;
		
		Коэффициент = 1;
		Если ТипЗнч(ВыборкаСтрок.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			
			Коэффициент = ВыборкаСтрок.ЕдиницаИзмеренияДокумент.Коэффициент;
			
		КонецЕсли;
		
		Количество		= ВыборкаСтрок.Количество * Коэффициент;
		ОбластьМакетаСтрока.Параметры.Количество = Количество;
		
		СуммаНДС		= ВыборкаСтрок.СуммаНДС;
		СуммаБезНДС		= ВыборкаСтрок.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрок.СуммаНДС, 0);
		
		ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
		ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
		ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
		ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
		ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
		
		// Проверим вывод
		СтрокаСПодвалом = Новый Массив;
		Если НомерСтроки = 1 Тогда
			СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы);// если первая строка, то должен
		КонецЕсли;													// помещаться заголовок
		СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
		СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
		Если НомерСтроки = КоличествоСтрок Тогда			// если последняя строка, должен
			СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);	// помещаться и подвал документа
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
		КонецЕсли;
		
		Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
			
			// Выводим итоги по странице
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
			ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Очистим итоги по странице
			ИтогоМестНаСтранице       = 0;
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице      = 0;
			ИтогоНДСНаСтранице        = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;
			
			// Выведем заголовок таблицы
			НомерСтраницы = НомерСтраницы + 1;
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		
		// Увеличим итоги по странице
		ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
		
		// Увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + КоличествоМест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		
	КонецЦикла;
	
	// Выводим итоги по странице
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
	ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
	ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
	ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
	ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
	ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаВсего);
	
	// Выводим подвал документа
	ЗначенияПараметров = Новый Структура;
	
	ЗначенияПараметров.Вставить("ДоверенностьНомер", Шапка.ДоверенностьНомер);
	ЗначенияПараметров.Вставить("ДоверенностьДата", Шапка.ДоверенностьДата);
	ЗначенияПараметров.Вставить("ДоверенностьВыдана", Шапка.ДоверенностьВыдана);
	ЗначенияПараметров.Вставить("ДоверенностьЧерезКого", Шапка.ДоверенностьЛицо);
	
	
	//*************************
	//Изменения внесены ООО Бизнес-Интеллект // ПечатнаяФорма ()
	//*************************	
	
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Руководители = бизЗаполнениеДокументов.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация,
	ПользовательИБ.УникальныйИдентификатор, Шапка.ДатаДокумента);
	ЗначенияПараметров.Вставить("ФИОРуководителя",		Руководители.ФИОРуководителя);
	ЗначенияПараметров.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжность);
	ЗначенияПараметров.Вставить("ФИОГлавБухгалтера",	Руководители.ФИОГлавногоБухгалтера);
	ЗначенияПараметров.Вставить("ФИОКладовщика",		Руководители.ФИОРуководителя);
	ЗначенияПараметров.Вставить("ДолжностьКладовщика",	Руководители.РуководительДолжность);
	ЗначенияПараметров.Вставить("ПредставлениеПодписанта", Руководители.ПредставлениеПодписантаРуководителя);
	
	//ФИОРуководителя = "";
	//УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОРуководителя, Строка(Шапка.Руководитель));
	//ЗначенияПараметров.Вставить("ФИОРуководителя",		ФИОРуководителя);
	//ЗначенияПараметров.Вставить("ДолжностьРуководителя", Шапка.РуководительДолжность);
	//
	//ФИОГлавногоБухгалтера = "";
	//УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОГлавногоБухгалтера, Строка(Шапка.ГлавныйБухгалтер));
	//ЗначенияПараметров.Вставить("ФИОГлавБухгалтера",	ФИОГлавногоБухгалтера);
	//
	//ФИОКладовщика = "";
	//УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОКладовщика, Строка(Шапка.Отпустил));
	//ЗначенияПараметров.Вставить("ФИОКладовщика",		ФИОКладовщика);
	//ЗначенияПараметров.Вставить("ДолжностьКладовщика",	Шапка.ОтпустилДолжность);
	
	//*************************
	//Конец изменений
	//*************************

	
	ЗначенияПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
	ЗначенияПараметров.Вставить("ВсегоМестПрописью",						?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0"))); 
	ЗначенияПараметров.Вставить("СуммаПрописью",							РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.НациональнаяВалюта.Получить()));
	
	ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
	ДлинаСтроки			= СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель	= СтрНайти(ПолнаяДатаДокумента," ");
	ВторойРазделитель	= СтрНайти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	ЗначенияПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """");
	ЗначенияПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
	ЗначенияПараметров.Вставить("ДатаДокументаГод",	 Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
	
	ОбластьМакетаПодвал.Параметры.Заполнить(ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
КонецПроцедуры

// Процедура формирования печатной формы Накладная, Накладная с услугами
//
Процедура СформироватьНакладную(ТабличныйДокумент, ТекущийДокумент, ИсключаяУслуги)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходнаяНакладная.Номер,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ""(Продажа покупателю)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ""(Передача на комиссию)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|			ТОГДА ""(Передача в переработку)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ""(Передача контрагенту на ответственное хранение)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику)
	|			ТОГДА ""(Возврат поставщику)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту)
	|			ТОГДА ""(Возврат комитенту)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратИзПереработки)
	|			ТОГДА ""(Возврат контрагенту из переработки)""
	|		КОГДА РасходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ВозвратСОтветхранения)
	|			ТОГДА ""(Возврат контрагенту с ответственного хранения)""
	|	КОНЕЦ КАК ВидОперации,
	|	РасходнаяНакладная.Отпустил,
	|	РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код,
	|		ЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС,
	|		Всего,
	|		Характеристика,
	|		Партия,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ РасходнаяНакладная.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		СуммаАвтоматическойСкидки,
	|		КлючСвязи
	|	),
	|	РасходнаяНакладная.СерийныеНомера.(
	|		СерийныйНомер,
	|		КлючСвязи
	|	)
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
	ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходнаяНакладная.ПФ_MXL_Накладная");
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
	СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);

	Если Шапка.ДатаДокумента < Дата('20110101') Тогда
		НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
	Иначе
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
	КонецЕсли;		
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Расходная накладная № "
											+ НомерДокумента
											+ " от "
											+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
											
	ОбластьМакета.Параметры.ВидОперации = Шапка.ВидОперации;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ФактическийАдрес");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ФактическийАдрес");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;

	Если ЕстьСкидки Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
		
	Иначе
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
	КонецЕсли;
	
	Сумма		= 0;
	СуммаНДС	= 0;
	Всего		= 0;
	Количество	= 0;
	
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
	
		Если ИсключаяУслуги И ВыборкаСтрокЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
			
			ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			
		Иначе
			
			СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокЗапасы.КлючСвязи);
			ПредставлениеЗапаса = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
				ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул, СтрокаСерийныеНомера);
				
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Партия) Тогда
				
				ПредставлениеЗапаса = ПредставлениеЗапаса + "; " + Строка(ВыборкаСтрокЗапасы.Партия);
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Запас = ПредставлениеЗапаса;
			
		КонецЕсли;
			
		Если ЕстьСкидки Тогда
			Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
				Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
				ОбластьМакета.Параметры.Скидка         = Скидка;
				ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
			ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
				ОбластьМакета.Параметры.Скидка         = 0;
				ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
			Иначе
				Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
				ОбластьМакета.Параметры.Скидка         = Скидка;
				ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Сумма		= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
		СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
		Всего		= Всего		+ ВыборкаСтрокЗапасы.Всего;
		Количество	= Количество+ 1;
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	Если СуммаНДС = 0 Тогда
		ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
		ОбластьМакета.Параметры.ВсегоНДС = "-";
	Иначе
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
	КонецЕсли; 
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Всего;
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
											+ Строка(Количество)
											+ ", на сумму "
											+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	
	ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	
	ФИООтпускПроизвел = "";
	УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИООтпускПроизвел, Строка(Шапка.Отпустил));
	СтруктураЗаполненияСекции = Новый Структура;
	СтруктураЗаполненияСекции.Вставить("ОтветственныйПредставление", ФИООтпускПроизвел);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // СформироватьНакладную()

// Процедура формирования печатной формы Товарный чек
//
Процедура СформироватьТоварныйЧек(ТабличныйДокумент, ТекущийДокумент)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_ТоварныйЧек";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЧекККМ.ПФ_MXL_ТоварныйЧек");
	СтруктураЗаполненияСекции = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходнаяНакладная.Номер,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	РасходнаяНакладная.Отпустил,
	|	РасходнаяНакладная.ОтпустилДолжность,
	|	РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код,
	|		ЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС,
	|		Всего,
	|		Характеристика,
	|		Партия,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА РасходнаяНакладная.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ РасходнаяНакладная.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		СуммаАвтоматическойСкидки,
	|		КлючСвязи
	|	),
	|	РасходнаяНакладная.СерийныеНомера.(
	|		СерийныйНомер,
	|		КлючСвязи
	|	)
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
	ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
	СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
	
	//:::Заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанные");
	СтруктураЗаполненияСекции.Очистить();
	
	НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
	СтруктураЗаполненияСекции.Вставить("ТекстЗаголовка",  НСтр("ru ='Товарный чек № '") + НомерДокумента + НСтр("ru =' от '") + Формат(Шапка.ДатаДокумента, "ДЛФ=DD"));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//:::Поставщик
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СтруктураЗаполненияСекции.Очистить();
	СтруктураЗаполненияСекции = Новый Структура(Новый ФиксированнаяСтруктура(СведенияОбОрганизации));
	
	ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	СтруктураЗаполненияСекции.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	СтруктураЗаполненияСекции.Вставить("Поставщик", Шапка.Организация);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//:::Покупатель
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СтруктураЗаполненияСекции.Очистить();
	СтруктураЗаполненияСекции = Новый Структура(Новый ФиксированнаяСтруктура(СведенияОбКонтрагенте));
	
	ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ФактическийАдрес");
	СтруктураЗаполненияСекции.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//:::ШапкаТаблицы
	ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
		
	КонецЕсли;
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	//:::СтрокиТаблицы
	ОбластьКолонкаЗапас = Макет.Область("Запас");
	Если Не ЕстьСкидки Тогда
		
		ОбластьКолонкаЗапас.ШиринаКолонки = ОбластьКолонкаЗапас.ШиринаКолонки + Макет.Область("СуммаБезСкидки").ШиринаКолонки + Макет.Область("СуммаСкидки").ШиринаКолонки;
		
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
	
	Сумма			= 0;
	СуммаНДС		= 0;
	Всего			= 0;
	ВсегоСкидок		= 0;
	ВсегоБезСкидок	= 0;
	Количество		= 0;
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
		
		СтруктураЗаполненияСекции.Очистить();
		ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
			
			СтруктураЗаполненияСекции.Вставить("Запас", ВыборкаСтрокЗапасы.Содержание);
			
		Иначе
			
			СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокЗапасы.КлючСвязи);
			ПредставлениеЗапаса = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
				ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул, СтрокаСерийныеНомера);
				
			СтруктураЗаполненияСекции.Вставить("Запас", ПредставлениеЗапаса);
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("Количество", ВыборкаСтрокЗапасы.Количество);
		СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокЗапасы.ЕдиницаХранения);
		СтруктураЗаполненияСекции.Вставить("Цена", ВыборкаСтрокЗапасы.Цена);
		
		ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Скидка = 0;
		Если ЕстьСкидки Тогда
			
			Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
				
				Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
				СтруктураЗаполненияСекции.Вставить("Скидка", Скидка);
				СтруктураЗаполненияСекции.Вставить("СуммаБезСкидки", Скидка);
				
			ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
				
				СтруктураЗаполненияСекции.Вставить("Скидка", 0);
				СтруктураЗаполненияСекции.Вставить("СуммаБезСкидки", ВыборкаСтрокЗапасы.Сумма);
				
			Иначе
				
				Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
				СтруктураЗаполненияСекции.Вставить("Скидка", Скидка);
				СтруктураЗаполненияСекции.Вставить("СуммаБезСкидки", ВыборкаСтрокЗапасы.Сумма + Скидка);
				
			КонецЕсли;
			
			ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Присоединить(ОбластьСкидок);
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("Сумма", ВыборкаСтрокЗапасы.Сумма);
		
		ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		Сумма			= Сумма			+ ВыборкаСтрокЗапасы.Сумма;
		СуммаНДС		= СуммаНДС		+ ВыборкаСтрокЗапасы.СуммаНДС;
		Всего			= Всего			+ ВыборкаСтрокЗапасы.Всего;
		ВсегоСкидок		= ВсегоСкидок	+ Скидка;
		ВсегоБезСкидок	= Сумма			+ ВсегоСкидок;
		Количество		= Количество	+ 1;
		
	КонецЦикла;
	
	//:::Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
	СтруктураЗаполненияСекции.Очистить();
	
	СтруктураЗаполненияСекции.Вставить("Сумма", УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма));
	СтруктураЗаполненияСекции.Вставить("Всего", УправлениеНебольшойФирмойСервер.ФорматСумм(Всего));
	
	Если СуммаНДС = 0 Тогда
		
		СтруктураЗаполненияСекции.Вставить("ЗаголовокНДС", "Без налога (НДС)");
		СтруктураЗаполненияСекции.Вставить("СуммаНДС", "-");
		
	Иначе
		
		СтруктураЗаполненияСекции.Вставить("ЗаголовокНДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
		СтруктураЗаполненияСекции.Вставить("СуммаНДС", УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС));
		
	КонецЕсли; 
	
	ТабличныйДокумент.Вывести(ОбластьНомера);
	
	ОбластьДанных.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		
		СтруктураЗаполненияСекции.Вставить("ВсегоСкидок", ВсегоСкидок);
		СтруктураЗаполненияСекции.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
		
		ОбластьСкидок.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Присоединить(ОбластьСкидок);
		
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Присоединить(ОбластьСуммы);
	
	//:::СуммаПрописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СтруктураЗаполненияСекции.Очистить();
	
	СуммаКПрописи = Всего;
	СтруктураЗаполненияСекции.Вставить("ИтоговаяСтрока", 
		НСтр("ru ='Всего наименований '") + Строка(Количество) + НСтр("ru =', на сумму '") + УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
	СтруктураЗаполненияСекции.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	//:::Подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи|ОсновныеДанные");
	СтруктураЗаполненияСекции.Очистить();
	
	СтруктураЗаполненияСекции.Вставить("ОтветственныйРасшифровка", Шапка.Отпустил);
	СтруктураЗаполненияСекции.Вставить("ОтветственныйДолжность", Шапка.ОтпустилДолжность);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // СформироватьТоварныйЧек()

Функция ЕстьЗаказыПокупателей(ОбъектПечати, МассивЗаказовПокупателя)
	
	Если ЗначениеЗаполнено(ОбъектПечати) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ОбъектПечати);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЧ_Запасы.Заказ КАК ЗаказПокупателя
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК ТЧ_Запасы
		|ГДЕ
		|	ТЧ_Запасы.Ссылка = &ТекущийДокумент
		|	И ТЧ_Запасы.Заказ ССЫЛКА Документ.ЗаказПокупателя";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивЗаказовПокупателя.Добавить(Выборка.ЗаказПокупателя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЗаказовПокупателя.Количество() > 0;
	
КонецФункции

// Сформировать печатные формы объектов
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РасходнаяНакладная";

	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ИмяМакета = "Накладная" ИЛИ ИмяМакета = "НакладнаяСУслугами" Тогда
			
			ИсключаяУслуги = (ИмяМакета = "Накладная");
			СформироватьНакладную(ТабличныйДокумент, ТекущийДокумент, ИсключаяУслуги);
			
		ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" Тогда
			
			СформироватьАктОбОказанииУслуг(ТабличныйДокумент, ТекущийДокумент, Ошибки)
			
		ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" Тогда
			
			СформироватьУниверсальныйПередаточныйДокумент(ТабличныйДокумент, ТекущийДокумент);
			
		ИначеЕсли ИмяМакета = "ГарантийныйТалон" Тогда
			
			РаботаСНоменклатуройСервер.СформироватьГарантийныеТалоныДокумента(ТабличныйДокумент, ТекущийДокумент, Ошибки);
			
		ИначеЕсли ИмяМакета = "ТОРГ12" ИЛИ ИмяМакета = "ТОРГ12СУслугами" Тогда
			
			СформироватьТОРГ12(ТабличныйДокумент, ТекущийДокумент, ИмяМакета, Ошибки);
			
		ИначеЕсли ИмяМакета = "М15" Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасходнаяНакладная.Дата КАК ДатаДокумента,
			|	РасходнаяНакладная.Номер КАК Номер,
			|	РасходнаяНакладная.Организация КАК Руководители,
			|	РасходнаяНакладная.Организация КАК Организация,
			|	РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
			|	РасходнаяНакладная.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
			|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
			|	РасходнаяНакладная.СтруктурнаяЕдиница КАК СкладНаименование,
			|	РасходнаяНакладная.Контрагент КАК Контрагент,
			|	РасходнаяНакладная.Договор.Представление КАК Основание,
			|	РасходнаяНакладная.ВалютаДокумента,
			|	РасходнаяНакладная.СуммаВключаетНДС,
			|	РасходнаяНакладная.СтруктурнаяЕдиница.МОЛ КАК МОЛ,
			|	РасходнаяНакладная.Ответственный.Физлицо КАК Ответственный,
			|	РасходнаяНакладная.НДСВключатьВСтоимость,
			|	РасходнаяНакладная.Курс,
			|	РасходнаяНакладная.Кратность,
			|	РасходнаяНакладная.Руководитель КАК Руководитель,
			|	РасходнаяНакладная.РуководительДолжность КАК РуководительДолжность,
			|	РасходнаяНакладная.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
			|	РасходнаяНакладная.Отпустил КАК Отпустил,
			|	РасходнаяНакладная.ОтпустилДолжность КАК ОтпустилДолжность
			|ИЗ
			|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
			|ГДЕ
			|	РасходнаяНакладная.Ссылка = &ТекущийДокумент";
			Шапка = Запрос.Выполнить().Выбрать();

			Шапка.Следующий();

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			
			ИспользоватьПересчет = (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
			|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.Наименование
			|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
			|	КОНЕЦ КАК ЗапасНаименование,
			|	РасходнаяНакладнаяЗапасы.Характеристика,
			|	ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
			|	РасходнаяНакладнаяЗапасы.Номенклатура.Код КАК ЗапасКод,
			|	РасходнаяНакладнаяЗапасы.Номенклатура.Артикул КАК Артикул,
			|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
			|	РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
			|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
			|	&Цена_Параметр КАК Цена,
			|	СУММА(РасходнаяНакладнаяЗапасы.Количество) КАК Количество,
			|	СУММА(&Сумма_Параметр) КАК Сумма,
			|	СУММА(&СуммаНДС_Параметр) КАК СуммаНДС,
			|	СУММА(&Всего_Параметр) КАК Всего,
			|	МИНИМУМ(РасходнаяНакладнаяЗапасы.НомерСтроки) КАК НомерСтроки
			|ИЗ
			|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
			|ГДЕ
			|	РасходнаяНакладнаяЗапасы.Ссылка = &ТекущийДокумент
			|	И (НЕ РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
			|
			|СГРУППИРОВАТЬ ПО
			|	РасходнаяНакладнаяЗапасы.Номенклатура,
			|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
			|	РасходнаяНакладнаяЗапасы.СтавкаНДС,
			|	&Цена_Параметр,
			|	РасходнаяНакладнаяЗапасы.Характеристика,
			|	ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)),
			|	РасходнаяНакладнаяЗапасы.Номенклатура.Код,
			|	РасходнаяНакладнаяЗапасы.Номенклатура.Артикул,
			|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Наименование,
			|	РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Код,
			|	ВЫБОР
			|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
			|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.Наименование
			|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
			|	КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Если ИспользоватьПересчет Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"Выразить(РасходнаяНакладнаяЗапасы.Цена * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"Выразить(РасходнаяНакладнаяЗапасы.Сумма * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"Выразить(РасходнаяНакладнаяЗапасы.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"Выразить(РасходнаяНакладнаяЗапасы.Всего * &Курс / &Кратность КАК Число(15,2))");
				
				Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
				Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
				
			Иначе
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"РасходнаяНакладнаяЗапасы.Цена");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"РасходнаяНакладнаяЗапасы.Сумма");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"РасходнаяНакладнаяЗапасы.СуммаНДС");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"РасходнаяНакладнаяЗапасы.Всего");
				
			КонецЕсли;
			
			ВыборкаСтрокЗапасы = Запрос.Выполнить().Выбрать();
			
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_М15";

			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходнаяНакладная.ПФ_MXL_М15");
			
			ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
			
			СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
			СведенияОГрузополучателе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, , Шапка.БанковскийСчетКонтрагента);
			
			ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
			
			Если Шапка.ДатаДокумента < Дата('20110101') Тогда
				НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
			Иначе
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			КонецЕсли;		
			
			ОбластьМакетаШапка.Параметры.НомерДокумента = НомерДокумента;
			ОбластьМакетаШапка.Параметры.ДатаДокумента = Шапка.ДатаДокумента;
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации);
			ОбластьМакетаШапка.Параметры.КонтрагентНаименование = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,");
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
			
			// Выводим заголовок таблицы
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			НомерСтроки = 0;
			КоличествоСтрок = ВыборкаСтрокЗапасы.Количество();
			
			// Инициализация итогов в документе
			ИтогоСуммаБезНДС = 0;
			ИтогоСуммаНДС = 0;
			ИтогоВсегоСНДС = 0;
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть докмента
			Пока ВыборкаСтрокЗапасы.Следующий() Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
				КонецЕсли;                                                   // помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал); // помещаться и подвал документа
				КонецЕсли;

				Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
					
					// Выведем заголовок таблицы
					НомерСтраницы	= НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				
				Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
					ОбластьМакетаСтрока.Параметры.ЗапасНаименование = ВыборкаСтрокЗапасы.Содержание;
				Иначе
					ОбластьМакетаСтрока.Параметры.ЗапасНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.ЗапасНаименование, 
																		ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
				КонецЕсли;

				СуммаСНДС	= ВыборкаСтрокЗапасы.Всего;
				СуммаНДС	= ВыборкаСтрокЗапасы.СуммаНДС;
				СуммаБезНДС = ВыборкаСтрокЗапасы.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокЗапасы.СуммаНДС, 0);
				
				Количество = ВыборкаСтрокЗапасы.Количество;
				Цена = СуммаБезНДС / Количество;
				
				ОбластьМакетаСтрока.Параметры.Количество = Количество;
				ОбластьМакетаСтрока.Параметры.СуммаСНДС = СуммаСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС = СуммаНДС;
				ОбластьМакетаСтрока.Параметры.Цена = Цена;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
				ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
				ИтогоВсегоСНДС = ИтогоВсегоСНДС + СуммаСНДС;
				
			КонецЦикла;
			
			// Выводим подвал документа
			ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
			
			ЗначенияПараметров = Новый Структура;
			
			ФИОРуководителя = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОРуководителя, Строка(Шапка.Руководитель));
			ЗначенияПараметров.Вставить("ФИОРуководителя",		ФИОРуководителя);
			ЗначенияПараметров.Вставить("ДолжностьРуководителя", Шапка.РуководительДолжность);
			
			ФИОГлавногоБухгалтера = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОГлавногоБухгалтера, Строка(Шапка.ГлавныйБухгалтер));
			ЗначенияПараметров.Вставить("ФИОГлавБухгалтера",	ФИОГлавногоБухгалтера);
			
			ФИОКладовщика = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОКладовщика, Строка(Шапка.Отпустил));
			ЗначенияПараметров.Вставить("ФИОКладовщика",		ФИОКладовщика);
			ЗначенияПараметров.Вставить("ДолжностьКладовщика",	Шапка.ОтпустилДолжность);
			
			ЗначенияПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
			ЗначенияПараметров.Вставить("СуммаПрописью",							РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Константы.НациональнаяВалюта.Получить()));
			ЗначенияПараметров.Вставить("ИтогНДС",									ИтогоВсегоСНДС - ИтогоСуммаБезНДС); 
			
			ОбластьМакетаПодвал.Параметры.Заполнить(ЗначенияПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
			
			// Зададим параметры макета
			ТабличныйДокумент.ПолеСверху = 0;
			ТабличныйДокумент.ПолеСлева = 0;
			ТабличныйДокумент.ПолеСнизу = 0;
			ТабличныйДокумент.ПолеСправа = 0;
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли ИмяМакета = "ТоварныйЧек" Тогда
			
			СформироватьТоварныйЧек(ТабличныйДокумент, ТекущийДокумент);
			
		ИначеЕсли ИмяМакета = "БланкТоварногоНаполнения" Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходнаяНакладная.Дата КАК ДатаДокумента,
			|	РасходнаяНакладная.Номер КАК Номер,
			|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
			|	РасходнаяНакладная.СтруктурнаяЕдиница КАК ПредставлениеСклада,
			|	РасходнаяНакладная.Ячейка КАК ПредставлениеЯчейки,
			|	РасходнаяНакладная.Запасы.(
			|		НомерСтроки КАК НомерСтроки,
			|		Номенклатура.Склад КАК Склад,
			|		Номенклатура.Ячейка КАК Ячейка,
			|		ВЫБОР
			|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
			|				ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
			|			ИНАЧЕ РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное
			|		КОНЕЦ КАК Запас,
			|		Содержание КАК Содержание,
			|		Номенклатура.Артикул КАК Артикул,
			|		Номенклатура.Код КАК Код,
			|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
			|		Количество КАК Количество,
			|		Характеристика,
			|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
			|		КлючСвязи
			|	),
			|	РасходнаяНакладная.СерийныеНомера.(
			|		СерийныйНомер,
			|		КлючСвязи
			|	)
			|ИЗ
			|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
			|ГДЕ
			|	РасходнаяНакладная.Ссылка = &ТекущийДокумент
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Шапка = Запрос.Выполнить().Выбрать();
			Шапка.Следующий();
			
			ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
			ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
			
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходнаяНакладная_БланкТоварногоНаполнения";
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РасходнаяНакладная.ПФ_MXL_БланкТоварногоНаполнения");
			
			Если Шапка.ДатаДокумента < Дата('20110101') Тогда
				НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
			Иначе
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.ТекстЗаголовка = "Расходная накладная № "
													+ НомерДокумента
													+ " от "
													+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
													
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Склад");
			ОбластьМакета.Параметры.ПредставлениеСклада = Шапка.ПредставлениеСклада;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить() Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Ячейка");
				ОбластьМакета.Параметры.ПредставлениеЯчейки = Шапка.ПредставлениеЯчейки;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
			ОбластьМакета.Параметры.ВремяПечати = "Дата и время печати: "
												 	+ ТекущаяДата()
													+ ". Пользователь: "
													+ Пользователи.ТекущийПользователь();
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			Пока ВыборкаСтрокЗапасы.Следующий() Цикл
				
				Если НЕ ВыборкаСтрокЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				
				Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
					
					ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
					
				Иначе
					
					СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокЗапасы.КлючСвязи);
					ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
						ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул, СтрокаСерийныеНомера);
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Расходная накладная", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Накладная"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяСУслугами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяСУслугами", "Расходная накладная (с услугами)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "НакладнаяСУслугами"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", "ТОРГ12 (Товарная накладная)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТОРГ12"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12СУслугами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12СУслугами", "ТОРГ12 (Товарная накладная с услугами)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТОРГ12СУслугами"));

	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "УниверсальныйПередаточныйДокумент"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслуг", "Акт об оказании услуг", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктОбОказанииУслуг"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15", "М15 (Накладная на отпуск материалов)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "М15"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН", "1-Т (Товарно-транспортная накладная)", Обработки.ПечатьТТН.ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТоварныйЧек") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТоварныйЧек", "Товарный чек", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТоварныйЧек"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения", "Бланк товарного наполнения", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "БланкТоварногоНаполнения"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон", "Гарантийный талон", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ГарантийныйТалон"));
		
	КонецЕсли;
	
	ЭтоСчетНаОплату = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату");
	ЭтоСчетНаЧастичнуюОплату = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплату");
	ЭтоСчетНаОплатуСФаксимильнойПодписью = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплатуСФаксимильнойПодписью");
	ЭтоСчетНаЧастичнуюОплатуСФаксимильнойПодписью = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплатуСФаксимильнойПодписью");
	Если ЭтоСчетНаОплату
		ИЛИ ЭтоСчетНаЧастичнуюОплату 
		ИЛИ ЭтоСчетНаОплатуСФаксимильнойПодписью
		ИЛИ ЭтоСчетНаЧастичнуюОплатуСФаксимильнойПодписью Тогда
		
		ВидДокумента = ?(ЭтоСчетНаОплату ИЛИ ЭтоСчетНаОплатуСФаксимильнойПодписью, "СчетНаОплату", "СчетНаЧастичнуюОплату");
		Если ЭтоСчетНаОплату Тогда
			
			ИмяМакета = "СчетНаОплату";
			ПредставлениеПФ = НСтр("ru = 'Счет на оплату'");
			
		ИначеЕсли ЭтоСчетНаЧастичнуюОплату Тогда
			
			ИмяМакета = "СчетНаЧастичнуюОплату";
			ПредставлениеПФ = НСтр("ru = 'Счет на частичную оплату'");
			
		ИначеЕсли ЭтоСчетНаОплатуСФаксимильнойПодписью Тогда
			
			ИмяМакета = "СчетНаОплатуСФаксимильнойПодписью";
			ПредставлениеПФ = НСтр("ru = 'Счет на оплату (с факсимиле)'");
			
		ИначеЕсли ЭтоСчетНаЧастичнуюОплатуСФаксимильнойПодписью Тогда
			
			ИмяМакета = "СчетНаЧастичнуюОплатуСФаксимильнойПодписью";
			ПредставлениеПФ = НСтр("ru = 'Счет на частичную оплату (с факсимиле)'")
			
		КонецЕсли;
		
		МассивСчетНаОплату = Новый Массив;
		МассивЗаказовПокупателя = Новый Массив;
		Для каждого ОбъектПечати Из МассивОбъектов Цикл
			
			Если ЗначениеЗаполнено(ОбъектПечати.ДокументОснование) 
				И ТипЗнч(ОбъектПечати.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплату") Тогда
				
				МассивСчетНаОплату.Добавить(ОбъектПечати.ДокументОснование);
				
			ИначеЕсли ЕстьЗаказыПокупателей(ОбъектПечати, МассивЗаказовПокупателя) Тогда
				// обработка не требуется
			Иначе
				
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, ПредставлениеПФ, Новый ТабличныйДокумент);
				
				ТекстСообщения = Нстр("ru = '__________________
											|Документ %1.
											|Для формирования печатной формы необходимо либо выбрать документом-основанием счет на оплату, либо указать в табличной части заказ покупателя.'");
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектПечати);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивЗаказовПокупателя.Количество() > 0 Тогда
			
			Если ЭтоСчетНаОплату Тогда
				
				ТабличныйДокумент = Документы.ЗаказПокупателя.ПечатьСчетНаОплату(МассивЗаказовПокупателя, ОбъектыПечати, ВидДокумента);
				
			ИначеЕсли ЭтоСчетНаЧастичнуюОплату Тогда
				
				ТабличныйДокумент = Документы.ЗаказПокупателя.ПечатьСчетНаОплату(МассивЗаказовПокупателя, ОбъектыПечати, ВидДокумента);
				
			ИначеЕсли ЭтоСчетНаОплатуСФаксимильнойПодписью Тогда
				
				ТабличныйДокумент = Документы.ЗаказПокупателя.ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивЗаказовПокупателя, ОбъектыПечати, ВидДокумента);
				
			ИначеЕсли ЭтоСчетНаЧастичнуюОплатуСФаксимильнойПодписью Тогда
				
				ТабличныйДокумент = Документы.ЗаказПокупателя.ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивЗаказовПокупателя, ОбъектыПечати, ВидДокумента);
				
			КонецЕсли;
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, ПредставлениеПФ, ТабличныйДокумент);
			
		КонецЕсли;
		
		Если МассивСчетНаОплату.Количество() > 0 Тогда
			
			Если ЭтоСчетНаОплату Тогда
				
				ТабличныйДокумент = Документы.СчетНаОплату.ПечатьСчетНаОплату(МассивСчетНаОплату, ОбъектыПечати, ВидДокумента);
				
			ИначеЕсли ЭтоСчетНаЧастичнуюОплату Тогда
				
				ТабличныйДокумент = Документы.СчетНаОплату.ПечатьСчетНаОплату(МассивСчетНаОплату, ОбъектыПечати, ВидДокумента);
				
			ИначеЕсли ЭтоСчетНаОплатуСФаксимильнойПодписью Тогда
				
				ТабличныйДокумент = Документы.СчетНаОплату.ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивСчетНаОплату, ОбъектыПечати, ВидДокумента);
				
			ИначеЕсли ЭтоСчетНаЧастичнуюОплатуСФаксимильнойПодписью Тогда
				
				ТабличныйДокумент = Документы.СчетНаОплату.ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивСчетНаОплату, ОбъектыПечати, ВидДокумента);
				
			КонецЕсли;
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, ПредставлениеПФ, ТабличныйДокумент);
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		
		МассивСчетФактур = Новый Массив;
		Для каждого ОбъектПечати Из МассивОбъектов Цикл
			
			СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ОбъектПечати, Ложь);
			Если СтруктураДанных =  Неопределено Тогда
				
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура", "Счет-фактура", Новый ТабличныйДокумент);
				
				ТекстСообщения = Нстр("ru = '__________________
											|Документ %1.
											|Счет-фактура не сформирована.'");
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектПечати);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
				
			Иначе
				
				МассивСчетФактур.Добавить(СтруктураДанных.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСчетФактур.Количество() > 0 Тогда
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура", "Счет-фактура", Документы.СчетФактура.ПечатнаяФорма(МассивСчетФактур, ОбъектыПечати, Ложь));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ЗначениеИдентификатора = "АктОбОказанииУслуг,ТОРГ12,ТОРГ12СУслугами,М15,ТТН,СчетФактура,Накладная,НакладнаяСУслугами,%1,ГарантийныйТалон,БланкТоварногоНаполнения";
	ЗначениеИдентификатора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗначениеИдентификатора,
		?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), "СчетНаОплату,СчетНаЧастичнуюОплату,СчетНаОплатуСФаксимильнойПодписью,СчетНаЧастичнуюОплатуСФаксимильнойПодписью", 
		"СчетНаОплату,СчетНаОплатуСФаксимильнойПодписью"));
	ЗначениеИдентификатора = СтрЗаменить(ЗначениеИдентификатора, ",ГарантийныйТалон", ?(ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера"), 
		",ГарантийныйТалон", ""));	
		
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = ЗначениеИдентификатора;
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ12 (Товарная накладная)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12СУслугами";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ12 (Товарная накладная с услугами)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М15";
	КомандаПечати.Представление = НСтр("ru = 'М15 (Накладная на отпуск материалов)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 14;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = '1-Т (Товарно-транспортная накладная)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 17;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьТН";
	КомандаПечати.Идентификатор = "ТН";
	КомандаПечати.Представление = НСтр("ru = 'Приложение №4 (Товарная накладная)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 20;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьУПД";
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 23;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.ФункциональныеОпции = "ПередачаТоваровНаКомиссию,ПриемТоваровНаКомиссию,ИспользуетсяОСНО,ИспользоватьСчетаФактурыИсходящие";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 26;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 29;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяСУслугами";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная (с услугами)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 32;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.Порядок = 35;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаЧастичнуюОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на частичную оплату'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
	КомандаПечати.Порядок = 38;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплатуСФаксимильнойПодписью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (с факсимиле)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью";
	КомандаПечати.Порядок = 41;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаЧастичнуюОплатуСФаксимильнойПодписью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на частичную оплату (с факсимиле)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью";
	КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
	КомандаПечати.Порядок = 44;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТоварныйЧек";
	КомандаПечати.Представление = НСтр("ru = 'Товарный чек'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 47;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалон";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьСерийныеНомера";
	КомандаПечати.Порядок = 52;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкТоварногоНаполнения";
	КомандаПечати.Представление = НСтр("ru = 'Бланк товарного наполнения'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 55;	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССерийнымиНомерами

// Формирует таблицу значений, содержащую данные для проведения по регистру СерийныеНомераГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерийныеНомера(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаРасходнаяНакладная.СерийныеНомера.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Движение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход)
	|	КОНЕЦ КАК Операция,
	|	ВременнаяТаблицаЗапасы.Период КАК Период,
	|	ВременнаяТаблицаЗапасы.Период КАК ДатаСобытия,
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	ВременнаяТаблицаЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомера КАК СерийныеНомера
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерийныеНомера.КлючСвязи";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // СформироватьТаблицаСерийныеНомера()

#КонецОбласти

#Область ИнициализацияДаных

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства) Экспорт
	
	#Область ТекстЗапросаИнициализироватьДанныеДокумента
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Договор.ЭтоДоговорОбслуживания КАК ЭтоДоговорОбслуживания,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Договор.ЭтоДоговорОбслуживания
	|				И РасходнаяНакладная.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВестиУчетРасходовПоДоговорамОбслуживания,
	|	РасходнаяНакладная.Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасходнаяНакладная.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	РасходнаяНакладная.Договор.РасчетыВУсловныхЕдиницах КАК ДоговорРасчетыВУсловныхЕдиницах,
	|	РасходнаяНакладная.Контрагент,
	|	РасходнаяНакладная.ВалютаДокумента,
	|	РасходнаяНакладная.Кратность,
	|	РасходнаяНакладная.Курс,
	|	РасходнаяНакладная.Договор,
	|	РасходнаяНакладная.Дата
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&МоментВремени,
	|			Валюта В (&ВалютаУчета, &ВалютаНациональная, &ВалютаНакладной)
	|				ИЛИ Валюта В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаШапка.ДоговорВалютаРасчетов
	|					ИЗ
	|						ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|	РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации КАК ВидОперации,
	|	РасходнаяНакладнаяЗапасы.Ссылка КАК Документ,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Ответственный КАК Ответственный,
	|	РасходнаяНакладнаяЗапасы.Ссылка.ДокументОснование КАК ДокументОснование,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент КАК Контрагент,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор КАК Договор,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА &Организация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррОрганизация,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Подразделение КАК ПодразделениеПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	РасходнаяНакладнаяЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА РасходнаяНакладнаяЗапасы.Ссылка.Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррСтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА РасходнаяНакладнаяЗапасы.Ссылка.Ячейка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ячейка,
	|	РасходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррСчетУчета,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И РасходнаяНакладнаяЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				И РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РасходнаяНакладнаяЗапасы.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА РасходнаяНакладнаяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьХарактеристики
	|						ТОГДА РасходнаяНакладнаяЗапасы.Характеристика
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА РасходнаяНакладнаяЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьПартии
	|						ТОГДА РасходнаяНакладнаяЗапасы.Партия
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И РасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.Заказ
	|		КОГДА РасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|				И РасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладнаяЗапасы.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Заказ,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку)
	|				ИЛИ РасходнаяНакладнаяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение)
	|			ТОГДА ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|							И РасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						ТОГДА РасходнаяНакладнаяЗапасы.Заказ
	|					КОГДА РасходнаяНакладнаяЗапасы.Заказ ССЫЛКА Документ.ЗаказПоставщику
	|							И РасходнаяНакладнаяЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						ТОГДА РасходнаяНакладнаяЗапасы.Заказ
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КоррЗаказ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА РасходнаяНакладнаяЗапасы.Количество
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Количество * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА РасходнаяНакладнаяЗапасы.Резерв
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Резерв * РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РасходнаяНакладнаяЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА РасходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ РасходнаяНакладнаяЗапасы.СуммаНДС * РасходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * РасходнаяНакладнаяЗапасы.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА РасходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ РасходнаяНакладнаяЗапасы.СуммаНДС * РасходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * РасходнаяНакладнаяЗапасы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА РасходнаяНакладнаяЗапасы.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ РасходнаяНакладнаяЗапасы.Всего * РасходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * РасходнаяНакладнаяЗапасы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РасходнаяНакладнаяЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА РасходнаяНакладнаяЗапасы.СуммаНДС * КурсыРегВалюты.Курс * РасходнаяНакладнаяЗапасы.Ссылка.Кратность / (РасходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ РасходнаяНакладнаяЗапасы.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РасходнаяНакладнаяЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА РасходнаяНакладнаяЗапасы.Всего * КурсыРегВалюты.Курс * РасходнаяНакладнаяЗапасы.Ссылка.Кратность / (РасходнаяНакладнаяЗапасы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ РасходнаяНакладнаяЗапасы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	РасходнаяНакладнаяЗапасы.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	РасходнаяНакладнаяЗапасы.Всего КАК ВсегоВалютаДокумента,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	РасходнаяНакладнаяЗапасы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	РасходнаяНакладнаяЗапасы.КлючСвязи,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСВалютаДокумента
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.ВидОперации КАК ВидОперации,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ТаблицаДокумента.Заказ КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельностиПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	&Ссылка КАК ДокументКуда,
	|	ТаблицаДокумента.Ссылка.ДокументОснование КАК ДокументОснование,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Кратность) КАК ЧИСЛО(15, 2))) КАК СуммаАванса,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Ссылка.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Ссылка.Кратность) КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаРасчетов) КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭквайринговаяОперация,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ) КАК ДатаПлатежа,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Курс / ТаблицаДокумента.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаРубПоКурсуАванса
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.РасходнаяНакладная.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютДокументаСрезПоследних
	|		ПО (КурсыВалютДокументаСрезПоследних.Валюта = &ВалютаНакладной)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Документ,
	|	ТаблицаДокумента.Ссылка.Дата,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.Ссылка.Договор,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Ссылка.ВидОперации,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ,
	|	ТаблицаДокумента.Ссылка.ДокументОснование,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяСкидкиНаценки.КлючСвязи,
	|	РасходнаяНакладнаяСкидкиНаценки.СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА РасходнаяНакладнаяСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА РасходнаяНакладнаяСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ РасходнаяНакладнаяСкидкиНаценки.Сумма * РасходнаяНакладнаяСкидкиНаценки.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * РасходнаяНакладнаяСкидкиНаценки.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	РасходнаяНакладнаяСкидкиНаценки.Ссылка.Дата КАК Период,
	|	РасходнаяНакладнаяСкидкиНаценки.Ссылка.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.РасходнаяНакладная.СкидкиНаценки КАК РасходнаяНакладнаяСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	РасходнаяНакладнаяСкидкиНаценки.Ссылка = &Ссылка
	|	И РасходнаяНакладнаяСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяСерийныеНомера.КлючСвязи,
	|	РасходнаяНакладнаяСерийныеНомера.СерийныйНомер
	|ПОМЕСТИТЬ ВременнаяТаблицаСерийныеНомера
	|ИЗ
	|	Документ.РасходнаяНакладная.СерийныеНомера КАК РасходнаяНакладнаяСерийныеНомера
	|ГДЕ
	|	РасходнаяНакладнаяСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|	И НЕ РасходнаяНакладнаяСерийныеНомера.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад";
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаРасходнаяНакладная);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаНациональная", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("ВалютаНакладной", ДокументСсылкаРасходнаяНакладная.ВалютаДокумента);
	
	Запрос.ВыполнитьПакет();
	
	// Формирование проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗакупки(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаВыпускПродукции(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыКРасходуСоСкладов(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыПринятые(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыПереданные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПоставщикам(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПоставщиками(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПотребностьВЗапасах(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// ДисконтныеКарты
	
	// Серийные номера
	СформироватьТаблицаСерийныеНомера(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// Серийные номера
	
	СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасы(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	// Эквайринг
	ЭквайринговыеОперацииСервер.СформироватьТаблицаДоходыИРасходыКассовыйМетодЭквайринг(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// Биллинг
	СформироватьТаблицаВыполнениеДоговораОбслуживания(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
	
	// Рублевые суммы документов
	Если ДокументСсылкаРасходнаяНакладная.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю
		И ДокументСсылкаРасходнаяНакладная.Договор.ВалютаРасчетов <> Константы.НациональнаяВалюта.Получить() Тогда
		
		ТаблицаВзаиморасчеты = РублевыеСуммыДокументов.ПодготовитьТаблицуДокументаРасчетыВВалюте(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		Если СтруктураДополнительныеСвойства.ДляПроведения.ВалютаДокумента <> СтруктураДополнительныеСвойства.ДляПроведения.НациональнаяВалюта Тогда
			РублевыеСуммыДокументов.РаспределитьАвансыПоТаблицеРеализации(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства, ТаблицаВзаиморасчеты);
		КонецЕсли;
		РублевыеСуммыДокументов.СформироватьТаблицаРублевыеСуммыДокументовВВалюте(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства);
		РублевыеСуммыДокументов.ДобавитьДвиженияВТаблицуРасчетов(
			ТаблицаВзаиморасчеты,
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями,
			ДокументСсылкаРасходнаяНакладная,
			СтруктураДополнительныеСвойства,
			Ложь);
			
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРублевыеСуммыДокументовВВалюте", Новый ТаблицаЗначений);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаРасходнаяНакладная, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", "ДвиженияЗапасыНаСкладахИзменение", 
	// "ДвиженияЗапасыКРасходуСоСкладовИзменение", "ДвиженияЗапасыПереданныеИзменение",
	// "ДвиженияЗапасыПринятыеИзменение", "ДвиженияРазмещениеЗаказовИзменение",
	// "ДвиженияПотребностьВЗапасахИзменение содержат записи, необходимо выполнить 
	// контроль реализации товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыКРасходуСоСкладовИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПереданныеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПоставщикамИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПотребностьВЗапасахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерийныеНомераИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыНаСкладахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(&МоментКонтроля, ) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|			И (ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПереданныеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПереданныеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПереданныеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПереданныеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПереданные,
		|	ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПереданные,
		|	ЕСТЬNULL(ДвиженияЗапасыПереданныеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПереданные,
		|	ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПереданные
		|ИЗ
		|	ДвиженияЗапасыПереданныеИзменение КАК ДвиженияЗапасыПереданныеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПереданные.Остатки(&МоментКонтроля, ) КАК ЗапасыПереданныеОстатки
		|		ПО ДвиженияЗапасыПереданныеИзменение.Организация = ЗапасыПереданныеОстатки.Организация
		|			И ДвиженияЗапасыПереданныеИзменение.Номенклатура = ЗапасыПереданныеОстатки.Номенклатура
		|			И ДвиженияЗапасыПереданныеИзменение.Характеристика = ЗапасыПереданныеОстатки.Характеристика
		|			И ДвиженияЗапасыПереданныеИзменение.Партия = ЗапасыПереданныеОстатки.Партия
		|			И ДвиженияЗапасыПереданныеИзменение.Контрагент = ЗапасыПереданныеОстатки.Контрагент
		|			И ДвиженияЗапасыПереданныеИзменение.Договор = ЗапасыПереданныеОстатки.Договор
		|			И ДвиженияЗапасыПереданныеИзменение.Заказ = ЗапасыПереданныеОстатки.Заказ
		|			И ДвиженияЗапасыПереданныеИзменение.ТипПриемаПередачи = ЗапасыПереданныеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПереданныеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПереданныеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПринятыеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПринятые.Остатки(&МоментКонтроля, ) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|			И ДвиженияЗапасыПринятыеИзменение.Контрагент = ЗапасыПринятыеОстатки.Контрагент
		|			И ДвиженияЗапасыПринятыеИзменение.Договор = ЗапасыПринятыеОстатки.Договор
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПоставщикамИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПоставщикамИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику КАК ЗаказПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПоставщикамИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПоставщикамОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПоставщикамИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПоставщикам,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПоставщикам
		|ИЗ
		|	ДвиженияЗаказыПоставщикамИзменение КАК ДвиженияЗаказыПоставщикамИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&МоментКонтроля, ) КАК ЗаказыПоставщикамОстатки
		|		ПО ДвиженияЗаказыПоставщикамИзменение.Организация = ЗаказыПоставщикамОстатки.Организация
		|			И ДвиженияЗаказыПоставщикамИзменение.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику
		|			И ДвиженияЗаказыПоставщикамИзменение.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И ДвиженияЗаказыПоставщикамИзменение.Характеристика = ЗаказыПоставщикамОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПотребностьВЗапасахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияПотребностьВЗапасахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ТипДвижения КАК ТипДвиженияПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияПотребностьВЗапасахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ПотребностьВЗапасахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияПотребностьВЗапасахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК ОстатокПотребностьВЗапасах,
		|	ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокПотребностьВЗапасах
		|ИЗ
		|	ДвиженияПотребностьВЗапасахИзменение КАК ДвиженияПотребностьВЗапасахИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностьВЗапасах.Остатки(&МоментКонтроля, ) КАК ПотребностьВЗапасахОстатки
		|		ПО ДвиженияПотребностьВЗапасахИзменение.Организация = ПотребностьВЗапасахОстатки.Организация
		|			И ДвиженияПотребностьВЗапасахИзменение.ТипДвижения = ПотребностьВЗапасахОстатки.ТипДвижения
		|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя = ПотребностьВЗапасахОстатки.ЗаказПокупателя
		|			И ДвиженияПотребностьВЗапасахИзменение.Номенклатура = ПотребностьВЗапасахОстатки.Номенклатура
		|			И ДвиженияПотребностьВЗапасахИзменение.Характеристика = ПотребностьВЗапасахОстатки.Характеристика
		|			И (ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияРасчетыСПокупателямиИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Документ КАК ДокументПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментКонтроля, ) КАК РасчетыСПокупателямиОстатки
		|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
		|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
		|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
		|			И (ВЫБОР
		|				КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|					ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
		|				ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерийныеНомераИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерийныеНомераИзменение.СерийныйНомер КАК СерийныйНомерПредставление,
		|	ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерийныеНомераИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерийныеНомераИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерийныеНомераОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерийныеНомераОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерийныеНомераИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияСерийныеНомераИзменение КАК ДвиженияСерийныеНомераИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(&МоментКонтроля, ) КАК СерийныеНомераОстатки
		|		ПО ДвиженияСерийныеНомераИзменение.СерийныйНомер = СерийныеНомераОстатки.СерийныйНомер
		|			И ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница = СерийныеНомераОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерийныеНомераИзменение.Номенклатура = СерийныеНомераОстатки.Номенклатура
		|			И ДвиженияСерийныеНомераИзменение.Характеристика = СерийныеНомераОстатки.Характеристика
		|			И ДвиженияСерийныеНомераИзменение.Партия = СерийныеНомераОстатки.Партия
		|			И ДвиженияСерийныеНомераИзменение.Ячейка = СерийныеНомераОстатки.Ячейка
		|			И (ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой()
			ИЛИ НЕ МассивРезультатов[5].Пустой()
			ИЛИ НЕ МассивРезультатов[6].Пустой()
			ИЛИ НЕ МассивРезультатов[7].Пустой()
			ИЛИ НЕ МассивРезультатов[8].Пустой()
			ИЛИ НЕ МассивРезультатов[9].Пустой()
			Тогда
			
			ДокументОбъектРасходнаяНакладная = ДокументСсылкаРасходнаяНакладная.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов переданных.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПереданные(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов принятых.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятые(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу поставщику.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПоставщикам(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток потребности в запасах.
		Если НЕ МассивРезультатов[6].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструПотребностьВЗапасах(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов[7].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[7].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по серийным номерам.
		Если НЕ МассивРезультатов[8].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[8].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по остаткам запасов в разрезе номеров ГТД.
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить()
			И НЕ МассивРезультатов[9].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[9].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти

#КонецЕсли