#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	// Движения формируются только для не фискальных регистраторов (ФР).
	// Для ФР движения формируются в чеках ККМ.
	// Использование в рознице заказов покупателей доступно, если отключено архивирование чеков.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ЗаказПокупателя КАК СчетНаОплату,
	|	0 КАК СуммаАванса,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента = ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаВал
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) КАК СуммаОплаты
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютСчета
	|		ПО ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента = КурсыВалютСчета.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТаблицаДокумента.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	(ТаблицаДокумента.КассаККМ.ТипКассы <> ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор) ИЛИ &ПолноеПроведение)
	|	И ТаблицаДокумента.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И ТаблицаДокумента.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|	И ТаблицаДокумента.ЗаказПокупателя.Контрагент.ВестиУчетОплатыПоСчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.ЗаказПокупателя
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.ВалютаДокумента = ТаблицаДокумента.ЗаказПокупателя.ВалютаДокумента
	|				ТОГДА ТаблицаДокумента.СуммаВал
	|			ИНАЧЕ ВЫРАЗИТЬ(ТаблицаДокумента.СуммаВал * КурсыВалютКассы.Курс * КурсыВалютСчета.Кратность / (КурсыВалютСчета.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2))
	|		КОНЕЦ) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	// Движения формируются только для не фискальных регистраторов (ФР).
	// Для ФР движения формируются в чеках ККМ.
	// Использование в рознице заказов покупателей доступно, если отключено архивирование чеков.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Дата КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
	|ГДЕ
	|	(ТаблицаЗаказыПокупателей.КассаККМ.ТипКассы <> ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор) ИЛИ &ПолноеПроведение)
	|	И ТаблицаЗаказыПокупателей.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	И ТаблицаЗаказыПокупателей.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Дата,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказыПокупателей.Количество) <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыИсточник(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИспользоватьЗаказыВРозничнойТорговле", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле"));
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаЗапасы.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|	И ТаблицаЗапасы.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	И &ИспользоватьЗаказыВРозничнойТорговле
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасыИсточник КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыИсточник.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыИсточник[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
			
		Если КоличествоТребуется > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуется Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуется / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуется;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуется Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
	
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуется;
			
			// Приход.
			СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
			СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
			СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
			СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
			СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
					
			СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
			СтрокаТаблицыПриход.Количество = КоличествоТребуется;
				
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
			//СтрокаТаблицыПриход.ВидДвиженияУправленческий = ВидДвиженияБухгалтерии.Дебет;
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаЗапасовИсточник()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.Подразделение КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаЗапасы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимостиПродаж КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыПодготовленная
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Дата,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.Подразделение,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.ТипНоменклатуры,
	|	ТаблицаЗапасы.НаправлениеДеятельности,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.СчетУчетаСебестоимостиПродаж,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетУчетаЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.НомерСтроки,
	|	ВременнаяТаблицаЗапасы.Период,
	|	ВременнаяТаблицаЗапасы.ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Организация,
	|	ВременнаяТаблицаЗапасы.Документ,
	|	ВременнаяТаблицаЗапасы.ДокументПродажи,
	|	ВременнаяТаблицаЗапасы.Подразделение,
	|	ВременнаяТаблицаЗапасы.Ответственный,
	|	ВременнаяТаблицаЗапасы.ТоварыНаКомиссии,
	|	ВременнаяТаблицаЗапасы.ЗаказПродажи,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.СчетУчета,
	|	ВременнаяТаблицаЗапасы.КоррСчетУчета,
	|	ВременнаяТаблицаЗапасы.Номенклатура,
	|	ВременнаяТаблицаЗапасы.ТипНоменклатуры,
	|	ВременнаяТаблицаЗапасы.НаправлениеДеятельности,
	|	ВременнаяТаблицаЗапасы.КоррНоменклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика,
	|	ВременнаяТаблицаЗапасы.КоррХарактеристика,
	|	ВременнаяТаблицаЗапасы.Партия,
	|	ВременнаяТаблицаЗапасы.КоррПартия,
	|	ВременнаяТаблицаЗапасы.ЗаказПокупателя,
	|	ВременнаяТаблицаЗапасы.КоррЗаказПокупателя,
	|	ВременнаяТаблицаЗапасы.СтавкаНДС,
	|	ВременнаяТаблицаЗапасы.Количество,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаЗапасы.Резерв > ВременнаяТаблицаЗапасы.Количество
	|				И ВременнаяТаблицаЗапасы.Количество > 0
	|			ТОГДА ВременнаяТаблицаЗапасы.Количество
	|		КОГДА ВременнаяТаблицаЗапасы.Количество <= 0
	|			ТОГДА 0
	|		ИНАЧЕ ВременнаяТаблицаЗапасы.Резерв
	|	КОНЕЦ КАК Резерв,
	|	ВременнаяТаблицаЗапасы.СуммаНДС,
	|	ВременнаяТаблицаЗапасы.Сумма,
	|	ВременнаяТаблицаЗапасы.Себестоимость,
	|	ВременнаяТаблицаЗапасы.ФиксированнаяСтоимость,
	|	ВременнаяТаблицаЗапасы.СчетДт,
	|	ВременнаяТаблицаЗапасы.СчетКт,
	|	ВременнаяТаблицаЗапасы.Содержание,
	|	ВременнаяТаблицаЗапасы.СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасыПодготовленная КАК ВременнаяТаблицаЗапасы";
	
	Запрос.УстановитьПараметр("ОприходованиеЗапасов", НСтр("ru = 'Оприходование запасов'"));
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	СформироватьТаблицаЗапасыПродажа(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродажа(ДокументСсылкаЧекККМ, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация КАК Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ТаблицаЗапасы.Характеристика КАК Характеристика,
	|						ТаблицаЗапасы.Партия КАК Партия,
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ВЫБОР
	|							КОГДА ТаблицаЗапасы.ЗаказПокупателя <> НЕОПРЕДЕЛЕНО
	|								ТОГДА ВЫБОР
	|										КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|											ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|										ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|									КОНЕЦ
	|							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						КОНЕЦ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				
	|					ОБЪЕДИНИТЬ ВСЕ
	|				
	|					ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокументаЗапасы.Количество
	|			ИНАЧЕ -ДвиженияДокументаЗапасы.Количество
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияДокументаЗапасы.Сумма
	|			ИНАЧЕ -ДвиженияДокументаЗапасы.Сумма
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЧекККМ);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Резерв), СтрокаТаблицаЗапасы.Резерв, 0);
		КоличествоТребуетсяСвободныйОстаток = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Количество), СтрокаТаблицаЗапасы.Количество, 0);
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				
				СтрокаТаблицыРасход.СодержаниеПроводки = Неопределено;
				
			ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Сформируем проводки.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.Подразделение;
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
				
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
			КонецЕсли;
			
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Продажи.
				СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
				СтрокаПродажи.Количество = 0;
				СтрокаПродажи.Сумма = 0;
				СтрокаПродажи.СуммаНДС = 0;
				СтрокаПродажи.Себестоимость = СуммаКСписанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				
				СтрокаТаблицыРасход.СодержаниеПроводки = Неопределено;
				
			ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Сформируем проводки.
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.Подразделение;
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетДт;
				
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
			КонецЕсли;
			
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Продажи.
				СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
				СтрокаПродажи.Количество = 0;
				СтрокаПродажи.Сумма = 0;
				СтрокаПродажи.СуммаНДС = 0;
				СтрокаПродажи.Себестоимость = СуммаКСписанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродажа()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Дата КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.Подразделение КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	0 КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	&ПолноеПроведение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Дата,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.Подразделение,
	|	ТаблицаПродажи.Ответственный
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаПродажи.Количество) <> 0
	|		ИЛИ СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) <> 0
	|		ИЛИ СУММА(ТаблицаПродажи.Сумма) <> 0)";
	
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Дата КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И &ПолноеПроведение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Дата,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) <> 0";
	
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПринятые(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПринятые.Дата КАК Период,
	|	ТаблицаЗапасыПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПринятые.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыПринятые.Количество) КАК Количество,
	|	0 КАК СуммаРасчетов,
	|	ВЫРАЗИТЬ(&ПриемЗапасовТоварыНаКомиссии КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПринятые
	|ГДЕ
	|	ТаблицаЗапасыПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыПринятые.ТоварыНаКомиссии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПринятые.Дата,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПриемЗапасовТоварыНаКомиссии", НСтр("ru = 'Реализация комиссионных товаров'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПринятые()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Дата КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.Подразделение КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И &ПолноеПроведение
	|	И ТаблицаДоходыИРасходы.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Дата,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.Подразделение,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаВыручкиОтПродаж
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаДокумента
	|ГДЕ
	|	&ПолноеПроведение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаДоходов,
	|	&Ссылка КАК Документ,
	|	СУММА(0) КАК СуммаКомиссииДоходов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя) КАК ВидОперацииЭквайринга
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И ТаблицаДокумента.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.НаправлениеДеятельности,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма), 0) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыДоходыИРасходыКассовыйМетод = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	
	ТаблицаДоходыИРасходыКассовыйМетодЭквайринг = ТаблицаЗапасыДоходыИРасходыКассовыйМетод.Скопировать();
	ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Очистить();
	ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Колонки.Добавить("СодержаниеПроводки", Новый ОписаниеТипов("Строка"));
	
	ТаблицаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Скопировать();
	
	// Необходимо распределить направления деятельности между суммой оплаты наличными и суммой оплаты платежными картами.
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыКассовыйМетод Из ТаблицаЗапасыДоходыИРасходыКассовыйМетод Цикл
			Если СуммаКСписанию = 0 Тогда
				СтрокаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетод.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетод, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
			ИначеЕсли СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетодЭквайринг, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов > СуммаКСписанию Тогда
				// КассовыйМетодЭквайринг
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетодЭквайринг, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СтрокаДоходыИРасходыКассовыйМетодЭквайринг.СуммаДоходов = СуммаКСписанию;
				
				// КассовыйМетод
				СтрокаДоходыИРасходыКассовыйМетод = ТаблицаДоходыИРасходыКассовыйМетод.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходыКассовыйМетод, СтрокаЗапасыДоходыИРасходыКассовыйМетод);
				СтрокаДоходыИРасходыКассовыйМетод .СуммаДоходов = СтрокаЗапасыДоходыИРасходыКассовыйМетод.СуммаДоходов - СуммаКСписанию;
				
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Отразим движения по комиссии и по возвратам.
	ТаблицаРасчетыПоЭквайрингу = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Для каждого ТекущаяСтрокаРасчетов Из ТаблицаРасчетыПоЭквайрингу Цикл
		
		// Отразим движения по возвратам.
		// Для дальнейшего распределения в документах поступления на счет и расхода со счета сделаем приход и расход по пустому направлению
		// деятельности. Это особенность ведения именно розничной торговли, т.к. при вводе только отчета о розничных продажах без чеков
		// не получиться определить, по каким направлениям деятельности был выполнен возврат товара и денежных средств.
		// Но при этом взаиморасчеты по эквайрингу будут учтены в полном объеме. 
		// Чтобы они совпадали требуется сделать два движения на одну сумму, но с разными видами операций.
		// Такие действия потребуются в маловероятном случае, когда поступят деньги по операции оплаты от банка, но еще не спишутся деньги по операции
		// возврата.
		Если ТекущаяСтрокаРасчетов.ВидОперацииЭквайринга = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю Тогда
			
			Движение = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
			Движение.Период = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
			Движение.Документ = ДокументСсылкаОтчетОРозничныхПродажах;
			Движение.Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
			Движение.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
			Движение.Статья = ДокументСсылкаОтчетОРозничныхПродажах.Статья;
			Движение.СуммаДоходов = ТекущаяСтрокаРасчетов.Сумма;
			Движение.ВидОперацииЭквайринга = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю;
			Движение.СодержаниеПроводки = "Учет возврата оплаты на карту";
			
			ДвижениеПоступление = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеПоступление, Движение);
			ДвижениеПоступление.ВидОперацииЭквайринга = Перечисления.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя;
			
		КонецЕсли;
		
		Если ТекущаяСтрокаРасчетов.Комиссия <> 0 Тогда
		// Отразим движения по комиссии.
		
			Если ТекущаяСтрокаРасчетов.ВидОперацииЭквайринга = Перечисления.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю И
				Не ТекущаяСтрокаРасчетов.ЭквайринговыйТерминал.ЭквайрерБеретКомиссиюЗаВозвратДС Тогда
				Продолжить;
			КонецЕсли;
		
			Движение = ТаблицаДоходыИРасходыКассовыйМетодЭквайринг.Добавить();
			Движение.Период = СтруктураДополнительныеСвойства.ДляПроведения.Дата;
			Движение.Документ = ДокументСсылкаОтчетОРозничныхПродажах;
			Движение.Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
			Движение.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
			Движение.Статья = ДокументСсылкаОтчетОРозничныхПродажах.Статья;
			Движение.СуммаКомиссииДоходов = ТекущаяСтрокаРасчетов.Комиссия;
			Движение.ВидОперацииЭквайринга = ТекущаяСтрокаРасчетов.ВидОперацииЭквайринга;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", ТаблицаДоходыИРасходыКассовыйМетод);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетодЭквайринг", ТаблицаДоходыИРасходыКассовыйМетодЭквайринг);
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассаККМ КАК КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ВалютаДокумента КАК Валюта,
	|	СУММА(ДанныеДокумента.Сумма) КАК Сумма,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ДанныеДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ДанныеДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ПоступлениеДенежныхСредств КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаДенежныеСредстваВКассахККМ
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ДанныеДокумента
	|ГДЕ
	|	&ПолноеПроведение
	|	И ДанныеДокумента.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента,
	|	СУММА(ДанныеДокумента.Сумма),
	|	СУММА(ДанныеДокумента.СуммаВал),
	|	-СУММА(ДанныеДокумента.Сумма),
	|	-СУММА(ДанныеДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ОплатаПлатежнымиКартами КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ДанныеДокумента
	|ГДЕ
	|	&ПолноеПроведение
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.КассаККМ,
	|	ДанныеДокумента.КассаККМСчетУчета,
	|	ДанныеДокумента.ВалютаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	КассаККМ,
	|	Валюта,
	|	СчетУчета";
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	Запрос.УстановитьПараметр("ПоступлениеДенежныхСредств", НСтр("ru = 'Поступление денежных средств в кассу ККМ'"));
	Запрос.УстановитьПараметр("ОплатаПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков денежных средств.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.Организация КАК Организация,
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ.КассаККМ КАК КассаККМ
	|ИЗ
	|	ВременнаяТаблицаДенежныеСредстваВКассахККМ КАК ВременнаяТаблицаДенежныеСредстваВКассахККМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваВКассахККМ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыДенежныеСредстваВКассахККМ(Запрос.МенеджерВременныхТаблиц, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваВКассахККМ", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДенежныеСредстваВКассахККМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Дата КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.КассаККМСчетУчета КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Управленческий.РасчетыСПоставщиками)
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	&ПолноеПроведение
	|	И ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ЭквайринговыйТерминалСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.КассаККМСчетУчета,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.КассаККМСчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ОтражениеОплатыПлатежнымиКартами
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ТаблицаУправленческий
	|ГДЕ
	|	&ПолноеПроведение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчета.Валютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	ВременнаяТаблицаКурсовыхРазницДенежныеСредстваВКассахККМ КАК ТаблицаУправленческий
	|ГДЕ
	|	&ПолноеПроведение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ОтражениеОплатыПлатежнымиКартами", НСтр("ru = 'Оплата платежными картами'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

Процедура СформироватьТаблицаЗапасыВРазрезеГТД(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МоментВремени",	Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Ссылка",			ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Организация",	СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"Выбрать
	|	ТаблицаЗапасыНаСкладах.НомерСтроки КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Документ.Дата КАК Период
	|	,ТаблицаЗапасыНаСкладах.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,Сумма(ТаблицаЗапасыНаСкладах.Количество) КАК КоличествоВДокументе
	|	,Неопределено КАК НомерГТД
	|	,Неопределено КАК СтранаПроисхождения
	|Из
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|
	|Сгруппировать по
	|	ТаблицаЗапасыНаСкладах.НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	,ТаблицаЗапасыНаСкладах.Документ.Дата
	|	,ТаблицаЗапасыНаСкладах.Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|;
	|
	|Выбрать
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ДвиженияДокумента.Регистратор.Дата КАК Период
	|	,&Организация КАК Организация
	|	,ДвиженияДокумента.Номенклатура КАК Номенклатура
	|	,ДвиженияДокумента.Характеристика КАК Характеристика
	|	,ДвиженияДокумента.Партия КАК Партия
	|	,ДвиженияДокумента.НомерГТД КАК НомерГТД
	|	,ДвиженияДокумента.СтранаПроисхождения КАК СтранаПроисхождения
	|	,ДвиженияДокумента.Количество КАК КоличествоОстаток
	|Поместить ТаблицаОстатковГТД
	|
	|Из
	|	РегистрНакопления.ЗапасыВРазрезеГТД КАК ДвиженияДокумента 
	|Где
	|	ДвиженияДокумента.Регистратор = &Ссылка
	|
	|Объединить Все
	|
	|Выбрать
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,НоменклатураКоличество.Документ.Дата КАК Период
	|	,НоменклатураКоличество.Организация КАК Организация
	|	,НоменклатураКоличество.Номенклатура КАК Номенклатура
	|	,НоменклатураКоличество.Характеристика КАК Характеристика
	|	,НоменклатураКоличество.Партия КАК Партия
	|	,ЗапасыВРазрезеГТД.НомерГТД КАК НомерГТД
	|	,ЗапасыВРазрезеГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|	,ЕстьNULL(ЗапасыВРазрезеГТД.КоличествоОстаток, 0) КАК КоличествоОстаток
	|Из ВременнаяТаблицаЗапасы КАК НоменклатураКоличество
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(&МоментВремени, ) КАК ЗапасыВРазрезеГТД
	|	ПО НоменклатураКоличество.Организация = ЗапасыВРазрезеГТД.Организация
	|		И НоменклатураКоличество.Номенклатура = ЗапасыВРазрезеГТД.Номенклатура
	|		И НоменклатураКоличество.Характеристика = ЗапасыВРазрезеГТД.Характеристика
	|		И НоменклатураКоличество.Партия = ЗапасыВРазрезеГТД.Партия
	|
	|;
	|
	|Выбрать
	|	0 КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаОстатковГТД.Период КАК Период
	|	,ТаблицаОстатковГТД.Организация КАК Организация
	|	,ТаблицаОстатковГТД.Номенклатура КАК Номенклатура
	|	,ТаблицаОстатковГТД.Характеристика КАК Характеристика
	|	,ТаблицаОстатковГТД.Партия КАК Партия
	|	,ТаблицаОстатковГТД.НомерГТД КАК НомерГТД
	|	,ТаблицаОстатковГТД.СтранаПроисхождения КАК СтранаПроисхождения
	|	,Сумма(ТаблицаОстатковГТД.КоличествоОстаток) КАК КоличествоОстаток
	|Из
	|	ТаблицаОстатковГТД КАК ТаблицаОстатковГТД
	|Где
	|	ТаблицаОстатковГТД.КоличествоОстаток > 0
	|
	|Сгруппировать по
	|	ТаблицаОстатковГТД.Период
	|	,ТаблицаОстатковГТД.Организация
	|	,ТаблицаОстатковГТД.Номенклатура
	|	,ТаблицаОстатковГТД.Характеристика
	|	,ТаблицаОстатковГТД.Партия
	|	,ТаблицаОстатковГТД.НомерГТД
	|	,ТаблицаОстатковГТД.СтранаПроисхождения";
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаИзДокумента = ПакетЗапроса[0].Выгрузить();
	ТаблицаОстатков = ПакетЗапроса[2].Выгрузить();
	
	ТаблицаЗапасыВРазрезеГТД = ТаблицаИзДокумента.Скопировать();
	ТаблицаЗапасыВРазрезеГТД.Очистить();
	ТаблицаЗапасыВРазрезеГТД.Колонки.КоличествоВДокументе.Имя = "Количество";
	
	Для каждого СтрокаТаблицы Из ТаблицаИзДокумента Цикл
		
		ОтборСтрок = Новый Структура("Номенклатура, Характеристика, Партия", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.Партия);
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(ОтборСтрок);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			ДобавитьСтрокуВТаблицуДвиженийПоГТД(ТаблицаЗапасыВРазрезеГТД, СтрокаТаблицы, МассивСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", ТаблицаЗапасыВРазрезеГТД);
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуДвиженийПоГТД(ТаблицаЗапасыВРазрезеГТД, СтрокаТаблицы, МассивСтрок)
	
	Для каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если НЕ СтрокаМассива.КоличествоОстаток > 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗапасыВРазрезеГТД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Если СтрокаМассива.КоличествоОстаток >= СтрокаТаблицы.КоличествоВДокументе Тогда
			
			НоваяСтрока.Количество			= СтрокаТаблицы.КоличествоВДокументе;
			НоваяСтрока.НомерГТД 			= СтрокаМассива.НомерГТД;
			НоваяСтрока.СтранаПроисхождения = СтрокаМассива.СтранаПроисхождения;
			
			СтрокаМассива.КоличествоОстаток = СтрокаМассива.КоличествоОстаток - СтрокаТаблицы.КоличествоВДокументе;
			Прервать;
			
		Иначе
			
			НоваяСтрока.Количество			= СтрокаМассива.КоличествоОстаток;
			НоваяСтрока.НомерГТД			= СтрокаМассива.НомерГТД;
			НоваяСтрока.СтранаПроисхождения = СтрокаМассива.СтранаПроисхождения;
			
			СтрокаМассива.КоличествоОстаток = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДисконтныеКарты

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнойКарте.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Дата КАК Период,
	|	ТаблицаПродажи.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаПродажи.ВладелецКарты КАК ВладелецКарты,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|ГДЕ
	|	&ПолноеПроведение
	|	И ТаблицаПродажи.ДисконтнаяКарта <> ЗНАЧЕНИЕ(Справочник.ДисконтныеКарты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Дата,
	|	ТаблицаПродажи.ДисконтнаяКарта,
	|	ТаблицаПродажи.ВладелецКарты";
	
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

#КонецОбласти

#Область АвтоматическиеСкидки

// Формирует таблицу значений, содержащую данные для проведения по регистру ПредоставленныеАвтоматическиеСкидки.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам(ДокументСсылкаАктВыполненныхРабот, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаАктВыполненныхРабот.СкидкиНаценки.Количество() = 0 ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК АвтоматическаяСкидка,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Номенклатура,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Характеристика,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СтруктурнаяЕдиница КАК ПолучательСкидки
	|ИЗ
	|	ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|ГДЕ
	|	&ПолноеПроведение";
	
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам()

#КонецОбласти

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтроки,
	|	ОтчетОРозничныхПродажахЗапасы.КлючСвязи КАК КлючСвязи,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка КАК Документ,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.ИнвентаризацияЗапасов КАК ДокументОснование,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Статья КАК Статья,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Дата КАК Дата,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Дата КАК Период,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.КассаККМ КАК КассаККМ,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.КассаККМ.Владелец КАК КассаККМВладелец,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	&Организация КАК Организация,
	|	ОтчетОРозничныхПродажахЗапасы.Заказ КАК ЗаказПокупателя,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.Подразделение КАК Подразделение,
	|	ОтчетОРозничныхПродажахЗапасы.Ответственный КАК Ответственный,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродаж,
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК Ячейка,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ОтчетОРозничныхПродажахЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Количество
	|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Количество * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ОтчетОРозничныхПродажахЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажахЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.СуммаНДС * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Всего * КурсыДокВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыДокВалюты.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.СуммаНДС КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ОтчетОРозничныхПродажахЗапасы.Всего КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ОтчетОРозничныхПродажахЗапасы.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	ОтчетОРозничныхПродажахЗапасы.ДисконтнаяКарта,
	|	ОтчетОРозничныхПродажахЗапасы.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ОтчетОРозничныхПродажахЗапасы.Резерв
	|		ИНАЧЕ ОтчетОРозничныхПродажахЗапасы.Резерв * ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажахЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыДокВалюты
	|		ПО ОтчетОРозничныхПродажахЗапасы.Ссылка.ВалютаДокумента = КурсыДокВалюты.Валюта
	|ГДЕ
	|	ОтчетОРозничныхПродажахЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.Ссылка.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА &РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям
	|			ТОГДА ВЫБОР
	|					КОГДА ТабличнаяЧасть.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА НАЧАЛОПЕРИОДА(ТабличнаяЧасть.Ссылка.Дата, ДЕНЬ)
	|					ИНАЧЕ НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаПлатежа, ДЕНЬ)
	|				КОНЕЦ
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаПлатежа,
	|	&Ссылка КАК Документ,
	|	&Организация КАК Организация,
	|	ТабличнаяЧасть.Ссылка.КассаККМ КАК КассаККМ,
	|	ТабличнаяЧасть.Ссылка.КассаККМ.СчетУчета КАК КассаККМСчетУчета,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал.СчетУчета КАК ЭквайринговыйТерминалСчетУчета,
	|	ТабличнаяЧасть.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫРАЗИТЬ(ТабличнаяЧасть.Сумма * КурсыВалютКассы.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютКассы.Кратность) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ТабличнаяЧасть.Сумма КАК СуммаВал,
	|	ТабличнаяЧасть.Ссылка.СтруктурнаяЕдиница,
	|	ТабличнаяЧасть.ЭквайринговыйТерминал,
	|	ТабличнаяЧасть.ВидПлатежнойКарты,
	|	ТабличнаяЧасть.НомерПлатежнойКарты,
	|	ТабличнаяЧасть.Ссылка.Статья
	|ПОМЕСТИТЬ ВременнаяТаблицаОплатаПлатежнымиКартами
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыВалютУчетаСрезПоследних
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютКассы
	|		ПО ТабличнаяЧасть.Ссылка.ВалютаДокумента = КурсыВалютКассы.Валюта
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахСкидкиНаценки.СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ОтчетОРозничныхПродажахСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ОтчетОРозничныхПродажахСкидкиНаценки.Сумма * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка.Дата КАК Период,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Номенклатура,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Характеристика,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка КАК Документ,
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СкидкиНаценки КАК ОтчетОРозничныхПродажахСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ОтчетОРозничныхПродажахСкидкиНаценки.Ссылка = &Ссылка
	|	И ОтчетОРозничныхПродажахСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты,
	|	МАКСИМУМ(ЭквайринговыеТерминалыВидыПлатежныхКарт.ПроцентКомиссии) КАК ПроцентКомиссии,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка КАК ЭквайринговыйТерминал
	|ПОМЕСТИТЬ ВременнаяТаблицаПроцентыКомиссии
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы.ВидыПлатежныхКарт КАК ЭквайринговыеТерминалыВидыПлатежныхКарт
	|ГДЕ
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал
	|			ИЗ
	|				ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.ВидПлатежнойКарты,
	|	ЭквайринговыеТерминалыВидыПлатежныхКарт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(РезервированиеЗапасовЗапасы.НомерСтроки) КАК НомерСтроки,
	|	РезервированиеЗапасовЗапасы.Ссылка КАК Ссылка,
	|	РезервированиеЗапасовЗапасы.Партия КАК Партия,
	|	РезервированиеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	РезервированиеЗапасовЗапасы.Характеристика КАК Характеристика,
	|	РезервированиеЗапасовЗапасы.Заказ КАК Заказ,
	|	РезервированиеЗапасовЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(РезервированиеЗапасовЗапасы.Количество) КАК Количество,
	|	СУММА(РезервированиеЗапасовЗапасы.Резерв) КАК Резерв
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыСгруппированная
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Запасы КАК РезервированиеЗапасовЗапасы
	|ГДЕ
	|	РезервированиеЗапасовЗапасы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервированиеЗапасовЗапасы.Ссылка,
	|	РезервированиеЗапасовЗапасы.Партия,
	|	РезервированиеЗапасовЗапасы.Номенклатура,
	|	РезервированиеЗапасовЗапасы.Характеристика,
	|	РезервированиеЗапасовЗапасы.Заказ,
	|	РезервированиеЗапасовЗапасы.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервированиеЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	РезервированиеЗапасовЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	РезервированиеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА РезервированиеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ РезервированиеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ РезервированиеЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА РезервированиеЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(РезервированиеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница) = ТИП(Справочник.СтруктурныеЕдиницы)
	|					ТОГДА ВЫБОР
	|							КОГДА РезервированиеЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|								ТОГДА РезервированиеЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|							ИНАЧЕ РезервированиеЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|						КОНЕЦ
	|				ИНАЧЕ РезервированиеЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	РезервированиеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА РезервированиеЗапасовЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА РезервированиеЗапасовЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	РезервированиеЗапасовЗапасы.Заказ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК КоррЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РезервированиеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				И РезервированиеЗапасовЗапасы.Количество > 0
	|			ТОГДА РезервированиеЗапасовЗапасы.Резерв - РезервированиеЗапасовЗапасы.Количество
	|		КОГДА ТИПЗНАЧЕНИЯ(РезервированиеЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				И РезервированиеЗапасовЗапасы.Количество <= 0
	|			ТОГДА РезервированиеЗапасовЗапасы.Резерв
	|		ИНАЧЕ (РезервированиеЗапасовЗапасы.Резерв - РезервированиеЗапасовЗапасы.Количество) * РезервированиеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит) КАК ВидДвиженияУправленческий,
	|	&РезервированиеЗапасов КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыИсточник
	|ИЗ
	|	ВременнаяТаблицаЗапасыСгруппированная КАК РезервированиеЗапасовЗапасы
	|ГДЕ
	|	РезервированиеЗапасовЗапасы.Резерв > РезервированиеЗапасовЗапасы.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий КАК ВидДвиженияУправленческий,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасыИсточник КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ВидДвиженияУправленческий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажахСерийныеНомера.КлючСвязи,
	|	ОтчетОРозничныхПродажахСерийныеНомера.СерийныйНомер
	|ПОМЕСТИТЬ ВременнаяТаблицаСерийныеНомера
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерийныеНомера КАК ОтчетОРозничныхПродажахСерийныеНомера
	|ГДЕ
	|	ОтчетОРозничныхПродажахСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям", ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям"));
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));
	
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Формирование проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДенежныеСредстваВКассахККМ(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасы(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыПринятые(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаЗапасыВРазрезеГТД(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	// АвтоматическиеСкидки
	СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	// Эквайринг
	СформироватьТаблицаРасчетыПоЭквайрингу(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	// Конец Эквайринг
	
	// Серийные номера
	СформироватьТаблицаСерийныеНомера(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);	
	
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
	// Заказы покупателя в Рознице
	// Отмена резерва по заказу
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыИсточник", МассивРезультатов[6].Выгрузить());
	СформироватьТаблицаЗапасыИсточник(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаОтчетОРозничныхПродажах, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если НЕ УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", необходимо выполнить контроль реализации товаров.
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
	 ИЛИ СтруктураВременныеТаблицы.ДвиженияСерийныеНомераИзменение Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыНаСкладахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|			И (ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПринятыеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПринятые.Остатки(
		|				&МоментКонтроля,
		|				(Организация, Номенклатура, Характеристика, Партия, Контрагент, Договор, Заказ, ТипПриемаПередачи) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыПринятыеИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыПринятыеИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыПринятыеИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыПринятыеИзменение.Контрагент КАК Контрагент,
		|						ДвиженияЗапасыПринятыеИзменение.Договор КАК Договор,
		|						ДвиженияЗапасыПринятыеИзменение.Заказ КАК Заказ,
		|						ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачи
		|					ИЗ
		|						ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение)) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|			И ДвиженияЗапасыПринятыеИзменение.Контрагент = ЗапасыПринятыеОстатки.Контрагент
		|			И ДвиженияЗапасыПринятыеИзменение.Договор = ЗапасыПринятыеОстатки.Договор
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерийныеНомераИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерийныеНомераИзменение.СерийныйНомер КАК СерийныйНомерПредставление,
		|	ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерийныеНомераИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерийныеНомераИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерийныеНомераОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерийныеНомераОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерийныеНомераИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК ОстатокСерийныеНомера,
		|	ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокСерийныеНомера
		|ИЗ
		|	ДвиженияСерийныеНомераИзменение КАК ДвиженияСерийныеНомераИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(&МоментКонтроля, ) КАК СерийныеНомераОстатки
		|		ПО ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница = СерийныеНомераОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерийныеНомераИзменение.Номенклатура = СерийныеНомераОстатки.Номенклатура
		|			И ДвиженияСерийныеНомераИзменение.Характеристика = СерийныеНомераОстатки.Характеристика
		|			И ДвиженияСерийныеНомераИзменение.Партия = СерийныеНомераОстатки.Партия
		|			И ДвиженияСерийныеНомераИзменение.СерийныйНомер = СерийныеНомераОстатки.СерийныйНомер
		|			И ДвиженияСерийныеНомераИзменение.Ячейка = СерийныеНомераОстатки.Ячейка
		|			И (ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой() Тогда
			ДокументОтчетОРозничныхПродажах = ДокументСсылкаОтчетОРозничныхПродажах.ПолучитьОбъект()
		КонецЕсли;
		
		МассивСообщений = Новый Массив;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ, МассивСообщений);
		КонецЕсли;

		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ, МассивСообщений);
		КонецЕсли;
		
		// Отрицательный остаток запасов принятых.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятые(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ, МассивСообщений);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ, МассивСообщений);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера(ДокументОтчетОРозничныхПродажах, ВыборкаИзРезультатаЗапроса, Отказ, МассивСообщений);
		КонецЕсли;
		
		Если НЕ Константы.КонтролироватьОстаткиПриПробитииЧековККМ.Получить()
			Тогда
			Отказ = Ложь;
		КонецЕсли;
		
		Если МассивСообщений.Количество() > 0 Тогда
			ДополнительныеСвойства.Вставить("МассивСообщенийВыполнитьКонтрольЗакрытияСмены", МассивСообщений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#Область ПроцедурыОткрытияИЗакрытияСмены

// Процедура удаляет движения по регистру Запасы всех чеков и чеков ККМ из кассовой смены, котоаря передана в качестве параметра.
//
Процедура УдалитьДвиженияПоРегиструЗапасыВПробитыхЧекахККМ(КассоваяСменаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удалим движения по запасам по пробитым чекам.
	// По отложенным чекам (товар зарезервирован, но чек не пробит) движения не удаляем, т.к. в этом случае
	// будет расхождение в регистрах Запасы и ЗапасыНаСкладах.
	// Пользователь должен будет удалить такие чеки вручную.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.Архивный
	|	И НЕ ЧекККМ.ДвиженияПоЗапасамУдалять
	|	И ЧекККМ.Проведен
	//|	И ЧекККМ.НомерЧекаККМ > 0
	|	И ЧекККМ.Статус <> Значение(Перечисление.СтатусыЧековККМ.ТоварЗарезервирован)
	|	И ЧекККМ.КассоваяСмена = &КассоваяСмена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.Архивный
	|	И НЕ ЧекККМВозврат.ДвиженияПоЗапасамУдалять
	|	И ЧекККМВозврат.Проведен
	//|	И ЧекККМВозврат.НомерЧекаККМ > 0
	|	И ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСменаОбъект.Ссылка);
	ВыборкаЧековККМ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЧековККМ.Следующий() Цикл
		ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
		ЧекККМОбъект.ДвиженияПоЗапасамУдалять = Истина;
		ЧекККМОбъект.Записать(РежимЗаписиДокумента.Запись); // Если будем записывать с проведением, то будут сформированы записи по всем регистрам.
		
		Набор = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаЧековККМ.Ссылка);
		Набор.Записать(Истина);
		
		Если РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки() = Истина Тогда
			Набор = РегистрыНакопления.СерийныеНомера.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ВыборкаЧековККМ.Ссылка);
			Набор.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет закрытие кассовой смены.
//
Функция ЗакрытьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект) Экспорт
	
	СтруктураВозвращаемоеЗначение = Новый Структура;
	СтруктураВозвращаемоеЗначение.Вставить("ОтчетОРозничныхПродажах");
	СтруктураВозвращаемоеЗначение.Вставить("ОписаниеОшибки");
	
	ВыполняетсяОбработкаЧеков = Истина;
	УдалитьДвиженияПоРегиструЗапасыВПробитыхЧекахККМ(ОтчетОРозничныхПродажахОбъект);
	ВыполняетсяОбработкаЧеков = Ложь;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Подготовка данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|	ЧекККМЗапасы.Характеристика КАК Характеристика,
	|	ЧекККМЗапасы.Партия КАК Партия,
	|	СУММА(ЧекККМЗапасы.Количество) КАК Количество,
	|	ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекККМЗапасы.Цена КАК Цена,
	|	ЧекККМЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЧекККМЗапасы.Сумма) КАК Сумма,
	|	СУММА(ЧекККМЗапасы.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЧекККМЗапасы.Всего) КАК Всего,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.ВалютаДокумента КАК ВалютаДокумента,
	|	ЧекККМЗапасы.ВидЦен КАК ВидЦен,
	|	ЧекККМЗапасы.КассаККМ КАК КассаККМ,
	|	ЧекККМЗапасы.Подразделение КАК Подразделение,
	|	ЧекККМЗапасы.Ответственный КАК Ответственный,
	|	ЧекККМЗапасы.Организация КАК Организация,
	|	ЧекККМЗапасы.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	СУММА(ЧекККМЗапасы.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|	ЧекККМЗапасы.Заказ,
	|	СУММА(ЧекККМЗапасы.Резерв) КАК Резерв,
	|	СУММА(ЧекККМЗапасы.Возврат) КАК Возврат
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|		ЧекККМЗапасы.Характеристика КАК Характеристика,
	|		ЧекККМЗапасы.Партия КАК Партия,
	|		ЧекККМЗапасы.Количество КАК Количество,
	|		ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЧекККМЗапасы.Цена КАК Цена,
	|		ЧекККМЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|		ЧекККМЗапасы.Сумма КАК Сумма,
	|		ЧекККМЗапасы.СуммаНДС КАК СуммаНДС,
	|		ЧекККМЗапасы.Всего КАК Всего,
	|		ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЧекККМЗапасы.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|		ЧекККМЗапасы.Ссылка.ВидЦен КАК ВидЦен,
	|		ЧекККМЗапасы.Ссылка.КассаККМ КАК КассаККМ,
	|		ЧекККМЗапасы.Ссылка.Подразделение КАК Подразделение,
	|		ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный,
	|		ЧекККМЗапасы.Ссылка.Организация КАК Организация,
	|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|		ЧекККМЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		ЧекККМЗапасы.Заказ КАК Заказ,
	|		ВЫБОР
	|			КОГДА &ЕстьЗаказыИРезерв
	|					И ЧекККМЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ТОГДА ЧекККМЗапасы.Резерв
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Резерв,
	|		0 КАК Возврат
	|	ИЗ
	|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМЗапасы.Ссылка.Архивный
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМЗапасы.Номенклатура,
	|		ЧекККМЗапасы.Характеристика,
	|		ЧекККМЗапасы.Партия,
	|		-ЧекККМЗапасы.Количество,
	|		ЧекККМЗапасы.ЕдиницаИзмерения,
	|		ЧекККМЗапасы.Цена,
	|		ЧекККМЗапасы.ПроцентСкидкиНаценки,
	|		ЧекККМЗапасы.СтавкаНДС,
	|		-ЧекККМЗапасы.Сумма,
	|		-ЧекККМЗапасы.СуммаНДС,
	|		-ЧекККМЗапасы.Всего,
	|		ЧекККМЗапасы.Ссылка.СтруктурнаяЕдиница,
	|		ЧекККМЗапасы.Ссылка.ВалютаДокумента,
	|		ЧекККМЗапасы.Ссылка.ВидЦен,
	|		ЧекККМЗапасы.Ссылка.КассаККМ,
	|		ЧекККМЗапасы.Ссылка.Подразделение,
	|		ЧекККМЗапасы.Ссылка.Ответственный,
	|		ЧекККМЗапасы.Ссылка.Организация,
	|		ЧекККМЗапасы.Ссылка.ДисконтнаяКарта,
	|		-ЧекККМЗапасы.СуммаАвтоматическойСкидки,
	|		ЧекККМЗапасы.Заказ,
	|		0,
	|		ЧекККМЗапасы.Количество
	|	ИЗ
	|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМЗапасы
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМЗапасы.Ссылка.Архивный) КАК ЧекККМЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.Характеристика,
	|	ЧекККМЗапасы.Партия,
	|	ЧекККМЗапасы.ЕдиницаИзмерения,
	|	ЧекККМЗапасы.Цена,
	|	ЧекККМЗапасы.ПроцентСкидкиНаценки,
	|	ЧекККМЗапасы.СтруктурнаяЕдиница,
	|	ЧекККМЗапасы.ВалютаДокумента,
	|	ЧекККМЗапасы.ВидЦен,
	|	ЧекККМЗапасы.КассаККМ,
	|	ЧекККМЗапасы.Организация,
	|	ЧекККМЗапасы.Подразделение,
	|	ЧекККМЗапасы.Ответственный,
	|	ЧекККМЗапасы.СтавкаНДС,
	|	ЧекККМЗапасы.ДисконтнаяКарта,
	|	ЧекККМЗапасы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК Сумма,
	|	ОплатаПлатежнымиКартами.Дата КАК ДатаПлатежа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|		ЧекККМОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|		ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|		ЧекККМОплатаПлатежнымиКартами.Сумма КАК Сумма,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассаККМ КАК КассаККМ,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Организация КАК Организация,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.СтруктурнаяЕдиница КАК Склад,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВалютаДокумента КАК Валюта,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВидЦен КАК ВидЦен,
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Дата КАК Дата
	|	ИЗ
	|		Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ЧекККМОплатаПлатежнымиКартами
	|	ГДЕ
	|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМОплатаПлатежнымиКартами.Ссылка.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ЭквайринговыйТерминал,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.ВидПлатежнойКарты,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
	|		-ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассаККМ,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Организация,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.СтруктурнаяЕдиница,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВалютаДокумента,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВидЦен,
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Дата
	|	ИЗ
	|		Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК ЧекККМВозвратОплатаПлатежнымиКартами
	|	ГДЕ
	|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Проведен) КАК ОплатаПлатежнымиКартами
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
	|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
	|	ОплатаПлатежнымиКартами.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЧекККМЗапасы.Ответственный) КАК КоличествоОтветственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМЗапасы.Ссылка.Ответственный КАК Ответственный
	|	ИЗ
	|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМЗапасы.Ссылка.Архивный
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМЗапасы.Ссылка.Ответственный
	|	ИЗ
	|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМЗапасы
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМЗапасы.Ссылка.Архивный) КАК ЧекККМЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМЗапасы.Номенклатура,
	|	ЧекККМЗапасы.Характеристика,
	|	ЧекККМСкидкиНаценки.СкидкаНаценка,
	|	ЧекККМСкидкиНаценки.Сумма
	|ПОМЕСТИТЬ ВТ_АвтоСкидкиНаценкиОбъединение
	|ИЗ
	|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СкидкиНаценки КАК ЧекККМСкидкиНаценки
	|		ПО ЧекККМЗапасы.КлючСвязи = ЧекККМСкидкиНаценки.КлючСвязи
	|			И (ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
	|			И (ЧекККМЗапасы.Ссылка.Проведен)
	|			И (ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0)
	|			И (НЕ ЧекККМЗапасы.Ссылка.Архивный)
	|			И ЧекККМЗапасы.Ссылка = ЧекККМСкидкиНаценки.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратЗапасы.Номенклатура,
	|	ЧекККМВозвратЗапасы.Характеристика,
	|	ЧекККМВозвратСкидкиНаценки.СкидкаНаценка,
	|	-ЧекККМВозвратСкидкиНаценки.Сумма
	|ИЗ
	|	Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.СкидкиНаценки КАК ЧекККМВозвратСкидкиНаценки
	|		ПО ЧекККМВозвратЗапасы.КлючСвязи = ЧекККМВозвратСкидкиНаценки.КлючСвязи
	|			И (ЧекККМВозвратЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена)
	|			И (ЧекККМВозвратЗапасы.Ссылка.Проведен)
	|			И (ЧекККМВозвратЗапасы.Ссылка.НомерЧекаККМ > 0)
	|			И (НЕ ЧекККМВозвратЗапасы.Ссылка.Архивный)
	|			И ЧекККМВозвратЗапасы.Ссылка = ЧекККМВозвратСкидкиНаценки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Номенклатура,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Характеристика,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.СкидкаНаценка,
	|	СУММА(ВТ_АвтоСкидкиНаценкиОбъединение.Сумма) КАК Сумма
	|ИЗ
	|	ВТ_АвтоСкидкиНаценкиОбъединение КАК ВТ_АвтоСкидкиНаценкиОбъединение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Номенклатура,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.Характеристика,
	|	ВТ_АвтоСкидкиНаценкиОбъединение.СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМПродажиВозвраты.Номенклатура КАК Номенклатура,
	|	ЧекККМПродажиВозвраты.Характеристика КАК Характеристика,
	|	ЧекККМПродажиВозвраты.Партия КАК Партия,
	|	ЧекККМПродажиВозвраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЧекККМПродажиВозвраты.Цена КАК Цена,
	|	ЧекККМПродажиВозвраты.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЧекККМПродажиВозвраты.СтавкаНДС КАК СтавкаНДС,
	|	ЧекККМПродажиВозвраты.Заказ КАК Заказ,
	|	ЧекККМПродажиВозвраты.СерийныйНомер,
	|	СУММА(ЧекККМПродажиВозвраты.ПризнакПродаж) КАК ПризнакПродаж
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМЗапасы.Номенклатура КАК Номенклатура,
	|		ЧекККМЗапасы.Характеристика КАК Характеристика,
	|		ЧекККМЗапасы.Партия КАК Партия,
	|		ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЧекККМЗапасы.Цена КАК Цена,
	|		ЧекККМЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ЧекККМЗапасы.СтавкаНДС КАК СтавкаНДС,
	|		ЧекККМЗапасы.Заказ КАК Заказ,
	|		ЧекККМСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|		1 КАК ПризнакПродаж
	|	ИЗ
	|		Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.СерийныеНомера КАК ЧекККМСерийныеНомера
	|			ПО ЧекККМЗапасы.КлючСвязи = ЧекККМСерийныеНомера.КлючСвязи
	|				И ЧекККМЗапасы.Ссылка = ЧекККМСерийныеНомера.Ссылка
	|	ГДЕ
	|		ЧекККМЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМЗапасы.Ссылка.Проведен
	|		И ЧекККМЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМЗапасы.Ссылка.Архивный
	|		И ЧекККМСерийныеНомера.Ссылка.КассоваяСмена = &КассоваяСмена
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМВозвратЗапасы.Номенклатура,
	|		ЧекККМВозвратЗапасы.Характеристика,
	|		ЧекККМВозвратЗапасы.Партия,
	|		ЧекККМВозвратЗапасы.ЕдиницаИзмерения,
	|		ЧекККМВозвратЗапасы.Цена,
	|		ЧекККМВозвратЗапасы.ПроцентСкидкиНаценки,
	|		ЧекККМВозвратЗапасы.СтавкаНДС,
	|		ЧекККМВозвратЗапасы.Заказ,
	|		ЧекККМВозвратСерийныеНомера.СерийныйНомер,
	|		-1
	|	ИЗ
	|		Документ.ЧекККМВозврат.Запасы КАК ЧекККМВозвратЗапасы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.СерийныеНомера КАК ЧекККМВозвратСерийныеНомера
	|			ПО ЧекККМВозвратЗапасы.КлючСвязи = ЧекККМВозвратСерийныеНомера.КлючСвязи
	|				И ЧекККМВозвратЗапасы.Ссылка = ЧекККМВозвратСерийныеНомера.Ссылка
	|	ГДЕ
	|		ЧекККМВозвратЗапасы.Ссылка.КассоваяСмена = &КассоваяСмена
	|		И ЧекККМВозвратЗапасы.Ссылка.Проведен
	|		И ЧекККМВозвратЗапасы.Ссылка.НомерЧекаККМ > 0
	|		И НЕ ЧекККМВозвратЗапасы.Ссылка.Архивный
	|		И ЧекККМВозвратСерийныеНомера.Ссылка.КассоваяСмена = &КассоваяСмена) КАК ЧекККМПродажиВозвраты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМПродажиВозвраты.Номенклатура,
	|	ЧекККМПродажиВозвраты.Характеристика,
	|	ЧекККМПродажиВозвраты.Партия,
	|	ЧекККМПродажиВозвраты.ЕдиницаИзмерения,
	|	ЧекККМПродажиВозвраты.СтавкаНДС,
	|	ЧекККМПродажиВозвраты.Заказ,
	|	ЧекККМПродажиВозвраты.СерийныйНомер,
	|	ЧекККМПродажиВозвраты.Цена,
	|	ЧекККМПродажиВозвраты.ПроцентСкидкиНаценки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЧекККМПродажиВозвраты.ПризнакПродаж) > 0";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КассоваяСмена", ОтчетОРозничныхПродажахОбъект.Ссылка);
	// АвтоматическиеСкидки
	Запрос.УстановитьПараметр("ИспользоватьАвтоматическиеСкидки", ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"));
	// Конец АвтоматическиеСкидки
	// Заказы покупателей в розничной торговле
	Запрос.УстановитьПараметр("ЕстьЗаказыИРезерв", ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле") И
		ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	// Конец Заказы покупателей в розничной торговле
	
	Результат = Запрос.ВыполнитьПакет();
	
	Запасы = Результат[0].Выгрузить();
	Запасы.Колонки.Добавить("ПроцентАвтоматическойСкидки", Новый ОписаниеТипов("Число"));
	ОплатаПлатежнымиКартами = Результат[1].Выгрузить();
	
	ОтчетОРозничныхПродажахОбъект.Запасы.Очистить();
	ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Очистить();
	
	Если Запасы.Количество() > 0 Тогда
		ОтчетОРозничныхПродажахОбъект.ПоложениеОтветственный = ?(
			Результат[2].Выгрузить()[0].КоличествоОтветственный > 1,
			Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти,
			Перечисления.ПоложениеРеквизитаНаФорме.ВШапке
		);
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Запасы Цикл
		
		// Заполним процент автоматической скидки
		Если СтрокаТЧ.СуммаАвтоматическойСкидки <> 0 Тогда
			
			// Применение автоматической скидки.
			СуммаБезСкидки = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
			СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СтрокаТЧ.СуммаАвтоматическойСкидки / СуммаБезСкидки);
			СтрокаТЧ.ПроцентСкидкиНаценки = СтрокаТЧ.ПроцентСкидкиНаценки + СтрокаТЧ.ПроцентАвтоматическойСкидки;
			
		КонецЕсли;
		
		Если СтрокаТЧ.Всего <> 0 ИЛИ СтрокаТЧ.ПроцентСкидкиНаценки >= 100 
			// Заказы в Рознице.
			ИЛИ СтрокаТЧ.Резерв > 0
			Тогда
			СтрокаТабличнойЧастиЗапасы = ОтчетОРозничныхПродажахОбъект.Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиЗапасы, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из ОплатаПлатежнымиКартами Цикл
		
		Если СтрокаТЧ.Сумма <> 0 Тогда
			СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	// АвтоматическиеСкидки
	ОтчетОРозничныхПродажахОбъект.СкидкиНаценки.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		
		АвтоматическиеСкидки = Результат[4].Выгрузить();
		Для каждого СтрокаТЧ Из АвтоматическиеСкидки Цикл
			
			Если СтрокаТЧ.Сумма <> 0 Тогда
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Серийные номера
	ОтчетОРозничныхПродажахОбъект.СерийныеНомера.Очистить();
	РаботаССерийнымиНомерамиКлиентСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ОтчетОРозничныхПродажахОбъект, "Запасы");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		
		СерийныеНомера = Результат[5].Выгрузить();
		Для каждого СтрокаТЧ Из ОтчетОРозничныхПродажахОбъект.Запасы Цикл
			
			КлючСвязи = 0;
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Партия, ЕдиницаИзмерения, Цена, СтавкаНДС, Заказ");
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЧ);
			
			СерийныеНомераПоОтбору = СерийныеНомера.НайтиСтроки(СтруктураОтбора);
			//ЗапасыПоОтбору = КассоваяСменаОбъект.Запасы.НайтиСтроки(СтруктураОтбора);
			
			Если СерийныеНомераПоОтбору.Количество()>0 Тогда
				
				КлючСвязи = СтрокаТЧ.КлючСвязи;
				
				Для каждого стр Из СерийныеНомераПоОтбору Цикл
					НовСтр = ОтчетОРозничныхПродажахОбъект.СерийныеНомера.Добавить();
					НовСтр.КлючСвязи = КлючСвязи;
					НовСтр.СерийныйНомер = стр.СерийныйНомер;
				КонецЦикла;
			КонецЕсли;
			
			РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСтроковоеПредставлениеСерийныхНомеровСтроки(СтрокаТЧ, ОтчетОРозничныхПродажахОбъект, "КлючСвязи");
			
		КонецЦикла;
		
	КонецЕсли;
	// Серийные номера
	
	
	ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены    = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	Если ОтчетОРозничныхПродажахОбъект.ДополнительныеСвойства.Свойство("ЗагрузкаИзВнешнегоИсточника") <> Истина Тогда
		ДатаЗакрытияКассовойСмены = ТекущаяДатаСеанса();
		ОтчетОРозничныхПродажахОбъект.Дата                   = ДатаЗакрытияКассовойСмены;
		ОтчетОРозничныхПродажахОбъект.ОкончаниеКассовойСмены = ДатаЗакрытияКассовойСмены;
	КонецЕсли;
	ОтчетОРозничныхПродажахОбъект.СуммаДокумента         = ОтчетОРозничныхПродажахОбъект.Запасы.Итог("Всего");
	
	
	Если Запасы.Количество() > 0 Тогда
		ОтчетОРозничныхПродажахОбъект.Ответственный = Запасы[0].Ответственный;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
		ОтчетОРозничныхПродажахОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
	СтруктураВозвращаемоеЗначение.ОписаниеОшибки = "";
	СтруктураВозвращаемоеЗначение.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажахОбъект.Ссылка;
	
	Попытка
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение		
		СтруктураВозвращаемоеЗначение.ОписаниеОшибки = НСтр(
			"ru = 'При формировании отчета о розничных продажах произошла ошибка.'")
			+?(ВыполняетсяОбработкаЧеков, НСтр("ru = ' Ошибка произошла при обработке чеков ККМ.'"), "");			
	КонецПопытки;
		
	Возврат СтруктураВозвращаемоеЗначение;
	
КонецФункции // ЗакрытьОтчетОРозничныхПродажах()

// Функция выполняет удаление отложенных чеков.
//
Функция УдалитьОтложенныеЧеки(ОтчетОРозничныхПродажах, ОписаниеОшибки)
	
	Результат = Истина;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Статус <> &Статус
	|	И ЧекККМ.КассоваяСмена = &ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	ЧекККМВозврат.НомерЧекаККМ = 0
	|	И ЧекККМВозврат.КассоваяСмена = &ОтчетОРозничныхПродажах");
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах.Ссылка);
	Запрос.УстановитьПараметр("Статус",        Перечисления.СтатусыЧековККМ.Пробит);
	ВыборкаЧековККМ = Запрос.Выполнить().Выбрать();
	
	Попытка
		
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат = Ложь;
		
		ОписаниеОшибки = НСтр(
			"ru = 'При удалении отложенных чеков произошла ошибка.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция выполняет архивацию чеков ККМ по кассовой смене.
//
Процедура ВыполнитьАрхивациюЧековККМ(ОтчетОРозничныхПродажахОбъект, ОписаниеОшибки = "") Экспорт
	
	НачатьТранзакцию();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	2 КАК Порядок,
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	(НЕ ЧекККМ.Архивный)
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.НомерЧекаККМ > 0
	|	И ЧекККМ.КассоваяСмена = &ОтчетОРозничныхПродажах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	(НЕ ЧекККМВозврат.Архивный)
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.НомерЧекаККМ > 0
	|	И ЧекККМВозврат.КассоваяСмена = &ОтчетОРозничныхПродажах
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок");
	Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажахОбъект.Ссылка);
	ВыборкаЧековККМ = Запрос.Выполнить().Выбрать();
	
	Попытка
		
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Архивный = Истина;
			ЧекККМОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
		
		ОтчетОРозничныхПродажахОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы;
		ОтчетОРозничныхПродажахОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
		ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр(
			"ru = 'При архивации чеков ККМ произошла ошибка.
			|Архивация чеков ККМ не выполнена.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);

	КонецПопытки;

КонецПроцедуры // ВыполнитьАрхивациюЧековККМ()

// Процедура выполняет закрытие кассовой смены.
//
Функция СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию(КассаККМ, ОписаниеОшибки = "") Экспорт
	
	ОтчетОРозничныхПродажах = Неопределено;
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиСервер.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если НЕ ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах) Тогда
		// Если нет связи кассовой смены и отчета, создаем новый отчет.
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.КассоваяСмена) Тогда
			ОтчетОРозничныхПродажах = РозничныеПродажиСервер.СоздатьОтчетОРозничныхПродажах(СтруктураСостояниеКассовойСмены.КассоваяСмена, ОписаниеОшибки);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтчетОРозничныхПродажах) Тогда
			СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах; 
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетОРозничныхПродажахОбъект = СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах.ПолучитьОбъект();	
	СтруктураВозвращаемоеЗначение = ЗакрытьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект);
	
	Если СтруктураВозвращаемоеЗначение.ОтчетОРозничныхПродажах = Неопределено Тогда
		
		ОписаниеОшибки = СтруктураВозвращаемоеЗначение.ОписаниеОшибки;
		
	Иначе
		
		ОтчетОРозничныхПродажах = СтруктураВозвращаемоеЗначение.ОтчетОРозничныхПродажах;
		
		Если Константы.УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены.Получить() Тогда
			УдалитьОтложенныеЧеки(СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах.ПолучитьОбъект(), ОписаниеОшибки);
		КонецЕсли;
		
		Если Константы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Получить() Тогда
			ВыполнитьАрхивациюЧековККМ(СтруктураСостояниеКассовойСмены.ОтчетОРозничныхПродажах.ПолучитьОбъект(), ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтчетОРозничныхПродажах;
	
КонецФункции // СформироватьОтчетОРозничныхПродажахИВыполнитьАрхивацию()

#КонецОбласти

#Область ФункцииПроверкиСостоянияСмены

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
Функция ПолучитьОткрытуюКассовуюСмену(КассаККМ, КассоваяСмена = Неопределено, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ОтчетОРозничныхПродажах.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И ОтчетОРозничныхПродажах.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Ссылка <> &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.Проведен";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьОткрытуюКассовуюСмену()

Функция ПолучитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата УБЫВ,
	|	ОтчетОРозничныхПродажах.Ссылка УБЫВ";
	Запрос.УстановитьПараметр("Ссылка", КассоваяСмена);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Ссылка;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует табличный документ обложки кассовой книги
//
Функция СформироватьПечатнуюФормуОтчетаОРозничныхПродажах(МассивОбъектов, ОбъектыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_ОтчетОРозничныхПродажах");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_Накладная";
	
	// Заказы покупателей в розничной торговле
	ИтогЗаказВТЧ = Ложь;
	// Конец Заказы покупателей в розничной торговле
	
	Для каждого ЧекККМ Из МассивОбъектов Цикл
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ЧекККМ.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажах.Номер КАК Номер,
		|	ОтчетОРозничныхПродажах.Дата КАК Дата,
		|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК Валюта,
		|	ОтчетОРозничныхПродажах.КассаККМ.Представление КАК Покупатель,
		|	ОтчетОРозничныхПродажах.Организация КАК Организация,
		|	ОтчетОРозничныхПродажах.Организация.Префикс КАК Префикс,
		|	ОтчетОРозничныхПродажах.Организация.Представление КАК Поставщик,
		|	ОтчетОРозничныхПродажах.СуммаДокумента КАК СуммаДокумента,
		|	ОтчетОРозничныхПродажах.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ОтчетОРозничныхПродажах.Ответственный.Физлицо КАК Ответственный,
		|	ОтчетОРозничныхПродажах.Запасы.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.Представление КАК Запас,
		|		Номенклатура.НаименованиеПолное КАК ЗапасПолноеНаименование,
		|		Номенклатура.Код КАК Код,
		|		Номенклатура.Артикул КАК Артикул,
		|		Характеристика КАК Характеристика,
		|		Количество КАК Количество,
		|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		ПроцентСкидкиНаценки,
		|		ВЫБОР
		|			КОГДА ОтчетОРозничныхПродажах.Запасы.ПроцентСкидкиНаценки <> 0
		|					ИЛИ ОтчетОРозничныхПродажах.Запасы.СуммаАвтоматическойСкидки <> 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЕстьСкидка,
		|		СуммаАвтоматическойСкидки,
		|		Заказ,
		|		Заказ.Номер,
		|		Заказ.Дата,
		|		КлючСвязи
		|	),
		|	ОтчетОРозничныхПродажах.СерийныеНомера.(
		|		СерийныйНомер,
		|		КлючСвязи
		|	)
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		// Заказы в розничной торговле
		ИспользоватьЗаказыВРозничнойТорговле = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле");
		Если ИспользоватьЗаказыВРозничнойТорговле Тогда
			ЗаказВТЧ = Ложь;
			ВыборкаЗапасы = Шапка.Запасы.Выбрать();
			Пока ВыборкаЗапасы.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаЗапасы.Заказ) Тогда
					ЗаказВТЧ = Истина;
					ИтогЗаказВТЧ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаказВТЧ = Ложь;
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
		
		Если Шапка.Дата < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
			
		// Выводим шапку накладной.
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|ОсновныеДанные");
		ОбластьМакета.Параметры.ТекстЗаголовка = 
			"Отчет о розничных продажах № "
		  + НомерДокумента
		  + " от "
		  + Формат(Шапка.Дата, "ДЛФ=DD");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Заказы в розничной торговле
		Если ЗаказВТЧ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок|Заказ");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Заказы покупателя в Рознице
		Если ЗаказВТЧ Тогда
			ОбластьЗаказа = Макет.ПолучитьОбласть("ШапкаТаблицы|ЗаказТЧ");
			ТабДокумент.Присоединить(ОбластьЗаказа);
		КонецЕсли;
		// Конец Заказы покупателя в Рознице
		
		ОбластьКолонкаЗапас = Макет.Область("Запас");
		
		Если Не ЕстьСкидки Тогда
			ОбластьКолонкаЗапас.ШиринаКолонки = ОбластьКолонкаЗапас.ШиринаКолонки
											  + Макет.Область("СуммаБезСкидки").ШиринаКолонки
											  + Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");
		// Заказы покупателя в Рознице
		Если ЗаказВТЧ Тогда
			ОбластьЗаказВТЧ = Макет.ПолучитьОбласть("Строка|ЗаказТЧ");
		КонецЕсли;
		// Конец Заказы покупателя в Рознице
		
		Сумма			= 0;
		СуммаНДС		= 0;
		Всего			= 0;
		ВсегоСкидок		= 0;
		ВсегоБезСкидок	= 0;
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			// Заказы покупателей в розничной торговле
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Количество) Тогда
				Продолжить;
			КонецЕсли;
			// Конец Заказы покупателей в розничной торговле
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ТабДокумент.Вывести(ОбластьНомера);
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			//ОбластьДанных.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			//	ВыборкаСтрокЗапасы.Запас,
			//	ВыборкаСтрокЗапасы.Характеристика,
			//	ВыборкаСтрокЗапасы.Артикул
			//);
			СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокЗапасы.КлючСвязи);
			ОбластьДанных.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
				ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул, СтрокаСерийныеНомера);
			
			ТабДокумент.Присоединить(ОбластьДанных);
			
			Скидка = 0;
			
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьСкидок.Параметры.Скидка         = Скидка;
					ОбластьСкидок.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьСкидок.Параметры.Скидка         = 0;
					ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
					ОбластьСкидок.Параметры.Скидка         = Скидка;
					ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ТабДокумент.Присоединить(ОбластьСуммы);
			
			// Заказы покупателя в Рознице
			Если ЗаказВТЧ Тогда
				ОбластьЗаказВТЧ.Параметры.Заказ = ?(ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Заказ), 
					"№ "+ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаСтрокЗапасы.ЗаказНомер, Истина, Истина)+" от "+Формат(ВыборкаСтрокЗапасы.ЗаказДата, "ДЛФ=D"),
					"");
				ТабДокумент.Присоединить(ОбластьЗаказВТЧ);
			КонецЕсли;
			// Конец Заказы покупателя в Рознице
			
			Сумма			= Сумма			+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС		= СуммаНДС		+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего			= Всего			+ ВыборкаСтрокЗапасы.Всего;
			ВсегоСкидок		= ВсегоСкидок	+ Скидка;
			ВсегоБезСкидок	= Сумма			+ ВсегоСкидок;
			
		КонецЦикла;
		
		// Вывести Итого.
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");
		
		ТабДокумент.Вывести(ОбластьНомера);
		
		СтруктураДанных = Новый Структура("Всего", Сумма);
		Если СуммаНДС = 0 Тогда
			
			СтруктураДанных.Вставить("НДС", "Без налога (НДС)");
			СтруктураДанных.Вставить("СуммаНДС", "-");
			
		Иначе
			
			СтруктураДанных.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
			СтруктураДанных.Вставить("СуммаНДС", УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС));
			
		КонецЕсли; 
		
		ОбластьДанных.Параметры.Заполнить(СтруктураДанных);
		
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
			ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		
		ОбластьСуммы.Параметры.Заполнить(СтруктураДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// Заказы покупателя в Рознице
		Если ЗаказВТЧ Тогда
			ОбластьЗаказВТЧ  = Макет.ПолучитьОбласть("Итого|ЗаказТЧ");
			ТабДокумент.Присоединить(ОбластьЗаказВТЧ);
		КонецЕсли;
		// Конец Заказы покупателя в Рознице
		
		// Вывести Сумму прописью.
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
													+ Строка(ВыборкаСтрокЗапасы.Количество())
													+ ", на сумму "
													+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.Валюта);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.Валюта);
		ТабДокумент.Вывести(ОбластьМакета);
	
		// Вывести подписи.
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи|ОсновныеДанные");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		Если ЗначениеЗаполнено(Шапка.Ответственный) Тогда
			
			ОтветственныйДанные = УправлениеНебольшойФирмойСервер.ДанныеФизЛица(
				УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Шапка.Организация),
				Шапка.Ответственный, 
				Шапка.Дата);
			
			ОбластьМакета.Параметры.ОтветственныйРасшифровка	= ОтветственныйДанные.Представление;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Заказы в розничной торговле
		Если ЗаказВТЧ Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи|Заказ");
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЕсли;
		// Конец Заказы в розничной торговле
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ЧекККМ);
		
	КонецЦикла;
	
	Если ИтогЗаказВТЧ Тогда
		ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуОбложкиИПоследнегоЛистаКассовойКниги()

// Функция формирует табличный документ обложки кассовой книги
//
Функция СформироватьПечатнуюФормуКМ6(МассивОбъектов, ОбъектыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_КМ6");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КМ6";
	
	ПервыйДокумент = Истина;
	
	Для каждого ОтчетОРозничныхПродажах Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ТЧЗапасы.Сумма), 0) КАК Сумма,
		|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
		|	ОтчетОРозничныхПродажах.КассаККМ.ПодключаемоеОборудование.Наименование КАК ПредставлениеККМ,
		|	ПРЕДСТАВЛЕНИЕ(ОтчетОРозничныхПродажах.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ОтчетОРозничныхПродажах.Организация КАК Организация,
		|	ОтчетОРозничныхПродажах.Организация.Префикс КАК Префикс,
		|	ОтчетОРозничныхПродажах.Номер КАК Номер,
		|	ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК Валюта,
		|	ОтчетОРозничныхПродажах.НачалоКассовойСмены КАК НачалоСмены,
		|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены КАК ОкончаниеСмены
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Запасы КАК ТЧЗапасы
		|		ПО (ТЧЗапасы.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.Ссылка)
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка = &ОтчетОРозничныхПродажах
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажах.Организация,
		|	ОтчетОРозничныхПродажах.Номер,
		|	ОтчетОРозничныхПродажах.Дата,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента,
		|	ОтчетОРозничныхПродажах.НачалоКассовойСмены,
		|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены,
		|	ОтчетОРозничныхПродажах.КассаККМ,
		|	ОтчетОРозничныхПродажах.Организация.Префикс,
		|	ПРЕДСТАВЛЕНИЕ(ОтчетОРозничныхПродажах.СтруктурнаяЕдиница)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ТЧЗапасы.Сумма), 0) КАК Сумма,
		|	ОтчетОРозничныхПродажах.КассаККМ КАК КассаККМ,
		|	ОтчетОРозничныхПродажах.КассаККМ.ПодключаемоеОборудование.Наименование КАК ПредставлениеККМ,
		|	ОтчетОРозничныхПродажах.Организация КАК Организация,
		|	ОтчетОРозничныхПродажах.Организация.Префикс КАК Префикс,
		|	ОтчетОРозничныхПродажах.Номер КАК НомерДокумента,
		|	ОтчетОРозничныхПродажах.Дата КАК ДатаДокумента,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента КАК Валюта,
		|	ОтчетОРозничныхПродажах.НачалоКассовойСмены КАК НачалоСмены,
		|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены КАК ОкончаниеСмены
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.Запасы КАК ТЧЗапасы
		|		ПО (ТЧЗапасы.Ссылка.КассоваяСмена = ОтчетОРозничныхПродажах.Ссылка)
		|ГДЕ
		|	ОтчетОРозничныхПродажах.Ссылка = &ОтчетОРозничныхПродажах
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажах.Организация,
		|	ОтчетОРозничныхПродажах.Номер,
		|	ОтчетОРозничныхПродажах.Дата,
		|	ОтчетОРозничныхПродажах.ВалютаДокумента,
		|	ОтчетОРозничныхПродажах.НачалоКассовойСмены,
		|	ОтчетОРозничныхПродажах.ОкончаниеКассовойСмены,
		|	ОтчетОРозничныхПродажах.КассаККМ,
		|	ОтчетОРозничныхПродажах.Организация.Префикс";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ОтчетОРозничныхПродажах", ОтчетОРозничныхПродажах);
		Результат = Запрос.ВыполнитьПакет();
		
		Продажи = Результат[0].Выбрать();
		Продажи.Следующий();
		
		Возвраты = Результат[1].Выбрать();
		Возвраты.Следующий();
		
		СведенияОПокупателе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Продажи.Организация, Продажи.ДатаДокумента, ,);
		
		Если Продажи.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Продажи.Номер, Продажи.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Продажи.Номер, Истина, Истина);
		КонецЕсли;
			
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Продажи);
		ОбластьМакета.Параметры.ОрганизацияПредставление	= УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ДатаДокумента				= Продажи.ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПоОКПО			= СведенияОПокупателе.КодПоОКПО;
		ОбластьМакета.Параметры.ОрганизацияИНН				= СведенияОПокупателе.ИНН;
		ОбластьМакета.Параметры.ПрограммаУчета				= "1С:Предприятие 8";
		ОбластьМакета.Параметры.НомерДокумента				= НомерДокумента;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ОбластьМакета.Параметры.Заполнить(Продажи);
		ОбластьМакета.Параметры.Итого = Продажи.Сумма;
		ОбластьМакета.Параметры.ИтогоВозврат = Возвраты.Сумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итог");
		
		ОбластьМакета.Параметры.Итого = Продажи.Сумма;
		ОбластьМакета.Параметры.ИтогоВозврат = Возвраты.Сумма;
		
		Если ЗначениеЗаполнено(Продажи.Сумма) Тогда
			ОбластьМакета.Параметры.СуммаВыручкиПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				Продажи.Сумма - Возвраты.Сумма,
				Продажи.Валюта
			);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Оборот");
		
		Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Продажи.Организация, Продажи.ДатаДокумента);
		ОбластьМакета.Параметры.ФИОРуководителя			= Руководители.ФИОРуководителя;
		ОбластьМакета.Параметры.ДолжностьРуководителя	= Руководители.РуководительДолжность;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПечатьСОборотом");
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ОтчетОРозничныхПродажах);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуКМ6()

// Функция формирует табличный документ с печатной формой КМ3.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция СформироватьПечатнуюФормуКМ3(МассивОбъектов, ОбъектыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Чек_КМ3";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРозничныхПродажах.ПФ_MXL_КМ3");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Номер КАК Номер,
	|	Док.Дата КАК ДатаДокумента,
	|	Док.КассаККМ КАК КассаККМ,
	|	Док.КассаККМ.ТипКассы КАК ТипКассы,
	|	Док.КассаККМ.Представление КАК Покупатель,
	|	Док.Автор КАК Автор,
	|	Док.ВалютаДокумента КАК Валюта,
	|	Док.Организация КАК Организация,
	|	Док.Организация.Представление КАК Поставщик,
	|	"""" КАК СерийныйНомерККМ,
	|	"""" КАК РегистрационныйНомерККМ,
	|	"""" КАК ПредставлениеККМ
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокОтчетОРозничныхПродажах.Ссылка КАК ОтчетОРозничныхПродажах,
	|	ДокЧек.НомерЧекаККМ               КАК НомерЧека,
	|	ДокЧек.СуммаДокумента             КАК СуммаДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокОтчетОРозничныхПродажах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ДокЧек
	|		ПО ДокОтчетОРозничныхПродажах.Ссылка = ДокЧек.КассоваяСмена
	|			И (ДокЧек.Проведен)
	|			И (ДокЧек.НомерЧекаККМ > 0)
	|ГДЕ
	|	ДокОтчетОРозничныхПродажах.Ссылка В(&МассивОбъектов)
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах
	|ИТОГИ ПО
	|	ДокОтчетОРозничныхПродажах.Ссылка
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[0].Выбрать();
	
	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 с типом кассы ""Автономная ККМ"" печать Акта о возврате денежных сумм по неиспользованным чекам (КМ-3) не требуется.'"),
				Выборка.Ссылка
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Выборка.Ссылка
			);
			Продолжить;
		КонецЕсли;
		
		ДокументНапечатан = Ложь;
		ВыборкаПоЧекамИтоги = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаПоЧекамИтоги.НайтиСледующий(Новый Структура("ОтчетОРозничныхПродажах", Выборка.Ссылка)) Тогда
			
			Если НЕ ПервыйДокумент Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДокументНапечатан = Истина;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
			
			Руководители          = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Выборка.Организация, Выборка.ДатаДокумента);
			
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
			ОбластьШапки.Параметры.Заполнить(Выборка);
			СведенияОбОрганизации							= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Выборка.Организация, Выборка.ДатаДокумента, ,);
			ОбластьШапки.Параметры.ПредставлениеОрганизации	= УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,Телефоны,");;
			ОбластьШапки.Параметры.НомерДокумента			= "";
			ОбластьШапки.Параметры.ОрганизацияПоОКПО		= СведенияОбОрганизации.КодПоОКПО;
			ОбластьШапки.Параметры.ОрганизацияИНН			= СведенияОбОрганизации.ИНН;
			ОбластьШапки.Параметры.ВидДеятельностиПоОКДП	= "";
			ОбластьШапки.Параметры.ДолжностьРуководителя	= Руководители.РуководительДолжность;
			ТабДокумент.Вывести(ОбластьШапки);
			
			ФИОРуководителя = Руководители.ФИОРуководителя;
			
			СуммаИтого     = 0;
			НомерПоПорядку = 0;
			ВыборкаПоЧекам = ВыборкаПоЧекамИтоги.Выбрать();
			Пока ВыборкаПоЧекам.Следующий() Цикл
				
				НомерПоПорядку = НомерПоПорядку + 1;
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаПоЧекам);
				ОбластьСтроки.Параметры.ФИОРуководителя = ФИОРуководителя;
				ОбластьСтроки.Параметры.Номер = НомерПоПорядку;
				ТабДокумент.Вывести(ОбластьСтроки);
				
				СуммаИтого = СуммаИтого + ВыборкаПоЧекам.СуммаДокумента;
				
			КонецЦикла;
			
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
			
			Если ЗначениеЗаполнено(Выборка.Автор) Тогда
				ФИОКассираОперациониста = Выборка.Автор;
			КонецЕсли;
			
			СтаршийКассир         = Руководители.ФИОКассира;
			
			ОбластьПодвала.Параметры.СуммаДокумента          = СуммаИтого;
			ОбластьПодвала.Параметры.СуммаПрописью           = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаИтого, Выборка.Валюта);
			ОбластьПодвала.Параметры.ФИОКассираОрганизации   = СтаршийКассир;
			ОбластьПодвала.Параметры.ФИОКассираОперациониста = ФИОКассираОперациониста;
			ТабДокумент.Вывести(ОбластьПодвала);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
		КонецЕсли;
		
		Если Не ДокументНапечатан Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нет данных для печати Акта о возврате денежных сумм по неиспользованным чекам (КМ-3) по документу %1.'"),
				Выборка.Ссылка
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				Выборка.Ссылка
			);
			
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // СформироватьПечатнуюФормуКМ3()

// Процедура печати документа.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОРозничныхПродажах") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетОРозничныхПродажах",
			"Отчет о розничных продажах",
			СформироватьПечатнуюФормуОтчетаОРозничныхПродажах(МассивОбъектов, ОбъектыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КМ6") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КМ6",
			"Отчет за смену",
			СформироватьПечатнуюФормуКМ6(МассивОбъектов, ОбъектыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КМ3") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КМ3",
			"КМ-3",
			СформироватьПечатнуюФормуКМ3(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОтчетОРозничныхПродажах";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о розничных продажах'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КМ6";
	КомандаПечати.Представление = НСтр("ru = 'КМ6 (Отчет за смену)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КМ3";
	КомандаПечати.Представление = НСтр("ru = 'КМ3 (Акт о возврате денежных сумм)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
КонецПроцедуры

#КонецОбласти

#Область Эквайринг

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыПоЭквайрингу(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ОплатаПлатежнойКартой", "Оплата платежной картой");
	Запрос.УстановитьПараметр("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям", ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям"));
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаОтчетОРозничныхПродажах);
	Запрос.УстановитьПараметр("ВестиУчетРасчетовСБанкомЭквайрером", ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером"));
	
	Если ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата КАК Период,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПоступлениеОплатыОтПокупателя)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ВозвратОплатыПокупателю)
		|	КОНЕЦ КАК ВидОперацииЭквайринга,
		|	&Организация КАК Организация,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.ДатаПлатежа КАК ДатаПлатежа,
		|	&Ссылка КАК Документ,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма
		|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал
		|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал
		|	КОНЕЦ КАК СуммаВал,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
		|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
		|	КОНЕЦ КАК Комиссия,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
		|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
		|	КОНЕЦ КАК КомиссияВал,
		|	&ОплатаПлатежнойКартой КАК СодержаниеПроводки
		|ИЗ
		|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
		|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
		|			И ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ВременнаяТаблицаПроцентыКомиссии.ЭквайринговыйТерминал
		|ГДЕ 
		|	&ВестиУчетРасчетовСБанкомЭквайрером";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата КАК Период,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЭквайринга.ПустаяСсылка) КАК ВидОперацииЭквайринга,
		|	&Организация КАК Организация,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПлатежа,
		|	ЗНАЧЕНИЕ(Документ.ОперацияПоПлатежнымКартам.ПустаяСсылка) КАК Документ,
		|	"""" КАК ВидПлатежнойКарты,
		|	"""" КАК НомерПлатежнойКарты,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|	ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал КАК СуммаВал,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
		|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
		|	КОНЕЦ КАК Комиссия,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
		|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
		|		ИНАЧЕ -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
		|	КОНЕЦ КАК КомиссияВал,
		|	&ОплатаПлатежнойКартой КАК СодержаниеПроводки
		|ИЗ
		|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
		|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
		|			И ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ВременнаяТаблицаПроцентыКомиссии.ЭквайринговыйТерминал
		|ГДЕ 
		|	&ВестиУчетРасчетовСБанкомЭквайрером";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыПоЭквайрингу", РезультатЗапроса.Выгрузить());

КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОплатаПлатежнымиКартами(ДокументСсылкаОтчетОРозничныхПродажах, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ПолноеПроведение", СтруктураДополнительныеСвойства.ДляПроведения.ПолноеПроведение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма КАК Сумма,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма > 0
	|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.ЭквайрерБеретКомиссиюЗаВозвратДС
	|					ТОГДА -ВременнаяТаблицаОплатаПлатежнымиКартами.Сумма * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаКомиссииПоДоговору,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал > 0
	|			ТОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал.ЭквайрерБеретКомиссиюЗаВозвратДС
	|					ТОГДА -ВременнаяТаблицаОплатаПлатежнымиКартами.СуммаВал * ЕСТЬNULL(ВременнаяТаблицаПроцентыКомиссии.ПроцентКомиссии, 0) / 100
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаКомиссииПоДоговоруВал,
	|	ВременнаяТаблицаОплатаПлатежнымиКартами.СтруктурнаяЕдиница
	|ИЗ
	|	ВременнаяТаблицаОплатаПлатежнымиКартами КАК ВременнаяТаблицаОплатаПлатежнымиКартами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаПроцентыКомиссии КАК ВременнаяТаблицаПроцентыКомиссии
	|		ПО ВременнаяТаблицаОплатаПлатежнымиКартами.ВидПлатежнойКарты = ВременнаяТаблицаПроцентыКомиссии.ВидПлатежнойКарты
	|			И ВременнаяТаблицаОплатаПлатежнымиКартами.ЭквайринговыйТерминал = ВременнаяТаблицаПроцентыКомиссии.ЭквайринговыйТерминал
	|ГДЕ
	|	&ПолноеПроведение";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаПлатежнымиКартами", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

#КонецОбласти

#Область РаботаССерийнымиНомерами

// Формирует таблицу значений, содержащую данные для проведения по регистру СерийныеНомераГарантии.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСерийныеНомера(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылка.СерийныеНомера.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВременнаяТаблицаЗапасы.Период КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход) КАК Операция,	
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|	ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|	ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомера КАК СерийныеНомера
	|		ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерийныеНомера.КлючСвязи";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // СформироватьТаблицаСерийныеНомера()

#КонецОбласти

#Область ДействияПриОбменеГИСМ

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	НовыйСтатус     = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.Передано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ПринятоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыИнформированияГИСМ.ОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.СтатусыИнформированияГИСМ.ОбновитьСтатус(ДокументСсылка, НовыйСтатус, ДальнейшееДействие);
	
	Возврат НовыйСтатус;
	
КонецФункции

#КонецОбласти

#Область СообщенияГИСМ

Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		Возврат ОтчетОРозничныхПродажахXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
	КонецЕсли;
	
КонецФункции

Функция ОтчетОРозничныхПродажахXML(ДокументСсылка) Экспорт
	
	Если ИнтеграцияГИСМ.ИспользоватьВозможностиВерсии("2.41") Тогда
		Возврат ОтчетОРозничныхПродажахXML2_41(ДокументСсылка);
	Иначе
		Возврат ОтчетОРозничныхПродажахXML2_40(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

#Область Версия2_40

Функция ОтчетОРозничныхПродажахXML2_40(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.Номер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Количество <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Товары.Ссылка.СуммаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ((Товары.Сумма + Товары.СуммаНДС) / Товары.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	Серии.СерийныйНомер.НомерКиЗГИСМ КАК НомерКиЗ,
	|	Товары.СуммаНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерийныеНомера КАК Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Запасы КАК Товары
	|		ПО (Товары.Ссылка = Серии.Ссылка)
	|			И (Товары.КлючСвязи = Серии.КлючСвязи)
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Неопределено);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		НоваяСтрока.sign_num = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost     = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
		НоваяСтрока.doc_type   = 4;
		НоваяСтрока.doc_name   = НСтр("ru = 'Отчет о розничных продажах'");
		НоваяСтрока.doc_number = Шапка.Номер;
		
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			НоваяСтрока,
			"sale_time",
			Шапка.Дата,
			ХранилищеВременныхДат);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область Версия2_41

Функция ОтчетОРозничныхПродажахXML2_41(ДокументСсылка) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Дата КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ОтчетОРозничныхПродажах.Организация КАК Организация,
	|	ОтчетОРозничныхПродажах.Номер
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ОтчетОРозничныхПродажах.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	ВЫБОР
	|		КОГДА Товары.Количество <> 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ Товары.Ссылка.СуммаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ((Товары.Сумма + Товары.СуммаНДС) / Товары.Количество КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(Товары.Сумма / Товары.Количество КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	Серии.СерийныйНомер.НомерКиЗГИСМ КАК НомерКиЗ,
	|	Товары.СуммаНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.СерийныеНомера КАК Серии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Запасы КАК Товары
	|		ПО (Товары.Ссылка = Серии.Ссылка)
	|			И (Товары.КлючСвязи = Серии.КлючСвязи)
	|ГДЕ
	|	Серии.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка = Результат[1].Выбрать();
	Товары = Результат[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОгранизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Неопределено);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхРозничнаяПродажа, ДокументСсылка, НомерВерсии);
	
	ИмяТипа   = "query";
	ИмяПакета = "retail_sale";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа);
	
	ОтчетОРозничныхПродажах = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета);
	ОтчетОРозничныхПродажах.action_id  = ОтчетОРозничныхПродажах.action_id;
	
	Попытка
		ОтчетОРозничныхПродажах.sender_gln = РеквизитыОгранизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОгранизации.GLN, Шапка.Организация);
	КонецПопытки;
	
	ОтчетОРозничныхПродажах.sales = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах, "sales");
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ОтчетОРозничныхПродажах.sales, "detail");
		
		НоваяСтрока.sign_num   = СтрокаТЧ.НомерКиЗ;
		НоваяСтрока.cost       = СтрокаТЧ.Стоимость;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) Тогда
			НоваяСтрока.vat_value = СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		НоваяСтрока.sale_time  = Шапка.Дата;
		
		НоваяСтрока.sale_docs = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока, "sale_docs");
		doc = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(НоваяСтрока.sale_docs, "doc");
		doc.doc_type   = 1;
		doc.doc_name   = НСтр("ru = 'Чек'");
		doc.doc_number = НСтр("ru = 'б/н'");
		doc.doc_date   = Шапка.Дата;
		НоваяСтрока.sale_docs.doc.Добавить(doc);
		
		ОтчетОРозничныхПродажах.sales.detail.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ОтчетОРозничныхПродажах;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
