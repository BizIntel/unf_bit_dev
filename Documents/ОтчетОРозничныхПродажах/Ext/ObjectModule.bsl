#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Инициализирует документ
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения, СтратегияЗаполнения)
	
	НачалоКассовойСмены    = НачалоДня(ТекущаяДатаСеанса());
	ОкончаниеКассовойСмены = КонецДня(ТекущаяДатаСеанса());
	
	Для Каждого ТекСтратегия Из СтратегияЗаполнения Цикл
		
		Если ТипЗнч(ДанныеЗаполнения) = ТекСтратегия.Ключ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоУмолчанию();
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		// Приводим ДанныеЗаполнения для вызова обработчика ЗаполнитьДокументПоОтбору
		ДанныеЗаполнения = Новый Структура("КассаККМ", КассаККМ);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДокумент()

// Заполняет отчет о розничных продажах в соответствии с отбором.
//
// Параметры
//  ДанныеЗаполнения - Структура со значениями отбора
//
Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("КассаККМ") Тогда
		ЗаполнитьДокументПоКассеККМ(ДанныеЗаполнения.КассаККМ);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоОтбору()

// Заполняет табличную часть документа по инвентаризации товаров на складе.
//
Процедура ЗаполнитьТабличнуюЧастьЗапасыПоИнвентаризацииТоваровНаСкладе(ДанныеЗаполнения)

	ЭтотОбъект.ИнвентаризацияЗапасов = ДанныеЗаполнения.Ссылка;
	Организация = ДанныеЗаполнения.Организация;
	СтруктурнаяЕдиница = ДанныеЗаполнения.СтруктурнаяЕдиница;
	Ячейка = ДанныеЗаполнения.Ячейка;
	
	НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, СтруктурнаяЕдиница, Дата);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ИнвентаризацияЗапасов.НомерСтроки) КАК НомерСтроки,
	|	ИнвентаризацияЗапасов.Номенклатура КАК Номенклатура,
	|	ИнвентаризацияЗапасов.Характеристика КАК Характеристика,
	|	ИнвентаризацияЗапасов.Партия КАК Партия,
	|	ИнвентаризацияЗапасов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ИнвентаризацияЗапасов.КоличествоУчет - ИнвентаризацияЗапасов.Количество) КАК КоличествоОтклонениеИнвентаризации,
	|	СУММА(ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.Количество ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ ОтчетОРозничныхПродажах.Количество
	|		КОНЕЦ) КАК КоличествоОприходованное,
	|	ИнвентаризацияЗапасов.Цена КАК Цена,
	|	ИнвентаризацияЗапасов.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ИнвентаризацияЗапасов.КлючСвязи
	|ИЗ
	|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Запасы КАК ОтчетОРозничныхПродажах
	|		ПО ИнвентаризацияЗапасов.Номенклатура = ОтчетОРозничныхПродажах.Номенклатура
	|			И ИнвентаризацияЗапасов.Характеристика = ОтчетОРозничныхПродажах.Характеристика
	|			И ИнвентаризацияЗапасов.Партия = ОтчетОРозничныхПродажах.Партия
	|			И ИнвентаризацияЗапасов.Ссылка = ОтчетОРозничныхПродажах.Ссылка.ИнвентаризацияЗапасов
	|			И (ОтчетОРозничныхПродажах.Ссылка <> &ДокументСсылка)
	|			И (ОтчетОРозничныхПродажах.Ссылка.Проведен)
	|ГДЕ
	|	ИнвентаризацияЗапасов.Ссылка = &ДокументОснование
	|	И ИнвентаризацияЗапасов.КоличествоУчет - ИнвентаризацияЗапасов.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнвентаризацияЗапасов.Номенклатура,
	|	ИнвентаризацияЗапасов.Характеристика,
	|	ИнвентаризацияЗапасов.Партия,
	|	ИнвентаризацияЗапасов.ЕдиницаИзмерения,
	|	ИнвентаризацияЗапасов.Цена,
	|	ИнвентаризацияЗапасов.Номенклатура.СтавкаНДС,
	|	ИнвентаризацияЗапасов.КлючСвязи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
		
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
			
		// Заполнение табличной части документа.
		Запасы.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
			Если КоличествоОприходовать <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			СтрокаТабличнойЧасти.Количество       = КоличествоОприходовать;
			СтрокаТабличнойЧасти.Сумма 			  = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
			
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
				
				СтрокаТабличнойЧасти.СтавкаНДС = Выборка.СтавкаНДС;
				СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
				СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС,
												СтрокаТабличнойЧасти.Сумма
												- (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
												СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
				
			Иначе
				Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда	
				
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
				
				Иначе
				
					СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
				
				КонецЕсли;
				
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
		
	Если Запасы.Количество() = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Нет данных для заполнения по инвентаризации!'");
		Сообщение.Сообщить();
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьТоварыПоИнвентаризацииТоваровНаСкладе()

// Заполняет документ по кассе ККМ 
//
Процедура ЗаполнитьДокументПоКассеККМ(КассаККМ)
	
	РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(КассаККМ);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКассыККМ);
	НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация, СтруктурнаяЕдиница, Дата);
	
КонецПроцедуры // ЗаполнитьДокументПоКассеККМ()

// Заполняет документ по кассе ККМ склада если Касса ККМ на складе одна.
//
Процедура ЗаполнитьДокументПоСкладу(СтруктурнаяЕдиница)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	КассыККМ.Ссылка КАК КассаККМ
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|ГДЕ
	|	КассыККМ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1
		И Выборка.Следующий()
		Тогда
		КассаККМ = Выборка.КассаККМ;
		ЗаполнитьДокументПоКассеККМ(КассаККМ);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоСкладу()

// Заполняет отчет о розничных продажах на основании документа инвентаризация товаров на складе.
//
// Параметры
//  ДанныеЗаполнения - Структура со значениями отбора
//
Процедура ЗаполнитьПоИнвентаризацииЗапасовНаСкладе(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Розница Тогда
		ВызватьИсключение(НСтр("ru = 'Документ может быть заполнен только на основании инвентаризации по розничному складу!'"));
	КонецЕсли;
	
	СтруктурнаяЕдиница            = ДанныеЗаполнения.СтруктурнаяЕдиница;
	ИнвентаризацияТоваровНаСкладе = ДанныеЗаполнения.Ссылка;
	
	ЗаполнитьДокументПоСкладу(СтруктурнаяЕдиница);
	
	ЗаполнитьТабличнуюЧастьЗапасыПоИнвентаризацииТоваровНаСкладе(ДанныеЗаполнения);
	
КонецПроцедуры // ЗаполнитьПоИнвентаризацииТоваровНаСкладе()

// Добавляет дополнительные реквизиты, необходимые для проведения документа в
// переданную структуру.
//
// Параметры:
//  СтруктураДополнительныеСвойства - Структура дополнительных свойств документа.
//
Процедура ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(СтруктураДополнительныеСвойства)
	
	Если КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор Тогда
		ПолноеПроведение = СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы;
	Иначе
		ПолноеПроведение = (СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.ЗакрытаЧекиЗаархивированы)
					   ИЛИ (СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта);
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ПолноеПроведение", ПолноеПроведение);
	
КонецПроцедуры // ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьДокументПоОтбору";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИнвентаризацияЗапасов")] = "ЗаполнитьПоИнвентаризацииЗапасовНаСкладе";
	
	ИнициализироватьДокумент(ДанныеЗаполнения, СтратегияЗаполнения);
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "ВидЦен");
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоложениеОтветственный = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.Ответственный = Ответственный;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
	//+ ГИСМ
	ЕстьМаркируемаяПродукцияГИСМ = ИнтеграцияГИСМУНФ.ЕстьМаркируемаяПродукцияГИСМ(Запасы);
	//- ГИСМ
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ТипКассы = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(КассаККМ).ТипКассы;
	
	Если ОплатаПлатежнымиКартами.Итог("Сумма") > СуммаДокумента Тогда
		
		ТекстОшибки = НСтр("ru='Сумма оплаты платежными картами превышает сумму документа'");
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстОшибки,
			Неопределено,
			Неопределено,
			"ОплатаПлатежнымиКартами",
			Отказ
		);
		
	КонецЕсли;
	
	Если ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор
		И НЕ ЗначениеЗаполнено(КассоваяСмена) Тогда
		
		ОткрытаяКассоваяСмена = Документы.ОтчетОРозничныхПродажах.ПолучитьОткрытуюКассовуюСмену(КассаККМ, Ссылка, НачалоКассовойСмены, ОкончаниеКассовойСмены);
		Если ОткрытаяКассоваяСмена <> Неопределено
		   И ОткрытаяКассоваяСмена <> Ссылка Тогда
			
			ТекстОшибки = НСтр("ru='По данной кассе на дату %Дата% уже зарегистрирован %КассоваяСмена%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Дата);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КассоваяСмена%", ОткрытаяКассоваяСмена);
			
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстОшибки,
				Неопределено,
				Неопределено,
				"",
				Отказ
			);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОкончаниеКассовойСмены)
			 И ЗначениеЗаполнено(СтатусКассовойСмены)
			 И СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта Тогда
			
			ТекстОшибки = НСтр("ru = 'Поле ""Окончание смены"" не заполнено'");
			
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстОшибки,
				Неопределено,
				Неопределено,
				"ОкончаниеКассовойСмены",
				Отказ
			);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОкончаниеКассовойСмены)
			 И ОкончаниеКассовойСмены < НачалоКассовойСмены Тогда
			
			ТекстОшибки = НСтр("ru = 'Время начала кассовой смены больше времени окончания кассовой смены'");
			
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстОшибки,
				Неопределено,
				Неопределено,
				"ОкончаниеКассовойСмены",
				Отказ
			);
			
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(СтатусКассовойСмены)
			 И СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта
			 И НачалоКассовойСмены <> Дата Тогда
			
			ТекстОшибки = НСтр("ru = 'Время начала кассовой смены отличается от даты документа'");
			
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстОшибки,
				Неопределено,
				Неопределено,
				"НачалоКассовойСмены",
				Отказ
			); 
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтатусКассовойСмены)
			 И СтатусКассовойСмены <> Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта
			 И ОкончаниеКассовойСмены <> Дата Тогда
			
			ТекстОшибки = НСтр("ru = 'Время окончания кассовой смены отличается от даты документа'");
			
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстОшибки,
				Неопределено,
				Неопределено,
				"ОкончаниеКассовойСмены",
				Отказ
			);
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Скидка 100%.
	Если Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			Если СтрокаЗапасы.ПроцентСкидкиНаценки < 100 
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма)
				И (СтрокаЗапасы.Резерв = 0 И 
					ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле") И 
					ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"))
				Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %Номер% списка ""Запасы"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Сумма",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заказы покупателей в рознице
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыВРозничнойТорговле") И ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Запасы.Количество"));
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			Если СтрокаЗапасы.Количество = 0 И СтрокаЗапасы.Резерв = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Количество"" в строке %Номер% списка ""Запасы"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Количество",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаЗапасы Из Запасы Цикл
			Если СтрокаЗапасы.Количество <= 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не верно заполнена колонка ""Количество"" в строке %Номер% списка ""Запасы"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Количество",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Конец Заказы покупателей в рознице
	
	// Серийные номера
	РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Запасы, СерийныеНомера, СтруктурнаяЕдиница, ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ДобавитьРеквизитыВДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.ОтчетОРозничныхПродажах.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	УправлениеНебольшойФирмойСервер.ОтразитьПродажиПоДисконтнойКарте(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	// АвтоматическиеСкидки
	УправлениеНебольшойФирмойСервер.ОтразитьПредоставленныеАвтоматическиеСкидки(ДополнительныеСвойства, Движения, Отказ);
	// Эквайринг
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаПлатежнымиКартами(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетодЭквайринг(ДополнительныеСвойства, Движения, Отказ);
	// Конец Эквайринг
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Заказ покупателя в розничной торговле
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетОРозничныхПродажах.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.ОтчетОРозничныхПродажах.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#КонецЕсли