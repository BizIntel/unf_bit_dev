#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Сервисные_Методы

//Для табличной части ДанныеКонтрагента заполняем пустые даты
//датами из расчетных документов
Процедура ЗаполнитьПустыеДатыДляКонтрагентаНаСервере(ДанныеКонтрагента) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьПустыеДатыДляКонтрагентаНаСервере()

// Устанавливает статус для массива документов
//
// Параметры:
// МассивДокументов - Массив(ДокументСсылка.СверкаВзаиморасчетов) 	  - Массив документов для установки статуса
// ЗначениеСтатуса  - ПеречислениеСсылка.СтатусыСверокВзаиморасчетов - Устанавливаемый статус
//
// Возвращаемое значение: Булево - Результат выполнения функции
//
Функция УстановитьСтатус(МассивДокументов, ЗначениеСтатуса) Экспорт

	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СверкаВзаиморасчетов КАК Таблица
		|ГДЕ
		|	Таблица.Статус <> &Статус
		|	И Таблица.Ссылка В(&МассивДокументов)
		|	И НЕ Таблица.ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Статус", ЗначениеСтатуса);
	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоОбработанных = 0;

	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл

		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение

			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;

		КонецПопытки;

		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.Статус = ЗначениеСтатуса;
		
		Попытка
		
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		Исключение
		
			ТекстОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;

		КонецПопытки;

	КонецЦикла;

	ЗафиксироватьТранзакцию();

	Возврат КоличествоОбработанных;

КонецФункции // УстановитьСтатус()

#КонецОбласти

#Область Описания_и_представления_реквизитов

//Процедура обрабатывает данные запроса и заполняет строку (строки) документа
//
//Параментры:
//	ВыборкаДанныхИзЗапроса - данные запроса для переноса в табличную часть
//	СтруктураДанныхДокумента - структура данных из документа сверки, по которой формируем запрос
//
//	СтруктураПолейТекущейСтрокиДокумента - структура полей текущей строки документа СверкиВзаиморасчетов
//											Если выбран документ ВводОстатков, то возможно добавление срок
//
Функция ПолучитьДанныеСтрокиПоОрганизации(ДанныеДокумента, Выборка) Экспорт
	
	ДанныеСтроки = Новый Структура;
	
	ДанныеСтроки.Вставить("НомерДокумента", Выборка.НомерДокумента);
	ДанныеСтроки.Вставить("ДатаДокумента",	Выборка.Период);
	ДанныеСтроки.Вставить("Договор", 		Выборка.Договор);
	ДанныеСтроки.Вставить("ВалютаДоговора", Выборка.ВалютаДоговора);
	ДанныеСтроки.Вставить("РасчетныйДокумент", Выборка.РасчетныйДокумент);
	
	ОписаниеДокумента = ОписаниеРасчетногоДокументаОрганизации(Выборка.РасчетныйДокумент, "", Неопределено, ДанныеДокумента.ОрганизациюВПредставление);
	ДанныеСтроки.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	Сумма = 0;
	Если Выборка.СуммаВалОборот > 0 Тогда 
		
		Сумма = Выборка.СуммаВалОборот; 
		КлючСтруктуры = "СуммаДолгКонтрагента";
		
	Иначе
		
		Сумма = -Выборка.СуммаВалОборот; 
		КлючСтруктуры = "СуммаДолгОрганизации";
		
	КонецЕсли;
	
	Если Выборка.ВалютаДоговора <> ДанныеДокумента.ВалютаДокумента Тогда
		
		КурсВалютыРасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаДоговора, ДанныеДокумента.Дата);
		КурсВалютыДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеДокумента.ВалютаДокумента, ДанныеДокумента.Дата);
		
		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма, Выборка.ВалютаДоговора, ДанныеДокумента.ВалютаДокумента, КурсВалютыРасчетов.Курс, КурсВалютыДокумента.Курс, КурсВалютыРасчетов.Кратность, КурсВалютыДокумента.Кратность);
		
	КонецЕсли;
	
	ДанныеСтроки.Вставить(КлючСтруктуры, Сумма);
	
	Возврат ДанныеСтроки;
	
КонецФункции //ЗаполнитьСтрокуДокументаОрганизации()

// Возвращает перечень документов с их синонимами для акта сверки взаиморасчетов
//
Функция ПолучитьПредставленияДокументовДляКонтрагентов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",					НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот",				НСтр("ru='Поступление (товаров, услуг)'"));
	ВидыДокументовКонтрагента.Вставить("Взаимозачет",						НСтр("ru='Взаимозачет задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПокупателя",					НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 					НСтр("ru='Заказ'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРегистров",			НСтр("ru='Корректировка задолженности'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",					НСтр("ru='Отчет комитенту'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",					НСтр("ru='Отчет комиссионера'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеНаСчет", 				НСтр("ru='Расход со счета'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеВКассу",					НСтр("ru='Расходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("РасходСоСчета",						НСтр("ru='Поступление на счет'"));
	ВидыДокументовКонтрагента.Вставить("РасходИзКассы",						НСтр("ru='Приходный кассовый ордер'"));
	ВидыДокументовКонтрагента.Вставить("ПриходнаяНакладная",				НСтр("ru='Реализация (товаров, услуг)'"));
	ВидыДокументовКонтрагента.Вставить("РасходнаяНакладная", 				НСтр("ru='Поступление (товаров, услуг)'"));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплату", 						НСтр("ru='Счет на оплату'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактура", 						НСтр("ru='Счет-фактура (полученный)'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 			НСтр("ru='Счет-фактура (выданный)'"));
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции // ПолучитьПредставленияДокументов()

//Получает входящий номер по документу контрагента,
//если номер получить не возможно, то возвращает пустую строку
Функция ПолучитьВходНомер(ДокументСсылка, РасшифровкаАО = Неопределено) Экспорт
	
	НомерВходящегоДокумента = "";
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда 
		
		Возврат НомерВходящегоДокумента;
		
	КонецЕсли;
	
	//Список возможных расчетных документов в описании
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") 
		И ТипЗнч(РасшифровкаАО) = Тип("Структура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", РасшифровкаАО.Договор);
		Запрос.УстановитьПараметр("СуммаПлатежа", РасшифровкаАО.СуммаПлатежа);
		Запрос.Текст = "ВЫБРАТЬ АО.НомерВходящегоДокумента ИЗ Документ.АвансовыйОтчет.Оплаты КАК АО ГДЕ АО.ПризнакАванса И АО.Договор = &Договор И АО.СуммаПлатежа = &СуммаПлатежа";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			НомерВходящегоДокумента = Выборка.НомерВходящегоДокумента;
			
		КонецЕсли;
		
	ИначеЕсли УправлениеНебольшойФирмойСервер.ЕстьРеквизитДокумента("НомерВходящегоДокумента", ДокументСсылка.Метаданные()) Тогда
		
		НомерВходящегоДокумента = ДокументСсылка.НомерВходящегоДокумента;
		
	КонецЕсли;
	
	Возврат НомерВходящегоДокумента;
	
КонецФункции //ПолучитьВходНомер()

//Получает входящую дату по документу контрагента,
//если дату получить не возможно, то возвращает пустую дату
Функция ПолучитьВходДату(ДокументСсылка, РасшифровкаАО = Неопределено) Экспорт
	
	ДатаВходящегоДокумента = Дата(01, 01, 01);
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда 
		
		Возврат ДатаВходящегоДокумента;
		
	КонецЕсли;
	
	//Список возможных расчетных документов в описании к функции ПолучитьВходНомер()
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") 
		И ТипЗнч(РасшифровкаАО) = Тип("Структура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Договор", РасшифровкаАО.Договор);
		Запрос.УстановитьПараметр("СуммаПлатежа", РасшифровкаАО.СуммаПлатежа);
		Запрос.Текст = "ВЫБРАТЬ АО.ДатаВходящегоДокумента ИЗ Документ.АвансовыйОтчет.Оплаты КАК АО ГДЕ АО.ПризнакАванса И АО.Договор = &Договор И АО.СуммаПлатежа = &СуммаПлатежа";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ДатаВходящегоДокумента = Выборка.ДатаВходящегоДокумента;
			
		КонецЕсли;
		
	ИначеЕсли УправлениеНебольшойФирмойСервер.ЕстьРеквизитДокумента("ДатаВходящегоДокумента", ДокументСсылка.Метаданные()) Тогда
		
		ДатаВходящегоДокумента = ДокументСсылка.ДатаВходящегоДокумента;
		
	КонецЕсли;
	
	Возврат ДатаВходящегоДокумента;
	
КонецФункции //ПолучитьВходДату()

// Возвращает данные актов сверки взаиморасчетов
//
// Параметры:
//    ДокументПечати - ДокументСсылка.СверкаВзаиморасчетов - Документ для выборки
//
// Возвращаемое значение: Выборка из результата запроса
//
Функция ДанныеДокументовПечати(ДокументПечати) Экспорт
	
	ЗапросДанныеДокумента = Новый Запрос;
	ЗапросДанныеДокумента.УстановитьПараметр("ДокументПечати", ДокументПечати);
	
	ЗапросДанныеДокумента.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ДокументСсылка
	|	,ДанныеДокумента.ВерсияДанных
	|	,ДанныеДокумента.ПометкаУдаления
	|	,ДанныеДокумента.Номер
	|	,ДанныеДокумента.Дата
	|	,ДанныеДокумента.Проведен
	|	,ДанныеДокумента.Организация
	|	,ДанныеДокумента.Контрагент
	|	,ДанныеДокумента.НачалоПериода
	|	,ДанныеДокумента.КонецПериода
	|	,ДанныеДокумента.Статус
	|	,ДанныеДокумента.Ответственный КАК Ответственный
	|	,ДанныеДокумента.Комментарий
	|	,ДанныеДокумента.ПредставительКонтрагента КАК ПредставительКонтрагента
	|	,ДанныеДокумента.ПредставительКонтрагента.Должность КАК ДолжностьПредставителяКонтрагента
	|	,ДанныеДокумента.Автор
	|	,ДанныеДокумента.Представление
	|	,ДанныеДокумента.МоментВремени
	|	,ДанныеДокумента.СальдоНачалоПериода КАК СальдоНачалоПериода
	|	,ДанныеДокумента.СортироватьПоДоговорам
	|	,ДанныеДокумента.ОписаниеДокумента
	|	,СведенияОСотрудниках.Должность КАК ДолжностьПредставителяОрганизации
	|	,ДанныеДокумента.ВалютаДокумента КАК ВалютаДокумента
	|	,ДанныеДокумента.ДанныеОрганизации.(
	|		Ссылка,
	|		НомерСтроки,
	|		ДатаДокумента,
	|		НомерДокумента,
	|		РасчетныйДокумент,
	|		Договор,
	|		ОписаниеДокумента КАК ОписаниеДокументаОрганизации,
	|		СуммаДолгОрганизации,
	|		СуммаДолгКонтрагента,
	|		ВалютаДоговора
	|	) КАК ДанныеОрганизации
	|	,ДанныеДокумента.ДанныеКонтрагента.(
	|		Ссылка
	|		,НомерСтроки
	|		,Договор
	|		,ВхДатаДокумента
	|		,ВхНомерДокумента
	|		,РасчетныйДокумент
	|		,ОписаниеДокумента КАК ОписаниеДокументаКонтрагента
	|		,ВалютаДокумента
	|		,СуммаДолгОрганизации
	|		,СуммаДолгКонтрагента
	|	)
	|	,ДанныеДокумента.ДоговорыКонтрагентов.(
	|		Ссылка
	|		,НомерСтроки
	|		,ДоговорыКонтрагентов.Отметка
	|		,Договор
	|	) КАК ДоговорыКонтрагентов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних КАК СведенияОСотрудниках
	|		ПО ДанныеДокумента.Дата >= СведенияОСотрудниках.Период
	|			И ДанныеДокумента.Организация = СведенияОСотрудниках.Организация
	|			И ДанныеДокумента.Ответственный = СведенияОСотрудниках.Сотрудник
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&ДокументПечати)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата
	|	,ДанныеДокумента.Номер";
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		
		ОрганизацияКомпании = Константы.Компания.Получить();
		ЗапросДанныеДокумента.Текст = СтрЗаменить(ЗапросДанныеДокумента.Текст, "ДанныеДокумента.Организация = СведенияОСотрудниках.Организация", "СведенияОСотрудниках.Организация = &Компания");
		ЗапросДанныеДокумента.УстановитьПараметр("Компания", ОрганизацияКомпании);
		
	КонецЕсли;
	
	Возврат ЗапросДанныеДокумента.Выполнить();
	
КонецФункции // ДанныеДокументовПечати()

// Возвращает представление расчетного документа для акта сверки взаиморасчетов.
//
// Параметры:
//    ДокументСсылка 		- ДокументСсылка - Ссылка на расчетный документ;
//    Номер			 		- Строка		 - Номер расчетного документа
//    Дата			 		- Дата			 - Дата расчетного документа
//
// Возвращаемое значение: Строка.
//
Функция ОписаниеРасчетногоДокументаОрганизации(ДокументСсылка, НомерДокумента = "" , Знач ДатаДокумента, ОрганизациюВПредставление = Ложь) Экспорт
	
	Если ДокументСсылка = Неопределено Тогда
		
		СтрокаОписания =  НСтр("ru = 'Расчетный документ № %1 от %2 г.'");
		СтрокаОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОписания, 
			?(ПустаяСтрока(НомерДокумента), Нстр("ru = '_______'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Ложь, Истина)), 
			?(ЗначениеЗаполнено(ДатаДокумента), Формат(ДатаДокумента, "ДЛФ=D"), Нстр("ru = '___.___.________'"))
			);
		
		Возврат СтрокаОписания;
		
	КонецЕсли;
	
	// Описание документа
	ОписаниеДокумента = "";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ОписаниеДокумента = Нстр("ru = 'Заказ-наряд'");
		
	Иначе
		
		ОписаниеДокумента = Строка(ТипЗнч(ДокументСсылка));
		
	КонецЕсли;
	
	// Добавка к описанию
	ДобавитьКОписанию = "";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная") 
		И (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя) Тогда
		
		ДобавитьКОписанию = " (возрат от покупателя)";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная") 
		И (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику) Тогда
		
		ДобавитьКОписанию = " (возрат поставщику)";
		
	КонецЕсли;
	
	// Номер документа
	Если ПустаяСтрока(НомерДокумента) Тогда
		
		НомерДокумента = ДокументСсылка.Номер;
		
	КонецЕсли;
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Истина, Истина);
	
	//Дата документа
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		
		ДатаДокумента = ДокументСсылка.Дата;
		
	КонецЕсли;
	ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	
	УказатьПредставлениеОрганизации = "";
	Если ОрганизациюВПредставление Тогда
		
		УказатьПредставлениеОрганизации = НСтр("ru = ' ('") + ДокументСсылка.Организация.НаименованиеПолное + НСтр("ru = ')'");
		
	КонецЕсли;
	
	Возврат ОписаниеДокумента + ДобавитьКОписанию 
		+ НСтр("ru=' № '") + НомерДокумента 
		+ НСтр("ru=' от '") + ДатаДокумента + НСтр("ru=' г.'") + УказатьПредставлениеОрганизации;
	
КонецФункции // ОписаниеРасчетногоДокументаОрганизации()

// Возвращает представление расчетного документа для акта сверки взаиморасчетов.
//
// Параметры:
//    ДокументСсылка 		- ДокументСсылка - Ссылка на расчетный документ;
//    Номер			 		- Строка		 - Номер расчетного документа
//    Дата			 		- Дата			 - Дата расчетного документа
//
// Возвращаемое значение: Строка.
//
Функция ОписаниеРасчетногоДокументаКонтрагента(ДокументСсылка, Знач НомерДокумента, Знач ДатаДокумента, ОрганизациюВПредставление = Ложь) Экспорт
	
	// Номер и дату обработаем сразу, так как понадобиться и для пустой ссылки
	НомерДокумента	= ?(ПустаяСтрока(НомерДокумента), Нстр("ru = '_______'"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, Ложь, Истина));
	ДатаДокумента	= ?(ЗначениеЗаполнено(ДатаДокумента), Формат(ДатаДокумента, "ДЛФ=D"), Нстр("ru = '___.___._______'"));
	
	Если ДокументСсылка = Неопределено Тогда
		
		СтрокаОписания = НСтр("ru = 'Расчетный документ № %1 от %2 г.'");
		СтрокаОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОписания, НомерДокумента, ДатаДокумента);
		
		Возврат СтрокаОписания;
		
	КонецЕсли;
	
	// Описание документа
	ОписаниеДокумента = "";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") 
		И ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		// Предполагаем, что документ заказ-наряд у контрагента может быть отражен как Поступление (товаров, услуг), Дополнительные расходны.
		// Учитывая, что последнее менее вероятно, остановимся на первом случае
		ОписаниеДокумента = Нстр("ru = 'Поступление (товаров, услуг)'");
		
	Иначе
		
		ПредставленияДокументовКонтрагента = ПолучитьПредставленияДокументовДляКонтрагентов();
		ПредставленияДокументовКонтрагента.Свойство(ДокументСсылка.Метаданные().Имя, ОписаниеДокумента);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеДокумента) Тогда
		
		ОписаниеДокумента = НСтр("ru = 'Расчетный документ'");
		
	КонецЕсли;
	
	// Добавка к описанию
	ДобавитьКОписанию = "";
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходнаяНакладная") 
		И (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя) Тогда
		
		ДобавитьКОписанию = " (возврат поставщику)";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходнаяНакладная") 
		И (ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику) Тогда
		
		ДобавитьКОписанию = " (возврат от покупателя)";
		
	КонецЕсли;
	
	// Организация, когда включена опция "Учет по компании".
	УказатьПредставлениеОрганизации = "";
	Если ОрганизациюВПредставление Тогда
		
		УказатьПредставлениеОрганизации = НСтр("ru = ' ('") + ДокументСсылка.Организация.НаименованиеПолное + НСтр("ru = ')'");
		
	КонецЕсли;
	
	Возврат ОписаниеДокумента + ДобавитьКОписанию 
		+ НСтр("ru=' № '") + НомерДокумента 
		+ НСтр("ru=' от '") + ДатаДокумента + НСтр("ru=' г.'") + УказатьПредставлениеОрганизации;
	
КонецФункции // ОписаниеРасчетногоДокументаКонтрагента()

#КонецОбласти

#Область Заполнение_ТЧ

// Процедура заполняет табличную часть "Данные организации".
//
// Параметры:
//	ДанныеДокумента	 - Структура					- Данные акта сверки взаиморасчетов;
//	ТабличнаяЧасть	 - Табличная часть документа	- Табличная часть к заполнению.
//
Процедура ЗаполнитьДанныеПоОрганизации(ДанныеДокумента, ТабличнаяЧасть) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличнаяЧасть.Очистить();
	РезультатЗапроса = ПолучитьВыборкуДанныхОрганизации(ДанныеДокумента);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		СтруктураДанных = ПолучитьДанныеСтрокиПоОрганизации(ДанныеДокумента, Выборка);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ЗаполнитьДанныеКонтрагента()

// Процедура заполняет табличную часть "Данные организации".
//
Процедура ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации(ДанныеОрганизации, ДанныеКонтрагента, ОрганизациюВПредставление = Ложь) Экспорт
	
	ДанныеКонтрагента.Очистить();
	Для каждого СтрокаОрганизации Из ДанныеОрганизации Цикл
		
		СтрокаКонтрагента = ДанныеКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагента, СтрокаОрганизации, "РасчетныйДокумент, Договор");
		СтрокаКонтрагента.ВалютаДокумента = СтрокаОрганизации.ВалютаДоговора;
		
		РасшифровкаАО = Неопределено;
		Если ТипЗнч(СтрокаОрганизации.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			РасшифровкаАО = Новый Структура;
			РасшифровкаАО.Вставить("Договор", СтрокаОрганизации.Договор);
			РасшифровкаАО.Вставить("СуммаПлатежа", СтрокаОрганизации.СуммаДолгКонтрагента);
			
		КонецЕсли;
		
		СтрокаКонтрагента.ВхНомерДокумента = ПолучитьВходНомер(СтрокаОрганизации.РасчетныйДокумент, РасшифровкаАО);
		СтрокаКонтрагента.ВхДатаДокумента = ПолучитьВходДату(СтрокаОрганизации.РасчетныйДокумент, РасшифровкаАО);
		
		СтрокаКонтрагента.ОписаниеДокумента = ОписаниеРасчетногоДокументаКонтрагента(СтрокаОрганизации.РасчетныйДокумент, СтрокаКонтрагента.ВхНомерДокумента, СтрокаКонтрагента.ВхДатаДокумента, ОрганизациюВПредставление);
		
		СтрокаКонтрагента.СуммаДолгОрганизации = СтрокаОрганизации.СуммаДолгКонтрагента;
		СтрокаКонтрагента.СуммаДолгКонтрагента = СтрокаОрганизации.СуммаДолгОрганизации;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияКонтрагентаПоДаннымОрганизации()

#КонецОбласти

#Область ПолучениеДанных

// Возвращает выборку данных по остаткам расчетов с контрагентом
// по регистрам "Расчеты с клиентами" и "Расчеты с поставщиками"
// 
// Параметры:
//    ДанныеДокументов - Структура - Структура, содержащая поля:
//    									Организация - СправочникСсылка.Организации - Организация для выборки из регистров;
//    									Контрагент  - СправочникСсылка.Контрагенты - Контрагент для выборки из регистров;
//    									КонецПериода - Дата - Период для получения остатков.
// Возвращаемое значение:
//    Выборка из результата запроса ИЛИ Неопределено - если пустой результат запроса.
//
Функция ПолучитьВыборкуДанныхОрганизации(ДанныеДокумента) Экспорт
	
	ЗапросДанныхОрганизации = Новый Запрос;
	ЗапросДанныхОрганизации.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА РасчетыСПокупателямиОбороты.Регистратор.Финиш
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА РасчетыСПокупателямиОбороты.Документ.Финиш
	|					ИНАЧЕ РасчетыСПокупателямиОбороты.Документ.Дата
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА РасчетыСПокупателямиОбороты.Документ.Финиш
	|					ИНАЧЕ РасчетыСПокупателямиОбороты.Документ.Дата
	|				КОНЕЦ
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Дата
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ.Номер
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ.Номер
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Номер
	|	КОНЕЦ КАК НомерДокумента,
	|	РасчетыСПокупателямиОбороты.Договор КАК Договор,
	|	РасчетыСПокупателямиОбороты.Договор.ДатаДоговора КАК ДатаДоговора,
	|	РасчетыСПокупателямиОбороты.Договор.ВалютаРасчетов КАК ВалютаДоговора,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	РасчетыСПокупателямиОбороты.Регистратор,
	|	СУММА(РасчетыСПокупателямиОбороты.СуммаВалОборот) КАК СуммаВалОборот
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Организация = &Организация
	|				И Договор В (&МассивДоговоров)) КАК РасчетыСПокупателямиОбороты
	|ГДЕ
	|	НЕ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗакрытиеМесяца) ССЫЛКА Документ.ЗакрытиеМесяца, ЛОЖЬ)
	|	И ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА РасчетыСПокупателямиОбороты.Регистратор.Финиш МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		КОНЕЦ
	|	И &ВыбратьДанныеДокументаПоПокупателям
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА РасчетыСПокупателямиОбороты.Регистратор.Финиш
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА РасчетыСПокупателямиОбороты.Документ.Финиш
	|					ИНАЧЕ РасчетыСПокупателямиОбороты.Документ.Дата
	|				КОНЕЦ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Документ КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
	|						ТОГДА РасчетыСПокупателямиОбороты.Документ.Финиш
	|					ИНАЧЕ РасчетыСПокупателямиОбороты.Документ.Дата
	|				КОНЕЦ
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ.Номер
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ.Номер
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор.Номер
	|	КОНЕЦ,
	|	РасчетыСПокупателямиОбороты.Договор,
	|	РасчетыСПокупателямиОбороты.Договор.ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПокупателямиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПокупателямиОбороты.Документ
	|		ИНАЧЕ РасчетыСПокупателямиОбороты.Регистратор
	|	КОНЕЦ,
	|	РасчетыСПокупателямиОбороты.Регистратор,
	|	РасчетыСПокупателямиОбороты.Договор.ДатаДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Дата
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Дата
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Номер
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Номер
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Номер
	|	КОНЕЦ,
	|	РасчетыСПоставщикамиОбороты.Договор,
	|	РасчетыСПоставщикамиОбороты.Договор.ДатаДоговора,
	|	РасчетыСПоставщикамиОбороты.Договор.ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор
	|	КОНЕЦ,
	|	РасчетыСПоставщикамиОбороты.Регистратор,
	|	СУММА(-РасчетыСПоставщикамиОбороты.СуммаВалОборот)
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Организация = &Организация
	|				И Договор В (&МассивДоговоров)) КАК РасчетыСПоставщикамиОбороты
	|ГДЕ
	|	НЕ ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ЗакрытиеМесяца) ССЫЛКА Документ.ЗакрытиеМесяца, ЛОЖЬ)
	|	И РасчетыСПоставщикамиОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ВыбратьДанныеДокументаПоПоставщикам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Дата
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Дата
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Дата
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Номер
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ.Номер
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор.Номер
	|	КОНЕЦ,
	|	РасчетыСПоставщикамиОбороты.Договор,
	|	РасчетыСПоставщикамиОбороты.Договор.ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.ВводНачальныхОстатков) ССЫЛКА Документ.ВводНачальныхОстатков
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		КОГДА ВЫРАЗИТЬ(РасчетыСПоставщикамиОбороты.Регистратор КАК Документ.КорректировкаРегистров) ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА РасчетыСПоставщикамиОбороты.Документ
	|		ИНАЧЕ РасчетыСПоставщикамиОбороты.Регистратор
	|	КОНЕЦ,
	|	РасчетыСПоставщикамиОбороты.Регистратор,
	|	РасчетыСПоставщикамиОбороты.Договор.ДатаДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Дата,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Номер,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор.ДатаДоговора,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор.ВалютаРасчетов,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор,
	|	СУММА(РасчетыСПрочимиКонтрагентамиОбороты.СуммаВалОборот)
	|ИЗ
	|	РегистрНакопления.РасчетыСПрочимиКонтрагентами.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Организация = &Организация
	|				И Договор В (&МассивДоговоров)) КАК РасчетыСПрочимиКонтрагентамиОбороты
	|ГДЕ
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ВыбратьДанныеДокументаПоПрочимКонтрагентам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Дата,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор.Номер,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор.ВалютаРасчетов,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Договор.ДатаДоговора,
	|	РасчетыСПрочимиКонтрагентамиОбороты.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДоговора,
	|	Договор,
	|	Период";
	
	ЗапросДанныхОрганизации.УстановитьПараметр("НачалоПериода",		ДанныеДокумента.НачалоПериода);
	ЗапросДанныхОрганизации.УстановитьПараметр("КонецПериода",		КонецДня(ДанныеДокумента.КонецПериода));
	ЗапросДанныхОрганизации.УстановитьПараметр("Организация",		ДанныеДокумента.Организация);
	ЗапросДанныхОрганизации.УстановитьПараметр("МассивДоговоров",	ДанныеДокумента.ДоговорыКонтрагентов.ВыгрузитьКолонку("Договор"));
	
	Если НЕ ДанныеДокумента.СортироватьПоДоговорам Тогда
		
		Строки_СортировкаПоДоговорам = 
		"	ДатаДоговора,
		|	Договор,
		|	Период";
		
		Строки_СортировкаПоДатам = 
		"	Период,
		|	Договор,
		|	ДатаДоговора";
		
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, Строки_СортировкаПоДоговорам, Строки_СортировкаПоДатам); 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.Ссылка) Тогда
		
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПокупателям", "РасчетыСПокупателями.Регистратор.Ссылка = &Ссылка");
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПоставщикам", "РасчетыСПоставщиками.Регистратор.Ссылка = &Ссылка");
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПрочимКонтрагентам", "РасчетыСПрочимиКонтрагентами.Регистратор.Ссылка = &Ссылка");
		ЗапросДанныхОрганизации.УстановитьПараметр("Ссылка",		ДанныеДокумента.Ссылка);
		
	Иначе
		
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПокупателям", "Истина");
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПоставщикам", "Истина");
		ЗапросДанныхОрганизации.Текст = СтрЗаменить(ЗапросДанныхОрганизации.Текст, "&ВыбратьДанныеДокументаПоПрочимКонтрагентам", "Истина");
		
	КонецЕсли;
	
	Возврат ЗапросДанныхОрганизации.Выполнить();
	
КонецФункции // ПолучитьВыборкуНашихДанныхОстатков()

# КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Обходит коллекцию параметров и проставляет прочерки для незаполненных записей
//
Процедура ЗаменитьПустыеПараметрыПодчеркиванием(ПараметрыМакета)
	
	Подчеркивание = НСтр("ru = '__________________'");
	Для каждого Параметр Из ПараметрыМакета Цикл
		
		Если Параметр.Ключ = "ПредставлениеПериода" 
			ИЛИ Параметр.Ключ = "ПредставлениеОрганизации"
			ИЛИ Параметр.Ключ = "ПредставлениеКонтрагента" Тогда
			
			Продолжить;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Параметр.Значение) Тогда
			
			ПараметрыМакета[Параметр.Ключ] = Подчеркивание;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаменитьПустыеПараметрыПодчеркиванием()

// Возвращает заполненную печатную форму "Акт сверки взаимных расчетов (без расхождений)"
//
// Параметры:
//    ДокументПечати  - ДокументСсылка    - Документ, который нужно распечатать
//    ОбъектыПечати	  - СписокЗначений	  - Список объектов печати
//
// Возвращаемое значение: Табличный документ
//
Функция СформироватьПечатнуюФормуАктБезРасхождений(ДокументПечати, ОбъектыПечати, ВывестиФаксимиле = Ложь)
	Перем Ошибки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	РезультатЗапроса = ДанныеДокументовПечати(ДокументПечати);
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетовСверено";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов.ПФ_MXL_АктСверкиВзаиморасчетовСверено");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		Шапка = ВыборкаДокументов;
		ДоговорыКонтрагентов = ВыборкаДокументов.ДоговорыКонтрагентов.Выбрать();
		
		ДанныеОрганизации = ВыборкаДокументов.ДанныеОрганизации.Выгрузить();
		
		// Заголовок (идетичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ПараметрыМакета = Новый Структура;
		
		ПредставлениеДатыСоставления = НСтр("ru= 'Документ сформирован %1'");
		ПредставлениеДатыСоставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДатыСоставления, Формат(Шапка.Дата, "ДЛФ=DD"));
		ПараметрыМакета.Вставить("ПредставлениеДатыСоставления", ПредставлениеДатыСоставления);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПараметрыМакета.Вставить("ПредставлениеОрганизации", Нстр("ru ='1. '") + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН, ЮридическийАдрес, Телефоны, Факс"));
		ПараметрыМакета.Вставить("ПолноеНаименованиеОрганизации", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование"));
		
		СведенияОКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.Дата);
		ПараметрыМакета.Вставить("ПредставлениеКонтрагента", Нстр("ru ='2. '") + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование, ИНН, РегистрационныйНомер, ЮридическийАдрес, Телефоны, Факс"));
		ПараметрыМакета.Вставить("ПолноеНаименованиеКонтрагента", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование"));
		
		ПараметрыМакета.Вставить("ФИОПредставителяОрганизации", Шапка.Ответственный);
		ПараметрыМакета.Вставить("ДолжностьПредставителяОрганизации", НРег(Шапка.ДолжностьПредставителяОрганизации));
		
		ПараметрыМакета.Вставить("ФИОПредставителяКонтрагента", Шапка.ПредставительКонтрагента);
		ПараметрыМакета.Вставить("ДолжностьПредставителяКонтрагента", НРег(Шапка.ДолжностьПредставителяКонтрагента));
		
		Если ЗначениеЗаполнено(Шапка.НачалоПериода) Тогда
			
			ПредставлениеПериода = НСтр("ru ='в период с %1 по %2'");
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода, Формат(Шапка.НачалоПериода, "ДЛФ=DD"), Формат(Шапка.КонецПериода, "ДЛФ=DD"));
			
		Иначе
			
			ПредставлениеПериода = НСтр("ru ='по состоянию на %1'");
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода, Формат(Шапка.КонецПериода, "ДЛФ=DD"));
			
		КонецЕсли;
		ПараметрыМакета.Вставить("ПредставлениеПериода", ПредставлениеПериода);
		
		ЗаменитьПустыеПараметрыПодчеркиванием(ПараметрыМакета);
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ШапкаТаблицы
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ПараметрыМакета.Очистить();
		
		ПараметрыМакета.Вставить("КраткоеНаименованиеОрганизации", Шапка.Организация);
		ПараметрыМакета.Вставить("КраткоеНаименованиеКонтрагента", Шапка.Контрагент);
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаСальдоНачалоПериода (идетичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСальдоНачалоПериода");
		ПараметрыМакета.Очистить();
		
		Если Шапка.СальдоНачалоПериода > 0 Тогда
			
			ПараметрыМакета.Вставить("ДолгОрганизацииНачалоПериода", Шапка.СальдоНачалоПериода);
			
		Иначе
			
			ПараметрыМакета.Вставить("ДолгКонтрагентаНачалоПериода", - Шапка.СальдоНачалоПериода);
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаТаблицыРасчеты
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыРасчеты");
		Для каждого СтрокаТаблицы Из ДанныеОрганизации Цикл
			
			ПараметрыМакета.Очистить();
			
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла; 
		
		// СтрокаОборотыЗаПериод
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОборотыЗаПериод");
		
		ПараметрыМакета.Очистить();
		ПараметрыМакета.Вставить("СуммаДолгОрганизации", ДанныеОрганизации.Итог("СуммаДолгОрганизации"));
		ПараметрыМакета.Вставить("СуммаДолгКонтрагента", ДанныеОрганизации.Итог("СуммаДолгКонтрагента"));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаСальдоКонецПериода
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСальдоКонецПериода");
		ПараметрыМакета.Очистить();
		
		ОстатокНаКонец = Шапка.СальдоНачалоПериода + ДанныеОрганизации.Итог("СуммаДолгОрганизации") - ДанныеОрганизации.Итог("СуммаДолгКонтрагента");
		ПараметрыМакета.Вставить("ДолгОрганизацииКонецПериода", Макс(ОстатокНаКонец, 0));
		ПараметрыМакета.Вставить("ДолгКонтрагентаКонецПериода", Макс(-ОстатокНаКонец, 0));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ПодвалЗадолженностьОтсутствует либо ПодвалЗадолженностьПрисутствует 
		ПараметрыМакета.Очистить();
		ПараметрыМакета.Вставить("КонецПериодаСверки", Формат(Шапка.КонецПериода, "ДЛФ=DD"));
		Если ОстатокНаКонец = 0 Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗадолженностьОтсутствует");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗадолженностьПрисутствует");
			
			ПараметрыМакета.Вставить("ПолноеНаименованиеОрганизации", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование"));
			
			Если ОстатокНаКонец > 0 Тогда
				
				ПредставлениеДебитора = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
				
			Иначе
				
				ПредставлениеДебитора = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
				
			КонецЕсли;
			
			ПараметрыМакета.Вставить("Дебитор", ПредставлениеДебитора);
			
			СуммаПоМодулю = Макс(ОстатокНаКонец, -ОстатокНаКонец);
			ПараметрыМакета.Вставить("Сумма", Формат(СуммаПоМодулю, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0"));
			ПараметрыМакета.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
			ПараметрыМакета.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПоМодулю, Шапка.ВалютаДокумента));
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//Подписи
		ВывестиПоляПодОригинальнуюПодпись = НЕ ВывестиФаксимиле; // выведем поля под подписи если не заполнено факсимиле либо печатает обычный макет
		Если ВывестиФаксимиле Тогда
			
			Если Макет.Области.Найти("ПодвалСчетаСФаксимильнойПечатью") <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(Шапка.Организация.ФайлФаксимильнаяПечать) Тогда
					
					ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатью");
					
					ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлФаксимильнаяПечать);
					Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
						
						ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка = Новый Картинка(ДанныеКартинки);
						
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
				Иначе
					
					ТекстСообщения = НСтр("ru ='Факсимиле для организации не установлена. Установка факсимиле выполняется в карточке организации, раздел ""Настройка печати"".'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
					ВывестиПоляПодОригинальнуюПодпись = Истина;
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
				ВывестиПоляПодОригинальнуюПодпись = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВывестиПоляПодОригинальнуюПодпись Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			ПараметрыМакета.Очистить();
			
			ПараметрыМакета.Вставить("ПредставлениеОрганизации", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН, ЮридическийАдрес"));
			ПараметрыМакета.Вставить("ПредставлениеКонтрагента", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование, ИНН, РегистрационныйНомер, ЮридическийАдрес"));
			ПараметрыМакета.Вставить("ФИОРуководителя", Шапка.Ответственный);
			ПараметрыМакета.Вставить("ДолжностьРуководителя", Шапка.ДолжностьПредставителяОрганизации);
			ПараметрыМакета.Вставить("ФИОРуководителяКонтрагента", Шапка.ПредставительКонтрагента);
			ПараметрыМакета.Вставить("ДолжностьРуководителяКонтрагента", Шапка.ДолжностьПредставителяКонтрагента);
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.ДокументСсылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина; 
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуАктБезРасхождений()

// Возвращает заполненную печатную форму "Акт сверки взаимных расчетов (с данными контрагента)"
//
// Параметры:
//    ДокументПечати  - ДокументСсылка	  - Документ, который нужно распечатать
//    ОбъектыПечати	  - СписокЗначений	  - Список объектов печати
//
// Возвращаемое значение: Табличный документ
//
Функция СформироватьПечатнуюФормуАктСДаннымиКонтрагента(ДокументПечати, ОбъектыПечати, ВывестиФаксимиле = Ложь)
	Перем Ошибки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	РезультатЗапроса = ДанныеДокументовПечати(ДокументПечати);
	ВыборкаДокументов = РезультатЗапроса.Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов.ПФ_MXL_АктСверкиВзаиморасчетов");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		Шапка = ВыборкаДокументов;
		ДоговорыКонтрагентов = ВыборкаДокументов.ДоговорыКонтрагентов.Выбрать();
		
		ДанныеОрганизации = ВыборкаДокументов.ДанныеОрганизации.Выгрузить();
		ДанныеКонтрагента = ВыборкаДокументов.ДанныеКонтрагента.Выгрузить();
		
		// Заголовок (идетичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ПараметрыМакета = Новый Структура;
		
		ПредставлениеДатыСоставления = НСтр("ru= 'Документ сформирован %1'");
		ПредставлениеДатыСоставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДатыСоставления, Формат(Шапка.Дата, "ДЛФ=DD"));
		ПараметрыМакета.Вставить("ПредставлениеДатыСоставления", ПредставлениеДатыСоставления);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПараметрыМакета.Вставить("ПредставлениеОрганизации", Нстр("ru ='1. '") + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН, ЮридическийАдрес, Телефоны, Факс"));
		ПараметрыМакета.Вставить("ПолноеНаименованиеОрганизации", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование"));
		
		СведенияОКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент,  Шапка.Дата);
		ПараметрыМакета.Вставить("ПредставлениеКонтрагента", Нстр("ru ='2. '") + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование, ИНН, РегистрационныйНомер, ЮридическийАдрес, Телефоны, Факс"));
		ПараметрыМакета.Вставить("ПолноеНаименованиеКонтрагента", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование"));
		
		ПараметрыМакета.Вставить("ФИОПредставителяОрганизации", Шапка.Ответственный);
		ПараметрыМакета.Вставить("ДолжностьПредставителяОрганизации", НРег(Шапка.ДолжностьПредставителяОрганизации));
		
		ПараметрыМакета.Вставить("ФИОПредставителяКонтрагента", Шапка.ПредставительКонтрагента);
		ПараметрыМакета.Вставить("ДолжностьПредставителяКонтрагента", НРег(Шапка.ДолжностьПредставителяКонтрагента));
		
		Если ЗначениеЗаполнено(Шапка.НачалоПериода) Тогда
			
			ПредставлениеПериода = НСтр("ru ='в период с %1 по %2'");
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода, Формат(Шапка.НачалоПериода, "ДЛФ=DD"), Формат(Шапка.КонецПериода, "ДЛФ=DD"));
			
		Иначе
			
			ПредставлениеПериода = НСтр("ru ='по состоянию на %1'");
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода, Формат(Шапка.КонецПериода, "ДЛФ=DD"));
			
		КонецЕсли;
		ПараметрыМакета.Вставить("ПредставлениеПериода", ПредставлениеПериода);
		
		ЗаменитьПустыеПараметрыПодчеркиванием(ПараметрыМакета);
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ШапкаТаблицы (идетичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ПараметрыМакета.Очистить();
		
		ПараметрыМакета.Вставить("КраткоеНаименованиеОрганизации", Шапка.Организация);
		ПараметрыМакета.Вставить("КраткоеНаименованиеКонтрагента", Шапка.Контрагент);
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаСальдоНачалоПериода (идетичен для обоих макетов)
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСальдоНачалоПериода");
		ПараметрыМакета.Очистить();
		
		// Считаем, что на начало периода сальдо согласовано
		Если Шапка.СальдоНачалоПериода > 0 Тогда
			
			ПараметрыМакета.Вставить("ДолгОрганизацииНачалоПериода", Шапка.СальдоНачалоПериода);
			
		Иначе
			
			ПараметрыМакета.Вставить("ДолгКонтрагентаНачалоПериода", - Шапка.СальдоНачалоПериода);
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Договор, СтрокаТаблицыРасчеты
		ОбластьМакетаДоговор = Макет.ПолучитьОбласть("Договор");
		ОбластьМакетаДетали = Макет.ПолучитьОбласть("СтрокаТаблицыРасчеты");
		
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИндексМаксСтрокиОрганизации = ДанныеОрганизации.Количество() - 1;
		ИндексМаксСтрокиКонтрагента = ДанныеКонтрагента.Количество() - 1;
		МаксИндекс = Макс(ИндексМаксСтрокиОрганизации, ИндексМаксСтрокиКонтрагента);
		Для СчетчикСтрок = 0 По МаксИндекс Цикл
			
			ПараметрыМакета.Очистить();
			
			Если СчетчикСтрок <= ИндексМаксСтрокиОрганизации Тогда
				
				CтрокаДанныхОрганизации = ДанныеОрганизации[СчетчикСтрок];
				ПараметрыМакета.Вставить("Договор", CтрокаДанныхОрганизации.Договор);
				ПараметрыМакета.Вставить("ДатаДокумента", CтрокаДанныхОрганизации.ДатаДокумента);
				ПараметрыМакета.Вставить("ОписаниеДокументаОрганизации", CтрокаДанныхОрганизации.ОписаниеДокументаОрганизации);
				ПараметрыМакета.Вставить("СуммаДолгОрганизации", CтрокаДанныхОрганизации.СуммаДолгОрганизации);
				ПараметрыМакета.Вставить("СуммаДолгКонтрагента", CтрокаДанныхОрганизации.СуммаДолгКонтрагента);
				
			Иначе
				
				CтрокаДанныхОрганизации = Неопределено;
				ПараметрыМакета.Вставить("ДатаДокумента", Неопределено);
				ПараметрыМакета.Вставить("ОписаниеДокументаОрганизации", Неопределено);
				ПараметрыМакета.Вставить("СуммаДолгОрганизации", Неопределено);
				ПараметрыМакета.Вставить("СуммаДолгКонтрагента", Неопределено);
			
			КонецЕсли;
			
			Если СчетчикСтрок <= ИндексМаксСтрокиКонтрагента Тогда
				
				СтрокаДанныхКонтрагента = ДанныеКонтрагента[СчетчикСтрок];
				ПараметрыМакета.Вставить("Договор", СтрокаДанныхКонтрагента.Договор);
				ПараметрыМакета.Вставить("КонтрагентДата", СтрокаДанныхКонтрагента.ВхДатаДокумента);
				ПараметрыМакета.Вставить("ОписаниеДокументаКонтрагента", СтрокаДанныхКонтрагента.ОписаниеДокументаКонтрагента);
				ПараметрыМакета.Вставить("КонтрагентСуммаДолгОрганизации", СтрокаДанныхКонтрагента.СуммаДолгОрганизации);
				ПараметрыМакета.Вставить("КонтрагентСуммаДолгКонтрагента", СтрокаДанныхКонтрагента.СуммаДолгКонтрагента);
				
			Иначе
				
				СтрокаДанныхКонтрагента = Неопределено;
				ПараметрыМакета.Вставить("КонтрагентДата", Неопределено);
				ПараметрыМакета.Вставить("ОписаниеДокументаКонтрагента", Неопределено);
				ПараметрыМакета.Вставить("КонтрагентСуммаДолгОрганизации", Неопределено);
				ПараметрыМакета.Вставить("КонтрагентСуммаДолгКонтрагента", Неопределено);
				
			КонецЕсли;
			
			Если Шапка.СортироватьПоДоговорам Тогда
				
				CтрокаДанных = ?(CтрокаДанныхОрганизации <> Неопределено, CтрокаДанныхОрганизации, СтрокаДанныхКонтрагента);
				
				Если CтрокаДанных.Договор <> Договор Тогда
					
					Договор = CтрокаДанных.Договор;
					ПараметрыМакета.Вставить("ПредставлениеДоговора", Нстр("ru = 'По договору: '") + Договор);
					ОбластьМакетаДоговор.Параметры.Заполнить(ПараметрыМакета);
					ТабличныйДокумент.Вывести(ОбластьМакетаДоговор);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьМакетаДетали.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакетаДетали);
			
		КонецЦикла;
		
		// СтрокаОборотыЗаПериод
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОборотыЗаПериод");
		ПараметрыМакета.Очистить();
		
		ПараметрыМакета.Вставить("СуммаДолгОрганизации", ДанныеОрганизации.Итог("СуммаДолгОрганизации"));
		ПараметрыМакета.Вставить("СуммаДолгКонтрагента", ДанныеОрганизации.Итог("СуммаДолгКонтрагента"));
		ПараметрыМакета.Вставить("КонтрагентСуммаДолгОрганизации", ДанныеКонтрагента.Итог("СуммаДолгОрганизации"));
		ПараметрыМакета.Вставить("КонтрагентСуммаДолгКонтрагента", ДанныеКонтрагента.Итог("СуммаДолгКонтрагента"));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// СтрокаСальдоКонецПериода
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСальдоКонецПериода");
		ПараметрыМакета.Очистить();
		
		ОстатокНаКонец = Шапка.СальдоНачалоПериода + ДанныеОрганизации.Итог("СуммаДолгОрганизации") - ДанныеОрганизации.Итог("СуммаДолгКонтрагента");
		ПараметрыМакета.Вставить("ДолгОрганизацииКонецПериода", Макс(ОстатокНаКонец, 0));
		ПараметрыМакета.Вставить("ДолгКонтрагентаКонецПериода", Макс(-ОстатокНаКонец, 0));
		
		ОстатокНаКонецК = -Шапка.СальдоНачалоПериода + ДанныеКонтрагента.Итог("СуммаДолгОрганизации") - ДанныеКонтрагента.Итог("СуммаДолгКонтрагента");
		ПараметрыМакета.Вставить("ДолгОрганизацииПоДаннымКонтрагентаКонецПериода", Макс(ОстатокНаКонецК, 0));
		ПараметрыМакета.Вставить("ДолгКонтрагентаПоДаннымКонтрагентаКонецПериода", Макс(-ОстатокНаКонецК, 0));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ПараметрыМакета.Очистить();
		
		ПараметрыМакета.Вставить("КонецПериодаСверки", Формат(Шапка.КонецПериода, "ДЛФ=DD"));
		ПараметрыМакета.Вставить("ПолноеНаименованиеОрганизации", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование"));
		ПараметрыМакета.Вставить("ПолноеНаименованиеКонтрагента", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование"));
		ПараметрыМакета.Вставить("ВалютаДокумента", Шапка.ВалютаДокумента);
		
		Если ОстатокНаКонец < 0 Тогда
			
			ПредставлениеДебитора = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
			
		Иначе
			
			ПредставлениеДебитора = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
			
		КонецЕсли;
		ПараметрыМакета.Вставить("ДебиторПоДаннымОрганизации", ПредставлениеДебитора);
		
		СуммаПоМодулю = Макс(ОстатокНаКонец, -ОстатокНаКонец);
		ПараметрыМакета.Вставить("СуммаДанныеОрганизации", Формат(СуммаПоМодулю, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0"));
		ПараметрыМакета.Вставить("СуммаПрописьюДанныеОрганизации", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПоМодулю, Шапка.ВалютаДокумента));
		
		Если ОстатокНаКонецК > 0 Тогда
			
			ПредставлениеДебитора = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
			
		Иначе
			
			ПредставлениеДебитора = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
			
		КонецЕсли;
		ПараметрыМакета.Вставить("ДебиторПоДаннымКонтрагента", ПредставлениеДебитора);
		
		СуммаПоМодулю = Макс(ОстатокНаКонецК, -ОстатокНаКонецК);
		ПараметрыМакета.Вставить("СуммаДанныеКонтрагента", Формат(СуммаПоМодулю, "ЧЦ=15; ЧДЦ=2; ЧГ=3,0"));
		ПараметрыМакета.Вставить("СуммаПрописьюДанныеКонтрагента", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаПоМодулю, Шапка.ВалютаДокумента));
		
		ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Расхождения
		Расхождение = Макс(ОстатокНаКонец + ОстатокНаКонецК, -1 * (ОстатокНаКонец + ОстатокНаКонецК));
		Если Расхождение <> 0 Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Расхождения");
			ПараметрыМакета.Очистить();
			
			ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "
						+ Формат(Расхождение, "ЧЦ=21; ЧДЦ=2") + " " + Строка(Шапка.ВалютаДокумента)
						+ " (" + РаботаСКурсамиВалют.СформироватьСуммуПрописью(Расхождение, Шапка.ВалютаДокумента, Ложь) + ")";
						
			ПараметрыМакета.Вставить("ИтогСверки", ИтогСверки);
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли; 
		
		// Описание документа
		Если НЕ ПустаяСтрока(Шапка.ОписаниеДокумента) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ОписаниеДокумента");
			ПараметрыМакета.Очистить();
			
			ПараметрыМакета.Вставить("ОписаниеДокумента", Шапка.ОписаниеДокумента);
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		//Подписи
		ВывестиПоляПодОригинальнуюПодпись = НЕ ВывестиФаксимиле; // выведем поля под подписи если не заполнено факсимиле либо печатает обычный макет
		Если ВывестиФаксимиле Тогда
			
			Если Макет.Области.Найти("ПодвалСчетаСФаксимильнойПечатью") <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(Шапка.Организация.ФайлФаксимильнаяПечать) Тогда
					
					ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатью");
					
					ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлФаксимильнаяПечать);
					Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
						
						ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка = Новый Картинка(ДанныеКартинки);
						
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ОбластьМакета);
					
				Иначе
					
					ТекстСообщения = НСтр("ru ='Факсимиле для организации не установлена. Установка факсимиле выполняется в карточке организации, раздел ""Настройка печати"".'");
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
					ВывестиПоляПодОригинальнуюПодпись = Истина;
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
				ВывестиПоляПодОригинальнуюПодпись = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВывестиПоляПодОригинальнуюПодпись Тогда
		
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			ПараметрыМакета.Очистить();
			
			ПараметрыМакета.Вставить("ПредставлениеОрганизации", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование, ИНН, ЮридическийАдрес"));
			ПараметрыМакета.Вставить("ПредставлениеКонтрагента", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование, ИНН, РегистрационныйНомер, ЮридическийАдрес"));
			ПараметрыМакета.Вставить("ФИОРуководителя", Шапка.Ответственный);
			ПараметрыМакета.Вставить("ДолжностьРуководителя", Шапка.ДолжностьПредставителяОрганизации);
			ПараметрыМакета.Вставить("ФИОРуководителяКонтрагента", Шапка.ПредставительКонтрагента);
			ПараметрыМакета.Вставить("ДолжностьРуководителяКонтрагента", Шапка.ДолжностьПредставителяКонтрагента);
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыМакета);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.ДокументСсылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуАктСДаннымиКонтрагента()

// Сформировать печатные формы объектов
//
// ПАРАМЕТРЫ.
// ВХОДЯЩИЕ:
//   ДокументПечати  - ДокументСсылка		- Документ, который нужно распечатать
//   ПараметрыПечати - Структура 			- Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОбъектыПечати		   - СписокЗначений	  - Список объектов печати
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(ДокументПечати, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктБезРасхождений") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктБезРасхождений", "Акт сверки взаимных расчетов (без расхождений)", СформироватьПечатнуюФормуАктБезРасхождений(ДокументПечати, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктБезРасхожденийСФаксимиле") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктБезРасхожденийСФаксимиле", "Акт сверки взаимных расчетов (без расхождений с факсимиле)", СформироватьПечатнуюФормуАктБезРасхождений(ДокументПечати, ОбъектыПечати, Истина));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСДаннымиКонтрагента") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСДаннымиКонтрагента", "Акт сверки взаимных расчетов (с данными контрагента)", СформироватьПечатнуюФормуАктСДаннымиКонтрагента(ДокументПечати, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСДаннымиКонтрагентаСФаксимиле") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСДаннымиКонтрагентаСФаксимиле", "Акт сверки взаимных расчетов (с данными контрагента и с факсимиле)", СформироватьПечатнуюФормуАктСДаннымиКонтрагента(ДокументПечати, ОбъектыПечати, Истина));
		
	КонецЕсли;
	
	Если ДокументПечати.Количество() > 0 Тогда
		
		МассивОбъектовПечати = Новый Массив;
		МассивОбъектовПечати.Добавить(ДокументПечати[0]);
		
		// параметры отправки печатных форм по электронной почте
		УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектовПечати, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктБезРасхождений,АктСДаннымиКонтрагента";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктБезРасхождений";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаиморасчетов (без расхождений)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	//
	// Описание команды печати НСтр("ru = 'Акт сверки взаиморасчетов (без расхождений с факсимиле)'");
	//
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСДаннымиКонтрагента";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаиморасчетов (с данными контрагента)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 10;
	
	//
	// Описание команды печати НСтр("ru = 'Акт сверки взаиморасчетов (с данными контрагента и с факсимиле)'");
	//
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли