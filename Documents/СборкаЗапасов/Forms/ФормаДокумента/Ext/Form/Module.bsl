
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	Элементы.ЗаказПокупателя.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗаказНаПроизводство);
	Элементы.ДокументОснованиеНадпись.Видимость = НЕ ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Продукция.СтранаПроисхождения", "ПродукцияНомерГТД"));
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	КэшЗначений.Вставить("ВОРазборка", Перечисления.ВидыОперацийСборкаЗапасов.Разборка);
	КэшЗначений.Вставить("ВОСборка", Перечисления.ВидыОперацийСборкаЗапасов.Сборка);
	
	УстановитьВидимостьИДоступность();
	УстановитьРежимИСписокВыбора();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование.
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	УстановитьВидимостьИДоступностьМобильноеПриложение();
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Продукция");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Отходы");
	
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура УстановитьВидимостьИДоступностьМобильноеПриложение()
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ТЧОтходы.Видимость = Ложь;
		Элементы.ЛеваяКолонка.Видимость = Ложь;
		Элементы.ВидОперации.Видимость = Ложь;
		Элементы.Организация.Видимость = Ложь;
		Элементы.ГруппаСкладПродукцияСборка.Видимость = Ложь;
		Элементы.ГруппаСкладПродукцияРазборка.Видимость = Ложь;
		Элементы.ПродукцияПродукцияПодбор.Видимость = Ложь;
		Элементы.ПродукцияГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.ПродукцияХарактеристика.Видимость = Ложь;
		Элементы.ГруппаСкладЗапасыСборка.Видимость = Ложь;
		Элементы.ГруппаСкладЗапасыРазборка.Видимость = Ложь;
		Элементы.ГруппаТорговоеОборудование.Видимость = Ложь;
		Элементы.ЗапасыГруппаКопированиеСтрок.Видимость = Ложь;
		Элементы.ЗапасыПодбор.Видимость = Ложь;
		Элементы.КомандаЗаполнитьПоСпецификации.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		Элементы.ЗапасыХарактеристика.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ДокументОснованиеНадпись.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = "Готово";
		Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
			Объект.СтруктурнаяЕдиницаПродукции = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
			Объект.СтруктурнаяЕдиницаЗапасов = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов) Тогда
			Объект.СтруктурнаяЕдиницаОтходов = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		КонецЕсли;
		
	КонецЕсли;
	// Конец МобильноеПриложение
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатистикаИспользованияФормКлиент.ПроверитьЗаписатьСтатистикуКоманды(
		"СоздатьНаОсновании.СборкаЗапасов",
		ЭтотОбъект.ВладелецФормы,
		ЭтотОбъект.ОснованиеСоздания
	);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОповеститьОбИзменении(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество, ДоляСтоимости", Параметр[0], 1, 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество, ДоляСтоимости", Параметр[1][1], 1, 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		Если МаркерПодбора = "Продукция" Тогда
			
			ИмяТабличнойЧасти = "Продукция";
			
		ИначеЕсли МаркерПодбора = "Запасы" Тогда
			
			ИмяТабличнойЧасти = "Запасы";
			
		ИначеЕсли МаркерПодбора = "Отходы" Тогда
			
			ИмяТабличнойЧасти = "Отходы";
			
		КонецЕсли;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ТЧПродукция Тогда
			ПолучитьСерийныеНомераПродукцииИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		Иначе
			ПолучитьСерийныеНомераЗапасыИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		КонецЕсли;
		
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Продукция");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Отходы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения

КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ДокументОснование.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Элементы.ЗаказПокупателя.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументОснование);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ЗаказПокупателя.
//
&НаКлиенте
Процедура ЗаказПокупателяПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		
		Элементы.ПродукцияРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			СтрокаПродукция.Резерв = 0;
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ЗапасыИзменитьРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Резерв = 0;
		КонецЦикла;
		
		ИспользуетсяРезервирование = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаказПокупателяПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВидОперации.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
	ИмяТабличнойЧасти = ?(Объект.ВидОперации = КэшЗначений.ВОСборка, "Продукция", "Запасы");
	Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти["СтранаПроисхождения"] = Неопределено;
		СтрокаТабличнойЧасти["НомерГТД"] = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры // ВидОперацииПриИзменении()

#Область СтруктурнаяЕдиницаИзготовитель

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
	
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Подразделение", Объект.СтруктурнаяЕдиница);
		
		СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные);
		
		Элементы.Ячейка.Доступность = СтруктураДанные.ОрдерныйСклад;
		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаПродукции) Тогда
			Объект.СтруктурнаяЕдиницаПродукции = СтруктураДанные.СтруктурнаяЕдиницаПродукции;
			Объект.ЯчейкаПродукции = СтруктураДанные.ЯчейкаПродукции;
			Элементы.ЯчейкаПродукцииСборка.Доступность = СтруктураДанные.ОрдерныйСкладПродукции;
			Элементы.ЯчейкаПродукцииРазборка.Доступность = СтруктураДанные.ОрдерныйСкладПродукции;
			
		Иначе
			Объект.СтруктурнаяЕдиницаПродукции = Объект.СтруктурнаяЕдиница;
			Объект.ЯчейкаПродукции = Объект.Ячейка;
			Элементы.ЯчейкаПродукцииСборка.Доступность = СтруктураДанные.ОрдерныйСклад;
			Элементы.ЯчейкаПродукцииРазборка.Доступность = СтруктураДанные.ОрдерныйСклад;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаЗапасов) Тогда
			Объект.СтруктурнаяЕдиницаЗапасов = СтруктураДанные.СтруктурнаяЕдиницаЗапасов;
			Объект.ЯчейкаЗапасов = СтруктураДанные.ЯчейкаЗапасов;
			Элементы.ЯчейкаЗапасовСборка.Доступность = СтруктураДанные.ОрдерныйСкладЗапасов;
			Элементы.ЯчейкаЗапасовРазборка.Доступность = СтруктураДанные.ОрдерныйСкладЗапасов;
			
		Иначе
			Объект.СтруктурнаяЕдиницаЗапасов = Объект.СтруктурнаяЕдиница;
			Объект.ЯчейкаЗапасов = Объект.Ячейка;
			Элементы.ЯчейкаЗапасовСборка.Доступность = СтруктураДанные.ОрдерныйСклад;
			Элементы.ЯчейкаЗапасовРазборка.Доступность = СтруктураДанные.ОрдерныйСклад;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанные.СтруктурнаяЕдиницаОтходов) Тогда
			Объект.СтруктурнаяЕдиницаОтходов = СтруктураДанные.СтруктурнаяЕдиницаОтходов;
			Объект.ЯчейкаОтходов = СтруктураДанные.ЯчейкаОтходов;
			Элементы.ЯчейкаОтходов.Доступность = СтруктураДанные.ОрдерныйСкладОтходов;
			
		Иначе
			Объект.СтруктурнаяЕдиницаОтходов = Объект.СтруктурнаяЕдиница;
			Объект.ЯчейкаОтходов = Объект.Ячейка;
			Элементы.ЯчейкаОтходов.Доступность = СтруктураДанные.ОрдерныйСклад;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.Ячейка.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

// Процедура - обработчик события ПриИзменении поля ввода Ячейка.
//
&НаКлиенте
Процедура ЯчейкаПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	СтруктураДанные.Вставить("Ячейка", Объект.Ячейка);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", Объект.СтруктурнаяЕдиницаПродукции);
	СтруктураДанные.Вставить("ЯчейкаПродукции", Объект.ЯчейкаПродукции);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Объект.СтруктурнаяЕдиницаЗапасов);
	СтруктураДанные.Вставить("ЯчейкаЗапасов", Объект.ЯчейкаЗапасов);
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаОтходов", Объект.СтруктурнаяЕдиницаОтходов);
	СтруктураДанные.Вставить("ЯчейкаОтходов", Объект.ЯчейкаОтходов);
	
	СтруктураДанные = ПолучитьДанныеЯчейкаПриИзменении(СтруктураДанные);
	
	Если СтруктураДанные.Свойство("НоваяЯчейкаПродукции") Тогда
		Объект.ЯчейкаПродукции = СтруктураДанные.НоваяЯчейкаПродукции;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НоваяЯчейкаЗапасов") Тогда
		Объект.ЯчейкаЗапасов = СтруктураДанные.НоваяЯчейкаЗапасов;
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НоваяЯчейкаОтходов") Тогда
		Объект.ЯчейкаОтходов = СтруктураДанные.НоваяЯчейкаОтходов;
	КонецЕсли;
	
КонецПроцедуры // ЯчейкаПриИзменении()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		//Выбрать основание
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) тогда
			возврат;
		КонецЕсли;
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоТипу(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДокументОснованиеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументОснованиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу("ДокументОснование");
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоДокументОснование()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	Если Объект.ВидОперации = КэшЗначений.ВОРазборка Тогда
		
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	//Серийные номера
	РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомераПродукция, СтрокаТабличнойЧасти,,ИспользоватьСерийныеНомераОстатки);
	
КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ПродукцияХарактеристикаПриИзменении()

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерийныеНомера = "";
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "ПродукцияСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера("Продукция","СерийныеНомераПродукция");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоПриИзменении(Элемент)
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, Элементы.Продукция.ТекущиеДанные, "СерийныеНомераПродукция");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Продукция.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Продукция.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомераПродукция, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Продукция[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СтруктурнаяЕдиницаПродукцияПолучательСборка

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаПродукцииСборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииСборкаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
		
		Элементы.ЯчейкаПродукцииСборка.Доступность = Ложь;
		
	Иначе
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация",	Объект.Организация);
		СтруктураДанные.Вставить("Склад",		Объект.СтруктурнаяЕдиницаПродукции);
		
		СтруктураДанные			= ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
		Объект.Получил			= СтруктураДанные.Сотрудник;
		Объект.ПолучилДолжность = СтруктураДанные.Должность;
		
		Элементы.ЯчейкаПродукцииСборка.Доступность = СтруктураДанные.ОрдерныйСклад;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПродукцииСборкаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаПродукцииСборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииСборкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаПродукцииСборка.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПродукцииСборкаОткрытие()

&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииСборкаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Получил			= Неопределено;
	Объект.ПолучилДолжность = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СтруктурнаяЕдиницаПродукцияСписатьИзРазборка

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаПродукцииРазборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииРазборкаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
		
		Элементы.ЯчейкаПродукцииРазборка.Доступность = Ложь;
		
	Иначе
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Склад",		Объект.СтруктурнаяЕдиницаЗапасов);
		
		СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
		Объект.Отпустил				= СтруктураДанные.Сотрудник;
		Объект.ОтпустилДолжность	= СтруктураДанные.Должность;
		
		Элементы.ЯчейкаПродукцииРазборка.Доступность = СтруктураДанные.ОрдерныйСклад;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПродукцииРазборкаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаПродукцииРазборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииРазборкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаПродукцииРазборка.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПродукцииРазборкаОткрытие()

&НаКлиенте
Процедура СтруктурнаяЕдиницаПродукцииРазборкаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Отпустил				= Неопределено;
	Объект.ОтпустилДолжность	= Неопределено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	Если Объект.ВидОперации = КэшЗначений.ВОСборка Тогда
		
		СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		СтрокаТабличнойЧасти.НомерГТД = Неопределено;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.ДоляСтоимости = 1;
	
	//Серийные номера
	РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, СтрокаТабличнойЧасти,,ИспользоватьСерийныеНомераОстатки);
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерийныеНомера = "";
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера("Запасы", "СерийныеНомера");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, Элементы.Запасы.ТекущиеДанные);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Запасы[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СтруктурнаяЕдиницаЗапасыСписатьИзСборка

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаЗапасовСборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовСборкаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
		
		Элементы.ЯчейкаЗапасовСборка.Доступность = Ложь;
		
	Иначе
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Склад",		Объект.СтруктурнаяЕдиницаЗапасов);
		
		СтруктураДанные 		= ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
		Объект.Отпустил			= СтруктураДанные.Сотрудник;
		Объект.ОтпустилДолжность= СтруктураДанные.Должность;
		
		Элементы.ЯчейкаЗапасовСборка.Доступность = СтруктураДанные.ОрдерныйСклад;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаЗапасовСборкаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаЗапасовСборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовСборкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаЗапасовСборка.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаЗапасовСборкаОткрытие()

&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовСборкаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Отпустил			= Неопределено;
	Объект.ОтпустилДолжность= Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СтруктурнаяЕдиницаЗапасыПолучательРазборка

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаЗапасовРазборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовРазборкаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
		
		Элементы.ЯчейкаЗапасовРазборка.Доступность = Ложь;
		
	Иначе
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Склад",		Объект.СтруктурнаяЕдиницаПродукции);
		
		СтруктураДанные			= ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
		Объект.Получил			= СтруктураДанные.Сотрудник;
		Объект.ПолучилДолжность = СтруктураДанные.Должность;
		
		Элементы.ЯчейкаЗапасовРазборка.Доступность = СтруктураДанные.ОрдерныйСклад;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаЗапасовРазборкаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаЗапасовРазборка.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовРазборкаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаЗапасовРазборка.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаЗапасовРазборкаОткрытие()

&НаКлиенте
Процедура СтруктурнаяЕдиницаЗапасовРазборкаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Получил			= Неопределено;
	Объект.ПолучилДолжность = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтходы

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ОтходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Отходы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
КонецПроцедуры // ОтходыНоменклатураПриИзменении()

#Область СтруктурнаяЕдиницаПолучательОтходов

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиницаОтходов.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОтходовПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов) Тогда
		
		Элементы.ЯчейкаОтходов.Доступность = Ложь;
		
	Иначе
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Склад", Объект.СтруктурнаяЕдиницаОтходов);
	
		СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные);
	
		Элементы.ЯчейкаОтходов.Доступность = СтруктураДанные.ОрдерныйСклад;
	
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОтходовПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиницаОтходов.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОтходовОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиницаОтходов.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОтходовОткрытие()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик нажатия на кнопку ЗаполнитьПоОснованию.
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоДокументу("ЗаказНаПроизводство");
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
				
				Для Каждого СтрокаЗапасы Из Объект.Продукция Цикл
					СтрокаЗапасы.Резерв = 0;
				КонецЦикла;
				Элементы.Продукция.ПодчиненныеЭлементы.ПродукцияРезерв.Видимость = Ложь;
				
			Иначе
				
				Если Элементы.Продукция.ПодчиненныеЭлементы.ПродукцияРезерв.Видимость = Ложь Тогда
					Элементы.Продукция.ПодчиненныеЭлементы.ПродукцияРезерв.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
				
				Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
					СтрокаЗапасы.Резерв = 0;
				КонецЦикла;
				Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь;
				Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
				ИспользуетсяРезервирование = Ложь;
				
			Иначе
				
				Если Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь Тогда
					Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Истина;
					Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
					ИспользуетсяРезервирование = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  // ЗаполнитьПоОснованию()

// Процедура - обработчик нажатия на кнопку ЗаполнитьПоЗаказуПокупателя.
//
&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя(Команда)
	
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуПокупателяЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу покупателя""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу("ЗаказПокупателя");
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

// Процедура - обработчик команды ЗаполнитьПоРезервам подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоРезервам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоРезервам()

// Процедура - обработчик команды ОчиститьРезерв подменю ИзменитьРезерв.
//
&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура КомандаЗаполнитьПоСпецификации(Команда)
	
	Если Объект.Запасы.Количество() <> 0 Тогда
		
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Материалы"" будет перезаполнена! Продолжить выполнение операции?'"), 
		РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	КомандаЗаполнитьПоСпецификацииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	
	КомандаЗаполнитьПоСпецификацииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСпецификацииФрагмент()
	
	ЗаполнитьПоСпецификацииНаСервере();
	
КонецПроцедуры // КомандаЗаполнитьПоСпецификации()

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	
	// Сведения о текущем документе
	СтруктураПараметров.Вставить("Дата",						Объект.Дата);
	СтруктураПараметров.Вставить("Организация",					Объект.Организация);
	СтруктураПараметров.Вставить("ДокументОснование",			Объект.ДокументОснование);
	СтруктураПараметров.Вставить("Источник",					"СборкаЗапасов");
	СтруктураПараметров.Вставить("УсловияГарантийногоТалона",	Объект.УсловияГарантийногоТалона);
	СтруктураПараметров.Вставить("ПлановаяОценка",				Объект.ПлановаяОценка);
	СтруктураПараметров.Вставить("Отпустил",					Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",			Объект.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Получил",						Объект.Получил);
	СтруктураПараметров.Вставить("ПолучилДолжность",			Объект.ПолучилДолжность);
	
	МассивЗаказов = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
		МассивЗаказов.Добавить(Объект.ЗаказПокупателя);
	КонецЕсли;
	СтруктураПараметров.Вставить("МассивЗаказов",				МассивЗаказов);
	
	ОткрытьФорму("Обработка.ПечатьТТН.Форма", СтруктураПараметров, ЭтотОбъект);
	
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элементы.РеквизитыПечати, "Нажатие");
	
КонецПроцедуры // ДанныеПечати()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПечатьТТН.Форма.ДанныеПечати" Тогда
		
		Для каждого ЗначенияРеквизита Из ВыбранноеЗначение Цикл
			Если Объект.Свойство(ЗначенияРеквизита.Ключ) Тогда
				Объект[ЗначенияРеквизита.Ключ] = ЗначенияРеквизита.Значение;
				Модифицированность = Истина;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет Запасы по спецификации.
//
&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	СтекСпецификацийУзлов = Новый Массив;
	Документ.ЗаполнитьТабличнуюЧастьПоСпецификации(СтекСпецификацийУзлов);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗаполнитьМатериальныеЗатратыПоСпецификацииНаСервере()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры СтруктурнаяЕдиницаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ СтруктураДанные.Подразделение.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", СтруктураДанные.Подразделение.ПолучательПеремещения);
		СтруктураДанные.Вставить("ЯчейкаПродукции", СтруктураДанные.Подразделение.ЯчейкаПолучателяПеремещения);
		
	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаПродукции", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаПродукции", Неопределено);
		
	КонецЕсли;
	
	Если СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", СтруктураДанные.Подразделение.ИсточникПеремещения);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", СтруктураДанные.Подразделение.ЯчейкаИсточникаПеремещения);
		
	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", Неопределено);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("СтруктурнаяЕдиницаОтходов", СтруктураДанные.Подразделение.ПолучательОтходов);
	СтруктураДанные.Вставить("ЯчейкаОтходов", СтруктураДанные.Подразделение.ЯчейкаПолучателяОтходов);
	
	СтруктураДанные.Вставить("ОрдерныйСклад", НЕ СтруктураДанные.Подразделение.ОрдерныйСклад);
	СтруктураДанные.Вставить("ОрдерныйСкладПродукции", НЕ СтруктураДанные.Подразделение.ПолучательПеремещения.ОрдерныйСклад);
	СтруктураДанные.Вставить("ОрдерныйСкладОтходов", НЕ СтруктураДанные.Подразделение.ПолучательОтходов.ОрдерныйСклад);
	СтруктураДанные.Вставить("ОрдерныйСкладЗапасов", НЕ СтруктураДанные.Подразделение.ИсточникПеремещения.ОрдерныйСклад);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()

// Получает набор данных с сервера для процедуры ЯчейкаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЯчейкаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиницаПродукции Тогда
		
		Если СтруктураДанные.СтруктурнаяЕдиница.ПолучательПеремещения <> СтруктураДанные.СтруктурнаяЕдиницаПродукции
			ИЛИ СтруктураДанные.СтруктурнаяЕдиница.ЯчейкаПолучателяПеремещения <> СтруктураДанные.ЯчейкаПродукции Тогда
			
			СтруктураДанные.Вставить("НоваяЯчейкаПродукции", СтруктураДанные.Ячейка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиницаЗапасов Тогда
		
		Если СтруктураДанные.СтруктурнаяЕдиница.ИсточникПеремещения <> СтруктураДанные.СтруктурнаяЕдиницаЗапасов
			ИЛИ СтруктураДанные.СтруктурнаяЕдиница.ЯчейкаИсточникаПеремещения <> СтруктураДанные.ЯчейкаЗапасов Тогда
			
			СтруктураДанные.Вставить("НоваяЯчейкаЗапасов", СтруктураДанные.Ячейка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.СтруктурнаяЕдиница = СтруктураДанные.СтруктурнаяЕдиницаОтходов Тогда
		
		Если СтруктураДанные.СтруктурнаяЕдиница.ПолучательОтходов <> СтруктураДанные.СтруктурнаяЕдиницаОтходов
			ИЛИ СтруктураДанные.СтруктурнаяЕдиница.ЯчейкаПолучателяОтходов <> СтруктураДанные.ЯчейкаОтходов Тогда
			
			СтруктураДанные.Вставить("НоваяЯчейкаОтходов", СтруктураДанные.Ячейка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЯчейкаПриИзменении()

// Получает набор данных с сервера для процедуры СтруктурнаяЕдиницаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении(СтруктураДанные)
	
	ОрдерныйСклад = НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанные.Склад, "ОрдерныйСклад");
	СтруктураДанные.Вставить("ОрдерныйСклад", ОрдерныйСклад);
	
	ОписаниеОтветственногоЛица = Документы.СборкаЗапасов.ОтветственноеЛицоСтруктурнойЕдиницы(СтруктураДанные.Организация, СтруктураДанные.Склад);
	СтруктураДанные.Вставить("Сотрудник", ОписаниеОтветственногоЛица.Сотрудник);
	СтруктураДанные.Вставить("Должность", ОписаниеОтветственногоЛица.Должность);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПродукцияЗапасыОтходыПриИзменении()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(РеквизитОснование = "ДокументОснование")
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект[РеквизитОснование]);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.СборкаЗапасов.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ДоляСтоимости = 1;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Конец ПодключаемоеОборудование

// Процедура заполняет колонку Резерв по резервам под заказ.
//
&НаСервере
Процедура ЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервамНаСервере()

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	МаркерПодбора = "Запасы";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 		Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 	Компания);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаЗапасов);
	Иначе
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПродукции);
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", ИспользуетсяРезервирование);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Ложь);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	Иначе
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Истина);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Ложь);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // Подбор()

// Процедура - обработчик события Действие команды Подбор ТЧ Продукция.
//
&НаКлиенте
Процедура ПодборПродукция(Команда)
	
	ИмяТабличнойЧасти = "Продукция";
	МаркерПодбора = "Продукция";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 		Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",	Компания);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаПродукции);
	Иначе
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаЗапасов);
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", ИспользуетсяРезервирование);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Истина);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Ложь);
	Иначе
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Ложь);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборПродукция()

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура ОтходыПодбор(Команда)
	
	ИмяТабличнойЧасти 	= "Отходы";
	МаркерПодбора = "Отходы";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент",	Истина);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборВыполнить()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество, ДоляСтоимости", ТекШтрихкод, 1, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы", Ложь);
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

// Конец ПодключаемоеОборудование

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	ЭтоРазборка	= (Объект.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка);
	ЭтоСборка	= (Объект.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка);
	
	Если ЭтоРазборка Тогда
		
		// Резерв.
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		ИспользуетсяРезервирование = Ложь;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		Элементы.ПродукцияРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ЗапасыДоляСтоимости.Видимость = Истина;
		
		// Статус партии.
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.СтатусыПартий.СобственныеЗапасы);
		НовыйМассив.Добавить(Перечисления.СтатусыПартий.ДавальческоеСырье);
		МассивЗапасРабота = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", МассивЗапасРабота);
		НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеСтатуса", МассивЗапасРабота);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияПартия.ПараметрыВыбора = НовыеПараметры;
		
		Элементы.ГруппаСкладПродукцияСборка.Видимость = Ложь;
		Элементы.ГруппаСкладПродукцияРазборка.Видимость = Истина;
		
		Элементы.ГруппаСкладЗапасыСборка.Видимость = Ложь;
		Элементы.ГруппаСкладЗапасыРазборка.Видимость = Истина;
		
	Иначе
		
		// Резерв.
		Элементы.ЗапасыРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		ИспользуетсяРезервирование = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ЗапасыИзменитьРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ПродукцияРезерв.Видимость = Ложь;
		Элементы.ЗапасыДоляСтоимости.Видимость = Ложь;
		
		// Статус партии.
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыПартий.СобственныеЗапасы);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияПартия.ПараметрыВыбора = НовыеПараметры;
		
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			
			Если ЗначениеЗаполнено(СтрокаПродукция.Партия)
				И СтрокаПродукция.Партия.Статус = Перечисления.СтатусыПартий.ДавальческоеСырье Тогда
				СтрокаПродукция.Партия = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.ГруппаСкладПродукцияСборка.Видимость = Истина;
		Элементы.ГруппаСкладПродукцияРазборка.Видимость = Ложь;
		
		Элементы.ГруппаСкладЗапасыСборка.Видимость = Истина;
		Элементы.ГруппаСкладЗапасыРазборка.Видимость = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияСтранаПроисхождения",	"Видимость", ЭтоРазборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПродукцияНомерГТД",				"Видимость", ЭтоРазборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыСтранаПроисхождения",		"Видимость", ЭтоСборка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыНомерГТД", 				"Видимость", ЭтоСборка);
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

// Процедура устанавливает режим выбора и список выбора для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьРежимИСписокВыбора()
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница)
		ИЛИ Объект.СтруктурнаяЕдиница.ОрдерныйСклад Тогда
		Элементы.Ячейка.Доступность = Ложь;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродукции)
		ИЛИ Объект.СтруктурнаяЕдиницаПродукции.ОрдерныйСклад Тогда
		Элементы.ЯчейкаПродукцииСборка.Доступность = Ложь;
		Элементы.ЯчейкаЗапасовРазборка.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаЗапасов)
		ИЛИ Объект.СтруктурнаяЕдиницаЗапасов.ОрдерныйСклад Тогда
		Элементы.ЯчейкаЗапасовСборка.Доступность = Ложь;
		Элементы.ЯчейкаПродукцииРазборка.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаОтходов)
		ИЛИ Объект.СтруктурнаяЕдиницаОтходов.ОрдерныйСклад Тогда
		Элементы.ЯчейкаОтходов.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаПродукцииСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаПродукцииРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаЗапасовСборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаЗапасовСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаЗапасовСборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаЗапасовРазборка.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаЗапасовРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаЗапасовРазборка.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.СтруктурнаяЕдиницаОтходов.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиницаОтходов.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиницаОтходов.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьРежимИСписокВыбора()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Продукция.
//
&НаКлиенте
Процедура ПродукцияКопироватьСтроки(Команда)
	
	КопироватьСтроки("Продукция");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Продукция.
//
&НаКлиенте
Процедура ПродукцияВставитьСтроки(Команда)
	
	ВставитьСтроки("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтходыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Отходы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Отходы.
//
&НаКлиенте
Процедура ОтходыВставитьСтроки(Команда)
	
	ВставитьСтроки("Отходы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количетсве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	Для Итератор = 1 По КоличествоВставленных Цикл
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = "Продукция" ИЛИ ИмяТЧ = "Запасы" Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Спецификация) Тогда
				Строка.Спецификация = СтруктураДанные.Спецификация;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера("Запасы", "СерийныеНомера");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера(ИмяТЧЗапасы, ИмяТЧСерийныеНомера)
		
	ТекущиеДанныеИдентификатор = Элементы[ИмяТЧЗапасы].ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор, ИмяТЧЗапасы, ИмяТЧСерийныеНомера);
	// Для подбора СН используем поле СтруктурнаяЕдиницаЗапасов
	ПараметрыСерийныхНомеров.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаЗапасов);
	ПараметрыСерийныхНомеров.Вставить("Ячейка", Объект.ЯчейкаЗапасов);
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера("Продукция","СерийныеНомераПродукция");
	
КонецПроцедуры

Функция ПолучитьСерийныеНомераЗапасыИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	ПараметрыИменаПолей = Новый Структура;
	ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
	ПараметрыИменаПолей.Вставить("ИмяТЧСерийныеНомера", "СерийныеНомера");
	
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
	
КонецФункции

Функция ПолучитьСерийныеНомераПродукцииИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	ПараметрыИменаПолей = Новый Структура;
	ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Продукция");
	ПараметрыИменаПолей.Вставить("ИмяТЧСерийныеНомера", "СерийныеНомераПродукция");
	
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
	
КонецФункции

Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор, ИмяТЧ, ИмяТЧСерийныеНомера)
	
	Если ИмяТЧ = "Запасы" И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Сборка") Тогда
	    РежимПодбора = Истина;
	ИначеЕсли ИмяТЧ = "Продукция" И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСборкаЗапасов.Разборка") Тогда
		РежимПодбора = Истина;
	Иначе
		РежимПодбора = Ложь;
	КонецЕсли;
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, РежимПодбора, ИмяТЧ, ИмяТЧСерийныеНомера);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
