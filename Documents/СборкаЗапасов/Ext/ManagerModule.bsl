#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура формирует состав узлов.
//
Процедура ЗаполнитьТаблицуПродукцииСоставомУзлов(СтрокаПродукция, ТаблицаПродукция, СтекСпецификацийУзлов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаМатериалы.НомерСтроки) КАК НомерСтрокиСостава,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА ТаблицаМатериалы.Количество / ТаблицаМатериалы.КоличествоПродукции * &КоличествоПродукции
	|			ИНАЧЕ ТаблицаМатериалы.Количество * ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент / ТаблицаМатериалы.КоличествоПродукции * &КоличествоПродукции
	|		КОНЕЦ) КАК НормаРасхода,
	|	ТаблицаМатериалы.Спецификация КАК Спецификация
	|ИЗ
	|	Справочник.Спецификации.Состав КАК ТаблицаМатериалы,
	|	Константа.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ГДЕ
	|	ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаМатериалы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМатериалы.ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.ДоляСтоимости,
	|	ТаблицаМатериалы.Спецификация,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиСостава";
	
	Запрос.УстановитьПараметр("Ссылка", СтрокаПродукция.ТМСпецификация);
	Запрос.УстановитьПараметр("КоличествоПродукции", СтрокаПродукция.ТМКоличество);
	
	СтекСпецификацийУзлов.Добавить(СтрокаПродукция.ТМСпецификация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			Если НЕ СтекСпецификацийУзлов.Найти(Выборка.Спецификация) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Обнаружено рекурсивное вхождение элемента'")+" "+Выборка.Номенклатура+" "+НСтр("ru = 'в спецификации'")+" "+СтрокаПродукция.КоррСпецификация+"
									|Операция не выполнена!";
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			СтекСпецификацийУзлов.Добавить(Выборка.Спецификация);
			СтрокаПродукция.ТМКоличество = Выборка.НормаРасхода;
			СтрокаПродукция.ТМСпецификация = Выборка.Спецификация;
			ЗаполнитьТаблицуПродукцииСоставомУзлов(СтрокаПродукция, ТаблицаПродукция, СтекСпецификацийУзлов);
		Иначе
			НоваяСтрока = ТаблицаПродукция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПродукция);
			НоваяСтрока.ТМТипСтрокиСостава = Выборка.ТипСтрокиСостава;
			НоваяСтрока.ТМНоменклатура = Выборка.Номенклатура;
			НоваяСтрока.ТМХарактеристика = Выборка.Характеристика;
			НоваяСтрока.ТМКоличество = Выборка.НормаРасхода;
			НоваяСтрока.ТМСпецификация = Выборка.Спецификация;
		КонецЕсли;
	КонецЦикла;
	
	СтекСпецификацийУзлов.Очистить();
	
КонецПроцедуры // ЗаполнитьТаблицуПродукцииСоставомУзлов()

// Процедура распределяет материалы по спецификациям продукции.
//
Процедура РаспределитьМатериалыПоНормативам(СтрокаМатериалы, БазоваяТаблица, ТаблицаМатериалов)
	
	СтрокаМатериалы.Распределено = Истина;
	
	БазаРаспределения = 0;
	Для каждого СтрокаБазы Из БазоваяТаблица Цикл
		БазаРаспределения = БазаРаспределения + СтрокаБазы.ТМКоличество;
		СтрокаБазы.Распределено = Истина;
	КонецЦикла;
	
	РаспределитьСтрокуТабличнойЧастиМатериалы(СтрокаМатериалы, БазоваяТаблица, ТаблицаМатериалов, БазаРаспределения, Истина);
	
КонецПроцедуры // РаспределитьМатериалыПоНормативам()

// Процедура распределяет материалы пропорционально количеству продукции.
//
Процедура РаспределитьМатериалыПоКоличеству(БазоваяТаблица, ТаблицаМатериалов, БазаРаспределения = 0)
	
	ИсклРаспределено = Ложь;
	Если БазаРаспределения = 0 Тогда
		ИсклРаспределено = Истина;
		Для каждого СтрокаБазы Из БазоваяТаблица Цикл
			Если НЕ СтрокаБазы.Распределено Тогда
				БазаРаспределения = БазаРаспределения + СтрокаБазы.КоррКоличество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для н = 0 По ТаблицаМатериалов.Количество() - 1 Цикл
		
		СтрокаМатериалы = ТаблицаМатериалов[н];
		
		Если НЕ СтрокаМатериалы.Распределено Тогда
			РаспределитьСтрокуТабличнойЧастиМатериалы(СтрокаМатериалы, БазоваяТаблица, ТаблицаМатериалов, БазаРаспределения, Ложь, ИсклРаспределено);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьМатериалыПоКоличеству()

// Процедура распределяет строку материалов.
//
Процедура РаспределитьСтрокуТабличнойЧастиМатериалы(СтрокаМатериалы, БазоваяТаблица, ТаблицаМатериалов, БазаРаспределения, ПоНормативам, ИсклРаспределено = Ложь)
	
	ИсхКоличество = 0;
	ИсхРезерв = 0;
	КоличествоКСписанию = СтрокаМатериалы.Количество;
	РезервКСписанию = СтрокаМатериалы.Резерв;
	
	БазаРаспределенияКоличество = БазаРаспределения;
	БазаРаспределенияРезерв = БазаРаспределения;
	
	Для каждого СтрокаБазовойТаблицы Из БазоваяТаблица Цикл
		
		Если ИсклРаспределено И СтрокаБазовойТаблицы.Распределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсхКоличество = КоличествоКСписанию Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаМатериалы.КоррНоменклатура) Тогда
			НоваяСтрока = ТаблицаМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалы);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБазовойТаблицы);
			СтрокаМатериалы = НоваяСтрока;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаМатериалы, СтрокаБазовойТаблицы);
		КонецЕсли;
		
		Если ПоНормативам Тогда
			КоличествоБазовойТаблицы = СтрокаБазовойТаблицы.ТМКоличество;
		Иначе
			КоличествоБазовойТаблицы = СтрокаБазовойТаблицы.КоррКоличество
		КонецЕсли;
		
		// Количество.
		СтрокаМатериалы.Количество = Окр((КоличествоКСписанию - ИсхКоличество) * КоличествоБазовойТаблицы / БазаРаспределенияКоличество, 3, 1);
		
		Если (ИсхКоличество + СтрокаМатериалы.Количество) > КоличествоКСписанию Тогда
			СтрокаМатериалы.Количество = КоличествоКСписанию - ИсхКоличество;
			ИсхКоличество = КоличествоКСписанию;
		Иначе
			БазаРаспределенияКоличество = БазаРаспределенияКоличество - КоличествоБазовойТаблицы;
			ИсхКоличество = ИсхКоличество + СтрокаМатериалы.Количество;
		КонецЕсли;
		
		// Резерв.
		Если ИсхРезерв = РезервКСписанию Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМатериалы.Резерв = Окр((РезервКСписанию - ИсхРезерв) * КоличествоБазовойТаблицы / БазаРаспределенияРезерв, 3, 1);
		
		Если (ИсхРезерв + СтрокаМатериалы.Резерв) > РезервКСписанию Тогда
			СтрокаМатериалы.Резерв = РезервКСписанию - ИсхРезерв;
			ИсхРезерв = РезервКСписанию;
		Иначе
			БазаРаспределенияРезерв = БазаРаспределенияРезерв - КоличествоБазовойТаблицы;
			ИсхРезерв = ИсхРезерв + СтрокаМатериалы.Резерв;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсхКоличество < КоличествоКСписанию Тогда
		СтрокаМатериалы.Количество = СтрокаМатериалы.Количество + (КоличествоКСписанию - ИсхКоличество);
	КонецЕсли;
	
	Если ИсхРезерв < РезервКСписанию Тогда
		СтрокаМатериалы.Резерв = СтрокаМатериалы.Резерв + (РезервКСписанию - ИсхРезерв);
	КонецЕсли;
	
КонецПроцедуры // РаспределитьСтрокуТабличнойЧастиМатериалы()

// Процедура распределяет материалы по спецификациям продукции.
//
Процедура РаспределитьПродукциюПоНормативам(СтрокаПродукция, БазоваяТаблица, БазаРаспределения)
	
	РаспределитьСтрокуТабличнойЧастиПродукция(СтрокаПродукция, БазоваяТаблица, БазаРаспределения, Истина);
	
КонецПроцедуры // РаспределитьПродукциюПоНормативам()

// Процедура распределяет материалы пропорционально количеству продукции.
//
Процедура РаспределитьПродукциюПоКоличеству(ТаблицаПродукция, БазоваяТаблица, БазаРаспределения = 0, ИсклРаспределено = Истина)
	
	Если ИсклРаспределено Тогда
		Для каждого СтрокаМатериалы Из БазоваяТаблица Цикл
			Если НЕ СтрокаМатериалы.НоваяСтрока
				И НЕ СтрокаМатериалы.Распределено Тогда
				БазаРаспределения = БазаРаспределения + СтрокаМатериалы.ДоляСтоимости;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПродукция Из ТаблицаПродукция Цикл
		
		Если НЕ СтрокаПродукция.Распределено Тогда
			РаспределитьСтрокуТабличнойЧастиПродукция(СтрокаПродукция, БазоваяТаблица, БазаРаспределения, Ложь, ИсклРаспределено);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьПродукциюПоКоличеству()

// Процедура распределяет строку продукции.
//
Процедура РаспределитьСтрокуТабличнойЧастиПродукция(СтрокаПродукции, БазоваяТаблица, БазаРаспределения, ПоНормативам, ИсклРапределение = Ложь)
	
	ИсхКоличество = 0;
	ИсхРезерв = 0;
	КоличествоКСписанию = СтрокаПродукции.Количество;
	РезервКСписанию = СтрокаПродукции.Резерв;
	
	БазаРаспределенияКоличество = БазаРаспределения;
	БазаРаспределенияРезерв = БазаРаспределения;
	
	СтрокаРапределения = Неопределено;
	Для н = 0 По БазоваяТаблица.Количество() - 1 Цикл
		
		СтрокаМатериалы = БазоваяТаблица[н];
		
		Если ИсхКоличество = КоличествоКСписанию
			ИЛИ СтрокаМатериалы.НоваяСтрока Тогда
			СтрокаМатериалы.ВыполненРасчет = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ПоНормативам И НЕ СтрокаМатериалы.ВыполненРасчет Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМатериалы.ВыполненРасчет = Ложь;
		
		Если НЕ ПоНормативам И ИсклРапределение
			И СтрокаМатериалы.Распределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаМатериалы.Номенклатура) Тогда
			Распределено = СтрокаМатериалы.Распределено;
			ЗаполнитьЗначенияСвойств(СтрокаМатериалы, СтрокаПродукции);
			СтрокаРапределения = СтрокаМатериалы;
			СтрокаРапределения.Распределено = Распределено;
		Иначе
			СтрокаРапределения = БазоваяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРапределения, СтрокаМатериалы);
			ЗаполнитьЗначенияСвойств(СтрокаРапределения, СтрокаПродукции);
			СтрокаРапределения.НоваяСтрока = Истина;
		КонецЕсли;
		
		// Количество.
		СтрокаРапределения.Количество = Окр((КоличествоКСписанию - ИсхКоличество) * СтрокаМатериалы.ДоляСтоимости / ?(БазаРаспределенияКоличество = 0, 1, БазаРаспределенияКоличество),3,1);
		
		Если СтрокаРапределения.Количество = 0 Тогда
			СтрокаРапределения.Количество = КоличествоКСписанию;
			ИсхКоличество = КоличествоКСписанию;
		Иначе
			БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаМатериалы.ДоляСтоимости;
			ИсхКоличество = ИсхКоличество + СтрокаРапределения.Количество;
		КонецЕсли;
		
		Если ИсхКоличество > КоличествоКСписанию Тогда
			СтрокаРапределения.Количество = СтрокаРапределения.Количество - (ИсхКоличество - КоличествоКСписанию);
			ИсхКоличество = КоличествоКСписанию;
		КонецЕсли;
		
		// Резерв.
		Если ИсхРезерв = РезервКСписанию Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРапределения.Резерв = Окр((РезервКСписанию - ИсхРезерв) * СтрокаМатериалы.ДоляСтоимости / ?(БазаРаспределенияРезерв = 0, 1, БазаРаспределенияРезерв),3,1);
		
		Если СтрокаРапределения.Резерв = 0 Тогда
			СтрокаРапределения.Резерв = РезервКСписанию;
			ИсхРезерв = РезервКСписанию;
		Иначе
			БазаРаспределенияРезерв = БазаРаспределенияРезерв - СтрокаМатериалы.ДоляСтоимости;
			ИсхРезерв = ИсхРезерв + СтрокаРапределения.Резерв;
		КонецЕсли;
		
		Если ИсхРезерв > РезервКСписанию Тогда
			СтрокаРапределения.Резерв = СтрокаРапределения.Резерв - (ИсхРезерв - РезервКСписанию);
			ИсхРезерв = РезервКСписанию;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаРапределения <> Неопределено Тогда
		
		Если ИсхКоличество < КоличествоКСписанию Тогда
			СтрокаРапределения.Количество = СтрокаРапределения.Количество + (КоличествоКСписанию - ИсхКоличество);
		КонецЕсли;
		
		Если ИсхРезерв < РезервКСписанию Тогда
			СтрокаРапределения.Резерв = СтрокаРапределения.Резерв + (РезервКСписанию - ИсхРезерв);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РаспределитьСтрокуТабличнойЧастиПродукция()

////////////////////////////////////////////////////////////////////////////////
// ОТХОДЫ

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыОтходы(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыОтходы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыОтходы[н];
		
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
		
		// Автоперемещение возвратных отходов.
		Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаОтходов) Тогда
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			
			СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаОтходов;
			СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаОтходов;
			
			СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
			
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
            СтрокаТаблицыРасход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
			// Приход.
			СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаОтходов;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаОтходов;

			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
			
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
			
			СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
			СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыОтходы");
	
КонецПроцедуры // СформироватьТаблицаЗапасыОтходы()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеПоОтходам(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки КАК НомерСтроки,
	|	&Организация КАК Организация,
	|	СборкаЗапасовОтходы.Ссылка.Дата КАК Период,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница = СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов
	|	КОНЕЦ КАК СтруктурнаяЕдиницаОтходов,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовОтходы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаОтходов,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовОтходы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовОтходы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовОтходы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовОтходы.Количество
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	ВЫРАЗИТЬ(&ВозвратныеОтходы КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&ВозвратныеОтходы КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	СборкаЗапасовОтходы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов КАК СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов.ОрдерныйСклад КАК ОрдерныйСкладОтходов,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.ЯчейкаОтходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаОтходов,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовОтходы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовОтходы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовОтходы.Количество
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Ссылка
	|	И СборкаЗапасовОтходы.Ссылка.Дата < &ДатаОбновленияНаРелиз_1_2_1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	СборкаЗапасовОтходы.Ссылка.Дата,
	|	&Организация,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов.ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовОтходы.Ссылка.ЯчейкаОтходов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ,
	|	СборкаЗапасовОтходы.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовОтходы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовОтходы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовОтходы.Количество
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Ссылка
	|	И (НЕ СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад)
	|	И СборкаЗапасовОтходы.Ссылка.Дата >= &ДатаОбновленияНаРелиз_1_2_1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	СборкаЗапасовОтходы.Ссылка.Дата КАК Период,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовОтходы.Ссылка.Организация КАК Организация,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика КАК Характеристика,
	|	СборкаЗапасовОтходы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовОтходы.Количество
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Ссылка
	|	И СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад
	|	И СборкаЗапасовОтходы.Ссылка.Дата >= &ДатаОбновленияНаРелиз_1_2_1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	СборкаЗапасовОтходы.Ссылка.Дата,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.Ссылка.Организация,
	|	СборкаЗапасовОтходы.Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика,
	|	СборкаЗапасовОтходы.Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовОтходы.Количество
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Ссылка
	|	И СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов.ОрдерныйСклад
	|	И СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов <> СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаЗапасовОтходы.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	СборкаЗапасовОтходы.Ссылка.Дата,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов,
	|	СборкаЗапасовОтходы.Ссылка.Организация,
	|	СборкаЗапасовОтходы.Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика,
	|	СборкаЗапасовОтходы.Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовОтходы.Количество
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Ссылка
	|	И СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов.ОрдерныйСклад
	|	И СборкаЗапасовОтходы.Ссылка.Дата < &ДатаОбновленияНаРелиз_1_2_1
	|	И СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов <> СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	СборкаЗапасовОтходы.Ссылка.Дата КАК Период,
	|	СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовОтходы.Ссылка.Организация КАК Организация,
	|	СборкаЗапасовОтходы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовОтходы.Характеристика КАК Характеристика,
	|	СборкаЗапасовОтходы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовОтходы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовОтходы.Количество
	|		ИНАЧЕ СборкаЗапасовОтходы.Количество * СборкаЗапасовОтходы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.СборкаЗапасов.Отходы КАК СборкаЗапасовОтходы
	|ГДЕ
	|	СборкаЗапасовОтходы.Ссылка = &Ссылка
	|	И СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад
	|	И СборкаЗапасовОтходы.Ссылка.Дата >= &ДатаОбновленияНаРелиз_1_2_1
	|	И СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиницаОтходов <> СборкаЗапасовОтходы.Ссылка.СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("ВозвратныеОтходы", НСтр("ru = 'Возвратные отходы'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим таблицу для учета запасов.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыОтходы", МассивРезультатов[0].Выгрузить());

	// Сформируем таблицу для учета запасов.
	СформироватьТаблицаЗапасыОтходы(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);

	// Дополним таблицу для запасов.
	ВыборкаРезультатов = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
		
		// Автоперемещение возвратных отходов (дополним таблицу ТаблицаЗапасыНаСкладах).
		Если (ВыборкаРезультатов.СтруктурнаяЕдиницаОтходов = ВыборкаРезультатов.СтруктурнаяЕдиница
			И ВыборкаРезультатов.ЯчейкаОтходов <> ВыборкаРезультатов.Ячейка)
			ИЛИ ВыборкаРезультатов.СтруктурнаяЕдиницаОтходов <> ВыборкаРезультатов.СтруктурнаяЕдиница Тогда
					
			// Расход.			
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСклад) Тогда	
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
			
				СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				
			КонецЕсли;	
			
			// Приход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСкладОтходов) Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, ВыборкаРезультатов);
			
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = ВыборкаРезультатов.СтруктурнаяЕдиницаОтходов;
				СтрокаТаблицыПриход.Ячейка = ВыборкаРезультатов.ЯчейкаОтходов;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Автоперемещение возвратных отходов (дополним таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	ВыборкаРезультатов = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКПоступлениюНаСклады.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);		
		
	КонецЦикла;

	// Автоперемещение возвратных отходов (дополним таблицу ТаблицаЗапасыКРасходуСоСкладов).
	ВыборкаРезультатов = МассивРезультатов[3].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКРасходуСоСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);		
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеПоОтходам()

////////////////////////////////////////////////////////////////////////////////
// ЗАПАСЫ (СБОРКА)

Процедура СформироватьТаблицаЗапасыВРазрезеГТДСборка(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Период КАК Период
	|	,ТаблицаЗапасыНаСкладах.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяССылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период
	|	,ТаблицаЗапасыНаСкладах.Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыЗапасыСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток),
	|		СУММА(ЗапасыОстатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	СуммаКПеремещению = 0;
	СтрокаТаблицыЗапасыКПеремещению = Неопределено;
	ТаблицыПродукцияКПеремещению = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		КоличествоТребуетсяСвободныйОстаток = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
	
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
					
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
					
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Автосписание запасов.
				СуммаКПеремещению = СуммаКПеремещению + СуммаКСписанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
	
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
					
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
					
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Автосписание запасов.
				СуммаКПеремещению = СуммаКПеремещению + СуммаКСписанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Автосписание запасов.
		СтрокаТаблицыЗапасыКПеремещению = СтрокаТаблицаЗапасы;
		
		Если СуммаКПеремещению > 0 
			И СтрокаТаблицыЗапасыКПеремещению <> Неопределено 
			И ЗначениеЗаполнено(СтрокаТаблицыЗапасыКПеремещению.СтруктурнаяЕдиницаПродукции) Тогда
			
			НоваяСтрока = ТаблицыПродукцияКПеремещению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗапасыКПеремещению);
			НоваяСтрока.Сумма = СуммаКПеремещению;
			
		КонецЕсли;
		
		СуммаКПеремещению = 0;
		
	КонецЦикла;
	
	Если ТаблицыПродукцияКПеремещению.Количество() > 1 Тогда
		ТаблицыПродукцияКПеремещению.Свернуть("Организация,Период,СценарийПланирования,СтруктурнаяЕдиницаПродукции,ЗатратыНаВыпуск,КоррЗаказПокупателя,КоррНоменклатура,КоррПартия,КоррСтруктурнаяЕдиница,КоррСчетУчета,КоррХарактеристика,СчетДтПродукции,СчетКтПродукции,СчетУчетаПродукции","Сумма");
	КонецЕсли;
	
	// Автосписание запасов.
	Для каждого СтрокаПродукцияКПеремещению Из ТаблицыПродукцияКПеремещению Цикл
	
		// Расход.
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаПродукцияКПеремещению);
		
		СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаПродукцияКПеремещению.КоррСтруктурнаяЕдиница;
		СтрокаТаблицыРасход.СчетУчета = СтрокаПродукцияКПеремещению.КоррСчетУчета;
		СтрокаТаблицыРасход.Номенклатура = СтрокаПродукцияКПеремещению.КоррНоменклатура;
		СтрокаТаблицыРасход.Характеристика = СтрокаПродукцияКПеремещению.КоррХарактеристика;
		СтрокаТаблицыРасход.Партия = СтрокаПродукцияКПеремещению.КоррПартия;
		СтрокаТаблицыРасход.Спецификация = Неопределено;
		СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаПродукцияКПеремещению.КоррЗаказПокупателя;
		
		СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаПродукцияКПеремещению.СтруктурнаяЕдиницаПродукции;
		СтрокаТаблицыРасход.КоррСчетУчета = СтрокаПродукцияКПеремещению.СчетУчетаПродукции;
		СтрокаТаблицыРасход.КоррНоменклатура = СтрокаПродукцияКПеремещению.КоррНоменклатура;
		СтрокаТаблицыРасход.КоррХарактеристика = СтрокаПродукцияКПеремещению.КоррХарактеристика;
		СтрокаТаблицыРасход.КоррПартия = СтрокаПродукцияКПеремещению.КоррПартия;
		СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
		СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаПродукцияКПеремещению.КоррЗаказПокупателя;
		
		СтрокаТаблицыРасход.Сумма = СтрокаПродукцияКПеремещению.Сумма;
		СтрокаТаблицыРасход.Количество = 0;
		
		// Приход.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаПродукцияКПеремещению);
		
		СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаПродукцияКПеремещению.СтруктурнаяЕдиницаПродукции;
		СтрокаТаблицыПриход.СчетУчета = СтрокаПродукцияКПеремещению.СчетУчетаПродукции;
		СтрокаТаблицыПриход.Номенклатура = СтрокаПродукцияКПеремещению.КоррНоменклатура;
		СтрокаТаблицыПриход.Характеристика = СтрокаПродукцияКПеремещению.КоррХарактеристика;
		СтрокаТаблицыПриход.Партия = СтрокаПродукцияКПеремещению.КоррПартия;
		СтрокаТаблицыПриход.Спецификация = Неопределено;
		СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаПродукцияКПеремещению.КоррЗаказПокупателя;
		
		СтрокаТаблицыПриход.СчетДт = СтрокаПродукцияКПеремещению.СчетДтПродукции;
		СтрокаТаблицыПриход.СчетКт = СтрокаПродукцияКПеремещению.СчетКтПродукции;
		
		СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаПродукцияКПеремещению.КоррСтруктурнаяЕдиница;
		СтрокаТаблицыПриход.КоррСчетУчета = СтрокаПродукцияКПеремещению.КоррСчетУчета;
		СтрокаТаблицыПриход.КоррНоменклатура = СтрокаПродукцияКПеремещению.КоррНоменклатура;
		СтрокаТаблицыПриход.КоррХарактеристика = СтрокаПродукцияКПеремещению.КоррХарактеристика;
		СтрокаТаблицыПриход.КоррПартия = СтрокаПродукцияКПеремещению.КоррПартия;
		СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
		СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаПродукцияКПеремещению.КоррЗаказПокупателя;
		
		СтрокаТаблицыПриход.Сумма = СтрокаПродукцияКПеремещению.Сумма;
		СтрокаТаблицыПриход.Количество = 0;
		
		СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
		СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
		
		// Сформируем проводки.
		СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	ТаблицыПродукцияКПеремещению = Неопределено;
	
КонецПроцедуры // СформироватьТаблицаЗапасовСборка()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыЗапасыСборкаПеремещение(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПродажи,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказПродажи,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Ответственный,
	|	ТаблицаЗапасы.СчетУчета КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	&ПеремещениеЗапасов КАК Содержание,
	|	&ПеремещениеЗапасов КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов";
	
	Запрос.УстановитьПараметр("ПеремещениеЗапасов", НСтр("ru = 'Перемещение запасов'"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПеремещение", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток),
	|		СУММА(ЗапасыОстатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.СкопироватьКолонки();
	
	ПустаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПустойСчетУчета = ПланыСчетов.Управленческий.ПустаяСсылка();
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяПартия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
    ПустойЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();

	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтруктураДляПоискаПеремещение = Новый Структура;
		СтруктураДляПоискаПеремещение.Вставить("Организация", СтрокаТаблицаЗапасыПеремещение.Организация);
		СтруктураДляПоискаПеремещение.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница);
		СтруктураДляПоискаПеремещение.Вставить("СчетУчета", СтрокаТаблицаЗапасыПеремещение.СчетУчета);
		СтруктураДляПоискаПеремещение.Вставить("Номенклатура", СтрокаТаблицаЗапасыПеремещение.Номенклатура);
		СтруктураДляПоискаПеремещение.Вставить("Характеристика", СтрокаТаблицаЗапасыПеремещение.Характеристика);
		СтруктураДляПоискаПеремещение.Вставить("Партия", СтрокаТаблицаЗапасыПеремещение.Партия);
		
		КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
		КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
		
		Если КоличествоТребуетсяРезервПеремещение > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяРезервПеремещение Тогда

				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяРезервПеремещение / КоличествоОстатокПеремещение , 2, 1);

				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяРезервПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;

			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяРезервПеремещение Тогда

				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;

				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписаниюПеремещение = 0;	
			КонецЕсли;
	
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
												
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
			КонецЕсли;
			
			// Приход.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезервПеремещение > 0 Тогда
									
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
						
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.КоррЗаказПокупателя;
								
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
								
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяСвободныйОстатокПеремещение Тогда

				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяСвободныйОстатокПеремещение / КоличествоОстатокПеремещение , 2, 1);

				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстатокПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;

			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение Тогда

				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;

				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписаниюПеремещение = 0;	
			КонецЕсли;
	
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
			СтрокаТаблицыРасходПеремещение.ЗаказПокупателя = ПустойЗаказПокупателя;
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
			КонецЕсли;
			
			// Приход.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
								
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
								
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = ПустойЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
								
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
						
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение = ВременнаяТаблицаЗапасыПеремещение;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);

	КонецЦикла;	
	
	ВременнаяТаблицаЗапасыПеремещение.Индексы.Добавить("ВидДвижения,Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	СуммаКПеремещению = 0;
	СтрокаТаблицыЗапасыКПеремещению = Неопределено;
	ТаблицыПродукцияКПеремещению = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.СкопироватьКолонки();
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		КоличествоТребуетсяСвободныйОстаток = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивКоличествоОстаток = 0;
			МассивСуммаОстаток = 0;
			МассивСтрокОстатков = ВременнаяТаблицаЗапасыПеремещение.НайтиСтроки(СтруктураДляПоиска);
			Для каждого СтрокаОстатков Из МассивСтрокОстатков Цикл
				МассивКоличествоОстаток = МассивКоличествоОстаток + СтрокаОстатков.Количество;
				МассивСуммаОстаток = МассивСуммаОстаток + СтрокаОстатков.Сумма;
			КонецЦикла;
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].Количество;
				СуммаОстаток = МассивСтрокОстатков[0].Сумма;
				МассивСтрокОстатков[0].Количество = МассивКоличествоОстаток;
				МассивСтрокОстатков[0].Сумма = МассивСуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].Количество = МассивСтрокОстатков[0].Количество - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].Сумма = МассивСтрокОстатков[0].Сумма - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].Количество = 0;
				МассивСтрокОстатков[0].Сумма = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
	
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
					
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Австосписание запасов.
				СуммаКПеремещению = СуммаКПеремещению + СуммаКСписанию;
									
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивКоличествоОстаток = 0;
			МассивСуммаОстаток = 0;
			МассивСтрокОстатков = ВременнаяТаблицаЗапасыПеремещение.НайтиСтроки(СтруктураДляПоиска);
			Для каждого СтрокаОстатков Из МассивСтрокОстатков Цикл
				МассивКоличествоОстаток = МассивКоличествоОстаток + СтрокаОстатков.Количество;
				МассивСуммаОстаток = МассивСуммаОстаток + СтрокаОстатков.Сумма;
			КонецЦикла;
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				МассивСтрокОстатков[0].Количество = МассивКоличествоОстаток;
				МассивСтрокОстатков[0].Сумма = МассивСуммаОстаток;
				КоличествоОстаток = МассивСтрокОстатков[0].Количество;
				СуммаОстаток = МассивСтрокОстатков[0].Сумма;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);

				//// Изменения
				МассивСтрокОстатков[0].Количество = МассивСтрокОстатков[0].Количество - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].Сумма = МассивСтрокОстатков[0].Сумма - СуммаКСписанию;
				//// Изменения
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].Количество = 0;
				МассивСтрокОстатков[0].Сумма = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
	
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
			
			// Приход.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
					
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Автосписание запасов.
				СуммаКПеремещению = СуммаКПеремещению + СуммаКСписанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Автосписание запасов.
		СтрокаТаблицыЗапасыКПеремещению = СтрокаТаблицаЗапасы;
		
		Если СуммаКПеремещению > 0 
			И СтрокаТаблицыЗапасыКПеремещению <> Неопределено 
			И ЗначениеЗаполнено(СтрокаТаблицыЗапасыКПеремещению.СтруктурнаяЕдиницаПродукции) Тогда
			
			НоваяСтрока = ТаблицыПродукцияКПеремещению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗапасыКПеремещению);
			НоваяСтрока.Сумма = СуммаКПеремещению;
			
		КонецЕсли;
		
		СуммаКПеремещению = 0;
		
	КонецЦикла;
	
	Если ТаблицыПродукцияКПеремещению.Количество() > 1 Тогда
		ТаблицыПродукцияКПеремещению.Свернуть("Организация,Период,СценарийПланирования,СтруктурнаяЕдиницаПродукции,ЗатратыНаВыпуск,КоррЗаказПокупателя,КоррНоменклатура,КоррПартия,КоррСтруктурнаяЕдиница,КоррСчетУчета,КоррХарактеристика,СчетДтПродукции,СчетКтПродукции,СчетУчетаПродукции","Сумма");
	КонецЕсли;
	
	// Автосписание запасов.
	Для каждого СтрокаПродукцияКПеремещению Из ТаблицыПродукцияКПеремещению Цикл
	
		// Расход.
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаПродукцияКПеремещению);
		
		СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
		
		СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаПродукцияКПеремещению.КоррСтруктурнаяЕдиница;
		СтрокаТаблицыРасход.СчетУчета = СтрокаПродукцияКПеремещению.КоррСчетУчета;
		СтрокаТаблицыРасход.Номенклатура = СтрокаПродукцияКПеремещению.КоррНоменклатура;
		СтрокаТаблицыРасход.Характеристика = СтрокаПродукцияКПеремещению.КоррХарактеристика;
		СтрокаТаблицыРасход.Партия = СтрокаПродукцияКПеремещению.КоррПартия;
		СтрокаТаблицыРасход.Спецификация = Неопределено;
		СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаПродукцияКПеремещению.КоррЗаказПокупателя;
		
		СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаПродукцияКПеремещению.СтруктурнаяЕдиницаПродукции;
		СтрокаТаблицыРасход.КоррСчетУчета = СтрокаПродукцияКПеремещению.СчетУчетаПродукции;
		СтрокаТаблицыРасход.КоррНоменклатура = СтрокаПродукцияКПеремещению.КоррНоменклатура;
		СтрокаТаблицыРасход.КоррХарактеристика = СтрокаПродукцияКПеремещению.КоррХарактеристика;
		СтрокаТаблицыРасход.КоррПартия = СтрокаПродукцияКПеремещению.КоррПартия;
		СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
		СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаПродукцияКПеремещению.КоррЗаказПокупателя;
		
		СтрокаТаблицыРасход.Сумма = СтрокаПродукцияКПеремещению.Сумма;
		СтрокаТаблицыРасход.Количество = 0;
		
		// Приход.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаПродукцияКПеремещению);
		
		СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
		
		СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаПродукцияКПеремещению.СтруктурнаяЕдиницаПродукции;
		СтрокаТаблицыПриход.СчетУчета = СтрокаПродукцияКПеремещению.СчетУчетаПродукции;
		СтрокаТаблицыПриход.Номенклатура = СтрокаПродукцияКПеремещению.КоррНоменклатура;
		СтрокаТаблицыПриход.Характеристика = СтрокаПродукцияКПеремещению.КоррХарактеристика;
		СтрокаТаблицыПриход.Партия = СтрокаПродукцияКПеремещению.КоррПартия;
		СтрокаТаблицыПриход.Спецификация = Неопределено;
		СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаПродукцияКПеремещению.КоррЗаказПокупателя;
		
		СтрокаТаблицыПриход.СчетДт = СтрокаПродукцияКПеремещению.СчетДтПродукции;
		СтрокаТаблицыПриход.СчетКт = СтрокаПродукцияКПеремещению.СчетКтПродукции;
		
		СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаПродукцияКПеремещению.КоррСтруктурнаяЕдиница;
		СтрокаТаблицыПриход.КоррСчетУчета = СтрокаПродукцияКПеремещению.КоррСчетУчета;
		СтрокаТаблицыПриход.КоррНоменклатура = СтрокаПродукцияКПеремещению.КоррНоменклатура;
		СтрокаТаблицыПриход.КоррХарактеристика = СтрокаПродукцияКПеремещению.КоррХарактеристика;
		СтрокаТаблицыПриход.КоррПартия = СтрокаПродукцияКПеремещению.КоррПартия;
		СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
		СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаПродукцияКПеремещению.КоррЗаказПокупателя;
		
		СтрокаТаблицыПриход.Сумма = СтрокаПродукцияКПеремещению.Сумма;
		СтрокаТаблицыПриход.Количество = 0;
		
		СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
		СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
		
		// Сформируем проводки.
		СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыПеремещение");
	ТаблицыПродукцияКПеремещению = Неопределено;
	
КонецПроцедуры // СформироватьТаблицаЗапасыЗапасыСборкаПеремещение()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПотребностьВЗапасахСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ТаблицаПотребностьВЗапасах.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПотребностьВЗапасах.Номенклатура КАК Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика КАК Характеристика
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПотребностьВЗапасах";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПотребностьВЗапасах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|	СУММА(ПотребностьВЗапасахОстатки.Количество) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|		СУММА(ПотребностьВЗапасахОстатки.КоличествоОстаток) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах.Остатки(
	|				&МоментКонтроля,
	|				(Организация, ТипДвижения, ЗаказПокупателя, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|						ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|						ВременнаяТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|						ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы)) КАК ПотребностьВЗапасахОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПотребностьВЗапасахОстатки.Организация,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаПотребностьВЗапасах.Организация,
	|		ДвиженияДокументаПотребностьВЗапасах.ЗаказПокупателя,
	|		ДвиженияДокументаПотребностьВЗапасах.Номенклатура,
	|		ДвиженияДокументаПотребностьВЗапасах.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаПотребностьВЗапасах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах КАК ДвиженияДокументаПотребностьВЗапасах
	|	ГДЕ
	|		ДвиженияДокументаПотребностьВЗапасах.Регистратор = &Ссылка
	|		И ДвиженияДокументаПотребностьВЗапасах.Период <= &ПериодКонтроля) КАК ПотребностьВЗапасахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВЗапасахОстатки.Организация,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	
	Если ЗначениеЗаполнено(ДокументСсылкаСборкаЗапасов.ЗаказПокупателя) Тогда
		Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Иначе
		Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПотребностьВЗапасахОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаПотребностьВЗапасахОстатки.Индексы.Добавить("Организация,ЗаказПокупателя,Номенклатура,Характеристика");
	
	ВременнаяТаблицаПотребностьВЗапасах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицыПотребностьВЗапасах Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", 		СтрокаТаблицыПотребностьВЗапасах.Организация);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", 	СтрокаТаблицыПотребностьВЗапасах.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Номенклатура", 	СтрокаТаблицыПотребностьВЗапасах.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", 	СтрокаТаблицыПотребностьВЗапасах.Характеристика);
		
		МассивСтрокОстатков = ТаблицаПотребностьВЗапасахОстатки.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество() > 0 И МассивСтрокОстатков[0].КоличествоОстаток > 0 Тогда
			
			Если СтрокаТаблицыПотребностьВЗапасах.Количество > МассивСтрокОстатков[0].КоличествоОстаток Тогда
				СтрокаТаблицыПотребностьВЗапасах.Количество = МассивСтрокОстатков[0].КоличествоОстаток;
			КонецЕсли;
			
			СтрокаТаблицыРасход = ВременнаяТаблицаПотребностьВЗапасах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицыПотребностьВЗапасах);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах = ВременнаяТаблицаПотребностьВЗапасах;
	
КонецПроцедуры // СформироватьТаблицаПотребностьВЗапасахСборка()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуРаспределенияМатериаловСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, ТаблицаПродукция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукция.КоррНомерСтроки КАК КоррНомерСтроки,
	|	ТаблицаПродукция.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаПродукция.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаПродукция.КоррПартия КАК КоррПартия,
	|	ТаблицаПродукция.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаПродукция.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	ТаблицаПродукция.СчетДт КАК СчетДт,
	|	ТаблицаПродукция.СчетДтПродукции КАК СчетДтПродукции,
	|	ТаблицаПродукция.СчетКтПродукции КАК СчетКтПродукции,
	|	ТаблицаПродукция.КоррКоличество КАК КоррКоличество
	|ПОМЕСТИТЬ ВременнаяТаблицаТЗ
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоставПродукции.КоррНомерСтроки КАК КоррНомерСтроки,
	|	ТаблицаСоставПродукции.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаСоставПродукции.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаСоставПродукции.КоррПартия КАК КоррПартия,
	|	ТаблицаСоставПродукции.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаСоставПродукции.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаСоставПродукции.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	ТаблицаСоставПродукции.СчетДт КАК СчетДт,
	|	ТаблицаСоставПродукции.СчетДтПродукции КАК СчетДтПродукции,
	|	ТаблицаСоставПродукции.СчетКтПродукции КАК СчетКтПродукции,
	|	ТаблицаСоставПродукции.КоррКоличество КАК КоррКоличество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаМатериалы.Количество = 0
	|						ТОГДА 1
	|					ИНАЧЕ ТаблицаМатериалы.Количество
	|				КОНЕЦ / ТаблицаМатериалы.КоличествоПродукции * ТаблицаСоставПродукции.КоррКоличество
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаМатериалы.Количество = 0
	|					ТОГДА 1
	|				ИНАЧЕ ТаблицаМатериалы.Количество
	|			КОНЕЦ * ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент / ТаблицаМатериалы.КоличествоПродукции * ТаблицаСоставПродукции.КоррКоличество
	|	КОНЕЦ КАК ТМКоличество,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТМТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура КАК ТМНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ТМХарактеристика,
	|	ТаблицаМатериалы.Спецификация КАК ТМСпецификация,
	|	ЛОЖЬ КАК Распределено
	|ИЗ
	|	ВременнаяТаблицаТЗ КАК ТаблицаСоставПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК ТаблицаМатериалы
	|		ПО ТаблицаСоставПродукции.КоррСпецификация = ТаблицаМатериалы.Ссылка
	|			И (ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас))
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоррНомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовЗапасы.КлючСвязи КАК КлючСвязи,
	|	СборкаЗапасовЗапасы.Ссылка КАК Ссылка,
	|	СборкаЗапасовЗапасы.Ссылка.Дата КАК Период,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовЗапасы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница = СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов
	|	КОНЕЦ КАК СтруктурнаяЕдиницаЗапасов,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасовНаСклад,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов.ОрдерныйСклад КАК ОрдерныйСкладЗапасов,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница = СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПродукции,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовЗапасы.Ссылка.ЯчейкаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаЗапасов,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаЗапасов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК КоррСчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетУчетаПродукции,
	|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СборкаЗапасовЗапасы.НомерГТД КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовЗапасы.Партия.Статус
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ПустаяСсылка)
	|	КОНЕЦ КАК ПартияСтатус,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК КоррСпецификация,
	|	СборкаЗапасовЗапасы.Спецификация КАК Спецификация,
	|	СборкаЗапасовЗапасы.Ссылка.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовЗапасы.Количество
	|		ИНАЧЕ СборкаЗапасовЗапасы.Количество * СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовЗапасы.Резерв
	|		ИНАЧЕ СборкаЗапасовЗапасы.Резерв * СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетДтПродукции,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетКтПродукции,
	|	ЛОЖЬ КАК Распределено
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК СборкаЗапасовЗапасы
	|ГДЕ
	|	СборкаЗапасовЗапасы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаСоставПродукции = МассивРезультатов[1].Выгрузить();
	ТаблицаМатериалов = МассивРезультатов[2].Выгрузить();
	
	КоличествоПродукции = ТаблицаСоставПродукции.Количество();
	Инд = 0;
	Пока Инд < КоличествоПродукции Цикл
		СтрокаПродукции = ТаблицаСоставПродукции[Инд];
		Если СтрокаПродукции.ТМТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			СтекСпецификацийУзлов = Новый Массив();
			ЗаполнитьТаблицуПродукцииСоставомУзлов(СтрокаПродукции, ТаблицаСоставПродукции, СтекСпецификацийУзлов);
			ТаблицаСоставПродукции.Удалить(СтрокаПродукции);
			Если Инд + 1 = ТаблицаСоставПродукции.Количество() Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Инд = Инд + 1;
		КонецЕсли;
	КонецЦикла;
	ТаблицаСоставПродукции.Свернуть("КоррНоменклатура,КоррХарактеристика,КоррПартия,КоррСпецификация,КоррСчетУчета,СчетУчетаПродукции,СчетДт,СчетДтПродукции,СчетКтПродукции,КоррКоличество,ТМНоменклатура,ТМХарактеристика,Распределено", "ТМКоличество");
	ТаблицаСоставПродукции.Индексы.Добавить("ТМНоменклатура,ТМХарактеристика");
	
	РаспределеноМатериалов = 0;
	КоличествоПродукции = ТаблицаСоставПродукции.Количество();
	КоличествоМатериалов = ТаблицаМатериалов.Количество();
	Для н = 0 По КоличествоМатериалов - 1 Цикл
		
		СтрокаМатериалы = ТаблицаМатериалов[н];
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ТМНоменклатура", СтрокаМатериалы.Номенклатура);
		СтруктураПоиска.Вставить("ТМХарактеристика", СтрокаМатериалы.Характеристика);
		
		РезультатПоиска = ТаблицаСоставПродукции.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() <> 0 Тогда
			РаспределитьМатериалыПоНормативам(СтрокаМатериалы, РезультатПоиска, ТаблицаМатериалов);
			РаспределеноМатериалов = РаспределеноМатериалов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	РаспределеноПродукции = 0;
	Для каждого СтрокаСоставПродукции Из ТаблицаСоставПродукции Цикл
		Если СтрокаСоставПродукции.Распределено Тогда
			РаспределеноПродукции = РаспределеноПродукции + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если РаспределеноМатериалов < КоличествоМатериалов Тогда
		Если РаспределеноПродукции = КоличествоПродукции Тогда
			БазаРаспределения = ТаблицаПродукция.Итог("КоррКоличество");
			РаспределитьМатериалыПоКоличеству(ТаблицаПродукция, ТаблицаМатериалов, БазаРаспределения);
		Иначе
			РаспределитьМатериалыПоКоличеству(ТаблицаСоставПродукции, ТаблицаМатериалов);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПродукция = Неопределено;
	ТаблицаСоставПродукции = Неопределено;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРаспределенияМатериаловСборка", ТаблицаМатериалов);
	ТаблицаМатериалов = Неопределено;
	
КонецПроцедуры // СформироватьТаблицуРаспределенияМатериаловСборка()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеПоЗапасамСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовЗапасы.Период КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СборкаЗапасовЗапасы.Ячейка КАК Ячейка,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиницаЗапасовНаСклад,
	|	СборкаЗапасовЗапасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовЗапасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	СборкаЗапасовЗапасы.СчетУчета КАК СчетУчета,
	|	СборкаЗапасовЗапасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	СборкаЗапасовЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	СборкаЗапасовЗапасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СборкаЗапасовЗапасы.НомерГТД КАК НомерГТД,
	|	СборкаЗапасовЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	СборкаЗапасовЗапасы.Характеристика КАК Характеристика,
	|	СборкаЗапасовЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	СборкаЗапасовЗапасы.Партия КАК Партия,
	|	СборкаЗапасовЗапасы.ПартияСтатус КАК ПартияСтатус,
	|	СборкаЗапасовЗапасы.КоррПартия КАК КоррПартия,
	|	СборкаЗапасовЗапасы.Спецификация КАК Спецификация,
	|	СборкаЗапасовЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	СборкаЗапасовЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СборкаЗапасовЗапасы.Количество КАК Количество,
	|	СборкаЗапасовЗапасы.Резерв КАК Резерв,
	|	0 КАК Сумма,
	|	СборкаЗапасовЗапасы.СчетДт КАК СчетДт,
	|	СборкаЗапасовЗапасы.СчетДтПродукции КАК СчетДтПродукции,
	|	СборкаЗапасовЗапасы.СчетКт КАК СчетКт,
	|	СборкаЗапасовЗапасы.СчетКтПродукции КАК СчетКтПродукции,
	|	ВЫРАЗИТЬ(&РаспределениеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&РаспределениеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	&ДатаОбновленияНаРелиз_1_2_1 КАК ДатаОбновленияНаРелиз_1_2_1
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаРаспределенияМатериаловСборка КАК СборкаЗапасовЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ТаблицаЗапасы.СчетДтПродукции КАК СчетДтПродукции,
	|	ТаблицаЗапасы.СчетКтПродукции КАК СчетКтПродукции,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	0 КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.СчетУчетаПродукции,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетДт,
	|	ТаблицаЗапасы.СчетКт,
	|	ТаблицаЗапасы.СчетДтПродукции,
	|	ТаблицаЗапасы.СчетКтПродукции,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.Период < ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки),
	|	ТаблицаЗапасы.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	НЕ ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период >= ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасы.ЗаказПокупателя
	|	КОНЕЦ КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетПоПереработке) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ПартияСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасы.ЗаказПокупателя
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период >= ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период < ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ТаблицаРаспределенияМатериаловСборка", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспределенияМатериаловСборка);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("РаспределениеЗапасов", НСтр("ru = 'Распределение запасов'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим таблицу для учета запасов.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыЗапасы", МассивРезультатов[1].Выгрузить());
	
	// Сформируем таблицу для учета запасов.
	Если ЗначениеЗаполнено(ДокументСсылкаСборкаЗапасов.СтруктурнаяЕдиницаЗапасов) 
		И ДокументСсылкаСборкаЗапасов.СтруктурнаяЕдиницаЗапасов <> ДокументСсылкаСборкаЗапасов.СтруктурнаяЕдиница Тогда
		
		// Автоперемещение запасов.
		СформироватьТаблицаЗапасыЗапасыСборкаПеремещение(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
		
	Иначе
		
		СформироватьТаблицаЗапасыЗапасыСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
		
	КонецЕсли;
	
	СформироватьТаблицаЗапасыВРазрезеГТДСборка(СтруктураДополнительныеСвойства);
	
	// Дополним таблицу для запасов.
	ВыборкаРезультатов = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		// Автоперемещение запасов.
		Если (ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов = ВыборкаРезультатов.СтруктурнаяЕдиница
			И ВыборкаРезультатов.ЯчейкаЗапасов <> ВыборкаРезультатов.Ячейка)
			ИЛИ ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов <> ВыборкаРезультатов.СтруктурнаяЕдиница Тогда
			
			// Расход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСкладЗапасов) Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
			
				СтрокаТаблицыРасход.СтруктурнаяЕдиница = ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов;
				СтрокаТаблицыРасход.Ячейка = ВыборкаРезультатов.ЯчейкаЗапасов;
				
			КонецЕсли;
			
			// Приход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСклад) Тогда
			
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, ВыборкаРезультатов);
			
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
		
	КонецЦикла;
 
	// Определим таблицу израсходованного давальческого сырья, принятого в переработку, за которые будет необходимо отчитаться перед давальцем.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", МассивРезультатов[3].Выгрузить());
	
	// Определим таблицу для движения по потребности позиций зависимого спроса.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", МассивРезультатов[4].Выгрузить());
	СформироватьТаблицаПотребностьВЗапасахСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Автоперемещение запасов (дополним таблицу ТаблицаЗапасыКРасходуСоСкладов).
	ВыборкаРезультатов = МассивРезультатов[5].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКРасходуСоСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);
		
	КонецЦикла;
		
	// Автоперемещение запасов (дополним таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	ВыборкаРезультатов = МассивРезультатов[6].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКПоступлениюНаСклады.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаРаспределенияМатериаловСборка");
	
КонецПроцедуры // ИнициализироватьДанныеПоЗапасамСборка()

////////////////////////////////////////////////////////////////////////////////
// ПРОДУКЦИЯ (СБОРКА)

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродукцияСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.Индексы.Добавить("ВидДвижения,Организация,Номенклатура,Характеристика");;
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Индексы.Добавить("ВидДвижения,Организация,Номенклатура,Характеристика,Партия,КоррНоменклатура,КоррХарактеристика,КоррПартия,ЗатратыНаВыпуск");;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыПродукция = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция[н];
		
		// Сформируем выпуск продукции в количественном выражении. Если заказ покупателя указан - под заказ
		// покупателя, если нет - то под пустой заказ.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыПродукция);
		
		// Автоперемещение продукции.
		ПеремещениеСчетУчета = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыПродукция);
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаТаблицыРасход.Спецификация = Неопределено;
			
			СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
			СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчетаПродукции;
			
			СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
			СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
			СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
			СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
			СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя;
			
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
			СтрокаТаблицыРасход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
			// Приход.
			СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыПродукция);
			
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчетаПродукции;
			СтрокаТаблицыПриход.Спецификация = Неопределено;
			
			ПеремещениеСчетУчета = СтрокаТаблицыПриход.СчетУчета;
			
			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
			
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
			СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя;
			
			СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
			СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
		КонецЕсли;
		
		// Если заказ на производство заполнен, а заказ покупателя нет, то необходимо проверить,
		// есть ли размещенные заказы покупателей в заказе на производство.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя)
			И ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.ЗаказНаПроизводство) Тогда
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
			СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасыПродукция.Организация);
			СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасыПродукция.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасыПродукция.Характеристика);
			
			Индекс = 0;
			КоличествоВыхода = СтрокаТаблицаЗапасыПродукция.Количество;
			МассивРазмещенияПродукции = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.НайтиСтроки(СтруктураДляПоиска);
			
			Если МассивРазмещенияПродукции.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
			СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасыПродукция.Организация);
			СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасыПродукция.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасыПродукция.Характеристика);
			СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасыПродукция.Партия);
			СтруктураДляПоиска.Вставить("ЗатратыНаВыпуск", Ложь);
			
			Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
				СтруктураДляПоиска.Вставить("КоррНоменклатура", СтрокаТаблицаЗапасыПродукция.Номенклатура);
				СтруктураДляПоиска.Вставить("КоррХарактеристика", СтрокаТаблицаЗапасыПродукция.Характеристика);
				СтруктураДляПоиска.Вставить("КоррПартия", СтрокаТаблицаЗапасыПродукция.Партия);
			КонецЕсли;
			
			СтоимостьВыхода = 0;
			МассивСтоимостиВыхода = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.НайтиСтроки(СтруктураДляПоиска);
			Для каждого СтрокаВыхода Из МассивСтоимостиВыхода Цикл
				СтоимостьВыхода = СтоимостьВыхода + СтрокаВыхода.Сумма;
			КонецЦикла;
			
			Для каждого СтрокаМассивРазмещения Из МассивРазмещенияПродукции Цикл
				
				КоличествоВыходаВРезерв = СтрокаМассивРазмещения.Количество;
				
				Если КоличествоВыхода = КоличествоВыходаВРезерв Тогда
					СтоимостьВыходаВРезерв = СтоимостьВыхода;
				Иначе
					СтоимостьВыходаВРезерв = Окр(СтоимостьВыхода * КоличествоВыходаВРезерв / КоличествоВыхода, 2, 1);
				КонецЕсли;
				
				Если КоличествоВыходаВРезерв > 0 Тогда
				
					ВсегоСуммаКСписаниюПоЗаказу = 0;
					
					СуммаКСписаниюПоЗаказу = Окр(СтоимостьВыходаВРезерв * СтрокаМассивРазмещения.Количество / КоличествоВыходаВРезерв, 2, 1);
					ВсегоСуммаКСписаниюПоЗаказу = ВсегоСуммаКСписаниюПоЗаказу + СуммаКСписаниюПоЗаказу;
					
					Если Индекс = МассивРазмещенияПродукции.Количество() - 1 Тогда // Это последняя строка, необходимо скорректировать сумму.
						СуммаКСписаниюПоЗаказу = СуммаКСписаниюПоЗаказу + (СтоимостьВыходаВРезерв - ВсегоСуммаКСписаниюПоЗаказу);
					КонецЕсли;
					
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыПродукция);
					
					СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					
					Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
						СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
						СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
						СтрокаТаблицыРасход.СчетУчета = ПеремещениеСчетУчета;
						СтрокаТаблицыРасход.КоррСчетУчета = ПеремещениеСчетУчета;
					Иначе
						СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
						СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
						СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
						СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
					КонецЕсли;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
					СтрокаТаблицыРасход.КоррСпецификация = СтрокаТаблицаЗапасыПродукция.Спецификация;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаМассивРазмещения.ЗаказПокупателя;
					СтрокаТаблицыРасход.Количество = СтрокаМассивРазмещения.Количество;
					СтрокаТаблицыРасход.Сумма = СуммаКСписаниюПоЗаказу;
					
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыПродукция);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаМассивРазмещения.ЗаказПокупателя;
					
					Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
						СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
						СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
						СтрокаТаблицыПриход.СчетУчета = ПеремещениеСчетУчета;
						СтрокаТаблицыПриход.КоррСчетУчета = ПеремещениеСчетУчета;
					Иначе
						СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
						СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
						СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
						СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
					КонецЕсли;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
					СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасыПродукция.Спецификация;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя;
					СтрокаТаблицыПриход.Количество = СтрокаМассивРазмещения.Количество;
					СтрокаТаблицыПриход.Сумма = СуммаКСписаниюПоЗаказу;
					
					Индекс = Индекс + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыПродукция");
	ТаблицаРазмещенияПродукции = Неопределено;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродукцияСборка()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРазмещениеЗаказовСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых размещений заказов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РазмещениеЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.Количество > ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|		КОГДА ТаблицаПродукция.Количество <= ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ТаблицаПродукция.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РазмещениеЗаказовОстатки.Организация КАК Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|			СУММА(РазмещениеЗаказовОстатки.КоличествоОстаток) КАК Количество
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РазмещениеЗаказовОстатки.Организация КАК Организация,
	|				РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|				РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|				РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|				РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|				РазмещениеЗаказовОстатки.КоличествоОстаток КАК КоличествоОстаток
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов.Остатки(
	|						&МоментКонтроля,
	|						(Организация, Номенклатура, Характеристика, ИсточникОбеспечения) В
	|							(ВЫБРАТЬ
	|								ТаблицаПродукция.Организация КАК Организация,
	|								ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|								ТаблицаПродукция.Характеристика КАК Характеристика,
	|								ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения
	|							ИЗ
	|								ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|							ГДЕ
	|								ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО)) КАК РазмещениеЗаказовОстатки
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ДвиженияДокументаРазмещениеЗаказов.Организация,
	|				ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|				ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|				ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
	|				ДвиженияДокументаРазмещениеЗаказов.ИсточникОбеспечения,
	|				ВЫБОР
	|					КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|					ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|				КОНЕЦ
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|			ГДЕ
	|				ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|				И ДвиженияДокументаРазмещениеЗаказов.Период <= &ПериодКонтроля) КАК РазмещениеЗаказовОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазмещениеЗаказовОстатки.Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения) КАК РазмещениеЗаказовОстатки
	|		ПО ТаблицаПродукция.Организация = РазмещениеЗаказовОстатки.Организация
	|			И ТаблицаПродукция.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			И ТаблицаПродукция.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			И ТаблицаПродукция.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|ГДЕ
	|	ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО
	|	И РазмещениеЗаказовОстатки.ЗаказПокупателя ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();

	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРазмещениеЗаказовСборка()

////////////////////////////////////////////////////////////////////////////////
// ЗАПАСЫ (РАЗБОРКА)

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыЗапасыРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток),
	|		СУММА(ЗапасыОстатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		ТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		ТребуетсяКоличество = СтрокаТаблицаЗапасы.Количество;
		
		Если ТребуетсяРезерв > 0 Тогда
			
			ТребуетсяКоличество = ТребуетсяКоличество - ТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
				
				ТребуетсяСумма = Окр(МассивСтрокОстатков[0].СуммаОстаток * ТребуетсяРезерв / МассивСтрокОстатков[0].КоличествоОстаток,2,1);
				
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > ТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * ТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - ТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = ТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
			
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = ТребуетсяРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Автосписание запасов.
				Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции) Тогда
					
					// Расход.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыРасход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.Спецификация = Неопределено;
					СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = 0;
					
					// Приход.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.Спецификация = Неопределено;
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.СчетДт = СтрокаТаблицаЗапасы.СчетДтПродукции;
					
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = 0;
					
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
					СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
					
					// Сформируем проводки.
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяКоличество > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
				
				ТребуетсяСумма = Окр(МассивСтрокОстатков[0].СуммаОстаток * ТребуетсяКоличество / МассивСтрокОстатков[0].КоличествоОстаток,2,1);
				
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > ТребуетсяКоличество Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * ТребуетсяКоличество / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - ТребуетсяКоличество;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = ТребуетсяКоличество Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = ТребуетсяКоличество;
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Автосписание запасов.
				Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции) Тогда
					
					// Расход.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыРасход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.Спецификация = Неопределено;
					СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = 0;
					
					// Приход.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.Спецификация = Неопределено;
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.СчетДт = СтрокаТаблицаЗапасы.СчетДтПродукции;
					
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = 0;
					
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
					СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
					
					// Сформируем проводки.
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	
КонецПроцедуры // СформироватьТаблицаЗапасыЗапасыРазборка()

Процедура СформироватьТаблицаЗапасыВРазрезеГТДРазборка(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Период КАК Период
	|	,ТаблицаЗапасыНаСкладах.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	СписаниеПоНомерамГТД КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяССылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период
	|	,ТаблицаЗапасыНаСкладах.Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыЗапасыРазборкаПеремещение(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.Спецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПродажи,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказПродажи,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Ответственный,
	|	ТаблицаЗапасы.СчетУчета КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	&ПеремещениеЗапасов КАК Содержание,
	|	&ПеремещениеЗапасов КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	ТаблицаЗапасы.Сумма КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.Сумма";
	
	Запрос.УстановитьПараметр("ПеремещениеЗапасов", НСтр("ru = 'Перемещение запасов'"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПеремещение", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток),
	|		СУММА(ЗапасыОстатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.СкопироватьКолонки();
	
	ПустаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПустойСчетУчета = ПланыСчетов.Управленческий.ПустаяСсылка();
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяПартия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
	ПустойЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтруктураДляПоискаПеремещение = Новый Структура;
		СтруктураДляПоискаПеремещение.Вставить("Организация", СтрокаТаблицаЗапасыПеремещение.Организация);
		СтруктураДляПоискаПеремещение.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница);
		СтруктураДляПоискаПеремещение.Вставить("СчетУчета", СтрокаТаблицаЗапасыПеремещение.СчетУчета);
		СтруктураДляПоискаПеремещение.Вставить("Номенклатура", СтрокаТаблицаЗапасыПеремещение.Номенклатура);
		СтруктураДляПоискаПеремещение.Вставить("Характеристика", СтрокаТаблицаЗапасыПеремещение.Характеристика);
		СтруктураДляПоискаПеремещение.Вставить("Партия", СтрокаТаблицаЗапасыПеремещение.Партия);
		
		КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
		КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
		
		Если КоличествоТребуетсяРезервПеремещение > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяРезервПеремещение Тогда
				
				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяРезервПеремещение / КоличествоОстатокПеремещение , 2, 1);
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяРезервПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
				
			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяРезервПеремещение Тогда
				
				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
			КонецЕсли;
			
			// Приход.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезервПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
				
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяСвободныйОстатокПеремещение Тогда
				
				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяСвободныйОстатокПеремещение / КоличествоОстатокПеремещение , 2, 1);
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстатокПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
				
			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение Тогда
				
				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
			СтрокаТаблицыРасходПеремещение.ЗаказПокупателя = ПустойЗаказПокупателя;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
			КонецЕсли;
			
			// Приход
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = ПустойЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
				
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение = ВременнаяТаблицаЗапасыПеремещение;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
		
	КонецЦикла;
	
	ВременнаяТаблицаЗапасыПеремещение.Индексы.Добавить("ВидДвижения,Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		ТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		ТребуетсяКоличество = СтрокаТаблицаЗапасы.Количество;
		
		Если ТребуетсяРезерв > 0 Тогда
			
			ТребуетсяКоличество = ТребуетсяКоличество - ТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивКоличествоОстаток = 0;
			МассивСуммаОстаток = 0;
			МассивСтрокОстатков = ВременнаяТаблицаЗапасыПеремещение.НайтиСтроки(СтруктураДляПоиска);
			Для каждого СтрокаОстатков Из МассивСтрокОстатков Цикл
				МассивКоличествоОстаток = МассивКоличествоОстаток + СтрокаОстатков.Количество;
				МассивСуммаОстаток = МассивСуммаОстаток + СтрокаОстатков.Сумма;
			КонецЦикла;
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				
				МассивСтрокОстатков[0].Количество = МассивКоличествоОстаток;
				МассивСтрокОстатков[0].Сумма = МассивСуммаОстаток;
				КоличествоОстаток = МассивСтрокОстатков[0].Количество;
				СуммаОстаток = МассивСтрокОстатков[0].Сумма;
				
				ТребуетсяСумма = Окр(МассивСтрокОстатков[0].Сумма * ТребуетсяРезерв / МассивСтрокОстатков[0].Количество,2,1);
				
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > ТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * ТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].Количество = МассивСтрокОстатков[0].Количество - ТребуетсяРезерв;
				МассивСтрокОстатков[0].Сумма = МассивСтрокОстатков[0].Сумма - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = ТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
			
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = ТребуетсяРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Автосписание запасов.
				Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции) Тогда
					
					// Расход.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыРасход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.Спецификация = Неопределено;
					СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = 0;
					
					// Приход.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.Спецификация = Неопределено;
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.СчетДт = СтрокаТаблицаЗапасы.СчетДтПродукции;
					
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = 0;
					
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
					СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
					
					// Сформируем проводки.
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяКоличество > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивКоличествоОстаток = 0;
			МассивСуммаОстаток = 0;
			МассивСтрокОстатков = ВременнаяТаблицаЗапасыПеремещение.НайтиСтроки(СтруктураДляПоиска);
			Для каждого СтрокаОстатков Из МассивСтрокОстатков Цикл
				МассивКоличествоОстаток = МассивКоличествоОстаток + СтрокаОстатков.Количество;
				МассивСуммаОстаток = МассивСуммаОстаток + СтрокаОстатков.Сумма;
			КонецЦикла;
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				
				МассивСтрокОстатков[0].Количество = МассивКоличествоОстаток;
				МассивСтрокОстатков[0].Сумма = МассивСуммаОстаток;
				КоличествоОстаток = МассивСтрокОстатков[0].Количество;
				СуммаОстаток = МассивСтрокОстатков[0].Сумма;
				
				ТребуетсяСумма = Окр(МассивСтрокОстатков[0].Сумма * ТребуетсяКоличество / МассивСтрокОстатков[0].Количество,2,1);
				
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > ТребуетсяКоличество Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * ТребуетсяКоличество / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].Количество = МассивСтрокОстатков[0].Количество - ТребуетсяКоличество;
				МассивСтрокОстатков[0].Сумма = МассивСтрокОстатков[0].Сумма - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = ТребуетсяКоличество Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			СуммаСборки = СуммаСборки + СуммаКСписанию;
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = ТребуетсяКоличество;
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.ЗаказПокупателя;
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
				// Автосписание запасов.
				Если ЗначениеЗаполнено(СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции) Тогда
					
					// Расход.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыРасход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.Спецификация = Неопределено;
					СтрокаТаблицыРасход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = 0;
					
					// Приход.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаПродукции;
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаПродукции;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.Спецификация = Неопределено;
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.СчетДт = СтрокаТаблицаЗапасы.СчетДтПродукции;
					СтрокаТаблицыПриход.СчетКт = СтрокаТаблицаЗапасы.СчетКтПродукции;
					
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.КоррПартия;
					СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = 0;
					
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
					СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
					
					// Сформируем проводки.
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыПеремещение");
	
КонецПроцедуры // СформироватьТаблицаЗапасыЗапасыРазборкаПеремещение()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПотребностьВЗапасахРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ТаблицаПотребностьВЗапасах.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПотребностьВЗапасах.Номенклатура КАК Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика КАК Характеристика
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПотребностьВЗапасах";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПотребностьВЗапасах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();

	// Получение остатков.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|	СУММА(ПотребностьВЗапасахОстатки.Количество) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПотребностьВЗапасахОстатки.Организация КАК Организация,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.Номенклатура КАК Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика КАК Характеристика,
	|		СУММА(ПотребностьВЗапасахОстатки.КоличествоОстаток) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах.Остатки(
	|				&МоментКонтроля,
	|				(Организация, ТипДвижения, ЗаказПокупателя, Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|						ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|						ВременнаяТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|						ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ВременнаяТаблицаЗапасы)) КАК ПотребностьВЗапасахОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПотребностьВЗапасахОстатки.Организация,
	|		ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|		ПотребностьВЗапасахОстатки.Номенклатура,
	|		ПотребностьВЗапасахОстатки.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаПотребностьВЗапасах.Организация,
	|		ДвиженияДокументаПотребностьВЗапасах.ЗаказПокупателя,
	|		ДвиженияДокументаПотребностьВЗапасах.Номенклатура,
	|		ДвиженияДокументаПотребностьВЗапасах.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаПотребностьВЗапасах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаПотребностьВЗапасах.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ПотребностьВЗапасах КАК ДвиженияДокументаПотребностьВЗапасах
	|	ГДЕ
	|		ДвиженияДокументаПотребностьВЗапасах.Регистратор = &Ссылка
	|		И ДвиженияДокументаПотребностьВЗапасах.Период <= &ПериодКонтроля) КАК ПотребностьВЗапасахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВЗапасахОстатки.Организация,
	|	ПотребностьВЗапасахОстатки.ЗаказПокупателя,
	|	ПотребностьВЗапасахОстатки.Номенклатура,
	|	ПотребностьВЗапасахОстатки.Характеристика";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	
	Если ЗначениеЗаполнено(ДокументСсылкаСборкаЗапасов.ЗаказПокупателя) Тогда
		Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Иначе
		Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПотребностьВЗапасахОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаПотребностьВЗапасахОстатки.Индексы.Добавить("Организация,ЗаказПокупателя,Номенклатура,Характеристика");
	
	ВременнаяТаблицаПотребностьВЗапасах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицыПотребностьВЗапасах Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", 		СтрокаТаблицыПотребностьВЗапасах.Организация);
		СтруктураДляПоиска.Вставить("ЗаказПокупателя", 	СтрокаТаблицыПотребностьВЗапасах.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Номенклатура", 	СтрокаТаблицыПотребностьВЗапасах.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", 	СтрокаТаблицыПотребностьВЗапасах.Характеристика);
		
		МассивСтрокОстатков = ТаблицаПотребностьВЗапасахОстатки.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество() > 0 И МассивСтрокОстатков[0].КоличествоОстаток > 0 Тогда
			
			Если СтрокаТаблицыПотребностьВЗапасах.Количество > МассивСтрокОстатков[0].КоличествоОстаток Тогда
				СтрокаТаблицыПотребностьВЗапасах.Количество = МассивСтрокОстатков[0].КоличествоОстаток;
			КонецЕсли;
			
			СтрокаТаблицыРасход = ВременнаяТаблицаПотребностьВЗапасах.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицыПотребностьВЗапасах);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВЗапасах = ВременнаяТаблицаПотребностьВЗапасах;
	
КонецПроцедуры // СформироватьТаблицаПотребностьВЗапасахРазборка()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуРаспределенияМатериаловРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, ТаблицаПродукция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.ПартияСтатус КАК ПартияСтатус,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ТаблицаПродукция.СчетКт КАК СчетКт,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.Резерв КАК Резерв
	|ПОМЕСТИТЬ ВременнаяТаблицаТЗ
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоставПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаСоставПродукции.Характеристика КАК Характеристика,
	|	ТаблицаСоставПродукции.Партия КАК Партия,
	|	ТаблицаСоставПродукции.ПартияСтатус КАК ПартияСтатус,
	|	ТаблицаСоставПродукции.Спецификация КАК Спецификация,
	|	ТаблицаСоставПродукции.СчетУчета КАК СчетУчета,
	|	ТаблицаСоставПродукции.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ТаблицаСоставПродукции.СчетКт КАК СчетКт,
	|	ТаблицаСоставПродукции.Количество КАК Количество,
	|	ТаблицаСоставПродукции.Резерв КАК Резерв,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТМТипСтрокиСостава,
	|	1 КАК КоррКоличество,
	|	1 КАК ТМКоличество,
	|	ТаблицаМатериалы.Номенклатура КАК ТМНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ТМХарактеристика,
	|	ТаблицаМатериалы.Спецификация КАК ТМСпецификация
	|ИЗ
	|	ВременнаяТаблицаТЗ КАК ТаблицаСоставПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК ТаблицаМатериалы
	|		ПО ТаблицаСоставПродукции.Спецификация = ТаблицаМатериалы.Ссылка
	|			И (ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовЗапасы.КлючСвязи КАК КлючСвязи,
	|	СборкаЗапасовЗапасы.Ссылка КАК Ссылка,
	|	СборкаЗапасовЗапасы.Ссылка.Дата КАК Период,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовЗапасы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница = СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов
	|	КОНЕЦ КАК СтруктурнаяЕдиницаЗапасов,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасовНаСклад,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов.ОрдерныйСклад КАК ОрдерныйСкладЗапасов,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница = СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции.ОрдерныйСклад КАК ОрдерныйСкладПродукции,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовЗапасы.Ссылка.ЯчейкаЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаЗапасов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетУчета,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК КоррСчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчетаПродукции,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	СборкаЗапасовЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ПустаяСсылка) КАК ПартияСтатус,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррПартия,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК Спецификация,
	|	СборкаЗапасовЗапасы.Спецификация КАК КоррСпецификация,
	|	СборкаЗапасовЗапасы.Ссылка.ЗаказПокупателя КАК ЗаказПокупателя,
	|	0 КАК Количество,
	|	0 КАК Резерв,
	|	0 КАК Сумма,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДтПродукции,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК СчетКт,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовЗапасы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКтПродукции,
	|	СборкаЗапасовЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ЛОЖЬ КАК НоваяСтрока,
	|	ЛОЖЬ КАК ВыполненРасчет,
	|	ЛОЖЬ КАК Распределено
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК СборкаЗапасовЗапасы
	|ГДЕ
	|	СборкаЗапасовЗапасы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаСоставПродукции = МассивРезультатов[1].Выгрузить();
	ТаблицаМатериалов = МассивРезультатов[2].Выгрузить();
	
	КоличествоПродукции = ТаблицаСоставПродукции.Количество();
	Инд = 0;
	Пока Инд < КоличествоПродукции Цикл
		СтрокаПродукции = ТаблицаСоставПродукции[Инд];
		Если СтрокаПродукции.ТМТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			СтекСпецификацийУзлов = Новый Массив();
			ЗаполнитьТаблицуПродукцииСоставомУзлов(СтрокаПродукции, ТаблицаСоставПродукции, СтекСпецификацийУзлов);
			ТаблицаСоставПродукции.Удалить(СтрокаПродукции);
			Если Инд + 1 = ТаблицаСоставПродукции.Количество() Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Инд = Инд + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСоставПродукции.Свернуть("Номенклатура,Характеристика,Партия,ПартияСтатус,Спецификация,СчетУчета,СчетУчетаЗапасов,СчетКт,Количество,Резерв,ТМНоменклатура,ТМХарактеристика");
	ТаблицаСоставПродукции.Индексы.Добавить("Номенклатура,Характеристика,Партия,Спецификация");
	
	ТаблицаМатериалов.Индексы.Добавить("КоррНоменклатура,КоррХарактеристика");
	
	РаспределеноПродукции = 0;
	КоличествоМатериалов = ТаблицаМатериалов.Количество();
	КоличествоПродукции = ТаблицаСоставПродукции.Количество();
	Для каждого СтрокаПродукция Из ТаблицаПродукция Цикл
		
		СтруктураПоискаПродукция = Новый Структура;
		СтруктураПоискаПродукция.Вставить("Номенклатура", СтрокаПродукция.Номенклатура);
		СтруктураПоискаПродукция.Вставить("Характеристика", СтрокаПродукция.Характеристика);
		СтруктураПоискаПродукция.Вставить("Партия", СтрокаПродукция.Партия);
		СтруктураПоискаПродукция.Вставить("Спецификация", СтрокаПродукция.Спецификация);
		
		БазаДоляСтоимости = 0;
		РезультатПоискаПродукция = ТаблицаСоставПродукции.НайтиСтроки(СтруктураПоискаПродукция);
		Для каждого СтрокаПоискаПродукция Из РезультатПоискаПродукция Цикл
			
			СтруктураПоискаМатериалы = Новый Структура;
			СтруктураПоискаМатериалы.Вставить("НоваяСтрока", Ложь);
			СтруктураПоискаМатериалы.Вставить("КоррНоменклатура", СтрокаПоискаПродукция.ТМНоменклатура);
			СтруктураПоискаМатериалы.Вставить("КоррХарактеристика", СтрокаПоискаПродукция.ТМХарактеристика);
			
			РезультатПоискаМатериалы = ТаблицаМатериалов.НайтиСтроки(СтруктураПоискаМатериалы);
			КоличествоСоставМатериалы = РезультатПоискаМатериалы.Количество();
			Для каждого СтрокаПоискаМатериалы Из РезультатПоискаМатериалы Цикл
				СтрокаПродукция.Распределено = Истина;
				СтрокаПоискаМатериалы.Распределено = Истина;
				СтрокаПоискаМатериалы.ВыполненРасчет = Истина;
				БазаДоляСтоимости = БазаДоляСтоимости + СтрокаПоискаМатериалы.ДоляСтоимости;
			КонецЦикла;
			
		КонецЦикла;
		
		Если БазаДоляСтоимости > 0 Тогда
			РаспределитьПродукциюПоНормативам(СтрокаПродукция, ТаблицаМатериалов, БазаДоляСтоимости);
		КонецЕсли;
		
		Если СтрокаПродукция.Распределено Тогда
			РаспределеноПродукции = РаспределеноПродукции + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	РаспределеноМатериалов = 0;
	Для каждого СтрокаМатериалы Из ТаблицаМатериалов Цикл
		Если СтрокаМатериалы.Распределено И НЕ СтрокаМатериалы.НоваяСтрока Тогда
			РаспределеноМатериалов = РаспределеноМатериалов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если РаспределеноПродукции < ТаблицаПродукция.Количество() Тогда
		Если РаспределеноМатериалов = КоличествоМатериалов Тогда
			БазаДоляСтоимости = ТаблицаМатериалов.Итог("ДоляСтоимости");
			РаспределитьПродукциюПоКоличеству(ТаблицаПродукция, ТаблицаМатериалов, БазаДоляСтоимости, Ложь);
		Иначе
			РаспределитьПродукциюПоКоличеству(ТаблицаПродукция, ТаблицаМатериалов);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПродукция = Неопределено;
	ТаблицаСоставПродукции = Неопределено;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРаспределенияМатериаловРазборка", ТаблицаМатериалов);
	ТаблицаМатериалов = Неопределено;
	
КонецПроцедуры // СформироватьТаблицуРаспределенияМатериаловРазборка()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеПоЗапасамРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовЗапасы.Период КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	СборкаЗапасовЗапасы.Ячейка КАК Ячейка,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиницаЗапасовНаСклад,
	|	СборкаЗапасовЗапасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	СборкаЗапасовЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовЗапасы.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	СборкаЗапасовЗапасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	СборкаЗапасовЗапасы.СчетУчета КАК СчетУчета,
	|	СборкаЗапасовЗапасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	СборкаЗапасовЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	СборкаЗапасовЗапасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	СборкаЗапасовЗапасы.Характеристика КАК Характеристика,
	|	СборкаЗапасовЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	СборкаЗапасовЗапасы.Партия КАК Партия,
	|	СборкаЗапасовЗапасы.ПартияСтатус КАК ПартияСтатус,
	|	СборкаЗапасовЗапасы.КоррПартия КАК КоррПартия,
	|	СборкаЗапасовЗапасы.Спецификация КАК Спецификация,
	|	СборкаЗапасовЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	СборкаЗапасовЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СборкаЗапасовЗапасы.Количество КАК Количество,
	|	СборкаЗапасовЗапасы.Резерв КАК Резерв,
	|	0 КАК Сумма,
	|	СборкаЗапасовЗапасы.СчетДт КАК СчетДт,
	|	СборкаЗапасовЗапасы.СчетДтПродукции КАК СчетДтПродукции,
	|	СборкаЗапасовЗапасы.СчетКт КАК СчетКт,
	|	СборкаЗапасовЗапасы.СчетКтПродукции КАК СчетКтПродукции,
	|	СборкаЗапасовЗапасы.ДоляСтоимости КАК ДоляСтоимости,
	|	ВЫРАЗИТЬ(&РаспределениеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&РаспределениеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	&ДатаОбновленияНаРелиз_1_2_1 КАК ДатаОбновленияНаРелиз_1_2_1
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаРаспределенияМатериаловРазборка КАК СборкаЗапасовЗапасы
	|ГДЕ
	|	СборкаЗапасовЗапасы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	0 КАК Сумма,
	|	ТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ТаблицаЗапасы.СчетДтПродукции КАК СчетДтПродукции,
	|	ТаблицаЗапасы.СчетКтПродукции КАК СчетКтПродукции,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	ТаблицаЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.СчетУчетаПродукции,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетДт,
	|	ТаблицаЗапасы.СчетКт,
	|	ТаблицаЗапасы.СчетДтПродукции,
	|	ТаблицаЗапасы.СчетКтПродукции,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.ДоляСтоимости,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.ЯчейкаЗапасов КАК ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	ТаблицаЗапасы.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов КАК ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.Период < ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСкладПродукции,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки),
	|	ТаблицаЗапасы.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСкладПродукции,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	НЕ ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период >= ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.ЯчейкаЗапасов,
	|	ТаблицаЗапасы.ОрдерныйСкладПродукции,
	|	ТаблицаЗапасы.ОрдерныйСклад,
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ячейка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасы.ЗаказПокупателя
	|	КОНЕЦ КАК Заказ,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетПоПереработке) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ПартияСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаЗапасы.ЗаказПокупателя
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСкладЗапасов
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период >= ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	СУММА(ТаблицаЗапасы.Количество)
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ТаблицаЗапасы.Период < ТаблицаЗапасы.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасовНаСклад <> ТаблицаЗапасы.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ТаблицаРаспределенияМатериаловРазборка", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспределенияМатериаловРазборка);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("РаспределениеЗапасов", НСтр("ru = 'Распределение запасов'"));
	Запрос.УстановитьПараметр("ПеремещениеЗапасов", НСтр("ru = 'Перемещение запасов'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим таблицу для учета запасов.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыЗапасы", МассивРезультатов[1].Выгрузить());
	
	// Сформируем таблицу для учета запасов.
	Если ЗначениеЗаполнено(ДокументСсылкаСборкаЗапасов.СтруктурнаяЕдиницаЗапасов) 
		И ДокументСсылкаСборкаЗапасов.СтруктурнаяЕдиницаЗапасов <> ДокументСсылкаСборкаЗапасов.СтруктурнаяЕдиница Тогда
		
		// Автоперемещение запасов.
		СформироватьТаблицаЗапасыЗапасыРазборкаПеремещение(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
		
	Иначе
		
		СформироватьТаблицаЗапасыЗапасыРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
		
	КонецЕсли;
	
	// Дополним таблицу для запасов.
	ВыборкаРезультатов = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		// Автоперемещение запасов.
		Если (ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов = ВыборкаРезультатов.СтруктурнаяЕдиница
			И ВыборкаРезультатов.ЯчейкаЗапасов <> ВыборкаРезультатов.Ячейка)
			ИЛИ ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов <> ВыборкаРезультатов.СтруктурнаяЕдиница Тогда
			
			// Расход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСкладЗапасов) Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
				
				СтрокаТаблицыРасход.СтруктурнаяЕдиница = ВыборкаРезультатов.СтруктурнаяЕдиницаЗапасов;
				СтрокаТаблицыРасход.Ячейка = ВыборкаРезультатов.ЯчейкаЗапасов;
				
			КонецЕсли;
			
			// Приход.
			Если (ВыборкаРезультатов.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (ВыборкаРезультатов.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ ВыборкаРезультатов.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, ВыборкаРезультатов);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, ВыборкаРезультатов);
		
	КонецЦикла;
	
	// Определим таблицу израсходованного давальческого сырья, принятого в переработку, за которые будет необходимо отчитаться перед давальцем.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", МассивРезультатов[3].Выгрузить());
	
	// Определим таблицу для движения по потребности позиций зависимого спроса.
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", МассивРезультатов[4].Выгрузить());
	СформироватьТаблицаПотребностьВЗапасахРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Автоперемещение запасов (дополним таблицу ТаблицаЗапасыКРасходуСоСкладов).
	ВыборкаРезультатов = МассивРезультатов[5].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКРасходуСоСкладов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);
		
	КонецЦикла;
	
	// Автоперемещение запасов (дополним таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	ВыборкаРезультатов = МассивРезультатов[6].Выбрать();
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		СтрокаТаблицыРасходПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыКПоступлениюНаСклады.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПриход, ВыборкаРезультатов);
		
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеПоЗапасамРазборка()

////////////////////////////////////////////////////////////////////////////////
// ПРОДУКЦИЯ (РАЗБОРКА)

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродукцияРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки)
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.Индексы.Добавить("ВидДвижения,Организация,Номенклатура,Характеристика");;
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Индексы.Добавить("ВидДвижения,Организация,Номенклатура,Характеристика,Партия,КоррНоменклатура,КоррХарактеристика,КоррПартия,ЗатратыНаВыпуск");;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыПродукция = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция[н];
		
		// Сформируем выпуск продукции в количественном выражении. Если заказ покупателя указан - под заказ
		// покупателя, если нет - то под пустой заказ.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыПродукция);
		
		// Автоперемещение продукции.
		ПеремещениеСчетУчета = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыПродукция);
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаТаблицыРасход.Спецификация = Неопределено;
			
			СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
			СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчетаПродукции;
			
			СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
			СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
			СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
			СтрокаТаблицыРасход.КоррСпецификация = Неопределено;
			СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя;
			
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
			СтрокаТаблицыРасход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
			// Приход.
			СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыПродукция);
			
			СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
			СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчетаПродукции;
			СтрокаТаблицыПриход.Спецификация = Неопределено;
			
			ПеремещениеСчетУчета = СтрокаТаблицыПриход.СчетУчета;
			
			СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
			СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
			
			СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
			СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
			СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
			СтрокаТаблицыПриход.КоррСпецификация = Неопределено;
			СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя;
			
			СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru = 'Перемещение запасов'");
			СтрокаТаблицыПриход.Содержание = НСтр("ru = 'Перемещение запасов'");
			
		КонецЕсли;
		
		// Если заказ на производство заполнен, а заказ покупателя нет, то необходимо проверить,
		// есть ли размещенные заказы покупателей в заказе на производство.
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя)
			И ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.ЗаказНаПроизводство) Тогда
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
			СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасыПродукция.Организация);
			СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасыПродукция.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасыПродукция.Характеристика);
			
			Индекс = 0;
			КоличествоВыхода = СтрокаТаблицаЗапасыПродукция.Количество;
			МассивРазмещенияПродукции = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРазмещениеЗаказов.НайтиСтроки(СтруктураДляПоиска);
			
			Если МассивРазмещенияПродукции.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Приход);
			СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасыПродукция.Организация);
			СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасыПродукция.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасыПродукция.Характеристика);
			СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасыПродукция.Партия);
			СтруктураДляПоиска.Вставить("ЗатратыНаВыпуск", Ложь);
			
			Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
				СтруктураДляПоиска.Вставить("КоррНоменклатура", СтрокаТаблицаЗапасыПродукция.Номенклатура);
				СтруктураДляПоиска.Вставить("КоррХарактеристика", СтрокаТаблицаЗапасыПродукция.Характеристика);
				СтруктураДляПоиска.Вставить("КоррПартия", СтрокаТаблицаЗапасыПродукция.Партия);
			КонецЕсли;
			
			СтоимостьВыхода = 0;
			МассивСтоимостиВыхода = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.НайтиСтроки(СтруктураДляПоиска);
			Для каждого СтрокаВыхода Из МассивСтоимостиВыхода Цикл
				СтоимостьВыхода = СтоимостьВыхода + СтрокаВыхода.Сумма;
			КонецЦикла;
			
			Для каждого СтрокаМассивРазмещения Из МассивРазмещенияПродукции Цикл
				
				КоличествоВыходаВРезерв = СтрокаМассивРазмещения.Количество;
				
				Если КоличествоВыхода = КоличествоВыходаВРезерв Тогда
					СтоимостьВыходаВРезерв = СтоимостьВыхода;
				Иначе
					СтоимостьВыходаВРезерв = Окр(СтоимостьВыхода * КоличествоВыходаВРезерв / КоличествоВыхода, 2, 1);
				КонецЕсли;
				
				Если КоличествоВыходаВРезерв > 0 Тогда
				
					ВсегоСуммаКСписаниюПоЗаказу = 0;
					
					СуммаКСписаниюПоЗаказу = Окр(СтоимостьВыходаВРезерв * СтрокаМассивРазмещения.Количество / КоличествоВыходаВРезерв, 2, 1);
					ВсегоСуммаКСписаниюПоЗаказу = ВсегоСуммаКСписаниюПоЗаказу + СуммаКСписаниюПоЗаказу;
					
					Если Индекс = МассивРазмещенияПродукции.Количество() - 1 Тогда // Это последняя строка, необходимо скорректировать сумму.
						СуммаКСписаниюПоЗаказу = СуммаКСписаниюПоЗаказу + (СтоимостьВыходаВРезерв - ВсегоСуммаКСписаниюПоЗаказу);
					КонецЕсли;
					
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыПродукция);
					
					СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					
					Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
						СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
						СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
						СтрокаТаблицыРасход.СчетУчета = ПеремещениеСчетУчета;
						СтрокаТаблицыРасход.КоррСчетУчета = ПеремещениеСчетУчета;
					Иначе
						СтрокаТаблицыРасход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
						СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
						СтрокаТаблицыРасход.СчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
						СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
					КонецЕсли;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
					СтрокаТаблицыРасход.КоррСпецификация = СтрокаТаблицаЗапасыПродукция.Спецификация;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = СтрокаМассивРазмещения.ЗаказПокупателя;
					СтрокаТаблицыРасход.Количество = СтрокаМассивРазмещения.Количество;
					СтрокаТаблицыРасход.Сумма = СуммаКСписаниюПоЗаказу;
					
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыПродукция);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаМассивРазмещения.ЗаказПокупателя;
					
					Если ЗначениеЗаполнено(СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции) Тогда
						СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
						СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиницаПродукции;
						СтрокаТаблицыПриход.СчетУчета = ПеремещениеСчетУчета;
						СтрокаТаблицыПриход.КоррСчетУчета = ПеремещениеСчетУчета;
					Иначе
						СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
						СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПродукция.СтруктурнаяЕдиница;
						СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
						СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасыПродукция.СчетУчета;
					КонецЕсли;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасыПродукция.Номенклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасыПродукция.Характеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасыПродукция.Партия;
					СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасыПродукция.Спецификация;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПродукция.ЗаказПокупателя;
					СтрокаТаблицыПриход.Количество = СтрокаМассивРазмещения.Количество;
					СтрокаТаблицыПриход.Сумма = СуммаКСписаниюПоЗаказу;
					
					Индекс = Индекс + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыПродукция");
	ТаблицаРазмещенияПродукции = Неопределено;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродукцияРазборка()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРазмещениеЗаказовРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых размещений заказов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РазмещениеЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.Количество > ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|		КОГДА ТаблицаПродукция.Количество <= ЕСТЬNULL(РазмещениеЗаказовОстатки.Количество, 0)
	|			ТОГДА ТаблицаПродукция.Количество
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РазмещениеЗаказовОстатки.Организация КАК Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|			СУММА(РазмещениеЗаказовОстатки.КоличествоОстаток) КАК Количество
	|		ИЗ
	|			(ВЫБРАТЬ
	|				РазмещениеЗаказовОстатки.Организация КАК Организация,
	|				РазмещениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|				РазмещениеЗаказовОстатки.Характеристика КАК Характеристика,
	|				РазмещениеЗаказовОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|				РазмещениеЗаказовОстатки.ИсточникОбеспечения КАК ИсточникОбеспечения,
	|				РазмещениеЗаказовОстатки.КоличествоОстаток КАК КоличествоОстаток
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов.Остатки(
	|						&МоментКонтроля,
	|						(Организация, Номенклатура, Характеристика, ИсточникОбеспечения) В
	|							(ВЫБРАТЬ
	|								ТаблицаПродукция.Организация КАК Организация,
	|								ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|								ТаблицаПродукция.Характеристика КАК Характеристика,
	|								ТаблицаПродукция.ИсточникОбеспечения КАК ИсточникОбеспечения
	|							ИЗ
	|								ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|							ГДЕ
	|								ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО)) КАК РазмещениеЗаказовОстатки
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ДвиженияДокументаРазмещениеЗаказов.Организация,
	|				ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|				ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|				ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя,
	|				ДвиженияДокументаРазмещениеЗаказов.ИсточникОбеспечения,
	|				ВЫБОР
	|					КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|						ТОГДА ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|					ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|				КОНЕЦ
	|			ИЗ
	|				РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|			ГДЕ
	|				ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|				И ДвиженияДокументаРазмещениеЗаказов.Период <= &ПериодКонтроля) КАК РазмещениеЗаказовОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РазмещениеЗаказовОстатки.Организация,
	|			РазмещениеЗаказовОстатки.Номенклатура,
	|			РазмещениеЗаказовОстатки.Характеристика,
	|			РазмещениеЗаказовОстатки.ЗаказПокупателя,
	|			РазмещениеЗаказовОстатки.ИсточникОбеспечения) КАК РазмещениеЗаказовОстатки
	|		ПО ТаблицаПродукция.Организация = РазмещениеЗаказовОстатки.Организация
	|			И ТаблицаПродукция.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
	|			И ТаблицаПродукция.Характеристика = РазмещениеЗаказовОстатки.Характеристика
	|			И ТаблицаПродукция.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
	|ГДЕ
	|	ТаблицаПродукция.ИсточникОбеспечения <> НЕОПРЕДЕЛЕНО
	|	И РазмещениеЗаказовОстатки.ЗаказПокупателя ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("МоментКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.ПериодКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();

	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРазмещениеЗаказовРазборка()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ДАННЫХ

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗапасовПродукция.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовПродукция.Ссылка.Дата КАК Период,
	|	СборкаЗапасовПродукция.КлючСвязи КАК КлючСвязи,
	|	СборкаЗапасовПродукция.Ссылка КАК Ссылка,
	|	&Организация КАК Организация,
	|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовПродукция.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница = СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукцииНаСклад,
	|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции.ОрдерныйСклад КАК ОрдерныйСкладПродукции,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовПродукция.Ссылка.ЯчейкаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаПродукции,
	|	СборкаЗапасовПродукция.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	СборкаЗапасовПродукция.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчетаПродукции,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетДтПродукции,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКтПродукции,
	|	СборкаЗапасовПродукция.Ссылка.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК КоррЗаказПокупателя,
	|	СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СборкаЗапасовПродукция.Ссылка.ЗаказНаПроизводство
	|	КОНЕЦ КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовПродукция.Количество
	|		ИНАЧЕ СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	&ДатаОбновленияНаРелиз_1_2_1 КАК ДатаОбновленияНаРелиз_1_2_1
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК СценарийПланирования,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчета,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК КоррХарактеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК КоррПартия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	НЕОПРЕДЕЛЕНО КАК КоррСпецификация,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК Содержание,
	|	ТаблицаПродукция.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество,
	|	СУММА(ТаблицаПродукция.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаПродукция.ЗаказПокупателя,
	|	ТаблицаПродукция.ЗаказНаПроизводство,
	|	ТаблицаПродукция.КоррЗаказПокупателя,
	|	ТаблицаПродукция.СодержаниеПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка КАК Ячейка,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции КАК ЯчейкаПродукции,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Период < ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	НЕ ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И НЕ ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.ЗаказПокупателя,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.ЗаказНаПроизводство,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.Период < ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК КоррНомерСтроки,
	|	ТаблицаПродукция.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаПродукция.Характеристика КАК КоррХарактеристика,
	|	ТаблицаПродукция.Партия КАК КоррПартия,
	|	ТаблицаПродукция.Спецификация КАК КоррСпецификация,
	|	ТаблицаПродукция.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	ТаблицаПродукция.СчетДт КАК СчетДт,
	|	ТаблицаПродукция.СчетДтПродукции КАК СчетДтПродукции,
	|	ТаблицаПродукция.СчетКтПродукции КАК СчетКтПродукции,
	|	СУММА(ТаблицаПродукция.Количество) КАК КоррКоличество,
	|	ЛОЖЬ КАК Распределено
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаПродукция.СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции,
	|	ТаблицаПродукция.СчетДт,
	|	ТаблицаПродукция.СчетДтПродукции,
	|	ТаблицаПродукция.СчетКтПродукции
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоррНомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Приход) КАК Операция,
	|	ТаблицаСерийныеНомераПродукция.СерийныйНомер КАК СерийныйНомер,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ЯчейкаПродукции КАК Ячейка,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.СерийныеНомераПродукция КАК ТаблицаСерийныеНомераПродукция
	|		ПО ТаблицаПродукция.Ссылка = ТаблицаСерийныеНомераПродукция.Ссылка
	|			И ТаблицаПродукция.КлючСвязи = ТаблицаСерийныеНомераПродукция.КлючСвязи
	|ГДЕ
	|	ТаблицаСерийныеНомераПродукция.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|	И НЕ ТаблицаПродукция.ОрдерныйСкладПродукции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход),
	|	ТаблицаСерийныеНомера.СерийныйНомер,
	|	&Организация КАК Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.Ссылка.ЯчейкаЗапасов,
	|	1
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.СерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаЗапасы.Ссылка = ТаблицаСерийныеНомера.Ссылка
	|			И ТаблицаЗапасы.КлючСвязи = ТаблицаСерийныеНомера.КлючСвязи
	|ГДЕ
	|	ТаблицаСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам",  СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьТехоперации",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьТехоперации);
	
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("СборкаЗапасов", НСтр("ru = 'Сборка запасов'"));

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПродукция", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция.СкопироватьКолонки());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыНаПроизводство", МассивРезультатов[4].Выгрузить());
	
	// Автоперемещение продукции (дополним таблицу ТаблицаЗапасыНаСкладах).
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыНаСкладах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах[н];
		
		Если (СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции = СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
			И СтрокаТаблицаЗапасыНаСкладах.ЯчейкаПродукции <> СтрокаТаблицаЗапасыНаСкладах.Ячейка)
			ИЛИ СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции <> СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница Тогда
			
			// Расход.
			Если (СтрокаТаблицаЗапасыНаСкладах.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (СтрокаТаблицаЗапасыНаСкладах.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыНаСкладах);
				
				СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				
			КонецЕсли;
			
			// Приход.
			Если (СтрокаТаблицаЗапасыНаСкладах.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (СтрокаТаблицаЗапасыНаСкладах.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСкладПродукции
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыНаСкладах);
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции;
				СтрокаТаблицыПриход.Ячейка = СтрокаТаблицаЗапасыНаСкладах.ЯчейкаПродукции;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Автоперемещение продукции (сформируем таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКПоступлениюНаСклады", МассивРезультатов[5].Выгрузить());
	
	// Автоперемещение продукции (сформируем таблицу ТаблицаЗапасыКРасходуСоСкладов).
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", МассивРезультатов[6].Выгрузить());
	
	// Формирование структуры таблицы проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Сформируем таблицу по размещению заказов.
	СформироватьТаблицаРазмещениеЗаказовСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Сформируем таблицу распределения материалов.
	ТаблицаПродукция = МассивРезультатов[7].Выгрузить();
	СформироватьТаблицуРаспределенияМатериаловСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, ТаблицаПродукция);
	
	// Запасы.
	СуммаСборки = 0;
	ИнициализироватьДанныеПоЗапасамСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
	
	// Продукция.
	СформироватьТаблицаЗапасыПродукцияСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
	
	// Отходы.
	ИнициализироватьДанныеПоОтходам(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Серийные номера
	РезультатЗапроса8 = МассивРезультатов[8].Выгрузить();
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса8);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса8);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // ИнициализироватьДанныеДокументаСборка()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	СборкаЗапасовЗапасы.Ссылка.Дата КАК Период,
	|	СборкаЗапасовЗапасы.КлючСвязи КАК КлючСвязи,
	|	СборкаЗапасовЗапасы.Ссылка КАК Ссылка,
	|	&Организация КАК Организация,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовЗапасы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница = СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|		ИНАЧЕ СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПродукции,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукцииНаСклад,
	|	СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции.ОрдерныйСклад КАК ОрдерныйСкладПродукции,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА СборкаЗапасовЗапасы.Ссылка.ЯчейкаПродукции
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаПродукции,
	|	СборкаЗапасовЗапасы.Спецификация КАК Спецификация,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.СтруктурнаяЕдиницаПродукции.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ СборкаЗапасовЗапасы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчетаПродукции,
	|	СборкаЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СборкаЗапасовЗапасы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СборкаЗапасовЗапасы.НомерГТД КАК НомерГТД,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	СборкаЗапасовЗапасы.Ссылка.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК КоррЗаказПокупателя,
	|	СборкаЗапасовЗапасы.Ссылка.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовЗапасы.Ссылка.ЗаказНаПроизводство = ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ СборкаЗапасовЗапасы.Ссылка.ЗаказНаПроизводство
	|	КОНЕЦ КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СборкаЗапасовЗапасы.Количество
	|		ИНАЧЕ СборкаЗапасовЗапасы.Количество * СборкаЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	&ДатаОбновленияНаРелиз_1_2_1 КАК ДатаОбновленияНаРелиз_1_2_1
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	Документ.СборкаЗапасов.Запасы КАК СборкаЗапасовЗапасы
	|ГДЕ
	|	СборкаЗапасовЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК СценарийПланирования,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СчетУчета КАК СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции КАК СчетУчетаПродукции,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчета,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК КоррХарактеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК КоррПартия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	НЕОПРЕДЕЛЕНО КАК КоррСпецификация,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК Содержание,
	|	ТаблицаПродукция.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество,
	|	СУММА(ТаблицаПродукция.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.СчетУчета,
	|	ТаблицаПродукция.СчетУчетаПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаПродукция.ЗаказПокупателя,
	|	ТаблицаПродукция.ЗаказНаПроизводство,
	|	ТаблицаПродукция.КоррЗаказПокупателя,
	|	ТаблицаПродукция.СодержаниеПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад КАК СтруктурнаяЕдиницаПродукции,
	|	ТаблицаПродукция.Ячейка КАК Ячейка,
	|	ТаблицаПродукция.ЯчейкаПродукции КАК ЯчейкаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад КАК ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции КАК ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Период < ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	НЕ ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	&Организация,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И НЕ ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ЯчейкаПродукции,
	|	ТаблицаПродукция.Ячейка,
	|	ТаблицаПродукция.ОрдерныйСклад,
	|	ТаблицаПродукция.ОрдерныйСкладПродукции,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.Спецификация КАК Спецификация,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.ЗаказПокупателя,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	ТаблицаПродукция.Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.ЗаказНаПроизводство,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия,
	|	СУММА(ТаблицаПродукция.Количество)
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСкладПродукции
	|	И ТаблицаПродукция.Период < ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	СУММА(ТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.ОрдерныйСклад
	|	И ТаблицаПродукция.Период >= ТаблицаПродукция.ДатаОбновленияНаРелиз_1_2_1
	|	И ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад <> ТаблицаПродукция.СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Период,
	|	ТаблицаПродукция.СтруктурнаяЕдиница,
	|	ТаблицаПродукция.Организация,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(СборкаЗапасовПродукция.НомерСтроки) КАК НомерСтроки,
	|	СборкаЗапасовПродукция.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия.Статус
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ПустаяСсылка)
	|	КОНЕЦ КАК ПартияСтатус,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаЗапасов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаЗапасов,
	|	СборкаЗапасовПродукция.Спецификация КАК Спецификация,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СборкаЗапасовПродукция.Количество
	|			ИНАЧЕ СборкаЗапасовПродукция.Количество * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СборкаЗапасовПродукция.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СборкаЗапасовПродукция.Резерв
	|			ИНАЧЕ СборкаЗапасовПродукция.Резерв * СборкаЗапасовПродукция.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ) КАК Резерв,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКт,
	|	ЛОЖЬ КАК Распределено
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.СтранаПроисхождения,
	|	СборкаЗапасовПродукция.НомерГТД,
	|	СборкаЗапасовПродукция.Спецификация,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СборкаЗапасовПродукция.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА СборкаЗапасовПродукция.Партия.Статус
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиницаЗапасов.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|				ИЛИ СборкаЗапасовПродукция.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ СборкаЗапасовПродукция.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПродукция.Период КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Приход) КАК Операция,
	|	ТаблицаСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	&Организация КАК Организация,
	|	ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.Партия КАК Партия,
	|	ТаблицаПродукция.СтруктурнаяЕдиницаПродукцииНаСклад КАК СтруктурнаяЕдиница,
	|	ТаблицаПродукция.ЯчейкаПродукции КАК Ячейка,
	|	1 КАК Количество
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.СерийныеНомера КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаПродукция.Ссылка = ТаблицаСерийныеНомера.Ссылка
	|			И ТаблицаПродукция.КлючСвязи = ТаблицаСерийныеНомера.КлючСвязи
	|ГДЕ
	|	ТаблицаПродукция.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|	И НЕ ТаблицаПродукция.ОрдерныйСклад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасы.Ссылка.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход),
	|	ТаблицаСерийныеНомера.СерийныйНомер,
	|	&Организация,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Ссылка.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.Ссылка.ЯчейкаЗапасов,
	|	1
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК ТаблицаЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СборкаЗапасов.СерийныеНомераПродукция КАК ТаблицаСерийныеНомера
	|		ПО ТаблицаЗапасы.Ссылка = ТаблицаСерийныеНомера.Ссылка
	|			И ТаблицаЗапасы.КлючСвязи = ТаблицаСерийныеНомера.КлючСвязи
	|ГДЕ
	|	ТаблицаСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|Выбрать
	|	ТаблицаЗапасыНаСкладах.НомерСтроки КАК НомерСтроки
	|	,ТаблицаЗапасыНаСкладах.Ссылка.Дата КАК Период
	|	,ТаблицаЗапасыНаСкладах.ССылка.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,ТаблицаЗапасыНаСкладах.Количество КАК Количество
	|Поместить СписаниеПоНомерамГТД
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК ТаблицаЗапасыНаСкладах
	|Где
	|	ТаблицаЗапасыНаСкладах.Ссылка = &Ссылка
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяССылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяССылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаСборкаЗапасов);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам",  СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("ИспользоватьТехоперации",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьТехоперации);
	
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	// Временно: изменение движений по ордерному складу.
	ДатаОбновленияНаРелиз_1_2_1 = Константы.ДатаОбновленияНаРелиз_1_2_1.Получить();
	Запрос.УстановитьПараметр("ДатаОбновленияНаРелиз_1_2_1", ДатаОбновленияНаРелиз_1_2_1);
	
	Запрос.УстановитьПараметр("СборкаЗапасов", НСтр("ru = 'Сборка запасов'"));

	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПродукция", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПродукция.СкопироватьКолонки());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыНаПроизводство", МассивРезультатов[4].Выгрузить());
	
	СформироватьТаблицаЗапасыВРазрезеГТДРазборка(СтруктураДополнительныеСвойства);
	
	// Автоперемещение продукции (дополним таблицу ТаблицаЗапасыНаСкладах).
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыНаСкладах = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах[н];
		
		Если (СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции = СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
			И СтрокаТаблицаЗапасыНаСкладах.ЯчейкаПродукции <> СтрокаТаблицаЗапасыНаСкладах.Ячейка)
			ИЛИ СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции <> СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница Тогда
			
			// Расход.
			Если (СтрокаТаблицаЗапасыНаСкладах.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (СтрокаТаблицаЗапасыНаСкладах.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыНаСкладах);
				
				СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				
			КонецЕсли;
			
			// Приход.
			Если (СтрокаТаблицаЗапасыНаСкладах.Период < ДатаОбновленияНаРелиз_1_2_1)
				ИЛИ (СтрокаТаблицаЗапасыНаСкладах.Период >= ДатаОбновленияНаРелиз_1_2_1
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСкладПродукции
				И НЕ СтрокаТаблицаЗапасыНаСкладах.ОрдерныйСклад) Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыНаСкладах);
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаПродукции;
				СтрокаТаблицыПриход.Ячейка = СтрокаТаблицаЗапасыНаСкладах.ЯчейкаПродукции;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Автоперемещение продукции (сформируем таблицу ТаблицаЗапасыКПоступлениюНаСклады).
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКПоступлениюНаСклады", МассивРезультатов[5].Выгрузить());
	
	// Автоперемещение продукции (сформируем таблицу ТаблицаЗапасыКРасходуСоСкладов).
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", МассивРезультатов[6].Выгрузить());
	
	// Формирование проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Сформируем таблицу по размещению заказов.
	СформироватьТаблицаРазмещениеЗаказовРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Сформируем таблицу распределения материалов.
	ТаблицаПродукция = МассивРезультатов[7].Выгрузить();
	СформироватьТаблицуРаспределенияМатериаловРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, ТаблицаПродукция);
	
	// Запасы.
	СуммаСборки = 0;
	ИнициализироватьДанныеПоЗапасамРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
	
	// Продукция.
	СформироватьТаблицаЗапасыПродукцияРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства, СуммаСборки);
	
	// Отходы.
	ИнициализироватьДанныеПоОтходам(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства);
	
	// Серийные номера
	Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыНаСкладах.Количество()>0 Тогда
		РезультатЗапроса8 = МассивРезультатов[8].Выгрузить();
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса8);
		Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса8);
		Иначе
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
		КонецЕсли;
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРазборка()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства) Экспорт
	
	Если ДокументСсылкаСборкаЗапасов.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		
		ИнициализироватьДанныеДокументаСборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
		
	Иначе
		
		ИнициализироватьДанныеДокументаРазборка(ДокументСсылкаСборкаЗапасов, СтруктураДополнительныеСвойства)
		
	КонецЕсли;	
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

////////////////////////////////////////////////////////////////////////////////
// КОНТРОЛЬ ОСТАТКОВ

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаСборкаЗапасов, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗаказыНаПроизводствоИзменение", 
	// "ДвиженияРазмещениеЗаказовИзменение", "ДвиженияЗапасыИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗаказыНаПроизводствоИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРазмещениеЗаказовИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерийныеНомераИзменение
		Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыНаСкладахИзменение.Ячейка) КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, Номенклатура, Характеристика, Партия, Ячейка) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыНаСкладахИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыНаСкладахИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК Ячейка
		|					ИЗ
		|						ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение)) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиницаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.СчетУчета) КАК СчетУчетаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				&МоментКонтроля,
		|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|						ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчета,
		|						ДвиженияЗапасыИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателя
		|					ИЗ
		|						ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение)) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи) КАК ТипПриемаПередачиПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыПринятыеИзменение.Заказ) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	0 КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПринятые.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ТипПриемаПередачи, Номенклатура, Характеристика, Партия, Заказ) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыПринятыеИзменение.Организация КАК Организация,
		|						ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетПоПереработке) КАК ТипПриемаПередачи,
		|						ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыПринятыеИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыПринятыеИзменение.Партия КАК Партия,
		|						НЕОПРЕДЕЛЕНО КАК Заказ
		|					ИЗ
		|						ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение)) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыНаПроизводствоИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство) КАК ЗаказНаПроизводствоПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗаказыНаПроизводствоИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаказыНаПроизводствоОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыНаПроизводствоИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыНаПроизводство,
		|	ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыНаПроизводство
		|ИЗ
		|	ДвиженияЗаказыНаПроизводствоИзменение КАК ДвиженияЗаказыНаПроизводствоИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ЗаказНаПроизводство, Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗаказыНаПроизводствоИзменение.Организация КАК Организация,
		|						ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|						ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗаказыНаПроизводствоИзменение.Характеристика КАК Характеристика
		|					ИЗ
		|						ДвиженияЗаказыНаПроизводствоИзменение КАК ДвиженияЗаказыНаПроизводствоИзменение)) КАК ЗаказыНаПроизводствоОстатки
		|		ПО ДвиженияЗаказыНаПроизводствоИзменение.Организация = ЗаказыНаПроизводствоОстатки.Организация
		|			И ДвиженияЗаказыНаПроизводствоИзменение.ЗаказНаПроизводство = ЗаказыНаПроизводствоОстатки.ЗаказНаПроизводство
		|			И ДвиженияЗаказыНаПроизводствоИзменение.Номенклатура = ЗаказыНаПроизводствоОстатки.Номенклатура
		|			И ДвиженияЗаказыНаПроизводствоИзменение.Характеристика = ЗаказыНаПроизводствоОстатки.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРазмещениеЗаказовИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя) КАК ЗаказПокупателяПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения) КАК ИсточникОбеспеченияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РазмещениеЗаказовОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияРазмещениеЗаказовИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК ОстатокРазмещениеЗаказов,
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокРазмещениеЗаказов
		|ИЗ
		|	ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказов.Остатки(
		|				&МоментКонтроля,
		|				(Организация, ЗаказПокупателя, Номенклатура, Характеристика, ИсточникОбеспечения) В
		|					(ВЫБРАТЬ
		|						ДвиженияРазмещениеЗаказовИзменение.Организация КАК Организация,
		|						ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя КАК ЗаказПокупателя,
		|						ДвиженияРазмещениеЗаказовИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияРазмещениеЗаказовИзменение.Характеристика КАК Характеристика,
		|						ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения КАК ИсточникОбеспечения
		|					ИЗ
		|						ДвиженияРазмещениеЗаказовИзменение КАК ДвиженияРазмещениеЗаказовИзменение)) КАК РазмещениеЗаказовОстатки
		|		ПО ДвиженияРазмещениеЗаказовИзменение.Организация = РазмещениеЗаказовОстатки.Организация
		|			И ДвиженияРазмещениеЗаказовИзменение.ЗаказПокупателя = РазмещениеЗаказовОстатки.ЗаказПокупателя
		|			И ДвиженияРазмещениеЗаказовИзменение.Номенклатура = РазмещениеЗаказовОстатки.Номенклатура
		|			И ДвиженияРазмещениеЗаказовИзменение.Характеристика = РазмещениеЗаказовОстатки.Характеристика
		|			И ДвиженияРазмещениеЗаказовИзменение.ИсточникОбеспечения = РазмещениеЗаказовОстатки.ИсточникОбеспечения
		|ГДЕ
		|	ЕСТЬNULL(РазмещениеЗаказовОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияСерийныеНомераИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияСерийныеНомераИзменение.СерийныйНомер КАК СерийныйНомерПредставление,
		|	ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияСерийныеНомераИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияСерийныеНомераИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияСерийныеНомераИзменение.Ячейка КАК ЯчейкаПредставление,
		|	СерийныеНомераОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	СерийныеНомераОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияСерийныеНомераИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК ОстатокСерийныеНомера,
		|	ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокСерийныеНомера
		|ИЗ
		|	ДвиженияСерийныеНомераИзменение КАК ДвиженияСерийныеНомераИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(&МоментКонтроля, ) КАК СерийныеНомераОстатки
		|		ПО ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница = СерийныеНомераОстатки.СтруктурнаяЕдиница
		|			И ДвиженияСерийныеНомераИзменение.Номенклатура = СерийныеНомераОстатки.Номенклатура
		|			И ДвиженияСерийныеНомераИзменение.Характеристика = СерийныеНомераОстатки.Характеристика
		|			И ДвиженияСерийныеНомераИзменение.Партия = СерийныеНомераОстатки.Партия
		|			И ДвиженияСерийныеНомераИзменение.СерийныйНомер = СерийныеНомераОстатки.СерийныйНомер
		|			И ДвиженияСерийныеНомераИзменение.Ячейка = СерийныеНомераОстатки.Ячейка
		|			И (ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой()
			ИЛИ НЕ МассивРезультатов[5].Пустой()
			ИЛИ НЕ МассивРезультатов[6].Пустой()
			Тогда
			
			ДокументОбъектСборкаЗапасов = ДокументСсылкаСборкаЗапасов.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов принятых.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятые(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказам на производство.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаПроизводство(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по размещению запасов.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРазмещениеЗаказов(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по остаткам запасов в разрезе номеров ГТД.
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить()
			И НЕ МассивРезультатов[6].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД(ДокументОбъектСборкаЗапасов, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#Область ИнтерфейсПечати

Функция ОтветственноеЛицоСтруктурнойЕдиницы(Организация, СтруктурнаяЕдиница) Экспорт
	
	СтруктураДанные = Новый Структура("ЗаполнениеВыполнено, Сотрудник, Должность", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.Текст =
	"Выбрать 
	|	СпрСотрудники.Ссылка КАК Сотрудник
	|	,Выбор когда СпрСотрудники.ТипЗанятости = Значение(Перечисление.ТипыЗанятости.ОсновноеМестоРаботы) Тогда 0 Иначе 1 Конец Как ТипЗанятости
	|Поместить ВТСотрудники
	|Из Справочник.СтруктурныеЕдиницы КАК СпрСтруктурнаяЕдиница
	|	Левое соединение Справочник.Сотрудники КАК СпрСотрудники
	|	По СпрСтруктурнаяЕдиница.Ссылка = &СтруктурнаяЕдиница 
	|		И СпрСтруктурнаяЕдиница.МОЛ = СпрСотрудники.ФизЛицо
	|		И СпрСотрудники.ФизЛицо <> Значение(Справочник.ФизическиеЛица.ПустаяСсылка)
	|;
	|
	|Выбрать Первые 1
	|	ВТСотрудники.Сотрудник КАК Сотрудник
	|	,ВТСотрудники.ТипЗанятости КАК ТипЗанятости
	|	,РСОтветственныеЛица.Должность КАК Должность
	|Из ВТСотрудники КАК ВТСотрудники
	|	Левое соединение РегистрСведений.ОтветственныеЛица.СрезПоследних(,Организация = &Организация) КАК РСОтветственныеЛица
	|	по ВТСотрудники.Сотрудник = РСОтветственныеЛица.Сотрудник
	|Упорядочить по ВТСотрудники.ТипЗанятости";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтруктураДанные.ЗаполнениеВыполнено = Истина;
		СтруктураДанные.Сотрудник			= Выборка.Сотрудник;
		СтруктураДанные.Должность			= Выборка.Должность;
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

// Функция проверяет, проведен документ или нет, и вызывает процедуру печати документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СборкаЗапасов";
	
	ПервыйДокумент = Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ИмяМакета = "М11" Тогда
			
			Макет									= УправлениеПечатью.МакетПечатнойФормы("Документ.СборкаЗапасов.ПФ_MXL_М11");
			ТабличныйДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_СборкаЗапасов_СборкаЗапасов_М11";
			ЭтоСборкаЗапасов 						= (ТекущийДокумент.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка);
			СтруктураЗаполненияСекции				= Новый Структура;
			
			ТекстЗапроса =
			"
			|//::::: Шапка документа :::::
			|
			|ВЫБРАТЬ
			|	СборкаЗапасов.Дата КАК ДатаДокумента
			|	,СборкаЗапасов.Организация КАК Организация
			|	,СборкаЗапасов.Номер КАК Номер
			|	,СборкаЗапасов.Организация.Префикс КАК Префикс
			|	,СборкаЗапасов.СтруктурнаяЕдиницаЗапасов КАК Отправитель
			|	,СборкаЗапасов.СтруктурнаяЕдиница КАК Получатель
			|	,Выбор когда ОтпустилФИО.ФизЛицо ЕСТЬ NULL 
			|		Тогда СборкаЗапасов.Отпустил.Наименование
			|		Иначе ОтпустилФИО.Фамилия + "" "" + ПОДСТРОКА(ОтпустилФИО.Имя, 1, 1) + "". "" + ПОДСТРОКА(ОтпустилФИО.Отчество, 1, 1) + "".""
			|	Конец КАК ОтпустилФИО
			|	,СборкаЗапасов.ОтпустилДолжность КАК ОтпустилДолжность
			|	,Выбор когда ПолучилФИО.ФизЛицо ЕСТЬ NULL 
			|		Тогда СборкаЗапасов.Получил.Наименование
			|		Иначе ПолучилФИО.Фамилия + "" "" + ПОДСТРОКА(ПолучилФИО.Имя, 1, 1) + "". "" + ПОДСТРОКА(ПолучилФИО.Отчество, 1, 1) + "".""
			|	Конец КАК ПолучилФИО
			|	,СборкаЗапасов.ПолучилДолжность КАК ПолучилДолжность
			|ИЗ
			|	Документ.СборкаЗапасов КАК СборкаЗапасов
			|	Левое соединение РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ОтпустилФИО
			|		По СборкаЗапасов.Отпустил.ФизЛицо = ОтпустилФИО.ФизЛицо
			|	Левое соединение РегистрСведений.ФИОФизЛиц.СрезПоследних(, ) КАК ПолучилФИО
			|		По СборкаЗапасов.Получил.ФизЛицо = ПолучилФИО.ФизЛицо
			|ГДЕ
			|	СборкаЗапасов.Ссылка = &ТекущийДокумент
			|;
			|
			|//::::: Таблица документа :::::
			|
			|Выбрать
			|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
			|	,ТабличнаяЧасть.Номенклатура.НаименованиеПолное КАК Запас
			|	,ТабличнаяЧасть.Номенклатура.Артикул КАК Артикул
			|	,ТабличнаяЧасть.Номенклатура.СчетУчетаЗапасов.Код КАК Счет
			|	,ТабличнаяЧасть.Номенклатура.Код КАК НоменклатурныйНомер
			|	,ТабличнаяЧасть.Количество КАК Количество
			|	,ТабличнаяЧасть.Резерв КАК Резерв
			|	,ТабличнаяЧасть.Ссылка.ЗаказПокупателя КАК ЗаказПокупателя
			|	,ТабличнаяЧасть.Характеристика КАК Характеристика
			|	,ТабличнаяЧасть.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
			|	,ТабличнаяЧасть.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод
			|	,Выбор когда &ВалютаВидЦен = НациональнаяВалюта.Значение
			|		Тогда ЕСТЬNULL(УчетныеЦены.Цена, 0) / ЕСТЬNULL(УчетныеЦены.ЕдиницаИзмерения.Коэффициент, 1)
			|		Иначе (ЕСТЬNULL(УчетныеЦены.Цена, 0) * КурсыВалютыВидаЦен.Курс / КурсыВалютыВидаЦен.Кратность) / ЕСТЬNULL(УчетныеЦены.ЕдиницаИзмерения.Коэффициент, 1)
			|	Конец КАК Цена
			|	,Выбор когда &ВалютаВидЦен = НациональнаяВалюта.Значение
			|		Тогда ЕСТЬNULL(УчетныеЦены.Цена * ТабличнаяЧасть.Количество, 0) / ЕСТЬNULL(УчетныеЦены.ЕдиницаИзмерения.Коэффициент, 1)
			|		Иначе (ЕСТЬNULL(УчетныеЦены.Цена * ТабличнаяЧасть.Количество, 0) * КурсыВалютыВидаЦен.Курс / КурсыВалютыВидаЦен.Кратность) / ЕСТЬNULL(УчетныеЦены.ЕдиницаИзмерения.Коэффициент, 1)
			|	Конец КАК Сумма
			|ИЗ
			|	ИмяТабличнойЧасти КАК ТабличнаяЧасть
			|	Левое Соединение РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, ВидЦен = &ВидЦенПлановойОценки) КАК УчетныеЦены
			|	По ТабличнаяЧасть.Номенклатура = УчетныеЦены.Номенклатура
			|		И ТабличнаяЧасть.Характеристика = УчетныеЦены.Характеристика
			|	,РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаВидЦен) КАК КурсыВалютыВидаЦен
			|	,Константа.НациональнаяВалюта КАК НациональнаяВалюта
			|
			|ГДЕ
			|	ТабличнаяЧасть.Ссылка = &ТекущийДокумент
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТабличнаяЧасть.НомерСтроки";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТабличнойЧасти", СтрШаблон("Документ.СборкаЗапасов.%1", ?(ЭтоСборкаЗапасов, "Запасы", "Продукция")));
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ТекущийДокумент",		ТекущийДокумент);
			Запрос.УстановитьПараметр("ДатаДокумента",			ТекущийДокумент.Дата);
			Запрос.УстановитьПараметр("ВидЦенПлановойОценки",	ТекущийДокумент.ПлановаяОценка);
			Запрос.УстановитьПараметр("ВалютаВидЦен",			?(ЗначениеЗаполнено(ТекущийДокумент.ПлановаяОценка), ТекущийДокумент.ПлановаяОценка.ВалютаЦены, Константы.НациональнаяВалюта.Получить()));
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			Шапка = РезультатЗапроса[0].Выбрать();
			Шапка.Следующий();
			
			СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Шапка.ДатаДокумента, Шапка.Номер, Шапка.Префикс);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			
			Заголовок = НСтр("ru ='ТРЕБОВАНИЕ-НАКЛАДНАЯ № '") + НомерДокумента + НСтр("ru =' от '") + Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
			СтруктураЗаполненияСекции.Вставить("Заголовок", Заголовок);
			СтруктураЗаполненияСекции.Вставить("КодОКПО", СведенияОбОрганизации.КодПоОКПО);
			СтруктураЗаполненияСекции.Вставить("ПредставлениеОрганизации", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации));
			СтруктураЗаполненияСекции.Вставить("ДатаСоставления", Формат(Шапка.ДатаДокумента, "ДФ=dd.MM.yy"));
			
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			ВыборкаСтрокЗапасы = РезультатЗапроса[1].Выбрать();
			Пока ВыборкаСтрокЗапасы.Следующий() Цикл
				
				СтруктураЗаполненияСекции.Очистить();
				
				ОписаниеЗапаса = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
				СтруктураЗаполненияСекции.Вставить("Запас", ОписаниеЗапаса);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			
			СтруктураЗаполненияСекции.Очистить();
			СтруктураЗаполненияСекции.Вставить("ОтпустилДолжность",		Шапка.ОтпустилДолжность);
			СтруктураЗаполненияСекции.Вставить("ОтпустилРасшифровка",	Шапка.ОтпустилФИО);
			СтруктураЗаполненияСекции.Вставить("ПолучилДолжность",		Шапка.ПолучилДолжность);
			СтруктураЗаполненияСекции.Вставить("ПолучилРасшифровка",	Шапка.ПолучилФИО);
			
			ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		ИначеЕсли ИмяМакета = "МХ18" Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			
			Если ТекущийДокумент.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
			
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СборкаЗапасов.Дата КАК ДатаДокумента,
				|	СборкаЗапасов.Организация КАК Организация,
				|	СборкаЗапасов.Номер КАК Номер,
				|	СборкаЗапасов.Организация.Префикс КАК Префикс,
				|	СборкаЗапасов.СтруктурнаяЕдиница КАК Отправитель,
				|	СборкаЗапасов.СтруктурнаяЕдиницаПродукции КАК Получатель,
				|	СборкаЗапасов.Продукция.(
				|		НомерСтроки,
				|		Номенклатура.НаименованиеПолное КАК Запас,
				|		Номенклатура.Артикул КАК Артикул,
				|		Количество КАК КоличествоМест,
				|		Резерв КАК Резерв,
				|		Ссылка.ЗаказПокупателя КАК ЗаказПокупателя,
				|		Характеристика,
				|		ЕдиницаИзмерения.Наименование КАК ВидУпаковки,
				|		Номенклатура.СчетУчетаЗапасов.Код КАК Счет,
				|		Номенклатура.Код КАК ТоварКод,
				|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
				|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
				|		ВЫБОР
				|			КОГДА СборкаЗапасов.Продукция.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
				|				ТОГДА СборкаЗапасов.Продукция.ЕдиницаИзмерения.Коэффициент
				|			ИНАЧЕ 1
				|		КОНЕЦ КАК КоличествоВОдномМесте
				|	)
				|ИЗ
				|	Документ.СборкаЗапасов КАК СборкаЗапасов
				|ГДЕ
				|	СборкаЗапасов.Ссылка = &ТекущийДокумент";
				
				Шапка = Запрос.Выполнить().Выбрать();
				Шапка.Следующий();
				
				ВыборкаСтрокЗапасы = Шапка.Продукция.Выгрузить();
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СборкаЗапасов.Дата КАК ДатаДокумента,
				|	СборкаЗапасов.Организация КАК Организация,
				|	СборкаЗапасов.Номер КАК Номер,
				|	СборкаЗапасов.Организация.Префикс КАК Префикс,
				|	СборкаЗапасов.СтруктурнаяЕдиница КАК Отправитель,
				|	СборкаЗапасов.СтруктурнаяЕдиницаПродукции КАК Получатель,
				|	СборкаЗапасов.Запасы.(
				|		НомерСтроки,
				|		Номенклатура.НаименованиеПолное КАК Запас,
				|		Номенклатура.Артикул КАК Артикул,
				|		Количество КАК КоличествоМест,
				|		Резерв КАК Резерв,
				|		Ссылка.ЗаказПокупателя КАК ЗаказПокупателя,
				|		Характеристика,
				|		ЕдиницаИзмерения.Наименование КАК ВидУпаковки,
				|		Номенклатура.СчетУчетаЗапасов.Код КАК Счет,
				|		Номенклатура.Код КАК ТоварКод,
				|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНаименование,
				|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
				|		ВЫБОР
				|			КОГДА СборкаЗапасов.Запасы.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
				|				ТОГДА СборкаЗапасов.Запасы.ЕдиницаИзмерения.Коэффициент
				|			ИНАЧЕ 1
				|		КОНЕЦ КАК КоличествоВОдномМесте
				|	)
				|ИЗ
				|	Документ.СборкаЗапасов КАК СборкаЗапасов
				|ГДЕ
				|	СборкаЗапасов.Ссылка = &ТекущийДокумент";
				
				Шапка = Запрос.Выполнить().Выбрать();
				Шапка.Следующий();
				
				ВыборкаСтрокЗапасы = Шапка.Запасы.Выгрузить();
				
			КонецЕсли;
			
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СборкаЗапасов_МХ18";
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СборкаЗапасов.ПФ_MXL_МХ18");
			
			Если Шапка.ДатаДокумента < Дата('20110101') Тогда
				НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
			Иначе
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			КонецЕсли;
			
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
			ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации);
			ОбластьМакета.Параметры.НомерДокумента           = НомерДокумента;
			ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
			ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			СтрокНаСтранице = 23;
			СтрокШапки      = 10;
			СтрокПодвала    = 9;
			НомерСтраницы   = 1;
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			КоличествоСтрок = ВыборкаСтрокЗапасы.Количество();
			
			Если КоличествоСтрок = 1 Тогда
				ПереноситьПоследнююСтроку = 0;
			Иначе
				ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
				ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
				ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
			КонецЕсли;
			
			// инициализация итогов по странице
			ИтогКоличествоМестПоСтранице = 0;
			
			// инициализация итогов по документу
			ИтогоКоличество  = 0;
			
			Ном = 0;
			
			// Выводим многострочную часть докмента
			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			Для каждого СтрокаЗапасы Из ВыборкаСтрокЗапасы Цикл
			
				Ном = Ном + 1;
				//Начинаем новую страницу, если предыдущая строка была последней на странице
				//или пора переносить последнюю строку на последнюю страницу с подвалом.
				ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
				
				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
					ИЛИ ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
					
					ОбластьИтоговПоСтранице.Параметры.ИтогМестНаСтранице = ИтогКоличествоМестПоСтранице;
					
					ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
					
					// инициализация итогов по странице
					ИтогКоличествоМестПоСтранице = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(СтрокаЗапасы);
				КоличествоМест = СтрокаЗапасы.КоличествоМест;
				ОбластьМакета.Параметры.ТоварНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаЗапасы.Запас, СтрокаЗапасы.Характеристика, СтрокаЗапасы.Артикул);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// Обновим итоги по странице
				ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + КоличествоМест;
				
				// Обновим итогов по документу
				ИтогоКоличество  = ИтогоКоличество  + КоличествоМест;
				
			КонецЦикла;
			
			ОбластьИтоговПоСтранице.Параметры.ИтогМестНаСтранице = ИтогКоличествоМестПоСтранице;
			
			ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// Выводим итоги по документу в целом
			ОбластьМакета = Макет.ПолучитьОбласть("Всего");
			ОбластьМакета.Параметры.ИтогМест = ИтогоКоличество;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подвал документа
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Зададим параметры макета
			ТабличныйДокумент.ПолеСверху = 0;
			ТабличныйДокумент.ПолеСлева  = 0;
			ТабличныйДокумент.ПолеСнизу  = 0;
			ТабличныйДокумент.ПолеСправа = 0;
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		ИначеЕсли ИмяМакета = "БланкТоварногоНаполнения" Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			
			Если ТекущийДокумент.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СборкаЗапасов.Дата КАК ДатаДокумента,
				|	СборкаЗапасов.СтруктурнаяЕдиница КАК ПредставлениеСклада,
				|	СборкаЗапасов.Ячейка КАК ПредставлениеЯчейки,
				|	СборкаЗапасов.Номер КАК Номер,
				|	СборкаЗапасов.Организация.Префикс КАК Префикс,
				|	СборкаЗапасов.Запасы.(
				|		НомерСтроки КАК НомерСтроки,
				|		Номенклатура.Склад КАК Склад,
				|		Номенклатура.Ячейка КАК Ячейка,
				|		ВЫБОР
				|			КОГДА (ВЫРАЗИТЬ(СборкаЗапасов.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
				|				ТОГДА СборкаЗапасов.Запасы.Номенклатура.Наименование
				|			ИНАЧЕ СборкаЗапасов.Запасы.Номенклатура.НаименованиеПолное
				|		КОНЕЦ КАК Запас,
				|		Номенклатура.Артикул КАК Артикул,
				|		Номенклатура.Код КАК Код,
				|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
				|		Количество КАК Количество,
				|		Характеристика,
				|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
				|		КлючСвязи
				|	),
				|	СборкаЗапасов.СерийныеНомера.(
				|		СерийныйНомер,
				|		КлючСвязи
				|	)
				|ИЗ
				|	Документ.СборкаЗапасов КАК СборкаЗапасов
				|ГДЕ
				|	СборкаЗапасов.Ссылка = &ТекущийДокумент
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
				
				Шапка = Запрос.Выполнить().Выбрать();
				Шапка.Следующий();
				
				ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
				ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
				
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СборкаЗапасов.Дата КАК ДатаДокумента,
				|	СборкаЗапасов.СтруктурнаяЕдиница КАК ПредставлениеСклада,
				|	СборкаЗапасов.Ячейка КАК ПредставлениеЯчейки,
				|	СборкаЗапасов.Номер КАК Номер,
				|	СборкаЗапасов.Организация.Префикс КАК Префикс,
				|	СборкаЗапасов.Продукция.(
				|		НомерСтроки КАК НомерСтроки,
				|		Номенклатура.Склад КАК Склад,
				|		Номенклатура.Ячейка КАК Ячейка,
				|		ВЫБОР
				|			КОГДА (ВЫРАЗИТЬ(СборкаЗапасов.Продукция.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
				|				ТОГДА СборкаЗапасов.Продукция.Номенклатура.Наименование
				|			ИНАЧЕ СборкаЗапасов.Продукция.Номенклатура.НаименованиеПолное
				|		КОНЕЦ КАК Запас,
				|		Номенклатура.Артикул КАК Артикул,
				|		Номенклатура.Код КАК Код,
				|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
				|		Количество КАК Количество,
				|		Характеристика КАК Характеристика,
				|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
				|		КлючСвязи
				|	),
				|	СборкаЗапасов.СерийныеНомераПродукция.(
				|		СерийныйНомер,
				|		КлючСвязи
				|	)
				|ИЗ
				|	Документ.СборкаЗапасов КАК СборкаЗапасов
				|ГДЕ
				|	СборкаЗапасов.Ссылка = &ТекущийДокумент";
				
				Шапка = Запрос.Выполнить().Выбрать();
				Шапка.Следующий();
				
				ВыборкаСтрокЗапасы = Шапка.Продукция.Выбрать();
				ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомераПродукция.Выбрать();
				
			КонецЕсли;
			
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СборкаЗапасов_БланкТоварногоНаполнения";
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СборкаЗапасов.ПФ_MXL_БланкТоварногоНаполнения");
			
			Если Шапка.ДатаДокумента < Дата('20110101') Тогда
				НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
			Иначе
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ОбластьМакета.Параметры.ТекстЗаголовка = "Производство № "
													+ НомерДокумента
													+ " от "
													+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
													
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Склад");
			ОбластьМакета.Параметры.ПредставлениеСклада = Шапка.ПредставлениеСклада;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить() Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("Ячейка");
				ОбластьМакета.Параметры.ПредставлениеЯчейки = Шапка.ПредставлениеЯчейки;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
			ОбластьМакета.Параметры.ВремяПечати = "Дата и время печати: "
												 	+ ТекущаяДата()
													+ ". Пользователь: "
													+ Пользователи.ТекущийПользователь();
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
			Пока ВыборкаСтрокЗапасы.Следующий() Цикл

				Если НЕ ВыборкаСтрокЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
					Продолжить;
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				
				СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокЗапасы.КлючСвязи);
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
					ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул, СтрокаСерийныеНомера);
					
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("Итого");
			ТабличныйДокумент.Вывести(ОбластьМакета);	
			
		ИначеЕсли ИмяМакета = "ГарантийныйТалонПродукция" Тогда
			
			РаботаСНоменклатуройСервер.СформироватьГарантийныеТалоныПроизводство(ТабличныйДокумент, ТекущийДокумент, Ошибки, "Продукция");
			
		ИначеЕсли ИмяМакета = "ГарантийныйТалонКомплектующие" Тогда
			
			РаботаСНоменклатуройСервер.СформироватьГарантийныеТалоныПроизводство(ТабличныйДокумент, ТекущийДокумент, Ошибки, "Запасы");
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11", "М-11", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "М11"));
		
	КонецЕсли;
			
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МХ18") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МХ18", "МХ-18", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "МХ18"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения", "Бланк товарного наполнения", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "БланкТоварногоНаполнения"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалонПродукция") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалонПродукция", "Гарантийный талон (продукция)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ГарантийныйТалонПродукция"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалонКомплектующие") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалонКомплектующие", "Гарантийный талон (комплектующие)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ГарантийныйТалонКомплектующие"));
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М11,МХ18";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М11";
	КомандаПечати.Представление = НСтр("ru = 'М11 (Требование-накладная)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МХ18";
	КомандаПечати.Представление = НСтр("ru = 'МХ18 (Накладная на передачу готовой продукции)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалонПродукция";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон на продукцию'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьСерийныеНомера";
	КомандаПечати.Порядок = 8;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалонКомплектующие";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон на комплектующие'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьСерийныеНомера";
	КомандаПечати.Порядок = 8;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкТоварногоНаполнения";
	КомандаПечати.Представление = НСтр("ru = 'Бланк товарного наполнения'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументов";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 10;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли