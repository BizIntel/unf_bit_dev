&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
			Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
			
			ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			
			КонтекстЭДОСервер = КонтекстЭДОСервер();
			
			Если ЗначениеЗаполнено(ОргПоУмолчанию)
				И ?(КонтекстЭДОСервер = Неопределено, Истина, КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбмена().Найти(ОргПоУмолчанию) <> Неопределено)
				И ((ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям)
				ИЛИ (НЕ ЗначениеЗаполнено(Объект.Организация) И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию)))) Тогда
				Объект.Организация = ОргПоУмолчанию;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("Организация, РегистрацияВНалоговомОргане, ОКТМО, ПериодСобытия, СписокКБК");
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Параметры);
			ЗаполнитьДокументПоСтруктуре(СтруктураПараметров);

		КонецЕсли;
		
		Если Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности Тогда
			Объект.ДополнительныйПараметр = 1;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "Организация");
	
	ЗаполнитьНаименованиеКБК();
	
	Если Не Параметры.Ключ.Пустая() Тогда	
		ОбновитьЗаголовокФормы(ЭтаФорма);
	КонецЕсли;
	
	ЗаявлениеОтправлено = ЗаявлениеОтправлено(Объект.Ссылка);
	
	ТекущаяДатаНаСервере = ТекущаяДатаСеанса();
	ЗаполнитьСписокВыбораДатаОкончанияПериодаГод(ЭтаФорма, ТекущаяДатаНаСервере);
	
	РеквизитыОрганизации = РеквизитыОрганизацииНаСервере(Объект.Организация);
	Если Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате Тогда
		ПолучательПредставление = НСтр("ru = 'ФНС'") + ?(ЗначениеЗаполнено(Объект.Организация), " " + Строка(РеквизитыОрганизации.КодНалоговогоОргана), "");
		Если Параметры.Ключ.Пустая() Тогда
			Объект.ФорматОтвета = Перечисления.ФорматОтветаНаЗапросИОН.XML;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКТМО) Тогда
		ОКАТО = РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКТМО
	Иначе
		ОКАТО = РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКАТО;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьНаименованиеКБК();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьЗаголовокФормы(ЭтаФорма);
	
	Оповестить("Запись_ЗапросНаИнформационноеОбслуживаниеНалогоплательщика",, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьНаименованиеКБК();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидУслугиПриИзменении(Элемент)
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате") Тогда
		РеквизитыОрганизации = РеквизитыОрганизацииНаСервере(Объект.Организация);
		Объект.Получатель = Неопределено;
		ПолучательПредставление = НСтр("ru = 'ФНС'") + ?(ЗначениеЗаполнено(Объект.Организация), " " + Строка(РеквизитыОрганизации.КодНалоговогоОргана), "");
		Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.XML");
	КонецЕсли;
	
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности") Тогда
		Объект.ДополнительныйПараметр = 1;
	Иначе
		Объект.ДополнительныйПараметр = 0;
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	РеквизитыОрганизации = РеквизитыОрганизацииНаСервере(Объект.Организация);
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате") Тогда
		ПолучательПредставление = НСтр("ru = 'ФНС'") + ?(ЗначениеЗаполнено(Объект.Организация), " " + Строка(РеквизитыОрганизации.КодНалоговогоОргана), "");
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКТМО) Тогда
		ОКАТО = РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКТМО
	Иначе
		ОКАТО = РеквизитыОрганизации.РегистрацияВНалоговомОрганеКодПоОКАТО;
	КонецЕсли;
	Объект.Получатель = Неопределено;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Организация = Неопределено ИЛИ Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""От кого"" не заполнено'"));
		Возврат;
	КонецЕсли;
	
	ЗначенияДляОтбора = Новый Массив;
	Если Объект.Получатель <> Неопределено Тогда
		РеквизитыПолучателя = РеквизитыРегистрацииВНалоговомОрганеНаСервере(Объект.Получатель);
		ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", РеквизитыПолучателя.Код, РеквизитыПолучателя.КПП));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучательНачалоВыбораЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли Объект.Получатель = Неопределено ИЛИ НЕ ЗначениеЗаполнено(РеквизитыПолучателя.Код) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации"".'"));
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Объект.Получатель = РезультатВыбора.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияНаДатуПриИзменении(Элемент)
	
	Объект.ДатаНачалаПериода = НачалоГода(Объект.ДатаОкончанияПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	Объект.ДатаНачалаПериода = НачалоГода(Объект.ДатаОкончанияПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаГодПриИзменении(Элемент)
	
	Объект.ДатаНачалаПериода = НачалоГода(Объект.ДатаОкончанияПериода);
	Объект.ДатаОкончанияПериода = КонецГода(Объект.ДатаОкончанияПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗапрашиваемыеНалоги.ТекущиеДанные;
	НаименованиеКБК = НаименованиеКБК(ТекущиеДанные.КБК);
	
	Если ЗначениеЗаполнено(НаименованиеКБК) Тогда
		ТекущиеДанные.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)'"), ТекущиеДанные.КБК, НаименованиеКБК);
	Иначе
		ТекущиеДанные.Наименование = ТекущиеДанные.КБК;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКАТО) Тогда
		ТекущиеДанные.ОКАТО = СокрЛП(ОКАТО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗапрашиваемыеНалогиКБКНачалоВыбораПослеВыбораКонтекстаЗавершение", ЭтотОбъект);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		СтруктураПараметров = Новый Структура("ТекущийКБК", Элементы.ЗапрашиваемыеНалоги.ТекущиеДанные.КБК);
		Обработчик = Новый ОписаниеОповещения("ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаВыбораКБК", СтруктураПараметров, ЭтаФорма,,,, Обработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКНачалоВыбораПослеВыбораКонтекстаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	СтруктураПараметров = Новый Структура("ТекущийКБК", Элементы.ЗапрашиваемыеНалоги.ТекущиеДанные.КБК);
	
	Обработчик = Новый ОписаниеОповещения("ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаВыбораКБК", СтруктураПараметров, ЭтаФорма,,,, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено тогда
		ТекущиеДанные = Элементы.ЗапрашиваемыеНалоги.ТекущиеДанные;
		
		ТекущиеДанные.КБК = Результат.КБК;
		Если ЗначениеЗаполнено(Результат.Наименование) Тогда
			ТекущиеДанные.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2)'"), ТекущиеДанные.КБК, Результат.Наименование);
		Иначе
			ТекущиеДанные.Наименование = ТекущиеДанные.КБК;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКАТО) Тогда
			ТекущиеДанные.ОКАТО = СокрЛП(ОКАТО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиваемыеНалогиКБКАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	
		ДанныеВыбора = ПолучитьДанныеВыбораНаСервере(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		КонтекстЭДОКлиент.ВыгрузитьЗапросИОНВФайл(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	КонтекстЭДОКлиент.ВыгрузитьЗапросИОНВФайл(Объект.Ссылка, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЗавершение", ЭтотОбъект);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.ОтправкаЗапросаНаИнформационноеОбслуживание(Объект.Ссылка, Объект.Организация, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.ОтправкаЗапросаНаИнформационноеОбслуживание(Объект.Ссылка, Объект.Организация, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент.ПредупредитьЕслиСтатусОтправкиВКонверте(Объект.Ссылка, "запрос");
	ЗаявлениеОтправлено = ПослеОтправкиЗавершениеНаСервере();
	
	// Перерисовка статуса отправки в форме Отчетность
	ПараметрыОповещения = Новый Структура(); 
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	Оповестить("Завершение отправки", ПараметрыОповещения, Объект.Ссылка);
	
	Если Открыта() И ЗаявлениеОтправлено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораНаСервере(СтрокаПоиска)
	
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДО.ПолучитьДанныеВыбораКБК(СтрокаПоиска);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.ВидУслуги) Тогда 
		Заголовок = НСтр("ru = 'Запрос на сверку ""%1 (%2)""'");
	Иначе 
		Заголовок = НСтр("ru = 'Запрос на сверку'");
	КонецЕсли;
		
	Если Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов") Тогда
		ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 - %2'"), 
			Формат(Объект.ДатаНачалаПериода, "ДФ=dd.MM"), Формат(Объект.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"));
	ИначеЕсли Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом") Тогда
		ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), 
			Формат(Объект.ДатаОкончанияПериода, "ДФ='yyyy ''г''.'"));
	ИначеЕсли Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности") Тогда
		ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 - %2'"), 
			Формат(Объект.ДатаНачалаПериода, "ДФ=dd.MM.yyyy"), Формат(Объект.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"));
	ИначеЕсли Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом")
	ИЛИ Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате") Тогда
		ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), 
			Формат(Объект.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, 
		Форма.Объект.ВидУслуги,
		ПредставлениеПериода);
		
	Форма.Заголовок = Заголовок;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция РеквизитыОрганизацииНаСервере(Организация)
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КрупнейшийНалогоплательщик, КодНалоговогоОрганаПолучателя, РегистрацияВНалоговомОргане.КодПоОКАТО, РегистрацияВНалоговомОргане.КодПоОКТМО");
	Если Результат.КрупнейшийНалогоплательщик <> Ложь Тогда
		КодНалоговогоОргана = Результат.КодНалоговогоОрганаПолучателя;
	Иначе
		КодНалоговогоОргана = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
	КонецЕсли;
	Результат.Вставить("КодНалоговогоОргана", КодНалоговогоОргана);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыРегистрацииВНалоговомОрганеНаСервере(РегистрацияВНалоговомОргане)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Код, КПП");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрорисоватьСтатус(Форма)
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Форма.Объект.Ссылка, Форма.Объект.Организация, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовкиПанелиОтправки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.Получатель.Видимость = 
		Объект.ВидУслуги <> ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	
	Элементы.ПолучательПредставление.Видимость = 
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
	
	Элементы.ВидыОтчетов.Видимость = 
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности")
		И Не Форма.ЗаявлениеОтправлено;
		
	Элементы.ВидыОтчетовПредставление.Видимость = 
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности")
		И Форма.ЗаявлениеОтправлено;
		
	Элементы.ГруппировкаОпераций.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом")
		И Не Форма.ЗаявлениеОтправлено;
		
	Элементы.ГруппировкаОперацийПредставление.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом")
		И Форма.ЗаявлениеОтправлено;
		
	Элементы.ГруппаПериодВыборКонечнойДаты.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов");
		
	Элементы.ГруппаПериодВыборГода.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом");
		
	Элементы.ГруппаПериодНаДату.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом")
		ИЛИ Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате");
		
	Элементы.ГруппаПериод.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности");
		
	Элементы.ГруппаНалогиСборы.Видимость =
		Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов")
		ИЛИ Объект.ВидУслуги = ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом");
		
	Элементы.ФорматОтвета.Видимость = 
		Объект.ВидУслуги <> ПредопределенноеЗначение("Перечисление.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате")
		И Не Форма.ЗаявлениеОтправлено;

	Элементы.ФорматОтветаПредставление.Видимость = Форма.ЗаявлениеОтправлено;
		
	Элементы.Отправить.Видимость = Не Форма.ЗаявлениеОтправлено;
	Элементы.Записать.Видимость = Не Форма.ЗаявлениеОтправлено;
	
	Элементы.ЗапрашиваемыеНалоги.ТолькоПросмотр = Форма.ЗаявлениеОтправлено;
	
	Если Форма.ЗаявлениеОтправлено Тогда
		Элементы.ВидУслуги.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаОкончанияПериода.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Организация.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Получатель.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ЗапрашиваемыеНалоги.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Элементы.ДатаОкончанияПериодаГод.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаОкончанияПериодаГод.Формат = "ДФ=yyyy";
		Элементы.ДатаНачалаПериода2.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаОкончанияПериода2.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ДатаОкончанияНаДату.Вид = ВидПоляФормы.ПолеНадписи;
	КонецЕсли;
	
	Если Объект.ДополнительныйПараметр = 0 Тогда
		Форма.ГруппировкаОперацийПредставление = НСтр("ru = 'По дате'"); 
	ИначеЕсли Объект.ДополнительныйПараметр = 1 Тогда
		Форма.ГруппировкаОперацийПредставление = НСтр("ru = 'По виду платежа'");
	Иначе
		Форма.ГруппировкаОперацийПредставление = "";
	КонецЕсли;
	
	Если Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.RTF") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'rtf'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.XLS") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'xls'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.XML") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'xml'");
	ИначеЕсли Объект.ФорматОтвета = ПредопределенноеЗначение("Перечисление.ФорматОтветаНаЗапросИОН.PDF") Тогда
		Форма.ФорматОтветаПредставление = НСтр("ru = 'pdf'");
	Иначе
		Форма.ФорматОтветаПредставление = "";
	КонецЕсли;
	
	Если Объект.ДополнительныйПараметр = 0 Тогда
		Форма.ВидыОтчетовПредставление = "";
	Иначе
		Форма.ВидыОтчетовПредставление = Элементы.ВидыОтчетов.СписокВыбора[Объект.ДополнительныйПараметр - 1].Представление;
	КонецЕсли;
	
	ПрорисоватьСтатус(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеКБК()
	
	КБК = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьТаблицуКБК();
	
	Для Каждого СтрокаТаблицы Из Объект.ЗапрашиваемыеНалоги Цикл
		НайденнаяСтрока = КБК.Найти(СтрокаТаблицы.КБК, "КБК");
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.Наименование) Тогда
				СтрокаТаблицы.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (%2)'"), СтрокаТаблицы.КБК, НайденнаяСтрока.Наименование);
			Иначе
				СтрокаТаблицы.Наименование = СтрокаТаблицы.КБК;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Наименование = СтрокаТаблицы.КБК;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеКБК(ЗначениеКБК)
	
	Возврат Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.НаименованиеКБК(ЗначениеКБК);
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтекстЭДОСервер()
	
	Возврат ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаявлениеОтправлено(Ссылка)
	
	СтатусОтправки = КонтекстЭДОСервер().ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	ЗаявлениеОтправлено = 
		ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
		
	Возврат ЗаявлениеОтправлено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораДатаОкончанияПериодаГод(Форма, ТекущаяДатаНаСервере)
	
	Форма.Элементы.ДатаОкончанияПериодаГод.СписокВыбора.Очистить();
	
	ТекущийГод = КонецГода(ТекущаяДатаНаСервере);
	
	Индекс = 0;
	Пока Индекс < 4 Цикл
		Значение = ДобавитьМесяц(ТекущийГод, - Индекс * 12);
		Форма.Элементы.ДатаОкончанияПериодаГод.СписокВыбора.Вставить(0, Значение, Формат(Год(Значение), "ЧГ="));
		Индекс = Индекс + 1;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПечатнаяФормаСверки = ТабличныйДокументСверки(Объект.Ссылка);
	КонтекстЭДОКлиент.НапечататьДокумент(ПечатнаяФормаСверки, Строка(Объект.ВидУслуги));
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДокументПоСтруктуре(СтруктураПараметров)
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		Объект.Организация = СтруктураПараметров.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.РегистрацияВНалоговомОргане) Тогда
		Объект.Получатель = СтруктураПараметров.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ПериодСобытия) Тогда
		Объект.ДатаНачалаПериода    = НачалоГода(СтруктураПараметров.ПериодСобытия);
		Объект.ДатаОкончанияПериода = КонецДня(СтруктураПараметров.ПериодСобытия);
	КонецЕсли;
	
	ОКТМО = "";
	Если ЗначениеЗаполнено(СтруктураПараметров.ОКТМО) Тогда
		ОКТМО = СокрЛП(СтруктураПараметров.ОКТМО);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СписокКБК) Тогда
		Для каждого КБК Из СтруктураПараметров.СписокКБК Цикл
			НоваяСтрока = Объект.ЗапрашиваемыеНалоги.Добавить();
			НоваяСтрока.КБК   = КБК;
			НоваяСтрока.ОКАТО = ОКТМО;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументСверки(Сверка)
	
	Возврат Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПечатнаяФорма(Сверка);
	
КонецФункции

&НаСервере
Функция ПослеОтправкиЗавершениеНаСервере()
	
	ЗаявлениеОтправлено = ЗаявлениеОтправлено(Объект.Ссылка);
	УправлениеФормой(ЭтаФорма);
	
	Возврат ЗаявлениеОтправлено;
	
КонецФункции

#КонецОбласти