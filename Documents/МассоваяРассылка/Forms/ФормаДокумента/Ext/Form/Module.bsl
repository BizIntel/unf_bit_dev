
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Элементы.ПолучателиКонтакт.ОграничениеТипа	= Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа				= Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	
	ПровайдерSMS = Константы.ПровайдерSMS.Получить();
	НастройкиSMSВыполнены = ОтправкаSMS.НастройкаОтправкиSMSВыполнена();
	ДоступноПравоНастройкиSMS = Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.ПровайдерSMS.Видимость = ЗначениеЗаполнено(ЭтотОбъект.ПровайдерSMS);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗаполнитьНовоеПисьмоПоУмолчанию();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Картинки = Параметры.ЗначениеКопирования.КартинкиHTML.Получить();
			Если Картинки = Неопределено Тогда
				Картинки = Новый Структура;
			КонецЕсли;
			ФорматированныйДокумент.УстановитьHTML(Объект.СодержаниеHTML, Картинки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		
		Картинки = ТекущийОбъект.КартинкиHTML.Получить();
		Если Картинки = Неопределено Тогда
			Картинки = Новый Структура;
		КонецЕсли;
		ФорматированныйДокумент.УстановитьHTML(ТекущийОбъект.СодержаниеHTML, Картинки);
		
		Вложения.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка,
			|	МассоваяРассылкаПрисоединенныеФайлы.Наименование,
			|	МассоваяРассылкаПрисоединенныеФайлы.Расширение,
			|	МассоваяРассылкаПрисоединенныеФайлы.ИндексКартинки
			|ИЗ
			|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
			|ГДЕ
			|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
			|	И МассоваяРассылкаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ВладелецФайла", ТекущийОбъект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.Ссылка                    = Выборка.Ссылка;
			НоваяСтрока.Представление             = Выборка.Наименование + ?(ПустаяСтрока(Выборка.Расширение), "", "." + Выборка.Расширение);
			НоваяСтрока.ИндексКартинки            = Выборка.ИндексКартинки;
			НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка), УникальныйИдентификатор);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.СпособОтправки = Перечисления.ВидыКаналовСвязи.Email Тогда
		
		ТекстHTML = "";
		Картинки = Новый Структура;
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Картинки);
		
		ТекущийОбъект.СодержаниеHTML = ТекстHTML;
		ТекущийОбъект.КартинкиHTML = Новый ХранилищеЗначения(Картинки);
		ТекущийОбъект.Содержание = ФорматированныйДокумент.ПолучитьТекст();
		
	Иначе
		
		ПреобразоватьНомераПолучателей(ТекущийОбъект, Отказ);
		ТекущийОбъект.СодержаниеHTML = "";
		ТекущийОбъект.КартинкиHTML = Неопределено;
		Вложения.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьВложения(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособОтправкиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = ВыбранноеЗначение;
		ЗаполнитьСодержаниеСобытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Иначе
		ПараметрыФормы.Вставить("ТипКИ", "Телефон");
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыФормы.Вставить("ТекущийКонтрагент", Контакт);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		ПоказатьЗначение(,Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	// Выбор осуществлен механизмом автоподбора
		
		Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя));
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьРассылку(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьРассылкуВопросЗадан", ЭтотОбъект);
	ТекстВопроса = СтрШаблон(НСтр("ru='Рассылка будет выполнена для %1.
						|Продолжить?'"),
					СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
						Объект.Получатели.Количество(), НСтр("ru='получателя,получателей,получателей'")));
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru='Подтверждение рассылки'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ПараметрыВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеПоТеме(Команда)
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ЗаполнитьСодержаниеСобытия(Объект.Тема);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтактов(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Иначе
		ПараметрыФормы.Вставить("ТипКИ", "Телефон");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборКонтактовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезаполненные(Команда)
	
	УдаляемыеПолучатели = Новый Массив;
	
	Для Каждого СтрокаПолучатель Из Объект.Получатели Цикл
		Если ПустаяСтрока(СтрокаПолучатель.КакСвязаться) Тогда
			УдаляемыеПолучатели.Добавить(СтрокаПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйПолучатель Из УдаляемыеПолучатели Цикл
		Объект.Получатели.Удалить(УдаляемыйПолучатель);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыДоставки(Команда)
	
	ОбновитьСтатусыДоставкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрВремя(Команда)
	
	ВставитьПараметр("{Время}");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрДата(Команда)
	
	ВставитьПараметр("{Дата}");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяИменительныйПадеж(Команда)
	
	ВставитьПараметр("{Имя получателя (именительный)}");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяРодительныйПадеж(Команда)
	
	ВставитьПараметр("{Имя получателя (родительный)}");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяДательныйПадеж(Команда)
	
	ВставитьПараметр("{Имя получателя (дательный)}");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяВинительныйПадеж(Команда)
	
	ВставитьПараметр("{Имя получателя (винительный)}");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяТворительныйПадеж(Команда)
	
	ВставитьПараметр("{Имя получателя (творительный)}");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрИмяПолучателяПредложныйПадеж(Команда)
	
	ВставитьПараметр("{Имя получателя (предложный)}");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПреобразоватьНомераПолучателей(ТекущийОбъект, Отказ)
	
	ДопустимыеСимволы = "1234567890";
	Для Каждого Получатель Из ТекущийОбъект.Получатели Цикл
		Получатель.НомерДляОтправки = "";
		Для Позиция = 1 По СтрДлина(Получатель.КакСвязаться) Цикл
			Символ = Сред(Получатель.КакСвязаться,Позиция,1);
			Если Найти(ДопустимыеСимволы, Символ) > 0 Тогда
				Получатель.НомерДляОтправки = Получатель.НомерДляОтправки + Символ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ЭтоОтправкаEmail = Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email");
	
	Элементы.СтандартныеКомандыФорматированногоДокумента.Видимость	= ЭтоОтправкаEmail;
	Элементы.УчетнаяЗапись.Видимость								= ЭтоОтправкаEmail;
	Элементы.ПровайдерSMS.Видимость									= Не ЭтоОтправкаEmail;
	Элементы.ИмяОтправителяSMS.Видимость							= Не ЭтоОтправкаEmail;
	Элементы.ГруппаВложения.Видимость								= ЭтоОтправкаEmail;
	Элементы.ПолучателиОбновитьСтатусыДоставки.Видимость			= Не ЭтоОтправкаEmail;
	Элементы.ПолучателиСтатусДоставки.Видимость						= Не ЭтоОтправкаEmail;
	Элементы.ФорматированныйДокумент.Видимость						= ЭтоОтправкаEmail;
	Элементы.Содержание.Видимость									= Не ЭтоОтправкаEmail;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовоеПисьмоПоУмолчанию()
	
	Объект.Автор = Пользователи.АвторизованныйПользователь();
	Объект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор, "ОсновнойОтветственный");
	Объект.УчетнаяЗапись = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор, "ОсновнаяУчетнаяЗаписьЭлектроннойПочты");
	Объект.ИмяОтправителяSMS = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиSMS", "ИмяОтправителяSMS", "");
	
	ВключатьПодписьДляНовыхСообщений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "ВключатьПодписьДляНовыхСообщений", Ложь);
	Если ВключатьПодписьДляНовыхСообщений Тогда
		ПодписьHTML = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "ПодписьHTML", "");
		КартинкиПодписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "КартинкиПодписи", Новый Структура);
		ФорматированныйДокумент.УстановитьHTML(ПодписьHTML, КартинкиПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРассылкуВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не (ТипЗнч(РезультатВопроса) = Тип("Структура")
				И РезультатВопроса.Свойство("Значение")
				И РезультатВопроса.Значение = КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		
		Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
			УспешноОтправленных = ОтправитьРассылкуEmail();
		Иначе
			Если НастройкиSMSВыполнены Тогда
				УспешноОтправленных = ОтправитьРассылкуSMS();
			ИначеЕсли ДоступноПравоНастройкиSMS Тогда
				ТекстСообщения = НСтр("ru = 'Для отправки SMS требуется настройка параметров отправки.
					|Настройка осуществляется в Еще больше возможностей - Администрирование - Почта, SMS, напоминания - Настройка отправки SMS.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Возврат;
			Иначе
				ТекстСообщения = НСтр("ru = 'Для отправки SMS требуется настройка параметров отправки.
					|Для выполнения настроек обратитесь к администратору.'");
				ПоказатьПредупреждение(, ТекстСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Успешно отправлено: %1 сообщений'"), УспешноОтправленных);
		ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);
		Если УспешноОтправленных = Объект.Получатели.Количество() Тогда
			Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОтправкиРассылки.Отправлено");
			Объект.ДатаРассылки = ТекущаяДата();
			Записать();
			Закрыть(УспешноОтправленных);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьРассылкуEmail()
	
	УспешноОтправленных = 0;
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаПолучатели Из Объект.Получатели Цикл
		
		ТелоПисьма = "";
		ВложенияКартинки = Новый Структура;
		ФорматированныйДокумент.ПолучитьHTML(ТелоПисьма, ВложенияКартинки);
		
		УстановитьПараметрыСообщения(ТелоПисьма, СтрокаПолучатели.Контакт);
		ПараметрыПисьма = СформироватьПараметрыEmail(СтрокаПолучатели.Контакт, СтрокаПолучатели.КакСвязаться, ТелоПисьма, ВложенияКартинки);
		
		Попытка
			РезультатОтправки = ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение(ПараметрыПисьма, Объект.УчетнаяЗапись);
			ИдентификаторСобытия = РезультатОтправки.Идентификатор;
			ИдентификаторыСообщений = РезультатОтправки.ИдентификаторыСообщений;
			Успешно = Истина;
			УспешноОтправленных = УспешноОтправленных + 1;
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить E-mail получателю: %1, по причине: %2'"),
				СтрокаПолучатели.Контакт,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Получатели", СтрокаПолучатели.НомерСтроки, "Контакт"));
			Успешно = Ложь;
		КонецПопытки;
		
		Если Успешно И Объект.СоздаватьСобытия Тогда
			СоздатьСобытиеЭлектронноеПисьмо(СтрокаПолучатели, ТелоПисьма, ВложенияКартинки, РезультатОтправки);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат УспешноОтправленных;
	
КонецФункции

&НаСервере
Процедура СоздатьСобытиеЭлектронноеПисьмо(Знач СтрокаПолучатели, Знач ТелоПисьма, Знач ВложенияКартинки, Знач РезультатОтправки)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	ЗначенияЗаполнения.Вставить("НачалоСобытия", ЗначенияЗаполнения.Дата);
	ЗначенияЗаполнения.Вставить("ОкончаниеСобытия", ЗначенияЗаполнения.Дата);
	ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	ЗначенияЗаполнения.Вставить("СодержаниеHTML", ТелоПисьма);
	ЗначенияЗаполнения.Вставить("КартинкиHTML", Новый ХранилищеЗначения(ВложенияКартинки));
	ЗначенияЗаполнения.Вставить("Содержание", УправлениеНебольшойФирмойВзаимодействия.ПолучитьТекстИзHTML(ТелоПисьма));
	ЗначенияЗаполнения.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ЗначенияЗаполнения.Вставить("Состояние", Справочники.СостоянияСобытий.Завершено);
	ЗначенияЗаполнения.Вставить("Важность", Перечисления.ВариантыВажности.Обычная);
	ЗначенияЗаполнения.Вставить("Тема", Объект.Тема);
	ЗначенияЗаполнения.Вставить("Ответственный", Объект.Ответственный);
	ЗначенияЗаполнения.Вставить("Автор", Объект.Автор);
	
	Событие = Документы.Событие.СоздатьДокумент();
	Событие.Заполнить(ЗначенияЗаполнения);
	Событие.УстановитьНовыйНомер();
	
	СтрокаОснования = Событие.ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = Объект.Ссылка;
	
	СтрокаУчастники = Событие.Участники.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаУчастники, СтрокаПолучатели);
	
	Событие.ДополнительныеСвойства.Вставить("Идентификатор", РезультатОтправки.Идентификатор);
	Событие.ДополнительныеСвойства.Вставить("ИдентификаторыСообщений", РезультатОтправки.ИдентификаторыСообщений);
	
	Событие.Записать();
	
КонецПроцедуры

&НаСервере
Функция ОтправитьРассылкуSMS()
	
	УспешноОтправленных = 0;
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаПолучатели Из Объект.Получатели Цикл
		
		ТекстSMS = Объект.Содержание;
		УстановитьПараметрыСообщения(ТекстSMS, СтрокаПолучатели.Контакт);
		
		МассивНомеров     = Новый Массив;
		МассивНомеров.Добавить(СтрокаПолучатели.НомерДляОтправки);
		РезультатОтправки = ОтправкаSMS.ОтправитьSMS(МассивНомеров, ТекстSMS, Объект.ИмяОтправителяSMS);
		
		Для Каждого ОтправленноеСообщение Из РезультатОтправки.ОтправленныеСообщения Цикл
			Если Найти(ОтправленноеСообщение.НомерПолучателя, СтрокаПолучатели.НомерДляОтправки) > 0 Тогда
				СтрокаПолучатели.ИдентификаторСообщения = ОтправленноеСообщение.ИдентификаторСообщения;
				СтрокаПолучатели.СтатусДоставки         = Перечисления.СостоянияСообщенияSMS.Исходящее;
			КонецЕсли;
		КонецЦикла;
	
		Если ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда
			Успешно = Истина;
			УспешноОтправленных = УспешноОтправленных + 1;
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось отправить SMS получателю: %1, по причине: %2'"),
				СтрокаПолучатели.Контакт,
				РезультатОтправки.ОписаниеОшибки,
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Получатели", СтрокаПолучатели.НомерСтроки, "Контакт"));
			Успешно = Ложь;
		КонецЕсли;
		
		Если Успешно И Объект.СоздаватьСобытия Тогда
			СоздатьСобытиеСообщениеSMS(СтрокаПолучатели, ТекстSMS);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат УспешноОтправленных;
	
КонецФункции

&НаСервере
Процедура СоздатьСобытиеСообщениеSMS(Знач СтрокаПолучатели, Знач ТекстSMS)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	ЗначенияЗаполнения.Вставить("НачалоСобытия", ЗначенияЗаполнения.Дата);
	ЗначенияЗаполнения.Вставить("ОкончаниеСобытия", ЗначенияЗаполнения.Дата);
	ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.СообщениеSMS);
	ЗначенияЗаполнения.Вставить("Содержание", ТекстSMS);
	ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Состояние", Справочники.СостоянияСобытий.Завершено);
	ЗначенияЗаполнения.Вставить("Тема", Объект.Тема);
	ЗначенияЗаполнения.Вставить("Ответственный", Объект.Ответственный);
	ЗначенияЗаполнения.Вставить("Автор", Объект.Автор);
	
	Событие = Документы.Событие.СоздатьДокумент();
	Событие.Заполнить(ЗначенияЗаполнения);
	
	Событие.УстановитьНовыйНомер();
	
	СтрокаУчастники = Событие.Участники.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаУчастники, СтрокаПолучатели);
	
	Событие.Записать();
	
КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыEmail(Контакт, АдресПолучателя, ТелоПисьма, ВложенияКартинки)
	
	ПараметрыПисьма = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.УчетнаяЗапись);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		ПараметрыПисьма.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресПолучателя) Тогда
		ПараметрыПисьма.Вставить("Кому", АдресПолучателя);
	КонецЕсли;
	
	АдресПолучателяСкрытойКопии = УправлениеНебольшойФирмойВзаимодействия.ПолучитьАдресПолучателяСкрытойКопии();
	Если ЗначениеЗаполнено(АдресПолучателяСкрытойКопии) Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", АдресПолучателяСкрытойКопии);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыПисьма.Вставить("Тема", Строка(Объект.Тема));
	КонецЕсли;
	
	ВложенияПисьма = Новый Соответствие;
	
	Если ВложенияКартинки.Количество() > 0 Тогда
		УправлениеНебольшойФирмойВзаимодействия.ДобавитьВложенияКартинкиВПисьмо(ТелоПисьма, ВложенияПисьма, ВложенияКартинки);
	КонецЕсли;
	
	ДобавитьВложенияФайлы(ВложенияПисьма);
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	ПараметрыПисьма.Вставить("Вложения", ВложенияПисьма);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Процедура ДобавитьВложенияФайлы(ВложенияПисьма)
	
	Для Каждого Вложение Из Вложения Цикл
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
		ОписаниеВложения.Идентификатор = "";
		ВложенияПисьма.Вставить(Вложение.Представление, ОписаниеВложения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыСообщения(Содержание, Контакт)
	
	ДоступныеПараметры = Новый Массив;
	ДоступныеПараметры.Добавить("{Время}");
	ДоступныеПараметры.Добавить("{Дата}");
	ДоступныеПараметры.Добавить("{Имя получателя (именительный)}");
	ДоступныеПараметры.Добавить("{Имя получателя (родительный)}");
	ДоступныеПараметры.Добавить("{Имя получателя (дательный)}");
	ДоступныеПараметры.Добавить("{Имя получателя (винительный)}");
	ДоступныеПараметры.Добавить("{Имя получателя (творительный)}");
	ДоступныеПараметры.Добавить("{Имя получателя (предложный)}");
	
	Для Каждого Параметр Из ДоступныеПараметры Цикл
		Если Найти(Содержание, Параметр) = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеПараметра = ПолучитьЗначениеПараметра(Параметр, Контакт);
		Содержание = СтрЗаменить(Содержание, Параметр, ЗначениеПараметра);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПараметра(Параметр, Контакт)
	
	ЗначениеПараметра = "";
	
	Если Параметр = "{Время}" Тогда
		
		ЗначениеПараметра = Формат(ТекущаяДатаСеанса(), "ДФ=чч:мм");
		
	ИначеЕсли Параметр = "{Дата}" Тогда
		
		ЗначениеПараметра = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
		
	ИначеЕсли Лев(Параметр, 15) = "{Имя получателя" Тогда
		
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ИмяКонтакта = Контакт.НаименованиеПолное;
		ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ИмяКонтакта = Контакт.Наименование;
		Иначе
			ИмяКонтакта = Контакт;
		КонецЕсли;
		
		ИмяПадежа = Сред(Параметр, 18);
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИмяПадежа, 2);
		Если ИмяПадежа = "именительный" Тогда
			Падеж = 1;
		ИначеЕсли ИмяПадежа = "родительный" Тогда
			Падеж = 2;
		ИначеЕсли ИмяПадежа = "дательный" Тогда
			Падеж = 3;
		ИначеЕсли ИмяПадежа = "винительный" Тогда
			Падеж = 4;
		ИначеЕсли ИмяПадежа = "творительный" Тогда
			Падеж = 5;
		ИначеЕсли ИмяПадежа = "предложный" Тогда
			Падеж = 6;
		КонецЕсли;
		
		Если Падеж = Неопределено Тогда
			ЗначениеПараметра = ИмяКонтакта;
		Иначе
			ЗначениеПараметра = СклонениеПредставленийОбъектов.ПросклонятьФИО(ИмяКонтакта, Падеж);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

&НаКлиенте
Процедура ВставитьПараметр(ИмяПараметра)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		
		ЗакладкаНачала = 0;
		ЗакладкаОкончания = 0;
		Элементы.ФорматированныйДокумент.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
		
		Попытка
			
			ПозицияНачала = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
			ПозицияОкончания = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаОкончания);
			
			Если ЗакладкаНачала <> ЗакладкаОкончания Тогда 
				ФорматированныйДокумент.Удалить(ЗакладкаНачала, ЗакладкаОкончания);
				Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаНачала);
			КонецЕсли;
			Если ПозицияНачала = 0 Тогда
				ФорматированныйДокумент.Добавить(ИмяПараметра);
			Иначе
				ФорматированныйДокумент.Вставить(ЗакладкаНачала, ИмяПараметра);
			КонецЕсли;
			
			ПозицияОкончания = ПозицияНачала + СтрДлина(ИмяПараметра);
			ЗакладкаОкончания = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ПозицияОкончания);
			Элементы.ФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаОкончания);
			
		Исключение
		КонецПопытки;
		
	Иначе
		
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		Элементы.Содержание.ПолучитьГраницыВыделения(НачалоСтроки,НачалоКолонки,КонецСтроки,КонецКолонки);
		
		Объект.Содержание = Лев(Объект.Содержание, НачалоКолонки - 1) + ИмяПараметра + Сред(Объект.Содержание, НачалоКолонки);
		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

// Функция возвращает вложения в виде массива структур для отправки письма.
//
&НаКлиенте
Функция Вложения(ВложенияРисунки = Неопределено)
	
	Результат = Новый Массив;
	
	Для Каждого Вложение Из Вложения Цикл
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("Представление", Вложение.Представление);
		ОписаниеВложения.Вставить("АдресВоВременномХранилище", Вложение.АдресВоВременномХранилище);
		ОписаниеВложения.Вставить("Кодировка", "");
		Результат.Добавить(ОписаниеВложения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура интерактивного добавления вложений.
//
&НаКлиенте
Процедура ДобавлениеФайлаКВложениям()
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Режим", РежимДиалогаВыбораФайла.Открытие);
	ПараметрыДиалога.Вставить("МножественныйВыбор", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлВоВложенияПриПомещенииФайлов", ЭтотОбъект);
	
	СтандартныеПодсистемыКлиент.ПоказатьПомещениеФайла(ОписаниеОповещения, УникальныйИдентификатор, "", ПараметрыДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВоВложенияПриПомещенииФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура добавляет файлы во вложения.
//
// Параметры:
//  ПомещенныеФайлы	 - Массив	 - Массив объектов типа ОписаниеПереданногоФайла 
&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		
		Файл = Новый Файл(ОписаниеФайла.Имя);
		ПозицияТочки = Найти(Файл.Расширение, ".");
		РасширениеБезТочки = Сред(Файл.Расширение, ПозицияТочки + 1);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), УникальныйИдентификатор);
		Вложение.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыДоставкиНаСервере()
	
	Для Каждого Получатель Из Объект.Получатели Цикл
		
		СтатусДоставки = ОтправкаSMS.СтатусДоставки(Получатель.ИдентификаторСообщения);
		Получатель.СтатусДоставки = УправлениеНебольшойФирмойВзаимодействия.СопоставитьСтатусДоставкиSMS(СтатусДоставки);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура в зависимости от типа клиента открывает или сохраняет выбранный файл
//
&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	
	#Если ВебКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		// передан адрес двоичных данных во временном хранилище
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение табличного документа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСодержаниеТемы(ТемаСобытия)
	
	Возврат ТемаСобытия.Содержание;
	
КонецФункции // ПолучитьСодержаниеТемы()

&НаКлиенте
Процедура ПодборКонтактовЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
	
	ТаблицаАдресатов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ОбработкаТекущейСтроки = Элементы.Получатели.ТекущаяСтрока <> Неопределено;
	
	Для Каждого ПодобраннаяСтрока Из ТаблицаАдресатов Цикл
		
		Если ОбработкаТекущейСтроки Тогда
			СтрокаПолучатели = Объект.Получатели.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
			ОбработкаТекущейСтроки = Ложь;
		Иначе
			СтрокаПолучатели = Объект.Получатели.Добавить();
		КонецЕсли;
		
		СтрокаПолучатели.Контакт = ПодобраннаяСтрока.Контакт;
		СтрокаПолучатели.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВложения(МассоваяРассылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Вложения.Ссылка КАК Ссылка,
		|	Вложения.АдресВоВременномХранилище,
		|	Вложения.Представление
		|ПОМЕСТИТЬ втВложения
		|ИЗ
		|	&Вложения КАК Вложения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МассоваяРассылкаПрисоединенныеФайлы.Ссылка
		|ПОМЕСТИТЬ втПрисоединенныеФайлы
		|ИЗ
		|	Справочник.МассоваяРассылкаПрисоединенныеФайлы КАК МассоваяРассылкаПрисоединенныеФайлы
		|ГДЕ
		|	МассоваяРассылкаПрисоединенныеФайлы.ВладелецФайла = &МассоваяРассылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВложения.Ссылка КАК ВложениеСсылка,
		|	втПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайлСсылка,
		|	втВложения.АдресВоВременномХранилище,
		|	втВложения.Представление
		|ИЗ
		|	втВложения КАК втВложения
		|		ПОЛНОЕ СОЕДИНЕНИЕ втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
		|		ПО втВложения.Ссылка = втПрисоединенныеФайлы.Ссылка";
	
	Запрос.УстановитьПараметр("Вложения", Вложения.Выгрузить());
	Запрос.УстановитьПараметр("МассоваяРассылка", МассоваяРассылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПрисоединенныйФайлСсылка = NULL Тогда
		// Добавить вложение в присоединенные файлы
			
			Если Не ПустаяСтрока(Выборка.АдресВоВременномХранилище) Тогда
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					ИмяБезРасширения = Лев(Выборка.Представление, СтрДлина(Выборка.Представление) - (СтрДлина(РасширениеБезТочки)+1));
				Иначе
					РасширениеБезТочки = "";
					ИмяБезРасширения = Выборка.Представление;
				КонецЕсли;
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", МассоваяРассылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
				
				Вложения.НайтиСтроки(Новый Структура("Представление, АдресВоВременномХранилище", Выборка.Представление, Выборка.АдресВоВременномХранилище))[0].Ссылка =
					ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, Выборка.АдресВоВременномХранилище);
				
			КонецЕсли;
			
		ИначеЕсли Выборка.ВложениеСсылка = NULL Тогда
		// Удалить вложение из присоединенных файлов
			
			ПрисоединенныйФайлОбъект = Выборка.ПрисоединенныйФайлСсылка.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
			
		Иначе
		// Обновить вложение в присоединенных файлах
			
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Выборка.ПрисоединенныйФайлСсылка, 
				Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста", Выборка.АдресВоВременномХранилище, ""));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВторичныхДанных

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытия(ТемаСобытия)
	
	Если ТипЗнч(ТемаСобытия) <> Тип("СправочникСсылка.ТемыСобытий") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоEmail = Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email");
	Если (ЭтоEmail И НЕ ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст())) Или (НЕ ЭтоEmail И НЕ ПустаяСтрока(Объект.Содержание)) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСодержаниеСобытияЗавершение", ЭтотОбъект, Новый Структура("ТемаСобытия", ТемаСобытия)),
			НСтр("ru = 'Перезаполнить содержание по выбранной теме?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ДополнительныеПараметры.ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияФрагмент(Знач ТемаСобытия)
	
	Если Объект.СпособОтправки = ПредопределенноеЗначение("Перечисление.ВидыКаналовСвязи.Email") Тогда
		УстановитьСодержаниеHTMLпоТемеСобытия(ФорматированныйДокумент, ТемаСобытия);
	Иначе
		Объект.Содержание = ПолучитьСодержаниеТемы(ТемаСобытия);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УстановитьСодержаниеHTMLпоТемеСобытия(ФорматированныйДокумент, ТемаСобытия)
	
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТемаСобытия.Содержание));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(знач СтрокаПоиска)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (тема события)"));
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаКлиенте
Процедура ПолучателиКонтактВыборЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска)
	
	ДанныеВыбораКонтактов = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтрагентов = Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтрагентов Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (контрагент)"));
	КонецЦикла;
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныхЛиц Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (контактное лицо)"));
	КонецЦикла;
	
	Возврат ДанныеВыбораКонтактов;
	
КонецФункции

#КонецОбласти
