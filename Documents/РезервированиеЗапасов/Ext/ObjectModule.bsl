#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения документа на основании структуры
//
// Параметры:
//  ДанныеЗаполнения - Структура.
//
Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения) Экспорт
	
	Если ДанныеЗаполнения.Свойство("ДокументЗаполнения") Тогда
	
		Если ТипЗнч(ДанныеЗаполнения.ДокументЗаполнения) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеЗаполнения.СнятьРезерв Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьПоЗаказПокупателяИсходноеМесто(ДанныеЗаполнения.ДокументЗаполнения);
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик заполнения на основании документа ЗаказПокупателя.
//
// Параметры:
//	ДокументСсылкаЗаказПокупателя = ДокументСсылка.ЗаказПокупателя.
//	
Процедура ЗаполнитьПоЗаказПокупателяНовоеМесто(ДокументСсылкаЗаказПокупателя) Экспорт
	
	// Заполнение шапки.
	ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылкаЗаказПокупателя, Новый Структура("Организация, ВидОперации, СостояниеЗаказа, Проведен"));
	
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДокументСсылкаЗаказПокупателя, ЗначенияРеквизитов);
	Организация = ЗначенияРеквизитов.Организация;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		-ЗапасыОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазмещениеОстатки.Номенклатура,
	|		РазмещениеОстатки.Характеристика,
	|		-РазмещениеОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК РазмещениеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя = &ДокументОснование
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|		ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|	ГДЕ
	|		ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|		И ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя = &ДокументОснование) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0";
	
	Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Запрос.Текст = Запрос.Текст + "; " +
		"ВЫБРАТЬ
		|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыОстатки.Характеристика КАК Характеристика,
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|		ЗаказыОстатки.Характеристика КАК Характеристика,
		|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.ПотребностьВЗапасах.Остатки(
		|				,
		|				ЗаказПокупателя = &ДокументОснование
		|					И ТипДвижения = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка)) КАК ЗаказыОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗапасыОстатки.Номенклатура,
		|		ЗапасыОстатки.Характеристика,
		|		-ЗапасыОстатки.КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.Запасы.Остатки(
		|				,
		|				ЗаказПокупателя = &ДокументОснование
		|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗапасыОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РазмещениеОстатки.Номенклатура,
		|		РазмещениеОстатки.Характеристика,
		|		-РазмещениеОстатки.КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.РазмещениеЗаказов.Остатки(
		|				,
		|				ЗаказПокупателя = &ДокументОснование
		|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК РазмещениеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаЗапасы.Номенклатура,
		|		ДвиженияДокументаЗапасы.Характеристика,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
		|	ГДЕ
		|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
		|		И ДвиженияДокументаЗапасы.ЗаказПокупателя = &ДокументОснование
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
		|		ДвиженияДокументаРазмещениеЗаказов.Характеристика,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
		|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
		|	ГДЕ
		|		ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
		|		И ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя = &ДокументОснование) КАК ЗаказыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.Номенклатура,
		|	ЗаказыОстатки.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "; " +
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Запасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА 1
	|			ИНАЧЕ ЗаказПокупателя.Запасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|		Количество КАК Количество,
	|		СтруктурнаяЕдиницаРезерв КАК НовоеМестоРезерва
	|	),
	|	ЗаказПокупателя.Материалы.(
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Материалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА 1
	|			ИНАЧЕ ЗаказПокупателя.Материалы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|		Количество КАК Количество,
	|		СтруктурнаяЕдиницаРезерв КАК НовоеМестоРезерва
	|	)
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	Запасы.Очистить();
	Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Выборка = МассивРезультатов[2].Выбрать();
		Выборка.Следующий();
		Если ТаблицаОстатков.Количество() > 0 Тогда
			ЗаполнитьЗапасыПоЗаказПокупателяНовоеМесто(Выборка, ТаблицаОстатков, "Запасы");
		КонецЕсли;
		
		ТаблицаОстатков = МассивРезультатов[1].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
		Если ТаблицаОстатков.Количество() > 0 Тогда
			ЗаполнитьЗапасыПоЗаказПокупателяНовоеМесто(Выборка, ТаблицаОстатков, "Материалы");
		КонецЕсли;
		
	Иначе
		
		Выборка = МассивРезультатов[1].Выбрать();
		Выборка.Следующий();
		Если ТаблицаОстатков.Количество() > 0 Тогда
			ЗаполнитьЗапасыПоЗаказПокупателяНовоеМесто(Выборка, ТаблицаОстатков, "Запасы");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателяНовоеМесто()

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ПриходнаяНакладная - приходная накладная
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказПокупателяИсходноеМесто(ДанныеЗаполнения)
	
	// Заполнение шапки.
	ЗаказПокупателя = ДанныеЗаполнения;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, Новый Структура("Организация, СостояниеЗаказа, Проведен"));
	
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДанныеЗаполнения, ЗначенияРеквизитов);
	Организация = ЗначенияРеквизитов.Организация;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыОстатки.ИсходноеМесто КАК ИсходноеМестоРезерва,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	ЗаказыОстатки.Партия КАК Партия,
	|	ЗаказыОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК ИсходноеМесто,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазмещениеОстатки.ИсточникОбеспечения,
	|		РазмещениеОстатки.Номенклатура,
	|		РазмещениеОстатки.Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
	|		РазмещениеОстатки.Номенклатура.ЕдиницаИзмерения,
	|		РазмещениеОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК РазмещениеОстатки) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ИсходноеМесто,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика,
	|	ЗаказыОстатки.Партия,
	|	ЗаказыОстатки.ЕдиницаИзмерения
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.ВидОперации КАК ВидОперации,
	|	ЗаказПокупателя.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Запасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА 1
	|			ИНАЧЕ ЗаказПокупателя.Запасы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК Коэффициент
	|	),
	|	ЗаказПокупателя.Материалы.(
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателя.Материалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА 1
	|			ИНАЧЕ ЗаказПокупателя.Материалы.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ КАК Коэффициент
	|	)
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	Запасы.Очистить();
	Выборка = МассивРезультатов[1].Выбрать();
	Выборка.Следующий();
	Если ТаблицаОстатков.Количество() > 0 Тогда
		ЗаполнитьЗапасыПоЗаказПокупателяИсходноеМесто(Выборка, ТаблицаОстатков, "Запасы");
		Если Выборка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ЗаполнитьЗапасыПоЗаказПокупателяИсходноеМесто(Выборка, ТаблицаОстатков, "Материалы");
		КонецЕсли;
		Для каждого СтрокаОстатков Из ТаблицаОстатков Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
			НоваяСтрока.ЕдиницаИзмерения = СтрокаОстатков.ЕдиницаИзмерения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателяИсходноеМесто()

// Процедура заполнения строку табличной части Запасы на основании заказа покупателя.
//
Процедура ЗаполнитьЗапасыПоЗаказПокупателяНовоеМесто(Выборка, ТаблицаОстатков, ИмяТабличнойЧасти)
	
	Для каждого СтрокаТЧ Из Выборка[ИмяТабличнойЧасти].Выгрузить() Цикл
		
		Если СтрокаТЧ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		
		МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
		Если МассивСтрокОстатков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		КоличествоКСписанию = СтрокаТЧ.Количество * СтрокаТЧ.Коэффициент;
		МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
		Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
			
			НоваяСтрока.Количество = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / СтрокаТЧ.Коэффициент;
			
		КонецЕсли;
		
		Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
			ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗапасыПоЗаказПокупателяНовоеМесто()

// Процедура заполнения строку табличной части Запасы на основании заказа покупателя.
//
Процедура ЗаполнитьЗапасыПоЗаказПокупателяИсходноеМесто(Выборка, ТаблицаОстатков, ИмяТабличнойЧасти)
	
	Для каждого СтрокаТЧ Из Выборка[ИмяТабличнойЧасти].Выгрузить() Цикл
		
		Если СтрокаТЧ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		
		МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаОстатков Из МассивСтрокОстатков Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
			НоваяСтрока.Количество = СтрокаОстатков.Количество / СтрокаТЧ.Коэффициент;
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
			ТаблицаОстатков.Удалить(СтрокаОстатков);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗапасыПоЗаказПокупателяИсходноеМесто()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказПокупателяНовоеМесто";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// В обработчике события ОбработкаПроверкиЗаполнения документа выполняется
// копирование и обнуление проверяемых реквизитов для исключения стандартной
// проверки заполнения платформой и последующей проверки средствами встроенного языка.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Для каждого СтрокаТаблицыЗапасов Из Запасы Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.ИсходноеМестоРезерва)
		   И НЕ ЗначениеЗаполнено(СтрокаТаблицыЗапасов.НовоеМестоРезерва) Тогда
		   
		   УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, 
		   "Не указано исходное место резерва.",
		   "Запасы",
		   СтрокаТаблицыЗапасов.НомерСтроки,
		   "ИсходноеМестоРезерва",
		   Отказ);
		   
		   УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, 
		   "Не указано новое место резерва.",
		   "Запасы",
		   СтрокаТаблицыЗапасов.НомерСтроки,
		   "НовоеМестоРезерва",
		   Отказ);
		   
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// В обработчике события ОбработкаПроведения документа выполняется
// - осуществляется удаление движений документа,
// - формируется структура шапки необходимых реквизитов документа,
// - формируется временная таблица по табличной части Товары,
// - приход товаров в места хранения,
// - приход свободных остатков товаров в местах хранения,
// - приход по стоимости товаров в местах хранения,
// - формирование проводок документа.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.РезервированиеЗапасов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);

	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.РезервированиеЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.РезервированиеЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

#КонецОбласти

#КонецЕсли