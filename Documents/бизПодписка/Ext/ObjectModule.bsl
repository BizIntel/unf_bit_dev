////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполнение документа на основании заявки
//
// Параметры
//      нет
//
Процедура ЗаполнитьПоОснованию()Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бизЗаявкаНаИТС") Тогда
		
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	АО_ЗаявкаНаИТСПодписки.Контрагент,
		|	АО_ЗаявкаНаИТСПодписки.Номенклатура,
		|	АО_ЗаявкаНаИТСПодписки.РегистрационныйНомер,
		|	АО_ЗаявкаНаИТСПодписки.ВидПодписки,
		|	АО_ЗаявкаНаИТСПодписки.СрокПодписки,
		|	АО_ЗаявкаНаИТСПодписки.ВидОплаты,
		|	АО_ЗаявкаНаИТСПодписки.ДатаНачалаПодписки,
		|	АО_ЗаявкаНаИТСПодписки.ДатаОкончанияПодписки
		|ИЗ
		|	Документ.бизЗаявкаНаИТС.Подписки КАК АО_ЗаявкаНаИТСПодписки
		|ГДЕ
		|	АО_ЗаявкаНаИТСПодписки.Ссылка = &Ссылка";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
		Подписка.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для каждого Строка Из Подписка Цикл
			КолвоМесяцев = бизУчетИТСКлиентСервер.ПолучитьКолвоМесяцев(Строка.СрокПодписки);
			Если КолвоМесяцев <> 0 Тогда
				Строка.ДатаОкончанияПодписки = КонецМесяца(ДобавитьМесяц(Строка.ДатаНачалаПодписки, КолвоМесяцев) - 1);
			КонецЕсли; 
		КонецЦикла;
		
	Иначе 
		Возврат;
	КонецЕсли;
	Организация = ДокументОснование.Организация;

КонецПроцедуры // ЗаполнитьПоОснованию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеШапки(Отказ)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ПроверитьПоля(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Подписка".
//
// Параметры:
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПодписка(Отказ)

	ИмяТабличнойЧасти = "Подписка";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДатаНачалаПодписки, Контрагент, ВидПодписки, СрокПодписки, ДатаОкончанияПодписки");
	СтруктураОбязательныхПолей.Вставить("РегистрационныйНомер");
	СтруктураОбязательныхПолей.Вставить("Номенклатура");
	// Теперь вызовем общую процедуру проверки.
	ПроверитьТабличнуюЧасть(ЭтотОбъект, СтруктураОбязательныхПолей, ИмяТабличнойЧасти, Отказ);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПодписка()

&НаСервере
Процедура ПроверитьТабличнуюЧасть(Объект, СтруктураОбязательныхКолонок, ИмяТабличнойЧасти, Отказ) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		Для Каждого Колонка Из СтруктураОбязательныхКолонок Цикл
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти[Колонка.Ключ]) Тогда
				ТекстСообщения = "Не заполнено значение в колонке""" + Колонка.Ключ + """!";
				Поле = ИмяТабличнойЧасти + "[" + Строка(СтрокаТабличнойЧасти.НомерСтроки - 1) + "]." + Колонка.Ключ;
				//СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПоля(Объект, СтруктураОбязательныхПолей, Отказ) Экспорт
	
	Для Каждого ОбязательноеПоле Из СтруктураОбязательныхПолей Цикл
		ПроверитьПоле(Объект, ОбязательноеПоле.Ключ, Отказ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПоле(Объект, ИмяПоля, Отказ) Экспорт
	
	ЗначениеПоля = Объект[ИмяПоля];
	ПредставлениеПоля = "";
	Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		Если Реквизит.Имя = ИмяПоля Тогда
			ПредставлениеПоля = Реквизит.Представление();
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
		ТекстСообщения = "Не заполнено поле """+ ПредставлениеПоля + """!";
		//Сообщение(ТекстСообщения, Объект, ИмяПоля, "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(Основание)
	
	//АРБИС_ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
	ДокументОснование = Основание;
	
	ЗаполнитьПоОснованию();
		
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	//Проверить статус документа ЗаявкаНаИТС и в случае если статус "Открыта" изменить статус на завершена
	УправлятьСтатусомЗаявкиИТС(Отказ);
	
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(Отказ);
	
	// Проверим правильность заполнения табличной части документа
	ПроверитьЗаполнениеТабличнойЧастиПодписка(Отказ);
	
	// Движения по документу
	Если Не Отказ Тогда
		
		Для Каждого ТекСтрокаПодписка Из Подписка Цикл
			
			Движение = Движения.бизПодписки.Добавить();
			Движение.Период = ТекСтрокаПодписка.ДатаНачалаПодписки;
			Движение.Организация = Организация;
			Движение.Контрагент = ТекСтрокаПодписка.Контрагент;
			Движение.ВидПодписки = ТекСтрокаПодписка.ВидПодписки;
			Движение.СрокПодписки = ТекСтрокаПодписка.СрокПодписки;
			Движение.ВидОплаты = ТекСтрокаПодписка.ВидОплаты;
			Движение.Номенклатура = ТекСтрокаПодписка.Номенклатура;
			Движение.РегистрационныйНомер = ТекСтрокаПодписка.РегистрационныйНомер;
			Движение.ДатаНачалаПодписки = ТекСтрокаПодписка.ДатаНачалаПодписки;
			Движение.ДатаОкончанияПодписки = ТекСтрокаПодписка.ДатаОкончанияПодписки;
			Движение.СтатусПодписки = Перечисления.бизСтатусыПодписок.Действует;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Отказ = Отказ;
		
КонецПроцедуры

Процедура УправлятьСтатусомЗаявкиИТС(Отказ)
	ДокументОснованиеОбъект = ДокументОснование.ПолучитьОбъект();
	//ФормаСпискаДокументаОснования = ДокументОснованиеОбъект.ПолучитьФорму("ФормаСписка");

	Если НЕ Отказ Тогда
		
		Если ДокументОснование.СтатусЗаявки = Перечисления.бизСтатусыЗаявкиИТС.Открыта Тогда
			ДокументОснованиеОбъект.СтатусЗаявки = Перечисления.бизСтатусыЗаявкиИТС.Зарегистрирована;
			ДокументОснованиеОбъект.Записать();
			//Если ФормаСпискаДокументаОснования.Открыта()Тогда 
			//	ФормаСпискаДокументаОснования.Обновить();
			//КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Отказ Тогда
		
		Если ДокументОснование.СтатусЗаявки = Перечисления.бизСтатусыЗаявкиИТС.Зарегистрирована Тогда
			ДокументОснованиеОбъект.СтатусЗаявки = Перечисления.бизСтатусыЗаявкиИТС.Открыта;
			ДокументОснованиеОбъект.Записать();
			//Если ФормаСпискаДокументаОснования.Открыта()Тогда 
			//	ФормаСпискаДокументаОснования.Обновить();
			//КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	УправлятьСтатусомЗаявкиИТС(НЕ Отказ)
КонецПроцедуры



 
