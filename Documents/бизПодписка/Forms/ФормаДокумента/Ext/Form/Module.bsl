////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура ПоказатьКолонки(ЗаполнитьПоУмолчанию = Ложь)
	
		Элементы.Подписка.ПодчиненныеЭлементы.ПодпискаНоменклатура.Видимость = Ложь;
		Элементы.Подписка.ПодчиненныеЭлементы.ПодпискаРегистрационныйНомер.Видимость = Ложь;			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХарактирестику(ТипПериодическойПодписки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипПериодическойПодписки",ТипПериодическойПодписки);
	Запрос.Текст = "ВЫБРАТЬ
	|	АРБИС_ТипыПериодическихПодписокДопХарактеристики.Характеристика
	|ИЗ
	|	Справочник.АРБИС_ТипыПериодическихПодписок.ДопХарактеристики КАК АРБИС_ТипыПериодическихПодписокДопХарактеристики
	|ГДЕ
	|	АРБИС_ТипыПериодическихПодписокДопХарактеристики.Ссылка = &ТипПериодическойПодписки";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Характеристика;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеХарактеристики(Характеристика)
	
	Возврат Характеристика.Наименование;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипЗначенияХарактеристики(Характеристика)
	
	Возврат Характеристика.ТипЗначения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы. 
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПоказатьКолонки(Объект.Ссылка.Пустая());
	Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов();
	Элементы.Подписка.ПодчиненныеЭлементы.ПодпискаВидОплаты.Видимость = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//Процедура - обработчик нажатия на кнопку по заполнению ТЧ "Подписка" на основании документа "АРБИС_ЗаявкаНаИТС"
&НаКлиенте
Процедура ЗаполнитьПоЗаявке(Команда)
	
	ЗаполнитьПоОснованиюНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода документа-основания.
//
&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ЗаполнитьПоОснованиюНаСервере();
	ПоказатьКолонки(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Номенклатура" ТЧ "Подписка".
//
&НаКлиенте
Процедура ПодпискаНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	ЗаполнитьСписокВыбораПоКонтрагенту(Элементы.Подписка.ТекущиеДанные.Контрагент);
	Для каждого СтрокаТЗ Из ДанныеСпискаВыбора Цикл
		Список = Новый СписокЗначений;
		Список.Добавить(СтрокаТЗ.Номенклатура);
		Список.Добавить(СтрокаТЗ.РегистрационныйНомер);
		Элемент.СписокВыбора.Добавить(Список, Строка(СтрокаТЗ.Номенклатура) + " Рег.№:" + СтрокаТЗ.РегистрационныйНомер,,);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоКонтрагенту(Контрагент)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЮК_НоменклатураКонтрагентовПоРегНомерамСрезПоследних.Номенклатура,
	|	ЮК_НоменклатураКонтрагентовПоРегНомерамСрезПоследних.РегистрационныйНомер
	|ИЗ
	|	РегистрСведений.АРБИС_НоменклатураКонтрагентовПоРегНомерам.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ЮК_НоменклатураКонтрагентовПоРегНомерамСрезПоследних
	|ГДЕ
	|	ЮК_НоменклатураКонтрагентовПоРегНомерамСрезПоследних.Состояние = &Состояние";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Состояние", Перечисления.АРБИС_СостоянияНоменклатурыУКонтрагентов.Установлена);
	
	ДанныеСпискаВыбора.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Номенклатура" ТЧ "Подписка".
//
&НаКлиенте
Процедура ПодпискаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Подписка.ТекущиеДанные.Номенклатура = ВыбранноеЗначение[0].Значение;
	Элементы.Подписка.ТекущиеДанные.РегистрационныйНомер = ВыбранноеЗначение[1].Значение;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаНачалаПодписки" ТЧ "Подписка".
//
&НаКлиенте
Процедура ПодпискаДатаНачалаПодпискиПриИзменении(Элемент)

	Элементы.Подписка.ТекущиеДанные.ДатаНачалаПодписки = НачалоМесяца(Элементы.Подписка.ТекущиеДанные.ДатаНачалаПодписки);
	КолвоМесяцев = бизУчетИТСКлиентСервер.ПолучитьКолвоМесяцев(Элементы.Подписка.ТекущиеДанные.СрокПодписки);
	
	Если КолвоМесяцев <> 0 Тогда
		Элементы.Подписка.ТекущиеДанные.ДатаОкончанияПодписки = КонецМесяца(ДобавитьМесяц(Элементы.Подписка.ТекущиеДанные.ДатаНачалаПодписки, КолвоМесяцев) - 1);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СрокПодписки" ТЧ "Подписка".
//
&НаКлиенте
Процедура ПодпискаСрокПодпискиПриИзменении(Элемент)
	
	КолвоМесяцев = бизУчетИТСКлиентСервер.ПолучитьКолвоМесяцев(Элементы.Подписка.ТекущиеДанные.СрокПодписки);
		
	Если КолвоМесяцев <> 0 Тогда
		Элементы.Подписка.ТекущиеДанные.ДатаОкончанияПодписки = КонецМесяца(ДобавитьМесяц(Элементы.Подписка.ТекущиеДанные.ДатаНачалаПодписки, КолвоМесяцев) - 1);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпискаВидПодпискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.бизВидыПодписок.Форма.ФормаВыбора", , Элемент);
	ФормаВыбора.Параметры.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПериодическойПодпискиПриИзменении(Элемент)
	
	Объект.Подписка.Очистить();
	ЗаполнитьПоОснованиюНаСервере();
	ПоказатьКолонки(Истина);
	Если Объект.ТипПериодическойПодписки <> ПредопределенноеЗначение("Справочник.АРБИС_ТипыПериодическихПодписок.ИТС") 
		И Не Объект.ТипПериодическойПодписки.Пустая() Тогда
		Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
		Если ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокументОснование = ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка");
		КонецЕсли;
		Элементы.Подписка.ПодчиненныеЭлементы.ПодпискаВидОплаты.Видимость = Ложь;
	Иначе
		Элементы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов();
		Элементы.Подписка.ПодчиненныеЭлементы.ПодпискаВидОплаты.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоОснованию();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоулчитьТипПериодПодпискиСсылки(Ссылка)
	
	Возврат Ссылка.ТипПериодическойПодписки;
	
КонецФункции

&НаКлиенте
Процедура ТипПериодическойПодпискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.АРБИС_ТипыПериодическихПодписок.ФормаВыбора", , Элемент);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОповеститьОбИзменении(Объект.ДокументОснование);
	Оповестить("ЗаявкаЗарегистрирована");
КонецПроцедуры




