////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;
// Хранит элемент управления подменю печати
Перем мПодменюПечати;
// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;
// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	
	СоответствиеТЧ.Вставить(ЭлементыФормы.Подписка, ЭлементыФормы.КоманднаяПанельПодписки.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

Процедура ПоказатьКолонки(ЗаполнитьПоУмолчанию = Ложь)
	Если ТипПериодическойПодписки.Пустая() Тогда
		ЭлементыФормы.Подписка.Колонки.Номенклатура.Видимость = Ложь;
		ЭлементыФормы.Подписка.Колонки.РегистрационныйНомер.Видимость = Ложь;
		Для НомерКолонки = 1 по 10 Цикл
			Колонка = ЭлементыФормы.Подписка.Колонки["ДопРеквизит" + НомерКолонки];
			Колонка.Видимость = Ложь;
			Колонка.ТекстШапки = "ДопРеквизит" + НомерКолонки;
		КонецЦикла;			
	Иначе
		ПоказыватьИТС = (ТипПериодическойПодписки = Справочники.АРБИС_ТипыПериодическихПодписок.ИТС);
		ЭлементыФормы.Подписка.Колонки.Номенклатура.Видимость = ПоказыватьИТС;
		ЭлементыФормы.Подписка.Колонки.РегистрационныйНомер.Видимость = ПоказыватьИТС;	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТипПериодическойПодписки",ТипПериодическойПодписки);
		Запрос.Текст = "ВЫБРАТЬ
					   |	АРБИС_ТипыПериодическихПодписокДопХарактеристики.Характеристика
					   |ИЗ
					   |	Справочник.АРБИС_ТипыПериодическихПодписок.ДопХарактеристики КАК АРБИС_ТипыПериодическихПодписокДопХарактеристики
					   |ГДЕ
					   |	АРБИС_ТипыПериодическихПодписокДопХарактеристики.Ссылка = &ТипПериодическойПодписки";
		Результат = Запрос.Выполнить().Выбрать();
		Для НомерКолонки = 1 по 10 Цикл
			Колонка = ЭлементыФормы.Подписка.Колонки["ДопРеквизит" + НомерКолонки];
			Если Результат.Следующий() Тогда
				Колонка.Видимость = Истина;
				Колонка.ТекстШапки = Результат.Характеристика.Наименование;
				Если ЗаполнитьПоУмолчанию Тогда
					Колонка.ЭлементУправления.Значение = Результат.Характеристика.ТипЗначения.ПривестиЗначение(Колонка.ЭлементУправления.Значение);
				КонецЕсли;
				Колонка.ЭлементУправления.ОграничениеТипа = Результат.Характеристика.ТипЗначения;
			Иначе
				Колонка.Видимость = Ложь;
				Колонка.ТекстШапки = "ДопРеквизит" + НомерКолонки;
			КонецЕсли;
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы. 
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы. 
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	КонецЕсли;
	

	//Номер документа
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	ПоказатьКолонки(ЭтоНовый());
	Если ТипПериодическойПодписки <> Справочники.АРБИС_ТипыПериодическихПодписок.ИТС 
		И Не ТипПериодическойПодписки.Пустая() Тогда
		ЭлементыФормы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
		ДокументОснование = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		ЭлементыФормы.Подписка.Колонки.ВидОплаты.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов();
		ЭлементыФормы.Подписка.Колонки.ВидОплаты.Видимость = Истина;
	КонецЕсли;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АРБИС_ЗаявкаНаИТС") Тогда
		ЭлементыФормы.ТипПериодическойПодписки.Доступность = Ложь;
		ЭлементыФормы.НадписьТипПериодическойПодписки.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ТипПериодическойПодписки.Доступность = Истина;
		ЭлементыФормы.НадписьТипПериодическойПодписки.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
    МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

//Процедура - обработчик нажатия на кнопку по заполнению ТЧ "Подписка" на основании документа "АРБИС_ЗаявкаНаИТС"
//
Процедура КоманднаяПанельПодпискиЗаполнитьПоЗаявке(Кнопка)
	
	ЗаполнитьПоОснованию();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ОсновныеДействияФормыНастройка(Кнопка)

	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(ЭтоНовый(),Ссылка,ЭтотОбъект);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода документа-основания.
//
Процедура ДокументОснованиеПриИзменении(Элемент)
	ЗаполнитьПоОснованию();
	ПоказатьКолонки(Истина);
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АРБИС_ЗаявкаНаИТС") Тогда
		ЭлементыФормы.ТипПериодическойПодписки.Доступность = Ложь;
		ЭлементыФормы.НадписьТипПериодическойПодписки.Доступность = Ложь;
		
	Иначе
		ЭлементыФормы.ТипПериодическойПодписки.Доступность = Истина;
		ЭлементыФормы.НадписьТипПериодическойПодписки.Доступность = Истина;
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Номенклатура" ТЧ "Подписка".
//
Процедура ПодпискаНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЮК_НоменклатураКонтрагентовПоРегНомерамСрезПоследних.Номенклатура,
	               |	ЮК_НоменклатураКонтрагентовПоРегНомерамСрезПоследних.РегистрационныйНомер
	               |ИЗ
	               |	РегистрСведений.АРБИС_НоменклатураКонтрагентовПоРегНомерам.СрезПоследних(&Дата, Контрагент = &Контрагент) КАК ЮК_НоменклатураКонтрагентовПоРегНомерамСрезПоследних
	               |ГДЕ
	               |	ЮК_НоменклатураКонтрагентовПоРегНомерамСрезПоследних.Состояние = &Состояние";
	 
	 Запрос = Новый Запрос(ТекстЗапроса);
	 Запрос.УстановитьПараметр("Дата", Дата);
	 Запрос.УстановитьПараметр("Контрагент", ЭлементыФормы.Подписка.ТекущаяСтрока.Контрагент);
	 Запрос.УстановитьПараметр("Состояние", Перечисления.АРБИС_СостоянияНоменклатурыУКонтрагентов.Установлена);
	 
	 ТЗ = Запрос.Выполнить().Выгрузить();
	 Для каждого СтрокаТЗ Из ТЗ Цикл
	    Список = Новый СписокЗначений;
		Список.Добавить(СтрокаТЗ.Номенклатура);
		Список.Добавить(СтрокаТЗ.РегистрационныйНомер);
	 	Элемент.СписокВыбора.Добавить(Список, СтрокаТЗ.Номенклатура.Наименование + " Рег.№:" + СтрокаТЗ.РегистрационныйНомер,,);
	 
	 КонецЦикла; 

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Номенклатура" ТЧ "Подписка".
//
Процедура ПодпискаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.Подписка.ТекущаяСтрока.Номенклатура = ВыбранноеЗначение[0].Значение;
	ЭлементыФормы.Подписка.ТекущаяСтрока.РегистрационныйНомер = ВыбранноеЗначение[1].Значение;
	//Значение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	//ЭлементыФормы.Подписка.ТекущаяСтрока.РегистрационныйНомер = Сред(Значение, Найти(Значение, " Рег.№:") + 7);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаНачалаПодписки" ТЧ "Подписка".
//
Процедура ПодпискаДатаНачалаПодпискиПриИзменении(Элемент)
	
	Элемент.Значение = НачалоМесяца(Элемент.Значение);
	КолвоМесяцев = ПолучитьКолвоМесяцев(ЭлементыФормы.Подписка.ТекущаяСтрока.СрокПодписки);
		
	Если КолвоМесяцев <> 0 Тогда
		ЭлементыФормы.Подписка.ТекущаяСтрока.ДатаОкончанияПодписки = КонецМесяца(ДобавитьМесяц(Элемент.Значение, КолвоМесяцев) - 1);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СрокПодписки" ТЧ "Подписка".
//
Процедура ПодпискаСрокПодпискиПриИзменении(Элемент)
	
	КолвоМесяцев = ПолучитьКолвоМесяцев(ЭлементыФормы.Подписка.ТекущаяСтрока.СрокПодписки);
		
	Если КолвоМесяцев <> 0 Тогда
		ЭлементыФормы.Подписка.ТекущаяСтрока.ДатаОкончанияПодписки = КонецМесяца(ДобавитьМесяц(ЭлементыФормы.Подписка.ТекущаяСтрока.ДатаНачалаПодписки, КолвоМесяцев) - 1);
	КонецЕсли; 

КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	//Номер докумнета
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура ПодпискаВидПодпискиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.АРБИС_ВидыПодписок.ПолучитьФормуВыбора(,Элемент,ЭтаФорма);
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Отбор.ТипПериодическойПодписки.Установить(ТипПериодическойПодписки);
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ТипПериодическойПодпискиПриИзменении(Элемент)
	Подписка.Очистить();
	ЗаполнитьПоОснованию();
	ПоказатьКолонки(Истина);
	Если ТипПериодическойПодписки <> Справочники.АРБИС_ТипыПериодическихПодписок.ИТС 
		И Не ТипПериодическойПодписки.Пустая() Тогда
		ЭлементыФормы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
		Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокументОснование = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.Подписка.Колонки.ВидОплаты.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ДокументОснование.ОграничениеТипа = Новый ОписаниеТипов();
		ЭлементыФормы.Подписка.Колонки.ВидОплаты.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПодпискаПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено 
		ИЛИ ТипПериодическойПодписки = Ссылка.ТипПериодическойПодписки Тогда
		Возврат;
	КонецЕсли;
 	Для НомерКолонки = 1 по 10 Цикл
		Колонка = ЭлементыФормы.Подписка.Колонки["ДопРеквизит" + НомерКолонки];
		Если Колонка.Видимость 
			И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные["ДопРеквизит" + НомерКолонки])Тогда
			Элемент.ТекущиеДанные["ДопРеквизит" + НомерКолонки] = ЭлементыФормы.Подписка.Колонки["ДопРеквизит" + НомерКолонки].ЭлементУправления.ОграничениеТипа.ПривестиЗначение(Элемент.ТекущиеДанные["ДопРеквизит" + НомерКолонки]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ТипПериодическойПодпискиНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыборки = Справочники.АРБИС_ТипыПериодическихПодписок.ПолучитьФормуВыбора(,Элемент);
		ФормаВыборки.Отбор.Ссылка.Значение = Справочники.АРБИС_ТипыПериодическихПодписок.ИТС;
		ФормаВыборки.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
		ФормаВыборки.Отбор.Ссылка.Использование = Истина;
		ФормаВыборки.Открыть();
	КонецЕсли;
КонецПроцедуры
