&НаСервере
Перем КонтекстЭДОСервер Экспорт;

&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаСервере
Перем Вложения;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда 
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекстПредупреждения = "Документ не предназначен для ввода вручную!";
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные();
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.Организации") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ГруппаОтправитель");
	КонецЕсли;
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Организации") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ГруппаПолучатель");
	КонецЕсли;
	
	ПечатьВозможнаДляЦиклаОбмена = ЗначениеЗаполнено(Объект.ЦиклОбмена) И 
		(Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
		ИЛИ Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Заявление 
		ИЛИ Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ
		ИЛИ Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР 
		ИЛИ Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьФСГС
		ИЛИ Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН
		ИЛИ Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ТранспортноеСообщение", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияПосмотретьВложенияНажатие(Элемент)

	СписокКонтейнеров = ПолучитьСписокКонтейнеров(Объект.Ссылка);
	Если СписокКонтейнеров = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ЧислоКонтейнеров = СписокКонтейнеров.Количество();
	Если ЧислоКонтейнеров = 0 Тогда
		Возврат;
	ИначеЕсли ЧислоКонтейнеров = 1 Тогда
		ВложениеДляОткрытия = СписокКонтейнеров.Получить(0);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияПосмотретьВложенияНажатиеПоказатьВыборЭлементаЗавершение", ЭтотОбъект);
		СписокКонтейнеров.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите вложение");
		Возврат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(ВложениеДляОткрытия.Значение, ВложениеДляОткрытия.Представление);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСостояниеСообщенияНажатие(Элемент)
	РезультатОбработки = НадписьНажатиеОбработатьНаСервере();
	Если РезультатОбработки <> Неопределено Тогда 
		Если ТипЗнч(РезультатОбработки) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда 
		// Открываем документ
			ОткрытьФорму("Документ.ТранспортноеСообщение.ФормаОбъекта", Новый Структура("Ключ", РезультатОбработки));
		ИначеЕсли ТипЗнч(РезультатОбработки) = Тип("Структура") Тогда 
		// Результат обработки структура с предупреждением или текстом вопроса
			ТекстВопроса = "";
			ТекстПредупреждения = "";
			Если РезультатОбработки.Свойство("ТекстВопроса", ТекстВопроса) Тогда 
				ОписаниеОповещения = Новый ОписаниеОповещения("НадписьСостояниеСообщенияНажатиеЗавершение", ЭтотОбъект);
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			ИначеЕсли РезультатОбработки.Свойство("ТекстПредупреждения", ТекстПредупреждения) Тогда 
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СодержимоеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоответствиеТиповСодержимого = КонтекстЭДОКлиент.ПолучитьСоответствиеТиповСодержимого();
	ТипДокумента = СоответствиеТиповСодержимого.Получить(Элемент.ТекущиеДанные.Тип);
	// отчетность ПФР
	Если ТипДокумента = "ФайлОтчетностиПФР" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, , "ПечататьДокумент");
	ИначеЕсли ТипДокумента = "ПодтверждениеПолученияОтчетностиПФР" Тогда
		ПоказатьПодтверждениеПолученияПФР(Элемент.ТекущиеДанные, Истина);
	ИначеЕсли ТипДокумента = "СведенияПриложениеПФР" Тогда
		ПоказатьПриложениеПФР(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ПротоколПФР" Тогда
		ПоказатьПротоколПФР(Элемент.ТекущиеДанные, Истина);
	ИначеЕсли ТипДокумента = "ПротоколПриложениеПФР" Тогда
		ПоказатьПриложениеПФР(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ФайлОписанияСведенийПФР" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
	ИначеЕсли ТипДокумента = "ЭлектронноЦифроваяПодпись" Тогда
		ПоказатьЭлектронноЦифровуюПодпись(ВыбраннаяСтрока);
		
	// неформализованные ПФР
	ИначеЕсли ТипДокумента = "Письмо" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
	ИначеЕсли ТипДокумента = "ПисьмоПриложение" Тогда
		ПоказатьПриложениеПФР(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ПодтверждениеПолученияПисьма" Тогда
		ПоказатьПодтверждениеПолученияПисьмаПФР(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ОписаниеПисьма" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
	ИначеЕсли ТипДокумента = "ТранспортнаяИнформация" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
	
	// запросы ПФР
	ИначеЕсли ТипДокумента = "ЗапросИОС" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
	ИначеЕсли ТипДокумента = "ФайлОписанияЗапросаПФР" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
	ИначеЕсли ТипДокумента = "ОтветНаЗапросПФР" Тогда
		ПоказатьОтветНаЗапросИОС(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ОтветПриложениеНаЗапросПФР" Тогда
		ПоказатьОтветПриложениеНаЗапросИОС(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ПодтверждениеПолученияЗапросПФР" Тогда
		ПоказатьПодтверждениеПолученияЗапросаПФР(Элемент.ТекущиеДанные);
	
	// отчетность ФНС
	ИначеЕсли ТипДокумента = "ФайлОтчетности" Тогда
		ПоказатьФайлОтчетности(ВыбраннаяСтрока, "ПечататьДокумент");
	ИначеЕсли ТипДокумента = "Форма2НДФЛ" Тогда
		ПоказатьФайлОтчетности(ВыбраннаяСтрока, "ПечататьДокумент");
	ИначеЕсли ТипДокумента = "Доверенность" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "ОписаниеСведений" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "ОписаниеСведений2НДФЛ" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "ПодтверждениеДатыОтправки" Тогда
		ПоказатьПодтверждениеДатыОтправки(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "УведомлениеОбОтказе" Тогда
		ПоказатьУведомлениеОбОтказе(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "КвитанцияОПриеме" Тогда
		ПоказатьКвитанциюОПриеме(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "ИзвещениеОВводе" Тогда
		ПоказатьИзвещениеОВводе(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "УведомлениеОбУточнении" Тогда
		ПоказатьУведомлениеОбУточнении504(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "ИзвещениеОПолучении" Тогда
		ПоказатьИзвещениеОПолучении(ВыбраннаяСтрока);
		
	//Заявление
	ИначеЕсли ТипДокумента = "КвитанцияОПриемеЗаявления" Тогда
		ПоказатьКвитанцияОПриемеЗаявление(ВыбраннаяСтрока, Истина);
		
	ИначеЕсли ТипДокумента = "СообщениеОПростОтметки" Тогда
		ПоказатьСообщениеОПроставленииОтметки(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "УведомлениеОбОтказеОтметки" Тогда
		ПоказатьУведомлениеОбОтказеОтметки(ВыбраннаяСтрока, Истина);
		
	ИначеЕсли ТипДокумента = "СообщениеОПроверке" Тогда
		ПоказатьСообщениеОПроверке(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "СообщениеОбОтзывеЗаявления" Тогда
		ПоказатьСообщениеОбОтзывеЗаявления(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "СообщениеОНесоответствиях" Тогда
		ПоказатьСообщениеОНесоответствиях(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "Заявление" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока, "ПечататьДокумент");
	ИначеЕсли ТипДокумента = "ОписаниеСведенийЗаявление" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
		
	//Документ
	ИначеЕсли ТипДокумента = "Документ" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "ОписаниеДокумент" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "УведомлениеОбОтказеДокумент" Тогда
		ПоказатьУведомлениеОбОтказеДокумент(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "КвитанцияОПриемеДокумент" Тогда
		ПоказатьКвитанцияОПриемеДокумент(ВыбраннаяСтрока);
		
	// 2-НДФЛ
	ИначеЕсли ТипДокумента = "Протокол2НДФЛ" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251", "ПечататьРезультатПриема");
	ИначеЕсли ТипДокумента = "Реестр2НДФЛ" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251", ?(ЭтоФорматДокументооборотаПриказ534(Объект.ЦиклОбмена), "ПечататьРезультатПриема", "ПечататьРеестрСведений2НДФЛ"));
		
	// обращение
	ИначеЕсли ТипДокумента = "Обращение" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "Приложение" Тогда
		ПоказатьПриложениеПФР(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ПодтверждениеДатыПолучения" Тогда
		ПоказатьПодтверждениеДатыПолучения(ВыбраннаяСтрока);
		
	ИначеЕсли ТипДокумента = "ОписаниеСведенийОбращениеПисьмоРассылка" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
		
	// представление
	ИначеЕсли ТипДокумента = "Представление" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "ДоверенностьПредставление" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "ОписаниеПредставление" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "ПодтверждениеДатыОтправкиПредставление" Тогда
		ПоказатьПодтверждениеДатыОтправки(ВыбраннаяСтрока, Истина);
		
	// входящие неформализованные
	ИначеЕсли ТипДокумента = "Рассылка" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
		
	// запросы
	ИначеЕсли ТипДокумента = "Запрос" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
	ИначеЕсли ТипДокумента = "Ответ" Тогда
		ПоказатьПриложениеПФР(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ОписаниеСведенийЗапрос" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
		
	// отчетность в Росстат
	ИначеЕсли ТипДокумента = "ФайлОтчетностиФСГС" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока, "ПечататьДокумент");
	ИначеЕсли ТипДокумента = "ИзвещениеОПолученииДокументаФСГС" Тогда
		ПоказатьПодтверждениеПолученияФСГС(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ПодтверждениеОператораФСГС" Тогда
		ПоказатьПодтверждениеДатыПолучения(ВыбраннаяСтрока, Истина);
	ИначеЕсли ТипДокумента = "УведомлениеОПриемеВОбработкуОтчетаФСГС" Тогда
		ПоказатьПротоколФСГС(Элемент.ТекущиеДанные, Истина);
	ИначеЕсли ТипДокумента = "УведомлениеОбУточненииОтчетаФСГС" Тогда
		ПоказатьПротоколФСГС(Элемент.ТекущиеДанные, Истина);
	ИначеЕсли ТипДокумента = "УведомлениеОНесоответствииФорматуОтчетаФСГС" Тогда
		ПоказатьПротоколФСГС(Элемент.ТекущиеДанные, Истина);
	ИначеЕсли ТипДокумента = "УведомлениеОбОтказеОтчетаФСГС" Тогда
		ПоказатьПротоколФСГС(Элемент.ТекущиеДанные, Истина);
	ИначеЕсли ТипДокумента = "ОписаниеФайлаОтчетностиФСГС" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
		
	// переписка с Росстатом
	ИначеЕсли ТипДокумента = "ПисьмоФСГС" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
	ИначеЕсли ТипДокумента = "РассылкаФСГС" Тогда
		ПоказатьКакТекст(ВыбраннаяСтрока, "windows-1251");
	ИначеЕсли ТипДокумента = "ПриложениеПисьмаФСГС" Тогда
		ПоказатьВложениеФСГС(Элемент.ТекущиеДанные);
	ИначеЕсли ТипДокумента = "ОписаниеПисьмаФСГС" Тогда
		ПоказатьКакXML(ВыбраннаяСтрока);
		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПеречитать(Команда)
	
	// сохраняем свойства отображения перед перерисовкой
	ИмяФайлаАктивногоУзла = Неопределено;
	Если Элементы.СодержимоеТранспортныхСообщений.ТекущаяСтрока <> Неопределено Тогда
		ИмяФайлаАктивногоУзла = Элементы.СодержимоеТранспортныхСообщений.ТекущиеДанные.Имя;
	КонецЕсли;
	
	ИменаФайловВНераскрытыхУзлахПервогоУровня = Новый Массив;
	Для Каждого Узел Из СодержимоеТранспортныхСообщений.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Узел.Имя) И НЕ Элементы.СодержимоеТранспортныхСообщений.Развернут(Узел.ПолучитьИдентификатор()) Тогда
			ИменаФайловВНераскрытыхУзлахПервогоУровня.Добавить(Узел.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Обновляем данные
	ОбновитьДанные();
	
	// применяем сохраненные ранее свойства отображения
	Для Каждого Узел Из СодержимоеТранспортныхСообщений.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Узел.Имя) И ИменаФайловВНераскрытыхУзлахПервогоУровня.Найти(Узел.Имя) <> Неопределено Тогда
			Элементы.СодержимоеТранспортныхСообщений.Свернуть(Узел.ПолучитьИдентификатор());
		Иначе
			Элементы.СодержимоеТранспортныхСообщений.Развернуть(Узел.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяФайлаАктивногоУзла <> Неопределено Тогда
		СтрАктивныйУзел = Неопределено;
		Для Каждого СтрокаСодержимого Из СодержимоеТранспортныхСообщений.ПолучитьЭлементы() Цикл 
			Если СтрокаСодержимого.Имя = ИмяФайлаАктивногоУзла Тогда 
				СтрАктивныйУзел = СтрокаСодержимого.ПолучитьИдентификатор();
			Иначе // Ищем в подчиненных узлах (всего два уровня)
				Для Каждого СтрокаПодчиненного Из СтрокаСодержимого.ПолучитьЭлементы() Цикл
					Если СтрокаПодчиненного.Имя = ИмяФайлаАктивногоУзла Тогда 
						СтрАктивныйУзел = СтрокаПодчиненного.ПолучитьИдентификатор();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если СтрАктивныйУзел <> Неопределено Тогда
			Элементы.СодержимоеТранспортныхСообщений.ТекущаяСтрока = СтрАктивныйУзел;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьТС(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаРасшифроватьТСЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Распаковать сообщение?", РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьСодержимоеТС(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаИзменитьСодержимоеТСЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Изменить содержимое сообщения?
				|При этом, зашифрованное и готовое к отправке вложение будет удалено.", РежимДиалогаВопрос.ДаНет);	

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьВложения(Команда)
	
	ЗаполнитьВложенияТранспортногоСообщенияНаСервере();
	
	СохраняемыеФайлы = Новый Массив;
	Для каждого Вложение Из ФормаВложения Цикл
		СохраняемыеФайлы.Добавить(Новый Структура("Имя, Адрес", Вложение.ИмяФайла, Вложение.Адрес));
	КонецЦикла; 
	
	ОперацииСФайламиЭДКОКлиент.СохранитьФайлы(СохраняемыеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонтейнер(Команда)
	
	ПолучитьТранспортныйКонтейнерНаСервере();
	
	Если ФормаКонтейнеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивОписанийПолучаемыеФайлы = Новый Массив;
	Для Каждого Контейнер Из ФормаКонтейнеры Цикл 
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Контейнер.ИмяФайла, Контейнер.Адрес); 
		МассивОписанийПолучаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ОперацииСФайламиЭДКОКлиент.СохранитьФайлы(МассивОписанийПолучаемыеФайлы);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСодержимоеТранспортныхКонтейнеров(Команда)
	
	СтруктураОтбора = Новый Структура("ТранспортноеСообщение", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.СодержимоеТранспортныхКонтейнеров.Форма.ФормаСписка", Новый Структура("Отбор", СтруктураОтбора));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТранспортныеКонтейнеры(Команда)
	
	СтруктураОтбора = Новый Структура("ТранспортноеСообщение", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ТранспортныеКонтейнеры.Форма.ФормаСписка", Новый Структура("Отбор", СтруктураОтбора));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЦиклыОбмена(Команда)
	
	Если НЕ Объект.ЦиклОбмена.Пустая() Тогда
		
		ОткрытьФорму("Справочник.ЦиклыОбмена.ФормаОбъекта", Новый Структура("Ключ", Объект.ЦиклОбмена));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНайтиВСписке(Команда)
	ОткрытьФорму("Документ.ТранспортноеСообщение.ФормаСписка", Новый Структура("ТекущаяСтрока", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура КомандаДополнительныеРеквизиты(Команда)
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ДополнительныеСвойстваТранспортногоСообщения", Новый Структура("Ключ", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗашифровать(Команда)
	
	Если КонтекстЭДОКлиент.СообщениеЗашифровано(Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗашифроватьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,"Сообщение уже шифровалось (имеется зашифрованный транспортный контейнер, связанный с сообщением).
						|Вы уверены, что хотите зашифровать сообщение заново?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьПакетЗавершение", ЭтотОбъект);
	СформироватьПакет(Объект.Ссылка, Истина, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	// формируем пакет, если не сформирован
	Если НЕ КонтекстЭДОКлиент.СообщениеЗашифровано(Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОтправитьЗавершение", ЭтотОбъект);
		СформироватьПакет(Объект.Ссылка, Истина, ОписаниеОповещения);
	Иначе
		// вызываем отправку
		КонтекстЭДОКлиент.АвтоматическаяНастройкаУчетнойЗаписи(Объект.УчетнаяЗапись, Объект.Отправитель, , , );
		Если КонтекстЭДОКлиент.ОтправитьТранспортноеСообщение(Объект.Ссылка) Тогда
			ОбновитьДанные();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспознать(Команда)
	
	КонтекстЭДОКлиент.РаспознатьТранспортноеСообщение(Объект.Ссылка);
	ОбновитьДанные();
	
КонецПроцедуры




#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтключитьДоступностьЭУ()
	
	Элементы.КнопкаДополнительныеРеквизиты.Доступность = Ложь;
	Элементы.КнопкаВложения.Доступность = Ложь;
	Элементы.КнопкаКонтейнер.Доступность = Ложь;
	Элементы.КнопкаРаспознать.Доступность = Ложь;
	Элементы.КнопкаОтправить.Доступность = Ложь;
	Элементы.КнопкаЗашифровать.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОтключитьДоступностьЭУ();
	КонецЕсли;
	
	Оповестить("Чтение сообщения", Новый Структура("Сообщение, ЦиклОбмена", Объект.Ссылка, Объект.ЦиклОбмена));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные()
	
	ОтобразитьОтправителя();
	ОтобразитьПолучателя();
	
	Прочитать();
	
	Если КонтекстЭДОСервер = Неопределено Тогда 
		// инициализируем контекст ЭДО - модуль обработки
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		Если КонтекстЭДОСервер = Неопределено Тогда 
			Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.УведомлениеОСодержимом;
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Вложения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(Объект);
	ТранспортныйКонтейнерПрисутствует = КонтекстЭДОСервер.ТранспортныйКонтейнерПрисутствует(Объект.Ссылка);
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.Прочее
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка() Тогда
		
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.Прочее;
		
		Контейнеры = КонтекстЭДОСервер.ПолучитьТранспортныйКонтейнер(Объект.Ссылка);
		Контейнеры.Сортировать("ИмяФайла");
		
		СтрокаВложения = "";
		Для Каждого Контейнер Из Контейнеры Цикл
			СтрокаВложения = СтрокаВложения + Контейнер.ИмяФайла + "; ";
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(СтрокаВложения) Тогда
			Элементы.ДекорацияПосмотретьВложения.Заголовок = Лев(СтрокаВложения, СтрДлина(СтрокаВложения) - 2);
			Элементы.ГруппаВложенияПрочее.Видимость = Истина;
		Иначе
			Элементы.ДекорацияПосмотретьВложения.Заголовок = "<отсутствуют>";
			Элементы.ДекорацияПосмотретьВложения.Гиперссылка = Ложь;
			Элементы.ГруппаВложенияПрочее.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыПисем.Полученное И НЕ КонтекстЭДОСервер.СообщениеРасшифровано(Объект.Ссылка) Тогда
		
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.ЗашифрованноеСообщениеВходящее;
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыПисем.Исходящее И КонтекстЭДОСервер.СообщениеЗашифровано(Объект.Ссылка) Тогда
		
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.ЗашифрованноеСообщениеИсходящее;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР
		  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
		  ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС Тогда
		
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.УведомлениеОбОшибке;
		
		ОписаниеОшибки = "";
		
		// ищем файл ошибки обработки пакета
		Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
			ФайлыОшибкиОбработкиПакета = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеОшибкиПФР));
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС Тогда
			ФайлыОшибкиОбработкиПакета = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеОшибкиФНС));
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФСГС Тогда
			ФайлыОшибкиОбработкиПакета = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеОшибкиФСГС));
		КонецЕсли;
		
		Если ФайлыОшибкиОбработкиПакета.Количество() > 0 Тогда
			
			ФайлыОшибкиОбработкиПакета = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(Объект, Истина, , ФайлыОшибкиОбработкиПакета[0].ИмяФайла);
			Если ФайлыОшибкиОбработкиПакета.Количество() > 0 Тогда
			
				// выгружаем данные во временный файл
				ИмяФайлаОшибки = ВыгрузитьДанныеВФайл(ФайлыОшибкиОбработкиПакета[0].Данные);
				Если ЗначениеЗаполнено(ИмяФайлаОшибки) Тогда
					
					// загружаем XML из файла в дерево
					ДеревоXML = КонтекстЭДОСервер.ЗагрузитьXMLВДеревоЗначений(ИмяФайлаОшибки);
					ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаОшибки);
					Если ДеревоXML <> Неопределено Тогда
						
						// ищем узел "описание"
						УзелОписание = ДеревоXML.Строки.Найти("описание", "Имя", Истина);
						Если УзелОписание <> Неопределено Тогда
							ОписаниеОшибки = УзелОписание.Значение;
						КонецЕсли;
						
						УзелКодОшибки = ДеревоXML.Строки.Найти("кодОшибки", "Имя", Истина);
						Если УзелКодОшибки <> Неопределено Тогда
							ОписаниеОшибки = ОписаниеОшибки + " (код ошибки: " + УзелКодОшибки.Значение + ")";
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	// Отображение в виде дерева
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		// Нет
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР, Объект.Ссылка));
		// Да
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		// Да
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Объект.Ссылка));
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПредставлениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		Если Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
			ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
			Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП, Объект.Ссылка));
			Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		Иначе
			ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
			Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
		
	// 535 ИОН
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		
	//Заявление
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Объект.Ссылка));
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, Объект.Ссылка));
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
		
	//Документ
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ДокументНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП, Объект.Ссылка));
		
		Элементы.ГруппаСостояниеРезультатПриема.Видимость = Истина;
		Элементы.НадписьСостояниеРезультатПриема.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП, Объект.Ссылка));
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНО Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
		
	//Росстат
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС, Объект.Ссылка));
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС, Объект.Ссылка));
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.НадписьСостояниеСообщения.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС, Объект.Ссылка));
		Элементы.ГруппаСостояниеСообщения.Видимость = Истина;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНаВыпискуЕРГЮЛ_ЕГРИП
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросаНаВыпискуЕРГЮЛ_ЕГРИП Тогда
		Элементы.ГруппаСодержимоеСтраницы.ТекущаяСтраница = Элементы.СодержимоеДерево;
		ЗаполнитьДеревоСодержимого(Вложения, СодержимоеТранспортныхСообщений, Элементы.СодержимоеТранспортныхСообщений);
		Элементы.ГруппаСостояниеСообщения.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.КнопкаКонтейнер.Доступность = ТранспортныйКонтейнерПрисутствует;
	Элементы.КнопкаВложения.Доступность = (Вложения.Количество() > 0);
	
	Элементы.НадписьПодробнаяИнформация.Заголовок = КонтекстЭДОСервер.СформироватьСтрокуСостоянияТранспортногоСообщения(Объект);
	
	Если Объект.Статус = Перечисления.СтатусыПисем.Отправленное ИЛИ Объект.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		// скрываем кнопку отправки в командной панели действий формы, если сообщение отправлено или принято
		Элементы.КнопкаОтправить.Видимость = Ложь;
	Иначе
		Элементы.КнопкаОтправить.Видимость = Истина;
	КонецЕсли;
	
	// управление видимостью кнопок шифрования
	Если Объект.Статус = Перечисления.СтатусыПисем.Исходящее Тогда
		Элементы.КнопкаЗашифровать.Видимость = НЕ КонтекстЭДОСервер.СообщениеЗашифровано(Объект.Ссылка);
		Элементы.КнопкаРаспознать.Видимость = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
		Элементы.КнопкаЗашифровать.Видимость = НЕ КонтекстЭДОСервер.СообщениеЗашифровано(Объект.Ссылка);
		Элементы.КнопкаРаспознать.Видимость = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		Элементы.КнопкаЗашифровать.Видимость = Ложь;
		Элементы.КнопкаРаспознать.Видимость = Истина;
	КонецЕсли;
	
	УправлениеДоступностьюКнопкиПодписания();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюКнопкиПодписания()
	
	Статус = Объект.Статус;
	Элементы.СодержимоеТранспортныхСообщенийКонтекстноеМенюКнопкаПодписать.Видимость = (Статус = Перечисления.СтатусыПисем.Исходящее ИЛИ Статус = Перечисления.СтатусыПисем.Сохраненное);
	Элементы.СодержимоеТранспортныхСообщенийКонтекстноеМенюКнопкаПодписать.Доступность = (Статус = Перечисления.СтатусыПисем.Исходящее ИЛИ Статус = Перечисления.СтатусыПисем.Сохраненное);
	
КонецПроцедуры

&НаСервере
Функция ОтобразитьОтправителя()
	
	// формируем представление отправителя
	Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
		Представление = Объект.Отправитель;
	ИначеЕсли ЗначениеЗаполнено(Объект.ОтКогоПредставление) Тогда
		Представление = СокрЛП(Объект.ОтКогоПредставление);
	ИначеЕсли ЗначениеЗаполнено(Объект.ОтКогоАдрес) Тогда
		Представление = СокрЛП(Объект.ОтКогоАдрес);
	Иначе
		Представление = "<не определен>";
	КонецЕсли;
	
	// прорисовываем
	Отправитель = Представление;
	Элементы.Отправитель.Гиперссылка = (ТипЗнч(Представление) <> Тип("Строка"));
	
КонецФункции

&НаСервере
Функция ОтобразитьПолучателя()
	
	// формируем предсталение получателя
	Если ЗначениеЗаполнено(Объект.Получатель) Тогда
		Представление = Объект.Получатель;
	Иначе
		Если Объект.Кому.Количество() > 0 Тогда
			КомуАдрес = СокрЛП(Объект.Кому[0].АдресЭлектроннойПочты);
			КомуПредставление = СокрЛП(Объект.Кому[0].Представление);
			Если ЗначениеЗаполнено(КомуПредставление) Тогда
				Представление = СокрЛП(КомуПредставление);
			ИначеЕсли ЗначениеЗаполнено(КомуАдрес) Тогда
				Представление = СокрЛП(КомуАдрес);
			Иначе
				Представление = "<не определен>";
			КонецЕсли;
		Иначе
			Представление = "<не определен>";
		КонецЕсли;
	КонецЕсли;
	
	// прорисовываем
	Получатель = Представление;
	Элементы.Получатель.Гиперссылка = (ТипЗнч(Представление) <> Тип("Строка"));
	
КонецФункции

&НаСервере
Функция ВыгрузитьДанныеВФайл(Данные, ИмяФайла = Неопределено, ОписаниеОшибки = Неопределено)
	
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	Попытка
		Данные.Получить().Записать(ИмяФайла);
		Возврат ИмяФайла;
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоСодержимого(ВложенияТекущегоСообщения, Содержимое, ТПСодержимого)
	
	
	ТипыДИВ = Новый Массив;
	
	// отчетность ПФР
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР);
	
	// неформализованные ПФР
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация);
	
	// запросы ПФР
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияЗапросаПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияЗапросПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветПриложениеНаЗапросПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросПФР);
	
	// отчетность ФСГС
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОПриемеВОбработкуОтчетаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОНесоответствииФорматуОтчетаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииОтчетаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтчетаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеФайлаОтчетностиФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолученииДокументаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОператораФСГС);
	
	// переписка с Росстатом
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПриложениеПисьмаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьмаФСГС);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.РассылкаФСГС);
	
	// ФНС
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос);
	
	//Представление
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ДоверенностьПредставление);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПредставление);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправкиПредставление);
	
	//Документ
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеДокумент);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеДокумент);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент);
	
	//Заявление
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗаявление);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления);
	
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПростОтметки);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтметки);
	
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПроверке);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОбОтзывеЗаявления);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОНесоответствиях);
	
	ПриоритетыПрорисовкиДИВ = Новый Соответствие;
	
	// отчетность ПФР
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР, 1);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР, 6);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР, 4);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР, 5);
	
	// неформализованные ПФР
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма, 4);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма, 1);
	
	// запросы в ПФР
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОС, 4);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросПФР, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветПриложениеНаЗапросПФР, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияЗапросаПФР, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияЗапросПФР, 1);
	
	// отчетность ФСГС
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиФСГС, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОПриемеВОбработкуОтчетаФСГС, 1);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОНесоответствииФорматуОтчетаФСГС, 1);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииОтчетаФСГС, 1);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтчетаФСГС, 1);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеФайлаОтчетностиФСГС, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолученииДокументаФСГС, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОператораФСГС, 4);
	
	// переписка с Росстатом
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоФСГС, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.РассылкаФСГС, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПриложениеПисьмаФСГС, 4);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьмаФСГС, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация, 6);
	
	// отчетность ФНС
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений, 8);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ, 8);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка, 8);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение, 6);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность, 7);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки, 4);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения, 4);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении, 1);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос, 8);
	
	// представление
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ДоверенностьПредставление, 7);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПредставление, 8);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправкиПредставление, 4);
	
	// документ
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеДокумент, 7);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеДокумент, 3);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент, 3);
	
	//Заявление
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление, 5);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗаявление, 8);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления, 3);
	
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПростОтметки, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтметки, 2);
	
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПроверке, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОбОтзывеЗаявления, 2);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОНесоответствиях, 2);
	
	//// запрос на выписку ЕГРЮЛ/ЕГРИП
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП, 1);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросВыпискиИзЕГРЮЛ_ЕГРИП, 1);
	ПриоритетыПрорисовкиДИВ.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.РезультатОбработкиЗапросаНаВыпискуЕГРЮЛ_ЕГРИП, 2);
	
	Содержимое.ПолучитьЭлементы().Очистить();
	
	// во вложениях текущего сообщения ищем подписи под документами из других сообщений
	ИменаПодписанныхФайловИзДругихСообщений = Новый Массив;
	Для Каждого ВложениеТекущегоСообщения Из ВложенияТекущегоСообщения Цикл
		Если ВложениеТекущегоСообщения.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
			ПодписанныйФайл = ВложенияТекущегоСообщения.Найти(ВложениеТекущегоСообщения.ЭЦПИмяПодписанногоФайла, "ИмяФайла");
			Если ПодписанныйФайл = Неопределено Тогда
				ИменаПодписанныхФайловИзДругихСообщений.Добавить(ВложениеТекущегоСообщения.ЭЦПИмяПодписанногоФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// если это возможно, ищем подписанные документы в сообщениях-основаниях
	Если ИменаПодписанныхФайловИзДругихСообщений.Количество() > 0 Тогда
		
		// для некоторых входящих сообщений необходимо вручную указать сообщение-основание, из которого необходимо брать ДИВ
		СообщениеВладелец = Объект.Основание;
		Если НЕ ЗначениеЗаполнено(СообщениеВладелец) Тогда
			
			Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
			ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияЗапросаПФР Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР);
			ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
			ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
			ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
			ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП);
			ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
			ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП);	
			// Добавить особые типы сообщений ФНС 534.
			
			ИначеЕсли Объект.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОПриемеВОбработкуОтчетаФСГС
				  ИЛИ Объект.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОНесоответствииФорматуОтчетаФСГС
				  ИЛИ Объект.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииОтчетаФСГС
				  ИЛИ Объект.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтчетаФСГС Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС);
			ИначеЕсли Объект.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОператораФСГС Тогда
				СообщениеВладелец = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Вложения.Колонки.Добавить("ПриоритетТипа");
	Вложения.Колонки.Добавить("СообщениеВладелец");
	
	// добавляем к таблице вложений текущего сообщения файлы сообщения-основания
	Если ЗначениеЗаполнено(СообщениеВладелец) Тогда
		ВложенияОснования = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(СообщениеВладелец, , , ИменаПодписанныхФайловИзДругихСообщений);
		Для Каждого ВложениеОснования Из ВложенияОснования Цикл
			НовВложение = Вложения.Добавить();
			ЗаполнитьЗначенияСвойств(НовВложение, ВложениеОснования);
			НовВложение.СообщениеВладелец = СообщениеВладелец;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Вложение Из Вложения Цикл
		Вложение.ПриоритетТипа = ПриоритетыПрорисовкиДИВ[Вложение.Тип];
	КонецЦикла;
	Вложения.Сортировать("ПриоритетТипа, Тип, ИмяФайла");
	
	// помещаем ДИВы на первый уровень дерева
	Для Каждого Вложение Из Вложения Цикл
		Если ЗначениеЗаполнено(Вложение.ПриоритетТипа) Тогда
			ОпределитьСтрокуВДеревеСодержимого(Содержимое, Вложение.ИмяФайла, Вложение.Тип, Вложение.СообщениеВладелец, , , , Вложение.ТипФайлаОтчетностиПФР, 1);
		КонецЕсли;
	КонецЦикла;
	
	// помещаем ЭЦП на второй уровень
	Для Каждого Вложение Из Вложения Цикл
		Если Вложение.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
			ИмяПодписанногоФайла = Вложение.ЭЦПИмяПодписанногоФайла;
			СтрПодписанныйФайл = Неопределено;
			Для Каждого ЭлСодержимое Из Содержимое.ПолучитьЭлементы() Цикл 
				Если ЭлСодержимое.Имя = ИмяПодписанногоФайла Тогда 
					СтрПодписанныйФайл = ЭлСодержимое;
				КонецЕсли;
			КонецЦикла;
			Если СтрПодписанныйФайл <> Неопределено Тогда
				ОпределитьСтрокуВДеревеСодержимого(СтрПодписанныйФайл, Вложение.ИмяФайла, Вложение.Тип, , Вложение.ЭЦПСертификат, Вложение.ЭЦПЭтоПодписьАбонента, Вложение.ЭЦПСтатусПроверки, 2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// оформить строки 
	ОформитьСтроки(Содержимое);
	
КонецПроцедуры

&НаСервере
Функция ОформитьСтроки(Содержимое)

	Для Каждого Узел Из Содержимое.ПолучитьЭлементы() Цикл
		ОформитьСтрокуСодержимого(Узел);
		ОформитьСтроки(Узел)
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОформитьСтрокуСодержимого(ДанныеСтроки)
	
		ДанныеСтроки.СтатусКартинка = 0; //Нет картинки
		ПредставлениеЯчейки = "";
		
		Если ЗначениеЗаполнено(ДанныеСтроки.СообщениеВладелец) Тогда
			ДанныеСтроки.СтатусКартинка = 1; //Ярлык
		КонецЕсли;
		
		ТипДанных = ДанныеСтроки.Тип;
		
		// типы ПФР
		Если ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР Тогда
			
			ПредставлениеЯчейки = "Файл отчетности";
			Если ЗначениеЗаполнено(ДанныеСтроки.ТипФайлаОтчетности) Тогда
				ПредставлениеЯчейки = ПредставлениеЯчейки + " (" + ДанныеСтроки.ТипФайлаОтчетности + ")";
			КонецЕсли;
			
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР Тогда
			ПредставлениеЯчейки = "Подтверждение получения";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР Тогда
			ПредставлениеЯчейки = "Протокол";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР Тогда
			ПредставлениеЯчейки = "Приложение к протоколу";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР Тогда
			ПредставлениеЯчейки = "Описание сведений";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР Тогда
			ПредставлениеЯчейки = "Приложение";			
			
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияЗапросПФР Тогда
			ПредставлениеЯчейки = "Подтверждение получения";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросПФР Тогда
			ПредставлениеЯчейки = "Ответ на запрос";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветПриложениеНаЗапросПФР Тогда
			ПредставлениеЯчейки = "Приложение к ответу на запрос";
		
		// типы ФНС
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности Тогда
			ПредставлениеЯчейки = "Файл отчетности";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений Тогда
			ПредставлениеЯчейки = "Описание сведений";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ Тогда
			ПредставлениеЯчейки = "Описание сведений";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность Тогда
			ПредставлениеЯчейки = "Доверенность";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки Тогда
			ПредставлениеЯчейки = "Подтверждение даты отправки";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе Тогда
			ПредставлениеЯчейки = "Уведомление об отказе";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме Тогда
			ПредставлениеЯчейки = "Квитанция о приеме";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе Тогда
			ПредставлениеЯчейки = "Извещение о вводе";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении Тогда
			ПредставлениеЯчейки = "Уведомление об уточнении";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении Тогда
			ПредставлениеЯчейки = "Извещение о получении";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ Тогда
			ПредставлениеЯчейки = "Сведения 2-НДФЛ";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ Тогда
			ПредставлениеЯчейки = "Протокол приема 2-НДФЛ";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ Тогда
			ПредставлениеЯчейки = "Реестр сведений 2-НДФЛ";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение Тогда
			ПредставлениеЯчейки = "Обращение";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение Тогда
			ПредставлениеЯчейки = "Приложение";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения Тогда
			ПредставлениеЯчейки = "Подтверждение даты получения";
			
		// Представление
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление Тогда
			ПредставлениеЯчейки = "Представление";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ДоверенностьПредставление Тогда
			ПредставлениеЯчейки = "Доверенность";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПредставление Тогда
			ПредставлениеЯчейки = "Описание сведений";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправкиПредставление Тогда
			ПредставлениеЯчейки = "Подтверждение даты отправки";
			
		//Документ
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Документ Тогда
			ПредставлениеЯчейки = "Документ";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеДокумент Тогда
			ПредставлениеЯчейки = "Описание сведений";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеДокумент Тогда
			ПредставлениеЯчейки = "Уведомление об отказе";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеДокумент Тогда
			ПредставлениеЯчейки = "Квитанция о приеме";
			
		// типы Заявления
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Заявление Тогда
			ПредставлениеЯчейки = "Заявление";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗаявление Тогда
			ПредставлениеЯчейки = "Описание сведений";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления Тогда
			ПредставлениеЯчейки = "Квитанция о приеме";
			
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПростОтметки Тогда
			ПредставлениеЯчейки = "Сообщение о проставлении отметки";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтметки Тогда
			ПредставлениеЯчейки = "Уведомление об отказе в проставлении отметки";
			
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОПроверке Тогда
			ПредставлениеЯчейки = "Сообщение о проверке";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОбОтзывеЗаявления Тогда
			ПредставлениеЯчейки = "Сообщение об отзыве";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СообщениеОНесоответствиях Тогда
			ПредставлениеЯчейки = "Сообщение о несоответствиях";
			
		// типы Росстат
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиФСГС Тогда
			
			ПредставлениеЯчейки = "Файл отчетности";
			Если ЗначениеЗаполнено(ДанныеСтроки.ТипФайлаОтчетности) Тогда
				ПредставлениеЯчейки = ПредставлениеЯчейки + " (" + ДанныеСтроки.ТипФайлаОтчетности + ")";
			КонецЕсли;
			
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолученииДокументаФСГС Тогда
			ПредставлениеЯчейки = "Извещение о получении документа";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОПриемеВОбработкуОтчетаФСГС Тогда
			ПредставлениеЯчейки = "Уведомление о приеме в обработку";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииОтчетаФСГС Тогда
			ПредставлениеЯчейки = "Уведомление об уточнении";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОНесоответствииФорматуОтчетаФСГС Тогда
			ПредставлениеЯчейки = "Уведомление о несоответствии формату";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказеОтчетаФСГС Тогда
			ПредставлениеЯчейки = "Уведомление об отказе";
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеФайлаОтчетностиФСГС Тогда
			ПредставлениеЯчейки = "Описание отчета";
			
		// общие типы
		ИначеЕсли ТипДанных = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
			
			ДанныеСтроки.СтатусКартинка = 2; //ЭлектронноЦифроваяПодпись
			
			Если ДанныеСтроки.ЭЦПЭтоПодписьАбонента Тогда
				ПредставлениеЯчейки = "Электронная подпись абонента";
				Если Объект.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФСГС Тогда
					ПредставлениеЯчейки = "Электронная подпись респондента";
				КонецЕсли;
			ИначеЕсли Объект.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
				ПредставлениеЯчейки = "Электронная подпись представителя ПФР";
			Иначе
				Если (Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО
				ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО
				ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО
				ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО
				ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО
				ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС)
				И НЕ Объект.УчетнаяЗапись.ОбменНапрямую Тогда
					ПредставлениеЯчейки = "Электронная подпись представителя оператора электронного документооборота";
				Иначе
					Если Объект.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФСГС
					 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС
					 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС
					 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоИсходящееФСГС Тогда
						ПредставлениеЯчейки = "Электронная подпись представителя ТОГС";
					Иначе
						ПредставлениеЯчейки = "Электронная подпись представителя ФНС";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСтроки.ТекстОформленияСтроки = ПредставлениеЯчейки;

КонецПроцедуры

&НаСервере
Процедура ОпределитьСтрокуВДеревеСодержимого(ДеревоСодержимого, ИмяСодержимого, ТипСодержимого, СообщениеВладелец = Неопределено, СертификатПодписи = Неопределено, ПризнакПодписиАбонента = Неопределено, СтатусПроверкиПодписи = Неопределено, ТипФайлаОтчетности = Неопределено, ТекстОформленияУровень = 0)
	
	НовСтр = ДеревоСодержимого.ПолучитьЭлементы().Добавить();
	НовСтр.Имя = ИмяСодержимого;
	НовСтр.Тип = ТипСодержимого;
	НовСтр.СообщениеВладелец = СообщениеВладелец;
	НовСтр.ЭЦПСертификат = СертификатПодписи;
	НовСтр.ЭЦПЭтоПодписьАбонента = ПризнакПодписиАбонента;
	НовСтр.ЭЦПСтатусПроверки = СтатусПроверкиПодписи;
	НовСтр.ТипФайлаОтчетности = ТипФайлаОтчетности;
	НовСтр.ТекстОформленияУровень = ТекстОформленияУровень;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПакет(СсылкаНаОбъект, Оповещать, ВыполняемоеОповещение)
	
	КонтекстЭДОКлиент.СформироватьПакет(ВыполняемоеОповещение, СсылкаНаОбъект, Оповещать);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьТСЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаРасшифроватьТСПослеРасшифровкиЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.РасшифроватьТранспортноеСообщение(Объект, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьТСПослеРасшифровкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьСодержимоеТСЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	КонтекстЭДОКлиент.УдалитьТранспортныйКонтейнерНаКлиенте(Объект.Ссылка);
	ОбновитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТранспортныйКонтейнерНаСервере()
	
	Если КонтекстЭДОСервер = Неопределено Тогда 
		// инициализируем контекст ЭДО - модуль обработки
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаКонтейнеры.Очистить();
	ПолученныеКонтейнеры = КонтекстЭДОСервер.ПолучитьТранспортныйКонтейнер(Объект.Ссылка, Истина);
	Для Каждого ПолученныйКонтейнер Из ПолученныеКонтейнеры Цикл
		ГУИД = Новый УникальныйИдентификатор;
		Адрес = ПоместитьВоВременноеХранилище(ПолученныйКонтейнер.Данные.Получить(), ГУИД);
		НовыйКонтейнер = ФормаКонтейнеры.Добавить();
		НовыйКонтейнер.Адрес = Адрес;
		НовыйКонтейнер.ИмяФайла = ПолученныйКонтейнер.ИмяФайла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенияТранспортногоСообщенияНаСервере()
	
	Если КонтекстЭДОСервер = Неопределено Тогда 
		// инициализируем контекст ЭДО - модуль обработки
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаВложения.Очистить();
	ПолученныеВложения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина);
	Для Каждого ПолученноеВложение Из ПолученныеВложения Цикл
		ГУИД = Новый УникальныйИдентификатор;
		Адрес = ПоместитьВоВременноеХранилище(ПолученноеВложение.Данные.Получить(), ГУИД);
		НовоеВложение = ФормаВложения.Добавить();
		НовоеВложение.Адрес = Адрес;
		НовоеВложение.ИмяФайла = ПолученноеВложение.ИмяФайла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПосмотретьВложенияНажатиеПоказатьВыборЭлементаЗавершение(ВложениеДляОткрытия, ДополнительныеПараметры) Экспорт

	Если ВложениеДляОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(ВложениеДляОткрытия.Значение, ВложениеДляОткрытия.Представление);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКонтейнеров(ОбъектСсылка)
	
	Если КонтекстЭДОСервер = Неопределено Тогда 
		// инициализируем контекст ЭДО - модуль обработки
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Контейнеры = КонтекстЭДОСервер.ПолучитьТранспортныйКонтейнер(ОбъектСсылка, Истина);
	
	СписокКонтейнеров = Новый СписокЗначений;
	Для Каждого Контейнер Из Контейнеры Цикл
		ГУИД = Новый УникальныйИдентификатор;
		Адрес = ПоместитьВоВременноеХранилище(Контейнер.Данные.Получить(), ГУИД);
		СписокКонтейнеров.Добавить(Адрес, Контейнер.ИмяФайла);
	КонецЦикла;
	Возврат СписокКонтейнеров;
	
КонецФункции

&НаКлиенте
Процедура НадписьСостояниеСообщенияНажатиеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПоказатьПодтверждениеПослеВвода", ЭтотОбъект);
		КонтекстЭДОКлиент.ВвестиПодтверждение(Оповещение, Объект.ЦиклОбмена, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодтверждениеПослеВвода(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> Неопределено Тогда 
		ОткрытьФорму("Документ.ТранспортноеСообщение.ФормаОбъекта", Новый Структура("Ключ", Результат));
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеПодтверждений(ТипСообщения)
	
	СоответствиеПодтверждений = Новый Соответствие;
	ТипыТранспортныхСообщений = Перечисления.ТипыТранспортныхСообщений;
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО ,ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатПриемаЗапросНО ,ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО ,ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО ,ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РассылкаНО ,ТипыТранспортныхСообщений.ИзвещениеРассылкаНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПисьмоНО ,ТипыТранспортныхСообщений.ИзвещениеПисьмоНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО ,ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО ,ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО ,ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПодтверждениеПредставлениеНО ,ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО ,ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО ,ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО ,ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПисьмоВходящееПФР ,ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПротоколПФР ,ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ОтветНаЗапросПФР ,ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПодтверждениеЗапросНО ,ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО, ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО , ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО , ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО , ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО , ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО , ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ДокументНО , ТипыТранспортныхСообщений.ИзвещениеДокументНП);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПисьмоВходящееФСГС ,ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС ,ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС);
	СоответствиеПодтверждений.Вставить(ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС ,ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС);
	
	Возврат СоответствиеПодтверждений[ТипСообщения];
КонецФункции

&НаСервере
Функция НадписьНажатиеОбработатьНаСервере()

	Если КонтекстЭДОСервер = Неопределено Тогда 
		// инициализируем контекст ЭДО - модуль обработки
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Сообщение = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, ПолучитьСоответствиеПодтверждений(Объект.Тип), Объект.Ссылка);
	Если Сообщение = Документы.ТранспортноеСообщение.ПустаяСсылка() Тогда
		ЗапросНаВвод = КонтекстЭДОСервер.ЗапросНаВводПодтверждения(Объект.ЦиклОбмена, Объект.Ссылка);
		Если ЗапросНаВвод = Неопределено Тогда 
			Возврат Неопределено;
		ИначеЕсли ТипЗнч(ЗапросНаВвод) = Тип("Структура") Тогда 
			Возврат ЗапросНаВвод;
		КонецЕсли;
	Иначе
		Возврат Сообщение;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция УровеньЭлементаДерева(ЭлементДерева)
	Уровень = 0;
	ПредыдущийЭлемент = ЭлементДерева.ПолучитьРодителя();
	Пока Истина Цикл
		Если ПредыдущийЭлемент = Неопределено Тогда 
			Возврат Уровень;
		Иначе
			ПредыдущийЭлемент = ПредыдущийЭлемент.ПолучитьРодителя();
			Уровень = Уровень + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Уровень;
КонецФункции

&НаКлиенте
Процедура КомандаСодержимоеТранспортныхСообщенийКонтекстноеМенюПодписать(Команда)
	
	ТекСтр = ТекущийЭлемент.ТекущиеДанные;
	Если ТипЗнч(ТекСтр) <> Тип("ДанныеФормыЭлементДерева") Тогда
		ПоказатьПредупреждение(, "Выберите документ для подписания.");
		Возврат;
	КонецЕсли;
	
	Если УровеньЭлементаДерева(ТекСтр) = 1 Тогда
		ТекСтр = ТекСтр.ПолучитьРодителя();
	КонецЕсли;
	
	ПоказатьОкноПодписанияДокумента(ТекСтр);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОкноПодписанияДокумента(ВыбраннаяСтрока)
	
	ПараметрыФормы = Новый Структура("ТранспортноеСообщение, ИмяФайлаДокумента, РаботаСЭЦПАбонента, РаботаСЭЦППрочихУчастников");
	ПараметрыФормы.ТранспортноеСообщение = Объект.Ссылка;
	ПараметрыФормы.ИмяФайлаДокумента = ВыбраннаяСтрока.Имя;
	ПараметрыФормы.РаботаСЭЦПАбонента = Истина;
	ПараметрыФормы.РаботаСЭЦППрочихУчастников = Ложь;

	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьОкноПодписанияДокументаЗавершение", ЭтотОбъект);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПодписиПодДокументами", ПараметрыФормы, Новый УникальныйИдентификатор,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОкноПодписанияДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	КомандаПеречитать(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗашифроватьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьПакетЗавершение", ЭтотОбъект);
	СформироватьПакет(Объект.Ссылка, Истина, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПакетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		// вызываем отправку
		КонтекстЭДОКлиент.АвтоматическаяНастройкаУчетнойЗаписи(Объект.УчетнаяЗапись, Объект.Отправитель, , , );
		Если КонтекстЭДОКлиент.ОтправитьТранспортноеСообщение(Объект.Ссылка) Тогда
			ОбновитьДанные();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоРаботаСЭЦПАбонента(Тип)
	
	Если Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР
	
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееЗапросПФР
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросКвитанцияПФР
	
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП
	
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДокументНП
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП
	
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНП
	
	//Росстат
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееФСГС
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоВходящееФСГС
	ИЛИ Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоФорматДокументооборотаПриказ534(ЦиклОбмена)
	Возврат ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
КонецФункции

#Область ПоказВложенийПФРиФНС354иРосстата

Функция РасширениеФайлаПоКраткомуИмени(КраткоеИмя)
	
	ДлинаИмени = СтрДлина(КраткоеИмя);
	Для ОбратныйИнд = 1 По ДлинаИмени Цикл
		Инд = ДлинаИмени - ОбратныйИнд + 1;
		Если Сред(КраткоеИмя, Инд, 1) = "." Тогда
			Возврат СокрЛП(Сред(КраткоеИмя, Инд + 1));
		КонецЕсли;
	КонецЦикла;
	Возврат "";
	
КонецФункции

&НаСервере
Функция ПолучитьРезультатПриемаНаСервере()

	Если КонтекстЭДОСервер = Неопределено Тогда 
		// инициализируем контекст ЭДО - модуль обработки
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Сообщение = КонтекстЭДОСервер.ПолучитьСообщениеЦиклаОбмена(Объект.ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДокументНП, Объект.Ссылка);
	Если Сообщение = Документы.ТранспортноеСообщение.ПустаяСсылка() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Сообщение;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура НадписьСостояниеРезультатПриемаНажатие(Элемент)
	
	РезультатПриема = ПолучитьРезультатПриемаНаСервере();
	Если РезультатПриема = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("НадписьСостояниеРезультатПриемаНажатиеВопросЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Подтвердить прием документов налогового органа?" + Символы.ПС
					 + "При нажатии ""Да"" сформируется подтверждение об успешном приеме," + Символы.ПС
					 + "(после отправки подтверждения приема следует сформировать ответ, содержащий затребованные документы)" + Символы.ПС
					 + "при нажатии ""Нет"" сформируется отказ в приеме," + Символы.ПС
					 + "при нажатии ""Отмена"" формирование результата приема будет отменено."
					 , РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Возврат;
	Иначе
		ПоказатьЗначение(, РезультатПриема);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьСостояниеРезультатПриемаНажатиеВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ПоложительныйРезультат = Неопределено;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПоложительныйРезультат = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ПоложительныйРезультат = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"НадписьСостояниеРезультатПриемаНажатиеВопросЗавершениеПослеСозданияСообщения", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.СоздатьРезультатПриемаНаКлиентеСУчетомВопроса(Оповещение, Объект.Ссылка, ПоложительныйРезультат, Истина);		
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСостояниеРезультатПриемаНажатиеВопросЗавершениеПослеСозданияСообщения(РезультатПриема, ВходящийКонтекст) Экспорт

	Если РезультатПриема <> Неопределено Тогда
		ПоказатьЗначение(, РезультатПриема);
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВложениеФСГС(СвойстваДокумента)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	Результат = ПолучитьСтрокуВложенияНаСервере(СообщениеВладелецФайла, ИмяФайлаДокумента);
	Если Результат.Свойство("Предупреждение") Тогда 
		ПоказатьПредупреждение(, Результат.Предупреждение);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьВложениеФСГС(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодтверждениеПолученияФСГС(СвойстваДокумента)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьПодтверждениеПолученияФСГС(Объект.ЦиклОбмена, СообщениеВладелецФайла, ИмяФайлаДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПротоколФСГС(СвойстваДокумента, ПечатьВозможна = Ложь)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьПротоколФСГС(Объект.ЦиклОбмена, СообщениеВладелецФайла, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтветНаЗапросИОС(СвойстваДокумента)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьОтветНаЗапросИОСИзФормыТранспортногоСообщения(СообщениеВладелецФайла, ИмяФайлаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтветПриложениеНаЗапросИОС(СвойстваДокумента)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	Результат = ПолучитьСтрокуВложенияНаСервере(СообщениеВладелецФайла, ИмяФайлаДокумента);
	Если Результат.Свойство("Предупреждение") Тогда 
		ПоказатьПредупреждение(, Результат.Предупреждение);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьПриложениеКОтветуНаЗапросПФР(Результат);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодтверждениеПолученияЗапросаПФР(СвойстваДокумента)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьПодтверждениеПолученияЗапросаПФР(СообщениеВладелецФайла, ИмяФайлаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЭлектронноЦифровуюПодпись(ВыбраннаяСтрокаИД)
	
	ВыбраннаяСтрока = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрокаИД);
	
	Если КонтекстЭДОКлиент.ПутьКОбъекту = Неопределено Тогда 
		ПутьКОбъекту = "Обработка.ДокументооборотСКонтролирующимиОрганами";
	Иначе 
		ПутьКОбъекту = КонтекстЭДОКлиент.ПутьКОбъекту;
	КонецЕсли;
	
	Если ЭтоРаботаСЭЦПАбонента(Объект.Тип) Тогда 
		РаботаСЭЦПАбонента = Истина;
		РаботаСЭЦППрочихУчастников = Ложь;
	Иначе
		РаботаСЭЦПАбонента = Ложь;
		РаботаСЭЦППрочихУчастников = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТранспортноеСообщение, ИмяФайлаДокумента, РаботаСЭЦПАбонента, РаботаСЭЦППрочихУчастников");
	ПараметрыФормы.ТранспортноеСообщение = Объект.Ссылка;
	ПараметрыФормы.ИмяФайлаДокумента = ВыбраннаяСтрока.ПолучитьРодителя().Имя;
	ПараметрыФормы.РаботаСЭЦПАбонента = РаботаСЭЦПАбонента;
	ПараметрыФормы.РаботаСЭЦППрочихУчастников = РаботаСЭЦППрочихУчастников;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьЭлектронноЦифровуюПодписьЗавершение", ЭтотОбъект);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПодписиПодДокументами", ПараметрыФормы, Новый УникальныйИдентификатор,,,, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЭлектронноЦифровуюПодписьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодтверждениеПолученияПФР(СвойстваДокумента, ПечатьВозможна = Ложь)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьПодтверждениеПолученияПФР(Объект.ЦиклОбмена, СообщениеВладелецФайла, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПротоколПФР(СвойстваДокумента, ПечатьВозможна = Ложь)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	КонтекстЭДОКлиент.ПоказатьПротоколПФР(Объект.ЦиклОбмена, СообщениеВладелецФайла, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПриложениеПФР(СвойстваДокумента)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	Результат = ПолучитьСтрокуВложенияНаСервере(СообщениеВладелецФайла, ИмяФайлаДокумента);
	Если Результат.Свойство("Предупреждение") Тогда 
		ПоказатьПредупреждение(, Результат.Предупреждение);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьПриложениеПФР(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодтверждениеПолученияПисьмаПФР(СвойстваДокумента)
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьПодтверждениеПолученияПисьмаПФР(СообщениеВладелецФайла, ИмяФайлаДокумента);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуВложенияНаСервере(СообщениеПротокол, ИмяФайлаДокумента)
	
	Возврат КонтекстЭДОКлиент.ПолучитьСтрокуВложенияНаСервере(СообщениеПротокол,ИмяФайлаДокумента);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФайлОтчетности(ВыбраннаяСтрокаИД, ПолеНастроекПечати = Неопределено)
	
	СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрокаИД);
	// определяем тип содержимого
	РасширениеФайла = РасширениеФайлаПоКраткомуИмени(СвойстваДокумента.Имя);
	ЭтоXML = (нрег(РасширениеФайла) = "xml");
	
	// вызываем соответствующую процедуру визуализации
	Если ЭтоXML Тогда
		ПоказатьКакXML(СвойстваДокумента, ?(ПечатьВозможнаДляЦиклаОбмена, ПолеНастроекПечати, Неопределено));
	Иначе
		ПоказатьКакТекст(СвойстваДокумента, , ?(ПечатьВозможнаДляЦиклаОбмена, ПолеНастроекПечати, Неопределено));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКакXML(СвойстваДокумента, ПолеНастроекПечати = Неопределено)
	
	Если ТипЗнч(СвойстваДокумента) = Тип("Число") Тогда
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(СвойстваДокумента);
	КонецЕсли;
	
	// определяем сообщение-источник документа
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	
	// получаем исходное имя
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	#Если ВебКлиент Тогда
		ИспользоватьВК = Истина;
	#Иначе
		ИспользоватьВК = Ложь;
	#КонецЕсли
	
	// получаем вложение
	Вложения = ПолучитьСтруктуруВложений(СообщениеВладелецФайла, ИмяФайлаДокумента, ИспользоватьВК);
	Если Вложения = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Вложения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Документ не найден в информационной базе.");
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		Строка64 = Вложения[0].Данные;
		ПоказатьTXTИзФайла(Строка64, ИмяФайлаДокумента, , ?(ПечатьВозможнаДляЦиклаОбмена, ПолеНастроекПечати, Неопределено));
		
	#Иначе
		// сохраняем вложение во временный файл
		ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
		Вложения[0].Данные.Записать(ВременныйФайл);
		
		// показываем
		ПоказатьXMLИзФайла(ВременныйФайл, ИмяФайлаДокумента, ?(ПечатьВозможнаДляЦиклаОбмена, ПолеНастроекПечати, Неопределено));
		
		// удаление временного файла перенесено в обработчик закрытия формы
		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьXMLИзФайла(ИмяФайлаСодержимого, ИсходноеИмяФайла, ПолеНастроекПечати = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФайла",           ИсходноеИмяФайла);
	СтруктураПараметров.Вставить("Содержимое",         ИмяФайлаСодержимого);
	СтруктураПараметров.Вставить("ЦиклОбмена",         Объект.ЦиклОбмена);
	СтруктураПараметров.Вставить("ПолеНастроекПечати", ?(ПечатьВозможнаДляЦиклаОбмена, ПолеНастроекПечати, Неопределено));
	
	ДополнительныеПараметры = Новый Структура("ИмяФайлаСодержимого", ИмяФайлаСодержимого);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьXMLИзФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПросмотрHTML", 
		СтруктураПараметров,
		,
		,
		,
		,
		ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьXMLИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВременныйФайл = ДополнительныеПараметры.ИмяФайлаСодержимого;
	
	// удаляем временный файл с вложением
	ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВременныйФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКакТекст(СвойстваДокумента, Кодировка = Неопределено, ПолеНастроекПечати = Неопределено)
	
	Если ТипЗнч(СвойстваДокумента) = Тип("Число") Тогда
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(СвойстваДокумента);
	КонецЕсли;
	
	СообщениеВладелецФайла = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	#Если ВебКлиент Тогда
		ИспользоватьВК = Истина;
	#Иначе
		ИспользоватьВК = Ложь;
	#КонецЕсли
	
	Вложения = ПолучитьСтруктуруВложений(СообщениеВладелецФайла, ИмяФайлаДокумента, ИспользоватьВК);
	
	Если Вложения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Документ не найден в информационной базе.");
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		ПоказатьTXTИзФайла(Вложения[0].Данные, ИмяФайлаДокумента, Кодировка, ?(ПечатьВозможнаДляЦиклаОбмена, ПолеНастроекПечати, Неопределено));
		
	#Иначе
		
		Если Кодировка = Неопределено Тогда
			РасширениеФайла = РасширениеФайлаПоКраткомуИмени(ИмяФайлаДокумента);
			Если нрег(РасширениеФайла) = "txt" Тогда
				Кодировка = "cp866";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПечатьВозможнаДляЦиклаОбмена ИЛИ ПолеНастроекПечати = Неопределено Тогда
			ВременныйФайл = ПолучитьИмяВременногоФайла();
			Вложения[0].Данные.Записать(ВременныйФайл);
			
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ВременныйФайл, Кодировка);
			Текст.ТолькоПросмотр = Истина;
			Текст.Показать(ИмяФайлаДокумента + " - просмотр");
			
			ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВременныйФайл);
		Иначе
			ПоказатьTXTИзФайла(Вложения[0].Данные, ИмяФайлаДокумента, Кодировка, ПолеНастроекПечати);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьTXTИзФайла(ИмяФайлаСодержимого, ИсходноеИмяФайла, Кодировка = Неопределено, ПолеНастроекПечати = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяФайла",           ИсходноеИмяФайла);
	СтруктураПараметров.Вставить("Содержимое",         ИмяФайлаСодержимого);
	СтруктураПараметров.Вставить("Кодировка",          Кодировка);
	СтруктураПараметров.Вставить("ЦиклОбмена",         Объект.ЦиклОбмена);
	СтруктураПараметров.Вставить("ПолеНастроекПечати", ?(ПечатьВозможнаДляЦиклаОбмена, ПолеНастроекПечати, Неопределено));
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПросмотрТекст", 
		СтруктураПараметров,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруВложений(СообщениеВладелецФайла, ИмяФайлаДокумента, ЭтоВЕБ = Ложь)
	
	Если КонтекстЭДОСервер = Неопределено Тогда 
		// инициализируем контекст ЭДО - модуль обработки
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Вложения транспортного сообщения недоступны.%1'"),
																							Символы.ПС + ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Вложения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(СообщениеВладелецФайла, Истина, , ИмяФайлаДокумента);
	
	МассивСтруктур = Новый Массив;
	Для Каждого Вложение Из Вложения Цикл 
		
		Если ЭтоВЕБ Тогда 
			
			ЭлементМассива = Новый Структура("ИмяФайла, Данные", ИмяФайлаДокумента, Вложение.Данные.Получить());
			МассивСтруктур.Добавить(ЭлементМассива);
			
		Иначе 
			
			ЭлементМассива = Новый Структура("ИмяФайла, Данные", ИмяФайлаДокумента, Вложение.Данные.Получить());
			МассивСтруктур.Добавить(ЭлементМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьПодтверждениеДатыОтправки(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаПодтверждения = СвойстваДокумента.Имя;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Сообщение",             Сообщение);
	СтруктураПараметров.Вставить("ИмяФайлаПодтверждения", ИмяФайлаПодтверждения);
	СтруктураПараметров.Вставить("ЦиклОбмена",            Объект.ЦиклОбмена);
	СтруктураПараметров.Вставить("ПечатьВозможна",        ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);

	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПодтверждениеДатыОтправки", 
		СтруктураПараметров,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУведомлениеОбОтказе(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаУведомления = СвойстваДокумента.Имя;
	КонтекстЭДОКлиент.ПоказатьУведомлениеОбОтказе(Объект.ЦиклОбмена, Сообщение, Объект.Тип, ИмяФайлаУведомления, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКвитанциюОПриеме(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаКвитанции = СвойстваДокумента.Имя;
	КонтекстЭДОКлиент.ПоказатьКвитанциюОПриеме(Объект.ЦиклОбмена, Сообщение, Объект.Тип, ИмяФайлаКвитанции, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзвещениеОВводе(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаИзвещения = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьИзвещениеОВводе(Объект.ЦиклОбмена, Сообщение, ИмяФайлаИзвещения, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУведомлениеОбУточнении504(ВыбраннаяСтрока, ПечатьВозможна = Ложь)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаУведомления = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьУведомлениеОбУточнении504(Объект.ЦиклОбмена, Сообщение, ИмяФайлаУведомления, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзвещениеОПолучении(ВыбраннаяСтрока) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда 
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаИзвещения = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьИзвещениеОПолучении(Сообщение, ИмяФайлаИзвещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодтверждениеДатыПолучения(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаПодтверждения = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьПодтверждениеДатыПолучения(Объект.ЦиклОбмена, Сообщение, ИмяФайлаПодтверждения, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКвитанцияОПриемеЗаявление(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьКвитанцияОПриемеЗаявление(Объект.ЦиклОбмена, Сообщение, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщениеОПроверке(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьСообщениеОПроверке(Объект.ЦиклОбмена, Сообщение, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУведомлениеОбОтказеДокумент(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьУведомлениеОбОтказеДокумент(Объект.ЦиклОбмена, Сообщение, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщениеОбОтзывеЗаявления(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьСообщениеОбОтзывеЗаявления(Объект.ЦиклОбмена, Сообщение, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщениеОПроставленииОтметки(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьСообщениеОПроставленииОтметки(Объект.ЦиклОбмена, Сообщение, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУведомлениеОбОтказеОтметки(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьУведомлениеОбОтказеОтметки(Объект.ЦиклОбмена, Сообщение, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщениеОНесоответствиях(ВыбраннаяСтрока, ПечатьВозможна = Ложь) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	
	КонтекстЭДОКлиент.ПоказатьСообщениеОНесоответствиях(Объект.ЦиклОбмена, Сообщение, ИмяФайлаДокумента, ПечатьВозможнаДляЦиклаОбмена И ПечатьВозможна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКвитанцияОПриемеДокумент(ВыбраннаяСтрока) Экспорт
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("Число") Тогда 
		
		СвойстваДокумента = СодержимоеТранспортныхСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
	КонецЕсли;
	
	Сообщение = ?(ЗначениеЗаполнено(СвойстваДокумента.СообщениеВладелец), СвойстваДокумента.СообщениеВладелец, Объект.Ссылка);
	ИмяФайлаДокумента = СвойстваДокумента.Имя;
	КонтекстЭДОКлиент.ПоказатьКвитанцияОПриемеДокумент(Объект.ЦиклОбмена, Сообщение, ИмяФайлаДокумента);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
