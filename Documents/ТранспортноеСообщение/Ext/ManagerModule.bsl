#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обработчик обновления БРО 1.0.1.23
//
Процедура ОбновитьСвойстваТранспортныхСообщений() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТранспортноеСообщение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	|ГДЕ
	|	ТранспортноеСообщение.Статус = Значение(Перечисление.СтатусыПисем.Полученное)
	|	И ТранспортноеСообщение.ЦиклОбмена = ЗНАЧЕНИЕ(Справочник.ЦиклыОбмена.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТранспортноеСообщение = Выборка.Ссылка.ПолучитьОбъект();
			РеквизитИдентификатор = ТранспортноеСообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения, "Тип");
			Если РеквизитИдентификатор = Неопределено Тогда
				РеквизитИдентификатор = ТранспортноеСообщение.ДополнительныеРеквизитыЗаголовка.Найти("X-Message-ID", "Тип");
			КонецЕсли;
			
			Если РеквизитИдентификатор <> Неопределено Тогда
				
				ПервичныйИдентификаторСообщения = ИзвлечьИдентификаторДокументооборотаИзПакета(ТранспортноеСообщение);
				Если ПервичныйИдентификаторСообщения <> Неопределено Тогда
					РеквизитИдентификатор.Значение = ПервичныйИдентификаторСообщения;
					Попытка
						ТранспортноеСообщение.ОбменДанными.Загрузка = Истина;
						ТранспортноеСообщение.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());					   
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Вспомогательная при выполнении ОбновитьСвойстваТранспортныхСообщений()
Функция ПолучитьТранспортныйКонтейнер(ТранспортноеСообщение, СДанными = Ложь) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					  |	ТранспортныеКонтейнеры.ИмяФайла";
	Если СДанными = Истина Тогда
		Запрос.Текст = Запрос.Текст + ",
					  |	ТранспортныеКонтейнеры.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
					  |ИЗ
					  |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
					  |ГДЕ
					  |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение";
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Вспомогательная при выполнении ОбновитьСвойстваТранспортныхСообщений()
Функция ПрочитатьТекстИзФайла(ИмяФайла, _КодировкаТекста = Неопределено, АвтоопределениеКодировкиXML = Ложь) 
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, _КодировкаТекста);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("<?xml version=""1.0""?>")) <> 0 Тогда // кодировка не указана
			КонтрольнаяСтрока = ПерваяСтрокаФайла;
			Если СтрЧислоСтрок(ТекстИзФайла) > 1 Тогда
				КонтрольнаяСтрока = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 2), 100));   // вторая строка файла
			КонецЕсли;
			Если СтрНайти(КонтрольнаяСтрока, ВРЕГ("msg=""")) <> 0 И СтрНайти(КонтрольнаяСтрока, "О") = 0 Тогда // не нашли "О" (кириллица)
				ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстИзФайла;
	
КонецФункции

//Вспомогательная при выполнении ОбновитьСвойстваТранспортныхСообщений()
Функция СоздатьДеревоСтруктурыXML() 
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

//Вспомогательная при выполнении ОбновитьСвойстваТранспортныхСообщений()
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) 
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

//Вспомогательная при выполнении ОбновитьСвойстваТранспортныхСообщений()
Функция ИзвлечьИдентификаторДокументооборотаИзПакета(ОбъектСообщение) 
	
	// выгружаем контейнер во временный файл
	ИмяФайлаКонтейнера = ПолучитьИмяВременногоФайла();
	Контейнер = ПолучитьТранспортныйКонтейнер(ОбъектСообщение.Ссылка, Истина);
	Если НЕ ЗначениеЗаполнено(Контейнер) ИЛИ Контейнер.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Контейнер[0].Данные.Получить().Записать(ИмяФайлаКонтейнера);
	
	// распаковываем файл описания сведений архива
	ИмяФайлаОписанияСведений = "packageDescription.xml";
	Попытка
		ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяФайлаКонтейнера);		
	Исключение
	    Возврат Неопределено;
	КонецПопытки;
	
	ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияСведений);
	Если ЭлементОписаниеСведений = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогРаспаковки = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	// читаем XML
	ТекстXML = ПрочитатьТекстИзФайла(КаталогРаспаковки + ИмяФайлаОписанияСведений, , Истина);
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ЧтениеЗИП.Закрыть();
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	// загружаем XML в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		ЧтениеЗИП.Закрыть();
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	// закрываем архив и удаляем временный файл контейнера
	ЧтениеЗИП.Закрыть();
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаКонтейнера);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогРаспаковки);
	
	// ищем атрибут "идентификаторДокументооборота"
	Узлы_идентификаторДокументооборота = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "идентификаторДокументооборота", "А"), Истина);
	Если Узлы_идентификаторДокументооборота.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// возвращаем первое найденное значение атрибута
	Возврат СокрЛП(Узлы_идентификаторДокументооборота[0].Значение);
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	// инициализируем контекст ЭДО - модуль обработки
	ТекстСообщения = "";
	КонтекстЭДО = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДО = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ОбработкаПолученияФормы("Документ", "ТранспортноеСообщение", ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
