#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует печатную форму электронного документа по файлу данных.
//
// Параметры:
//  СтруктураРазбораФайла - структура - содержит дерево разбора ЭД.
//  ИД - УникальныйИдентификатор -уникальный идентификатор объекта ЭД.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Табличный документ с данными электронного документа.
//
Функция ПечатнаяФормаЭД(СтруктураРазбораФайла, ИД = Неопределено) Экспорт
	
	ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
	
	ВидЭД = СтрокаОбъекта.ВидЭД;
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	ОбщийТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
		
	МакетИдентификатораДокумента = ПолучитьОбщийМакет(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЭД_ИдентификаторДокумента_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
		ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		
		Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
			
			ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
			ЗаполнитьТабличныйДокументПлатежноеПоручениеИсходящее_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ИД);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
			
			ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
			ЗаполнитьТабличныйДокументПлатежноеТребование_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, ИД);
		
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеЗапросаВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументЗапросВыписки_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументВыписки_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция Тогда
			
			ДанныеЭДДляПечати = ПолучитьДанныеКвитанцииДляПечати(СтрокаОбъекта, ДеревоРазбора);
			ЗаполнитьТабличныйДокументКвитанция_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда
			
			ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
			НазваниеМакета = СтрШаблон("ЭД_ЗапросОСостоянииЭД_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);

		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд Тогда
			
			ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
			НазваниеМакета = СтрШаблон("ЭД_ЗапросЗонд_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД Тогда
			
			ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
			ЗаполнитьТабличныйДокументИзвещениеОСостоянии_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
			
		ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД Тогда
			
			ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
			НазваниеМакета = СтрШаблон("ЭД_ЗапросНаОтзыв_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);
			
		КонецЕсли;
		
		ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ТабличныйДокумент);
		
		ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
		ОбщийТабДок.АвтоМасштаб = Истина;
		ОбщийТабДок.ОтображатьЗаголовки = Ложь;
		ОбщийТабДок.ОтображатьСетку = Ложь;
		ОбщийТабДок.ТолькоПросмотр = Истина;
		
		Возврат ОбщийТабДок;
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка формирования табличного документа:
									|%1.'");
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки);
		Операция = НСтр("ru = 'формирования табличного документа'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Получает визуальное представление электронного документа.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - визуальное преставление электронного документа;
//  Неопределено - некорректное содержимое электронного документа.
//
Функция ФайлДанныхЭД(СообщениеОбмена) Экспорт

	ДопИнформацияПоЭД = ДанныеФайла(СообщениеОбмена);
	
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		
		ДанныеЭД.Записать(ИмяФайла);
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеОбмена, "Направление, ВидЭД");
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПодтверждениеОткрытияСчетовПоЗарплатномуПроекту
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ОбменСБанкамиПереопределяемый.ЗаполнитьТабличныйДокумент(ИмяФайла, ТабличныйДокумент);
		Иначе
			ТабличныйДокумент = СформироватьПечатнуюФормуЭД(
				ИмяФайла, РеквизитыЭД.Направление, СообщениеОбмена.УникальныйИдентификатор());
		КонецЕсли;
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
			Возврат ТабличныйДокумент;
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечататьКарточкуЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаЭД");
	Если ПечататьКарточкуЭД Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КарточкаЭД",
			НСтр("ru = 'Карточка электронного документа'"),
			ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, "КарточкаЭД"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщийМакет.ПФ_MXL_КарточкаЭД_%1",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ПечататьЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭД");
	Если ПечататьЭД Тогда
		ТабДок = ПечатьЭД(МассивОбъектов, ОбъектыПечати);
		СинонимМакета = НСтр("ru = 'Электронный документ'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭД", СинонимМакета, ТабДок);
		Если ТипЗнч(ТабДок) = Тип("Строка") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ТабДок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, ИмяМакета ="КарточкаЭД")
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщенияОбмена.Ссылка,
	|	ПрисоединенныеФайлы.Наименование КАК НаименованиеФайла,
	|	ВЫБОР
	|		КОГДА СообщенияОбмена.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|			ТОГДА СообщенияОбмена.Банк
	|		ИНАЧЕ СообщенияОбмена.Организация
	|	КОНЕЦ КАК Отправитель,
	|	ВЫБОР
	|		КОГДА СообщенияОбмена.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|			ТОГДА СообщенияОбмена.Организация
	|		ИНАЧЕ СообщенияОбмена.Банк
	|	КОНЕЦ КАК Получатель,
	|	СообщенияОбмена.ВидЭД КАК ВидЭДСсылка,
	|	ПРЕДСТАВЛЕНИЕ(СообщенияОбмена.ВидЭД) КАК ВидДокумента,
	|	"""" КАК ТипДокумента,
	|	СообщенияОбмена.Идентификатор КАК Идентификатор,
	|	"""" КАК НомерЭД,
	|	"""" КАК ДатаЭД,
	|	"""" КАК СопроводительнаяЗаписка,
	|	ПрисоединенныеФайлы.Расширение,
	|	СообщенияОбмена.Банк,
	|	СообщенияОбмена.Организация,
	|	СообщенияОбмена.Направление КАК НаправлениеЭД,
	|	СообщенияОбмена.НастройкаОбмена КАК НастройкаОбмена
	|ПОМЕСТИТЬ втСообщенияОбмена
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщенияОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО СообщенияОбмена.Ссылка = ПрисоединенныеФайлы.ВладелецФайла
	|ГДЕ
	|	СообщенияОбмена.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронныеПодписи.Отпечаток,
	|	ЭлектронныеПодписи.ПодписьВерна,
	|	ЭлектронныеПодписи.ДатаПроверкиПодписи,
	|	ЭлектронныеПодписи.КомуВыданСертификат,
	|	ЭлектронныеПодписи.Ссылка.ВладелецФайла КАК Ссылка,
	|	ЭлектронныеПодписи.Сертификат
	|ПОМЕСТИТЬ ВтОтпечатки
	|ИЗ
	|	Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.Ссылка.ВладелецФайла В
	|			(ВЫБРАТЬ
	|				втСообщенияОбмена.Ссылка
	|			ИЗ
	|				втСообщенияОбмена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИспользоватьЭП КАК ТребуетсяПодпись,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Организация КАК ПодписьОрганизации,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Банк КАК ПодписьБанка,
	|	втСообщенияОбмена.Ссылка КАК Ссылка,
	|	втСообщенияОбмена.ВидЭДСсылка,
	|	втСообщенияОбмена.НаправлениеЭД КАК НаправлениеЭД
	|ИЗ
	|	втСообщенияОбмена КАК втСообщенияОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|		ПО втСообщенияОбмена.НастройкаОбмена = НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка
	|			И (НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = втСообщенияОбмена.ВидЭДСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭД.НаименованиеФайла,
	|	втЭД.Отправитель,
	|	втЭД.Получатель,
	|	втЭД.ВидДокумента,
	|	втЭД.ВидЭДСсылка,
	|	втЭД.ТипДокумента,
	|	втЭД.Идентификатор,
	|	втЭД.НомерЭД,
	|	втЭД.ДатаЭД,
	|	втЭД.СопроводительнаяЗаписка,
	|	втЭД.Расширение,
	|	втЭД.Банк,
	|	втЭД.Организация,
	|	втЭД.НаправлениеЭД,
	|	втЭД.Ссылка
	|ИЗ
	|	втСообщенияОбмена КАК втЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОтпечатки.ПодписьВерна,
	|	ВтОтпечатки.ДатаПроверкиПодписи,
	|	ВтОтпечатки.КомуВыданСертификат,
	|	ВтОтпечатки.Ссылка
	|ИЗ
	|	ВтОтпечатки КАК ВтОтпечатки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	МассивДанныхПечати = Новый Массив;
	
	ЗаполнитьДанныеПечатнойФормы(МассивРезультатов, МассивДанныхПечати);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщийМакет.ПФ_MXL_КарточкаЭД_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

	ТабДок = Новый ТабличныйДокумент;
	
	Для каждого ДанныеПечатнойФормы Из МассивДанныхПечати Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечатнойФормы);
		ТабДок.Вывести(ОбластьШапка);
		
		Если ДанныеПечатнойФормы.Свойство("Подписи") Тогда
			
			ОбластьТребуемыеПодписи = Макет.ПолучитьОбласть("ТребуемыеПодписи");
			ОбластьТребуемыеПодписи.Параметры.Заполнить(ДанныеПечатнойФормы.Подписи);
			ТабДок.Вывести(ОбластьТребуемыеПодписи);
			
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("Сертификаты") Тогда
			
			ОбластьСертификаты = Макет.ПолучитьОбласть("Сертификаты");
			ТабДок.Вывести(ОбластьСертификаты);
			
			ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрока");
			Для Каждого ТекСтрока Из ДанныеПечатнойФормы.Сертификаты Цикл
				ОбластьСертификатыСтрока.Параметры.Заполнить(ТекСтрока);
				ТабДок.Вывести(ОбластьСертификатыСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
		ОбластьПодпись.Параметры.Заполнить(ДанныеПечатнойФормы);
		ТабДок.Вывести(ОбластьПодпись);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечатнойФормы.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьЭД(СсылкаНаЭД, ОбъектыПечати)
	
	ТабДок = ФайлДанныхЭД(СсылкаНаЭД);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 1, ОбъектыПечати, СсылкаНаЭД);
	
	Возврат ТабДок;
	
КонецФункции

Функция ДанныеФайла(Знач СообщениеОбмена)
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебныйВызовСервера.ПрисоединенныйФайл(СообщениеОбмена);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, , Истина);
		Возврат ДанныеФайла;
	КонецЕсли;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭД(ПолноеИмяФайла, НаправлениеЭД, ИД = Неопределено)
	
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД);
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПечатнаяФормаЭД(Результат, ИД);
	
КонецФункции

Функция ДанныеДляПечати(СтрокаОбъекта)
	
	ДанныеДляОбъекта = Новый Структура;
	
	Для Каждого РеквизитСтроки Из СтрокаОбъекта.Строки Цикл
		ДанныеДляОбъекта.Вставить(РеквизитСтроки.Реквизит,РеквизитСтроки.ЗначениеРеквизита);
	КонецЦикла;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПлатежноеТребование_ЭД(ТабличныйДокумент, Реквизиты, ИД)

	НазваниеМакета = СтрШаблон("ЭД_ПлатежноеТребование_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ПлатежноеТребование");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	
	Если Реквизиты.УсловиеОплаты = "1" Тогда
		ОбластьМакета.Параметры.УсловиеОплаты = НСтр("ru = '1 - заранее данный акцепт плательщика'");
	Иначе
		ОбластьМакета.Параметры.УсловиеОплаты = НСтр("ru = '2 - требуется получение акцепта плательщика'");
	КонецЕсли;
	
	ОбластьМакета.Параметры.СуммаПрописью = ЧислоПрописью(
		Реквизиты.Сумма, "Л=ru_RU; ДП=Ложь", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ТРЕБОВАНИЕ №'") + " " + Реквизиты.Номер;
	ОбластьМакета.Параметры.ДатаДокумента = Формат(Реквизиты.Дата, "ДЛФ=D");
	
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП(
		"" + Реквизиты.ПлательщикНаименованиеБанка + " " + Реквизиты.ПлательщикГородБанка);
	
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП(
		"" + Реквизиты.ПолучательНаименованиеБанка + " " + Реквизиты.ПолучательГородБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ИД) Тогда
		СообщениеОбмена = Документы.СообщениеОбменСБанками.НайтиПоРеквизиту("Идентификатор", ИД);
		ДополнительныеРеквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ДополнительныеДанные");
		Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
			ЗначенияРеквизитов = ДополнительныеРеквизиты.Получить();
			Если ЗначениеЗаполнено(ЗначенияРеквизитов) И ЗначенияРеквизитов.Свойство("ДанныеШтампа") Тогда
				ОбластьШтамп = Макет.ПолучитьОбласть("ПечатьСоШтампом");
				ОбластьШтамп.Параметры.Заполнить(ЗначенияРеквизитов.ДанныеШтампа);
				ТабличныйДокумент.Вывести(ОбластьШтамп);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбластьШтамп = Макет.ПолучитьОбласть("ПечатьБезШтампа");
		ТабличныйДокумент.Вывести(ОбластьШтамп);
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПлатежноеПоручениеИсходящее_ЭД(ТабличныйДокумент, Реквизиты, ИД)

	НазваниеМакета = СтрШаблон("ЭД_ПлатежноеПоручение_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ №'") + " " + Реквизиты.Номер;
	ОбластьМакета.Параметры.ДатаДокумента = Формат(Реквизиты.Дата, "ДЛФ=D");
	
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП(
		"" + Реквизиты.ПлательщикНаименованиеБанка + " " + Реквизиты.ПлательщикГородБанка);
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП(
		"" + Реквизиты.ПолучательНаименованиеБанка + " " + Реквизиты.ПолучательГородБанка);
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если ЗначениеЗаполнено(ИД) Тогда
		СообщениеОбмена = Документы.СообщениеОбменСБанками.ПолучитьСсылку(ИД);
		Квитанция = Квитанция(СообщениеОбмена);
		Если ЗначениеЗаполнено(Квитанция) Тогда
			ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(Квитанция);
			ВремФайл = ПолучитьИмяВременногоФайла("xml");
			Если НЕ ВремФайл = Неопределено Тогда
				ДанныеЭД.Записать(ВремФайл);
				Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ВремФайл, Перечисления.НаправленияЭД.Входящий);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
				Если НЕ Результат = Неопределено Тогда
					ДеревоРазбора = Результат.ДеревоРазбора;
					СтрокаОбъекта = Результат.СтрокаОбъекта;
					ОбластьМакета.Параметры.ДатаПоступления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
						ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
					ОбластьМакета.Параметры.ДатаСписания = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
						ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ИД) Тогда
		ДополнительныеРеквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ДополнительныеДанные");
		Если ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
			ЗначенияРеквизитов = ДополнительныеРеквизиты.Получить();
			Если ЗначениеЗаполнено(ЗначенияРеквизитов) И ЗначенияРеквизитов.Свойство("ДанныеШтампа") Тогда
				ОбластьШтамп = Макет.ПолучитьОбласть("Штамп");
				ОбластьШтамп.Параметры.Заполнить(ЗначенияРеквизитов.ДанныеШтампа);
				ТабличныйДокумент.Вывести(ОбластьШтамп);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументЗапросВыписки_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ЗапросВыписки_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ДанныеШапки = ДанныеПечати.Шапка;
	
	ОбластьЗаголовок.Параметры.ДатаНачалаПериода    = Формат(ДанныеШапки.ДатаНачала, "ДЛФ=D");
	ОбластьЗаголовок.Параметры.ДатаОкончанияПериода = Формат(ДанныеШапки.ДатаКонца,  "ДЛФ=D");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	РасчетныеСчета = ДанныеПечати.РасчетныеСчета;
	
	ОбластьСтрокаРасчетныйСчет = Макет.ПолучитьОбласть("СтрокаТЧ");
	
	Для Каждого СтрокаТЧ Из РасчетныеСчета Цикл
		ОбластьСтрокаРасчетныйСчет.Параметры.Заполнить(СтрокаТЧ);
		ТабличныйДокумент.Вывести(ОбластьСтрокаРасчетныйСчет);
	КонецЦикла;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументИзвещениеОСостоянии_ЭД(ТабличныйДокумент, Реквизиты)

	НазваниеМакета = СтрШаблон("ЭД_ИзвещениеОСостоянииЭД_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Реквизиты.ЕстьОшибка Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Ошибка");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Статус");
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, Реквизиты, НазваниеМакета)

	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументКвитанция_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_Квитанция_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьТикетСББОЛ = Макет.ПолучитьОбласть("ТикетСББОЛ");
	ОбластьТикетСББОЛ.Параметры.ТикетСББОЛ = ДанныеПечати.ТикетСББОЛ;
	ТабличныйДокумент.Вывести(ОбластьТикетСББОЛ);
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСозданияКвитка) Тогда
		ОбластьДатаСозданияКвитка = Макет.ПолучитьОбласть("ДатаСозданияКвитка");
		ОбластьДатаСозданияКвитка.Параметры.ДатаСозданияКвитка = ДанныеПечати.ДатаСозданияКвитка;
		ТабличныйДокумент.Вывести(ОбластьДатаСозданияКвитка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.КодСостоянияДокумента) Тогда
		ОбластьКодСостоянияДокумента = Макет.ПолучитьОбласть("КодСостоянияДокумента");
		ОбластьКодСостоянияДокумента.Параметры.КодСостоянияДокумента = ДанныеПечати.КодСостоянияДокумента;
		ТабличныйДокумент.Вывести(ОбластьКодСостоянияДокумента);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.ИдентификаторОрганизации) Тогда
		ОбластьИдентификаторОрганизации = Макет.ПолучитьОбласть("ИдентификаторОрганизации");
		ОбластьИдентификаторОрганизации.Параметры.ИдентификаторОрганизации = ДанныеПечати.ИдентификаторОрганизации;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = Макет.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ДанныеПечати.ИдентификаторДокумента;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСписанияСоСчетаПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПостановкиВКартотеку) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПоступленияВБанкПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаПеречисленияПлатежа) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкомПлательщика) 
		ИЛИ ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкаПолучателя) Тогда
			ОбластьБанковскиеДаты = Макет.ПолучитьОбласть("БанковскиеДаты");
			ОбластьБанковскиеДаты.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьБанковскиеДаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСписанияСоСчетаПлательщика) Тогда
		ОбластьДатаСписанияСоСчетаПлательщика = Макет.ПолучитьОбласть("ДатаСписанияСоСчетаПлательщика");
		ОбластьДатаСписанияСоСчетаПлательщика.Параметры.ДатаСписанияСоСчетаПлательщика = ДанныеПечати.ДатаСписанияСоСчетаПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаСписанияСоСчетаПлательщика);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПостановкиВКартотеку) Тогда
		ОбластьДатаПостановкиВКартотеку = Макет.ПолучитьОбласть("ДатаПостановкиВКартотеку");
		ОбластьДатаПостановкиВКартотеку.Параметры.ДатаПостановкиВКартотеку = ДанныеПечати.ДатаПостановкиВКартотеку;
		ТабличныйДокумент.Вывести(ОбластьДатаПостановкиВКартотеку);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкомПлательщика) Тогда
		ОбластьДатаОтметкиБанкомПлательщика = Макет.ПолучитьОбласть("ДатаОтметкиБанкомПлательщика");
		ОбластьДатаОтметкиБанкомПлательщика.Параметры.ДатаОтметкиБанкомПлательщика = ДанныеПечати.ДатаОтметкиБанкомПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаОтметкиБанкомПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПоступленияВБанкПлательщика) Тогда
		ОбластьДатаПоступленияВБанкПлательщика = Макет.ПолучитьОбласть("ДатаПоступленияВБанкПлательщика");
		ОбластьДатаПоступленияВБанкПлательщика.Параметры.ДатаПоступленияВБанкПлательщика = ДанныеПечати.ДатаПоступленияВБанкПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаПоступленияВБанкПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПеречисленияПлатежа) Тогда
		ОбластьДатаПеречисленияПлатежа = Макет.ПолучитьОбласть("ДатаПеречисленияПлатежа");
		ОбластьДатаПеречисленияПлатежа.Параметры.ДатаПеречисленияПлатежа = ДанныеПечати.ДатаПеречисленияПлатежа;
		ТабличныйДокумент.Вывести(ОбластьДатаПеречисленияПлатежа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкаПолучателя) Тогда
		ОбластьДатаОтметкиБанкаПолучателя = Макет.ПолучитьОбласть("ДатаОтметкиБанкаПолучателя");
		ОбластьДатаОтметкиБанкаПолучателя.Параметры.ДатаОтметкиБанкаПолучателя = ДанныеПечати.ДатаОтметкиБанкаПолучателя;
		ТабличныйДокумент.Вывести(ОбластьДатаОтметкиБанкаПолучателя);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.АвторСообщения) ИЛИ ЗначениеЗаполнено(ДанныеПечати.СообщениеИзБанка) Тогда
		ОбластьСообщениеИзБанка = Макет.ПолучитьОбласть("СообщениеИзБанка");
		ТабличныйДокумент.Вывести(ОбластьСообщениеИзБанка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.АвторСообщения) Тогда
		ОбластьАвторСообщения = Макет.ПолучитьОбласть("АвторСообщения");
		ОбластьАвторСообщения.Параметры.АвторСообщения = ДанныеПечати.АвторСообщения;
		ТабличныйДокумент.Вывести(ОбластьАвторСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.СообщениеИзБанка) Тогда
		ОбластьТекстСообщения = Макет.ПолучитьОбласть("ТекстСообщения");
		ОбластьТекстСообщения.Параметры.СообщениеИзБанка = ДанныеПечати.СообщениеИзБанка;
		ТабличныйДокумент.Вывести(ОбластьТекстСообщения);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеКвитанцииДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполнения = Новый Структура;

	ТикетСББОЛ = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ТикетСББОЛ");
	ДанныеЗаполнения.Вставить("ТикетСББОЛ",ТикетСББОЛ);
	ДатаСозданияКвитка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаСозданияКвитка");
	ДанныеЗаполнения.Вставить("ДатаСозданияКвитка", ДатаСозданияКвитка);
	КодСостоянияДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "КодСостоянияДокумента");
	ДанныеЗаполнения.Вставить("КодСостоянияДокумента", КодСостоянияДокумента);
	ИдентификаторОрганизации = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ИдентификаторОрганизации");
	ДанныеЗаполнения.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	ИдентификаторДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
	ДанныеЗаполнения.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	ДатаСписанияСоСчетаПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
	ДанныеЗаполнения.Вставить("ДатаСписанияСоСчетаПлательщика", ДатаСписанияСоСчетаПлательщика);
	ДатаОтметкиБанкомПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПлательщика");
	ДанныеЗаполнения.Вставить("ДатаОтметкиБанкомПлательщика", ДатаОтметкиБанкомПлательщика);
	ДатаПостановкиВКартотеку = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПостановкиВКартотеку");
	ДанныеЗаполнения.Вставить("ДатаПостановкиВКартотеку", ДатаПостановкиВКартотеку);
	ДатаПоступленияВБанкПлательщика = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
	ДанныеЗаполнения.Вставить("ДатаПоступленияВБанкПлательщика", ДатаПоступленияВБанкПлательщика);
	ДатаПеречисленияПлатежа = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПеречисленияПлатежа");
	ДанныеЗаполнения.Вставить("ДатаПеречисленияПлатежа", ДатаПеречисленияПлатежа);
	ДатаОтметкиБанкаПолучателя = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкаПолучателя");
	ДанныеЗаполнения.Вставить("ДатаОтметкиБанкаПолучателя", ДатаОтметкиБанкаПолучателя);
	АвторСообщения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "АвторСообщения");
	ДанныеЗаполнения.Вставить("АвторСообщения", АвторСообщения);
	СообщениеИзБанка = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СообщениеИзБанка");
	ДанныеЗаполнения.Вставить("СообщениеИзБанка", СообщениеИзБанка);
		
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументВыписки_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ВыпискаБанка_%1", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Для Каждого Запись Из ДанныеПечати.ОборотыПоСчетам Цикл
		ДанныеШапки = ДанныеПечати.Шапка;
		ОбластьШапкаЗаголовок = Макет.ПолучитьОбласть("ШапкаЗаголовок");
		ОбластьШапкаЗаголовок.Параметры.Заполнить(ДанныеШапки);
		ТабличныйДокумент.Вывести(ОбластьШапкаЗаголовок);
		
		Если ЗначениеЗаполнено(ДанныеШапки.Организация) Тогда 
			ОбластьШапкаОрганизация = Макет.ПолучитьОбласть("ШапкаОрганизация");
			ОбластьШапкаОрганизация.Параметры.Заполнить(ДанныеШапки);
			ТабличныйДокумент.Вывести(ОбластьШапкаОрганизация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеШапки.Банк) Тогда 
			ОбластьШапкаБанк = Макет.ПолучитьОбласть("ШапкаБанк");
			ОбластьШапкаБанк.Параметры.Заполнить(ДанныеШапки);
			ТабличныйДокумент.Вывести(ОбластьШапкаБанк);
		КонецЕсли;
		
		ОбластьШапкаТаблица = Макет.ПолучитьОбласть("ШапкаТаблица");
		ОбластьШапкаТаблица.Параметры.Заполнить(Запись.Значение);
		ОбластьШапкаТаблица.Параметры.НомерСчета = Запись.Ключ;
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблица);
		
		Обороты = Запись.Значение.Обороты;
		Для каждого Платеж Из Обороты Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(Платеж);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(Запись.Значение);
		ОбластьПодвал.Параметры.Заполнить(ДанныеШапки);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		Если ДанныеПечати.Свойство("Штамп") Тогда
			ОбластьШтамп = Макет.ПолучитьОбласть("Штамп");
			ОбластьШтамп.Параметры.Заполнить(ДанныеПечати.Штамп);
			ТабличныйДокумент.Вывести(ОбластьШтамп);
		КонецЕсли;
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СтруктураОтбора = Новый Структура("Реквизит", "Получатель");
	Организация = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
	Если Организация.Количество() Тогда 
		ДанныеЗаполненияШапки.Вставить("Организация", Организация.Получить(0).ЗначениеРеквизита);
	Иначе	
		ДанныеЗаполненияШапки.Вставить("Организация", НСтр("ru = '<не указано>'"));
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Реквизит", "Отправитель");
	Банк = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
	Если Банк.Количество() Тогда 
		ДанныеЗаполненияШапки.Вставить("Банк", Банк.Получить(0).ЗначениеРеквизита);
	Иначе
		ДанныеЗаполненияШапки.Вставить("Банк", НСтр("ru = '<не указано>'"));
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
	БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
	
	СоответствиеСчетовИДанных = Новый Соответствие;
	Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
		НомерСчета =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет");
		СтруктураДанных = Новый Структура;
		НачальныйОстаток =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.НачальныйОстаток");
		СтруктураДанных.Вставить("ВхОстаток", ?(НачальныйОстаток = Неопределено, 0, НачальныйОстаток));
		ВсегоПоступило =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.ВсегоПоступило");
		СтруктураДанных.Вставить("Кредит", ?(ВсегоПоступило = Неопределено, 0, ВсегоПоступило));
		ВсегоСписано =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.ВсегоСписано");
		СтруктураДанных.Вставить("Дебет", ?(ВсегоСписано = Неопределено, 0, ВсегоСписано));
		КонечныйОстаток =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.КонечныйОстаток");
		СтруктураДанных.Вставить("ИсхОстаток", ?(КонечныйОстаток = Неопределено, 0, КонечныйОстаток));
		СоответствиеСчетовИДанных.Вставить(НомерСчета, СтруктураДанных);
	КонецЦикла;
	
	ДатаНачала = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");
	ДанныеЗаполненияШапки.Вставить("ДатаНачала", Формат(ДатаНачала,"ДЛФ=D"));
	ДатаКонца = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");
	ДанныеЗаполненияШапки.Вставить("ДатаОкончания", Формат(ДатаКонца, "ДЛФ=D"));
	
	ДанныеВыписки = Новый Массив;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ДатаОперации");
	ТЗ.Колонки.Добавить("КО");
	ТЗ.Колонки.Добавить("НомерДокумента");
	ТЗ.Колонки.Добавить("Дебет");
	ТЗ.Колонки.Добавить("Кредит");
	ТЗ.Колонки.Добавить("БИК");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ОснованиеОперации");
	
	Для Каждого Запись Из СоответствиеСчетовИДанных Цикл
		ТЗ.Очистить();
		СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СчетПлательщика =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлательщикСчет");
			СчетПолучателя  =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПолучательСчет");
			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.ДатаОперации   =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Дата");
			НоваяСтрока.КО =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ВидОплаты");
			НоваяСтрока.НомерДокумента =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "Номер");
			ПлатежИсходящий =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "ПлатежИсходящий");
			Если ПлатежИсходящий = Неопределено Тогда
				ПлатежИсходящий = (СчетПлательщика = НомерСчета);
			КонецЕсли;
			Если ПлатежИсходящий Тогда
				НоваяСтрока.Дебет  =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "Сумма");
				НоваяСтрока.БИК =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ПолучательБИКБанка");
				ИННКорреспондента  =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ПолучательИНН");
				СчетКорреспондента = СчетПолучателя;
				БанкКорреспондента =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ПолучательНаименованиеБанка");
				НаименованиеКорреспондента =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ПолучательНаименование");
			Иначе
				НоваяСтрока.Кредит =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "Сумма");
				НоваяСтрока.БИК =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ПлательщикБИКБанка");
				ИННКорреспондента  =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ПлательщикИНН");
				СчетКорреспондента = СчетПлательщика;
				БанкКорреспондента =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ПлательщикНаименованиеБанка");
				НаименованиеКорреспондента =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаТЧ, "ПлательщикНаименование");
			КонецЕсли;
			
			СекцияДокумент =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "СекцияДокумент");
				
			Если СекцияДокумент = "Мемориальный ордер" Тогда
				НоваяСтрока.Наименование = "" + НаименованиеКорреспондента + Символы.ПС + СчетКорреспондента;
			Иначе
				НоваяСтрока.Наименование = "" + НаименованиеКорреспондента + Символы.ПС
					+ ?(ЗначениеЗаполнено(ИННКорреспондента), "ИНН " + ИННКорреспондента + Символы.ПС, "") + СчетКорреспондента
					+ Символы.ПС + БанкКорреспондента;
			КонецЕсли;
	
			НоваяСтрока.ОснованиеОперации =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаТЧ, "НазначениеПлатежа");
		КонецЦикла;
		Запись.Значение.Вставить("Обороты", ТЗ);
	КонецЦикла;
	
	Штамп =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Штамп");
	
	Если ЗначениеЗаполнено(Штамп) Тогда
		ДанныеШтампа = Новый Структура();
		ДатаСоставленияВыписки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаФормирования");
		Если Не ЗначениеЗаполнено(ДатаСоставленияВыписки) Тогда
			ДатаСоставления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаОбъекта, "ДатаСоздания");
			ВремяСоставления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаОбъекта, "ВремяСоздания");
			ДатаСоставленияВыписки = Формат(ДатаСоставления, "ДЛФ=D") + " " + Формат(ВремяСоставления, "ДЛФ=T");
		КонецЕсли;
		ДанныеШтампа.Вставить("ДатаСоставленияВыписки", ДатаСоставленияВыписки);
		НаименованиеБанка =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Штамп.НазваниеБанка");
		ДанныеШтампа.Вставить("НаименованиеБанка", НаименованиеБанка);
		БИК =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Штамп.БИК");
		ДанныеШтампа.Вставить("БИК", БИК);
		ГородБанка =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Штамп.ГородБанка");
		ДанныеШтампа.Вставить("ГородБанка", ГородБанка);
		КоррСчетБанка =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Штамп.КоррСчетБанка");
		ДанныеШтампа.Вставить("КоррСчетБанка", КоррСчетБанка);
		Отделение =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "Штамп.ОтделениеБанка");
		ДанныеШтампа.Вставить("Отделение", Отделение);
		ДанныеДляОбъекта.Вставить("Штамп", ДанныеШтампа);
	КонецЕсли;
	
	
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("ОборотыПоСчетам", СоответствиеСчетовИДанных);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПолучитьДанныеЗапросаВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДатаНачала = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");
	ДанныеЗаполненияШапки.Вставить("ДатаНачала", ДатаНачала);
	ДатаКонца = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");
	ДанныеЗаполненияШапки.Вставить("ДатаКонца", ДатаКонца);
		
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСчета");
			
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.НомерСчета =ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "НомерСчета");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("РасчетныеСчета", ТЗ);
		
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьДанныеПечатнойФормы(МассивРезультатовЗапроса, МассивДанныхПечати)
	
	НеобходимыеПодписи = МассивРезультатовЗапроса[2].Выгрузить();
	ДанныеЭД = МассивРезультатовЗапроса[3].Выгрузить();
	СертификатыЭД = МассивРезультатовЗапроса[4].Выгрузить();
	
	МассивСообщенийОбмена = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСообщенийОбмена, ДанныеЭД.ВыгрузитьКолонку("Ссылка"), Истина);
	
	Для Каждого ЭлементМассива Из МассивСообщенийОбмена Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ЭлементМассива);
		
		МассивСтрокЭД = ДанныеЭД.НайтиСтроки(Отбор);
		СтрокаДанныхЭД = МассивСтрокЭД[0];
		
		ДанныеПечатнойФормы = Новый Структура;
		ДанныеПечатнойФормы.Вставить("Ссылка", ЭлементМассива);
		
		ИмяФайла = СтрокаДанныхЭД.НаименованиеФайла +"." + СтрокаДанныхЭД.Расширение;
		ДанныеПечатнойФормы.Вставить("ИмяФайла", ИмяФайла);
		
		Если СтрокаДанныхЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			Получатель = СтрокаДанныхЭД.Банк;
			
		Иначе
			Отправитель = СтрокаДанныхЭД.Банк;
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("Отправитель", Отправитель);
		ДанныеПечатнойФормы.Вставить("Получатель", Получатель);
		
		ТипДокумента = СтрокаДанныхЭД.ВидДокумента + " "+ СтрокаДанныхЭД.ТипДокумента;
		ДанныеПечатнойФормы.Вставить("ТипДокумента", ТипДокумента);
		ДанныеПечатнойФормы.Вставить("Идентификатор", СтрокаДанныхЭД.Идентификатор );
		
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.НомерЭД) Тогда
			ДанныеПечатнойФормы.Вставить("НомерЭД", СтрокаДанныхЭД.НомерЭД);
			ДанныеПечатнойФормы.Вставить("ДатаЭД", СтрокаДанныхЭД.ДатаЭД);
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("ТекущаяДата", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		
		// заполняем требуемые подписи
		МассивНеобходимыеПодписи = НеобходимыеПодписи.НайтиСтроки(Отбор);
		ТребуемыеПодписи = Неопределено;
		
		ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи);
		Если ЗначениеЗаполнено(ТребуемыеПодписи) Тогда
			ДанныеПечатнойФормы.Вставить("Подписи", ТребуемыеПодписи);
		КонецЕсли;
		
		// заполняем таблицу сертификатов ЭД
		
		МассивСертификатовЭД = СертификатыЭД.НайтиСтроки(Отбор);
		
		ТаблицаСертификатов = Новый ТаблицаЗначений;
		ИнициализацияТаблицыСертификатов(ТаблицаСертификатов);

		Для Каждого СтрокаМассива Из МассивСертификатовЭД Цикл
			
			НоваяСтрока = ТаблицаСертификатов.Добавить();
			НоваяСтрока.КомуВыдан = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Сертификат = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Статус = СтатусПодписи(СтрокаМассива);
		КонецЦикла;

		ДанныеПечатнойФормы.Вставить("Сертификаты", ТаблицаСертификатов);
		
		МассивДанныхПечати.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеЮрФизЛицо(ЮрФизЛицо)
	
	ДанныеЮрФизЛицо = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо);
	ПредставлениеЮрФизЛицо = ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеЮрФизЛицо,"ПолноеНаименование,ИНН,КПП");
	
	Возврат ПредставлениеЮрФизЛицо;
	
КонецФункции

Процедура ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи)
	
	Если МассивНеобходимыеПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТребуемыеПодписи = Новый Структура;
	ТребуемыеПодписи.Вставить("ПредставлениеОтправителя");
	ТребуемыеПодписи.Вставить("ПредставлениеПолучателя");
	
	Для Каждого СтрокаМассива Из МассивНеобходимыеПодписи Цикл
		
		ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализацияТаблицыСертификатов(ТаблицаСертификатов)
	
	ТаблицаСертификатов.Колонки.Добавить("КомуВыдан");
	ТаблицаСертификатов.Колонки.Добавить("Сертификат");
	ТаблицаСертификатов.Колонки.Добавить("Статус");
	
КонецПроцедуры

Функция СтатусПодписи(ВыборкаЭД)
	
	Если ВыборкаЭД.ПодписьВерна Тогда
		СтатусПодписи = НСтр("ru = 'Верна ('") + Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	Иначе
		СтатусПодписи = НСтр("ru = 'Неверна ('") + Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	КонецЕсли;
	
	Возврат СтатусПодписи;
	
КонецФункции

Процедура ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи)
	
	Если СтрокаМассива.ТребуетсяПодпись Тогда
		Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
			ТребуемыеПодписи.ПредставлениеПолучателя = СтрокаМассива.ПодписьБанка;
			
		Иначе
			ТребуемыеПодписи.ПредставлениеОтправителя = СтрокаМассива.ПодписьБанка;
			ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
			
		КонецЕсли;
	Иначе
		ТребуемыеПодписи.ПредставлениеОтправителя = НСтр("ru = 'Не требуется'");
		ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
	КонецЕсли;
	
КонецПроцедуры

Функция Квитанция(СообщениеОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СообщениеОбменСБанками.Ссылка
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.СообщениеРодитель = &СообщениеОбмена
	               |	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.Квитанция)";
	Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Документы.СообщениеОбменСБанками.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#КонецЕсли
