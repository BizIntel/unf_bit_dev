#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ОбработчикЗаполнения");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитСписокУчастников();
	ЗаполнитьПредставление();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИдентификаторы();
	ЗаписатьИнтернетПочтовыеВложения();
	ЗаписатьКонтактыВКлассификатор();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо
		И ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		ВызватьИсключение НСтр("ru = 'Копирование входящего письма невозможно.'");
	КонецЕсли;
	
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Или ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		НачалоСобытия = '00010101';
		ОкончаниеСобытия = '00010101';
	Иначе
		НачалоСобытия = ТекущаяДатаСеанса();
		НачалоСобытия = НачалоЧаса(НачалоСобытия) + ?(Минута(НачалоСобытия) < 30, 1800, 3600);
		ОкончаниеСобытия = НачалоСобытия + 1800;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОкончаниеСобытия < НачалоСобытия Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Дата окончания не может быть меньше даты начала.'"),
			ЭтотОбъект,
			"ДатаОкончания",
			,
			Отказ
		);
	КонецЕсли;
	
	// Для формы прочих событий реализована своя таблица контактов
	Если НЕ (ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Или ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS) Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Участники.Контакт"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьРеквизитСписокУчастников() Экспорт
	
	СписокУчастников = "";
	Для Каждого Участник Из Участники Цикл
		СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ")
			+ Участник.Контакт + ?(ПустаяСтрока(Участник.КакСвязаться), "", " <" + Участник.КакСвязаться + ">");
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьКонтактнуюИнформациюПолучателейПисьма() Экспорт
	
	Контакты = ЭтотОбъект.Участники.Выгрузить(,"Контакт");
	КоличествоЭлементовКоллекции = Контакты.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		ТипКонтакта = ТипЗнч(Контакты[Индекс].Контакт);
		Если ТипКонтакта <> Тип("СправочникСсылка.Контрагенты") И ТипКонтакта <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
			Контакты.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	Контакты.Свернуть("Контакт");
	Контакты = Контакты.ВыгрузитьКолонку("Контакт");
	
	Отбор = Новый Структура("Контакт");
	Для Каждого Контакт Из Контакты Цикл
		
		ВидКИ = ?(ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты"), Справочники.ВидыКонтактнойИнформации.EmailКонтрагента, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		Отбор.Контакт = Контакт;
		НайденныеСтроки = ЭтотОбъект.Участники.НайтиСтроки(Отбор);
		АдресаКонтакта = Новый Массив;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПочтовыеАдреса = СтрРазделить(НайденнаяСтрока.КакСвязаться, ";", Ложь);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(АдресаКонтакта, ПочтовыеАдреса);
		КонецЦикла;
		
		КонтактОбъект = Контакт.ПолучитьОбъект();
		ЕстьДобавленныеАдреса = Ложь;
		
		Для Каждого АдресКонтакта Из АдресаКонтакта Цикл
			
			Если ПустаяСтрока(АдресКонтакта)
				Или КонтактОбъект.КонтактнаяИнформация.Найти(СокрЛП(АдресКонтакта), "Представление") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаКИ = КонтактОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяСтрокаКИ.Вид           = ВидКИ;
			НоваяСтрокаКИ.Представление = СокрЛП(АдресКонтакта);
			НоваяСтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрокаКИ.Представление, ВидКИ);
			
			ПриведенныйПочтовыйАдрес = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(НоваяСтрокаКИ.Представление);
			Если ПриведенныйПочтовыйАдрес.Количество() > 0 Тогда
				НоваяСтрокаКИ.АдресЭП = ПриведенныйПочтовыйАдрес[0].Адрес;
				Поз = СтрНайти(НоваяСтрокаКИ.АдресЭП, "@");
				Если Поз <> 0 Тогда
					НоваяСтрокаКИ.ДоменноеИмяСервера = Сред(НоваяСтрокаКИ.АдресЭП, Поз+1);
				КонецЕсли;
			КонецЕсли;
			
			ЕстьДобавленныеАдреса = Истина;
			
		КонецЦикла;
		
		Если ЕстьДобавленныеАдреса Тогда
			КонтактОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьЭлектронноеПисьмо(Записывать = Истина, Знач ВложенияПисьма = Неопределено) Экспорт
	
	Если ЭтотОбъект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		ВызватьИсключение НСтр("ru='Отправляемое письмо должно иметь тип события ""Электронное письмо""'");
	КонецЕсли;
	
	ПочтовыйАдресПолучателя = СтрСоединить(ЭтотОбъект.Участники.ВыгрузитьКолонку("КакСвязаться"), "; ");
	Попытка
		ПриведенныйПочтовыйАдрес = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПочтовыйАдресПолучателя);
	Исключение
		ВызватьИсключение НСтр("ru='Некорректный адрес получателя для отправляемого письма'") + ":" + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ПараметрыПисьма = Новый Структура;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдрес) Тогда
		ПараметрыПисьма.Вставить("Кому", ПриведенныйПочтовыйАдрес);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Тема) Тогда
		ПараметрыПисьма.Вставить("Тема", Строка(ЭтотОбъект.Тема));
	КонецЕсли;
	
	АдресПолучателяСкрытойКопии = УправлениеНебольшойФирмойВзаимодействия.ПолучитьАдресПолучателяСкрытойКопии();
	Если ЗначениеЗаполнено(АдресПолучателяСкрытойКопии) Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", АдресПолучателяСкрытойКопии);
	КонецЕсли;
	
	ТекстПисьмаHTMLсКартинками = ЭтотОбъект.СодержаниеHTML;
	Если ВложенияПисьма = Неопределено Тогда
		ВложенияПисьма = Новый Соответствие;
	КонецЕсли;
	ВложенияКартинки = ЭтотОбъект.КартинкиHTML.Получить();
	
	Если ТипЗнч(ВложенияКартинки) = Тип("Структура") И ВложенияКартинки.Количество() > 0 Тогда
		УправлениеНебольшойФирмойВзаимодействия.ДобавитьВложенияКартинкиВПисьмо(ТекстПисьмаHTMLсКартинками, ВложенияПисьма, ВложенияКартинки);
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Тело",		ТекстПисьмаHTMLсКартинками);
	ПараметрыПисьма.Вставить("Вложения",	ВложенияПисьма);
	ПараметрыПисьма.Вставить("ТипТекста",	"HTML");
	
	Попытка
		Идентификаторы = ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение(ПараметрыПисьма, УчетнаяЗапись);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЭтотОбъект.ДополнительныеСвойства, Идентификаторы, Истина);
	Исключение
		ВызватьИсключение НСтр("ru='Не удалось выполнить отправку письма по причине'") + ":" + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ЭтотОбъект.Состояние		= Справочники.СостоянияСобытий.Завершено;
	ЭтотОбъект.Дата				= ТекущаяДатаСеанса();
	ЭтотОбъект.НачалоСобытия	= ЭтотОбъект.Дата;
	ЭтотОбъект.ОкончаниеСобытия	= ЭтотОбъект.Дата;
	Если Записывать Тогда
		Записать();
	КонецЕсли;
	
	СохранитьКонтактнуюИнформациюПолучателейПисьма();
	
КонецПроцедуры

Процедура ОтправитьSMS(Записывать = Истина) Экспорт
	
	Если ЭтотОбъект.ТипСобытия <> Перечисления.ТипыСобытий.СообщениеSMS Тогда
		ВызватьИсключение НСтр("ru='Отправляемое сообщение SMS должно иметь тип события ""SMS""'");
	КонецЕсли;
	
	Для Каждого Получатель Из ЭтотОбъект.Участники Цикл
		РезультатПроверки = УправлениеНебольшойФирмойКлиентСервер.ПреобразоватьНомерДляОтправкиSMS(Получатель.КакСвязаться);
		Если РезультатПроверки.НомерКорректен Тогда
			Получатель.НомерДляОтправки = РезультатПроверки.НомерОтправки;
		Иначе
			ВызватьИсключение НСтр("ru='Неверный формат номера в строке %1 списка получателей'") + ":" + Символы.ПС + РезультатПроверки.СообщениеОбОшибке;
		КонецЕсли;
	КонецЦикла;
	
	МассивНомеров		= ЭтотОбъект.Участники.Выгрузить(,"НомерДляОтправки").ВыгрузитьКолонку("НомерДляОтправки");
	РезультатОтправки	= ОтправкаSMS.ОтправитьSMS(МассивНомеров, ЭтотОбъект.Содержание, ЭтотОбъект.ИмяОтправителяSMS);
	
	Если Не ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда
		ВызватьИсключение НСтр("ru='Не удалось выполнить отправку SMS по причине'") + ":" + Символы.ПС + РезультатОтправки.ОписаниеОшибки;
	КонецЕсли;
	
	Для Каждого ОтправленноеСообщение Из РезультатОтправки.ОтправленныеСообщения Цикл
		Для Каждого НайденнаяСтрока Из ЭтотОбъект.Участники.НайтиСтроки(Новый Структура("НомерДляОтправки", ОтправленноеСообщение.НомерПолучателя)) Цикл
			НайденнаяСтрока.ИдентификаторСообщения	= ОтправленноеСообщение.ИдентификаторСообщения;
			НайденнаяСтрока.СтатусДоставки			= Перечисления.СостоянияСообщенияSMS.Исходящее;
		КонецЦикла;
	КонецЦикла;
	
	ЭтотОбъект.Состояние		= Справочники.СостоянияСобытий.Завершено;
	ЭтотОбъект.Дата				= ТекущаяДатаСеанса();
	ЭтотОбъект.НачалоСобытия	= ЭтотОбъект.Дата;
	ЭтотОбъект.ОкончаниеСобытия	= ЭтотОбъект.Дата;
	Если Записывать Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьНомераПолучателейSMS() Экспорт
	
	Если Не ЭтотОбъект.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыеСимволы = "1234567890";
	
	Для Каждого Получатель Из ЭтотОбъект.Участники Цикл
		
		Получатель.НомерДляОтправки = "";
		
		Для Позиция = 1 По СтрДлина(Получатель.КакСвязаться) Цикл
			Символ = Сред(Получатель.КакСвязаться, Позиция, 1);
			Если Найти(ДопустимыеСимволы, Символ) > 0 Тогда
				Получатель.НомерДляОтправки = Получатель.НомерДляОтправки + Символ;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполнения

Процедура ОбработчикЗаполнения(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗаполнения.Свойство("ТипСобытия") Тогда
		Возврат;
	КонецЕсли;
	
	ТипСобытия = ДанныеЗаполнения.ТипСобытия;
	
	Если ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо
		И ТипСобытия <> Перечисления.ТипыСобытий.СообщениеSMS Тогда
		
		Если НЕ ЗначениеЗаполнено(НачалоСобытия) Или НЕ ЗначениеЗаполнено(ОкончаниеСобытия) Тогда
			Если ДанныеЗаполнения.Свойство("НачалоСобытия") Тогда
				НачалоСобытия = ДанныеЗаполнения.НачалоСобытия;
			Иначе
				НачалоСобытия = ТекущаяДатаСеанса();
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ОкончаниеСобытия") Тогда
				ОкончаниеСобытия = ДанныеЗаполнения.ОкончаниеСобытия;
			Иначе
				ОкончаниеСобытия = НачалоСобытия + 1800;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Контрагент")
		И ТипЗнч(ДанныеЗаполнения.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ЗаполнитьПоКонтрагент(ДанныеЗаполнения.Контрагент);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ДанныеЗаписиКалендаря")
		И ТипЗнч(ДанныеЗаполнения.ДанныеЗаписиКалендаря) = Тип("Структура") Тогда
		
		Тема				= ДанныеЗаполнения.ДанныеЗаписиКалендаря.Наименование;
		КалендарьСотрудника	= ДанныеЗаполнения.ДанныеЗаписиКалендаря.Календарь;
		НачалоСобытия		= ДанныеЗаполнения.ДанныеЗаписиКалендаря.Начало;
		ОкончаниеСобытия	= ДанныеЗаполнения.ДанныеЗаписиКалендаря.Окончание;
		Содержание			= ДанныеЗаполнения.ДанныеЗаписиКалендаря.Описание;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Контакт") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			СтрокаУчастники = Участники.Добавить();
			СтрокаУчастники.Контакт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Контакт, "Владелец");
		КонецЕсли;
		
		СтрокаУчастники = Участники.Добавить();
		СтрокаУчастники.Контакт = ДанныеЗаполнения.Контакт;
		
		Если ДанныеЗаполнения.Свойство("ЗначениеКИ") Тогда
			СтрокаУчастники.КакСвязаться = ДанныеЗаполнения.ЗначениеКИ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок
		И ДанныеЗаполнения.Свойство("НомерТелефона") Тогда
		
		ЭтотОбъект.Содержание = СтрШаблон(НСтр("ru='Звонок с номера: %1.'"), ДанныеЗаполнения.НомерТелефона);
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("ОснованиеЗаполнения") Тогда
		// Создание нового события без основания
		ДозаполнитьПоУмолчанию();
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ЗаполнитьПоКонтрагент(ДанныеЗаполнения.ОснованиеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		ЗаполнитьПоКонтактныеЛица(ДанныеЗаполнения.ОснованиеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("ДокументСсылка.Событие") Тогда
		
		ЗаполнитьПоСобытие(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
		
		ЗаполнитьПоЗаданиеНаРаботу(ДанныеЗаполнения.ОснованиеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ЗаполнитьПоЗаказПокупателя(ДанныеЗаполнения.ОснованиеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		ЗаполнитьПоЗаказНаПроизводство(ДанныеЗаполнения.ОснованиеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("ДокументСсылка.СверкаВзаиморасчетов") Тогда
		
		ЗаполнитьПоСверкеВзаиморасчетов(ДанныеЗаполнения.ОснованиеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		
		ЗаполнитьПоПриемИПередачаВРемонт(ДанныеЗаполнения.ОснованиеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОснованиеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьПоСтруктуре(ДанныеЗаполнения.ОснованиеЗаполнения);
		
	ИначеЕсли ДопустимыйТипДляВводаНаОсновании(ДанныеЗаполнения.ОснованиеЗаполнения) Тогда
		
		ДокументыОснования.Очистить();
		Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
			СтрокаДокументыОснования = ДокументыОснования.Добавить();
			СтрокаДокументыОснования.ДокументОснование = ДанныеЗаполнения.ОснованиеЗаполнения;
		Иначе
			ДокументОснование = ДанныеЗаполнения.ОснованиеЗаполнения;
		КонецЕсли;
		
		Участники.Очистить();
		СтрокаУчастники = Участники.Добавить();
		СтрокаУчастники.Контакт = ДанныеЗаполнения.ОснованиеЗаполнения.Контрагент;
		ЗаполнитьКакСвязаться();
		
	КонецЕсли;
	
	ДозаполнитьПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ОснованиеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОснованиеЗаполнения);
	
	Если ОснованиеЗаполнения.Свойство("Основание")
		И ТипЗнч(ОснованиеЗаполнения.Основание)= Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
		
		ЗаполнитьПоТекущейСтрокеЗаданияНаРаботу(ОснованиеЗаполнения);
		Возврат;
		
	КонецЕсли;
	
	Если ОснованиеЗаполнения.Свойство("ДокументОснование")
		И ДопустимыйТипДляВводаНаОсновании(ОснованиеЗаполнения.ДокументОснование) Тогда
		
		ДокументыОснования.Очистить();
		Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
			СтрокаДокументыОснования = ДокументыОснования.Добавить();
			СтрокаДокументыОснования.ДокументОснование = ОснованиеЗаполнения.ДокументОснование;
		Иначе
			ДокументОснование = ОснованиеЗаполнения.ДокументОснование;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОснованиеЗаполнения.Свойство("Контакт") И ЗначениеЗаполнено(ОснованиеЗаполнения.Контакт) Тогда
		
		Участники.Очистить();
		
		Если ТипЗнч(ОснованиеЗаполнения.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			СтрокаУчастники = Участники.Добавить();
			СтрокаУчастники.Контакт = ОснованиеЗаполнения.Контакт.Владелец;
		КонецЕсли;
		
		СтрокаУчастники = Участники.Добавить();
		СтрокаУчастники.Контакт = ОснованиеЗаполнения.Контакт;
		
		ЗаполнитьКакСвязаться();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании контрагента.
//
// Параметры:
//	Контрагент - СправочникСсылка.Контрагенты - контрагент.
//	
Процедура ЗаполнитьПоКонтрагент(Контрагент)
	
	Если Контрагент.ЭтоГруппа Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя выбирать группу контрагентов.'");
	КонецЕсли;
	
	Участники.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактныеЛица.Наименование";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаУчастники = Участники.Добавить();
		СтрокаУчастники.Контакт = Выборка.Ссылка;
	КонецЦикла;
	
	СтрокаУчастники = Участники.Вставить(0);
	СтрокаУчастники.Контакт = Контрагент;
	ЗаполнитьКакСвязаться();
	
КонецПроцедуры // ЗаполнитьПоКонтактныеЛица()

// Процедура заполнения документа на основании контактного лица.
//
// Параметры:
//	КонтактноеЛицо	 - СправочникСсылка.КонтактныеЛица - контактное лицо.
//	
Процедура ЗаполнитьПоКонтактныеЛица(КонтактноеЛицо)
	
	Участники.Очистить();
	
	ТипыКИ = Новый Массив;
	Если НЕ ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	Если НЕ ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Порядок,
		|	КонтрагентыКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
		|	И КонтрагентыКонтактнаяИнформация.Тип В(&ТипыКИ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	КонтрагентыКонтактнаяИнформация.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Порядок,
		|	КонтактныеЛицаКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
		|ГДЕ
		|	КонтактныеЛицаКонтактнаяИнформация.Ссылка = &КонтактноеЛицо
		|	И КонтактныеЛицаКонтактнаяИнформация.Тип В(&ТипыКИ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	КонтактныеЛицаКонтактнаяИнформация.НомерСтроки";
	
	Запрос.УстановитьПараметр("Контрагент", КонтактноеЛицо.Владелец);
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	КакСвязаться = "";
	
	Пока Выборка.Следующий() Цикл
		КакСвязаться = КакСвязаться + ?(КакСвязаться = "", "", ", ") + Выборка.Представление;
	КонецЦикла;
	
	СтрокаУчастники = Участники.Добавить();
	СтрокаУчастники.Контакт = КонтактноеЛицо.Владелец;
	СтрокаУчастники.КакСвязаться = КакСвязаться;
	
	Выборка = МассивРезультатов[1].Выбрать();
	КакСвязаться = "";
	
	Пока Выборка.Следующий() Цикл
		КакСвязаться = КакСвязаться + ?(КакСвязаться = "", "", ", ") + Выборка.Представление;
	КонецЦикла;
	
	СтрокаУчастники = Участники.Добавить();
	СтрокаУчастники.Контакт = КонтактноеЛицо;
	СтрокаУчастники.КакСвязаться = КакСвязаться;
	
КонецПроцедуры // ЗаполнитьПоКонтактныеЛица()

// Процедура заполнения документа на основании события.
//
// Параметры:
//	ДанныеЗаполнения - Структура
//	
Процедура ЗаполнитьПоСобытие(ДанныеЗаполнения)
	
	Участники.Очистить();
	
	// Заполнение участников
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДанныеЗаполнения,
		"Команда",
		ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить()) = ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СобытиеУчастники.Контакт КАК Контакт,
		|	СобытиеУчастники.КакСвязаться КАК КакСвязаться
		|ИЗ
		|	Документ.Событие.Участники КАК СобытиеУчастники
		|ГДЕ
		|	СобытиеУчастники.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СобытиеУчастники.НомерСтроки");
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.ОснованиеЗаполнения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаУчастники = Участники.Добавить();
			СтрокаУчастники.Контакт = Выборка.Контакт;
			СтрокаУчастники.КакСвязаться = Выборка.КакСвязаться;
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение документов оснований
	ДокументыОснования.Очистить();
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		СтрокаДокументыОснования = ДокументыОснования.Добавить();
		СтрокаДокументыОснования.ДокументОснование = ДанныеЗаполнения.ОснованиеЗаполнения;
		ЗаполнитьТемуПисьма(ДанныеЗаполнения);
	Иначе
		ДокументОснование = ДанныеЗаполнения.ОснованиеЗаполнения;
	КонецЕсли;
	
	УчетнаяЗапись = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ОснованиеЗаполнения, "УчетнаяЗапись");
	
КонецПроцедуры // ЗаполнитьПоСобытие()

// Процедура заполнения документа на основании сверки взаиморасчетов.
//
Процедура ЗаполнитьПоСверкеВзаиморасчетов(СверкаВзаиморасчетовСсылка)
	
	ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	ДокументОснование = СверкаВзаиморасчетовСсылка;
	
	Участники.Очистить();
	Если ЗначениеЗаполнено(СверкаВзаиморасчетовСсылка.Контрагент) Тогда
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.Контакт = СверкаВзаиморасчетовСсылка.Контрагент;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОснование.ПредставительКонтрагента) Тогда
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.Контакт = ДокументОснование.ПредставительКонтрагента;
	КонецЕсли;
	ЗаполнитьКакСвязаться();
	
	ДокументыОснования.Очистить();
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		СтрокаДокументыОснования = ДокументыОснования.Добавить();
		СтрокаДокументыОснования.ДокументОснование = ДокументОснование;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоСверкеВзаиморасчетов()

// Процедура заполнения документа на основании задания на работу.
//
// Параметры:
//	ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу - задание на работу.
//	
Процедура ЗаполнитьПоЗаданиеНаРаботу(ЗаданиеНаРаботу)
	
	Участники.Очистить();
	
	// Заполнение шапки документа.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗаданиеНаРаботу);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Работы.Заказчик) = ТИП(Справочник.Контрагенты)
	|			ТОГДА Работы.Заказчик
	|		КОГДА ТИПЗНАЧЕНИЯ(Работы.Заказчик) = ТИП(Справочник.ДоговорыКонтрагентов)
	|			ТОГДА Работы.Заказчик.Владелец
	|		КОГДА ТИПЗНАЧЕНИЯ(Работы.Заказчик) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА Работы.Заказчик.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	Работы.ДатаНачала КАК НачалоСобытия,
	|	Работы.ДатаОкончания КАК ОкончаниеСобытия
	|ИЗ
	|	Документ.ЗаданиеНаРаботу.Работы КАК Работы
	|ГДЕ
	|	Работы.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			СтрокаУчастники = Участники.Добавить();
			СтрокаУчастники.Контакт = Выборка.Контрагент;
			ЗаполнитьКакСвязаться();
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументыОснования.Очистить();
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		СтрокаДокументыОснования = ДокументыОснования.Добавить();
		СтрокаДокументыОснования.ДокументОснование = ЗаданиеНаРаботу;
	Иначе
		ДокументОснование = ЗаданиеНаРаботу;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаданиеНаРаботу()

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя - заказ покупателя.
//	
Процедура ЗаполнитьПоЗаказПокупателя(ЗаказПокупателя)
	
	ДокументыОснования.Очистить();
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		СтрокаДокументыОснования = ДокументыОснования.Добавить();
		СтрокаДокументыОснования.ДокументОснование = ЗаказПокупателя;
	Иначе
		ДокументОснование = ЗаказПокупателя;
	КонецЕсли;
	Проект = ЗаказПокупателя.Проект;
	
	Участники.Очистить();
	СтрокаУчастники = Участники.Добавить();
	СтрокаУчастники.Контакт = ЗаказПокупателя.Контрагент;
	ЗаполнитьКакСвязаться();
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

Процедура ЗаполнитьПоЗаказНаПроизводство(ЗаказНаПроизводство)
	
	ДокументыОснования.Очистить();
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		СтрокаДокументыОснования = ДокументыОснования.Добавить();
		СтрокаДокументыОснования.ДокументОснование = ЗаказНаПроизводство;
	Иначе
		ДокументОснование = ЗаказНаПроизводство;
	КонецЕсли;
	
	Если ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо
		И ТипСобытия <> Перечисления.ТипыСобытий.СообщениеSMS Тогда
		
		НачалоСобытия		= ЗаказНаПроизводство.Старт;
		ОкончаниеСобытия	= ЗаказНаПроизводство.Финиш;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПриемИПередачаВРемонт(ПриемИПередачаВРемонт)
	
	ДокументыОснования.Очистить();
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		СтрокаДокументыОснования = ДокументыОснования.Добавить();
		СтрокаДокументыОснования.ДокументОснование = ПриемИПередачаВРемонт;
	Иначе
		ДокументОснование = ПриемИПередачаВРемонт;
	КонецЕсли;
	
	Участники.Очистить();
	СтрокаУчастники = Участники.Добавить();
	СтрокаУчастники.Контакт = ПриемИПередачаВРемонт.Контрагент;
	ЗаполнитьКакСвязаться();
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

// Процедура заполнения документа на основании задания на работу.
//
// Параметры:
//	СтруктураЗаполнения - структура - структура с данными заполнения.
//	
Процедура ЗаполнитьПоТекущейСтрокеЗаданияНаРаботу(СтруктураЗаполнения)
	
	Участники.Очистить();
	ДокументыОснования.Очистить();
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		СтрокаДокументыОснования = ДокументыОснования.Добавить();
		СтрокаДокументыОснования.ДокументОснование = СтруктураЗаполнения.Основание;
	Иначе
		ДокументОснование = СтруктураЗаполнения.Основание;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЗаполнения.Заказчик) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтрокаУчастники = Участники.Добавить();
		СтрокаУчастники.Контакт = СтруктураЗаполнения.Заказчик;
	ИначеЕсли ТипЗнч(СтруктураЗаполнения.Заказчик) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СтрокаУчастники = Участники.Добавить();
		СтрокаУчастники.Контакт = СтруктураЗаполнения.Заказчик.Владелец;
	ИначеЕсли ТипЗнч(СтруктураЗаполнения.Заказчик) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаУчастники = Участники.Добавить();
		СтрокаУчастники.Контакт = СтруктураЗаполнения.Заказчик.Контрагент;
	КонецЕсли;
	
	Если СтрокаУчастники <> Неопределено И ЗначениеЗаполнено(СтрокаУчастники.Контакт) Тогда
		ЗаполнитьКакСвязаться();
	КонецЕсли;
	
	НачалоСобытия = СтруктураЗаполнения.ДатаНачала;
	ОкончаниеСобытия = СтруктураЗаполнения.ДатаОкончания;
	
	Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	
КонецПроцедуры // ЗаполнитьПоТекущейСтрокеЗаданияНаРаботу()

// Процедура заполняет значение реквизита табличной части "Как связаться" в зависимости от типа события
//
Процедура ЗаполнитьКакСвязаться()
	
	Контрагенты = Участники.ВыгрузитьКолонку("Контакт");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(Контрагенты, Тип("Строка"));
	КонтактныеЛица = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Контрагенты);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(Контрагенты, Тип("СправочникСсылка.КонтактныеЛица"));
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(КонтактныеЛица, Тип("СправочникСсылка.Контрагенты"));
	
	ТипыКИ = Новый Массив;
	Если НЕ ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS И НЕ ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	Если НЕ ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		ТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	КонецЕсли;
	
	Если Контрагенты.Количество() > 0 Тогда
		ТаблицаКИ_Контрагентов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Контрагенты, ТипыКИ);
		ТаблицаКИ_Контрагентов.Сортировать("Объект ВОЗР, Тип УБЫВ");
	КонецЕсли;
	
	Если КонтактныеЛица.Количество() > 0 Тогда
		ТаблицаКИ_КонтактныхЛиц = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(КонтактныеЛица, ТипыКИ);
		ТаблицаКИ_КонтактныхЛиц.Сортировать("Объект ВОЗР, Тип УБЫВ");
	КонецЕсли;
	
	Отбор = Новый Структура("Объект");
	Индекс = 0;
	
	Пока Индекс <= Участники.Количество()-1 Цикл
		
		ТекСтр = Участники[Индекс];
		Отбор.Объект = ТекСтр.Контакт;
		СтрокиКИ = Новый Массив;
		
		Если ТипЗнч(ТекСтр.Контакт) = Тип("СправочникСсылка.Контрагенты") И ТаблицаКИ_Контрагентов <> Неопределено И ТаблицаКИ_Контрагентов.Количество() > 0 Тогда
			СтрокиКИ = ТаблицаКИ_Контрагентов.НайтиСтроки(Отбор);
		ИначеЕсли ТипЗнч(ТекСтр.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") И ТаблицаКИ_КонтактныхЛиц <> Неопределено И ТаблицаКИ_КонтактныхЛиц.Количество() > 0 Тогда
			СтрокиКИ = ТаблицаКИ_КонтактныхЛиц.НайтиСтроки(Отбор);
		КонецЕсли;
		
		// Для SMS каждый телефон на новой строке
		// Для прочих типов события выводим контактную информацию в одну строку
		
		Если ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
			ПервоеЗначениеКИ = Истина;
			Для Каждого СтрокаКИ Из СтрокиКИ Цикл
				Если НЕ ПервоеЗначениеКИ Тогда
					Индекс = Индекс + 1;
					ТекСтр = Участники.Вставить(Индекс);
					ТекСтр.Контакт = Отбор.Объект;
				КонецЕсли;
				ТекСтр.КакСвязаться = СтрокаКИ.Представление;
				ПервоеЗначениеКИ = Ложь;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаКИ Из СтрокиКИ Цикл
				ТекСтр.КакСвязаться = "" + ТекСтр.КакСвязаться + ?(ТекСтр.КакСвязаться = "", "", ", ") + СтрокаКИ.Представление;
			КонецЦикла;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет тип значения документа основания.
//
Функция ДопустимыйТипДляВводаНаОсновании(ДокОснование)
	
	Возврат ОбщегоНазначения.ЕстьРеквизитОбъекта(
	"Контрагент",
	ДокОснование.Метаданные());
	
КонецФункции // ПроверитьТипЗнчДанныеЗаполнения(ДокОснование)

#КонецОбласти

#Область ПрограммныйИнтерфейсКалендаряСотрудника

Процедура ОбновитьЗаписьКалендаряПриЗаписиИсточника(ЗаписиПоИсточнику) Экспорт
	
	// Запись календаря существует только для Личной встречи, Телефонного звонка и Прочего события.
	Если ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо
		Или ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		
		Возврат;
	КонецЕсли;
	
	// Отмена всех существующих записей календарей по событию в случае очистки календаря в событии или установки пометки удаления
	Если ПометкаУдаления Или Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда
	
		Для Каждого ЗаписьКалендаря Из ЗаписиПоИсточнику Цикл
			ЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
			ЗаписьКалендаря.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаписиПоИсточнику.Количество() = 0 Тогда
		
		ЗаписьКалендаря = Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
		ЗаписьКалендаря.УстановитьНовыйКод();
		
	Иначе
		
		ЗаписьКалендаря = ЗаписиПоИсточнику[0].ПолучитьОбъект();
		
		Если ЗаписьКалендаря.ПометкаУдаления Тогда
			ЗаписьКалендаря.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбменСGoogle.ОбработатьСменуКалендаря(ЗаписьКалендаря, КалендарьСотрудника);
	
	ЗаписьКалендаря.Наименование	= Тема;
	ЗаписьКалендаря.Источник		= Ссылка;
	ЗаписьКалендаря.Календарь		= КалендарьСотрудника;
	ЗаписьКалендаря.Начало			= НачалоСобытия;
	ЗаписьКалендаря.Окончание		= ОкончаниеСобытия;
	ЗаписьКалендаря.Описание		= Содержание;
	
	ЗаписьКалендаря.Записать();
	
КонецПроцедуры

Процедура ОбновитьИсточникПриИзмененииЗаписиКалендаря(ЭлементыПланировщика) Экспорт
	
	Если ЭлементыПланировщика.Количество() > 0 Тогда
		НачалоСобытия		= ЭлементыПланировщика[0].Начало;
		ОкончаниеСобытия	= ЭлементыПланировщика[0].Конец;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(КалендарьСотрудника) Тогда
		КалендарьСотрудника = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойКалендарь");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсЭлектроннаяПочта

Процедура ЗаполнитьДокументыОснования(Знач ИдентификаторОснования, Знач ИдентификаторыСообщений) Экспорт
	
	ИдентификаторОснования = ЭлектроннаяПочтаУНФКлиентСервер.СократитьУгловыеСкобки(ИдентификаторОснования);
	
	Если ЗначениеЗаполнено(ИдентификаторОснования)
		И ИдентификаторыСообщений.Найти(ИдентификаторОснования) = Неопределено Тогда
		ИдентификаторыСообщений.Добавить(ИдентификаторОснования);
	КонецЕсли;
	
	СвязанныеСобытия = РегистрыСведений.ИдентификаторыСообщений.СобытияПоИдентификаторамСообщений(УчетнаяЗапись, ИдентификаторыСообщений);
	
	Для Каждого КлючИЗначение ИЗ СвязанныеСобытия Цикл
		
		Если ДокументыОснования.Найти(КлючИЗначение.Ключ, "ДокументОснование") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаДокументыОснования = ДокументыОснования.Добавить();
		НоваяСтрокаДокументыОснования.ДокументОснование = КлючИЗначение.Значение;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторОснования)
		И Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Если СвязанныеСобытия[ИдентификаторОснования] = Неопределено Тогда
			ДополнительныеСвойства.Вставить("ИдентификаторОснования", ИдентификаторОснования);
		Иначе
			ДокументОснование = СвязанныеСобытия[ИдентификаторОснования];
			ЗаполнитьДокументыОснованияИзСвязанногоСобытия();
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьНесопоставленныеИдентификаторыСообщений(ИдентификаторыСообщений, СвязанныеСобытия);
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснованияИзСвязанногоСобытия() Экспорт
	
	Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СобытиеДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.Событие.ДокументыОснования КАК СобытиеДокументыОснования
	|ГДЕ
	|	СобытиеДокументыОснования.Ссылка = &Событие");
	Запрос.УстановитьПараметр("Событие", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ДокументОснование = Выборка.ДокументОснование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДокументыОснования.Найти(Выборка.ДокументОснование) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаДокументОснования = ДокументыОснования.Добавить();
		НоваяСтрокаДокументОснования.ДокументОснование = Выборка.ДокументОснование;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСсылкиУчастниковПоАдресуЭП(Контакты, АдресЭП) Экспорт
	
	Для Каждого ТекКонтакт Из Контакты Цикл
		
		Если КонтактУжеЯвляетсяУчастником(ТекКонтакт) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтрокиАдресЭП = Участники.НайтиСтроки(
		Новый Структура("КакСвязаться", АдресЭП));
		
		Если Не ЗначениеЗаполнено(НайденныеСтрокиАдресЭП) Тогда
			ТекСтрокаУчастники = Участники.Добавить();
		Иначе
			ТекСтрокаУчастники = Участники.Вставить(Участники.Индекс(НайденныеСтрокиАдресЭП[НайденныеСтрокиАдресЭП.ВГраница()]));
		КонецЕсли;
		
		ТекСтрокаУчастники.Контакт = ТекКонтакт;
		ТекСтрокаУчастники.КакСвязаться = АдресЭП;
		
	КонецЦикла;
	
	ОчиститьДублиУчастников(АдресЭП);
	
КонецПроцедуры

Функция КонтактУжеЯвляетсяУчастником(Контакт) Экспорт
	
	Если ТипЗнч(Контакт) = Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НайденныеСтрокиКонтакт = Участники.НайтиСтроки(
	Новый Структура("Контакт", Контакт));
	
	Возврат ЗначениеЗаполнено(НайденныеСтрокиКонтакт);
	
КонецФункции

Процедура ОчиститьДублиУчастников(АдресЭП) Экспорт
	
	Если Не ЗначениеЗаполнено(АдресЭП) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Участники.НайтиСтроки(
	Новый Структура("КакСвязаться", АдресЭП));
	
	Если НайденныеСтроки.Количество() <=1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		
		Если ТипЗнч(ТекСтрока.Контакт) = Тип("Строка") Тогда
			УчастникКакСтрока = ТекСтрока;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			УчастникКакКонтрагент = ТекСтрока;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			УчастникКакКонтактноеЛицо = ТекСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(УчастникКакКонтактноеЛицо) Тогда
		УдалитьУчастникКакСтрока(УчастникКакСтрока);
		ОчиститьАдресУКонтрагента(УчастникКакКонтрагент);
	ИначеЕсли ЗначениеЗаполнено(УчастникКакКонтрагент) Тогда
		УдалитьУчастникКакСтрока(УчастникКакСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЭлектроннаяПочта

Процедура ЗаполнитьТемуПисьма(ДанныеЗаполнения)
	
	ЗначенияРеквизитовСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ОснованиеЗаполнения, "Тема, ВходящееИсходящееСобытие");
	Если ЗначенияРеквизитовСобытия.ВходящееИсходящееСобытие <> Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Возврат;
	КонецЕсли;
	
	Тема = Документы.Событие.ТемаСПрефиксомОтвета(
	ЗначенияРеквизитовСобытия.Тема,
	ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
	ДанныеЗаполнения,
	"Команда",
	ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить()));
	
КонецПроцедуры

Процедура ЗаполнитьПредставление()
	
	Если ДополнительныеСвойства.Свойство("ТемаИСодержание") Тогда
		ТемаИСодержание = ДополнительныеСвойства.ТемаИСодержание;
		Возврат;
	КонецЕсли;
	
	ТемаИСодержание = Документы.Событие.ТемаИСодержание(Тема, Содержание, СодержаниеHTML);
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторы()
	
	Если ДополнительныеСвойства.Свойство("Идентификатор") Тогда
		РегистрыСведений.ИдентификаторыСобытий.ЗаписатьИдентификатор(УчетнаяЗапись, Ссылка, ДополнительныеСвойства.Идентификатор);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИдентификаторыСообщений") Тогда
		РегистрыСведений.ИдентификаторыСообщений.ЗаписатьИдентификаторы(УчетнаяЗапись, Ссылка, ДополнительныеСвойства.ИдентификаторыСообщений);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИдентификаторОснования") Тогда
		РегистрыСведений.ИдентификаторыПисемДляОтложеннойПривязки.ЗаписатьИдентификаторСообщения(УчетнаяЗапись, ДополнительныеСвойства.ИдентификаторОснования, Истина, Ссылка);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НесопоставленныеИдентификаторыСообщений") Тогда
		Для Каждого ТекИдентификатор Из ДополнительныеСвойства.НесопоставленныеИдентификаторыСообщений Цикл
			Если ДополнительныеСвойства.Свойство("ИдентификаторОснования")
				И ТекИдентификатор = ДополнительныеСвойства.ИдентификаторОснования Тогда
				Продолжить;
			КонецЕсли;
			РегистрыСведений.ИдентификаторыПисемДляОтложеннойПривязки.ЗаписатьИдентификаторСообщения(УчетнаяЗапись, ТекИдентификатор, Ложь, Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	ВыполнитьОтложеннуюПривязкуСобытий();
	
КонецПроцедуры

Процедура ВыполнитьОтложеннуюПривязкуСобытий()
	
	Если Не ДополнительныеСвойства.Свойство("ИдентификаторыСообщений") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекИдентификаторСообщения Из ДополнительныеСвойства.ИдентификаторыСообщений Цикл
		
		ИдентификаторСообщения = ЭлектроннаяПочтаУНФКлиентСервер.СократитьУгловыеСкобки(ТекИдентификаторСообщения);
		
		СобытияДляЗаписи = Новый Соответствие;
		
		ТаблицаСобытий = РегистрыСведений.ИдентификаторыПисемДляОтложеннойПривязки.СвязанныеСобытия(УчетнаяЗапись, ИдентификаторСообщения);
		Для Каждого ТекСтрокаТаблицыСобытий Из ТаблицаСобытий Цикл
			
			Если СобытияДляЗаписи[ТекСтрокаТаблицыСобытий.Событие] = Неопределено Тогда
				СобытияДляЗаписи[ТекСтрокаТаблицыСобытий.Событие] = ТекСтрокаТаблицыСобытий.Событие.ПолучитьОбъект();
			КонецЕсли;
			
			Если ТекСтрокаТаблицыСобытий.ЭтоОснование
				И Не ЗначениеЗаполнено(СобытияДляЗаписи[ТекСтрокаТаблицыСобытий.Событие].ДокументОснование) Тогда
				СобытияДляЗаписи[ТекСтрокаТаблицыСобытий.Событие].ДокументОснование = Ссылка;
				СобытияДляЗаписи[ТекСтрокаТаблицыСобытий.Событие].ЗаполнитьДокументыОснованияИзСвязанногоСобытия();
				Продолжить;
			КонецЕсли;
			
			Если СобытияДляЗаписи[ТекСтрокаТаблицыСобытий.Событие].ДокументыОснования.Найти(Ссылка) = Неопределено Тогда
				НоваяСтрокаДокументыОснования = СобытияДляЗаписи[ТекСтрокаТаблицыСобытий.Событие].ДокументыОснования.Добавить();
				НоваяСтрокаДокументыОснования.ДокументОснование = Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ТекСобытиеДляЗаписи Из СобытияДляЗаписи Цикл
			ТекСобытиеДляЗаписи.Значение.Записать();
		КонецЦикла;
		
		РегистрыСведений.ИдентификаторыПисемДляОтложеннойПривязки.УдалитьИдентификаторСообщения(УчетнаяЗапись, ИдентификаторСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИнтернетПочтовыеВложения()
	
	Если Не ДополнительныеСвойства.Свойство("Вложения") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеСвойства.Вложения) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Вложение Из ДополнительныеСвойства.Вложения Цикл
		
		АдресФайлаВоВременномХранилище = Неопределено;
		
		Если ТипЗнч(Вложение.Значение) = Тип("Строка") И ЭтоАдресВременногоХранилища(Вложение) Тогда
			АдресФайлаВоВременномХранилище = Вложение.Значение;
		ИначеЕсли ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение);
		ИначеЕсли ТипЗнч(Вложение.Значение) = Тип("Картинка") Тогда
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение.ПолучитьДвоичныеДанные());
		ИначеЕсли ТипЗнч(Вложение.Значение) = Тип("Файл") И Вложение.Значение.Существует() И Вложение.Значение.ЭтоФайл() Тогда
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Вложение.Значение.ПолноеИмя));
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Вложение.Ключ);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", Автор);
		ПараметрыФайла.Вставить("ВладелецФайлов", Ссылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения", ПолноеИмяФайла.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПолноеИмяФайла.Расширение));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
		
		СсылкаНаПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьКонтактыВКлассификатор()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеПользователиУчетнойЗаписи = ВсеПользователиУчетнойЗаписи();
	
	Для Каждого ТекУчастник Из Участники Цикл
		
		Если ТипЗнч(ТекУчастник.Контакт) <> Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ТекУчастник.КакСвязаться) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекПользователь Из ВсеПользователиУчетнойЗаписи Цикл
			
			КлассификаторКонтактовОбъект = Справочники.КлассификаторКонтактов.ОбъектПоИдентификатору(НРег(ТекУчастник.КакСвязаться), ТекПользователь);
			Если КлассификаторКонтактовОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Справочники.КлассификаторКонтактов.УстановитьКонтактКакСвязаться(КлассификаторКонтактовОбъект, ТекУчастник.Контакт, ТекУчастник.КакСвязаться);
			КлассификаторКонтактовОбъект.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВсеПользователиУчетнойЗаписи()
	
	Результат = Новый Массив;
	Результат.Добавить(Автор);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетныеЗаписиПользователя.Пользователь
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиПользователя КАК УчетныеЗаписиПользователя
	|ГДЕ
	|	УчетныеЗаписиПользователя.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
	Результат,
	РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь"),
	Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ОпределитьНесопоставленныеИдентификаторыСообщений(ИдентификаторыСообщений, СвязанныеСобытия)
	
	НесопоставленныеИдентификаторыСообщений = Новый Массив;
	
	Для Каждого ТекИдентификатор Из ИдентификаторыСообщений Цикл
		
		Если СвязанныеСобытия[ТекИдентификатор] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НесопоставленныеИдентификаторыСообщений.Добавить(ТекИдентификатор);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НесопоставленныеИдентификаторыСообщений) Тогда
		ДополнительныеСвойства.Вставить("НесопоставленныеИдентификаторыСообщений", НесопоставленныеИдентификаторыСообщений);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьУчастникКакСтрока(УчастникКакСтрока)
	
	Если ЗначениеЗаполнено(УчастникКакСтрока) Тогда
		Участники.Удалить(УчастникКакСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьАдресУКонтрагента(УчастникКакКонтрагент)
	
	Если ЗначениеЗаполнено(УчастникКакКонтрагент) Тогда
		УчастникКакКонтрагент.КакСвязаться = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли