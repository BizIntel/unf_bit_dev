
//------------------------------------------------------------------------------
// СПЕЦИФИКАЦИЯ ПАРАМЕТРОВ ПЕРЕДАВАЕМЫХ В ФОРМУ
//
// см. ОбщиеФормы.ОтправкаСообщения
//------------------------------------------------------------------------------
// СПЕЦИФИКАЦИЯ ФУНКЦИОНИРОВАНИЯ ФОРМЫ
//
//   Если учетные записи не передаются, то учетная запись заполняется значением 
// настройки пользователя по умолчанию. Если настройка не задана, то пользователю
// предлагаются доступные ему учетные записи. 
//
//   Если файлы для вложения существует на сервере 1С:Предприятие, в качестве
// параметра необходимо не двоичные данные, а ссылку на данные во временном
// хранилище.
//
//------------------------------------------------------------------------------

#Область ОписаниеПеременных

&НаКлиенте
Перем ПриведенныйПочтовыйАдрес; // Преобразованный почтовый адрес

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем КонтрагентЗаписан; // Контрагент, по которому было получено оповещение "Запись_Контрагент"

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Элементы.ПолучателиКонтакт.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа 			   = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыСтроки(200));
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьНовоеПисьмоПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ОбработатьПереданныеПараметры(Параметры);
			
		Иначе // Копирование
			
			ДополнитьКартинкиHTML(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "КартинкиHTML").Получить());
			
			ПрочитатьВложения(Параметры.ЗначениеКопирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		Объект.УчетнаяЗапись);
	КонецЕсли;
	
	Содержание = Объект.Содержание;
	СодержаниеHTML = Гипертекст.ОбработатьТекстHTML(Объект.СодержаниеHTML,, ТаблицаВложений());
	
	ИдентификаторСобытия = РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(Объект.УчетнаяЗапись, Объект.Ссылка);
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее
		Или ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		НастроитьФормуПолученногоПисьма();
	Иначе
		НастроитьФормуИсходящегоПисьма();
	КонецЕсли;
	
	УстановитьКартинкиУчастников();
	
	УстановитьЗаголовокГиперссылкиДокументовОснований();
	
	// История темы для автоподбора
	ЗагрузитьИсториюТемСтрокой();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НачатьЗагрузкуСообщенияСПочтовогоСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		КонтрагентЗаписан = Параметр;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДополнитьКартинкиHTML(ТекущийОбъект.КартинкиHTML.Получить());
	
	ПрочитатьВложения(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее
		ИЛИ ЗначениеЗаполнено(РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(ТекущийОбъект.УчетнаяЗапись, ТекущийОбъект.Ссылка)) Тогда
		
		ПередЗаписьюНаСервереВходящегоСобытия(ТекущийОбъект);
	Иначе
		ПередЗаписьюНаСервереИсходящегоСобытия(ТекущийОбъект);
	КонецЕсли;
	
	СопоставитьКонтактИАдресЭППередЗаписьюНаСервере(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Вложения.Ссылка КАК Ссылка,
	|	Вложения.АдресВоВременномХранилище,
	|	Вложения.Представление,
	|	Вложения.Идентификатор
	|ПОМЕСТИТЬ втВложения
	|ИЗ
	|	&Вложения КАК Вложения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытиеПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ втПрисоединенныеФайлы
	|ИЗ
	|	Справочник.СобытиеПрисоединенныеФайлы КАК СобытиеПрисоединенныеФайлы
	|ГДЕ
	|	СобытиеПрисоединенныеФайлы.ВладелецФайла = &СобытиеСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВложения.Ссылка КАК ВложениеСсылка,
	|	втПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайлСсылка,
	|	втВложения.АдресВоВременномХранилище,
	|	втВложения.Представление,
	|	втВложения.Идентификатор
	|ИЗ
	|	втВложения КАК втВложения
	|		ПОЛНОЕ СОЕДИНЕНИЕ втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
	|		ПО втВложения.Ссылка = втПрисоединенныеФайлы.Ссылка");
	
	Запрос.УстановитьПараметр("Вложения", Вложения.Выгрузить());
	Запрос.УстановитьПараметр("СобытиеСсылка", ТекущийОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПрисоединенныйФайлСсылка = NULL Тогда
		// Добавить вложение в присоединенные файлы
			
			Если Не ПустаяСтрока(Выборка.АдресВоВременномХранилище) Тогда
				
				ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Выборка.Представление);
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", ТекущийОбъект.Ссылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ПолноеИмяФайла.ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПолноеИмяФайла.Расширение));
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
				
				ПрисоединенныйФайлСсылка = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, Выборка.АдресВоВременномХранилище);
				
				Вложения.НайтиСтроки(Новый Структура("Представление, АдресВоВременномХранилище", Выборка.Представление, Выборка.АдресВоВременномХранилище))[0].Ссылка = ПрисоединенныйФайлСсылка;
				
				Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
					
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Выборка.Идентификатор;
					ПрисоединенныйФайлОбъект.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Выборка.ВложениеСсылка = NULL Тогда
		// Удалить вложение из присоединенных файлов
			
			ПрисоединенныйФайлОбъект = Выборка.ПрисоединенныйФайлСсылка.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.УстановитьПометкуУдаления(Истина);
			
		Иначе
		// Обновить вложение в присоединенных файлах
			
			ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Выборка.ПрисоединенныйФайлСсылка, 
				Новый Структура("АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста", Выборка.АдресВоВременномХранилище, ""));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(КонтактИАдресЭПДляСопоставления) Тогда
		
		ЭлектроннаяПочтаУНФ.СопоставитьВФонеКонтактИАдресЭПВСобытиях(
		КонтактИАдресЭПДляСопоставления.Контакт,
		КонтактИАдресЭПДляСопоставления.АдресЭП,
		УникальныйИдентификатор);
		
		КонтактИАдресЭПДляСопоставления = Неопределено;
		
	КонецЕсли;
	
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = ВыбранноеЗначение;
		ЗаполнитьСодержаниеСобытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст, ИсторияТемСтрокой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	УчетнаяЗаписьПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элементы.Получатели.ТекущиеДанные.ИндексКартинки = 0 Тогда
		Элементы.Получатели.ТекущиеДанные.ИндексКартинки = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если КонтрагентЗаписан <> ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	КонтактИАдресЭПДляСопоставления = Новый Структура;
	КонтактИАдресЭПДляСопоставления.Вставить("Контакт", ВыбранноеЗначение);
	КонтактИАдресЭПДляСопоставления.Вставить("АдресЭП", Элементы.Получатели.ТекущиеДанные.КакСвязаться);
	Записать();
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипКИ", "АдресЭлектроннойПочты");
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Участники.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыФормы.Вставить("ТекущийКонтрагент", Контакт);
		КонецЕсли;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиКонтактВыборЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаАдреснойКниги", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ПолучателиКакСвязаться.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Элементы.Получатели.ТекущиеДанные.ИндексКартинки = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Получатели.ТекущиеДанные.Контакт) Тогда
		Контакт = Объект.Участники.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока).Контакт;
		ПоказатьЗначение(,Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		// Выбор осуществлен механизмом автоподбора
		Элементы.Получатели.ТекущиеДанные.Контакт = ВыбранноеЗначение;
		Элементы.Получатели.ТекущиеДанные.КакСвязаться = ПолучитьЭлектроннуюПочтуКонтакта(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторКонтактов") Тогда
		
		ЗаполнитьЗначенияСвойств(Элементы.Получатели.ТекущиеДанные, КонтактКакСвязаться(ВыбранноеЗначение));
		
	КонецЕсли;
	
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавлениеФайлаКВложениям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя));
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища);
	Файлы.Добавить(ПередаваемыйФайл);
	ДобавитьФайлыВСписок(Файлы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Выберите учетную запись для отправки почты.'"), ,
			"Объект.УчетнаяЗапись");
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	АдресаПолучателей = Новый Массив;
	Для Каждого Получатель Из Объект.Участники Цикл
		Если ЗначениеЗаполнено(Получатель.КакСвязаться) Тогда
			АдресаПолучателей.Добавить(Получатель.КакСвязаться);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ПриведенныйПочтовыйАдрес = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрСоединить(АдресаПолучателей, "; "));
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуПисьма", ЭтотОбъект);
	СписокОтветов = Новый СписокЗначений;
	СписокОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продублировать отправку'"));
	СписокОтветов.Добавить(КодВозвратаДиалога.Отмена);
	Если ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		ПоказатьВопрос(
		ОписаниеОповещения,
		СтрШаблон(НСтр("ru = 'Это письмо уже отправлялось %1'"), Объект.НачалоСобытия),
		СписокОтветов, 30,
		КодВозвратаДиалога.Отмена,
		НСтр("ru = 'Это письмо уже отправлялось'"),
		КодВозвратаДиалога.Отмена)
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить());
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	ОтветитьПереслать(ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержание(Команда)
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ЗаполнитьСодержаниеСобытия(Объект.Тема);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыОснования(Команда)
	
	АдресВХранилищеДокументовОснований = ПоместитьДокументыОснованияВХранилище();
	ПараметрыФормы = Новый Структура("АдресВХранилищеДокументовОснований", АдресВХранилищеДокументовОснований);
	ОткрытьФорму("Документ.Событие.Форма.ДокументыОснованияЭлектронногоПисьма", ПараметрыФормы
		,,,,, Новый ОписаниеОповещения("ОткрытьДокументыОснованияЗавершение", ЭтотОбъект, Новый Структура("АдресВХранилищеДокументовОснований", АдресВХранилищеДокументовОснований)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		
		Участники = ПолучитьУчастниковСсылочногоТипа();
		
		Если Участники.Количество() = 0 Тогда
			
			ОткрытьВыборШаблонаПоПредмету();
			
		ИначеЕсли Участники.Количество() = 1 Тогда
			
			ОткрытьВыборШаблонаПоПредмету(Участники[0]);
			
		Иначе
			
			СписокПредметов = Новый СписокЗначений;
			СписокПредметов.ЗагрузитьЗначения(Участники);
			ОткрытьВыборПредметаШаблона(СписокПредметов);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ДокументыОснования.Количество() = 1 Тогда
		
		ОткрытьВыборШаблонаПоПредмету(Объект.ДокументыОснования[0].ДокументОснование);
		
	Иначе
		
		СписокПредметов = Новый СписокЗначений;
		Для Каждого Основание Из Объект.ДокументыОснования Цикл
			СписокПредметов.Добавить(Основание.ДокументОснование);
		КонецЦикла;
		
		ОткрытьВыборПредметаШаблона(СписокПредметов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНовоеПисьмоПоУмолчанию()
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru = 'Исходящее письмо  (создание)'");
	
	Объект.НачалоСобытия = '00010101';
	Объект.ОкончаниеСобытия = '00010101';
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Объект.УчетнаяЗапись = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Автор, "ОсновнаяУчетнаяЗаписьЭлектроннойПочты");
	КонецЕсли;
	
	ВключатьПодписьДляНовыхСообщений = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "ВключатьПодписьДляНовыхСообщений", Ложь);
	
	Если ВключатьПодписьДляНовыхСообщений Тогда
		Объект.СодержаниеHTML = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "ПодписьHTML", "");
		ДополнитьКартинкиHTML(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиЭлектроннойПочты", "КартинкиПодписи", Новый Структура));
	КонецЕсли;
	
	ЗаполнитьОтветНаПисьмо();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Не ЗначениеЗаполнено(Объект.Тема) Тогда
		Объект.Тема = Параметры.Тема;
	КонецЕсли;
	
	Если СтрНайти(ВРег(Параметры.Тело), ВРег("doctype html")) > 0 Тогда
		Если Не ЗначениеЗаполнено(Объект.СодержаниеHTML) Тогда
			Объект.СодержаниеHTML = Параметры.Тело;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Объект.Содержание) Тогда
			Объект.Содержание = Параметры.Тело;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ДокументыОснования) = Тип("Массив") Тогда
		ДопустимыеТипыОснований = Метаданные.Документы.Событие.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип;
		Для Каждого ДокументОснование Из Параметры.ДокументыОснования Цикл
			Если ДопустимыеТипыОснований.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
				НоваяСтрока = Объект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = ДокументОснование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		// учетная запись не передана - выбираем первую доступную
		
			ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
			
			Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
				
				Объект.УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Параметры.УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		Объект.УчетнаяЗапись = Параметры.УчетнаяЗапись;
		
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Кому) = Тип("СписокЗначений") Тогда
		ПочтовыйАдресПолучателя = "";
		Для Каждого ЭлементПочтовыйАдрес Из Параметры.Кому Цикл
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.КакСвязаться = ЭлементПочтовыйАдрес.Значение;
			Если ЗначениеЗаполнено(ЭлементПочтовыйАдрес.Представление) Тогда
				НоваяСтрока.Контакт = ЭлементПочтовыйАдрес.Представление;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Строка") Тогда
		НоваяСтрока = Объект.Участники.Добавить();
		НоваяСтрока.КакСвязаться = Параметры.Кому;
	ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда
		Для Каждого СтруктураПолучателя Из Параметры.Кому Цикл
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Контакт = ?(СтруктураПолучателя.Свойство("ИсточникКонтактнойИнформации")
					И ЗначениеЗаполнено(СтруктураПолучателя.ИсточникКонтактнойИнформации),
				СтруктураПолучателя.ИсточникКонтактнойИнформации,
				СтруктураПолучателя.Представление
			);
			НоваяСтрока.КакСвязаться = СтруктураПолучателя.Адрес;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьВложенияИзПараметров(Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенияИзПараметров(Параметры)
	
	Если ТипЗнч(Параметры.Вложения) <> Тип("СписокЗначений")
		И ТипЗнч(Параметры.Вложения) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	КартинкиИзВложений = Новый Структура;
	
	Для Каждого Вложение Из Параметры.Вложения Цикл
		
		Если ТипЗнч(Параметры.Вложения) = Тип("СписокЗначений") Тогда
			
			ОписаниеВложения = Вложения.Добавить();
			ОписаниеВложения.Представление = Вложение.Представление;
			ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Вложение.Представление, ".", Ложь);
			
			Если ЧастиИмениФайла.Количество() > 1 Тогда
				РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
				ОписаниеВложения.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
			КонецЕсли;
			
			Если ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
				ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение, УникальныйИдентификатор);
			ИначеЕсли ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
				ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Вложение.Значение), УникальныйИдентификатор);
			Иначе
				ОписаниеВложения.ПутьКФайлу = Вложение.Значение;
			КонецЕсли;
			
		Иначе // ТипЗнч(Параметры.Вложения) = "массив структур"
			
			Если Вложение.Свойство("Идентификатор") И ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				КартинкиИзВложений.Вставить(
					Вложение.Представление,
					Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище)));
				
			Иначе
				
				ОписаниеВложения = Вложения.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеВложения, Вложение);
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеВложения.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					ОписаниеВложения.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОписаниеВложения.АдресВоВременномХранилище) Тогда
					ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ОписаниеВложения.АдресВоВременномХранилище), УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьКартинкиHTML(КартинкиИзВложений);
	
КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыПисьмаНаСервере(ПриведенныйПочтовыйАдрес)
	
	ПараметрыПисьма = Новый Структура;
	
	Если ЗначениеЗаполнено(ПриведенныйПочтовыйАдрес) Тогда
		ПараметрыПисьма.Вставить("Кому", ПриведенныйПочтовыйАдрес);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыПисьма.Вставить("Тема", Строка(Объект.Тема));
	КонецЕсли;
	
	АдресПолучателяСкрытойКопии = ПолучитьАдресПолучателяСкрытойКопии();
	Если ЗначениеЗаполнено(АдресПолучателяСкрытойКопии) Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", АдресПолучателяСкрытойКопии);
	КонецЕсли;
	
	ИдентификаторОснования = ИдентификаторыОснований(Истина);
	Если ЗначениеЗаполнено(ИдентификаторОснования) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторОснования", ИдентификаторОснования);
	КонецЕсли;
	
	ИдентификаторыОснований = ИдентификаторыОснований(Ложь);
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", ИдентификаторыОснований);
	КонецЕсли;
	
	ВложенияПисьма = Новый Соответствие;
	ТелоПисьма = "";
	ВложенияКартинки = Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(ТелоПисьма, ВложенияКартинки);
	ПеренестиКартинкиВоВложения(ТелоПисьма, ВложенияПисьма, ВложенияКартинки);
	ДобавитьВложенияФайлыНаСервере(ВложенияПисьма);
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	ПараметрыПисьма.Вставить("Вложения", ВложенияПисьма);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция ИдентификаторыОснований(ТолькоОдин)
	
	Основания = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Основания.Добавить(Объект.ДокументОснование);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Основания, Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"), Истина);
	
	МассивИдентификаторов = РегистрыСведений.ИдентификаторыСообщений.ИдентификаторыСообщений(Объект.УчетнаяЗапись, Основания);
	Если Не ЗначениеЗаполнено(МассивИдентификаторов) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Для Каждого ТекИдентификатор Из МассивИдентификаторов Цикл
		
		Если Не ЗначениеЗаполнено(ТекИдентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(СтрШаблон("<%1>", ТекИдентификатор));
		
		Если ТолькоОдин Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, " ");
	
КонецФункции

&НаСервере
Процедура ПеренестиКартинкиВоВложения(ТекстHTML, ВложенияПисьма, Знач ВложенияКартинки)
	
	ДокументHTML = УправлениеНебольшойФирмойВзаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	// Картинки из временного хранилища
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если Не ЭтоАдресВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = ПолучитьИзВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое);
		ОписаниеВложения.Идентификатор = Новый УникальныйИдентификатор;
		ВложенияПисьма.Вставить(
		СтрШаблон("cid%1", СтрЗаменить(ОписаниеВложения.Идентификатор, "-", "")),
		ОписаниеВложения);
		
		НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		НовыйАтрибутКартинки.ТекстовоеСодержимое = СтрШаблон("cid:%1", ОписаниеВложения.Идентификатор);
		Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		
	КонецЦикла;
	
	// Картинки из вложений
	СоответствиеИмениКартинкиИдентификатору = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ВложенияКартинки Цикл
		
		ИДКартинки = Новый УникальныйИдентификатор;
		СоответствиеИмениКартинкиИдентификатору[КлючИЗначение.Ключ] = ИДКартинки;
		
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = КлючИЗначение.Значение.ПолучитьДвоичныеДанные();
		ОписаниеВложения.Идентификатор = ИДКартинки;
		ВложенияПисьма.Вставить(КлючИЗначение.Ключ, ОписаниеВложения);
		
	КонецЦикла;
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если СоответствиеИмениКартинкиИдентификатору[АтрибутИсточникКартинки.ТекстовоеСодержимое] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		НовыйАтрибутКартинки.ТекстовоеСодержимое = "cid:" + СоответствиеИмениКартинкиИдентификатору[АтрибутИсточникКартинки.ТекстовоеСодержимое];
		Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		
	КонецЦикла;
	
	ТекстHTML = УправлениеНебольшойФирмойВзаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьПочтовоеСообщение(Знач ПараметрыПисьма, Знач УчетнаяЗапись, Знач СеансовыеДанные)
	
	Возврат ЭлектроннаяПочтаУНФ.ОтправитьПочтовоеСообщение(ПараметрыПисьма, УчетнаяЗапись);
	
КонецФункции

&НаКлиенте
Процедура ПолучателиКонтактВыборЗавершение(АдресВХранилище, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
		ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтактыПоАдреснойКниге(АдресВХранилище)
	
	ТаблицаАдресатов = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ОбработкаТекущейСтроки = Истина;
	Для Каждого ПодобраннаяСтрока Из ТаблицаАдресатов Цикл
		
		Если ОбработкаТекущейСтроки Тогда
			СтрокаУчастники = Объект.Участники.НайтиПоИдентификатору(Элементы.Получатели.ТекущаяСтрока);
			ОбработкаТекущейСтроки = Ложь;
		Иначе
			СтрокаУчастники = Объект.Участники.Добавить();
		КонецЕсли;
		
		СтрокаУчастники.Контакт = ПодобраннаяСтрока.Контакт;
		СтрокаУчастники.КакСвязаться = ПодобраннаяСтрока.КакСвязаться;
		
	КонецЦикла;
	
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВложения(Событие)
	
	Вложения.Очистить();
	
	Для Каждого ТекОписаниеВложения Из ВложенияСобытия(Событие) Цикл
		НоваяСтрокаВложения = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВложения, ТекОписаниеВложения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВложенияСобытия(Событие)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СобытиеПрисоединенныеФайлы.Ссылка,
	|	СобытиеПрисоединенныеФайлы.Наименование,
	|	СобытиеПрисоединенныеФайлы.Расширение,
	|	СобытиеПрисоединенныеФайлы.ИндексКартинки,
	|	СобытиеПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.СобытиеПрисоединенныеФайлы КАК СобытиеПрисоединенныеФайлы
	|ГДЕ
	|	СобытиеПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И СобытиеПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("ВладелецФайла", Событие);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("Ссылка", Выборка.Ссылка);
		ОписаниеВложения.Вставить("Идентификатор", Выборка.ИДФайлаЭлектронногоПисьма);
		ОписаниеВложения.Вставить("Представление", Выборка.Наименование + ?(ПустаяСтрока(Выборка.Расширение), "", "." + Выборка.Расширение));
		ОписаниеВложения.Вставить("ИндексКартинки", Выборка.ИндексКартинки);
		ОписаниеВложения.Вставить("Данные", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка));
		ОписаниеВложения.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ОписаниеВложения.Данные, УникальныйИдентификатор));
		
		Результат.Добавить(ОписаниеВложения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьВложенияФайлыНаСервере(ВложенияПисьма)
	
	Для Каждого Вложение Из Вложения Цикл
		ОписаниеВложения = Новый Структура("ДвоичныеДанные, Идентификатор");
		ОписаниеВложения.ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
		ОписаниеВложения.Идентификатор = "";
		ВложенияПисьма.Вставить(Вложение.Представление, ОписаниеВложения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаКВложениям()
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Режим", РежимДиалогаВыбораФайла.Открытие);
	ПараметрыДиалога.Вставить("МножественныйВыбор", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлВоВложенияПриПомещенииФайлов", ЭтотОбъект);
	
	СтандартныеПодсистемыКлиент.ПоказатьПомещениеФайла(ОписаниеОповещения, УникальныйИдентификатор, "", ПараметрыДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВоВложенияПриПомещенииФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		
		Файл = Новый Файл(ОписаниеФайла.Имя);
		ПозицияТочки = СтрНайти(Файл.Расширение, ".");
		РасширениеБезТочки = Сред(Файл.Расширение, ПозицияТочки + 1);
		
		Вложение = Вложения.Добавить();
		Вложение.Представление = Файл.Имя;
		Вложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение), УникальныйИдентификатор);
		Вложение.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	Если Элементы.Вложения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = Вложения.НайтиПоИдентификатору(Элементы.Вложения.ТекущаяСтрока);
	
	#Если ВебКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		Файл.УстановитьТолькоЧтение(Истина);
		Если Файл.Расширение = ".mxl" Тогда
			ТабличныйДокумент = ПолучитьТабличныйДокументПоДвоичнымДанным(ВыбранноеВложение.АдресВоВременномХранилище);
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ВыбранноеВложение.Представление);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяВременногоФайла);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия, ЭтотОбъект);
		Иначе
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТабличныйДокументПоДвоичнымДанным(Знач ДвоичныеДанные)
	
	Если ТипЗнч(ДвоичныеДанные) = Тип("Строка") Тогда
		// передан адрес двоичных данных во временном хранилище
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДвоичныеДанные);
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение табличного документа'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция ПоместитьДокументыОснованияВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.ДокументыОснования.Выгрузить(,
			"ДокументОснование"
		),
		УникальныйИдентификатор
	);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДокументыОснованияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресВХранилищеДокументовОснований = ДополнительныеПараметры.АдресВХранилищеДокументовОснований;
	
	Если Результат = КодВозвратаДиалога.OK Тогда
		Модифицированность = Истина;
		ПолучитьДокументыОснованияИзХранилища(АдресВХранилищеДокументовОснований);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДокументыОснованияИзХранилища(АдресВХранилищеДокументовОснований)
	
	ТаблицаДокументыОснования = ПолучитьИзВременногоХранилища(АдресВХранилищеДокументовОснований);
	Объект.ДокументыОснования.Очистить();
	Для каждого СтрокаДокументыОснования Из ТаблицаДокументыОснования Цикл
		Строка = Объект.ДокументыОснования.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаДокументыОснования);
	КонецЦикла;
	
	УстановитьЗаголовокГиперссылкиДокументовОснований();
	
КонецПроцедуры // ПолучитьДокументыОснованияИзХранилища()

&НаСервере
Процедура УстановитьЗаголовокГиперссылкиДокументовОснований()
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Элементы.ОткрытьДокументыОснования.Заголовок = НСтр("ru = 'Список документов оснований'");
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = Объект.ДокументыОснования[0].ДокументОснование;
	
	Если Объект.ДокументыОснования.Количество() = 1 Тогда
		Элементы.ОткрытьДокументыОснования.Заголовок = ПервыйДокумент;
		Возврат;
	КонецЕсли;
	
	Элементы.ОткрытьДокументыОснования.Заголовок = СтрШаблон(НСтр("ru = '%1 и ещё %2.'"),
	ПервыйДокумент,
	СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
	Объект.ДокументыОснования.Количество() - 1,
	НСтр("ru = 'основание,основания,оснований'")));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресПолучателяСкрытойКопии()
	
	Возврат УправлениеНебольшойФирмойВзаимодействия.ПолучитьАдресПолучателяСкрытойКопии();
	
КонецФункции

&НаСервере
Процедура СохранитьКонтактнуюИнформациюПолучателейПисьма()
	СобытиеОбъект = РеквизитФормыВЗначение("Объект");
	СобытиеОбъект.СохранитьКонтактнуюИнформациюПолучателейПисьма();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлектроннуюПочтуКонтакта(Контакт)
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Контакт,
		?(ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты"),
			Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
			Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица)
	);
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактКакСвязаться(ЭлементКлассификатораКонтактов)
	
	Возврат Справочники.КлассификаторКонтактов.КонтактКакСвязаться(ЭлементКлассификатораКонтактов);
	
КонецФункции

&НаСервере
Процедура УчетнаяЗаписьПриИзмененииНаСервере()
	
	Если ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(Объект.УчетнаяЗапись) Тогда
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		Объект.УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьПереслать(ПараметрКоманды)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Команда", ПараметрКоманды);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо"));
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ОснованиеЗаполнения", Объект.Ссылка);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ПараметрыОснования", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("НачалоСобытия", Объект.НачалоСобытия);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("СписокУчастников", Объект.СписокУчастников);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Тема", Объект.Тема);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("Содержание", Объект.Содержание);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("СодержаниеHTML", Объект.СодержаниеHTML);
	ПараметрыОткрытия.ЗначенияЗаполнения.ПараметрыОснования.Вставить("КартинкиHTML", КартинкиHTML);
	
	Если ПараметрКоманды = ЭлектроннаяПочтаУНФКлиентСервер.КомандаПереслать() 
		И Вложения.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить("Вложения", Новый СписокЗначений);
		Для Каждого ТекВложение Из Вложения Цикл
			ПараметрыОткрытия.Вложения.Добавить(ТекВложение.АдресВоВременномХранилище, ТекВложение.Представление);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыОткрытия);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "повторить" Тогда
		ПовторитьЗагрузкуСообщения();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "настроить" Тогда
		ОткрытьФорму("РегистрСведений.УчетныеЗаписиПользователя.Форма.НастройкаУчетныхЗаписейПользователя");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьЗагрузкуСообщения()
	
	Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.Загрузка;
	НачатьЗагрузкуСообщенияСПочтовогоСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеУчетнойЗаписи(Результат, Параметры) Экспорт
	
	Оповестить(ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияУчетнаяЗаписьОбновлена(), Объект.УчетнаяЗапись);
	ПовторитьЗагрузкуСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	СеансовыеДанные = Результат;
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ОбновитьСеансовыеДанные", СеансовыеДанные);
	ПовторитьЗагрузкуСообщения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветНаПисьмо()
	
	ДанныеИсходногоСообщения = ДанныеИсходногоСообщения();
	
	Если Не ЗначениеЗаполнено(ДанныеИсходногоСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Тема = Документы.Событие.ТемаСПрефиксомОтвета(
	ДанныеИсходногоСообщения.Тема,
	ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
	Параметры.ЗначенияЗаполнения,
	"Команда",
	ЭлектроннаяПочтаУНФКлиентСервер.КомандаОтветить()));
	
	Если ДанныеИсходногоСообщения.Свойство("ИдентификаторСобытия") Тогда
		// Содержание исходного события ещё не загружено - сохраняем значения свойств для заполнения после асинхронной загрузки.
		ДанныеИсходногоСобытия = Новый Структура("НачалоСобытия,СписокУчастников,Тема,УчетнаяЗапись,ИдентификаторСобытия");
		ЗаполнитьЗначенияСвойств(ДанныеИсходногоСобытия, ДанныеИсходногоСообщения);
	Иначе
		ЗаполнитьТекстОтвета(ДанныеИсходногоСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстОтвета(ДанныеИсходногоСообщения)
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСообщения.СодержаниеHTML) Тогда
		
		ТекстОтвета = СтрШаблон(НСтр(
		"ru = '<div>&nbsp;</div>
		|---------- Исходное сообщение ----------<br>
		|Отправлено: %1<br>
		|Участники: %2<br>
		|Тема: %3<br>
		|<div>&nbsp;</div>
		|%4'"),
		Гипертекст.ЗаменитьСпецСимволыHTML(Формат(ДанныеИсходногоСообщения.НачалоСобытия, "ДФ='dd.MM.yyyy HH:mm'")),
		Гипертекст.ЗаменитьСпецСимволыHTML(ДанныеИсходногоСообщения.СписокУчастников),
		Гипертекст.ЗаменитьСпецСимволыHTML(ДанныеИсходногоСообщения.Тема),
		Гипертекст.РазложитьТекстHTML(ДанныеИсходногоСообщения.СодержаниеHTML).Тело);
		
		Объект.СодержаниеHTML = ТекстОтвета;
		ДополнитьКартинкиHTML(ДанныеИсходногоСообщения.КартинкиHTML);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеИсходногоСообщения.Содержание) Тогда
		
		ТекстОтвета = СтрШаблон(НСтр(
		"ru = '
		|---------- Исходное сообщение ----------
		|Отправлено: %1
		|Участники: %2
		|Тема: %3
		|
		|%4'"),
		Формат(ДанныеИсходногоСообщения.НачалоСобытия, "ДФ='dd.MM.yyyy HH:mm'"),
		ДанныеИсходногоСообщения.СписокУчастников,
		ДанныеИсходногоСообщения.Тема,
		ДанныеИсходногоСообщения.Содержание);
		
		Объект.Содержание = ТекстОтвета;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКартинкиHTML(Источник)
	
	Если КартинкиHTML = Неопределено Тогда
		КартинкиHTML = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(КартинкиHTML, Источник, Истина);
	
КонецПроцедуры

&НаСервере
Функция ДанныеИсходногоСообщения()
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ПараметрыОснования")
		И ТипЗнч(Параметры.ЗначенияЗаполнения.ПараметрыОснования) = Тип("Структура") Тогда
		ПереопределитьИдентификаторыКартинокHTML(Параметры.ЗначенияЗаполнения.ПараметрыОснования);
		Возврат Параметры.ЗначенияЗаполнения.ПараметрыОснования;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) <> Тип("Структура") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ОснованиеЗаполнения = Неопределено;
	Параметры.Основание.Свойство("ОснованиеЗаполнения", ОснованиеЗаполнения);
	
	Если ТипЗнч(ОснованиеЗаполнения) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	ОснованиеЗаполнения,
	"ТипСобытия,НачалоСобытия,СписокУчастников,Тема,Содержание,СодержаниеHTML,КартинкиHTML,УчетнаяЗапись");
	
	Если Результат.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЗначениеКартинкиHTML = Результат.КартинкиHTML.Получить();
	Если ТипЗнч(ЗначениеКартинкиHTML) = Тип("Структура") Тогда
		Результат.КартинкиHTML = ЗначениеКартинкиHTML;
	Иначе
		Результат.КартинкиHTML = Новый Структура;
	КонецЕсли;
	
	Результат.Вставить("Ссылка", ОснованиеЗаполнения);
	
	Если ЗначениеЗаполнено(Результат.СодержаниеHTML) Тогда
		ПереопределитьИдентификаторыКартинокHTML(Результат);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Содержание)
		И Не ЗначениеЗаполнено(Результат.СодержаниеHTML) Тогда
		Результат.Вставить("ИдентификаторСобытия",
		РегистрыСведений.ИдентификаторыСобытий.ИдентификаторСобытия(Результат.УчетнаяЗапись, ОснованиеЗаполнения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПереопределитьИдентификаторыКартинокHTML(Знач ДанныеИсходногоСообщения)
	
	Если ДанныеИсходногоСообщения.Свойство("Вложения") Тогда
		ВложенияИсходногоСообщения = ДанныеИсходногоСообщения.Вложения;
	ИначеЕсли ДанныеИсходногоСообщения.Свойство("Ссылка") Тогда
		ВложенияИсходногоСообщения = ВложенияСобытия(ДанныеИсходногоСообщения.Ссылка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВложенияИсходногоСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВложенийПоИдентификаторам = Новый Соответствие;
	Для Каждого ТекВложение Из ВложенияИсходногоСообщения Цикл
		Если ЗначениеЗаполнено(ТекВложение.Идентификатор) Тогда
			ДанныеВложенийПоИдентификаторам[СтрШаблон("cid:%1", ТекВложение.Идентификатор)] = ТекВложение.Данные;
		КонецЕсли;
	КонецЦикла;
	
	ДокументHTML = УправлениеНебольшойФирмойВзаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ДанныеИсходногоСообщения.СодержаниеHTML);
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если ДанныеВложенийПоИдентификаторам[АтрибутИсточникКартинки.ТекстовоеСодержимое] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Переопределяем идентификаторы картинок, чтобы они могли быть использованы в качестве ключей структуры КартинкиHTML.
		НовыйИдентификаторКартинки = СтрШаблон("cid%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
		
		ДанныеИсходногоСообщения.КартинкиHTML.Вставить(
		НовыйИдентификаторКартинки,
		Новый Картинка(ДанныеВложенийПоИдентификаторам[АтрибутИсточникКартинки.ТекстовоеСодержимое]));
		
		НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		НовыйАтрибутКартинки.ТекстовоеСодержимое = НовыйИдентификаторКартинки;
		Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		
	КонецЦикла;
	
	ДанныеИсходногоСообщения.СодержаниеHTML = УправлениеНебольшойФирмойВзаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПолученногоПисьма()
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаОтправить.Видимость = Ложь;
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Элементы.ФормаОтветить.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаОтветить.Видимость = Истина;
	Иначе
		Элементы.ФормаПереслать.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	Элементы.ФормаПереслать.Видимость = Истина;
	Элементы.Получатели.ИзменятьПорядокСтрок = Ложь;
	Элементы.Получатели.ИзменятьСоставСтрок = Ложь;
	Элементы.ПолучателиКонтакт.РедактированиеТекста = Ложь;
	Элементы.ПолучателиКонтакт.КнопкаВыбора = Ложь;
	Элементы.ПолучателиКонтакт.КнопкаОчистки = Ложь;
	Элементы.ПолучателиКакСвязаться.ТолькоПросмотр = Истина;
	Элементы.Вложения.ТолькоПросмотр = Истина;
	Элементы.Тема.ТолькоПросмотр = Истина;
	Элементы.Тема.КнопкаВыбора = Ложь;
	Элементы.ЗаполнитьСодержание.Видимость = Ложь;
	Элементы.КоманднаяПанельФорматированногоДокумента.Видимость = Ложь;
	Элементы.ФорматированныйДокумент.Видимость = Ложь;
	Элементы.СодержаниеВходящегоПисьма.Видимость = Истина;
	Элементы.УчетнаяЗапись.ТолькоПросмотр = Истина;
	Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.HTML;
		ТекущийЭлемент = Элементы.СодержаниеHTML;
	ИначеЕсли ЗначениеЗаполнено(Содержание) Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.ПростойТекст;
		ТекущийЭлемент = Элементы.Содержание;
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторСобытия)
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись)
		И Объект.ЗагрузитьПриОткрытии Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.Загрузка;
		Элементы.ФормаОтветить.Доступность = Ложь;
		Элементы.ФормаПереслать.Доступность = Ложь;
		Элементы.ФормаЗаписать.Доступность = Ложь;
	КонецЕсли;
	
	НастроитьВидимостьДат();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуИсходящегоПисьма()
	
	Если Объект.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСобытия)
		И Не ДанныеИсходногоСобытия.Свойство("Содержание") Тогда
		Элементы.ФорматированныйДокумент.Видимость = Ложь;
		Элементы.СодержаниеВходящегоПисьма.Видимость = Истина;
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.Загрузка;
		Элементы.ФормаОтветить.Доступность = Ложь;
		Элементы.ФормаПереслать.Доступность = Ложь;
		Элементы.ФормаЗаписать.Доступность = Ложь;
		Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	Иначе
		Элементы.ФорматированныйДокумент.Видимость = Истина;
		Элементы.СодержаниеВходящегоПисьма.Видимость = Ложь;
		Элементы.ФормаЗаполнитьПоШаблону.Видимость = Истина;
		
		Если ЗначениеЗаполнено(Объект.СодержаниеHTML) Тогда
			ФорматированныйДокумент.УстановитьHTML(Объект.СодержаниеHTML, КартинкиHTML);
		Иначе
			ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Объект.Содержание));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Тема) Тогда
			ТекущийЭлемент = Элементы.ФорматированныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьВидимостьДат();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДат()
	
	Если Объект.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Элементы.ДатаОтправки.Видимость = Ложь;
		Элементы.ДатаПолучения.Видимость = Истина;
	Иначе
		Элементы.ДатаОтправки.Видимость = Истина;
		Элементы.ДатаПолучения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереВходящегоСобытия(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Содержание) Тогда
		ТекущийОбъект.Содержание = Содержание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Тогда
		ТекущийОбъект.СодержаниеHTML = СодержаниеHTML;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереИсходящегоСобытия(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Идентификатор", ИдентификаторСобытия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыСообщений) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИдентификаторыСообщений", ИдентификаторыСообщений);
	КонецЕсли;
	
	ТекстHTML = "";
	Картинки = Новый Структура;
	ТекущийОбъект.Содержание = ФорматированныйДокумент.ПолучитьТекст();
	Если ФорматированныйДокумент.Элементы.Количество() <> 0 Тогда
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Картинки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Содержание)
		Или ЗначениеЗаполнено(Картинки) Тогда
		ТекущийОбъект.СодержаниеHTML = ТекстHTML;
	Иначе
		ТекущийОбъект.СодержаниеHTML = "";
	КонецЕсли;
	
	ТекущийОбъект.КартинкиHTML = Новый ХранилищеЗначения(Картинки);
	
	Если ТипЗнч(ТекущийОбъект.Тема) = Тип("Строка") Тогда
		// Сохрание тем в истории для автоподбора
		
		ЭлементИстории = ИсторияТемСтрокой.НайтиПоЗначению(СокрЛП(ТекущийОбъект.Тема));
		Если ЭлементИстории <> Неопределено Тогда
			ИсторияТемСтрокой.Удалить(ЭлементИстории);
		КонецЕсли;
		ИсторияТемСтрокой.Вставить(0, СокрЛП(ТекущийОбъект.Тема));
		
		Пока ИсторияТемСтрокой.Количество() > 30 Цикл
			ИсторияТемСтрокой.Удалить(ИсторияТемСтрокой.Количество() - 1);
		КонецЦикла;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокВыбораТемыСобытия", "", ИсторияТемСтрокой.ВыгрузитьЗначения());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуПисьма(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПисьма = СформироватьПараметрыПисьмаНаСервере(ПриведенныйПочтовыйАдрес);
	
	Если ПараметрыПисьма = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка формирования параметров почтового сообщения'"));
		Возврат;
	КонецЕсли;
	
	Попытка
		РезультатОтправки = ОтправитьПочтовоеСообщение(ПараметрыПисьма, Объект.УчетнаяЗапись, СеансовыеДанные);
		ИдентификаторСобытия = РезультатОтправки.Идентификатор;
		ИдентификаторыСообщений = РезультатОтправки.ИдентификаторыСообщений;
		Успешно = Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Успешно = Ложь;
	КонецПопытки;
	
	Если Не Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Состояние = ПредопределенноеЗначение("Справочник.СостоянияСобытий.Завершено");
	Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Объект.НачалоСобытия = Объект.Дата;
	Объект.ОкончаниеСобытия = Объект.Дата;
	Записать();
	
	СохранитьКонтактнуюИнформациюПолучателейПисьма();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сообщение успешно отправлено'"), ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(Объект.Ссылка), БиблиотекаКартинок.Информация32);
	Закрыть(Успешно);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСообщенияСПочтовогоСервера()
	
	Если ТребуетсяЗагрузитьСообщениеСПочтовогоСервера() Тогда
		ПодключитьОбработчикОжидания("ЗагрузитьСообщениеСПочтовогоСервера", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТребуетсяЗагрузитьСообщениеСПочтовогоСервера()
	
	Если Объект.ТипСобытия <> ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ЗагрузитьПриОткрытии И ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.ВходящееИсходящееСобытие = ПредопределенноеЗначение("Перечисление.ВходящееИсходящееСобытие.Исходящее")
		И ЗначениеЗаполнено(ДанныеИсходногоСобытия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСообщениеСПочтовогоСервера()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.МаксимальныйИнтервал = 5;
	
	ЗагрузитьСообщениеСПочтовогоСервераНаСервере();
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	СостояниеЗадания = ПрочитатьСостояниеЗадания(ИдентификаторЗадания);
	
	Если СостояниеЗадания.ПроизошлаОшибка Тогда
		ОтобразитьОшибку(СостояниеЗадания);
		Возврат;
	КонецЕсли;
	
	Если СостояниеЗадания.ЗаданиеВыполнено Тогда
		ОбработатьРезультатВыполненияЗадания();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания(
	"Подключаемый_ПроверитьВыполнениеЗадания",
	ПараметрыОбработчикаОжидания.ТекущийИнтервал,
	Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьСостояниеЗадания(ИдентификаторЗадания)
	
	Результат = Новый Структура;
	Результат.Вставить("Прогресс", ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания));
	Результат.Вставить("ПроизошлаОшибка", Документы.Событие.ПроизошлаОшибка(Результат.Прогресс));
	Если Не Результат.ПроизошлаОшибка Тогда
		Результат.Вставить("ЗаданиеВыполнено", ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьОшибку(СостояниеЗадания)
	
	Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.ПроизошлаОшибка;
	Элементы.ОписаниеОшибки.Заголовок = СостояниеЗадания.Прогресс.ДополнительныеПараметры.ОписаниеОшибки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСообщениеСПочтовогоСервераНаСервере()
	
	ОбменСGoogle.ИнициализироватьСеансовыеДанные(
	СеансовыеДанные,
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Почта,
	Объект.УчетнаяЗапись);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СеансовыеДанные", СеансовыеДанные);
	ПараметрыЗадания.Вставить("ВходящееИсходящееСобытие", Объект.ВходящееИсходящееСобытие);
	ПараметрыЗадания.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыЗадания.Вставить("Идентификатор",
	?(ЗначениеЗаполнено(ДанныеИсходногоСобытия), ДанныеИсходногоСобытия.ИдентификаторСобытия, ИдентификаторСобытия));
	
	Результат = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	"ЭлектроннаяПочтаУНФ.ЗагрузитьСодержаниеСообщения",
	ПараметрыЗадания,,,
	Ложь);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища = Результат.АдресХранилища;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыполненияЗадания()
	
	ОбработатьРезультатВыполненияЗаданияНаСервере();
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияЗаданияНаСервере()
	
	ДанныеСобытия = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(ДанныеСобытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаОтветить.Доступность = Истина;
	Элементы.ФормаПереслать.Доступность = Истина;
	Элементы.ФормаЗаписать.Доступность = Истина;
	
	Если ЗначениеЗаполнено(ДанныеИсходногоСобытия) Тогда
		ДанныеИсходногоСобытия.Вставить("Тема", ДанныеСобытия.Тема);
		ДанныеИсходногоСобытия.Вставить("Содержание", ДанныеСобытия.Содержание);
		ДанныеИсходногоСобытия.Вставить("СодержаниеHTML", ДанныеСобытия.СодержаниеHTML);
		ДанныеИсходногоСобытия.Вставить("КартинкиHTML", Новый Структура);
		Если ДанныеСобытия.Свойство("КартинкиHTML") Тогда
			ДанныеИсходногоСобытия.КартинкиHTML = ДанныеСобытия.КартинкиHTML;
		КонецЕсли;
		Если ДанныеСобытия.Свойство("Вложения") Тогда
			ДанныеИсходногоСобытия.Вставить("Вложения", ДанныеСобытия.Вложения);
		КонецЕсли;
		ПереопределитьИдентификаторыКартинокHTML(ДанныеИсходногоСобытия);
		ЗаполнитьТекстОтвета(ДанныеИсходногоСобытия);
		НастроитьФормуИсходящегоПисьма();
	Иначе
		ЗаполнитьВложения(ДанныеСобытия);
		Объект.Тема = ДанныеСобытия.Тема;
		Содержание = ДанныеСобытия.Содержание;
		СодержаниеHTML = ДанныеСобытия.СодержаниеHTML;
		Объект.ЗагрузитьПриОткрытии = Ложь;
		Записать();
		УстановитьКартинкиУчастников();
	КонецЕсли;
	
	Если Вложения.Количество() > 0 Тогда
		СодержаниеHTML = Гипертекст.ОбработатьТекстHTML(ДанныеСобытия.СодержаниеHTML,, Вложения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеHTML) Тогда
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.HTML;
		ТекущийЭлемент = Элементы.СодержаниеHTML;
	Иначе
		Элементы.СодержаниеВходящегоПисьма.ТекущаяСтраница = Элементы.ПростойТекст;
		ТекущийЭлемент = Элементы.Содержание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ДанныеСобытия)
	
	Если Не ДанныеСобытия.Свойство("Вложения") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекВложение Из ДанныеСобытия.Вложения Цикл
		
		Если ТипЗнч(ТекВложение.Данные) = Тип("ДвоичныеДанные") Тогда
			
			ОписаниеВложения = Вложения.Добавить();
			ОписаниеВложения.Идентификатор = ТекВложение.Идентификатор;
			ОписаниеВложения.Представление = ТекВложение.ИмяФайла;
			ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТекВложение.Данные, УникальныйИдентификатор);
			
			ЧастиИмениФайла = СтрРазделить(ОписаниеВложения.Представление, ".");
			Если ЗначениеЗаполнено(ЧастиИмениФайла) Тогда
				РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
				ОписаниеВложения.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекВложение.Данные) = Тип("ИнтернетПочтовоеСообщение") Тогда
			
			ОписаниеВложения = Вложения.Добавить();
			ОписаниеВложения.Идентификатор = ТекВложение.Идентификатор;
			ОписаниеВложения.Представление = СтрШаблон("%1.eml", ТекВложение.Данные.Тема);
			ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТекВложение.Данные.ПолучитьИсходныеДанные(), УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкиУчастников()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.ВидКонтрагента
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&Контрагенты)");
	Запрос.УстановитьПараметр("Контрагенты", Объект.Участники.Выгрузить().ВыгрузитьКолонку("Контакт"));
	
	ВидыКонтрагентов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыКонтрагентов[Выборка.Ссылка] = Выборка.ВидКонтрагента;
	КонецЦикла;
	
	Для Каждого ТекСтрокаУчастники Из Объект.Участники Цикл
		
		Если ТипЗнч(ТекСтрокаУчастники.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ТекСтрокаУчастники.ИндексКартинки = 4;
		ИначеЕсли ВидыКонтрагентов[ТекСтрокаУчастники.Контакт] = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			ТекСтрокаУчастники.ИндексКартинки = 3;
		ИначеЕсли ВидыКонтрагентов[ТекСтрокаУчастники.Контакт] = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
			ТекСтрокаУчастники.ИндексКартинки = 3;
		ИначеЕсли ВидыКонтрагентов[ТекСтрокаУчастники.Контакт] <> Неопределено Тогда
			ТекСтрокаУчастники.ИндексКартинки = 2;
		Иначе
			ТекСтрокаУчастники.ИндексКартинки = 1;
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьКонтактИАдресЭППередЗаписьюНаСервере(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(КонтактИАдресЭПДляСопоставления) Тогда
		Возврат;
	КонецЕсли;
	
	Контакты = ЭлектроннаяПочтаУНФ.СвязанныеКонтрагентыИКонтактныеЛица(КонтактИАдресЭПДляСопоставления.Контакт, КонтактИАдресЭПДляСопоставления.АдресЭП);
	
	ТекущийОбъект.УстановитьСсылкиУчастниковПоАдресуЭП(Контакты, КонтактИАдресЭПДляСопоставления.АдресЭП);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска)
	
	ДанныеВыбораКонтактов = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтрагентов = Справочники.Контрагенты.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтрагентов Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (контрагент)"));
	КонецЦикла;
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКонтактныхЛиц Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (контактное лицо)"));
	КонецЦикла;
	
	ДанныеВыбораКлассификатораКонтактов = Справочники.КлассификаторКонтактов.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораКлассификатораКонтактов Цикл
		ДанныеВыбораКонтактов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление,, ЭлементСписка.Картинка);
	КонецЦикла;
	
	Возврат ДанныеВыбораКонтактов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(знач СтрокаПоиска, знач ИсторияТемСтрокой)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (тема события)"));
	КонецЦикла;
	
	Для Каждого ЭлементИстории Из ИсторияТемСтрокой Цикл
		Если Лев(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)) = СтрокаПоиска Тогда
			СписокВыбораТемы.Добавить(ЭлементИстории.Значение, 
				Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(СтрокаПоиска,Новый Шрифт(,,Истина),WebЦвета.Зеленый), Сред(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)+1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьИсториюТемСтрокой()
	
	СписокВыбораТемы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СписокВыбораТемыСобытия", "");
	Если СписокВыбораТемы <> Неопределено Тогда
		ИсторияТемСтрокой.ЗагрузитьЗначения(СписокВыбораТемы);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокВыбораТемыСобытия()

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытия(ТемаСобытия)
	
	Если ТипЗнч(ТемаСобытия) <> Тип("СправочникСсылка.ТемыСобытий") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст()) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСодержаниеСобытияЗавершение", ЭтотОбъект, Новый Структура("ТемаСобытия", ТемаСобытия)),
			НСтр("ru = 'Перезаполнить содержание по выбранной теме?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ДополнительныеПараметры.ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияФрагмент(Знач ТемаСобытия)
	
	УстановитьСодержаниеHTMLпоТемеСобытия(ФорматированныйДокумент, ТемаСобытия);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура УстановитьСодержаниеHTMLпоТемеСобытия(ФорматированныйДокумент, ТемаСобытия)
	
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ТемаСобытия.Содержание));
	
КонецПроцедуры

&НаСервере
Функция ТаблицаВложений()
	
	Результат = Вложения.Выгрузить();
	
	Если Не ЗначениеЗаполнено(КартинкиHTML) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекКартинка Из КартинкиHTML Цикл
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТекКартинка.Значение.ПолучитьДвоичныеДанные(), УникальныйИдентификатор);
		НоваяСтрока.Идентификатор = ТекКартинка.Ключ;
		НоваяСтрока.Представление = ТекКартинка.Ключ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПисьмоПоШаблону(ДанныеСообщения)
	
	Если ТипЗнч(ДанныеСообщения.Получатель) = Тип("Массив") И ДанныеСообщения.Получатель.Количество() > 0 Тогда
		Объект.Участники.Очистить();
		Для Каждого Получатель Из ДанныеСообщения.Получатель Цикл
			Участник = Объект.Участники.Добавить();
			Участник.Контакт = ?(ЗначениеЗаполнено(Получатель.ИсточникКонтактнойИнформации), Получатель.ИсточникКонтактнойИнформации, Получатель.Представление);
			Участник.КакСвязаться = Получатель.Адрес;
		КонецЦикла;
	КонецЕсли;
	
	Вложения.Очистить();
	КартинкиФД = Новый Структура;
	Если ДанныеСообщения.Вложения <> Неопределено Тогда
		Для Каждого Вложение Из ДанныеСообщения.Вложения Цикл
			Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
				КартинкиФД.Вставить(
					Вложение.Представление,
					Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище)));
			Иначе
				
				НовоеВложение = Вложения.Добавить();
				НовоеВложение.Представление = Вложение.Представление;
				НовоеВложение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
					ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище), ЭтотОбъект.УникальныйИдентификатор);
				
				ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Вложение.Представление, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					НовоеВложение.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеБезТочки);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Объект.Тема = ДанныеСообщения.Тема;
	ФорматированныйДокумент.УстановитьHTML(ДанныеСообщения.Текст, КартинкиФД);
	
	УстановитьКартинкиУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборШаблонаПоПредмету(ПредметШаблона = Неопределено)
	
	Если Не ЕстьДоступныеШаблоны(ПредметШаблона) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Нет доступных шаблонов. Добавить новые шаблоны можно в списке шаблонов: Еще больше возможностей - CRM - Шаблоны сообщений'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВидСообщения", "Письмо");
	Если ПредметШаблона <> Неопределено Тогда
		ПараметрыФормы.Вставить("Предмет", ПредметШаблона);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораШаблона", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныСообщений.Форма.СформироватьСообщение", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораШаблона(ДанныеСообщения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПисьмоПоШаблону(ДанныеСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборПредметаШаблона(СписокПредметов)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбораПредмета", ЭтотОбъект);
	СписокПредметов.Вставить(0, "Общий", НСтр("ru='<Общие шаблоны>'"));
	
	СписокПредметов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выбор предмета шаблона'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбораПредмета(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "Общий" Тогда
		ОткрытьВыборШаблонаПоПредмету();
	Иначе
		ОткрытьВыборШаблонаПоПредмету(ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДоступныеШаблоны(ПредметШаблона)
	Возврат ШаблоныСообщенийПереопределяемый.ЕстьДоступныеШаблоны(Истина, ПредметШаблона);
КонецФункции

&НаСервере
Функция ПолучитьУчастниковСсылочногоТипа()
	
	Участники = Объект.Участники.Выгрузить(,"Контакт").ВыгрузитьКолонку("Контакт");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(Участники, Тип("Строка"));
	Индекс = Участники.ВГраница();
	Пока Индекс >= 0 Цикл
		Если Не ЗначениеЗаполнено(Участники[Индекс]) Тогда
			Участники.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
