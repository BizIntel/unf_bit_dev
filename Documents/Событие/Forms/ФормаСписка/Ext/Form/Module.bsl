
#Область ПеременныеМодуля

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаскраситьСписок();
	
	УстановитьОтборТекущиеДела();
	УстановитьОтборТипСобытия();
	
	Если Параметры.Свойство("Контакт") И ЗначениеЗаполнено(Параметры.Контакт) Тогда
		КонтекстКонтакт = Параметры.Контакт;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТЧУчастники.Контакт", Параметры.Контакт);
		Элементы.Контрагенты.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ДокументОснование") И ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
		ОтборОснование = Параметры.ДокументОснование;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДокументОснование", ОтборОснование);
	КонецЕсли;
	
	КонтекстноеОткрытие = Параметры.Свойство("ТекущиеДела") Или Параметры.Свойство("Контакт") Или Параметры.Свойство("ДокументОснование");
	
	Если Не КонтекстноеОткрытие Тогда
		
		// УНФ.ОтборыСписка
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список,,,,ОтборТипСобытия);
		// Конец УНФ.ОтборыСписка
		
	КонецЕсли;
	
	НастроитьГруппуПочтоваяСлужба();
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация");
	// Конец УНФ.ПанельКонтактнойИнформации
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И НЕ КонтекстноеОткрытие Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СостоянияСобытий" Тогда
		РаскраситьСписок();
	КонецЕсли;
	
	Если ИмяСобытия = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияУчетнаяЗаписьОбновлена() Тогда
		Если НЕ ПочтовыеСлужбыПодключены Тогда
			НастроитьГруппуПочтоваяСлужба();
			НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = ЭлектроннаяПочтаУНФКлиентСервер.ИмяСобытияИзмененСоставПодключенныхУчетныхЗаписей() Тогда
		НастроитьГруппуПочтоваяСлужба();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьСеансовыеДанные" Тогда
		ОбработатьРезультатЗапросаТокена(Параметр, );
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
	ЗаполняемоеЗначение = Новый Структура;
	Если ЗначениеЗаполнено(Параметры.ТипСобытия) Тогда
		ЗаполняемоеЗначение.Вставить("ТипСобытия", Параметры.ТипСобытия);
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборОснование) Тогда
		
		Отказ = Истина;
		
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборОснование);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ЗначениеЗаполнено(КонтекстКонтакт) Тогда
		
		Отказ = Истина;
		
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", КонтекстКонтакт);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
		ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
		
	Иначе
		
		ОтборПоКонтрагенту = ПолучитьОтборПоКонтрагенту();
		
		Если ОтборПоКонтрагенту <> Неопределено Тогда
			
			Отказ = Истина;
			
			ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборПоКонтрагенту);
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
			ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, , "НачалоСобытия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	КонтактыКонтрагента = ПолучитьКонтактыКонтрагента(ВыбранноеЗначение);
	
	УстановитьМеткуИОтборСписка("ТЧУчастники.Контакт", Элемент.Родитель.Имя, КонтактыКонтрагента, Строка(ВыбранноеЗначение));
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ТипСобытия", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Состояние", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВажностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Важность", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Проект", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборовНажатие(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьСобытие(Команда)
	
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Сред(Команда.Имя, 8)));
	Если ЗначениеЗаполнено(ОтборОснование) Тогда
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", ОтборОснование);
	ИначеЕсли ЗначениеЗаполнено(КонтекстКонтакт) Тогда
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", КонтекстКонтакт);
	Иначе
		ЗаполняемоеЗначение.Вставить("ОснованиеЗаполнения", Новый Структура);
		Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Ответственный", ОтборОтветственный);
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборСостояние) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Состояние", ОтборСостояние);
		КонецЕсли;
		ОтборПоКонтрагенту = ПолучитьОтборПоКонтрагенту();
		Если ЗначениеЗаполнено(ОтборПоКонтрагенту) Тогда
			ЗаполняемоеЗначение.ОснованиеЗаполнения.Вставить("Контакт", ОтборПоКонтрагенту);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура РаскраситьСписок()
	
	// Раскраска списка
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ВыборкаСостоянияСобытия = Справочники.СостоянияСобытий.Выбрать();
	Пока ВыборкаСостоянияСобытия.Следующий() Цикл
		
		ЦветФона = ВыборкаСостоянияСобытия.Цвет.Получить();
		Если ТипЗнч(ЦветФона) <> Тип("Цвет") Тогда
			Продолжить;
		КонецЕсли; 
		
		ЭлементУсловногоОформления = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаСостоянияСобытия.Ссылка;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветФона);
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = "По состоянию события " + ВыборкаСостоянияСобытия.Наименование;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru='События'");
	ТекДата = ТекущаяДатаСеанса();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ПометкаУдаления",
		Ложь
	);
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Справочники.СостоянияСобытий.Отменено);
	СписокСостояний.Добавить(Справочники.СостоянияСобытий.Завершено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияСобытий.Ссылка
		|ИЗ
		|	Справочник.СостоянияСобытий КАК СостоянияСобытий
		|ГДЕ
		|	СостоянияСобытий.ПометкаУдаления = ЛОЖЬ
		|	И НЕ СостоянияСобытий.Ссылка В(&СписокСостояний)";
	
	Запрос.УстановитьПараметр("СписокСостояний", СписокСостояний);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокСостояний.Очистить();
	
	Пока Выборка.Следующий() Цикл
		СписокСостояний.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Состояние", "Состояния", СписокСостояний);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Состояние");
	
	РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Ответственный", "Ответственные", УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя());
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Ответственный");
	
	Если Параметры.Свойство("ПросроченоВыполнение") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='просрочено выполнение'");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"НачалоСобытия",
			'00010101',
			ВидСравненияКомпоновкиДанных.НеРавно
		);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ОкончаниеСобытия",
			НачалоДня(ТекДата),
			ВидСравненияКомпоновкиДанных.Меньше
		);
		Элементы.ПредставлениеПериода.Видимость = Ложь;
		
	ИначеЕсли Параметры.Свойство("НаСегодня") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='на сегодня'");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"НачалоСобытия",
			КонецДня(ТекДата),
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
		);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"ОкончаниеСобытия",
			НачалоДня(ТекДата),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно
		);
		Элементы.ПредставлениеПериода.Видимость = Ложь;
		
	ИначеЕсли Параметры.Свойство("ВРаботе") Тогда
		
		Заголовок = Заголовок + ": " + НСтр("ru='в работе'");
		
	КонецЕсли;
	
	Если Элементы.ПредставлениеПериода.Видимость Тогда
		ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	КонецЕсли;
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТипСобытия()
	
	Если НЕ ЗначениеЗаполнено(Параметры.ТипСобытия) Тогда
		Возврат;
	Иначе
		ОтборТипСобытия = Параметры.ТипСобытия;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Элементы.ОтборТипСобытия.Видимость = Ложь;
	Элементы.СписокГруппаСоздать.Видимость = Ложь;
	Элементы.ФормаСоздать.Видимость = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипСобытия",
		Параметры.ТипСобытия
	);
	
	Элементы.ГруппаПочтоваяСлужба.Видимость			= Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо;
	Элементы.УчетнаяЗапись.Видимость				= Элементы.ГруппаПочтоваяСлужба.Видимость;
	Элементы.ФормаУчетныеЗаписи.Видимость			= Элементы.ГруппаПочтоваяСлужба.Видимость;
	Элементы.ЗагрузитьПредыдущиеПисьма.Видимость	= Элементы.ГруппаПочтоваяСлужба.Видимость;
	Элементы.ВходящееИсходящее.Видимость			= Параметры.ТипСобытия <> Перечисления.ТипыСобытий.СообщениеSMS;
	Элементы.Проекты.Видимость						= Не (Параметры.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS
														Или Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
	
	Если Параметры.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		Заголовок = НСтр("ru='События: телефонные звонки'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Заголовок = НСтр("ru='События: электронные письма'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.СообщениеSMS Тогда
		Заголовок = НСтр("ru='События: сообщения SMS'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча Тогда
		Заголовок = НСтр("ru='События: личные встречи'");
	ИначеЕсли Параметры.ТипСобытия = Перечисления.ТипыСобытий.Прочее Тогда
		Заголовок = НСтр("ru='События: прочие'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактыКонтрагента(Контрагент)
	
	Контакты = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Контакты;
	КонецЕсли;
	
	Контакты.Добавить(Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Контрагент
		|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Контакты.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Контакты;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформацииСервер();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтборПоКонтрагенту()
	
	НайденныеСтроки = ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", "ТЧУчастники.Контакт"));
	ОтборПоКонтрагенту = Неопределено;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ТипЗнч(НайденнаяСтрока.Метка) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементСписка Из НайденнаяСтрока.Метка Цикл
				Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
					ОтборПоКонтрагенту = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтборПоКонтрагенту;
	
КонецФункции

#КонецОбласти

#Область ПанельКонтактнойИнформации

// УНФ.ПанельКонтактнойИнформации
&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СобытиеУчастники.Контакт = Контрагенты.Ссылка
	|ГДЕ
	|	СобытиеУчастники.Ссылка = &Событие";
	
	Запрос.УстановитьПараметр("Событие", Элементы.Список.ТекущаяСтрока);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, Выборка.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец УНФ.ПанельКонтактнойИнформации

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения = "" Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект,,, ОтборТипСобытия);
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПочтаУНФ

&НаКлиенте
Процедура ОтборВходящееИсходящееПриИзменении(Элемент)
	
	УстановитьОтборВходящееИсходящее();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("УчетнаяЗапись", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ДействияПриОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "повторить" Тогда
		
		НачатьПроверкуПочтыНаКлиенте(РежимЗагрузки);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "настроить" Тогда
		
		ОткрытьФорму("РегистрСведений.УчетныеЗаписиПользователя.Форма.НастройкаУчетныхЗаписейПользователя");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПочту(Команда)
	
	Если Не ПочтовыеСлужбыПодключены Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПредыдущиеПисьма(Команда)
	
	Если Не ПочтовыеСлужбыПодключены Тогда
		Возврат;
	КонецЕсли;
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьПочтовуюСлужбуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "IMAP" Тогда
		ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Gmail" Тогда
		НачатьАвторизацию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписи(Команда)
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиПользователя.Форма.НастройкаУчетныхЗаписейПользователя");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВходящееИсходящее()
	
	Если ЗначениеЗаполнено(ОтборВходящееИсходящее) Тогда
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ВходящееИсходящее", ОтборВходящееИсходящее);
	Иначе
		УправлениеНебольшойФирмойКлиентСервер.УдалитьЭлементОтбораСписка(Список, "ВходящееИсходящее");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппуПочтоваяСлужба()
	
	Если ЗначениеЗаполнено(Параметры.ТипСобытия)
		И Параметры.ТипСобытия <> Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПодключитьУчетнуюЗапись.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты);

	ПочтовыеСлужбыПодключены = РегистрыСведений.УчетныеЗаписиПользователя.ПочтовыеСлужбыПодключены(Пользователи.ТекущийПользователь());
	
	Если ПочтовыеСлужбыПодключены Тогда
		Элементы.ГруппаПочтоваяСлужба.Видимость = Истина;
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаЗагрузитьПочту;
		Если ЗначениеЗаполнено(КонтекстКонтакт) Тогда
			Команды.ПроверитьПочту.Заголовок = НСтр("ru = 'Загрузить переписку'");
			Команды.ПроверитьПочту.Подсказка = СтрШаблон(НСтр("ru = 'Загрузить переписку с ""%1""'"), КонтекстКонтакт);
			Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Ложь;
		Иначе
			Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПочтоваяСлужба.Видимость = Элементы.ПодключитьУчетнуюЗапись.Видимость;
		Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаПодключитьПочтовуюСлужбу;
		Элементы.ЗагрузитьПредыдущиеПисьма.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуПочтыНаКлиенте(Режим)
	
	РежимЗагрузки = Режим;
	
	Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаВыполняетсяСинхронизация;
	Прогресс = "";
	Элементы.ДекорацияПрогресс.Заголовок = ЗаголовокПрогресса(Режим, КонтекстКонтакт);
	ПодключитьОбработчикОжидания("ЗагрузитьЗаголовкиСообщений", 0.1, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПрогресса(Режим, Контакт)
	
	Если ЗначениеЗаполнено(Контакт) Тогда
		Возврат НСтр("ru = 'Загрузка переписки'");
	КонецЕсли;
	
	Если Режим = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		Возврат НСтр("ru = 'Проверка почты'");
	КонецЕсли;
	
	Если Режим = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		Возврат НСтр("ru = 'Загрузка предыдущих сообщений'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьЗаголовкиСообщений()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.МаксимальныйИнтервал = 5;
	
	ЗагрузитьЗаголовкиСообщенийНаСервере();
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	СостояниеЗадания = ПрочитатьСостояниеЗадания(ИдентификаторЗадания);
	ОтобразитьПрогресс(СостояниеЗадания);
	
	Если СостояниеЗадания.ПроизошлаОшибка Тогда
		ОтобразитьОшибку(СостояниеЗадания);
		Возврат;
	КонецЕсли;
	
	Если СостояниеЗадания.ЗаданиеВыполнено Тогда
		ОбработатьРезультатВыполненияЗаданияНаСервере();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания(
	"Подключаемый_ПроверитьВыполнениеЗадания",
	ПараметрыОбработчикаОжидания.ТекущийИнтервал,
	Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьСостояниеЗадания(ИдентификаторЗадания)
	
	Результат = Новый Структура;
	Результат.Вставить("Прогресс", ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания));
	Результат.Вставить("ПроизошлаОшибка", Документы.Событие.ПроизошлаОшибка(Результат.Прогресс));
	Если Не Результат.ПроизошлаОшибка Тогда
		Результат.Вставить("ЗаданиеВыполнено", ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПрогресс(СостояниеЗадания)
	
	Если ПустаяСтрока(Прогресс) Тогда
		Прогресс = ЗаголовокПрогресса(РежимЗагрузки, КонтекстКонтакт);
	КонецЕсли;
	
	Если ТипЗнч(СостояниеЗадания.Прогресс) = Тип("Структура") Тогда
		ПрогрессТекст = "";
		СостояниеЗадания.Прогресс.Свойство("Текст", ПрогрессТекст);
		Если ЗначениеЗаполнено(ПрогрессТекст) Тогда
			Прогресс = ПрогрессТекст;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияПрогресс.Заголовок = Прогресс;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьОшибку(СостояниеЗадания)
	
	Элементы.ГруппаПочтоваяСлужба.ТекущаяСтраница = Элементы.СтраницаПроизошлаОшибка;
	Элементы.ПроизошлаОшибка.Подсказка = СостояниеЗадания.Прогресс.ДополнительныеПараметры.ОписаниеОшибки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияЗаданияНаСервере()
	
	НастроитьГруппуПочтоваяСлужба();
	
	Элементы.Список.Обновить();
	РезультатыЗагрузкиЗаголовков = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(РезультатыЗагрузкиЗаголовков) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагруженоПисем = 0;
	СсылкаНаПоследнееЗагруженноеСобытие = Документы.Событие.ПустаяСсылка();
	
	Для Каждого ТекРезультат Из РезультатыЗагрузкиЗаголовков Цикл
		ЗагруженоПисем = ЗагруженоПисем + ТекРезультат.Загружено;
		СсылкаНаПоследнееЗагруженноеСобытие = ТекРезультат.СсылкаНаСобытие;
	КонецЦикла;
	
	Элементы.РезультатЗагрузки.Заголовок = СтрШаблон(
	НСтр("ru = 'Загружено %1'"),
	СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
	ЗагруженоПисем,
	НСтр("ru = 'письмо,письма,писем'")));
	
	Если ЗначениеЗаполнено(СсылкаНаПоследнееЗагруженноеСобытие) Тогда
		Элементы.Список.ТекущаяСтрока = СсылкаНаПоследнееЗагруженноеСобытие;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗаголовкиСообщенийНаСервере()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("РежимЗагрузки", РежимЗагрузки);
	ПараметрыЗадания.Вставить("ОтборПоКонтакту", КонтекстКонтакт);
	
	Результат = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	"ЭлектроннаяПочтаУНФ.ЗагрузитьПочтуПоКомандеПользователя",
	ПараметрыЗадания,,,
	Ложь);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища = Результат.АдресХранилища;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаписьУчетнойЗаписи(Результат, Параметры) Экспорт
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаТокена", ЭтотОбъект);
	ОткрытьФорму(
	"РегистрСведений.СеансовыеДанныеGoogle.Форма.ЗапросТокена",
	Новый Структура("ОписанияОбластейДоступа", ОбменСGoogleКлиентСервер.ОписанияОбластейДоступаПочта()),
	ЭтаФорма,,,,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьУчетнуюЗаписьGoogleНаСервере(Результат);
	
	НачатьПроверкуПочтыНаКлиенте(ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУчетнуюЗаписьGoogleНаСервере(СеансовыеДанные)
	
	УчетнаяЗаписьGoogle = ОбменСGoogle.СоздатьУчетнуюЗаписьGoogle(СеансовыеДанные);
	
	РегистрыСведений.СеансовыеДанныеGoogle.ЗаписатьСеансовыеДанные(
	СеансовыеДанные,
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Почта,
	УчетнаяЗаписьGoogle);
	
	НастроитьГруппуПочтоваяСлужба();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
