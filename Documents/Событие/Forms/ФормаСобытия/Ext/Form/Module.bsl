
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.КонтактыКонтакт.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	Элементы.Тема.ОграничениеТипа			 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200));
	
	ЭтотОбъект.ПерсональноеМобильноеУстройство = ТелефонияСервер.ПерсональноеМобильноеУстройство();
	Элементы.НабратьНомер.Видимость = ЗначениеЗаполнено(ПерсональноеМобильноеУстройство);
	Элементы.КонтактыИндексПиктограммы.Видимость = ЗначениеЗаполнено(ПерсональноеМобильноеУстройство);
	Если Не ЗначениеЗаполнено(ПерсональноеМобильноеУстройство) Тогда
		Элементы.КонтрагентКакСвязаться.МаксимальнаяШирина = 35;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДатаДокумента = Объект.Дата;
	Иначе
		ПрочитатьРеквизиты(Объект);
		АвтоЗаголовок = Ложь;
		Заголовок = СтрШаблон(
		НСтр("ru = 'Событие: %1 (создание)'"),
		Объект.ТипСобытия);
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОповеститьРабочийКалендарь = Ложь;
	
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.НачалоСобытияВремя);
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ОкончаниеСобытияВремя);
	
	// История темы для автоподбора
	ЗагрузитьИсториюТемСтрокой();
	
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененоСобытие", Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборЗначенияКонтактнойИнформации" И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПоказатьОповещениеОНабореНомера(ВыбранноеЗначение);
		НабратьНомерСервер(ВыбранноеЗначение, ПерсональноеМобильноеУстройство);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		ПараметрыКонтактногоЛица = ПолучитьПараметрыКонтактногоЛица(НовыйОбъект);
		Если ПараметрыКонтактногоЛица.Владелец <> Контрагент Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаКонтакты = Контакты.Добавить();
		СтрокаКонтакты.Контакт = НовыйОбъект;
		СтрокаКонтакты.КакСвязаться = ПараметрыКонтактногоЛица.КакСвязаться;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьРеквизиты(ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Запись"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли;
	
	ЗаписатьРеквизиты(ТекущийОбъект);
	
	Если ТипЗнч(ТекущийОбъект.Тема) = Тип("Строка") Тогда
	// Сохрание тем в истории для автоподбора
		
		ЭлементИстории = ИсторияТемСтрокой.НайтиПоЗначению(СокрЛП(ТекущийОбъект.Тема));
		Если ЭлементИстории <> Неопределено Тогда
			ИсторияТемСтрокой.Удалить(ЭлементИстории);
		КонецЕсли;
		ИсторияТемСтрокой.Вставить(0, СокрЛП(ТекущийОбъект.Тема));
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СписокВыбораТемыСобытия", "", ИсторияТемСтрокой.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
	// УНФ.КалендарьСотрудника
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");
	// Конец УНФ.КалендарьСотрудника
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКонтакты.Контакт) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", "Контакт", Контакты.Индекс(СтрокаКонтакты) + 1, "Участники"),
				,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Контакты[%1].Контакт", Контакты.Индекс(СтрокаКонтакты)),
				,
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если ДатаДокумента <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоСобытияВремяПриИзменении(Элемент)
	
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоСобытияВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = НачалоДня(Объект.НачалоСобытия) + (ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоСобытияДатаПриИзменении(Элемент)
	
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияВремяПриИзменении(Элемент)
	
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = НачалоДня(Объект.ОкончаниеСобытия) + (ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСобытияДатаПриИзменении(Элемент)
	
	СформироватьПредставлениеПродолжительности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если ТипЗнч(Объект.Тема) = Тип("СправочникСсылка.ТемыСобытий") И ЗначениеЗаполнено(Объект.Тема) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Тема);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТемыСобытий.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Тема = ВыбранноеЗначение;
		ЗаполнитьСодержаниеСобытия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораТемы(Текст, ИсторияТемСтрокой);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтакты

&НаКлиенте
Процедура КонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.КонтактыИндексПиктограммы Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаКонтакта = Контакты.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если СтрокаКонтакта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		НабратьНомерКлиент(СтрокаКонтакта.КакСвязаться);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо выбрать контрагента.'"), , "Контрагент");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец",Контрагент));
	ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Контакты.ТекущиеДанные.Контакт);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Контакты.ТекущиеДанные.Контакт) Тогда
		Контакт = Контакты.НайтиПоИдентификатору(Элементы.Контакты.ТекущаяСтрока).Контакт;
		ПоказатьЗначение(,Контакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		КакСвязаться = ПолучитьКакСвязаться(ВыбранноеЗначение, Ложь);
	КонецЕсли;
	
	СтрокаКонтакты = Контакты.НайтиПоИдентификатору(Элементы.Контакты.ТекущаяСтрока);
	СтрокаКонтакты.Контакт = ВыбранноеЗначение;
	СтрокаКонтакты.КакСвязаться = КакСвязаться;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание <> 0 И НЕ ПустаяСтрока(Текст) И ЗначениеЗаполнено(Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокВыбораКонтактов(Текст, Контрагент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не указано основание для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект),
		НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержание(Команда)
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		ЗаполнитьСодержаниеСобытия(Объект.Тема);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагенту(Команда)
	
	Если Контакты.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоКонтрагентуЗавершение", ЭтотОбъект),
			НСтр("ru = 'Контакты будут полностью перезаполнены по контрагенту! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ЗаполнитьПоКонтрагентуФрагмент(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтакт(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Владелец", Контрагент);
	
	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаОбъекта", Новый Структура("Основание", ПараметрыОткрытия), ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НабратьНомер(Команда)
	
	НабратьНомерКлиент(КонтрагентКакСвязаться);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьРеквизиты(Объект)
	
	Контакты.Очистить();
	ПерваяСтрока = Истина;
	
	Для Каждого СтрокаУчастники Из Объект.Участники Цикл
		
		Если ПерваяСтрока Тогда
			Контрагент = СтрокаУчастники.Контакт;
			КонтрагентКакСвязаться = СтрокаУчастники.КакСвязаться;
			ПерваяСтрока = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтрокаКонтакты = Контакты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтакты, СтрокаУчастники);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизиты(Объект)
	
	Объект.Участники.Очистить();
	
	СтрокаУчастники = Объект.Участники.Добавить();
	СтрокаУчастники.Контакт = Контрагент;
	СтрокаУчастники.КакСвязаться = КонтрагентКакСвязаться;
	
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		ЗаполнитьЗначенияСвойств(Объект.Участники.Добавить(), СтрокаКонтакты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыКонтактногоЛица(КонтактноеЛицо)
	
	Результат = Новый Структура;
	Результат.Вставить("Владелец", КонтактноеЛицо.Владелец);
	Результат.Вставить("КакСвязаться", ПолучитьКакСвязаться(КонтактноеЛицо, Ложь));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКакСвязаться(Контакт, ЭтоЭлектронноеПисьмо = Ложь)
	
	Возврат Документы.Событие.ПолучитьКакСвязаться(Контакт, ЭтоЭлектронноеПисьмо);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	КонтрагентКакСвязаться = ПолучитьКакСвязаться(Контрагент, Ложь);
	
	// Очистим контактные лица прочих контрагентов
	Для Каждого СтрокаКонтакты Из Контакты Цикл
		Если ТипЗнч(СтрокаКонтакты.Контакт) = Тип("СправочникСсылка.КонтактныеЛица") И СтрокаКонтакты.Контакт.Владелец <> Контрагент Тогда
			СтрокаКонтакты.Контакт = Справочники.КонтактныеЛица.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИсториюТемСтрокой()
	
	СписокВыбораТемы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СписокВыбораТемыСобытия", "");
	Если СписокВыбораТемы <> Неопределено Тогда
		ИсторияТемСтрокой.ЗагрузитьЗначения(СписокВыбораТемы);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСписокВыбораТемыСобытия()

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТемы(знач СтрокаПоиска, знач ИсторияТемСтрокой)
	
	СписокВыбораТемы = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	
	ДанныеВыбораТемы = Справочники.ТемыСобытий.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Для Каждого ЭлементСписка Из ДанныеВыбораТемы Цикл
		СписокВыбораТемы.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(ЭлементСписка.Представление, " (тема события)"));
	КонецЦикла;
	
	Для Каждого ЭлементИстории Из ИсторияТемСтрокой Цикл
		Если Лев(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)) = СтрокаПоиска Тогда
			СписокВыбораТемы.Добавить(ЭлементИстории.Значение, 
				Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(СтрокаПоиска,Новый Шрифт(,,Истина),WebЦвета.Зеленый), Сред(ЭлементИстории.Значение, СтрДлина(СтрокаПоиска)+1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбораТемы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораКонтактов(знач СтрокаПоиска, Контрагент)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("Владелец, ПометкаУдаления", Контрагент, Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	ДанныеВыбораКонтактныхЛиц = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
	Возврат ДанныеВыбораКонтактныхЛиц;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НабратьНомерСервер(КонтрагентКакСвязаться, ПерсональноеМобильноеУстройство)
	
	ОбменМобильноеПриложениеПереопределяемый.ПозвонитьКонтрагенту(КонтрагентКакСвязаться, ПерсональноеМобильноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура НабратьНомерКлиент(Номер)
	
	Если ПустаяСтрока(Номер) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен номер телефона для связи.'"));
		Возврат;
	КонецЕсли;
	
	Номера = СтрРазделить(Номер, ",", Ложь);
	Если Номера.Количество() > 1 Тогда
		Для Каждого ЗначениеКИ Из Номера Цикл
			Значение = СокрЛП(Значение);
		КонецЦикла;
		СписокКИ = Новый СписокЗначений;
		СписокКИ.ЗагрузитьЗначения(Номера);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КонтактнаяИнформация", СписокКИ);
		ПараметрыФормы.Вставить("ЗаголовокКнопки", НСтр("ru='Позвонить'"));
		ОткрытьФорму("ОбщаяФорма.ВыборЗначенияКонтактнойИнформации", ПараметрыФормы, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеОНабореНомера(Номер);
	НабратьНомерСервер(Номер, ПерсональноеМобильноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОповещениеОНабореНомера(Номер)
	
	ШаблонПояснения = НСтр("ru='Вызов: %1,
		|с устройства: %2'");
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Набор номера'"),
		ПолучитьНавигационнуюСсылку(ПерсональноеМобильноеУстройство),
		СтрШаблон(ШаблонПояснения, Номер, ПерсональноеМобильноеУстройство),
		БиблиотекаКартинок.ТелефонныйЗвонокИсходящий
	);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеВторичныхДанных

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытия(ТемаСобытия)
	
	Если ТипЗнч(ТемаСобытия) <> Тип("СправочникСсылка.ТемыСобытий") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.Содержание) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСодержаниеСобытияЗавершение", ЭтотОбъект, Новый Структура("ТемаСобытия", ТемаСобытия)),
			НСтр("ru = 'Перезаполнить содержание по выбранной теме?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСодержаниеСобытияФрагмент(ДополнительныеПараметры.ТемаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСодержаниеСобытияФрагмент(Знач ТемаСобытия)
	
	Объект.Содержание = ПолучитьСодержаниеТемы(ТемаСобытия);
	
КонецПроцедуры // ЗаполнитьСодержаниеСобытия()

&НаСервереБезКонтекста
Функция ПолучитьСодержаниеТемы(ТемаСобытия)
	
	Возврат ТемаСобытия.Содержание;
	
КонецФункции // ПолучитьСодержаниеТемы()

&НаКлиенте
Процедура ЗаполнитьПоКонтрагентуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПоКонтрагентуФрагмент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКонтрагентуФрагмент(Знач Ответ)
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоКонтрагентуСервер(Контрагент);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоКонтрагенту()

&НаСервере
Процедура ЗаполнитьПоКонтрагентуСервер(Контрагент)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Новый Структура("ОснованиеЗаполнения, ТипСобытия, Ответственный", Контрагент, Объект.ТипСобытия, Объект.Ответственный));
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ПрочитатьРеквизиты(Объект);
	
КонецПроцедуры // ЗаполнитьУчастниковПоКонтрагенту()

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоОснованиюСервер(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаСервере
Процедура ЗаполнитьПоОснованиюСервер(ДокументОснование)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Новый Структура("ОснованиеЗаполнения, ТипСобытия, Ответственный", ДокументОснование, Объект.ТипСобытия, Объект.Ответственный));
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПрочитатьРеквизиты(ДокументОбъект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПродолжительности(Форма)
	
	Форма.ПредставлениеПродолжительности = "";
	
	Начало = Форма.Объект.НачалоСобытия;
	Окончание = Форма.Объект.ОкончаниеСобытия;
	
	Если Не ЗначениеЗаполнено(Начало)
		Или Не ЗначениеЗаполнено(Окончание) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДлительностьСек = Окончание - Начало;
	
	Дней = Цел(ДлительностьСек / 86400);
	ПодписьДней = УправлениеНебольшойФирмойКлиентСервер.ФормаМножественногоЧисла(
		НСтр("ru='день'"),
		НСтр("ru='дня'"),
		НСтр("ru='дней'"),
		Дней
	);
	
	Часов = Цел((ДлительностьСек - Дней * 86400) / 3600);
	ПодписьЧасов = УправлениеНебольшойФирмойКлиентСервер.ФормаМножественногоЧисла(
		НСтр("ru='час'"),
		НСтр("ru='часа'"),
		НСтр("ru='часов'"),
		Часов
	);
	
	Минут = Цел((ДлительностьСек - Дней * 86400 - Часов * 3600) / 60);
	ПодписьМинут = УправлениеНебольшойФирмойКлиентСервер.ФормаМножественногоЧисла(
		НСтр("ru='минута'"),
		НСтр("ru='минуты'"),
		НСтр("ru='минут'"),
		Минут
	);
	
	Если Дней > 0 Тогда 
		Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + Строка(Дней) + " " + ПодписьДней;
	КонецЕсли;
	
	Если Часов > 0 Тогда 
		
		Если Дней > 0 Тогда
			Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + " ";
		КонецЕсли;
		
		Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + Строка(Часов) + " " + ПодписьЧасов;
	КонецЕсли;
	
	Если Минут > 0 Тогда 
		
		Если Дней > 0 Или Часов > 0 Тогда
			Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + " ";
		КонецЕсли;
		
		Форма.ПредставлениеПродолжительности = Форма.ПредставлениеПродолжительности + Строка(Минут) + " " + ПодписьМинут;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
