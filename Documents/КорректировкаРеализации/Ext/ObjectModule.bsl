#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуНаряду";
	СтратегияЗаполнения[Тип("ДокументСсылка.АктВыполненныхРабот")] = "ЗаполнитьПоРеализации";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРеализации";
	СтратегияЗаполнения[Тип("ДокументСсылка.КорректировкаРеализации")] = "ЗаполнитьПоРеализации";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСуммыДокорректировки();
	
	Если ЗначениеЗаполнено(Контрагент)
		И НЕ Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		ИЛИ НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НомерИсправления");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДатаИсправления");
	КонецЕсли;
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗапасы.Свернуть("Заказ", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	КоличествоЗапасы = Запасы.Количество();
	
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаЗапасы = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка()
		   И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Строка.Заказ, "Заказ");
			Всего = ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего);
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "Заказ");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);				
			Всего = ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего);
		Иначе
			Всего = Запасы.Итог("Всего");
		КонецЕсли;
		
		Если НайденнаяСтрокаЗапасы = Неопределено
		   И КоличествоЗапасы > 0
		   И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличных частях ""Запасы"" или ""Расходы""!'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				,
				ТекстСообщения,
				Неопределено,
				Неопределено,
				"ПредоплатаИтогСуммаРасчетовВалюта",
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если НЕ СтрокаЗапасы.ЕстьВДокументеРеализации
				И СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
				
				ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Запасы и услуги"" количество отгружаемых позиций из резерва превышает общее количество запасов.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Резерв",
					Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.КорректировкаРеализации.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	Если ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		УправлениеНебольшойФирмойСервер.ОтразитьГрафикДвиженияЗапасов(ДополнительныеСвойства, Движения, Отказ);
		УправлениеНебольшойФирмойСервер.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
		УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	УправлениеНебольшойФирмойСервер.ОтразитьПродажиПоДисконтнойКарте(ДополнительныеСвойства, Движения, Отказ);
	
	// Эквайринг
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетодЭквайринг(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);

	// Рублевые суммы документов
	УправлениеНебольшойФирмойСервер.ОтразитьРублевыеСуммыДокументовВВалюте(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.КорректировкаРеализации.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.КорректировкаРеализации.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненная счет-фактура
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	Предоплата.Очистить();
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		ТекСтрока.ВсегоРасч = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("Заказ", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("Заказ Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ В (&Заказ)
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (КурсыВалютыУчетаКурс / КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	КурсыВалютыУчетаКурс,
	|	КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";

	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "Заказ");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредоплату()

Процедура ЗаполнитьПоРеализации(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходнаяНакладная")
		И ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку поступления на основании документа %1.'"),
			ДанныеЗаполнения);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Предоплата.Очистить();
	
	МетаданныеДокумента = ДанныеЗаполнения.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	ИмяТабличнойЧасти = ?(ИмяВидаДокумента = "АктВыполненныхРабот", "РаботыИУслуги", "Запасы");
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Ссылка КАК ДокументОснование,
	|	РасходнаяНакладная.Организация,
	|	РасходнаяНакладная.Контрагент,
	|	РасходнаяНакладная.Договор,
	|	РасходнаяНакладная.ВалютаДокумента,
	|	РасходнаяНакладная.НалогообложениеНДС,
	|	РасходнаяНакладная.СуммаВключаетНДС,
	|	РасходнаяНакладная.НДСВключатьВСтоимость,
	|	РасходнаяНакладная.Курс,
	|	РасходнаяНакладная.Кратность,
	|	РасходнаяНакладная.СуммаДокумента,
	|	РасходнаяНакладная.ДисконтнаяКарта,
	|	РасходнаяНакладная.ВидЦен,";
	Если ИмяВидаДокумента = "АктВыполненныхРабот" Тогда
		Текст = Текст + "
		|	РасходнаяНакладная.ЗаказПокупателя КАК Заказ,";
	Иначе
		Текст = Текст + "
		|	РасходнаяНакладная.СтруктурнаяЕдиница,
		|	РасходнаяНакладная.Ячейка,
		|	РасходнаяНакладная.НомерВходящегоДокумента,
		|	РасходнаяНакладная.ДатаВходящегоДокумента,
		|	РасходнаяНакладная.Заказ,";
	КонецЕсли;
	Текст = Текст + "
	|	РасходнаяНакладная.Подразделение,
	|	РасходнаяНакладная.Ответственный
	|ИЗ
	|	Документ." + ИмяВидаДокумента + " КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяЗапасы.Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Характеристика,";
	Если ИмяВидаДокумента = "АктВыполненныхРабот" Тогда
		Текст = Текст + "
		|	ЛОЖЬ КАК ТипНоменклатурыЗапас,
		|	РасходнаяНакладнаяЗапасы.ЗаказПокупателя КАК Заказ,";
	Иначе
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.ТипНоменклатурыЗапас КАК ТипНоменклатурыЗапас,
		|	РасходнаяНакладнаяЗапасы.Партия,
		|	РасходнаяНакладнаяЗапасы.Заказ,";
	КонецЕсли;
	Текст = Текст + "
	|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|	РасходнаяНакладнаяЗапасы.Количество,
	|	РасходнаяНакладнаяЗапасы.Цена,
	|	РасходнаяНакладнаяЗапасы.Сумма,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС,
	|	РасходнаяНакладнаяЗапасы.Всего,
	|	РасходнаяНакладнаяЗапасы.Содержание,
	|	РасходнаяНакладнаяЗапасы.Количество КАК КоличествоДоИзменения,
	|	РасходнаяНакладнаяЗапасы.Цена КАК ЦенаДоИзменения,
	|	РасходнаяНакладнаяЗапасы.Сумма КАК СуммаДоИзменения,
	|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	РасходнаяНакладнаяЗапасы.Всего КАК ВсегоДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.КоличествоДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.ЦенаДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.СуммаДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.СуммаНДСДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.ВсегоДоКорректировки,";
	КонецЕсли;
	Если ИмяТабличнойЧасти = "Запасы" Тогда
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.СтранаПроисхождения,
		|	РасходнаяНакладнаяЗапасы.НомерГТД,"
	КонецЕсли;
	Текст = Текст + "
	|	РасходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ." + ИмяВидаДокумента + "." + ИмяТабличнойЧасти +" КАК РасходнаяНакладнаяЗапасы
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяПредоплата.Документ,
	|	РасходнаяНакладнаяПредоплата.Заказ,
	|	РасходнаяНакладнаяПредоплата.СуммаРасчетов,
	|	РасходнаяНакладнаяПредоплата.Курс,
	|	РасходнаяНакладнаяПредоплата.Кратность,
	|	РасходнаяНакладнаяПредоплата.СуммаПлатежа,
	|	РасходнаяНакладнаяПредоплата.СуммаРасчетов КАК СуммаРасчетовДоИзменения,
	|	РасходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
			Текст = Текст + "
		|	РасходнаяНакладнаяПредоплата.СуммаРасчетовДоКорректировки,
		|	РасходнаяНакладнаяПредоплата.СуммаПлатежаДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Предоплата КАК РасходнаяНакладнаяПредоплата
	|ГДЕ
	|	РасходнаяНакладнаяПредоплата.Ссылка = &Ссылка";
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
	
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
	
	КонецЦикла;
	
	ВыборкаПредоплата = МассивРезультатов[2].Выбрать();
	Пока ВыборкаПредоплата.Следующий() Цикл
	
		НоваяСтрока = Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПредоплата);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаряду(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку поступления на основании документа %1.'"),
			ДанныеЗаполнения);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "СостояниеЗаказа, ВидЗаказа");
	Если НЕ СостоянияЗаказов.ЭтоСостояниеВыполненияЗаказНаряда(ЗначенияРеквизитов.СостояниеЗаказа, ЗначенияРеквизитов.ВидЗаказа) Тогда
		
		ТекстИсключения = НСтр("ru = 'Корректировка может быть создана только на основании выполненного заказа-наряда.'");
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Предоплата.Очистить();
	ПлатежныйКалендарь.Очистить();
	
	МетаданныеДокумента = ДанныеЗаполнения.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ДокументОснование,
	|	ЗаказПокупателя.Организация,
	|	ЗаказПокупателя.Контрагент,
	|	ЗаказПокупателя.Договор,
	|	ЗаказПокупателя.ВалютаДокумента,
	|	ЗаказПокупателя.НалогообложениеНДС,
	|	ЗаказПокупателя.СуммаВключаетНДС,
	|	ЗаказПокупателя.НДСВключатьВСтоимость,
	|	ЗаказПокупателя.Курс,
	|	ЗаказПокупателя.Кратность,
	|	ЗаказПокупателя.СуммаДокумента,
	|	ЗаказПокупателя.ВидЦен,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение,
	|	ЗаказПокупателя.Ответственный,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателя.ДисконтнаяКарта,
	|	ЗаказПокупателя.ТипДенежныхСредств,
	|	ЗаказПокупателя.Касса,
	|	ЗаказПокупателя.ЗапланироватьОплату
	|ИЗ
	|	Документ." + ИмяВидаДокумента + " КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура,
	|	ЗаказПокупателяРаботы.Характеристика,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Коэффициент * ЗаказПокупателяРаботы.Кратность КАК Количество,
	|	ЗаказПокупателяРаботы.Цена,
	|	ЗаказПокупателяРаботы.Сумма,
	|	ЗаказПокупателяРаботы.СтавкаНДС,
	|	ЗаказПокупателяРаботы.СуммаНДС,
	|	ЗаказПокупателяРаботы.Всего,
	|	ЗаказПокупателяРаботы.Содержание,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Коэффициент * ЗаказПокупателяРаботы.Кратность КАК КоличествоДоИзменения,
	|	ЗаказПокупателяРаботы.Цена КАК ЦенаДоИзменения,
	|	ЗаказПокупателяРаботы.Сумма КАК СуммаДоИзменения,
	|	ЗаказПокупателяРаботы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ЗаказПокупателяРаботы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ЗаказПокупателяРаботы.Всего КАК ВсегоДоИзменения,
	|	ЗаказПокупателяРаботы.Содержание КАК СодержаниеДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.КоличествоДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.ЦенаДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.СуммаДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.СуммаНДСДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.ВсегоДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации,
	|	ЗаказПокупателяРаботы.Спецификация,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ТипНоменклатурыЗапас,
	|	0 КАК Резерв
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	ЗаказПокупателяЗапасы.Количество,
	|	ЗаказПокупателяЗапасы.Цена,
	|	ЗаказПокупателяЗапасы.Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего,
	|	ЗаказПокупателяЗапасы.Содержание,
	|	ЗаказПокупателяЗапасы.Количество,
	|	ЗаказПокупателяЗапасы.Цена,
	|	ЗаказПокупателяЗапасы.Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего,
	|	ЗаказПокупателяЗапасы.Содержание,";
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
		Текст = Текст + "
		|	РасходнаяНакладнаяЗапасы.КоличествоДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.ЦенаДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.СуммаДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.СуммаНДСДоКорректировки,
		|	РасходнаяНакладнаяЗапасы.ВсегоДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	ЗаказПокупателяЗапасы.Партия,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.ТипНоменклатурыЗапас,
	|	ЗаказПокупателяЗапасы.Резерв
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяПредоплата.Документ,
	|	ЗаказПокупателяПредоплата.СуммаРасчетов,
	|	ЗаказПокупателяПредоплата.Курс,
	|	ЗаказПокупателяПредоплата.Кратность,
	|	ЗаказПокупателяПредоплата.СуммаПлатежа,
	|	ЗаказПокупателяПредоплата.СуммаРасчетов КАК СуммаРасчетовДоИзменения,
	|	ЗаказПокупателяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
			Текст = Текст + "
		|	РасходнаяНакладнаяПредоплата.СуммаРасчетовДоКорректировки,
		|	РасходнаяНакладнаяПредоплата.СуммаПлатежаДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Предоплата КАК ЗаказПокупателяПредоплата
	|ГДЕ
	|	ЗаказПокупателяПредоплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяПлатежныйКалендарь.ДатаОплаты,
	|	ЗаказПокупателяПлатежныйКалендарь.ПроцентОплаты,
	|	ЗаказПокупателяПлатежныйКалендарь.СуммаОплаты,
	|	ЗаказПокупателяПлатежныйКалендарь.СуммаНДСОплаты,
	|	ЗаказПокупателяПлатежныйКалендарь.ДатаОплаты КАК ДатаОплатыДоИзменения,
	|	ЗаказПокупателяПлатежныйКалендарь.ПроцентОплаты КАК ПроцентОплатыДоИзменения,
	|	ЗаказПокупателяПлатежныйКалендарь.СуммаОплаты КАК СуммаОплатыДоИзменения,
	|	ЗаказПокупателяПлатежныйКалендарь.СуммаНДСОплаты КАК СуммаНДСДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаРеализации" Тогда
			Текст = Текст + "
		|	ЗаказПокупателяПлатежныйКалендарь.ДатаОплатыДоКорректировки,
		|	ЗаказПокупателяПлатежныйКалендарь.ПроцентОплатыДоКорректировки,
		|	ЗаказПокупателяПлатежныйКалендарь.СуммаОплатыДоКорректировки,
		|	ЗаказПокупателяПлатежныйКалендарь.СуммаНДСДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеРеализации
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".ПлатежныйКалендарь КАК ЗаказПокупателяПлатежныйКалендарь
	|ГДЕ
	|	ЗаказПокупателяПлатежныйКалендарь.Ссылка = &Ссылка";
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
	
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
	
	КонецЦикла;
	
	ВыборкаПредоплата = МассивРезультатов[2].Выбрать();
	Пока ВыборкаПредоплата.Следующий() Цикл
	
		НоваяСтрока = Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПредоплата);
	
	КонецЦикла;
	
	ВыборкаПлатежныйКалендарь = МассивРезультатов[3].Выбрать();
	Пока ВыборкаПлатежныйКалендарь.Следующий() Цикл
	
		НоваяСтрока = ПлатежныйКалендарь.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПлатежныйКалендарь);
	
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет клонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ТаблицаЗапасы.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Заказ", Выборка.ЗаказПокупателя);
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервам()

// Процедура отмены проведения у подченненой счет фактуры
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка);
	Если НЕ СтруктураСчетаФактуры = Неопределено Тогда
		
		СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
		Если СчетФактура.Проведен Тогда
			
			ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится счет фактура %ПредставлениеСчетФактуры%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Расходная накладная № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //КонтрольПодчиненнойСчетФактуры()

Процедура ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		?(ВидОперацииЗаполнения <> Неопределено, ВидОперацииЗаполнения, ВидОперации), ДокументОснование, ИсправляемыйДокументРеализации);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыИсправления);

	ДокументРеализацииСсылка = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Истина);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Истина);
		КонецЕсли;	
	Иначе	
		ИсправляемыйДокументРеализации = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ОбработатьСуммыДокорректировки()

	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументРеализации)
		И (ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации"))
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИсправляемыйДокументРеализации, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ВсегоДоИзменения"), 		"ВсегоДоКорректировки");

		Предоплата.ЗагрузитьКолонку(Предоплата.ВыгрузитьКолонку("СуммаРасчетовДоИзменения"), 	"СуммаРасчетовДоКорректировки");
		Предоплата.ЗагрузитьКолонку(Предоплата.ВыгрузитьКолонку("СуммаПлатежаДоИзменения"), 	"СуммаПлатежаДоКорректировки");
		
		ПлатежныйКалендарь.ЗагрузитьКолонку(ПлатежныйКалендарь.ВыгрузитьКолонку("ДатаОплатыДоИзменения"), 	"ДатаОплатыДоКорректировки");
		ПлатежныйКалендарь.ЗагрузитьКолонку(ПлатежныйКалендарь.ВыгрузитьКолонку("ПроцентОплатыДоИзменения"), 	"ПроцентОплатыДоКорректировки");
		ПлатежныйКалендарь.ЗагрузитьКолонку(ПлатежныйКалендарь.ВыгрузитьКолонку("СуммаОплатыДоИзменения"), 	"СуммаОплатыДоКорректировки");
		ПлатежныйКалендарь.ЗагрузитьКолонку(ПлатежныйКалендарь.ВыгрузитьКолонку("СуммаНДСОплатыДоИзменения"), 	"СуммаНДСОплатыДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда

		Для Каждого СтрокаТаблицы Из Запасы Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ВсегоДоКорректировки      = 0;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Предоплата Цикл
			СтрокаТаблицы.СуммаРасчетовДоКорректировки = 0;
			СтрокаТаблицы.СуммаПлатежаДоКорректировки  = 0;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ПлатежныйКалендарь Цикл
			СтрокаТаблицы.ДатаОплатыДоКорректировки = Дата(1,1,1);
			СтрокаТаблицы.ПроцентОплатыДоКорректировки  = 0;
			СтрокаТаблицы.СуммаОплатыДоКорректировки = 0;
			СтрокаТаблицы.СуммаНДСОплатыДоКорректировки  = 0;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти
#КонецОбласти

#КонецЕсли