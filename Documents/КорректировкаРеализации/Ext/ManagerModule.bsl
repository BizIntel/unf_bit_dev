#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьПоследнийКорректирующийДокумент(Ссылка, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации = &Ссылка
	|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	|	И КорректировкаРеализации.Ссылка <> &ЭтотДокумент
	|	И КорректировкаРеализации.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	КорректировкаРеализации.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат ДокументСсылка;
	КонецЕсли;
		
КонецФункции

Функция СформироватьПараметрыИсправленияКорректировочногоДокумента(ВидОперации, ДокументРеализации, ИсправляемыйДокументРеализации) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(ДокументРеализации) ИЛИ НЕ ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			СтруктураПараметров.Вставить("НомерИсправления", 1);
		Иначе
			СтруктураПараметров.Вставить("НомерИсправления", Неопределено);
		КонецЕсли;

		Возврат СтруктураПараметров;
		
	КонецЕсли;                                                                                            
	
	Если НЕ ЗначениеЗаполнено(ВидОперации)  
		ИЛИ ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
			
			РеквизитыИсправляемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправляемыйДокументРеализации, "Номер, Дата");
			РеквизитыДокументаРеализации 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализации, "Номер, Дата, НомерИсправления");
			
			СтруктураПараметров.Вставить("НомерИсходногоДокумента", 			
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыИсправляемогоДокумента.Номер, Истина, Ложь));
			СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 				РеквизитыИсправляемогоДокумента.Дата);
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 	РеквизитыДокументаРеализации.НомерИсправления);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 	РеквизитыДокументаРеализации.Дата);
			
			СтруктураПараметров.Вставить("НомерИсправления", 								Неопределено);
			СтруктураПараметров.Вставить("НомерИсправляемогоКорректировочногоДокумента", 	Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправляемогоКорректировочногоДокумента", 	Неопределено);
			
		Иначе
			
			РеквизитыДокументаРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализации, "Номер, Дата");
			
			СтруктураПараметров.Вставить("НомерИсходногоДокумента", 	
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокументаРеализации.Номер, Истина, Ложь));
			СтруктураПараметров.Вставить("ДатаИсходногоДокумента", РеквизитыДокументаРеализации.Дата);
			
			СтруктураПараметров.Вставить("НомерИсправления", 								Неопределено);
			СтруктураПараметров.Вставить("НомерИсправляемогоКорректировочногоДокумента", 	Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправляемогоКорректировочногоДокумента", 	Неопределено);
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 				Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 				Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		Если ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") И
			ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
			
			РеквизитыДокументаРеализации 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализации, "Номер, Дата, НомерИсправления");
			РеквизитыИсправляемогоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправляемыйДокументРеализации, "Номер, Дата, 
				|НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
			
			СтруктураПараметров.Вставить("НомерИсправляемогоКорректировочногоДокумента", 
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыИсправляемогоДокумента.Номер, Истина, Ложь));
			СтруктураПараметров.Вставить("ДатаИсправляемогоКорректировочногоДокумента",  РеквизитыИсправляемогоДокумента.Дата);
			
			СтруктураПараметров.Вставить("НомерИсходногоДокумента", 			РеквизитыИсправляемогоДокумента.НомерИсходногоДокумента);
			СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 				РеквизитыИсправляемогоДокумента.ДатаИсходногоДокумента);
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 	РеквизитыИсправляемогоДокумента.НомерИсправленияИсходногоДокумента);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 	РеквизитыИсправляемогоДокумента.ДатаИсправленияИсходногоДокумента);
			
			СтруктураПараметров.Вставить("НомерИсправления", 					РеквизитыДокументаРеализации.НомерИсправления + 1);
			
		ИначеЕсли ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
			
			РеквизитыДокументаРеализации 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализации, "Номер, Дата, НомерИсправления, 
				|НомерИсходногоДокумента, ДатаИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента");
			
			СтруктураПараметров.Вставить("НомерИсправляемогоКорректировочногоДокумента", 	
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокументаРеализации.Номер, Истина, Ложь));
			СтруктураПараметров.Вставить("ДатаИсправляемогоКорректировочногоДокумента", РеквизитыДокументаРеализации.Дата);
			
			СтруктураПараметров.Вставить("НомерИсходногоДокумента", 			РеквизитыДокументаРеализации.НомерИсходногоДокумента);
			СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 				РеквизитыДокументаРеализации.ДатаИсходногоДокумента);
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 	РеквизитыДокументаРеализации.НомерИсправленияИсходногоДокумента);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 	РеквизитыДокументаРеализации.ДатаИсправленияИсходногоДокумента);
			
			СтруктураПараметров.Вставить("НомерИсправления", 					РеквизитыДокументаРеализации.НомерИсправления + 1);
			
		Иначе
			
			РеквизитыДокументаРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализации, "Номер, Дата");
			
			СтруктураПараметров.Вставить("НомерИсходногоДокумента", 	
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокументаРеализации.Номер, Истина, Ложь));
			СтруктураПараметров.Вставить("ДатаИсходногоДокумента", 							РеквизитыДокументаРеализации.Дата);
			
			СтруктураПараметров.Вставить("НомерИсправления", 								1);
			СтруктураПараметров.Вставить("НомерИсправленияИсходногоДокумента", 				Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправленияИсходногоДокумента", 				Неопределено);
			СтруктураПараметров.Вставить("НомерИсправляемогоКорректировочногоДокумента", 	Неопределено);
			СтруктураПараметров.Вставить("ДатаИсправляемогоКорректировочногоДокумента", 	Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо РТУ либо корректировку РТУ)
// либо первоначальный документ РТУ при передаче истины в параметр Исходный
Функция ПолучитьИсправляемыйДокументРеализации(ДокРеализации, Исходный = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокРеализации) 
		И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И (ДокРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный)
		И ДокРеализации.ДокументОснование <> ДокРеализации Тогда
		
		Возврат ПолучитьИсправляемыйДокументРеализации(ДокРеализации.ДокументОснование, Исходный);
		
	Иначе
		Возврат ДокРеализации;
	КонецЕсли;	
	
КонецФункции	

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасы(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ЛОЖЬ КАК Возврат,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.Заказ КАК ЗаказПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация КАК КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.Заказ КАК ЗаказПокупателя,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК КоррЗаказПокупателя,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.Заказ,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.Заказ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета";
	
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	СформироватьТаблицаЗапасыПродажа(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыРаботы(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.ДокументОснование КАК ЗаказПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|			ТОГДА ТаблицаЗапасы.ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	0 КАК Сумма,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК КоррСтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК КоррСчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК КоррНоменклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК КоррХарактеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК КоррСпецификация
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ДокументОснование,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	Константы.ФункциональнаяОпцияРезервированиеЗапасов,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета";
	
	Запрос.УстановитьПараметр("СборкаЗапасов", НСтр("ru = 'Сборка запасов'"));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ЗаказПустаяСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуется <> 0 Тогда
			
			// Добавим выпуск работы.
			СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыПриход.ДокументПродажи = Неопределено;
			СтрокаТаблицыПриход.ЗаказПродажи = Неопределено;
			СтрокаТаблицыПриход.Подразделение = Неопределено;
			СтрокаТаблицыПриход.Ответственный = Неопределено;
			
			СуммаКСписанию = 0;
			
			// Добавим реализацию работы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Списание запасов'");
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
				
		КонецЕсли;
			
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыТовары(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ИСТИНА КАК Выполнен,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.Заказ КАК ЗаказПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация КАК КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказ КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.Количество КАК Количество,
	|	ТаблицаЗапасы.Резерв КАК Резерв,
	|	ТаблицаЗапасы.Резерв КАК РезервОтгрузка,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаЗапасы.СуммаНДС КАК СуммаНДС,
	|	ТаблицаЗапасы.Сумма КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ТаблицаЗапасы.ЕстьВДокументеРеализации
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.НомерСтроки,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Заказ,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.КоррОрганизация,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.КоррЗаказ,
	|	ТаблицаЗапасы.Количество,
	|	ТаблицаЗапасы.Резерв,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.СуммаНДС,
	|	ТаблицаЗапасы.Сумма,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.Резерв,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.ЕстьВДокументеРеализации,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыЗапасы", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.Заказ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Блокировка = Новый БлокировкаДанных;
    ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
    
    Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
    	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
    КонецЦикла;
    Блокировка.Заблокировать();
	
	ДокументСсылкаЗаказНаряд = СтруктураДополнительныеСвойства.ДляПроведения.ДокументРеализации;
	
    // Получение остатков запасов по стоимости.
    Запрос.Текст =
    "ВЫБРАТЬ
    |	ЗапасыОстатки.Организация КАК Организация,
    |	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
    |	ЗапасыОстатки.СчетУчета КАК СчетУчета,
    |	ЗапасыОстатки.Номенклатура КАК Номенклатура,
    |	ЗапасыОстатки.Характеристика КАК Характеристика,
    |	ЗапасыОстатки.Партия КАК Партия,
    |	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
    |	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
    |	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
    |ИЗ
    |	(ВЫБРАТЬ
    |		ЗапасыОстатки.Организация КАК Организация,
    |		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
    |		ЗапасыОстатки.СчетУчета КАК СчетУчета,
    |		ЗапасыОстатки.Номенклатура КАК Номенклатура,
    |		ЗапасыОстатки.Характеристика КАК Характеристика,
    |		ЗапасыОстатки.Партия КАК Партия,
    |		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
    |		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
    |		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
    |	ИЗ
    |		РегистрНакопления.Запасы.Остатки(
    |				&МоментКонтроля,
    |				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
    |					(ВЫБРАТЬ
    |						ТаблицаЗапасы.Организация КАК Организация,
    |						ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
    |						ТаблицаЗапасы.СчетУчета КАК СчетУчета,
    |						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
    |						ТаблицаЗапасы.Характеристика КАК Характеристика,
    |						ТаблицаЗапасы.Партия КАК Партия,
    |						ВЫБОР
    |							КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
    |								ТОГДА ТаблицаЗапасы.Заказ
    |							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
    |						КОНЕЦ
    |					ИЗ
    |						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
    |					ГДЕ
    |						ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО)) КАК ЗапасыОстатки
    |	
    |	СГРУППИРОВАТЬ ПО
    |		ЗапасыОстатки.Организация,
    |		ЗапасыОстатки.СтруктурнаяЕдиница,
    |		ЗапасыОстатки.СчетУчета,
    |		ЗапасыОстатки.Номенклатура,
    |		ЗапасыОстатки.Характеристика,
    |		ЗапасыОстатки.Партия,
    |		ЗапасыОстатки.ЗаказПокупателя
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		ЗапасыОстатки.Организация,
    |		ЗапасыОстатки.СтруктурнаяЕдиница,
    |		ЗапасыОстатки.СчетУчета,
    |		ЗапасыОстатки.Номенклатура,
    |		ЗапасыОстатки.Характеристика,
    |		ЗапасыОстатки.Партия,
    |		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
    |		СУММА(ЗапасыОстатки.КоличествоОстаток),
    |		СУММА(ЗапасыОстатки.СуммаОстаток)
    |	ИЗ
    |		РегистрНакопления.Запасы.Остатки(
    |				&МоментКонтроля,
    |				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
    |					(ВЫБРАТЬ
    |						ТаблицаЗапасы.Организация,
    |						ТаблицаЗапасы.СтруктурнаяЕдиница,
    |						ТаблицаЗапасы.СчетУчета,
    |						ТаблицаЗапасы.Номенклатура,
    |						ТаблицаЗапасы.Характеристика,
    |						ТаблицаЗапасы.Партия,
    |						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
    |					ИЗ
    |						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
    |	
    |	СГРУППИРОВАТЬ ПО
    |		ЗапасыОстатки.Организация,
    |		ЗапасыОстатки.СтруктурнаяЕдиница,
    |		ЗапасыОстатки.СчетУчета,
    |		ЗапасыОстатки.Номенклатура,
    |		ЗапасыОстатки.Характеристика,
    |		ЗапасыОстатки.Партия
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		ДвиженияДокументаЗапасы.Организация,
    |		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
    |		ДвиженияДокументаЗапасы.СчетУчета,
    |		ДвиженияДокументаЗапасы.Номенклатура,
    |		ДвиженияДокументаЗапасы.Характеристика,
    |		ДвиженияДокументаЗапасы.Партия,
    |		ДвиженияДокументаЗапасы.ЗаказПокупателя,
    |		ВЫБОР
    |			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
    |				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
    |			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
    |				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
    |			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
    |		КОНЕЦ
    |	ИЗ
    |		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
    |	ГДЕ
    |		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
    |		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
    |
    |СГРУППИРОВАТЬ ПО
    |	ЗапасыОстатки.Организация,
    |	ЗапасыОстатки.СтруктурнаяЕдиница,
    |	ЗапасыОстатки.СчетУчета,
    |	ЗапасыОстатки.Номенклатура,
    |	ЗапасыОстатки.Характеристика,
    |	ЗапасыОстатки.Партия,
    |	ЗапасыОстатки.ЗаказПокупателя";
    
    Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаКорректировкаРеализации);
    Запрос.УстановитьПараметр("ДокументРеализации", ДокументСсылкаЗаказНаряд);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Дата);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
    ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ПустаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПустойСчетУчета = ПланыСчетов.Управленческий.ПустаяСсылка();
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяПартия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
    ПустойЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	РезервированиеЗапасов = Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		Если СтрокаТаблицаЗапасы.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		// Т.к. в заказе-наряде сами резервируем и сами списываем, то всегда списываем из свободного остатка все количество.
		КоличествоТребуетсяВсего = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяВсего < 0 Тогда
			
			КоличествоТребуетсяРезерв = ?(-КоличествоТребуетсяВсего > СтрокаТаблицаЗапасы.Резерв, - СтрокаТаблицаЗапасы.Резерв, КоличествоТребуетсяВсего);
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяВсего - КоличествоТребуетсяРезерв;
			
			Если КоличествоТребуетсяРезерв <> 0 Тогда
				
				// Спишем запасы из свободного остатка.
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыРасход.КоррЗаказПокупателя = ДокументСсылкаЗаказНаряд;
				
				СтрокаТаблицыРасход.ЗаказПродажи = Неопределено;
				СтрокаТаблицыРасход.ДокументПродажи = Неопределено;
				СтрокаТаблицыРасход.Подразделение = Неопределено;
				СтрокаТаблицыРасход.Ответственный = Неопределено;
				СтрокаТаблицыРасход.СтавкаНДС = Неопределено;
				
				СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыРасход.Сумма = 0;
				СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
				СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Списание запасов из свободного остатка в резерв'");
				
				// Поставим их в резерв.
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
				
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
				
				СтрокаТаблицыПриход.ЗаказПродажи = Неопределено;
				СтрокаТаблицыПриход.ДокументПродажи = Неопределено;
				СтрокаТаблицыПриход.Подразделение = Неопределено;
				СтрокаТаблицыПриход.Ответственный = Неопределено;
				СтрокаТаблицыПриход.СтавкаНДС = Неопределено;
				
				СтрокаТаблицыПриход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыПриход.Сумма = 0;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяРезерв;
				СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Поступление запасов в резерв из свободного остатка'");
				
				// Спишем запасы из резерва.
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
				СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыРасход.Сумма = 0;
				СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
				СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из резерва'");
				
			КонецЕсли;
			
			Если КоличествоТребуетсяСвободныйОстаток <> 0 Тогда
				
				// Спишем запасы из свободного остатка.
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыРасход.ЗаказПокупателя = ПустойЗаказПокупателя;
				СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыРасход.Сумма = 0;
				СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
				СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из свободного остатка'");
				
				Если НЕ РезервированиеЗапасов Тогда
					СтрокаТаблицыРасход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если СтрокаТаблицаЗапасы.ЕстьВДокументеРеализации Тогда
				КоличествоТребуетсяРезерв = 0;
				КоличествоТребуетсяРезервОтгрузка = 0;
			Иначе
				КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
				КоличествоТребуетсяРезервОтгрузка = СтрокаТаблицаЗапасы.РезервОтгрузка;
			КонецЕсли;
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяВсего - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
			СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
			СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
			СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
			СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
			
			Если КоличествоТребуетсяВсего > 0 Тогда
				
				СтруктураДляПоиска.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
				
				МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
				
				КоличествоОстаток = 0;
				СуммаОстаток = 0;
				
				Если МассивСтрокОстатков.Количество() > 0 Тогда
					КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
					СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
				КонецЕсли;
				
				Если КоличествоТребуетсяРезерв > 0 Тогда // Нужно сделать резерв.
					
					Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда

						СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);

						МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
						МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

					ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда

						СуммаКСписанию = СуммаОстаток;

						МассивСтрокОстатков[0].КоличествоОстаток = 0;
						МассивСтрокОстатков[0].СуммаОстаток = 0;

					Иначе
						СуммаКСписанию = 0;
					КонецЕсли;
					
					// Спишем запасы из свободного остатка.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
					СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
					СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
					СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
					СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
					СтрокаТаблицыРасход.КоррЗаказПокупателя = ДокументСсылкаЗаказНаряд;
					
					СтрокаТаблицыРасход.ЗаказПродажи = Неопределено;
					СтрокаТаблицыРасход.ДокументПродажи = Неопределено;
					СтрокаТаблицыРасход.Подразделение = Неопределено;
					СтрокаТаблицыРасход.Ответственный = Неопределено;
					СтрокаТаблицыРасход.СтавкаНДС = Неопределено;
					
					СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
					СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Списание запасов из свободного остатка в резерв'");
					
					// Поставим их в резерв.
					СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
					СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
					СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.Номенклатура;
					СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.Характеристика;
					СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.Партия;
					СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
					
					СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
					СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
					СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
					СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
					СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
					
					СтрокаТаблицыПриход.ЗаказПродажи = Неопределено;
					СтрокаТаблицыПриход.ДокументПродажи = Неопределено;
					СтрокаТаблицыПриход.Подразделение = Неопределено;
					СтрокаТаблицыПриход.Ответственный = Неопределено;
					СтрокаТаблицыПриход.СтавкаНДС = Неопределено;
					
					СтрокаТаблицыПриход.ЗатратыНаВыпуск = Ложь;
					СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
					СтрокаТаблицыПриход.Количество = КоличествоТребуетсяРезерв;
					СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Поступление запасов в резерв из свободного остатка'");
					
					Если СтрокаТаблицаЗапасы.Выполнен Тогда // Если заказ выполнен - надо и продать.
						
						// Спишем запасы из резерва.
						СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
						
						СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
						СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
						СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
						СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
						СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из резерва'");
						
						Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
							
							// Сформируем проводки.
							СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
							СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
							
							// Продвигаем доходы и расходы.
							СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
							
							СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
							СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
							СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
							СтрокаДоходыИРасходы.СуммаДоходов = 0;
							СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
							СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
							
							СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
							
							// Продвигаем себестоимость продаж.
							СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
							СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
							СтрокаПродажи.Количество = 0;
							СтрокаПродажи.Сумма = 0;
							СтрокаПродажи.СуммаНДС = 0;
							СтрокаПродажи.Себестоимость = СуммаКСписанию;				
							
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
				
				// Если заказ на выполнени - надо списать резерв др. документов.
				КоличествоРезервОтгрузка = КоличествоТребуетсяРезервОтгрузка - КоличествоТребуетсяРезерв;
				Если СтрокаТаблицаЗапасы.Выполнен 
					И КоличествоРезервОтгрузка > 0 Тогда
					
					КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоРезервОтгрузка;
					
					СтруктураДляПоиска.Вставить("ЗаказПокупателя", ДокументСсылкаЗаказНаряд);
				
					МассивСтрокОстатковОтгрузка = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
					
					КоличествоОстатокОтгрузка = 0;
					СуммаОстатокОтгрузка = 0;
					
					Если МассивСтрокОстатковОтгрузка.Количество() > 0 Тогда
						КоличествоОстатокОтгрузка = МассивСтрокОстатковОтгрузка[0].КоличествоОстаток;
						СуммаОстатокОтгрузка = МассивСтрокОстатковОтгрузка[0].СуммаОстаток;
					КонецЕсли;
					
					Если КоличествоОстатокОтгрузка > 0 И КоличествоОстатокОтгрузка > КоличествоРезервОтгрузка Тогда

						СуммаКСписаниюОтгрузка = Окр(СуммаОстатокОтгрузка * КоличествоРезервОтгрузка / КоличествоОстатокОтгрузка , 2, 1);

						МассивСтрокОстатковОтгрузка[0].КоличествоОстаток = МассивСтрокОстатковОтгрузка[0].КоличествоОстаток - КоличествоРезервОтгрузка;
						МассивСтрокОстатковОтгрузка[0].СуммаОстаток = МассивСтрокОстатковОтгрузка[0].СуммаОстаток - СуммаКСписаниюОтгрузка;

					ИначеЕсли КоличествоОстатокОтгрузка = КоличествоРезервОтгрузка Тогда

						СуммаКСписаниюОтгрузка = СуммаОстатокОтгрузка;

						МассивСтрокОстатковОтгрузка[0].КоличествоОстаток = 0;
						МассивСтрокОстатковОтгрузка[0].СуммаОстаток = 0;

					Иначе
						СуммаКСписаниюОтгрузка = 0;	
					КонецЕсли;
					
					// Спишем запасы из резерва.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
						
					СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
					СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
					СтрокаТаблицыРасход.Сумма = СуммаКСписаниюОтгрузка;
					
					СтрокаТаблицыРасход.Количество = КоличествоРезервОтгрузка;
					
					СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из резерва'");
					
					Если Окр(СуммаКСписаниюОтгрузка, 2, 1) <> 0 Тогда
						
						// Сформируем проводки.
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
						СтрокаТаблицаУправленческий.Сумма = СуммаКСписаниюОтгрузка;
						
						// Продвигаем доходы и расходы.
						СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
						
						СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
						СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
						СтрокаДоходыИРасходы.СуммаДоходов = 0;
						СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписаниюОтгрузка;
						СтрокаДоходыИРасходы.Сумма = СуммаКСписаниюОтгрузка;
						
						СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
						
						// Продвигаем себестоимость продаж.
						СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
						СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
						СтрокаПродажи.Количество = 0;
						СтрокаПродажи.Сумма = 0;
						СтрокаПродажи.СуммаНДС = 0;
						СтрокаПродажи.Себестоимость = СуммаКСписаниюОтгрузка;				
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
					
					Если СтрокаТаблицаЗапасы.Выполнен Тогда // Если заказ выполнени - надо и продать.
						
						Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда

							СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);

							МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
							МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

						ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда

							СуммаКСписанию = СуммаОстаток;

							МассивСтрокОстатков[0].КоличествоОстаток = 0;
							МассивСтрокОстатков[0].СуммаОстаток = 0;

						Иначе
							СуммаКСписанию = 0;	
						КонецЕсли;	
					
						// Спишем запасы из свободного остатка.
						СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
							
						СтрокаТаблицыРасход.ЗаказПокупателя = ПустойЗаказПокупателя;
						СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
						СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
						СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
						СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из свободного остатка'");
						
						Если НЕ РезервированиеЗапасов Тогда
							СтрокаТаблицыРасход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
						КонецЕсли;
						
						Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
							
							// Сформируем проводки.
							СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
							СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
							
							// Продвигаем доходы и расходы.
							СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
							
							СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
							СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
							СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
							СтрокаДоходыИРасходы.СуммаДоходов = 0;
							СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
							СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
							
							СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
							
							// Продвигаем себестоимость продаж.
							СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
							СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказНаряд;
							СтрокаПродажи.Количество = 0;
							СтрокаПродажи.Сумма = 0;
							СтрокаПродажи.СуммаНДС = 0;
							СтрокаПродажи.Себестоимость = СуммаКСписанию;				
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПродажа(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.Заказ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|		ЗапасыОстатки.СуммаОстаток КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация КАК Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|						ТаблицаЗапасы.Характеристика КАК Характеристика,
	|						ТаблицаЗапасы.Партия КАК Партия,
	|						ТаблицаЗапасы.Заказ КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				
	|					ОБЪЕДИНИТЬ ВСЕ
	|				
	|					ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаКорректировкаРеализации);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		Если Не СтрокаТаблицаЗапасы.Количество > 0 Тогда
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы,,"Сумма");
			Продолжить;
		КонецЕсли;
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Резерв), СтрокаТаблицаЗапасы.Резерв, 0);
		КоличествоТребуетсяСвободныйОстаток = ?(ЗначениеЗаполнено(СтрокаТаблицаЗапасы.Количество), СтрокаТаблицаЗапасы.Количество, 0);
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", СтрокаТаблицаЗапасы.ЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
			КонецЕсли;
			
			Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				
			ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Продвигаем доходы и расходы.
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
			КонецЕсли;
			
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Продвигаем себестоимость продаж.
				СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
				СтрокаПродажи.Количество = 0;
				СтрокаПродажи.Сумма = 0;
				СтрокаПродажи.СуммаНДС = 0;
				СтрокаПродажи.Себестоимость = СуммаКСписанию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход. Запасы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			// Сформируем проводки.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
				СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
			КонецЕсли;
			
			Если СтрокаТаблицаЗапасы.ТоварыНаКомиссии Тогда
				
			ИначеЕсли Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Продвигаем доходы и расходы.
				СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
				
				СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
				СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
				СтрокаДоходыИРасходы.СуммаДоходов = 0;
				СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
				СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
				
				СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
			КонецЕсли;
			
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				// Продвигаем себестоимость продаж.
				СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
				СтрокаПродажи.Количество = 0;
				СтрокаПродажи.Сумма = 0;
				СтрокаПродажи.СуммаНДС = 0;
				СтрокаПродажи.Себестоимость = СуммаКСписанию;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасыПродажа()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаПродажи.Документ
	|		ИНАЧЕ ТаблицаПродажи.Заказ
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	0 КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Период,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи,
	|	ТаблицаПродажи.Ответственный,
	|	ВЫБОР
	|		КОГДА ТаблицаПродажи.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаПродажи.Документ
	|		ИНАЧЕ ТаблицаПродажи.Заказ
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру ПродажиПоДисконтнымКартам.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаКорректировкаРеализации.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты,
	|	ТаблицаПродажи.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_РаботыИТовары
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РаботыИТовары.Период,
	|	ВТ_РаботыИТовары.ДисконтнаяКарта,
	|	ВТ_РаботыИТовары.ВладелецКарты,
	|	СУММА(ВТ_РаботыИТовары.Сумма) КАК Сумма
	|ИЗ
	|	ВТ_РаботыИТовары КАК ВТ_РаботыИТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РаботыИТовары.ВладелецКарты,
	|	ВТ_РаботыИТовары.Период,
	|	ВТ_РаботыИТовары.ДисконтнаяКарта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыпускПродукции(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВыпускПродукции.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВыпускПродукции.Период КАК Период,
	|	ТаблицаВыпускПродукции.Организация КАК Организация,
	|	ТаблицаВыпускПродукции.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаВыпускПродукции.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаВыпускПродукции.Документ
	|		ИНАЧЕ ТаблицаВыпускПродукции.Заказ
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	СУММА(ТаблицаВыпускПродукции.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаВыпускПродукции
	|ГДЕ
	|	ТаблицаВыпускПродукции.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыпускПродукции.Период,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.ПодразделениеПродажи,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаВыпускПродукции.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаВыпускПродукции.Документ
	|		ИНАЧЕ ТаблицаВыпускПродукции.Заказ
	|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаВыпускПродукции()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаГрафикДвиженияЗапасов(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаЗапасы.Период, ДЕНЬ) КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасы.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаЗапасы.Документ
	|		ИНАЧЕ ТаблицаЗапасы.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаВыпускПродукции()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Период КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И (НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыКРасходуСоСкладов(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыКРасходуСоСкладов.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыКРасходуСоСкладов.Период КАК Период,
	|	ТаблицаЗапасыКРасходуСоСкладов.Организация КАК Организация,
	|	ТаблицаЗапасыКРасходуСоСкладов.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыКРасходуСоСкладов.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыКРасходуСоСкладов.Партия КАК Партия,
	|	ТаблицаЗапасыКРасходуСоСкладов.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ТаблицаЗапасыКРасходуСоСкладов.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыКРасходуСоСкладов
	|ГДЕ
	|	ТаблицаЗапасыКРасходуСоСкладов.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыКРасходуСоСкладов.ОрдерныйСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыКРасходуСоСкладов.Период,
	|	ТаблицаЗапасыКРасходуСоСкладов.Организация,
	|	ТаблицаЗапасыКРасходуСоСкладов.Номенклатура,
	|	ТаблицаЗапасыКРасходуСоСкладов.Характеристика,
	|	ТаблицаЗапасыКРасходуСоСкладов.Партия,
	|	ТаблицаЗапасыКРасходуСоСкладов.СтруктурнаяЕдиница";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыКРасходуСоСкладов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗапасыПринятые(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПринятые.Период КАК Период,
	|	ТаблицаЗапасыПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПринятые.Партия КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	ТаблицаЗапасыПринятые.Заказ КАК Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчетаРасчетовСПоставщиком КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыПринятые.Количество) КАК Количество,
	|	0 КАК СуммаРасчетов,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК Сумма,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК СуммаПродажи,
	|	&ВалютаУпрУчета КАК Валюта,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК СуммаВал,
	|	ВЫРАЗИТЬ(&ПриемЗапасовТоварыНаКомиссии КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасыПринятые
	|ГДЕ
	|	ТаблицаЗапасыПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыПринятые.ТоварыНаКомиссии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПринятые.Период,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	ТаблицаЗапасыПринятые.Контрагент,
	|	ТаблицаЗапасыПринятые.Договор,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаЗапасыПринятые.СчетУчета";
	
	Запрос.УстановитьПараметр("ПриемЗапасовТоварыНаКомиссии", НСтр("ru = 'Прием запасов'"));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПринятые()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ДокументРеализации = СтруктураДополнительныеСвойства.ДляПроведения.ДокументРеализации;
	Если ТипЗнч(ДокументРеализации) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТаблицаЗаказыПокупателей.Период КАК Период,
		|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
		|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
		|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
		|	ТаблицаЗаказыПокупателей.Заказ КАК ЗаказПокупателя,
		|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
		|ГДЕ
		|	ТаблицаЗаказыПокупателей.Заказ <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказыПокупателей.Период,
		|	ТаблицаЗаказыПокупателей.Организация,
		|	ТаблицаЗаказыПокупателей.Номенклатура,
		|	ТаблицаЗаказыПокупателей.Характеристика,
		|	ТаблицаЗаказыПокупателей.Заказ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаЗаказыПокупателей.Период КАК Период,
		|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
		|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
		|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
		|	ТаблицаЗаказыПокупателей.Документ КАК ЗаказПокупателя,
		|	СУММА(ТаблицаЗаказыПокупателей.Количество) КАК Количество
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказыПокупателей.Период,
		|	ТаблицаЗаказыПокупателей.Организация,
		|	ТаблицаЗаказыПокупателей.Номенклатура,
		|	ТаблицаЗаказыПокупателей.Характеристика,
		|	ТаблицаЗаказыПокупателей.Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки),
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
		|	ТаблицаЗаказыПокупателей.Период,
		|	ТаблицаЗаказыПокупателей.Организация,
		|	ТаблицаЗаказыПокупателей.Номенклатура,
		|	ТаблицаЗаказыПокупателей.Характеристика,
		|	ТаблицаЗаказыПокупателей.Документ,
		|	СУММА(ТаблицаЗаказыПокупателей.Количество)
		|ИЗ
		|	ВременнаяТаблицаЗапасы КАК ТаблицаЗаказыПокупателей
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказыПокупателей.Период,
		|	ТаблицаЗаказыПокупателей.Организация,
		|	ТаблицаЗаказыПокупателей.Номенклатура,
		|	ТаблицаЗаказыПокупателей.Характеристика,
		|	ТаблицаЗаказыПокупателей.Документ";
	
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЕсли;

	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Период КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходыИРасходы.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаДоходыИРасходы.Документ
	|		ИНАЧЕ ТаблицаДоходыИРасходы.Заказ
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&Выручка КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДоходыИРасходы
	|ГДЕ
	|	НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И ТаблицаДоходыИРасходы.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Период,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ТаблицаДоходыИРасходы.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаДоходыИРасходы.Документ
	|		ИНАЧЕ ТаблицаДоходыИРасходы.Заказ
	|	КОНЕЦ,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	1,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Выручка", НСтр("ru='Выручка от продажи'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаКорректировкаРеализации);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru='Возникновение обязательств покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	// Формирование временной таблицы по расчетам с покупателями.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.Период КАК Дата,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчета,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|				ИЛИ НЕ ТаблицаДокумента.ЭтоЗаказНаряд
	|					И ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОГДА ТаблицаДокумента.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ВозникновениеОбязательствПокупателя КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателями
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|				ИЛИ НЕ ТаблицаДокумента.ЭтоЗаказНаряд
	|					И ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОГДА ТаблицаДокумента.ЭтоЗаказНаряд
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|				ИЛИ ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.ТипРасчетов,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|				ИЛИ ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.ДокументКуда
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|				ИЛИ ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.ДокументКуда
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|				ИЛИ ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Валюта,
	|	Документ,
	|	Заказ,
	|	ТипРасчетов,
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.ВидДвижения,
	|	ВременнаяТаблицаРасчетыСПокупателями.Дата,
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.ВестиРасчетыПоДокументам,
	|	ВременнаяТаблицаРасчетыСПокупателями.СчетУчета,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Валюта,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов,
	|	ВременнаяТаблицаРасчетыСПокупателями.Сумма,
	|	ВременнаяТаблицаРасчетыСПокупателями.СуммаВал,
	|	ВременнаяТаблицаРасчетыСПокупателями.СуммаДляОстатка,
	|	ВременнаяТаблицаРасчетыСПокупателями.СуммаВалДляОстатка,
	|	ВременнаяТаблицаРасчетыСПокупателями.СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры

// Процедура формирования таблицы платежного календаря.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПриходДенежныхСредствПлан - Текущий документ
//	ДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//
Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаКорректировкаРеализации);
	Запрос.УстановитьПараметр("ЗаказНаряд", СтруктураДополнительныеСвойства.ДляПроведения.ДокументРеализации);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаОплатыДоИзменения КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА -(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплатыДоИзменения * ВЫБОР
	|						КОГДА КурсыВалютРасчетов.Курс <> 0
	|								И КурсыВалютДокумента.Кратность <> 0
	|							ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|						ИНАЧЕ 1
	|					КОНЕЦ КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ -ТаблицаДокумента.СуммаОплатыДоИзменения
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокумента.Ссылка
	|ПОМЕСТИТЬ Вт_ТаблицаДокумента
	|ИЗ
	|	Документ.КорректировкаРеализации.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Ссылка.ОтражатьВУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаОплаты,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|						КОГДА КурсыВалютРасчетов.Курс <> 0
	|								И КурсыВалютДокумента.Кратность <> 0
	|							ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|						ИНАЧЕ 1
	|					КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаДокумента.СуммаОплаты
	|	КОНЕЦ,
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Ссылка.ОтражатьВУчете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Период,
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	&ЗаказНаряд КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|			ТОГДА ТаблицаДокумента.Ссылка.Касса
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ТаблицаДокумента.Ссылка.БанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКасса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ТаблицаДокумента.Сумма
	|ИЗ
	|	Вт_ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

// Процедура формирования таблицы счетов на оплату.
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ПриходДенежныхСредствПлан - Текущий документ
//	ДополнительныеСвойства - ДополнительныеСвойства - Дополнительные свойства документа
//
Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ЗаказНаряд", СтруктураДополнительныеСвойства.ДляПроведения.ДокументРеализации);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	&ЗаказНаряд КАК СчетНаОплату,
	|	СУММА(ТаблицаДокумента.Всего) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаИзмененияЗапасов КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка.Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаКорректировкаРеализации);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И ТаблицаДокумента.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Статья КАК Статья
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыДоходыИРасходыОтложенные = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	
	ТаблицаПредоплатаДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Скопировать();
	ТаблицаПредоплатаДоходыИРасходыОтложенные.Очистить();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыОтложенные Из ТаблицаЗапасыДоходыИРасходыОтложенные Цикл
			Если СуммаКСписанию = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов > СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов = СуммаКСписанию;
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПредоплатаДоходыИРасходыОтложенные Из ТаблицаПредоплатаДоходыИРасходыОтложенные Цикл
		СтрокаЗапасыДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасыДоходыИРасходыОтложенные, СтрокаПредоплатаДоходыИРасходыОтложенные);
		СтрокаЗапасыДоходыИРасходыОтложенные.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаЗапасыДоходыИРасходыОтложенные.НеРаспределено = -СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов;
	КонецЦикла;
	
	ВыборкаРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Статья = ВыборкаРезультатаЗапроса.Статья;
	Иначе
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ,
	|	&Статья КАК Статья,
	|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Таблица.СуммаДоходов КАК СуммаДоходов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.УстановитьПараметр("Таблица", ТаблицаПредоплатаДоходыИРасходыОтложенные);
	Запрос.УстановитьПараметр("Статья", Статья);
	
	Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", ТаблицаЗапасыДоходыИРасходыОтложенные);
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыОтложенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаКорректировкаРеализации);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДокументДата КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	-ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период,
	|	Таблица.Организация,
	|	Таблица.НаправлениеДеятельности,
	|	Таблица.Статья,
	|	Таблица.СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаУправленческий(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Период КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаУправленческий
	|ГДЕ
	|	ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	1,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Сумма,
	|	&ЗачетПредоплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Период КАК Период,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный КАК СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|		СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|		СУММА(ТаблицаДокумента.Сумма) КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Период КАК Период,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.СчетУчетаАвансовПокупателя.Валютный КАК СчетУчетаАвансовПокупателяВалютный,
	|			ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.СчетУчетаРасчетовСПокупателем.Валютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|			ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|			ТаблицаДокумента.СуммаВал КАК СуммаВал,
	|			ТаблицаДокумента.Сумма КАК Сумма
	|		ИЗ
	|			ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			0,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Период,
	|		ТаблицаДокумента.Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаДокумента.Сумма) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.Сумма) <= -0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) <= -0.005)) КАК ТаблицаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета КАК СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный КАК СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный КАК СчетУчетаВалютный,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаУправленческий
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Ссылка.Договор.ЭтоДоговорОбслуживания
	|				И КорректировкаРеализации.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВестиУчетРасходовПоДоговорамОбслуживания,
	|	КорректировкаРеализации.Ссылка.Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КорректировкаРеализации.Договор.ВалютаРасчетов КАК ДоговорВалютаРасчетов,
	|	КорректировкаРеализации.Договор.РасчетыВУсловныхЕдиницах КАК ДоговорРасчетыВУсловныхЕдиницах,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.ВалютаДокумента,
	|	КорректировкаРеализации.Кратность,
	|	КорректировкаРеализации.Курс,
	|	КорректировкаРеализации.Договор,
	|	КорректировкаРеализации.Дата
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаУчета, &ВалютаНациональная, &ВалютаНакладной)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализацииЗапасы.Ссылка,
	|	КорректировкаРеализацииЗапасы.Ссылка.Договор КАК Договор,
	|	КорректировкаРеализацииЗапасы.Номенклатура,
	|	КорректировкаРеализацииЗапасы.Характеристика,
	|	КорректировкаРеализацииЗапасы.Партия,
	|	КорректировкаРеализацииЗапасы.ЕдиницаИзмерения,
	|	КорректировкаРеализацииЗапасы.СтранаПроисхождения,
	|	КорректировкаРеализацииЗапасы.НомерГТД,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации
	|			ТОГДА КорректировкаРеализацииЗапасы.Количество
	|		ИНАЧЕ КорректировкаРеализацииЗапасы.Количество - КорректировкаРеализацииЗапасы.КоличествоДоИзменения
	|	КОНЕЦ КАК Количество,
	|	КорректировкаРеализацииЗапасы.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации
	|			ТОГДА КорректировкаРеализацииЗапасы.Сумма
	|		ИНАЧЕ КорректировкаРеализацииЗапасы.Сумма - КорректировкаРеализацииЗапасы.СуммаДоИзменения
	|	КОНЕЦ КАК Сумма,
	|	КорректировкаРеализацииЗапасы.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации
	|			ТОГДА КорректировкаРеализацииЗапасы.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииЗапасы.СуммаНДС - КорректировкаРеализацииЗапасы.СуммаНДСДоИзменения
	|	КОНЕЦ КАК СуммаНДС,
	|	КорректировкаРеализацииЗапасы.Заказ,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации
	|			ТОГДА КорректировкаРеализацииЗапасы.Всего
	|		ИНАЧЕ КорректировкаРеализацииЗапасы.Всего - КорректировкаРеализацииЗапасы.ВсегоДоИзменения
	|	КОНЕЦ КАК Всего,
	|	КорректировкаРеализацииЗапасы.Содержание,
	|	КорректировкаРеализацииЗапасы.НомерСтроки,
	|	КорректировкаРеализацииЗапасы.Резерв,
	|	КорректировкаРеализацииЗапасы.КлючСвязи,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументРеализации) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОснованиеЗаказНаряд,
	|	КорректировкаРеализацииЗапасы.Спецификация,
	|	КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации
	|ПОМЕСТИТЬ ВременнаяТаблицаИзмененияЗапасов
	|ИЗ
	|	Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
	|ГДЕ
	|	КорректировкаРеализацииЗапасы.Ссылка = &Ссылка
	|	И (ВЫБОР
	|				КОГДА НЕ КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации
	|					ТОГДА КорректировкаРеализацииЗапасы.Количество
	|				ИНАЧЕ КорректировкаРеализацииЗапасы.Количество - КорректировкаРеализацииЗапасы.КоличествоДоИзменения
	|			КОНЕЦ <> 0
	|			ИЛИ ВЫБОР
	|				КОГДА НЕ КорректировкаРеализацииЗапасы.ЕстьВДокументеРеализации
	|					ТОГДА КорректировкаРеализацииЗапасы.Сумма
	|				ИНАЧЕ КорректировкаРеализацииЗапасы.Сумма - КорректировкаРеализацииЗапасы.СуммаДоИзменения
	|			КОНЕЦ <> 0)
	|	И КорректировкаРеализацииЗапасы.Ссылка.ОтражатьВУчете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияЗапасов.НомерСтроки КАК НомерСтроки,
	|	ИзмененияЗапасов.Ссылка.ВидОперации КАК ВидОперации,
	|	&ДокументРеализации КАК Документ,
	|	ИзмененияЗапасов.Ссылка.Ответственный КАК Ответственный,
	|	ИзмененияЗапасов.Ссылка.ДокументОснование КАК ДокументОснование,
	|	ИзмененияЗапасов.Ссылка.Контрагент КАК Контрагент,
	|	ИзмененияЗапасов.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ИзмененияЗапасов.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ИзмененияЗапасов.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ИзмененияЗапасов.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ИзмененияЗапасов.Ссылка.Договор КАК Договор,
	|	ИзмененияЗапасов.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК КоррОрганизация,
	|	ИзмененияЗапасов.Ссылка.Подразделение КАК ПодразделениеПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ ИзмененияЗапасов.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ ИзмененияЗапасов.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ ИзмененияЗапасов.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	ИзмененияЗапасов.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ИзмененияЗапасов.Ссылка.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ИзмененияЗапасов.Ссылка.СтруктурнаяЕдиница.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ИзмененияЗапасов.Ссылка.Ячейка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ячейка,
	|	ИзмененияЗапасов.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчета,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ИзмененияЗапасов.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ИзмененияЗапасов.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ИзмененияЗапасов.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ИзмененияЗапасов.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК КоррПартия,
	|	ВЫБОР
	|		КОГДА ИзмененияЗапасов.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			ТОГДА ИзмененияЗапасов.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Заказ,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ИзмененияЗапасов.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ИзмененияЗапасов.Количество
	|		ИНАЧЕ ИзмененияЗапасов.Количество * ИзмененияЗапасов.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ИзмененияЗапасов.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ИзмененияЗапасов.Резерв
	|		ИНАЧЕ ИзмененияЗапасов.Резерв * ИзмененияЗапасов.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ИзмененияЗапасов.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ИзмененияЗапасов.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИзмененияЗапасов.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ИзмененияЗапасов.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ИзмененияЗапасов.СуммаНДС * ИзмененияЗапасов.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ИзмененияЗапасов.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ИзмененияЗапасов.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ИзмененияЗапасов.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ИзмененияЗапасов.СуммаНДС * ИзмененияЗапасов.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ИзмененияЗапасов.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ИзмененияЗапасов.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ИзмененияЗапасов.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ИзмененияЗапасов.Всего * ИзмененияЗапасов.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ИзмененияЗапасов.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ИзмененияЗапасов.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИзмененияЗапасов.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ИзмененияЗапасов.СуммаНДС * КурсыРегВалюты.Курс * ИзмененияЗапасов.Ссылка.Кратность / (ИзмененияЗапасов.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ИзмененияЗапасов.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ИзмененияЗапасов.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ИзмененияЗапасов.Всего * КурсыРегВалюты.Курс * ИзмененияЗапасов.Ссылка.Кратность / (ИзмененияЗапасов.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ИзмененияЗапасов.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ИзмененияЗапасов.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	ИзмененияЗапасов.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ИзмененияЗапасов.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ИзмененияЗапасов.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ИзмененияЗапасов.КлючСвязи,
	|	ИзмененияЗапасов.Спецификация,
	|	ИзмененияЗапасов.ЕстьВДокументеРеализации,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументРеализации) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗаказНаряд,
	|	ИзмененияЗапасов.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	ИзмененияЗапасов.Всего КАК ВсегоВалютаДокумента
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	ВременнаяТаблицаИзмененияЗапасов КАК ИзмененияЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ИзмененияЗапасов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КорректировкаРеализацииПредоплата.НомерСтроки) КАК НомерСтроки,
	|	КорректировкаРеализацииПредоплата.Ссылка.ВидОперации КАК ВидОперации,
	|	КорректировкаРеализацииПредоплата.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент КАК Контрагент,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор КАК Договор,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументРеализации) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА &ДокументРеализации
	|		ИНАЧЕ КорректировкаРеализацииПредоплата.Заказ
	|	КОНЕЦ КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельностиПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	&ДокументРеализации КАК ДокументКуда,
	|	КорректировкаРеализацииПредоплата.Ссылка.ДокументОснование КАК ДокументОснование,
	|	КорректировкаРеализацииПредоплата.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(КорректировкаРеализацииПредоплата.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА КорректировкаРеализацииПредоплата.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ КорректировкаРеализацииПредоплата.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА НЕ КорректировкаРеализацииПредоплата.ЕстьВДокументеРеализации
	|					ТОГДА КорректировкаРеализацииПредоплата.СуммаПлатежа
	|				ИНАЧЕ КорректировкаРеализацииПредоплата.СуммаПлатежа - КорректировкаРеализацииПредоплата.СуммаПлатежаДоИзменения
	|			КОНЕЦ * КурсыВалютДокументаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютДокументаСрезПоследних.Кратность) КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ КорректировкаРеализацииПредоплата.ЕстьВДокументеРеализации
	|				ТОГДА КорректировкаРеализацииПредоплата.СуммаРасчетов
	|			ИНАЧЕ КорректировкаРеализацииПредоплата.СуммаРасчетов - КорректировкаРеализацииПредоплата.СуммаРасчетовДоИзменения
	|		КОНЕЦ) КАК СуммаВал,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КорректировкаРеализацииПредоплата.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭквайринговаяОперация,
	|	КорректировкаРеализацииПредоплата.Документ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(КорректировкаРеализацииПредоплата.Документ.Дата, ДЕНЬ) КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументРеализации) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗаказНаряд,
	|	КорректировкаРеализацииПредоплата.Курс,
	|	КорректировкаРеализацииПредоплата.Кратность,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	СУММА(ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.СуммаРасчетов * КорректировкаРеализацииПредоплата.Курс / КорректировкаРеализацииПредоплата.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаРубПоКурсуАванса
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.КорректировкаРеализации.Предоплата КАК КорректировкаРеализацииПредоплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютДокументаСрезПоследних
	|		ПО (КурсыВалютДокументаСрезПоследних.Валюта = &ВалютаНакладной)
	|ГДЕ
	|	КорректировкаРеализацииПредоплата.Ссылка = &Ссылка
	|	И КорректировкаРеализацииПредоплата.Ссылка.ОтражатьВУчете
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииПредоплата.Ссылка,
	|	КорректировкаРеализацииПредоплата.Документ,
	|	КорректировкаРеализацииПредоплата.Ссылка.Дата,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор.ВалютаРасчетов,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.СчетУчетаАвансовПокупателя,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.СчетУчетаАвансовПоставщику,
	|	КорректировкаРеализацииПредоплата.Ссылка.ВидОперации,
	|	КорректировкаРеализацииПредоплата.Ссылка.ДокументОснование,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиРасчетыПоДоговорам,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиРасчетыПоДокументам,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиРасчетыПоЗаказам,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам,
	|	КорректировкаРеализацииПредоплата.Документ.ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(КорректировкаРеализацииПредоплата.Документ.Дата, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументРеализации) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА &ДокументРеализации
	|		ИНАЧЕ КорректировкаРеализацииПредоплата.Заказ
	|	КОНЕЦ,
	|	КорректировкаРеализацииПредоплата.Курс,
	|	КорректировкаРеализацииПредоплата.Кратность,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализацииЗапасы.НомерСтроки КАК НомерСтроки,
	|	КорректировкаРеализацииЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииЗапасы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА КорректировкаРеализацииЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА КорректировкаРеализацииЗапасы.СуммаНДС * КурсыРегВалюты.Курс * КорректировкаРеализацииЗапасы.Ссылка.Кратность / (КорректировкаРеализацииЗапасы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ КорректировкаРеализацииЗапасы.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииЗапасы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА КорректировкаРеализацииЗапасы.Всего * КурсыРегВалюты.Курс * КорректировкаРеализацииЗапасы.Ссылка.Кратность / (КорректировкаРеализацииЗапасы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ КорректировкаРеализацииЗапасы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	КорректировкаРеализацииЗапасы.СуммаНДС КАК СуммаНДСВалютаДокумента,
	|	КорректировкаРеализацииЗапасы.Всего КАК ВсегоВалютаДокумента,
	|	КорректировкаРеализацииЗапасы.Ссылка КАК Документ
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыРег
	|ИЗ
	|	Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	КорректировкаРеализацииЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КорректировкаРеализацииПредоплата.НомерСтроки) КАК НомерСтроки,
	|	КорректировкаРеализацииПредоплата.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент КАК Контрагент,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор КАК Договор,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументРеализации) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА &ДокументРеализации
	|		ИНАЧЕ КорректировкаРеализацииПредоплата.Заказ
	|	КОНЕЦ КАК Заказ,
	|	КорректировкаРеализацииПредоплата.Ссылка.ДокументОснование КАК ДокументОснование,
	|	КорректировкаРеализацииПредоплата.Документ КАК Документ,
	|	СУММА(ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.СуммаПлатежа * КурсыВалютДокументаСрезПоследних.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * КурсыВалютДокументаСрезПоследних.Кратность) КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(КорректировкаРеализацииПредоплата.СуммаРасчетов) КАК СуммаВал,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	СУММА(ВЫРАЗИТЬ(КорректировкаРеализацииПредоплата.СуммаРасчетов * КорректировкаРеализацииПредоплата.Курс / КорректировкаРеализацииПредоплата.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаРубПоКурсуАванса
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаРег
	|ИЗ
	|	Документ.КорректировкаРеализации.Предоплата КАК КорректировкаРеализацииПредоплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютДокументаСрезПоследних
	|		ПО (КурсыВалютДокументаСрезПоследних.Валюта = &ВалютаНакладной)
	|ГДЕ
	|	КорректировкаРеализацииПредоплата.Ссылка = &Ссылка
	|	И КорректировкаРеализацииПредоплата.Ссылка.ОтражатьВУчете
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииПредоплата.Ссылка,
	|	КорректировкаРеализацииПредоплата.Документ,
	|	КорректировкаРеализацииПредоплата.Ссылка.Дата,
	|	КорректировкаРеализацииПредоплата.Ссылка.Контрагент,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор.ВалютаРасчетов,
	|	КорректировкаРеализацииПредоплата.Ссылка.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументРеализации) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА &ДокументРеализации
	|		ИНАЧЕ КорректировкаРеализацииПредоплата.Заказ
	|	КОНЕЦ,
	|	КорректировкаРеализацииПредоплата.Ссылка.Договор.РасчетыВУсловныхЕдиницах";
	
	ДокументРеализации = ПолучитьИсправляемыйДокументРеализации(ДокументСсылкаКорректировкаРеализации, Истина);
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаКорректировкаРеализации);
	Запрос.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаНациональная", Константы.НациональнаяВалюта.Получить());
	Запрос.УстановитьПараметр("ВалютаНакладной", ДокументСсылкаКорректировкаРеализации.ВалютаДокумента);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ДляПроведения.Вставить("ДокументРеализации", ДокументРеализации);
	ОснованиеЗаказНаряд = ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.ЗаказПокупателя");
	
	// Формирование проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаПродажи(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаВыпускПродукции(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыКРасходуСоСкладов(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыПринятые(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	
	Если НЕ ОснованиеЗаказНаряд Тогда
		СформироватьТаблицаЗапасы(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	Иначе
		СформироватьТаблицаГрафикДвиженияЗапасов(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
		СформироватьТаблицаЗапасыРаботы(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
		СформироватьТаблицаЗапасыТовары(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
	СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	
	// Эквайринг
	ЭквайринговыеОперацииСервер.СформироватьТаблицаДоходыИРасходыКассовыйМетодЭквайринг(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
	
	// Рублевые суммы документов
	Если ДокументСсылкаКорректировкаРеализации.Договор.ВалютаРасчетов <> Константы.НациональнаяВалюта.Получить()
		Тогда
		
		Если ДокументСсылкаКорректировкаРеализации.Договор.ВалютаРасчетов <> Константы.НациональнаяВалюта.Получить()
			И ДокументСсылкаКорректировкаРеализации.Договор.РасчетыВУсловныхЕдиницах
			И ДокументСсылкаКорректировкаРеализации.Предоплата.Количество() > 0 Тогда
			
			// Поведение будет реализовано в будущих версиях.
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Для корректировочных документов в валюте по договору в у.е. распределение авансов по курсу авансов не поддерживается.'");
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРублевыеСуммыДокументовВВалюте", Новый ТаблицаЗначений);
		РублевыеСуммыДокументов.ДобавитьДвиженияВТаблицуРасчетов(
			ДокументСсылкаКорректировкаРеализации.Предоплата,
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПокупателями,
			ДокументСсылкаКорректировкаРеализации,
			СтруктураДополнительныеСвойства,
			Ложь,
			Истина);
			
		Возврат;
		
		// Поведение будет реализовано в будущих версиях.
		ТаблицаВзаиморасчеты = РублевыеСуммыДокументов.ПодготовитьТаблицуДокументаРасчетыВВалюте(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства, "ВременнаяТаблицаЗапасыРег", Истина);
		Если СтруктураДополнительныеСвойства.ДляПроведения.ВалютаДокумента <> СтруктураДополнительныеСвойства.ДляПроведения.НациональнаяВалюта Тогда
			РублевыеСуммыДокументов.РаспределитьАвансыПоТаблицеРеализации(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства, ТаблицаВзаиморасчеты);
		КонецЕсли;
		РублевыеСуммыДокументов.СформироватьТаблицаРублевыеСуммыДокументовВВалюте(ДокументСсылкаКорректировкаРеализации, СтруктураДополнительныеСвойства);
		
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРублевыеСуммыДокументовВВалюте", Новый ТаблицаЗначений);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаКорректировкаРеализации, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыИзменение", "ДвиженияЗапасыНаСкладахИзменение",
	// "ДвиженияЗапасыКРасходуСоСкладовИзменение", "ДвиженияЗапасыПринятыеИзменение", "ДвиженияРазмещениеЗаказовИзменение"
	// содержат записи, необходимо выполнить контроль реализации товаров.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыКРасходуСоСкладовИзменение 
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыПринятыеИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыНаСкладахИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК ЯчейкаПредставление,
		|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
		|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
		|ИЗ
		|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(&МоментКонтроля, ) КАК ЗапасыНаСкладахОстатки
		|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
		|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
		|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
		|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
		|			И (ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
		|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
		|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
		|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
		|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
		|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
		|ИЗ
		|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
		|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
		|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
		|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
		|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
		|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
		|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
		|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
		|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыПринятыеИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗапасыПринятыеИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Партия КАК ПартияПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи КАК ТипПриемаПередачиПредставление,
		|	ЗапасыПринятыеОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыПринятые,
		|	ЕСТЬNULL(ДвиженияЗапасыПринятыеИзменение.СуммаРасчетовИзменение, 0) + ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовЗапасыПринятые,
		|	ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) КАК СуммаРасчетовОстатокЗапасыПринятые
		|ИЗ
		|	ДвиженияЗапасыПринятыеИзменение КАК ДвиженияЗапасыПринятыеИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыПринятые.Остатки(&МоментКонтроля, ) КАК ЗапасыПринятыеОстатки
		|		ПО ДвиженияЗапасыПринятыеИзменение.Организация = ЗапасыПринятыеОстатки.Организация
		|			И ДвиженияЗапасыПринятыеИзменение.Номенклатура = ЗапасыПринятыеОстатки.Номенклатура
		|			И ДвиженияЗапасыПринятыеИзменение.Характеристика = ЗапасыПринятыеОстатки.Характеристика
		|			И ДвиженияЗапасыПринятыеИзменение.Партия = ЗапасыПринятыеОстатки.Партия
		|			И ДвиженияЗапасыПринятыеИзменение.Контрагент = ЗапасыПринятыеОстатки.Контрагент
		|			И ДвиженияЗапасыПринятыеИзменение.Договор = ЗапасыПринятыеОстатки.Договор
		|			И ДвиженияЗапасыПринятыеИзменение.Заказ = ЗапасыПринятыеОстатки.Заказ
		|			И ДвиженияЗапасыПринятыеИзменение.ТипПриемаПередачи = ЗапасыПринятыеОстатки.ТипПриемаПередачи
		|			И (ЕСТЬNULL(ЗапасыПринятыеОстатки.КоличествоОстаток, 0) < 0
		|				ИЛИ ЕСТЬNULL(ЗапасыПринятыеОстатки.СуммаРасчетовОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
		|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
		|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
		|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
		|ИЗ
		|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
		|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
		|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
		|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
		|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
		|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияРасчетыСПокупателямиИзменение.Организация КАК ОрганизацияПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК КонтрагентПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор КАК ДоговорПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Документ КАК ДокументПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК ЗаказПредставление,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
		|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
		|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
		|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
		|ИЗ
		|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментКонтроля, ) КАК РасчетыСПокупателямиОстатки
		|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
		|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
		|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
		|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
		|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
		|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
		|			И (ВЫБОР
		|				КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|					ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
		|				ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
		|ИЗ
		|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
		|				&МоментКонтроля,
		|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
		|					(ВЫБРАТЬ
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
		|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
		|					ИЗ
		|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
		|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
		|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
		|ГДЕ
		|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ МассивРезультатов[0].Пустой()
			ИЛИ НЕ МассивРезультатов[1].Пустой()
			ИЛИ НЕ МассивРезультатов[2].Пустой()
			ИЛИ НЕ МассивРезультатов[3].Пустой()
			ИЛИ НЕ МассивРезультатов[4].Пустой()
			ИЛИ НЕ МассивРезультатов[5].Пустой()
			Тогда
			
			ДокументОбъектРасходнаяНакладная = ДокументСсылкаКорректировкаРеализации.ПолучитьОбъект()
			
		КонецЕсли;
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток запасов принятых.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыПринятые(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по остаткам запасов в разрезе номеров ГТД.
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить()
			И НЕ МассивРезультатов[5].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД(ДокументОбъектРасходнаяНакладная, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

#Область ИнтерфейсПечати

// Процедура формирования печатной формы Универсального передаточного документа
//
Функция СформироватьУниверсальныйПередаточныйДокумент(ТабличныйДокумент, ТекущийДокумент)
	
	НачалоИспользованияСФ1137	= Константы.НачалоИспользованияСФ1137.Получить();
	СтруктураЗаполненияСекции	= Новый Структура;
	СтавкаНДС0					= УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактура.ПФ_MXL_УниверсальныйПередаточныйДокумент");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК Ссылка,
	|	КорректировкаРеализации.Дата КАК ДатаДокумента,
	|	КорректировкаРеализации.Номер КАК Номер,
	|	КорректировкаРеализации.Организация.Префикс КАК Префикс,
	|	КорректировкаРеализации.Организация КАК Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	КорректировкаРеализации.БанковскийСчет КАК БанковскийСчет,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА КорректировкаРеализации.Организация
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Плательщик,
	|	КорректировкаРеализации.Договор.Представление КАК Основание,
	|	ЕСТЬNULL(КорректировкаРеализации.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.СуммаВключаетНДС,
	|	КорректировкаРеализации.НДСВключатьВСтоимость,
	|	КорректировкаРеализации.Курс,
	|	КорректировкаРеализации.Кратность,
	|	КорректировкаРеализации.Руководитель КАК Руководитель,
	|	КорректировкаРеализации.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	КорректировкаРеализации.Отпустил КАК Отпустил,
	|	КорректировкаРеализации.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	КорректировкаРеализации.ДоверенностьДата КАК ДоверенностьДата,
	|	КорректировкаРеализации.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	КорректировкаРеализации.ДоверенностьНомер КАК ДоверенностьНомер,
	|	КорректировкаРеализации.ОтпустилДолжность КАК ОтпустилДолжность,
	|	КорректировкаРеализации.НомерИсправления,
	|	КорректировкаРеализации.Дата КАК ДатаИсправления
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ИспользоватьПересчет = Шапка.РасчетыВУсловныхЕдиницах И (Шапка.Валюта <> Константы.НациональнаяВалюта.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК ТоварНаименование,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура.Код КАК ЗапасКод,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.ТоварнаяНоменклатураВЭД.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТНВЭДКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	0 КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ВЫБОР
	|					КОГДА ВложенныйЗапрос.ВсегоРуб ЕСТЬ NULL
	|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|					КОГДА ВложенныйЗапрос.СуммаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРуб КАК ЧИСЛО(15, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРуб - ВложенныйЗапрос.СуммаНДСРуб КАК ЧИСЛО(15, 2))
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныйЗапрос.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаНДСРуб, ВЫРАЗИТЬ(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВложенныйЗапрос.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПересчет
	|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.ВсегоРуб, ВЫРАЗИТЬ(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
	|		ИНАЧЕ ВложенныйЗапрос.Всего
	|	КОНЕЦ КАК Всего,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		КорректировкаРеализацииЗапасы.Номенклатура КАК Номенклатура,
	|		КорректировкаРеализацииЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		КорректировкаРеализацииЗапасы.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА &ИспользоватьПересчет
	|				ТОГДА ВЫБОР
	|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
	|							ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|						КОГДА КорректировкаРеализацииЗапасы.Количество = 0
	|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
	|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / КорректировкаРеализацииЗапасы.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			ИНАЧЕ КорректировкаРеализацииЗапасы.Цена
	|		КОНЕЦ КАК Цена,
	|		СУММА(КорректировкаРеализацииЗапасы.Количество) КАК Количество,
	|		СУММА(КорректировкаРеализацииЗапасы.Сумма) КАК Сумма,
	|		СУММА(КорректировкаРеализацииЗапасы.СуммаНДС) КАК СуммаНДС,
	|		СУММА(КорректировкаРеализацииЗапасы.Всего) КАК Всего,
	|		МИНИМУМ(КорректировкаРеализацииЗапасы.НомерСтроки) КАК НомерСтроки,
	|		КорректировкаРеализацииЗапасы.Характеристика КАК Характеристика,
	|		СУММА(РублевыеСуммыДокументовВВалюте.Всего) КАК ВсегоРуб,
	|		СУММА(РублевыеСуммыДокументовВВалюте.НДС) КАК СуммаНДСРуб,
	|		КорректировкаРеализацииЗапасы.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|		ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание
	|	ИЗ
	|		Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
	|			ПО КорректировкаРеализацииЗапасы.Ссылка = РублевыеСуммыДокументовВВалюте.Регистратор
	|				И КорректировкаРеализацииЗапасы.НомерСтроки = РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
	|	ГДЕ
	|		КорректировкаРеализацииЗапасы.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаРеализацииЗапасы.Номенклатура,
	|		КорректировкаРеализацииЗапасы.ЕдиницаИзмерения,
	|		КорректировкаРеализацииЗапасы.СтавкаНДС,
	|		КорректировкаРеализацииЗапасы.Цена,
	|		КорректировкаРеализацииЗапасы.Характеристика,
	|		ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Содержание КАК СТРОКА(1000)),
	|		ВЫБОР
	|			КОГДА &ИспользоватьПересчет
	|				ТОГДА ВЫБОР
	|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
	|							ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
	|						КОГДА КорректировкаРеализацииЗапасы.Количество = 0
	|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
	|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / КорректировкаРеализацииЗапасы.Количество КАК ЧИСЛО(15, 2))
	|					КОНЕЦ
	|			ИНАЧЕ КорректировкаРеализацииЗапасы.Цена
	|		КОНЕЦ,
	|		КорректировкаРеализацииЗапасы.Ссылка.СуммаВключаетНДС) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ИспользоватьПересчет", ИспользоватьПересчет);
	Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
	Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
	
	ТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
	
	КоличествоСтраниц = 1;
	
	СведенияОПокупателе			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.ДатаДокумента,	,	);
	СведенияОПоставщике			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаДокумента,	,	);
	
	ФлагОнЖе = (Шапка.Поставщик = Шапка.Грузоотправитель);
	
	СведенияОГрузоотправителе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
		?(ФлагОнЖе, Шапка.Поставщик, Шапка.Грузоотправитель), 
		Шапка.ДатаДокумента,	,);
		
	СведенияОГрузополучателе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
		?(ФлагОнЖе И НЕ ЗначениеЗаполнено(Шапка.Грузополучатель), Шапка.Покупатель, Шапка.Грузополучатель), 
		Шапка.ДатаДокумента,	,);
	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	СчетФактураВыданный = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Шапка.Ссылка, Ложь);
	НоменДляПечати = ?(ЗначениеЗаполнено(СчетФактураВыданный), СчетФактураВыданный.Номер, Шапка.Номер);
	Если Шапка.ДатаДокумента < Дата('20110101') Тогда
		
		НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(НоменДляПечати, Шапка.Префикс);
		
	Иначе
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НоменДляПечати, Истина, Истина);
		
	КонецЕсли;
	
	ДатаДокумента = Формат(?(ЗначениеЗаполнено(СчетФактураВыданный), СчетФактураВыданный.Дата, Шапка.ДатаДокумента), "ДФ='дд ММММ гггг'")+ " г.";
	
	СтруктураЗаполненияСекции.Вставить("Номер", НомерДокумента);
	СтруктураЗаполненияСекции.Вставить("Дата", ДатаДокумента);
	СтруктураЗаполненияСекции.Вставить("НомерИсправления", Шапка.НомерИсправления);
	СтруктураЗаполненияСекции.Вставить("ДатаИсправления", ДатаДокумента);
	
	ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	Если НЕ (Шапка.ДатаДокумента < '20090609' ИЛИ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137) Тогда
		
		ПредставлениеПоставщика = ПредставлениеПоставщика + " (" + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Представление,") + ")";
		
	КонецЕсли;
	
	СтруктураЗаполненияСекции.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	
	ЗначениеАдресаПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
	СтруктураЗаполненияСекции.Вставить("АдресПоставщика", ?(ПустаяСтрока(ЗначениеАдресаПоставщика), "--", ЗначениеАдресаПоставщика));
	СтруктураЗаполненияСекции.Вставить("ПоДокументу", "-- от --");
	СтруктураЗаполненияСекции.Вставить("ПредставлениеПокупателя", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
	
	ЗначениеАдресаПокупателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
	СтруктураЗаполненияСекции.Вставить("АдресПокупателя", ?(ПустаяСтрока(ЗначениеАдресаПокупателя), "--", ЗначениеАдресаПокупателя));
	
	Если ФлагОнЖе Тогда
		
		ПредставлениеГрузоотправителя = "он же";
		
	ИначеЕсли ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
		
		ПредставлениеГрузоотправителя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование, ФактическийАдрес,");
		
	Иначе
		
		ПредставлениеГрузоотправителя = "--";
		
	КонецЕсли; 
	СтруктураЗаполненияСекции.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
		
		Если ПустаяСтрока(Шапка.АдресДоставки) Тогда
			
			ПредставлениеГрузополучателя  = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,");
			
		Иначе
			
			ПредставлениеГрузополучателя  = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,");
			ПредставлениеГрузополучателя  = ПредставлениеГрузополучателя + "; " + Шапка.АдресДоставки;
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеГрузополучателя = "--";
		
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	
	КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП = "/" + КПП;
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ИННпоставщика", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП);
	
	КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда 
		КПП = "/" + КПП;
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ИННПокупателя", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП);
	
	Если Шапка.Валюта <> Константы.НациональнаяВалюта.Получить()
		И НЕ ИспользоватьПересчет Тогда
		
		Валюта = СокрЛП(Шапка.Валюта.НаименованиеПолное) + ", " + СокрЛП(Шапка.Валюта.Код) + "";
		
	Иначе
		
		Валюта = "Российский рубль,643";
		
	Конецесли;
	СтруктураЗаполненияСекции.Вставить("Валюта", Валюта);
	СтруктураЗаполненияСекции.Вставить("СтатусУПД", "2");
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим шапку ТЧ накладной
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим ТЧ накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	ИтогоСтоимость	= 0;
	ИтогоСуммаНДС	= 0;
	ИтогоВсего		= 0;
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТабличнаяЧасть.Количество();
	
	Для Каждого СтрокаЗапасы Из ТабличнаяЧасть Цикл
		
		Если СтрокаЗапасы.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Очистить();
		
		НомерСтроки = НомерСтроки + 1;
		
		СтруктураЗаполненияСекции.Вставить("НомерСтроки", НомерСтроки);
		СтруктураЗаполненияСекции.Вставить("ТоварКод", СтрокаЗапасы.Артикул);
		
		ТоварНаименование = СтрокаЗапасы.Содержание;
		Если ПустаяСтрока(ТоварНаименование) Тогда
			
			ТоварНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(СтрокаЗапасы.ТоварНаименование, СтрокаЗапасы.Характеристика, СтрокаЗапасы.Артикул);
			
		КонецЕсли;
		
		Если Шапка.ДатаДокумента >= Дата(2016, 07, 01) Тогда
			
			Если СтрокаЗапасы.СтавкаНДС = СтавкаНДС0
				И НЕ ПустаяСтрока(СтрокаЗапасы.ТНВЭДКод) Тогда
				
				ТоварНаименование = ТоварНаименование + НСтр("ru=', код ТН ВЭД '") + СтрокаЗапасы.ТНВЭДКод;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("ТоварНаименование", ТоварНаименование);
		
		ЕдиницаИзмеренияКод = СтрокаЗапасы.ЕдиницаИзмеренияКод;
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 
			И НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
			
			ЕдиницаИзмеренияКод = "--";
			
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмеренияКод", ЕдиницаИзмеренияКод);
		
		ЕдиницаИзмерения = СтрокаЗапасы.ЕдиницаИзмерения;
		Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 
			И НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = "--";
			
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураЗаполненияСекции.Вставить("Акциз", ?(Шапка.ДатаДокумента < НачалоИспользованияСФ1137, "", Нстр("ru = 'без акциза'")));
		СтруктураЗаполненияСекции.Вставить("Количество", СтрокаЗапасы.Количество);
		
		Если СтрокаЗапасы.Цена = 0 ИЛИ СтрокаЗапасы.Количество = 0 Тогда
			
			СтруктураЗаполненияСекции.Вставить("Цена", "--");
			
		Иначе
			
			СтруктураЗаполненияСекции.Вставить("Цена", Окр((СтрокаЗапасы.Всего - СтрокаЗапасы.СуммаНДС) / СтрокаЗапасы.Количество,2));
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("Стоимость", СтрокаЗапасы.Всего - СтрокаЗапасы.СуммаНДС);
		СтруктураЗаполненияСекции.Вставить("Всего", СтрокаЗапасы.Всего);
		
		Если ВРег(СтрокаЗапасы.СтавкаНДС) = "БЕЗ НДС" Тогда
			
			СтруктураЗаполненияСекции.Вставить("СтавкаНДС", Нстр("ru ='без НДС'"));
			СтруктураЗаполненияСекции.Вставить("СуммаНДС", Нстр("ru ='без НДС'"));
			
		Иначе
			
			СтруктураЗаполненияСекции.Вставить("СтавкаНДС",СтрокаЗапасы.СтавкаНДС);
			СтруктураЗаполненияСекции.Вставить("СуммаНДС", СтрокаЗапасы.СуммаНДС);
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("СтранаПроисхожденияКод", "--");
		СтруктураЗаполненияСекции.Вставить("ПредставлениеСтраны", "--");
		СтруктураЗаполненияСекции.Вставить("ПредставлениеГТД", "--");
		
		ИтогоСтоимость	= ИтогоСтоимость + (СтрокаЗапасы.Всего - СтрокаЗапасы.СуммаНДС);
		ИтогоСуммаНДС	= ИтогоСуммаНДС + СтрокаЗапасы.СуммаНДС;
		ИтогоВсего		= ИтогоВсего + СтрокаЗапасы.Всего;
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		
		Если НЕ УправлениеНебольшойФирмойСервер.ПроверитьВыводСчетаФактурыНаСтраницу(ТабличныйДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерДокумента, Истина) Тогда
			
			КоличествоСтраниц = КоличествоСтраниц + 1;
			
		КонецЕсли;
		
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Выводим область ИТОГО
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	
	СтруктураЗаполненияСекции.Очистить();
	СтруктураЗаполненияСекции.Вставить("ИтогоСуммаНДС", ИтогоСуммаНДС);
	СтруктураЗаполненияСекции.Вставить("ИтогоВсего", ИтогоВсего);
	СтруктураЗаполненияСекции.Вставить("ИтогоСтоимость", ?(ИтогоСтоимость = 0, "--", ИтогоСтоимость));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим область Подвал
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ОтветственныеЛицаОрганизации = Новый Структура;
	
	ФИОРуководитель = "";
	УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОРуководитель, Строка(Шапка.Руководитель));
	Если Шапка.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		ОтветственныеЛицаОрганизации.Вставить("ФИОПБОЮЛ", ФИОРуководитель);
		
	Иначе
		
		ОтветственныеЛицаОрганизации.Вставить("ФИОРуководителя", ФИОРуководитель);
		
	КонецЕсли;
	
	ОтветственныеЛицаОрганизации.Вставить("КоличествоЛистов", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
			УправлениеНебольшойФирмойСервер.ФормаМножественногоЧисла(НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц))
		);
	
	ОтветственныеЛицаОрганизации.Вставить("Свидетельство", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
	
	ФИОКладовщика = "";
	УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОКладовщика, Строка(Шапка.Отпустил));
	ОтветственныеЛицаОрганизации.Вставить("ФИОКладовщика", ФИОКладовщика);
	ОтветственныеЛицаОрганизации.Вставить("ДолжностьКладовщика", Шапка.ОтпустилДолжность);
	
	ФИОГлавногоБухгалтера = "";
	УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОГлавногоБухгалтера, Строка(Шапка.ГлавныйБухгалтер));
	ОтветственныеЛицаОрганизации.Вставить("ФИОГлавногоБухгалтера", ФИОГлавногоБухгалтера);
	
	ОбластьМакета.Параметры.Заполнить(ОтветственныеЛицаОрганизации);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Выводим область Подвал накладной
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
	СтруктураЗаполненияСекции.Очистить();
	Если ЗначениеЗаполнено(Шапка.ДоверенностьВыдана)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьДата)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьЛицо)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьНомер) Тогда
		
		ТекстОснования = Шапка.Основание + НСтр("ru ='; по доверенности №'") + Шапка.ДоверенностьНомер 
			+ НСтр("ru =' от '") + Формат(Шапка.ДоверенностьДата, "ДЛФ=DD") 
			+ НСтр("ru =' выданной '") + Шапка.ДоверенностьВыдана + " " 
			+ Шапка.ДоверенностьЛицо;
			
		СтруктураЗаполненияСекции.Вставить("Основание", ТекстОснования);
		
	Иначе
		
		СтруктураЗаполненияСекции.Вставить("Основание", Шапка.Основание);
		
	КонецЕсли;
	
	СтруктураЗаполненияСекции.Вставить("ДатаОтгрузкиПередачи", Формат(Шапка.ДатаДокумента, "ДФ='« дд » ММММ гггг'"));
	
	ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	Если НЕ ПустаяСтрока(СведенияОПоставщике.ИНН) 
		И НЕ ПустаяСтрока(СведенияОПоставщике.КПП) Тогда
		
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			ПредставлениеОрганизации, СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП);
		
	ИначеЕсли НЕ ПустаяСтрока(СведенияОПоставщике.ИНН) Тогда
		
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			ПредставлениеОрганизации, СведенияОПоставщике.ИНН);
		
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
			
	ПредставлениеКонтрагента = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
	Если НЕ ПустаяСтрока(СведенияОПокупателе.ИНН)
		И НЕ ПустаяСтрока(СведенияОПокупателе.КПП) Тогда
		
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			ПредставлениеКонтрагента, СведенияОПокупателе.ИНН, СведенияОПокупателе.КПП);
			
	ИначеЕсли НЕ ПустаяСтрока(СведенияОПокупателе.ИНН) Тогда
		
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			ПредставлениеКонтрагента, СведенияОПокупателе.ИНН);
		
	КонецЕсли;
	СтруктураЗаполненияСекции.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	СтруктураЗаполненияСекции.Вставить("ДолжностьКладовщика", ОтветственныеЛицаОрганизации.ДолжностьКладовщика);
	СтруктураЗаполненияСекции.Вставить("ФИОКладовщика", ОтветственныеЛицаОрганизации.ФИОКладовщика);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьУниверсальныйПередаточныйДокумент()

// Процедура формирования печатной формы Акта об оказании услуг
//
Функция СформироватьАктОбОказанииУслуг(ТабличныйДокумент, ТекущийДокумент, Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Дата КАК ДатаДокумента,
	|	КорректировкаРеализации.Организация КАК Организация,
	|	КорректировкаРеализации.Контрагент КАК Контрагент,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаРеализации.Номер,
	|	КорректировкаРеализации.Организация.Префикс КАК Префикс,
	|	КорректировкаРеализации.Отпустил КАК ОтветственныйПредставление,
	|	КорректировкаРеализации.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(КорректировкаРеализации.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА КорректировкаРеализации.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ КорректировкаРеализации.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код,
	|		ЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС,
	|		Всего,
	|		Характеристика,
	|		Содержание,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|	)
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаРеализации_АктОбОказанииУслуг";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаРеализации.ПФ_MXL_Накладная");
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
	СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
	
	Если Шапка.ДатаДокумента < Дата('20110101') Тогда
		
		НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		
	Иначе
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Акт № " + НомерДокумента + " от " + Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	СтруктураЗаполненияСекции = Новый Структура;
	
	ППУслуги	= 0;
	Сумма		= 0;
	СуммаНДС	= 0;
	Всего		= 0;
	Количество	= 0;
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
	
		Если ВыборкаСтрокЗапасы.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга
			И ВыборкаСтрокЗапасы.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
			ИЛИ ВыборкаСтрокЗапасы.Количество = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Очистить();
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		
		ППУслуги = ППУслуги + 1;
		СтруктураЗаполненияСекции.Вставить("НомерСтроки", ППУслуги);
		
		ОписаниеУслуги = ?(ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание),
			ВыборкаСтрокЗапасы.Содержание,
			УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул));
			
		СтруктураЗаполненияСекции.Вставить("Запас", ОписаниеУслуги);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Сумма		= Сумма 	+ ВыборкаСтрокЗапасы.Сумма;
		СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
		Всего		= Всего		+ ВыборкаСтрокЗапасы.Всего;
		Количество	= Количество+ 1;
		
	КонецЦикла;
	
	СтруктураЗаполненияСекции.Очистить();
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	СтруктураЗаполненияСекции.Вставить("Всего", УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма));
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СтруктураЗаполненияСекции.Очистить();
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	Если СуммаНДС = 0 Тогда
		
		СтруктураЗаполненияСекции.Вставить("НДС",		Нстр("ru='Без налога (НДС)'"));
		СтруктураЗаполненияСекции.Вставить("ВсегоНДС",	Нстр("ru='-'"));
		
	Иначе
		
		СтруктураЗаполненияСекции.Вставить("НДС",		?(Шапка.СуммаВключаетНДС, Нстр("ru ='В том числе НДС:'"), Нстр("ru ='Сумма НДС:'")));
		СтруктураЗаполненияСекции.Вставить("ВсегоНДС",	УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС));
		
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Макет.Области.Найти("ПодписьАктаВыполненныхРабот") <> Неопределено Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодписьАктаВыполненныхРабот");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Иначе
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет для формирования документа ""Акт об оказании услуг"". 
			|Штатный механизм печати может работать некоректно.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	КонецЕсли;
	
	СтруктураЗаполненияСекции.Очистить();
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Всего;
	СтруктураЗаполненияСекции.Вставить("ИтоговаяСтрока",  Нстр("ru ='Всего наименований '") + Строка(Количество) + Нстр("ru =', на сумму '") + УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
	СтруктураЗаполненияСекции.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецФункции // СформироватьАктОбОказанииУслуг()

// Процедура формирования печатной формы Накладная, Накладная с услугами
//
Процедура СформироватьНакладную(ТабличныйДокумент, ТекущийДокумент, ИсключаяУслуги)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Дата КАК ДатаДокумента,
	|	КорректировкаРеализации.Организация КАК Организация,
	|	КорректировкаРеализации.Контрагент КАК Контрагент,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаРеализации.Номер,
	|	КорректировкаРеализации.Организация.Префикс КАК Префикс,
	|	КорректировкаРеализации.Отпустил,
	|	КорректировкаРеализации.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(КорректировкаРеализации.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
	|				ТОГДА КорректировкаРеализации.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ КорректировкаРеализации.Запасы.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Код КАК Код,
	|		ЕдиницаИзмерения КАК ЕдиницаХранения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС,
	|		Всего,
	|		Характеристика,
	|		Партия,
	|		Содержание,
	|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|	)
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаРеализации_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаРеализации.ПФ_MXL_Накладная");
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
	СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);

	Если Шапка.ДатаДокумента < Дата('20110101') Тогда
		НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
	Иначе
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
	КонецЕсли;		
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Расходная накладная № "
											+ НомерДокумента
											+ " от "
											+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
											
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ФактическийАдрес");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ФактическийАдрес");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Сумма		= 0;
	СуммаНДС	= 0;
	Всего		= 0;
	Количество	= 0;
	
	Пока ВыборкаСтрокЗапасы.Следующий() Цикл
	
		Если ИсключаяУслуги 
			И (ВыборкаСтрокЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга ИЛИ ВыборкаСтрокЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа)
			ИЛИ ВыборкаСтрокЗапасы.Количество = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
		Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
			
			ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			
		Иначе
			
			ПредставлениеЗапаса = 
				УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
				
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Партия) Тогда
				
				ПредставлениеЗапаса = ПредставлениеЗапаса + "; " + Строка(ВыборкаСтрокЗапасы.Партия);
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.Запас = ПредставлениеЗапаса;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Сумма		= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
		СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
		Всего		= Всего		+ ВыборкаСтрокЗапасы.Всего;
		Количество	= Количество+ 1;
		
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
	Если СуммаНДС = 0 Тогда
		ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
		ОбластьМакета.Параметры.ВсегоНДС = "-";
	Иначе
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
	КонецЕсли; 
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Всего;
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
											+ Строка(Количество)
											+ ", на сумму "
											+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	
	ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	
	ФИООтпускПроизвел = "";
	УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИООтпускПроизвел, Строка(Шапка.Отпустил));
	СтруктураЗаполненияСекции = Новый Структура;
	СтруктураЗаполненияСекции.Вставить("ОтветственныйПредставление", ФИООтпускПроизвел);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры // СформироватьНакладную()

Функция ТекстЗапросаДанныеДляПечатиКорректировочныхСчетовФактур(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("ВалютаРегламентированногоУчета",    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты",         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты",                         НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаНоменклатуры",      НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента",         НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КонстантаВалютаРегламентированногоУчета.Значение КАК ВалютаРеглУчета
	|ПОМЕСТИТЬ КонстантаВалютаРегламентированногоУчета
	|ИЗ
	|	Константа.НациональнаяВалюта КАК КонстантаВалютаРегламентированногоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Подразделение,
	|	Реквизиты.Контрагент,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета <> Реквизиты.ВалютаДокумента
	|				И Реквизиты.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета
	|		ИНАЧЕ Реквизиты.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	Реквизиты.Договор,
	|	Реквизиты.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА КонстантаВалютаРегламентированногоУчета.ВалютаРеглУчета <> Реквизиты.ВалютаДокумента
	|				И Реквизиты.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПересчет,
	|	ВЫБОР
	|		КОГДА Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	ВЫБОР
	|		КОГДА Реквизиты.Курс = 0
	|			ТОГДА 1
	|		ИНАЧЕ Реквизиты.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА Реквизиты.Кратность = 0
	|			ТОГДА 1
	|		ИНАЧЕ Реквизиты.Кратность
	|	КОНЕЦ КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаРеквизиты
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонстантаВалютаРегламентированногоУчета КАК КонстантаВалютаРегламентированногоУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Реквизиты.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК ДатаОснования,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	"""" КАК ЦифровойИндексОбособленногоПодразделения,
	|	Реквизиты.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА &АдресПоставщика <> """"
	|			ТОГДА &АдресПоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресПоставщика,
	|	ВЫБОР
	|		КОГДА &ИННКПППоставщика <> """"
	|			ТОГДА &ИННКПППоставщика
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИННКПППоставщика,
	|	Реквизиты.Организация.ИНН КАК ИННПоставщика,
	|	Реквизиты.Организация КАК ОбособленноеПодразделениеПоставщика,
	|	Реквизиты.Контрагент КАК Покупатель,
	|	Реквизиты.Контрагент.ИНН КАК ИННпокупателя,
	|	Реквизиты.Контрагент КАК ОбособленноеПодразделениеПокупателя,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.Договор.ВалютаРасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.Договор.Представление КАК Основание
	|ИЗ
	|	ВременнаяТаблицаРеквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактура КАК СчетФактураВыданный
	|		ПО Реквизиты.Ссылка = СчетФактураВыданный.ДокументОснование
	|			И (НЕ СчетФактураВыданный.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Ссылка КАК Ссылка,
	|	1 КАК НомерТабЧасти,
	|	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНоменклатуры.Номенклатура КАК Товар,
	|	ТаблицаНоменклатуры.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаНоменклатуры.Номенклатура.Артикул КАК ТоварАртикул,
	|	ТаблицаНоменклатуры.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	НЕОПРЕДЕЛЕНО КАК СтранаПроисхождения,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеСтраны,
	|	НЕОПРЕДЕЛЕНО КАК НомерГТД,
	|	НЕОПРЕДЕЛЕНО КАК ПредставлениеГТД,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЛОЖЬ КАК ЭтоУслуга,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ТаблицаНоменклатуры.КоличествоДоКорректировки
	|		ИНАЧЕ ТаблицаНоменклатуры.КоличествоДоИзменения
	|	КОНЕЦ КАК КоличествоДоИзменения,
	|	ТаблицаНоменклатуры.Количество КАК КоличествоПослеИзменения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ТаблицаНоменклатуры.ЦенаДоКорректировки
	|		ИНАЧЕ ТаблицаНоменклатуры.ЦенаДоИзменения
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Реквизиты.ИспользоватьПересчет
	|			ТОГДА Реквизиты.Курс / Реквизиты.Кратность
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЦенаДоИзменения,
	|	ТаблицаНоменклатуры.Цена * ВЫБОР
	|		КОГДА Реквизиты.ИспользоватьПересчет
	|			ТОГДА Реквизиты.Курс / Реквизиты.Кратность
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЦенаПослеИзменения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|		ИНАЧЕ ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Реквизиты.ИспользоватьПересчет
	|			ТОГДА Реквизиты.Курс / Реквизиты.Кратность
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаНДСДоИзменения,
	|	ТаблицаНоменклатуры.СуммаНДС * ВЫБОР
	|		КОГДА Реквизиты.ИспользоватьПересчет
	|			ТОГДА Реквизиты.Курс / Реквизиты.Кратность
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.СуммаДоКорректировки - ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|					ИНАЧЕ ТаблицаНоменклатуры.СуммаДоКорректировки
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.СуммаВключаетНДС
	|					ТОГДА ТаблицаНоменклатуры.СуммаДоИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|				ИНАЧЕ ТаблицаНоменклатуры.СуммаДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Реквизиты.ИспользоватьПересчет
	|			ТОГДА Реквизиты.Курс / Реквизиты.Кратность
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА Реквизиты.СуммаВключаетНДС
	|			ТОГДА ТаблицаНоменклатуры.Сумма - ТаблицаНоменклатуры.СуммаНДС
	|		ИНАЧЕ ТаблицаНоменклатуры.Сумма
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Реквизиты.ИспользоватьПересчет
	|			ТОГДА Реквизиты.Курс / Реквизиты.Кратность
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА Реквизиты.Исправление
	|			ТОГДА ВЫБОР
	|					КОГДА Реквизиты.СуммаВключаетНДС
	|						ТОГДА ТаблицаНоменклатуры.СуммаДоКорректировки
	|					ИНАЧЕ ТаблицаНоменклатуры.СуммаДоКорректировки + ТаблицаНоменклатуры.СуммаНДСДоКорректировки
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Реквизиты.СуммаВключаетНДС
	|					ТОГДА ТаблицаНоменклатуры.СуммаДоИзменения
	|				ИНАЧЕ ТаблицаНоменклатуры.СуммаДоИзменения + ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Реквизиты.ИспользоватьПересчет
	|			ТОГДА Реквизиты.Курс / Реквизиты.Кратность
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА Реквизиты.СуммаВключаетНДС
	|			ТОГДА ТаблицаНоменклатуры.Сумма
	|		ИНАЧЕ ТаблицаНоменклатуры.Сумма + ТаблицаНоменклатуры.СуммаНДС
	|	КОНЕЦ * ВЫБОР
	|		КОГДА Реквизиты.ИспользоватьПересчет
	|			ТОГДА Реквизиты.Курс / Реквизиты.Кратность
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Документ.КорректировкаРеализации.Запасы КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаРеквизиты КАК Реквизиты
	|		ПО (Реквизиты.Ссылка = ТаблицаНоменклатуры.Ссылка)
	|ГДЕ
	|	ТаблицаНоменклатуры.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.НомерТабЧасти КАК НомерТабЧасти,
	|	ТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНоменклатуры.Товар КАК Товар,
	|	ТаблицаНоменклатуры.ТоварКод КАК ТоварКод,
	|	ТаблицаНоменклатуры.ТоварАртикул КАК ТоварАртикул,
	|	ТаблицаНоменклатуры.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаНоменклатуры.ПредставлениеСтраны КАК ПредставлениеСтраны,
	|	ТаблицаНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаНоменклатуры.ПредставлениеГТД КАК ПредставлениеГТД,
	|	ТаблицаНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатуры.КоличествоДоИзменения КАК КоличествоДоИзменения,
	|	ТаблицаНоменклатуры.КоличествоПослеИзменения КАК КоличествоПослеИзменения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.КоличествоДоИзменения = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения / ТаблицаНоменклатуры.КоличествоДоИзменения
	|	КОНЕЦ КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.КоличествоПослеИзменения = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения / ТаблицаНоменклатуры.КоличествоПослеИзменения
	|	КОНЕЦ КАК ЦенаПослеИзменения,
	|	ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения КАК СтоимостьБезНДСДоИзменения,
	|	ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения КАК СтоимостьБезНДСПослеИзменения,
	|	ТаблицаНоменклатуры.СуммаНДСПослеИзменения КАК СуммаНДСПослеИзменения,
	|	ТаблицаНоменклатуры.СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|	ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения КАК СтоимостьСНДСДоИзменения,
	|	ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения > ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения - ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения > ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения - ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения > ТаблицаНоменклатуры.СуммаНДСПослеИзменения
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДСДоИзменения - ТаблицаНоменклатуры.СуммаНДСПослеИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СуммаНДСПослеИзменения > ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|			ТОГДА ТаблицаНоменклатуры.СуммаНДСПослеИзменения - ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения > ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения - ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения > ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения
	|			ТОГДА ТаблицаНоменклатуры.СтоимостьСНДСПослеИзменения - ТаблицаНоменклатуры.СтоимостьСНДСДоИзменения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаНоменклатуры.ЭтоУслуга КАК ЭтоУслуга,
	|	ТаблицаНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	(ТаблицаНоменклатуры.КоличествоПослеИзменения <> ТаблицаНоменклатуры.КоличествоДоИзменения
	|			ИЛИ ТаблицаНоменклатуры.СтоимостьБезНДСПослеИзменения <> ТаблицаНоменклатуры.СтоимостьБезНДСДоИзменения
	|			ИЛИ ТаблицаНоменклатуры.СуммаНДСПослеИзменения <> ТаблицаНоменклатуры.СуммаНДСДоИзменения
	|			ИЛИ ТаблицаНоменклатуры.ЦенаПослеИзменения <> ТаблицаНоменклатуры.ЦенаДоИзменения)";
	
	Возврат ТекстЗапроса + УправлениеНебольшойФирмойСервер.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПечатьУниверсальныхКорректировочныхДокументов() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.СчетФактура.ПустаяСсылка) КАК СчетФактура,
	|	КорректировкаРеализации.Дата КАК Дата,
	|	КорректировкаРеализации.Номер КАК Номер,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаФактуры,
	|	КорректировкаРеализации.Руководитель,
	|	КорректировкаРеализации.ГлавныйБухгалтер,
	|	ИСТИНА КАК СчетФактураБезНДС,
	|	ИСТИНА КАК Исправление,
	|	""--"" КАК НомерИсправления,
	|	КорректировкаРеализации.Дата КАК ДатаИсправления,
	|	""--"" КАК НомерИсправленияКорректировочного,
	|	""--"" КАК ДатаИсправленияКорректировочного,
	|	ИСТИНА КАК УдалитьПрефиксыИзНомера,
	|	ИСТИНА КАК ЭтоСчетФактураВыданный,
	|	ИСТИНА КАК ВыводитьСуммуБезНДС,
	|	КорректировкаРеализации.Ссылка КАК ДокументОснование,
	|	1 КАК НомерСтроки,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.Договор КАК ДоговорКонтрагента,
	|	"""" КАК КППКонтрагента,
	|	КорректировкаРеализации.Дата КАК ДатаСведений
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка В(&МассивОбъектов)
	|	И КорректировкаРеализации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)";
	
	Возврат ТекстЗапроса + УправлениеНебольшойФирмойСервер.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// Сформировать печатные формы объектов
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РасходнаяНакладная";

	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ИмяМакета = "Накладная" ИЛИ ИмяМакета = "НакладнаяСУслугами" Тогда
			
			ИсключаяУслуги = (ИмяМакета = "Накладная");
			СформироватьНакладную(ТабличныйДокумент, ТекущийДокумент, ИсключаяУслуги);
			
		ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" Тогда
			
			СформироватьАктОбОказанииУслуг(ТабличныйДокумент, ТекущийДокумент, Ошибки)
			
		ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" Тогда
			
			СформироватьУниверсальныйПередаточныйДокумент(ТабличныйДокумент, ТекущийДокумент);
			
		ИначеЕсли ИмяМакета = "ТОРГ12" ИЛИ ИмяМакета = "ТОРГ12СУслугами" Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КорректировкаРеализации.Дата КАК ДатаДокумента,
			|	КорректировкаРеализации.Номер КАК Номер,
			|	КорректировкаРеализации.Организация КАК Руководители,
			|	КорректировкаРеализации.Организация.Префикс КАК Префикс,
			|	КорректировкаРеализации.Организация КАК Организация,
			|	КорректировкаРеализации.БанковскийСчет КАК БанковскийСчет,
			|	КорректировкаРеализации.Контрагент КАК Контрагент,
			|	КорректировкаРеализации.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
			|	КорректировкаРеализации.Организация КАК Поставщик,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализации.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА КорректировкаРеализации.Контрагент
			|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
			|	КОНЕЦ КАК Грузополучатель,
			|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализации.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|			ТОГДА КорректировкаРеализации.Организация
			|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
			|	КОНЕЦ КАК Грузоотправитель,
			|	КорректировкаРеализации.Контрагент КАК Плательщик,
			|	КорректировкаРеализации.Договор.Представление КАК Основание,
			|	КорректировкаРеализации.ВалютаДокумента,
			|	КорректировкаРеализации.СуммаВключаетНДС,
			|	КорректировкаРеализации.НДСВключатьВСтоимость,
			|	КорректировкаРеализации.Курс,
			|	КорректировкаРеализации.Кратность,
			|	КорректировкаРеализации.ОснованиеПечати КАК ОснованиеПечати,
			|	КорректировкаРеализации.Руководитель КАК Руководитель,
			|	КорректировкаРеализации.РуководительДолжность КАК РуководительДолжность,
			|	КорректировкаРеализации.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
			|	КорректировкаРеализации.Отпустил КАК Отпустил,
			|	КорректировкаРеализации.ОтпустилДолжность КАК ОтпустилДолжность,
			|	КорректировкаРеализации.ДоверенностьВыдана,
			|	КорректировкаРеализации.ДоверенностьДата,
			|	КорректировкаРеализации.ДоверенностьЛицо,
			|	КорректировкаРеализации.ДоверенностьНомер
			|ИЗ
			|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|ГДЕ
			|	КорректировкаРеализации.Ссылка = &ТекущийДокумент";
			Шапка = Запрос.Выполнить().Выбрать();
			
			Шапка.Следующий();
			
			ИспользоватьПересчет = (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
			|	ВложенныйЗапрос.Содержание КАК Содержание,
			|	ВЫБОР
			|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
			|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
			|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
			|	КОНЕЦ КАК ЗапасНаименование,
			|	ВложенныйЗапрос.Характеристика,
			|	ВложенныйЗапрос.Номенклатура.Код КАК ЗапасКод,
			|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
			|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Наименование КАК БазоваяЕдиницаНаименование,
			|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Код КАК БазоваяЕдиницаКодПоОКЕИ,
			|	ВложенныйЗапрос.ЕдиницаИзмеренияДокумент КАК ЕдиницаИзмеренияДокумент,
			|	ВложенныйЗапрос.ЕдиницаИзмеренияДокумент КАК ВидУпаковки,
			|	0 КАК КоличествоВОдномМесте,
			|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
			|	ВложенныйЗапрос.Цена КАК Цена,
			|	ВложенныйЗапрос.Количество КАК Количество,
			|	0 КАК КоличествоМест,
			|	ВЫБОР
			|		КОГДА &ИспользоватьПересчет
			|			ТОГДА ВЫБОР
			|					КОГДА ВложенныйЗапрос.ВсегоРуб ЕСТЬ NULL
			|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма * &Курс / &Кратность КАК ЧИСЛО(15, 2))
			|					КОГДА ВложенныйЗапрос.СуммаВключаетНДС
			|						ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРуб КАК ЧИСЛО(15, 2))
			|					ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.ВсегоРуб - ВложенныйЗапрос.СуммаНДСРуб КАК ЧИСЛО(15, 2))
			|				КОНЕЦ
			|		ИНАЧЕ ВложенныйЗапрос.Сумма
			|	КОНЕЦ КАК Сумма,
			|	ВЫБОР
			|		КОГДА &ИспользоватьПересчет
			|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.СуммаНДСРуб, ВЫРАЗИТЬ(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
			|		ИНАЧЕ ВложенныйЗапрос.СуммаНДС
			|	КОНЕЦ КАК СуммаНДС,
			|	ВЫБОР
			|		КОГДА &ИспользоватьПересчет
			|			ТОГДА ЕСТЬNULL(ВложенныйЗапрос.ВсегоРуб, ВЫРАЗИТЬ(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК ЧИСЛО(15, 2)))
			|		ИНАЧЕ ВложенныйЗапрос.Всего
			|	КОНЕЦ КАК Всего,
			|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
			|	1 КАК ID
			|ИЗ
			|	(ВЫБРАТЬ
			|		КорректировкаРеализацииЗапасы.Номенклатура КАК Номенклатура,
			|		КорректировкаРеализацииЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДляПечати,
			|		КорректировкаРеализацииЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
			|		КорректировкаРеализацииЗапасы.СтавкаНДС КАК СтавкаНДС,
			|		ВЫБОР
			|			КОГДА &ИспользоватьПересчет
			|				ТОГДА ВЫБОР
			|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
			|							ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
			|						КОГДА КорректировкаРеализацииЗапасы.Количество = 0
			|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
			|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / КорректировкаРеализацииЗапасы.Количество КАК ЧИСЛО(15, 2))
			|					КОНЕЦ
			|			ИНАЧЕ КорректировкаРеализацииЗапасы.Цена
			|		КОНЕЦ КАК Цена,
			|		СУММА(КорректировкаРеализацииЗапасы.Количество) КАК Количество,
			|		СУММА(КорректировкаРеализацииЗапасы.Сумма) КАК Сумма,
			|		СУММА(КорректировкаРеализацииЗапасы.СуммаНДС) КАК СуммаНДС,
			|		СУММА(КорректировкаРеализацииЗапасы.Всего) КАК Всего,
			|		МИНИМУМ(КорректировкаРеализацииЗапасы.НомерСтроки) КАК НомерСтроки,
			|		КорректировкаРеализацииЗапасы.Характеристика КАК Характеристика,
			|		СУММА(РублевыеСуммыДокументовВВалюте.Всего) КАК ВсегоРуб,
			|		СУММА(РублевыеСуммыДокументовВВалюте.НДС) КАК СуммаНДСРуб,
			|		ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
			|		КорректировкаРеализацииЗапасы.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС
			|	ИЗ
			|		Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммыДокументовВВалюте
			|			ПО КорректировкаРеализацииЗапасы.Ссылка = РублевыеСуммыДокументовВВалюте.Регистратор
			|				И КорректировкаРеализацииЗапасы.НомерСтроки = РублевыеСуммыДокументовВВалюте.НомерСтрокиДокумента
			|	ГДЕ
			|		КорректировкаРеализацииЗапасы.Ссылка = &ТекущийДокумент
			|	
			|	СГРУППИРОВАТЬ ПО
			|		КорректировкаРеализацииЗапасы.Номенклатура,
			|		КорректировкаРеализацииЗапасы.Номенклатура.ЕдиницаИзмерения,
			|		КорректировкаРеализацииЗапасы.ЕдиницаИзмерения,
			|		КорректировкаРеализацииЗапасы.СтавкаНДС,
			|		КорректировкаРеализацииЗапасы.Цена,
			|		КорректировкаРеализацииЗапасы.Характеристика,
			|		ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Содержание КАК СТРОКА(1000)),
			|		ВЫБОР
			|			КОГДА &ИспользоватьПересчет
			|				ТОГДА ВЫБОР
			|						КОГДА РублевыеСуммыДокументовВВалюте.Всего ЕСТЬ NULL
			|							ТОГДА ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Цена * &Курс / &Кратность КАК ЧИСЛО(15, 2))
			|						КОГДА КорректировкаРеализацииЗапасы.Количество = 0
			|							ТОГДА РублевыеСуммыДокументовВВалюте.Всего
			|						ИНАЧЕ ВЫРАЗИТЬ(РублевыеСуммыДокументовВВалюте.Всего / КорректировкаРеализацииЗапасы.Количество КАК ЧИСЛО(15, 2))
			|					КОНЕЦ
			|			ИНАЧЕ КорректировкаРеализацииЗапасы.Цена
			|		КОНЕЦ,
			|		КорректировкаРеализацииЗапасы.Ссылка.СуммаВключаетНДС) КАК ВложенныйЗапрос
			|ГДЕ
			|	&УсловиеФильтраУслуг
			|
			|УПОРЯДОЧИТЬ ПО
			|	ID,
			|	НомерСтроки";
			
			Запрос.УстановитьПараметр("ИспользоватьПересчет", ИспользоватьПересчет);
			Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
			Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФильтраУслуг", 
				?(ИмяМакета = "ТОРГ12", "НЕ ВложенныйЗапрос.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))", "ИСТИНА"));
			
			ЗапросЗапасы = Запрос.Выполнить().Выгрузить();
			
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаРеализации_ТОРГ12";
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаРеализации.ПФ_MXL_ТОРГ12");
			
			ОбластьМакетаШапка				= Макет.ПолучитьОбласть("Шапка");
			ОбластьМакетаЗаголовокТаблицы	= Макет.ПолучитьОбласть("ЗаголовокТаб");
			ОбластьМакетаСтрока				= Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаИтогоПоСтранице	= Макет.ПолучитьОбласть("ИтогоПоСтранице");
			ОбластьМакетаВсего				= Макет.ПолучитьОбласть("Всего");
			ОбластьМакетаПодвал				= Макет.ПолучитьОбласть("Подвал");
			
			// Выводим общие реквизиты шапки
			
			СведенияОПоставщике			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация,		Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
			СведенияОГрузоотправителе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузоотправитель,Шапка.ДатаДокумента, ,);
			СведенияОПокупателе			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент,		Шапка.ДатаДокумента, , Шапка.БанковскийСчетКонтрагента);
			СведенияОГрузополучателе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузополучатель,	Шапка.ДатаДокумента, ,);
			
			ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
			
			Если Шапка.ДатаДокумента < Дата('20110101') Тогда
				НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
			Иначе
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.НомерДокумента = НомерДокумента;
			ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
			
			Если Шапка.Организация = Шапка.Грузоотправитель Тогда
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет");
			Иначе
				ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет");
			КонецЕсли;

			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика      = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике);
			ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика     = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе);

			// Выводим всевозможные коды
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправителе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП = "";
			ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО  = СведенияОПоставщике.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО = СведенияОПокупателе.КодПоОКПО;
			ОбластьМакетаШапка.Параметры.ОснованиеНомер   = "";
			ОбластьМакетаШапка.Параметры.ОснованиеДата    = "";
			ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
			ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
			ОбластьМакетаШапка.Параметры.Основание = Шапка.ОснованиеПечати;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);

			// Инициализация счетчика страниц
			НомерСтраницы = 1;

			// Инициализация итогов по странице
			ИтогоМестНаСтранице       = 0;
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаНаСтранице      = 0;
			ИтогоНДСНаСтранице        = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;

			// Инициализация итогов по документу
			ИтогоМест       = 0;
			ИтогоКоличество = 0;
			ИтогоСуммаСНДС  = 0;
			ИтогоСумма      = 0;
			ИтогоНДС        = 0;
			
			// Инициализация счетчика строк
			НомерСтроки     = 0;
			КоличествоСтрок = ЗапросЗапасы.Количество();
			
			// Выводим заголовок многострочной части
			ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			// Выводим многострочную часть докмента
			Для Каждого ВыборкаСтрок Из ЗапросЗапасы Цикл
				
				Если ВыборкаСтрок.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;

				НомерСтроки = НомерСтроки + 1;

				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
				
				ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
					
					ОбластьМакетаСтрока.Параметры.ВидУпаковки 			= "";
					ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте	= "";
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаСтрок.Содержание) Тогда
					ОбластьМакетаСтрока.Параметры.ЗапасНаименование = ВыборкаСтрок.Содержание;
				Иначе
					ОбластьМакетаСтрока.Параметры.ЗапасНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрок.ЗапасНаименование, 
																		ВыборкаСтрок.Характеристика, ВыборкаСтрок.Артикул);
				КонецЕсли;
				
				СуммаСНДС = ВыборкаСтрок.Всего;
				
				КоличествоМест	= ВыборкаСтрок.КоличествоМест;
				
				Коэффициент = 1;
				Если ТипЗнч(ВыборкаСтрок.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					
					Коэффициент = ВыборкаСтрок.ЕдиницаИзмеренияДокумент.Коэффициент;
					
				КонецЕсли;
				
				Количество		= ВыборкаСтрок.Количество * Коэффициент;
				ОбластьМакетаСтрока.Параметры.Количество = Количество;
				
				СуммаНДС		= ВыборкаСтрок.СуммаНДС;
				СуммаБезНДС		= ВыборкаСтрок.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрок.СуммаНДС, 0);
				
				ОбластьМакетаСтрока.Параметры.СуммаСНДС   = СуммаСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС    = СуммаНДС;
				ОбластьМакетаСтрока.Параметры.СтавкаНДС   = ВыборкаСтрок.СтавкаНДС;
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
				ОбластьМакетаСтрока.Параметры.Цена        = СуммаБезНДС / ?(Количество = 0, 1, Количество);
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы);// если первая строка, то должен
				КонецЕсли;													// помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
				Если НомерСтроки = КоличествоСтрок Тогда			// если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);	// помещаться и подвал документа
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
				КонецЕсли;

				Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
					
					// Выводим итоги по странице
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
					ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Очистим итоги по странице
					ИтогоМестНаСтранице       = 0;
					ИтогоКоличествоНаСтранице = 0;
					ИтогоСуммаНаСтранице      = 0;
					ИтогоНДСНаСтранице        = 0;
					ИтогоСуммаСНДСНаСтранице  = 0;
					
					// Выведем заголовок таблицы
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
					
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);

				// Увеличим итоги по странице
				ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
				ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
				ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
				ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
				ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

				// Увеличим итоги по документу
				ИтогоМест       = ИтогоМест       + КоличествоМест;
				ИтогоКоличество = ИтогоКоличество + Количество;
				ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
				ИтогоНДС        = ИтогоНДС        + СуммаНДС;
				ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

			КонецЦикла;

			// Выводим итоги по странице
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
			ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

			ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
			
			// Выводим итоги по документу в целом
			ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
			ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
			ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
			ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
			ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаВсего);
			
			// Выводим подвал документа
			ЗначенияПараметров = Новый Структура;
			
			ЗначенияПараметров.Вставить("ДоверенностьНомер", Шапка.ДоверенностьНомер);
			ЗначенияПараметров.Вставить("ДоверенностьДата", Шапка.ДоверенностьДата);
			ЗначенияПараметров.Вставить("ДоверенностьВыдана", Шапка.ДоверенностьВыдана);
			ЗначенияПараметров.Вставить("ДоверенностьЧерезКого", Шапка.ДоверенностьЛицо);
			
			ФИОРуководителя = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОРуководителя, Строка(Шапка.Руководитель));
			ЗначенияПараметров.Вставить("ФИОРуководителя",		ФИОРуководителя);
			ЗначенияПараметров.Вставить("ДолжностьРуководителя", Шапка.РуководительДолжность);
			
			ФИОГлавногоБухгалтера = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОГлавногоБухгалтера, Строка(Шапка.ГлавныйБухгалтер));
			ЗначенияПараметров.Вставить("ФИОГлавБухгалтера",	ФИОГлавногоБухгалтера);
			
			ФИОКладовщика = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОКладовщика, Строка(Шапка.Отпустил));
			ЗначенияПараметров.Вставить("ФИОКладовщика",		ФИОКладовщика);
			ЗначенияПараметров.Вставить("ДолжностьКладовщика",	Шапка.ОтпустилДолжность);
			
			ЗначенияПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
			ЗначенияПараметров.Вставить("ВсегоМестПрописью",						?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0"))); 
			ЗначенияПараметров.Вставить("СуммаПрописью",							РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.НациональнаяВалюта.Получить()));
			
			ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
			ДлинаСтроки			= СтрДлина(ПолнаяДатаДокумента);
			ПервыйРазделитель	= Найти(ПолнаяДатаДокумента," ");
			ВторойРазделитель	= Найти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
			
			ЗначенияПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """");
			ЗначенияПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
			ЗначенияПараметров.Вставить("ДатаДокументаГод",	 Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
			
			ОбластьМакетаПодвал.Параметры.Заполнить(ЗначенияПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
			
		ИначеЕсли ИмяМакета = "М15" Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КорректировкаРеализации.Дата КАК ДатаДокумента,
			|	КорректировкаРеализации.Номер КАК Номер,
			|	КорректировкаРеализации.Организация КАК Руководители,
			|	КорректировкаРеализации.Организация КАК Организация,
			|	КорректировкаРеализации.БанковскийСчет КАК БанковскийСчет,
			|	КорректировкаРеализации.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
			|	КорректировкаРеализации.Организация.Префикс КАК Префикс,
			|	КорректировкаРеализации.СтруктурнаяЕдиница КАК СкладНаименование,
			|	КорректировкаРеализации.Контрагент КАК Контрагент,
			|	КорректировкаРеализации.Договор.Представление КАК Основание,
			|	КорректировкаРеализации.ВалютаДокумента,
			|	КорректировкаРеализации.СуммаВключаетНДС,
			|	КорректировкаРеализации.СтруктурнаяЕдиница.МОЛ КАК МОЛ,
			|	КорректировкаРеализации.Ответственный.Физлицо КАК Ответственный,
			|	КорректировкаРеализации.НДСВключатьВСтоимость,
			|	КорректировкаРеализации.Курс,
			|	КорректировкаРеализации.Кратность,
			|	КорректировкаРеализации.Руководитель КАК Руководитель,
			|	КорректировкаРеализации.РуководительДолжность КАК РуководительДолжность,
			|	КорректировкаРеализации.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
			|	КорректировкаРеализации.Отпустил КАК Отпустил,
			|	КорректировкаРеализации.ОтпустилДолжность КАК ОтпустилДолжность
			|ИЗ
			|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|ГДЕ
			|	КорректировкаРеализации.Ссылка = &ТекущийДокумент";
			Шапка = Запрос.Выполнить().Выбрать();

			Шапка.Следующий();

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			
			ИспользоватьПересчет = (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КорректировкаРеализацииЗапасы.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА (ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
			|			ТОГДА КорректировкаРеализацииЗапасы.Номенклатура.Наименование
			|		ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
			|	КОНЕЦ КАК ЗапасНаименование,
			|	КорректировкаРеализацииЗапасы.Характеристика,
			|	ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
			|	КорректировкаРеализацииЗапасы.Номенклатура.Код КАК ЗапасКод,
			|	КорректировкаРеализацииЗапасы.Номенклатура.Артикул КАК Артикул,
			|	КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
			|	КорректировкаРеализацииЗапасы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
			|	КорректировкаРеализацииЗапасы.СтавкаНДС КАК СтавкаНДС,
			|	МАКСИМУМ(&Цена_Параметр) КАК Цена,
			|	СУММА(КорректировкаРеализацииЗапасы.Количество) КАК Количество,
			|	СУММА(&Сумма_Параметр) КАК Сумма,
			|	СУММА(&СуммаНДС_Параметр) КАК СуммаНДС,
			|	СУММА(&Всего_Параметр) КАК Всего,
			|	МИНИМУМ(КорректировкаРеализацииЗапасы.НомерСтроки) КАК НомерСтроки
			|ИЗ
			|	Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
			|ГДЕ
			|	КорректировкаРеализацииЗапасы.Ссылка = &ТекущийДокумент
			|	И НЕ КорректировкаРеализацииЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализацииЗапасы.Номенклатура,
			|	КорректировкаРеализацииЗапасы.ЕдиницаИзмерения,
			|	КорректировкаРеализацииЗапасы.СтавкаНДС,
			|	КорректировкаРеализацииЗапасы.Характеристика,
			|	ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Содержание КАК СТРОКА(1000)),
			|	КорректировкаРеализацииЗапасы.Номенклатура.Код,
			|	КорректировкаРеализацииЗапасы.Номенклатура.Артикул,
			|	КорректировкаРеализацииЗапасы.ЕдиницаИзмерения.Наименование,
			|	КорректировкаРеализацииЗапасы.Номенклатура.ЕдиницаИзмерения.Код,
			|	ВЫБОР
			|		КОГДА (ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
			|			ТОГДА КорректировкаРеализацииЗапасы.Номенклатура.Наименование
			|		ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
			|	КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
			Если ИспользоватьПересчет Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"Выразить(КорректировкаРеализацииЗапасы.Цена * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"Выразить(КорректировкаРеализацииЗапасы.Сумма * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"Выразить(КорректировкаРеализацииЗапасы.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"Выразить(КорректировкаРеализацииЗапасы.Всего * &Курс / &Кратность КАК Число(15,2))");
				
				Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
				Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
				
			Иначе
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"КорректировкаРеализацииЗапасы.Цена");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"КорректировкаРеализацииЗапасы.Сумма");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"КорректировкаРеализацииЗапасы.СуммаНДС");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"КорректировкаРеализацииЗапасы.Всего");
				
			КонецЕсли;
			
			ВыборкаСтрокЗапасы = Запрос.Выполнить().Выбрать();
			
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КорректировкаРеализации_М15";

			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.КорректировкаРеализации.ПФ_MXL_М15");
			
			ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
			
			СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
			СведенияОГрузополучателе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, , Шапка.БанковскийСчетКонтрагента);
			
			ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
			
			Если Шапка.ДатаДокумента < Дата('20110101') Тогда
				НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
			Иначе
				НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
			КонецЕсли;		
			
			ОбластьМакетаШапка.Параметры.НомерДокумента = НомерДокумента;
			ОбластьМакетаШапка.Параметры.ДатаДокумента = Шапка.ДатаДокумента;
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации);
			ОбластьМакетаШапка.Параметры.КонтрагентНаименование = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,");
			ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
			
			// Выводим заголовок таблицы
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			НомерСтроки = 0;
			КоличествоСтрок = ВыборкаСтрокЗапасы.Количество();
			
			// Инициализация итогов в документе
			ИтогоСуммаБезНДС = 0;
			ИтогоСуммаНДС = 0;
			ИтогоВсегоСНДС = 0;
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть докмента
			Пока ВыборкаСтрокЗапасы.Следующий() Цикл
				
				Если ВыборкаСтрокЗапасы.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				// Проверим вывод
				СтрокаСПодвалом = Новый Массив;
				Если НомерСтроки = 1 Тогда
					СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
				КонецЕсли;                                                   // помещаться заголовок
				СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
				Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
					СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал); // помещаться и подвал документа
				КонецЕсли;

				Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
					
					// Выведем заголовок таблицы
					НомерСтраницы	= НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				
				Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
					ОбластьМакетаСтрока.Параметры.ЗапасНаименование = ВыборкаСтрокЗапасы.Содержание;
				Иначе
					ОбластьМакетаСтрока.Параметры.ЗапасНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.ЗапасНаименование, 
																		ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
				КонецЕсли;

				СуммаСНДС	= ВыборкаСтрокЗапасы.Всего;
				СуммаНДС	= ВыборкаСтрокЗапасы.СуммаНДС;
				СуммаБезНДС = ВыборкаСтрокЗапасы.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокЗапасы.СуммаНДС, 0);
				
				Количество = ВыборкаСтрокЗапасы.Количество;
				Цена = СуммаБезНДС / ?(Количество = 0, 1, Количество);
				
				ОбластьМакетаСтрока.Параметры.Количество = Количество;
				ОбластьМакетаСтрока.Параметры.СуммаСНДС = СуммаСНДС;
				ОбластьМакетаСтрока.Параметры.СуммаБезНДС = СуммаБезНДС;
				ОбластьМакетаСтрока.Параметры.СуммаНДС = СуммаНДС;
				ОбластьМакетаСтрока.Параметры.Цена = Цена;
				
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
				ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
				ИтогоВсегоСНДС = ИтогоВсегоСНДС + СуммаСНДС;
				
			КонецЦикла;
			
			// Выводим подвал документа
			ОбластьМакетаПодвал.Параметры.Заполнить(Шапка);
			
			ЗначенияПараметров = Новый Структура;
			
			ФИОРуководителя = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОРуководителя, Строка(Шапка.Руководитель));
			ЗначенияПараметров.Вставить("ФИОРуководителя",		ФИОРуководителя);
			ЗначенияПараметров.Вставить("ДолжностьРуководителя", Шапка.РуководительДолжность);
			
			ФИОГлавногоБухгалтера = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОГлавногоБухгалтера, Строка(Шапка.ГлавныйБухгалтер));
			ЗначенияПараметров.Вставить("ФИОГлавБухгалтера",	ФИОГлавногоБухгалтера);
			
			ФИОКладовщика = "";
			УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОКладовщика, Строка(Шапка.Отпустил));
			ЗначенияПараметров.Вставить("ФИОКладовщика",		ФИОКладовщика);
			ЗначенияПараметров.Вставить("ДолжностьКладовщика",	Шапка.ОтпустилДолжность);
			
			ЗначенияПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
			ЗначенияПараметров.Вставить("СуммаПрописью",							РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоВсегоСНДС, Константы.НациональнаяВалюта.Получить()));
			ЗначенияПараметров.Вставить("ИтогНДС",									ИтогоВсегоСНДС - ИтогоСуммаБезНДС); 
			
			ОбластьМакетаПодвал.Параметры.Заполнить(ЗначенияПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
			
			// Зададим параметры макета
			ТабличныйДокумент.ПолеСверху = 0;
			ТабличныйДокумент.ПолеСлева = 0;
			ТабличныйДокумент.ПолеСнизу = 0;
			ТабличныйДокумент.ПолеСправа = 0;
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Перем Ошибки;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Расходная накладная", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Накладная"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяСУслугами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяСУслугами", "Расходная накладная (с услугами)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "НакладнаяСУслугами"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", "ТОРГ12 (Товарная накладная)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТОРГ12"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12СУслугами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12СУслугами", "ТОРГ12 (Товарная накладная с услугами)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТОРГ12СУслугами"));

	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "УниверсальныйПередаточныйДокумент"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслуг", "Акт об оказании услуг", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктОбОказанииУслуг"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15", "М15 (Накладная на отпуск материалов)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "М15"));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН", "1-Т (Товарно-транспортная накладная)", Обработки.ПечатьТТН.ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура") Тогда
		
		МассивСчетФактур = Новый Массив;
		Для каждого ОбъектПечати Из МассивОбъектов Цикл
			
			СтруктураДанных = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ОбъектПечати, Ложь);
			Если СтруктураДанных =  Неопределено Тогда
				
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура", "Счет-фактура", Новый ТабличныйДокумент);
				
				ТекстСообщения = Нстр("ru = '__________________
											|Документ %1.
											|Счет-фактура не сформирована.'");
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектПечати);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
				
			Иначе
				
				МассивСчетФактур.Добавить(СтруктураДанных.Ссылка);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСчетФактур.Количество() > 0 Тогда
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура", "Счет-фактура", Документы.СчетФактура.ПечатнаяФормаКорректировочныхСчетовФактур(МассивСчетФактур, ОбъектыПечати, Ложь));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ЗначениеИдентификатора = "АктОбОказанииУслуг,ТОРГ12,ТОРГ12СУслугами,М15,ТТН,СчетФактура,Накладная,НакладнаяСУслугами";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = ЗначениеИдентификатора;
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ12 (Товарная накладная)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12СУслугами";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ12 (Товарная накладная с услугами)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "М15";
	КомандаПечати.Представление = НСтр("ru = 'М15 (Накладная на отпуск материалов)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 14;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТТН";
	КомандаПечати.Представление = НСтр("ru = '1-Т (Товарно-транспортная накладная)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 17;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьУПД";
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 23;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьУКД";
	КомандаПечати.Идентификатор = "УниверсальныйКорректировочныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный корректировочный документ'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 24;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетФактура";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура'");
	КомандаПечати.ФункциональныеОпции = "ПередачаТоваровНаКомиссию,ПриемТоваровНаКомиссию,ИспользуетсяОСНО,ИспользоватьСчетаФактурыИсходящие,УчетГТД";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 26;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 29;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяСУслугами";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная (с услугами)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 32;
	
КонецПроцедуры

Процедура СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Ссылка.Дата КАК Период
	|	,&Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаИзмененияЗапасов КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяССылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Ссылка.Дата
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения";
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли