
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьПодчиненнуюСчетФактуру;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.ОтражатьВУчете  = Истина;
		
		ПодготовитьФормуНаСервере();
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			// ищем исходный документ, или документ с типом корректировки "По согласованию сторон"
			ДокументСсылка = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(Объект.ДокументОснование, Ложь);
			// ищем к нему наиболее поздний документ с типом корректировки "Исправление в первичных документах"
			ДокументОснование = Документы.КорректировкаРеализации.ПолучитьПоследнийКорректирующийДокумент(Объект.Ссылка, ДокументСсылка);
			
			ДатаТекущегоДокументаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Дата");
			Если Объект.ДокументОснование <> ДокументОснование И ДатаТекущегоДокументаРеализации < ДокументОснование.Дата Тогда
				ПоследнийДокументИсправления = ДокументОснование;
			КонецЕсли;
			
			Если Объект.Договор.ВалютаРасчетов <> Константы.НациональнаяВалюта.Получить()
				И Объект.Договор.РасчетыВУсловныхЕдиницах
				И Объект.Предоплата.Количество() > 0 Тогда
				
				ВыдатьСообщениеОЗачетеАвансовДляДоговоровВУЕ = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ДополнительноеПолеПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЕстьВДокументеРеализации", "ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	// Конец ПодборНоменклатурыВДокументах
	
	// ЭДО
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыЭДОПриСоздании);
	// Конец ЭДО
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсисте.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ПоследнийДокументИсправления) Тогда
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
								|Использовать последнюю введенную корректировку?'");
		Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююКорректировкуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Если ВыдатьСообщениеОЗачетеАвансовДляДоговоровВУЕ Тогда
		// Поведение будет реализовано в будущих версиях.
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для корректировочных документов в валюте по договору в у.е. распределение авансов по курсу авансов не поддерживается. Корректируемый документ должен быть оформлен в рублях.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактура.Форма.ФормаДокумента" Тогда
		
		СчетФактураТекст = ВыбранноеЗначение;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПечатьТТН.Форма.ДанныеПечати" Тогда
		
		Для каждого ЗначенияРеквизита Из ВыбранноеЗначение Цикл
			
			Если ЗначенияРеквизита.Ключ = "БанковскийСчетОрганизации" Тогда
				
				Объект.БанковскийСчет = ЗначенияРеквизита.Значение;
				
			Иначе
				
				Объект[ЗначенияРеквизита.Ключ] = ЗначенияРеквизита.Значение;
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		СчетФактураТекст = Параметр.Представление;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(Параметр.Представление);
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументКорректировкаРасходнаяНакладнаяПроведение");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбновитьПодчиненнуюСчетФактуру = Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = ПредопределенноеЗначение("Перечисление.ДаНет.Да")
			И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Обработчик механизма "Свойства"
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументРасходнаяНакладнаяПослеЗаписиНаСервере");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполненЗаказ = Ложь;
	ЗаполненЗаказВозврат = Ложь;
	Для каждого СтрокаТЧ Из Объект.Запасы Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Заказ) Тогда
			Если ТипЗнч(СтрокаТЧ.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ЗаполненЗаказ = Истина;
			Иначе
				ЗаполненЗаказВозврат = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ЗаполненЗаказ Тогда
		Оповестить("Запись_РасходнаяНакладная", Объект.Ссылка);
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если НЕ СчетФактураТекст = ""
		И ?(НЕ ОбновитьПодчиненнуюСчетФактуру = Неопределено, ОбновитьПодчиненнуюСчетФактуру, Ложь) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОбИзмененииПодчиненнойСчетФактурыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В документе были произведены изменения. Требуется ли повторно заполнить подчиненный Счет-фактуру?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.БанковскийСчет = "";
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	
	Объект.Руководитель		= СтруктураДанные.Руководитель;
	Объект.РуководительДолжность = СтруктураДанные.РуководительДолжность;
	Объект.ГлавныйБухгалтер = СтруктураДанные.ГлавныйБухгалтер;
	Объект.Отпустил			= СтруктураДанные.Отпустил;
	Объект.ОтпустилДолжность= СтруктураДанные.ОтпустилДолжность;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаОперации();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура КорректироватьПриИзменении(Элемент)
	
	Объект.ОтражатьВУчете = Корректировать = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ЗаполнитьПоОснованиюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийДокумент = ПолучитьПоследнийДокументИсправления(ВыбранноеЗначение, Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ПоследнийДокумент)
		И ВыбранноеЗначение <> ПоследнийДокумент Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПоследнийДокумент", ПоследнийДокумент);
		ДополнительныеПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ТекстВопроса = НСтр("ru = 'Для указанного документа существуют более поздние корректировки.
			|Использовать последнюю введенную корректировку?'");
		Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьПоследнююВведеннуюКорректировкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеНебольшойФирмойКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеРеализации И Объект.ОтражатьВУчете Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите суммовые и количественные показатели.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.Запасы.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТаблицы.ЕстьВДокументеРеализации = Ложь;
		Если Объект.ОтражатьВУчете Тогда
			СтрокаТаблицы.КоличествоДоИзменения     = 0;
			СтрокаТаблицы.ЦенаДоИзменения           = 0;
			СтрокаТаблицы.СуммаДоИзменения          = 0;
			СтрокаТаблицы.СуммаНДСДоИзменения       = 0;
			СтрокаТаблицы.ВсегоДоИзменения          = 0;
			СтрокаТаблицы.СтавкаНДСДоИзменения      = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
			СтрокаТаблицы.СодержаниеДоИзменения     = "";
			
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ВсегоДоКорректировки      = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
	
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
		
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена",			 	СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
				
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = "";
			
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = УправлениеНебольшойФирмойСервер.ПолучитьТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);	
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Запасы[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
	
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

Процедура ПредоплатаПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.Предоплата.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.ОтражатьВУчете Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите сумму.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	ЗаполнитьЗаголовкиСтрок(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежныйКалендарь

&НаКлиенте
Процедура ПлатежныйКалендарьПередУдалением(Элемент, Отказ)
	
	СтрокаТаблицы = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	Если СтрокаТаблицы.ЕстьВДокументеПоступления И Объект.ОтражатьВУчете Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Вместо удаления строки исходного документа очистите сумму.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
		ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
		
		Если ПроцентОплатыИтог > 100 Тогда
			ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
		КонецЕсли;
		
		ТекущаяСтрока.СуммаОплаты = Окр(Объект.Запасы.Итог("Всего") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЕсли;
	
КонецПроцедуры // ПлатежныйКалендарьПриНачалеРедактирования()

&НаКлиенте
Процедура ПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаОплаты = Окр(Объект.Запасы.Итог("Всего") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
КонецПроцедуры // СписокПлатежныйКалендарьПроцентОплатыПриИзменении()

&НаКлиенте
Процедура ПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	ЗапасыИтог = Объект.Запасы.Итог("Всего");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ЗапасыИтог = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ЗапасыИтог * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр(Объект.Запасы.Итог("СуммаНДС") * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
КонецПроцедуры // СписокПлатежныйКалендарьСуммаОплатыПриИзменении()

&НаКлиенте
Процедура ПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПлатежныйКалендарь.ТекущиеДанные;
	
	ЗапасыИтог = Объект.Запасы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыИтог);
	КонецЕсли;

КонецПроцедуры // СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	ТекущийОбъект.ЗаполнитьПредоплату();
	
КонецПроцедуры // ЗаполнитьПредоплату()

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов");
	КонецЕсли;
	Заказ = Объект.Заказ;
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	КонтрагентВестиРасчетыПоЗаказам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам");
	
	ИсходныйДокумент = ПолучитьИсправляемыйДокументРеализации(Объект.ДокументОснование, Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.Основание) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
		КонецЕсли;
		
		// Заполнение ответственных лиц для новых документов
		ОтветственныеЛица		= УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Объект.Организация, Объект.Дата);
		
		Объект.Руководитель		= ОтветственныеЛица.Руководитель;
		Объект.РуководительДолжность = ОтветственныеЛица.РуководительДолжностьСсылка;
		Объект.ГлавныйБухгалтер = ОтветственныеЛица.ГлавныйБухгалтер;
		Объект.Отпустил			= ОтветственныеЛица.Кладовщик;
		Объект.ОтпустилДолжность= ОтветственныеЛица.КладовщикДолжностьСсылка;
		
	КонецЕсли;
	
	ИсправлениеКорректировки = 
		Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И ТипЗнч(Объект.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации");
	
	Корректировать = ?(Объект.ОтражатьВУчете, 0, 1);
	
	УстановитьВидимостьИДоступность();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Объект.НДСВключатьВСтоимость = Истина;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	//Установить текст СчетФактура
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(НайденныйСчетФактура,,СчетФактураТекст);
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнойСклад");
	ОсновнойСклад = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.ГруппаНомерДата.Видимость = НЕ ЗначениеЗаполнено(Объект.ВидОперации) 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
	Элементы.ИсправлениеНомерДата.Видимость = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки");
	Элементы.ГруппаНомерДатаЗаписиВИБ.Видимость = 
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки");
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) 
		ИЛИ Объект.ДокументОснование = Объект.ИсправляемыйДокументРеализации Тогда
		Элементы.ГруппаИсправляемыйДокументРеализации.ТекущаяСтраница = Элементы.ГруппаТотЖеИсправляемыйДокумент;
	Иначе
		Элементы.ГруппаИсправляемыйДокументРеализации.ТекущаяСтраница = Элементы.ГруппаДругойИсправляемыйДокумент;
	КонецЕсли; 
	
	УсловноеОформление.Элементы.Очистить();
	
	ОснованиеЗаказНаряд = ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказПокупателя");
	
	// Запасы
	
	// Реквизиты ТЧ Запасы, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаНДСДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыВсегоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаРасходовДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Реквизиты ЗапасыСтавкаНДСДоИзменения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСтавкаНДСДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// При отражении в учете недоступны для редактирования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыКоличествоДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЦенаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСтавкаНДСДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаНДСДоИзменения");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыКоличествоДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЦенаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСуммаНДСДоКорректировки");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСодержаниеДоИзменения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Определяются из документа-основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыНоменклатура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыХарактеристика");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыПартия");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЕдиницаИзмерения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыЗаказ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСтранаПроисхождения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыНомерГТД");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Запасы.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ЗапасыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Запасы.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ЗапасыРезерв
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыРезерв");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Запасы.ТипНоменклатурыЗапас", ВидСравненияКомпоновкиДанных.НеРавно, Истина);
		
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ЗапасыСпецификация
	
	Если ОснованиеЗаказНаряд Тогда
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗапасыСпецификация");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Запасы.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);
			
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	// Предоплата
	
	// Реквизиты ТЧ Предоплата, используемые только при исправления корректировки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаРасчетовДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаПлатежаДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаНадписьДоКорректировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// При отражении в учете недоступны для редактирования
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаРасчетовДоИзменения");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаПлатежаДоИзменения");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаРасчетовДоКорректировки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаСуммаПлатежаДоКорректировки");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Определяются из документа-основания

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаДокумент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаЗаказ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаКурс");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПредоплатаКратность");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Предоплата.ЕстьВДокументеРеализации", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Зачет предоплаты.
	
	Если Объект.ОтражатьВУчете Тогда
		Элементы.ГруппаПредоплата.Видимость = Истина;
	Иначе
		Элементы.ГруппаПредоплата.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ЗапасыЗаказ.Видимость = Не ОснованиеЗаказНаряд;
	Элементы.ПредоплатаЗаказ.Видимость = Не ОснованиеЗаказНаряд;
	Элементы.ЗапасыСпецификация.Видимость = ОснованиеЗаказНаряд;
	
	// Платежный календарь
	
	Элементы.ПлатежныйКалендарь.Видимость = ОснованиеЗаказНаряд;

	Если ОснованиеЗаказНаряд Тогда
		
		// Реквизиты ТЧ ПлатежныйКалендарь, используемые только при исправления корректировки

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьДатаОплатыДоКорректировки");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьПроцентОплатыДоКорректировки");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьСуммаОплатыДоКорректировки");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьСуммаНДСОплатыДоКорректировки");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьНадписьДоКорректировки");

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ИсправлениеКорректировки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// При отражении в учете недоступны для редактирования
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьДатаОплатыДоИзменения");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьПроцентОплатыДоИзменения");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьСуммаОплатыДоИзменения");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьСуммаНДСОплатыДоИзменения");
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьДатаОплатыДоКорректировки");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьПроцентОплатыДоКорректировки");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьСуммаОплатыДоКорректировки");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПлатежныйКалендарьСуммаНДСОплатыДоКорректировки");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ОтражатьВУчете", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	КонецЕсли;
	
	// Подразделение.
	
	Элементы.Подразделение.АвтоВыборНезаполненного = Истина;
	Элементы.Подразделение.АвтоОтметкаНезаполненного = Истина;
	
	// Ставка НДС, Сумма НДС, Всего.
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаВсего.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыГруппаЗаголовкиСтрок");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНадписьДоКорректировки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНадписьДоИзменения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНадписьПослеИзменения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыГруппаКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличествоДоКорректировки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличествоДоИзменения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаВсего.Видимость = Истина;
		
	Иначе
		
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаВсего.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура ЗаполнитьПоОснованиюКлиент()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если Объект.Запасы.Количество() > 0 ИЛИ Объект.Запасы.Количество() > 0 Тогда 
			ТекстВопроса = НСтр("ru = 'Документ будет полностью заполнен по ""Основанию""! Продолжить выполнение операции?'");
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Заполнить документ'"));
		Иначе
			ЗаполнитьПоОснованиюСервер();
		КонецЕсли;
	Иначе
		ЗаполнитьПоОснованиюСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоОснованиюСервер();
		
	Иначе
		
		Объект.ДокументОснование = ДокументОснование;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюСервер()

	ЗаполнитьПоДокументу(Объект.ДокументОснование);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьВидимостьИДоступность();
	
	ДокументОснование = Объект.ДокументОснование;
	ИсходныйДокумент = ПолучитьИсправляемыйДокументРеализации(Объект.ДокументОснование, Истина);
	КонтрагентВестиРасчетыПоЗаказам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Запасы Цикл
		ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Предоплата Цикл
		ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.ПлатежныйКалендарь Цикл
		ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗаголовкиСтрок(СтрокаТаблицы)
	
	СтрокаТаблицы.НадписьДоКорректировки =  НСтр("ru = 'до корректировки:'");
	СтрокаТаблицы.НадписьДоИзменения     =  НСтр("ru = 'до изменения:'");
	СтрокаТаблицы.НадписьПослеИзменения  =  НСтр("ru = 'после изменения:'");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
		
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	
	ОтветственныеЛица		= УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Объект.Организация, Объект.Дата);
	
	СтруктураДанные.Вставить("Руководитель", ОтветственныеЛица.Руководитель);
	СтруктураДанные.Вставить("РуководительДолжность", ОтветственныеЛица.РуководительДолжностьСсылка);
	СтруктураДанные.Вставить("ГлавныйБухгалтер", ОтветственныеЛица.ГлавныйБухгалтер);
	СтруктураДанные.Вставить("Отпустил", ОтветственныеЛица.Кладовщик);
	СтруктураДанные.Вставить("ОтпустилДолжность", ОтветственныеЛица.КладовщикДолжностьСсылка);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("ЭтоЗапас", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;	
		
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли;
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
		
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыГруппаВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыГруппаСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыГруппаВсего.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
		    СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ПараметрыВопроса = Новый Структура;
		ПараметрыВопроса.Вставить("КурсНовый", КурсНовый);
		ПараметрыВопроса.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОПересчетеКурсаКратностиВалютыРасчетовЗавершение", ЭтотОбъект, ПараметрыВопроса);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КОнецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

&НаКлиенте
Процедура ВопросОПересчетеКурсаКратностиВалютыРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаКлиенте
Процедура ВопросОбОчисткеПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Предоплата.Очистить();
	Иначе
		Если ДополнительныеПараметры.Свойство("ИзменениеКонтрагента") Тогда
			Объект.Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			Контрагент = ДополнительныеПараметры.КонтрагентПередИзменением;
			КонтрагентВестиРасчетыПоЗаказам = ДополнительныеПараметры.КонтрагентВестиРасчетыПоЗаказамПередИзменением;
			Элементы.Договор.Видимость = ДополнительныеПараметры.ВидимостьДоговораПередИзменением;
		КонецЕсли;
		Объект.Договор = ДоговорПередИзменением;
		Договор = ДоговорПередИзменением;
		Объект.Заказ = Заказ;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидаОперации()
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
	
	ПараметрыИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		Объект.ВидОперации, Объект.ДокументОснование, Объект.ИсправляемыйДокументРеализации);
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыИсправления); 
	
	Если ТипЗнч(ПолучитьИсправляемыйДокументРеализации(Объект.ДокументОснование, Ложь)) = Тип("ДокументСсылка.КорректировкаРеализации") 
		И Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;	
				
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(Объект.ДокументОснование, Ложь);
		Иначе
			ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(Объект.ДокументОснование, Истина);
		КонецЕсли;
		ИсправлениеКорректировки = Ложь;
	Иначе
		ИсправляемыйДокументРеализации = ПолучитьИсправляемыйДокументРеализации(Объект.ДокументОснование, Ложь);
		ИсправлениеКорректировки = ТипЗнч(Объект.ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Для Каждого СтрокаТЧ из Объект.Запасы Цикл
			Если СтрокаТЧ.ЕстьВДокументеРеализации И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИсходныйДокумент = ПолучитьИсправляемыйДокументРеализации(Объект.ДокументОснование, Истина);
	КонтрагентВестиРасчетыПоЗаказам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам");
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИсправляемыйДокументРеализации(ВыбранноеЗначение, Исходный)
	
	Возврат Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(ВыбранноеЗначение, Исходный);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоследнийДокументИсправления(ВыбранноеЗначение, СсылкаНаТекущийДокумент)
	
	ДокументСсылка 		= ПолучитьИсправляемыйДокументРеализации(ВыбранноеЗначение, Ложь);
	ПоследнийДокумент 	= Документы.КорректировкаРеализации.ПолучитьПоследнийКорректирующийДокумент(
		ДокументСсылка, СсылкаНаТекущийДокумент);
		
	Возврат ПоследнийДокумент;
			
КонецФункции

&НаКлиенте
Процедура ВопросИспользоватьПоследнююВведеннуюКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ПоследнийДокумент;
	Иначе
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
	КонецЕсли;
	
	ЗаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИспользоватьПоследнююКорректировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьДокументРеализации(ПоследнийДокументИсправления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДокументРеализации(НовыйДокументРеализации)
	
	Объект.ДокументОснование = НовыйДокументРеализации;
	ЗаполнитьПоОснованиюСервер();
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
			
			НоваяСтрока.ТипНоменклатурыЗапас = (СтрокаЗагрузки.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
			
		КонецЕсли;
		
		ЗаполнитьЗаголовкиСтрок(НоваяСтрока);
		
	КонецЦикла;

КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	ТаблицаПредоплата = Объект.Предоплата.Выгрузить(, "Документ, Заказ, СуммаРасчетов, Курс, Кратность, СуммаПлатежа");
	
	ПустыеСтроки = ТаблицаПредоплата.НайтиСтроки(Новый Структура("СуммаРасчетов", 0));
	Для каждого СтрокаТаблицы Из ПустыеСтроки Цикл
		ТаблицаПредоплата.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(
		ТаблицаПредоплата,
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Для каждого СтрокаТаблицы Из ТаблицаДляЗагрузки Цикл
		
		НайденныеСтроки = Новый Массив;
		Если ТаблицаДляЗагрузки.Колонки.Найти("Заказ") <> Неопределено Тогда
			НайденныеСтроки = Объект.Предоплата.НайтиСтроки(Новый Структура("Документ, Заказ", СтрокаТаблицы.Документ, СтрокаТаблицы.Заказ));
		ИначеЕсли ТаблицаДляЗагрузки.Колонки.Найти("Документ") <> Неопределено Тогда
			НайденныеСтроки = Объект.Предоплата.НайтиСтроки(Новый Структура("Документ", СтрокаТаблицы.Документ));
		ИначеЕсли Объект.Предоплата.Количество() > 0 Тогда
			НайденныеСтроки = Объект.Предоплата[0];
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].СуммаРасчетов = СтрокаТаблицы.СуммаРасчетов;
			НайденныеСтроки[0].Курс = СтрокаТаблицы.Курс;
			НайденныеСтроки[0].Кратность = СтрокаТаблицы.Кратность;
			НайденныеСтроки[0].СуммаПлатежа = СтрокаТаблицы.СуммаПлатежа;
		Иначе
			НоваяСтрока = Объект.Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

&НаКлиенте
Процедура ВопросОбИзмененииПодчиненнойСчетФактурыЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		УправлениеНебольшойФирмойСервер.ИзменитьПодчиненнуюСчетФактуру(Объект.Ссылка);
		Оповестить("ОбновитьДокументИБПослеЗаполнения");
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти  = "Запасы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период",					Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",			Компания);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница",		Объект.СтруктурнаяЕдиница);
	ПараметрыПодбора.Вставить("ВидСкидкиНаценки",		Объект.ВидСкидкиНаценки);
	ПараметрыПодбора.Вставить("ВидЦен",					Объект.ВидЦен);
	ПараметрыПодбора.Вставить("Валюта",					Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента",	Объект.Организация);
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	НЕ Элементы.ЗапасыЦена.ТолькоПросмотр);
	
	ПараметрыПодбора.Вставить("Ячейка", 				Объект.Ячейка);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю")
	 ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
		ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", Истина);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	#Если ВебКлиент Тогда
		//Обход ошибки платформы передачи данных формы в веб-клиенте при изменении состава элементов формы
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораОстаткиРезервыЦены", ПараметрыПодбора, ЭтотОбъект);
		
	#Иначе
		
		ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
		
	#КонецЕсли
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ЗаполнитьПоОснованиюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале корректируемый документ.'"));
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	Для каждого ТекЭлемент Из Объект.Запасы Цикл
		СтруктураЗаказа = Новый Структура("Заказ, Всего");
		СтруктураЗаказа.Заказ = ?(ТекЭлемент.Заказ = Неопределено, ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"), ТекЭлемент.Заказ);
		СтруктураЗаказа.Всего = ТекЭлемент.Всего;
		МассивЗаказов.Добавить(СтруктураЗаказа);
	КонецЦикла;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		Истина, // Подбор
		?(ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказПокупателя"), Ложь, Истина), // ЕстьЗаказ
		?(ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказПокупателя"), Истина, Ложь), // ЗаказВШапке
		Компания, // Компания
		?(КонтрагентВестиРасчетыПоЗаказам, ?(ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.ЗаказПокупателя"), ИсходныйДокумент, МассивЗаказов), Неопределено), // Заказ
		Объект.Дата, // Дата
		ИсходныйДокумент, // Ссылка
		Объект.Контрагент, // Контрагент
		Объект.Договор, // Договор
		Объект.Курс, // Курс
		Объект.Кратность, // Кратность
		Объект.ВалютаДокумента, // ВалютаДокумента
		Объект.Запасы.Итог("Всего") // СуммаДокумента
	);
	
	КодВозврата = Неопределено;
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение1", ЭтотОбъект, Новый Структура("АдресПредоплатаВХранилище, ПараметрыПодбора", АдресПредоплатаВХранилище, ПараметрыПодбора)));
	Возврат;
	
	РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    ПараметрыПодбора = ДополнительныеПараметры.ПараметрыПодбора;
    
    
    КодВозврата = Результат;
    
    РедактироватьЗачетПредоплатыФрагмент1(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент1(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
    
    
    КодВозврата = Результат;
    
    РедактироватьЗачетПредоплатыФрагмент(АдресПредоплатаВХранилище, КодВозврата);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыФрагмент(Знач АдресПредоплатаВХранилище, Знач КодВозврата)
    
    Если КодВозврата = КодВозвратаДиалога.OK Тогда
        ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
    КонецЕсли;

КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоРезервам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоРезервам()

&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы и услуги"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			СтрокаТабличнойЧасти.Резерв = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	
	// Сведения о текущем документе
	СтруктураПараметров.Вставить("Дата",						Объект.Дата);
	СтруктураПараметров.Вставить("Организация",					Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",					Объект.Контрагент);
	СтруктураПараметров.Вставить("ОснованиеПечати",				Объект.ОснованиеПечати);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",			Объект.Договор);
	СтруктураПараметров.Вставить("ДокументОснование",			Объект.ДокументОснование);
	СтруктураПараметров.Вставить("Источник",					"РасходнаяНакладная");
	
	МассивЗаказов = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Заказ) Тогда
		
		МассивЗаказов.Добавить(Объект.Заказ);
		
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		ЗазакВСтроке = Неопределено;
		Если СтрокаТабличнойЧасти.Свойство("Заказ", ЗазакВСтроке)
			И ЗначениеЗаполнено(ЗазакВСтроке)
			И МассивЗаказов.Найти(ЗазакВСтроке) = Неопределено Тогда
			
			МассивЗаказов.Добавить(ЗазакВСтроке);
			
		КонецЕсли;
		
	КонецЦикла;
	СтруктураПараметров.Вставить("МассивЗаказов",				МассивЗаказов);
	
	// Банковские счета
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",	Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",	Объект.БанковскийСчетКонтрагента);
	
	// Логистика
	СтруктураПараметров.Вставить("Грузоотправитель",			Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",				Объект.Грузополучатель);
	СтруктураПараметров.Вставить("АдресДоставки",				Объект.АдресДоставки);
	
	// Перевозчик
	СтруктураПараметров.Вставить("Перевозчик",					Объект.Перевозчик);
	СтруктураПараметров.Вставить("БанковскийСчетПеревозчика",	Объект.БанковскийСчетПеревозчика);
	СтруктураПараметров.Вставить("СрокДоставки",				Объект.СрокДоставки);
	СтруктураПараметров.Вставить("Водитель",					Объект.Водитель);
	СтруктураПараметров.Вставить("Автомобиль",					Объект.Автомобиль);
	СтруктураПараметров.Вставить("Прицеп",						Объект.Прицеп);
	
	// Ответственные лица
	СтруктураПараметров.Вставить("Руководитель",				Объект.Руководитель);
	СтруктураПараметров.Вставить("РуководительДолжность",		Объект.РуководительДолжность);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",			Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("Отпустил",					Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",			Объект.ОтпустилДолжность);
	
	// Доверенность
	СтруктураПараметров.Вставить("ДоверенностьНомер",			Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("ДоверенностьДата",			Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",			Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",			Объект.ДоверенностьЛицо);
	
	ОткрытьФорму("Обработка.ПечатьТТН.Форма", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры // ДанныеПечати()

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыРежимГТД", "Пометка", НЕ Элементы.ЗапасыРежимГТД.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.ЗапасыРежимГТД.Пометка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Запасы.ТекущиеДанные;
	СтуктураРеквизита = Новый Структура("Объект,ТабЧасть,НомерСтроки,ИмяРеквизита", "Объект","Запасы",ТекСтрока.НомерСтроки-1,"Содержание");
	ОбщегоНазначенияКлиентПереопределяемый.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект, СтуктураРеквизита, Строка(ТекСтрока.Номенклатура)+": содержание");
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
