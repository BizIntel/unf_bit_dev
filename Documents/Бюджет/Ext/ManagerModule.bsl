#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства) Экспорт
	
	ИнициализироватьДанныеДокументаОстатки(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаПрямыеЗатраты(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаКосвенныеЗатраты(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаПроводки(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаПоступления(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаВыбытия(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаДоходы(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаРасходы(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаДоходыИРасходыПрогноз(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаДенежныеСредстваПрогноз(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	ИнициализироватьДанныеДокументаФинансовыйРезультатПрогноз(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаДенежныеСредстваПрогноз(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("СодержаниеПриход", НСтр("ru = 'Прогноз поступления денежных средств'"));
	Запрос.УстановитьПараметр("СодержаниеРасход", НСтр("ru = 'Прогноз выбытия денежных средств'"));
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Счет КАК СчетУчета,
	|	&ВалютаУчета КАК Валюта,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаПриходВал,
	|	ТаблицаДокумента.Сумма КАК СуммаПриход,
	|	0 КАК СуммаРасходВал,
	|	0 КАК СуммаРасход,
	|	&СодержаниеПриход КАК СодержаниеПроводки
	|ИЗ
	|	Документ.Бюджет.Поступления КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.ДатаПланирования,
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ТаблицаДокумента.Счет,
	|	&ВалютаУчета,
	|	ТаблицаДокумента.Статья,
	|	0,
	|	0,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Сумма,
	|	&СодержаниеРасход
	|ИЗ
	|	Документ.Бюджет.Выбытия КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваПрогноз", Результат);
	
КонецПроцедуры // ИнициализироватьДанныеДокументаДенежныеСредстваПрогноз()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаДоходыИРасходыПрогноз(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("СодержаниеПриход", НСтр("ru = 'Прогноз доходов'"));
	Запрос.УстановитьПараметр("СодержаниеРасход", НСтр("ru = 'Прогноз расходов'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДокумента.СтруктурнаяЕдиница
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|		ИНАЧЕ ТаблицаДокумента.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаДокумента.Счет КАК СчетУчета,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	&СодержаниеПриход КАК СодержаниеПроводки
	|ИЗ
	|	Документ.Бюджет.Доходы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.ДатаПланирования,
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|				ИЛИ ТаблицаДокумента.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПроцентыПоКредитам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДокумента.СтруктурнаяЕдиница
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|				ИЛИ ТаблицаДокумента.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПроцентыПоКредитам)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|		ИНАЧЕ ТаблицаДокумента.НаправлениеДеятельности
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.ПрочиеДоходы)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ТаблицаДокумента.ЗаказПокупателя
	|	КОНЕЦ,
	|	ТаблицаДокумента.Счет,
	|	0,
	|	ТаблицаДокумента.Сумма,
	|	&СодержаниеРасход
	|ИЗ
	|	Документ.Бюджет.Расходы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
			
	Результат = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыПрогноз", Результат);
	
КонецПроцедуры // ИнициализироватьДанныеДокументаДоходыИРасходыПрогноз()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаПрямыеЗатраты(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.Счет КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаДокумента.КоррСчет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.Бюджет.ПрямыеЗатраты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования,
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Счет.СчетЗакрытия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Счет,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(&РаспределениеПрямыхЗатрат КАК СТРОКА(100))
	|ИЗ
	|	Документ.Бюджет.ПрямыеЗатраты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования,
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Счет.СчетЗакрытия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(&ПередачаГотовойПродукции КАК СТРОКА(100))
	|ИЗ
	|	Документ.Бюджет.ПрямыеЗатраты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("РаспределениеПрямыхЗатрат", "Распределение прямых затрат");
	Запрос.УстановитьПараметр("ПередачаГотовойПродукции", "Передача готовой продукции");
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаПрямыеЗатраты()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаКосвенныеЗатраты(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.Счет КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаДокумента.КоррСчет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.Бюджет.КосвенныеЗатраты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования,
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Счет.СчетЗакрытия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Счет,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(&РаспределениеКосвенныхЗатрат КАК СТРОКА(100))
	|ИЗ
	|	Документ.Бюджет.КосвенныеЗатраты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования,
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Счет.СчетЗакрытия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(&РаспределениеПрямыхЗатрат КАК СТРОКА(100))
	|ИЗ
	|	Документ.Бюджет.КосвенныеЗатраты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования,
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.СчетЗакрытия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.СчетЗакрытия.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.СчетЗакрытия.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(&ПередачаГотовойПродукции КАК СТРОКА(100))
	|ИЗ
	|	Документ.Бюджет.КосвенныеЗатраты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Счет.СчетЗакрытия.СчетЗакрытия.СчетЗакрытия <> ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("РаспределениеКосвенныхЗатрат", "Распределение косвенных затрат");
	Запрос.УстановитьПараметр("РаспределениеПрямыхЗатрат", "Распределение прямых затрат");
	Запрос.УстановитьПараметр("ПередачаГотовойПродукции", "Передача готовой продукции");
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаКосвенныеЗатраты()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаРасходы(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.Счет КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаДокумента.КоррСчет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.Бюджет.Расходы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаРасходы()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаДоходы(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.КоррСчет КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаДокумента.Счет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.Бюджет.Доходы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаДоходы()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаВыбытия(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.КоррСчет КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаДокумента.Счет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.Бюджет.Выбытия КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаВыбытия()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаПоступления(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.Счет КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаДокумента.КоррСчет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.КоррСчет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.Бюджет.Поступления КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаПоступления()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаПроводки(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаПланирования КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ТаблицаДокумента.СчетДт КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетДт.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетДт.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаДокумента.СчетКт КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетКт.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетКт.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Комментарий КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.Бюджет.Операции КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаПроводки()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаОстатки(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ТаблицаДокумента.Ссылка.ДатаНачала, СЕКУНДА, -1) КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	0 КАК СуммаВалДт,
	|	ТаблицаДокумента.Счет КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(100)) КАК Содержание
	|ИЗ
	|	Документ.Бюджет.Остатки КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Счет.ТипСчета В(&ТипыСчетовКредит)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ТаблицаДокумента.Ссылка.ДатаНачала, СЕКУНДА, -1),
	|	&Организация,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Счет,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Счет.Валютный
	|			ТОГДА ТаблицаДокумента.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.Служебный),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	ВЫРАЗИТЬ(&Содержание КАК СТРОКА(100))
	|ИЗ
	|	Документ.Бюджет.Остатки КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Счет.ТипСчета В(&ТипыСчетовДебет)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("Содержание", НСтр("ru = 'Прогноз начальных остатков'"));
	
	ТипыСчетовДебет = Новый СписокЗначений;
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.ВнеоборотныеАктивы);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.Дебиторы);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.ДенежныеСредства);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.Запасы);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.КосвенныеЗатраты);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.КраткосрочныеФинансовыеВложения);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.НезавершенноеПроизводство);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.ПрочиеОборотныеАктивы);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.Расходы);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.СебестоимостьПродаж);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.ПроцентыПоКредитам);
	ТипыСчетовДебет.Добавить(Перечисления.ТипыСчетов.НалогНаПрибыль);
	
	ТипыСчетовКредит = Новый СписокЗначений;
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.АмортизацияВнеоборотныхАктивов);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.ДолгосрочныеОбязательства);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.Доходы);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.Капитал);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.Кредиторы);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.КредитыИЗаймы);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.НераспределеннаяПрибыль);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.ПрибылиУбытки);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.ПрочиеДоходы);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.ПрочиеКраткосрочныеОбязательства);
	ТипыСчетовКредит.Добавить(Перечисления.ТипыСчетов.РезервныйИДобавочныйКапитал);
	
	Запрос.УстановитьПараметр("ТипыСчетовДебет", ТипыСчетовДебет);
	Запрос.УстановитьПараметр("ТипыСчетовКредит", ТипыСчетовКредит);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // ИнициализироватьДанныеДокументаОстатки()

// Формирует таблицу базы распределения.
//
// Параметры:
//	БазаРаспределения - Перечисления.БазыРаспределенияРасходов
//	МассивСчетовУчета - Массив, содержащий фильтр по счетам учета
//	ФильтрПоСтруктурнаяЕдиница - фильтр по структурным единицам
//	ФильтрПоЗаказ - фильтр по заказам
//
// Возвращаемое значение:
//  ТаблицаЗначений, содержащая базу распределения.
//
Функция СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(БазаРаспределения, СценарийПланирования, ДатаНачала, ДатаОкончания, ФильтрПоСтруктурнаяЕдиница, ФильтрПоНаправлениеДеятельности, ФильтрПоЗаказ, ДополнительныеСвойства)
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ОбъемПродаж Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПродажиОбороты.Организация КАК Организация,
		|	ПродажиОбороты.ОбъектПланирования.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ПродажиОбороты.ЗаказПокупателя КАК Заказ,
		|	ПродажиОбороты.ОбъектПланирования.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
		|	ПродажиОбороты.ОбъектПланирования.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродаж,
		|	ПродажиОбороты.ОбъектПланирования.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
		|	ПродажиОбороты.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ПродажиОбороты.КоличествоОборот КАК База
		|ИЗ
		|	РегистрНакопления.ПланыПродаж.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			Авто,
		|			Организация = &Организация
		|			И СценарийПланирования = &СценарийПланирования
		|			И ТИПЗНАЧЕНИЯ(ОбъектПланирования) = ТИП(Справочник.Номенклатура)
		|				// ФильтрПоСтруктурнаяЕдиница
		|				// ФильтрПоНаправлениеДеятельности
		|				// ФильтрПоЗаказ
		|			) КАК ПродажиОбороты";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоСтруктурнаяЕдиница", ?(ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница), "И СтруктурнаяЕдиница В (&МассивСтруктурныхЕдиниц)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоНаправлениеДеятельности", ?(ЗначениеЗаполнено(ФильтрПоНаправлениеДеятельности), "И ОбъектПланирования.НаправлениеДеятельности В (&МассивНаправленийДеятельности)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоЗаказ", ?(ЗначениеЗаполнено(ФильтрПоЗаказ), "И ЗаказПокупателя В (&МассивЗаказов)", ""));
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ВыручкаОтПродаж Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	Бюджет.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Бюджет.ЗаказПокупателя КАК Заказ,
		|	Бюджет.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
		|	Бюджет.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродаж,
		|	Бюджет.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
		|	Бюджет.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	Бюджет.Сумма КАК База
		|ИЗ
		|	Документ.Бюджет.Доходы КАК Бюджет
		|ГДЕ
		|	Бюджет.Ссылка = &Ссылка
		|	И Бюджет.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Доходы)
		|	И Бюджет.ДатаПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	// ФильтрПоСтруктурнаяЕдиница
		|	// ФильтрПоНаправлениеДеятельности
		|	// ФильтрПоЗаказ
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоСтруктурнаяЕдиница", ?(ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница), "И Бюджет.СтруктурнаяЕдиница В (&МассивСтруктурныхЕдиниц)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоНаправлениеДеятельности", ?(ЗначениеЗаполнено(ФильтрПоНаправлениеДеятельности), "И Бюджет.НаправлениеДеятельности В (&МассивНаправленийДеятельности)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоЗаказ", ?(ЗначениеЗаполнено(ФильтрПоЗаказ), "И Бюджет.ЗаказПокупателя В (&МассивЗаказов)", ""));
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияРасходов.СебестоимостьПродаж Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	Бюджет.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Бюджет.ЗаказПокупателя КАК Заказ,
		|	Бюджет.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
		|	Бюджет.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродаж,
		|	Бюджет.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
		|	Бюджет.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	Бюджет.Сумма КАК База
		|ИЗ
		|	Документ.Бюджет.Расходы КАК Бюджет
		|ГДЕ
		|	Бюджет.Ссылка = &Ссылка
		|	И Бюджет.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.СебестоимостьПродаж)
		|	И Бюджет.ДатаПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	// ФильтрПоСтруктурнаяЕдиница
		|	// ФильтрПоНаправлениеДеятельности
		|	// ФильтрПоЗаказ
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоСтруктурнаяЕдиница", ?(ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница), "И Бюджет.СтруктурнаяЕдиница В (&МассивСтруктурныхЕдиниц)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоНаправлениеДеятельности", ?(ЗначениеЗаполнено(ФильтрПоНаправлениеДеятельности), "И Бюджет.НаправлениеДеятельности В (&МассивНаправленийДеятельности)", ""));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ФильтрПоЗаказ", ?(ЗначениеЗаполнено(ФильтрПоЗаказ), "И Бюджет.ЗаказПокупателя В (&МассивЗаказов)", ""));
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияРасходов.ВаловаяПрибыль Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Организация КАК Организация,
		|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Таблица.Заказ КАК Заказ,
		|	Таблица.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
		|	Таблица.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродаж,
		|	Таблица.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
		|	Таблица.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	СУММА(Таблица.База) КАК База
		|ИЗ
		|	(ВЫБРАТЬ
		|		&Организация КАК Организация,
		|		Бюджет.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|		Бюджет.ЗаказПокупателя КАК Заказ,
		|		Бюджет.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродаж,
		|		Бюджет.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродаж,
		|		Бюджет.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
		|		Бюджет.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|		Бюджет.Сумма КАК База
		|	ИЗ
		|		Документ.Бюджет.Доходы КАК Бюджет
		|	ГДЕ
		|		Бюджет.Ссылка = &Ссылка
		|		И Бюджет.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Доходы)
		|		И Бюджет.ДатаПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		// ФильтрПоСтруктурнаяЕдиница
		|		// ФильтрПоНаправлениеДеятельности
		|		// ФильтрПоЗаказ
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		&Организация,
		|		Бюджет.НаправлениеДеятельности,
		|		Бюджет.ЗаказПокупателя,
		|		Бюджет.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж,
		|		Бюджет.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж,
		|		Бюджет.НаправлениеДеятельности.СчетУчетаПрибыли,
		|		Бюджет.СтруктурнаяЕдиница,
		|		- Бюджет.Сумма КАК База
		|	ИЗ
		|		Документ.Бюджет.Расходы КАК Бюджет
		|	ГДЕ
		|		Бюджет.Ссылка = &Ссылка
		|		И Бюджет.ДатаПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И Бюджет.Счет.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.СебестоимостьПродаж)
		|		// ФильтрПоСтруктурнаяЕдиница
		|		// ФильтрПоНаправлениеДеятельности
		|		// ФильтрПоЗаказ
		|	) КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Организация,
		|	Таблица.НаправлениеДеятельности,
		|	Таблица.Заказ,
		|	Таблица.СчетУчетаВыручкиОтПродаж,
		|	Таблица.СчетУчетаСебестоимостиПродаж,
		|	Таблица.СчетУчетаПрибыли,
		|	Таблица.СтруктурнаяЕдиница";
			
	Иначе
		
		Возврат ТаблицаРезультата;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНачала"		  , ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	  , ДатаОкончания);
	Запрос.УстановитьПараметр("Ссылка"			  , ДополнительныеСвойства.ДляПроведения.Ссылка);
	Запрос.УстановитьПараметр("Организация"		  , ДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("СценарийПланирования", СценарийПланирования);
			
	Если ЗначениеЗаполнено(ФильтрПоЗаказ) Тогда
		Если ТипЗнч(ФильтрПоЗаказ) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивЗаказов", ФильтрПоЗаказ);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоЗаказ);
			Запрос.УстановитьПараметр("МассивЗаказов", МассивДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрПоСтруктурнаяЕдиница) Тогда
		Если ТипЗнч(ФильтрПоСтруктурнаяЕдиница) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивСтруктурныхЕдиниц", ФильтрПоСтруктурнаяЕдиница);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоСтруктурнаяЕдиница);
			Запрос.УстановитьПараметр("МассивСтруктурныхЕдиниц", МассивДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрПоНаправлениеДеятельности) Тогда
		Если ТипЗнч(ФильтрПоНаправлениеДеятельности) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("МассивНаправленийДеятельности", ФильтрПоНаправлениеДеятельности);
		Иначе
			МассивДляОтбора = Новый Массив;
			МассивДляОтбора.Добавить(ФильтрПоНаправлениеДеятельности);
			Запрос.УстановитьПараметр("МассивНаправленийДеятельности", ФильтрПоНаправлениеДеятельности);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции // СформироватьТаблицуБазыРаспределения()

// Распределение финансового результата по базе.
//
Процедура РаспределитьФинансовыйРезультатПоБазе(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства, ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоходыИРасходы.Организация КАК Организация,
	|	ДоходыИРасходы.Дата КАК Дата,
	|	ДоходыИРасходы.СценарийПланирования КАК СценарийПланирования,
	|	ДоходыИРасходы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ДоходыИРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДоходыИРасходы.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
	|	ДоходыИРасходы.Заказ КАК Заказ,
	|	ДоходыИРасходы.СчетУчета КАК СчетУчета,
	|	ДоходыИРасходы.СпособРаспределения КАК СчетУчетаСпособРаспределения,
	|	СУММА(ДоходыИРасходы.СуммаДоходов) КАК СуммаДоходов,
	|	СУММА(ДоходыИРасходы.СуммаРасходов) КАК СуммаРасходов
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Организация КАК Организация,
	|		ТаблицаДокумента.ДатаПланирования КАК Дата,
	|		ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|		ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
	|		ТаблицаДокумента.ЗаказПокупателя КАК Заказ,
	|		ТаблицаДокумента.Счет КАК СчетУчета,
	|		ТаблицаДокумента.Счет.СпособРаспределения КАК СпособРаспределения,
	|		ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|		0 КАК СуммаРасходов
	|	ИЗ
	|		Документ.Бюджет.Доходы КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.ДатаПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ТаблицаДокумента.Ссылка = &Ссылка
	|		И (ТаблицаДокумента.Счет.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|				ИЛИ (ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> ТаблицаДокумента.Счет
	|						И ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> ТаблицаДокумента.Счет
	|					ИЛИ ТаблицаДокумента.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|					ИЛИ ТаблицаДокумента.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Организация,
	|		ТаблицаДокумента.ДатаПланирования,
	|		ТаблицаДокумента.Ссылка.СценарийПланирования,
	|		ТаблицаДокумента.СтруктурнаяЕдиница,
	|		ТаблицаДокумента.НаправлениеДеятельности,
	|		ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаПрибыли,
	|		ТаблицаДокумента.ЗаказПокупателя,
	|		ТаблицаДокумента.Счет,
	|		ТаблицаДокумента.Счет.СпособРаспределения,
	|		0,
	|		ТаблицаДокумента.Сумма
	|	ИЗ
	|		Документ.Бюджет.Расходы КАК ТаблицаДокумента
	|	ГДЕ
	|		ТаблицаДокумента.ДатаПланирования МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ТаблицаДокумента.Ссылка = &Ссылка
	|		И (ТаблицаДокумента.Счет.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|				ИЛИ (ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> ТаблицаДокумента.Счет
	|						И ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> ТаблицаДокумента.Счет
	|					ИЛИ ТаблицаДокумента.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|					ИЛИ ТаблицаДокумента.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)))) КАК ДоходыИРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИРасходы.Организация,
	|	ДоходыИРасходы.Дата,
	|	ДоходыИРасходы.СценарийПланирования,
	|	ДоходыИРасходы.СтруктурнаяЕдиница,
	|	ДоходыИРасходы.НаправлениеДеятельности,
	|	ДоходыИРасходы.СчетУчетаПрибыли,
	|	ДоходыИРасходы.Заказ,
	|	ДоходыИРасходы.СчетУчета,
	|	ДоходыИРасходы.СпособРаспределения
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчетаСпособРаспределения,
	|	СтруктурнаяЕдиница,
	|	НаправлениеДеятельности,
	|	Заказ
	|ИТОГИ
	|	СУММА(СуммаДоходов),
	|	СУММА(СуммаРасходов)
	|ПО
	|	СчетУчетаСпособРаспределения,
	|	СтруктурнаяЕдиница,
	|	НаправлениеДеятельности,
	|	Заказ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбходПоСпособРаспределения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ОбходПоСпособРаспределения.Следующий() Цикл
		
		ОбходПоСтруктурнаяЕдиница = ОбходПоСпособРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Обход по подразделениям.
		Пока ОбходПоСтруктурнаяЕдиница.Следующий() Цикл
			
			ФильтрПоСтруктурнаяЕдиница = ОбходПоСтруктурнаяЕдиница.СтруктурнаяЕдиница;
			
			ОбходПоНаправлениеДеятельности = ОбходПоСтруктурнаяЕдиница.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ОбходПоНаправлениеДеятельности.Следующий() Цикл
				
				ФильтрПоНаправлениеДеятельности = ОбходПоНаправлениеДеятельности.НаправлениеДеятельности;
				
				ОбходПоЗаказ = ОбходПоНаправлениеДеятельности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				// Обход по заказам.
				Пока ОбходПоЗаказ.Следующий() Цикл
				
					ФильтрПоЗаказ = ОбходПоЗаказ.Заказ;
					
					Если ОбходПоЗаказ.СчетУчетаСпособРаспределения = Перечисления.БазыРаспределенияРасходов.НеРаспределять Тогда
						Продолжить;
					КонецЕСли;
					
					// Сформируем таблицу базы распределения.
					ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
						ОбходПоЗаказ.СчетУчетаСпособРаспределения,
						СтруктураДополнительныеСвойства.ДляПроведения.СценарийПланирования,
						ДатаНачала,
						ДатаОкончания,
						ФильтрПоСтруктурнаяЕдиница,
						ФильтрПоНаправлениеДеятельности,
						ФильтрПоЗаказ,
						СтруктураДополнительныеСвойства
					);
					
					Если ТаблицаБазы.Количество() = 0 Тогда
						ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
							ОбходПоЗаказ.СчетУчетаСпособРаспределения,
							СтруктураДополнительныеСвойства.ДляПроведения.СценарийПланирования,
							ДатаНачала,
							ДатаОкончания,
							ФильтрПоСтруктурнаяЕдиница,
							ФильтрПоНаправлениеДеятельности,
							Неопределено,
							СтруктураДополнительныеСвойства
						);
					КонецЕсли;
					
					Если ТаблицаБазы.Количество() = 0 Тогда
						ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
							ОбходПоЗаказ.СчетУчетаСпособРаспределения,
							СтруктураДополнительныеСвойства.ДляПроведения.СценарийПланирования,
							ДатаНачала,
							ДатаОкончания,
							ФильтрПоСтруктурнаяЕдиница,
							Неопределено,
							Неопределено,
							СтруктураДополнительныеСвойства
						);
					КонецЕсли;
					
					Если ТаблицаБазы.Количество() = 0 Тогда
						ТаблицаБазы = СформироватьТаблицуБазыРаспределенияФинансовогоРезультата(
							ОбходПоЗаказ.СчетУчетаСпособРаспределения,
							СтруктураДополнительныеСвойства.ДляПроведения.СценарийПланирования,
							ДатаНачала,
							ДатаОкончания,
							Неопределено,
							Неопределено,
							Неопределено,
							СтруктураДополнительныеСвойства
						);
					КонецЕсли;
					
					ВсегоБазаРаспределения = ТаблицаБазы.Итог("База");
					КоличествоНаправлений  = ТаблицаБазы.Количество() - 1;
					
					ОбходПоСчетамУчета = ОбходПоЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					// Обход по счетам затрат.
					Пока ОбходПоСчетамУчета.Следующий() Цикл
						
						Если ТаблицаБазы.Количество() = 0
						 ИЛИ ВсегоБазаРаспределения = 0 Тогда
							ТаблицаБазы = Новый ТаблицаЗначений;
							ТаблицаБазы.Колонки.Добавить("Организация");
							ТаблицаБазы.Колонки.Добавить("СтруктурнаяЕдиница");
							ТаблицаБазы.Колонки.Добавить("НаправлениеДеятельности");
							ТаблицаБазы.Колонки.Добавить("Заказ");
							ТаблицаБазы.Колонки.Добавить("СчетУчетаВыручкиОтПродаж");
							ТаблицаБазы.Колонки.Добавить("СчетУчетаСебестоимостиПродаж");
							ТаблицаБазы.Колонки.Добавить("СчетУчетаПрибыли");
							ТаблицаБазы.Колонки.Добавить("База");
							СтрокаТаблицы = ТаблицаБазы.Добавить();
							СтрокаТаблицы.Организация = ОбходПоСчетамУчета.Организация;
							СтрокаТаблицы.СтруктурнаяЕдиница = ОбходПоСчетамУчета.СтруктурнаяЕдиница;
							СтрокаТаблицы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
							СтрокаТаблицы.Заказ = ОбходПоСчетамУчета.Заказ;
							СтрокаТаблицы.СчетУчетаВыручкиОтПродаж = ОбходПоСчетамУчета.СчетУчета;
							СтрокаТаблицы.СчетУчетаСебестоимостиПродаж = ОбходПоСчетамУчета.СчетУчета;
							СтрокаТаблицы.СчетУчетаПрибыли = Справочники.НаправленияДеятельности.ОсновноеНаправление.СчетУчетаПрибыли;
							СтрокаТаблицы.База = 1;
							ВсегоБазаРаспределения = 1;
						КонецЕсли;
					
						// Распределяем сумму.
						Если ОбходПоСчетамУчета.СуммаДоходов <> 0 
						 ИЛИ ОбходПоСчетамУчета.СуммаРасходов <> 0 Тогда
						 
						 	Если ОбходПоСчетамУчета.СуммаДоходов <> 0 Тогда
								СуммаКРаспределению = ОбходПоСчетамУчета.СуммаДоходов;
							ИначеЕсли ОбходПоСчетамУчета.СуммаРасходов <> 0 Тогда
								СуммаКРаспределению = ОбходПоСчетамУчета.СуммаРасходов;
							КонецЕсли;
								
							СуммаРаспределили = 0;
						
							Для каждого НаправлениеРаспределения Из ТаблицаБазы Цикл
							
								СуммаЗатрат = ?(СуммаКРаспределению = 0, 0, Окр(НаправлениеРаспределения.База / ВсегоБазаРаспределения * СуммаКРаспределению, 2, 1));
								СуммаРаспределили = СуммаРаспределили + СуммаЗатрат;
							
								// Если это последняя строка - скорректируем сумму в ней на ошибку округления.
								Если ТаблицаБазы.Индекс(НаправлениеРаспределения) = КоличествоНаправлений Тогда
									СуммаЗатрат	= СуммаЗатрат + СуммаКРаспределению - СуммаРаспределили;
								КонецЕсли;
							
								Если СуммаЗатрат <> 0 Тогда
									
									// Движения по регистру Финансовый результат.
									НоваяСтрока	= СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультатПрогноз.Добавить();
									НоваяСтрока.Период = ОбходПоСчетамУчета.Дата;
									НоваяСтрока.СценарийПланирования = ОбходПоСчетамУчета.СценарийПланирования;
									НоваяСтрока.Регистратор	= ДокументСсылкаБюджет;
									НоваяСтрока.Организация	= НаправлениеРаспределения.Организация;
									НоваяСтрока.СтруктурнаяЕдиница = НаправлениеРаспределения.СтруктурнаяЕдиница;
									НоваяСтрока.НаправлениеДеятельности	= НаправлениеРаспределения.НаправлениеДеятельности;
									
									НоваяСтрока.СчетУчета = ОбходПоСчетамУчета.СчетУчета;
									Если ОбходПоСчетамУчета.СуммаДоходов <> 0 Тогда
										НоваяСтрока.СуммаДоходов = СуммаЗатрат;
									ИначеЕсли ОбходПоСчетамУчета.СуммаРасходов <> 0 Тогда
										НоваяСтрока.СуммаРасходов = СуммаЗатрат;
									КонецЕсли;
									
									// Движения по регистру Управленческий.
									НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
									НоваяСтрока.Период = ОбходПоСчетамУчета.Дата;
									НоваяСтрока.Организация = СтруктураДополнительныеСвойства.ДляПроведения.Организация;
									НоваяСтрока.СценарийПланирования = ОбходПоСчетамУчета.СценарийПланирования;
									
									Если ОбходПоСчетамУчета.СуммаДоходов <> 0 Тогда
										НоваяСтрока.СчетДт = ОбходПоСчетамУчета.СчетУчета;
										НоваяСтрока.СчетКт = НаправлениеРаспределения.СчетУчетаПрибыли;
										НоваяСтрока.Сумма = СуммаЗатрат; 
									ИначеЕсли ОбходПоСчетамУчета.СуммаРасходов <> 0 Тогда
										НоваяСтрока.СчетДт = НаправлениеРаспределения.СчетУчетаПрибыли;
										НоваяСтрока.СчетКт = ОбходПоСчетамУчета.СчетУчета;
										НоваяСтрока.Сумма = СуммаЗатрат;
									КонецЕсли;
									
									НоваяСтрока.Содержание = "Финансовый результат (прогноз)";
									
								КонецЕсли;
								
							КонецЦикла;
						
							Если СуммаРаспределили = 0 Тогда
								
								ТекстСообщения = НСтр("ru = 'Расчет финансового результата: Счет учета ""%СчетУчета%"", не имеет базы распределения!'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетУчета%", Строка(ОбходПоСчетамУчета.СчетУчета));
								УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ДокументСсылкаБюджет, ТекстСообщения); 
								Продолжить;
								
							КонецЕсли;
						
						КонецЕсли
					
					КонецЦикла;
				
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьФинансовыйРезультатПоБазе()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаФинансовыйРезультатПрогноз(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.ДатаПланирования КАК Дата,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаПрибыли КАК СчетУчетаПрибыли,
	|	ТаблицаДокумента.ЗаказПокупателя КАК Заказ,
	|	ТаблицаДокумента.Счет КАК СчетУчета,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	0 КАК СуммаРасходов
	|ИЗ
	|	Документ.Бюджет.Доходы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И (ТаблицаДокумента.Счет.СпособРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|			ИЛИ (ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ТаблицаДокумента.Счет
	|				ИЛИ ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ТаблицаДокумента.Счет)
	|				И ТаблицаДокумента.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация,
	|	ТаблицаДокумента.ДатаПланирования,
	|	ТаблицаДокумента.Ссылка.СценарийПланирования,
	|	ТаблицаДокумента.СтруктурнаяЕдиница,
	|	ТаблицаДокумента.НаправлениеДеятельности,
	|	ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаПрибыли,
	|	ТаблицаДокумента.ЗаказПокупателя,
	|	ТаблицаДокумента.Счет,
	|	0,
	|	ТаблицаДокумента.Сумма
	|ИЗ
	|	Документ.Бюджет.Расходы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И (ТаблицаДокумента.Счет.СпособРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|			ИЛИ (ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж = ТаблицаДокумента.Счет
	|				ИЛИ ТаблицаДокумента.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж = ТаблицаДокумента.Счет)
	|				И ТаблицаДокумента.НаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее))";
	
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаБюджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаФинансовыйРезультатПрогноз = Новый ТаблицаЗначений;
	
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("НомерСтроки");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("Регистратор");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("Период");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("Организация");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("СценарийПланирования");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("НаправлениеДеятельности");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("СчетУчета");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("СуммаДоходов");
	ТаблицаФинансовыйРезультатПрогноз.Колонки.Добавить("СуммаРасходов");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаФинансовыйРезультатПрогноз", ТаблицаФинансовыйРезультатПрогноз);
	
	ВыборкаРезультатЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаРезультатЗапроса.Следующий() Цикл
		
		// Движения по регистру Финансовый результат.
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультатПрогноз.Добавить();
		НоваяСтрока.Период = ВыборкаРезультатЗапроса.Дата;
		НоваяСтрока.Регистратор = ДокументСсылкаБюджет;
		НоваяСтрока.СценарийПланирования = ВыборкаРезультатЗапроса.СценарийПланирования;
		НоваяСтрока.Организация = ВыборкаРезультатЗапроса.Организация;
		НоваяСтрока.СтруктурнаяЕдиница = ВыборкаРезультатЗапроса.СтруктурнаяЕдиница;
		НоваяСтрока.НаправлениеДеятельности = ?(
			ЗначениеЗаполнено(ВыборкаРезультатЗапроса.НаправлениеДеятельности), ВыборкаРезультатЗапроса.НаправлениеДеятельности, Справочники.НаправленияДеятельности.ОсновноеНаправление
		);

		НоваяСтрока.СчетУчета = ВыборкаРезультатЗапроса.СчетУчета;
		
		Если ВыборкаРезультатЗапроса.СуммаДоходов <> 0 Тогда
			НоваяСтрока.СуммаДоходов = ВыборкаРезультатЗапроса.СуммаДоходов;
		ИначеЕсли ВыборкаРезультатЗапроса.СуммаРасходов <> 0 Тогда
			НоваяСтрока.СуммаРасходов = ВыборкаРезультатЗапроса.СуммаРасходов;
		КонецЕсли;
		
		// Движения по регистру Управленческий.
		НоваяСтрока = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		НоваяСтрока.Период = ВыборкаРезультатЗапроса.Дата;
		НоваяСтрока.Организация = ВыборкаРезультатЗапроса.Организация;
		НоваяСтрока.СценарийПланирования = ВыборкаРезультатЗапроса.СценарийПланирования;
		
		Если ВыборкаРезультатЗапроса.СуммаДоходов <> 0 Тогда
			НоваяСтрока.СчетДт = ВыборкаРезультатЗапроса.СчетУчета;
			НоваяСтрока.СчетКт = ?(
				ЗначениеЗаполнено(ВыборкаРезультатЗапроса.НаправлениеДеятельности),
				ВыборкаРезультатЗапроса.СчетУчетаПрибыли,
				Справочники.НаправленияДеятельности.ОсновноеНаправление.СчетУчетаПрибыли
			);
			НоваяСтрока.Сумма = ВыборкаРезультатЗапроса.СуммаДоходов; 
		ИначеЕсли ВыборкаРезультатЗапроса.СуммаРасходов <> 0 Тогда
			НоваяСтрока.СчетДт = ?(
				ЗначениеЗаполнено(ВыборкаРезультатЗапроса.НаправлениеДеятельности),
				ВыборкаРезультатЗапроса.СчетУчетаПрибыли,
				Справочники.НаправленияДеятельности.ОсновноеНаправление.СчетУчетаПрибыли
			);
			НоваяСтрока.СчетКт = ВыборкаРезультатЗапроса.СчетУчета;
			НоваяСтрока.Сумма = ВыборкаРезультатЗапроса.СуммаРасходов;
		КонецЕсли;
		
		НоваяСтрока.Содержание = "Финансовый результат (прогноз)";
		
	КонецЦикла;
	
	ДатаНачала = СтруктураДополнительныеСвойства.ДляПроведения.ДатаНачала;
	ДатаОкончания = СтруктураДополнительныеСвойства.ДляПроведения.ДатаОкончания;
	
	Пока ДатаНачала < ДатаОкончания Цикл
		РаспределитьФинансовыйРезультатПоБазе(ДокументСсылкаБюджет, СтруктураДополнительныеСвойства, ДатаНачала, КонецМесяца(ДатаНачала));
		ДатаНачала = КонецМесяца(ДатаНачала) + 1;;
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьДанныеДокументаФинансовыйРезультатПрогноз()

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли