
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"АктСписанияЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет на форму списка условное оформление состояния фиксации.
//
//  Параметры:
//   Форма - УправляемаяФорма – форма документа.
//   ОформляемоеПоле - Строка – имя поля для оформления.
//   ПутьКДанным - Строка - путь к реквизиту СтатусОбработки.
//
Процедура УстановитьУсловноеОформлениеСтатусаОбработки(Форма, ОформляемоеПоле = "Список", ПутьКДанным = "Список.СтатусОбработки") Экспорт
	
	УсловноеОформлениеКД = Форма.УсловноеОформление;
	
	// Представление статуса Передается
	ПредставлениеЭлемента = НСтр("ru = 'Документ передается в ЕГАИС'");
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиПередается);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементУсловногоОформления.Отбор,
		ПутьКДанным,
		СписокСтатусов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		ПредставлениеЭлемента,
		Истина);
	
	// Представление статуса ОшибкаПередачи
	ПредставлениеЭлемента = НСтр("ru = 'Получена ошибка передачи в ЕГАИС'");
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиЗапросаНаОтменуПроведения);
	
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиОшибкаПередачи);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементУсловногоОформления.Отбор,
		ПутьКДанным,
		СписокСтатусов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		ПредставлениеЭлемента,
		Истина);
	
КонецПроцедуры

// Возвращает данные акта в виде структуры перед выгрузкой в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктСписанияЕГАИС - выгружаемый акт,
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид выгружаемого документа.
//
// Возвращаемое значение:
//   Структура - данные акта.
//
Функция ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента) Экспорт
	
	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписания Тогда
		Возврат ИнициализироватьДанныеАктаСписания(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала Тогда
		Возврат ИнициализироватьДанныеАктаСписанияИзТорговогоЗала(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания Тогда
		Возврат ИнициализироватьДанныеЗапросаНаОтменуПроведенияАктаСписания(ДокументСсылка);
		
	Иначе
		ТекстОшибки = НСтр("ru='Неподдерживаемый вид документа %1 для акта списания'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидДокумента);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру, необходимую для выгрузки акта списания в УТМ.
//
Функция СтруктураДанныхАктаСписания()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор"  , Неопределено); // Идентификатор накладной (клиентский, к заполнению необязательный).
	Результат.Вставить("Номер"          , "");           // Номер документа.
	Результат.Вставить("Дата"           , '00010101');   // Дата составления.
	Результат.Вставить("ПричинаСписания", Неопределено); // Один из вариантов: Пересортица, Недостача, Уценка, Порча, Потери, Проверки, Арест.
	Результат.Вставить("Комментарий"    , Неопределено); // Произвольный комментарий.
	Результат.Вставить("ТаблицаТоваров" , Новый Массив); // Массив строк акта.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки строки акта списания в УТМ.
//
Функция СтруктураДанныхСтрокиАктаСписания()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСтроки", "");           // Идентификатор позиции внутри акта.
	Результат.Вставить("Количество"         , 0);            // Количество единиц списываемого товара.
	Результат.Вставить("НомерСправкиБ"      , "");           // Номер справки Б, по которой товар поступил на склад.
	Результат.Вставить("АкцизныеМарки"      , Новый Массив); // Массив штрих-кодов акцизных марок для маркируемой продукции.
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки строки акта списания в УТМ.
//
Функция СтруктураДанныхСтрокиАктаСписанияИзТорговогоЗала()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСтроки" , "");           // Идентификатор позиции внутри акта.
	Результат.Вставить("АлкогольнаяПродукция", Неопределено); // Списываемая алкогольная продукция.
	Результат.Вставить("Количество"          , 0);            // Количество единиц списываемого товара.
	Результат.Вставить("АкцизныеМарки"       , Новый Массив); // Массив штрих-кодов акцизных марок для маркируемой продукции.
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные акта списания.
//
Функция ИнициализироватьДанныеАктаСписания(ДокументСсылка)
	
	ДанныеАкта = СтруктураДанныхАктаСписания();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктСписанияЕГАИС.Номер КАК Номер,
	|	АктСписанияЕГАИС.Дата КАК Дата,
	|	АктСписанияЕГАИС.Идентификатор КАК Идентификатор,
	|	АктСписанияЕГАИС.ПричинаСписания КАК ПричинаСписания,
	|	АктСписанияЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ГДЕ
	|	АктСписанияЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеАкта, Выборка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктСписанияЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	АктСписанияЕГАИСТовары.Количество КАК Количество,
	|	АктСписанияЕГАИСТовары.СправкаБ.РегистрационныйНомер КАК НомерСправкиБ,
	|	ЕСТЬNULL(АктСписанияЕГАИСАкцизныеМарки.КодАкцизнойМарки, """") КАК КодАкцизнойМарки
	|ИЗ
	|	Документ.АктСписанияЕГАИС.Товары КАК АктСписанияЕГАИСТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС.АкцизныеМарки КАК АктСписанияЕГАИСАкцизныеМарки
	|		ПО АктСписанияЕГАИСТовары.КлючСвязи = АктСписанияЕГАИСАкцизныеМарки.КлючСвязи
	|			И (АктСписанияЕГАИСАкцизныеМарки.Ссылка = &Ссылка)
	|ГДЕ
	|	АктСписанияЕГАИСТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(НомерСправкиБ)
	|ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаАкта = СтруктураДанныхСтрокиАктаСписания();
		ЗаполнитьЗначенияСвойств(СтрокаАкта, Выборка);
		СтрокаАкта.ИдентификаторСтроки = Формат(Выборка.НомерСтроки, "ЧГ=0");
		
		ВыборкаМарки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМарки.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаМарки.КодАкцизнойМарки) Тогда
				СтрокаАкта.АкцизныеМарки.Добавить(ВыборкаМарки.КодАкцизнойМарки);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеАкта.ТаблицаТоваров.Добавить(СтрокаАкта);
	КонецЦикла;
	
	Возврат ДанныеАкта;
	
КонецФункции

// Возвращает данные акта списания из торгового зала.
//
Функция ИнициализироватьДанныеАктаСписанияИзТорговогоЗала(ДокументСсылка)
	
	ДанныеАкта = СтруктураДанныхАктаСписания();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктСписанияЕГАИС.Номер КАК Номер,
	|	АктСписанияЕГАИС.Дата КАК Дата,
	|	АктСписанияЕГАИС.Идентификатор КАК Идентификатор,
	|	АктСписанияЕГАИС.ПричинаСписания КАК ПричинаСписания,
	|	АктСписанияЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ГДЕ
	|	АктСписанияЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеАкта, Выборка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.Количество КАК Количество,
	|	ЕСТЬNULL(АкцизныеМарки.КодАкцизнойМарки, """") КАК КодАкцизнойМарки
	|ИЗ
	|	Документ.АктСписанияЕГАИС.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС.АкцизныеМарки КАК АкцизныеМарки
	|		ПО (АкцизныеМарки.Ссылка = &Ссылка)
	|			И Товары.КлючСвязи = АкцизныеМарки.КлючСвязи
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(АлкогольнаяПродукция),
	|	МАКСИМУМ(Количество)
	|ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		СтрокаАкта = СтруктураДанныхСтрокиАктаСписанияИзТорговогоЗала();
		ЗаполнитьЗначенияСвойств(СтрокаАкта, Выборка);
		СтрокаАкта.ИдентификаторСтроки = Формат(Выборка.НомерСтроки, "ЧГ=0");
		
		ВыборкаМарки = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМарки.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаМарки.КодАкцизнойМарки) Тогда
				СтрокаАкта.АкцизныеМарки.Добавить(ВыборкаМарки.КодАкцизнойМарки);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеАкта.ТаблицаТоваров.Добавить(СтрокаАкта);
	КонецЦикла;
	
	Возврат ДанныеАкта;
	
КонецФункции

// Возвращает данные запроса на отмену проведения акта списания.
//
Функция ИнициализироватьДанныеЗапросаНаОтменуПроведенияАктаСписания(ДокументСсылка)
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхЗапросаНаОтменуПроведения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Дата"  , ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктСписанияЕГАИС.ОрганизацияЕГАИС.Код КАК ИдентификаторФСРАР,
	|	АктСписанияЕГАИС.Номер КАК Номер,
	|	&Дата КАК Дата,
	|	АктСписанияЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ГДЕ
	|	АктСписанияЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеЗапроса, Выборка);
	
	Возврат ДанныеЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли