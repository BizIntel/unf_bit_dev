
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаРасчетов));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);

	ВидДоговораПриСоздании = Объект.ВидДоговора;
	КонтрагентПриСоздании = Объект.Контрагент;
	СотрудникПриСоздании = Объект.Сотрудник;
	ОрганизацияПриСоздании = Объект.Организация;
	ВалютаРасчетов = Объект.ВалютаРасчетов;
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЭтаФорма.Срок = 1;
	Иначе
		Срок = СрокПоДатеОкончанияНаСервере(Объект.ДатаОкончания, ?(Объект.ДатаНачалаПогашения = '00010101', Объект.ДатаПредоставления, ДобавитьМесяц(Объект.ДатаНачалаПогашения, -1)));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Срок = 1;
		Объект.ДатаПредоставления = ТекущаяДата();
		Объект.ДатаОкончания = ДобавитьМесяц(НачалоДня(Объект.ДатаПредоставления)-1, Срок);
		Объект.ДатаНачалаПогашения = ДобавитьМесяц(Объект.ДатаПредоставления, 1);
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда
			УстановитьЗначенияПоУмолчаниюДляВидаДоговора();
		КонецЕсли;
	Иначе
		Срок = СрокПоДатеОкончанияНаСервере(Объект.ДатаОкончания, ?(Объект.ДатаНачалаПогашения = '00010101', Объект.ДатаПредоставления, ДобавитьМесяц(Объект.ДатаНачалаПогашения, -1)));
	КонецЕсли;
	
	// Предопределенные значения
	ВариантПогашенияЕжемесячное = Перечисления.ВариантыПогашенияЗаймаСотрудником.ЕжемесячноеПогашение;
	ВидДоговораДоговорЗайма = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику;
	ТипКомиссииНет = Перечисления.ТипыКомиссииКредитовИЗаймов.Нет;
	ТипКомиссииПоГрафику = Перечисления.ТипыКомиссииКредитовИЗаймов.ПроизвольныйГрафик;
	// Конец Предопределенные значения
	
	ТипКомиссии = Объект.ТипКомиссии;
	
	ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов = Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Получить();
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаДоговора();
	УстановитьВидимостьПараметровУчетаНаСервере();
	
	ТекущийПользовательСистемы = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Если ЕстьДвиженияПоДоговору(Объект.Ссылка) Тогда
			Элементы.ГруппаСчетаУчетаКолонки.Подсказка = НСтр("ru = 'В базе есть движения по этому договору! Изменение счетов учета не рекомендуется!'");
		КонецЕсли;
	КонецЕсли;
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаВыдача, Объект.Комментарий);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "СтраницаДополнительно");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПроверитьВозможностьИзменений(Отказ);
		Если НЕ Отказ Тогда
			ВидДоговораПриСоздании = Объект.ВидДоговора;
			КонтрагентПриСоздании = Объект.Контрагент;
			СотрудникПриСоздании = Объект.Сотрудник;
			ОрганизацияПриСоздании = Объект.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипКомиссииПриИзменении(Элемент)
	
	НастроитьЭлементыПоТипуКомиссииИВидуДоговора();
	ОчиститьРеквизитыВЗависимостиОтТипаКомиссии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентнаяСтавкаГодоваяПриИзменении(Элемент)
	
	ЗаполнитьРазмерПлатежа();
	УстановитьВидимостьУдержаний();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПогашенияПриИзменении(Элемент)
	
	ВариантПогашенияПриИзмененииНаСервере();
	ЗаполнитьРазмерПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ЗаполнитьРазмерПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПредоставленияПриИзменении(Элемент)
	
	ЗаполнитьДатуОкончанияПоСроку(Объект.ДатаПредоставления);
	Объект.ДатаНачалаПогашения = ДобавитьМесяц(Объект.ДатаПредоставления, 1);
	Если КонецДня(Объект.ДатаПредоставления) = КонецМесяца(Объект.ДатаПредоставления) Тогда
		Объект.ДатаНачалаПогашения = КонецМесяца(Объект.ДатаНачалаПогашения);
	КОнецЕсли;
	ЗаполнитьРазмерПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаПогашения = '00010101' Тогда
		Если КонецДня(Объект.ДатаПредоставления) = КонецМесяца(Объект.ДатаПредоставления) Тогда
			Объект.ДатаНачалаПогашения = КонецМесяца(ДобавитьМесяц(Объект.ДатаПредоставления, 1));
		Иначе
			Объект.ДатаНачалаПогашения = ДобавитьМесяц(Объект.ДатаПредоставления, 1);
		КонецЕсли;
	КонецЕсли;
	Если КонецДня(Объект.ДатаНачалаПогашения) = КонецМесяца(Объект.ДатаНачалаПогашения) Тогда
		ДатаНачала = КонецМесяца(ДобавитьМесяц(Объект.ДатаНачалаПогашения, -1));
	Иначе
		ДатаНачала = ДобавитьМесяц(Объект.ДатаНачалаПогашения, -1);
	КонецЕсли;
	ЗаполнитьДатуОкончанияПоСроку(ДатаНачала);
	ЗаполнитьРазмерПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ЗаполнитьСрокПоДатеОкончания(Объект.ДатаПредоставления);
	ЗаполнитьРазмерПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПогашенияПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаПогашения = '00010101' Тогда
		Объект.ДатаНачалаПогашения = ДобавитьМесяц(Объект.ДатаПредоставления, 1);
	КонецЕсли;
	ЗаполнитьДатуОкончанияПоСроку(ДобавитьМесяц(Объект.ДатаНачалаПогашения, -1));
	ЗаполнитьРазмерПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	ВидДоговораПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	СчетУчетаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПлатежейПриИзменении(Элемент)
	
	ЗаполнитьРазмерПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВГоду360ДнейПриИзменении(Элемент)
	
	ЗаполнитьРазмерПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПроцентовПриИзменении(Элемент)
	
	СчетУчетаПроцентовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаКомиссииПриИзменении(Элемент)
	
	СчетУчетаКомиссииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура ПогашатьИзЗаработнойПлатыПриИзменении(Элемент)
	
	УстановитьВидимостьУдержаний();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаВыдача, Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыВыдачаИПогашениеЗаймаКредитаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если НЕ ПустаяСтрока(Объект.Комментарий) И Элементы.СтраницаВыдача.Картинка = Новый Картинка Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикПлатежейИНачислений

&НаКлиенте
Процедура ГрафикПлатежейИНачисленийСуммаПроцентовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежейИНачислений.ТекущиеДанные;
	ПересчитатьСуммуПлатежа(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейИНачисленийСуммаКомиссииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежейИНачислений.ТекущиеДанные;
	ПересчитатьСуммуПлатежа(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПлатежейИНачисленийСуммаОсновногоДолгаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрафикПлатежейИНачислений.ТекущиеДанные;
	ПересчитатьСуммуПлатежа(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьГрафикПлатежейИНачислений(Команда)
	
	Если Объект.СуммаДокумента = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнена сумма";
		Сообщение.Поле = "Объект.СуммаДокумента";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьГрафикПлатежейИНачисленийНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНапоминанияОбОплате(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Пожалуйста, запишите документ!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ГрафикПлатежейИНачислений.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не заполнен график платежей!'"));
		Возврат;
	КонецЕсли;
	
	АдресГрафикПлатежейИНачисленийВХранилище = ПоместитьГрафикПлатежейИНачисленийВХранилище();
	ПараметрыОтбора = Новый Структура("
		|АдресГрафикПлатежейИНачисленийВХранилище,
		|Организация,
		|Регистратор,
		|ИдентификаторФормыДокумента,
		|БанкКонтрагент",
		АдресГрафикПлатежейИНачисленийВХранилище,
		Объект.Организация,
		Объект.Ссылка,
		УникальныйИдентификатор,
		Объект.Контрагент);
	
	//ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СоздатьНапоминанияОбОплатеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ДоговорКредитаИЗайма.Форма.ФормаСозданияНапоминаний", 
						ПараметрыОтбора,
						ЭтаФорма,,,,Неопределено); //ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВидДоговораПриИзмененииНаСервере()
	
	УстановитьЗначенияПоУмолчаниюДляВидаДоговора();
	ОчиститьРеквизитыНеОтносящиесяКВидуДоговора();
	УстановитьВидимостьЭлементовВЗависимостиОтВидаДоговора();
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаПриИзмененииНаСервере()
	
	ЗаполнитьЗначенияПараметровУчетаПоУмолчаниюНаСервере();
	УстановитьВидимостьПараметровУчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаПроцентовПриИзмененииНаСервере()
	
	ЗаполнитьЗначенияПараметровУчетаПоУмолчаниюНаСервере();
	УстановитьВидимостьПараметровУчетаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СчетУчетаКомиссииПриИзмененииНаСервере()
	
	ЗаполнитьЗначенияПараметровУчетаПоУмолчаниюНаСервере();
	УстановитьВидимостьПараметровУчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыВЗависимостиОтТипаКомиссии()

	ПредыдущийТипКомиссии = ТипКомиссии;
	ТипКомиссии = Объект.ТипКомиссии;
	Если ПредыдущийТипКомиссии <> ТипКомиссии Тогда
		Если ТипКомиссии = ТипКомиссииПоГрафику ИЛИ ТипКомиссии = ТипКомиссииНет Тогда
			Объект.РазмерКомиссии = 0;
			
			Если ТипКомиссии = ТипКомиссииНет Тогда
				Для каждого ТекущаяСтрокаГрафика Из Объект.ГрафикПлатежейИНачислений Цикл
				
					ТекущаяСтрокаГрафика.СуммаКомиссии = 0;
					ПересчитатьСуммуПлатежа(ТекущаяСтрокаГрафика);
				
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВариантПогашенияПриИзмененииНаСервере()

	ДоступностьПлатежа = (Объект.ВариантПогашения = ВариантПогашенияЕжемесячное);
	
	Элементы.ВидПлатежей.Доступность = ДоступностьПлатежа;
	Элементы.ГрафикПлатежейИНачисленийЗаполнитьГрафикПлатежейИНачислений.Доступность = ДоступностьПлатежа;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьИзменений(Отказ)
	
	Если ВидДоговораПриСоздании = Объект.ВидДоговора И
		КонтрагентПриСоздании = Объект.Контрагент И
		СотрудникПриСоздании = Объект.Сотрудник И
		ОрганизацияПриСоздании = Объект.Организация Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыПоКредитамИЗаймам.Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам
	|ГДЕ
	|	(РасчетыПоКредитамИЗаймам.ВидДоговора <> &ВидДоговора
	|			ИЛИ (РасчетыПоКредитамИЗаймам.Контрагент <> &Контрагент И &ПроверятьКонтрагента)
	|			ИЛИ (РасчетыПоКредитамИЗаймам.Контрагент <> &Сотрудник И &ПроверятьСотрудника)
	|			ИЛИ РасчетыПоКредитамИЗаймам.Организация <> &Организация)
	|	И РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма = &ТекущийДоговор";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущийДоговор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидДоговора", Объект.ВидДоговора);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	Запрос.УстановитьПараметр("ПроверятьКонтрагента", Объект.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный);
	Запрос.УстановитьПараметр("ПроверятьСотрудника", Объект.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекстСообщения = НСтр("ru = 'В базе присутствуют документы, в которых выбран текущий договор. Изменение организации, вида договора, банка-контрагента и сотрудника запрещено. Для просмотра списка связанных документах можно использовать команду ""Еще - Связанные документы"".'");
		//УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "Объект.ВалютаРасчетов", Отказ);
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет возможность изменения счета учета.
//
&НаСервереБезКонтекста
Функция ЕстьДвиженияПоДоговору(Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыПоКредитамИЗаймам.Период,
	|	РасчетыПоКредитамИЗаймам.Регистратор,
	|	РасчетыПоКредитамИЗаймам.НомерСтроки,
	|	РасчетыПоКредитамИЗаймам.Активность,
	|	РасчетыПоКредитамИЗаймам.ВидДвижения,
	|	РасчетыПоКредитамИЗаймам.ВидДоговора,
	|	РасчетыПоКредитамИЗаймам.Контрагент,
	|	РасчетыПоКредитамИЗаймам.Организация,
	|	РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма,
	|	РасчетыПоКредитамИЗаймам.ОсновнойДолг,
	|	РасчетыПоКредитамИЗаймам.ОсновнойДолгВал,
	|	РасчетыПоКредитамИЗаймам.Проценты,
	|	РасчетыПоКредитамИЗаймам.ПроцентыВал,
	|	РасчетыПоКредитамИЗаймам.Комиссия,
	|	РасчетыПоКредитамИЗаймам.КомиссияВал,
	|	РасчетыПоКредитамИЗаймам.УдержаноИзЗарплаты,
	|	РасчетыПоКредитамИЗаймам.СодержаниеПроводки,
	|	РасчетыПоКредитамИЗаймам.СтруктурнаяЕдиница
	|ИЗ
	|	РегистрНакопления.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам
	|ГДЕ
	|	РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ОтказИзменитьСчетУчетаЗапасов()

// Функция определяет разность дат в месяцах.
//
&НаКлиенте
Функция СрокПоДатеОкончанияНаКлиенте(ДатаОкончания, ДатаНачала) Экспорт
	
	Если ДатаОкончания < ДатаНачала Тогда
		Возврат 0;
	КонецЕсли;
	
	ГодНачала = Год(ДатаНачала);
	ГодОкончания = Год(ДатаОкончания);
	
	МесяцНачала = Месяц(ДатаНачала);
	МесяцОкончания = Месяц(ДатаОкончания);
	
	ДеньНачала = День(ДатаНачала);
	ДеньОкончания = День(ДатаОкончания);
	
	Возврат Макс(((ГодОкончания - ГодНачала) - ?(МесяцОкончания < МесяцНачала, 1, 0)), 0) * 12
		+ (МесяцОкончания - МесяцНачала + 1 + ?(МесяцОкончания < МесяцНачала, 12, 0) - ?(ДеньОкончания < ДеньНачала, 1, 0));
	
КонецФункции

// Функция определяет разность дат в месяцах.
//
&НаСервере
Функция СрокПоДатеОкончанияНаСервере(ДатаОкончания, ДатаНачала) Экспорт
	
	Если ДатаОкончания < ДатаНачала Тогда
		Возврат 0;
	КонецЕсли;
	
	ГодНачала = Год(ДатаНачала);
	ГодОкончания = Год(ДатаОкончания);
	
	МесяцНачала = Месяц(ДатаНачала);
	МесяцОкончания = Месяц(ДатаОкончания);
	
	ДеньНачала = День(ДатаНачала);
	ДеньОкончания = День(ДатаОкончания);
	
	Возврат Макс(((ГодОкончания - ГодНачала) - ?(МесяцОкончания < МесяцНачала, 1, 0)), 0) * 12
		+ (МесяцОкончания - МесяцНачала + 1 + ?(МесяцОкончания < МесяцНачала, 12, 0) - ?(ДеньОкончания < ДеньНачала, 1, 0));
	
КонецФункции

// Процедура устанавливает дату окончания по дате начала и количеству месяцев.
//
&НаКлиенте
Процедура ЗаполнитьДатуОкончанияПоСроку(ДатаНачала) Экспорт
	
	Если Срок > 0 Тогда
		Объект.ДатаОкончания = ДобавитьМесяц(НачалоДня(ДатаНачала)-1, Срок); //КонецМесяца(ДобавитьМесяц(ДатаНачала, Срок - 1));
		Если КонецДня(ДатаНачала) = КонецМесяца(ДатаНачала) Тогда
			Объект.ДатаОкончания = КонецМесяца(Объект.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСрокПоДатеОкончания(ДатаНачала) Экспорт
	
	Срок = СрокПоДатеОкончанияНаКлиенте(Объект.ДатаОкончания, ДатаНачала);
	
КонецПроцедуры

// Процедура заполняет размер платежа в зависимости от вида платежа и варианта погашения.
//
&НаКлиенте
Процедура ЗаполнитьРазмерПлатежа()
	
	Если Объект.ВариантПогашения = ВариантПогашенияЕжемесячное Тогда
		
		Если Объект.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.АннуитетныеПлатежи") Тогда
			Объект.РазмерПлатежа = РазмерАннуитетногоПлатежа();
		ИначеЕсли Объект.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ДифференцированныеПлатежи")
			Или Объект.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ТолькоЗаем") Тогда
			Объект.РазмерПлатежа = Объект.СуммаДокумента / Срок;
		ИначеЕсли Объект.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ТолькоПроценты") Тогда
			Объект.РазмерПлатежа = Объект.СуммаДокумента * объект.ПроцентнаяСтавкаГодовая * 0.01 / 12;
		ИначеЕсли Объект.ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ПроизвольныйГрафик") Тогда
			Объект.РазмерПлатежа = Объект.СуммаДокумента / Срок;
		Иначе
			Объект.РазмерПлатежа = 0;
		КонецЕсли;
		
	Иначе
		
		НакопленоПроцентов = 0;
		НомерМесяца = 1;
	
		МесяцНачала = НачалоМесяца(Объект.ДатаПредоставления);
		МесяцОкончания = НачалоМесяца(Объект.ДатаОкончания);
		
		ТекущийМесяц = МесяцНачала;
		Пока ТекущийМесяц <= МесяцОкончания Цикл
		
			ДнейВГоду = КоличествоДнейВГоду(Год(ТекущийМесяц), Объект.ВГоду360Дней);
			Если ТекущийМесяц = НачалоМесяца(Объект.ДатаПредоставления) Тогда
				// В первый месяц количество дней определяем от даты фактической выдачи займа (т.к. проценты начисляются на
				// следующий день).
				Если ТекущийМесяц = МесяцОкончания Тогда
					ДнейВМесяце = Мин(День(КонецМесяца(ТекущийМесяц)), День(Объект.ДатаОкончания)) - День(Объект.ДатаПредоставления);
				Иначе
					ДнейВМесяце = День(КонецМесяца(ТекущийМесяц)) - День(Объект.ДатаПредоставления);
				КонецЕсли;
			Иначе
				Если ТекущийМесяц = МесяцОкончания Тогда
					ДнейВМесяце = Мин(День(КонецМесяца(ТекущийМесяц)), День(Объект.ДатаОкончания));
				Иначе
					ДнейВМесяце = День(КонецМесяца(ТекущийМесяц));
				КонецЕсли;
			КонецЕсли;
			НачислениеПроцентов = Объект.СуммаДокумента * Объект.ПроцентнаяСтавкаГодовая * 0.01 * ДнейВМесяце / ДнейВГоду;
			
			ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
			НомерМесяца = НомерМесяца + 1;
			
			НакопленоПроцентов = НакопленоПроцентов + НачислениеПроцентов;
			
		КонецЦикла;
		
		Объект.РазмерПлатежа = Объект.СуммаДокумента + НакопленоПроцентов;
		Объект.ГрафикПлатежейИНачислений.Очистить();
		НоваяСтрокаГрафика = Объект.ГрафикПлатежейИНачислений.Добавить();
		НоваяСтрокаГрафика.Период = Объект.ДатаОкончания;
		НоваяСтрокаГрафика.СуммаОсновногоДолга = Объект.СуммаДокумента;
		НоваяСтрокаГрафика.СуммаПроцентов = НакопленоПроцентов;
		НоваяСтрокаГрафика.СуммаПлатежа = Объект.РазмерПлатежа;
		СтрокаВидДоговора = ?(Объект.ВидДоговора = ВидДоговораДоговорЗайма, "займа", "кредита");
		Если Объект.СуммаДокумента > 0 И Объект.ПроцентнаяСтавкаГодовая <> 0 Тогда
			НоваяСтрокаГрафика.Комментарий = """Сумма %"" составляет "+Формат(НоваяСтрокаГрафика.СуммаПроцентов / Объект.СуммаДокумента * 100, "ЧДЦ=2; ЧН=0")+"% от суммы "+СтрокаВидДоговора+". Остаток долга = 0 ("+Объект.ВалютаРасчетов+").";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет количество дней в месяце.
//
// Параметры:
//	Дата - любая дата месяца
//
// Возвращаемое значение
//	- число, количество дней в месяце
//
&НаСервереБезКонтекста
Функция КоличествоДнейМесяца(Дата, ВГоду360Дней) Экспорт
	
	Если ВГоду360Дней Тогда
		Возврат 30;
	Иначе
		Возврат День(КонецМесяца(Дата));
	КонецЕсли;
	
КонецФункции

// Функция определяет количество дней в году.
//
// Параметры:
//	- Год - число 
//
&НаСервереБезКонтекста
Функция КоличествоДнейВГоду(Год, ВГоду360Дней) Экспорт
	
	Если ВГоду360Дней Тогда
		Возврат 360;
	Иначе
		// Если в феврале 29 дней - то 366, иначе 365.
		Если День(КонецМесяца(Дата(Год, 2, 1))) = 29 Тогда
			Возврат 366;
		Иначе
			Возврат 365;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоместитьГрафикПлатежейИНачисленийВХранилище()

	АдресВХранилище = ПоместитьВоВременноеХранилище(Объект.ГрафикПлатежейИНачислений.Выгрузить(), УникальныйИдентификатор);
	Возврат АдресВХранилище;

КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммуПлатежа(ТекущиеДанные)
	
	ТекущиеДанные.СуммаПлатежа = ТекущиеДанные.СуммаОсновногоДолга + ТекущиеДанные.СуммаПроцентов + ТекущиеДанные.СуммаКомиссии;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуПлатежаНаСервере(ТекущиеДанные)
	
	ТекущиеДанные.СуммаПлатежа = ТекущиеДанные.СуммаОсновногоДолга + ТекущиеДанные.СуммаПроцентов + ТекущиеДанные.СуммаКомиссии;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовВЗависимостиОтВидаДоговора()
	
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКредитаИЗайма.КредитПолученный") Тогда
		
		Элементы.Сотрудник.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.ПогашатьИзЗаработнойПлаты.Видимость = Ложь;
		Элементы.НадписьРазделительВместоФлагаПогашатьИзЗП.Видимость = Истина;
		
		Элементы.СтраницаВыдача.Заголовок = "Получение кредита";
		
	Иначе
		
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ПогашатьИзЗаработнойПлаты.Видимость = Истина;
		Элементы.НадписьРазделительВместоФлагаПогашатьИзЗП.Видимость = Ложь;
		
		Элементы.СтраницаВыдача.Заголовок = "Выдача займа";
		
	КонецЕсли;
	
	НастроитьЭлементыПоТипуКомиссииИВидуДоговора();
	УстановитьВидимостьУдержаний();
	
КонецПроцедуры // УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации()

// Процедура устанавливает видимость элементов, которые связаны с реквизитами "УдержаниеОсновнойДолг" и "УдержаниеПроценты".
&НаСервере
Процедура УстановитьВидимостьУдержаний()
	
	ВидимостьОсновногоДолга = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата") И 
		Объект.ПогашатьИзЗаработнойПлаты И 
		Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику");
	ВидимостьПроцентов = ВидимостьОсновногоДолга И Объект.ПроцентнаяСтавкаГодовая <> 0;
	
	Элементы.УдержаниеОсновнойДолг.Видимость = ВидимостьОсновногоДолга;
	Элементы.УдержаниеПроценты.Видимость = ВидимостьПроцентов;
	
КонецПроцедуры

// Процедура устанавливает значения счетов учета по умолчанию в зависимости от вида договора.
//
&НаСервере
Процедура УстановитьЗначенияПоУмолчаниюДляВидаДоговора()

	Если Объект.ВидДоговора = ВидДоговораДоговорЗайма Тогда
		Объект.СчетУчета = ПланыСчетов.Управленческий.РасчетыПоПредоставленнымЗаймам;
		Объект.СчетУчетаКомиссии = ПланыСчетов.Управленческий.РасчетыПоПредоставленнымЗаймам;
		Объект.СчетУчетаПроцентов = ПланыСчетов.Управленческий.РасчетыПоПредоставленнымЗаймам;
		Объект.СчетЗатрат = ПланыСчетов.Управленческий.ПроцентыПоКредитам;
	Иначе
		Объект.СчетУчета = ПланыСчетов.Управленческий.РасчетыПоКраткосрочнымКредитамИЗаймам;
		Объект.СчетУчетаКомиссии = ПланыСчетов.Управленческий.РасчетыПоКраткосрочнымКредитамИЗаймам;
		Объект.СчетУчетаПроцентов = ПланыСчетов.Управленческий.РасчетыПоКраткосрочнымКредитамИЗаймам;
		Объект.СчетЗатрат = ПланыСчетов.Управленческий.ПроцентыПоКредитам;
	КонецЕсли;
	
	ЗаполнитьЗначенияПараметровУчетаПоУмолчаниюНаСервере();
	УстановитьВидимостьПараметровУчетаНаСервере();
	
КонецПроцедуры

// Процедура очищает реквизиты в зависимости от выбранного вида договора.
//
&НаСервере
Процедура ОчиститьРеквизитыНеОтносящиесяКВидуДоговора()

	Если Объект.ВидДоговора = ВидДоговораДоговорЗайма Тогда
		Объект.Контрагент = Неопределено;
		Объект.РазмерКомиссии = 0;
		
		Для каждого ТекущаяСтрокаГрафика Из Объект.ГрафикПлатежейИНачислений Цикл
				
			ТекущаяСтрокаГрафика.СуммаКомиссии = 0;
			ПересчитатьСуммуПлатежаНаСервере(ТекущаяСтрокаГрафика);
		
		КонецЦикла;
	Иначе
		Объект.Сотрудник = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость реквизитов в зависимости от типа счетов учета.
//
&НаСервере
Процедура УстановитьВидимостьПараметровУчетаНаСервере()

	Если Объект.СчетУчета.ТипСчета = Перечисления.ТипыСчетов.Расходы Или
		Объект.СчетУчетаКомиссии.ТипСчета = Перечисления.ТипыСчетов.Расходы Или
		Объект.СчетУчетаПроцентов.ТипСчета = Перечисления.ТипыСчетов.Расходы 
	Тогда
		ВидимостьПараметровУчета = Истина;
	Иначе
		ВидимостьПараметровУчета = Ложь;
	КонецЕсли;
	
	Элементы.СтруктурнаяЕдиница.Видимость = ВидимостьПараметровУчета;
	Элементы.НаправлениеДеятельности.Видимость = ВидимостьПараметровУчета;
	Элементы.Заказ.Видимость = ВидимостьПараметровУчета;
	
КонецПроцедуры

// Процедура заполняет по умолчанию реквизиты в зависимости от типа счетов учета.
//
&НаСервере
Процедура ЗаполнитьЗначенияПараметровУчетаПоУмолчаниюНаСервере()
	
	Если Объект.СчетУчета.ТипСчета = Перечисления.ТипыСчетов.Расходы Или
		Объект.СчетУчетаКомиссии.ТипСчета = Перечисления.ТипыСчетов.Расходы Или
		Объект.СчетУчетаПроцентов.ТипСчета = Перечисления.ТипыСчетов.Расходы 
	Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользовательСистемы, "ОсновноеПодразделение");
			Объект.Подразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		КонецЕсли;
		Объект.Заказ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура настраивает элементы, которые используются для настройки и заполнения комиссии кредита (займа).
//
&НаСервере
Процедура НастроитьЭлементыПоТипуКомиссииИВидуДоговора()
	
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКредитаИЗайма.КредитПолученный") Тогда
		
		Элементы.КомиссияПоГрафику.Видимость = Истина;
		Элементы.ТипКомиссии.Видимость = Истина;
		Элементы.РазмерКомиссии.Видимость = Истина;
		
		ЕстьКомиссия = (Объект.ТипКомиссии <> Перечисления.ТипыКомиссииКредитовИЗаймов.Нет);
		Элементы.РазмерКомиссии.Видимость = ЕстьКомиссия И (Объект.ТипКомиссии <> Перечисления.ТипыКомиссииКредитовИЗаймов.ПроизвольныйГрафик);
		Элементы.ГрафикПлатежейИНачисленийСуммаКомиссии.Видимость = ЕстьКомиссия;
		Элементы.СчетУчетаКомиссии.Видимость = ЕстьКомиссия;
		
	Иначе
		
		Элементы.ГрафикПлатежейИНачисленийСуммаКомиссии.Видимость = Ложь;
		Элементы.ТипКомиссии.Видимость = Ложь;
		Элементы.РазмерКомиссии.Видимость = Ложь;
		Элементы.КомиссияПоГрафику.Видимость = Ложь;
		Элементы.СчетУчетаКомиссии.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ПояснениеПоСтавке.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеГрафикаИВычислениеРазмераПлатежа

// Функция возвращает таблицу с графиком погашения (выплат), если даты предоставления кредита (займа) находятся в одном месяце.
//
&НаСервере
Функция ГрафикПогашенияОдинМесяц(РазмерПлатежа)
	
	ГрафикПогашения = Новый Массив;
	
	// Обработаем ситуацию, когда заём выдаётся в пределах одного месяца.
	ДнейВМесяце = День(Объект.ДатаОкончания) - День(Объект.ДатаПредоставления) + 1; // Проценты начисляются со следующего дня после выдачи по дату оплаты включительно.
		
	НачисленоПроцентов = Объект.СуммаДокумента * Объект.ПроцентнаяСтавкаГодовая * 0.01 * ДнейВМесяце / КоличествоДнейВГоду(Год(Объект.ДатаПредоставления), Объект.ВГоду360Дней);
	НачисленоОсновногоДолга = Объект.СуммаДокумента;
	
	ЕжемесячныйПлатеж = НачисленоПроцентов + НачисленоОсновногоДолга;
	
	// Ежемесячный платеж сумма займа и проценты.
	СтрокаГрафика = ОписаниеСтрокиГрафикаПогашенияЗайма(Объект.ВГоду360Дней);
	СтрокаГрафика.НомерМесяца			= 1;
	СтрокаГрафика.ОстатокДолга			= 0; 
	СтрокаГрафика.НачислениеПроцентов	= НачисленоПроцентов; 
	СтрокаГрафика.ПогашениеПроцентов	= НачисленоПроцентов; 
	СтрокаГрафика.ПогашениеДолга		= НачисленоОсновногоДолга; 
	СтрокаГрафика.ЕжемесячныйПлатеж		= ЕжемесячныйПлатеж;
	СтрокаГрафика.СальдоВзаиморасчетов	= 0;
	СтрокаГрафика.ДатаПлатежа			= КонецДня(Объект.ДатаОкончания)+1;
	
	ГрафикПогашения.Добавить(СтрокаГрафика);
	
	Возврат ГрафикПогашения;
	
КонецФункции

// Функция возвращает таблицу с графиком погашения (выплат), если даты предоставления кредита (займа) находятся в разных месяцах.
//
&НаСервере
Функция ГрафикПогашенияНесколькоМесяцев(РазмерПлатежа)
	
	ГрафикПогашения = Новый Массив;
	
	// Определяем некоторые часто используемые параметры.
	ДатаОкончания = Объект.ДатаОкончания;
	ДатаПредоставления = Объект.ДатаПредоставления;
	МесяцОкончания = НачалоМесяца(Объект.ДатаОкончания);
	РазмерПлатежа = РазмерПлатежа;
	РазмерПогашения = РазмерПлатежа;
	ВидПлатежей = Объект.ВидПлатежей;
	
	// Обработаем ситуацию, когда заем выдается в пределах нескольких месяцев.
	// Заполняем массив структур, 
	// по полю Остаток долга в последнем элементе массива будем определять результат функции для интерполирующего поиска.
	ОстатокДолга			= Объект.СуммаДокумента;
	НакопленоПроцентов		= 0;
	НакопленоОсновногоДолга	= 0;
	СальдоВзаиморасчетов	= ОстатокДолга;
	НомерМесяца				= 1;
	
	// Виды платежей, когда размер платежа определяется, 
	// отталкиваясь от размера погашения основного долга, а не задается фиксированным.
	ВидыПлатежейРазмерПогашения = Новый Массив;
	ВидыПлатежейРазмерПогашения.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ДифференцированныеПлатежи"));
	ВидыПлатежейРазмерПогашения.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ТолькоЗаем"));
	
	ДатаНачалаПогашения = ?(Объект.ДатаНачалаПогашения = '00010101', ДобавитьМесяц(Объект.ДатаПредоставления, 1), Объект.ДатаНачалаПогашения);
	ДатаНачалаПогашенияРавнаКонцуМесяца = (КонецДня(ДатаНачалаПогашения) = КонецМесяца(ДатаНачалаПогашения)); // Если к 31.01 прибавить 1 месяц, то получим 28.02 (или 29.02). Если к 29.02 прибавить месяц, то получим 29.03, т.е. не конец месяца.
	СледующаяДатаПлатежа = ДобавитьМесяц(ДатаНачалаПогашения, -1);
	Если ДатаНачалаПогашенияРавнаКонцуМесяца Тогда
		СледующаяДатаПлатежа = КонецМесяца(СледующаяДатаПлатежа);
	КонецЕсли;
	МесяцНачала = НачалоМесяца(СледующаяДатаПлатежа);
	ТекущийМесяц = МесяцНачала;
	Пока СледующаяДатаПлатежа < ДатаОкончания Цикл
		
		// Пример: расчетный месяц с 10.04 - 10.05. Т.е. с 10.04 по 09.05 и дата платежа 10.05.
		// Рассчитываем проценты за месяц.
		ПредыдущаяДатаПлатежа = СледующаяДатаПлатежа;
		ДатаПлатежа = ДобавитьМесяц(СледующаяДатаПлатежа, 1);
		Если ДатаНачалаПогашенияРавнаКонцуМесяца Тогда
			ДатаПлатежа = КонецМесяца(ДатаПлатежа);
		КонецЕсли;
		СледующаяДатаПлатежа = Мин(ДатаПлатежа, КонецДня(ДатаОкончания)+1);
		ДнейВГодуПредыдущаяДатаПлатежа = КоличествоДнейВГоду(Год(ПредыдущаяДатаПлатежа), Объект.ВГоду360Дней);
		ДнейВГодуСледующаяДатаПлатежа = КоличествоДнейВГоду(Год(СледующаяДатаПлатежа), Объект.ВГоду360Дней);
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Рассчитаем параметры до конца месяца.
		Если Объект.ВГоду360Дней Тогда
			ДнейВМесяце = 30 - Мин(День(ПредыдущаяДатаПлатежа), 30);
		Иначе
			ДнейВМесяце = День(КонецМесяца(ПредыдущаяДатаПлатежа)) - День(ПредыдущаяДатаПлатежа);
		КонецЕсли;
		НачислениеПроцентовПред = Макс(ОстатокДолга, 0) * Объект.ПроцентнаяСтавкаГодовая * 0.01 * ДнейВМесяце / ДнейВГодуПредыдущаяДатаПлатежа;
		НачислениеПроцентовПред = Окр(НачислениеПроцентовПред, 2);
		
		Если ВидыПлатежейРазмерПогашения.Найти(ВидПлатежей) <> Неопределено Тогда
		// Размер погашения уменьшаем пропорционально прошедшему времени (со дня выдачи).
			НачисленоОсновногоДолгаПред = РазмерПогашения * ДнейВМесяце / КоличествоДнейМесяца(ПредыдущаяДатаПлатежа, Объект.ВГоду360Дней);
			НачисленоОсновногоДолгаПред = Окр(НачисленоОсновногоДолгаПред, 2);
		КонецЕсли;
			
		////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Рассчитаем параметры с начала месяца.
		Если Объект.ВГоду360Дней Тогда
			ДнейВМесяце = Мин(День(СледующаяДатаПлатежа), 30);
		Иначе
			ДнейВМесяце = День(СледующаяДатаПлатежа);
		КонецЕсли;
		НачислениеПроцентовСлед = Макс(ОстатокДолга, 0) * Объект.ПроцентнаяСтавкаГодовая * 0.01 * ДнейВМесяце / ДнейВГодуСледующаяДатаПлатежа;
		НачислениеПроцентовСлед = Окр(НачислениеПроцентовСлед, 2);
			
		Если ВидыПлатежейРазмерПогашения.Найти(ВидПлатежей) <> Неопределено Тогда
		// Размер погашения уменьшаем пропорционально прошедшему времени (со дня выдачи).
			НачисленоОсновногоДолгаСлед	= РазмерПогашения * ДнейВМесяце / КоличествоДнейМесяца(СледующаяДатаПлатежа, Объект.ВГоду360Дней);
			НачисленоОсновногоДолгаСлед = Окр(НачисленоОсновногоДолгаСлед, 2);
		КонецЕсли;
		
		НачислениеПроцентов = НачислениеПроцентовПред + НачислениеПроцентовСлед;
		Если ВидыПлатежейРазмерПогашения.Найти(ВидПлатежей) <> Неопределено Тогда
			НачисленоОсновногоДолга = НачисленоОсновногоДолгаПред + НачисленоОсновногоДолгаСлед;
		Иначе
			НачисленоОсновногоДолга = РазмерПлатежа - НачислениеПроцентов;
		КонецЕсли;
		
		// рассчитываем погашение
		ПогашениеПроцентов	= 0;
		ПогашениеДолга		= 0;
		ЕжемесячныйПлатеж	= 0;
		Если Объект.ВариантПогашения = ПредопределенноеЗначение("Перечисление.ВариантыПогашенияЗаймаСотрудником.ЕжемесячноеПогашение") Тогда
			// Погашение производится в течение срока.
			Если ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.АннуитетныеПлатежи") Тогда
				ЕжемесячныйПлатеж	= РазмерПлатежа;
				ПогашениеПроцентов	= НачислениеПроцентов;
				ПогашениеДолга		= ЕжемесячныйПлатеж - ПогашениеПроцентов;
			ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ДифференцированныеПлатежи") Тогда
				ПогашениеПроцентов	= НачислениеПроцентов;
				ПогашениеДолга		= НачисленоОсновногоДолга;
			ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ТолькоЗаем") Тогда
				Если ТекущийМесяц = МесяцОкончания Тогда
					// В последний месяц включаем весь платеж.
					ПогашениеПроцентов = НакопленоПроцентов;
				КонецЕсли;
				ПогашениеДолга = РазмерПогашения;
			ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ТолькоПроценты") Тогда
				Если ТекущийМесяц = МесяцОкончания Тогда
					// В последний месяц включаем весь платеж.
					ПогашениеДолга = НакопленоОсновногоДолга;
				КонецЕсли;
				ПогашениеПроцентов = НачислениеПроцентов;
			ИначеЕсли ВидПлатежей = ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.ПроизвольныйГрафик") Тогда
				ПогашениеДолга = РазмерПогашения;
			КонецЕсли;
		КонецЕсли;
		
		// В последний месяц включаем остатки сумм.
		Если СледующаяДатаПлатежа >= ДатаОкончания И
			ВидПлатежей <> ПредопределенноеЗначение("Перечисление.ВидыПлатежейПогашенияКредитаИЗайма.АннуитетныеПлатежи") Тогда
			// В последний месяц включаем весь платеж.
			ПогашениеПроцентов = НакопленоПроцентов + НачислениеПроцентов;
			ПогашениеДолга = ОстатокДолга;
		КонецЕсли;
		
		// Ежемесячный платеж сумма займа и проценты.
		ЕжемесячныйПлатеж = ПогашениеДолга + ПогашениеПроцентов;
		
		СальдоВзаиморасчетов = СальдоВзаиморасчетов + НачислениеПроцентов - ЕжемесячныйПлатеж;
		
		СтрокаГрафика = ОписаниеСтрокиГрафикаПогашенияЗайма(Объект.ВГоду360Дней);
		СтрокаГрафика.НомерМесяца			= НомерМесяца;
		СтрокаГрафика.Месяц					= ТекущийМесяц; 
		СтрокаГрафика.ОстатокДолга			= ОстатокДолга; 
		СтрокаГрафика.НачислениеПроцентов	= НачислениеПроцентов; 
		СтрокаГрафика.ПогашениеПроцентов	= ПогашениеПроцентов; 
		СтрокаГрафика.ПогашениеДолга		= ПогашениеДолга; 
		СтрокаГрафика.ЕжемесячныйПлатеж		= ЕжемесячныйПлатеж;
		СтрокаГрафика.СальдоВзаиморасчетов	= СальдоВзаиморасчетов;
		СтрокаГрафика.ДатаПлатежа			= СледующаяДатаПлатежа;
		
		ГрафикПогашения.Добавить(СтрокаГрафика);
		
		// обновляем счетчики
		ОстатокДолга			= ОстатокДолга - ПогашениеДолга;
		НакопленоПроцентов		= НакопленоПроцентов + НачислениеПроцентов - ПогашениеПроцентов;
		НакопленоОсновногоДолга	= НакопленоОсновногоДолга + НачисленоОсновногоДолга - ПогашениеДолга;
		
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
		НомерМесяца = НомерМесяца + 1;
		
	КонецЦикла;
	
	// Возможно, что в результате распределения небольшая сумма долга не распределилась. Распределим её на основной долг уменьшая проценты.
	// Начнём с последней строки.
	Если СальдоВзаиморасчетов <> 0 И ГрафикПогашения.Количество() > 0 Тогда
		Сч = ГрафикПогашения.Количество() - 1;
		Если СальдоВзаиморасчетов > 0 Тогда
			Пока СальдоВзаиморасчетов > 0 И Сч >= 0 Цикл;
				СтрокаГрафика = ГрафикПогашения[Сч];
				
				Если СтрокаГрафика.ПогашениеПроцентов >= СальдоВзаиморасчетов Тогда
					СтрокаГрафика.ПогашениеДолга = СтрокаГрафика.ПогашениеДолга + СальдоВзаиморасчетов;
					СтрокаГрафика.НачислениеПроцентов = СтрокаГрафика.НачислениеПроцентов - СальдоВзаиморасчетов;
					СтрокаГрафика.ПогашениеПроцентов = СтрокаГрафика.ПогашениеПроцентов - СальдоВзаиморасчетов;
					СальдоВзаиморасчетов = 0;
				ИначеЕсли СтрокаГрафика.ПогашениеПроцентов > 0 Тогда
					СтрокаГрафика.ПогашениеДолга = СтрокаГрафика.ПогашениеДолга + СтрокаГрафика.ПогашениеПроцентов;
					СтрокаГрафика.НачислениеПроцентов = СтрокаГрафика.НачислениеПроцентов - СтрокаГрафика.ПогашениеПроцентов;
					СальдоВзаиморасчетов = СальдоВзаиморасчетов - СтрокаГрафика.ПогашениеПроцентов;
					СтрокаГрафика.ПогашениеПроцентов = СтрокаГрафика.ПогашениеПроцентов - СтрокаГрафика.ПогашениеПроцентов;
				КонецЕсли;
				
				Сч = Сч - 1;
			КонецЦикла;
		Иначе
			Пока СальдоВзаиморасчетов < 0 И Сч >= 0 Цикл;
				СтрокаГрафика = ГрафикПогашения[Сч];
				
				Если СтрокаГрафика.ПогашениеДолга >= -СальдоВзаиморасчетов Тогда
					СтрокаГрафика.ПогашениеДолга = СтрокаГрафика.ПогашениеДолга + СальдоВзаиморасчетов;
					СтрокаГрафика.НачислениеПроцентов = СтрокаГрафика.НачислениеПроцентов - СальдоВзаиморасчетов;
					СтрокаГрафика.ПогашениеПроцентов = СтрокаГрафика.ПогашениеПроцентов - СальдоВзаиморасчетов;
					СальдоВзаиморасчетов = 0;
				ИначеЕсли СтрокаГрафика.ПогашениеДолга > 0 Тогда
					СтрокаГрафика.НачислениеПроцентов = СтрокаГрафика.НачислениеПроцентов + СтрокаГрафика.ПогашениеДолга;
					СтрокаГрафика.ПогашениеПроцентов = СтрокаГрафика.ПогашениеПроцентов + СтрокаГрафика.ПогашениеДолга;
					СальдоВзаиморасчетов = СальдоВзаиморасчетов + СтрокаГрафика.ПогашениеДолга;
					СтрокаГрафика.ПогашениеДолга = 0;
				КонецЕсли;
				
				Сч = Сч - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ГрафикПогашения;
	
КонецФункции

// Функция имитирует погашение займа за весь срок с указанными параметрами.
// Используется как при собственно построении графика погашения (выплат), 
// так и методами интерполирующего поиска оптимального значения размера платежа 
// и срока погашения.
// 
// Параметры:
//	- РазмерПлатежа - размер платежа, для которого нужно построить график погашения.
//
// Возвращаемое значение - массив структур, каждая из которых является значениями, 
// описывающими погашение займа за конкретный месяц.
//
&НаСервере
Функция ГрафикПогашения(РазмерПлатежа) Экспорт
	
	// Определяем некоторые часто используемые параметры.
	МесяцНачала = НачалоМесяца(Объект.ДатаПредоставления);
	МесяцОкончания = НачалоМесяца(Объект.ДатаОкончания);
	
	// Обработаем ситуацию, когда заём выдаётся в пределах одного месяца.
	Если МесяцНачала = МесяцОкончания Тогда
		Возврат ГрафикПогашенияОдинМесяц(РазмерПлатежа);
	Иначе
		Возврат ГрафикПогашенияНесколькоМесяцев(РазмерПлатежа);
	КонецЕсли;
	
КонецФункции

// Процедура заполняет график платежей.
//
&НаСервере
Процедура ЗаполнитьГрафикПлатежейИНачисленийНаСервере()
	
	Объект.ГрафикПлатежейИНачислений.Очистить();
	
	СуммаПлатежей = 0;
	НомерМесяца = 1;
	СальдоВзаиморасчетов = Неопределено;
	
	ГрафикПогашения = ГрафикПогашения(Объект.РазмерПлатежа);
	
	ОстатокДолга = Объект.СуммаДокумента;
	Для Каждого СтрокаГрафика Из ГрафикПогашения Цикл
		ОстатокДолга = ОстатокДолга - ОКР(СтрокаГрафика.ПогашениеДолга, 2);
		
		НоваяСтрокаГрафика = Объект.ГрафикПлатежейИНачислений.Добавить();
		НоваяСтрокаГрафика.Период = СтрокаГрафика.ДатаПлатежа;
		
		ЕжемесячныйПлатеж = СтрокаГрафика.ЕжемесячныйПлатеж;
		Если Объект.ТипКомиссии = Перечисления.ТипыКомиссииКредитовИЗаймов.ПроцентОтСуммыКредита Тогда
			СуммаКомиссии = Объект.СуммаДокумента * Объект.РазмерКомиссии / 100;
		ИначеЕсли Объект.ТипКомиссии = Перечисления.ТипыКомиссииКредитовИЗаймов.ПроцентОтОстаткаСуммыКредита Тогда
			СуммаКомиссии = ОстатокДолга * Объект.РазмерКомиссии / 100;
		ИначеЕсли Объект.ТипКомиссии = Перечисления.ТипыКомиссииКредитовИЗаймов.Сумма Тогда
			СуммаКомиссии = Объект.РазмерКомиссии;
		Иначе
			СуммаКомиссии = 0;
		КонецЕсли;
			
		НоваяСтрокаГрафика.СуммаКомиссии = СуммаКомиссии;
		НоваяСтрокаГрафика.СуммаПлатежа = СтрокаГрафика.ЕжемесячныйПлатеж + СуммаКомиссии;
		НоваяСтрокаГрафика.СуммаОсновногоДолга = СтрокаГрафика.ПогашениеДолга;
		НоваяСтрокаГрафика.СуммаПроцентов = СтрокаГрафика.ПогашениеПроцентов;
		СтрокаВидДоговора = ?(Объект.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику, "займа", "кредита");
		Если Объект.ПроцентнаяСтавкаГодовая <> 0 Тогда
			НоваяСтрокаГрафика.Комментарий = """Сумма %"" составляет "+Формат(НоваяСтрокаГрафика.СуммаПроцентов / Объект.СуммаДокумента * 100, "ЧДЦ=2; ЧН=0")+"% от суммы "+СтрокаВидДоговора+". ";
		Иначе
			НоваяСтрокаГрафика.Комментарий = "";
		КонецЕсли;
		НоваяСтрокаГрафика.Комментарий = НоваяСтрокаГрафика.Комментарий+"Остаток долга = "+Формат(ОстатокДолга, "ЧДЦ=2; ЧН=0")+" ("+Объект.ВалютаРасчетов+").";
		
		НомерМесяца = НомерМесяца + 1;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Конструирует структуру для описания строки графика погашения займа (выплат по кредиту).
//
&НаСервереБезКонтекста
Функция ОписаниеСтрокиГрафикаПогашенияЗайма(ВГоду360Дней) Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("НомерМесяца", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Месяц", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("ДатаПлатежа", Новый ОписаниеТипов("Дата"));
	
	ПоляОписания.Вставить("ОстатокДолга", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("НачислениеПроцентов", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ПогашениеПроцентов", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ПогашениеДолга", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ЕжемесячныйПлатеж", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("СальдоВзаиморасчетов", Новый ОписаниеТипов("Число"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

// Процедура обновляет информацию в полее Комментарий табличной части ГрафикПлатежейИНачислений.
//
&НаКлиенте
Процедура ОбновитьИнформациюВПолеКомментарий(Команда)
	
	ОстатокДолга = Объект.СуммаДокумента;
	Для Каждого СтрокаГрафика Из Объект.ГрафикПлатежейИНачислений Цикл
		ОстатокДолга = ОстатокДолга - СтрокаГрафика.СуммаОсновногоДолга;
		
		СтрокаВидДоговора = ?(Объект.ВидДоговора = ВидДоговораДоговорЗайма, "займа", "кредита");
		Если Объект.ПроцентнаяСтавкаГодовая <> 0 Тогда
			СтрокаГрафика.Комментарий = """Сумма %"" составляет "+Формат(СтрокаГрафика.СуммаПроцентов / Объект.СуммаДокумента * 100, "ЧДЦ=2; ЧН=0")+"% от суммы "+СтрокаВидДоговора+". ";
		Иначе
			СтрокаГрафика.Комментарий = "";
		КонецЕсли;
		СтрокаГрафика.Комментарий = СтрокаГрафика.Комментарий+"Остаток долга = "+Формат(ОстатокДолга, "ЧДЦ=2; ЧН=0")+" ("+Объект.ВалютаРасчетов+").";
	КонецЦикла;
	
КонецПроцедуры

// Метод подбирает размер аннуитетного платежа 
// (фиксированного на весь срок период погашения займа).
//
// Параметры:
//	- ДанныеЗайма - структура
//
&НаКлиенте
Функция РазмерАннуитетногоПлатежа() Экспорт
	
	// Поиск подходящего размера платежа выполняем интерполяционным поиском:
	// - в первом приближении считаем, что размер платежа равен аннуитентному платежу 
	// при единовременной выдаче всех траншей
	// - получаем остаток долга после выполнения всех платежей с таким размером
	// - во втором приближении считаем, что размер платежа на 20% меньше, чем аннуитентный платеж
	// при единовременной выдаче
	// - далее уменьшаем размер платежа пропорционально изменению остатка долга.
	
	// Делаем первое предположение.
	Сумма = Объект.СуммаДокумента;
	Если НачалоМесяца(Объект.ДатаПредоставления) = НачалоМесяца(Объект.ДатаОкончания) Тогда
		
		ДнейВМесяце = День(Объект.ДатаОкончания) - День(Объект.ДатаПредоставления) + 1; // Проценты начисляются со следующего дня после выдачи по дату оплаты включительно.
		НачисленоПроцентов = Объект.СуммаДокумента * Объект.ПроцентнаяСтавкаГодовая * 0.01 * ДнейВМесяце / КоличествоДнейВГоду(Год(Объект.ДатаПредоставления), Объект.ВГоду360Дней);
		
		Возврат Сумма + НачисленоПроцентов;
		
	Иначе
		
		ПредыдущийРазмерПлатежа = Сумма * ЗаймыСотрудникамКлиентПовтИсп.КоэффициентАннуитета(
					ЗаймыСотрудникамКлиентПовтИсп.ПроцентнаяСтавкаЗаМесяц(Объект.ПроцентнаяСтавкаГодовая) * 0.01, 
					ЗаймыСотрудникамКлиентПовтИсп.СрокПоДатеОкончания(Объект.ДатаОкончания, Объект.ДатаПредоставления));
		ПредыдущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ПредыдущийРазмерПлатежа);
		
		// Нет необходимости в расчетах, если ПредыдущийРазмерПлатежа полностью покрывает долг.
		Если Не ЗначениеЗаполнено(ПредыдущийОстатокДолга) Тогда
			Возврат ПредыдущийРазмерПлатежа;
		КонецЕсли;

		// Делаем второе предположение.
		ТекущийРазмерПлатежа = ПредыдущийРазмерПлатежа * 0.8;
		ТекущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ТекущийРазмерПлатежа);
		
		// Подбираем размер платежа, пока подобранный размер не будет приводить к нулевому остатку после всех платежей.
		Пока Окр(ТекущийОстатокДолга, 2) <> 0 
			И (Окр(ТекущийОстатокДолга, 2) > 0.01 ИЛИ Окр(ТекущийОстатокДолга, 2) < -0.01)
			И ТекущийРазмерПлатежа <> ПредыдущийРазмерПлатежа 
			И ТекущийОстатокДолга <> ПредыдущийОстатокДолга Цикл
			ИзменениеРазмераПлатежа = ТекущийРазмерПлатежа - ПредыдущийРазмерПлатежа;
			ПредыдущийРазмерПлатежа = ТекущийРазмерПлатежа;
			ТекущийРазмерПлатежа = ТекущийРазмерПлатежа - ИзменениеРазмераПлатежа - (ПредыдущийОстатокДолга / (ТекущийОстатокДолга - ПредыдущийОстатокДолга)) * ИзменениеРазмераПлатежа;
			ПредыдущийОстатокДолга = ТекущийОстатокДолга;
			ТекущийОстатокДолга = СальдоВзаиморасчетовПоЗавершению(ТекущийРазмерПлатежа);
		КонецЦикла;
		
		Возврат ТекущийРазмерПлатежа;
		
	КонецЕсли;
	
КонецФункции

// По фиксированному размеру платежа функция определяет 
// конечное сальдо после всех выполненных платежей такого размера.
// Используется для интерполирующего поиска размера платежа.
//
// Параметры:
// - РазмерПлатежа - размер фиксированного платежа.
//
&НаКлиенте
Функция СальдоВзаиморасчетовПоЗавершению(РазмерПлатежа)
	
	ГрафикПогашения = ГрафикПогашения(РазмерПлатежа);
				
	Если ГрафикПогашения.Количество() = 0 Тогда
		Возврат Объект.СуммаДокумента;
	КонецЕсли;
	
	СальдоПоЗавершению = ГрафикПогашения[ГрафикПогашения.ВГраница()].СальдоВзаиморасчетов;
	Если СальдоПоЗавершению <> 0 Тогда
		Возврат СальдоПоЗавершению;
	КонецЕсли;
	
	Индекс = ГрафикПогашения.ВГраница() - 1;
	Пока Индекс >= 0 Цикл
		Если ГрафикПогашения[Индекс].ОстатокДолга <> 0 Тогда
			Возврат ГрафикПогашения[Индекс].СальдоВзаиморасчетов;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтаФорма,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтаФорма,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
