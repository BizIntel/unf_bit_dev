
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Если Объект.СпособВводаДанных = ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВцеломЗаПериод") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремяЗаПериод;
	Иначе	
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремяПоДням;
	КонецЕсли;
	
	Если Объект.СпособВводаДанных <> ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВцеломЗаПериод") Тогда
	
		СоответствиеДнейНедели = Новый Соответствие;
		СоответствиеДнейНедели.Вставить(1, "Пн");
		СоответствиеДнейНедели.Вставить(2, "Вт");
		СоответствиеДнейНедели.Вставить(3, "Ср");
		СоответствиеДнейНедели.Вставить(4, "Чт");
		СоответствиеДнейНедели.Вставить(5, "Пт");
		СоответствиеДнейНедели.Вставить(6, "Сб");
		СоответствиеДнейНедели.Вставить(7, "Вс"); 
		
		Для День = 1 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Заголовок = СоответствиеДнейНедели.Получить(ДеньНедели(Дата(Год(Объект.ПериодРегистрации), Месяц(Объект.ПериодРегистрации), День)));
		КонецЦикла;
		
		Для День = 28 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямВторойЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямТретийЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямПервыйВидВремени" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямВторойВидВремени" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямТретийВидВремени" + День].Видимость = Истина;
		КонецЦикла;
		
		Для День = День(КонецМесяца(Объект.ПериодРегистрации)) + 1 По 31 Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямВторойЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямТретийЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямПервыйВидВремени" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямВторойВидВремени" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямТретийВидВремени" + День].Видимость = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		Если Элементы.Найти("ОтработанноеВремяЗаПериодСотрудникКод") <> Неопределено Тогда
			Элементы.ОтработанноеВремяЗаПериодСотрудникКод.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.Найти("ОтработанноеВремяПоДнямСотрудникКод") <> Неопределено Тогда
			Элементы.ОтработанноеВремяПоДнямСотрудникКод.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		УстановитьДниНедели();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаКалендаряПриОткрытии = ?(ЗначениеЗаполнено(Объект.ПериодРегистрации), Объект.ПериодРегистрации, УправлениеНебольшойФирмойПовтИсп.ПолучитьТекущуюДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", УправлениеНебольшойФирмойКлиент.ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииНачалоВыбора()

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	УстановитьДниНедели();
	
КонецПроцедуры //ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура СпособВводаДанныхПриИзменении(Элемент)
	
	Если Объект.СпособВводаДанных = ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВцеломЗаПериод") Тогда	
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремяЗаПериод;
	Иначе	
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОтработанноеВремяПоДням;
	КонецЕсли;
	
	Если Объект.СпособВводаДанных = ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВцеломЗаПериод") Тогда
		Объект.ОтработанноеВремяПоДням.Очистить();
	Иначе
		Объект.ОтработанноеВремяЗаПериод.Очистить();
	КонецЕсли;

КонецПроцедуры

// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// В процедуре осуществляется очистка номера документа.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ОтработанноеВремяЗаПериодСотрудникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.ОтработанноеВремяЗаПериод.ТекущиеДанные;
	
	Структура = Новый Структура;
	Структура.Вставить("Дата", КонецМесяца(Объект.ПериодРегистрации));
	Структура.Вставить("Организация", Объект.Организация);
	Структура.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
	ТекущиеДанные.Должность = ЗаполнитьДолжность(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямСотрудникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.ОтработанноеВремяПоДням.ТекущиеДанные;
	
	Структура = Новый Структура;
	Структура.Вставить("Дата", КонецМесяца(Объект.ПериодРегистрации));
	Структура.Вставить("Организация", Объект.Организация);
	Структура.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
	ТекущиеДанные.Должность = ЗаполнитьДолжность(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяЗаПериодВидВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ОтработанноеВремяЗаПериод.ТекущиеДанные;
	НомерЭлемента = Прав(Элемент.Имя, 1);
	
	МассивОграничений = Новый Массив;
	Для Счетчик = 1 По 6 Цикл
		Если Счетчик = НомерЭлемента Тогда
			Продолжить;
		КонецЕсли; 
		МассивОграничений.Добавить(ТекущаяСтрока["ВидВремени" + Счетчик]);	
	КонецЦикла; 
	
	ДанныеВыбора = ПолучитьСписокВыбора(МассивОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямПервыйВидВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ОтработанноеВремяПоДням.ТекущиеДанные;
	НомерЭлемента = СтрЗаменить(Элемент.Имя, "ОтработанноеВремяПоДнямПервыйВидВремени", "");
	
	МассивОграничений = Новый Массив;
	МассивОграничений.Добавить(ТекущаяСтрока["ВторойВидВремени" + НомерЭлемента]);
	МассивОграничений.Добавить(ТекущаяСтрока["ТретийВидВремени" + НомерЭлемента]);
	
	ДанныеВыбора = ПолучитьСписокВыбора(МассивОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямВторойВидВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ОтработанноеВремяПоДням.ТекущиеДанные;
	НомерЭлемента = СтрЗаменить(Элемент.Имя, "ОтработанноеВремяПоДнямВторойВидВремени", "");
	
	МассивОграничений = Новый Массив;
	МассивОграничений.Добавить(ТекущаяСтрока["ПервыйВидВремени" + НомерЭлемента]);
	МассивОграничений.Добавить(ТекущаяСтрока["ТретийВидВремени" + НомерЭлемента]);
	
	ДанныеВыбора = ПолучитьСписокВыбора(МассивОграничений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанноеВремяПоДнямТретийВидВремениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ОтработанноеВремяПоДням.ТекущиеДанные;
	НомерЭлемента = СтрЗаменить(Элемент.Имя, "ОтработанноеВремяПоДнямТретийВидВремени", "");
	
	МассивОграничений = Новый Массив;
	МассивОграничений.Добавить(ТекущаяСтрока["ВторойВидВремени" + НомерЭлемента]);
	МассивОграничений.Добавить(ТекущаяСтрока["ПервыйВидВремени" + НомерЭлемента]);
	
	ДанныеВыбора = ПолучитьСписокВыбора(МассивОграничений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, "Не указано подразделение!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ПериодРегистрации = '00010101000000' Тогда
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, "Не указан период регистрации!");
		Возврат;
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Если Объект.ОтработанноеВремяПоДням.Количество() > 0
	 ИЛИ Объект.ОтработанноеВремяЗаПериод.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть будет очищена! Продолжить?'"), Режим, 0);
	Иначе
		ЗаполнитьТабель();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабель();
	Иначе 
		Возврат;
	КонецЕсли;

КонецПроцедуры // Заполнить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Процедура - устанавливает дни недели в шапке таблицы.
//
&НаКлиенте
Процедура УстановитьДниНедели()
	
	Если Объект.СпособВводаДанных <> ПредопределенноеЗначение("Перечисление.СпособыВводаДанныхОВремени.ВцеломЗаПериод") Тогда
	
		СоответствиеДнейНедели = Новый Соответствие;
		СоответствиеДнейНедели.Вставить(1, "Пн");
		СоответствиеДнейНедели.Вставить(2, "Вт");
		СоответствиеДнейНедели.Вставить(3, "Ср");
		СоответствиеДнейНедели.Вставить(4, "Чт");
		СоответствиеДнейНедели.Вставить(5, "Пт");
		СоответствиеДнейНедели.Вставить(6, "Сб");
		СоответствиеДнейНедели.Вставить(7, "Вс"); 
		
		Для День = 1 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Заголовок = СоответствиеДнейНедели.Получить(ДеньНедели(Дата(Год(Объект.ПериодРегистрации), Месяц(Объект.ПериодРегистрации), День)));
		КонецЦикла;
		
		Для День = 29 По День(КонецМесяца(Объект.ПериодРегистрации)) Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямВторойЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямТретийЧасы" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямПервыйВидВремени" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямВторойВидВремени" + День].Видимость = Истина;
			Элементы["ОтработанноеВремяПоДнямТретийВидВремени" + День].Видимость = Истина;
		КонецЦикла;
		
		Для День = День(КонецМесяца(Объект.ПериодРегистрации)) + 1 По 31 Цикл
			Элементы["ОтработанноеВремяПоДнямПервыйЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямВторойЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямТретийЧасы" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямПервыйВидВремени" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямВторойВидВремени" + День].Видимость = Ложь;
			Элементы["ОтработанноеВремяПоДнямТретийВидВремени" + День].Видимость = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - возвращает должность сотрудника.
//
&НаСервереБезКонтекста
Функция ЗаполнитьДолжность(Структура)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СотрудникиСрезПоследних.Должность
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Сотрудник = &Сотрудник) КАК СотрудникиСрезПоследних");
	
	Запрос.УстановитьПараметр("Дата", Структура.Дата);
	Запрос.УстановитьПараметр("Организация", Структура.Организация);
	Запрос.УстановитьПараметр("Сотрудник", Структура.Сотрудник);
	Результат = Запрос.Выполнить();
	
	Возврат ?(Результат.Пустой(), 
		Справочники.Должности.ПустаяСсылка(), 
			Результат.Выгрузить()[0].Должность);
	
КонецФункции // ЗаполнитьДолжность()

&НаСервере
Процедура ЗаполнитьДанныеПоЧасам(РезультатЗапроса)
	
	ВидВремени = Справочники.ВидыРабочегоВремени.Работа;
	
	ВыборкаРабочихДней = РезультатЗапроса[0].Выбрать();
	ДеталиСотрудников = РезультатЗапроса[10].Выгрузить();
	
	Для каждого СтрокаТаблицы Из ДеталиСотрудников Цикл
		
		ДобавитьСтроку = Истина;
		ПериодНачало = СтрокаТаблицы.Период;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
			
			ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
			
		ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
			
			ДобавитьСтроку = Ложь;
			ПериодаОкончание = СтрокаТаблицы.Период;
			
		Иначе
			
			ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
			
		КонецЕсли;
		
		Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			
			НоваяСтрока 			= Объект.ОтработанноеВремяПоДням.Добавить();
			НоваяСтрока.Сотрудник 	= СтрокаТаблицы.Сотрудник;
			НоваяСтрока.Должность 	= СтрокаТаблицы.Должность;
			
		КонецЕсли;
		
		ВыборкаРабочихДней.Сбросить();
		Пока ВыборкаРабочихДней.Следующий() Цикл
			
			Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
				И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
				
				День = День(ВыборкаРабочихДней.ДатаГрафика);
				
				НоваяСтрока["ПервыйВидВремени" + День]	= ВидВремени;
				НоваяСтрока["ПервыйЧасы" + День] 		= 8 * СтрокаТаблицы.ЗанимаемыхСтавок;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДням(РезультатЗапроса)
	
	ВидВремени = Справочники.ВидыРабочегоВремени.Работа;
	
	ВыборкаРабочихДней = РезультатЗапроса[0].Выбрать();
	ДеталиСотрудников = РезультатЗапроса[10].Выгрузить();
	
	Для каждого СтрокаТаблицы Из ДеталиСотрудников Цикл
		
		ДобавитьСтроку = Истина;
		ПериодНачало = СтрокаТаблицы.Период;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДо) Тогда
			
			ПериодаОкончание = СтрокаТаблицы.ПериодДо - (24*60*60);
			
		ИначеЕсли СтрокаТаблицы.ЭтоУвольнение Тогда
			
			ДобавитьСтроку = Ложь;
			ПериодаОкончание = СтрокаТаблицы.Период;
			
		Иначе
			
			ПериодаОкончание = КонецМесяца(Объект.ПериодРегистрации);
			
		КонецЕсли;
		
		Если Объект.ПериодРегистрации > ПериодаОкончание Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДобавитьСтроку Тогда
			
			НоваяСтрока 			= Объект.ОтработанноеВремяЗаПериод.Добавить();
			НоваяСтрока.Сотрудник 	= СтрокаТаблицы.Сотрудник;
			НоваяСтрока.Должность 	= СтрокаТаблицы.Должность;
			НоваяСтрока.ВидВремени1 = ВидВремени;
			
		КонецЕсли;
		
		ВыборкаРабочихДней.Сбросить();
		Пока ВыборкаРабочихДней.Следующий() Цикл
			
			Если ВыборкаРабочихДней.ДатаГрафика > ПериодаОкончание Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если ВыборкаРабочихДней.ДатаГрафика >= ПериодНачало
				И ВыборкаРабочихДней.ДатаГрафика <= ПериодаОкончание Тогда
				
				НоваяСтрока.Дней1 	= НоваяСтрока.Дней1 + 1;
				НоваяСтрока.Часов1 	= НоваяСтрока.Часов1 + (8 * СтрокаТаблицы.ЗанимаемыхСтавок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет табличную часть сотрудниками подразделения по производственному календарю.
//
&НаСервере
Процедура ЗаполнитьТабель()
	
	Запрос = Новый Запрос;
		
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Календарь", Компания.ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ПериодРегистрации));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДатаГрафика >= &ДатаНачала
	|	И КалендарныеГрафики.ДатаГрафика <= &ДатаОкончания
	|	И КалендарныеГрафики.ДеньВключенВГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУвольнения.Период КАК ДатаУвольнения,
	|	ДанныеУвольнения.Сотрудник КАК УволенныйСотрудник
	|ПОМЕСТИТЬ ДанныеУвольнения
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|				И Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ДанныеУвольнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУвольнения.УволенныйСотрудник КАК УволенныйСотрудник,
	|	МАКСИМУМ(УсловияРаботыДоУвольнения.Период) КАК ПериодЗаписиПередУвольнением
	|ПОМЕСТИТЬ ПериодЗаписиУсловийТрудаДоУвольнения
	|ИЗ
	|	ДанныеУвольнения КАК ДанныеУвольнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК УсловияРаботыДоУвольнения
	|		ПО (УсловияРаботыДоУвольнения.Период <= ДанныеУвольнения.ДатаУвольнения)
	|			И ДанныеУвольнения.УволенныйСотрудник = УсловияРаботыДоУвольнения.Сотрудник
	|ГДЕ
	|	УсловияРаботыДоУвольнения.Период <= &ДатаОкончания
	|	И УсловияРаботыДоУвольнения.Организация = &Организация
	|	И УсловияРаботыДоУвольнения.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУвольнения.УволенныйСотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУвольнения.ДатаУвольнения КАК ДатаУвольнения,
	|	УсловияРаботыДоУвольнения.Организация КАК Организация,
	|	УсловияРаботыДоУвольнения.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	УсловияРаботыДоУвольнения.Должность КАК Должность,
	|	УсловияРаботыДоУвольнения.Сотрудник КАК Сотрудник,
	|	УсловияРаботыДоУвольнения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ИСТИНА КАК ЭтоУвольнение
	|ПОМЕСТИТЬ ДанныеУвольненияСДеталями
	|ИЗ
	|	ДанныеУвольнения КАК ДанныеУвольнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодЗаписиУсловийТрудаДоУвольнения КАК ПериодЗаписиУсловийТрудаДоУвольнения
	|		ПО ДанныеУвольнения.УволенныйСотрудник = ПериодЗаписиУсловийТрудаДоУвольнения.УволенныйСотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК УсловияРаботыДоУвольнения
	|		ПО (ПериодЗаписиУсловийТрудаДоУвольнения.ПериодЗаписиПередУвольнением = УсловияРаботыДоУвольнения.Период)
	|			И (ПериодЗаписиУсловийТрудаДоУвольнения.УволенныйСотрудник = УсловияРаботыДоУвольнения.Сотрудник)
	|ГДЕ
	|	УсловияРаботыДоУвольнения.Организация = &Организация
	|	И УсловияРаботыДоУвольнения.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УсловияРаботыДоУвольнения.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СотрудникиСрезПоследних.Период < &ДатаНачала
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ СотрудникиСрезПоследних.Период
	|	КОНЕЦ КАК Период,
	|	СотрудникиСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СотрудникиСрезПоследних.Сотрудник КАК Сотрудник,
	|	СотрудникиСрезПоследних.Должность КАК Должность,
	|	СотрудникиСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок
	|ПОМЕСТИТЬ ДанныеСотрудникаНаНачалоМесяца
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК СотрудникиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(КадровыеПеремещения.Период) КАК Период,
	|	КадровыеПеремещения.СтруктурнаяЕдиница,
	|	КадровыеПеремещения.Сотрудник,
	|	КадровыеПеремещения.Должность,
	|	КадровыеПеремещения.ЗанимаемыхСтавок
	|ПОМЕСТИТЬ ЗаписьКадровогоПеремещения
	|ИЗ
	|	РегистрСведений.Сотрудники КАК КадровыеПеремещения,
	|	ДанныеСотрудникаНаНачалоМесяца КАК ДанныеСотрудникаНаНачалоМесяца
	|ГДЕ
	|	КадровыеПеремещения.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КадровыеПеремещения.Организация = &Организация
	|	И НЕ(КадровыеПеремещения.СтруктурнаяЕдиница В (ДанныеСотрудникаНаНачалоМесяца.СтруктурнаяЕдиница)
	|				И КадровыеПеремещения.Должность В (ДанныеСотрудникаНаНачалоМесяца.Должность))
	|	И КадровыеПеремещения.СтруктурнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КадровыеПеремещения.СтруктурнаяЕдиница,
	|	КадровыеПеремещения.Сотрудник,
	|	КадровыеПеремещения.Должность,
	|	КадровыеПеремещения.ЗанимаемыхСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СотрудникиСрезПоследних.Период < &ДатаНачала
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ СотрудникиСрезПоследних.Период
	|	КОНЕЦ КАК Период,
	|	СотрудникиСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СотрудникиСрезПоследних.Сотрудник КАК Сотрудник,
	|	СотрудникиСрезПоследних.Должность КАК Должность,
	|	СотрудникиСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ЛОЖЬ КАК ЭтоУвольнение
	|ПОМЕСТИТЬ УсловияОплатыТруда
	|ИЗ
	|	РегистрСведений.Сотрудники.СрезПоследних(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК СотрудникиСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Период,
	|	Сотрудники.СтруктурнаяЕдиница,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Должность,
	|	Сотрудники.ЗанимаемыхСтавок,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Сотрудники.Организация = &Организация
	|	И Сотрудники.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеУвольненияСДеталями.ДатаУвольнения,
	|	ДанныеУвольненияСДеталями.СтруктурнаяЕдиница,
	|	ДанныеУвольненияСДеталями.Сотрудник,
	|	ДанныеУвольненияСДеталями.Должность,
	|	ДанныеУвольненияСДеталями.ЗанимаемыхСтавок,
	|	ИСТИНА
	|ИЗ
	|	ДанныеУвольненияСДеталями КАК ДанныеУвольненияСДеталями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияОплатыТруда.Период,
	|	УсловияОплатыТруда.СтруктурнаяЕдиница,
	|	УсловияОплатыТруда.Сотрудник КАК Сотрудник,
	|	УсловияОплатыТруда.Должность,
	|	УсловияОплатыТруда.ЗанимаемыхСтавок,
	|	УсловияОплатыТруда.ЭтоУвольнение
	|ПОМЕСТИТЬ ПериодыУсловияОплатыТруда
	|ИЗ
	|	УсловияОплатыТруда КАК УсловияОплатыТруда
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаписьКадровогоПеремещения.Период,
	|	ЗаписьКадровогоПеремещения.СтруктурнаяЕдиница,
	|	ЗаписьКадровогоПеремещения.Сотрудник,
	|	ЗаписьКадровогоПеремещения.Должность,
	|	ЗаписьКадровогоПеремещения.ЗанимаемыхСтавок,
	|	ЛОЖЬ
	|ИЗ
	|	ЗаписьКадровогоПеремещения КАК ЗаписьКадровогоПеремещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыУсловияОплатыТруда.Период КАК ПериодДо,
	|	МАКСИМУМ(УсловияОплатыТруда.Период) КАК ПериодС,
	|	УсловияОплатыТруда.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СовмещенныеПериоды
	|ИЗ
	|	УсловияОплатыТруда КАК УсловияОплатыТруда
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыУсловияОплатыТруда КАК ПериодыУсловияОплатыТруда
	|		ПО УсловияОплатыТруда.Период < ПериодыУсловияОплатыТруда.Период
	|			И УсловияОплатыТруда.Сотрудник = ПериодыУсловияОплатыТруда.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыУсловияОплатыТруда.Период,
	|	УсловияОплатыТруда.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияОплатыТруда.Период,
	|	СовмещенныеПериоды.ПериодДо,
	|	УсловияОплатыТруда.СтруктурнаяЕдиница,
	|	УсловияОплатыТруда.Сотрудник,
	|	УсловияОплатыТруда.Должность,
	|	УсловияОплатыТруда.ЗанимаемыхСтавок,
	|	УсловияОплатыТруда.ЭтоУвольнение
	|ПОМЕСТИТЬ ТаблицаСПолнымиДанными
	|ИЗ
	|	СовмещенныеПериоды КАК СовмещенныеПериоды
	|		ПОЛНОЕ СОЕДИНЕНИЕ УсловияОплатыТруда КАК УсловияОплатыТруда
	|		ПО СовмещенныеПериоды.ПериодС = УсловияОплатыТруда.Период
	|			И СовмещенныеПериоды.Сотрудник = УсловияОплатыТруда.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСПолнымиДанными.Период КАК Период,
	|	ТаблицаСПолнымиДанными.ПериодДо КАК ПериодДо,
	|	ТаблицаСПолнымиДанными.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаСПолнымиДанными.Сотрудник КАК Сотрудник,
	|	ТаблицаСПолнымиДанными.Должность КАК Должность,
	|	ТаблицаСПолнымиДанными.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ТаблицаСПолнымиДанными.ЭтоУвольнение КАК ЭтоУвольнение
	|ИЗ
	|	ТаблицаСПолнымиДанными КАК ТаблицаСПолнымиДанными
	|ГДЕ
	|	НЕ ТаблицаСПолнымиДанными.Сотрудник В
	|				(ВЫБРАТЬ
	|					ДанныеУвольненияСДеталями.Сотрудник
	|				ИЗ
	|					ДанныеУвольненияСДеталями КАК ДанныеУвольненияСДеталями
	|				ГДЕ
	|					ДанныеУвольненияСДеталями.ДатаУвольнения < &ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаСПолнымиДанными.Сотрудник,
	|	ТаблицаСПолнымиДанными.Период";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Объект.ОтработанноеВремяПоДням.Очистить();
	Объект.ОтработанноеВремяЗаПериод.Очистить();
	
	Если Объект.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
		
		ЗаполнитьДанныеПоЧасам(РезультатЗапроса);
		
	Иначе
		
		ЗаполнитьДанныеПоДням(РезультатЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет список доступных для выбора видов времени.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаСервереБезКонтекста
Функция ПолучитьСписокВыбора(МассивОграничений)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыРабочегоВремени.Ссылка
	                      |ИЗ
	                      |	Справочник.ВидыРабочегоВремени КАК ВидыРабочегоВремени
	                      |ГДЕ
	                      |	(НЕ ВидыРабочегоВремени.Ссылка В (&МассивОграничений))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ВидыРабочегоВремени.Наименование");
						  
	Запрос.УстановитьПараметр("МассивОграничений", МассивОграничений);					  
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка);	
	КонецЦикла; 
	
	Возврат СписокВыбора

КонецФункции // ПолучитьСписокВыбора()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
