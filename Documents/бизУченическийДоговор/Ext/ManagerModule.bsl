Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	Для Каждого ОбъектСсылка Из МассивДокументов Цикл
		ДанныеОбъектаПоМакетам = Новый Соответствие;
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ПолучитьДанныеОбъекта(ОбъектСсылка));
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ОбъектСсылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		Если ИмяМакета = "ПФ_DOC_УченическийДоговор" Тогда
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, 
			УправлениеПечатью.ПолучитьМакет("Документ.бизУченическийДоговор.ПФ_DOC_УченическийДоговор"));
			ТипыМакетов.Вставить(ИмяМакета, "DOC");
		КонецЕсли;
		ОписаниеОбластей.Вставить(ИмяМакета, ПолучитьОписаниеОбластейМакетаОфисногоДокумента());
	КонецЦикла;
	
	Возврат Новый Структура("Данные, Макеты",
	ДанныеПоВсемОбъектам,
	Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
	ОписаниеОбластей,
	ТипыМакетов,
	ДвоичныеДанныеМакетов));
	
КонецФункции

#Область Получение_данных_объекта
Функция ПолучитьДанныеОбъекта(СсылкаНаОбъект)
	
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("НомерДоговора",	ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер,Истина,Истина));
	ДанныеОбъекта.Вставить("ДатаДоговора",	Формат(Объект.Дата,"ДЛФ=DD"));
	ДанныеОбъекта.Вставить("ОрганизацияГород", Объект.МестоРегистрацииДоговора);
	ДанныеОбъекта.Вставить("ОрганизацияПолное", Объект.ОрганизацияПолное);
	ДанныеОбъекта.Вставить("ОрганизацияВлице",	Объект.ОрганизацияВЛице);
	ДанныеОбъекта.Вставить("ДействующегоНаОрганизация", "Устава");
	ДанныеОбъекта.Вставить("СрокДоговора",Объект.СрокДействияДоговора);
	ДанныеОбъекта.Вставить("ДатаОкончанияДоговора",Формат (Объект.ДатаОкончанияДоговора,"ДЛФ=DD"));
	ДанныеОбъекта.Вставить("ОбязательствоОтработать",Объект.ОбязательствоОтработать);
	ДанныеОбъекта.Вставить("ПродолжительностьУчебнойНедели",Объект.ПродолжительностьУчебнойНедели);
	ДанныеОбъекта.Вставить ("ФИОУченикаПолное",Объект.Ученик);
	
	//Сформировать сведения об основном банковском счете сторон договора
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	ОрганизацияБанк = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации,"НомерСчета,Банк,БИК,КоррСчет");
	ОрганизацияЮридическийАдрес = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации,"ЮридическийАдрес");  
	ОрганизацияПочтовыйАдрес = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Объект.Организация,Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ОрганизацияТелефон = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации,"Телефоны");
    ОрганизацияЕмэйл = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Объект.Организация,Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	ДанныеОбъекта.Вставить("БанковскиеРеквизитыРаботодателя",ОрганизацияБанк);
	ДанныеОбъекта.Вставить("ИНН",Объект.Организация.ИНН);
	ДанныеОбъекта.Вставить("КПП",Объект.Организация.КПП);
	ДанныеОбъекта.Вставить("ОГРН",Объект.Организация.ОГРН);
	ДанныеОбъекта.Вставить("ЮридическийАдрес",ОрганизацияЮридическийАдрес);
	ДанныеОбъекта.Вставить("ПочтовыйАдрес",ОрганизацияПочтовыйАдрес);
	ДанныеОбъекта.Вставить("Телефон",ОрганизацияТелефон);
	ДанныеОбъекта.Вставить("ОКПО",Объект.Организация.КодПоОКПО);
	ДанныеОбъекта.Вставить("Емэйл",ОрганизацияЕмэйл);	
	//Реквизиты ученика
	ФизЛицо = 	Объект.Ученик.Физлицо;
	СтруктураДанных = Новый Структура ("ФизЛицо,Дата",Физлицо ,Объект.Дата);
	ДанныеОбъекта.Вставить("ПаспортныеДанныеУченика",УправлениеНебольшойФирмойСервер.ПолучитьПаспортныеДанныеСтрокой(СтруктураДанных));	
	ДанныеУченика = УправлениеНебольшойФирмойСервер.ДанныеФизЛица(Объект.Организация,Физлицо,Объект.Дата,Истина);
	ДанныеОбъекта.Вставить("ФамилияИнициалыУченика",ДанныеУченика.Представление);
	ДанныеОбъекта.Вставить("ИННФизическогоЛица",ФизЛицо.ИНН);
	ДанныеОбъекта.Вставить("АдресПоПрописке",УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(ФизЛицо,Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке));
	ДанныеОбъекта.Вставить("АдресПроживанияФизическогоЛица",УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(ФизЛицо,Справочники.ВидыКонтактнойИнформации.АдресПроживанияФизЛица));
	ДанныеОбъекта.Вставить("ТелефонСотрудника",УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(ФизЛицо,Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица));
    
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",Объект.Ученик);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СотрудникиПользователя.Пользователь
	                |ИЗ
	                |	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	                |ГДЕ
	                |	СотрудникиПользователя.Сотрудник = &Сотрудник";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Пользователь = Выборка.Пользователь;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ЕМэйлФЛ",Пользователь.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.EmailПользователя,"Вид").АдресЭП);
	
	Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Объект.Организация, Объект.Дата);
	
	
	ДанныеОбъекта.Вставить("ФамилияИнициалыРуководителя",Руководители.ФИОРуководителя);
	ДанныеОбъекта.Вставить("СтипендияЧислом",Формат(Объект.РазмерСтипендии,"ЧЦ=15; ЧДЦ=2"));
	ДанныеОбъекта.Вставить("СтипендияПрописью",ЧислоПрописью(Объект.РазмерСтипендии,"Л = ru_RU; ДП = Ложь","рубль,рубля,рублей,м,копейка, копейки, копеек, ж,2"));
	
	//получить выборку из справочника бизТиповыйУчебныеПрограмы
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	бизУченическийДоговорКвалификационныеИспытания.ВидИспытания.ПолноеНаименованиеИспытания КАК ВидИспытания,
	|	бизТиповыеУчебныеПрограммы.Ссылка КАК Ссылка,
	|	бизТиповыеУчебныеПрограммы.Родитель,
	|	бизТиповыеУчебныеПрограммы.ЧасовНаПодготовку КАК ЧасовНаПодготовку,
	|	бизТиповыеУчебныеПрограммы.ЭтоРодитель
	|ИЗ
	|	Документ.бизУченическийДоговор.КвалификационныеИспытания КАК бизУченическийДоговорКвалификационныеИспытания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бизТиповыеУчебныеПрограммы КАК бизТиповыеУчебныеПрограммы
	|		ПО бизУченическийДоговорКвалификационныеИспытания.ВидИспытания.Ссылка = бизТиповыеУчебныеПрограммы.Владелец
	|ГДЕ
	|	бизТиповыеУчебныеПрограммы.ЭтоРодитель = ЛОЖЬ
	|	И бизУченическийДоговорКвалификационныеИспытания.Ссылка = &Ссылка
	|ИТОГИ
	|	СУММА(ЧасовНаПодготовку)
	|ПО
	|	ВидИспытания,
	|	Ссылка ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ИерархическаяВыборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	
	УчебнаяПрограмма = Новый Массив;
	ЭлементПрограммыПредыдущий ="";
	Префикс = "";
	ДанныеОбъекта.Вставить("ПрограммаОбученияСтрокаТаблицы",ПолучитьТекстПрограммыОбучения(УчебнаяПрограмма,ИерархическаяВыборка, ЭлементПрограммыПредыдущий,Префикс));
	ДанныеОбъекта.Вставить("ИтогоЧасов", " - " + Объект.КвалификационныеИспытания.ИТОГ("КоличествоЧасов")+" ч.");
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьТекстПрограммыОбучения(УчебнаяПрограмма,ИерархическаяВыборка,ЭлементПрограммыПредыдущий,Префикс)
	НП = 1;
	//Обойти иерархическую выборку по уровням, посредством рекурсивного вызова функции ПолучитьТекстПрограммыОбучения
	Пока ИерархическаяВыборка.Следующий() Цикл
		
		УровеньВыборки = ИерархическаяВыборка.Уровень();
		//Опредилить уровень выборки на котором происходит обход
		//В зависимости от уровня использовать различные поля выборки для заполнения Элементов учебной программы
		Если УровеньВыборки = 0 Тогда 
			ЭлементПрограммы = ИерархическаяВыборка.ВидИспытания;
		Иначе 	
			ЭлементПрограммы = ИерархическаяВыборка.Ссылка;
		КонецЕсли;
		
		Если ЭлементПрограммы = ЭлементПрограммыПредыдущий Тогда
			Продолжить
		КонецЕсли;	
		
		ЭлементУчебнойПрограммы = Новый Структура ("НПП,ЭлементПрограммы,КолвоЧасов",Префикс + ?(Префикс = "","",".")+НП,ЭлементПрограммы,""+ИерархическаяВыборка.ЧасовНаПодготовку+" ч.");
		УчебнаяПрограмма.Добавить(ЭлементУчебнойПрограммы);
		
		СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		
		Если ИерархическаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ДочерняяВыборка = ИерархическаяВыборка.Выбрать(СпособВыборки, ИерархическаяВыборка.Группировка());
		Иначе 
			ДочерняяВыборка = ИерархическаяВыборка.Выбрать(СпособВыборки);				
		КонецЕсли;
		ЭлементПрограммыПредыдущий = ЭлементПрограммы;
		
		ПолучитьТекстПрограммыОбучения(УчебнаяПрограмма,ДочерняяВыборка,ЭлементПрограммыПредыдущий,Префикс+?(Префикс = "","",".")+НП);
		
		НП = НП+1;
		
	КонецЦикла;
	
	
	Возврат  УчебнаяПрограмма; 
	
КонецФункции

 
#КонецОбласти

Функция ПолучитьОписаниеОбластейМакетаОфисногоДокумента()
	
	ОписаниеОбластей = Новый Структура;
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок","Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ТекстДоговора","Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ПриложениеПрограммаОбученияЗаголовок","Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей,	"ПрограммаОбученияСтрокаТаблицы","СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей,	"ПриложениеПрограммаОбученияПодписи","Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей,	"ПриложениеРасценкиТекст","Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей,	"ПриложениеРасценкиПодписи","Общая");

	Возврат ОписаниеОбластей;
	
КонецФункции
