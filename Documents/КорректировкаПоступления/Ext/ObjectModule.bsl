#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	Предоплата.Очистить();
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПоступлению";
	СтратегияЗаполнения[Тип("ДокументСсылка.КорректировкаПоступления")] = "ЗаполнитьПоПоступлению";
	СтратегияЗаполнения[Тип("ДокументСсылка.ДополнительныеРасходы")] = "ЗаполнитьПоДопРасходам";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСуммыДокорректировки();
	
	
	СуммаДокумента = Запасы.Итог("Всего") + Расходы.Итог("Всего");
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		Если НЕ ВключатьРасходыВСебестоимость Тогда
			
			Для каждого СтрокаРасходы из Расходы Цикл
				
				Если СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
					
					СтрокаРасходы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение 
		ИЛИ НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НомерИсправления");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДатаИсправления");
	КонецЕсли;
	
	// Проверка наличия розничной цены.
	ПроверитьНаличиеРозничнойЦены(Отказ);
	
	Если Запасы.Количество() > 0 Тогда
		ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиница");
	КонецЕсли;
	
	Если НЕ ВключатьРасходыВСебестоимость
		И ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		
		Для каждого СтрокаРасходы Из Расходы Цикл
			
			Если Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			   И (СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
			 ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
			 ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Доходы
			 ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы)
			 И НЕ ЗначениеЗаполнено(СтрокаРасходы.СтруктурнаяЕдиница) Тогда
				ТекстСообщения = НСтр(
					"ru = 'Для номенклатуры ""%Номенклатура%"" указанной в строке %НомерСтроки% списка ""Услуги"", должен быть заполнен реквизит ""Подразделение"".'"
				);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", СокрЛП(Строка(СтрокаРасходы.Номенклатура))); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%",Строка(СтрокаРасходы.НомерСтроки));
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Расходы",
					СтрокаРасходы.НомерСтроки,
					"СтруктурнаяЕдиница",
					Отказ
				);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ВключатьРасходыВСебестоимость
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ДополнительныеРасходы"))
		И Запасы.Итог("СуммаРасходов") <> Расходы.Итог("Всего") Тогда
		
		ТекстСообщения = НСтр("ru = 'Сумма услуг не равна распределенной сумме по запасам!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			,
			ТекстСообщения,
			Неопределено,
			Неопределено,
			Неопределено,
			Отказ
		);
		
	КонецЕсли;
	
	ТаблицаЗапасы = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗапасы.Свернуть("Заказ", "Всего");
	
	ТаблицаРасходы = Расходы.Выгрузить(, "ЗаказПоставщику, Всего");
	ТаблицаРасходы.Свернуть("ЗаказПоставщику", "Всего");
	
	ТаблицаПредоплата = Предоплата.Выгрузить(, "Заказ, СуммаПлатежа");
	ТаблицаПредоплата.Свернуть("Заказ", "СуммаПлатежа");
	
	КоличествоЗапасыРасходы = Запасы.Количество() + Расходы.Количество();
	
	Для каждого Строка Из ТаблицаПредоплата Цикл
		
		НайденнаяСтрокаРасходы = Неопределено;
		НайденнаяСтрокаЗапасы = Неопределено;
		
		Если Контрагент.ВестиРасчетыПоЗаказам
		   И Строка.Заказ <> Неопределено
		   И Строка.Заказ <> Документы.ЗаказПокупателя.ПустаяСсылка()
		   И Строка.Заказ <> Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Строка.Заказ, "Заказ");
			НайденнаяСтрокаРасходы = ТаблицаРасходы.Найти(Строка.Заказ, "ЗаказПоставщику");
			Всего = 0 + ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего) + ?(НайденнаяСтрокаРасходы = Неопределено, 0, НайденнаяСтрокаРасходы.Всего);
		ИначеЕсли Контрагент.ВестиРасчетыПоЗаказам Тогда
			НайденнаяСтрокаЗапасы = ТаблицаЗапасы.Найти(Неопределено, "Заказ");
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаЗапасы = ?(НайденнаяСтрокаЗапасы = Неопределено, ТаблицаЗапасы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "Заказ"), НайденнаяСтрокаЗапасы);
			НайденнаяСтрокаРасходы = ТаблицаРасходы.Найти(Неопределено, "ЗаказПоставщику");
			НайденнаяСтрокаРасходы = ?(НайденнаяСтрокаРасходы = Неопределено, ТаблицаРасходы.Найти(Документы.ЗаказПокупателя.ПустаяСсылка(), "ЗаказПоставщику"), НайденнаяСтрокаРасходы);
			НайденнаяСтрокаРасходы = ?(НайденнаяСтрокаРасходы = Неопределено, ТаблицаРасходы.Найти(Документы.ЗаказПоставщику.ПустаяСсылка(), "ЗаказПоставщику"), НайденнаяСтрокаРасходы);
			Всего = 0 + ?(НайденнаяСтрокаЗапасы = Неопределено, 0, НайденнаяСтрокаЗапасы.Всего) + ?(НайденнаяСтрокаРасходы = Неопределено, 0, НайденнаяСтрокаРасходы.Всего);
		Иначе
			Всего = Запасы.Итог("Всего") + Расходы.Итог("Всего");
		КонецЕсли;
		
		Если НайденнаяСтрокаЗапасы = Неопределено
		   И НайденнаяСтрокаРасходы = Неопределено
		   И КоличествоЗапасыРасходы > 0
		   И Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекстСообщения = НСтр("ru = 'Нельзя зачесть аванс по заказу отличному от указанных в табличных частях ""Запасы"" или ""Услуги""!'");
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				,
				ТекстСообщения,
				Неопределено,
				Неопределено,
				"ПредоплатаИтогСуммаРасчетовВалюта",
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.КорректировкаПоступления.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКПоступлениюНаСклады(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСуммовойУчетВРознице(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
	// Контроль возникновения отрицательного остатка.
	Документы.КорректировкаПоступления.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	// Запись цен в регистр сведений Цены номенклатуры контрагентов.
	Документы.КорректировкаПоступления.ЗарегистрироватьЦеныПоставщика(Ссылка);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.КорректировкаПоступления.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Удаление цен из регистра сведений Цены номенклатуры контрагентов.
	Документы.КорректировкаПоступления.УдалитьЦеныПоставщика(Ссылка);
	
	// Подчиненная счет-фактура (полученная)
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнение

// Процедура заполняет авансы.
//
Процедура ЗаполнитьПредоплату() Экспорт
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация);
	
	// Подготовка таблицы заказов.
	ТаблицаЗаказов = Запасы.Выгрузить(, "Заказ, Всего");
	ТаблицаЗаказов.Колонки.Добавить("ВсегоРасч");
	Для каждого ТекСтрока Из Расходы Цикл
		НоваяСтрока = ТаблицаЗаказов.Добавить();
		НоваяСтрока.Заказ = ТекСтрока.ЗаказПоставщику;
		НоваяСтрока.Всего = ТекСтрока.Всего;
	КонецЦикла;
	Для каждого ТекСтрока Из ТаблицаЗаказов Цикл
		Если НЕ Контрагент.ВестиРасчетыПоЗаказам Тогда
			ТекСтрока.Заказ = Документы.ЗаказПоставщику.ПустаяСсылка();
		Иначе
			ТекСтрока.Заказ = ?(ТекСтрока.Заказ = Неопределено, Документы.ЗаказПоставщику.ПустаяСсылка(), ТекСтрока.Заказ);
		КонецЕсли;
		ТекСтрока.ВсегоРасч = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Всего,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Курс, 1),
			Курс,
			?(Договор.ВалютаРасчетов = ВалютаДокумента, Кратность, 1),
			Кратность
		);
	КонецЦикла;
	ТаблицаЗаказов.Свернуть("Заказ", "Всего, ВсегоРасч");
	ТаблицаЗаказов.Сортировать("Заказ Возр");
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПоставщикамиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.Договор КАК Договор,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ В (&Заказ)
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПоставщиками.Договор,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ,
	|		ДвиженияДокументаРасчетыСПоставщиками.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПоставщиками.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПоставщиками.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщиками КАК ДвиженияДокументаРасчетыСПоставщиками
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПоставщиками.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПоставщиками.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПоставщиками.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПоставщиками.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПоставщиками.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПоставщиками.Заказ В (&Заказ)
	|		И ДвиженияДокументаРасчетыСПоставщиками.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПоставщикамиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПоставщикамиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс / РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПоставщикамиОстатки.Документ КАК Документ,
	|		РасчетыСПоставщикамиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПоставщикамиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПоставщикамиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщикамиОстатки.Документ,
	|	РасчетыСПоставщикамиОстатки.Заказ,
	|	РасчетыСПоставщикамиОстатки.ДокументДата,
	|	РасчетыСПоставщикамиОстатки.ВалютаРасчетов,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПоставщикамиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПоставщикамиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";
	
	Запрос.УстановитьПараметр("Заказ", ТаблицаЗаказов.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Если Договор.ВалютаРасчетов = ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	Предоплата.Очистить();
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаЗаказов.Найти(ВыборкаРезультатаЗапроса.Заказ, "Заказ");
		
		Если НайденнаяСтрока.ВсегоРасч = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= НайденнаяСтрока.ВсегоРасч Тогда // сумма остатка меньше или равна чем осталось распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НайденнаяСтрока.ВсегоРасч = НайденнаяСтрока.ВсегоРасч - ВыборкаРезультатаЗапроса.СуммаРасчетов;
			
		Иначе // сумма остатка больше чем нужно распределить
			
			НоваяСтрока = Предоплата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
			НоваяСтрока.СуммаРасчетов = НайденнаяСтрока.ВсегоРасч;
			НоваяСтрока.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.СуммаРасчетов,
				ВыборкаРезультатаЗапроса.Курс,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
				ВыборкаРезультатаЗапроса.Кратность,
				ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
			);
			НайденнаяСтрока.ВсегоРасч = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредоплату()

Процедура ЗаполнитьПоПоступлению(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходнаяНакладная")
		И ДанныеЗаполнения.ВидОперации <> Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить корректировку поступления на основании документа %1.'"),
			ДанныеЗаполнения);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Расходы.Очистить();
	Предоплата.Очистить();
	
	МетаданныеДокумента = ДанныеЗаполнения.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка КАК ДокументОснование,
	|	ПриходнаяНакладная.Организация,
	|	ПриходнаяНакладная.Контрагент,
	|	ПриходнаяНакладная.Договор,
	|	ПриходнаяНакладная.Заказ,
	|	ПриходнаяНакладная.СтруктурнаяЕдиница,
	|	ПриходнаяНакладная.Ячейка,
	|	ПриходнаяНакладная.ВключатьРасходыВСебестоимость,
	|	ПриходнаяНакладная.ВалютаДокумента,
	|	ПриходнаяНакладная.НалогообложениеНДС,
	|	ПриходнаяНакладная.СуммаВключаетНДС,
	|	ПриходнаяНакладная.НДСВключатьВСтоимость,
	|	ПриходнаяНакладная.Курс,
	|	ПриходнаяНакладная.Кратность,
	|	ПриходнаяНакладная.СуммаДокумента,
	|	ПриходнаяНакладная.ВидЦенКонтрагента,
	|	ПриходнаяНакладная.РегистрироватьЦеныПоставщика,
	|	ПриходнаяНакладная.НомерВходящегоДокумента,
	|	ПриходнаяНакладная.ДатаВходящегоДокумента,
	|	ПриходнаяНакладная.Подразделение,
	|	ПриходнаяНакладная.Ответственный
	|ИЗ
	|	Документ." + ИмяВидаДокумента + " КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяЗапасы.СтранаПроисхождения,
	|	ПриходнаяНакладнаяЗапасы.НомерГТД,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика,
	|	ПриходнаяНакладнаяЗапасы.Партия,
	|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяЗапасы.Количество,
	|	ПриходнаяНакладнаяЗапасы.Цена,
	|	ПриходнаяНакладнаяЗапасы.Сумма,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС,
	|	ПриходнаяНакладнаяЗапасы.Заказ,
	|	ПриходнаяНакладнаяЗапасы.Всего,
	|	ПриходнаяНакладнаяЗапасы.Себестоимость,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходов,
	|	ПриходнаяНакладнаяЗапасы.Содержание,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК КоличествоДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Цена КАК ЦенаДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Сумма КАК СуммаДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.Всего КАК ВсегоДоИзменения,
	|	ПриходнаяНакладнаяЗапасы.СуммаРасходов КАК СуммаРасходовДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Текст = Текст + "
		|	ПриходнаяНакладнаяЗапасы.КоличествоДоКорректировки,
		|	ПриходнаяНакладнаяЗапасы.ЦенаДоКорректировки,
		|	ПриходнаяНакладнаяЗапасы.СуммаДоКорректировки,
		|	ПриходнаяНакладнаяЗапасы.СуммаНДСДоКорректировки,
		|	ПриходнаяНакладнаяЗапасы.ВсегоДоКорректировки,
		|	ПриходнаяНакладнаяЗапасы.СуммаРасходовДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ПриходнаяНакладнаяЗапасы.Содержание КАК СодержаниеДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Запасы КАК ПриходнаяНакладнаяЗапасы
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяРасходы.Номенклатура,
	|	ПриходнаяНакладнаяРасходы.ЕдиницаИзмерения,
	|	ПриходнаяНакладнаяРасходы.Количество,
	|	ПриходнаяНакладнаяРасходы.Цена,
	|	ПриходнаяНакладнаяРасходы.Сумма,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС,
	|	ПриходнаяНакладнаяРасходы.СуммаНДС,
	|	ПриходнаяНакладнаяРасходы.ЗаказПоставщику,
	|	ПриходнаяНакладнаяРасходы.Всего,
	|	ПриходнаяНакладнаяРасходы.Заказ,
	|	ПриходнаяНакладнаяРасходы.СтруктурнаяЕдиница,
	|	ПриходнаяНакладнаяРасходы.НаправлениеДеятельности,
	|	ПриходнаяНакладнаяРасходы.Содержание,
	|	ПриходнаяНакладнаяРасходы.Количество КАК КоличествоДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Цена КАК ЦенаДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Сумма КАК СуммаДоИзменения,
	|	ПриходнаяНакладнаяРасходы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ПриходнаяНакладнаяРасходы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ПриходнаяНакладнаяРасходы.Всего КАК ВсегоДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Текст = Текст + "
		|	ПриходнаяНакладнаяРасходы.КоличествоДоКорректировки,
		|	ПриходнаяНакладнаяРасходы.ЦенаДоКорректировки,
		|	ПриходнаяНакладнаяРасходы.СуммаДоКорректировки,
		|	ПриходнаяНакладнаяРасходы.СуммаНДСДоКорректировки,
		|	ПриходнаяНакладнаяРасходы.ВсегоДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ПриходнаяНакладнаяРасходы.Содержание КАК СодержаниеДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Расходы КАК ПриходнаяНакладнаяРасходы
	|ГДЕ
	|	ПриходнаяНакладнаяРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходнаяНакладнаяПредоплата.Документ,
	|	ПриходнаяНакладнаяПредоплата.Заказ,
	|	ПриходнаяНакладнаяПредоплата.СуммаРасчетов,
	|	ПриходнаяНакладнаяПредоплата.Курс,
	|	ПриходнаяНакладнаяПредоплата.Кратность,
	|	ПриходнаяНакладнаяПредоплата.СуммаПлатежа,
	|	ПриходнаяНакладнаяПредоплата.СуммаРасчетов КАК СуммаРасчетовДоИзменения,
	|	ПриходнаяНакладнаяПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,";
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Текст = Текст + "
	|	ПриходнаяНакладнаяПредоплата.СуммаРасчетовДоКорректировки,
	|	ПриходнаяНакладнаяПредоплата.СуммаПлатежаДоКорректировки,";
	КонецЕсли;
	Текст = Текст + "
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Предоплата КАК ПриходнаяНакладнаяПредоплата
	|ГДЕ
	|	ПриходнаяНакладнаяПредоплата.Ссылка = &Ссылка";

	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
	
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
	
	КонецЦикла;
	
	ВыборкаРасходы = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРасходы.Следующий() Цикл
	
		НоваяСтрока = Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);
	
	КонецЦикла;
	
	ВыборкаПредоплата = МассивРезультатов[3].Выбрать();
	Пока ВыборкаПредоплата.Следующий() Цикл
	
		НоваяСтрока = Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПредоплата);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДопРасходам(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииЗаполнения = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ВидОперацииЗаполнения = ?(ДанныеЗаполнения.Свойство("ВидОперации"), ДанныеЗаполнения.ВидОперации, Неопределено);
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснование = ДанныеЗаполнения;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения);
	
	Запасы.Очистить();
	Расходы.Очистить();
	Предоплата.Очистить();
	
	МетаданныеДокумента = ДанныеЗаполнения.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРасходы.Ссылка КАК ДокументОснование,
	|	ДополнительныеРасходы.Организация,
	|	ДополнительныеРасходы.Контрагент,
	|	ДополнительныеРасходы.Договор,
	|	ДополнительныеРасходы.ЗаказПоставщику КАК Заказ,
	|	ДополнительныеРасходы.СтруктурнаяЕдиница,
	|	ДополнительныеРасходы.ВалютаДокумента,
	|	ДополнительныеРасходы.НалогообложениеНДС,
	|	ДополнительныеРасходы.СуммаВключаетНДС,
	|	ДополнительныеРасходы.НДСВключатьВСтоимость,
	|	ДополнительныеРасходы.Курс,
	|	ДополнительныеРасходы.Кратность,
	|	ДополнительныеРасходы.СуммаДокумента,
	|	ДополнительныеРасходы.НомерВходящегоДокумента,
	|	ДополнительныеРасходы.ДатаВходящегоДокумента,
	|	ДополнительныеРасходы.Подразделение,
	|	ДополнительныеРасходы.Ответственный,
	|	ИСТИНА КАК ВключатьРасходыВСебестоимость
	|ИЗ
	|	Документ.ДополнительныеРасходы КАК ДополнительныеРасходы
	|ГДЕ
	|	ДополнительныеРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРасходыЗапасы.Номенклатура,
	|	ДополнительныеРасходыЗапасы.Характеристика,
	|	ДополнительныеРасходыЗапасы.Партия,
	|	ДополнительныеРасходыЗапасы.ЕдиницаИзмерения,
	|	ДополнительныеРасходыЗапасы.Количество,
	|	ДополнительныеРасходыЗапасы.Цена,
	|	ДополнительныеРасходыЗапасы.Сумма,
	|	ДополнительныеРасходыЗапасы.СтавкаНДС,
	|	ДополнительныеРасходыЗапасы.СуммаНДС,
	|	ДополнительныеРасходыЗапасы.ЗаказПокупателя КАК Заказ,
	|	ДополнительныеРасходыЗапасы.Всего,
	|	ДополнительныеРасходыЗапасы.СуммаРасходов,
	|	ДополнительныеРасходыЗапасы.Количество КАК КоличествоДоИзменения,
	|	ДополнительныеРасходыЗапасы.Цена КАК ЦенаДоИзменения,
	|	ДополнительныеРасходыЗапасы.Сумма КАК СуммаДоИзменения,
	|	ДополнительныеРасходыЗапасы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ДополнительныеРасходыЗапасы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ДополнительныеРасходыЗапасы.Всего КАК ВсегоДоИзменения,
	|	ДополнительныеРасходыЗапасы.СуммаРасходов КАК СуммаРасходовДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ДополнительныеРасходы.Запасы КАК ДополнительныеРасходыЗапасы
	|ГДЕ
	|	ДополнительныеРасходыЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРасходыРасходы.Номенклатура,
	|	ДополнительныеРасходыРасходы.ЕдиницаИзмерения,
	|	ДополнительныеРасходыРасходы.Количество,
	|	ДополнительныеРасходыРасходы.Цена,
	|	ДополнительныеРасходыРасходы.Сумма,
	|	ДополнительныеРасходыРасходы.СтавкаНДС,
	|	ДополнительныеРасходыРасходы.СуммаНДС,
	|	ДополнительныеРасходыРасходы.Всего,
	|	ДополнительныеРасходыРасходы.Количество КАК КоличествоДоИзменения,
	|	ДополнительныеРасходыРасходы.Цена КАК ЦенаДоИзменения,
	|	ДополнительныеРасходыРасходы.Сумма КАК СуммаДоИзменения,
	|	ДополнительныеРасходыРасходы.СтавкаНДС КАК СтавкаНДСДоИзменения,
	|	ДополнительныеРасходыРасходы.СуммаНДС КАК СуммаНДСДоИзменения,
	|	ДополнительныеРасходыРасходы.Всего КАК ВсегоДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ДополнительныеРасходы.Расходы КАК ДополнительныеРасходыРасходы
	|ГДЕ
	|	ДополнительныеРасходыРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРасходыПредоплата.Документ,
	|	ДополнительныеРасходыПредоплата.СуммаРасчетов,
	|	ДополнительныеРасходыПредоплата.Курс,
	|	ДополнительныеРасходыПредоплата.Кратность,
	|	ДополнительныеРасходыПредоплата.СуммаПлатежа,
	|	ДополнительныеРасходыПредоплата.СуммаРасчетов КАК СуммаРасчетовДоИзменения,
	|	ДополнительныеРасходыПредоплата.СуммаПлатежа КАК СуммаПлатежаДоИзменения,
	|	ИСТИНА КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ДополнительныеРасходы.Предоплата КАК ДополнительныеРасходыПредоплата
	|ГДЕ
	|	ДополнительныеРасходыПредоплата.Ссылка = &Ссылка";

	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = МассивРезультатов[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ВыборкаЗапасы = МассивРезультатов[1].Выбрать();
	Пока ВыборкаЗапасы.Следующий() Цикл
	
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
	
	КонецЦикла;
	
	ВыборкаРасходы = МассивРезультатов[2].Выбрать();
	Пока ВыборкаРасходы.Следующий() Цикл
	
		НоваяСтрока = Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);
	
	КонецЦикла;
	
	ВыборкаПредоплата = МассивРезультатов[3].Выбрать();
	Пока ВыборкаПредоплата.Следующий() Цикл
	
		НоваяСтрока = Предоплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПредоплата);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваШапки(ВидОперацииЗаполнения = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсправления = Документы.КорректировкаПоступления.СформироватьПараметрыИсправленияКорректировочногоДокумента(
		?(ВидОперацииЗаполнения <> Неопределено, ВидОперацииЗаполнения, ВидОперации), Дата, ДокументОснование);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыИсправления);

	ДокументПоступленияСсылка = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Истина);
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступленияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументПоступления = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь);
		Иначе	
			ИсправляемыйДокументПоступления = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументПоступления = Документы.КорректировкаПоступления.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Процедура выполняет распределение затрат по количеству.
//
Процедура РаспределитьТабЧастьРасходыПоКоличеству() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияКоличество = Запасы.Итог("Количество");
	ВсегоРасходы = Расходы.Итог("Всего");
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияКоличество <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Количество / БазаРаспределенияКоличество, 2, 1),0);
		БазаРаспределенияКоличество = БазаРаспределенияКоличество - СтрокаЗапасы.Количество;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоКоличеству()

// Процедура выполняет распределение затрат по сумме.
//
Процедура РаспределитьТабЧастьРасходыПоСумме() Экспорт
	
	ИсхСумма = 0;
	БазаРаспределенияСумма = Запасы.Итог("Всего");
	ВсегоРасходы = Расходы.Итог("Всего");
	Для каждого СтрокаЗапасы Из Запасы Цикл
		
		СтрокаЗапасы.СуммаРасходов = ?(БазаРаспределенияСумма <> 0, Окр((ВсегоРасходы - ИсхСумма) * СтрокаЗапасы.Всего / БазаРаспределенияСумма, 2, 1),0);
		БазаРаспределенияСумма = БазаРаспределенияСумма - СтрокаЗапасы.Всего;
		ИсхСумма = ИсхСумма + СтрокаЗапасы.СуммаРасходов;
		
	КонецЦикла;
	
КонецПроцедуры // РаспределитьТабЧастьРасходыПоСумме()

// Процедура отмены проведения у подченненой счет фактуры (полученной)
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка, Истина);
	Если НЕ СтруктураСчетаФактуры = Неопределено Тогда
		
		СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
		Если СчетФактура.Проведен Тогда
			
			ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится %ПредставлениеСчетФактуры%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Приходная накладная № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (полученная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //КонтрольПодчиненнойСчетФактуры()

// Процедура проверяет наличие розничной цены.
//
Процедура ПроверитьНаличиеРозничнойЦены(Отказ)
	
	Если СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница
	 ИЛИ СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
	 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("ТаблицаДокумента", Запасы);
		Запрос.УстановитьПараметр("РозничныйВидЦен", СтруктурнаяЕдиница.РозничныйВидЦен);
		Запрос.УстановитьПараметр("СписокНоменклатура", Запасы.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("СписокХарактеристика", Запасы.ВыгрузитьКолонку("Характеристика"));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика КАК Характеристика,
		|	ТаблицаДокумента.Партия КАК Партия
		|ПОМЕСТИТЬ ПеремещениеЗапасовЗапасы
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПеремещениеЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Номенклатура) КАК НоменклатураПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Характеристика) КАК ХарактеристикаПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещениеЗапасовЗапасы.Партия) КАК ПартияПредставление
		|ИЗ
		|	ПеремещениеЗапасовЗапасы КАК ПеремещениеЗапасовЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				ВидЦен = &РозничныйВидЦен
		|					И Номенклатура В (&СписокНоменклатура)
		|					И Характеристика В (&СписокХарактеристика)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ПеремещениеЗапасовЗапасы.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|ГДЕ
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0";
		
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			
			ТекстСообщения = НСтр("ru = 'Для номенклатуры %ПредставлениеНоменклатуры% в строке %НомерСтроки% списка ""Запасы"" не установлена розничная цена!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(ВыборкаРезультатаЗапроса.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеНоменклатуры%",  УправлениеНебольшойФирмойСервер.ПредставлениеНоменклатуры(ВыборкаРезультатаЗапроса.НоменклатураПредставление, ВыборкаРезультатаЗапроса.ХарактеристикаПредставление, ВыборкаРезультатаЗапроса.ПартияПредставление));
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Запасы",
				ВыборкаРезультатаЗапроса.НомерСтроки,
				"Номенклатура",
				Отказ
			);
	
		КонецЦикла;
	 
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеРозничнойЦены()

Процедура ОбработатьСуммыДокорректировки()

	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления)
		И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления"))
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИсправляемыйДокументПоступления, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		Запасы.ЗагрузитьКолонку(Запасы.ВыгрузитьКолонку("ВсегоДоИзменения"), 		"ВсегоДоКорректировки");

		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		Расходы.ЗагрузитьКолонку(Расходы.ВыгрузитьКолонку("ВсегоДоИзменения"), 		"ВсегоДоКорректировки");
		
		Предоплата.ЗагрузитьКолонку(Предоплата.ВыгрузитьКолонку("СуммаРасчетовДоИзменения"), 	"СуммаРасчетовДоКорректировки");
		Предоплата.ЗагрузитьКолонку(Предоплата.ВыгрузитьКолонку("СуммаПлатежаДоИзменения"), 	"СуммаПлатежаДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда

		Для Каждого СтрокаТаблицы Из Запасы Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ВсегоДоКорректировки      = 0;
		КонецЦикла;

		Для Каждого СтрокаТаблицы Из Расходы Цикл
			СтрокаТаблицы.КоличествоДоКорректировки = 0;
			СтрокаТаблицы.ЦенаДоКорректировки       = 0;
			СтрокаТаблицы.СуммаДоКорректировки      = 0;
			СтрокаТаблицы.СуммаНДСДоКорректировки   = 0;
			СтрокаТаблицы.ВсегоДоКорректировки      = 0;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Предоплата Цикл
			СтрокаТаблицы.СуммаРасчетовДоКорректировки = 0;
			СтрокаТаблицы.СуммаПлатежаДоКорректировки  = 0;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли