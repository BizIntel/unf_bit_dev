&НаСервере
Процедура СохранитьДанные() Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1;
		Объект.Дата = ТекущаяДатаСеанса() 
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Титульный, ЛистА, ЛистБ, ЛистВ",
									ТитульнаяСтраница.Выгрузить(),
									ЛистыА.Выгрузить(),
									ЛистыБ.Выгрузить(),
									ЛистыВ.Выгрузить());
	
	Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения"));
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	Модифицированность = Ложь;
	ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, " (создание)", "");

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Объект.Ссылка.ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный;
	НоваяСтрока = ТитульнаяСтраница.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Титульный[0]);
	
	Для Каждого Строка Из СтруктураПараметров.ЛистА Цикл
		НоваяСтрока = ЛистыА.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Для Каждого Строка Из СтруктураПараметров.ЛистБ Цикл
		НоваяСтрока = ЛистыБ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Для Каждого Строка Из СтруктураПараметров.ЛистВ Цикл
		НоваяСтрока = ЛистыВ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения"));
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ЗаполнитьЛистА(НовыйЛист)
	НовыйЛист.П_ИНН_А = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП_А = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = Новый УникальныйИдентификатор;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистБ(НовыйЛист)
	НовыйЛист.П_ИНН_Б = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП_Б = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = Новый УникальныйИдентификатор;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистВ(НовыйЛист)
	НовыйЛист.П_ИНН_В = ТитульнаяСтраница[0].П_ИНН;
	НовыйЛист.П_КПП_В = ТитульнаяСтраница[0].П_КПП;
	НовыйЛист.UID = Новый УникальныйИдентификатор;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТитульный(НовыйЛист)
	
	НовыйЛист.ДАТА_ПОДПИСИ = ТекущаяДатаСеанса(); 
	Объект.ДатаПодписи = НовыйЛист.ДАТА_ПОДПИСИ;
	НовыйЛист.КОД_НО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код");
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,ТелОрганизации,ОГРН";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		
		НовыйЛист.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ = СведенияОбОрганизации.НаимЮЛПол;
		НовыйЛист.П_ИНН = СведенияОбОрганизации.ИННЮЛ;
		НовыйЛист.П_КПП = СведенияОбОрганизации.КППЮЛ;
		НовыйЛист.ТЕЛЕФОН = СведенияОбОрганизации.ТелОрганизации;
		НовыйЛист.ОГРН = СведенияОбОрганизации.ОГРН;
	Иначе
		СтрокаСведений = "ИННФЛ,ТелДом,ОГРН,ФИО,ФамилияИП,ИмяИП,ОтчествоИП";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		
		НовыйЛист.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ = СведенияОбОрганизации.ФИО;
		НовыйЛист.П_ИНН = СведенияОбОрганизации.ИННФЛ;
		НовыйЛист.ТЕЛЕФОН = СведенияОбОрганизации.ТелДом;
		НовыйЛист.ОГРНИП = СведенияОбОрганизации.ОГРН;
	КонецЕсли;
	
	УстановитьДанныеПоРегистрацииВИФНС();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМакетНаСервере()
	Документы.УведомлениеОСпецрежимахНалогообложения.СформироватьМакетНаСервере(ЭтотОбъект, "ФормаС_09_1", ПолучитьИмяОбласти(ТекущийТипСтраницы), ПолучитьИмяТаблицы(ТекущийТипСтраницы));
КонецПроцедуры

&НаКлиенте
Процедура НестандартнаяОбработка(Инфо, Элемент, СтандартнаяОбработка)
	Если Инфо.Обработчик = "ОбработкаДаты" Тогда
		ОбработкаДаты(Инфо);
	ИначеЕсли Инфо.Обработчик = "ОбработкаСписка" Тогда
		ОбработкаСписка(Инфо);
	ИначеЕсли Инфо.Обработчик = "ОбработкаКодаНО" Тогда
		ОбработкаКодаНО(Инфо);
	ИначеЕсли Инфо.Обработчик = "ОбработкаАдреса" Тогда
		ОбработкаАдреса(Инфо, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()
	
	РегламентированнаяОтчетность.ЗаполнитьРегионы(Регионы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАдреса(Инфо, Элемент)
	
	Постфикс = Инфо.Имя;
	Пока Истина Цикл
		Номер = СтрНайти(Постфикс, "_");
		Если Номер = 0 Тогда 
			Прервать;
		КонецЕсли;
		Постфикс = Прав(Постфикс, СтрДлина(Постфикс) - Номер);
	КонецЦикла;
	Постфикс = "_"+Постфикс;
	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс",	        ПредставлениеУведомления.Области["ИНДЕКС"+Постфикс].Значение);
	РоссийскийАдрес.Вставить("КодРегиона",      ПредставлениеУведомления.Области["КОД_РЕГИОНА"+Постфикс].Значение);
	РоссийскийАдрес.Вставить("Район",           ПредставлениеУведомления.Области["РАЙОН"+Постфикс].Значение);
	РоссийскийАдрес.Вставить("Город",           ПредставлениеУведомления.Области["ГОРОД"+Постфикс].Значение);
	РоссийскийАдрес.Вставить("НаселенныйПункт", ПредставлениеУведомления.Области["НАСЕЛЕННЫЙ_ПУНКТ"+Постфикс].Значение);
	РоссийскийАдрес.Вставить("Улица",           ПредставлениеУведомления.Области["УЛИЦА"+Постфикс].Значение);
	РоссийскийАдрес.Вставить("Дом",             ПредставлениеУведомления.Области["ДОМ"+Постфикс].Значение);
	РоссийскийАдрес.Вставить("Корпус",          ПредставлениеУведомления.Области["КОРПУС"+Постфикс].Значение);
	РоссийскийАдрес.Вставить("Квартира",        ПредставлениеУведомления.Области["КВАРТИРА"+Постфикс].Значение);
	
	Если Регионы.Количество() = 0 Тогда
		ЗаполнитьРегионыНаСервере();
	КонецЕсли;
	
	Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["КодРегиона"])));
	
	Если Регион.Количество() > 0 Тогда
		
		РоссийскийАдрес["Регион"] = Регион[0].Наим;
		
	КонецЕсли;
	
	ЗначенияПолей = Новый СписокЗначений;
	
	ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
	ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
	ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
	ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
	
	ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
	+ РоссийскийАдрес["Регион"] + ","
	+ РоссийскийАдрес["КодРегиона"] + ","
	+ РоссийскийАдрес["Район"] + ","
	+ РоссийскийАдрес["Город"] + ","
	+ РоссийскийАдрес["НаселенныйПункт"] + ","
	+ РоссийскийАдрес["Улица"] + ","
	+ РоссийскийАдрес["Дом"] + ","
	+ РоссийскийАдрес["Корпус"] + ","
	+ РоссийскийАдрес["Квартира"]);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
	ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
	ДополнительныеПараметры.Вставить("Постфикс", Постфикс);
	
	ТипЗначения = Тип("ОписаниеОповещения");
	ПараметрыКонструктора = Новый Массив(3);
	ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
	ПараметрыКонструктора[1] = ЭтотОбъект;
	ПараметрыКонструктора[2] = ДополнительныеПараметры;
	
	Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес, Параметры.Постфикс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес, Постфикс)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ПредставлениеУведомления.Области["ИНДЕКС"+Постфикс].Значение = РоссийскийАдрес_["Индекс"];
		ПредставлениеУведомления.Области["КОД_РЕГИОНА"+Постфикс].Значение = РоссийскийАдрес_["КодРегиона"];
		ПредставлениеУведомления.Области["РАЙОН"+Постфикс].Значение = РоссийскийАдрес_["Район"];
		ПредставлениеУведомления.Области["ГОРОД"+Постфикс].Значение = РоссийскийАдрес_["Город"];
		ПредставлениеУведомления.Области["НАСЕЛЕННЫЙ_ПУНКТ"+Постфикс].Значение = РоссийскийАдрес_["НаселенныйПункт"];
		ПредставлениеУведомления.Области["УЛИЦА"+Постфикс].Значение = РоссийскийАдрес_["Улица"];
		ПредставлениеУведомления.Области["ДОМ"+Постфикс].Значение = РоссийскийАдрес_["Дом"];
		ПредставлениеУведомления.Области["КОРПУС"+Постфикс].Значение = РоссийскийАдрес_["Корпус"];
		ПредставлениеУведомления.Области["КВАРТИРА"+Постфикс].Значение = РоссийскийАдрес_["Квартира"];
		
		ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
		Данные = ЭтотОбъект[ПолучитьИмяТаблицы(ТекущийТипСтраницы)].НайтиСтроки(ПараметрыОтбора);
		Если Данные.Количество() > 0 Тогда
			СтрокаДанных = Данные[0];
			СтрокаДанных["ИНДЕКС"+Постфикс] = РоссийскийАдрес_["Индекс"];
			СтрокаДанных["КОД_РЕГИОНА"+Постфикс] = РоссийскийАдрес_["КодРегиона"];
			СтрокаДанных["РАЙОН"+Постфикс] = РоссийскийАдрес_["Район"];
			СтрокаДанных["ГОРОД"+Постфикс] = РоссийскийАдрес_["Город"];
			СтрокаДанных["НАСЕЛЕННЫЙ_ПУНКТ"+Постфикс] = РоссийскийАдрес_["НаселенныйПункт"];
			СтрокаДанных["УЛИЦА"+Постфикс] = РоссийскийАдрес_["Улица"];
			СтрокаДанных["ДОМ"+Постфикс] = РоссийскийАдрес_["Дом"];
			СтрокаДанных["КОРПУС"+Постфикс] = РоссийскийАдрес_["Корпус"];
			СтрокаДанных["КВАРТИРА"+Постфикс] = РоссийскийАдрес_["Квартира"];
			
			Если ТекущийТипСтраницы = 2 Тогда 
				Регион = Регионы.НайтиСтроки(Новый Структура("Код", РоссийскийАдрес_["КодРегиона"]));
				Если Регион.Количество() > 0 Тогда
					СтрокаДанных["РЕГИОН"] = Регион[0].Наим;
				Иначе
					СтрокаДанных["РЕГИОН"] = "";
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаДаты(Инфо)
	
	ИмяПоля = Инфо.Имя;
	ДатаИсх = Неопределено;
	Если ИмяПоля = "ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А" Тогда
		ИмяОбласти = "ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А";
		
		ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
		Данные = ЭтотОбъект["ЛистыА"].НайтиСтроки(ПараметрыОтбора);
		ТекущийЛист = Данные[0];
		
	ИначеЕсли ИмяПоля = "ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_Б" Тогда
		ИмяОбласти = "ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_Б";
		
		ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
		Данные = ЭтотОбъект["ЛистыБ"].НайтиСтроки(ПараметрыОтбора);
		ТекущийЛист = Данные[0];
		
	ИначеЕсли ИмяПоля = "ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_В" Тогда
		ИмяОбласти = "ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_В";
		
		ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
		Данные = ЭтотОбъект["ЛистыВ"].НайтиСтроки(ПараметрыОтбора);
		ТекущийЛист = Данные[0];
		
	ИначеЕсли ИмяПоля = "ДАТА_ПОДПИСИ" Тогда
		ИмяОбласти = "ДАТА_ПОДПИСИ";
		
		ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
		Данные = ЭтотОбъект["ТитульнаяСтраница"].НайтиСтроки(ПараметрыОтбора);
		ТекущийЛист = Данные[0];
		УстановитьДанныеПоРегистрацииВИФНС();
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийЛист[ИмяОбласти]) Тогда
		ДатаИсх = ТекущийЛист[ИмяОбласти];
	КонецЕсли;
	
	ПараметрыДаты = Новый Структура("ДатаПодписи", ДатаИсх);
	ФормаДаты = ПолучитьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораДаты", ПараметрыДаты, ЭтотОбъект, ЭтотОбъект);
	ФормаДаты.Заголовок = Инфо.ИмяСписка;
	ДополнительныеПараметры = Новый Структура("ИмяОбласти, Инфо, ТекущийЛист, ФормаДаты", ИмяОбласти, Инфо, ТекущийЛист, ФормаДаты);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаДатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаДаты.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаДаты.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаДаты.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаДатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяОбласти = ДополнительныеПараметры.ИмяОбласти;
	Инфо = ДополнительныеПараметры.Инфо;
	ТекущийЛист = ДополнительныеПараметры.ТекущийЛист;
	ФормаДаты = ДополнительныеПараметры.ФормаДаты;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДатаРезультат = ФормаДаты.Дата;
		
		Если ЗначениеЗаполнено(ДатаРезультат) Тогда 
			ПредставлениеУведомления.Область(ИмяОбласти).Значение = ДатаРезультат;
			ТекущийЛист[ИмяОбласти] = ДатаРезультат;
		Иначе
			ПредставлениеУведомления.Область(ИмяОбласти).Значение = "";
			ТекущийЛист[ИмяОбласти] = "";
		КонецЕсли;
		
		Если Инфо.Имя = "ДАТА_ПОДПИСИ" Тогда
			Объект.ДатаПодписи = ДатаРезультат;
			УстановитьДанныеПоРегистрацииВИФНС();
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСписка(Инфо)
	ИмяНестандартнойОбласти = Инфо.Имя;
	НазваниеСписка = Инфо.ИмяФормы;
	
	СтруктураОтбора = Новый Структура("ИмяСписка", Инфо.ИмяСписка);
	Строки = ТаблицаЗначенийПредопределенныхРеквизитов.НайтиСтроки(СтруктураОтбора);
	ЗагружаемыеКоды.Очистить();
	Для Каждого Строка Из Строки Цикл 
		НоваяСтрока = ЗагружаемыеКоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          "Выбор кода");
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ЗагружаемыеКоды);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение));
	ДополнительныеПараметры = Новый Структура("ИмяНестандартнойОбласти", ИмяНестандартнойОбласти);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИмяНестандартнойОбласти = ДополнительныеПараметры.ИмяНестандартнойОбласти;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыбораКод = СокрЛП(РезультатВыбора.Код);
	ПредставлениеУведомления.Области[ИмяНестандартнойОбласти].Значение = РезультатВыбораКод;
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(ИмяНестандартнойОбласти, РезультатВыбораКод);
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	ДобавитьДопЛист();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНО(Инфо)
	ПараметрыРегистрации = Новый Структура("Владелец", Объект.Организация);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыРегистрации);
	
	Форма = ПолучитьФорму("Справочник.РегистрацииВНалоговомОргане.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	ДополнительныеПараметры = Новый Структура("Инфо", Инфо);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКодаНОЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Инфо = ДополнительныеПараметры.Инфо;
	
	Если Результат <> Неопределено Тогда 
		Объект.РегистрацияВИФНС = Результат;
		ПредставлениеУведомления.Области[Инфо.Имя].Значение = КодНалоговогоОргана();
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КодНалоговогоОргана()
	УстановитьДанныеПоРегистрацииВИФНС();
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяОбласти(ТекущийТипСтраницы)
	Если ТекущийТипСтраницы = 1 Тогда
		Возврат "Титульная";
	ИначеЕсли ТекущийТипСтраницы = 2 Тогда
		Возврат "ЛИСТА";
	ИначеЕсли ТекущийТипСтраницы = 3 Тогда
		Возврат "ЛИСТБ";
	ИначеЕсли ТекущийТипСтраницы = 4 Тогда
		Возврат "ЛИСТВ";
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТаблицы(ТекущийТипСтраницы)
	Если ТекущийТипСтраницы = 1 Тогда
		Возврат "ТитульнаяСтраница";
	ИначеЕсли ТекущийТипСтраницы = 2 Тогда
		Возврат "ЛистыА";
	ИначеЕсли ТекущийТипСтраницы = 3 Тогда
		Возврат "ЛистыБ";
	ИначеЕсли ТекущийТипСтраницы = 4 Тогда
		Возврат "ЛистыВ";
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаСервере
Процедура УстановитьПредставителяПоОрганизации(Титульный)
	Организация = Объект.Организация;
	ДатаДанных = ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса());
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		СтрокаСведений = "ФамилияРук,ИмяРук,ОтчествоРук";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаДанных, СтрокаСведений);
		Фамилия = СокрЛП(СведенияОбОрганизации.ФамилияРук);
		Имя = СокрЛП(СведенияОбОрганизации.ИмяРук);
		Отчество = СокрЛП(СведенияОбОрганизации.ОтчествоРук);
	Иначе
		СтрокаСведений = "ФамилияИП,ИмяИП,ОтчествоИП";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаДанных, СтрокаСведений);
		Фамилия = СокрЛП(СведенияОбОрганизации.ФамилияИП);
		Имя = СокрЛП(СведенияОбОрганизации.ИмяИП);
		Отчество = СокрЛП(СведенияОбОрганизации.ОтчествоИП);
	КонецЕсли;
	Титульный.ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
	Объект.ПодписантФамилия = Фамилия;
	Объект.ПодписантИмя = Имя;
	Объект.ПодписантОтчество = Отчество;
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС()
	
	Титульный = ТитульнаяСтраница[0];
	Организация = Объект.Организация;
	РегистрацияВИФНС = Объект.РегистрацияВИФНС;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Представитель,КПП,ДокументПредставителя");
	Титульный.КОД_НО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВИФНС, "Код");
	Титульный.П_КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВИФНС, "КПП");
	ЭтоИП = (Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация));
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		ПризнакПодписанта = ?(ЭтоИП,"2","4");
		Титульный.ПРИЗНАК_НП_ПОДВАЛ = ПризнакПодписанта;
		Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ = Реквизиты.ДокументПредставителя;
		Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоФизЛицу(Объект, Реквизиты.Представитель, Титульный, "ИНН_ПОДПИСАНТА");
	Иначе
		УстановитьПредставителяПоОрганизации(Титульный);
		ПризнакПодписанта = ?(ЭтоИП,"1","3");
		Титульный.ПРИЗНАК_НП_ПОДВАЛ = ПризнакПодписанта;
		Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ = "";
	КонецЕсли;
	
	Если ТекущийТипСтраницы = 1 Тогда
		ПредставлениеУведомления.Область("П_КПП").Значение = Титульный.П_КПП;
		ПредставлениеУведомления.Область("ПРИЗНАК_НП_ПОДВАЛ").Значение = Титульный.ПРИЗНАК_НП_ПОДВАЛ;
		ПредставлениеУведомления.Область("ТЕЛЕФОН").Значение = Титульный.ТЕЛЕФОН;
		ПредставлениеУведомления.Область("ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ").Значение = Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ;
		ПредставлениеУведомления.Область("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ").Значение = Титульный.ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ;
		ПредставлениеУведомления.Область("ИНН_ПОДПИСАНТА").Значение = Титульный.ИНН_ПОДПИСАНТА;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДерево()
	КорневойУровень = Разделы.ПолучитьЭлементы();
	Если ТитульнаяСтраница.Количество() = 0 Тогда
		НовыйЛист = ТитульнаяСтраница.Добавить();
		ЗаполнитьТитульный(НовыйЛист);
	КонецЕсли;
	Титульный = КорневойУровень.Добавить();
	Титульный.Наименование = "Титульный лист";
	Титульный.ИндексКартинки = 1;
	Титульный.ТипСтраницы = 1;
	Титульный.UID = ТитульнаяСтраница[0].UID;
	
	Для Каждого ДопЛист Из ЛистыА Цикл 
		Лист = КорневойУровень.Добавить();
		Лист.ИндексКартинки = 1;
		Лист.ТипСтраницы = 2;
		Лист.Наименование = "Лист А";
		Лист.UID = ДопЛист.UID;
	КонецЦикла;
	
	Для Каждого ДопЛист Из ЛистыБ Цикл 
		Лист = КорневойУровень.Добавить();
		Лист.ИндексКартинки = 1;
		Лист.ТипСтраницы = 3;
		Лист.Наименование = "Лист Б";
		Лист.UID = ДопЛист.UID;
	КонецЦикла;
	
	Для Каждого ДопЛист Из ЛистыВ Цикл 
		Лист = КорневойУровень.Добавить();
		Лист.ИндексКартинки = 1;
		Лист.ТипСтраницы = 4;
		Лист.Наименование = "Лист В";
		Лист.UID = ДопЛист.UID;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛистА();
	КорневойУровень = Разделы.ПолучитьЭлементы();
	Если КорневойУровень.Количество() > 1 Тогда
		КорневойУровень.Удалить(1);
	КонецЕсли;
	
	НовыйЛист = ЛистыА.Добавить();
	ЛистыБ.Очистить();
	ЛистыВ.Очистить();
	ЗаполнитьЛистА(НовыйЛист);
	ДопЛист = КорневойУровень.Добавить();
	ДопЛист.ИндексКартинки = 1;
	ДопЛист.ТипСтраницы = 2;
	ДопЛист.Наименование = "Лист А";
	ДопЛист.UID = НовыйЛист.UID;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛистБ();
	КорневойУровень = Разделы.ПолучитьЭлементы();
	Если КорневойУровень.Количество() > 1 Тогда
		КорневойУровень.Удалить(1);
	КонецЕсли;
	
	НовыйЛист = ЛистыБ.Добавить();
	ЛистыА.Очистить();
	ЛистыВ.Очистить();
	ЗаполнитьЛистБ(НовыйЛист);
	ДопЛист = КорневойУровень.Добавить();
	ДопЛист.ИндексКартинки = 1;
	ДопЛист.ТипСтраницы = 3;
	ДопЛист.Наименование = "Лист Б";
	ДопЛист.UID = НовыйЛист.UID;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛистВ();
	КорневойУровень = Разделы.ПолучитьЭлементы();
	Если КорневойУровень.Количество() > 1 Тогда
		КорневойУровень.Удалить(1);
	КонецЕсли;
	
	НовыйЛист = ЛистыВ.Добавить();
	ЛистыА.Очистить();
	ЛистыБ.Очистить();
	ЗаполнитьЛистВ(НовыйЛист);
	ДопЛист = КорневойУровень.Добавить();
	ДопЛист.ИндексКартинки = 1;
	ДопЛист.ТипСтраницы = 4;
	ДопЛист.Наименование = "Лист В";
	ДопЛист.UID = НовыйЛист.UID;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопЛист()
	ПризнакГде = ТитульнаяСтраница[0].ПРИЗНАК_ГДЕ;
	ПризнакОткрытиеЗакрытие = ТитульнаяСтраница[0].ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ;
	
	Если ПризнакГде = "1" Тогда 
		Если ПризнакОткрытиеЗакрытие = "1" Или ПризнакОткрытиеЗакрытие = "2" Тогда
			//должен быть лист А
			Если ЛистыА.Количество() > 0 Тогда 
				Возврат;
			КонецЕсли;
			ДобавитьЛистА();
		ИначеЕсли ПризнакОткрытиеЗакрытие = "3" Или ПризнакОткрытиеЗакрытие = "4" Тогда 
			//должен быть лист В
			Если ЛистыВ.Количество() > 0 Тогда 
				Возврат;
			КонецЕсли;
			ДобавитьЛистВ();
		Иначе
			//Не должно быть доп. листов
		КонецЕсли;
	ИначеЕсли ПризнакГде = "2" Тогда 
		//должен быть лист Б
			Если ЛистыБ.Количество() > 0 Тогда 
				Возврат;
			КонецЕсли;
			ДобавитьЛистБ();
	Иначе
		//Не должно быть доп. листов
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьДанные();
	КонецЕсли;
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Параметры.Свойство("Ключ") Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.Организация = Параметры.Организация;
		Если Параметры.Свойство("НалоговыйОрган") И ЗначениеЗаполнено(Параметры.НалоговыйОрган) Тогда 
			Объект.РегистрацияВИФНС = Параметры.НалоговыйОрган;
		Иначе
			Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " (создание)";
	КонецЕсли;
	
	ДоступныБанковскиеСчета = (Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено);
	ЗагрузитьДанные();
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗагрузитьМакеты(ЭтотОбъект, "ФормаС_09_1Параметры");
	СформироватьДерево();
	
	Если Не Параметры.Свойство("Ключ") Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьДанныеПоРегистрацииВИФНС();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	ОтборПоИмениОбласти = Новый Структура("Имя", Область.Имя);
	Поля = ПоляСОсобымПорядкомЗаполнения.НайтиСтроки(ОтборПоИмениОбласти);
	Если Поля.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НестандартнаяОбработка(Поля[0], Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	Если ТекущийИдентификаторСтраницы = Элемент.ТекущиеДанные.UID И
		ТекущийТипСтраницы = Элемент.ТекущиеДанные.ТипСтраницы Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийИдентификаторСтраницы = Элемент.ТекущиеДанные.UID;
	ТекущийТипСтраницы = Элемент.ТекущиеДанные.ТипСтраницы;
	СформироватьМакетНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область)
	ИмяОбласти = ПолучитьИмяОбласти(ТекущийТипСтраницы);
	Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ПолучитьИмяТаблицы(ТекущийТипСтраницы);
	ПараметрыОтбора = Новый Структура("UID", ТекущийИдентификаторСтраницы);
	Данные = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	СтруктураЗаписи = Новый Структура(Область.Имя, Область.Значение);
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Данные[0], СтруктураЗаписи);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция СформироватьПечатнуюФорму(ПФР_ФСС = 0)
	СохранитьДанные();
	Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения"));
	Возврат Документ.ПечатьСразу(ПФР_ФСС);
КонецФункции

&НаКлиенте
Процедура ПечатьУведомления(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстВопроса = "Сообщение изменено. Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ДополнительныеПараметры = Новый Структура("ПФР_ФСС", 0);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьУведомленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ПФ = СформироватьПечатнуюФорму();
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПФР_ФСС = ДополнительныеПараметры.ПФР_ФСС;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПФ = СформироватьПечатнуюФорму(ПФР_ФСС);
		Если ПФ <> Неопределено Тогда 
			ПФ.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = "Сообщение изменено. Перед печатью необходимо сохранить изменения. Сохранить изменения?";
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Уведомление", "Уведомление");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	ИначеЕсли Модифицированность Тогда 
		СохранитьДанные();
	КонецЕсли;
	
	МассивПечати = Новый Массив;
	МассивПечати.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.УведомлениеОСпецрежимахНалогообложения",
		"Уведомление", МассивПечати, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Уведомление = ДополнительныеПараметры.Уведомление;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьДанные();
		МассивПечати = Новый Массив;
		МассивПечати.Добавить(Объект.Ссылка);
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Документ.УведомлениеОСпецрежимахНалогообложения",
			Уведомление, МассивПечати, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	Закрыть(Неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отправка в ФНС

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

#КонецОбласти