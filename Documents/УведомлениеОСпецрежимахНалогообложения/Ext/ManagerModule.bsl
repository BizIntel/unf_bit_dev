#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Возвращает имя формы для данного вида уведомления (строка),
// Параметры:
//   Вид - Перечисления.ВидыУведомленийОСпецрежимах - вид уведомления.
//
Функция ПолучитьПолноеИмяФормыПоВиду(Вид) Экспорт
	Если Вид = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда 
		Возврат "Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаС_09_1";
	ИначеЕсли Вид = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда 
		Возврат "Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаС_09_2";
	КонецЕсли;
	Возврат "";
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПечатьУведомления(МассивОбъектов, ОбъектыПечати, ПФР_ФСС = 0)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокОбъект = МассивОбъектов[0].ПолучитьОбъект();
	ПФ = ДокОбъект.СформироватьМакет(ПФР_ФСС);
	ПФ.АвтоМасштаб = Истина;
	ПФ.ПолеСверху = 0;
	ПФ.ПолеСнизу = 0;
	ПФ.ПолеСлева = 0;
	ПФ.ПолеСправа = 0;
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ПФ, 1, ОбъектыПечати, ДокОбъект.Ссылка);
	
	Возврат ПФ;
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Уведомление") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Уведомление", МассивОбъектов[0].ВидУведомления, 
			ПечатьУведомления(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Уведомление_ПФР") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Уведомление_ПФР", Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1, 
			ПечатьУведомления(МассивОбъектов, ОбъектыПечати, 1));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Уведомление_ФСС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Уведомление_ФСС", Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1, 
			ПечатьУведомления(МассивОбъектов, ОбъектыПечати, 2));
	КонецЕсли;

КонецПроцедуры

Функция АдресСтрокой(Данные, Постфикс) Экспорт 
	Результат = "";
	
	РоссийскийАдрес = Новый Соответствие;
	РоссийскийАдрес.Вставить("Индекс",	        Данные["ИНДЕКС"+Постфикс]);
	РоссийскийАдрес.Вставить("КодРегиона",      Данные["КОД_РЕГИОНА"+Постфикс]);
	РоссийскийАдрес.Вставить("Район",           Данные["РАЙОН"+Постфикс]);
	РоссийскийАдрес.Вставить("Город",           Данные["ГОРОД"+Постфикс]);
	РоссийскийАдрес.Вставить("НаселенныйПункт", Данные["НАСЕЛЕННЫЙ_ПУНКТ"+Постфикс]);
	РоссийскийАдрес.Вставить("Улица",           Данные["УЛИЦА"+Постфикс]);
	РоссийскийАдрес.Вставить("Дом",             Данные["ДОМ"+Постфикс]);
	РоссийскийАдрес.Вставить("Корпус",          Данные["КОРПУС"+Постфикс]);
	РоссийскийАдрес.Вставить("Квартира",        Данные["КВАРТИРА"+Постфикс]);
	
	Если ЗначениеЗаполнено(РоссийскийАдрес["Индекс"]) Тогда
		Результат = Результат + РоссийскийАдрес["Индекс"] + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.РЕГИОН) Тогда
		Результат = Результат + Данные.РЕГИОН + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РоссийскийАдрес["Район"]) Тогда
		Результат = Результат + РоссийскийАдрес["Район"] + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РоссийскийАдрес["Город"]) Тогда
		Результат = Результат + РоссийскийАдрес["Город"] + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РоссийскийАдрес["НаселенныйПункт"]) Тогда
		Результат = Результат + РоссийскийАдрес["НаселенныйПункт"] + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РоссийскийАдрес["Улица"]) Тогда
		Результат = Результат + РоссийскийАдрес["Улица"] + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РоссийскийАдрес["Дом"]) Тогда
		Результат = Результат + "д. " + РоссийскийАдрес["Дом"] + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РоссийскийАдрес["Корпус"]) Тогда
		Результат = Результат + "корп. " + РоссийскийАдрес["Корпус"] + ", ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РоссийскийАдрес["Квартира"]) Тогда 
		Результат = Результат + "кв. " + РоссийскийАдрес["Квартира"] + ", ";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция РегистрацияВФНСОрганизации(Организация, ДатаПодписи = Неопределено, КодНО = Неопределено) Экспорт
	
	Если Организация.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено 
		И КодНО = Неопределено Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	КонецЕсли;
	
	СтрокаСведений = "КодНО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ЗначениеЗаполнено(КодНО) Тогда 
		Запрос.УстановитьПараметр("КодНО", КодНО);
	Иначе 
		Запрос.УстановитьПараметр("КодНО", СведенияОбОрганизации.КодНО);
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВИФНС
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Код = &КодНО
		|	И РегистрацииВНалоговомОргане.Владелец = &Организация";
		
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда 
		Возврат Результат[0].РегистрацияВИФНС;
	Иначе
		Возврат Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура УстановитьДанныеРуководителя(Объект) Экспорт 
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда 
		СтрокаСведений = "ФамилияРук,ИмяРук,ОтчествоРук";
		ДатаДанных = ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса());
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, ДатаДанных, СтрокаСведений);
		Объект.ПодписантФамилия = СведенияОбОрганизации.ФамилияРук;
		Объект.ПодписантИмя = СведенияОбОрганизации.ИмяРук;
		Объект.ПодписантОтчество = СведенияОбОрганизации.ОтчествоРук;
	Иначе
		СтрокаСведений = "ФамилияИП,ИмяИП,ОтчествоИП";
		ДатаДанных = ?(ЗначениеЗаполнено(Объект.ДатаПодписи), Объект.ДатаПодписи, ТекущаяДатаСеанса());
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, ДатаДанных, СтрокаСведений);
		Объект.ПодписантФамилия = СведенияОбОрганизации.ФамилияИП;
		Объект.ПодписантИмя = СведенияОбОрганизации.ИмяИП;
		Объект.ПодписантОтчество = СведенияОбОрганизации.ОтчествоИП;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьМакетыУведомления(Форма, ИмяОтчета, ИмяМакета) Экспорт 
	Макет = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	ЗагрузитьМакетыВнутренняя(Форма, Макет);
КонецПроцедуры

Процедура ЗагрузитьМакеты(Форма, ИмяМакета) Экспорт 
	Макет = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет(ИмяМакета);
	ЗагрузитьМакетыВнутренняя(Форма, Макет);
КонецПроцедуры

Процедура ЗагрузитьМакетыВнутренняя(Форма, Макет)
	
	ОбластьОсобыхПолей = Макет.Область("ПоляСОсобымПорядкомОбработки");
	ТекущаяСтрока = ОбластьОсобыхПолей.Верх;
	Пока ТекущаяСтрока <= ОбластьОсобыхПолей.Низ Цикл
		Ячейка = Макет.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1);
		Если Не ЗначениеЗаполнено(Ячейка.Текст) Тогда 
			Прервать;
		КонецЕсли;
		НовыйЭлемент = Форма.ПоляСОсобымПорядкомЗаполнения.Добавить();
		НовыйЭлемент.Имя = Ячейка.Текст;
		НовыйЭлемент.Обработчик = Макет.Область(ТекущаяСтрока, 2, ТекущаяСтрока, 2).Текст;
		НовыйЭлемент.ИмяСписка = Макет.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		НовыйЭлемент.ИмяФормы = Макет.Область(ТекущаяСтрока, 4, ТекущаяСтрока, 4).Текст;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;

	ОбластьОсобыхПолей = Макет.Область("ПоляСОсобымПорядкомОбработкиЗначения");
	ТекущаяСтрока = ОбластьОсобыхПолей.Верх;
	Пока ТекущаяСтрока <= ОбластьОсобыхПолей.Низ Цикл
		ИмяОбласти = Макет.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда 
			Прервать;
		КонецЕсли;
		
		Код = Макет.Область(ТекущаяСтрока, 2, ТекущаяСтрока, 2).Текст;
		Название = Макет.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		Строка = Форма.ТаблицаЗначенийПредопределенныхРеквизитов.Добавить();
		Строка.ИмяСписка = ИмяОбласти;
		Строка.Код = Код;
		Строка.Название = Название;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьМакетыПростойФормы(Форма, ИмяМакета) Экспорт
	ПараметрыЗаявления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет(ИмяМакета);
	ЗагрузитьМакетыПростойФормыВнутренняя(Форма, ПараметрыЗаявления);
КонецПроцедуры

Процедура ЗагрузитьМакетыУведомленияПростойФормы(Форма, ИмяОтчета, ИмяМакета) Экспорт
	ПараметрыЗаявления = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	ЗагрузитьМакетыПростойФормыВнутренняя(Форма, ПараметрыЗаявления);
КонецПроцедуры

Процедура ЗагрузитьМакетыПростойФормыВнутренняя(Форма, ПараметрыЗаявления)
	ОбластьОсобыхПолей = ПараметрыЗаявления.Область("ПоляСОсобымПорядкомОбработки");
	
	ТекущаяСтрока = ОбластьОсобыхПолей.Верх;
	Пока ТекущаяСтрока <= ОбластьОсобыхПолей.Низ Цикл
		Ячейка = ПараметрыЗаявления.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1);
		Форма.СписокОбластейСОсобойОбработкой.Вставить(ТекущаяСтрока - ОбластьОсобыхПолей.Верх, Ячейка.Текст);
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;
	
	ОбластьОсобыхПолей = ПараметрыЗаявления.Область("ПоляСОсобымПорядкомОбработкиЗначения");
	ТекущаяСтрока = ОбластьОсобыхПолей.Верх;
	Пока ТекущаяСтрока <= ОбластьОсобыхПолей.Низ Цикл
		ИмяОбласти = ПараметрыЗаявления.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		Код = ПараметрыЗаявления.Область(ТекущаяСтрока, 2, ТекущаяСтрока, 2).Текст;
		Название = ПараметрыЗаявления.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		Строка = Форма.ТаблицаЗначенийПредопределенныхРеквизитов.Добавить();
		Строка.ИмяОсобогоПоля = ИмяОбласти;
		Строка.Код = Код;
		Строка.Название = Название;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДеревоЛистовЕНВД(Форма) Экспорт 
	КорневойУровень = Форма.РазделыЗаявления.ПолучитьЭлементы();
	СформироватьДеревоЛистовЕНВДВнутренняя(Форма, КорневойУровень);
КонецПроцедуры

Процедура СформироватьДеревоЛистовЕНВДУведомления(Форма) Экспорт 
	КорневойУровень = Форма.Разделы.ПолучитьЭлементы();
	КорневойУровень.Очистить();
	СформироватьДеревоЛистовЕНВДВнутренняя(Форма, КорневойУровень);
КонецПроцедуры

Процедура СформироватьДеревоЛистовЕНВДВнутренняя(Форма, КорневойУровень) 
	Если Форма.ТитульныйЛист.Количество() = 0 Тогда
		НовыйЛист = Форма.ТитульныйЛист.Добавить();
		Форма.ЗаполнитьТитульныйЛист(НовыйЛист);
	КонецЕсли;
	Титульный = КорневойУровень.Добавить();
	Титульный.Наименование = "Титульный лист";
	Титульный.ИндексКартинки = 1;
	Титульный.ТипСтраницы = 1;
	Титульный.UID = Форма.ТитульныйЛист[0].UID;
	
	Листы2 = КорневойУровень.Добавить();
	Листы2.Наименование = "Сведения о видах" + Символы.ПС + "деятельности";
	СписокЛистов2 = Листы2.ПолучитьЭлементы();
	
	Если Форма.СтраницыЛиста2.Количество() = 0 Тогда
		НовыйЛист = Форма.СтраницыЛиста2.Добавить();
		Форма.ЗаполнитьЛист2(НовыйЛист);
	КонецЕсли;
	
	Номер = 1;
	Для Каждого Страница2 Из Форма.СтраницыЛиста2 Цикл 
		Лист2 = СписокЛистов2.Добавить();
		Лист2.ИндексКартинки = 1;
		Лист2.ТипСтраницы = 2;
		Лист2.Наименование = "Стр. " + Номер;
		Лист2.UID = Страница2.UID;
		Номер = Номер + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДанныеЕНВД(Форма, ЗначениеКопирования = Неопределено) Экспорт 
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда 
		СсылкаНаДанные = Форма.Объект.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		СсылкаНаДанные = ЗначениеКопирования;
	Иначе 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = СсылкаНаДанные.ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.ТитульныйЛист;
	НоваяСтрока = Форма.ТитульныйЛист.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Титульный[0]);
	
	Стр2 = СтруктураПараметров.Лист2;
	Для Каждого Строка Из Стр2 Цикл
		НоваяСтрока = Форма.СтраницыЛиста2.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьПредставителяПоФизЛицу(Объект, Физлицо, Титульный, ИмяПоляИННПодписанта) Экспорт 
	Если ЗначениеЗаполнено(Физлицо) Тогда 
		ДанныеПредставителя = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(Физлицо, , Объект.ДатаПодписи);
		Фамилия = СокрЛП(ДанныеПредставителя.Фамилия);
		Имя = СокрЛП(ДанныеПредставителя.Имя);
		Отчество = СокрЛП(ДанныеПредставителя.Отчество);
		Титульный.ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
		Титульный[ИмяПоляИННПодписанта] = ДанныеПредставителя.ИНН;
	Иначе
		Фамилия = "";
		Имя = "";
		Отчество = "";
		Титульный[ИмяПоляИННПодписанта] = ""; 
		Титульный.ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = "";
	КонецЕсли;
	
	Объект.ПодписантФамилия = Фамилия;
	Объект.ПодписантИмя = Имя;
	Объект.ПодписантОтчество = Отчество;
КонецПроцедуры

Процедура СохранитьДанныеЕНВД(Форма, ВидУведомления) Экспорт 
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Форма.Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидУведомления = ВидУведомления;
		Объект.Дата = ТекущаяДатаСеанса() 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ТитульныйЛист[0].ДАТА_ПОДПИСИ) Тогда
		Объект.ДатаПодписи = Форма.ТитульныйЛист[0].ДАТА_ПОДПИСИ;
	Иначе
		Объект.ДатаПодписи = Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ТитульныйЛист, Лист2",
			Форма.ТитульныйЛист.Выгрузить(),
			Форма.СтраницыЛиста2.Выгрузить());
	
	Документ = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.УведомлениеОСпецрежимахНалогообложения"));
	Документ.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	Документ.Записать();
	ЗначениеВДанныеФормы(Документ, Объект);
	Форма.Модифицированность = Ложь;
	Форма.Заголовок = СтрЗаменить(Форма.Заголовок, " (создание)", "");

КонецПроцедуры

Процедура СформироватьМакетНаСервере(Форма, ИмяМакета, ИмяОбласти, ИмяТаблицы) Экспорт 
	Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("UID", Форма.ТекущийИдентификаторСтраницы);
	Данные = Форма[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	
	Макет = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет(ИмяМакета);
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Область.Параметры, Данные[0]);
	КонецЕсли;
	
	Форма.ПредставлениеУведомления = Новый ТабличныйДокумент;
	Форма.ПредставлениеУведомления.Вывести(Область);
	Форма.ПредставлениеУведомления.ВыделенныеОбласти.Очистить();
	Форма.ПредставлениеУведомления.ТекущаяОбласть = Форма.ПредставлениеУведомления.Область(0,0,0,0);
КонецПроцедуры

Процедура СформироватьМакетОтчетаНаСервере(Форма, ИмяОтчета, ИмяМакета, ИмяОбласти, ИмяТаблицы) Экспорт 
	Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("UID", Форма.ТекущийИдентификаторСтраницы);
	Данные = Форма[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
	
	Макет = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Если Данные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Область.Параметры, Данные[0]);
	КонецЕсли;
	
	Форма.ПредставлениеУведомления.Очистить();
	Форма.ПредставлениеУведомления.Вывести(Область);
	Форма.ПредставлениеУведомления.ВыделенныеОбласти.Очистить();
	Форма.ТекущийЭлемент = Форма.Элементы.ПредставлениеУведомления;
	Форма.Элементы.ПредставлениеУведомления.ТекущаяОбласть = Форма.ПредставлениеУведомления.Область(1,1,1,1);
	
	Попытка
		СтруктураРеквизитов = Форма.СтруктураРеквизитов;
		ВариантыЗаполнения = Форма["ТаблицаВариантыЗаполнения" + ИмяТаблицы][0].ТаблицаВариантовЗаполнения;
		Для Каждого Стр Из ВариантыЗаполнения Цикл 
			Если 3 = Стр.ВариантЗаполнения Тогда 
				Обл = Форма.ПредставлениеУведомления.Области.Найти(Стр.КодПоказателя);
				Если Обл <> Неопределено Тогда 
					Обл.ЦветФона = СтруктураРеквизитов.ЦветАвтоЗаполнение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		СтруктураРеквизитов = Неопределено;
	КонецПопытки;
КонецПроцедуры

Функция ДанныеУведомления_ТорговыйСбор(Организация, РегистрацияВНалоговомОргане, Конец)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Конец", КонецДня(Конец));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустойНО", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
		|	УведомлениеОСпецрежимахНалогообложения.ДанныеУведомления,
		|	УведомлениеОСпецрежимахНалогообложения.ДатаПодписи КАК ДатаПодписи,
		|	РегистрацииВНалоговомОргане.Код КАК КодНО
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО УведомлениеОСпецрежимахНалогообложения.РегистрацияВИФНС = РегистрацииВНалоговомОргане.Ссылка
		|ГДЕ
		|	УведомлениеОСпецрежимахНалогообложения.ДатаПодписи <= &Конец
		|	И УведомлениеОСпецрежимахНалогообложения.Организация = &Организация
		|	И УведомлениеОСпецрежимахНалогообложения.РегистрацияВИФНС <> &ПустойНО
		|	И УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1)
		|	И НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПодписи УБЫВ";
		
	ФлагНадоОчистить = Ложь;
	ТаблицаДанных = ИнтерфейсыВзаимодействияБРО.НовыйТаблицаДанныхРеглОтчета();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) И ЗначениеЗаполнено(Выборка.КодНО) Тогда
			РегистрацияВНалоговомОргане = Выборка.КодНО;
		КонецЕсли;
		
		Данные = Выборка.ДанныеУведомления.Получить();
		
		Если Данные.Титульный[0].КодПричины <> "1" Тогда 
			ФлагНадоОчистить = Истина;
			Прервать;
		КонецЕсли;
		
		Для Каждого СтрСвед Из Данные.Сведения Цикл
			Если СтрСвед.ДАТА_ПРАВА > Конец Тогда 
				Продолжить;
			КонецЕсли;
			
			Строка = ТаблицаДанных.Добавить();
			Строка.Период = СтрСвед.ДАТА_ПРАВА;
			Строка.ВидНалога = Перечисления.ВидыНалогов.ТорговыйСбор;
			Строка.ОКАТО = СтрСвед.ОКТМО;
			Если ЗначениеЗаполнено(СтрСвед.СтавкаСбораКвм) Тогда
				Строка.Сумма = Окр(СтрСвед.СтавкаСбораКвм*СтрСвед.ПлощТоргЗала, 0, РежимОкругления.Окр15как20) - СтрСвед.СуммаЛьготы;
			ИначеЕсли ЗначениеЗаполнено(СтрСвед.СтавкаСбораРуб) Тогда
				Строка.Сумма = СтрСвед.СтавкаСбораРуб - СтрСвед.СуммаЛьготы;
			КонецЕсли;
			
			Если Строка.Сумма < 0 Тогда 
				Строка.Сумма = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ФлагНадоОчистить Тогда
		ТаблицаДанных.Очистить();
	КонецЕсли;
	
	Возврат ТаблицаДанных;
КонецФункции

Функция ДанныеУведомления(Требование, Организация, РегистрацияВНалоговомОргане, Конец) Экспорт
	Если Требование = "ТорговыйСбор.2015_Уплата" Тогда
		Возврат ДанныеУведомления_ТорговыйСбор(Организация, РегистрацияВНалоговомОргане, Конец);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПлательщикТорговогоСбора(НачалоПериода, КонецПериода, Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Нач", НачалоПериода);
	Запрос.УстановитьПараметр("Кон", КонецПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления,
	|	УведомлениеОСпецрежимахНалогообложения.Ссылка,
	|	УведомлениеОСпецрежимахНалогообложения.ДанныеУведомления
	|ИЗ
	|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
	|ГДЕ
	|	УведомлениеОСпецрежимахНалогообложения.Организация = &Организация
	|	И УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1)
	|	И НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления,
	|	УведомлениеОСпецрежимахНалогообложения.Ссылка,
	|	УведомлениеОСпецрежимахНалогообложения.ДанныеУведомления
	|ИЗ
	|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
	|ГДЕ
	|	УведомлениеОСпецрежимахНалогообложения.Организация = &Организация
	|	И УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС2)
	|	И НЕ УведомлениеОСпецрежимахНалогообложения.ПометкаУдаления";
	
	ТС1ВПериоде = Неопределено;
	ТС1ДоПериода = Неопределено;
	ТС2ДоПериода = Неопределено;
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Пока Результат.Следующий() Цикл
		Данные = Результат.ДанныеУведомления.Получить();
		
		Если Результат.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1 Тогда 
			Для Каждого СтрСвед Из Данные.Сведения Цикл
				ДАТА_ПР = СтрСвед.ДАТА_ПРАВА;
				Если ЗначениеЗаполнено(ДАТА_ПР) И ДАТА_ПР < НачалоПериода Тогда 
					Если ЗначениеЗаполнено(ТС1ДоПериода) Тогда 
						ТС1ДоПериода = ?(ТС1ДоПериода > ДАТА_ПР, ТС1ДоПериода, ДАТА_ПР);
					Иначе
						ТС1ДоПериода = ДАТА_ПР;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДАТА_ПР) И ДАТА_ПР >= НачалоПериода И ДАТА_ПР < КонецПериода Тогда 
					ТС1ВПериоде = ДАТА_ПР;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Результат.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС2 Тогда
			ДАТА_ПР = Данные.Титульный[0].ДАТА_ПР;
			Если ЗначениеЗаполнено(ДАТА_ПР) И ДАТА_ПР < НачалоПериода Тогда 
				Если ЗначениеЗаполнено(ТС2ДоПериода) Тогда 
					ТС2ДоПериода = ?(ТС2ДоПериода > ДАТА_ПР, ТС2ДоПериода, ДАТА_ПР);
				Иначе
					ТС2ДоПериода = ДАТА_ПР;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТС1ВПериоде) Тогда 
		Возврат Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТС2ДоПериода) Тогда
		Если ЗначениеЗаполнено(ТС1ДоПериода) Тогда 
			Возврат ТС1ДоПериода >= ТС2ДоПериода;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат ЗначениеЗаполнено(ТС1ДоПериода);
	КонецЕсли;
КонецФункции

Функция ПолучитьПустуюТаблицуФормУведомления() Экспорт 
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяФормы", Новый ОписаниеТипов("Строка"), "Имя формы", 100);
	Результат.Колонки.Добавить("ОписаниеФормы", Новый ОписаниеТипов("Строка"), "Описание формы", 100);
	Результат.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"), "Начало", 100);
	Результат.Колонки.Добавить("ДатаКонца", Новый ОписаниеТипов("Дата"), "Конец", 100);
	Возврат Результат;
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки) Экспорт 
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИННФЛ = ?(ЗначениеЗаполнено(СведенияОтправки.ИННФЛ), СведенияОтправки.ИННФЛ, "000000000000");
		ИдентификаторОтправителя = СокрЛП(ИННФЛ);
	Иначе
		ИННЮЛ = ?(ЗначениеЗаполнено(СведенияОтправки.ИННЮЛ), СведенияОтправки.ИННЮЛ, "0000000000");
		КПП = ?(ЗначениеЗаполнено(СведенияОтправки.КПП), СведенияОтправки.КПП, "000000000");
		ИдентификаторОтправителя = ИННЮЛ + КПП;
	КонецЕсли;
	
	КодИФНСПосредника = Неопределено;
	СведенияОтправки.Свойство("КодИФНСПосредника", КодИФНСПосредника);
	КодИФНСПосредника = ?(ЗначениеЗаполнено(КодИФНСПосредника), КодИФНСПосредника, СведенияОтправки.КодНО);
	
	ИдентификаторПолучателя = КодИФНСПосредника + "_" + СведенияОтправки.КодНО;
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда 
		ДатаФормированияФайла = Формат(Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)), Число(Сред(СведенияОтправки.ДатаДок, 4, 2)), Число(Лев(СведенияОтправки.ДатаДок, 2))), "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	ИдентификационныйНомер = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер;
	
	Возврат ИдентификаторФайла;
КонецФункции

Процедура ЗаполнитьДанныеНПФЛ(Объект, ОсновныеСведения) Экспорт 
	
	СведИП = ПолучитьСведенияОбОрганизации(Объект.Ссылка);
	Данные = Объект.ДанныеУведомления.Получить();
	Если Данные.Свойство("ТитульнаяСтраница") Тогда 
		Титульный = Данные.ТитульнаяСтраница[0];
	ИначеЕсли Данные.Свойство("ТитульныйЛист") Тогда
		Титульный = Данные.ТитульныйЛист[0];
	ИначеЕсли Данные.Свойство("Титульный") Тогда
		Титульный = Данные.Титульный[0];
	Иначе
		Титульный = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если СтрНайти(Колонка.Имя, "П_ИНН") = 1 Тогда
				ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(Титульный[Колонка.Имя])), СокрЛП(Титульный[Колонка.Имя]), "000000000000");
				ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_ИНН") Тогда
		ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(Данные.П_ИНН)), СокрЛП(Данные.П_ИНН), "000000000000");
		ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
	Иначе
		ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(СведИП.ИНН)), СокрЛП(СведИП.ИНН), "000000000000");
		ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("П_ОГРНИП") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Титульный.П_ОГРНИП);
	ИначеЕсли ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("ОГРНИП") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Титульный.ОГРНИП);
	ИначеЕсли Данные.Свойство("П_ОГРНИП") Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Данные.П_ОГРНИП);
	Иначе
		ОсновныеСведения.Вставить("ОГРНИП", СведИП.ОГРН);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("Фамилия", СокрЛП(СведИП.Фамилия));
	ОсновныеСведения.Вставить("Имя", СокрЛП(СведИП.Имя));
	ОсновныеСведения.Вставить("Отчество", СокрЛП(СведИП.Отчество));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНПЮЛ(Объект, ОсновныеСведения) Экспорт 
	
	СведОрг = ПолучитьСведенияОбОрганизации(Объект.Ссылка);
	Данные = Объект.ДанныеУведомления.Получить();
	Если Данные.Свойство("ТитульнаяСтраница") Тогда 
		Титульный = Данные.ТитульнаяСтраница[0];
	ИначеЕсли Данные.Свойство("ТитульныйЛист") Тогда
		Титульный = Данные.ТитульныйЛист[0];
	ИначеЕсли Данные.Свойство("Титульный") Тогда
		Титульный = Данные.Титульный[0];
	Иначе
		Титульный = Неопределено;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "КрупнейшийНалогоплательщик,КодНалоговогоОрганаПолучателя");
	Если Реквизиты.Свойство("КрупнейшийНалогоплательщик")
		И Реквизиты.КрупнейшийНалогоплательщик = Истина
		И Реквизиты.Свойство("КодНалоговогоОрганаПолучателя") Тогда 
		
		ОсновныеСведения.Вставить("КодИФНСПосредника", Реквизиты.КодНалоговогоОрганаПолучателя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если СтрНайти(Колонка.Имя, "П_ИНН") = 1 Тогда
				ОсновныеСведения.Вставить("ИННЮЛ", Титульный[Колонка.Имя]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_ИНН") Тогда
		ОсновныеСведения.Вставить("ИННЮЛ", Данные.П_ИНН);
	Иначе
		ОсновныеСведения.Вставить("ИННЮЛ", СведОрг.ИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если СтрНайти(Колонка.Имя, "П_КПП") = 1 Тогда
				ОсновныеСведения.Вставить("КПП", Титульный[Колонка.Имя]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_КПП") Тогда
		ОсновныеСведения.Вставить("КПП", Данные.П_КПП);
	Иначе
		ОсновныеСведения.Вставить("КПП", СведОрг.КПП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("П_ОГРН") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРН", Титульный.П_ОГРН);
	ИначеЕсли ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("ОГРН") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРН", Титульный.ОГРН);
	ИначеЕсли Данные.Свойство("П_ОГРН") Тогда
		ОсновныеСведения.Вставить("ОГРН", Данные.П_ОГРН);
	Иначе
		ОсновныеСведения.Вставить("ОГРН", СведОрг.ОГРН);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("НаимОрг", СведОрг.НаименованиеПолное);
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеДанные(Объект, ОсновныеСведения) Экспорт 
	
	Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код");
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетностьПереопределяемый.КраткоеНазваниеПрограммы());
	ОсновныеСведения.Вставить("КодНО", Код);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Объект.ДатаПодписи, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("ПрПодп", Объект.ПодписантПризнак);
	ОсновныеСведения.Вставить("ФамилияПодп", Объект.ПодписантФамилия);
	ОсновныеСведения.Вставить("ИмяПодп", Объект.ПодписантИмя);
	ОсновныеСведения.Вставить("ОтчествоПодп", Объект.ПодписантОтчество);
	ОсновныеСведения.Вставить("НаимДок", Объект.ПодписантДокумент);
	ОсновныеСведения.Вставить("Тлф", Объект.ПодписантТелефон);
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен налоговый орган";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСведенияОбОрганизации(Объект) Экспорт 
	
	ВозвращаемоеЗначение = Новый Структура("ЮридическоеФизическоеЛицо, НаименованиеПолное, ИНН, ФИО, Фамилия, Имя, Отчество, ОГРН, КПП");
	ВозвращаемоеЗначение.Вставить("ЭтоЮрЛицо", РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация));
	
	Если Не ВозвращаемоеЗначение.ЭтоЮрЛицо Тогда
		СтрокаСведений = "ИННФЛ,ОГРН,ФамилияИП,ИмяИП,ОтчествоИП,ФИО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		ВозвращаемоеЗначение.ИНН = СведенияОбОрганизации.ИННФЛ;
		ВозвращаемоеЗначение.ОГРН = СведенияОбОрганизации.ОГРН;
		ВозвращаемоеЗначение.Фамилия = СведенияОбОрганизации.ФамилияИП;
		ВозвращаемоеЗначение.Имя = СведенияОбОрганизации.ИмяИП;
		ВозвращаемоеЗначение.Отчество = СведенияОбОрганизации.ОтчествоИП;
		ВозвращаемоеЗначение.ФИО = СведенияОбОрганизации.ФИО;
	Иначе
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,ОГРН,КППЮЛ";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		ВозвращаемоеЗначение.ИНН = СведенияОбОрганизации.ИННЮЛ;
		ВозвращаемоеЗначение.КПП = СведенияОбОрганизации.КППЮЛ;
		ВозвращаемоеЗначение.НаименованиеПолное = СведенияОбОрганизации.НаимЮЛПол;
		ВозвращаемоеЗначение.ОГРН = СведенияОбОрганизации.ОГРН;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗаполнитьДанными_ЕНВДх(ДопЛисты, Узел_СвПредДеят) Экспорт 
	НомерДопЛиста = 0;
	Для Каждого ДопЛист Из ДопЛисты Цикл
		НомерДопЛиста = НомерДопЛиста + 1;
		Для Инд = 1 По 3 Цикл
			Если ЗначениеЗаполнено(ДопЛист["КОД_ВИДА_ДЕЯТЕЛЬНОСТИ"+Инд]) Тогда
				
				НовыйУзел_СвПредДеят = Документы.УведомлениеОСпецрежимахНалогообложения.НовыйУзелИзПрототипа(Узел_СвПредДеят);
				Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьЗначениеЭлемента(НовыйУзел_СвПредДеят, "КодВД", ДопЛист["КОД_ВИДА_ДЕЯТЕЛЬНОСТИ"+Инд]);
				
				Узел_Адр = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(НовыйУзел_СвПредДеят, "АдрПредДеят");
				УстановитьЗначениеЭлемента(Узел_Адр, "Индекс", 		ДопЛист["ИНДЕКС"+Инд]);
				УстановитьЗначениеЭлемента(Узел_Адр, "КодРегион", 	ДопЛист["РЕГИОН"+Инд]);
				УстановитьЗначениеЭлемента(Узел_Адр, "Район", 		ДопЛист["РАЙОН"+Инд]);
				УстановитьЗначениеЭлемента(Узел_Адр, "Город", 		ДопЛист["ГОРОД"+Инд]);
				УстановитьЗначениеЭлемента(Узел_Адр, "НаселПункт", 	ДопЛист["НАСЕЛЕННЫЙПУНКТ"+Инд]);
				УстановитьЗначениеЭлемента(Узел_Адр, "Улица", 		ДопЛист["УЛИЦА"+Инд]);
				УстановитьЗначениеЭлемента(Узел_Адр, "Дом", 			ДопЛист["ДОМ"+Инд]);
				УстановитьЗначениеЭлемента(Узел_Адр, "Корпус", 		ДопЛист["КОРПУС"+Инд]);
				УстановитьЗначениеЭлемента(Узел_Адр, "Кварт", 		ДопЛист["КВАРТИРА"+Инд]);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Узел_СвПредДеят);
КонецПроцедуры
#КонецОбласти

#Область ОбщиеФункцииВыгрузки
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел) Экспорт
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйУзелИзПрототипа(ПрототипУзла) Экспорт 
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел) Экспорт 
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ИзвлечьСтруктуруXMLУведомления(ИмяОтчета, ИмяМакета) Экспорт 
	Макет = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	Возврат ИзвлечьСтруктуруXMLМакет(Макет);
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяМакета) Экспорт 
	Макет = ПолучитьМакет("СтруктураXML501_"+ИмяМакета);
	Возврат ИзвлечьСтруктуруXMLМакет(Макет);
КонецФункции

Функция ИзвлечьСтруктуруXMLМакет(Макет) 
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				Если Макет.Область(НомСтр, 14, НомСтр, 14).Текст = "НеВыкидыватьПробел" Тогда
					НовСтр.ЗначениеПоУмолчанию = Макет.Область(НомСтр, 12, НомСтр, 12).Текст;
				КонецЕсли;
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента) Экспорт 
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя) Экспорт 
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция УсловиеВыполнено(Параметры, Условие)
	
	Попытка
		РезультатВычисленияВыражения = Вычислить(СтрЗаменить(Условие, "&", "Параметры."));
		Возврат НЕ (РезультатВычисленияВыражения = Ложь);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента) Экспорт 
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач Параметры, Узел) Экспорт 
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(Параметры, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(Параметры, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметры(Параметры, Узел) Экспорт 
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьПараметры(Параметры, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, Параметры[Узел.Раздел][Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ИмяПараметра = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если Параметры.Свойство(ИмяПараметра) Тогда
					ВывестиПоказательВXML(Стр, Параметры[ИмяПараметра]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСРазделами(Параметры, Узел) Экспорт 
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьПараметрыСРазделами(Параметры, Стр);
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Стр.Значение = "";
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ИмяПараметра = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если Параметры.Свойство(ИмяПараметра) Тогда
					ВывестиПоказательВXML(Стр, Параметры[ИмяПараметра]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, Параметры) Экспорт 
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, Параметры); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, Параметры)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, Параметры);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		ИначеЕсли СтрокаДерева.Тип = "C" ИЛИ СтрокаДерева.Тип = "С" Тогда 
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, Параметры);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		ИначеЕсли СтрокаДерева.Тип = "П" Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено) Экспорт 
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) И НЕ ПустаяСтрока(Стр.Раздел) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.ДанныеУведомления.Свойство(Стр.Раздел, ЗначениеПоказателя) Тогда 
					Если ЗначениеПоказателя.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда 
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ЗаполнениеПараметровМакета

Процедура СтрокаВПараметрыМакета(Строка, ПрефиксПараметра, ПараметрыМакета, ДлинаОбластиМакета, ЗначПоУмолчанию = "") Экспорт 
	
	ДлинаСтроки = Мин(СтрДлина(Строка), ДлинаОбластиМакета);
	Индекс = 1;
	
	Пока Индекс <= ДлинаСтроки Цикл 
		ИмяПараметра = ПрефиксПараметра + Индекс;
		ПараметрыМакета[ИмяПараметра] = Сред(Строка, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗначПоУмолчанию) Тогда 
		Пока Индекс <= ДлинаОбластиМакета Цикл 
			ИмяПараметра = ПрефиксПараметра + Индекс;
			ПараметрыМакета[ИмяПараметра] = ЗначПоУмолчанию;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЧислоВПараметрыМакета(Число, ПрефиксПараметра, ПараметрыМакета, КоличествоЗнаков, ВыводитьНоль = Ложь, ЗначПоУмолчанию = "") Экспорт 
	
	Если ЗначениеЗаполнено(ЗначПоУмолчанию) Тогда 
		Для Инд = 1 По КоличествоЗнаков Цикл 
			ПараметрыМакета[ПрефиксПараметра+Инд] = ЗначПоУмолчанию;
		КонецЦикла;
	КонецЕсли;
	
	Если Число = 0 И ВыводитьНоль Тогда
		ПараметрыМакета[ПрефиксПараметра+КоличествоЗнаков] = "0";
		Возврат;
	КонецЕсли;
	
	СтрокаЧисла = Формат(Число, "ЧГ=0");
	ДлинаСтроки = СтрДлина(СтрокаЧисла);
	
	Если ДлинаСтроки > КоличествоЗнаков Тогда 
		Позиция = КоличествоЗнаков;
		Пока Позиция > 0 Цикл
			ИмяПараметра = ПрефиксПараметра + Позиция;
			ПараметрыМакета[ИмяПараметра] = "#";
			Позиция = Позиция - 1;
		КонецЦикла;
	Иначе
		Позиция = ДлинаСтроки;
		Разница = КоличествоЗнаков - ДлинаСтроки;
		Пока Позиция > 0 Цикл
			ИмяПараметра = ПрефиксПараметра + (Позиция + Разница);
			ПараметрыМакета[ИмяПараметра] = Сред(СтрокаЧисла, Позиция, 1);
			Позиция = Позиция - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаВПараметрыМакета( Дата, ПрефиксПараметра, ПараметрыМакета, ЗначПоУмолчанию = "") Экспорт 
	
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Если ЗначениеЗаполнено(ЗначПоУмолчанию) Тогда
			Для Инд = 1 По 8 Цикл
				ПараметрыМакета[ПрефиксПараметра + Инд] = ЗначПоУмолчанию;
			КонецЦикла;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	День = День(Дата);
	Месяц = Месяц(Дата);
	Год = Год(Дата);
	
	Если День < 10 Тогда
		ПараметрыМакета[ПрефиксПараметра + "1"] = "0";
		ПараметрыМакета[ПрефиксПараметра + "2"] = "" + День;
	Иначе
		ПараметрыМакета[ПрефиксПараметра + "1"] = "" + Цел(День/10);
		ПараметрыМакета[ПрефиксПараметра + "2"] = "" + День%10;
	КонецЕсли;
	
	Если Месяц < 10 Тогда
		ПараметрыМакета[ПрефиксПараметра + "3"] = "0";
		ПараметрыМакета[ПрефиксПараметра + "4"] = "" + Месяц;
	Иначе
		ПараметрыМакета[ПрефиксПараметра + "3"] = "1";
		ПараметрыМакета[ПрефиксПараметра + "4"] = "" + (Месяц - 10);
	КонецЕсли;
	
	ГТ = Цел(Год/1000);
	ГС = Цел((Год%1000)/100);
	ГД = Цел((Год%100)/10);
	ГЕ = Год%10;
	
	ПараметрыМакета[ПрефиксПараметра + "5"] = "" + ГТ;
	ПараметрыМакета[ПрефиксПараметра + "6"] = "" + ГС;
	ПараметрыМакета[ПрефиксПараметра + "7"] = "" + ГД;
	ПараметрыМакета[ПрефиксПараметра + "8"] = "" + ГЕ;

КонецПроцедуры

Процедура СтрокаВОбластиМакета(Строка, ПрефиксПараметра, ОбластиМакета, ДлинаОбластиМакета) Экспорт 
	
	ДлинаСтроки = Мин(СтрДлина(Строка), ДлинаОбластиМакета);
	Индекс = 1;
	
	Пока Индекс <= ДлинаСтроки Цикл 
		ИмяПараметра = ПрефиксПараметра + Индекс;
		ОбластиМакета[ИмяПараметра].Текст = Сред(Строка, Индекс, 1);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЧислоВОбластиМакета(Число, ПрефиксПараметра, ОбластиМакета, КоличествоЗнаков) Экспорт 
	
	СтрокаЧисла = Формат(Число, "ЧГ=0");
	ДлинаСтроки = СтрДлина(СтрокаЧисла);
	
	Если ДлинаСтроки > КоличествоЗнаков Тогда 
		Позиция = КоличествоЗнаков;
		Пока Позиция > 0 Цикл
			ИмяПараметра = ПрефиксПараметра + Позиция;
			ОбластиМакета[ИмяПараметра].Текст = "#";
			Позиция = Позиция - 1;
		КонецЦикла;
	Иначе
		Позиция = ДлинаСтроки;
		Разница = КоличествоЗнаков - ДлинаСтроки;
		Пока Позиция > 0 Цикл
			ИмяПараметра = ПрефиксПараметра + (Позиция + Разница);
			ОбластиМакета[ИмяПараметра].Текст = Сред(СтрокаЧисла, Позиция, 1);
			Позиция = Позиция - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаВОбластиМакета( Дата, ПрефиксПараметра, ОбластиМакета) Экспорт 
	
	Если Не ЗначениеЗаполнено(Дата) Тогда 
		Возврат;
	КонецЕсли;
	
	День = День(Дата);
	Месяц = Месяц(Дата);
	Год = Год(Дата);
	
	Если День < 10 Тогда
		ОбластиМакета[ПрефиксПараметра + "1"].Текст = "0";
		ОбластиМакета[ПрефиксПараметра + "2"].Текст = "" + День;
	Иначе
		ОбластиМакета[ПрефиксПараметра + "1"].Текст = "" + Цел(День/10);
		ОбластиМакета[ПрефиксПараметра + "2"].Текст = "" + День%10;
	КонецЕсли;
	
	Если Месяц < 10 Тогда
		ОбластиМакета[ПрефиксПараметра + "3"].Текст = "0";
		ОбластиМакета[ПрефиксПараметра + "4"].Текст = "" + Месяц;
	Иначе
		ОбластиМакета[ПрефиксПараметра + "3"].Текст = "1";
		ОбластиМакета[ПрефиксПараметра + "4"].Текст = "" + (Месяц - 10);
	КонецЕсли;
	
	ГТ = Цел(Год/1000);
	ГС = Цел((Год%1000)/100);
	ГД = Цел((Год%100)/10);
	ГЕ = Год%10;
	
	ОбластиМакета[ПрефиксПараметра + "5"].Текст = "" + ГТ;
	ОбластиМакета[ПрефиксПараметра + "6"].Текст = "" + ГС;
	ОбластиМакета[ПрефиксПараметра + "7"].Текст = "" + ГД;
	ОбластиМакета[ПрефиксПараметра + "8"].Текст = "" + ГЕ;

КонецПроцедуры

Функция ЧислоСРазделителемВСтроку(Число, ЗнаковДоЗпт, ЗнаковПослеЗпт, ЗначПоУмолчанию = "")
	Цч = Цел(Число);
	Дч = Число - Цч;
	ДчЦел = Цел(Дч * Pow(10, ЗнаковПослеЗпт));
	ЦчСтр = Формат(Число(Цч), "ЧГ=0; ЧН=0");
	ИтогДо = "";
	ИтогПосле = Формат(Число(ДчЦел), "ЧГ=0; ЧН=0");
	ИтогПосле = Лев("00000000000000000000000000000", ЗнаковПослеЗпт - СтрДлина(ИтогПосле)) + ИтогПосле;
	Если СтрДлина(ЦчСтр) > ЗнаковДоЗпт Тогда 
		ИтогДо = Лев("99999999999999999999999999999999", ЗнаковДоЗпт);
		ИтогПосле = Лев("99999999999999999999999999999", ЗнаковПослеЗпт);
	Иначе
		ИтогДо = Лев("                             ", ЗнаковДоЗпт - СтрДлина(ЦчСтр)) + ЦчСтр;
		Если ЗначениеЗаполнено(ЗначПоУмолчанию) Тогда 
			ИтогДо = СтрЗаменить(ИтогДо, " ", ЗначПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	Возврат ИтогДо + ИтогПосле;
КонецФункции

Процедура ЧислоСРазделителемВПараметрыМакета(Число, ЗнаковДоЗпт, ЗнаковПослеЗпт, ПрефиксПараметра, ПараметрыМакета, ЗначПоУмолчанию = "") Экспорт 
	СтрокаВПараметрыМакета(ЧислоСРазделителемВСтроку(Число, ЗнаковДоЗпт, ЗнаковПослеЗпт, ЗначПоУмолчанию), ПрефиксПараметра, ПараметрыМакета, ЗнаковДоЗпт+ЗнаковПослеЗпт, ЗначПоУмолчанию);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиОбновления
Процедура ПереименоватьОтправкиНаПолучениеПатентаВЖурнале() Экспорт
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	ЖурналОтправокВКонтролирующиеОрганы.Ссылка,
						|	ЖурналОтправокВКонтролирующиеОрганы.Организация,
						|	ЖурналОтправокВКонтролирующиеОрганы.СтраницаЖурнала,
						|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления
						|ИЗ
						|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
						|		ПО УведомлениеОСпецрежимахНалогообложения.Ссылка = ЖурналОтправокВКонтролирующиеОрганы.Ссылка
						|ГДЕ
						|	ЖурналОтправокВКонтролирующиеОрганы.СтраницаЖурнала = &СтраницаЖурнала
						|	И УведомлениеОСпецрежимахНалогообложения.ВидУведомления В(&ВидУведомления)";
		
		Запрос.УстановитьПараметр("СтраницаЖурнала", Перечисления.СтраницыЖурналаОтчетность.Уведомления);
		ВидУведомления = Новый Массив;
		ВидУведомления.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатента);
		ВидУведомления.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма);
		Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Ссылка.Установить(Выборка.Ссылка);
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.СтраницаЖурнала.Установить(Выборка.СтраницаЖурнала);
			НаборЗаписей.Прочитать();
			Для Каждого ЭлементНабораЗаписей Из НаборЗаписей Цикл 
				ЭлементНабораЗаписей.Наименование = Строка(Выборка.ВидУведомления);
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Обработка обновления'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьИменаОтчетов() Экспорт
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	УведомлениеОСпецрежимахНалогообложения.Ссылка,
			|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления
			|ИЗ
			|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
			|ГДЕ
			|	УведомлениеОСпецрежимахНалогообложения.ИмяОтчета = """"
			|	И УведомлениеОСпецрежимахНалогообложения.ИмяФормы = """"";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
				Продолжить;
			КонецЕсли;
			
			ИмяОтчета = "";
			ИмяФормы = "";
			Если Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеТС1";
				ИмяФормы = "Форма2015_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС2 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеТС2";
				ИмяФормы = "Форма2015_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеПолучениеПатента";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеУ_ИО";
				ИмяФормы = "Форма2015_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеУтратаПраваПатент";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеПрекращениеПатент";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеСозданиеОбособленныхПодразделений";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеЗакрытиеОбособленныхПодразделений";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеВыборНалоговогоОргана";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеРеорганизацияЛиквидация";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеЕНВД1";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеЕНВД2";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеЕНВД3";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеЕНВД4";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеИзменениеПараметраУСН";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеОтказОтУСН";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеУтратаПраваУСН";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеПереходНаУСН";
				ИмяФормы = "Форма2014_1";
			ИначеЕсли Выборка.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН Тогда 
				ИмяОтчета = "РегламентированноеУведомлениеПрекращениеУСН";
				ИмяФормы = "Форма2014_1";
			Иначе 
				Продолжить;
			КонецЕсли;
			
			Если Метаданные.Отчеты.Найти(ИмяОтчета) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.ИмяОтчета = ИмяОтчета;
			ДокОбъект.ИмяФормы = ИмяФормы;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект);
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление уведомлений завершено с ошибкой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Функция СоздатьНовыйТС1()
	ДокОбъект = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
	ДокОбъект.ИмяФормы = "Форма2015_1";
	ДокОбъект.ИмяОтчета = "РегламентированноеУведомлениеТС1";
	ДокОбъект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1;
	Возврат ДокОбъект;
КонецФункции

Функция СоздатьНовыйТС2()
	ДокОбъект = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
	ДокОбъект.ИмяФормы = "Форма2015_1";
	ДокОбъект.ИмяОтчета = "РегламентированноеУведомлениеТС2";
	ДокОбъект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС2;
	Возврат ДокОбъект;
КонецФункции

Функция ПустаяТаблицаСведения()
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("UID");
	ТЗ.Колонки.Добавить("П_ИНН1");
	ТЗ.Колонки.Добавить("П_КПП1");
	ТЗ.Колонки.Добавить("ИНДЕКС");
	ТЗ.Колонки.Добавить("КОД_РЕГИОНА");
	ТЗ.Колонки.Добавить("РАЙОН");
	ТЗ.Колонки.Добавить("ГОРОД");
	ТЗ.Колонки.Добавить("НАСЕЛЕННЫЙ_ПУНКТ");
	ТЗ.Колонки.Добавить("УЛИЦА");
	ТЗ.Колонки.Добавить("ДОМ");
	ТЗ.Колонки.Добавить("КОРПУС");
	ТЗ.Колонки.Добавить("КВАРТИРА");
	ТЗ.Колонки.Добавить("ДАТА_ПРАВА");
	ТЗ.Колонки.Добавить("КодВидаПД");
	ТЗ.Колонки.Добавить("ОКТМО");
	ТЗ.Колонки.Добавить("КодВидаТоргОбъекта");
	ТЗ.Колонки.Добавить("НаимТоргОб");
	ТЗ.Колонки.Добавить("НомерРазр");
	ТЗ.Колонки.Добавить("НомЗдание");
	ТЗ.Колонки.Добавить("НомПомещ");
	ТЗ.Колонки.Добавить("НомУч");
	ТЗ.Колонки.Добавить("ПлощТоргЗала");
	ТЗ.Колонки.Добавить("СтавкаСбораРуб");
	ТЗ.Колонки.Добавить("СтавкаСбораКвм");
	ТЗ.Колонки.Добавить("ИсчСуммаСбора");
	ТЗ.Колонки.Добавить("СуммаЛьготы");
	ТЗ.Колонки.Добавить("СуммаСбораИтого");
	ТЗ.Колонки.Добавить("КодЛьготы");
	ТЗ.Колонки.Добавить("ОснИсп");
	ТЗ.Колонки.Добавить("ДатаАкт");
	ТЗ.Колонки.Добавить("НомерАкт");
	ТЗ.Колонки.Добавить("НомОбъектУв");
	ТЗ.Колонки.Добавить("ИдФайлУв");
	ТЗ.Колонки.Добавить("ИспользоватьФайлАкт");
	
	Возврат ТЗ;
КонецФункции

Процедура ЗаполнитьДаннымиТС1(ДокОбъект, Выборка)
	ПоказателиОтчета = Выборка.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	Сведения = ПустаяТаблицаСведения();
	Информация = Выборка.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Информация;
	
	ДокОбъект.Организация = Выборка.Организация;
	ДокОбъект.ДатаПодписи = Выборка.ДатаПодписи;
	ДокОбъект.Дата = Выборка.Дата;
	
	СтрокаСум = "";
	Для Инд = 1 По 4 Цикл 
		СтрокаСум = СтрокаСум + ПоказателиОтчета["НалоговыйОрган" + Инд];
	КонецЦикла;
	ДокОбъект.РегистрацияВИФНС = РегистрацияВФНСОрганизации(Выборка.Организация, , СтрокаСум);
	
	Попытка
		Подписант = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоказателиОтчета.ОргПодписант, " ");
		ДокОбъект.ПодписантФамилия = Подписант[0];
		ДокОбъект.ПодписантИмя = Подписант[1];
		ДокОбъект.ПодписантОтчество = Подписант[2];
	Исключение
		Ошибка = ИнформацияОбОшибке();
		СтрОш = НСтр("ru = 'Не удалось получить ФИО подписанта'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СтрОш, УровеньЖурналаРегистрации.Предупреждение,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	ДокОбъект.ПодписантТелефон = ПоказателиОтчета.ТелефонПодписанта;
	ДокОбъект.ПодписантПризнак = ПоказателиОтчета.ПрПодп;
	
	СтруктураПараметров = Новый Структура("Титульный");
	СтруктураПараметров.Вставить("КОД_НО", СтрЗаменить(СтрокаСум, "-", ""));
	СтрокаСум = "";
	Для Инд = 1 По 12 Цикл 
		СтрокаСум = СтрокаСум + ПоказателиОтчета["ИНН1_" + Инд];
	КонецЦикла;
	ИННТитульный = СтрЗаменить(СтрокаСум, "-", "");
	СтруктураПараметров.Вставить("П_ИНН", ИННТитульный);
	СтрокаСум = "";
	Для Инд = 1 По 9 Цикл 
		СтрокаСум = СтрокаСум + ПоказателиОтчета["КПП1_" + Инд];
	КонецЦикла;
	КППТитульный = СтрЗаменить(СтрокаСум, "-", "");
	СтруктураПараметров.Вставить("П_КПП", КППТитульный);
	
	СтрокаСум = "";
	Для Инд = 1 По 3 Цикл 
		СтрокаСум = СтрокаСум + ПоказателиОтчета["Прил" + Инд];
	КонецЦикла;
	ОТ = Новый ОписаниеТипов("Число");
	СтруктураПараметров.Вставить("ПРИЛОЖЕНО_ЛИСТОВ", ОТ.ПривестиЗначение(СтрЗаменить(СтрокаСум, "-", "")));
	
	СтруктураПараметров.Вставить("UID", Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ОГРН", ПоказателиОтчета.ОГРН);
	СтруктураПараметров.Вставить("ОГРНИП", ПоказателиОтчета.ОГРНИП);
	СтруктураПараметров.Вставить("НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ", ПоказателиОтчета.НаимОрг);
	СтруктураПараметров.Вставить("ПРИЗНАК_НП_ПОДВАЛ", ПоказателиОтчета.ПрПодп);
	СтруктураПараметров.Вставить("КодПричины", ПоказателиОтчета.ПрУведомления);
	КодПричины = ПоказателиОтчета.ПрУведомления;
	
	СтруктураПараметров.Вставить("ИНН_ПОДПИСАНТА", ПоказателиОтчета.ИННПодписанта);
	СтруктураПараметров.Вставить("EMAIL_ПОДПИСАНТА", ПоказателиОтчета.ЭлектроннаяПочтаПодписанта);
	СтруктураПараметров.Вставить("ТЕЛЕФОН", ПоказателиОтчета.ТелефонПодписанта);
	СтруктураПараметров.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПоказателиОтчета.ОргПодписант);
	СтруктураПараметров.Вставить("ДАТА_ПОДПИСИ", Выборка.ДатаПодписи);
	СтруктураПараметров.Вставить("ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ", ПоказателиОтчета.ДокУпПред);
	СтруктураПараметров.Вставить("ОРГ_ПРЕДСТАВИТЕЛЬ", ПоказателиОтчета.ОргУп);
	СтруктураПараметров.Вставить("КОЛИЧЕСТВО_СТРАНИЦ", 1 + Информация.Количество());
	
	ТЗ = Новый ТаблицаЗначений;
	Для Каждого КЗ Из СтруктураПараметров Цикл 
		ТЗ.Колонки.Добавить(КЗ.Ключ);
	КонецЦикла;
	ТЗ0 = ТЗ.Добавить();
	ЗаполнитьЗначенияСвойств(ТЗ0, СтруктураПараметров);
	
	ОТ = Новый ОписаниеТипов("Число");
	Для Каждого Стр Из Информация Цикл 
		НовСтр = Сведения.Добавить();
		Данные = Стр.Данные;
		
		НовСтр.UID = Новый УникальныйИдентификатор;
		НовСтр.П_ИНН1 = ИННТитульный;
		НовСтр.П_КПП1 = КППТитульный;
		НовСтр.ДАТА_ПРАВА = Данные.П000010010101;
		НовСтр.КодВидаПД = Данные.П000010010201;
		НовСтр.ОКТМО = Данные.П000010020101;
		НовСтр.КодВидаТоргОбъекта = Данные.П000010020201;
		НовСтр.НаимТоргОб = Данные.П000010020301;
		НовСтр.ИНДЕКС = Данные.П000010020401;
		НовСтр.КОД_РЕГИОНА = Данные.П000010020402;
		НовСтр.РАЙОН = Данные.П000010020403;
		НовСтр.ГОРОД = Данные.П000010020404;
		НовСтр.НАСЕЛЕННЫЙ_ПУНКТ = Данные.П000010020405;
		НовСтр.УЛИЦА = Данные.П000010020406;
		НовСтр.ДОМ = Данные.П000010020407;
		НовСтр.КОРПУС = Данные.П000010020408;
		НовСтр.КВАРТИРА = Данные.П000010020409;
		НовСтр.ОснИсп = Данные.П000010020501;
		НовСтр.НомерРазр = Данные.П000010020601;
		НовСтр.НомЗдание = Данные.П000010020701;
		НовСтр.НомПомещ = Данные.П000010020801;
		НовСтр.НомУч = Данные.П000010020901;
		НовСтр.ПлощТоргЗала = Данные.П000010021001;
		НовСтр.СтавкаСбораРуб = Данные.П000010030101;
		НовСтр.СтавкаСбораКвм = Данные.П000010030201;
		НовСтр.ИсчСуммаСбора = Данные.П000010030301;
		НовСтр.СуммаЛьготы = Данные.П000010030401;
		НовСтр.КодЛьготы = Данные.П000010030501;
		НовСтр.СуммаСбораИтого = Данные.П000010030601;
		
		НовСтр.ДатаАкт = Данные.ДатаАкт;
		НовСтр.НомерАкт = Данные.НомАкт;
		НовСтр.НомОбъектУв = ОТ.ПривестиЗначение(Данные.НомОбъектУв);
		НовСтр.ИдФайлУв = Данные.ИдФайлУв;
		НовСтр.ИспользоватьФайлАкт = Не (ЗначениеЗаполнено(НовСтр.НомОбъектУв) Или ЗначениеЗаполнено(НовСтр.ИдФайлУв));
		
		Если ЗначениеЗаполнено(НовСтр["СтавкаСбораРуб"]) Тогда
			Знач1 = НовСтр["СтавкаСбораРуб"];
			Знач2 = Знач1 - НовСтр["СуммаЛьготы"];
			Если Знач2 < 0 Тогда 
				Знач2 = 0;
			КонецЕсли;
		Иначе
			Знач1 = НовСтр["ПлощТоргЗала"] * НовСтр["СтавкаСбораКвм"];
			Знач1 = Окр(Знач1, 0, РежимОкругления.Окр15как20);
			Знач2 = Знач1 - НовСтр["СуммаЛьготы"];
			Если Знач2 < 0 Тогда 
				Знач2 = 0;
			КонецЕсли;
		КонецЕсли;
		
		НовСтр["ИсчСуммаСбора"] = Знач1;
		НовСтр["СуммаСбораИтого"] = Знач2;
	КонецЦикла;
	
	ДанныеУведомленияСтруктура = Новый Структура;
	ДанныеУведомленияСтруктура.Вставить("Титульный", ТЗ);
	ДанныеУведомленияСтруктура.Вставить("Сведения", Сведения);
	ДанныеУведомленияСтруктура.Вставить("КодПричины", КодПричины);
	ДанныеУведомленияСтруктура.Вставить("РегОтчет", Выборка.Ссылка);
	
	ДокОбъект.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеУведомленияСтруктура);
КонецПроцедуры

Процедура ЗаполнитьДаннымиТС2(ДокОбъект, Выборка)
	ПоказателиОтчета = Выборка.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	
	ДокОбъект.Организация = Выборка.Организация;
	ДокОбъект.ДатаПодписи = Выборка.ДатаПодписи;
	ДокОбъект.Дата = Выборка.Дата;
	
	СтрокаСум = "";
	Для Инд = 1 По 4 Цикл 
		СтрокаСум = СтрокаСум + ПоказателиОтчета["НалоговыйОрган" + Инд];
	КонецЦикла;
	ДокОбъект.РегистрацияВИФНС = РегистрацияВФНСОрганизации(Выборка.Организация, , СтрокаСум);
	
	Попытка
		Подписант = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоказателиОтчета.ОргПодписант, " ");
		ДокОбъект.ПодписантФамилия = Подписант[0];
		ДокОбъект.ПодписантИмя = Подписант[1];
		ДокОбъект.ПодписантОтчество = Подписант[2];
	Исключение
		Ошибка = ИнформацияОбОшибке();
		СтрОш = НСтр("ru = 'Не удалось получить ФИО подписанта'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СтрОш, УровеньЖурналаРегистрации.Предупреждение,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	ДокОбъект.ПодписантТелефон = ПоказателиОтчета.ТелефонПодписанта;
	ДокОбъект.ПодписантПризнак = ПоказателиОтчета.ПрПодп;
	
	СтруктураПараметров = Новый Структура("Титульный");
	СтруктураПараметров.Вставить("КОД_НО", СтрЗаменить(СтрокаСум, "-", ""));
	СтрокаСум = "";
	Для Инд = 1 По 12 Цикл 
		СтрокаСум = СтрокаСум + ПоказателиОтчета["ИНН1_" + Инд];
	КонецЦикла;
	СтруктураПараметров.Вставить("П_ИНН", СтрЗаменить(СтрокаСум, "-", ""));
	СтрокаСум = "";
	Для Инд = 1 По 9 Цикл 
		СтрокаСум = СтрокаСум + ПоказателиОтчета["КПП1_" + Инд];
	КонецЦикла;
	СтруктураПараметров.Вставить("П_КПП", СтрЗаменить(СтрокаСум, "-", ""));
	
	СтрокаСум = "";
	Для Инд = 1 По 3 Цикл 
		СтрокаСум = СтрокаСум + ПоказателиОтчета["Прил" + Инд];
	КонецЦикла;
	ОТ = Новый ОписаниеТипов("Число");
	СтруктураПараметров.Вставить("ПРИЛОЖЕНО_ЛИСТОВ", ОТ.ПривестиЗначение(СтрЗаменить(СтрокаСум, "-", "")));
	
	СтруктураПараметров.Вставить("UID", Новый УникальныйИдентификатор);
	СтруктураПараметров.Вставить("ОГРН", ПоказателиОтчета.ОГРН);
	СтруктураПараметров.Вставить("ОГРНИП", ПоказателиОтчета.ОГРНИП);
	СтруктураПараметров.Вставить("ДАТА_ПР", ПоказателиОтчета.ДатаПрекращенияДеятельности);
	СтруктураПараметров.Вставить("НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ", ПоказателиОтчета.НаимОрг);
	СтруктураПараметров.Вставить("ПРИЗНАК_НП_ПОДВАЛ", ПоказателиОтчета.ПрПодп);
	
	СтруктураПараметров.Вставить("ИНН_ПОДПИСАНТА", ПоказателиОтчета.ИННПодписанта);
	СтруктураПараметров.Вставить("EMAIL_ПОДПИСАНТА", ПоказателиОтчета.ЭлектроннаяПочтаПодписанта);
	СтруктураПараметров.Вставить("ТЕЛЕФОН", ПоказателиОтчета.ТелефонПодписанта);
	СтруктураПараметров.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПоказателиОтчета.ОргПодписант);
	СтруктураПараметров.Вставить("ДАТА_ПОДПИСИ", Выборка.ДатаПодписи);
	СтруктураПараметров.Вставить("ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ", ПоказателиОтчета.ДокУпПред);
	СтруктураПараметров.Вставить("ОРГ_ПРЕДСТАВИТЕЛЬ", ПоказателиОтчета.ОргУп);
	
	ТЗ = Новый ТаблицаЗначений;
	Для Каждого КЗ Из СтруктураПараметров Цикл 
		ТЗ.Колонки.Добавить(КЗ.Ключ);
	КонецЦикла;
	ТЗ0 = ТЗ.Добавить();
	ЗаполнитьЗначенияСвойств(ТЗ0, СтруктураПараметров);
	
	ДокОбъект.ДанныеУведомления = Новый ХранилищеЗначения(Новый Структура("Титульный, РегОтчет", ТЗ, Выборка.Ссылка));
	
КонецПроцедуры

Процедура СоздатьУведомления() Экспорт
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	РегламентированныйОтчет.ИсточникОтчета,
			|	РегламентированныйОтчет.Организация,
			|	РегламентированныйОтчет.ДатаПодписи,
			|	РегламентированныйОтчет.ДанныеОтчета,
			|	РегламентированныйОтчет.Ссылка,
			|	РегламентированныйОтчет.Дата,
			|	РегламентированныйОтчет.ПометкаУдаления,
			|	РегламентированныйОтчет.Комментарий
			|ИЗ
			|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
			|ГДЕ
			|	РегламентированныйОтчет.ИсточникОтчета = ""РегламентированныйОтчетТорговыйСбор1""
			|	И НЕ РегламентированныйОтчет.Комментарий ПОДОБНО ""##УведомлениеОСпецрежимахНалогообложения##""
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РегламентированныйОтчет.ИсточникОтчета,
			|	РегламентированныйОтчет.Организация,
			|	РегламентированныйОтчет.ДатаПодписи,
			|	РегламентированныйОтчет.ДанныеОтчета,
			|	РегламентированныйОтчет.Ссылка,
			|	РегламентированныйОтчет.Дата,
			|	РегламентированныйОтчет.ПометкаУдаления,
			|	РегламентированныйОтчет.Комментарий
			|ИЗ
			|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
			|ГДЕ
			|	РегламентированныйОтчет.ИсточникОтчета = ""РегламентированныйОтчетТорговыйСбор2""
			|	И НЕ РегламентированныйОтчет.Комментарий ПОДОБНО ""##УведомлениеОСпецрежимахНалогообложения##""";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			НачатьТранзакцию();
			Попытка
				Если Выборка.ИсточникОтчета = "РегламентированныйОтчетТорговыйСбор1" Тогда 
					НовоеУведомление = СоздатьНовыйТС1();
					ЗаполнитьДаннымиТС1(НовоеУведомление, Выборка);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеУведомление);
				Иначе 
					НовоеУведомление = СоздатьНовыйТС2();
					ЗаполнитьДаннымиТС2(НовоеУведомление, Выборка);
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовоеУведомление);
				КонецЕсли;
				
				РегОтчет = Выборка.Ссылка.ПолучитьОбъект();
				РегОтчет.Комментарий = "##УведомлениеОСпецрежимахНалогообложения##" + Выборка.Комментарий;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РегОтчет);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Ошибка = ИнформацияОбОшибке();
				СтрОш = НСтр("ru = 'Создание уведомлений ТС-1, ТС-2'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СтрОш, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		СтрОш = НСтр("ru = 'Ошибка при выполнении УведомлениеОСпецрежимахНалогообложения.СоздатьУведомления()'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СтрОш, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры
#КонецОбласти

#КонецЕсли

#Область События
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	РегламентированнаяОтчетностьВызовСервера.УведомлениеОСпецрежимахНалогообложения_ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка) Экспорт
	РегламентированнаяОтчетностьВызовСервера.УведомлениеОСпецрежимахНалогообложения_ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	РегламентированнаяОтчетностьВызовСервера.УведомлениеОСпецрежимахНалогообложения_ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
КонецПроцедуры
#КонецОбласти