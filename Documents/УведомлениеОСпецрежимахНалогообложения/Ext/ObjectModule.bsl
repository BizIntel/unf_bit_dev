#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Выгружает документ и возвращает свойства файла выгрузки.
//
// Параметры:
//  УникальныйИдентификатор - уникальный идентификатор окна, откуда была дернута функция выгрузки или Неопределено.
//
// Возвращаемое значение - 
//	Массив структур или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением)
Функция ВыгрузитьДокумент(УникальныйИдентификатор = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		СодержаниеВыгрузки = ЭлектронноеПредставление(УникальныйИдентификатор);
		
		Если СодержаниеВыгрузки = Неопределено Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выгрузка данного уведомления не предусмотрена'");
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого ЭлементВыгрузки Из СодержаниеВыгрузки Цикл
			
			Если Результат = Неопределено Тогда
				Результат = Новый Массив;
			КонецЕсли;
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			СохраняемыйФайл = Новый ТекстовыйДокумент;
			СохраняемыйФайл.УстановитьТекст(ЭлементВыгрузки.ТекстФайла);
			СохраняемыйФайл.Записать(ИмяВременногоФайла, ЭлементВыгрузки.КодировкаТекста);
			
			ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
			Если УникальныйИдентификатор <> Неопределено Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки, УникальныйИдентификатор);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ФайлВыгрузки);
			КонецЕсли;
			
			УдалитьФайлы(ИмяВременногоФайла);
			
			СтруктураВыгрузки = Новый Структура;
			СтруктураВыгрузки.Вставить("АдресФайлаВыгрузки", СсылкаНаДвоичныеДанныеФайла);
			СтруктураВыгрузки.Вставить("ИмяФайлаВыгрузки", ЭлементВыгрузки.ИмяФайла);
			СтруктураВыгрузки.Вставить("ТестВыгрузки", ЭлементВыгрузки.ТекстФайла);
			СтруктураВыгрузки.Вставить("КодировкаВыгрузки", ЭлементВыгрузки.КодировкаТекста);
			
			Результат.Добавить(СтруктураВыгрузки);
			
		КонецЦикла;
		
		Возврат Результат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Для сообщения об открытии/закрытии счета
//0=ФНС
//1=ПФР
//2=ФСС
Функция ПечатьСразу(ПФР_ФСС = 0) Экспорт 
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда
		Возврат Отчеты[ИмяОтчета].ПечатьСразу(ЭтотОбъект, ИмяФормы);
	КонецЕсли;
	
	Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда 
		Возврат ПечатьСразуФормаС09_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
		Возврат ПечатьСразуФорма_С_09_1(ПФР_ФСС);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Для сообщения об открытии/закрытии счета
//0=ФНС
//1=ПФР
//2=ФСС
Функция СформироватьМакет(ПФР_ФСС = 0) Экспорт 
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда
		Возврат Отчеты[ИмяОтчета].СформироватьМакет(ЭтотОбъект, ИмяФормы);
	КонецЕсли;
	
	Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда
		Возврат СформироватьМакетФормаС09_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
		Если ПФР_ФСС = 0 Тогда
			Возврат СформироватьМакетФорма_С_09_1_ФНС();
		ИначеЕсли ПФР_ФСС = 1 Тогда
			Возврат СформироватьМакетФорма_С_09_1_ПФР();
		ИначеЕсли ПФР_ФСС = 2 Тогда
			Возврат СформироватьМакетФорма_С_09_1_ФСС();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПроверитьДокумент(УникальныйИдентификатор = Неопределено) Экспорт 
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда 
		Отчеты[ИмяОтчета].ПроверитьДокумент(ЭтотОбъект, ИмяФормы, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки, Параметры, ИмяОтчета)
	
	Документы.УведомлениеОСпецрежимахНалогообложения.ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьПараметры(Параметры, ДеревоВыгрузки);
	
	Если ИмяОтчета = "ФормаС09_1" Тогда
		ЗаполнитьДанными_ФормаС09_1(Параметры, ДеревоВыгрузки);
	КонецЕсли;
	
	Документы.УведомлениеОСпецрежимахНалогообложения.ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

//процедури и функции для формирования предствления в видел XML
Процедура ЗаполнитьДанныеНПФЛ(ОсновныеСведения)
	
	СведИП = ПолучитьСведенияОбОрганизации();
	Данные = ДанныеУведомления.Получить();
	Если Данные.Свойство("ТитульнаяСтраница") Тогда 
		Титульный = Данные.ТитульнаяСтраница[0];
	ИначеЕсли Данные.Свойство("ТитульныйЛист") Тогда
		Титульный = Данные.ТитульныйЛист[0];
	ИначеЕсли Данные.Свойство("Титульный") Тогда
		Титульный = Данные.Титульный[0];
	Иначе
		Титульный = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если СтрНайти(Колонка.Имя, "П_ИНН") = 1 Тогда
				ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(Титульный[Колонка.Имя])), СокрЛП(Титульный[Колонка.Имя]), "000000000000");
				ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_ИНН") Тогда
		ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(Данные.П_ИНН)), СокрЛП(Данные.П_ИНН), "000000000000");
		ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
	Иначе
		ИНН_ИП = ?(ЗначениеЗаполнено(СокрЛП(СведИП.ИНН)), СокрЛП(СведИП.ИНН), "000000000000");
		ОсновныеСведения.Вставить("ИННФЛ", ИНН_ИП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("П_ОГРНИП") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Титульный.П_ОГРНИП);
	ИначеЕсли ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("ОГРНИП") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Титульный.ОГРНИП);
	ИначеЕсли Данные.Свойство("П_ОГРНИП") Тогда
		ОсновныеСведения.Вставить("ОГРНИП", Данные.П_ОГРНИП);
	Иначе
		ОсновныеСведения.Вставить("ОГРНИП", СведИП.ОГРН);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("Фамилия", СокрЛП(СведИП.Фамилия));
	ОсновныеСведения.Вставить("Имя", СокрЛП(СведИП.Имя));
	ОсновныеСведения.Вставить("Отчество", СокрЛП(СведИП.Отчество));
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНПЮЛ(ОсновныеСведения)
	
	СведОрг = ПолучитьСведенияОбОрганизации();
	Данные = ДанныеУведомления.Получить();
	Если Данные.Свойство("ТитульнаяСтраница") Тогда 
		Титульный = Данные.ТитульнаяСтраница[0];
	ИначеЕсли Данные.Свойство("ТитульныйЛист") Тогда
		Титульный = Данные.ТитульныйЛист[0];
	ИначеЕсли Данные.Свойство("Титульный") Тогда
		Титульный = Данные.Титульный[0];
	Иначе
		Титульный = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если СтрНайти(Колонка.Имя, "П_ИНН") = 1 Тогда
				ОсновныеСведения.Вставить("ИННЮЛ", Титульный[Колонка.Имя]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_ИНН") Тогда
		ОсновныеСведения.Вставить("ИННЮЛ", Данные.П_ИНН);
	Иначе
		ОсновныеСведения.Вставить("ИННЮЛ", СведОрг.ИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) Тогда
		Для Каждого Колонка Из Титульный.Владелец().Колонки Цикл 
			Если СтрНайти(Колонка.Имя, "П_КПП") = 1 Тогда
				ОсновныеСведения.Вставить("КПП", Титульный[Колонка.Имя]);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Данные.Свойство("П_КПП") Тогда
		ОсновныеСведения.Вставить("КПП", Данные.П_КПП);
	Иначе
		ОсновныеСведения.Вставить("КПП", СведОрг.КПП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("П_ОГРН") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРН", Титульный.П_ОГРН);
	ИначеЕсли ЗначениеЗаполнено(Титульный) И Титульный.Владелец().Колонки.Найти("ОГРН") <> Неопределено Тогда
		ОсновныеСведения.Вставить("ОГРН", Титульный.ОГРН);
	ИначеЕсли Данные.Свойство("П_ОГРН") Тогда
		ОсновныеСведения.Вставить("ОГРН", Данные.П_ОГРН);
	Иначе
		ОсновныеСведения.Вставить("ОГРН", СведОрг.ОГРН);
	КонецЕсли;
	
	ОсновныеСведения.Вставить("НаимОрг", СведОрг.НаименованиеПолное);
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеДанные(ОсновныеСведения)
	
	Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВИФНС, "Код");
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетностьПереопределяемый.КраткоеНазваниеПрограммы());
	ОсновныеСведения.Вставить("КодНО", Код);
	ОсновныеСведения.Вставить("ДатаДок", Формат(ДатаПодписи, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("ПрПодп", ПодписантПризнак);
	ОсновныеСведения.Вставить("ФамилияПодп", ПодписантФамилия);
	ОсновныеСведения.Вставить("ИмяПодп", ПодписантИмя);
	ОсновныеСведения.Вставить("ОтчествоПодп", ПодписантОтчество);
	ОсновныеСведения.Вставить("НаимДок", ПодписантДокумент);
	ОсновныеСведения.Вставить("Тлф", ПодписантТелефон);
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен налоговый орган";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки)
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННФЛ);
	Иначе
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННЮЛ) + СокрЛП(СведенияОтправки.КПП);
	КонецЕсли;
	ИдентификаторПолучателя = СведенияОтправки.КодНО + "_" + СведенияОтправки.КодНО;
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда 
		ДатаФормированияФайла = Формат(Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)), Число(Сред(СведенияОтправки.ДатаДок, 4, 2)), Число(Лев(СведенияОтправки.ДатаДок, 2))), "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	ИдентификационныйНомер = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер;
	
	Возврат ИдентификаторФайла;
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаС_09_2(СведенияОтправки)
	Префикс = "UT_SBUOR";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления_ФормаС09_1(СведенияОтправки)
	Префикс = "UT_SBSCH";
	Возврат ИдентификаторФайлаЭлектронногоПредставления(Префикс, СведенияОтправки);
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаС09_2()
	
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	// проверка заполнения обязательных полей
	Если НЕ ЗначениеЗаполнено(Данные.ПРИЗНАК_СООБЩЕНИЯ) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан признак сообщения (создание или внесение изменений)";
		Сообщение.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.ДАТА_СООБЩЕНИЯ) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана дата начала действия причины сообщения";
		Сообщение.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.НАИМЕНОВАНИЕ_ЗАВИСИМОЙ_ОРГАНИЗАЦИИ) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнено наименование организации, об участии в которой формируется сообщение";
		Сообщение.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.ПРОЦЕНТ_УЧАСТИЯ) Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указана доля участия в российской (иностранной) организации";
		Сообщение.Сообщить();
		ВызватьИсключение "";
	КонецЕсли;
	
	// Сведения о подписанте
	ОсновныеСведения.Вставить("ПрПодп",  Данные.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("ИННФЛ",   Данные.ПредставительИННФЛ);
	ОсновныеСведения.Вставить("Тлф",     Данные.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("НаимДок", Данные.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Данные.ДАТА_ПОДПИСИ, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("email",   Данные.EMAIL_ПОДПИСАНТА);
	
	// Сведения об участии в организациях
	ОсновныеСведения.Вставить("ПризСообщ", Данные.ПРИЗНАК_СООБЩЕНИЯ);
	ОсновныеСведения.Вставить("ДатаСообщ", Формат(Данные.ДАТА_СООБЩЕНИЯ, "ДФ=dd.MM.yyyy"));
	ОсновныеСведения.Вставить("НаимУчОрг", Данные.НАИМЕНОВАНИЕ_ЗАВИСИМОЙ_ОРГАНИЗАЦИИ);
	ОсновныеСведения.Вставить("ДоляУчОрг", Данные.ПРОЦЕНТ_УЧАСТИЯ);
	ОсновныеСведения.Вставить("ИННУчОрг",  Данные.ИНН_ЗАВИСИМОЙ);
	ОсновныеСведения.Вставить("КППУчОрг",  Данные.КПП_ЗАВИСИМОЙ);
	ОсновныеСведения.Вставить("ОКСМУчОрг", Данные.ОКСМ);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаС_09_2(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;

КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_ФормаС09_1()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		ЗаполнитьДанныеНПФЛ(ОсновныеСведения);
	Иначе 
		ЗаполнитьДанныеНПЮЛ(ОсновныеСведения);
	КонецЕсли;
	
	ЗаполнитьОбщиеДанные(ОсновныеСведения);
	Данные = ДанныеУведомления.Получить();
	
	Титульный = Данные.Титульный[0];
	
	ОсновныеСведения.Вставить("ПрПодп", Титульный.ПРИЗНАК_НП_ПОДВАЛ);
	ОсновныеСведения.Вставить("НаимДок", Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ);
	ОсновныеСведения.Вставить("ИННФЛПред", Титульный.ИНН_ПОДПИСАНТА);
	ОсновныеСведения.Вставить("Тфл", Титульный.ТЕЛЕФОН);
	ОсновныеСведения.Вставить("КИО", Титульный.КИО);
	ОсновныеСведения.Вставить("email", Титульный.EMAIL_ПОДПИСАНТА);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Титульный.ДАТА_ПОДПИСИ, "ДФ=dd.MM.yyyy"));
	
	ОсновныеСведения.Вставить("ПрСчет", Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ);
	ОсновныеСведения.Вставить("ПрБанк", Титульный.ПРИЗНАК_ГДЕ);
	ОсновныеСведения.Вставить("ПрЗаяв", Титульный.ПРИЗНАК_ПОДАЮЩЕГО);
	
	Если Не ЗначениеЗаполнено(ОсновныеСведения.ПрЗаяв)
		Или Не ЗначениеЗаполнено(ОсновныеСведения.ПрСчет)
		Или Не ЗначениеЗаполнено(ОсновныеСведения.ПрБанк) Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на титульном листе";
		СообщениеПользователю.Сообщить();
		ВызватьИсключение "";
		
	КонецЕсли;
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_ФормаС09_1(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Процедура ЗаполнитьЭлемент(Родитель, Имя, Значение)
	Узел_Подч = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Родитель, Имя);
	Если ЗначениеЗаполнено(Значение) Или Узел_Подч.Обязательность = "О" Или Узел_Подч.Обязательность = "O" Тогда
		Документы.УведомлениеОСпецрежимахНалогообложения.УстановитьЗначениеЭлемента(Родитель, Имя, Значение);
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(Узел_Подч);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДанными_ФормаС09_1(Параметры, ДеревоВыгрузки)
	
	Данные = ДанныеУведомления.Получить();
	
	Узел_Документ = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "Документ");
	Узел_СБСЧ = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_Документ, "СБСЧ");
	
	Узел_СвСчетБанк = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СБСЧ, "СвСчетБанк");
	Узел_СвСчетФК = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СБСЧ, "СвСчетФК");
	Узел_СвКЭСП = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СБСЧ, "СвКЭСП");
	
	Если Данные.ЛистА.Количество() > 0 Тогда
		Если Узел_СвСчетФК <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетФК);
		КонецЕсли;
		Если Узел_СвКЭСП <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвКЭСП);
		КонецЕсли;
		ДопЛист = Данные.ЛистА[0];
		
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "НомСчет", ДопЛист.НОМЕР_СЧЕТА_А);
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "ДатаСчет", Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А, "ДФ=dd.MM.yyyy"));
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "НаимБанк", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_А,"""",""));
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "ИННЮЛ", ДопЛист.ИНН_А);
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "КПП", ДопЛист.КПП_А);
		ЗаполнитьЭлемент(Узел_СвСчетБанк, "БИК", ДопЛист.БИК_А);
		
		Если Не ЗначениеЗаполнено(ДопЛист.НОМЕР_СЧЕТА_А)
			Или Не ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_А) Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на листе А";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
			
		КонецЕсли;
		
		Узел_МНБанк = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СвСчетБанк, "МНБанк");
		ЗаполнитьЭлемент(Узел_МНБанк, "Индекс", ДопЛист.ИНДЕКС_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "КодРегион", ДопЛист.КОД_РЕГИОНА_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Район", ДопЛист.РАЙОН_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Город", ДопЛист.ГОРОД_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Улица", ДопЛист.УЛИЦА_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Дом", ДопЛист.ДОМ_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Корпус", ДопЛист.КОРПУС_А);
		ЗаполнитьЭлемент(Узел_МНБанк, "Кварт", ДопЛист.КВАРТИРА_А);
	ИначеЕсли Данные.ЛистБ.Количество() > 0 Тогда
		Если Узел_СвСчетБанк <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетБанк);
		КонецЕсли;
		Если Узел_СвКЭСП <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвКЭСП);
		КонецЕсли;
		ДопЛист = Данные.ЛистБ[0];
		
		ЗаполнитьЭлемент(Узел_СвСчетФК, "НомСчетФК", ДопЛист.НОМЕР_СЧЕТА_Б);
		ЗаполнитьЭлемент(Узел_СвСчетФК, "ДатаСчетФК", Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_Б, "ДФ=dd.MM.yyyy"));
		ЗаполнитьЭлемент(Узел_СвСчетФК, "НаимФК", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б,"""",""));
		ЗаполнитьЭлемент(Узел_СвСчетФК, "ИННЮЛ", ДопЛист.ИНН_Б);
		ЗаполнитьЭлемент(Узел_СвСчетФК, "КПП", ДопЛист.КПП_Б);
		
		Узел_СвСчетБФК = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СвСчетФК, "СвСчетБФК");
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "НомСчетБФК", ДопЛист.НОМЕР_СЧЕТА_Б2);
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "НаимБФК", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б2,"""",""));
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "ИННЮЛ", ДопЛист.ИНН_Б2);
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "КПП", ДопЛист.КПП_Б2);
		ЗаполнитьЭлемент(Узел_СвСчетБФК, "БИК", ДопЛист.БИК_Б2);
		
		Если Не ЗначениеЗаполнено(ДопЛист.НОМЕР_СЧЕТА_Б)
			Или Не ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_Б)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б2)
			Или Не ЗначениеЗаполнено(ДопЛист.НОМЕР_СЧЕТА_Б2) Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на листе Б";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
			
		КонецЕсли;
		
		Узел_МНБФК = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СвСчетБФК, "МНБФК");
		ЗаполнитьЭлемент(Узел_МНБФК, "Индекс", ДопЛист.ИНДЕКС_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "КодРегион", ДопЛист.КОД_РЕГИОНА_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Район", ДопЛист.РАЙОН_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Город", ДопЛист.ГОРОД_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Улица", ДопЛист.УЛИЦА_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Дом", ДопЛист.ДОМ_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Корпус", ДопЛист.КОРПУС_Б);
		ЗаполнитьЭлемент(Узел_МНБФК, "Кварт", ДопЛист.КВАРТИРА_Б);
	ИначеЕсли Данные.ЛистВ.Количество() > 0 Тогда
		Если Узел_СвСчетБанк <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетБанк);
		КонецЕсли;
		Если Узел_СвСчетФК <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетФК);
		КонецЕсли;
		ДопЛист = Данные.ЛистВ[0];
		
		ЗаполнитьЭлемент(Узел_СвКЭСП, "НомКЭСП", ДопЛист.НОМЕР_КЭСП_В);
		ЗаполнитьЭлемент(Узел_СвКЭСП, "ДатаКЭСП", Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_В, "ДФ=dd.MM.yyyy"));
		ЗаполнитьЭлемент(Узел_СвКЭСП, "НаимБанкКЭСП", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_В,"""",""));
		ЗаполнитьЭлемент(Узел_СвКЭСП, "ИННЮЛ", ДопЛист.ИНН_В);
		ЗаполнитьЭлемент(Узел_СвКЭСП, "КПП", ДопЛист.КПП_В);
		ЗаполнитьЭлемент(Узел_СвКЭСП, "БИК", ДопЛист.БИК_В);
		
		Узел_СвСчетБЭДС = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СвКЭСП, "СвСчетБЭДС");
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "НомСчетБЭДС", ДопЛист.НОМЕР_СЧЕТА_В);
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "НаимБЭДС", СтрЗаменить(ДопЛист.НАМИНОВАНИЕ_БАНКА_В2,"""",""));
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "ИННЮЛ", ДопЛист.ИНН_В2);
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "КПП", ДопЛист.КПП_В2);
		ЗаполнитьЭлемент(Узел_СвСчетБЭДС, "БИК", ДопЛист.БИК_В2);
		
		Если Не ЗначениеЗаполнено(ДопЛист.НОМЕР_КЭСП_В)
			Или Не ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_В)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_В)
			Или Не ЗначениеЗаполнено(ДопЛист.НАМИНОВАНИЕ_БАНКА_В2)
			Или Не ЗначениеЗаполнено(ДопЛист.НОМЕР_СЧЕТА_В) Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Не заполнены обязательные реквизиты на листе Б";
			СообщениеПользователю.Сообщить();
			ВызватьИсключение "";
			
		КонецЕсли;
		
		Узел_МНБЭДС = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПодчиненныйЭлемент(Узел_СвСчетБЭДС, "МНБЭДС");
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Индекс", ДопЛист.ИНДЕКС_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "КодРегион", ДопЛист.КОД_РЕГИОНА_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Район", ДопЛист.РАЙОН_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Город", ДопЛист.ГОРОД_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "НаселПункт", ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Улица", ДопЛист.УЛИЦА_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Дом", ДопЛист.ДОМ_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Корпус", ДопЛист.КОРПУС_В);
		ЗаполнитьЭлемент(Узел_МНБЭДС, "Кварт", ДопЛист.КВАРТИРА_В);
	Иначе
		Если Узел_СвСчетБанк <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетБанк);
		КонецЕсли;
		Если Узел_СвСчетФК <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвСчетФК);
		КонецЕсли;
		Если Узел_СвКЭСП <> Неопределено Тогда 
			РегламентированнаяОтчетность.УдалитьУзел(Узел_СвКЭСП);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭлектронноеПредставление_ФормаС09_2()

	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаС09_2();
	СтруктураВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXML("С_09_2");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "С_09_2");
	
	Текст = Документы.УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;

КонецФункции // ЭлектронноеПредставление_ФормаС09_2()

Функция ЭлектронноеПредставление_ФормаС09_1()
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_ФормаС09_1();
	СтруктураВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXML("С_09_1");
	ЗаполнитьДанными(СтруктураВыгрузки, ОсновныеСведения, "ФормаС09_1");
	
	Текст = Документы.УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВXML(СтруктураВыгрузки, ОсновныеСведения);
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ЭлектронноеПредставление(УникальныйИдентификатор = Неопределено)
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда 
		Возврат Отчеты[ИмяОтчета].ЭлектронноеПредставление(ЭтотОбъект, ИмяФормы, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда
		Возврат ЭлектронноеПредставление_ФормаС09_2();
	ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
		Возврат ЭлектронноеПредставление_ФормаС09_1();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

//процедуры и функции для печати уведомлений
Функция ПолучитьСведенияОбОрганизации()
	
	ВозвращаемоеЗначение = Новый Структура("ЮридическоеФизическоеЛицо, НаименованиеПолное, ИНН, ФИО, Фамилия, Имя, Отчество, ОГРН, КПП");
	ВозвращаемоеЗначение.Вставить("ЭтоЮрЛицо", РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	
	Если Не ВозвращаемоеЗначение.ЭтоЮрЛицо Тогда
		СтрокаСведений = "ИННФЛ,ОГРН,ФамилияИП,ИмяИП,ОтчествоИП,ФИО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		ВозвращаемоеЗначение.ИНН = СведенияОбОрганизации.ИННФЛ;
		ВозвращаемоеЗначение.ОГРН = СведенияОбОрганизации.ОГРН;
		ВозвращаемоеЗначение.Фамилия = СведенияОбОрганизации.ФамилияИП;
		ВозвращаемоеЗначение.Имя = СведенияОбОрганизации.ИмяИП;
		ВозвращаемоеЗначение.Отчество = СведенияОбОрганизации.ОтчествоИП;
		ВозвращаемоеЗначение.ФИО = СведенияОбОрганизации.ФИО;
	Иначе
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,ОГРН,КППЮЛ";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		ВозвращаемоеЗначение.ИНН = СведенияОбОрганизации.ИННЮЛ;
		ВозвращаемоеЗначение.КПП = СведенияОбОрганизации.КППЮЛ;
		ВозвращаемоеЗначение.НаименованиеПолное = СведенияОбОрганизации.НаимЮЛПол;
		ВозвращаемоеЗначение.ОГРН = СведенияОбОрганизации.ОГРН;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьМакетФормаС09_2()

	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_ФормаС_09_2");
	ПараметрыМакета = МакетУведомления.Параметры;
	
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ПодписантФамилия, "ОргПодписантФамилия_", ПараметрыМакета, 20);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ПодписантИмя, "ОргПодписантИмя_", ПараметрыМакета, 20);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ПодписантОтчество, "ОргПодписантОтчество_", ПараметрыМакета, 20);
	ДанныеРегистрацияВИФНС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВИФНС, "Код");
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДанныеРегистрацияВИФНС.Код, "КОД_НО_", ПараметрыМакета, 4);
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, "КППЮЛ");
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СведенияОбОрганизации.КППЮЛ, "КПП_", ПараметрыМакета, 9);
	
	СведенияОбОрг = ПолучитьСведенияОбОрганизации();
	СтруктураПараметров = ДанныеУведомления.Получить();
	
	Если СведенияОбОрг.ЭтоЮрЛицо Тогда
		Если СтруктураПараметров.Свойство("П_ИНН") Тогда 
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.П_ИНН, "ИНН_", ПараметрыМакета, 10);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.ОРГАНИЗАЦИЯ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.П_ОГРН, "ОГРН_", ПараметрыМакета, 13);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.П_КПП, "КПП_", ПараметрыМакета, 9);
		Иначе 
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СведенияОбОрг.ИНН, "ИНН_", ПараметрыМакета, 10);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СведенияОбОрг.НаименованиеПолное, "ОрганизацияНазвание_", ПараметрыМакета, 160);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СведенияОбОрг.ОГРН, "ОГРН_", ПараметрыМакета, 13);
		КонецЕсли;
	Иначе
		Если СтруктураПараметров.Свойство("П_ИНН") Тогда 
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.П_ИНН, "ИНН_", ПараметрыМакета, 12);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.ОРГАНИЗАЦИЯ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.П_ОГРНИП, "ОГРНИП_", ПараметрыМакета, 15);
		Иначе 
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СведенияОбОрг.ИНН, "ИНН_", ПараметрыМакета, 12);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СведенияОбОрг.ФИО, "ОрганизацияНазвание_", ПараметрыМакета, 160);
			Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СведенияОбОрг.ОГРН, "ОГРНИП_", ПараметрыМакета, 15);
		КонецЕсли;
	КонецЕсли;
	
	// данные основного раздела из сохраненных данных
	ПараметрыМакета.ПризнакСообщения = СтруктураПараметров.ПРИЗНАК_СООБЩЕНИЯ;
	Документы.УведомлениеОСпецрежимахНалогообложения.ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_СООБЩЕНИЯ, "ДатаСообщения_", ПараметрыМакета);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.НАИМЕНОВАНИЕ_ЗАВИСИМОЙ_ОРГАНИЗАЦИИ, "ОргУчНазвание_", ПараметрыМакета, 160);
	ЦелаяЧасть = Цел(СтруктураПараметров.ПРОЦЕНТ_УЧАСТИЯ);
	ДробнаяЧасть = СтруктураПараметров.ПРОЦЕНТ_УЧАСТИЯ - ЦелаяЧасть;
	Если ЦелаяЧасть = 0 Тогда
		ПараметрыМакета["ПроцентУчастия_3"] = "0";
	Иначе 
		Документы.УведомлениеОСпецрежимахНалогообложения.ЧислоВПараметрыМакета(ЦелаяЧасть, "ПроцентУчастия_", ПараметрыМакета, 3);
	КонецЕсли;
	Индекс = 4;
	Пока ДробнаяЧасть <> 0 Цикл
		ДробнаяЧасть = ДробнаяЧасть * 10;
		ЦелаяЧасть = Цел(ДробнаяЧасть);
		ДробнаяЧасть = ДробнаяЧасть - ЦелаяЧасть;
		ПараметрыМакета["ПроцентУчастия_"+Индекс] = "" + ЦелаяЧасть;
		Индекс = Индекс + 1;
	КонецЦикла;
	Пока Индекс <= 18 Цикл
		ПараметрыМакета["ПроцентУчастия_"+Индекс] = "0";
		Индекс = Индекс + 1;
	КонецЦикла;
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.ИНН_ЗАВИСИМОЙ, "ИННУчОрг_", ПараметрыМакета, 10);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.КПП_ЗАВИСИМОЙ, "КППУчОрг_", ПараметрыМакета, 9);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.ОКСМ, "ОКСМ_", ПараметрыМакета, 3);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЧислоВПараметрыМакета(СтруктураПараметров.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
		
	// данные подвала из сохраненных данных
	ПараметрыМакета.ПризнакПодписанта = СтруктураПараметров.ПРИЗНАК_НП_ПОДВАЛ;
	Документы.УведомлениеОСпецрежимахНалогообложения.ДатаВПараметрыМакета(СтруктураПараметров.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 20);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(СтруктураПараметров.ПредставительИННФЛ, "ИНН_ПОДПИСАНТ_", ПараметрыМакета, 12);
	ПараметрыМакета.Email = СтруктураПараметров.EMAIL_ПОДПИСАНТА;
	
	ПечатнаяФорма.Вывести(МакетУведомления);
	Возврат ПечатнаяФорма;

КонецФункции

Функция ПечатьСразуФормаС09_2()

	ПечатнаяФорма = СформироватьМакетФормаС09_2();
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;

КонецФункции // ПечатьСразуФормаС09_2()
 
Функция СформироватьМакетФорма_С_09_1_ФНС()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя+"ФНС";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_С_09_1");
	ОбластьТитульный = МакетУведомления.ПолучитьОбласть("Титульный");
	ОбластьПодвалТитульный = МакетУведомления.ПолучитьОбласть("ОбластьПодвалТитульный");
	ОбластьПустаяСтрока = МакетУведомления.ПолучитьОбласть("ОбластьПустаяСтрока");
	МассивДляПроверки = Новый Массив;
	МассивДляПроверки.Добавить(ОбластьПустаяСтрока);
	МассивДляПроверки.Добавить(ОбластьПодвалТитульный);
	
	ПараметрыМакета = ОбластьТитульный.Параметры;
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.П_ИНН, "ИНН_", ПараметрыМакета, 12);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.П_КПП, "КПП_", ПараметрыМакета, 9);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.КОД_НО, "КОД_НО_", ПараметрыМакета, 4);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ, "ОрганизацияНазвание_", ПараметрыМакета, 160);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.ОГРН, "ОГРН_", ПараметрыМакета, 13);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.ОГРНИП, "ОГРНИП_", ПараметрыМакета, 15);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.КИО, "КИО_", ПараметрыМакета, 5);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЧислоВПараметрыМакета(Титульный.ПРИЛОЖЕНО_ЛИСТОВ, "ПриложеноЛистов_", ПараметрыМакета, 3);
	ПараметрыМакета.КтоСообщает = Титульный.ПРИЗНАК_ПОДАЮЩЕГО;
	ПараметрыМакета.ОткрытиеЗакрытие = Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ;
	ПараметрыМакета.ПризнакГде = Титульный.ПРИЗНАК_ГДЕ;
	
	ПараметрыМакета.ПризнакПодписанта = Титульный.ПРИЗНАК_НП_ПОДВАЛ;
	Представитель = ПодписантФамилия + " " + ПодписантИмя +
		?(ЗначениеЗаполнено(ПодписантОтчество)," " + ПодписантОтчество,"");
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Представитель, "Представитель_", ПараметрыМакета, 60);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.ИНН_ПОДПИСАНТА, "ИНН_ПОДПИСАНТ_", ПараметрыМакета, 12);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	ПараметрыМакета.Email = Титульный.EMAIL_ПОДПИСАНТА;
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.ТЕЛЕФОН, "Телефон_", ПараметрыМакета, 20);
	Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(Титульный.ДОКУМЕНТ_ПРЕДСТАВИТЕЛЯ, "ДокументПредставителя_", ПараметрыМакета, 40);
	Документы.УведомлениеОСпецрежимахНалогообложения.ДатаВПараметрыМакета(Титульный.ДАТА_ПОДПИСИ, "ДатаПодписи_", ПараметрыМакета);
	
	ПечатнаяФорма.Вывести(ОбластьТитульный);
		
	Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
		ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(ОбластьПодвалТитульный);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДопЛист = "";
	Если ДанныеУведомления.Получить().ЛистА.Количество() > 0 Тогда
		ДопЛист = "А";
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьЛистА");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		СтруктураПараметров = ДанныеУведомления.Получить();
		ДопЛист = СтруктураПараметров.ЛистА[0];
		
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.П_ИНН_А, "ИНН_", ПараметрыМакета, 12);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.П_КПП_А, "КПП_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.ДатаВПараметрыМакета(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А, "ДатаОткрытия_", ПараметрыМакета);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НОМЕР_СЧЕТА_А, "НомерСчета_", ПараметрыМакета, 20);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_А, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС_А, "Индекс_", ПараметрыМакета, 6);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА_А, "КодРегиона_", ПараметрыМакета, 2);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.РАЙОН_А, "Район_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ГОРОД_А, "Город_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_А, "НаселенныйПункт_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.УЛИЦА_А, "Улица_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ДОМ_А, "Дом_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КОРПУС_А, "Корпус_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА_А, "Квартира_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ИНН_А, "ИННА_", ПараметрыМакета, 10);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КПП_А, "КППА_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.БИК_А, "БИКА_", ПараметрыМакета, 9);
	ИначеЕсли ДанныеУведомления.Получить().ЛистБ.Количество() > 0 Тогда
		ДопЛист = "Б";
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьЛистБ");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		СтруктураПараметров = ДанныеУведомления.Получить();
		ДопЛист = СтруктураПараметров.ЛистБ[0];
		
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.П_ИНН_Б, "ИНН_", ПараметрыМакета, 12);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.П_КПП_Б, "КПП_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.ДатаВПараметрыМакета(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_Б, "ДатаОткрытия_", ПараметрыМакета);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НОМЕР_СЧЕТА_Б, "НомерСчетаФК_", ПараметрыМакета, 20);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ИНН_Б, "ИННФК_", ПараметрыМакета, 12);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КПП_Б, "КППФК_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НОМЕР_СЧЕТА_Б2, "НомерСчета_", ПараметрыМакета, 20);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_Б2, "БанкНазвание_", ПараметрыМакета, 160);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС_Б, "Индекс_", ПараметрыМакета, 6);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА_Б, "КодРегиона_", ПараметрыМакета, 2);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.РАЙОН_Б, "Район_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ГОРОД_Б, "Город_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_Б, "НаселенныйПункт_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.УЛИЦА_Б, "Улица_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ДОМ_Б, "Дом_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КОРПУС_Б, "Корпус_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА_Б, "Квартира_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ИНН_Б2, "ИННБ_", ПараметрыМакета, 10);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КПП_Б2, "КППБ_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.БИК_Б2, "БИКБ_", ПараметрыМакета, 9);
	ИначеЕсли ДанныеУведомления.Получить().ЛистВ.Количество() > 0 Тогда
		ДопЛист = "В";
		ОбластьДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьЛистВ");
		ПараметрыМакета = ОбластьДопЛист.Параметры;
		СтруктураПараметров = ДанныеУведомления.Получить();
		ДопЛист = СтруктураПараметров.ЛистВ[0];
		
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.П_ИНН_В, "ИНН_", ПараметрыМакета, 12);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.П_КПП_В, "КПП_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.ДатаВПараметрыМакета(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_В, "ДатаОткрытия_", ПараметрыМакета);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НОМЕР_КЭСП_В, "НомерКЭСП_", ПараметрыМакета, 20);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ИНН_В, "ИННКЭСП_", ПараметрыМакета, 12);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КПП_В, "КППКЭСП_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.БИК_В, "БИККЭСП_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_В, "ОрганизацияНазвание_", ПараметрыМакета, 160);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НОМЕР_СЧЕТА_В, "НомерСчета_", ПараметрыМакета, 20);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НАМИНОВАНИЕ_БАНКА_В2, "БанкНазвание_", ПараметрыМакета, 160);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ИНДЕКС_В, "Индекс_", ПараметрыМакета, 6);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КОД_РЕГИОНА_В, "КодРегиона_", ПараметрыМакета, 2);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.РАЙОН_В, "Район_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ГОРОД_В, "Город_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.НАСЕЛЕННЫЙ_ПУНКТ_В, "НаселенныйПункт_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.УЛИЦА_В, "Улица_", ПараметрыМакета, 34);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ДОМ_В, "Дом_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КОРПУС_В, "Корпус_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КВАРТИРА_В, "Квартира_", ПараметрыМакета, 8);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.ИНН_В2, "ИННВ_", ПараметрыМакета, 10);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.КПП_В2, "КППВ_", ПараметрыМакета, 9);
		Документы.УведомлениеОСпецрежимахНалогообложения.СтрокаВПараметрыМакета(ДопЛист.БИК_В2, "БИКВ_", ПараметрыМакета, 9);
	Иначе 
		Возврат ПечатнаяФорма;
	КонецЕсли;
	ОбластьПодвалДопЛист = МакетУведомления.ПолучитьОбласть("ОбластьПодвалДопЛист");
	МассивДляПроверки[1] = ОбластьПодвалДопЛист;
	
	ПечатнаяФорма.Вывести(ОбластьДопЛист);
	
	Пока ПечатнаяФорма.ПроверитьВывод(МассивДляПроверки) Цикл
		ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(ОбластьПодвалДопЛист);
	ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
	
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_С_09_1_ПФР()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя+"ПФР";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_С_09_1");
	Область = МакетУведомления.ПолучитьОбласть("ОбластьПФР");
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	ДопЛист = СтруктураПараметров.ЛистА[0];
	ПараметрыОбласти = Область.Параметры;
	
	СтрокаСведений = "РегНомПФР,ИПРегНомПФР,КодОрганаПФР,НаимОрганаПФР,АдрЮР,ФИОРук,ФИОБух,АдрПрописки,ФИО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
	ПараметрыОбласти.НаименованиеОрганизации = Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ;
	ПараметрыОбласти.ИНН = Титульный.П_ИНН;
	ПараметрыОбласти.КПП = Титульный.П_КПП;
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		ПараметрыОбласти.РегНомерПФР = СведенияОбОрганизации.РегНомПФР;
		Если СтрНайти(СведенияОбОрганизации.АдрЮР, ",,,,,,") = 0 Тогда 
			ПараметрыОбласти.АдресОрганизации = СведенияОбОрганизации.АдрЮР;
		КонецЕсли;
		ПараметрыОбласти.РуководительФИО = СведенияОбОрганизации.ФИОРук;
		ПараметрыОбласти.ГлавБухФИО = СведенияОбОрганизации.ФИОБух;
	Иначе
		ПараметрыОбласти.РегНомерПФР = СведенияОбОрганизации.ИПРегНомПФР;
		Если СтрНайти(СведенияОбОрганизации.АдрПрописки, ",,,,,,") = 0 Тогда 
			ПараметрыОбласти.АдресОрганизации = СведенияОбОрганизации.АдрПрописки;
		КонецЕсли;
		ПараметрыОбласти.РуководительФИО = СведенияОбОрганизации.ФИО;
	КонецЕсли;
	ПараметрыОбласти.НаимОрганаПФР = СведенияОбОрганизации.НаимОрганаПФР;
	Если Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ = "1" Тогда 
		ПараметрыОбласти.ОткрытиеЗакрытие = "открытии";
		ПараметрыОбласти.ОткЗакр = " открытия ";
	ИначеЕсли Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ = "2" Тогда 
		ПараметрыОбласти.ОткрытиеЗакрытие = "закрытии";
		ПараметрыОбласти.ОткЗакр = " закрытия ";
	КонецЕсли;
	ПараметрыОбласти.НомерСчета = ДопЛист.НОМЕР_СЧЕТА_А;
	ПараметрыОбласти.ИНН_банк = ДопЛист.ИНН_А;
	ПараметрыОбласти.КПП_банк = ДопЛист.КПП_А;
	ПараметрыОбласти.БИК = ДопЛист.БИК_А;
	ПараметрыОбласти.НаимБанк = ДопЛист.НАМИНОВАНИЕ_БАНКА_А;
	ПараметрыОбласти.АдресБанк = Документы.УведомлениеОСпецрежимахНалогообложения.АдресСтрокой(ДопЛист, "_А");
	Если ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А) Тогда 
		ПараметрыОбласти.ДатаОткрЗакр = Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А, "ДЛФ=ДД");
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(Область);
	Возврат ПечатнаяФорма;
КонецФункции

Функция СформироватьМакетФорма_С_09_1_ФСС()
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_"+ВидУведомления.Метаданные().Имя+"ФСС";
	
	МакетУведомления = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьМакет("ПФ_MXL_С_09_1");
	Область = МакетУведомления.ПолучитьОбласть("ОбластьФСС");
	СтруктураПараметров = ДанныеУведомления.Получить();
	Титульный = СтруктураПараметров.Титульный[0];
	ДопЛист = СтруктураПараметров.ЛистА[0];
	ПараметрыОбласти = Область.Параметры;
	
	ПараметрыОбласти.НаимОрг = Титульный.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ;
	ПараметрыОбласти.ИНН = Титульный.П_ИНН;
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда 
		СтрокаСведений = "ФИОРук,ДолжнРук,РегистрационныйНомерФСС,НаименованиеТерриториальногоОрганаФСС,ОКАТО,ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		ПараметрыОбласти.РегНо = СведенияОбОрганизации.РегистрационныйНомерФСС;
		ПараметрыОбласти.ДолжностьРук = СведенияОбОрганизации.ДолжнРук;
		ПараметрыОбласти.ФИОРук = СведенияОбОрганизации.ФИОРук;
		ПараметрыОбласти.НаимОргФСС = СведенияОбОрганизации.НаименованиеТерриториальногоОрганаФСС;
		ПараметрыОбласти.ОКАТО = ?(Год(ДатаПодписи) >= 2014, СведенияОбОрганизации.ОКТМО, СведенияОбОрганизации.ОКАТО);
	Иначе
		СтрокаСведений = "ФИО,РегистрационныйНомерФСС,НаименованиеТерриториальногоОрганаФСС,ОКАТО,ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведений);
		
		ПараметрыОбласти.ФИОИП = СведенияОбОрганизации.ФИО;
		ПараметрыОбласти.РегНо = СведенияОбОрганизации.РегистрационныйНомерФСС;
		ПараметрыОбласти.НаимОргФСС = СведенияОбОрганизации.НаименованиеТерриториальногоОрганаФСС;
		ПараметрыОбласти.ОКАТО = ?(Год(ДатаПодписи) >= 2014, СведенияОбОрганизации.ОКТМО, СведенияОбОрганизации.ОКАТО);
	КонецЕсли;
	ПараметрыОбласти.ПолноеНаимБанк = ДопЛист.НАМИНОВАНИЕ_БАНКА_А;
	
	Если Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ = "1" Тогда 
		ПараметрыОбласти.ОткрытиеЗакрытие = "открытии";
	ИначеЕсли Титульный.ПРИЗНАК_ОТКРЫТИЕ_ЗАКРЫТИЕ = "2" Тогда 
		ПараметрыОбласти.ОткрытиеЗакрытие = "закрытии";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А) Тогда 
		ПараметрыОбласти.ДатаОткр = Формат(ДопЛист.ДАТА_ОТКРЫТИЯ_ЗАКРЫТИЯ_А, "ДЛФ=ДД");
	КонецЕсли;
	ПараметрыОбласти.НомерСчета = ДопЛист.НОМЕР_СЧЕТА_А;
	ПараметрыОбласти.ИННБанк = ДопЛист.ИНН_А;
	ПараметрыОбласти.КППБанк = ДопЛист.КПП_А;
	ПараметрыОбласти.БИКБанк = ДопЛист.БИК_А;
	
	ПечатнаяФорма.Вывести(Область);
	Возврат ПечатнаяФорма;
КонецФункции

Функция ПечатьСразуФорма_С_09_1(ПФР_ФСС = 0)
	
	Если ПФР_ФСС = 0 Тогда
		ПечатнаяФорма = СформироватьМакетФорма_С_09_1_ФНС();
	ИначеЕсли ПФР_ФСС = 1 Тогда
		ПечатнаяФорма = СформироватьМакетФорма_С_09_1_ПФР();
	ИначеЕсли ПФР_ФСС = 2 Тогда
		ПечатнаяФорма = СформироватьМакетФорма_С_09_1_ФСС();
	КонецЕсли;
	
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ПечатнаяФорма.АвтоМасштаб = Истина;
	ПечатнаяФорма.ПолеСверху = 0;
	ПечатнаяФорма.ПолеСнизу = 0;
	ПечатнаяФорма.ПолеСлева = 0;
	ПечатнаяФорма.ПолеСправа = 0;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УведомлениеОСпецрежимах_" + ВидУведомления.Метаданные().Имя;
	ПечатнаяФорма.ОбластьПечати = ПечатнаяФорма.Область();
	
	Возврат ПечатнаяФорма;
КонецФункции

#КонецОбласти
#КонецЕсли