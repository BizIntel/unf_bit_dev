#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
	ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПоставщику();
	ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	ЭтотОбъект.УдалитьЗакрыт = Ложь;
	ЭтотОбъект.Событие = Документы.Событие.ПустаяСсылка();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказНаПроизводство")] = "ЗаполнитьПоЗаказуНаПроизводство";
	
	ИсключаяСвойства = "СостояниеЗаказа,ВариантЗавершения";
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, ИсключаяСвойства);
	
	ДозаполнитьПоУмолчанию();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.ДатаПоступления <> ДатаПоступления Тогда
				СтрокаТабличнойЧасти.ДатаПоступления = ДатаПоступления;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Если Запасы.Количество() > 0 Тогда
			ДатаПоступления = Запасы[0].ДатаПоступления;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
	// ИнтеграцияГИСМ
	ЕстьКиЗГИСМ = ИнтеграцияГИСМУНФ.ЕстьКиЗГИСМ(Запасы);
	// Конец ИнтеграцияГИСМ
	
	СостоянияЗаказов.ПередЗаписьюЗаказа(ЭтотОбъект);
	
	ПривестиДанныеКСогласованномуСостоянию();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияЗаказов.ПриЗаписиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.ЗаказПоставщику.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьГрафикДвиженияЗапасов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПотребностьВЗапасах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ЗаказПоставщику.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.ЗаказПоставщику.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненная счет-фактура (полученная)
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	Если Материалы.Итог("Резерв") > 0 Тогда
		
		Для каждого СтрокаМатериалы из Материалы Цикл
		
			Если СтрокаМатериалы.Резерв > 0 И НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаРезерв) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнен склад резерва.'");
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "СтруктурнаяЕдиницаРезерв", Отказ);
				
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЗапланироватьОплату
	   И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
	   
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Касса");
		
	ИначеЕсли ЗапланироватьОплату
	   И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
	   
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "БанковскийСчет");
		
	Иначе
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Касса");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "БанковскийСчет");
		
	КонецЕсли;
	
	Если ЗапланироватьОплату
	   И ПлатежныйКалендарь.Количество() = 1
	   И НЕ ЗначениеЗаполнено(ПлатежныйКалендарь[0].ДатаОплаты) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Дата оплаты"" не заполнено.'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "ДатаОплаты", Отказ);
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПлатежныйКалендарь.ДатаОплаты");
		
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку Тогда
		
		Для каждого СтрокаМатериалы Из Материалы Цикл
			
			Если СтрокаМатериалы.Резерв > СтрокаМатериалы.Количество Тогда
				
				ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Материалы в переработку"" количество позиций к списанию из резерва превышает общее количество материалов.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаМатериалы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Материалы",
					СтрокаМатериалы.НомерСтроки,
					"Резерв",
					Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	Если ЕстьРучныеСкидки Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			ТекСумма = СтрокаЗапасы.Цена * СтрокаЗапасы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ОКР(ТекСумма * СтрокаЗапасы.ПроцентСкидкиНаценки / 100, 2), 0);
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаРучнойСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %Номер% списка ""Товары, работы, услуги"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Сумма",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДатаПоступления"));
	Иначе
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Запасы.ДатаПоступления"));
	КонецЕсли;
	
	Если Не СостояниеЗаказа = Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВариантЗавершения"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

Процедура ЗаполнитьПоЗаказуПокупателя(ДокументСсылкаЗаказПокупателя) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылкаЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение шапки.
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылкаЗаказПокупателя,
	Новый Структура("Организация, Ссылка, ВидОперации, Старт, ДатаОтгрузки, СостояниеЗаказа, Проведен"));
	
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДокументСсылкаЗаказПокупателя, ЗначенияРеквизитов);
	
	Организация = ЗначенияРеквизитов.Организация;
	ЗаказПокупателя = ЗначенияРеквизитов.Ссылка;
	Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ДатаПоступления = ЗначенияРеквизитов.Старт;
	Иначе
		ДатаПоступления = ЗначенияРеквизитов.ДатаОтгрузки;
	КонецЕсли;
	
	// Заполнение табличной части.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		-ЗапасыОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазмещениеОстатки.Номенклатура,
	|		РазмещениеОстатки.Характеристика,
	|		-РазмещениеОстатки.КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов.Остатки(
	|				,
	|				ЗаказПокупателя = &ДокументОснование
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК РазмещениеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
	|		ДвиженияДокументаРазмещениеЗаказов.Характеристика,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
	|	ГДЕ
	|		ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
	|		И ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя = &ДокументОснование) КАК ЗаказыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаказПокупателяЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.Старт
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ДатаОтгрузки
	|	КОНЕЦ КАК ЗапасыДатаПоступления,
	|	ЗаказПокупателяЗапасы.СтавкаНДС,
	|	СУММА(ЗаказПокупателяЗапасы.Количество) КАК Количество,
	|	ЗаказПокупателяЗапасы.Спецификация
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &ДокументОснование
	|	И ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА 1
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			ТОГДА ЗаказПокупателяЗапасы.Ссылка.Старт
	|		ИНАЧЕ ЗаказПокупателяЗапасы.ДатаОтгрузки
	|	КОНЕЦ,
	|	ЗаказПокупателяЗапасы.Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Запрос.Текст = Запрос.Текст + "; " +
		"ВЫБРАТЬ
		|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыОстатки.Характеристика КАК Характеристика,
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|		ЗапасыОстатки.Характеристика КАК Характеристика,
		|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.Запасы.Остатки(
		|				,
		|				ЗаказПокупателя = &ДокументОснование
		|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗапасыОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РазмещениеОстатки.Номенклатура,
		|		РазмещениеОстатки.Характеристика,
		|		РазмещениеОстатки.КоличествоОстаток
		|	ИЗ
		|		РегистрНакопления.РазмещениеЗаказов.Остатки(
		|				,
		|				ЗаказПокупателя = &ДокументОснование
		|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК РазмещениеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДвиженияДокументаРазмещениеЗаказов.Номенклатура,
		|		ДвиженияДокументаРазмещениеЗаказов.Характеристика,
		|		ВЫБОР
		|			КОГДА ДвиженияДокументаРазмещениеЗаказов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
		|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаРазмещениеЗаказов.Количество, 0)
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.РазмещениеЗаказов КАК ДвиженияДокументаРазмещениеЗаказов
		|	ГДЕ
		|		ДвиженияДокументаРазмещениеЗаказов.Регистратор = &Ссылка
		|		И ДвиженияДокументаРазмещениеЗаказов.ЗаказПокупателя = &ДокументОснование) КАК ЗаказыОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыОстатки.Номенклатура,
		|	ЗаказыОстатки.Характеристика
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗаказыОстатки.КоличествоОстаток) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЗаказПокупателяМатериалы.НомерСтроки) КАК НомерСтроки,
		|	ЗаказПокупателяМатериалы.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяМатериалы.Характеристика КАК Характеристика,
		|	ЗаказПокупателяМатериалы.Партия КАК Партия,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ КАК Коэффициент,
		|	ЗаказПокупателяМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяМатериалы.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
		|			ТОГДА ЗаказПокупателяМатериалы.Ссылка.Организация.СтавкаНДСПоУмолчанию
		|		ИНАЧЕ ЗаказПокупателяМатериалы.Номенклатура.СтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ЗаказПокупателяМатериалы.Ссылка.Старт КАК ЗапасыДатаПоступления,
		|	СУММА(ЗаказПокупателяМатериалы.Количество) КАК Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателяМатериалы
		|ГДЕ
		|	ЗаказПокупателяМатериалы.Ссылка = &ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяМатериалы.Номенклатура,
		|	ЗаказПокупателяМатериалы.Характеристика,
		|	ЗаказПокупателяМатериалы.Партия,
		|	ЗаказПокупателяМатериалы.ЕдиницаИзмерения,
		|	ЗаказПокупателяМатериалы.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяМатериалы.Номенклатура.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
		|			ТОГДА ЗаказПокупателяМатериалы.Ссылка.Организация.СтавкаНДСПоУмолчанию
		|		ИНАЧЕ ЗаказПокупателяМатериалы.Номенклатура.СтавкаНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ,
		|	ЗаказПокупателяМатериалы.Ссылка.Старт
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаОстатков = МассивРезультатов[0].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
	
	Запасы.Очистить();
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			КоличествоКСписанию = Выборка.Количество * Выборка.Коэффициент;
			МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоКСписанию;
			Если МассивСтрокОстатков[0].КоличествоОстаток < 0 Тогда
				
				НоваяСтрока.Количество = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
			КонецЕсли;
			
			НоваяСтрока.ДатаПоступления = Выборка.ЗапасыДатаПоступления;
			Если ДатаПоступления <> НоваяСтрока.ДатаПоступления Тогда
				ПоложениеДатыПоступленияВШапке = Ложь;
			КонецЕсли;
			
			Если МассивСтрокОстатков[0].КоличествоОстаток <= 0 Тогда
				ТаблицаОстатков.Удалить(МассивСтрокОстатков[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ТаблицаОстатков = МассивРезультатов[2].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
		
		Выборка = МассивРезультатов[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
			
			МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокОстатков.Количество() = 0 Тогда
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
			ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) = Выборка.Количество Тогда
				
				Продолжить;
				
			ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) > Выборка.Количество Тогда
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - Выборка.Количество * Выборка.Коэффициент;
				Продолжить;
				
			ИначеЕсли (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент) < Выборка.Количество Тогда
				
				КоличествоКСписанию = -1 * (МассивСтрокОстатков[0].КоличествоОстаток / Выборка.Коэффициент - Выборка.Количество);
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				
				НоваяСтрока = Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				НоваяСтрока.Количество = (КоличествоКСписанию + МассивСтрокОстатков[0].КоличествоОстаток) / Выборка.Коэффициент;
				
			КонецЕсли;
			
			НоваяСтрока.ДатаПоступления = Выборка.ЗапасыДатаПоступления;
			Если ДатаПоступления <> НоваяСтрока.ДатаПоступления Тогда
				ПоложениеДатыПоступленияВШапке = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаПроизводство(ДокументСсылкаЗаказНаПроизводство) Экспорт
	
	ОснованиеВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылкаЗаказНаПроизводство, "ВидОперации");
	
	Если ОснованиеВидОперации <> Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка
		И ОснованиеВидОперации <> Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка
		Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка КАК Заказ,
	|	ЗаказНаПроизводство.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ФункциональнаяОпцияРезервированиеЗапасов.Значение
	|			ТОГДА ЗаказНаПроизводство.ЗаказПокупателя
	|		ИНАЧЕ ЗаказНаПроизводство.ДокументОснование
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗаказНаПроизводство.ДокументОснование,
	|	ЗаказНаПроизводство.Старт КАК ДатаПоступления,
	|	ЗаказНаПроизводство.Запасы.(
	|		Ссылка.Старт КАК ДатаПоступления,
	|		Номенклатура,
	|		Характеристика,
	|		ЕдиницаИзмерения,
	|		Количество,
	|		Номенклатура.СтавкаНДС КАК СтавкаНДС
	|	) КАК Запасы
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Константа.ФункциональнаяОпцияРезервированиеЗапасов КАК ФункциональнаяОпцияРезервированиеЗапасов
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка = &ДокументОснование");
	
	Если ОснованиеВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ЗаказНаПроизводство.Запасы.(",
		"ЗаказНаПроизводство.Продукция.(");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылкаЗаказНаПроизводство);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
	
	СтавкаНДС = Неопределено;
	СтавкаНДСИзНоменклатуры = Ложь;
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
	Иначе
		СтавкаНДСИзНоменклатуры = Истина;
		СтавкаНДС = Организация.СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
	
	Для каждого СтрокаЗапасы Из Запасы Цикл
		Если СтавкаНДСИзНоменклатуры Тогда
			Если Не ЗначениеЗаполнено(СтрокаЗапасы.СтавкаНДС) Тогда
				СтрокаЗапасы.СтавкаНДС = СтавкаНДС;
			КонецЕсли;
		Иначе
			СтрокаЗапасы.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуРезервПоОстаткам() Экспорт
	
	Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Материалы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	ТаблицаПериодов = Новый ТаблицаЗначений();
	ТаблицаПериодов.Колонки.Добавить("ДатаОтгрузки");
	ТаблицаПериодов.Колонки.Добавить("СтрокаЗапасы");
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		
		МассивСтрокЗапасы = Материалы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			НоваяСтрока = ТаблицаПериодов.Добавить();
			НоваяСтрока.ДатаОтгрузки = СтрокаЗапасы.ДатаОтгрузки;
			НоваяСтрока.СтрокаЗапасы = СтрокаЗапасы;
		КонецЦикла;
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		ТаблицаПериодов.Сортировать("ДатаОтгрузки");
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			СтрокаЗапасы = СтрокаТаблицыПериодов.СтрокаЗапасы;
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПериодов.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
		ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПоставщику();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.Коэффициент КАК Коэффициент,
	|	ТаблицаПродукция.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)";
	
	Если ТаблицаУзлы = Неопределено Тогда
		Материалы.Очистить();
		ТаблицаПродукция = Запасы.Выгрузить();
		Массив = Новый Массив();
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10,3));
		ТаблицаПродукция.Колонки.Добавить("Коэффициент", ОписаниеТиповЧ);
		Для каждого СтрокаПродукция Из ТаблицаПродукция Цикл
			Если ЗначениеЗаполнено(СтрокаПродукция.ЕдиницаИзмерения)
				И ТипЗнч(СтрокаПродукция.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтрокаПродукция.Коэффициент = СтрокаПродукция.ЕдиницаИзмерения.Коэффициент;
			Иначе
				СтрокаПродукция.Коэффициент = 1;
			КонецЕсли;
		КонецЦикла;
		ТаблицаУзлы = ТаблицаПродукция.СкопироватьКолонки("НомерСтроки,Количество,Коэффициент,Спецификация");
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаУзлы);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтрокиПродукции,
	|	ТаблицаПродукция.Спецификация КАК СпецификацияПродукции,
	|	МИНИМУМ(ТаблицаМатериалы.НомерСтроки) КАК НомерСтрокиСостава,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалы.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ТаблицаМатериалы.Количество / ТаблицаМатериалы.КоличествоПродукции * ТаблицаПродукция.Коэффициент * ТаблицаПродукция.Количество) КАК Количество,
	|	ТаблицаМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаМатериалы.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаМатериалы.Спецификация КАК Спецификация
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК ТаблицаМатериалы
	|		ПО ТаблицаПродукция.Спецификация = ТаблицаМатериалы.Ссылка,
	|	Константа.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ГДЕ
	|	ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаМатериалы.ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаМатериалы.ДоляСтоимости,
	|	ТаблицаМатериалы.Спецификация,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПродукции,
	|	НомерСтрокиСостава";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			ТаблицаУзлы.Очистить();
			Если НЕ СтекСпецификацийУзлов.Найти(Выборка.Спецификация) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'При попытке заполнить табличную часть Материалы по спецификации,
									|обнаружено рекурсивное вхождение элемента'")+" "+Выборка.Номенклатура+" "+НСтр("ru = 'в спецификации'")+" "+Выборка.СпецификацияПродукции+"
									|Операция не выполнена!";
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			СтекСпецификацийУзлов.Добавить(Выборка.Спецификация);
			НоваяСтрока = ТаблицаУзлы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗаполнитьТабличнуюЧастьПоСпецификации(СтекСпецификацийУзлов, ТаблицаУзлы);
		Иначе
			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДатаОтгрузки = Дата;
		КонецЕсли;
	КонецЦикла;
	
	СтекСпецификацийУзлов.Очистить();
	Материалы.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, Спецификация, ДатаОтгрузки", "Количество, Резерв");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка, Истина);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится %ПредставлениеСчетФактуры%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Заказ поставщику № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (полученная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПривестиДанныеКСогласованномуСостоянию()
	
	Если СостояниеЗаказа <> Справочники.СостоянияЗаказовПоставщикам.Завершен Тогда
		ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	КонецЕсли;
	
	Если ВариантЗавершения <> Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		ЭтотОбъект.Заметки = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли