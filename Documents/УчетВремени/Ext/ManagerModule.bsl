#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаУчетВремени, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ДниНедели = Новый Соответствие;
	ДниНедели.Вставить(0, "Пн");
	ДниНедели.Вставить(1, "Вт");
	ДниНедели.Вставить(2, "Ср");
	ДниНедели.Вставить(3, "Чт");
	ДниНедели.Вставить(4, "Пт");
	ДниНедели.Вставить(5, "Сб");
	ДниНедели.Вставить(6, "Вс");
	
	ТекстЗапроса = "";
	
	Для Счетчик = 0 По 6 Цикл
		
		ПоместитьВоВременнуюТаблицу = ?(Счетчик = 0, "ПОМЕСТИТЬ ВременнаяТаблицаРаботы", "");
		
		Префикс = ДниНедели.Получить(Счетчик);
		
		ТекстЗапроса = 	ТекстЗапроса + ?(Счетчик > 0, "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|", "") +
		"ВЫБРАТЬ
		|	УчетВремениОперации.НомерСтроки,
		|	ДОБАВИТЬКДАТЕ(УчетВремениОперации.Ссылка.ДатаС, ДЕНЬ, " + Счетчик + ") КАК Период,
		|	ВЫБОР
		|		КОГДА УчетВремениОперации.Заказчик ССЫЛКА Справочник.Контрагенты
		|			ТОГДА УчетВремениОперации.Заказчик
		|		КОГДА УчетВремениОперации.Заказчик ССЫЛКА Справочник.ДоговорыКонтрагентов
		|			ТОГДА УчетВремениОперации.Заказчик.Владелец
		|		КОГДА УчетВремениОперации.Заказчик ССЫЛКА Документ.ЗаказПокупателя
		|			ТОГДА УчетВремениОперации.Заказчик.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА УчетВремениОперации.Заказчик ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		КОГДА УчетВремениОперации.Заказчик ССЫЛКА Справочник.ДоговорыКонтрагентов
		|			ТОГДА УчетВремениОперации.Заказчик
		|		КОГДА УчетВремениОперации.Заказчик ССЫЛКА Документ.ЗаказПокупателя
		|			ТОГДА УчетВремениОперации.Заказчик.Договор
		|	КОНЕЦ КАК Договор,
		|	ВЫБОР
		|		КОГДА УчетВремениОперации.Заказчик ССЫЛКА Справочник.Контрагенты
		|				ИЛИ УчетВремениОперации.Заказчик ССЫЛКА Справочник.ДоговорыКонтрагентов
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|		КОГДА УчетВремениОперации.Заказчик ССЫЛКА Документ.ЗаказПокупателя
		|			ТОГДА УчетВремениОперации.Заказчик
		|	КОНЕЦ КАК ЗаказПокупателя,
		|	УчетВремениОперации.Ссылка.Сотрудник,
		|	УчетВремениОперации.Номенклатура КАК Номенклатура,
		|	УчетВремениОперации.Характеристика КАК Характеристика,
		|	УчетВремениОперации.ВидРабот КАК ВидРабот,
		|	УчетВремениОперации." + Префикс + "Длительность КАК ЗагрузкаФакт,
		|	УчетВремениОперации." + Префикс + "Длительность * УчетВремениОперации.Расценка КАК СуммаФакт,
		|	УчетВремениОперации.Ссылка.СтруктурнаяЕдиница,
		|	&Организация КАК Организация,
		|	ДОБАВИТЬКДАТЕ(УчетВремениОперации.Ссылка.ДатаС, МИНУТА, ЧАС(УчетВремениОперации." + Префикс + "ВремяНачала) * 60 + МИНУТА(УчетВремениОперации." + Префикс + "ВремяНачала) + 1440 * " + Счетчик + ") КАК ВремяНачала,
		|	ДОБАВИТЬКДАТЕ(УчетВремениОперации.Ссылка.ДатаС, МИНУТА, ЧАС(УчетВремениОперации." + Префикс + "ВремяОкончания) * 60 + МИНУТА(УчетВремениОперации." + Префикс + "ВремяОкончания) + 1440 * " + Счетчик + ") КАК ВремяОкончания,
		|	УчетВремениОперации.Комментарий" + "
		|" + ПоместитьВоВременнуюТаблицу + "
		|ИЗ
		|	Документ.УчетВремени.Операции КАК УчетВремениОперации
		|ГДЕ
		|	УчетВремениОперации.Ссылка = &Ссылка
		|	И УчетВремениОперации." + Префикс + "Длительность > 0";
	
	КонецЦикла; 
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаУчетВремени);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.ВыполнитьПакет();
	
	СФормироватьТаблицаЗаданияНаРаботу(ДокументСсылкаУчетВремени, СтруктураДополнительныеСвойства);
	
	// Биллинг
	СформироватьТаблицаВыполнениеДоговораОбслуживания(ДокументСсылкаУчетВремени, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СФормироватьТаблицаЗаданияНаРаботу(ДокументСсылкаЗаданиеНаРаботу, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРаботы.НомерСтроки,
	|	ВременнаяТаблицаРаботы.Период,
	|	ВременнаяТаблицаРаботы.Контрагент,
	|	ВременнаяТаблицаРаботы.Договор,
	|	ВременнаяТаблицаРаботы.ЗаказПокупателя,
	|	ВременнаяТаблицаРаботы.Сотрудник,
	|	ВременнаяТаблицаРаботы.Номенклатура,
	|	ВременнаяТаблицаРаботы.Характеристика,
	|	ВременнаяТаблицаРаботы.ВидРабот,
	|	ВременнаяТаблицаРаботы.ЗагрузкаФакт,
	|	ВременнаяТаблицаРаботы.СуммаФакт,
	|	ВременнаяТаблицаРаботы.СтруктурнаяЕдиница,
	|	ВременнаяТаблицаРаботы.Организация,
	|	ВременнаяТаблицаРаботы.ВремяНачала,
	|	ВременнаяТаблицаРаботы.ВремяОкончания,
	|	ВременнаяТаблицаРаботы.Комментарий
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаданияНаРаботу", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СФормироватьТаблицаЗаданияНаРаботу()

Процедура СформироватьТаблицаВыполнениеДоговораОбслуживания(ДокументСсылкаЗаданиеНаРаботу, СтруктураДополнительныеСвойства)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговораОбслуживания", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРаботы.Период,
	|	ВременнаяТаблицаРаботы.Договор,
	|	ВременнаяТаблицаРаботы.Номенклатура КАК ОбъектДоговораОбслуживания,
	|	ВременнаяТаблицаРаботы.Характеристика,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаРаботы.СуммаФакт = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УказанаСтоимость,
	|	ВременнаяТаблицаРаботы.ЗагрузкаФакт КАК Количество,
	|	ВременнаяТаблицаРаботы.СуммаФакт КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВременнаяТаблицаРаботы.Договор = ДоговорыКонтрагентов.Ссылка
	|			И (ДоговорыКонтрагентов.ЭтоДоговорОбслуживания)
	|ГДЕ
	|	ВременнаяТаблицаРаботы.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговораОбслуживания", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаВыполнениеДоговораОбслуживания()

#КонецОбласти

#Область ИнтерфейсПечати

// Функция проверяет, проведен документ или нет, и вызывает процедуру печати
// документа.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_УчетВремени";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетВремени.Ссылка,
	|	УчетВремени.Дата КАК ДатаДокумента,
	|	УчетВремени.Организация.НаименованиеПолное КАК Организация,
	|	УчетВремени.Номер КАК Номер,
	|	УчетВремени.Организация.Префикс КАК Префикс,
	|	УчетВремени.СтруктурнаяЕдиница,
	|	УчетВремени.Сотрудник,
	|	УчетВремени.Сотрудник.Код КАК ТабНомер,
	|	УчетВремени.ДатаС,
	|	УчетВремени.ДатаПо,
	|	УчетВремени.Операции.(
	|		НомерСтроки КАК НомерСтроки,
	|		Заказчик,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(УчетВремени.Операции.ВидРабот.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА УчетВремени.Операции.ВидРабот.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(УчетВремени.Операции.ВидРабот.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ВидРабот,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(УчетВремени.Операции.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА УчетВремени.Операции.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(УчетВремени.Операции.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Номенклатура,
	|		Характеристика,
	|		Расценка,
	|		Всего,
	|		Сумма КАК Сумма,
	|		Комментарий,
	|		ПнДлительность КАК Пн,
	|		ВтДлительность КАК Вт,
	|		СрДлительность КАК Ср,
	|		ЧтДлительность КАК Чт,
	|		ПтДлительность КАК Пт,
	|		СбДлительность КАК Сб,
	|		ВсДлительность КАК Вс,
	|		ПнВремяНачала КАК ПнС,
	|		ПнВремяОкончания КАК ПнПо,
	|		ВтВремяНачала КАК ВтС,
	|		ВтВремяОкончания КАК ВтПо,
	|		СрВремяОкончания КАК СрПо,
	|		СрВремяНачала КАК СрС,
	|		ЧтВремяНачала КАК ЧтС,
	|		ЧтВремяОкончания КАК ЧтПо,
	|		ПтВремяНачала КАК ПтС,
	|		ПтВремяОкончания КАК ПтПо,
	|		СбВремяНачала КАК СбС,
	|		СбВремяОкончания КАК СбПо,
	|		ВсВремяНачала КАК ВсС,
	|		ВсВремяОкончания КАК ВсПо,
	|		Номенклатура.Артикул КАК Артикул
	|	)
	|ИЗ
	|	Документ.УчетВремени КАК УчетВремени
	|ГДЕ
	|	УчетВремени.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УчетВремени_Макет";
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УчетВремени.ПФ_MXL_Макет");
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Учет времени № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Сотрудник");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаС = Формат(Шапка.ДатаС, "ДФ=dd.MM.yy");
		ОбластьМакета.Параметры.ДатаПо = Формат(Шапка.ДатаПо, "ДФ=dd.MM.yy");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаСтрокОперации = Шапка.Операции.Выбрать();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
				
		ОбластьМакета.Параметры.Пн = Формат(Шапка.ДатаС, "ДФ=dd.MM");
		ОбластьМакета.Параметры.Вт = Формат(Шапка.ДатаС + 86400, "ДФ=dd.MM");
		ОбластьМакета.Параметры.Ср = Формат(Шапка.ДатаС + 86400*2, "ДФ=dd.MM");
		ОбластьМакета.Параметры.Чт = Формат(Шапка.ДатаС + 86400*3, "ДФ=dd.MM");
		ОбластьМакета.Параметры.Пт = Формат(Шапка.ДатаС + 86400*4, "ДФ=dd.MM");
		ОбластьМакета.Параметры.Сб = Формат(Шапка.ДатаС + 86400*5, "ДФ=dd.MM");
		ОбластьМакета.Параметры.Вс = Формат(Шапка.ДатаС + 86400*6, "ДФ=dd.MM");	
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Сумма   = 0;
		Всего   = 0;
		
		Пока ВыборкаСтрокОперации.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокОперации);
			
	        Если ЗначениеЗаполнено(ВыборкаСтрокОперации.ПнС) ИЛИ ЗначениеЗаполнено(ВыборкаСтрокОперации.ПнПо) Тогда
				ОбластьМакета.Параметры.ПнВремя = Формат(ВыборкаСтрокОперации.ПнС, "ДФ=H:mm; ДП=0:00") + "-" + Формат(ВыборкаСтрокОперации.ПнПо, "ДФ=H:mm; ДП=0:00");
			Иначе	
				ОбластьМакета.Параметры.ПнВремя = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСтрокОперации.ВтС) ИЛИ ЗначениеЗаполнено(ВыборкаСтрокОперации.ВтПо) Тогда
				ОбластьМакета.Параметры.ВтВремя = Формат(ВыборкаСтрокОперации.ВтС, "ДФ=H:mm; ДП=0:00") + "-" + Формат(ВыборкаСтрокОперации.ВтПо, "ДФ=H:mm; ДП=0:00");
			Иначе	
				ОбластьМакета.Параметры.ВтВремя = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСтрокОперации.СрС) ИЛИ ЗначениеЗаполнено(ВыборкаСтрокОперации.СрПо) Тогда
				ОбластьМакета.Параметры.СрВремя = Формат(ВыборкаСтрокОперации.СрС, "ДФ=H:mm; ДП=0:00") + "-" + Формат(ВыборкаСтрокОперации.СрПо, "ДФ=H:mm; ДП=0:00");
			Иначе	
				ОбластьМакета.Параметры.СрВремя = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСтрокОперации.ЧтС) ИЛИ ЗначениеЗаполнено(ВыборкаСтрокОперации.ЧтПо) Тогда
				ОбластьМакета.Параметры.ЧтВремя = Формат(ВыборкаСтрокОперации.ЧтС, "ДФ=H:mm; ДП=0:00") + "-" + Формат(ВыборкаСтрокОперации.ЧтПо, "ДФ=H:mm; ДП=0:00");
			Иначе	
				ОбластьМакета.Параметры.ЧтВремя = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСтрокОперации.ПтС) ИЛИ ЗначениеЗаполнено(ВыборкаСтрокОперации.ПтПо) Тогда
				ОбластьМакета.Параметры.ПтВремя = Формат(ВыборкаСтрокОперации.ПтС, "ДФ=H:mm; ДП=0:00") + "-" + Формат(ВыборкаСтрокОперации.ПтПо, "ДФ=H:mm; ДП=0:00");
			Иначе	
				ОбластьМакета.Параметры.ПтВремя = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСтрокОперации.СбС) ИЛИ ЗначениеЗаполнено(ВыборкаСтрокОперации.СбПо) Тогда
				ОбластьМакета.Параметры.СбВремя = Формат(ВыборкаСтрокОперации.СбС, "ДФ=H:mm; ДП=0:00") + "-" + Формат(ВыборкаСтрокОперации.СбПо, "ДФ=H:mm; ДП=0:00");
			Иначе	
				ОбластьМакета.Параметры.СбВремя = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСтрокОперации.ВсС) ИЛИ ЗначениеЗаполнено(ВыборкаСтрокОперации.ВсПо) Тогда
				ОбластьМакета.Параметры.ВсВремя = Формат(ВыборкаСтрокОперации.ВсС, "ДФ=H:mm; ДП=0:00") + "-" + Формат(ВыборкаСтрокОперации.ВсПо, "ДФ=H:mm; ДП=0:00");
			Иначе	
				ОбластьМакета.Параметры.ВсВремя = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.РаботаПредставление = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокОперации.Номенклатура, 
																		ВыборкаСтрокОперации.Характеристика, ВыборкаСтрокОперации.Артикул);
												
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма = Сумма + ВыборкаСтрокОперации.Сумма;
			Всего = Всего + ВыборкаСтрокОперации.Всего;
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = Всего;
		ОбластьМакета.Параметры.Сумма = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УчетВремени") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УчетВремени", "Учет времени", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "УчетВремени";
	КомандаПечати.Представление = НСтр("ru = 'Учет времени'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли