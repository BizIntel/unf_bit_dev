
&НаКлиенте
Процедура ОткрытьCSVФайл(Команда)
			
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Текст = "Файл выгрузки TeamViewer";
	Фильтр = НСтр(Текст)+"(*.сsv)|*.csv";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл выгрузки";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		СформироватьТаблицу(ДиалогОткрытияФайла.ПолноеИмяФайла);	
	Иначе
		Текст = "ru = ""Файл(ы) не выбран!""; en = ""File(s) not selected!""";
		Предупреждение(НСтр(Текст));
	КонецЕсли;
	
	СтруктураПересчитываемыеПоказатели = Новый Структура;
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьПродолжительность");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьПродолжительностьКОплате");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьСуммуВТЧСоединения");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюСумму");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюПродолжительность");
	
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);
	 
КонецПроцедуры

&НаСервере
Процедура   СформироватьТаблицу(ПутьКФайлу)
	
	Объект.Соединения.Очистить();
	ТаблицаВыгрузки = ПолучитьТаблицуВыгрузки(ПутьКФайлу);
	
	СтруктураДанных = СформироватьСтруктуруДанныхДляПолученияЦеныНоменклатуры(Объект.НоменклатураУдаленногоСопровождения, Объект.Дата);	
   	ЦенаУдаленногоСопровождения = ПолучитьЦенуУслугиУдаленногоСопровождения(СтруктураДанных);
	Объект.Цена = ЦенаУдаленногоСопровождения/60;
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	// Текст запроса для построения временной таблицы
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабВыгрузки.Пользователь,
	               |	ТабВыгрузки.Компьютер,
	               |	ТабВыгрузки.ИД,
	               |	ТабВыгрузки.Группа,
	               |	ТабВыгрузки.Пуск,
	               |	ТабВыгрузки.Окончание,
	               |	ТабВыгрузки.Продолжительность,
	               |	ТабВыгрузки.Расчет,
	               |	ТабВыгрузки.Примечание
	               |ПОМЕСТИТЬ ВТДанные
	               |ИЗ
	               |	&Данные КАК ТабВыгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанные.Пользователь,
	               |	ВТДанные.Компьютер КАК Компьютер,
	               |	ВТДанные.ИД КАК ID,
	               |	ВТДанные.Группа,
	               |	ВТДанные.Пуск КАК НачалоСеанса,
	               |	ВТДанные.Окончание КАК ОкончаниеСеанса,
	               |	ВТДанные.Продолжительность КАК ПродолжительностьВсего,
	               |	ВЫБОР
	               |		КОГДА ВТДанные.Расчет = ЗНАЧЕНИЕ(Перечисление.BizСтатусыСоединенияTeamViewer.СчетВыставлен)
	               |			ТОГДА ВТДанные.Продолжительность
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПродолжительностьКОплате,
	               |	ВЫБОР
	               |		КОГДА ВТДанные.Расчет = ЗНАЧЕНИЕ(Перечисление.BizСтатусыСоединенияTeamViewer.СчетВыставлен)
	               |			ТОГДА ВТДанные.Продолжительность * &ЦенаУдаленногоСопровождения
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Сумма,
	               |	ВТДанные.Расчет КАК СтатусСоединения,
	               |	ВТДанные.Примечание КАК Комментарий,
	               |	BizПользователиВTeamViewer.Владелец КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА СоединенияTeamViewer.ID ЕСТЬ NULL 
	               |				ИЛИ СоединенияTeamViewer.Регистратор = &СсылкаНаТекДок
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЭтоНеУникальнаяЗапись,
	               |	BizIDКонтрагентовTeamViewer.Владелец КАК Контрагент
	               |ИЗ
	               |	ВТДанные КАК ВТДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BizПользователиВTeamViewer КАК BizПользователиВTeamViewer
	               |		ПО ВТДанные.Пользователь = BizПользователиВTeamViewer.Наименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоединенияTeamViewer КАК СоединенияTeamViewer
	               |		ПО ВТДанные.ИД = СоединенияTeamViewer.ID
	               |			И ВТДанные.Пуск = СоединенияTeamViewer.НачалоСеанса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BizIDКонтрагентовTeamViewer КАК BizIDКонтрагентовTeamViewer
	               |		ПО ВТДанные.ИД = BizIDКонтрагентовTeamViewer.Наименование";
	Запрос.УстановитьПараметр("Данные",	ТаблицаВыгрузки);
	Запрос.УстановитьПараметр("СсылкаНаТекДок",	Объект.Ссылка);
	Запрос.УстановитьПараметр("ЦенаУдаленногоСопровождения", ЦенаУдаленногоСопровождения);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	//Мне очень очень стыдно!
	Пока Выборка.Следующий() Цикл
		
		ЭтоНеУникальнаяЗапись = Выборка.ЭтоНеУникальнаяЗапись;
		
		Если ЭтоНеУникальнаяЗапись Тогда
			Объект.Соединения.Очистить();
			Сообщить("В Файле содержаться неуникальные записи!, Sorry");
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
        	Объект.Контрагент = Выборка.Контрагент;	
		Иначе
			Сообщить("Нет сопоставления Контрагент, для ID" + Выборка.ID); 
		КонецЕсли;
		СтрокаТЧСоединения 	= Объект.Соединения.Добавить();
		СтрокаТЧСоединения.Компьютер = Выборка.Компьютер;
		СтрокаТЧСоединения.ID 		 = Выборка.ID;
		СтрокаТЧСоединения.НачалоСеанса = Выборка.НачалоСеанса;
		СтрокаТЧСоединения.ОкончаниеСеанса 	= Выборка.ОкончаниеСеанса;
		СтрокаТЧСоединения.СтатусСоединения = Выборка.СтатусСоединения;
		СтрокаТЧСоединения.ПродолжительностьВсего 	= Выборка.ПродолжительностьВсего;
				
		//////////////////////
		//Опредилить в составе поля примечание (комментарий) литералы ВР! и БО! 
		//В случае если искомые литералы присутствуют в составе комментариев тогда пересчитать показатель ПродолжительностьКОплате
		//Если же нет то взять показатель из результата запроса
		
		ПодстрокаВР = "ВР!";
		ПодстрокаБО = "БО!";
		Примечание = Выборка.Комментарий;
		
		Если Найти(Примечание,ПодстрокаВР)Тогда 
			МассивСтрок = СтрЗаменить(Примечание,"!",Символы.ПС);
			СтрокаТЧСоединения.ПродолжительностьКОплате = Число(СокрЛП(СтрПолучитьСтроку(МассивСтрок,2)));
			
		ИначеЕсли Найти(Примечание,ПодстрокаБО) Тогда	
			СтрокаТЧСоединения.ПродолжительностьКОплате = 0;
			
		Иначе СтрокаТЧСоединения.ПродолжительностьКОплате = Выборка.ПродолжительностьКОплате;
		КонецЕсли;
		
		//////////////////////
	   			
		СтрокаТЧСоединения.Сумма 		= СтрокаТЧСоединения.ПродолжительностьКОплате * ЦенаУдаленногоСопровождения;
		
		РаспределитьСкидкуПоСеансамУдаленногоСопровождения();
		
		
		СтрокаТЧСоединения.Комментарий 	= Выборка.Комментарий;
		СтрокаТЧСоединения.Исполнитель 	= Выборка.Исполнитель;
		
		
	КонецЦикла;

КонецПроцедуры// ДобавитьЗаписьВТЧСоединения()

&НаСервереБезКонтекста
Функция ПолучитьЦенуУслугиУдаленногоСопровождения(СтруктураДанных)

	Возврат УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);	

КонецФункции // ПолучитьЦенуУслугиУдаленногоСопровождения()

&НаСервереБезКонтекста
Функция  ПолучитьТаблицуВыгрузки(ПутьКФайлу)

	ВыгрузкаTW = Новый ЧтениеТекста(ПутьКФайлу);
	Стр = ВыгрузкаTW.ПрочитатьСтроку();
	Стр = ВыгрузкаTW.ПрочитатьСтроку();//Пропустим легенду
	ТаблицаВыгрузки = Новый ТаблицаЗначений; 
	ТаблицаВыгрузки.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаВыгрузки.Колонки.Добавить("Компьютер", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаВыгрузки.Колонки.Добавить("ИД", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаВыгрузки.Колонки.Добавить("Группа", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаВыгрузки.Колонки.Добавить("Пуск", Новый ОписаниеТипов("ДАТА"));
	ТаблицаВыгрузки.Колонки.Добавить("Окончание", Новый ОписаниеТипов("ДАТА"));
	ТаблицаВыгрузки.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("ЧИСЛО"));
	ТаблицаВыгрузки.Колонки.Добавить("Расчет", Новый ОписаниеТипов("ПеречислениеСсылка.BizСтатусыСоединенияTeamViewer"));
	ТаблицаВыгрузки.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));

	Пока Стр <> Неопределено Цикл
		
		Стр = СтрЗаменить(Стр, Символ(34) + Символ(34), Символ(34)); //Символ(34) = " 
		
		СтрТаблициВыгрузки = ТаблицаВыгрузки.Добавить();
		
		ПозицияРазделителя = Найти(Стр,";");                          
		Пользователь = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблициВыгрузки.Пользователь = Пользователь;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Компьютер = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблициВыгрузки.Компьютер = Компьютер;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		ИД = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблициВыгрузки.ИД = ИД;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Группа = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблициВыгрузки.Группа = Группа;
        ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Пуск = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		Попытка
			СтрТаблициВыгрузки.Пуск = СтрокуВДату(Пуск);
		Исключение
			Сообщить("Преобразование к дате");
		КонецПопытки;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Окончание = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		Попытка
			СтрТаблициВыгрузки.Окончание = СтрокуВДату(Окончание);
		Исключение
			Сообщить("Преобразование к дате");
		КонецПопытки;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Продолжительность = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблициВыгрузки.Продолжительность = Число(Продолжительность);
		ПозицияРазделителя = 0;

		//Пропустим сумму выплаты 
		ПозицияРазделителя = Найти(Стр,";");
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		ПозицияРазделителя = 0;
				
		//Пропустим валюту взаиморасчетов (ненужна)
		ПозицияРазделителя = Найти(Стр,";");
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		ПозицияРазделителя = 0;
		
		
		ПозицияРазделителя = Найти(Стр,";");
		Расчет = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		Если Расчет = "Расчет" Тогда
			Расчет = Перечисления.BizСтатусыСоединенияTeamViewer.Расчет;
		ИначеЕсли Расчет = "Счёт выставлен" Тогда
			Расчет = Перечисления.BizСтатусыСоединенияTeamViewer.СчетВыставлен;
		ИначеЕсли Расчет = "Не выставлять счёт" Тогда
			Расчет = Перечисления.BizСтатусыСоединенияTeamViewer.НеВыставлять;
		Иначе
			Сообщить("Ошибка структуры файла CSV");
		КонецЕсли;
		СтрТаблициВыгрузки.Расчет = Расчет;
		ПозицияРазделителя = 0;
		
		Примечание = Сред(Стр, 2, СтрДлина(Стр) - 2);
		СтрТаблициВыгрузки.Примечание = Примечание;
		Стр = ВыгрузкаTW.ПрочитатьСтроку();
	КонецЦикла;	
	ВыгрузкаTW.Закрыть();
	Возврат ТаблицаВыгрузки;
	
КонецФункции // ПолучитьТаблицуВыгрузки()

//2013-11-20 15:12                
//1234567890123456
&НаСервереБезКонтекста
Функция  СтрокуВДату(Строка)

	ГОД 	= Число(Сред(Строка, 1, 4));
	МЕСЯЦ 	= Число(Сред(Строка, 6, 2));
    ДЕНЬ 	= Число(Сред(Строка, 9, 2));
	ЧАС 	= Число(Сред(Строка, 12, 2));
	МИНУТА 	= Число(Сред(Строка, 15, 2));
	Возврат Дата(ГОД, МЕСЯЦ, ДЕНЬ, ЧАС, МИНУТА, 0);
	
КонецФункции // СтрокуВДату()

&НаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДляПолученияЦеныНоменклатуры(Номенклатура, ДатаДок)
	
    СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаОбработки",	ДатаДок);
	СтруктураДанных.Вставить("Номенклатура", 	Номенклатура);
	СтруктураДанных.Вставить("Характеристика",	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
	СтруктураДанных.Вставить("ВидЦен", 			Справочники.ВидыЦен.Оптовая);	
	СтруктураДанных.Вставить("ВалютаДокумента", Константы.НациональнаяВалюта.Получить());
	СтруктураДанных.Вставить("Коэффициент", 1);
	
	Возврат СтруктураДанных;

КонецФункции // СформироватьСтруктуруДанныхДляПолученияЦеныНоменклатуры()

&НаКлиенте
Процедура НоменклатураУдаленногоСопровожденияПриИзменении(Элемент)
	СтруктураДанных = СформироватьСтруктуруДанныхДляПолученияЦеныНоменклатуры(Объект.НоменклатураУдаленногоСопровождения, Объект.Дата);
	ЦенаУдаленногоСопровождения = ПолучитьЦенуУслугиУдаленногоСопровождения(СтруктураДанных);
	
	Если ОБъект.Цена <> ЦенаУдаленногоСопровождения Тогда
		Объект.Цена = ЦенаУдаленногоСопровождения/60;
		ПересчитатьСуммыВТЧСоединения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыВТЧСоединения()
	Для каждого стрСоединения Из Объект.Соединения Цикл
		стрСоединения.Сумма = стрСоединения.ПродолжительностьКОплате * Объект.Цена;		
	КонецЦикла;	
    СтруктураПересчитываемыеПоказатели = Новый Структура;
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьСуммуВТЧСоединения");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюСумму");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюПродолжительность");
	
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);		
КонецПроцедуры // ()

&НаКлиенте
Процедура СоединенияПродолжительностьКОплатеПриИзменении(Элемент)
	ТекСтрокаСоединения = Элементы.Соединения.ТекущиеДанные;
	Если ТекСтрокаСоединения.СтатусСоединения 
	= ПредопределенноеЗначение("Перечисление.BizСтатусыСоединенияTeamViewer.НеВыставлять") 
	Тогда
	
		ТекСтрокаСоединения.ПродолжительностьКОплате = 0;
		ТекСтрокаСоединения.Сумма = 0;
		Возврат;
	
	КонецЕсли;
	Если ТекСтрокаСоединения.ПродолжительностьКОплате > ТекСтрокаСоединения.ПродолжительностьВсего Тогда
		ТекСтрокаСоединения.ПродолжительностьКОплате = ТекСтрокаСоединения.ПродолжительностьВсего;	
	КонецЕсли;
	ТекСтрокаСоединения.Сумма = ТекСтрокаСоединения.ПродолжительностьКОплате * Объект.Цена;
	
	СтруктураПересчитываемыеПоказатели = Новый Структура;
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьПродолжительностьКОплате");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьСуммуВТЧСоединения");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюСумму");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюПродолжительность");
	
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);
КонецПроцедуры

&НаКлиенте
Процедура ВСчетИТСМинПриИзменении(Элемент)
	СтруктураПересчитываемыеПоказатели = Новый Структура("ПересчитатьСуммуВСчетИТС,ПересчитатьИтоговуюПродолжительность");
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);
	ОкруглитьВСчетИТС();
	РаспределитьСкидкуПоСеансамУдаленногоСопровождения();
КонецПроцедуры

&НаСервере
Процедура РаспределитьСкидкуПоСеансамУдаленногоСопровождения()             
	//Определить общую сумму скидки - Скидка по тарифному плану ИТС ПРОФ + Скидка на объем
	ОбщаяСуммаСкидки = Объект.СкидкаЗаОбъемСумма + Объект.ВСчетИТССумма;
	ОбщаяСумма = Объект.СуммаВТЧСоединения;	
	
	Для каждого Строка Из Объект.Соединения Цикл
		Если ОбщаяСумма = 0 Тогда
			КоээфициэнтНормированияСкидки = 0;
		Иначе  КоээфициэнтНормированияСкидки = Строка.Сумма/ОбщаяСумма;	
		КонецЕсли;
		Строка.СуммаСкидки = КоээфициэнтНормированияСкидки*ОбщаяСуммаСкидки;
		Строка.СуммаСоСкидкой = Строка.Сумма-Строка.СуммаСкидки;
	КонецЦикла;

КонецПроцедуры // фв()

&НаКлиенте
Процедура СкидкаЗаОбъемМинПриИзменении(Элемент)
	СтруктураПересчитываемыеПоказатели = Новый Структура("ПересчитатьСуммуУпрСкидки,ПересчитатьИтоговуюПродолжительность");
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);
	ОкруглитьСкидкуЗаОбъем();
	РаспределитьСкидкуПоСеансамУдаленногоСопровождения();
КонецПроцедуры

&НаКлиенте
Процедура Округлить(ОкругляемоеПоле)
	ОкругляемоеПоле = Окр(ОкругляемоеПоле, -1, РежимОкругления.Окр15как20);
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьВСчетИТС()
	//Округлить(Объект.ВСчетИТССумма);
	СтруктураПересчитываемыеПоказатели = Новый Структура;
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюСумму");
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьСкидкуЗаОбъем()
	Округлить(Объект.СкидкаЗаОбъемСумма);
	СтруктураПересчитываемыеПоказатели = Новый Структура;
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюСумму");
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);
	
	Если СтруктураПересчитываемыеПоказатели.Свойство("ПересчитатьПродолжительность") Тогда
		Объект.ПродолжительностьВсегоИтог = Объект.Соединения.Итог("ПродолжительностьВсего");	
	КонецЕсли;
	
	Если СтруктураПересчитываемыеПоказатели.Свойство("ПересчитатьПродолжительностьКОплате") Тогда
		Объект.ПродолжительностьКОплатеИтог = Объект.Соединения.Итог("ПродолжительностьКОплате");	
	КонецЕсли;

	Если СтруктураПересчитываемыеПоказатели.Свойство("ПересчитатьСуммуВТЧСоединения") Тогда
		Объект.СуммаВТЧСоединения = Объект.ПродолжительностьКОплатеИтог * Объект.Цена;	
	КонецЕсли;
	
	Если СтруктураПересчитываемыеПоказатели.Свойство("ПересчитатьСуммуВСчетИТС") Тогда
		Объект.ВСчетИТССумма = Объект.ВСчетИТСМин * Объект.Цена;	
	КонецЕсли;
	
	Если СтруктураПересчитываемыеПоказатели.Свойство("ПересчитатьСуммуУпрСкидки") Тогда
		Объект.СкидкаЗаОбъемСумма = Объект.СкидкаЗаОбъемМин * Объект.Цена;	
	КонецЕсли;
			
	Если СтруктураПересчитываемыеПоказатели.Свойство("ПересчитатьИтоговуюСумму") Тогда
		Объект.СуммаВДокументе = Объект.СуммаВТЧСоединения - Объект.СкидкаЗаОбъемСумма - Объект.ВСчетИТССумма;	
	КонецЕсли;
	
	Если СтруктураПересчитываемыеПоказатели.Свойство("ПересчитатьИтоговуюПродолжительность") Тогда
		Объект.ПродолжительностьВДокументе = Объект.ПродолжительностьКОплатеИтог - Объект.СкидкаЗаОбъемМин - Объект.ВСчетИТСМин;	
	КонецЕсли;
	
	Если СтруктураПересчитываемыеПоказатели.Свойство("ВложеннаяСтруктура") Тогда
		ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели.ВложеннаяСтруктура);
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьИтоговыеПоказатели()

&НаКлиенте
Процедура СоединенияПослеУдаления(Элемент)
	СтруктураПересчитываемыеПоказатели = Новый Структура;
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьПродолжительность");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьПродолжительностьКОплате");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьСуммуВТЧСоединения");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюСумму");
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюПродолжительность");
	
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);
КонецПроцедуры

&НаКлиенте
Процедура СоединенияПродолжительностьВсегоПриИзменении(Элемент)
	
	СтруктураПересчитываемыеПоказатели = Новый Структура;
	СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьПродолжительность");		
	ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);
	
КонецПроцедуры

&НаКлиенте
Процедура СоединенияСтатусСоединенияПриИзменении(Элемент)
	ТекСтрокаСоединения = Элементы.Соединения.ТекущиеДанные;
	Если ТекСтрокаСоединения.СтатусСоединения 
	= ПредопределенноеЗначение("Перечисление.BizСтатусыСоединенияTeamViewer.НеВыставлять")
	Тогда
		ТекСтрокаСоединения.ПродолжительностьКОплате = 0;
		ТекСтрокаСоединения.Сумма = 0;
		СтруктураПересчитываемыеПоказатели = Новый Структура;
		СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьПродолжительностьКОплате");
		СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьСуммуВТЧСоединения");
		СтруктураПересчитываемыеПоказатели.Вставить("ПересчитатьИтоговуюСумму");
		ПересчитатьИтоговыеПоказатели(СтруктураПересчитываемыеПоказатели);			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Почта(Команда)
	
	Попытка
        Outlook = Новый COMОбъект("Outlook.Application");
        ЕстьОшибка = 0;
    Исключение
        Сообщить("Не удалось создать письмо");
        ЕстьОшибка = 1;
	КонецПопытки;
	
	Письмо = Outlook.CreeateItem(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	ПересчитатьСуммыВТЧСоединения();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации)  Тогда
	  Объект.ВидОперации = Перечисления.бизВидыСопровожденияКлиентов.УдаленноеСопровождение;
	КонецЕсли;
КонецПроцедуры


