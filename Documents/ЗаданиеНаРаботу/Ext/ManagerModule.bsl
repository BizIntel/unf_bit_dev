#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ДляПроведения

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЗаданиеНаРаботу, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ЗаданиеНаРаботуРаботы.ДатаНачала КАК Период,
	|	ВЫБОР
	|		КОГДА ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЗаданиеНаРаботуРаботы.Заказчик
	|		КОГДА ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ЗаданиеНаРаботуРаботы.Заказчик.Владелец
	|		КОГДА ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ЗаданиеНаРаботуРаботы.Заказчик.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		КОГДА ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ЗаданиеНаРаботуРаботы.Заказчик
	|		КОГДА ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ЗаданиеНаРаботуРаботы.Заказчик.Договор
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Справочник.Контрагенты
	|				ИЛИ ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОГДА ЗаданиеНаРаботуРаботы.Заказчик ССЫЛКА Документ.ЗаказПокупателя
	|			ТОГДА ЗаданиеНаРаботуРаботы.Заказчик
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ЗаданиеНаРаботуРаботы.Ссылка.Сотрудник,
	|	ЗаданиеНаРаботуРаботы.Номенклатура,
	|	ЗаданиеНаРаботуРаботы.Характеристика,
	|	ЗаданиеНаРаботуРаботы.ВидРабот,
	|	ЗаданиеНаРаботуРаботы.Трудоемкость КАК ЗагрузкаПлан,
	|	ЗаданиеНаРаботуРаботы.Сумма КАК СуммаПлан,
	|	ЗаданиеНаРаботуРаботы.Ссылка.СтруктурнаяЕдиница,
	|	ЗаданиеНаРаботуРаботы.ДатаНачала КАК ВремяНачала,
	|	ЗаданиеНаРаботуРаботы.ДатаОкончания КАК ВремяОкончания,
	|	ЗаданиеНаРаботуРаботы.Комментарий
	|ИЗ
	|	Документ.ЗаданиеНаРаботу.Работы КАК ЗаданиеНаРаботуРаботы
	|ГДЕ
	|	ЗаданиеНаРаботуРаботы.Ссылка = &Ссылка
	|	И ЗаданиеНаРаботуРаботы.Трудоемкость > 0";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаданиеНаРаботу);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Результат = Запрос.Выполнить();
	ТаблицаЗаданияНаРаботу = Результат.Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаданияНаРаботу", ТаблицаЗаданияНаРаботу);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ИнтерфейсПечати

// Функция формирует печатную форму документа по указанному макету.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент в который будет выводится печатная
//				   форма.
//  ИмяМакета    - Строка, имя макета печатной формы.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета = "")
	
	ТабличныйДокумент 	= Новый ТабличныйДокумент;
	ПервыйДокумент 		= Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		
		Запрос.УстановитьПараметр("Организация", 		УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(ТекущийДокумент.Организация));
		Запрос.УстановитьПараметр("ТекущийДокумент", 	ТекущийДокумент);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаданиеНаРаботу.Ссылка,
		|	ЗаданиеНаРаботу.ВерсияДанных,
		|	ЗаданиеНаРаботу.ПометкаУдаления,
		|	ЗаданиеНаРаботу.Номер,
		|	ЗаданиеНаРаботу.Дата,
		|	ЗаданиеНаРаботу.Проведен,
		|	ЗаданиеНаРаботу.Организация,
		|	ЗаданиеНаРаботу.ВидОперации,
		|	ЗаданиеНаРаботу.ВидРабот КАК ВидРабот,
		|	ЗаданиеНаРаботу.ВидЦен,
		|	ЗаданиеНаРаботу.Сотрудник КАК Сотрудник,
		|	ЗаданиеНаРаботу.Сотрудник.Код КАК ТабельныйНомер,
		|	ЗаданиеНаРаботу.СтруктурнаяЕдиница КАК Подразделение,
		|	СотрудникиСрезПоследних.Должность КАК Должность,
		|	ЗаданиеНаРаботу.СуммаДокумента,
		|	ЗаданиеНаРаботу.ПоложениеВидаРабот,
		|	ЗаданиеНаРаботу.Событие,
		|	ЗаданиеНаРаботу.Комментарий,
		|	ЗаданиеНаРаботу.Автор
		|ИЗ
		|	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники.СрезПоследних(, ) КАК СотрудникиСрезПоследних
		|		ПО ЗаданиеНаРаботу.Сотрудник = СотрудникиСрезПоследних.Сотрудник
		|			И (&Организация = СотрудникиСрезПоследних.Организация)
		|ГДЕ
		|	ЗаданиеНаРаботу.Ссылка = &ТекущийДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаРаботуРаботы.Ссылка,
		|	ЗаданиеНаРаботуРаботы.НомерСтроки КАК НомерСтроки,
		|	ЗаданиеНаРаботуРаботы.ВидРабот,
		|	ЗаданиеНаРаботуРаботы.Заказчик,
		|	ЗаданиеНаРаботуРаботы.Номенклатура,
		|	ЗаданиеНаРаботуРаботы.Характеристика,
		|	ЗаданиеНаРаботуРаботы.ДатаНачала КАК ДатаНачала,
		|	ЗаданиеНаРаботуРаботы.ДатаОкончания КАК ДатаОкончания,
		|	ЗаданиеНаРаботуРаботы.Трудоемкость КАК ДлительностьВЧасах,
		|	ЗаданиеНаРаботуРаботы.Цена,
		|	ЗаданиеНаРаботуРаботы.Сумма КАК Сумма,
		|	ЗаданиеНаРаботуРаботы.Комментарий КАК ОписаниеЗадания
		|ИЗ
		|	Документ.ЗаданиеНаРаботу.Работы КАК ЗаданиеНаРаботуРаботы
		|ГДЕ
		|	ЗаданиеНаРаботуРаботы.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаданиеНаРаботуРаботы.ДатаНачала,
		|	НомерСтроки";
		
		РезультатЗапроса	= Запрос.ВыполнитьПакет();
		Шапка 				= РезультатЗапроса[0].Выбрать();
		Шапка.Следующий();
		
		ВыборкаРаботы 		= РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаданиеНаРаботу_УнифицированнаяФорма";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаданиеНаРаботу.ПФ_MXL_Задание");
		
		ОбластьШапка		= Макет.ПолучитьОбласть("Шапка");
		ОбластьШапкаТаблицы	= Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьДетали		= Макет.ПолучитьОбласть("Детали");
		ОбластьИтого		= Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал		= Макет.ПолучитьОбласть("Подвал");
		
		ОбластьШапка.Параметры.Заполнить(Шапка);
		
		ОбластьШапка.Параметры.НомерДата = "№" + Шапка.Номер + " от " + Формат(Шапка.Дата, "ДЛФ=DD");
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата, ,);
		ОбластьШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ОбластьШапкаТаблицы.Параметры.ТекстВидаЗадания = "Задание является" + ?(Шапка.ВидОперации = Перечисления.ВидыОперацийЗаданиеНаРаботу.Внешнее, " внешним", " внутренним");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ИтогТрудоемкость = 0;
		
		Пока ВыборкаРаботы.Следующий() Цикл
			
			ОбластьДетали.Параметры.Заполнить(ВыборкаРаботы);
			ОбластьДетали.Параметры.Начало = Формат(ВыборкаРаботы.ДатаНачала, "ДФ='dd.MM.yyyy  HH:mm'");
			ОбластьДетали.Параметры.Окончание = Формат(ВыборкаРаботы.ДатаОкончания, "ДФ='dd.MM.yyyy  HH:mm'");
			
			// Если вид работ выведен в ТЧ тогда сформируем описание 
			Если Шапка.ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				
				ОбластьДетали.Параметры.ОписаниеЗадания = "[" + ВыборкаРаботы.ВидРабот + "] " + ВыборкаРаботы.ОписаниеЗадания;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьДетали);
			ИтогТрудоемкость = ИтогТрудоемкость + ВыборкаРаботы.ДлительностьВЧасах;
			
		КонецЦикла;
	
		ОбластьИтого.Параметры.Заполнить(Шапка);
		ОбластьИтого.Параметры.ДлительностьВЧасах = ИтогТрудоемкость;
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		ОбластьПодвал.Параметры.РасшифровкаОтветственного = "" + Шапка.Сотрудник + ?(ЗначениеЗаполнено(Шапка.Должность), ", " + Шапка.Должность, "");
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаданияНаРаботу") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаданияНаРаботу", "Задание на работу", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры  //Печать()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаданияНаРаботу";
	КомандаПечати.Представление = НСтр("ru = 'Задание на работу'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсКалендаряСотрудника

// Функция определяет пиктограмму для элемента записи календаря
//
// Параметры:
//  ЗаданиеНаРаботу	 - ДокументСсылка.ЗаданиеНаРаботу	 - задание, для записи календаря которого подбирается картинка
// 
// Возвращаемое значение:
//  Картинка - пиктограмма записи календаря
//
Функция КартинкаЗаписиКалендаря(ЗаданиеНаРаботу) Экспорт
	
	Возврат БиблиотекаКартинок.РазделРаботы;
	
КонецФункции

// Функция определяет цвет текста для элемента записи календаря
//
// Параметры:
//  ЗаданиеНаРаботу	 - ДокументСсылка.ЗаданиеНаРаботу	 - задание, для записи календаря которого подбирается цвет
// 
// Возвращаемое значение:
//  Цвет - цвет текста записи календаря
//
Функция ЦветТекстаЗаписиКалендаря(ЗаданиеНаРаботу) Экспорт
	
	ЦветСостояния = ЗаданиеНаРаботу.Состояние.Цвет.Получить();
	Если ЦветСостояния = Неопределено Тогда
		ЦветСостояния = Новый Цвет;
	КонецЕсли;
	
	Возврат ЦветСостояния;
	
КонецФункции

// Процедура заполняет таблицу описаний расширенного ввода записи календаря
//
// Параметры:
//  ТаблицаОписаний	 - ТаблицаЗначений	 - описание колонок см. Справочник.ЗаписиКалендаряСотрудника.ПриЗаполненииРасширенногоВводаЗаписиКалендаря()
//
Процедура ПриЗаполненииРасширенногоВводаЗаписиКалендаря(ТаблицаОписаний) Экспорт
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.ЗаданиеНаРаботу.ФормаОбъекта";
	НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", Перечисления.ВидыОперацийЗаданиеНаРаботу.Внутреннее));
	НоваяСтрока.Представление = НСтр("ru='Задание на работу: внутреннее'");
	
	НоваяСтрока = ТаблицаОписаний.Добавить();
	НоваяСтрока.ИмяФормы = "Документ.ЗаданиеНаРаботу.ФормаОбъекта";
	НоваяСтрока.ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВидОперации", Перечисления.ВидыОперацийЗаданиеНаРаботу.Внешнее));
	НоваяСтрока.Представление = НСтр("ru='Задание на работу: внешнее'");
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсРабочегоПроцесса

Процедура СоставПолейЗаполненияДляРабочегоПроцесса(ТаблицаОписанияПолей, знач ТипДействия) Экспорт
	
	ЗаданиеМД = Метаданные.Документы.ЗаданиеНаРаботу;
	
	НовоеОписание = ТаблицаОписанияПолей.Добавить();
	НовоеОписание.ИмяРеквизита				= ЗаданиеМД.Реквизиты.ВидОперации.Имя;
	НовоеОписание.Заголовок					= ЗаданиеМД.Реквизиты.ВидОперации.Синоним;
	НовоеОписание.ВариантЗаполнения			= "Указанный";
	НовоеОписание.ТипЗначения				= ЗаданиеМД.Реквизиты.ВидОперации.Тип;
	НовоеОписание.Значение					= Перечисления.ВидыОперацийЗаданиеНаРаботу.Внутреннее;
	НовоеОписание.ОбязательноеЗаполнение	= Истина;
	
	НовоеОписание = ТаблицаОписанияПолей.Добавить();
	НовоеОписание.ИмяРеквизита				= ЗаданиеМД.Реквизиты.Состояние.Имя;
	НовоеОписание.Заголовок					= ЗаданиеМД.Реквизиты.Состояние.Синоним;
	НовоеОписание.ВариантЗаполнения			= "Указанный";
	НовоеОписание.ТипЗначения				= Новый ОписаниеТипов("СправочникСсылка.СостоянияСобытий");
	НовоеОписание.Значение					= Справочники.СостоянияСобытий.Запланировано;
	НовоеОписание.ОбязательноеЗаполнение	= Истина;
	
	НовоеОписание = ТаблицаОписанияПолей.Добавить();
	НовоеОписание.ИмяРеквизита				= ЗаданиеМД.Реквизиты.Сотрудник.Имя;
	НовоеОписание.Заголовок					= ЗаданиеМД.Реквизиты.Сотрудник.Синоним;
	НовоеОписание.ВариантЗаполнения			= "ИзОснования";
	НовоеОписание.ТипЗначения				= ЗаданиеМД.Реквизиты.Сотрудник.Тип;
	НовоеОписание.ОбязательноеЗаполнение	= ЗаданиеМД.Реквизиты.Сотрудник.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку;
	
	НовоеОписание = ТаблицаОписанияПолей.Добавить();
	НовоеОписание.ИмяРеквизита				= ЗаданиеМД.Реквизиты.КалендарьСотрудника.Имя;
	НовоеОписание.Заголовок					= ЗаданиеМД.Реквизиты.КалендарьСотрудника.Синоним;
	НовоеОписание.ВариантЗаполнения			= "ИзОснования";
	НовоеОписание.ТипЗначения				= ЗаданиеМД.Реквизиты.КалендарьСотрудника.Тип;
	НовоеОписание.ОбязательноеЗаполнение	= ЗаданиеМД.Реквизиты.КалендарьСотрудника.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита			= ЗаданиеМД.Реквизиты.Организация.Имя;
		НовоеОписание.Заголовок				= ЗаданиеМД.Реквизиты.Организация.Синоним;
		НовоеОписание.ВариантЗаполнения		= "ИзОснования";
		НовоеОписание.ТипЗначения			= ЗаданиеМД.Реквизиты.Организация.Тип;
		НовоеОписание.ОбязательноеЗаполнение= ЗаданиеМД.Реквизиты.Организация.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		НовоеОписание = ТаблицаОписанияПолей.Добавить();
		НовоеОписание.ИмяРеквизита			= ЗаданиеМД.Реквизиты.СтруктурнаяЕдиница.Имя;
		НовоеОписание.Заголовок				= ЗаданиеМД.Реквизиты.СтруктурнаяЕдиница.Синоним;
		НовоеОписание.ВариантЗаполнения		= "ИзОснования";
		НовоеОписание.ТипЗначения			= ЗаданиеМД.Реквизиты.СтруктурнаяЕдиница.Тип;
		НовоеОписание.ОбязательноеЗаполнение= ЗаданиеМД.Реквизиты.СтруктурнаяЕдиница.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ТипДействия = Неопределено) Экспорт
	
	НедоступныеРеквизиты = Новый Массив;
	
	НедоступныеРеквизиты.Добавить("ПоложениеВидаРабот");
	
	Возврат НедоступныеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ГруппаДел	= НСтр("ru = 'Задания на работу'");
	ИмяФормы	= "Документ.ЗаданиеНаРаботу.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаданиеНаРаботу)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ЗаданияНаРаботу.ДатаОкончания < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|					И ЗаданияНаРаботу.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
		|					И ЗаданияНаРаботу.Ссылка.Сотрудник В (&СотрудникиПользователя)
		|				ТОГДА ЗаданияНаРаботу.Ссылка
		|		КОНЕЦ) КАК ЗаданияНаРаботуПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ЗаданияНаРаботу.ДатаНачала <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|					И ЗаданияНаРаботу.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|					И ЗаданияНаРаботу.Ссылка.Сотрудник В (&СотрудникиПользователя)
		|				ТОГДА ЗаданияНаРаботу.Ссылка
		|		КОНЕЦ) КАК ЗаданияНаРаботуНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ЗаданияНаРаботу.Ссылка.Сотрудник В (&СотрудникиПользователя)
		|				ТОГДА ЗаданияНаРаботу.Ссылка
		|		КОНЕЦ) КАК ЗаданияНаРаботуВРаботе,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ЗаданияНаРаботу.Ссылка.Автор = &Пользователь
		|					И НЕ ЗаданияНаРаботу.Ссылка.Сотрудник В (&СотрудникиПользователя)
		|				ТОГДА ЗаданияНаРаботу.Ссылка
		|		КОНЕЦ) КАК ЗаданияНаРаботуНаКонтроле
		|ИЗ
		|	Документ.ЗаданиеНаРаботу.Работы КАК ЗаданияНаРаботу
		|ГДЕ
		|	ЗаданияНаРаботу.Ссылка.Проведен
		|	И ЗаданияНаРаботу.Ссылка.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияСобытий.Завершено)
		|	И ЗаданияНаРаботу.Ссылка.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияСобытий.Отменено)";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗаданияНаРаботуПросроченоВыполнение";
	Дело.ЕстьДела		= ДанныеДел.ЗаданияНаРаботуПросроченоВыполнение > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просроченные'");
	Дело.Количество		= ДанныеДел.ЗаданияНаРаботуПросроченоВыполнение;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение", "ПросроченоВыполнение");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаданияНаРаботуНаСегодня";
	Дело.ЕстьДела		= ДанныеДел.ЗаданияНаРаботуНаСегодня > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На сегодня'");
	Дело.Количество		= ДанныеДел.ЗаданияНаРаботуНаСегодня;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаданияНаРаботуВРаботе";
	Дело.ЕстьДела		= ДанныеДел.ЗаданияНаРаботуВРаботе > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'В работе'");
	Дело.Количество		= ДанныеДел.ЗаданияНаРаботуВРаботе;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ВРаботе", "ВРаботе");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаданияНаРаботуНаКонтроле";
	Дело.ЕстьДела		= ДанныеДел.ЗаданияНаРаботуНаКонтроле > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На контроле'");
	Дело.Количество		= ДанныеДел.ЗаданияНаРаботуНаКонтроле;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаКонтроле", "НаКонтроле");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли