
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	Если Объект.Работы.Количество() = 0 Тогда
		
		НоваяСтрока = Объект.Работы.Добавить();
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
			И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("Заказчик")
				И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Заказчик) Тогда
				НоваяСтрока.Заказчик = Параметры.ЗначенияЗаполнения.Заказчик;
			КонецЕсли;
			Если Параметры.Свойство("ВремяНачала") Тогда 
				НоваяСтрока.ДатаНачала = Параметры.ВремяНачала;
			КонецЕсли;
			Если Параметры.Свойство("ВремяОкончания") Тогда 
				НоваяСтрока.ДатаОкончания = Параметры.ВремяОкончания;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Работа Из Объект.Работы Цикл
		РассчитатьПродолжительность(Работа);
	КонецЦикла;
	
	Если Параметры.Свойство("Сотрудник") Тогда // для заполнения из менеджера контактов.
		Объект.Сотрудник = Параметры.Сотрудник;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = Объект.Работы.Количество() > 1;
	
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.НачалоВремя, , '00010101000000', '00010101230000');
	СобытияУНФКлиентСервер.ЗаполнитьСписокВыбораВремени(Элементы.ОкончаниеВремя, , '00010101000000', '00010101230000');
	
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Работы");
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ДополнительныеРеквизиты", , "КомандыОбычные");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Работы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Для Каждого Работа Из Объект.Работы Цикл
		РассчитатьПродолжительность(Работа);
	КонецЦикла;
	
	// УНФ.КалендарьСотрудника
	Оповестить("Запись_ИсточникЗаписейКалендаряСотрудника");
	// Конец УНФ.КалендарьСотрудника
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Для Каждого СтрокаТЧ Из Объект.Работы Цикл
		СтрокаТЧ.Цена = 0;
		СтрокаТЧ.Сумма = 0;
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ДатаОбработки",	Объект.Дата);
	СтруктураДанные.Вставить("Номенклатура",	Объект.ВидРабот);
	СтруктураДанные.Вставить("ВидЦен",			Объект.ВидЦен);
	
	Цена = ПолучитьЦену(СтруктураДанные).Цена;
	
	Для каждого СтрокаТЧ Из Объект.Работы Цикл
		СтрокаТЧ.Цена = Цена;
		РассчитатьСумму(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;
	
	СтруктураДанных.Вставить("Дата",				Объект.Дата);
	СтруктураДанных.Вставить("Организация",			Компания);
	СтруктураДанных.Вставить("ВидЦен",				Объект.ВидЦен);
	
	Если Объект.ПоложениеВидаРабот = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		Объект.ВидРабот);
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	Иначе
		
		Для Каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Если Объект.ПоложениеВидаРабот = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		
		Цена = ТабличнаяЧастьДокумента[0].Цена;
		
		Для Каждого СтрокаТЧ Из Объект.Работы Цикл
			СтрокаТЧ.Цена = Цена;
			РассчитатьСумму(СтрокаТЧ);
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ВидРабот", СтрокаТЧ.Номенклатура);
			
			РезультатПоиска = Объект.Работы.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаРезультат Из РезультатПоиска Цикл
				СтрокаРезультат.Цена = СтрокаТЧ.Цена;
				РассчитатьСумму(СтрокаРезультат);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСтрокаНоменклатураПриИзменении(Элемент)
	
	Если Объект.Работы.Количество() <> 0 Тогда
		Объект.Работы[0].Характеристика = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСтрокаХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если Объект.Работы.Количество() <> 0 Тогда
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Работы[0].Номенклатура));
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РаботыСтрокаХарактеристикаНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСтрокаХарактеристикаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		ИЛИ ТипЗнч(Результат) <> Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() <> 0 Тогда
		Объект.Работы[0].Характеристика = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботы

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Объект.ПоложениеВидаРабот = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
			
			ТекущаяСтрока = Элементы.Работы.ТекущиеДанные;
			
			СтруктураДанные = Новый Структура();
			СтруктураДанные.Вставить("ДатаОбработки",	Объект.Дата);
			СтруктураДанные.Вставить("Номенклатура",	Объект.ВидРабот);
			СтруктураДанные.Вставить("ВидЦен",			Объект.ВидЦен);
			
			ТекущаяСтрока.Цена = ПолучитьЦену(СтруктураДанные).Цена;
			
			РассчитатьСумму(ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНачалоВремяПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	РассчитатьТрудоемкость(ДанныеСтроки);
	РассчитатьПродолжительность(ДанныеСтроки);
	РассчитатьСумму(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНачалоВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	ВыбранноеЗначение = НачалоДня(ДанныеСтроки.ДатаНачала) + (ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыНачалоДатаПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	РассчитатьТрудоемкость(ДанныеСтроки);
	РассчитатьПродолжительность(ДанныеСтроки);
	РассчитатьСумму(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОкончаниеВремяПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	РассчитатьТрудоемкость(ДанныеСтроки);
	РассчитатьПродолжительность(ДанныеСтроки);
	РассчитатьСумму(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОкончаниеВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	ВыбранноеЗначение = НачалоДня(ДанныеСтроки.ДатаОкончания) + (ВыбранноеЗначение - НачалоДня(ВыбранноеЗначение));
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОкончаниеДатаПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	РассчитатьТрудоемкость(ДанныеСтроки);
	РассчитатьПродолжительность(ДанныеСтроки);
	РассчитатьСумму(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПродолжительностьПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	РассчитыватьТрудоемкостьАвтоматически = Не ЗначениеЗаполнено(ДанныеСтроки.Трудоемкость)
		Или ДанныеСтроки.Трудоемкость = (ДанныеСтроки.ДатаОкончания - ДанныеСтроки.ДатаНачала) / 3600;
	
	ДанныеСтроки.ДатаОкончания = НачалоМинуты(ДанныеСтроки.ДатаНачала + ДанныеСтроки.Продолжительность * 3600);
	
	Если РассчитыватьТрудоемкостьАвтоматически Тогда
		ДанныеСтроки.Трудоемкость = (ДанныеСтроки.ДатаОкончания - ДанныеСтроки.ДатаНачала) / 3600;
	КонецЕсли;
	
	РассчитатьСумму(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыТрудоемкостьПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	РассчитатьСумму(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВидРаботПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ДатаОбработки",	ДанныеСтроки.ДатаНачала);
	СтруктураДанные.Вставить("Номенклатура",	ДанныеСтроки.ВидРабот);
	СтруктураДанные.Вставить("ВидЦен",			Объект.ВидЦен);
	
	ДанныеСтроки.Цена = ПолучитьЦену(СтруктураДанные).Цена;
	
	РассчитатьСумму(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	РассчитатьСумму(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	ДанныеСтроки.Цена = ?(ДанныеСтроки.Трудоемкость = 0, 0, ДанныеСтроки.Сумма / ДанныеСтроки.Трудоемкость);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыЗаказчикОбработкаВыбораВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбранныйДоговор = Неопределено;
		
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбораСКонтрагентом",,,,,, Новый ОписаниеОповещения("РаботыЗаказчикОбработкаВыбораВыбораЗавершение", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыЗаказчикОбработкаВыбораВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбранныйДоговор = Результат;
	
	Если ТипЗнч(ВыбранныйДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")Тогда
		Если Элементы.РедактироватьСписком.Пометка Тогда
			Элементы.Работы.ТекущиеДанные.Заказчик = ВыбранныйДоговор;
		ИначеЕсли Объект.Работы.Количество() > 0 Тогда
			Объект.Работы[0].Заказчик = ВыбранныйДоговор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ДанныеСтроки = Элементы.Работы.ТекущиеДанные;
	Иначе
		ДанныеСтроки = Объект.Работы[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Текст, Заголовок", ДанныеСтроки.Комментарий, "Редактирование комментария");
	ВозвращаемыйКомментарий = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.РедактированиеТекста", ПараметрыФормы,,,,, Новый ОписаниеОповещения("РаботыКомментарийНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ДанныеСтроки))); 
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКомментарийНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	ВозвращаемыйКомментарий = Результат;
	
	Если ТипЗнч(ВозвращаемыйКомментарий) = Тип("Строка") Тогда
		
		Если ТекущиеДанные.Комментарий <> ВозвращаемыйКомментарий Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		ТекущиеДанные.Комментарий = ВозвращаемыйКомментарий;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	Если Элементы.РедактироватьСписком.Пометка И Объект.Работы.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокумента(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеВидаРаботВЗаданииНаРаботу", Объект.ПоложениеВидаРабот);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаДокумента", СтруктураПараметров,,,,, Новый ОписаниеОповещения("НастройкаДокументаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		
		Объект.ПоложениеВидаРабот = Результат.ПоложениеВидаРаботВЗаданииНаРаботу;
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Пока Объект.Работы.Количество() > 1 Цикл
		Объект.Работы.Удалить(Объект.Работы.Количество()-1);
	КонецЦикла;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  СтруктураРеквизитов - Структура реквизитов, необходимых при пересчете
//  ТабличнаяЧастьДокумента - ДанныеФормыСтруктура, содержит табличную часть
//                 документа.
//
&НаСервереБезКонтекста
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента)
	
	// 1. Отбор по номенклатуре
	МассивНоменклатуры = Новый Массив;
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		МассивНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
		
	КонецЦикла;
	
	// 2. Заполним цены.
	ВидЦенПараметр = СтруктураДанных.ВидЦен;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОбработки,
	|			ВидЦен = &ВидЦен
	|				И Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Актуальность";
		
	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТабЧасти.Номенклатура);
		
		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			
			Цена = РезультатПоиска[0].Цена;
			Если Цена = 0 Тогда
				
				СтрокаТабЧасти.Цена = Цена;
				
			Иначе
				
				ПорядокОкругления = РезультатПоиска[0].ПорядокОкругления;
				ОкруглятьВБольшуюСторону = РезультатПоиска[0].ОкруглятьВБольшуюСторону;
				
				СтрокаТабЧасти.Цена = УправлениеНебольшойФирмойСервер.ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону); 
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТабЧасти.Цена = 0;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦен()

&НаСервереБезКонтекста
Функция ПолучитьЦену(СтруктураДанные)
	
	СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураДанные.Вставить("СуммаВключаетНДС", СтруктураДанные.ВидЦен.ЦенаВключаетНДС);
	СтруктураДанные.Вставить("ВалютаДокумента", СтруктураДанные.ВидЦен.ВалютаЦены);
	СтруктураДанные.Вставить("Коэффициент", 1);
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатуры) Тогда
		СтруктураДанные.Вставить("Цена", УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные));
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()	

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьТрудоемкость(ДанныеСтроки)
	
	РассчитыватьТрудоемкостьАвтоматически = Не ЗначениеЗаполнено(ДанныеСтроки.Трудоемкость)
		Или ДанныеСтроки.Трудоемкость = ДанныеСтроки.Продолжительность;
		
	Если РассчитыватьТрудоемкостьАвтоматически Тогда
		ДанныеСтроки.Трудоемкость = (ДанныеСтроки.ДатаОкончания - ДанныеСтроки.ДатаНачала) / 3600;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПродолжительность(ДанныеСтроки)
	
	ДанныеСтроки.Продолжительность = (ДанныеСтроки.ДатаОкончания - ДанныеСтроки.ДатаНачала) / 3600;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСумму(ДанныеСтроки)
	
	ДанныеСтроки.Сумма = ДанныеСтроки.Цена * ДанныеСтроки.Трудоемкость;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ВидРаботВШапке			= Объект.ПоложениеВидаРабот = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке");
	ВнешнееЗадание			= Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаданиеНаРаботу.Внешнее");
	РедактироватьСписком	= Элементы.РедактироватьСписком.Пометка;
	
	Элементы.ВидРаботСписком.Видимость			= ВидРаботВШапке;
	Элементы.ВидРабот.Видимость					= ВидРаботВШапке;
	Элементы.РаботыВидРабот.Видимость			= Не ВидРаботВШапке;
	Элементы.РаботыСтрокаВидРабот.Видимость		= Не ВидРаботВШапке;
	Элементы.Списком.Видимость					= РедактироватьСписком;
	Элементы.ОднаСтрока.Видимость				= Не РедактироватьСписком;
	
	Элементы.ВидЦен.Видимость					= ВнешнееЗадание;
	Элементы.Стоимость.Видимость				= ВнешнееЗадание;
	Элементы.РаботыЗаказчик.Видимость			= ВнешнееЗадание;
	Элементы.РаботыНоменклатура.Видимость		= ВнешнееЗадание;
	Элементы.РаботыХарактеристика.Видимость		= ВнешнееЗадание;
	
	Элементы.РаботыСтрокаЗаказчик.Видимость		= ВнешнееЗадание;
	Элементы.РаботыСтрокаНоменклатура.Видимость	= ВнешнееЗадание;
	Элементы.РаботыСтрокаХарактеристика.Видимость= ВнешнееЗадание;
	
	Элементы.РаботыЦена.Видимость				= ВнешнееЗадание;
	Элементы.РаботыСумма.Видимость				= ВнешнееЗадание;
	
	Элементы.РаботыИтогСумма.Видимость			= ВнешнееЗадание;
	// Для неполных прав нет элемента формы
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидЦенВалютаЦены", "Видимость", ВнешнееЗадание);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура РаботыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВставитьСтроки(Команда)
	
	ВставитьСтроки("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Если КоличествоВставленных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// При включении на форме списка первая строка пустая; е
	// сли произошла вставка строк и первая строка не заполнена - удаляем ее
	Если Объект[ИмяТЧ].Количество() = КоличествоВставленных + 1 Тогда
		Если НЕ ЗначениеЗаполнено(Объект[ИмяТЧ][0].Номенклатура) Тогда
			Объект[ИмяТЧ].Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
