
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		Магазин = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	КонецЕсли;
	
	Документы.ТТНВходящаяЕГАИС.УстановитьУсловноеОформлениеСтатусаОбработки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УстановитьОтборДинамическихСписковПриИзмененииСервер(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокЗапросовЕГАИС" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМагазинПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковПриИзмененииКлиент();
	УстановитьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоступление(Команда)
	
	ТоварноТранспортнаяНакладнаяЕГАИС = Элементы.Список.ТекущаяСтрока;
	
	Если НЕ ЗначениеЗаполнено(ТоварноТранспортнаяНакладнаяЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДанныеТТН(ТоварноТранспортнаяНакладнаяЕГАИС);
	
	ПереданОтветВЕГАИС = Ложь;
	ПереданОтказВЕГАИС = Ложь;
	ТолькоПоиск        = Ложь;
	
	Если ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения")
		ИЛИ ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктПодтверждения")
		ИЛИ ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений")
		ИЛИ ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктРасхождений") Тогда
		ПереданОтветВЕГАИС = Истина;
		ТолькоПоиск        = Истина;
	ИначеЕсли ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа")
		ИЛИ ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПередаетсяАктОтказа") Тогда
		ПереданОтказВЕГАИС = Истина;
		ТолькоПоиск        = Истина;
	КонецЕсли;
	
	ПоступлениеТоваров = СоздатьНайтиПоступлениеНаСервере(ТоварноТранспортнаяНакладнаяЕГАИС, ТолькоПоиск);
	Если ПоступлениеТоваров = Неопределено И ТолькоПоиск Тогда
		Если ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения")
			ИЛИ ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктРасхождений") Тогда
			СтрокаСообщения = НСтр("ru = 'Накладная уже подветждена актом, создание не возможно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Возврат;
		ИначеЕсли ДополнительныеПараметры.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа") Тогда
			СтрокаСообщения = НСтр("ru = 'В ЕГАИС уже передан отказ от накладной, , создание не возможно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Возврат;
		КонецЕсли;
	ИначеЕсли ПоступлениеТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ПоступлениеТоваров);
	
	ОткрытьФорму("Документ.ПриходнаяНакладная.ФормаОбъекта", ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТТН(Команда)
	
	ТранспортныйМодуль = ТранспортныйМодуль(Организация, Магазин);
	
	Если НЕ ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Заполните транспортный модуль'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Магазин"    , Магазин);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ЗагрузкаДокументов_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияЕГАИСКлиент.НачатьЗагрузкуДокументов(ОповещениеПриЗавершении, ТранспортныйМодуль,,,ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьТТН(Команда)
	
	НачатьВыгрузкуДокумента(ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПодтвержденияТТН"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьТТНСРасхождениями(Команда)
	
	НачатьВыгрузкуДокумента(ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктРасхожденийТТН"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтТТН(Команда)
	
	ТоварноТранспортнаяНакладнаяЕГАИС = Элементы.Список.ТекущаяСтрока;
	
	Если НЕ ЗначениеЗаполнено(ТоварноТранспортнаяНакладнаяЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТТН = ДанныеТТН(ТоварноТранспортнаяНакладнаяЕГАИС);
	
	Если ДанныеТТН.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения") Тогда
		СтрокаСообщения = НСтр("ru = 'Накладная уже подветждена актом, отказ не возможен'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Возврат;
	ИначеЕсли ДанныеТТН.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа") Тогда
		СтрокаСообщения = НСтр("ru = 'Отказ от данных уже передавался в ЕГАИС'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Возврат;
	Иначе
		ТекстВопроса = НСтр("ru='Вы уверены что хотите передать отказ от накладной в ЕГАИС?'");
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ОтказОтТТН_Подтверждение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказОтТТН_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		НачатьВыгрузкуДокумента(ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктОтказаОтТТН"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьОтменуПроведения(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗапросОтменыПроведения_Подтверждение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Отправить грузоотправителю запрос на отмену проведения ТТН?'");
	
	ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОтменыПроведения_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НачатьВыгрузкуДокумента(ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузкаДокументов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОтветыЕГАИСНаКлиенте();
	
	Элементы.Список.Обновить();
	
	ТекстСообщения = НСтр("ru = 'Загрузка завершена.
								|Загружено документов: %ЗагруженоДокументов%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗагруженоДокументов%", Результат.ЗагруженоДокументов);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыгрузкуДокумента(ВидДокумента)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
	ПараметрыЗапроса.ДокументСсылка = Элементы.Список.ТекущиеДанные.Ссылка;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидДокумента", ВидДокумента);
	ДополнительныеПараметры.Вставить("ДокументСсылка", ПараметрыЗапроса.ДокументСсылка);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ВыгрузкаДокумента_Завершение", ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
		ОповещениеПриЗавершении,
		ВидДокумента,
		ПараметрыЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаДокумента_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат Тогда
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.Свойство("ВидДокумента")
			И ДополнительныеПараметры.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктОтказаОтТТН") Тогда
			ЗаписатьПоступлениеПриОтказе(ДополнительныеПараметры.ДокументСсылка);
		КонецЕсли;
		
		Элементы.Список.Обновить();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ успешно подтвержден.'"));
	КонецЕсли;
	
КонецПроцедуры


// Процедура устанавливает отбор динамических списков формы.
//
&НаСервере
Процедура УстановитьОтборДинамическихСписков(ИмяРеквизита)
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ЭтотОбъект[ИмяРеквизита]);
	Если ИмяРеквизита = "Магазин" Тогда
		МассивОтбора.Добавить(Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	Иначе
		МассивОтбора.Добавить(Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(
		Список, 
		ИмяРеквизита, 
		МассивОтбора, 
		ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]),
		ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписковПриИзмененииСервер(ЗаполнитьОтборы = Ложь)
	
	Если ЗаполнитьОтборы Тогда
		ЗаполнитьОтборы();
	КонецЕсли;
	
	УстановитьОтборДинамическихСписков("Магазин");
	УстановитьОтборДинамическихСписков("Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписковПриИзмененииКлиент(ЗаполнитьОтборы = Ложь)
	
	УстановитьОтборДинамическихСписковПриИзмененииСервер(ЗаполнитьОтборы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборы()
	
	Если НЕ ЗначениеЗаполнено(Магазин) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Магазины.Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК Магазины";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Магазин = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	ТранспортныйМодуль = ТранспортныйМодуль(Организация, Магазин);
	ЕстьТранспортныйМодуль = ЗначениеЗаполнено(ТранспортныйМодуль);
	
	Если ЗначениеЗаполнено(Магазин) 
		И ЗначениеЗаполнено(Организация) 
		И ЕстьТранспортныйМодуль Тогда
		Элементы.ЗагрузитьТТН.Доступность = Истина;
	Иначе
		Элементы.ЗагрузитьТТН.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьНайтиПоступлениеНаСервере(ТоварноТранспортнаяНакладнаяЕГАИС, ТолькоПоиск)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.ТоварноТранспортнаяНакладнаяЕГАИС = &ТоварноТранспортнаяНакладнаяЕГАИС";
	
	Запрос.УстановитьПараметр("ТоварноТранспортнаяНакладнаяЕГАИС", ТоварноТранспортнаяНакладнаяЕГАИС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Если ТолькоПоиск Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ПоступлениеТоваровОбъект = Документы.ПриходнаяНакладная.СоздатьДокумент();
	ПоступлениеТоваровОбъект.ДокументОснование = ТоварноТранспортнаяНакладнаяЕГАИС;
	ПоступлениеТоваровОбъект.Дата = ТекущаяДатаСеанса();
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьШапкуДокумента(ПоступлениеТоваровОбъект,,,, Истина, );
	ПоступлениеТоваровОбъект.Заполнить(ТоварноТранспортнаяНакладнаяЕГАИС);

	ПоступлениеТоваровОбъект.Записать();
	
	Элементы.Список.Обновить();
	Возврат ПоступлениеТоваровОбъект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТранспортныйМодуль(Организация, Магазин);
	
	ТранспортныйМодуль = ИнтеграцияЕГАИСУНФ.ИспользуемыйТранспортныйМодуль(Организация, Магазин);
	
	Возврат ТранспортныйМодуль
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеТТН(ДокументСсылка)
	
	ДополнительныеПараметры = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварноТранспортнаяНакладнаяЕГАИС.Ссылка,
	|	ТоварноТранспортнаяНакладнаяЕГАИС.СтатусОбработки
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТоварноТранспортнаяНакладнаяЕГАИС
	|ГДЕ
	|	ТоварноТранспортнаяНакладнаяЕГАИС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДополнительныеПараметры.Вставить("Ссылка", Выборка.Ссылка);
		ДополнительныеПараметры.Вставить("СтатусОбработки", Выборка.СтатусОбработки);
		
	КонецЕсли;
	
	Возврат ДополнительныеПараметры
	
КонецФункции

&НаСервере
Процедура ЗаписатьПоступлениеПриОтказе(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходнаяНакладная.Ссылка
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.ТоварноТранспортнаяНакладнаяЕГАИС = &ТоварноТранспортнаяНакладнаяЕГАИС";
	
	Запрос.УстановитьПараметр("ТоварноТранспортнаяНакладнаяЕГАИС", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПоступлениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПоступлениеОбъект.АктПереданВЕГАИС = Истина;
		
		Если ПоступлениеОбъект.Проведен Тогда
			ПоступлениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ПоступлениеОбъект.Записать();
		КонецЕсли;
		
		ПоступлениеОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти