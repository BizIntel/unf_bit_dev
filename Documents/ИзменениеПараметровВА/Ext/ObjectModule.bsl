#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура заполнения документа на основании.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа.
//	
Процедура ЗаполнитьПоВнеоборотнымАктивам(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииСрезПоследних.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ПараметрыАмортизацииСрезПоследних.СтруктурнаяЕдиница КАК Подразделение,
	|	ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.СчетЗатрат КАК СчетЗатрат,
	|	ПараметрыАмортизацииСрезПоследних.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПараметрыАмортизацииСрезПоследних.Регистратор.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПараметрыВнеоборотныхАктивов.СрезПоследних(, ВнеоборотныйАктив = &ВнеоборотныйАктив) КАК ПараметрыАмортизацииСрезПоследних");
	
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Организация = Выборка.Организация;
	
	НоваяСтрока = ВнеоборотныеАктивы.Добавить();
	
	НоваяСтрока.ВнеоборотныйАктив = Выборка.ВнеоборотныйАктив;
	НоваяСтрока.СрокИспользованияДляВычисленияАмортизации = Выборка.СрокИспользованияДляВычисленияАмортизации;
	НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = Выборка.ОбъемПродукцииРаботДляВычисленияАмортизации;
	НоваяСтрока.СтоимостьДляВычисленияАмортизации = Выборка.СтоимостьДляВычисленияАмортизации;
	НоваяСтрока.СчетЗатрат = Выборка.СчетЗатрат;
	НоваяСтрока.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
	НоваяСтрока.СтруктурнаяЕдиница = Выборка.Подразделение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("СправочникСсылка.ВнеоборотныеАктивы")] = "ЗаполнитьПоВнеоборотнымАктивам";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		Для каждого СтрокаВнеоборотныеАктивы из ВнеоборотныеАктивы Цикл
			
			Если СтрокаВнеоборотныеАктивы.СчетЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
				
				СтрокаВнеоборотныеАктивы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
				
			Иначе
				
				СтрокаВнеоборотныеАктивы.НаправлениеДеятельности = Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Выполнение предварительного контроля.
	ВыполнитьПредварительныйКонтроль(Отказ);
	
	Для каждого СтрокаВнеоборотныхАктивов Из ВнеоборотныеАктивы Цикл
			
		Если СтрокаВнеоборотныхАктивов.ВнеоборотныйАктив.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииВнеоборотныхАктивов.Линейный
		   И СтрокаВнеоборотныхАктивов.СрокИспользованияДляВычисленияАмортизации = 0 Тогда
			ТекстСообщения = НСтр(
				"ru = 'Для имущества ""%ВнеоборотныйАктив%"" указанного в строке %НомерСтроки% списка ""Имущество"", должен быть заполнен ""Срок использования для вычисления амортизации"".'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВнеоборотныйАктив%", СокрЛП(Строка(СтрокаВнеоборотныхАктивов.ВнеоборотныйАктив))); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%",Строка(СтрокаВнеоборотныхАктивов.НомерСтроки));
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ВнеоборотныеАктивы",
				СтрокаВнеоборотныхАктивов.НомерСтроки,
				"СрокИспользованияДляВычисленияАмортизации",
				Отказ
			);
		КонецЕсли;
		
		Если СтрокаВнеоборотныхАктивов.ВнеоборотныйАктив.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииВнеоборотныхАктивов.ПропорциональноОбъемуПродукции
		   И СтрокаВнеоборотныхАктивов.ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
			ТекстСообщения = НСтр(
				"ru = 'Для имущества ""%ВнеоборотныйАктив%"" указанного в строке %НомерСтроки% списка ""Имущество"", должен быть заполнен ""Объем продукции (работ) для исчисления амортизации в натуральных ед."".'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВнеоборотныйАктив%", СокрЛП(Строка(СтрокаВнеоборотныхАктивов.ВнеоборотныйАктив))); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%",Строка(СтрокаВнеоборотныхАктивов.НомерСтроки));
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ВнеоборотныеАктивы",
				СтрокаВнеоборотныхАктивов.НомерСтроки,
				"ОбъемПродукцииРаботДляВычисленияАмортизации",
				Отказ
			);
		КонецЕсли;
		
		Если СтрокаВнеоборотныхАктивов.СтоимостьДляВычисленияАмортизации > СтрокаВнеоборотныхАктивов.СтоимостьДляВычисленияАмортизацииДоИзменения Тогда
			ПроверяемыеРеквизиты.Добавить("ВнеоборотныеАктивы.СчетПереоценки");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.ИзменениеПараметровВА.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьПараметрыВнеоборотныхАктивов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьВнеоборотныеАктивы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет предварительный контроль.
//
Процедура ВыполнитьПредварительныйКонтроль(Отказ)
	
	// Дубли строк.
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ВнеоборотныйАктив
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента1.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента1.ВнеоборотныйАктив
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
	|		ПО ТаблицаДокумента1.НомерСтроки <> ТаблицаДокумента2.НомерСтроки
	|			И ТаблицаДокумента1.ВнеоборотныйАктив = ТаблицаДокумента2.ВнеоборотныйАктив
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента1.ВнеоборотныйАктив
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ВнеоборотныеАктивы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = НСтр(
				"ru = 'Имущество ""%ВнеоборотныйАктив%"" указанное в строке %НомерСтроки% списка ""Имущество"", указано повторно.'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаИзРезультатаЗапроса.НомерСтроки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВнеоборотныйАктив%", ВыборкаИзРезультатаЗапроса.ВнеоборотныйАктив);
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ВнеоборотныеАктивы",
				ВыборкаИзРезультатаЗапроса.НомерСтроки,
				"ВнеоборотныйАктив",
				Отказ
			);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("СписокВнеоборотныхАктивов", ВнеоборотныеАктивы.ВыгрузитьКолонку("ВнеоборотныйАктив"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостояниеВнеоборотногоАктиваСрезПоследних.ВнеоборотныйАктив КАК ВнеоборотныйАктив
	|ИЗ
	|	РегистрСведений.СостоянияВнеоборотныхАктивов.СрезПоследних(&Период, Организация = &Организация) КАК СостояниеВнеоборотногоАктиваСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостояниеВнеоборотногоАктиваСрезПоследних.ВнеоборотныйАктив КАК ВнеоборотныйАктив
	|ИЗ
	|	РегистрСведений.СостоянияВнеоборотныхАктивов.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ВнеоборотныйАктив В (&СписокВнеоборотныхАктивов)
	|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВнеоборотныхАктивов.ПринятКУчету)) КАК СостояниеВнеоборотногоАктиваСрезПоследних";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	МассивВАСостояния = МассивРезультатов[0].Выгрузить().ВыгрузитьКолонку("ВнеоборотныйАктив");
	МассивВАПринятКУчету = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("ВнеоборотныйАктив");
	
	Для каждого СтрокаВнеоборотныхАктивов Из ВнеоборотныеАктивы Цикл
			
		Если МассивВАСостояния.Найти(СтрокаВнеоборотныхАктивов.ВнеоборотныйАктив) = Неопределено Тогда
			ТекстСообщения = НСтр(
				"ru = 'Для имущества ""%ВнеоборотныйАктив%"" указанного в строке %НомерСтроки% списка ""Имущество"", не зарегистрированы состояния.'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВнеоборотныйАктив%", СокрЛП(Строка(СтрокаВнеоборотныхАктивов.ВнеоборотныйАктив))); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%",Строка(СтрокаВнеоборотныхАктивов.НомерСтроки));
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ВнеоборотныеАктивы",
				СтрокаВнеоборотныхАктивов.НомерСтроки,
				"ВнеоборотныйАктив",
				Отказ
			);
		ИначеЕсли МассивВАПринятКУчету.Найти(СтрокаВнеоборотныхАктивов.ВнеоборотныйАктив) = Неопределено Тогда
			ТекстСообщения = НСтр(
				"ru = 'Для имущества ""%ВнеоборотныйАктив%"" указанного в строке %НомерСтроки% списка ""Имущество"", текущее состояние ""Снят с учета"".'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВнеоборотныйАктив%", СокрЛП(Строка(СтрокаВнеоборотныхАктивов.ВнеоборотныйАктив))); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%",Строка(СтрокаВнеоборотныхАктивов.НомерСтроки));
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"ВнеоборотныеАктивы",
				СтрокаВнеоборотныхАктивов.НомерСтроки,
				"ВнеоборотныйАктив",
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьПредварительныйКонтроль()

#КонецОбласти

#КонецЕсли