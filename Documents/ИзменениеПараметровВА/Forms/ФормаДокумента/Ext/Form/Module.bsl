
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	ЗаполнитьТаблицуВнеоборотныеАктивы();
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновлениеСостоянийВнеоборотныхАктивов");
	
КонецПроцедуры // ПослеЗаписи()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВнеоборотныеАктивы

&НаКлиенте
Процедура ВнеоборотныеАктивыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
	КонецЕсли;	
	
КонецПроцедуры // ВнеоборотныеАктивыПриНачалеРедактирования()

&НаКлиенте
Процедура ВнеоборотныеАктивыОбъемПродукцииРаботДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если НЕ СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыОбъемПродукцииРаботДляВычисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыСрокИспользованияДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Срок использования для вычисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыСрокИспользованияДляВычисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура ВнеоборотныеАктивыВнеоборотныйАктивПриИзменении(Элемент)
	
	МассивВнеоборотныеАктивы = ТаблицаВнеоборотныеАктивы.НайтиСтроки(Новый Структура("ВнеоборотныйАктив", Элементы.ВнеоборотныеАктивы.ТекущиеДанные.ВнеоборотныйАктив));
	
	Если МассивВнеоборотныеАктивы.Количество() <> 0 Тогда
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СрокИспользованияДляВычисленияАмортизации = МассивВнеоборотныеАктивы[0].СрокИспользованияДляВычисленияАмортизации;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.ОбъемПродукцииРаботДляВычисленияАмортизации = МассивВнеоборотныеАктивы[0].ОбъемПродукцииРаботДляВычисленияАмортизации;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СтоимостьДляВычисленияАмортизации = МассивВнеоборотныеАктивы[0].СтоимостьДляВычисленияАмортизации;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СтоимостьДляВычисленияАмортизацииДоИзменения = МассивВнеоборотныеАктивы[0].СтоимостьДляВычисленияАмортизации;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СчетЗатрат = МассивВнеоборотныеАктивы[0].СчетЗатрат;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СчетПереоценки = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПрочиеДоходы");
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.НаправлениеДеятельности = МассивВнеоборотныеАктивы[0].НаправлениеДеятельности;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СтруктурнаяЕдиница = МассивВнеоборотныеАктивы[0].Подразделение;
	Иначе
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СрокИспользованияДляВычисленияАмортизации = 0;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СтоимостьДляВычисленияАмортизации = 0;
		Элементы.ВнеоборотныеАктивы.ТекущиеДанные.СтоимостьДляВычисленияАмортизацииДоИзменения = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.ВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	Иначе
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры // ВнеоборотныеАктивыВнеоборотныйАктивПриИзменении()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу курсов валют
//
Процедура ЗаполнитьТаблицуВнеоборотныеАктивы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииСрезПоследних.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ПараметрыАмортизацииСрезПоследних.СтруктурнаяЕдиница КАК Подразделение,
	|	ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииСрезПоследних.СчетЗатрат КАК СчетЗатрат,
	|	ПараметрыАмортизацииСрезПоследних.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	РегистрСведений.ПараметрыВнеоборотныхАктивов.СрезПоследних(&ДатаДокумента, Организация = &Организация) КАК ПараметрыАмортизацииСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Компания);
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаВнеоборотныеАктивы.Загрузить(ТаблицаРезультатаЗапроса);
	
КонецПроцедуры // ЗаполнитьТаблицуВнеоборотныеАктивы()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Компания",
		УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеВнеоборотныйАктив(ВнеоборотныйАктив)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СпособАмортизацииПропорциональноОбъемуПродукции", ВнеоборотныйАктив.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииВнеоборотныхАктивов.ПропорциональноОбъемуПродукции);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеВнеоборотныйАктив()

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти