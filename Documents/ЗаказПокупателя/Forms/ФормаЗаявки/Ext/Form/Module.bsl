
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем ПриИзмененииСтарт;

&НаКлиенте
Перем ПриИзмененииФиниш;

&НаКлиенте
Перем КопированиеСтрокиРаботы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
// 
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда
		Если СтруктураНадписи.СуммаВключаетНДС Тогда
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
											
КонецПроцедуры // ПересчитатьСуммыДокумента() 

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти = "Запасы", СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
		
	// Сумма.
	Если ИмяТабличнойЧасти = "Работы" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент * СтрокаТабличнойЧасти.Цена;
	Иначе
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли; 
		
	// Скидки.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	          	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

// Процедура пересчитывает суммы в платежном календаре.
//
&НаКлиенте
Процедура ПересчитатьПлатежныйКалендарь()
	
	Для каждого ТекСтрока Из Объект.ПлатежныйКалендарь Цикл
		ТекСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
		ТекСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьПлатежныйКалендарь()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", Объект.Курс);
	СтруктураПараметров.Вставить("Кратность", Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор", Объект.Договор);
	СтруктураПараметров.Вставить("Организация",	Компания); 
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()	

&НаКлиенте
// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен() 
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				Объект.Дата);
	СтруктураДанных.Вставить("Организация",			Компания);
	СтруктураДанных.Вставить("ВидЦен",				Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	
	СтруктураДанных.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
	
	Если ВидРаботВШапке Тогда
		
		Для каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("ВидРабот",			Объект.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
	
	Иначе
	
		Для каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидРабот) Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("ВидРабот",			СтрокаТЧ.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;		
	
	КонецЕсли;
		
	ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);	
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		
		РезультатПоиска = Объект.Работы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл				
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаРезультат);				
		КонецЦикла;
		
	КонецЦикла;		
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаСервереБезКонтекста
// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  СтруктураРеквизитов - Структура реквизитов, необходимых при пересчете
//  ТабличнаяЧастьДокумента - ДанныеФормыСтруктура, содержит табличную часть
//                 документа.
//
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента)
	
	// Скидки.
	Если СтруктураДанных.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанных.ВидСкидкиНаценки) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ВидСкидкиНаценки.Процент;
		
	КонецЕсли;	
	
	// 1. Сформируем таблицу документа.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	// Вид работ.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ВидРабот", ОписаниеТипов);
	
	// Номенклатура.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	// ФиксированноеЗначение.
	Массив.Добавить(Тип("Булево"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ФиксированнаяСтоимость", ОписаниеТипов);
	
	// Характеристика.
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	// СтавкиНДС.
	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);	
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.ВидРабот	 	 = СтрокаТЧ.ВидРабот;
		НоваяСтрока.ФиксированнаяСтоимость	 = СтрокаТЧ.Номенклатура.ФиксированнаяСтоимость;
		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
		   И СтрокаТЧ.Свойство("СтавкаНДС") Тогда
			НоваяСтрока.СтавкаНДС		 = СтрокаТЧ.СтавкаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.ВидРабот,
	|	ТаблицаНоменклатуры.ФиксированнаяСтоимость,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Выполнить();
	
	// 2. Заполним цены.
	ВидЦенПараметр = СтруктураДанных.ВидЦен;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОбработки, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.ФиксированнаяСтоимость
	|					ТОГДА ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|				ИНАЧЕ ТаблицаНоменклатуры.ВидРабот = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.ФиксированнаяСтоимость
	|					ТОГДА ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО (ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Актуальность";
		
	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанных.ВалютаДокумента);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",	СтрокаТабЧасти.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",	СтрокаТабЧасти.Характеристика);
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура")
			И СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
			
			СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабЧасти.СтавкаНДС);
			
		КонецЕсли;
		
		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			
			Цена = РезультатПоиска[0].Цена;
			Если Цена = 0 Тогда
				
				СтрокаТабЧасти.Цена = Цена;
				
			Иначе
				
				ПорядокОкругления = РезультатПоиска[0].ПорядокОкругления;
				ОкруглятьВБольшуюСторону = РезультатПоиска[0].ОкруглятьВБольшуюСторону;
				
				Если СтруктураДанных.Свойство("СуммаВключаетНДС")
					И ((СтруктураДанных.СуммаВключаетНДС И НЕ РезультатПоиска[0].ЦенаВключаетНДС)
						ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС)) Тогда
					
					Цена = УправлениеНебольшойФирмойСервер.ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
					
				КонецЕсли;
				
				СтрокаТабЧасти.Цена = УправлениеНебольшойФирмойСервер.ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть()
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦен()

// Получает набор данных с сервера.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	СтруктураДанные.Вставить("БанковскийСчет", Объект.Организация.БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("БанковскийСчетВалютаДенежныхСредств", Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда		
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);		
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда	
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
		
			Если СтруктураДанные.Номенклатура.ФиксированнаяСтоимость Тогда
				
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
			
			Иначе
			
				СтруктураДанные.Номенклатура = СтруктураДанные.ВидРабот;
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			КонецЕсли;	
		
		Иначе
		
			Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);	
		
		КонецЕсли;				
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;	
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		Контрагент.ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Контрагент.ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Контрагент.ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Контрагент.ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Контрагент.ДоговорПоУмолчанию.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Контрагент.ДоговорПоУмолчанию.ВидЦен
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// КАЛЕНДАРЬ (ЗАГРУЗКА РЕСУРСОВ)

/// Процедура формирует период расписания работ.
//
&НаКлиенте
Процедура СформироватьПериодРасписанияРабот()
	
	ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
	ДатаКалендаряОкончание = КонецДня(ДатаКалендаря);
	
	ДеньРасписания = Формат(ДатаКалендаряНачало, "ДФ=дд");
	МесяцРасписания = Формат(ДатаКалендаряНачало, "ДФ=МММ");
	ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
	ДеньНеделиРасписания = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
	
	ПредставлениеПериода = ДеньНеделиРасписания + " " + ДеньРасписания + " " + МесяцРасписания + " " + ГодРасписания;
	
КонецПроцедуры // СформироватьПериодРасписанияРабот()

// Функция возвращает список ресурсов по виду ресурса.
//
&НаСервере
Функция ПолучитьСписокРесурсовПоВидамРесурсов()
	
	СписокВидовРесурсов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	РегистрСведений.ВидыРесурсовПредприятия КАК ВидыРесурсовПредприятия
	|ГДЕ
	|	ВидыРесурсовПредприятия.ВидРесурсаПредприятия = &ВидРесурсаПредприятия";
	
	Запрос.УстановитьПараметр("ВидРесурсаПредприятия", ОтборВидРесурса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СписокВидовРесурсов;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВидовРесурсов.Добавить(Выборка.РесурсПредприятия);
	КонецЦикла;
	
	Возврат СписокВидовРесурсов;
	
КонецФункции // ПолучитьСписокРесурсовПоВидамРесурсов()

// Функция возвращает список ресурсов для быстрого отбора.
//
&НаСервере
Функция ПолучитьСписокРесурсовДляОтбора()
	
	Если ЗначениеЗаполнено(ОтборКлючевойРесурс) Тогда
		СписокВидовРесурсов = Новый СписокЗначений;
		СписокВидовРесурсов.Добавить(ОтборКлючевойРесурс);
	ИначеЕсли ЗначениеЗаполнено(ОтборВидРесурса) Тогда
		СписокВидовРесурсов = ПолучитьСписокРесурсовПоВидамРесурсов();
	Иначе
		СписокВидовРесурсов = Неопределено;
	КонецЕсли;
	
	Возврат СписокВидовРесурсов;
	
КонецФункции // ПолучитьСписокРесурсовДляОтбора()

// Процедура заполняет общие параметры календаря.
//
&НаСервере
Процедура ЗаполнитьПараметрыКалендаряПриСозданииНаСервере()
	
	Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ОграничениеВремениС = Параметры.ОграничениеВремениС;
		ОграничениеВремениПо = Параметры.ОграничениеВремениПо;
		КратностьДня = Параметры.КратностьДня;
		Если Параметры.Свойство("ДатаКалендаря") Тогда
			ДатаКалендаря = Параметры.ДатаКалендаря;
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Расшифровка") Тогда
		ОграничениеВремениС = Параметры.ОграничениеВремениС;
		ОграничениеВремениПо = Параметры.ОграничениеВремениПо;
		КратностьДня = Параметры.КратностьДня;
		ОтборКлючевойРесурс = Параметры.ОтборКлючевойРесурс;
		ОтборВидРесурса = Параметры.ОтборВидРесурса;
		РасшифровкаКалендаря = Параметры.Расшифровка;
		Если РасшифровкаКалендаря.Количество() > 0 Тогда
			СтруктураИнтервал = РасшифровкаКалендаря[0];
			Если СтруктураИнтервал.Свойство("РесурсПредприятия") Тогда
				ДатаКалендаря = ТекущаяДата();
				ЗаполнитьТаблицуЗадействованныхРесурсовПриСозданииНаСервере(РасшифровкаКалендаря);
			Иначе
				ДатаКалендаря = СтруктураИнтервал.Интервал;
			КонецЕсли;
		Иначе
			ДатаКалендаря = ТекущаяДата();
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("ТолькоДень") Тогда
		ОграничениеВремениС = Параметры.ОграничениеВремениС;
		ОграничениеВремениПо = Параметры.ОграничениеВремениПо;
		КратностьДня = Параметры.КратностьДня;
		ОтборКлючевойРесурс = Параметры.ОтборКлючевойРесурс;
		ОтборВидРесурса = Параметры.ОтборВидРесурса;
		ДатаКалендаря =  Параметры.ТолькоДень;
		Расшифровка = Неопределено;
	Иначе
		ОграничениеВремениС = '00010101090000';
		ОграничениеВремениПо = '00010101210000';
		КратностьДня = 30;
		ДатаКалендаря = ТекущаяДата();
		Расшифровка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыКалендаряПриСозданииНаСервере()

// Процедура формирует таблицу ресурсов для заявки.
//
&НаСервере
Процедура ЗаполнитьТаблицуЗадействованныхРесурсовПриСозданииНаСервере(РасшифровкаКалендаря)
	
	ТаблицаРесурсов = Новый ТаблицаЗначений;
	ТаблицаРесурсов.Колонки.Добавить("РесурсПредприятия");
	ТаблицаРесурсов.Колонки.Добавить("РесурсПредприятияНаименование");
	ТаблицаРесурсов.Колонки.Добавить("Интервал");
	Для каждого ЭлРасшифровки Из РасшифровкаКалендаря Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		НоваяСтрока.РесурсПредприятия = ЭлРасшифровки.РесурсПредприятия;
		НоваяСтрока.РесурсПредприятияНаименование = ЭлРасшифровки.РесурсПредприятия.Наименование;
		НоваяСтрока.Интервал = ЭлРасшифровки.Интервал;
	КонецЦикла;
	
	НоваяСтрока = Неопределено;
	Ресурс = Неопределено;
	Индекс = 1;
	ПервыйСтарт = '00010101';
	ПоследнийФиниш = '00010101';
	ТаблицаРесурсов.Сортировать("РесурсПредприятияНаименование,Интервал");
	Для каждого СтрокаРесурсов Из ТаблицаРесурсов Цикл
		Если Индекс = 1 Тогда
			ДатаКалендаря = СтрокаРесурсов.Интервал;
		КонецЕсли;
		Если Ресурс = СтрокаРесурсов.РесурсПредприятия Тогда
			Если НоваяСтрока <> Неопределено Тогда
				ПредыдущийФиниш = НоваяСтрока.Финиш;
				СледующийФиниш = СтрокаРесурсов.Интервал + КратностьДня * 60;
				Если НачалоДня(ПредыдущийФиниш) = НачалоДня(СледующийФиниш) Тогда
					НоваяСтрока.Финиш = СтрокаРесурсов.Интервал + КратностьДня * 60;
					Если ПервыйСтарт > НоваяСтрока.Старт ИЛИ ПервыйСтарт = '00010101' Тогда
						ПервыйСтарт = НоваяСтрока.Старт;
					КонецЕсли;
					Если ПоследнийФиниш < НоваяСтрока.Финиш ИЛИ ПоследнийФиниш = '00010101' Тогда
						ПоследнийФиниш = НоваяСтрока.Финиш;
					КонецЕсли;
				Иначе
					НоваяСтрока.Финиш = ПредыдущийФиниш;
					НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
					НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.РесурсПредприятия;
					НоваяСтрока.Мощность = 1;
					НоваяСтрока.Старт = СледующийФиниш - КратностьДня * 60;
					НоваяСтрока.Финиш = СледующийФиниш;
					Если ПервыйСтарт > НоваяСтрока.Старт ИЛИ ПервыйСтарт = '00010101' Тогда
						ПервыйСтарт = НоваяСтрока.Старт;
					КонецЕсли;
					Если ПоследнийФиниш < НоваяСтрока.Финиш ИЛИ ПоследнийФиниш = '00010101' Тогда
						ПоследнийФиниш = НоваяСтрока.Финиш;
					КонецЕсли;
				КонецЕсли;
				ДлительностьВСекундах = НоваяСтрока.Финиш - НоваяСтрока.Старт;
				Часы = Цел(ДлительностьВСекундах / 3600);
				Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
				НоваяСтрока.Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
			КонецЕсли;
		Иначе
			НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
			НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.РесурсПредприятия;
			НоваяСтрока.Мощность = 1;
			НоваяСтрока.Старт = СтрокаРесурсов.Интервал;
			НоваяСтрока.Финиш = СтрокаРесурсов.Интервал + КратностьДня * 60;
			ДлительностьВСекундах = НоваяСтрока.Финиш - НоваяСтрока.Старт;
			Часы = Цел(ДлительностьВСекундах / 3600);
			Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
			НоваяСтрока.Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
			Ресурс = СтрокаРесурсов.РесурсПредприятия;
			Если ПервыйСтарт > НоваяСтрока.Старт ИЛИ ПервыйСтарт = '00010101' Тогда
				ПервыйСтарт = НоваяСтрока.Старт;
			КонецЕсли;
			Если ПоследнийФиниш < НоваяСтрока.Финиш ИЛИ ПоследнийФиниш = '00010101' Тогда
				ПоследнийФиниш = НоваяСтрока.Финиш;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Объект.Старт = ПервыйСтарт;
	Объект.Финиш = ПоследнийФиниш;
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
КонецПроцедуры // ЗаполнитьТаблицуЗадействованныхРесурсовПриСозданииНаСервере()

// Функция получает таблицу задействованных ресурсов текущего заказа.
//
&НаКлиенте
Функция ПолучитьТаблицуЗадействованныхРесурсов()
	
	СтруктураТЧРесурсов = Новый Структура;
	МассивЗадействованныхРесурсов = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.РесурсыПредприятия Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("РесурсПредприятия", СтрокаТЧ.РесурсПредприятия);
		СтруктураСтроки.Вставить("Мощность", СтрокаТЧ.Мощность);
		СтруктураСтроки.Вставить("Длительность", СтрокаТЧ.Длительность);
		СтруктураСтроки.Вставить("Старт", СтрокаТЧ.Старт);
		СтруктураСтроки.Вставить("Финиш", СтрокаТЧ.Финиш);
		МассивЗадействованныхРесурсов.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураТЧРесурсов.Вставить("Ссылка", Объект.Ссылка);
	СтруктураТЧРесурсов.Вставить("ТабличнаяЧасть", МассивЗадействованныхРесурсов);
	
	Возврат СтруктураТЧРесурсов;
	
КонецФункции // ПолучитьТаблицуЗадействованныхРесурсов()

// Процедура формирует календарь загрузки ресурсов.
//
&НаСервере
Процедура ОбновитьКалендарь(СтруктураТЧРесурсов)
	
	ТабДок = ЗагрузкаРесурсов;
	ТабДок.Очистить();
	
	СписокРесурсов = ПолучитьСписокРесурсовДляОтбора();
	ОбновитьКалендарьПериодДень(ТабДок, СтруктураТЧРесурсов, СписокРесурсов);
	
	ТабДок.ФиксацияСверху = 4;
	ТабДок.ФиксацияСлева = 5;
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
КонецПроцедуры // ОбновитьКалендарь()

// Процедура формирует календарь загрузки ресурсов - период день.
//
&НаСервере
Процедура ОбновитьКалендарьПериодДень(ТабДок, СтруктураТЧРесурсов, СписокРесурсов)
	
	МакетШкалы = Обработки.Планировщик.ПолучитьМакет("ШкалаДень");
	
	// Вывод шкалы.
	Отступ = 1;
	ШагШкалы = 3;
	НачалоШкалы = 6;
	СдвигПоШкале = 1;
	НизРазделителяШкалы = 3;
	ВерхРазделителяШкалы = 2;
	
	Если ЗначениеЗаполнено(ОграничениеВремениС) Тогда
		ЧасС = Час(ОграничениеВремениС);
		МинутаС = Минута(ОграничениеВремениС);
	Иначе
		ЧасС = 0;
		МинутаС = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОграничениеВремениПо) Тогда
		ЧасПо = Час(ОграничениеВремениПо);
		МинутаПо = Минута(ОграничениеВремениПо);
	Иначе
		ЧасПо = 24;
		МинутаПо = 0;
	КонецЕсли;
	
	ОбластьСписокРесурсов = МакетШкалы.Область("Шкала60|СписокРесурсов");
	ТабДок.ВставитьОбласть(ОбластьСписокРесурсов, ТабДок.Область(ОбластьСписокРесурсов.Имя));
	Если КратностьДня = 60 Тогда
		Если ЧасС = ЧасПо Тогда
			ЧасПо = ЧасС + СдвигПоШкале;
		ИначеЕсли МинутаПо <> 0 Тогда
			ЧасПо = ЧасПо + СдвигПоШкале;
		КонецЕсли;
		ВсегоМинутС =  ЧасС * 60;
		ВсегоМинутПо = ЧасПо * 60;
		НомерКолонкиС = НачалоШкалы + ?(ЧасС-Цел(ЧасС/2)*2 = 1, (ЧасС - СдвигПоШкале), ЧасС) / 2 * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(ЧасС-Цел(ЧасС/2)*2 = 1, (ЧасС - СдвигПоШкале), ЧасС)) * 60 * 60;
		НомерКолонкиПо = НачалоШкалы + ?(ЧасПо-Цел(ЧасПо/2)*2 = 1, (ЧасПо + СдвигПоШкале), ЧасПо) / 2 * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(ЧасПо-Цел(ЧасПо/2)*2 = 1, (ЧасПо + СдвигПоШкале), ЧасПо)) * 60 * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала60|Кратность60");
	ИначеЕсли КратностьДня = 15 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 30) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 30) = (ВсегоМинутС / 30), ВсегоМинутС, Цел(ВсегоМинутС / 30) * 30)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 30) = (ВсегоМинутПо / 30), (ВсегоМинутПо / 30), Цел(ВсегоМинутПо / 30) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 30) = (ВсегоМинутПо / 30), ВсегоМинутПо, Цел(ВсегоМинутПо / 30) * 30 + 30)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала15|Кратность15");
	ИначеЕсли КратностьДня = 10 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 20) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 20) = (ВсегоМинутС / 20), ВсегоМинутС, Цел(ВсегоМинутС / 20) * 20)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 20) = (ВсегоМинутПо / 20), (ВсегоМинутПо / 20), Цел(ВсегоМинутПо / 20) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 20) = (ВсегоМинутПо / 20), ВсегоМинутПо, Цел(ВсегоМинутПо / 20) * 20 + 20)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала10|Кратность10");
	ИначеЕсли КратностьДня = 5 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 10) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 10) = (ВсегоМинутС / 10), ВсегоМинутС, Цел(ВсегоМинутС / 10) * 10)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 10) = (ВсегоМинутПо / 10), (ВсегоМинутПо / 10), Цел(ВсегоМинутПо / 10) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 10) = (ВсегоМинутПо / 10), ВсегоМинутПо, Цел(ВсегоМинутПо / 10) * 10 + 10)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала5|Кратность5");
	Иначе // 30 мин
		Если ЧасС = ЧасПо Тогда
			ЧасПо = ЧасС + СдвигПоШкале;
		ИначеЕсли МинутаПо <> 0 Тогда
			ЧасПо = ЧасПо + СдвигПоШкале;
		КонецЕсли;
		ВсегоМинутС =  ЧасС * 60;
		ВсегоМинутПо = ЧасПо * 60;
		НомерКолонкиС = НачалоШкалы + ЧасС * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 60) = (ВсегоМинутС / 60), ВсегоМинутС, ВсегоМинутС - 30)) * 60;
		НомерКолонкиПо = НачалоШкалы + ЧасПо * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 60) = (ВсегоМинутПо / 60), ВсегоМинутПо, ВсегоМинутПо + 30)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала30|Кратность30");
	КонецЕсли;
	ОбластьМакета = МакетШкалы.Область("R" + ОбластьШкалы.Верх + "C"+ НомерКолонкиС +":R"+ ОбластьШкалы.Низ +"C" + НомерКолонкиПо);
	ОбластьТабДок = ТабДок.Область("R" + СдвигПоШкале + "C" + НачалоШкалы + ":R"+ (ШагШкалы + 1) +"C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС));
	ТабДок.ВставитьОбласть(ОбластьМакета, ОбластьТабДок);
	
	// Инициализация массива дней.
	МассивДней = Новый Массив;
	МассивДней.Добавить(ДатаКалендаряНачало);
	
	// Оформление первой колонки.
	КоординатыПервойКолонки = "R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале);
	ТабДок.Область(КоординатыПервойКолонки).Текст = Формат(ДатаКалендаряНачало, "ДФ=""дд ММММ гггг дддд""");
	ТабДок.Область("R" + ВерхРазделителяШкалы + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + НизРазделителяШкалы + "C" + (НачалоШкалы + СдвигПоШкале)).ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	// Оформление последней колонки.
	КоординатыПоследнейКолонки = "R" + СдвигПоШкале + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС) + ":R" + (ШагШкалы + 1) + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
	ТабДок.Область(КоординатыПоследнейКолонки).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ТабДок.Область(КоординатыПоследнейКолонки).ЦветРамки = ЦветаСтиля.ЦветРамки;
	
	КоординатыДляОбъединения = "R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + СдвигПоШкале + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
	ОбластьОбъединения = ТабДок.Область(КоординатыДляОбъединения);
	ОбластьОбъединения.Объединить();
	
	// Координаты конца дня.
	КоординатыОкончанияДня = КоординатыПоследнейКолонки;
	
	// Оформление выходного дня.
	Если Деньнедели(ДатаКалендаряНачало) = 6 
		ИЛИ Деньнедели(ДатаКалендаряНачало) = 7 Тогда
		КоординатыВыходногоДня = "R" + (СдвигПоШкале + 1) + "C" + НачалоШкалы + ":R"+ (ШагШкалы + 1) +"C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
		ТабДок.Область(КоординатыВыходногоДня).Цветфона = ЦветаСтиля.НерабочееВремяВыходной;
	КонецЕсли;
	
	// Иницаилизация размеров шкалы.
	ТабДок.Область(1,,1,).ВысотаСтроки = 16;
	ТабДок.Область(2,,2,).ВысотаСтроки = 6;
	ТабДок.Область(3,,3,).ВысотаСтроки = 5;
	ТабДок.Область(4,,4,).ВысотаСтроки = 5;
	
	ТабДок.Область(,1,,1).ШиринаКолонки = 16;
	ТабДок.Область(,2,,2).ШиринаКолонки = 1;
	ТабДок.Область(,3,,3).ШиринаКолонки = 3;
	ТабДок.Область(,4,,4).ШиринаКолонки = 1;
	ТабДок.Область(,5,,5).ШиринаКолонки = 3;
	
	НомерКолонки = НачалоШкалы;
	НомерПоследнейКолонки = ТабДок.ШиринаТаблицы;
	Пока НомерКолонки <= НомерПоследнейКолонки Цикл
		
		ТабДок.Область(,НомерКолонки,,НомерКолонки).ШиринаКолонки = 0.8;
		ТабДок.Область(,НомерКолонки + 1,,НомерКолонки + 1).ШиринаКолонки = 6;
		ТабДок.Область(,НомерКолонки + 2,,НомерКолонки + 2).ШиринаКолонки = 6;
		НомерКолонки = НомерКолонки + 3;
		
	КонецЦикла;
	
	// Вывод расписания загрузки ресурсов.
	ЦветЯчейкиРесурсЗанят = ЦветаСтиля.РесурсЗанят;
	ЦветЯчейкиРесурсСвободен =  ЦветаСтиля.РабочееВремяЗанятоПолностью;
	ЦветЯчейкиРесурсНеРедактируется = ЦветаСтиля.РабочееВремяСвободноДоступно;
	ЦветРамкиЯчейки = ЦветаСтиля.РамкаЯчейки;
	ЦветЯчейкиРедактируется = ЦветаСтиля.ТекущийИнтервалВремени;
	
	НачалоСпискаРесурсов = ОбластьСписокРесурсов.Низ + Отступ;
	НомерПервойКолонки = ТабДок.Область(КоординатыПервойКолонки).Лево - 1;
	НомерПоследнейКолонкиДня = ТабДок.Область(КоординатыОкончанияДня).Право;
	
	// Загрузка ресурса.
	ТаблицаИнтервалов = Новый ТаблицаЗначений();
	ТаблицаИнтервалов.Колонки.Добавить("Интервал");
	ТаблицаИнтервалов.Колонки.Добавить("ИнтервалЗагружен");
	ТаблицаИнтервалов.Колонки.Добавить("ИнтервалРедактировался");
	ТаблицаИнтервалов.Колонки.Добавить("Загрузка");
	ТаблицаИнтервалов.Индексы.Добавить("Интервал");
	
	РезультатЗапроса = ПолучитьРасписаниеЗагрузкиРесурсов(СтруктураТЧРесурсов, СписокРесурсов, МассивДней);
	
	// Загрузка ресурса (по графику, отклонениям).
	ВыборкаРесурс = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	НомерСтроки = 1;
	Пока ВыборкаРесурс.Следующий() Цикл
		
		// Список ресурсов.
		R = НачалоСпискаРесурсов + НомерСтроки;
		ТабДок.Область(R, 1).Текст = ВыборкаРесурс.РесурсПредприятия;
		ТабДок.Область(R, 1).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабДок.Область(R, 1).Расшифровка = ВыборкаРесурс.РесурсПредприятия;
		
		ОбластьОбъединения = ТабДок.Область(R,1,R,НачалоШкалы-1);
		ОбластьОбъединения.Объединить();
		
		МощностьРесурса = ?(ВыборкаРесурс.Мощность = 1, 0, ВыборкаРесурс.Мощность);
		
		// Загрузка ресурса.
		ТаблицаИнтервалов.Очистить();
		
		РаботаПоГрафику = Ложь;
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Есть отклонение на текущий день.
			Если Выборка.ОтклоненияНеРабочийДень
				И ЗначениеЗаполнено(Выборка.ОтклоненияВремяНачала) И ЗначениеЗаполнено(Выборка.ОтклоненияВремяОкончания) Тогда
				
				РассчитатьИнтервалы(ТаблицаИнтервалов, КратноеОграничениеС, КратноеОграничениеПо, Выборка.ОтклоненияВремяНачала, Выборка.ОтклоненияВремяОкончания);
				
			КонецЕсли;
			
			// Есть гарфик на текущий день.
			Если НЕ Выборка.ОтклоненияНеРабочийДень
				И ЗначениеЗаполнено(Выборка.ВремяНачала) И ЗначениеЗаполнено(Выборка.ВремяОкончания) Тогда
				
				РассчитатьИнтервалы(ТаблицаИнтервалов, КратноеОграничениеС, КратноеОграничениеПо, Выборка.ВремяНачала, Выборка.ВремяОкончания);
				
			КонецЕсли;
			
			// Работа по графику.
			Если ЗначениеЗаполнено(Выборка.ГрафикРаботы) Тогда
				РаботаПоГрафику = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		// Вывод загрузки календаря.
		Интервал = 0;
		КратноеВремяС = КратноеОграничениеС;
		СледующаяПерваяКолонка = НомерПервойКолонки;
		СледующаяПоследняяКолонка = НомерПоследнейКолонкиДня;
		Пока СледующаяПерваяКолонка <= СледующаяПоследняяКолонка Цикл
			
			// Ячейка 1.
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Шрифт = Новый Шрифт(, 8, Истина, , , );
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветРамки = ЦветРамкиЯчейки;
			
			ИнтервалПоиска = ДатаКалендаряНачало + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
			СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
			РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
			Если РезультатПоиска.Количество() = 0 И НЕ РаботаПоГрафику Тогда
				
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			ИначеЕсли РезультатПоиска.Количество() = 0 И РаботаПоГрафику Тогда
				
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсНеРедактируется;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			Иначе
				
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			КонецЕсли;
			
			// Ячейка 2.
			ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Шрифт = Новый Шрифт(, 8, Истина, , , );
			
			КратноеВремяС = КратноеВремяС + КратностьДня * 60;
			ИнтервалПоиска = ДатаКалендаряНачало + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
			СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
			РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
			Если РезультатПоиска.Количество() = 0 И НЕ РаботаПоГрафику Тогда
				
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			ИначеЕсли РезультатПоиска.Количество() = 0 И РаботаПоГрафику Тогда
				
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсНеРедактируется;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			Иначе
				
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			КонецЕсли;
			
			КратноеВремяС = КратноеВремяС + КратностьДня * 60;
			СледующаяПерваяКолонка = СледующаяПерваяКолонка + 3;
			Интервал = Интервал + 3;
			
		КонецЦикла;
		
		// Инициализация размеров строк.
		R = ШагШкалы + НомерСтроки + СдвигПоШкале;
		ТабДок.Область(R, 1).ВысотаСтроки = 5;
		ТабДок.Область(R + Отступ, 1).ВысотаСтроки = 18;
		
		НомерСтроки = НомерСтроки + 2;
		
	КонецЦикла;
	
	// Загрузка ресурса (по заказам).
	ВыборкаРесурс = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	НомерСтроки = 1;
	Пока ВыборкаРесурс.Следующий() Цикл
		
		// Список ресурсов.
		R = НачалоСпискаРесурсов + НомерСтроки;
		МощностьРесурса = ?(ВыборкаРесурс.Мощность = 1, 0, ВыборкаРесурс.Мощность);
		
		// Загрузка ресурса.
		ТаблицаИнтервалов.Очистить();
		
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Есть заказ на текущий день.
			Если ЗначениеЗаполнено(Выборка.ВремяНачала) И ЗначениеЗаполнено(Выборка.ВремяОкончания) Тогда
				
				РассчитатьИнтервалы(ТаблицаИнтервалов, КратноеОграничениеС, КратноеОграничениеПо, Выборка.ВремяНачала, Выборка.ВремяОкончания, Выборка.Загрузка, Выборка.Редактирование);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Вывод загрузки календаря.
		Интервал = 0;
		КратноеВремяС = КратноеОграничениеС;
		СледующаяПерваяКолонка = НомерПервойКолонки;
		СледующаяПоследняяКолонка = НомерПоследнейКолонкиДня;
		Пока СледующаяПерваяКолонка <= СледующаяПоследняяКолонка Цикл
			
			// Ячейка 1.
			ИнтервалПоиска = ДатаКалендаряНачало + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
			СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
			РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
			Загрузка = 0;
			ИнтервалРедактировался = Ложь;
			Для каждого СтрокаПоиска Из РезультатПоиска Цикл
				
				Если СтрокаПоиска.ИнтервалЗагружен Тогда
					
					Если СтрокаПоиска.ИнтервалРедактировался Тогда
						ИнтервалРедактировался = Истина;
					КонецЕсли;
					Загрузка = Загрузка + СтрокаПоиска.Загрузка;
					
				КонецЕсли;
					
			КонецЦикла;
				
			Если Загрузка <> 0 Тогда
				
				ВсегоЗагрузка = Загрузка;
				Если МощностьРесурса = 0 Тогда
					Загрузка = 0;
				Иначе
					Загрузка = МощностьРесурса - Загрузка;
				КонецЕсли;
					
				Если Загрузка = 0 Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = Загрузка;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ИначеЕсли Загрузка < 0 Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = Загрузка * (-1);
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				Иначе
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = Загрузка;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				КонецЕсли;
					
				Если ИнтервалРедактировался Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветФона = ЦветЯчейкиРедактируется;
					Если Загрузка < 0 Тогда
						ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветЯчейкиРесурсЗанят;
					КонецЕсли;
				КонецЕсли;
				
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса, ВсегоЗагрузка);
				
			КонецЕсли;
			
			// Ячейка 2.
			КратноеВремяС = КратноеВремяС + КратностьДня * 60;
			ИнтервалПоиска = ДатаКалендаряНачало + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
			СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
			РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
			Загрузка = 0;
			ИнтервалРедактировался = Ложь;
			Для каждого СтрокаПоиска Из РезультатПоиска Цикл
				
				Если СтрокаПоиска.ИнтервалЗагружен Тогда
					
					Если СтрокаПоиска.ИнтервалРедактировался Тогда
						ИнтервалРедактировался = Истина;
					КонецЕсли;
					Загрузка = Загрузка + СтрокаПоиска.Загрузка;
					
				КонецЕсли;
				
			КонецЦикла;
				
			Если Загрузка <> 0 Тогда
				
				ВсегоЗагрузка = Загрузка;
				Если МощностьРесурса = 0 Тогда
					Загрузка = 0;
				Иначе
					Загрузка = МощностьРесурса - Загрузка;
				КонецЕсли;
				
				Если Загрузка = 0 Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = Загрузка;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ИначеЕсли Загрузка < 0 Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = Загрузка * (-1);
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				Иначе
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = Загрузка;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				КонецЕсли;
				
				Если ИнтервалРедактировался Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветФона = ЦветЯчейкиРедактируется;
					Если Загрузка < 0 Тогда
						ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветЯчейкиРесурсЗанят;
					КонецЕсли;
				КонецЕсли;
				
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса, ВсегоЗагрузка);
				
			КонецЕсли;
			
			КратноеВремяС = КратноеВремяС + КратностьДня * 60;
			СледующаяПерваяКолонка = СледующаяПерваяКолонка + 3;
			Интервал = Интервал + 3;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 2;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьКалендарьПериодДень()

// Процедура обновляет ячейку календаря по параметрам расшифровки.
//
&НаКлиенте
Процедура ОбновитьЯчейкуКалендаря(КоординатыЯчейки, Расшифровка)
	
	ВсегоЗагрузка = Расшифровка.Загрузка + 1;
	Если Расшифровка.Мощность = 0 Тогда
		Загрузка = 0;
	Иначе
		Загрузка = Расшифровка.Мощность - Расшифровка.Загрузка - 1;
	КонецЕсли;
	
	ЗагрузкаРесурсов.Область(КоординатыЯчейки).ЦветФона = ЦветРедактируется;
	Если Загрузка < 0 Тогда
		ЗагрузкаРесурсов.Область(КоординатыЯчейки).Текст = Загрузка *(-1);
		ЗагрузкаРесурсов.Область(КоординатыЯчейки).ЦветТекста = ЦветРесурсЗанят;
	Иначе
		ЗагрузкаРесурсов.Область(КоординатыЯчейки).Текст = Загрузка;
	КонецЕсли;
	
	Расшифровка.Загрузка = ВсегоЗагрузка;
	
КонецПроцедуры // ОбновитьЯчейкуКалендаря()

// Процедура расчитывает интервалы планирования для шкалы календаря.
//
&НаСервере
Процедура РассчитатьИнтервалы(ТаблицаИнтервалов, ВремяС, ВремяПо, ВремяНачала, ВремяОкончания, Загрузка = 0, Редактирование = Неопределено)
	
	КратноеОграничениеВремениС = НачалоДня(ВремяНачала) + Час(ВремяС) * 60 * 60 + Минута(ВремяС) * 60;
	КратноеОграничениеВремениПо = НачалоДня(ВремяНачала) + Час(ВремяПо) * 60 * 60 + Минута(ВремяПо) * 60;
	
	// Если 24 часа.
	Если КратноеОграничениеВремениС >= КратноеОграничениеВремениПо Тогда
		КратноеОграничениеВремениПо = КратноеОграничениеВремениПо + 24 * 60 * 60;
	КонецЕсли;
	
	Если КратностьДня = 60 Тогда
		
		ЧасВремяНачала = Час(ВремяНачала);
		КратноеВремяНачала = НачалоДня(ВремяНачала) + ЧасВремяНачала * 60 * 60;
		ЧасВремяОкончания = ?(Минута(ВремяОкончания) <> 0, Час(ВремяОкончания) + 1, Час(ВремяОкончания));
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + ЧасВремяОкончания * 60 * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если Час(КратноеВремяНачала) >= Час(КратноеОграничениеВремениС) И Час(КратноеВремяНачала) <= Час(КратноеОграничениеВремениПо) Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 15 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 15) * 15;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 15) = Минута(ВремяОкончания) / 15, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 15) * 15 + 15);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 10 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 10) * 10;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 10) = Минута(ВремяОкончания) / 10, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 10) * 10 + 10);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 5 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 5) * 5;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 5) = Минута(ВремяОкончания) / 5, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 5) * 5 + 5);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
		ВремяС = КратноеОграничениеВремениС;
		
	Иначе // Кратность = 30
		
		МинутВремяНачала = ?(Минута(ВремяНачала) < 30, Час(ВремяНачала) * 60, Час(ВремяНачала) * 60 + 30);
		КратноеВремяНачала = НачалоДня(ВремяНачала) + МинутВремяНачала * 60;
		Если Минута(ВремяОкончания) <= 30 Тогда
			МинутВремяОкончания = ?(Минута(ВремяОкончания) = 0, Час(ВремяОкончания) * 60, Час(ВремяОкончания) * 60 + 30);
		Иначе
			МинутВремяОкончания = (Час(ВремяОкончания) + 1) * 60;
		КонецЕсли;
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьИнтервалы()

// Функция возвращает расписание загрузки ресурсов.
//
&НаСервере
Функция ПолучитьРасписаниеЗагрузкиРесурсов(СтруктураТЧРесурсов, СписокРесурсов, МассивДней)
	
	ТаблицаРесурсов = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.КлючевыеРесурсы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаРесурсов.Колонки.Добавить("РесурсПредприятия", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаРесурсов.Колонки.Добавить("Старт", ОписаниеТипов);
	ТаблицаРесурсов.Колонки.Добавить("Финиш", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаРесурсов.Колонки.Добавить("Мощность", ОписаниеТипов);
	
	Для каждого СтрокаРесурса Из СтруктураТЧРесурсов.ТабличнаяЧасть Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурса);
	КонецЦикла;
	ТекущийДокумент = СтруктураТЧРесурсов.Ссылка;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование
	|ПОМЕСТИТЬ ВременнаяТаблицаРесурсовПредприятия
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	(&ОтборПоКлючевомуРесурсу
	|			ИЛИ КлючевыеРесурсы.Ссылка В (&ОтборСписокКлючевыхРесурсов))
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|	ТаблицаРесурсов.Старт КАК Старт,
	|	ТаблицаРесурсов.Финиш КАК Финиш,
	|	ТаблицаРесурсов.Мощность КАК Мощность
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаявка
	|ИЗ
	|	&ТаблицаРесурсов КАК ТаблицаРесурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала КАК ОтклоненияВремяНачала,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания КАК ОтклоненияВремяОкончания,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.НеРабочийДень, ЛОЖЬ) КАК ОтклоненияНеРабочийДень
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаНачала, ) КАК ТаблицаГрафиков
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ТаблицаГрафиков.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО (ТаблицаГрафиков.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботы.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ГрафикиРаботы.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование,
	|	ВремяНачала,
	|	ВремяОкончания
	|ИТОГИ
	|	МИНИМУМ(Мощность)
	|ПО
	|	РесурсПредприятия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВложенныйЗапрос.Редактирование КАК Редактирование,
	|	ВложенныйЗапрос.Старт КАК ВремяНачала,
	|	ВложенныйЗапрос.Финиш КАК ВремяОкончания,
	|	ВложенныйЗапрос.Мощность КАК Загрузка
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЛОЖЬ КАК Редактирование,
	|			ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Мощность КАК Мощность,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Старт КАК Старт,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Финиш КАК Финиш
	|		ИЗ
	|			Документ.ЗаказНаПроизводство.РесурсыПредприятия КАК ЗаказНаПроизводствоРесурсыПредприятия
	|		ГДЕ
	|			НЕ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Проведен
	|			И НЕ ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЛОЖЬ,
	|			ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия,
	|			ЗаказПокупателяРесурсыПредприятия.Мощность,
	|			ЗаказПокупателяРесурсыПредприятия.Старт,
	|			ЗаказПокупателяРесурсыПредприятия.Финиш
	|		ИЗ
	|			Документ.ЗаказПокупателя.РесурсыПредприятия КАК ЗаказПокупателяРесурсыПредприятия
	|		ГДЕ
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			И НЕ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|			И ЗаказПокупателяРесурсыПредприятия.Ссылка.Проведен
	|			И НЕ ЗаказПокупателяРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			И ЗаказПокупателяРесурсыПредприятия.Ссылка <> &ТекущийДокумент
	|			И ЗаказПокупателяРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ЗаказПокупателяРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИСТИНА,
	|			ТаблицаРесурсов.РесурсПредприятия,
	|			ТаблицаРесурсов.Мощность,
	|			ТаблицаРесурсов.Старт,
	|			ТаблицаРесурсов.Финиш
	|		ИЗ
	|			ВременнаяТаблицаЗаявка КАК ТаблицаРесурсов
	|		ГДЕ
	|			ТаблицаРесурсов.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ТаблицаРесурсов.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ТаблицаРесурсов.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))) КАК ВложенныйЗапрос
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ВложенныйЗапрос.РесурсПредприятия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование,
	|	ВремяНачала,
	|	ВремяОкончания
	|ИТОГИ
	|	МИНИМУМ(Мощность)
	|ПО
	|	РесурсПредприятия";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаКалендаряНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКалендаряОкончание);
	Запрос.УстановитьПараметр("ОтборПоКлючевомуРесурсу", СписокРесурсов = Неопределено);
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	Запрос.УстановитьПараметр("ТаблицаРесурсов", ТаблицаРесурсов);
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // ПолучитьРасписаниеЗагрузкиРесурсов()

// Функция возвращает значение расшифровки ячейки.
//
&НаСервере
Функция ПолучитьРасшифровкуЯчейки(РесурсПредприятия, Интервал, Мощность, Загрузка = 0, Редактирование = Ложь)
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("РесурсПредприятия", РесурсПредприятия);
	СтруктураРасшифровки.Вставить("Интервал", Интервал);
	СтруктураРасшифровки.Вставить("Мощность", Мощность);
	СтруктураРасшифровки.Вставить("Загрузка", Загрузка);
	СтруктураРасшифровки.Вставить("Редактирование", Ложь);
	
	Возврат СтруктураРасшифровки;
	
КонецФункции // ПолучитьРасшифровкуЯчейки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПОДБОРОМ

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура РаботыПодбор(Команда)
	
	ИмяТабличнойЧасти 	= "Работы";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	
	ПараметрыПодбора.Вставить("ВидСкидкиНаценки", 		Объект.ВидСкидкиНаценки);
	ПараметрыПодбора.Вставить("ВидЦен", 				Объект.ВидЦен);
	Если ВидРаботВШапке Тогда
		ПараметрыПодбора.Вставить("ВидРабот", 			Объект.ВидРабот);
	КонецЕсли;
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	Объект.Организация);
	ПараметрыПодбора.Вставить("ИспользуютсяНормы",		Истина);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",	   	Объект.НалогообложениеНДС);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы.ЗНРаботыНоменклатура.ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтаФорма);
	
КонецПроцедуры // ПодборВыполнить()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ИмяТабличнойЧасти = "Работы" Тогда
			
			НоваяСтрока.КлючСвязи = УправлениеНебольшойФирмойСервер.СоздатьНовыйКлючСвязи(ЭтаФорма);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент = Объект.Контрагент;
	Договор = Объект.Договор;
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ВалютаРасчетов");
	КонецЕсли;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	ЗаказНаряд = Истина;
	ИмяТабличнойЧасти = "Работы";
	ВидРаботВШапке = Ложь;
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказов.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Параметры.Свойство("ВидОперацииЗаказНаряд") Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
			ЗаказНаряд = Истина;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
		|			ТОГДА Организации.БанковскийСчетПоУмолчанию
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК БанковскийСчет
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация");
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДокумента);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.БанковскийСчет = Выборка.БанковскийСчет;
		КонецЕсли;
		Объект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Объект.Организация);
		
		// Старт и Финиш
		Если ЗаказНаряд И НЕ (Параметры.ЗначенияЗаполнения.Свойство("Старт") ИЛИ Параметры.ЗначенияЗаполнения.Свойство("Финиш")) Тогда
			
			Объект.Старт = ТекущаяДата();
			Объект.Финиш = КонецДня(ТекущаяДата());
			ПриИзмененииСтарт = Объект.Старт;
			ПриИзмененииФиниш = Объект.Финиш;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда	
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Истина;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Истина;
		Элементы.ЗНРаботыВсего.Видимость = Истина;
	Иначе
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыВсего.Видимость = Ложь;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = "Заказ-наряд (Создание)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьРабочийКалендарь = Ложь;
	Иначе
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли; 
	ДокументМодифицирован = Ложь;
	
	// Установка периода календаря.
	ДатаКалендаря = Объект.Старт;
	ЗаполнитьПараметрыКалендаряПриСозданииНаСервере();
	ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
	ДатаКалендаряОкончание = КонецДня(ДатаКалендаря);
	
	ЦветРесурсЗанят = ЦветаСтиля.РесурсЗанят;
	ЦветРедактируется = ЦветаСтиля.ТекущийИнтервалВремени;
	
	// Заполнение таблицы (структуры) ресурсов.
	СтруктураТЧРесурсов = Новый Структура;
	МассивЗадействованныхРесурсов = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.РесурсыПредприятия Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("РесурсПредприятия", СтрокаТЧ.РесурсПредприятия);
		СтруктураСтроки.Вставить("Мощность", СтрокаТЧ.Мощность);
		СтруктураСтроки.Вставить("Длительность", СтрокаТЧ.Длительность);
		СтруктураСтроки.Вставить("Старт", СтрокаТЧ.Старт);
		СтруктураСтроки.Вставить("Финиш", СтрокаТЧ.Финиш);
		МассивЗадействованныхРесурсов.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураТЧРесурсов.Вставить("Ссылка", Объект.Ссылка);
	СтруктураТЧРесурсов.Вставить("ТабличнаяЧасть", МассивЗадействованныхРесурсов);
	
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// Обработчик механизма "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьПериодРасписанияРабот();
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Работы", Истина, Ложь);
	
		// Платежный календарь.
		ПересчитатьПлатежныйКалендарь();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ДокументМодифицирован Тогда
		ОповеститьРабочийКалендарь = Истина;
		ДокументМодифицирован = Ложь;
		
		Оповестить("ОповещениеОбИзмененииДолга");
		
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Процедура обработчик события ПередЗаписьюНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		ДокументМодифицирован = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Заголовок = "";
	АвтоЗаголовок = Истина;
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтаФорма);
	
КонецПроцедуры // ПриЗаписиНаСервере()

// Процедура - обработчик события ПередЗакрытием формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ОповеститьРабочийКалендарь И ЗаказНаряд Тогда
		Оповестить("ИзмененЗаказНаряд", Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	Если Объект.ВалютаДокумента = СтруктураДанные.БанковскийСчетВалютаДенежныхСредств Тогда
		Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
// Выполняет очистку договора и табличной части.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент);
		
		Объект.Договор = СтруктураДанные.Договор;
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> СтруктураДанные.ВидЦен 
			И ЗначениеЗаполнено(СтруктураДанные.ВидЦен);
			
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> СтруктураДанные.ВидСкидкиНаценки 
			И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки);
			
		Если ЗначениеЗаполнено(Объект.Договор) 
			И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки) Тогда
			
			ПересчетНеобходим = (Объект.Работы.Количество() > 0);
			
			Если ИзменилсяВидЦен Тогда
				
				Объект.ВидЦен = СтруктураДанные.ВидЦен;
				
			КонецЕсли; 
			
			Если ИзменилсяВидСкидки Тогда
				
				Объект.ВидСкидкиНаценки = СтруктураДанные.ВидСкидкиНаценки;
				
			КонецЕсли; 
			
			СтруктураНадписи =
				Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки, НалогообложениеНДС", 
					Объект.ВалютаДокумента, 
					ВалютаРасчетов, 
					Объект.Курс, 
					КурсНациональнаяВалюта, 
					Объект.СуммаВключаетНДС, 
					УчетВалютныхОпераций, 
					Объект.ВидЦен, 
					Объект.ВидСкидкиНаценки, 
					Объект.НалогообложениеНДС);
					
			ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			
			Если ПересчетНеобходим Тогда
			
				Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе! 
										|Пересчитать документ в соответствии с договором?'");
									
				ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение1", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные", ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные)), Сообщение, РежимДиалогаВопрос.ДаНет);
                Возврат;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		КонтрагентПриИзмененииФрагмент1(ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные);


		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
    СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;
    
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        
        УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Работы");
        
    КонецЕсли;
    
    
    КонтрагентПриИзмененииФрагмент1(ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагмент1(Знач ВалютаРасчетовПередИзменением, Знач ДоговорПередИзменением, Знач СтруктураДанные)
    
    Если (ЗначениеЗаполнено(Объект.Договор)
        И ЗначениеЗаполнено(ВалютаРасчетов)
        И Объект.Договор <> ДоговорПередИзменением
        И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
        И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
        
        Если Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
            
            Объект.БанковскийСчет = Неопределено;
            
        КонецЕсли;
        
        Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
        ПоказатьПредупреждение(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, СтруктураДанные", ВалютаРасчетовПередИзменением, СтруктураДанные)), НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! Необходимо проверить валюту документа!'"));
        Возврат;
        
    КонецЕсли;
    
    КонтрагентПриИзмененииФрагмент(СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
    
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;
    
    
    ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина);
    
    
    КонтрагентПриИзмененииФрагмент(СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагмент(Знач СтруктураДанные)
    
    ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
		
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> СтруктураДанные.ВидЦен 
			И ЗначениеЗаполнено(СтруктураДанные.ВидЦен);
			
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> СтруктураДанные.ВидСкидкиНаценки 
			И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки);
			
		Если ЗначениеЗаполнено(Объект.Договор) 
			И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки) Тогда
			
			ПересчетНеобходим = (Объект.Работы.Количество() > 0);
			
			Если ИзменилсяВидЦен Тогда
				
				Объект.ВидЦен = СтруктураДанные.ВидЦен;
				
			КонецЕсли; 
			
			Если ИзменилсяВидСкидки Тогда
				
				Объект.ВидСкидкиНаценки = СтруктураДанные.ВидСкидкиНаценки;
				
			КонецЕсли; 
			
			СтруктураНадписи =
				Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки, НалогообложениеНДС", 
					Объект.ВалютаДокумента, 
					ВалютаРасчетов, 
					Объект.Курс, 
					КурсНациональнаяВалюта, 
					Объект.СуммаВключаетНДС, 
					УчетВалютныхОпераций, 
					Объект.ВидЦен, 
					Объект.ВидСкидкиНаценки, 
					Объект.НалогообложениеНДС);
					
			ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			
			Если ПересчетНеобходим Тогда
			
				Сообщение = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе! 
										|Пересчитать документ в соответствии с договором?'");
									
				ПоказатьВопрос(Новый ОписаниеОповещения("ДоговорПриИзмененииЗавершение1", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные", ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные)), Сообщение, РежимДиалогаВопрос.ДаНет);
                Возврат;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		ДоговорПриИзмененииФрагмент(ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные);

	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзмененииЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    ДоговорПередИзменением = ДополнительныеПараметры.ДоговорПередИзменением;
    СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;
    
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        
        УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Работы");
        
    КонецЕсли;
    
    
    ДоговорПриИзмененииФрагмент(ВалютаРасчетовПередИзменением, ДоговорПередИзменением, СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзмененииФрагмент(Знач ВалютаРасчетовПередИзменением, Знач ДоговорПередИзменением, Знач СтруктураДанные)
    
    Если (ЗначениеЗаполнено(Объект.Договор)
        И ЗначениеЗаполнено(ВалютаРасчетов)
        И Объект.Договор <> ДоговорПередИзменением
        И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
        И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
        
        Если Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
            
            Объект.БанковскийСчет = Неопределено;
            
        КонецЕсли;
        
        Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
        ПоказатьПредупреждение(Новый ОписаниеОповещения("ДоговорПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением)), НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! Необходимо проверить валюту документа!'"));
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
    
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    
    
    ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина);

КонецПроцедуры // ДоговорПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СостояниеЗаказа.
//
&НаКлиенте
Процедура ЗНСостояниеЗаказаПриИзменении(Элемент)
	
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказовВызовСервера.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	
	Если Не ЗаказНарядВСостоянииВыполнения Тогда
		Объект.Предоплата.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Ресурс.
//
&НаКлиенте
Процедура ОтборКлючевойРесурсПриИзменении(Элемент)
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // ОтборКлючевойРесурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВидРесурса.
//
&НаКлиенте
Процедура ОтборВидРесурсаПриИзменении(Элемент)
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // ОтборВидРесурсаПриИзменении()

// Процедура - обработчик команды Календарь.
//
&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("ДатаКалендаря", ДатаКалендаря);
	ДатаКалендаряНачало = Неопределено;

	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДатаКалендаряНачало = Результат;
		
		ДатаКалендаря = КонецДня(ДатаКалендаряНачало);
		СформироватьПериодРасписанияРабот();
		
		СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
		ОбновитьКалендарь(СтруктураТЧРесурсов);
		
	КонецЕсли;
	
КонецПроцедуры // ПредставлениеПериодаНачалоВыбора()

// Процедура - обработчик команды УменьшитьПериод.
//
&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ДатаКалендаря = КонецДня(ДатаКалендаря - 60 * 60 * 24);
	СформироватьПериодРасписанияРабот();
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // УменьшитьПериод()

// Процедура - обработчик команды УвеличитьПериод.
//
&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ДатаКалендаря = КонецДня(ДатаКалендаря + 60 * 60 * 24);
	СформироватьПериодРасписанияРабот();
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // УвеличитьПериод()

// Процедура - обработчик команды Обновить.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // Обновить()

// Процедура - обработчик события ПриИзменении поля ввода Старт.
//
&НаКлиенте
Процедура СтартПриИзменении(Элемент)
	
	Если Объект.Старт > Объект.Финиш Тогда
		Объект.Старт = ПриИзмененииСтарт;
		Сообщить(НСтр("ru='Дата старта не может быть больше даты финиша.'"));
	Иначе
		ПриИзмененииСтарт = Объект.Старт;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Финиш.
//
&НаКлиенте
Процедура ФинишПриИзменении(Элемент)
	
	Если Час(Объект.Финиш) = 0 И Минута(Объект.Финиш) = 0 Тогда
		Объект.Финиш = КонецДня(Объект.Финиш);
	КонецЕсли;
	
	Если Объект.Финиш < Объект.Старт Тогда
		Объект.Финиш = ПриИзмененииФиниш;
		Сообщить(НСтр("ru='Дата финиша не может быть меньше даты старта.'"));
	Иначе
		ПриИзмененииФиниш = Объект.Финиш;
	КонецЕсли;
	
КонецПроцедуры // ФинишПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ЗН РАБОТЫ

/////////////////// РАБОТА С ПОДЧИНЕННЫМИ ТЧ ///////////////////////////////////

// Процедура - обработчик события ПриАктивизацииСтроки табличной части "Работы".
//
&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Работы";
	
КонецПроцедуры // РаботыПриАктивизацииСтроки()

// Процедура - обработчик события ПриНачалеРедактирования табличной части Работы.
//
&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Работы";
	Если НоваяСтрока Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // РаботыПриНачалеРедактирования()

// Процедура - обработчик события ПередУдалением табличной части Работы.
//
&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)

	ИмяТабличнойЧасти = "Работы";
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "Материалы");
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "Исполнители");
	
КонецПроцедуры // РаботыПередУдалением()

// Процедура - обработчик события ПриОкончанииРедактирования табличной части Работы.
//
&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();

КонецПроцедуры // РаботыПриОкончанииРедактирования()

// Процедура - обработчик события ПослеУдаления табличной части Работы.
//
&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();

КонецПроцедуры // РаботыПослеУдаления()

// Процедура - обработчик события ПередНачаломДобавления табличной части "Работы".
//
&НаКлиенте
Процедура РаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		КопированиеСтрокиРаботы = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

// Процедура - обработчик события ПриИзменении табличной части "Работы".
//
&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	
	Если КопированиеСтрокиРаботы = Неопределено ИЛИ НЕ КопированиеСтрокиРаботы Тогда
	Иначе
		КопированиеСтрокиРаботы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура РаботыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	ИмяТабличнойЧасти = "Работы";
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "Материалы");
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "Исполнители");
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("НормаВремени", 1);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	ИначеЕсли (НЕ ВидРаботВШапке) И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Количество = СтруктураДанные.НормаВремени;
	СтрокаТабличнойЧасти.Кратность = 1; 
	СтрокаТабличнойЧасти.Коэффициент = 1;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Содержание = "";
	
	Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) И СтруктураДанные.Свойство("Цена")) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
КонецПроцедуры // РаботыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура РаботыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("НормаВремени", 1);
	
	Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	ИначеЕсли (НЕ ВидРаботВШапке) И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Количество = СтруктураДанные.НормаВремени;
	СтрокаТабличнойЧасти.Кратность = 1; 
	СтрокаТабличнойЧасти.Коэффициент = 1; 
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен)) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
КонецПроцедуры // РаботыХарактеристикаПриИзменении()

// Процедура - обработчик события АвтоПодбор поля ввода Содержание.
//
&НаКлиенте
Процедура ЗНРаботыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		ШаблонСодержания = УправлениеНебольшойФирмойСервер.ПолучитьТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ВидРабот.
//
&НаКлиенте
Процедура РаботыВидРаботПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
	
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Компания);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
		
		СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
			
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
			
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	КонецЕсли;
	
КонецПроцедуры // РаботыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура РаботыКоэффициентПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура РаботыКратностьПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // РаботыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура РаботыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // РаботыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;	
		
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // РаботыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура РаботыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры  // РаботыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура РаботыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Всего.	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // РаботыСуммаНДСПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РЕСУРСЫ ПРЕДПРИЯТИЯ

// Процедура расчитывает значение старта и финиша.
//
&НаКлиенте
Процедура РассчитатьСтартИФинишЗаявки()
	
	МинСтарт = '00010101';
	МаксФиниш = '00010101';
	Для каждого СтрокаРесурс Из Объект.РесурсыПредприятия Цикл
		Если МинСтарт > СтрокаРесурс.Старт ИЛИ МинСтарт = '00010101' Тогда
			МинСтарт = СтрокаРесурс.Старт;
		КонецЕсли;
		Если МаксФиниш < СтрокаРесурс.Финиш ИЛИ МаксФиниш = '00010101' Тогда
			МаксФиниш = СтрокаРесурс.Финиш;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Старт = МинСтарт;
	Объект.Финиш = МаксФиниш;
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
КонецПроцедуры // РассчитатьСтартИФинишЗаявки()

// Процедура производит расчет длительности выполнения операций.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Функция РассчитатьДлительность(ТекущаяСтрока)
	
	ДлительностьВСекундах = ТекущаяСтрока.Финиш - ТекущаяСтрока.Старт;
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
	
	Возврат Длительность;
	
КонецФункции // РассчитатьДлительность()

// Получает набор данных с сервера для процедуры РесурсыПредприятияПриНачалеРедактирования.
//
&НаКлиенте
Функция ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования(СтруктураДанных)
	
	СтруктураДанных.Старт = Объект.Старт - Секунда(Объект.Старт);
	СтруктураДанных.Финиш = Объект.Финиш - Секунда(Объект.Финиш);
	
	Если ЗначениеЗаполнено(СтруктураДанных.Старт) И ЗначениеЗаполнено(СтруктураДанных.Финиш) Тогда
		Если НачалоДня(СтруктураДанных.Старт) <> НачалоДня(СтруктураДанных.Финиш) Тогда
			СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
		КонецЕсли;
		Если СтруктураДанных.Старт >= СтруктураДанных.Финиш Тогда
			СтруктураДанных.Финиш = СтруктураДанных.Старт + 1800;
			Если НачалоДня(СтруктураДанных.Финиш) <> НачалоДня(СтруктураДанных.Старт) Тогда
				Если КонецДня(СтруктураДанных.Старт) = СтруктураДанных.Старт Тогда
					СтруктураДанных.Старт = СтруктураДанных.Старт - 29 * 60;
				КонецЕсли;
				СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Старт) Тогда
		СтруктураДанных.Старт = СтруктураДанных.Старт;
		СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
		Если СтруктураДанных.Финиш = СтруктураДанных.Старт Тогда
			СтруктураДанных.Старт = НачалоДня(СтруктураДанных.Старт);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Финиш) Тогда
		СтруктураДанных.Старт = НачалоДня(СтруктураДанных.Финиш);
		СтруктураДанных.Финиш = СтруктураДанных.Финиш;
		Если СтруктураДанных.Финиш = СтруктураДанных.Старт Тогда
			СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Финиш) - 59;
		КонецЕсли;
	Иначе
		СтруктураДанных.Старт = НачалоДня(ТекущаяДата());
		СтруктураДанных.Финиш = КонецДня(ТекущаяДата()) - 59;
	КонецЕсли;
	
	ДлительностьВСекундах = СтруктураДанных.Финиш - СтруктураДанных.Старт;
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
	СтруктураДанных.Длительность = Длительность;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования()

// Процедура - обработчик события ПриНачалеРедактирования табличной части РесурсыПредприятия.
//
&НаКлиенте
Процедура РесурсыПредприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.РесурсыПредприятия.ТекущиеДанные;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Старт", '00010101');
		СтруктураДанных.Вставить("Финиш", '00010101');
		СтруктураДанных.Вставить("Длительность", '00010101');
		
		СтруктураДанных = ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования(СтруктураДанных);
		СтрокаТабличнойЧасти.Старт = СтруктураДанных.Старт;
		СтрокаТабличнойЧасти.Финиш = СтруктураДанных.Финиш;
		СтрокаТабличнойЧасти.Длительность = СтруктураДанных.Длительность;
		
		РассчитатьСтартИФинишЗаявки();
		
	КонецЕсли;
	
КонецПроцедуры // РесурсыПредприятияПриНачалеРедактирования()

// Процедура - обработчик события ПослеУдаления табличной части РесурсыПредприятия.
//
&НаКлиенте
Процедура РесурсыПредприятияПослеУдаления(Элемент)
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияПослеУдаления

// Процедура - обработчик события ПриИзменении поля ввода РесурсПредприятия.
//
&НаКлиенте
Процедура РесурсыПредприятияРесурсПредприятияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РесурсыПредприятия.ТекущиеДанные;
	СтрокаТабличнойЧасти.Мощность = 1;
	
КонецПроцедуры // РесурсыПредприятияРесурсПредприятияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода День.
//
&НаКлиенте
Процедура РесурсыПредприятияДеньПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если ТекущаяСтрока.Старт = '00010101' Тогда
		ТекущаяСтрока.Старт = ТекущаяДата();
	КонецЕсли;
	
	ФинишВСекундах = Час(ТекущаяСтрока.Финиш) * 3600 + Минута(ТекущаяСтрока.Финиш) * 60;
	ДлительностьВСекундах = Час(ТекущаяСтрока.Длительность) * 3600 + Минута(ТекущаяСтрока.Длительность) * 60;
	ТекущаяСтрока.Финиш = НачалоДня(ТекущаяСтрока.Старт) + ФинишВСекундах;
	ТекущаяСтрока.Старт = ТекущаяСтрока.Финиш - ДлительностьВСекундах;
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияДеньПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Длительность.
//
&НаКлиенте
Процедура РесурсыПредприятияДлительностьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	ДлительностьВСекундах = Час(ТекущаяСтрока.Длительность) * 3600 + Минута(ТекущаяСтрока.Длительность) * 60;
	Если ДлительностьВСекундах = 0 Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
	Иначе
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + ДлительностьВСекундах;
	КонецЕсли;
	Если НачалоДня(ТекущаяСтрока.Старт) <> НачалоДня(ТекущаяСтрока.Финиш) Тогда
		ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
	КонецЕсли;
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияДлительностьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Старт.
//
&НаКлиенте
Процедура РесурсыПредприятияСтартПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если ТекущаяСтрока.Старт = '00010101' Тогда
		ТекущаяСтрока.Старт = НачалоДня(ТекущаяСтрока.Финиш);
	КонецЕсли;
	
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияСтартПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Финиш.
//
&НаКлиенте
Процедура РесурсыПредприятияФинишПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если Час(ТекущаяСтрока.Финиш) = 0 И Минута(ТекущаяСтрока.Финиш) = 0 Тогда
		ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
	Конецесли;
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияФинишПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ДОКУМЕНТА

// Процедура - обработчик события ОбработкаРасшифровки.
//
&НаКлиенте
Процедура ЗагрузкаРесурсовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НайденоСовпадение = Ложь;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("РесурсПредприятия", Расшифровка.РесурсПредприятия);
		МассивСтрок = Объект.РесурсыПредприятия.НайтиСтроки(СтруктураПоиска);
		Для каждого ЭлМассиваСтрок Из МассивСтрок Цикл
			Если ЭлМассиваСтрок.Старт = Расшифровка.Интервал
				И ЭлМассиваСтрок.Финиш = Расшифровка.Интервал + КратностьДня * 60 
				И Не НайденоСовпадение Тогда
				ЭлМассиваСтрок.Мощность = ЭлМассиваСтрок.Мощность + 1;
				НайденоСовпадение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденоСовпадение Тогда
			НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
			НоваяСтрока.РесурсПредприятия = Расшифровка.РесурсПредприятия;
			НоваяСтрока.Мощность = 1;
			НоваяСтрока.Старт = Расшифровка.Интервал;
			НоваяСтрока.Финиш = Расшифровка.Интервал + КратностьДня * 60;
			НоваяСтрока.Длительность = РассчитатьДлительность(НоваяСтрока);
			РассчитатьСтартИФинишЗаявки();
		КонецЕсли;
		
		ОбновитьЯчейкуКалендаря(Элемент.ТекущаяОбласть.Имя, Расшифровка);
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаРесурсовОбработкаРасшифровки()

// Процедура - обработчик команды ЗадействоватьРесурс.
//
&НаКлиенте
Процедура ЗадействоватьРесурс(Команда)
	
	ИзмененСписокРесурсов = Ложь;
	ТекущаяОбластьКалендаря = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
	ПерваяСтрока = ТекущаяОбластьКалендаря.Верх;
	ПоследняяСтрока = ТекущаяОбластьКалендаря.Низ;
	ПоследняяКолонка = ТекущаяОбластьКалендаря.Право;
	Пока ПерваяСтрока <= ПоследняяСтрока Цикл
		
		СтруктураПодбора = Новый Структура;
		СтруктураПодбора.Вставить("РесурсПредприятия");
		СтруктураПодбора.Вставить("Мощность");
		СтруктураПодбора.Вставить("Старт");
		СтруктураПодбора.Вставить("Финиш");
		СтруктураПодбора.Вставить("Длительность");
		
		НовыйИнтервал = Ложь;
		ПервыйСтарт = Истина;
		ПерваяКолонка = ТекущаяОбластьКалендаря.Лево;
		Пока ПерваяКолонка <= ПоследняяКолонка Цикл
			РасшифровкаЯчейки = ЗагрузкаРесурсов.Область(ПерваяСтрока, ПерваяКолонка).Расшифровка;
			Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") Тогда
				
				Если ПервыйСтарт Тогда
					НовыйИнтервал = Истина;
					СтруктураПодбора.РесурсПредприятия = РасшифровкаЯчейки.РесурсПредприятия;
					СтруктураПодбора.Мощность = 1;
					СтруктураПодбора.Старт = РасшифровкаЯчейки.Интервал;
					
					ПервыйСтарт = Ложь;
					ИзмененСписокРесурсов = Истина;
				КонецЕсли;
				
				Если НовыйИнтервал <> Неопределено Тогда
					СтруктураПодбора.Финиш = РасшифровкаЯчейки.Интервал + КратностьДня * 60;
				КонецЕсли;
				
				ТекущаяОбластьИмя = "R" + ПерваяСтрока + "C" + ПерваяКолонка;
				ОбновитьЯчейкуКалендаря(ТекущаяОбластьИмя, РасшифровкаЯчейки);
				
			КонецЕсли;
			ПерваяКолонка = ПерваяКолонка + 1;
		КонецЦикла;
		
		Если НовыйИнтервал Тогда
			
			НайденоСовпадение = Ложь;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("РесурсПредприятия", СтруктураПодбора.РесурсПредприятия);
			МассивСтрок = Объект.РесурсыПредприятия.НайтиСтроки(СтруктураПоиска);
			Для каждого ЭлМассиваСтрок Из МассивСтрок Цикл
				Если ЭлМассиваСтрок.Старт = СтруктураПодбора.Старт
					И ЭлМассиваСтрок.Финиш = СтруктураПодбора.Финиш
					И Не НайденоСовпадение Тогда
					ЭлМассиваСтрок.Мощность = ЭлМассиваСтрок.Мощность + 1;
					НайденоСовпадение = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НайденоСовпадение Тогда
				НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
				НоваяСтрока.РесурсПредприятия = СтруктураПодбора.РесурсПредприятия;
				НоваяСтрока.Мощность = СтруктураПодбора.Мощность;
				НоваяСтрока.Старт = СтруктураПодбора.Старт;
				НоваяСтрока.Финиш = СтруктураПодбора.Финиш;
				НоваяСтрока.Длительность = РассчитатьДлительность(НоваяСтрока);
				РассчитатьСтартИФинишЗаявки();
			КонецЕсли;
			
		КонецЕсли;
		
		ПерваяСтрока = ПерваяСтрока + 1;
	КонецЦикла;
	
	Если ИзмененСписокРесурсов Тогда
		РассчитатьСтартИФинишЗаявки();
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗадействоватьРесурс()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
// Процедура-обработчик результата открытия формы "Цены и валюты"
//
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Модифицированность = Истина;
		
		Если Объект.ВалютаДокумента <> РезультатЗакрытия.ВалютаДокумента Тогда
			Объект.БанковскийСчет = Неопределено;
		КонецЕсли;
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВидСкидкиНаценки = РезультатЗакрытия.ВидСкидки;
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
		КонецЕсли;

		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ВалютаРасчетовПередИзменением, "Запасы");
			
			Если НЕ РезультатЗакрытия.ПерезаполнитьЦены Тогда
				
				УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ВалютаРасчетовПередИзменением, "Работы");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Запасы");
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Работы");
			
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
				
		КонецЦикла;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС);
			
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтаФорма,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтаФорма,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
