
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("АдресДанных", АдресДанных) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ОбновитьПараметрыФормы();
	
	УстановитьУсловноеОформление();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресДанных);
	СтруктураДанных.Свойство("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураДанных.Свойство("Ссылка", ЗаказСсылка);
	СтруктураДанных.Свойство("Дата", ДанныеЗаказа.Дата);
	СтруктураДанных.Свойство("Номер", ДанныеЗаказа.Номер);
	СтруктураДанных.Свойство("Организация", ДанныеЗаказа.Организация);
	СтруктураДанных.Свойство("ВалютаДокумента", ДанныеЗаказа.ВалютаДокумента);
	СтруктураДанных.Свойство("Курс", ДанныеЗаказа.Курс);
	СтруктураДанных.Свойство("Кратность", ДанныеЗаказа.Кратность);
	СтруктураДанных.Свойство("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанных.Свойство("СуммаВключаетНДС", ДанныеЗаказа.СуммаВключаетНДС);
	СтруктураДанных.Свойство("СпособРасчетаСебестоимостиКалькуляции", ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции);
	Если НЕ ЗначениеЗаполнено(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции) Тогда
		ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки;
	ИначеЕсли ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ВидЦен = ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции;
		ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры;
	КонецЕсли;
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов Тогда
		ВидыЦенКонтрагентов.ЗагрузитьЗначения(СтруктураДанных.ВидыЦен);
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры И СтруктураДанных.ВидыЦен.Количество()>0 Тогда
		ВидЦен = СтруктураДанных.ВидыЦен[0];
		ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = ВидЦен;
	КонецЕсли; 
	СтруктураДанных.Свойство("ШаблонКалькуляции", ДанныеЗаказа.ШаблонКалькуляции);
	СтруктураДанных.Свойство("КалькуляцияРассчитана", ДанныеЗаказа.КалькуляцияРассчитана);
	СтруктураДанных.Свойство("СкидкаПроцент", СкидкаПроцент);
	СтруктураДанных.Свойство("СкидкаСумма", СкидкаСумма);
	ДанныеЗаказа.Запасы.Загрузить(СтруктураДанных.Запасы);
	ДанныеЗаказа.Калькуляция.Загрузить(СтруктураДанных.Калькуляция);
	СоставыСпецификаций.Загрузить(СтруктураДанных.СоставыСпецификаций);
	
	СкрытьКнопкуПечати = Ложь;
	СтруктураДанных.Свойство("ПечатьКалькуляцииСкрыта", СкрытьКнопкуПечати);
	Если СкрытьКнопкуПечати Тогда
		Элементы.ФормаПечать.Видимость = Ложь;
	КонецЕсли; 
	
	ЗаполнитьВидыЦенКалькуляции();
	СостояниеОтображатьСебестоимость = ХранилищеСистемныхНастроек.Загрузить("ЗаказПокупателя", "ОтображатьСебестоимость");
	ОтображатьСебестоимость = (СостояниеОтображатьСебестоимость=Истина ИЛИ СостояниеОтображатьСебестоимость=Неопределено);
	ОтобразитьСебестоимостьСервер();
	
	ПрочитатьДанныеШаблона();
	ЗаполнитьСписокИзделий();
	ТекущаяСтрокаСостава = -1;
	Если НЕ ДанныеЗаказа.КалькуляцияРассчитана Тогда
		ОбновитьКалькуляциюСервер();
	Иначе
		ОбновитьФактическиеДанные();
		ВывестиКалькуляцию();
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ЗаказПокупателя.ТабличныеЧасти.Калькуляция, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, ДанныеЗаказа.Ссылка.Метаданные().Имя, "Калькуляция");
	// Конец ПодборНоменклатурыВДокументах
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ДанныеЗаказа.КалькуляцияРассчитана Тогда
		ПересчитатьФормулыПоШаблону();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
			
		АдресЗапасовВХранилище	= Параметр;
		ЕстьХарактеристики 		= Истина;
		ЕстьПартии			= Ложь;
		
		Если МаркерПодбора = "Калькуляция" Тогда
			
			Если НЕ ПустаяСтрока(ТекстОшибкиЖурналаРегистрации) Тогда
				ЗаписатьОшибкуЧтенияДанныхИзХранилища();
			КонецЕсли;
			
			ИмяТабличнойЧасти	= "Калькуляция";
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
			ПересчитатьФормулыПоШаблону();
			Модифицированность = Истина;
			ОбновитьНомераСтрок(КалькуляцияНаФорме);
			
		КонецЕсли;
		
		МаркерПодбора = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
		Оповещение, 
		НСтр("ru = 'Сохранить измерения калькуляции?'"), 
		РежимДиалогаВопрос.ДаНетОтмена, , 
		КодВозвратаДиалога.Да, НСтр("ru = 'Калькуляция'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ=КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрытьСервер();
		Закрыть(АдресДанных);
	ИначеЕсли Ответ=КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли; 		
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Запасы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СкидкаПроцент;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла; 
	
	Если ТекущаяСтрокаСостава<0 Тогда
		ОбновитьСкидкиСуммыНаФорме();
	КонецЕсли;
	
	РассчитатьСуммуИПроцентСкидки(ДанныеЗаказа.Запасы, СкидкаСумма, СкидкаПроцент);
	ПересчитатьФормулыПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	РаспределитьСуммуНаСкидки(СкидкаСумма);
	РассчитатьСуммуИПроцентСкидки(ДанныеЗаказа.Запасы, СкидкаСумма, СкидкаПроцент);
	ПересчитатьФормулыПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзделийПриИзменении(Элемент)
	
	Если ТекущаяСтрокаСостава=-1 Тогда
		ВывестиКалькуляциюКлиент();
	Иначе
		ВывестиКалькуляциюКлиент(ТекущаяСтрокаСостава);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСебестоимостиКалькуляцииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СпособРасчетаСебестоимостиКалькуляцииПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаСебестоимостиКалькуляцииПриИзмененииСервер()
	
	УстановитьВидимостьИДоступность();
	ОбновитьКалькуляциюСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаСебестоимостиКалькуляцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СпособРасчетаСебестоимостиКалькуляции.Подсказка = "";
	
	Если ВыбранноеЗначение=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов") Тогда
		СтандартнаяОбработка = Ложь;
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("РежимВыбора", Истина);
		СтруктураОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
		СтруктураОткрытия.Вставить("ВидыЦен", ВидыЦенКонтрагентов.ВыгрузитьЗначения());
		ОткрытьФорму("Справочник.ВидыЦенКонтрагентов.Форма.ФормаМножественногоВыбора", СтруктураОткрытия, Элементы.СпособРасчетаСебестоимостиКалькуляции);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ВидЦен = ВыбранноеЗначение;
	КонецЕсли; 
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		ВидыЦенКонтрагентов.ЗагрузитьЗначения(ВыбранноеЗначение);
		ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции = ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов");
		ОбновитьКалькуляциюСервер(Ложь);
		ЭлементВыбора = Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.НайтиПоЗначению(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции);
		Если НЕ ЭлементВыбора=Неопределено Тогда
			ЭлементВыбора.Представление = ПредставлениеЭлементаВидЦенКонтрагента(ВидыЦенКонтрагентов);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыКалькуляция

&НаКлиенте
Процедура КалькуляцияНаФормеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если ТекущаяСтрокаСостава=-1
		И СтрокаТабличнойЧасти.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас")
		И (Поле=Элементы.КалькуляцияНаФормеНоменклатура
		ИЛИ Поле=Элементы.КалькуляцияНаФормеХарактеристика
		ИЛИ Поле=Элементы.КалькуляцияНаФормеПартия) Тогда
		СтрокаЗапасов = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
		Если СтрокаЗапасов=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Идентификатор = СтрокаЗапасов.ПолучитьИдентификатор();
		Если Элементы.ТекущаяСтрокаСостава.СписокВыбора.НайтиПоЗначению(Идентификатор)=Неопределено Тогда
			Возврат;
		КонецЕсли; 
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрокаСостава = Идентификатор;
		ВывестиКалькуляциюКлиент(ТекущаяСтрокаСостава);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;	
		НачатьДобавлениеЗапаса();
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если Копирование И СтрокаТабличнойЧасти.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас") Тогда
		Отказ = Истина;	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаТабличнойЧасти = КалькуляцияНаФорме.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Количество = 1;
		СтруктураДанные = СтруктураДанныхШапки();
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанные, "Характеристика, Спецификация, ЕдиницаИзмерения, СпособПополнения, ТипНоменклатуры, ИспользоватьХарактеристики, ИспользоватьПартии");
		СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
		ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
		ВнестиИзмененияВКалькуляцию();
		ПересчитатьФормулыПоШаблону();
		Если СтруктураДанные.ИспользоватьХарактеристики Тогда
			ЭлементТаблицы = Элементы.КалькуляцияНаФормеХарактеристика;
		ИначеЕсли СтруктураДанные.ИспользоватьПартии Тогда
			ЭлементТаблицы = Элементы.КалькуляцияНаФормеПартия;
		ИначеЕсли СтруктураДанные.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Производство") Тогда
			ЭлементТаблицы = Элементы.КалькуляцияНаФормеСпецификация;
		Иначе
			ЭлементТаблицы = Элементы.КалькуляцияНаФормеКоличество;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("ПланСчетовСсылка.Управленческий") Тогда 
		СтрокаТабличнойЧасти = КалькуляцияНаФорме.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = ВыбранноеЗначение;
		ВнестиИзмененияВКалькуляцию();
		ЭлементТаблицы = Элементы.КалькуляцияНаФормеСебестоимость;
	Иначе
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти.Источник = ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Прочее");
	
	Элементы.КалькуляцияНаФорме.ТекущаяСтрока = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
	Элементы.КалькуляцияНаФорме.ТекущийЭлемент = ЭлементТаблицы;
	Элементы.КалькуляцияНаФорме.ИзменитьСтроку();
	
	ОбновитьНомераСтрок(КалькуляцияНаФорме);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.Источник = ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Прочее");
		СтрокаТабличнойЧасти.РучноеИзменение = Истина;
		Если НЕ Копирование Тогда
			Если ТекущаяСтрокаСостава=-1 И ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("ПланСчетовСсылка.Управленческий") Тогда
				СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
			ИначеЕсли ТекущаяСтрокаСостава>=0 И ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда 
				СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			КонецЕсли; 
		КонецЕсли; 
		ОбновитьНомераСтрок(КалькуляцияНаФорме);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	СтрокаТабличнойЧасти.РучноеИзменение = Истина;
	ВнестиИзмененияВКалькуляцию();
	ПересчитатьФормулыПоШаблону();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПослеУдаления(Элемент)
	
	ВнестиИзмененияВКалькуляцию();
	ПересчитатьФормулыПоШаблону();
	Модифицированность = Истина;
	ОбновитьНомераСтрок(КалькуляцияНаФорме);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если ТекущаяСтрокаСостава=-1 Тогда
		СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("ПланСчетов.Управленческий.ПустаяСсылка");
	Иначе 
		СтрокаТабличнойЧасти.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	СтрокаТабличнойЧасти.Себестоимость = 0;
	СтрокаТабличнойЧасти.СебестоимостьЕдиницы = 0;
	СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)<>Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураДанные = СтруктураДанныхШапки();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанные, "Характеристика, Спецификация, ЕдиницаИзмерения, СпособПополнения, ТипНоменклатуры, ИспользоватьХарактеристики, ИспользоватьПартии");
	СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = СтруктураДанныхШапки();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеСпецификацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаменитьСпецификацию(СтрокаТабличнойЧасти.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = СтруктураДанныхШапки();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Спецификация", СтрокаТабличнойЧасти.Спецификация);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСебестоимость(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеСебестоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма-СтрокаТабличнойЧасти.Себестоимость;
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		Если СтрокаТабличнойЧасти.Количество=0 Тогда
			СтрокаТабличнойЧасти.Количество = 1;
		КонецЕсли; 
		СтрокаТабличнойЧасти.СебестоимостьЕдиницы = СтрокаТабличнойЧасти.Себестоимость/СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСкидкуЗапасов(СтрокаТабличнойЧасти);
	РассчитатьСуммуИПроцентСкидки(ДанныеЗаказа.Запасы, СкидкаСумма, СкидкаПроцент);

КонецПроцедуры

&НаКлиенте
Процедура КалькуляцияНаФормеПередУдалением(Элемент, Отказ)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КалькуляцияОтображениеСебестоимости(Команда)
	
	ОтображатьСебестоимость = НЕ ОтображатьСебестоимость;
	ОтобразитьСебестоимостьСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапас(Команда)
	
	НачатьДобавлениеЗапаса();	
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеЗапаса()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.КалькуляцияНаФорме,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасход(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	СтруктураОтбора = Новый Структура;
	ТипыСчетов = Новый Массив;
	ТипыСчетов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы"));
	ТипыСчетов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы"));
	ТипыСчетов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСчетов.НезавершенноеПроизводство"));
	СтруктураОтбора.Вставить("ТипСчета", Новый ФиксированныйМассив(ТипыСчетов));
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("ПланСчетов.Управленческий.ФормаВыбора", ПараметрыОткрытия, Элементы.КалькуляцияНаФорме,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКалькуляцию(Команда)
	
	Модифицированность = Истина;
	ОбновитьКалькуляциюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ТолькоПросмотр Тогда
		Модифицированность = Ложь;
		Закрыть();
	Иначе
		ЗаписатьИЗакрытьСервер();
		Закрыть(АдресДанных);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ДанныеЗаказа.ШаблонКалькуляции);
	КонецЕсли; 
	ОткрытьФорму("Справочник.ШаблоныКалькуляций.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершение(Шаблон, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		ДанныеЗаказа.ШаблонКалькуляции = Шаблон;
		ЗаполнитьПоШаблонуЗавершениеСервер();
		Модифицированность = Истина;
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуЗавершениеСервер()
	
	ЗапрещеноИзменениеКалькуляции = Ложь;
	ЗаполнитьПоШаблонуСервер();
	Если ТекущаяСтрокаСостава=-1 Тогда
		ВывестиКалькуляцию();
	Иначе
		ВывестиКалькуляцию(ТекущаяСтрокаСостава);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура Печать(Команда)
	
	ЗаписатьИЗакрытьСервер(Истина);
	ВладелецФормы.ПриИзмененииКалькуляции(АдресДанных, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяККалькуляцииЗаказа(Команда)
	
	ТекущаяСтрокаСостава = -1;
	ВывестиКалькуляциюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуНоменклатуры(Команда)
	
	СтрокаТабличнойЧасти = Элементы.КалькуляцияНаФорме.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		ПоказатьЗначение(, СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПараметрыФормы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДоступныПолныеПрава", РольДоступна(Метаданные.Роли.ПолныеПрава));
	СтруктураПараметров.Вставить("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	СтруктураПараметров.Вставить("ИспользоватьПартии", ПолучитьФункциональнуюОпцию("ИспользоватьПартии") И ЗаполненРеквизитТЧ(ДанныеЗаказа.Запасы, "Партия"));
	ПараметрыФормы = Новый ФиксированнаяСтруктура(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// УО запасов
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КалькуляцияНаФорме.ТипНоменклатуры");
	Отбор.ПравоеЗначение 	= Перечисления.ТипыНоменклатуры.Запас;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеСебестоимость");
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КалькуляцияНаФорме.ИспользоватьХарактеристики");
	Отбор.ПравоеЗначение 	= Ложь;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеХарактеристика");
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КалькуляцияНаФорме.ИспользоватьПартии");
	Отбор.ПравоеЗначение 	= Ложь;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеПартия");
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КалькуляцияНаФорме.СпособПополнения");
	Отбор.ПравоеЗначение 	= Перечисления.СпособыПополненияЗапасов.Производство;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеСпецификация");
	
	// УО услуг
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КалькуляцияНаФорме.ТипНоменклатуры");
	Отбор.ПравоеЗначение 	= Перечисления.ТипыНоменклатуры.Услуга;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеСпецификация");
	
	// УО расходов
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КалькуляцияНаФорме.ТипНоменклатуры");
	Отбор.ПравоеЗначение 	= Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеСпецификация");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеХарактеристика");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеПартия");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеКоличество");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеЕдиницаИзмерения");
	
	// Строки запасов
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КалькуляцияНаФорме.Источник");
	Отбор.ПравоеЗначение 	= Перечисления.ИсточникиСтрокКалькуляции.Запас;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеНоменклатура");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеХарактеристика");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеПартия");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеКоличество");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеЕдиницаИзмерения");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеПроцентАвтоматическойСкидки");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеСебестоимость");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеСумма");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеПрибыль");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеСебестоимостьФакт");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеСтоимостьФакт");
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеПрибыльФакт");
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("КалькуляцияНаФорме.Источник");
	Отбор.ПравоеЗначение 	= Перечисления.ИсточникиСтрокКалькуляции.Запас;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("КалькуляцияНаФормеПроцентСкидкиНаценки");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	РежимПолнойКалькуляции = (ТекущаяСтрокаСостава<0);
	ЕстьФактическиеДанные = (ФактическиеДанные.Количество()>0);
	Элементы.СпособРасчетаСебестоимостиКалькуляции.Видимость = ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеХарактеристика.Видимость = ПараметрыФормы.ИспользоватьХарактеристики;
	Элементы.КалькуляцияНаФормеПартия.Видимость = РежимПолнойКалькуляции И ПараметрыФормы.ИспользоватьПартии;
	Элементы.КалькуляцияНаФормеСебестоимость.Видимость = ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеСумма.Видимость = РежимПолнойКалькуляции;
	Элементы.КалькуляцияНаФормеПроцентСкидкиНаценки.Видимость = РежимПолнойКалькуляции;
	Элементы.КалькуляцияНаФормеПроцентАвтоматическойСкидки.Видимость = РежимПолнойКалькуляции;
	Элементы.КалькуляцияНаФормеПрибыль.Видимость = РежимПолнойКалькуляции И ОтображатьСебестоимость;
	Элементы.КалькуляцияНаФормеДобавитьРасход.Видимость = РежимПолнойКалькуляции;
	Элементы.КалькуляцияНаФормеЗаполнитьПоШаблону.Видимость = РежимПолнойКалькуляции;
	Элементы.КалькуляцияНаФормеГруппаФакт.Видимость = РежимПолнойКалькуляции И ЕстьФактическиеДанные И ОтображатьСебестоимость;
	
	
	Элементы.ГруппаПодвалСкидки.Видимость = РежимПолнойКалькуляции;
	Элементы.ДекорацияЗаголовокСебестоимость.Видимость = ОтображатьСебестоимость;
	Элементы.ИтогоСебестоимость.Видимость = ОтображатьСебестоимость;
	Элементы.ИтогоСебестоимостьФакт.Видимость = ОтображатьСебестоимость;
	Элементы.ДекорацияЗаголовокПрибыль.Видимость = ОтображатьСебестоимость;
	Элементы.ИтогоПрибыль.Видимость = ОтображатьСебестоимость;
	Элементы.ИтогоПрибыльФакт.Видимость = ОтображатьСебестоимость;
	
	Элементы.КалькуляцияОтображениеСебестоимости.Картинка = ?(ОтображатьСебестоимость, БиблиотекаКартинок.ВидимостьРазрешена, БиблиотекаКартинок.ВидимостьЗапрещена);
	
	Элементы.КалькуляцияНаФорме.ТолькоПросмотр = ЗапрещеноИзменениеКалькуляции ИЛИ ТолькоПросмотр;
	Элементы.КалькуляцияНаФормеДобавитьЗапас.Доступность = НЕ ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр;
	Элементы.КалькуляцияНаФормеДобавитьРасход.Доступность = НЕ ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр;
	Элементы.КалькуляцияНаФормеПодбор.Доступность = НЕ ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр;
	Если Элементы.Найти("КалькуляцияНаФормеЗагрузкаДанныхИзВнешнегоИсточника")<>Неопределено Тогда
		Элементы.КалькуляцияНаФормеЗагрузкаДанныхИзВнешнегоИсточника.Доступность = НЕ ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр;
	КонецЕсли; 
	Элементы.КалькуляцияНаФормеЗаполнитьПоШаблону.Доступность = НЕ ТолькоПросмотр;
	Элементы.КалькуляцияНаФорме.ЦветТекста = ?(ЗапрещеноИзменениеКалькуляции И НЕ ТолькоПросмотр, ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти, Новый Цвет);
	Элементы.СпособРасчетаСебестоимостиКалькуляции.Доступность = НЕ ТолькоПросмотр;
	Элементы.КалькуляцияНаФормеОбновитьКалькуляцию.Доступность = НЕ ТолькоПросмотр;
	Элементы.СкидкаПроцент.Доступность = НЕ ТолькоПросмотр;
	Элементы.СкидкаСумма.Доступность = НЕ ТолькоПросмотр;
	Элементы.СохранитьИзменения.Заголовок = ?(ТолькоПросмотр, НСтр("ru = 'Закрыть'"), НСтр("ru = 'Записать и закрыть'"));
	
	Элементы.ВернутьсяККалькуляцииЗаказа.Видимость = (ТекущаяСтрокаСостава>=0);
	
	Элементы.КалькуляцияНаФормеЗаполнитьПоШаблону.Заголовок =
	?(ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции),
	НСтр("ru = 'Использовать другой шаблон'"),
	НСтр("ru = 'Добавить по шаблону'"));
	
	Элементы.ГруппаИтогиФакт.Видимость = ЕстьФактическиеДанные;
	Элементы.ДекорацияФактЗаголовок.Видимость = ЕстьФактическиеДанные;
	Элементы.ДекорацияСкидкиОтступ.Видимость = ЕстьФактическиеДанные;
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьВидыЦенКалькуляции()
	
	Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.Очистить();
	Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.Добавить(Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки, НСтр("ru = 'последней цене закупки'"));
	
	Если ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов") Тогда
		Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.Добавить(
		Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов, 
		ПредставлениеЭлементаВидЦенКонтрагента(ВидыЦенКонтрагентов));
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка,
	|	ВидыЦен.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	НЕ ВидыЦен.ПометкаУдаления
	|	И НЕ ВидыЦен.РассчитыватьАвтоматически
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Выборка  =Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы.СпособРасчетаСебестоимостиКалькуляции.СписокВыбора.Добавить(Выборка.Ссылка, НСтр("ru = 'виду цен '")+""""+СокрЛП(Выборка.Наименование)+"""");	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЭлементаВидЦенКонтрагента(ВидыЦенКонтрагентов)
	
	Результат = НСтр("ru = 'цене поставщиков'")+?(ВидыЦенКонтрагентов.Количество()=0, "", " ("+Строка(ВидыЦенКонтрагентов)+")");	
	Если СтрДлина(Результат)>60 Тогда
		Результат = Лев(Результат, 58)+"...";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьСписокИзделий()
	
	Элементы.ТекущаяСтрокаСостава.СписокВыбора.Очистить();
	Элементы.ТекущаяСтрокаСостава.СписокВыбора.Добавить(-1, НСтр("ru = 'Калькуляция всего заказа'"));
	
	ТаблицаЗапасов = Новый ТаблицаЗначений;
	ТаблицаЗапасов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗапасов.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаЗапасов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	ТаблицаЗапасов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаЗапасов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Для каждого Стр Из ДанныеЗаказа.Запасы Цикл
		ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
		НоваяСтрока = ТаблицаЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Идентификатор = ИдентификаторСтроки;
		НоваяСтрока.Сумма = Стр.Всего;
		НоваяСтрока.Представление = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Стр.Номенклатура, Стр.Характеристика);
	КонецЦикла;                                                                                                                                                                                                      
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Запасы", ТаблицаЗапасов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Запасы.Идентификатор,
	|	Запасы.Сумма,
	|	Запасы.Представление,
	|	ВЫРАЗИТЬ(Запасы.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Запасы.Спецификация КАК Справочник.Спецификации) КАК Спецификация
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.Идентификатор,
	|	Запасы.Сумма,
	|	Запасы.Представление,
	|	Запасы.Спецификация
	|ИЗ
	|	Запасы КАК Запасы
	|ГДЕ
	|	(Запасы.Номенклатура.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Производство)
	|			ИЛИ НЕ Запасы.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка))";
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат.Получить(1).Выбрать();
	Пока Выборка.Следующий() Цикл
		Элементы.ТекущаяСтрокаСостава.СписокВыбора.Добавить(Выборка.Идентификатор, Выборка.Представление);
	КонецЦикла;
	
	Элементы.ТекущаяСтрокаСостава.Видимость = (Элементы.ТекущаяСтрокаСостава.СписокВыбора.Количество()>1);
	Если НЕ Элементы.ТекущаяСтрокаСостава.Видимость Тогда
		ТекущаяСтрокаСостава = -1;
	КонецЕсли; 
	
КонецПроцедуры

#Область Итоги

&НаКлиенте
Процедура ОбновитьИтогиКлиент()
	
	Если ТекущаяСтрокаСостава<0 Тогда
		ИтогоСтоимость = 0;
		Для каждого Стр Из ДанныеЗаказа.Запасы Цикл
			ИтогоСтоимость = ИтогоСтоимость+Стр.Всего;
		КонецЦикла;
		ИтогоСебестоимость = 0;
		Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
			ИтогоСебестоимость = ИтогоСебестоимость+Стр.Себестоимость;
		КонецЦикла; 
		ИтогоСебестоимостьФакт = 0;
		ИтогоСтоимостьФакт = 0;
		ИтогоПрибыльФакт = 0;
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			ИтогоСебестоимостьФакт = ИтогоСебестоимостьФакт+Стр.СебестоимостьФакт;
			ИтогоСтоимостьФакт = ИтогоСтоимостьФакт+Стр.СтоимостьФакт;
			ИтогоПрибыльФакт = ИтогоПрибыльФакт+Стр.ПрибыльФакт;
		КонецЦикла; 
	Иначе
		СтрокаЗапасы = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаСостава);
		ИтогоСтоимость = СтрокаЗапасы.Всего;
		ИтогоСебестоимость = 0;
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			ИтогоСебестоимость = ИтогоСебестоимость+Стр.Себестоимость;
		КонецЦикла;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаЗапасы.Номенклатура);
		СтрокиФакт = ФактическиеДанные.НайтиСтроки(СтруктураОтбора);
		СтрокиБазы = ДанныеЗаказа.Запасы.НайтиСтроки(СтруктураОтбора);
		БазаКоличество = 0;
		Для каждого СтрокаБазы Из СтрокиБазы Цикл
			БазаКоличество = БазаКоличество+СтрокаБазы.Количество;
		КонецЦикла; 
		Если СтрокиФакт.Количество()>0 Тогда
			СтрокаФакт = СтрокиФакт[0];
			ИтогоСебестоимостьФакт = ?(БазаКоличество=0, 0, СтрокаФакт.СебестоимостьФакт/БазаКоличество*СтрокаЗапасы.Количество);
			ИтогоСтоимостьФакт = ?(БазаКоличество=0, 0, СтрокаФакт.СтоимостьФакт/БазаКоличество*СтрокаЗапасы.Количество);
		Иначе
			ИтогоСебестоимостьФакт = 0;
			ИтогоСтоимостьФакт = 0;
		КонецЕсли; 
		ИтогоПрибыльФакт = ИтогоСтоимостьФакт-ИтогоСебестоимостьФакт;
	КонецЕсли; 
	ИтогоПрибыль = ИтогоСтоимость-ИтогоСебестоимость;	
	
КонецПроцедуры
 
&НаСервере
Процедура ОбновитьИтогиСервер()
	
	Если ТекущаяСтрокаСостава<0 Тогда
		ИтогоСтоимость = ДанныеЗаказа.Запасы.Итог("Всего");	
		ИтогоСебестоимость = ДанныеЗаказа.Калькуляция.Итог("Себестоимость");	
		ИтогоСебестоимостьФакт = КалькуляцияНаФорме.Итог("СебестоимостьФакт");
		ИтогоСтоимостьФакт = КалькуляцияНаФорме.Итог("СтоимостьФакт");
		ИтогоПрибыльФакт = КалькуляцияНаФорме.Итог("ПрибыльФакт");
	Иначе
		СтрокаЗапасы = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаСостава);
		ИтогоСтоимость = СтрокаЗапасы.Всего;
		ИтогоСебестоимость = КалькуляцияНаФорме.Итог("Себестоимость");
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаЗапасы.Номенклатура);
		СтрокиФакт = ФактическиеДанные.НайтиСтроки(СтруктураОтбора);
		СтрокиБазы = ДанныеЗаказа.Запасы.НайтиСтроки(СтруктураОтбора);
		БазаКоличество = 0;
		Для каждого СтрокаБазы Из СтрокиБазы Цикл
			БазаКоличество = БазаКоличество+СтрокаБазы.Количество;
		КонецЦикла; 
		Если СтрокиФакт.Количество()>0 Тогда
			СтрокаФакт = СтрокиФакт[0];
			ИтогоСебестоимостьФакт = ?(БазаКоличество=0, 0, СтрокаФакт.СебестоимостьФакт/БазаКоличество*СтрокаЗапасы.Количество);
			ИтогоСтоимостьФакт = ?(БазаКоличество=0, 0, СтрокаФакт.СтоимостьФакт/БазаКоличество*СтрокаЗапасы.Количество);
		Иначе
			ИтогоСебестоимостьФакт = 0;
			ИтогоСтоимостьФакт = 0;
		КонецЕсли; 
		ИтогоПрибыльФакт = ИтогоСтоимостьФакт-ИтогоСебестоимостьФакт;
	КонецЕсли; 
	ИтогоПрибыль = ИтогоСтоимость-ИтогоСебестоимость;	
	
КонецПроцедуры

#КонецОбласти 

#Область Скидки

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуИПроцентСкидки(Запасы, СкидкаСумма, СкидкаПроцент)
	
	ОбщаяСуммаРучнойСкидки	= 0;
	ОбщаяСуммаБезСкидок		= 0;
	Для каждого Стр Из Запасы Цикл
		
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + Стр.Цена * Стр.Количество;
		Если Стр.ПроцентСкидкиНаценки = 0 Тогда
			Продолжить;
		ИначеЕсли Стр.Свойство("ПроцентАвтоматическойСкидки") Тогда
			ОбщаяСуммаРучнойСкидки = ОбщаяСуммаРучнойСкидки + Стр.Цена * Стр.Количество * (1 - Стр.ПроцентАвтоматическойСкидки / 100) - Стр.Сумма;
		Иначе
			ОбщаяСуммаРучнойСкидки = ОбщаяСуммаРучнойСкидки + Стр.Цена * Стр.Количество - Стр.Сумма;
		КонецЕсли; 
		
	КонецЦикла;
	
	СкидкаСумма = ОбщаяСуммаРучнойСкидки;
	СкидкаПроцент = ?(ОбщаяСуммаБезСкидок=0, 0, ОбщаяСуммаРучнойСкидки / ОбщаяСуммаБезСкидок * 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСкидкуЗапасов(СтрокаТабличнойЧасти)
	
	СтрокаЗапаса = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
	СтрокаЗапаса.ПроцентСкидкиНаценки = СтрокаТабличнойЧасти.ПроцентСкидкиНаценки;
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаЗапаса);
	СтрокаТабличнойЧасти.Сумма = СтрокаЗапаса.Всего;
	СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма-СтрокаТабличнойЧасти.Себестоимость;

КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСуммуНаСкидки(СуммаРаспределения)
	
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Запасы Цикл
		ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	КонецЦикла;
	
	Если ОбщаяСумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентСкидки = СуммаРаспределения / ОбщаяСумма * 100;
	
	ОбщаяСуммаСкидки = 0;
	ОбщаяСуммаБезСкидок = 0;
	ПоследняяСтрока = Неопределено;
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Запасы Цикл
		
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидки;
		СтрокаТабличнойЧасти.Сумма = (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество) * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
		
		ОбщаяСуммаСкидки = ОбщаяСуммаСкидки + (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.Сумма);
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки;
		
		ПоследняяСтрока = СтрокаТабличнойЧасти;
	КонецЦикла;
	
	НепогашеннаяСумма = СуммаРаспределения - ОбщаяСуммаСкидки;
	Если НепогашеннаяСумма <> 0 Тогда
		СуммаСтрокиБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		ПоследняяСтрока.ПроцентСкидкиНаценки = (СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки/100 
			+ НепогашеннаяСумма) / СуммаСтрокиБезСкидки * 100;
			
		ПоследняяСтрока.Сумма = ПоследняяСтрока.Сумма - НепогашеннаяСумма;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеЗаказа.Запасы Цикл
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		СтрокаТабличнойЧасти.СуммаНДС = ?(ДанныеЗаказа.СуммаВключаетНДС, 
										  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
										  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ДанныеЗаказа.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЦикла; 
	
	Если ТекущаяСтрокаСостава<0 Тогда
		ОбновитьСкидкиСуммыНаФорме();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСкидкиСуммыНаФорме()
	
	Для каждого СтрокаТабличнойЧасти Из КалькуляцияНаФорме Цикл
		Если СтрокаТабличнойЧасти.Источник<>ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Запас") Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаЗапаса = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
		Если СтрокаЗапаса=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтрокаЗапаса.ПроцентСкидкиНаценки;
		СтрокаТабличнойЧасти.Сумма = СтрокаЗапаса.Всего;
		СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма-СтрокаТабличнойЧасти.Себестоимость;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - (СтрокаТабличнойЧасти.ПроцентСкидкиНаценки+СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки) / 100);
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СтрокаТабличнойЧасти.СуммаНДС = ?(ДанныеЗаказа.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ДанныеЗаказа.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры
 
#КонецОбласти 

&НаСервере
Процедура ОбновитьКалькуляциюСервер(ОбновлятьПоШаблону = Истина)
	
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры И НЕ ЗначениеЗаполнено(ВидЦен) Тогда
		Возврат;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов И НЕ ЗначениеЗаполнено(ВидыЦенКонтрагентов) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрещеноИзменениеКалькуляции = Ложь;
	Буфер = ТекущаяСтрокаСостава;
	ТекущаяСтрокаСостава = -1;
	ЗаполнитьКалькуляцию();
	ОбновитьФактическиеДанные();
	Если ОбновлятьПоШаблону Тогда
		ЗаполнитьПоШаблонуСервер();
	КонецЕсли; 
	ТекущаяСтрокаСостава = Буфер;
	Если ТекущаяСтрокаСостава=-1 Тогда
		ВывестиКалькуляцию();
	Иначе
		ВывестиКалькуляцию(ТекущаяСтрокаСостава);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКалькуляцию()
	
	// Формирование служебных таблиц запасов
	ТаблицаЗапасов = ДанныеЗаказа.Запасы.Выгрузить(, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество").СкопироватьКолонки();
	ТаблицаЗапасов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Для каждого Стр Из ДанныеЗаказа.Запасы Цикл
		ИдентификаторСтроки = Стр.ПолучитьИдентификатор();
		НоваяСтрока = ТаблицаЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Идентификатор = ИдентификаторСтроки;
	КонецЦикла;
	
	ТаблицаМатериалов = ПустаяТаблицаМатериалов();
	ЗаполнитьТаблицуМатериалов(ТаблицаМатериалов);
	ОтборВидЦен = ОтборПоВидуЦен();
	РассчитатьСебестоимость(ТаблицаМатериалов, ОтборВидЦен, ДанныеЗаказа.Курс, ДанныеЗаказа.Кратность, ДанныеЗаказа.НалогообложениеНДС, ДанныеЗаказа.Дата, ЗаказСсылка);
	
	СтрокиКУдалению = Новый Массив;
	Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
		Если ЗначениеЗаполнено(Стр.НоменклатураИзделие) Тогда
			СтрокиКУдалению.Добавить(Стр);
		ИначеЕсли ТипЗнч(Стр.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
			СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
			СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
			СтруктураДанные.Вставить("Курс", ДанныеЗаказа.Курс);
			СтруктураДанные.Вставить("Кратность", ДанныеЗаказа.Кратность);
			СтруктураДанные.Вставить("ВидыЦен", ОтборВидЦен);
			СтруктураДанные.Вставить("Номенклатура", Стр.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", Стр.Характеристика);
			СтруктураДанные.Вставить("Спецификация", Стр.Спецификация);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", Стр.ЕдиницаИзмерения);
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			Стр.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
			Стр.Себестоимость = Стр.СебестоимостьЕдиницы*Стр.Количество;
		КонецЕсли; 
	КонецЦикла; 
	Для каждого Стр Из СтрокиКУдалению Цикл
		ДанныеЗаказа.Калькуляция.Удалить(Стр);
	КонецЦикла; 
	
	Для каждого Стр Из ТаблицаМатериалов Цикл
		СтрокаЗапаса = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(Стр.Идентификатор);
		Если СтрокаЗапаса=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, СебестоимостьЕдиницы, Себестоимость");
		НоваяСтрока.НоменклатураИзделие = СтрокаЗапаса.Номенклатура;
		НоваяСтрока.ХарактеристикаИзделие = СтрокаЗапаса.Характеристика;
		НоваяСтрока.СпецификацияИзделие = СтрокаЗапаса.Спецификация;
		НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас;
		НоваяСтрока.КлючСвязи = СтрокаЗапаса.КлючСвязи;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСпецификацию(ИдентификаторСтроки)
	
	СтрокаТабличнойЧасти = КалькуляцияНаФорме.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТаблицаМатериалов = ПустаяТаблицаМатериалов();
	ЗаполнитьТаблицуМатериалов(ТаблицаМатериалов, ИдентификаторСтроки);
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки Тогда
		ОтборВидЦен = Неопределено;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры 
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ОтборВидЦен = ВидЦен;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов Тогда
		ОтборВидЦен = ВидыЦенКонтрагентов;
	Иначе
		ОтборВидЦен = Неопределено;
	КонецЕсли; 
	РассчитатьСебестоимость(ТаблицаМатериалов, ОтборВидЦен, ДанныеЗаказа.Курс, ДанныеЗаказа.Кратность, ДанныеЗаказа.НалогообложениеНДС, ДанныеЗаказа.Дата, ЗаказСсылка);
	
	Если ТекущаяСтрокаСостава<0 Тогда
		
		СтрокаЗапаса = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрокаТабличнойЧасти.КлючСвязи);
		СтрокаЗапаса.Спецификация = СтрокаТабличнойЧасти.Спецификация;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		СтрокиКУдалению = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора); 
		Для каждого Стр Из СтрокиКУдалению Цикл
			ДанныеЗаказа.Калькуляция.Удалить(Стр);
		КонецЦикла;
		
		Для каждого Стр Из ТаблицаМатериалов Цикл
			НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, СебестоимостьЕдиницы, Себестоимость");
			НоваяСтрока.НоменклатураИзделие = СтрокаЗапаса.Номенклатура;
			НоваяСтрока.ХарактеристикаИзделие = СтрокаЗапаса.Характеристика;
			НоваяСтрока.СпецификацияИзделие = СтрокаЗапаса.Спецификация;
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас;
			НоваяСтрока.КлючСвязи = СтрокаЗапаса.КлючСвязи;
		КонецЦикла;
		
		СтрокаТабличнойЧасти.Себестоимость = ТаблицаМатериалов.Итог("Себестоимость");
		СтрокаТабличнойЧасти.СебестоимостьЕдиницы = ?(СтрокаТабличнойЧасти.Количество=0, 0, СтрокаТабличнойЧасти.Себестоимость/СтрокаТабличнойЧасти.Количество);
		СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма-СтрокаТабличнойЧасти.Себестоимость;
		
	Иначе
		
		СтрокаТабличнойЧасти.Себестоимость = ТаблицаМатериалов.Итог("Себестоимость");
		СтрокаТабличнойЧасти.СебестоимостьЕдиницы = ?(СтрокаТабличнойЧасти.Количество=0, 0, СтрокаТабличнойЧасти.Себестоимость/СтрокаТабличнойЧасти.Количество);
		
	КонецЕсли;
 
	ОбновитьИтогиСервер();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьСебестоимость(ТаблицаМатериалов, ВидыЦен, Курс, Кратность, НалогообложениеНДС, Дата, Ссылка, ВыводитьОшибки = Истина)
	
	Если ТипЗнч(ВидыЦен)=Тип("СписокЗначений") Тогда
		ПараметрВидыЦен = ВидыЦен.ВыгрузитьЗначения();
		СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов;
	ИначеЕсли ТипЗнч(ВидыЦен)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ПараметрВидыЦен = Новый Массив;
		ПараметрВидыЦен.Добавить(ВидыЦен);
		СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры;
	Иначе
		ПараметрВидыЦен = Новый Массив;
		СпособРасчета = Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки;
	КонецЕсли; 
	
	// Расчет себестоимости и стоимости расходов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыЦен", ПараметрВидыЦен);
	Запрос.УстановитьПараметр("СпособРасчета", СпособРасчета);
	Запрос.УстановитьПараметр("ТаблицаМатериалов", ТаблицаМатериалов);
	Запрос.УстановитьПараметр("Курс", Курс);
	Запрос.УстановитьПараметр("Кратность", Кратность);
	Запрос.УстановитьПараметр("УчитыватьНДС", (НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС));
	Если Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("Период", Дата);
	КонецЕсли; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМатериалов.Идентификатор,
	|	ВЫРАЗИТЬ(ТаблицаМатериалов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика,
	|	ТаблицаМатериалов.Спецификация,
	|	ТаблицаМатериалов.ЕдиницаИзмерения,
	|	ТаблицаМатериалов.Количество,
	|	ВЫРАЗИТЬ(ТаблицаМатериалов.НоменклатураСебестоимость КАК Справочник.Номенклатура) КАК НоменклатураСебестоимость,
	|	ТаблицаМатериалов.ХарактеристикаСебестоимость,
	|	ТаблицаМатериалов.ЕдиницаИзмеренияСебестоимость,
	|	ТаблицаМатериалов.КоличествоСебестоимость
	|ПОМЕСТИТЬ ТаблицаМатериалов
	|ИЗ
	|	&ТаблицаМатериалов КАК ТаблицаМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалов.Идентификатор,
	|	ТаблицаМатериалов.Номенклатура,
	|	ТаблицаМатериалов.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаМатериалов.Характеристика,
	|	ТаблицаМатериалов.Спецификация,
	|	ТаблицаМатериалов.ЕдиницаИзмерения,
	|	ТаблицаМатериалов.Количество,
	|	ТаблицаМатериалов.НоменклатураСебестоимость,
	|	ТаблицаМатериалов.НоменклатураСебестоимость.ТипНоменклатуры КАК ТипНоменклатурыСебестоимость,
	|	ТаблицаМатериалов.ХарактеристикаСебестоимость,
	|	ТаблицаМатериалов.ЕдиницаИзмеренияСебестоимость,
	|	ТаблицаМатериалов.КоличествоСебестоимость
	|ПОМЕСТИТЬ Материалы
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Материалы.Идентификатор,
	|	Материалы.Номенклатура,
	|	Материалы.ТипНоменклатуры,
	|	Материалы.Номенклатура.СпособПополнения КАК СпособПополнения,
	|	Материалы.Характеристика,
	|	Материалы.Спецификация,
	|	Материалы.ЕдиницаИзмерения,
	|	Материалы.Количество,
	|	СУММА(ЕСТЬNULL(Цены.Цена / &Курс * &Кратность, 0) * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Материалы.ЕдиницаИзмеренияСебестоимость) = ТИП(Справочник.ЕдиницыИзмерения)
	|				ТОГДА ВЫРАЗИТЬ(Материалы.ЕдиницаИзмеренияСебестоимость КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ * Материалы.КоличествоСебестоимость) КАК Себестоимость,
	|	Материалы.НоменклатураСебестоимость,
	|	Материалы.ХарактеристикаСебестоимость
	|ПОМЕСТИТЬ МатериалыСебестоимость
	|ИЗ
	|	Материалы КАК Материалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Закупки.Номенклатура КАК Номенклатура,
	|			Закупки.Характеристика КАК Характеристика,
	|			МИНИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА Закупки.Количество = 0
	|							ТОГДА 0
	|						ИНАЧЕ Закупки.Сумма * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / Закупки.Количество
	|					КОНЕЦ КАК ЧИСЛО(15, 2))) КАК Цена
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Закупки.Номенклатура КАК Номенклатура,
	|				Закупки.Характеристика КАК Характеристика,
	|				МАКСИМУМ(Закупки.Период) КАК Период
	|			ИЗ
	|				РегистрНакопления.Закупки КАК Закупки
	|			ГДЕ
	|				Закупки.Период < &Период
	|				И (Закупки.Номенклатура, Закупки.Характеристика) В
	|						(ВЫБРАТЬ
	|							Материалы.НоменклатураСебестоимость,
	|							Материалы.ХарактеристикаСебестоимость
	|						ИЗ
	|							Материалы КАК Материалы
	|						ГДЕ
	|							&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки)
	|							И НЕ Материалы.ТипНоменклатурыСебестоимость = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Закупки.Номенклатура,
	|				Закупки.Характеристика) КАК ПоследниеЗакупки
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	|				ПО (Закупки.Номенклатура = ПоследниеЗакупки.Номенклатура)
	|					И (Закупки.Характеристика = ПоследниеЗакупки.Характеристика)
	|					И (Закупки.Период = ПоследниеЗакупки.Период),
	|			РегистрСведений.КурсыВалют.СрезПоследних(
	|					&Период,
	|					Валюта В
	|						(ВЫБРАТЬ
	|							ВалютаУчета.Значение
	|						ИЗ
	|							Константа.ВалютаУчета КАК ВалютаУчета)) КАК КурсыВалютСрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Закупки.Номенклатура,
	|			Закупки.Характеристика
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|			ЦеныНоменклатурыСрезПоследних.Характеристика,
	|			ЦеныНоменклатурыСрезПоследних.Цена * ВЫБОР
	|				КОГДА НЕ ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС
	|						И &УчитыватьНДС
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.СтавкаНДС.Ставка / 100 + 1
	|				ИНАЧЕ 1
	|			КОНЕЦ / ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|					ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|				ИНАЧЕ 1
	|			КОНЕЦ * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|					&Период,
	|					(&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры)
	|							И ВидЦен В (&ВидыЦен)
	|						ИЛИ Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)
	|							И ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.Учетная))
	|						И (Номенклатура, Характеристика) В
	|							(ВЫБРАТЬ
	|								Материалы.НоменклатураСебестоимость,
	|								Материалы.ХарактеристикаСебестоимость
	|							ИЗ
	|								Материалы КАК Материалы
	|							ГДЕ
	|								(&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры)
	|									ИЛИ Материалы.НоменклатураСебестоимость.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция)))) КАК ЦеныНоменклатурыСрезПоследних
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|				ПО ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика,
	|			МИНИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена * ВЫБОР
	|					КОГДА НЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ЦенаВключаетНДС
	|							И &УчитыватьНДС
	|						ТОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.СтавкаНДС.Ставка / 100 + 1
	|					ИНАЧЕ 1
	|				КОНЕЦ / ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|						ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
	|					ИНАЧЕ 1
	|				КОНЕЦ * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность)
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК Номенклатура,
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика КАК Характеристика,
	|				МАКСИМУМ(ЦеныНоменклатурыКонтрагентовСрезПоследних.Период) КАК Период
	|			ИЗ
	|				РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|						&Период,
	|						&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов)
	|							И ВидЦенКонтрагента В (&ВидыЦен)
	|							И (Номенклатура, Характеристика) В
	|								(ВЫБРАТЬ
	|									Материалы.НоменклатураСебестоимость,
	|									Материалы.ХарактеристикаСебестоимость
	|								ИЗ
	|									Материалы КАК Материалы
	|								ГДЕ
	|									&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов)
	|									И НЕ Материалы.ТипНоменклатурыСебестоимость = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|				ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика) КАК ПоследниеЦены
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|						&Период,
	|						&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов)
	|							И ВидЦенКонтрагента В (&ВидыЦен)
	|							И (Номенклатура, Характеристика) В
	|								(ВЫБРАТЬ
	|									Материалы.НоменклатураСебестоимость,
	|									Материалы.ХарактеристикаСебестоимость
	|								ИЗ
	|									Материалы КАК Материалы
	|								ГДЕ
	|									&СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов)
	|									И НЕ Материалы.ТипНоменклатурыСебестоимость = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Операция))) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|					ПО ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
	|				ПО (ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура = ПоследниеЦены.Номенклатура)
	|					И (ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика = ПоследниеЦены.Характеристика)
	|					И (ЦеныНоменклатурыКонтрагентовСрезПоследних.Период = ПоследниеЦены.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика) КАК Цены
	|		ПО Материалы.НоменклатураСебестоимость = Цены.Номенклатура
	|			И Материалы.ХарактеристикаСебестоимость = Цены.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	Материалы.Идентификатор,
	|	Материалы.Номенклатура,
	|	Материалы.ТипНоменклатуры,
	|	Материалы.Номенклатура.СпособПополнения,
	|	Материалы.Характеристика,
	|	Материалы.Спецификация,
	|	Материалы.ЕдиницаИзмерения,
	|	Материалы.Количество,
	|	Материалы.НоменклатураСебестоимость,
	|	Материалы.ХарактеристикаСебестоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыСебестоимость.НоменклатураСебестоимость,
	|	МатериалыСебестоимость.ХарактеристикаСебестоимость
	|ИЗ
	|	МатериалыСебестоимость КАК МатериалыСебестоимость
	|ГДЕ
	|	МатериалыСебестоимость.Себестоимость = 0
	|	И МатериалыСебестоимость.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыСебестоимость.НоменклатураСебестоимость,
	|	МатериалыСебестоимость.ХарактеристикаСебестоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыСебестоимость.Идентификатор,
	|	МатериалыСебестоимость.Номенклатура КАК Номенклатура,
	|	МатериалыСебестоимость.ТипНоменклатуры,
	|	МатериалыСебестоимость.СпособПополнения,
	|	МатериалыСебестоимость.Характеристика,
	|	МатериалыСебестоимость.Спецификация,
	|	МатериалыСебестоимость.ЕдиницаИзмерения,
	|	МатериалыСебестоимость.Количество,
	|	СУММА(МатериалыСебестоимость.Себестоимость) КАК Себестоимость,
	|	ВЫБОР
	|		КОГДА МатериалыСебестоимость.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(МатериалыСебестоимость.Себестоимость) / МатериалыСебестоимость.Количество
	|	КОНЕЦ КАК СебестоимостьЕдиницы
	|ИЗ
	|	МатериалыСебестоимость КАК МатериалыСебестоимость
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыСебестоимость.Количество,
	|	МатериалыСебестоимость.Спецификация,
	|	МатериалыСебестоимость.ТипНоменклатуры,
	|	МатериалыСебестоимость.Номенклатура,
	|	МатериалыСебестоимость.ЕдиницаИзмерения,
	|	МатериалыСебестоимость.Характеристика,
	|	МатериалыСебестоимость.СпособПополнения,
	|	МатериалыСебестоимость.Идентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаМатериалов = Результат.Получить(4).Выгрузить();
	ТаблицаОшибок = Результат.Получить(3).Выгрузить();
	
	// Вывод ошибок расчета
	Если ВыводитьОшибки Тогда
		Для каждого Стр Из ТаблицаОшибок Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось определить себестоимость запаса %1'"),
			УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Стр.НоменклатураСебестоимость, Стр.ХарактеристикаСебестоимость));
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.КлючДанных = Стр.НоменклатураСебестоимость;
			Сообщение.Сообщить(); 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеШаблона()
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		СоставШаблона.Очистить();
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблонКалькуляции", ДанныеЗаказа.ШаблонКалькуляции);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Запас"" КАК ТипСтроки,
	|	ШаблоныКалькуляцийЗапасы.Номенклатура,
	|	ШаблоныКалькуляцийЗапасы.Характеристика,
	|	ШаблоныКалькуляцийЗапасы.Спецификация,
	|	ШаблоныКалькуляцийЗапасы.Количество,
	|	ШаблоныКалькуляцийЗапасы.ЕдиницаИзмерения,
	|	НЕОПРЕДЕЛЕНО КАК СпособРасчета,
	|	НЕОПРЕДЕЛЕНО КАК Значение,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	ШаблоныКалькуляцийЗапасы.КлючСвязи
	|ИЗ
	|	Справочник.ШаблоныКалькуляций.Запасы КАК ШаблоныКалькуляцийЗапасы
	|ГДЕ
	|	ШаблоныКалькуляцийЗапасы.Ссылка = &ШаблонКалькуляции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Расход"",
	|	ШаблоныКалькуляцийРасходы.Расход,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	ШаблоныКалькуляцийРасходы.СпособРасчета,
	|	ШаблоныКалькуляцийРасходы.Значение,
	|	ШаблоныКалькуляцийРасходы.Валюта,
	|	ШаблоныКалькуляцийРасходы.КлючСвязи
	|ИЗ
	|	Справочник.ШаблоныКалькуляций.Расходы КАК ШаблоныКалькуляцийРасходы
	|ГДЕ
	|	ШаблоныКалькуляцийРасходы.Ссылка = &ШаблонКалькуляции";
	СоставШаблона.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуСервер()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Источник", Перечисления.ИсточникиСтрокКалькуляции.Шаблон);
	Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаТабличнойЧасти Из Строки Цикл
		ДанныеЗаказа.Калькуляция.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		Возврат;
	КонецЕсли;
	
	Стоимость = ДанныеЗаказа.Запасы.Итог("Всего");
	СебестоимостьБезШаблонов = 0;
	Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
		Если Стр.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон") Тогда
			Продолжить;
		КонецЕсли;
		СебестоимостьБезШаблонов = СебестоимостьБезШаблонов+Стр.Себестоимость;
	КонецЦикла; 
	Прибыль = Стоимость-СебестоимостьБезШаблонов;
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	ОтборВидЦен = ОтборПоВидуЦен();
	
	ПрочитатьДанныеШаблона();
	
	Для каждого СтрокаСостава Из СоставШаблона Цикл
		НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСостава, "Номенклатура, Характеристика, Спецификация, Количество, ЕдиницаИзмерения, КлючСвязи");
		НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Шаблон;
		Если СтрокаСостава.ТипСтроки="Расход" Тогда
			Если СтрокаСостава.СпособРасчета=Перечисления.СпособыРасчетаСуммыЗатрат.ФиксированнаяСумма Тогда
				ВалютаШаблона = ?(ЗначениеЗаполнено(СтрокаСостава.Валюта), СтрокаСостава.Валюта, ВалютаУчета);
				Курсы = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаШаблона, ДанныеЗаказа.Дата);
				НоваяСтрока.Себестоимость = СтрокаСостава.Значение*Курсы.Курс/Курсы.Кратность/ДанныеЗаказа.Курс*ДанныеЗаказа.Кратность;
			ИначеЕсли СтрокаСостава.СпособРасчета=Перечисления.СпособыРасчетаСуммыЗатрат.ПроцентОтСуммыПродажи Тогда
				НоваяСтрока.Себестоимость = Стоимость*СтрокаСостава.Значение/100;
			ИначеЕсли СтрокаСостава.СпособРасчета=Перечисления.СпособыРасчетаСуммыЗатрат.ПроцентОтПрибыли Тогда
				НоваяСтрока.Себестоимость = Прибыль*СтрокаСостава.Значение/100;
			КонецЕсли;
		ИначеЕсли СтрокаСостава.ТипСтроки="Запас" Тогда
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
			СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
			СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
			СтруктураДанные.Вставить("Курс", ДанныеЗаказа.Курс);
			СтруктураДанные.Вставить("Кратность", ДанныеЗаказа.Кратность);
			СтруктураДанные.Вставить("ВидыЦен", ОтборВидЦен);
			СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("Спецификация", НоваяСтрока.Спецификация);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанные, "СебестоимостьЕдиницы");
			НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы*НоваяСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьФормулыПоШаблону()
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаказа.ШаблонКалькуляции) Тогда
		ОбновитьИтогиКлиент();
		Возврат;
	КонецЕсли;
	
	Стоимость = 0;
	Для каждого Стр Из ДанныеЗаказа.Запасы Цикл
		Стоимость = Стоимость+Стр.Всего;
	КонецЦикла; 
	СебестоимостьБезШаблонов = 0;
	Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
		Если Стр.Источник=ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон") Тогда
			Продолжить;
		КонецЕсли;
		СебестоимостьБезШаблонов = СебестоимостьБезШаблонов+Стр.Себестоимость;
	КонецЦикла; 
	
	СебестоимостьШаблонов = 0;
	
	Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
		Если Стр.Источник<>ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон") Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.РучноеИзменение Тогда
			СебестоимостьШаблонов = СебестоимостьШаблонов+Стр.Себестоимость;
			Продолжить;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", Стр.КлючСвязи);
		СтрокиСостава = СоставШаблона.НайтиСтроки(СтруктураОтбора);
		Если СтрокиСостава.Количество()=0 Тогда
			
			Продолжить;
		КонецЕсли;
		СтрокаСостава = СтрокиСостава[0];
		Если СтрокаСостава.СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммыЗатрат.ПроцентОтСуммыПродажи") Тогда
			Стр.Себестоимость = Стоимость*СтрокаСостава.Значение/100;
		ИначеЕсли СтрокаСостава.СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммыЗатрат.ПроцентОтПрибыли") Тогда
			Стр.Себестоимость = (Стоимость-СебестоимостьБезШаблонов)*СтрокаСостава.Значение/100;
		Иначе
			СебестоимостьШаблонов = СебестоимостьШаблонов+Стр.Себестоимость;
			Продолжить;
		КонецЕсли;
		СебестоимостьШаблонов = СебестоимостьШаблонов+Стр.Себестоимость;
		Если ТекущаяСтрокаСостава<0 Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Источник", ПредопределенноеЗначение("Перечисление.ИсточникиСтрокКалькуляции.Шаблон"));
			СтруктураОтбора.Вставить("КлючСвязи", СтрокаСостава.КлючСвязи);
			СтрокиНаФорме = КалькуляцияНаФорме.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаНаФорме Из СтрокиНаФорме Цикл
				СтрокаНаФорме.Себестоимость = Стр.Себестоимость;
				СтрокаНаФорме.Прибыль = СтрокаНаФорме.Сумма-Стр.Себестоимость;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
	Если ТекущаяСтрокаСостава<0 Тогда
		ОбновитьИтогиКлиент();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФактическиеДанные()
	
	ФактическиеДанные.Очистить();
	Если НЕ ЗначениеЗаполнено(ЗаказСсылка) ИЛИ НЕ ПараметрыФормы.ДоступныПолныеПрава Тогда
		Возврат;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказСсылка);
	Запрос.УстановитьПараметр("Курс", ДанныеЗаказа.Курс);
	Запрос.УстановитьПараметр("Кратность", ДанныеЗаказа.Кратность);
	Запрос.УстановитьПараметр("Период", ДанныеЗаказа.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Номенклатура,
	|	СУММА(ВложенныйЗапрос.СтоимостьФакт * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &Курс * &Кратность) КАК СтоимостьФакт,
	|	СУММА(ВложенныйЗапрос.СебестоимостьФакт * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &Курс * &Кратность) КАК СебестоимостьФакт,
	|	СУММА(ВложенныйЗапрос.СтоимостьФакт * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &Курс * &Кратность) - СУММА(ВложенныйЗапрос.СебестоимостьФакт * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &Курс * &Кратность) КАК ПрибыльФакт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПродажиОбороты.Номенклатура КАК Номенклатура,
	|		ПродажиОбороты.СебестоимостьОборот КАК СебестоимостьФакт,
	|		ПродажиОбороты.СуммаОборот КАК СтоимостьФакт
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(, , Период, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДоходыИРасходы.Аналитика ССЫЛКА Справочник.Номенклатура
	|					И ДоходыИРасходы.Аналитика <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ДоходыИРасходы.Аналитика
	|			ИНАЧЕ ДоходыИРасходы.СчетУчета
	|		КОНЕЦ,
	|		ДоходыИРасходы.СуммаРасходовОборот,
	|		ДоходыИРасходы.СуммаДоходовОборот
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы.Обороты(
	|				,
	|				,
	|				Период,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|						ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета)) КАК ДоходыИРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДоходыИРасходы.Аналитика ССЫЛКА Справочник.Номенклатура
	|					И ДоходыИРасходы.Аналитика <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ДоходыИРасходы.Аналитика
	|			ИНАЧЕ ДоходыИРасходы.СчетУчета
	|		КОНЕЦ,
	|		-ДоходыИРасходы.СуммаРасходовОборот,
	|		-ДоходыИРасходы.СуммаДоходовОборот
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы.Обороты(
	|				,
	|				,
	|				Месяц,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|						ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета)
	|					И (СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|						ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|						ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК ДоходыИРасходы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|			ПО (НАЧАЛОПЕРИОДА(ДоходыИРасходы.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ))
	|				И (ЗакрытиеМесяца.Проведен)
	|				И (ЗакрытиеМесяца.РасчетФинансовогоРезультата)
	|	ГДЕ
	|		НЕ ЗакрытиеМесяца.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ФинансовыйРезультат.Аналитика ССЫЛКА Справочник.Номенклатура
	|					И ФинансовыйРезультат.Аналитика <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ФинансовыйРезультат.Аналитика
	|			ИНАЧЕ ФинансовыйРезультат.СчетУчета
	|		КОНЕЦ,
	|		ФинансовыйРезультат.СуммаРасходовОборот,
	|		ФинансовыйРезультат.СуммаДоходовОборот
	|	ИЗ
	|		РегистрНакопления.ФинансовыйРезультат.Обороты(
	|				,
	|				,
	|				Период,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|					И (НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета
	|						ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее)
	|						ИЛИ НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК ФинансовыйРезультат
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстаткиИОбороты.СчетУчета,
	|		ЗапасыОстаткиИОбороты.СуммаПриход - ЗапасыОстаткиИОбороты.СуммаРасход,
	|		0
	|	ИЗ
	|		РегистрНакопления.Запасы.ОстаткиИОбороты(
	|				,
	|				,
	|				Период,
	|				Движения,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И СчетУчета В
	|						(ВЫБРАТЬ
	|							ЗапасыОстатки.СчетУчета
	|						ИЗ
	|							РегистрНакопления.Запасы.Остатки(, ЗаказПокупателя = &ЗаказПокупателя
	|								И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЗапасыОстатки
	|						ГДЕ
	|							ЗапасыОстатки.КоличествоОстаток = 0
	|							И ЗапасыОстатки.СуммаОстаток <> 0)) КАК ЗапасыОстаткиИОбороты) КАК ВложенныйЗапрос,
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&Период,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					ВалютаУчета.Значение
	|				ИЗ
	|					Константа.ВалютаУчета КАК ВалютаУчета)) КАК КурсыВалютСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура";
	ФактическиеДанные.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция СравнитьКалькуляциюИСпецификацию(Идентификатор)
	
	СтрокаЗапаса = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(Идентификатор);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", СтрокаЗапаса.КлючСвязи);
	ИзмененныеСтроки = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
	Если ИзмененныеСтроки.Количество()>0 Тогда
		// Спецификации с несохраненными изменениями пропускаем
		Возврат Истина;
	КонецЕсли; 
	ТаблицаСостава = ДанныеЗаказа.Калькуляция.Выгрузить().СкопироватьКолонки("Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество");
	ТаблицаКалькуляции = ДанныеЗаказа.Калькуляция.Выгрузить(СтруктураОтбора);
	Для каждого СтрКалькуляции Из ТаблицаКалькуляции Цикл
		Если СтрКалькуляции.Номенклатура=СтрКалькуляции.НоменклатураИзделие И СтрКалькуляции.Характеристика=СтрКалькуляции.ХарактеристикаИзделие Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = ТаблицаСостава.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрКалькуляции);
		Если СтрокаЗапаса.Количество<>0 И СтрокаЗапаса.Количество<>1 Тогда
			Для каждого Стр Из ТаблицаКалькуляции Цикл
				НоваяСтрока.Количество = НоваяСтрока.Количество;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСостава", ТаблицаСостава);
	Запрос.УстановитьПараметр("Спецификация", СтрокаЗапаса.Спецификация);
	Запрос.УстановитьПараметр("КоличествоЗапасов", СтрокаЗапаса.Количество);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСостава.Номенклатура,
	|	ТаблицаСостава.Характеристика,
	|	ТаблицаСостава.Спецификация,
	|	ТаблицаСостава.ЕдиницаИзмерения,
	|	ТаблицаСостава.Количество
	|ПОМЕСТИТЬ ТаблицаСостава
	|ИЗ
	|	&ТаблицаСостава КАК ТаблицаСостава
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КоличествоОтличается,
	|	МАКСИМУМ(ВложенныйЗапрос.ПрисутствуетВКалькуляции) КАК ПрисутствуетВКалькуляции,
	|	МАКСИМУМ(ВложенныйЗапрос.ПрисутствуетВСпецификации) КАК ПрисутствуетВСпецификации,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСостава.Номенклатура КАК Номенклатура,
	|		ТаблицаСостава.Характеристика КАК Характеристика,
	|		ТаблицаСостава.Спецификация КАК Спецификация,
	|		ТаблицаСостава.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ТаблицаСостава.Количество КАК Количество,
	|		ИСТИНА КАК ПрисутствуетВКалькуляции,
	|		ЛОЖЬ КАК ПрисутствуетВСпецификации
	|	ИЗ
	|		ТаблицаСостава КАК ТаблицаСостава
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпецификацииСостав.Номенклатура,
	|		СпецификацииСостав.Характеристика,
	|		СпецификацииСостав.Спецификация,
	|		СпецификацииСостав.ЕдиницаИзмерения,
	|		-(ВЫРАЗИТЬ(СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * &КоличествоЗапасов КАК ЧИСЛО(15, 3))),
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.Спецификации.Состав КАК СпецификацииСостав
	|	ГДЕ
	|		СпецификацииСостав.Ссылка = &Спецификация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпецификацииОперации.Операция,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ч),
	|		-(ВЫРАЗИТЬ(СпецификацииОперации.НормаВремени / СпецификацииОперации.КоличествоПродукции * &КоличествоЗапасов КАК ЧИСЛО(15, 3))),
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.Спецификации.Операции КАК СпецификацииОперации
	|	ГДЕ
	|		СпецификацииОперации.Ссылка = &Спецификация) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Спецификация,
	|	ВложенныйЗапрос.ЕдиницаИзмерения";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ПрисутствуетВКалькуляции ИЛИ НЕ Выборка.ПрисутствуетВСпецификации ИЛИ Выборка.КоличествоОтличается Тогда
			Возврат Ложь;
		КонецЕсли; 	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВывестиКалькуляциюКлиент(Идентификатор = Неопределено)
	
	ЗапрещеноИзменениеКалькуляции = Ложь;
	Если НЕ ТолькоПросмотр И Идентификатор<>Неопределено И НЕ СравнитьКалькуляциюИСпецификацию(Идентификатор) Тогда
		Оповещение = Новый ОписаниеОповещения("ВывестиКалькуляциюКлиентЗавершение", ЭтотОбъект, Идентификатор);
		ПоказатьВопрос(
		Оповещение, 
		НСтр("ru = 'Состав спецификации был изменен. Обновить калькуляцию заказа?'"), 
		РежимДиалогаВопрос.ДаНет, 
		0, 
		КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли; 
	ВывестиКалькуляциюКлиентЗавершение(Неопределено, Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКалькуляциюКлиентЗавершение(Ответ, Идентификатор) Экспорт
	
	Если Ответ=КодВозвратаДиалога.Нет Тогда
		ЗапрещеноИзменениеКалькуляции = Истина;
	ИначеЕсли Ответ=КодВозвратаДиалога.Да Тогда
		ИдентификаторСтрокиКалькуляции = Элементы.КалькуляцияНаФорме.ТекущаяСтрока;
		Буфер = ТекущаяСтрокаСостава;
		ТекущаяСтрокаСостава = -1;
		ЗаменитьСпецификацию(ИдентификаторСтрокиКалькуляции);
		ТекущаяСтрокаСостава = Буфер;
	КонецЕсли; 
	ВывестиКалькуляцию(Идентификатор);	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКалькуляцию(Идентификатор = Неопределено)
	
	УстановитьВидимостьИДоступность();
	
	КалькуляцияНаФорме.Очистить();
	Если Идентификатор=Неопределено Тогда
		ТаблицаСебестоимости = ДанныеЗаказа.Калькуляция.Выгрузить();
		ТаблицаСебестоимости.Свернуть("НоменклатураИзделие, ХарактеристикаИзделие, СпецификацияИзделие, КлючСвязи, Источник", "Себестоимость");
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаСебестоимости", ТаблицаСебестоимости);
		Запрос.УстановитьПараметр("ТаблицаЗапасов", ДанныеЗаказа.Запасы.Выгрузить());
		Запрос.УстановитьПараметр("ФактическиеДанные", ФактическиеДанные.Выгрузить());
		Запрос.УстановитьПараметр("ЦенаБезНДС", ДанныеЗаказа.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС И НЕ ДанныеЗаказа.СуммаВключаетНДС);
		НоменклатураКалькуляции = Новый Массив;
		Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
			Если Стр.Источник=Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
				Продолжить;
			КонецЕсли; 
			НоменклатураКалькуляции.Добавить(Стр.Номенклатура);
		КонецЦикла; 
		Запрос.УстановитьПараметр("НоменклатураКалькуляции", НоменклатураКалькуляции);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСебестоимости.КлючСвязи,
		|	ТаблицаСебестоимости.Источник,
		|	ТаблицаСебестоимости.Себестоимость
		|ПОМЕСТИТЬ ТаблицаСебестоимости
		|ИЗ
		|	&ТаблицаСебестоимости КАК ТаблицаСебестоимости
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаЗапасов.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(ТаблицаЗапасов.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(ТаблицаЗапасов.Партия КАК Справочник.ПартииНоменклатуры) КАК Партия,
		|	ВЫРАЗИТЬ(ТаблицаЗапасов.Спецификация КАК Справочник.Спецификации) КАК Спецификация,
		|	ТаблицаЗапасов.КлючСвязи,
		|	ТаблицаЗапасов.ЕдиницаИзмерения,
		|	ТаблицаЗапасов.Количество,
		|	ТаблицаЗапасов.Цена * ВЫБОР
		|		КОГДА &ЦенаБезНДС
		|			ТОГДА (100 + ВЫРАЗИТЬ(ТаблицаЗапасов.СтавкаНДС КАК Справочник.СтавкиНДС).Ставка) / 100
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Цена,
		|	ТаблицаЗапасов.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ТаблицаЗапасов.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		|	ТаблицаЗапасов.Всего КАК Сумма
		|ПОМЕСТИТЬ ТаблицаЗапасов
		|ИЗ
		|	&ТаблицаЗапасов КАК ТаблицаЗапасов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеДанные.Номенклатура КАК Номенклатура,
		|	ФактическиеДанные.СебестоимостьФакт,
		|	ФактическиеДанные.СтоимостьФакт,
		|	ФактическиеДанные.ПрибыльФакт
		|ПОМЕСТИТЬ ФактическиеДанные
		|ИЗ
		|	&ФактическиеДанные КАК ФактическиеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗапасов.Номенклатура,
		|	СУММА(ТаблицаЗапасов.Количество) КАК Количество
		|ПОМЕСТИТЬ БазаРаспределения
		|ИЗ
		|	ТаблицаЗапасов КАК ТаблицаЗапасов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗапасов.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗапасов.Номенклатура,
		|	ТаблицаЗапасов.Характеристика,
		|	ТаблицаЗапасов.Партия,
		|	ТаблицаЗапасов.Спецификация,
		|	ТаблицаЗапасов.КлючСвязи,
		|	ТаблицаЗапасов.ЕдиницаИзмерения,
		|	ТаблицаЗапасов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБазовая,
		|	ТаблицаЗапасов.Количество,
		|	ВЫБОР
		|		КОГДА ТаблицаЗапасов.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
		|			ТОГДА ТаблицаЗапасов.Количество * ВЫРАЗИТЬ(ТаблицаЗапасов.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|		ИНАЧЕ ТаблицаЗапасов.Количество
		|	КОНЕЦ КАК КоличествоБазовое,
		|	ВЫБОР
		|		КОГДА ТаблицаЗапасов.ПроцентСкидкиНаценки = 100
		|			ТОГДА ТаблицаЗапасов.Цена * ТаблицаЗапасов.Количество * (100 - ТаблицаЗапасов.ПроцентАвтоматическойСкидки) / 100
		|		ИНАЧЕ ТаблицаЗапасов.Сумма / (1 - ТаблицаЗапасов.ПроцентСкидкиНаценки / 100)
		|	КОНЕЦ КАК СуммаБезСкидки,
		|	ТаблицаЗапасов.Сумма КАК Сумма,
		|	ТаблицаЗапасов.ПроцентСкидкиНаценки,
		|	ТаблицаЗапасов.ПроцентАвтоматическойСкидки,
		|	ТаблицаЗапасов.Номенклатура.СпособПополнения КАК СпособПополнения,
		|	ТаблицаЗапасов.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТаблицаЗапасов.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
		|	ТаблицаЗапасов.Номенклатура.ИспользоватьПартии КАК ИспользоватьПартии
		|ПОМЕСТИТЬ ЗапасыДляРасчета
		|ИЗ
		|	ТаблицаЗапасов КАК ТаблицаЗапасов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыДляРасчета.Номенклатура КАК Номенклатура,
		|	ЗапасыДляРасчета.Характеристика КАК Характеристика,
		|	ЗапасыДляРасчета.Партия КАК Партия,
		|	ЗапасыДляРасчета.Спецификация КАК Спецификация,
		|	ЗапасыДляРасчета.КлючСвязи,
		|	ЗапасыДляРасчета.ЕдиницаИзмерения,
		|	ЗапасыДляРасчета.Количество,
		|	ЗапасыДляРасчета.Сумма,
		|	ЗапасыДляРасчета.СуммаБезСкидки,
		|	ЗапасыДляРасчета.ПроцентСкидкиНаценки,
		|	ЗапасыДляРасчета.ПроцентАвтоматическойСкидки,
		|	ЗапасыДляРасчета.СпособПополнения,
		|	ЗапасыДляРасчета.ТипНоменклатуры,
		|	ЗапасыДляРасчета.ИспользоватьХарактеристики,
		|	ЗапасыДляРасчета.ИспользоватьПартии,
		|	ЕСТЬNULL(ТаблицаСебестоимости.Себестоимость, 0) КАК Себестоимость,
		|	ВЫБОР
		|		КОГДА ЗапасыДляРасчета.Количество = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаСебестоимости.Себестоимость, 0) / ЗапасыДляРасчета.Количество
		|	КОНЕЦ КАК СебестоимостьЕдиницы,
		|	ЗапасыДляРасчета.Сумма - ЕСТЬNULL(ТаблицаСебестоимости.Себестоимость, 0) КАК Прибыль,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Запас) КАК Источник,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА БазаРаспределения.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ ФактическиеДанные.СебестоимостьФакт * ЗапасыДляРасчета.Количество / БазаРаспределения.Количество
		|		КОНЕЦ, 0) КАК СебестоимостьФакт,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА БазаРаспределения.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ ФактическиеДанные.СтоимостьФакт * ЗапасыДляРасчета.Количество / БазаРаспределения.Количество
		|		КОНЕЦ, 0) КАК СтоимостьФакт,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА БазаРаспределения.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ ФактическиеДанные.ПрибыльФакт * ЗапасыДляРасчета.Количество / БазаРаспределения.Количество
		|		КОНЕЦ, 0) КАК ПрибыльФакт
		|ИЗ
		|	ЗапасыДляРасчета КАК ЗапасыДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСебестоимости КАК ТаблицаСебестоимости
		|		ПО ЗапасыДляРасчета.КлючСвязи = ТаблицаСебестоимости.КлючСвязи
		|			И (ТаблицаСебестоимости.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Запас))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанные КАК ФактическиеДанные
		|		ПО ЗапасыДляРасчета.Номенклатура = ФактическиеДанные.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ БазаРаспределения КАК БазаРаспределения
		|		ПО ЗапасыДляРасчета.Номенклатура = БазаРаспределения.Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФактическиеДанные.Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА ФактическиеДанные.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.Номенклатура КАК Справочник.Номенклатура).СпособПополнения
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФактическиеДанные.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФактическиеДанные.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.Номенклатура КАК Справочник.Номенклатура).ИспользоватьХарактеристики
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ФактическиеДанные.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.Номенклатура КАК Справочник.Номенклатура).ИспользоватьПартии
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Прочее),
		|	ФактическиеДанные.СебестоимостьФакт,
		|	ФактическиеДанные.СтоимостьФакт,
		|	ФактическиеДанные.ПрибыльФакт
		|ИЗ
		|	ФактическиеДанные КАК ФактическиеДанные
		|ГДЕ
		|	НЕ ФактическиеДанные.Номенклатура В
		|				(ВЫБРАТЬ
		|					БазаРаспределения.Номенклатура
		|				ИЗ
		|					БазаРаспределения КАК БазаРаспределения)
		|	И НЕ ФактическиеДанные.Номенклатура В (&НоменклатураКалькуляции)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = КалькуляцияНаФорме.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла; 
		Строки = Новый Массив;
		Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
			Если Стр.Источник=Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
				Продолжить;
			КонецЕсли; 
			Строки.Добавить(Стр);
		КонецЦикла; 
	Иначе
		СтрЗапасы = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(Идентификатор);
		Если СтрЗапасы=Неопределено Тогда
			Возврат;
		КонецЕсли; 
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрЗапасы.КлючСвязи);
		СтруктураОтбора.Вставить("Источник", Перечисления.ИсточникиСтрокКалькуляции.Запас);
		Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
	КонецЕсли; 
	Для каждого Стр Из Строки Цикл
		Если Стр.Номенклатура=Стр.НоменклатураИзделие И Стр.Характеристика=Стр.ХарактеристикаИзделие Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = КалькуляцияНаФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Номенклатура, Характеристика, Спецификация, Количество, ЕдиницаИзмерения, СебестоимостьЕдиницы, Себестоимость, Источник, КлючСвязи, РучноеИзменение");
		Если Идентификатор<>Неопределено Тогда
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Прочее;
		КонецЕсли; 
		НоваяСтрока.Прибыль = -Стр.Себестоимость;
		Если Идентификатор=Неопределено Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", Стр.Номенклатура);
			СтрокиФакт = ФактическиеДанные.НайтиСтроки(СтруктураОтбора);
			СтрокиЗапасы = ДанныеЗаказа.Запасы.НайтиСтроки(СтруктураОтбора);
			Если СтрокиФакт.Количество()>0 И СтрокиЗапасы.Количество()=0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиФакт[0], "СебестоимостьФакт, СтоимостьФакт, ПрибыльФакт");
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	ОбновитьНомераСтрок(КалькуляцияНаФорме);
	
	ОбновитьДополнительныеРеквизиты();
	
	ОбновитьИтогиСервер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНомераСтрок(Таблица)
	
	НомерСтроки = 0;
	Для каждого Стр Из Таблица Цикл
		НомерСтроки = НомерСтроки+1;
		Стр.НомерСтроки = НомерСтроки;
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизиты()
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для каждого СтрокаТабличнойЧасти Из КалькуляцияНаФорме Цикл
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура)=Тип("СправочникСсылка.Номенклатура") 
			И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипНоменклатуры) Тогда
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.Идентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаНоменклатуры.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаНоменклатуры.Номенклатура.СпособПополнения КАК СпособПополнения,
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики,
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьПартии КАК ИспользоватьПартии
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = КалькуляцияНаФорме.НайтиПоИдентификатору(Выборка.Идентификатор);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, "ТипНоменклатуры, СпособПополнения, ИспользоватьХарактеристики, ИспользоватьПартии");
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из КалькуляцияНаФорме Цикл
		Если СтрокаТабличнойЧасти.Источник<>Перечисления.ИсточникиСтрокКалькуляции.Шаблон Тогда
			Продолжить;
		КонецЕсли;
		СтрокаШаблона = СтрокаПоКлючу(СоставШаблона, СтрокаТабличнойЧасти.КлючСвязи);
		Если СтрокаШаблона=Неопределено ИЛИ СтрокаШаблона.ТипСтроки<>"Расход" Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаТабличнойЧасти.СпособРасчета = СтрокаШаблона.СпособРасчета;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустаяТаблицаМатериалов()
	
	ТаблицаМатериалов = Новый ТаблицаЗначений;
	ТаблицаМатериалов.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0)));
	ТаблицаМатериалов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалов.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения,СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаМатериалов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаМатериалов.Колонки.Добавить("НоменклатураСебестоимость", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаМатериалов.Колонки.Добавить("ХарактеристикаСебестоимость", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаМатериалов.Колонки.Добавить("СпецификацияСебестоимость", Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТаблицаМатериалов.Колонки.Добавить("ЕдиницаИзмеренияСебестоимость", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения,СправочникСсылка.КлассификаторЕдиницИзмерения"));
	ТаблицаМатериалов.Колонки.Добавить("КоличествоСебестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаМатериалов.Колонки.Добавить("ПроверкаЗацикливания", Новый ОписаниеТипов("Массив"));
	Возврат ТаблицаМатериалов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуМатериалов(ТаблицаМатериалов, ИдентификаторСтрокиКалькуляции = Неопределено)
	
	Если ИдентификаторСтрокиКалькуляции=Неопределено Тогда
		Строки = ДанныеЗаказа.Запасы;
	Иначе
		СтрокаКалькуляции = КалькуляцияНаФорме.НайтиПоИдентификатору(ИдентификаторСтрокиКалькуляции);
		Строки = Новый Массив;
		Строки.Добавить(СтрокаКалькуляции);
	КонецЕсли;
	
	Для каждого Стр Из Строки Цикл
		СтрокаЗапасов = СтрокаПоКлючу(ДанныеЗаказа.Запасы, Стр.КлючСвязи);
		НоваяСтрока = ТаблицаМатериалов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "КлючСвязи, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения");
		НоваяСтрока.Количество = Стр.Количество;
		НоваяСтрока.Идентификатор = СтрокаЗапасов.ПолучитьИдентификатор();
		Если ЗначениеЗаполнено(Стр.Спецификация) Тогда
			НоваяСтрока.ПроверкаЗацикливания.Добавить(Стр.Спецификация);
		КонецЕсли; 
		НоваяСтрока.НоменклатураСебестоимость = НоваяСтрока.Номенклатура;
		НоваяСтрока.ХарактеристикаСебестоимость = НоваяСтрока.Характеристика;
		НоваяСтрока.СпецификацияСебестоимость = НоваяСтрока.Спецификация;
		НоваяСтрока.ЕдиницаИзмеренияСебестоимость = НоваяСтрока.ЕдиницаИзмерения;
		НоваяСтрока.КоличествоСебестоимость = Стр.Количество;
	КонецЦикла; 
	
	Уровень = ?(ТекущаяСтрокаСостава<0, 0, 1);
	Пока ЕстьВложенныеСпецификации(ТаблицаМатериалов) Цикл
		Уровень = Уровень+1;
		Результат = РазузловатьНоменклатуру(ТаблицаМатериалов, СоставыСпецификаций, Уровень);
		Если НЕ Результат Тогда
			// Ошибка разузлования
			ТаблицаМатериалов.Очистить();
			Возврат;
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаМатериалов.Свернуть("Идентификатор, Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, НоменклатураСебестоимость, ХарактеристикаСебестоимость, ЕдиницаИзмеренияСебестоимость", "Количество, КоличествоСебестоимость");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазузловатьНоменклатуру(ТаблицаМатериалов, СоставыСпецификаций = Неопределено, Уровень = 0)
	
	СтрокиСпецификаций = Новый Массив;
	Для каждого Стр Из ТаблицаМатериалов Цикл
		Если ЗначениеЗаполнено(Стр.СпецификацияСебестоимость) Тогда
			СтрокиСпецификаций.Добавить(Стр);
		КонецЕсли; 
	КонецЦикла;
	ТаблицаСостава = ТаблицаСоставаСпецификаций(СтрокиСпецификаций, СоставыСпецификаций, Уровень);
	
	Для каждого СтрМатериала Из СтрокиСпецификаций Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СпецификацияУзел", СтрМатериала.СпецификацияСебестоимость);
		СтрокиСостава = ТаблицаСостава.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрСостава Из СтрокиСостава Цикл
			Если ЗначениеЗаполнено(СтрСостава.Спецификация) И СтрМатериала.ПроверкаЗацикливания.Найти(СтрСостава.Спецификация)<>Неопределено Тогда
				Сообщить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Зацикливание сецификации %1 при изготовлении изделия %2'"),
				СтрСостава.Спецификация,
				СтрМатериала.Номенклатура));
				Возврат Ложь;
			КонецЕсли; 
			НоваяСтрока = ТаблицаМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМатериала, "Идентификатор, ПроверкаЗацикливания");
			Если Уровень=1 Тогда
				// Храним первый уровень вложенности спецификаций 
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрСостава, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения");
				НоваяСтрока.Количество = СтрСостава.Количество*СтрМатериала.КоличествоСебестоимость
				*?(ТипЗнч(СтрМатериала.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрМатериала.ЕдиницаИзмерения, "Коэффициент"), 
				1);
			Иначе
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМатериала, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество");
			КонецЕсли; 
			НоваяСтрока.ПроверкаЗацикливания.Добавить(СтрМатериала.СпецификацияСебестоимость);
			НоваяСтрока.НоменклатураСебестоимость = СтрСостава.Номенклатура;
			НоваяСтрока.ХарактеристикаСебестоимость = СтрСостава.Характеристика;
			НоваяСтрока.СпецификацияСебестоимость = СтрСостава.Спецификация;
			НоваяСтрока.ЕдиницаИзмеренияСебестоимость = СтрСостава.ЕдиницаИзмерения;
			НоваяСтрока.КоличествоСебестоимость = СтрСостава.Количество*СтрМатериала.КоличествоСебестоимость
			*?(ТипЗнч(СтрМатериала.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения"), 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрМатериала.ЕдиницаИзмерения, "Коэффициент"), 
			1);
		КонецЦикла;
		ТаблицаМатериалов.Удалить(СтрМатериала);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаСоставаСпецификаций(СтрокиСпецификаций, СоставыСпецификаций, Уровень)
	
	ИзмененныеСтроки = Новый Массив;
	Спецификации = Новый Массив;
	Для каждого Стр Из СтрокиСпецификаций Цикл
		Если Уровень=1 И СоставыСпецификаций<>Неопределено Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязи", Стр.КлючСвязи);
			Если СоставыСпецификаций.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
				ИзмененныеСтроки.Добавить(Стр);
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		Спецификации.Добавить(Стр.Спецификация);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацииСостав.Ссылка КАК СпецификацияУзел,
	|	СпецификацииСостав.ТипСтрокиСостава,
	|	СпецификацииСостав.Номенклатура,
	|	СпецификацииСостав.Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация,
	|	СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции КАК Количество
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка В(&Спецификации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпецификацииОперации.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.ПустаяСсылка),
	|	СпецификацииОперации.Операция,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ч),
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка),
	|	СпецификацииОперации.НормаВремени / СпецификацииОперации.КоличествоПродукции
	|ИЗ
	|	Справочник.Спецификации.Операции КАК СпецификацииОперации
	|ГДЕ
	|	СпецификацииОперации.Ссылка В(&Спецификации)";
	ТаблицаСостава = Запрос.Выполнить().Выгрузить();
	ТаблицаСостава.Индексы.Добавить("СпецификацияУзел");
	
	Если Уровень=1 И СоставыСпецификаций<>Неопределено Тогда
		Для каждого Стр Из ИзмененныеСтроки Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючСвязи", Стр.КлючСвязи);
			СтрокиСостава = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрСостава Из СтрокиСостава Цикл
				НоваяСтрока = ТаблицаСостава.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрСостава);
				НоваяСтрока.СпецификацияУзел = Стр.Спецификация;
				НоваяСтрока.Количество = СтрСостава.Количество/?(СтрСостава.КоличествоПродукции=0, 1, СтрСостава.КоличествоПродукции);
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ТаблицаСостава;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьВложенныеСпецификации(ТаблицаМатериалов)
	
	Для каждого Стр Из ТаблицаМатериалов Цикл
		Если ЗначениеЗаполнено(Стр.СпецификацияСебестоимость) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция СтруктураДанныхШапки()
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
	СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
	СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанные.Вставить("Курс", ДанныеЗаказа.Курс);
	СтруктураДанные.Вставить("Кратность", ДанныеЗаказа.Кратность);
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки") Тогда
		ОтборВидЦен = Неопределено;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры")
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ОтборВидЦен = ВидЦен;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов") Тогда
		ОтборВидЦен = ВидыЦенКонтрагентов;
	Иначе
		ОтборВидЦен = Неопределено;
	КонецЕсли;
	СтруктураДанные.Вставить("ВидыЦен", ОтборВидЦен);
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура, "Спецификация, ЕдиницаИзмерения, СпособПополнения, ТипНоменклатуры, ИспользоватьХарактеристики, ИспользоватьПартии");
	
	СтруктураДанные.Вставить("СпособПополнения", ЗначенияРеквизитов.СпособПополнения);
	СтруктураДанные.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", ЗначенияРеквизитов.ИспользоватьХарактеристики);
	СтруктураДанные.Вставить("ИспользоватьПартии", ЗначенияРеквизитов.ИспользоватьПартии);
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанные.ЕдиницаИзмерения) Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитов.ЕдиницаИзмерения);
	КонецЕсли;
	Если НЕ СтруктураДанные.Свойство("Спецификация") Тогда
		СтруктураДанные.Вставить("Спецификация", ЗначенияРеквизитов.Спецификация);
	КонецЕсли; 
	
	ТаблицаМатериалов = ПустаяТаблицаМатериалов();
	СтрМатериал = ТаблицаМатериалов.Добавить();
	СтрМатериал.Номенклатура = СтруктураДанные.Номенклатура;
	СтрМатериал.Характеристика = СтруктураДанные.Характеристика;
	СтрМатериал.Спецификация = СтруктураДанные.Спецификация;
	СтрМатериал.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрМатериал.Количество = 1;
	СтрМатериал.НоменклатураСебестоимость = СтруктураДанные.Номенклатура;
	СтрМатериал.ХарактеристикаСебестоимость = СтруктураДанные.Характеристика;
	СтрМатериал.СпецификацияСебестоимость = СтруктураДанные.Спецификация;
	СтрМатериал.ЕдиницаИзмеренияСебестоимость = СтруктураДанные.ЕдиницаИзмерения;
	СтрМатериал.КоличествоСебестоимость = 1;
	Пока ЕстьВложенныеСпецификации(ТаблицаМатериалов) Цикл
		Результат = РазузловатьНоменклатуру(ТаблицаМатериалов);
		Если НЕ Результат Тогда
			// Ошибка разузлования
			СтруктураДанные.Вставить("СебестоимостьЕдиницы", 0);
			Возврат СтруктураДанные;
		КонецЕсли; 
	КонецЦикла;
	
	РассчитатьСебестоимость(ТаблицаМатериалов, СтруктураДанные.ВидыЦен, СтруктураДанные.Курс, СтруктураДанные.Кратность, СтруктураДанные.НалогообложениеНДС, СтруктураДанные.Дата, СтруктураДанные.Заказ, Ложь);
	
	СтруктураДанные.Вставить("СебестоимостьЕдиницы", ТаблицаМатериалов.Итог("Себестоимость"));
 
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Функция ОтборПоВидуЦен()
	
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоПоследнейЦенеЗакупки") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры")
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		Возврат ВидЦен;
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов") Тогда
		Возврат ВидыЦенКонтрагентов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСебестоимость(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Себестоимость = СтрокаТабличнойЧасти.СебестоимостьЕдиницы*СтрокаТабличнойЧасти.Количество;
	СтрокаТабличнойЧасти.Прибыль = СтрокаТабличнойЧасти.Сумма-СтрокаТабличнойЧасти.Себестоимость;
	
	ОбновитьИтогиКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСебестоимостьСервер()
	
	УстановитьВидимостьИДоступность();
	
	ХранилищеСистемныхНастроек.Сохранить("ЗаказПокупателя", "ОтображатьСебестоимость", ОтображатьСебестоимость);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиИзмененияВКалькуляцию()
	
	Если ТекущаяСтрокаСостава>=0 Тогда
		// Режим: изменение спецификации изделия
		
		СтрЗапасов = ДанныеЗаказа.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаСостава);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрЗапасов.КлючСвязи);
		Строки = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из Строки Цикл
			СоставыСпецификаций.Удалить(Стр);
		КонецЦикла;
		
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			НоваяСтрока = СоставыСпецификаций.Добавить();
			НоваяСтрока.КлючСвязи = СтрЗапасов.КлючСвязи;
			НоваяСтрока.НоменклатураИзделие = СтрЗапасов.Номенклатура;
			НоваяСтрока.ХарактеристикаИзделие = СтрЗапасов.Характеристика;
			НоваяСтрока.СпецификацияИзделие = СтрЗапасов.Спецификация;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество");
			НоваяСтрока.КоличествоПродукции = ?(СтрЗапасов.Количество=0, 1, СтрЗапасов.Количество);
			Если Стр.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") 
				И Стр.СпособПополнения=ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка") Тогда
				НоваяСтрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Материал");
			ИначеЕсли Стр.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				НоваяСтрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Сборка");
			ИначеЕсли Стр.ТипНоменклатуры=ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция") Тогда
				НоваяСтрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.ПустаяСсылка");
			Иначе
				НоваяСтрока.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Расход");
			КонецЕсли; 
		КонецЦикла;
		
		// Обновление калькуляции
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрЗапасов.КлючСвязи);
		СтруктураОтбора.Вставить("Источник", Перечисления.ИсточникиСтрокКалькуляции.Запас);
		Строки = ДанныеЗаказа.Калькуляция.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из Строки Цикл
			ДанныеЗаказа.Калькуляция.Удалить(Стр);
		КонецЦикла;
		
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, Себестоимость, СебестоимостьЕдиницы");
			НоваяСтрока.НоменклатураИзделие = СтрЗапасов.Номенклатура;
			НоваяСтрока.ХарактеристикаИзделие = СтрЗапасов.Характеристика;
			НоваяСтрока.СпецификацияИзделие = СтрЗапасов.Спецификация;
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас;
			НоваяСтрока.КлючСвязи = СтрЗапасов.КлючСвязи;
		КонецЦикла;
		
	Иначе
		
		
		СтрокиКУдалению = Новый Массив;
		Для каждого Стр Из ДанныеЗаказа.Калькуляция Цикл
			Если Стр.Источник=Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
				Продолжить;
			КонецЕсли;
			СтрокиКУдалению.Добавить(Стр);
		КонецЦикла;
		Для каждого Стр Из СтрокиКУдалению Цикл
			ДанныеЗаказа.Калькуляция.Удалить(Стр);
		КонецЦикла; 
		
		Для каждого Стр Из КалькуляцияНаФорме Цикл
			Если Стр.Источник=Перечисления.ИсточникиСтрокКалькуляции.Запас Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения, Количество, Себестоимость, Себестоимость, Источник, КлючСвязи, РучноеИзменение");
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьИтогиСервер();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИЗакрытьСервер(РаспечататьКалькуляцию = Ложь)
	
	ОбновитьСпецификации();
	
	СтруктураДанных = Новый Структура;
	ТаблицаЗапасов = ДанныеЗаказа.Запасы.Выгрузить();
	СтруктураДанных.Вставить("Запасы", ТаблицаЗапасов);
	ТаблицаКалькуляции = ДанныеЗаказа.Калькуляция.Выгрузить();
	СтруктураДанных.Вставить("Калькуляция", ТаблицаКалькуляции);
	ТаблицаСостава = СоставыСпецификаций.Выгрузить();
	СтруктураДанных.Вставить("СоставыСпецификаций", ТаблицаСостава);
	Если ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		СтруктураДанных.Вставить("СпособРасчетаСебестоимостиКалькуляции", Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры);
	Иначе
		СтруктураДанных.Вставить("СпособРасчетаСебестоимостиКалькуляции", ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции);
	КонецЕсли; 
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамКонтрагентов Тогда
		СтруктураДанных.Вставить("ВидыЦен", ВидыЦенКонтрагентов.ВыгрузитьЗначения());
	ИначеЕсли ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=Перечисления.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		МассивЦен = Новый Массив;
		МассивЦен.Добавить(ВидЦен);
		СтруктураДанных.Вставить("ВидыЦен", МассивЦен);
	Иначе
		СтруктураДанных.Вставить("ВидыЦен", Новый Массив);
	КонецЕсли; 
	СтруктураДанных.Вставить("ШаблонКалькуляции", ДанныеЗаказа.ШаблонКалькуляции);
	СтруктураДанных.Вставить("РаспечататьКалькуляцию", РаспечататьКалькуляцию);
	АдресДанных = ПоместитьВоВременноеХранилище(СтруктураДанных, АдресДанных);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпецификации()
	
	ТаблицаИдентификаторов = СоставыСпецификаций.Выгрузить(, "КлючСвязи, НоменклатураИзделие, ХарактеристикаИзделие, СпецификацияИзделие");
	ТаблицаИдентификаторов.Свернуть("КлючСвязи, НоменклатураИзделие, ХарактеристикаИзделие, СпецификацияИзделие");
	Для каждого СтрИдентификатор Из ТаблицаИдентификаторов Цикл
		СтрЗапас = СтрокаПоКлючу(ДанныеЗаказа.Запасы, СтрИдентификатор.КлючСвязи);
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", СтрИдентификатор.КлючСвязи);
		Строки = СоставыСпецификаций.НайтиСтроки(СтруктураОтбора);
		Если СтрЗапас=Неопределено 
			ИЛИ СтрЗапас.Номенклатура<>СтрИдентификатор.НоменклатураИзделие
			ИЛИ СтрЗапас.Характеристика<>СтрИдентификатор.ХарактеристикаИзделие
			ИЛИ СтрЗапас.Спецификация<>СтрИдентификатор.СпецификацияИзделие Тогда
			// Устаревшая информация
			Для каждого Стр Из Строки Цикл
				СоставыСпецификаций.Удалить(Стр);
			КонецЦикла; 
			Продолжить;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрЗапас.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		ЗаказСпецификации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрЗапас.Спецификация, "ЗаказПокупателя");
		Если НЕ ЗначениеЗаполнено(СтрЗапас.Спецификация) 
			ИЛИ ЗаказСпецификации<>ЗаказСсылка Тогда
			Спецификация = Справочники.Спецификации.СоздатьЭлемент();
			Спецификация.Владелец = СтрЗапас.Номенклатура;
			Спецификация.ХарактеристикаПродукции = СтрЗапас.Характеристика;
			Спецификация.ЗаказПокупателя = ЗаказСсылка;
			Спецификация.Наименование = СокрЛП(СтрЗапас.Номенклатура)+
			" ("+ПредставлениеЗаказа(ДанныеЗаказа.Номер, ДанныеЗаказа.Дата)+")";
			ТекстСообщения = НСтр("ru = 'Создана автоматически из калькуляции'");
			Если ЗначениеЗаполнено(СтрЗапас.Спецификация) Тогда
				СпецификацияСтрокой = Строка(СтрЗапас.Спецификация);
				ТекстСсылки = "<A HREF='"+ПолучитьНавигационнуюСсылку(СтрЗапас.Спецификация)+"'>"+СпецификацияСтрокой+"</A>";
				ТекстСообщения = ТекстСообщения+СтрШаблон(НСтр("ru = ' на основании спецификации %1'"), ТекстСсылки);
			КонецЕсли; 
			ОбсужденияСервер.ДобавитьСообщение(
			ТекстСообщения,
			Спецификация.ПолучитьСсылкуНового(),
			,
			Истина);
			Спецификация.ДополнительныеСвойства.Вставить("ОбсуждениеЗаписано", Истина);
		Иначе
			Спецификация = СтрЗапас.Спецификация.ПолучитьОбъект();
			Спецификация.Состав.Очистить();
			Спецификация.Операции.Очистить();
			ОбсужденияСервер.ДобавитьСообщение(
			НСтр("ru = 'Обновлен состав по данным калькуляции'"),
			СтрЗапас.Спецификация,
			,
			Истина);
			Спецификация.ДополнительныеСвойства.Вставить("ОбсуждениеЗаписано", Истина);
		КонецЕсли; 
		Для каждого Стр Из Строки Цикл
			Если ЗначениеЗаполнено(Стр.ТипСтрокиСостава) Тогда
				НоваяСтрока = Спецификация.Состав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			Иначе
				НоваяСтрока = Спецификация.Операции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр, "КоличествоПродукции");
				НоваяСтрока.Операция = Стр.Номенклатура;
				НоваяСтрока.НормаВремени = Стр.Количество;
			КонецЕсли; 
		КонецЦикла;
		Спецификация.Записать();
		СтрЗапас.Спецификация = Спецификация.Ссылка;
		Для каждого Стр Из Строки Цикл
			СоставыСпецификаций.Удалить(Стр);
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗаказа(Номер, Дата)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 от %3'"),
		НСтр("ru = 'Заказ покупателя'"),
		?(ЗначениеЗаполнено(Номер), ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, Истина, Истина), ""),
		Формат(Дата, "ДЛФ=D"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПоКлючу(Таблица, КлючСвязи)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязи", КлючСвязи);
	Строки = Таблица.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполненРеквизитТЧ(Таблица, ИмяРеквизита)
	
	Для каждого Стр Из Таблица Цикл
		Если ЗначениеЗаполнено(Стр.Партия) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти 

#Область РаботаСПодбором

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Калькуляция";
	МаркерПодбора = "Калькуляция";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				ДанныеЗаказа.Дата);
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("ИспользуютсяПартии", 	Ложь);
	ПараметрыПодбора.Вставить("ЗаполнятьРезерв", 		Ложь);
	ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	ДанныеЗаказа.Организация);
	ПараметрыПодбора.Вставить("Организация", 	ДанныеЗаказа.Организация);
	
	Если ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСебестоимостиКалькуляции.ПоЦенамНоменклатуры")
		ИЛИ ТипЗнч(ДанныеЗаказа.СпособРасчетаСебестоимостиКалькуляции)=Тип("СправочникСсылка.ВидыЦен") Тогда
		ПараметрыПодбора.Вставить("ВидЦен", 				ВидЦен);
		ПараметрыПодбора.Вставить("Валюта", 				ДанныеЗаказа.ВалютаДокумента);
		ПараметрыПодбора.Вставить("СуммаВключаетНДС", 		ДанныеЗаказа.СуммаВключаетНДС);
		ПараметрыПодбора.Вставить("НалогообложениеНДС",		ДанныеЗаказа.НалогообложениеНДС);
		ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	Ложь);
	КонецЕсли; 
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОшибкуЧтенияДанныхИзХранилища()
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка", , ТекстОшибкиЖурналаРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
				|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
				|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
	СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
	СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанные.Вставить("Курс", ДанныеЗаказа.Курс);
	СтруктураДанные.Вставить("Кратность", ДанныеЗаказа.Кратность);
	СтруктураДанные.Вставить("ВидыЦен", ОтборПоВидуЦен());
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = КалькуляцияНаФорме.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Прочее;
		НоваяСтрока.РучноеИзменение = Истина;
		
		СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
		СтруктураДанные.Вставить("Спецификация", НоваяСтрока.Спецификация);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанные, "СебестоимостьЕдиницы,СпособПополнения, ТипНоменклатуры, ИспользоватьХарактеристики, ИспользоватьПартии");
		НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы*НоваяСтрока.Количество;
		НоваяСтрока.Прибыль = НоваяСтрока.Сумма-НоваяСтрока.Себестоимость;
	
	КонецЦикла;
	
	ВнестиИзмененияВКалькуляцию();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
	СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
	СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанные.Вставить("Курс", ДанныеЗаказа.Курс);
	СтруктураДанные.Вставить("Кратность", ДанныеЗаказа.Кратность);
	СтруктураДанные.Вставить("ВидыЦен", ОтборПоВидуЦен());
	СтрокаЗапаса = ?(ТекущаяСтрокаСостава<0, Неопределено, ДанныеЗаказа.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаСостава));
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НоваяСтрока.Характеристика = СтрокаТаблицы.Характеристика;
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
			
			НоваяСтрока.Спецификация = СтрокаТаблицы.Спецификация;
			
		КонецЕсли;
				
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
			
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			
			НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
			
		КонецЕсли;
		
		НоваяСтрока.Количество = СтрокаТаблицы.Количество;
		
		Если НЕ СтрокаЗапаса=Неопределено Тогда
			НоваяСтрока.НоменклатураИзделие = СтрокаЗапаса.Номенклатура;
			НоваяСтрока.ХарактеристикаИзделие = СтрокаЗапаса.Характеристика;
			НоваяСтрока.СпецификацияИзделие = СтрокаЗапаса.Спецификация;
			НоваяСтрока.КлючСвязи = СтрокаЗапаса.КлючСвязи;
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас;
		Иначе
			НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Прочее;
		КонецЕсли;
		НоваяСтрока.РучноеИзменение = Истина;
				
		Если СтрокаТаблицы.Свойство("ЭтоРасход") И СтрокаТаблицы.ЭтоРасход Тогда
			НоваяСтрока.Себестоимость = СтрокаТаблицы.Себестоимость;
			НоваяСтрока.СебестоимостьЕдиницы = ?(НоваяСтрока.Количество<>0, НоваяСтрока.Себестоимость/НоваяСтрока.Количество, 0);
		Иначе
			СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
			СтруктураДанные.Вставить("Спецификация", НоваяСтрока.Спецификация);
			СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
			СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
			НоваяСтрока.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
			НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы*НоваяСтрока.Количество;
		КонецЕсли;
		
		ТоварыДобавлены = Истина;
		
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ТекущаяСтрокаСостава<0 Тогда
		ВывестиКалькуляцию();
	Иначе
		ВывестиКалькуляцию(ТекущаяСтрокаСостава);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ПолноеИмяТабличнойЧасти", "ЗаказПокупателя.Калькуляция");
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаКалькуляция");
	ЗагрузкаКалькуляции = (ТекущаяСтрокаСостава<0);
	Если ЗагрузкаКалькуляции Тогда
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка калькуляции из файла'"));
	Иначе
		НастройкиЗагрузкиДанных.Вставить("Заголовок", НСтр("ru = 'Загрузка спецификации из файла'"));
	КонецЕсли; 
	НастройкиЗагрузкиДанных.Вставить("ЗагрузкаКалькуляции", ЗагрузкаКалькуляции);
	НастройкиЗагрузкиДанных.Вставить("ОтображатьСебестоимость", ОтображатьСебестоимость);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Заказ", ЗаказСсылка);
	СтруктураДанные.Вставить("Дата", ДанныеЗаказа.Дата);
	СтруктураДанные.Вставить("НалогообложениеНДС", ДанныеЗаказа.НалогообложениеНДС);
	СтруктураДанные.Вставить("Курс", ДанныеЗаказа.Курс);
	СтруктураДанные.Вставить("Кратность", ДанныеЗаказа.Кратность);
	СтруктураДанные.Вставить("ВидыЦен", ОтборПоВидуЦен());
	СтрокаЗапаса = ?(ТекущаяСтрокаСостава<0, Неопределено, ДанныеЗаказа.Запасы.НайтиПоИдентификатору(ТекущаяСтрокаСостава));
	
	Попытка
		
		ПоказатьСодержание = Ложь;
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ДанныеЗаказа.Калькуляция.Добавить();
				
				ИменаСвойств = "Номенклатура, Количество, ЕдиницаИзмерения";
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Характеристика";
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
					ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
					
					ИменаСвойств = ИменаСвойств + ", Спецификация";
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ИменаСвойств);
				
				Если НЕ СтрокаЗапаса=Неопределено Тогда
					НоваяСтрока.НоменклатураИзделие = СтрокаЗапаса.Номенклатура;
					НоваяСтрока.ХарактеристикаИзделие = СтрокаЗапаса.Характеристика;
					НоваяСтрока.СпецификацияИзделие = СтрокаЗапаса.Спецификация;
					НоваяСтрока.КлючСвязи = СтрокаЗапаса.КлючСвязи;
					НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Запас;
				Иначе
					НоваяСтрока.Источник = Перечисления.ИсточникиСтрокКалькуляции.Прочее;
				КонецЕсли; 
				НоваяСтрока.РучноеИзменение = Истина;
				НоваяСтрока.СебестоимостьЕдиницы = ?(НоваяСтрока.Количество<>0, НоваяСтрока.Себестоимость/НоваяСтрока.Количество, 0);
				
				Если СтрокаТаблицы.Свойство("ЭтоРасход") И СтрокаТаблицы.ЭтоРасход Тогда
					НоваяСтрока.Себестоимость = СтрокаТаблицы.Себестоимость;
					НоваяСтрока.СебестоимостьЕдиницы = ?(НоваяСтрока.Количество<>0, НоваяСтрока.Себестоимость/НоваяСтрока.Количество, 0);
				Иначе
					СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
					СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
					СтруктураДанные.Вставить("Спецификация", НоваяСтрока.Спецификация);
					СтруктураДанные.Вставить("ЕдиницаИзмерения", НоваяСтрока.ЕдиницаИзмерения);
					СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
					НоваяСтрока.СебестоимостьЕдиницы = СтруктураДанные.СебестоимостьЕдиницы;
					НоваяСтрока.Себестоимость = НоваяСтрока.СебестоимостьЕдиницы*НоваяСтрока.Количество;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Модифицированность = Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПокупателя, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	Если ТекущаяСтрокаСостава<0 Тогда
		ВывестиКалькуляцию();
	Иначе
		ВывестиКалькуляцию(ТекущаяСтрокаСостава);
	КонецЕсли; 
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти 