
#Область ПеременныеФормы

&НаКлиенте
Перем ПриИзмененииСтарт;

&НаКлиенте
Перем ПриИзмененииФиниш;

&НаКлиенте
Перем КопированиеСтрокиРаботы;

&НаКлиенте
Перем КопированиеСтрокиТовары;

&НаКлиенте
Перем ДанныеВыбораСостояния;

&НаКлиенте
Перем ОбновитьПодчиненнуюСчетФактуру;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент = Объект.Контрагент;
	ЗаполнитьПараметрыРасчетовСКонтрагентом();
	
	Договор = Объект.Договор;
	
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ВалютаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаРасчетов");
	КонецЕсли;
	НациональнаяВалюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	ИмяТабличнойЧасти = "Работы";
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	ЭтотОбъект.ИспользоватьВидыЗаказНарядов = ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов");
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказов.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	
	ФункциональнаяОпцияРезервированиеЗапасов = ПолучитьФункциональнуюОпцию("РезервированиеЗапасов");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Старт и Финиш
		Если НЕ (Параметры.ЗначенияЗаполнения.Свойство("Старт") ИЛИ Параметры.ЗначенияЗаполнения.Свойство("Финиш")) Тогда
			Объект.Старт = ТекущаяДата();
			Объект.Финиш = КонецДня(ТекущаяДата());
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Параметры.Основание) 
		И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		И Не ЗаполнениеОбъектовУНФ.ЭтоЗаполнениеПоШаблону(Параметры.ЗначенияЗаполнения) Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС(Истина);
	ИначеЕсли Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Истина;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Истина;
		Элементы.ЗНРаботыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НаЭкспорт Тогда
			Элементы.СчетФактураНадпись.Видимость = Истина;
		Иначе
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеНебольшойФирмойСервер.НастроитьГруппуЦеныИВалюты(ЭтаФорма);
	
	Элементы.РедактироватьСписком.Пометка = Объект.ПлатежныйКалендарь.Количество() > 1;
	Элементы.СтраницаПлатежныйКалендарь.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
	Элементы.ВидЗаказа.ОграничениеТипа			= Новый ОписаниеТипов("СправочникСсылка.ВидыЗаказНарядов");
	Элементы.СостояниеЗаказа.ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказНарядов");
	Если Не ЭтотОбъект.ИспользоватьВидыЗаказНарядов Тогда
		Элементы.ВидЗаказа.Видимость					= Ложь;
		Элементы.СостояниеЗаказа.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.СостояниеЗаказа.АвтоМаксимальнаяШирина	= Истина;
		Элементы.СостояниеЗаказа.МаксимальнаяШирина		= 0;
		Элементы.СостояниеЗаказа.КнопкаСоздания			= Неопределено;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ИменаТЧ = Новый Массив;
		ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Материалы.СтранаПроисхождения", "ЗНМатериалыНомерГТД"));
		ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
		
		ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтотОбъект, ИменаТЧ, КэшЗначений);
		
	КонецЕсли;
	
	ИспользоватьПодсистемуЗарплата = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата")
		И (УправлениеДоступом.ЕстьРоль("ДобавлениеИзменениеПодсистемыЗарплата") ИЛИ УправлениеДоступом.ЕстьРоль("ПолныеПрава"));
	
	Элементы.ЗНГруппаПредоплата.Доступность = Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен")
		И Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
	
	// Если документ открыт из подбора, заполнить табличную часть товары
	Если Параметры.ЗначенияЗаполнения.Свойство("АдресЗапасовВХранилище") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище) Тогда
		
		ПолучитьЗапасыИзХранилища(Параметры.ЗначенияЗаполнения.АдресЗапасовВХранилище, 
							Параметры.ЗначенияЗаполнения.ИмяТабличнойЧасти,
							Параметры.ЗначенияЗаполнения.ЕстьХарактеристики,
							Параметры.ЗначенияЗаполнения.ЕстьПартии);
		
	КонецЕсли;
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	// Конец ПодборНоменклатурыВДокументах
	
	//Установить надписи счет-фактура и основание
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Объект.Ссылка, Ложь);
	Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(НайденныйСчетФактура,,СчетФактураТекст);
	
	ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
	ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
	
	// Установка заголовка формы.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = "Заказ-наряд (Создание)";
	КонецЕсли;
	
	// Установить отбор для ТаблицаРаботы по типу номенклатуры.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипНоменклатурыУслуга", Ложь);
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ТаблицаРаботы.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	
	Элементы.ЗНРаботыЦена.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыПроцентСкидкиНаценки.ТолькоПросмотр  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыСумма.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗНРаботыСуммаНДС.ТолькоПросмотр 			  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	Элементы.ЗапасыЦена.ТолькоПросмотр 					  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр	  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСумма.ТолькоПросмотр 				  = НЕ РазрешеноРедактированиеЦенДокументов;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр	 			  = НЕ РазрешеноРедактированиеЦенДокументов;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Работы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Материалы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "МатериалыЗаказчика");
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	// СписокАвтоПодбораКонтрагента
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЭлектроннаяПочтаУНФ.ЗаполнитьСписокАвтоПодбораКонтрагентаИзСобытия(СписокАвтоПодбораКонтрагента, Объект.Событие);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// ГрупповоеИзменениеСтрок
	ЗаполнитьСписокДействий("Запасы", РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Запасы"), ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
	ЗапасыИзменениеСтрокДействиеПриОткрытии = ЗапасыИзменениеСтрокДействие;
	УстановитьПометку("Запасы", Истина);
	
	ЗаполнитьСписокДействий("Работы", РазрешеноРедактированиеЦенДокументов);
	ГрупповоеИзменениеСтрокСервер.ПриСозданииНаСервере(НаборЭлементовГрупповогоИзмененияСтрокСервер("Работы"), ЭтотОбъект.РаботыИзменениеСтрокДействие);
	РаботыИзменениеСтрокДействиеПриОткрытии = РаботыИзменениеСтрокДействие;
	УстановитьПометку("Работы", Истина);
	// Конец ГрупповоеИзменениеСтрок
	
	// АвтоматическиеСкидки.
	АвтоматическиеСкидкиПриСозданииНаСервере();
	
	// ЭДО
	УстановитьВидЭД();
	
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(Отказ, СтандартнаяОбработка, ПараметрыЭДОПриСоздании);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзмененияПереопределяемый.ПроверитьДатуЗапретаРедактированияЗаказНарядов(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект, "ФормаОбъекта");
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ЗНГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	//Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы();
	//Конец Ручные скидки
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
	//Дополнительные условия для печати счета
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.УсловияСчетаЗаказа) Тогда
		Объект.УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия();
	КонецЕсли;
	//Дополнительные условия для печати счета
	
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
	// Ремонты
	Элементы.ГруппаЗаполнитьПоОснованию.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРемонты");

	// СводныйОтчет
	ДоступныПолныеПрава = РольДоступна(Метаданные.Роли.ПолныеПрава);
	Элементы.СводныйОтчет.Видимость = ДоступныПолныеПрава;
	КомандыПечати = ПолучитьИзВременногоХранилища(Команды.Найти("АдресКомандПечатиВоВременномХранилище").Действие);
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", "СводныйОтчетЗаказНаряд");
	Строки = КомандыПечати.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		ИмяКомандыПечатиСводныйОтчет = "";
	Иначе
		ИмяКомандыПечатиСводныйОтчет = Строки[0].ИмяКомандыНаФорме;
		// Команда скрыта
		ЭлементФормы = Элементы.Найти(ИмяКомандыПечатиСводныйОтчет);
		Если ЭлементФормы <> Неопределено Тогда
			Если ЭлементФормы.Видимость Тогда
				ЭлементФормы.Видимость = Ложь;
			КонецЕсли; 
		Иначе
			Элементы.СводныйОтчет.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Конец СводныйОтчет
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	УправлениеФормой();
	
	// ГрупповоеИзменениеСтрок
	ОпределитьОбъектИзменений("Запасы");
	ОпределитьОбъектИзменений("Работы");
	// Конец ГрупповоеИзменениеСтрок
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СписокАвтоПодбораКонтрагента
	Если ЗначениеЗаполнено(СписокАвтоПодбораКонтрагента) Тогда
		ПодключитьОбработчикОжидания("ПоказатьВыборИзКлассификатораКонтактов", 0.1, Истина);
	КонецЕсли;
	// Конец СписокАвтоПодбораКонтрагента
	
	// ЭДО
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// АвтоматическиеСкидки
	// Выведем сообщение о рассчёте скидок, если нажата кнопка "Провести и закрыть" или форма закрывается по крестику, с сохранением изменений.
	Если ИспользоватьАвтоматическиеСкидки И СкидкиРассчитаныПередЗаписью Тогда
		ПоказатьОповещениеПользователя("Изменение:", 
										ПолучитьНавигационнуюСсылку(Объект.Ссылка), 
										Строка(Объект.Ссылка)+". Автоматические скидки (наценки) рассчитаны!", 
										БиблиотекаКартинок.Информация32);
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НЕ ЗавершениеРаботы Тогда
		// ГрупповоеИзменениеСтрок
		СохранитьТекущееДействиеИзмененияСтрок();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.СчетФактура.Форма.ФормаДокумента" Тогда
		СчетФактураТекст = ВыбранноеЗначение;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() И Не СчитанаДисконтнаяКарта Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ДисконтныеКарты
	Если СчитанаДисконтнаяКарта Тогда
		СчитанаДисконтнаяКарта = Ложь;
	КонецЕсли;
	// Конец ДисконтныеКарты
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеТекстаПроСчетФактуру" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		СчетФактураТекст = Параметр.Представление;
		Элементы.СчетФактураНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьСчетФактура(Параметр.Представление);
		
	ИначеЕсли ИмяСобытия = "Запись_Контрагент" 
		И ЗначениеЗаполнено(Параметр)
		И Объект.Контрагент = Параметр Тогда
		
		ЗаполнитьПараметрыРасчетовСКонтрагентом();
		УстановитьВидимостьДоговора();
		
	ИначеЕсли ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
			
		АдресЗапасовВХранилище	= Параметр;
		ЕстьХарактеристики 		= Истина;
		
		Если МаркерПодбора = "Работы" Тогда
			
			Если ПодборДляМатериаловВРаботах Тогда
				
				ИмяТабличнойЧасти 	= "ЗНМатериалы";
				ЕстьПартии 			= Истина;
				
				ЗНМатериалыПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
				
				СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы[ИмяТабличнойЧасти].ОтборСтрок["КлючСвязи"]);
				Элементы[ИмяТабличнойЧасти].ОтборСтрок = СтрОтбора;
				
			Иначе
				
				ИмяТабличнойЧасти 	= "Работы";
				ЕстьПартии 			= Ложь;
				
				ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
				
				ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
				ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
				
				// Платежный календарь.
				ПересчитатьПлатежныйКалендарь();
				
			КонецЕсли;
			
		ИначеЕсли МаркерПодбора = "Запасы" Тогда
			
			ИмяТабличнойЧасти	= "Запасы";
			ЕстьПартии 			= Истина;
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
			Если НЕ ПустаяСтрока(ТекстОшибкиЖурналаРегистрации) Тогда
				ЗаписатьОшибкуЧтенияДанныхИзХранилища();
			КонецЕсли;
			
			//Подвал
			ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
			ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
			
		ИначеЕсли МаркерПодбора = "МатериалыЗаказчика" Тогда
			
			ИмяТабличнойЧасти	= "МатериалыЗаказчика";
			ЕстьПартии 			= Ложь;
			
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПараметрыИменаПолей = Новый Структура;
		
		Если Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаРаботы Тогда
			
			ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Материалы");
			ПараметрыИменаПолей.Вставить("ИмяТЧСерийныеНомера", "СерийныеНомераМатериалы");
			ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязиСерийныеНомера");

			ИзменилосьКоличество = ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, ПараметрыИменаПолей);
			
			Если ИзменилосьКоличество Тогда
				РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
			КонецЕсли;
		ИначеЕсли Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.ЗНГруппаЗапасы Тогда
			
			ПараметрыИменаПолей.Вставить("ИмяТЧЗапасы", "Запасы");
			ПараметрыИменаПолей.Вставить("ИмяТЧСерийныеНомера", "СерийныеНомера");
			ПараметрыИменаПолей.Вставить("ИмяПоляКлючСвязи", "КлючСвязи");
			
			ИзменилосьКоличество = ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки, ПараметрыИменаПолей);
			//Перерасчет суммы не требуется
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ВидыЗаказНарядов"
		Или ИмяСобытия = "Запись_СостоянияЗаказНарядов" Тогда
		
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Работы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Материалы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "МатериалыЗаказчика");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ЭДО
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭДО
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновлениеИнформационнойБазыУНФ.ПроверитьОбновитьЗаказНаряд(ЭтотОбъект, ТекущийОбъект);
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказНарядов.Завершен)
	);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеДокументЗаказНаряд");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбновитьПодчиненнуюСчетФактуру = Модифицированность;
	
	// АвтоматическиеСкидки
	СкидкиРассчитаныПередЗаписью = Ложь;
	// Если документ проводится, проверим рассчитанность скидок.
	Если ИспользоватьАвтоматическиеСкидки Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			РассчитатьСкидкиНаценкиКлиент();
			РассчиталиСкидки = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Рассчитаны автоматические скидки (наценки)!";
			Сообщение.КлючДанных = Объект.Ссылка;
			Сообщение.Сообщить();
			
			СкидкиРассчитаныПередЗаписью = Истина;
		Иначе
			Объект.СкидкиРассчитаны = Истина;
			ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения, 
			ТекущийОбъект.Договор, 
			ТекущийОбъект.Ссылка, 
			ТекущийОбъект.Организация, 
			ТекущийОбъект.Контрагент, 
			ТекущийОбъект.ВидОперации, 
			Отказ
		);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			
			Если Отказ Тогда
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Поле = "Договор";
				Сообщение.Сообщить();
				Возврат;
			Иначе
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройкиЗачетаАвансов() = ПредопределенноеЗначение("Перечисление.ДаНет.Да")
			И Элементы.ЗНГруппаПредоплата.Доступность
			И ТекущийОбъект.Предоплата.Количество() = 0 Тогда
			ЗаполнитьПредоплату(ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если ОбновитьКартинкуАвтоСкидкиПослеЗаписи Тогда
		Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		ОбновитьКартинкуАвтоСкидкиПослеЗаписи = Ложь;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Установка заголовка формы.
	Заголовок = "";
	АвтоЗаголовок = Истина;
	
	СформироватьНаименованияМатериаловИИсполнителей();
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказНарядов.Завершен)
	);
	
	// ГрупповоеИзменениеСтрок
	Если Элементы.ГруппаЗапасыИзменениеСтрок.Видимость Тогда
		УстановитьПометку("Запасы", Истина);
	КонецЕсли;
	Если Элементы.ЗНГруппаРаботыИзменениеСтрок.Видимость Тогда
		УстановитьПометку("Работы", Истина);
	КонецЕсли;
	// Конец ГрупповоеИзменениеСтрок
	
	// ЭДО
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭДО
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаказНаряды", Объект.Ссылка, ЭтотОбъект);
	Оповестить("ОповещениеОбИзмененииДолга");
	
	Если НЕ СчетФактураТекст = "" 
		И ?(НЕ ОбновитьПодчиненнуюСчетФактуру = Неопределено, ОбновитьПодчиненнуюСчетФактуру, Ложь) Тогда
		
		ТекстВопроса = НСтр("ru = 'В документе были произведены изменения. 
		|Требуется ли повторно заполнить подчиненный Счет-фактуру?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьЗаполненияПодчиненногоСчетФактуры", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		ПересчитатьПлатежныйКалендарь();
		ОбновитьПодвалФормы();
		
		// ДисконтныеКарты
		ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента();
		// Конец ДисконтныеКарты
	КонецЕсли;
	
	// АвтоматическиеСкидки
	ДатаДокументаИзмененаВручную = Истина;
	СброситьФлагСкидкиРассчитаныКлиент("ДатаПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	Если Объект.ВалютаДокумента = СтруктураДанные.БанковскийСчетВалютаДенежныхСредств Тогда
		Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	КонецЕсли;
	
	// Касса по умолчанию
	Если СтруктураДанные.Свойство("Касса") Тогда
		Объект.Касса = СтруктураДанные.Касса;
	КонецЕсли;
	// Конец Касса по умолчанию
	
	Объект.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
	ОбработатьИзменениеДоговора();
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.НалогообложениеНДС, Объект.ДисконтнаяКарта, Объект.ПроцентСкидкиПоДисконтнойКарте);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ДанныеДоговора = ПолучитьДанныеКонтрагентПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Контрагент, Объект.Организация);
		ЗаполнитьПараметрыРасчетовСКонтрагентом();
		УстановитьВидимостьДоговора();
		Объект.Договор = ДанныеДоговора.Договор;
		ОбработатьИзменениеДоговора(ДанныеДоговора);
		
	Иначе
		
		Объект.Договор = Договор; // Восстанавливаем автоматически очищеный договор.
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("КонтрагентПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораДоговора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, Объект.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурнаяЕдиницаПродажиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродажи) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
			
			СтруктураДанные = Новый Структура();
			СтруктураДанные.Вставить("Подразделение", Объект.СтруктурнаяЕдиницаПродажи);
			
			СтруктураДанные = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные);
			
			Объект.СтруктурнаяЕдиницаРезерв = СтруктураДанные.СтруктурнаяЕдиницаЗапасов;
			Объект.Ячейка = СтруктураДанные.ЯчейкаЗапасов;
			Элементы.ЗНЯчейкаЗапасов.Доступность = СтруктураДанные.ОрдерныйСкладЗапасов;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ЗНЯчейкаЗапасов.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура("Контрагент", Объект.Контрагент);
	ОписаниеОповещения = Новый ОписаниеОповещения("СчитатьДисконтнуюКартуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ДисконтныеКарты.Форма.СчитываниеДисконтнойКарты", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	ВидЗаказаПриИзмененииСервер();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказНарядов"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	
	Если Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен") Тогда
		Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
		Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			// В веб-клиенте установка текущей страницы должна происходить после включения видимости у страницы
			ПодключитьОбработчикОжидания("УстановитьТекущейСтраницейЗавершениеЗаказа", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказовВызовСервера.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ПараметрыПолученияДанных.Вставить("ВидЗаказа", Объект.ВидЗаказа);
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказНарядов"), ПараметрыПолученияДанных);
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНСтартПриИзменении(Элемент)
	
	Если Объект.Старт > Объект.Финиш Тогда
		Объект.Старт = ПриИзмененииСтарт;
		Сообщить(НСтр("ru='Дата старта не может быть больше даты финиша.'"));
	Иначе
		ПриИзмененииСтарт = Объект.Старт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНФинишПриИзменении(Элемент)
	
	Если Час(Объект.Финиш) = 0 И Минута(Объект.Финиш) = 0 Тогда
		Объект.Финиш = КонецДня(Объект.Финиш);
	КонецЕсли;
	
	Если Объект.Финиш < Объект.Старт Тогда
		Объект.Финиш = ПриИзмененииФиниш;
		Сообщить(НСтр("ru='Дата финиша не может быть меньше даты старта.'"));
	Иначе
		ПриИзмененииФиниш = Объект.Финиш;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДенежныхСредствПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьОплатуПриИзменении(Элемент)
	
	Если Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() = 0 Тогда
		
		НоваяСтрока = Объект.ПлатежныйКалендарь.Добавить();
		НоваяСтрока.ДатаОплаты = Объект.Дата + ПолучитьСрокОплатыПокупателя(Объект.Договор) * 86400;
		НоваяСтрока.ПроцентОплаты = 100;
		НоваяСтрока.СуммаОплаты = Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего");
		НоваяСтрока.СуммаНДСОплаты = Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС");
		
	ИначеЕсли НЕ Объект.ЗапланироватьОплату И Объект.ПлатежныйКалендарь.Количество() > 0 Тогда
		
		Объект.ПлатежныйКалендарь.Очистить();
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбораБанковскогоСчета(Объект.Договор, Объект.Организация, НациональнаяВалюта);
	Если ПараметрыФормы.РасчетыВУсловныхЕдиницах Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетрыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗавершенияПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура СчетФактураНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеНебольшойФирмойКлиент.ОткрытьСчетФактуру(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	РаботыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	РаботыИзменениеСтрокЗначение = СкидкаПроцент;
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
	ЗапасыИзменениеСтрокЗначение = СкидкаПроцент;
	
	Если Объект.Работы.Количество()>0 Тогда
		ОбработатьТаблицу("Работы");
	КонецЕсли;
	Если Объект.Запасы.Количество()>0 Тогда
		ОбработатьТаблицу("Запасы");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаСуммаПриИзменении(Элемент)
	
	ПроцентСкидкиРаботы = Объект.Работы.Итог("Всего") / (Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего"));
	ПроцентСкидкиЗапасы = 1 - ПроцентСкидкиРаботы;
	
	РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	РаботыИзменениеСтрокЗначение = СкидкаСумма * ПроцентСкидкиРаботы;
	
	ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой");
	ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
	ЗапасыИзменениеСтрокЗначение = СкидкаСумма * ПроцентСкидкиЗапасы;
	
	ОбработатьТаблицу("Работы");
	ОбработатьТаблицу("Запасы");
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
		ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
		КопированиеСтрокиТовары = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если КопированиеСтрокиТовары = Неопределено ИЛИ НЕ КопированиеСтрокиТовары Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиТовары = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
	// Конец ДисконтныеКарты
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	
	СтрокаТабличнойЧасти.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
	
	//Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;

	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", 			СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", 			СтрокаТабличнойЧасти.Характеристика);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтруктураДанные.Вставить("ДатаОбработки", 			Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 		Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
		
		СтруктураДанные.Вставить("СтавкаНДС", 				СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("Цена", 					СтрокаТабличнойЧасти.Цена);
		
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = "";
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		ШаблонСодержания = УправлениеНебольшойФирмойСервер.ПолучитьТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
		Или СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНТоварыРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СтрокаТабличнойЧасти.РезервОтгрузка = СтрокаТабличнойЧасти.Резерв;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНТоварыРезервОтгрузкаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
		
		СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНЗапасыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Запасы.ТекущиеДанные;
	СтуктураРеквизита = Новый Структура("Объект,ТабЧасть,НомерСтроки,ИмяРеквизита", "Объект","Запасы",ТекСтрока.НомерСтроки-1,"Содержание");
	ОбщегоНазначенияКлиентПереопределяемый.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект, СтуктураРеквизита, Строка(ТекСтрока.Номенклатура)+": содержание");

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,,ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Запасы[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗНРаботы

&НаКлиенте
Процедура РаботыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "Работы";
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаботыПриАктивизацииСтроки(Элемент)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Исполнители");
	
КонецПроцедуры // ТаблицаРаботыПриАктивизацииСтроки()

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Работы";
	Если НоваяСтрока Тогда
		
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект);
		УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", Элемент.ТекущиеДанные);
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок

КонецПроцедуры // РаботыПриНачалеРедактирования()

&НаКлиенте
Процедура РаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего") + Элемент.ТекущиеДанные.Всего;
		ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС") + Элемент.ТекущиеДанные.СуммаНДС;
		КопированиеСтрокиРаботы = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПередНачаломДобавления()

&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	
	Если КопированиеСтрокиРаботы = Неопределено ИЛИ НЕ КопированиеСтрокиРаботы Тогда
		ОбновитьПодвалФормы();
	Иначе
		КопированиеСтрокиРаботы = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПриИзменении()

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// Установить отбор для ТаблицаРаботы по типу номенклатуры.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипНоменклатурыУслуга", Ложь);
	ФиксированнаяСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ТаблицаРаботы.ОтборСтрок = ФиксированнаяСтруктураОтбора;
	
КонецПроцедуры // РаботыПриОкончанииРедактирования()

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)

	ИмяТабличнойЧасти = "Работы";
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
	КонецЕсли;
	
КонецПроцедуры // РаботыПередУдалением()

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("УдалениеСтроки");
	
КонецПроцедуры // РаботыПослеУдаления()

&НаКлиенте
Процедура РаботыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	ИмяТабличнойЧасти = "Работы";
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Материалы");
	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтотОбъект, "Исполнители");
	СтрокаТабличнойЧасти.Материалы = "";
	СтрокаТабличнойЧасти.Исполнители = "";
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("НормаВремени", 1);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	
	Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	ИначеЕсли (НЕ ВидРаботВШапке) И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
	// Конец ДисконтныеКарты

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Количество = СтруктураДанные.НормаВремени;
	СтрокаТабличнойЧасти.Кратность = 1; 
	СтрокаТабличнойЧасти.Коэффициент = 1;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	СтрокаТабличнойЧасти.Содержание = "";
	
	Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) И СтруктураДанные.Свойство("Цена")) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Элементы.ЗНРаботаМатериалы.Доступность = НЕ СтрокаТабличнойЧасти.ТипНоменклатурыУслуга;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
КонецПроцедуры // РаботыНоменклатураПриИзменении()

&НаКлиенте
Процедура РаботыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
	СтруктураДанные.Вставить("НормаВремени", 1);
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		Если ВидРаботВШапке Тогда
			
			СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
			
		ИначеЕсли НЕ ВидРаботВШапке Тогда
			
			СтруктураДанные.Вставить("ВидРабот", СтрокаТабличнойЧасти.ВидРабот);
			
		КонецЕсли;
		
		СтруктураДанные.Вставить("ВалютаДокумента",	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС",Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен",			Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент",		1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки",Объект.ВидСкидкиНаценки);
		
	КонецЕсли;
	
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
	// Конец ДисконтныеКарты
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Количество = СтруктураДанные.НормаВремени;
	СтрокаТабличнойЧасти.Кратность = 1; 
	СтрокаТабличнойЧасти.Коэффициент = 1; 
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = "";
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен)) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
КонецПроцедуры // РаботыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗНРаботыСодержаниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		ШаблонСодержания = УправлениеНебольшойФирмойСервер.ПолучитьТекстСодержания(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Характеристика);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ШаблонСодержания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВидРаботПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		
		СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", 		Компания);
		СтруктураДанные.Вставить("Номенклатура", 		СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", 		СтрокаТабличнойЧасти.Характеристика);
		СтруктураДанные.Вставить("ВидРабот", 			СтрокаТабличнойЧасти.ВидРабот);
		
		СтруктураДанные.Вставить("ДатаОбработки", 		Объект.Дата);
		СтруктураДанные.Вставить("ВалютаДокумента", 	Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
		СтруктураДанные.Вставить("ВидЦен", 				Объект.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 		1);
		
		СтруктураДанные.Вставить("ВидСкидкиНаценки", 	Объект.ВидСкидкиНаценки);
		
		// ДисконтныеКарты
		СтруктураДанные.Вставить("ДисконтнаяКарта", 	Объект.ДисконтнаяКарта);
		СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
		// Конец ДисконтныеКарты

		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
		
	КонецЕсли;
	
КонецПроцедуры // РаботыНоменклатураПриИзменении()

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыКоэффициентПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыКратностьПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры // РаботыКоличествоПриИзменении()

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры // РаботыЦенаПриИзменении()

&НаКлиенте
Процедура РаботыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти("Работы");
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры // РаботыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 И СтрокаТабличнойЧасти.Кратность <> 0 И СтрокаТабличнойЧасти.Коэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма /
			(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент);
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти", "Сумма");
	
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // РаботыСуммаПриИзменении()

&НаКлиенте
Процедура РаботыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры  // РаботыСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РаботыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	//Исполнители
	ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей();
	
КонецПроцедуры // РаботыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗНРаботыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	СтуктураРеквизита = Новый Структура("Объект,ТабЧасть,НомерСтроки,ИмяРеквизита", "Объект","Работы",ТекСтрока.НомерСтроки-1,"Содержание");
	ОбщегоНазначенияКлиентПереопределяемый.ПоказатьФормуРедактированияРеквизита(Элемент.ТекстРедактирования, ЭтотОбъект, СтуктураРеквизита, Строка(ТекСтрока.Номенклатура)+": содержание");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура ЗНМатериалыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "Работы";
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры // ЗНМатериалыПередНачаломДобавления()

&НаКлиенте
Процедура ЗНМатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "Работы";
	Если НоваяСтрока Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗНМатериалыСерийныеНомера" Тогда
		ОткрытьПодборМатериалыСерийныеНомера();
	КонецЕсли;
	
КонецПроцедуры // ЗНМатериалыПриНачалеРедактирования()

&НаКлиенте
Процедура ЗНМатериалыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Материалы[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	ОбновитьТабличнуюЧастьИсполнители();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьТабличнуюЧастьИсполнители();
	
КонецПроцедуры // ИсполнителиПриОкончанииРедактирования()

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры // ИсполнителиПередНачаломДобавления()

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Если НоваяСтрока Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиПриНачалеРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗНМатериалы

&НаКлиенте
Процедура ЗНМатериалыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = МатериалыПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = Неопределено;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Резерв = 0;
	СтрокаТабличнойЧасти.РезервОтгрузка = 0;
	
	//Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.ЗНМатериалы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.ЗНМатериалы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомераМатериалы, ТекущиеДанныеСтроки,"КлючСвязиСерийныеНомера",ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
КонецПроцедуры // ЗНМатериалыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыРезервПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	СтрокаТабличнойЧасти.РезервОтгрузка = СтрокаТабличнойЧасти.Резерв;
	
КонецПроцедуры // ЗНМатериалыРезервПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыРезервОтгрузкаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
		
		СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		
	КонецЕсли;
	
КонецПроцедуры // ЗНМатериалыРезервОтгрузкПриИзменении()

&НаКлиенте
Процедура ЗНМатериалыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборМатериалыСерийныеНомера();
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗНМатериалыПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.ЗНМатериалы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.ЗНМатериалы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомераМатериалы, ТекущиеДанныеСтроки, "КлючСвязиСерийныеНомера",ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиСотрудникПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Исполнители.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("НаДату", Объект.Дата);
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);
	
	СтруктураДанные = ПолучитьДанныеСотрудникаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ВидНачисленияУдержания = СтруктураДанные.ВидНачисленияУдержания;
	СтрокаТабличнойЧасти.РазмерНачисленияУдержания = СтруктураДанные.Сумма;
	СтрокаТабличнойЧасти.КТУ = 1;
	
КонецПроцедуры // ИсполнителиСотрудникПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыЗаказчика

&НаКлиенте
Процедура ЗНМатериалыЗаказчикаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ЗНМатериалыЗаказчика.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация", Компания);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсыПредприятия

&НаКлиенте
Процедура РесурсыПредприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.РесурсыПредприятия.ТекущиеДанные;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Старт", '00010101');
		СтруктураДанных.Вставить("Финиш", '00010101');
		СтруктураДанных.Вставить("Длительность", '00010101');
		
		СтруктураДанных = ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования(СтруктураДанных);
		СтрокаТабличнойЧасти.Старт = СтруктураДанных.Старт;
		СтрокаТабличнойЧасти.Финиш = СтруктураДанных.Финиш;
		СтрокаТабличнойЧасти.Длительность = СтруктураДанных.Длительность;
		
	КонецЕсли;
	
КонецПроцедуры // РесурсыПредприятияПриНачалеРедактирования()

&НаКлиенте
Процедура РесурсыПредприятияРесурсПредприятияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РесурсыПредприятия.ТекущиеДанные;
	СтрокаТабличнойЧасти.Мощность = 1;
	
КонецПроцедуры // РесурсыПредприятияРесурсПредприятияПриИзменении()

&НаКлиенте
Процедура РесурсыПредприятияДеньПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если ТекущаяСтрока.Старт = '00010101' Тогда
		ТекущаяСтрока.Старт = ТекущаяДата();
	КонецЕсли;
	
	ФинишВСекундах = Час(ТекущаяСтрока.Финиш) * 3600 + Минута(ТекущаяСтрока.Финиш) * 60;
	ДлительностьВСекундах = Час(ТекущаяСтрока.Длительность) * 3600 + Минута(ТекущаяСтрока.Длительность) * 60;
	ТекущаяСтрока.Финиш = НачалоДня(ТекущаяСтрока.Старт) + ФинишВСекундах;
	ТекущаяСтрока.Старт = ТекущаяСтрока.Финиш - ДлительностьВСекундах;
	
КонецПроцедуры // РесурсыПредприятияДеньПриИзменении()

&НаКлиенте
Процедура РесурсыПредприятияДлительностьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	ДлительностьВСекундах = Час(ТекущаяСтрока.Длительность) * 3600 + Минута(ТекущаяСтрока.Длительность) * 60;
	Если ДлительностьВСекундах = 0 Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
	Иначе
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + ДлительностьВСекундах;
	КонецЕсли;
	Если НачалоДня(ТекущаяСтрока.Старт) <> НачалоДня(ТекущаяСтрока.Финиш) Тогда
		ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
	КонецЕсли;
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
КонецПроцедуры // РесурсыПредприятияДлительностьПриИзменении()

&НаКлиенте
Процедура РесурсыПредприятияСтартПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если ТекущаяСтрока.Старт = '00010101' Тогда
		ТекущаяСтрока.Старт = НачалоДня(ТекущаяСтрока.Финиш);
	КонецЕсли;
	
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
КонецПроцедуры // РесурсыПредприятияСтартПриИзменении()

&НаКлиенте
Процедура РесурсыПредприятияФинишПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если Час(ТекущаяСтрока.Финиш) = 0 И Минута(ТекущаяСтрока.Финиш) = 0 Тогда
		ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
	Конецесли;
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
КонецПроцедуры // РесурсыПредприятияФинишПриИзменении()

&НаКлиенте
Процедура ПредоплатаСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
		
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
			?(Объект.Курс = 0,
			1,
			Объект.Курс),
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
			?(Объект.Кратность = 0,
			1,
			Объект.Кратность),
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКурсПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаКратностьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаРасчетов,
		СтрокаТабличнойЧасти.Курс,
		?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
		СтрокаТабличнойЧасти.Кратность,
		?(Объект.ВалютаДокумента = НациональнаяВалюта,КратностьНациональнаяВалюта, Объект.Кратность)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Предоплата.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	
	СтрокаТабличнойЧасти.Кратность = 1;
	
	СтрокаТабличнойЧасти.Курс =
		?(СтрокаТабличнойЧасти.СуммаРасчетов = 0,
			1,
			СтрокаТабличнойЧасти.СуммаПлатежа
		  / СтрокаТабличнойЧасти.СуммаРасчетов
		  * Объект.Курс
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредоплата

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлатежныйКалендарь

&НаКлиенте
Процедура ПлатежныйКалендарьПередУдалением(Элемент, Отказ)
	
	Если Объект.ПлатежныйКалендарь.Количество() = 1 Тогда
		Объект.ЗапланироватьОплату = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйКалендарьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Объект.ЗапланироватьОплату = Истина;
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
		
		Если ПроцентОплатыИтог > 100 Тогда
			ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
		КонецЕсли;
		
		ТекущаяСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьПроцентОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ПроцентОплатыИтог = Объект.ПлатежныйКалендарь.Итог("ПроцентОплаты");
	
	Если ПроцентОплатыИтог > 100 Тогда
		ТекущаяСтрока.ПроцентОплаты = ТекущаяСтрока.ПроцентОплаты - (ПроцентОплатыИтог - 100);
	КонецЕсли;
	
	ТекущаяСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	ЗапасыРаботыИтог = Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыРаботыИтог Тогда
		ТекущаяСтрока.СуммаОплаты = ТекущаяСтрока.СуммаОплаты - (ПлатежныйКалендарьИтог - ЗапасыРаботыИтог);
	КонецЕсли;
	
	ТекущаяСтрока.ПроцентОплаты = ?(ЗапасыРаботыИтог = 0, 0, Окр(ТекущаяСтрока.СуммаОплаты / ЗапасыРаботыИтог * 100, 2, 1));
	ТекущаяСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекущаяСтрока.ПроцентОплаты / 100, 2, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПлатежныйКалендарьСуммаНДСОплатыПриИзменении(Элемент)
	
	Если Элементы.РедактироватьСписком.Пометка Тогда
		ТекущаяСтрока = Элементы.СписокПлатежныйКалендарь.ТекущиеДанные;
	Иначе
		ТекущаяСтрока = Объект.ПлатежныйКалендарь[0];
	КонецЕсли;
	
	ЗапасыРаботыИтог = Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС");
	ПлатежныйКалендарьИтог = Объект.ПлатежныйКалендарь.Итог("СуммаНДСОплаты");
	
	Если ПлатежныйКалендарьИтог > ЗапасыРаботыИтог Тогда
		ТекущаяСтрока.СуммаНДСОплаты = ТекущаяСтрока.СуммаНДСОплаты - (ПлатежныйКалендарьИтог - ЗапасыРаботыИтог);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	СтрокаТабличнойЧасти = Параметры;
	РассчитатьСуммуВСтрокеТабличнойЧасти(, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы");
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ЗаполнитьПоСпецификации(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Спецификация) Тогда
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, "Не указана спецификация!");
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект, Новый Структура("РезультатПоиска", РезультатПоиска)),
			НСтр("ru = 'Табличная часть ""Материалы"" будет перезаполнена! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииФрагмент(Знач РезультатПоиска)
	
	Перем ИндексУдаления, СтрокаПоиска, СтрОтбора, ТекущаяСтрокаТЧ;
	
	Модифицированность = Истина;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		ИндексУдаления = Объект.Материалы.Индекс(СтрокаПоиска);
		Объект.Материалы.Удалить(ИндексУдаления);
	КонецЦикла;
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	ЗаполнитьПоСпецификацииНаСервере(ТекущаяСтрокаТЧ.Спецификация, ТекущаяСтрокаТЧ.Кратность);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]);
	Элементы.ЗНМатериалы.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоСпецификации()

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификаций(Команда)
	
	Если НЕ Объект.Работы.Количество() > 0 Тогда
		
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Заполните табличную часть ""Работы"".'");
		Сообщение.ПутьКДанным = "Работы";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Материалы.Количество() > 0 Тогда
		
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьМатериалыИзВсехСпецификацийЗавершение", ЭтотОбъект),
			НСтр("ru = 'Для выполнения операции требуется очистить табличную часть ""Материалы""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьМатериалыИзВсехСпецификацийФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификацийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМатериалыИзВсехСпецификацийФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыИзВсехСпецификацийФрагмент()
	
	Модифицированность = Истина;
	
	Объект.Материалы.Очистить();
	
	ЗаполнитьМатериалыПоВсемСпецификациямНаСервере();
	
	// Для ВЕБа повторим отбор, что бы корректно отобразить следующие ТЧ
	ИмяТабличнойЧасти = "Работы";
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "Исполнители");
	
КонецПроцедуры //ЗаполнитьМатериалыИзВсехСпецификаций()

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботы(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, ИмяТабличнойЧасти);
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрокаТЧ = Элементы.ТаблицаРаботы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Номенклатура) Тогда
		
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, "Не указана работа!");
		Возврат;
		
	КонецЕсли;
	
	Если Объект.РесурсыПредприятия.Количество() = 0 Тогда
		
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, НСтр("ru = 'В табличной части ""Задействованные ресурсы"" нет записей!'"));
		Возврат;
		
	КонецЕсли;
	
	РезультатПоиска = Объект.Исполнители.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличная часть ""Исполнители"" для текущей работы будет перезаполнена! Продолжить выполнение операции?'");
		
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРесурсамДляТекущейРаботыЗавершение", ЭтотОбъект, Новый Структура("РезультатПоиска", РезультатПоиска)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляТекущейРаботыФрагмент(Знач РезультатПоиска)
	
	Перем ИндексУдаления, ИсполнителиКлючСвязи, СтрокаПоиска, СтрОтбора;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		
		ИндексУдаления = Объект.Исполнители.Индекс(СтрокаПоиска);
		Объект.Исполнители.Удалить(ИндексУдаления);
		
	КонецЦикла;
	
	ИсполнителиКлючСвязи = Элементы.Исполнители.ОтборСтрок["КлючСвязи"];
	ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере(ИсполнителиКлючСвязи);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоРесурсамДляТекущейРаботы()

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРабот(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, ИмяТабличнойЧасти);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РесурсыПредприятия.Количество() = 0 Тогда
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, НСтр("ru = 'В табличной части ""Задействованные ресурсы"" нет записей!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() <> 0 Тогда
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРесурсамДляВсехРаботЗавершение", ЭтотОбъект),
			НСтр("ru = 'Табличная часть ""Исполнители"" будет перезаполнена! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляВсехРаботФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРаботЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРесурсамДляВсехРаботФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурсамДляВсехРаботФрагмент()
	
	Перем СтрОтбора;
	
	Объект.Исполнители.Очистить();
	
	ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере();
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоРесурсамДляВсехРабот()

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботы(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, ИмяТабличнойЧасти);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаТЧ = Элементы.ТаблицаРаботы.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяСтрокаТЧ.Номенклатура) Тогда
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, "Не указана работа!");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокМножественныВыбор", Истина);
	МассивБригад = Неопределено;

	ОткрытьФорму("Справочник.Бригады.ФормаВыбора", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляТекущейРаботыЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = Результат;
	Если МассивБригад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Исполнители.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]));
	
	Если РезультатПоиска.Количество() <> 0 Тогда
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляТекущейРаботыЗавершение", ЭтотОбъект, Новый Структура("МассивБригад, РезультатПоиска", МассивБригад, РезультатПоиска)), НСтр("ru = 'Табличная часть ""Исполнители"" для текущей работы будет перезаполнена! Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(МассивБригад, РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = ДополнительныеПараметры.МассивБригад;
	РезультатПоиска = ДополнительныеПараметры.РезультатПоиска;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(МассивБригад, РезультатПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляТекущейРаботыФрагмент(Знач МассивБригад, Знач РезультатПоиска)
	
	Перем ИндексУдаления, ИсполнителиКлючСвязи, СтрокаПоиска, СтрОтбора;
	
	Для каждого СтрокаПоиска Из РезультатПоиска Цикл
		ИндексУдаления = Объект.Исполнители.Индекс(СтрокаПоиска);
		Объект.Исполнители.Удалить(ИндексУдаления);
	КонецЦикла;
	
	ИсполнителиКлючСвязи = Элементы.Исполнители.ОтборСтрок["КлючСвязи"];
	ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад, ИсполнителиКлючСвязи);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоБригадамДляТекущейРаботы()

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРабот(Команда)
	
	ИмяТабличнойЧасти = "ТаблицаРаботы";
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, ИмяТабличнойЧасти);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокМножественныВыбор", Истина);
	МассивБригад = Неопределено;

	ОткрытьФорму("Справочник.Бригады.ФормаВыбора", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляВсехРаботЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = Результат;
	Если МассивБригад = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Исполнители.Количество() <> 0 Тогда
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоБригадамДляВсехРаботЗавершение", ЭтотОбъект, Новый Структура("МассивБригад", МассивБригад)),
			НСтр("ru = 'Табличная часть ""Исполнители"" будет перезаполнена! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляВсехРаботФрагмент(МассивБригад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МассивБригад = ДополнительныеПараметры.МассивБригад;
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоБригадамДляВсехРаботФрагмент(МассивБригад);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоБригадамДляВсехРаботФрагмент(Знач МассивБригад)
	
	Перем СтрОтбора;
	
	Объект.Исполнители.Очистить();
	
	ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад);
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.Исполнители.ОтборСтрок["КлючСвязи"]);
	Элементы.Исполнители.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры // ЗаполнитьПоБригадамДляВсехРабот()

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	Если Элементы.РедактироватьСписком.Пометка И Объект.ПлатежныйКалендарь.Количество() > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru='Все строки кроме первой будут удалены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет
		);
		Возврат;
	КонецЕсли;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокумента(Команда)
	
	// 1. Формируем структуру параметров для заполнения формы "Настройка документа".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоложениеВидаРаботВЗаказНаряде", 					Объект.ПоложениеВидаРабот);
	СтруктураПараметров.Вставить("ИспользоватьТоварыВЗаказНаряде", 					Объект.ИспользоватьТовары);
	СтруктураПараметров.Вставить("ИспользоватьМатериалыЗаказчикаВЗаказНаряде", 		Объект.ИспользоватьМатериалыЗаказчика);
	СтруктураПараметров.Вставить("ИспользоватьМатериалыВЗаказНаряде", 				Объект.ИспользоватьМатериалы);
	
	Если ИспользоватьПодсистемуЗарплата Тогда
		
		СтруктураПараметров.Вставить("ИспользоватьЗарплатаИсполнителейВЗаказНаряде",	Объект.ИспользоватьЗарплатаИсполнителей);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	
	СтруктураНастройкаДокумента = Неопределено;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаДокумента", СтруктураПараметров,,,,, Новый ОписаниеОповещения("НастройкаДокументаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// 2. Открвыаем форму "Настройка документ".
	СтруктураНастройкаДокумента = Результат;
	
	// 3. Применяем изменения, сделанные в форме "Настройка документа".
	Если ТипЗнч(СтруктураНастройкаДокумента) = Тип("Структура") И СтруктураНастройкаДокумента.БылиВнесеныИзменения Тогда
		
		Объект.ПоложениеВидаРабот 				= СтруктураНастройкаДокумента.ПоложениеВидаРаботВЗаказНаряде;
		Объект.ИспользоватьТовары 				= СтруктураНастройкаДокумента.ИспользоватьТоварыВЗаказНаряде;
		Объект.ИспользоватьМатериалыЗаказчика 	= СтруктураНастройкаДокумента.ИспользоватьМатериалыЗаказчикаВЗаказНаряде;
		Объект.ИспользоватьМатериалы 			= СтруктураНастройкаДокумента.ИспользоватьМатериалыВЗаказНаряде;
		Объект.ИспользоватьЗарплатаИсполнителей = СтруктураНастройкаДокумента.ИспользоватьЗарплатаИсполнителейВЗаказНаряде;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
			Объект.ДатаОтгрузки = Объект.Финиш;
		КонецЕсли;
		
		УстановитьВидимостьОтПользовательскихНастроек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПоступлениюВРемонтЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по документу-основанию! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюВРемонтЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу();
		УстановитьВидимостьДоговора();
		Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

&НаКлиенте
Процедура РежимГТДЗапасы(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТДЗапасы", "Пометка", НЕ Элементы.РежимГТДЗапасы.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТДЗапасы.Пометка, "Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура РежимГТДМатериалы(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗНМатериалыРежимГТДМатериалы", "Пометка", НЕ Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.ЗНМатериалыРежимГТДМатериалы.Пометка, "ЗНМатериалы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНМатериалыПодбор(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ИмяТабличнойЧасти = "ЗНМатериалы";
	МаркерПодбора = "Работы";
	
	ПодборДляМатериаловВРаботах = Истина;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 					Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 				Компания);
	ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", Истина);
	
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", 		Объект.СтруктурнаяЕдиницаРезерв);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ЗНМатериалыПодбор()

&НаКлиенте
Процедура СводныйОтчет(Команда)
	
	Если НЕ ПустаяСтрока(ИмяКомандыПечатиСводныйОтчет) Тогда
		Команда = Команды.Найти(ИмяКомандыПечатиСводныйОтчет);
		УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
		// УНФ
		СтатистикаИспользованияФормКлиент.ДобавитьСтатистикуКомандПечати(ЭтотОбъект, Команда);
		// Конец УНФ
	КонецЕсли; 
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоДокументу(РеквизитОснование = "ДокументОснование")
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект[РеквизитОснование]);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	ЗаполнитьПараметрыРасчетовСКонтрагентом();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Функция РассчитатьДлительность(ТекущаяСтрока)
	
	ДлительностьВСекундах = ТекущаяСтрока.Финиш - ТекущаяСтрока.Старт;
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
	
	Возврат Длительность;
	
КонецФункции // РассчитатьДлительность()

&НаКлиенте
Функция ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования(СтруктураДанных)
	
	СтруктураДанных.Старт = Объект.Старт - Секунда(Объект.Старт);
	СтруктураДанных.Финиш = Объект.Финиш - Секунда(Объект.Финиш);
	
	Если ЗначениеЗаполнено(СтруктураДанных.Старт) И ЗначениеЗаполнено(СтруктураДанных.Финиш) Тогда
		Если НачалоДня(СтруктураДанных.Старт) <> НачалоДня(СтруктураДанных.Финиш) Тогда
			СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
		КонецЕсли;
		Если СтруктураДанных.Старт >= СтруктураДанных.Финиш Тогда
			СтруктураДанных.Финиш = СтруктураДанных.Старт + 1800;
			Если НачалоДня(СтруктураДанных.Финиш) <> НачалоДня(СтруктураДанных.Старт) Тогда
				Если КонецДня(СтруктураДанных.Старт) = СтруктураДанных.Старт Тогда
					СтруктураДанных.Старт = СтруктураДанных.Старт - 29 * 60;
				КонецЕсли;
				СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Старт) Тогда
		СтруктураДанных.Старт = СтруктураДанных.Старт;
		СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
		Если СтруктураДанных.Финиш = СтруктураДанных.Старт Тогда
			СтруктураДанных.Старт = НачалоДня(СтруктураДанных.Старт);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Финиш) Тогда
		СтруктураДанных.Старт = НачалоДня(СтруктураДанных.Финиш);
		СтруктураДанных.Финиш = СтруктураДанных.Финиш;
		Если СтруктураДанных.Финиш = СтруктураДанных.Старт Тогда
			СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Финиш) - 59;
		КонецЕсли;
	Иначе
		СтруктураДанных.Старт = НачалоДня(ТекущаяДата());
		СтруктураДанных.Финиш = КонецДня(ТекущаяДата()) - 59;
	КонецЕсли;
	
	ДлительностьВСекундах = СтруктураДанных.Финиш - СтруктураДанных.Старт;
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
	СтруктураДанных.Длительность = Длительность;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораБанковскогоСчета(Договор, Организация, НациональнаяВалюта)
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВалютаРасчетов, РасчетыВУсловныхЕдиницах");
	
	СписокВалют = Новый СписокЗначений;
	СписокВалют.Добавить(РеквизитыДоговора.ВалютаРасчетов);
	СписокВалют.Добавить(НациональнаяВалюта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РасчетыВУсловныхЕдиницах", РеквизитыДоговора.РасчетыВУсловныхЕдиницах);
	ПараметрыФормы.Вставить("Владелец", Организация);
	ПараметрыФормы.Вставить("СписокВалют", СписокВалют);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредоплату(ТекущийОбъект)
	
	// Заполнение расшифровки предоплаты.
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) КАК СуммаВалОстаток
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателямиОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.Договор КАК Договор,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями.Остатки(
	|				,
	|				Организация = &Организация
	|					И Контрагент = &Контрагент
	|					И Договор = &Договор
	|					И Заказ = &Заказ
	|					И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаРасчетыСПокупателями.Договор,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ,
	|		ДвиженияДокументаРасчетыСПокупателями.Документ.Дата,
	|		ДвиженияДокументаРасчетыСПокупателями.Заказ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.Сумма, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаРасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДвиженияДокументаРасчетыСПокупателями.СуммаВал, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РасчетыСПокупателями КАК ДвиженияДокументаРасчетыСПокупателями
	|	ГДЕ
	|		ДвиженияДокументаРасчетыСПокупателями.Регистратор = &Ссылка
	|		И ДвиженияДокументаРасчетыСПокупателями.Период <= &Период
	|		И ДвиженияДокументаРасчетыСПокупателями.Организация = &Организация
	|		И ДвиженияДокументаРасчетыСПокупателями.Контрагент = &Контрагент
	|		И ДвиженияДокументаРасчетыСПокупателями.Договор = &Договор
	|		И ДвиженияДокументаРасчетыСПокупателями.Заказ = &Заказ
	|		И ДвиженияДокументаРасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.Договор.ВалютаРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаВалОстаток) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаУчета) КАК СуммаУчета,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) КАК СуммаРасчетов,
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаПлатежа) КАК СуммаПлатежа,
	|	СУММА(РасчетыСПокупателямиОстатки.СуммаУчета / ВЫБОР
	|			КОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаРасчетов, 0) <> 0
	|				ТОГДА РасчетыСПокупателямиОстатки.СуммаРасчетов
	|			ИНАЧЕ 1
	|		КОНЕЦ) * (РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс / РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность) КАК Курс,
	|	1 КАК Кратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс КАК КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность КАК КурсыВалютыДокументаКратность
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПокупателямиОстатки.ВалютаРасчетов КАК ВалютаРасчетов,
	|		РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|		РасчетыСПокупателямиОстатки.ДокументДата КАК ДокументДата,
	|		РасчетыСПокупателямиОстатки.Заказ КАК Заказ,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаУчета,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаРасчетов,
	|		ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) * КурсыВалютыУчета.Курс * &КратностьВалютыДокумента / (&КурсВалютыДокумента * КурсыВалютыУчета.Кратность) КАК СуммаПлатежа,
	|		КурсыВалютыУчета.Курс КАК КурсыВалютыУчетаКурс,
	|		КурсыВалютыУчета.Кратность КАК КурсыВалютыУчетаКратность,
	|		&КурсВалютыДокумента КАК КурсыВалютыДокументаКурс,
	|		&КратностьВалютыДокумента КАК КурсыВалютыДокументаКратность
	|	ИЗ
	|		ВременнаяТаблицаРасчетыСПокупателямиОстатки КАК РасчетыСПокупателямиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУчета) КАК КурсыВалютыУчета
	|			ПО (ИСТИНА)) КАК РасчетыСПокупателямиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателямиОстатки.Документ,
	|	РасчетыСПокупателямиОстатки.Заказ,
	|	РасчетыСПокупателямиОстатки.ДокументДата,
	|	РасчетыСПокупателямиОстатки.ВалютаРасчетов,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыУчетаКратность,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКурс,
	|	РасчетыСПокупателямиОстатки.КурсыВалютыДокументаКратность
	|
	|ИМЕЮЩИЕ
	|	-СУММА(РасчетыСПокупателямиОстатки.СуммаРасчетов) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата";

	
	Запрос.УстановитьПараметр("Заказ", ?(КонтрагентВестиРасчетыПоЗаказам, ТекущийОбъект.Ссылка, Документы.ЗаказПокупателя.ПустаяСсылка()));
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Контрагент", ТекущийОбъект.Контрагент);
	Запрос.УстановитьПараметр("Договор", ТекущийОбъект.Договор);
	Запрос.УстановитьПараметр("Период", ТекущийОбъект.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютаУчета", УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	Если ВалютаРасчетов = Объект.ВалютаДокумента Тогда
		Запрос.УстановитьПараметр("КурсВалютыДокумента", Объект.Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", Объект.Кратность);
	Иначе
		Запрос.УстановитьПараметр("КурсВалютыДокумента", 1);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	
	Запрос.Текст = ТекстЗапроса;
	
	ТекущийОбъект.Предоплата.Очистить();
	СуммаОсталосьРаспределить = ТекущийОбъект.Запасы.Итог("Всего") + ТекущийОбъект.Работы.Итог("Всего");
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	СуммаОсталосьРаспределить = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
		СуммаОсталосьРаспределить,
		?(ВалютаРасчетов = Объект.ВалютаДокумента, Объект.Курс, 1),
		Объект.Курс,
		?(ВалютаРасчетов = Объект.ВалютаДокумента, Объект.Кратность, 1),
		Объект.Кратность
	);
	
	Пока СуммаОсталосьРаспределить > 0 Цикл
		
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			
			Если ВыборкаРезультатаЗапроса.СуммаРасчетов <= СуммаОсталосьРаспределить Тогда // сумма остатка меньше или равна чем осталось распределить
				
				НоваяСтрока = ТекущийОбъект.Предоплата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
				СуммаОсталосьРаспределить = СуммаОсталосьРаспределить - ВыборкаРезультатаЗапроса.СуммаРасчетов;
				
			Иначе // сумма остатка больше чем нужно распределить
				
				НоваяСтрока = ТекущийОбъект.Предоплата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультатаЗапроса);
				НоваяСтрока.СуммаРасчетов = СуммаОсталосьРаспределить;
				НоваяСтрока.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
					НоваяСтрока.СуммаРасчетов,
					ВыборкаРезультатаЗапроса.Курс,
					ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКурс,
					ВыборкаРезультатаЗапроса.Кратность,
					ВыборкаРезультатаЗапроса.КурсыВалютыДокументаКратность
				);
				СуммаОсталосьРаспределить = 0;
				
			КонецЕсли;
			
		Иначе
			
			СуммаОсталосьРаспределить = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента)
	
	ДоговорПередИзменением = ПараметрыДокумента.ДоговорПередИзменением;
	ВалютаРасчетовПередИзменением = ПараметрыДокумента.ВалютаРасчетовПередИзменением;
	ДанныеДоговора = ПараметрыДокумента.ДанныеДоговора;
	ВопросВидЦен = ПараметрыДокумента.ВопросВидЦен;
	ОткрытьФормуЦеныИВалюты = ПараметрыДокумента.ОткрытьФормуЦеныИВалюты;
	ИзменилсяВидЦен = ПараметрыДокумента.ИзменилсяВидЦен;
	ИзменилсяВидСкидки = ПараметрыДокумента.ИзменилсяВидСкидки;
	Если ПараметрыДокумента.Свойство("ОчиститьДисконтнуюКарту") Тогда
		ОчиститьДисконтнуюКарту = Истина;
	Иначе
		ОчиститьДисконтнуюКарту = Ложь;
	КонецЕсли;
	ПересчетНеобходимПоЗапасам = ПараметрыДокумента.ПересчетНеобходимПоЗапасам;
	ПересчетНеобходимПоРаботам = ПараметрыДокумента.ПересчетНеобходимПоРаботам;
	
	Если НЕ ДанныеДоговора.СуммаВключаетНДС = Неопределено Тогда
		
		Объект.СуммаВключаетНДС = ДанныеДоговора.СуммаВключаетНДС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
		
		Объект.Курс      = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Курс);
		Объект.Кратность = ?(ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность = 0, 1, ДанныеДоговора.ВалютаРасчетовКурсКратность.Кратность);
		
	КонецЕсли;
	
	Если ИзменилсяВидЦен Тогда
		
		Объект.ВидЦен = ДанныеДоговора.ВидЦен;
		
	КонецЕсли; 
	
	Если ИзменилсяВидСкидки Тогда
		
		Объект.ВидСкидкиНаценки = ДанныеДоговора.ВидСкидкиНаценки;
		
	КонецЕсли;
	
	Если ОчиститьДисконтнуюКарту Тогда
		
		Объект.ДисконтнаяКарта = ПредопределенноеЗначение("Справочник.ДисконтныеКарты.ПустаяСсылка");
		Объект.ПроцентСкидкиПоДисконтнойКарте = 0;
		
	КонецЕсли;
	
	Если Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов Тогда
		
		Объект.БанковскийСчет = Неопределено;
		
	КонецЕсли;
	Объект.ВалютаДокумента = ДанныеДоговора.ВалютаРасчетов;
	
	Если ОткрытьФормуЦеныИВалюты Тогда
		
		ТекстПредупреждения = "";
		Если ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, 
									|отличные от установленных в документе! 
									|Возможно, необходимо перезаполнить цены.'") + Символы.ПС + Символы.ПС;
			
		КонецЕсли;
		
		ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Изменилась валюта расчетов по договору с контрагентом! 
										|Необходимо проверить валюту документа!'");
		
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина, (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки), ТекстПредупреждения);
		
	ИначеЕсли ВопросВидЦен Тогда
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС, 
			Объект.ДисконтнаяКарта, 
			Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если (ПересчетНеобходимПоЗапасам И Объект.Запасы.Количество() > 0)
			ИЛИ (ПересчетНеобходимПоРаботам И Объект.Работы.Количество() > 0) Тогда
			
			ТекстВопроса = НСтр("ru = 'Договор с контрагентом предусматривает условия цен и скидок, отличные от установленных в документе! 
										|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора", ЭтотОбъект, ПараметрыДокумента);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС, 
			Объект.ДисконтнаяКарта, 
			Объект.ПроцентСкидкиПоДисконтнойКарте);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВидаЦенИВалютыРасчетов()

&НаКлиенте
Процедура ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей()
	
	ТекущаяСтрокаРабот = Элементы.Работы.ТекущиеДанные; 
	Если ТекущаяСтрокаРабот <> Неопределено Тогда
		
		ОтразитьИзмененияПоТаблицеИсполнителей(ТекущаяСтрокаРабот.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры // ОтразитьИзменениеКлючевыхПараметровВНачисленияхИсполнителей()

&НаКлиенте
Процедура ОбновитьТабличнуюЧастьИсполнители()
	
	ТекущаяСтрокаИсполнители = Элементы.Исполнители.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрокаИсполнители = Неопределено 
		И ЗначениеЗаполнено(ТекущаяСтрокаИсполнители.КлючСвязи) Тогда
		
		ОтразитьИзмененияПоТаблицеИсполнителей(ТекущаяСтрокаИсполнители.КлючСвязи);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТабличнуюЧастьИсполнители()

&НаСервере
Процедура ПересчитатьСуммуНачисленийПоУказаннойРаботе(КлючСвязи)
	
	// Без ключа нет возможности отработать корректно...
	Если НЕ ЗначениеЗаполнено(КлючСвязи) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивИсполнителей	= Документы.ЗаказПокупателя.ПолучитьСтрокиИсполнителейПоКлючуСвязи(Объект.Исполнители, КлючСвязи);
	
	//Если нет исполнителей, пересчитывать не чего...
	Если МассивИсполнителей.Количество() = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяРабота		= Документы.ЗаказПокупателя.ПолучитьСтрокуРаботыПоКлючуСвязи(Объект.Работы, КлючСвязи);
	СуммаКТУ			= Документы.ЗаказПокупателя.ВычислитьСуммуКТУПоКлючуСвязи(Объект.Исполнители, КлючСвязи);
	КоэффициентыРаботы	= ТекущаяРабота.Количество * ТекущаяРабота.Коэффициент * ТекущаяРабота.Кратность;
	СуммаРаботы			= ТекущаяРабота.Сумма;
	
	Для каждого СтрокаИсполнителя Из МассивИсполнителей Цикл
		
		СтрокаИсполнителя.СуммаНачисления = 
			Документы.ЗаказПокупателя.РассчитатьЗначениеНачисленияПоСтрокеНаСервере(
				КоэффициентыРаботы, 
				СуммаРаботы, 
				СтрокаИсполнителя.КТУ, 
				СуммаКТУ, 
				СтрокаИсполнителя.ВидНачисленияУдержания, 
				СтрокаИсполнителя.РазмерНачисленияУдержания);
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьСуммуНачисленияПоУказаннойРаботе()

&НаСервере
Процедура ОтразитьИзмененияПоТаблицеИсполнителей(КлючСвязи = Неопределено)
	
	Если КлючСвязи <> Неопределено Тогда
		
		ПересчитатьСуммуНачисленийПоУказаннойРаботе(КлючСвязи);
		
	Иначе
		
		// Используется при обновлении/заполнении по всем работам.
		МассивРабот = Объект.Работы.НайтиСтроки(Новый Структура("ТипНоменклатурыУслуга", Ложь));
		Для каждого СтрокаРаботы Из МассивРабот Цикл
			
			ПересчитатьСуммуНачисленийПоУказаннойРаботе(СтрокаРаботы.КлючСвязи);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОтразитьИзмененияКТУ()

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	СтруктураДанные.Вставить("БанковскийСчет", Объект.Организация.БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("БанковскийСчетВалютаДенежныхСредств", Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств);
	// Касса по умолчанию
	УправлениеНебольшойФирмойСервер.ДобавитьВСтруктуруИнформациюОКассеПоУмолчаниюДляОрганизации(СтруктураДанные, Объект);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	СтруктураДанные.Вставить("ЭтоУслуга", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	СтруктураДанные.Вставить("ЭтоЗапас", СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС")
		И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("ВидРабот") Тогда
		
			Если СтруктураДанные.Номенклатура.ФиксированнаяСтоимость Тогда
				
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
			
			Иначе
				
				СтруктураДанные.Номенклатура = СтруктураДанные.ВидРабот;
				СтруктураДанные.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
				СтруктураДанные.Вставить("Цена", Цена);
				
			КонецЕсли;
		
		Иначе
			
			Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			СтруктураДанные.Вставить("Цена", Цена);
			
		КонецЕсли;
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки")
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", 1);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		КонецЕсли;
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Если СтруктураДанные.Свойство("НормаВремени") Тогда
		СтруктураДанные.НормаВремени = УправлениеНебольшойФирмойСервер.ПолучитьНормуВремениРаботы(СтруктураДанные);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Дата, ВалютаДокумента, Контрагент, Организация)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		ДоговорПоУмолчанию.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		ДоговорПоУмолчанию.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		ДоговорПоУмолчанию.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(ДоговорПоУмолчанию.ВидЦен), ДоговорПоУмолчанию.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Договор.ВидЦен
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"СуммаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаСервереБезКонтекста
Функция МатериалыПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	Возврат СтруктураДанные;
	
КонецФункции // МатериалыПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудникаПриИзменении(СтруктураДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания) КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|			&НаДату,
	|			Организация = &Организация
	|				И Актуальность
	|				И Сотрудник = &Сотрудник
	|				И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента";
	
	Запрос.УстановитьПараметр("НаДату", СтруктураДанные.НаДату);
	Запрос.УстановитьПараметр("Организация", СтруктураДанные.Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
	Запрос.УстановитьПараметр("Сотрудник", СтруктураДанные.Сотрудник);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		СтруктураДанные.Вставить("ВидНачисленияУдержания", Справочники.ВидыНачисленийИУдержаний.ПустаяСсылка());
		СтруктураДанные.Вставить("Сумма", 0);
	Иначе
		СтруктураДанные.Вставить("ВидНачисленияУдержания", ТаблицаСотрудников[0].ВидНачисленияУдержания);
		СтруктураДанные.Вставить("Сумма", ТаблицаСотрудников[0].Сумма);
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСотрудникаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьСрокОплатыПокупателя(Договор)
	
	Возврат Договор.СрокОплатыПокупателя;

КонецФункции // ПолучитьСрокОплатыПокупателя()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС(ЭтоОткрытие = Ложь)
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	Если НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС ИЛИ ЭтоОткрытие Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Истина;
		Элементы.СчетФактураНадпись.Видимость = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Истина;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Истина;
		Элементы.ЗНРаботыВсего.Видимость = Истина;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		Элементы.ПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		Элементы.СписокПлатежныйКалендарьСуммаНДСОплаты.Видимость = Ложь;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			Элементы.СчетФактураНадпись.Видимость = Ложь;
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
			Элементы.СчетФактураНадпись.Видимость = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
		Элементы.ЗНРаботыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыСуммаНДС.Видимость = Ложь;
		Элементы.ЗНРаботыВсего.Видимость = Ложь;
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(СтруктураДанные)
	
	Если СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Склад")
		ИЛИ СтруктураДанные.Подразделение.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
	
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", СтруктураДанные.Подразделение.ИсточникПеремещения);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", СтруктураДанные.Подразделение.ЯчейкаИсточникаПеремещения);

	Иначе
		
		СтруктураДанные.Вставить("СтруктурнаяЕдиницаЗапасов", Неопределено);
		СтруктураДанные.Вставить("ЯчейкаЗапасов", Неопределено);
		
	КонецЕсли;
		
	СтруктураДанные.Вставить("ОрдерныйСкладЗапасов", НЕ СтруктураДанные.Подразделение.ИсточникПеремещения.ОрдерныйСклад);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
											
КонецПроцедуры // ПересчитатьСуммыДокумента() 

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти = "Запасы", СтрокаТабличнойЧасти = Неопределено, КолонкаТЧ = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	// Сумма.
	Если ИмяТабличнойЧасти = "Работы" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент * СтрокаТабличнойЧасти.Цена;
	Иначе
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	// Скидки.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	// Сумма НДС.
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
	ОбновитьПодвалФормы();
	
	// АвтоматическиеСкидки.
	СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
	
	СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	СтрокаТабличнойЧасти.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
	// Конец АвтоматическиеСкидки
	
	//Ручные скидки
	РассчитатьСуммуИПроцентСкидкиРаботыЗапасы();
	//Конец Ручные скидки
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено И ИмяТабличнойЧасти = "Запасы" Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()	

&НаСервере
Процедура РассчитатьСуммуИПроцентСкидкиРаботыЗапасы()
	
	ОбщаяСуммаРучнойСкидки = 0;
	ОбщаяСуммаБезСкидок = 0;
	Для каждого стр Из Объект.Работы Цикл
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + стр.Цена * стр.Количество * стр.Кратность * стр.Коэффициент;
		ОбщаяСуммаРучнойСкидки = ОбщаяСуммаРучнойСкидки + стр.Цена * стр.Количество * стр.Кратность * стр.Коэффициент - стр.Сумма - стр.СуммаАвтоматическойСкидки;
	КонецЦикла;
	Для каждого стр Из Объект.Запасы Цикл
		ОбщаяСуммаБезСкидок = ОбщаяСуммаБезСкидок + стр.Цена * стр.Количество;
		ОбщаяСуммаРучнойСкидки = ОбщаяСуммаРучнойСкидки + стр.Цена * стр.Количество - стр.Сумма - стр.СуммаАвтоматическойСкидки;
	КонецЦикла;
	
	СкидкаСумма = ОбщаяСуммаРучнойСкидки;
	СкидкаПроцент = ?(ОбщаяСуммаБезСкидок=0, 0, СкидкаСумма / ОбщаяСуммаБезСкидок * 100);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПлатежныйКалендарь()
	
	Для каждого ТекСтрока Из Объект.ПлатежныйКалендарь Цикл
		ТекСтрока.СуммаОплаты = Окр((Объект.Запасы.Итог("Всего") + Объект.Работы.Итог("Всего")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
		ТекСтрока.СуммаНДСОплаты = Окр((Объект.Запасы.Итог("СуммаНДС") + Объект.Работы.Итог("СуммаНДС")) * ТекСтрока.ПроцентОплаты / 100, 2, 1);
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьПлатежныйКалендарь()

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(НациональнаяВалюта);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(НациональнаяВалюта);
		
		ТекстВопроса = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
							|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КурсНовый", КурсНовый);
		ДополнительныеПараметры.Вставить("КратностьНовый", КратностьНовый);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КОнецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ПерезаполнитьЦены = Ложь, ТекстПредупреждения = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс", Объект.Курс);
	СтруктураПараметров.Вставить("Кратность", Объект.Кратность);
	СтруктураПараметров.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключатьВСтоимость", Объект.НДСВключатьВСтоимость);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор", Объект.Договор);
	СтруктураПараметров.Вставить("Организация",	Компания); 
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены", ПерезаполнитьЦены);
	СтруктураПараметров.Вставить("ПересчитатьЦены", ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	СтруктураПараметров.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	СтруктураПараметров.Вставить("ТекстПредупреждения", ТекстПредупреждения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЦеныИВалютаЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()	

&НаКлиенте
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен() 
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				Объект.Дата);
	СтруктураДанных.Вставить("Организация",			Компания);
	СтруктураДанных.Вставить("ВидЦен",				Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	Объект.СуммаВключаетНДС);
	
	СтруктураДанных.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
	
	Если ВидРаботВШапке Тогда
		
		Для каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("ВидРабот",			Объект.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
	
	Иначе
	
		Для каждого СтрокаТЧ Из Объект.Работы Цикл
			
			СтрокаТЧ.Цена = 0;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидРабот) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Новый Структура();
			СтрокаТабличнойЧасти.Вставить("ВидРабот",			СтрокаТЧ.ВидРабот);
			СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
			СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
			СтрокаТабличнойЧасти.Вставить("Цена",				0);
			
			ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		
		РезультатПоиска = Объект.Работы.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаРезультат, "Цена");
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
		РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", СтрокаТабличнойЧасти, "Цена");
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

&НаСервереБезКонтекста
Процедура ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента)
	
	// Скидки.
	Если СтруктураДанных.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанных.ВидСкидкиНаценки) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ВидСкидкиНаценки.Процент;
		
	КонецЕсли;
	
	// Дисконтная карта.
	Если СтруктураДанных.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте) Тогда
		
		СтруктураДанных.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки + СтруктураДанных.ПроцентСкидкиПоДисконтнойКарте;
		
	КонецЕсли;
		
	// 1. Сформируем таблицу документа.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	
	// Вид работ.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ВидРабот", ОписаниеТипов);
	
	// Номенклатура.
	Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	// ФиксированноеЗначение.
	Массив.Добавить(Тип("Булево"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("ФиксированнаяСтоимость", ОписаниеТипов);
	
	// Характеристика.
	Массив.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	// СтавкиНДС.
	Массив.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС", ОписаниеТипов);
	
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		НоваяСтрока.ВидРабот	 	 = СтрокаТЧ.ВидРабот;
		НоваяСтрока.ФиксированнаяСтоимость	 = СтрокаТЧ.Номенклатура.ФиксированнаяСтоимость;
		НоваяСтрока.Номенклатура	 = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Характеристика	 = СтрокаТЧ.Характеристика;
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура") И СтрокаТЧ.Свойство("СтавкаНДС") Тогда
			НоваяСтрока.СтавкаНДС	 = СтрокаТЧ.СтавкаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.ВидРабот,
	|	ТаблицаНоменклатуры.ФиксированнаяСтоимость,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.СтавкаНДС
	|ПОМЕСТИТЬ ВременнаяТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Выполнить();
	
	// 2. Заполним цены.
	ВидЦенПараметр = СтруктураДанных.ВидЦен;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены КАК ЦеныНоменклатурыВалюта,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ПорядокОкругления КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * КурсВалютыВидЦен.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыВидЦен.Кратность) / ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаОбработки, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.ФиксированнаяСтоимость
	|					ТОГДА ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|				ИНАЧЕ ТаблицаНоменклатуры.ВидРабот = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.ФиксированнаяСтоимость
	|					ТОГДА ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, ) КАК КурсВалютыВидЦен
	|		ПО (ЦеныНоменклатурыСрезПоследних.ВидЦен.ВалютаЦены = КурсВалютыВидЦен.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОбработки, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|ГДЕ
	|	ЦеныНоменклатурыСрезПоследних.Актуальность";
		
	Запрос.УстановитьПараметр("ДатаОбработки",	 СтруктураДанных.Дата);
	Запрос.УстановитьПараметр("ВидЦен",			 ВидЦенПараметр);
	Запрос.УстановитьПараметр("ВалютаДокумента", СтруктураДанных.ВалютаДокумента);
	
	ТаблицаЦен = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТабЧасти Из ТабличнаяЧастьДокумента Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",	СтрокаТабЧасти.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",	СтрокаТабЧасти.Характеристика);
		Если ТипЗнч(СтрокаТЧ) = Тип("Структура") И СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
			
			СтруктураПоиска.Вставить("СтавкаНДС", СтрокаТабЧасти.СтавкаНДС);
			
		КонецЕсли;
		
		РезультатПоиска = ТаблицаЦен.НайтиСтроки(СтруктураПоиска);
		Если РезультатПоиска.Количество() > 0 Тогда
			
			Цена = РезультатПоиска[0].Цена;
			Если Цена = 0 Тогда
				
				СтрокаТабЧасти.Цена = Цена;
				
			Иначе
				
				ПорядокОкругления = РезультатПоиска[0].ПорядокОкругления;
				ОкруглятьВБольшуюСторону = РезультатПоиска[0].ОкруглятьВБольшуюСторону;
				
				Если СтруктураДанных.Свойство("СуммаВключаетНДС")
					И ((СтруктураДанных.СуммаВключаетНДС И НЕ РезультатПоиска[0].ЦенаВключаетНДС)
						ИЛИ (НЕ СтруктураДанных.СуммаВключаетНДС И РезультатПоиска[0].ЦенаВключаетНДС)) Тогда
					
					Цена = УправлениеНебольшойФирмойСервер.ПересчитатьСуммуПриИзмененииФлаговНДС(Цена, СтруктураДанных.СуммаВключаетНДС, СтрокаТабЧасти.СтавкаНДС);
					
				КонецЕсли;
				
				СтрокаТабЧасти.Цена = УправлениеНебольшойФирмойСервер.ОкруглитьЦену(Цена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть()
	
КонецПроцедуры // ПолучитьЦеныТабличнойЧастиПоВидуЦен()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидЦен%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ВидСкидкиНаценки%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Дисконтная карта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ДисконтнаяКарта) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ДисконтнаяКарта%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %ДисконтнаяКарта%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ДисконтнаяКарта%", Строка(СтруктураНадписи.ПроцентСкидкиПоДисконтнойКарте)+"% по карте"); //СокрЛП(Строка(СтруктураНадписи.ДисконтнаяКарта)));
	КонецЕсли;	
	
	// Налогообложение НДС.
	Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
		КонецЕсли;
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.СуммаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего");
	ИтогСуммаНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Запасы.Итог("СуммаНДС");
	
КонецПроцедуры // ОбновитьПодвалФормы()

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные, ИмяТабличнойЧасти = "Запасы")
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
			Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
				СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
				КонецЕсли;
				СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Работы" Тогда
				СтруктураДанныеНоменклатуры.Вставить("НормаВремени", 1);
			КонецЕсли;
			
			// ДисконтныеКарты
			СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
			СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
			// Конец ДисконтныеКарты
			
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	МассивТипов = Новый Массив;
	Если ИмяТабличнойЧасти="Запасы" Тогда
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ИначеЕсли ИмяТабличнойЧасти="Работы" Тогда
		//Работы и материалы
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		Если СтруктураДанные.ИспользоватьМатериалы Тогда
			МассивТипов.Добавить(Перечисления.ТипыНоменклатуры.Запас);
		КонецЕсли; 
	КонецЕсли; 
	СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	ИмяТекущейСтраницы = Элементы.ЗНСтраницы.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "ЗНГруппаРаботы" Тогда
		ИмяТабличнойЧасти = "Работы";
	ИначеЕсли ИмяТекущейСтраницы = "ЗНГруппаЗапасы" Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли Объект.ИспользоватьТовары Тогда
		ИмяТабличнойЧасти = "Запасы";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
	СтруктураДанные.Вставить("Дата", Объект.Дата);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДанные.Вставить("ИспользоватьМатериалы", Объект.ИспользоватьМатериалы);
	Если ИмяТабличнойЧасти = "Работы" Тогда
		СтруктураДанные.Вставить("НормаВремени", 1);
	КонецЕсли;
	// ДисконтныеКарты
	СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	// Конец ДисконтныеКарты
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные, ИмяТабличнойЧасти);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));			
		Иначе
			
			Если ИмяТабличнойЧасти = "Запасы" Тогда
				СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения);
				МассивСтрокТЧ = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураКолонокТЧ);
			ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
				СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения);
				МассивСтрокТЧ = Объект.Материалы.НайтиСтроки(СтруктураКолонокТЧ);
			Иначе	
				СтруктураКолонокТЧ = Новый Структура("Номенклатура,Характеристика",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика);
				МассивСтрокТЧ = Объект.Работы.НайтиСтроки(СтруктураКолонокТЧ);
			КонецЕсли;
			
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					//Запасы
					НоваяСтрока = Объект.Запасы.Добавить();
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					
					НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
					НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
					НоваяСтрока.ТипНоменклатурыЗапас = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоЗапас;
					НоваяСтрока.Количество = ТекШтрихкод.Количество;
					
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
					НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
					
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					
				ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
					//Материалы
					ТекСтрокаРаботы = Элементы.Работы.ТекущиеДанные;
					Если НЕ (ТекСтрокаРаботы=Неопределено ИЛИ ТекСтрокаРаботы.ТипНоменклатурыУслуга) Тогда
						НоваяСтрока = Объект.Материалы.Добавить();
						НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
						НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
						
						НоваяСтрока.КлючСвязи = ТекСтрокаРаботы.КлючСвязи;
						НоваяСтрока.Количество= ТекШтрихкод.Количество;
						НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
						НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
					КонецЕсли; 
					
				Иначе //Работы
					НоваяСтрока = Объект.Работы.Добавить();
					НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
					НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
					
					НоваяСтрока.ТипНоменклатурыУслуга= ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоУслуга;
					НоваяСтрока.Количество	= СтруктураДанные.НормаВремени;
					НоваяСтрока.Кратность	= ТекШтрихкод.Количество; 
					НоваяСтрока.Коэффициент = 1;
					НоваяСтрока.Содержание	= "";
					
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					НоваяСтрока.ПроцентСкидкиНаценки = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ПроцентСкидкиНаценки;
					НоваяСтрока.СтавкаНДС = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.СтавкаНДС;
					НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
					
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы.Работы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока = МассивСтрокТЧ[0];
				
				Если ИмяТабличнойЧасти = "Запасы" Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				ИначеЕсли ИмяТабличнойЧасти = "Работы" И ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Иначе
					НоваяСтрока.Кратность = НоваяСтрока.Кратность + ТекШтрихкод.Количество;
					РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТабличнойЧасти , НоваяСтрока);
					Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяТабличнойЧасти="Запасы" Тогда
				Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
					РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере(ПоСпецификации, ТребуемоеКоличество, ИспользуемаяЕдиницаИзмерения = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(СпецификацииСостав.НомерСтроки) КАК СпецификацииСоставНомерСтроки,
	|	СпецификацииСостав.Номенклатура КАК Номенклатура,
	|	СпецификацииСостав.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация КАК Спецификация,
	|	СУММА(СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * &Коэффициент * &Количество) КАК Количество
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка = &Спецификация
	|	И СпецификацииСостав.Номенклатура.ТипНоменклатуры = &ТипНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	СпецификацииСостав.ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация,
	|	СпецификацииСостав.ТипСтрокиСостава
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацииСоставНомерСтроки");
	
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	
	Запрос.УстановитьПараметр("Спецификация", ПоСпецификации);
	Запрос.УстановитьПараметр("Количество", ТребуемоеКоличество);
	
	Если НЕ ТипЗнч(ИспользуемаяЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")
		И ИспользуемаяЕдиницаИзмерения <> Неопределено Тогда
		Запрос.УстановитьПараметр("Коэффициент", ИспользуемаяЕдиницаИзмерения.Коэффициент);
	Иначе
		Запрос.УстановитьПараметр("Коэффициент", 1);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Узел") Тогда
			
			ЗаполнитьПоСпецификацииНаСервере(Выборка.Спецификация, Выборка.Количество, Выборка.ЕдиницаИзмерения);
			
		Иначе
			
			НоваяСтрока = Объект.Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.КлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСпецификацииНаСервере()

&НаСервере
Процедура ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(ТаблицаСпецификаций)
	
	Запрос	= Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСпецификаций.Спецификация,
	|	ТаблицаСпецификаций.Кратность КАК Кратность,
	|	ТаблицаСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения КАК КоэффициентОтБазовойЕдиницыИзмерения,
	|	ТаблицаСпецификаций.КлючСвязи
	|ПОМЕСТИТЬ ВрТабСпецификаций
	|ИЗ
	|	&ТаблицаСпецификаций КАК ТаблицаСпецификаций
	|ГДЕ
	|	НЕ ТаблицаСпецификаций.ТипНоменклатурыУслуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТабСпецификаций.КлючСвязи,
	|	ВрТабСпецификаций.Кратность,
	|	СпецификацииСостав.ТипСтрокиСостава,
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ СпецификацииСостав.ЕдиницаИзмерения = СпецификацииСостав.Номенклатура.ЕдиницаИзмерения
	|						ТОГДА ВЫБОР
	|								КОГДА СпецификацииСостав.ЕдиницаИзмерения.Коэффициент = 0
	|									ТОГДА 1
	|								ИНАЧЕ СпецификацииСостав.ЕдиницаИзмерения.Коэффициент
	|							КОНЕЦ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентОтБазовойЕдиницыИзмерения,
	|	СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * ВрТабСпецификаций.Кратность * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВрТабСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВрТабСпецификаций.КоэффициентОтБазовойЕдиницыИзмерения
	|	КОНЕЦ КАК Количество,
	|	СпецификацииСостав.КоличествоПродукции,
	|	СпецификацииСостав.Спецификация КАК Спецификация
	|ИЗ
	|	ВрТабСпецификаций КАК ВрТабСпецификаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК СпецификацииСостав
	|		ПО ВрТабСпецификаций.Спецификация = СпецификацииСостав.Ссылка
	|ГДЕ
	|	(СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Материал)
	|			ИЛИ СпецификацииСостав.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.УЗЕЛ))
	|	И СпецификацииСостав.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)";
	
	Запрос.УстановитьПараметр("ТаблицаСпецификаций", ТаблицаСпецификаций);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаУзлов = ТаблицаСпецификаций.Скопировать();
	ТаблицаУзлов.Очистить();
	
	Для каждого СтрокаТаблицы Из РезультатЗапроса Цикл
		
		Если СтрокаТаблицы.ТипСтрокиСостава = ПредопределенноеЗначение("Перечисление.ТипыСтрокСоставаСпецификации.Узел") Тогда
			
			НоваяСтрока = ТаблицаУзлов.Добавить();
			
		Иначе
			
			НоваяСтрока = Объект.Материалы.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Если ТаблицаУзлов.Количество() > 0 Тогда
		
		ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(ТаблицаУзлов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоВсемСпецификациямНаСервере()
	
	Работы_ТаблицаЗначений = РеквизитФормыВЗначение("Объект").Работы.Выгрузить();
	
	//Удалим строки с без спецификаций и со спецификациями без состава
	Счетчик = (Работы_ТаблицаЗначений.Количество() - 1);
	Пока Счетчик >= 0 Цикл
		Если Работы_ТаблицаЗначений[Счетчик].Спецификация.Состав.Количество() = 0 Тогда 
			Работы_ТаблицаЗначений.Удалить(Работы_ТаблицаЗначений[Счетчик]);
		КонецЕсли;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
	Работы_ТаблицаЗначений.Колонки.Добавить("КоэффициентОтБазовойЕдиницыИзмерения", Новый ОписаниеТипов("Число"));
	ПеренестиМатериалыВТабличноеПолеСКлючамиЗаписей(Работы_ТаблицаЗначений);
	
	//Все заполнено, теперь свернем диблирующие строки.
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	ТаблицаМатериалов.Свернуть("КлючСвязи, Номенклатура, Характеристика, Партия, ЕдиницаИзмерения", "Количество, Резерв, РезервОтгрузка");
	
	Объект.Материалы.Очистить();
	Объект.Материалы.Загрузить(ТаблицаМатериалов);
	
КонецПроцедуры // ЗаполнитьМатериалыПоВсемСпецификациямНаСервере()

&НаСервере
Процедура СформироватьНаименованияМатериаловИИсполнителей()
	
	// Подчиненные ТЧ
	ИспользоватьСовместительство = ПолучитьФункциональнуюОпцию("ИспользоватьСовместительство");
	Для каждого СтрокаРаботы Из Объект.Работы Цикл
	
		СтрокаМатериалы = "";
		МассивПоКлючуЗаписи = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаРаботы.КлючСвязи));
		Для каждого СтрокаТЧ Из МассивПоКлючуЗаписи Цикл
			СтрокаМатериалы = СтрокаМатериалы + ?(СтрокаМатериалы = "", "", ", ") + СтрокаТЧ.Номенклатура 
								+ ?(ЗначениеЗаполнено(СтрокаТЧ.Характеристика), " (" + СтрокаТЧ.Характеристика + ")", "");
		КонецЦикла;
		СтрокаРаботы.Материалы = СтрокаМатериалы;
		
		ТаблицаИсполнители = Объект.Исполнители.Выгрузить(Новый Структура("КлючСвязи", СтрокаРаботы.КлючСвязи), "Сотрудник");
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Код,
		|	Сотрудники.Наименование,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&НаДату, ) КАК ФИОФизЛицСрезПоследних
		|		ПО Сотрудники.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	Сотрудники.Ссылка В(&ТаблицаИсполнители)";
		
		Запрос.УстановитьПараметр("НаДату", Объект.Дата);
		Запрос.УстановитьПараметр("ТаблицаИсполнители", ТаблицаИсполнители);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтрокаИсполнители = "";
		Пока Выборка.Следующий() Цикл
			ПредставлениеСотрудник = УправлениеНебольшойФирмойСервер.ПолучитьФамилиюИмяОтчество(Выборка.Фамилия, Выборка.Имя, Выборка.Отчество);
			СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") 
								+ ?(ЗначениеЗаполнено(ПредставлениеСотрудник), ПредставлениеСотрудник, Выборка.Наименование);
			Если ИспользоватьСовместительство Тогда
				СтрокаИсполнители = СтрокаИсполнители + " (" + СокрЛП(Выборка.Код) + ")";
			КонецЕсли;
		КонецЦикла;
		СтрокаРаботы.Исполнители = СтрокаИсполнители;
	
	КонецЦикла;
	
КонецПроцедуры // СформироватьНаименованияМатериаловИИсполнителей()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере(ИсполнителиКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсам(ИсполнителиКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОтразитьИзмененияПоТаблицеИсполнителей(ИсполнителиКлючСвязи);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсамНаСервере()

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере(МассивБригад, ИсполнителиКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьТабличнуюЧастьИсполнителиПоБригадам(МассивБригад, ИсполнителиКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ОтразитьИзмененияПоТаблицеИсполнителей(ИсполнителиКлючСвязи);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьИсполнителиПоБригадамНаСервере()

&НаСервере
Процедура ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ТоварыЗаполнитьКолонкуРезервПоОстаткам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервере
Процедура ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ТоварыЗаполнитьКолонкуРезервПоРезервам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаСервере
Процедура ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере(МатериалыКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.МатериалыЗаполнитьКолонкуРезервПоОстаткам(МатериалыКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервере
Процедура ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере(МатериалыКлючСвязи = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.МатериалыЗаполнитьКолонкуРезервПоРезервам(МатериалыКлючСвязи);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере()

&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеДоговораУсловиямДокумента(ТекстСообщения, Договор, Документ, Организация, Контрагент, ВидОперации, Отказ)
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов()
		ИЛИ Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	СписокВидовДоговора = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	Если Не МенеджерСправочника.ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора)
		И ПолучитьФункциональнуюОпцию("НеПроводитьДокументыСНекорректнымиДоговорами") Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбораДоговора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеДоговора(ДанныеДоговора = Неопределено)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		Если ДанныеДоговора = Неопределено Тогда
			
			ДанныеДоговора = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Договор);
			
		КонецЕсли;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> ДанныеДоговора.ВидЦен И ЗначениеЗаполнено(ДанныеДоговора.ВидЦен);
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> ДанныеДоговора.ВидСкидкиНаценки И ЗначениеЗаполнено(ДанныеДоговора.ВидСкидкиНаценки);
		Если ДанныеДоговора.Свойство("ВызовИзПроцедурыПриИзмененииКонтрагента") Тогда
			ОчиститьДисконтнуюКарту = ЗначениеЗаполнено(Объект.ДисконтнаяКарта); // В дальнейшем реквизит ДисконтнаяКрата будет очищен.
		Иначе
			ОчиститьДисконтнуюКарту = Ложь;
		КонецЕсли;			
		ВопросВидЦен = (ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки));
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = ДанныеДоговора.ВалютаРасчетов;
		
		НовыйДоговорИВалютаРасчетов = ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(ВалютаРасчетов) 
										И Объект.Договор <> ДоговорПередИзменением И ВалютаРасчетовПередИзменением <> ДанныеДоговора.ВалютаРасчетов;
		ОткрытьФормуЦеныИВалюты = НовыйДоговорИВалютаРасчетов И Объект.ВалютаДокумента <> ДанныеДоговора.ВалютаРасчетов
			И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0);
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ДоговорПередИзменением", ДоговорПередИзменением);
		ПараметрыДокумента.Вставить("ВалютаРасчетовПередИзменением", ВалютаРасчетовПередИзменением);
		ПараметрыДокумента.Вставить("ДанныеДоговора", ДанныеДоговора);
		ПараметрыДокумента.Вставить("ВопросВидЦен", ВопросВидЦен);
		ПараметрыДокумента.Вставить("ОткрытьФормуЦеныИВалюты", ОткрытьФормуЦеныИВалюты);
		ПараметрыДокумента.Вставить("ИзменилсяВидЦен", ИзменилсяВидЦен);
		ПараметрыДокумента.Вставить("ИзменилсяВидСкидки", ИзменилсяВидСкидки);
		ПараметрыДокумента.Вставить("ОчиститьДисконтнуюКарту", ОчиститьДисконтнуюКарту);
		ПараметрыДокумента.Вставить("ПересчетНеобходимПоЗапасам", Объект.Запасы.Количество() > 0);
		ПараметрыДокумента.Вставить("ПересчетНеобходимПоРаботам", Объект.Работы.Количество() > 0);
		
		ОбработатьИзменениеВидаЦенИВалютыРасчетов(ПараметрыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ЗНКонтрагент.АвтоМаксимальнаяШирина = НЕ Элементы.ОстатокВзаиморасчетов.Видимость;
	

	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		возврат;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти)
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Пометка");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "НомерСтроки");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Номенклатура");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Характеристика");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Партия");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "Количество");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "ЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "СтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить(ИмяТабличнойЧасти + "НомерГТД");
	
	Для каждого ЭлементФормы Из Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений[Ключ].Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТабличнойЧасти + "ЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти)
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений[Ключ] Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяТабличнойЧасти + "ЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений[Ключ] = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД, ИмяТабличнойЧасти)
	
	Если КэшЗначений = Неопределено Тогда
		
		КэшЗначений = Новый Структура;
		
	КонецЕсли;
	
	Ключ = "ОбрабатываемыеРеквизиты" + ИмяТабличнойЧасти;
	
	Если НЕ КэшЗначений.Свойство(Ключ) Тогда
		
		КэшЗначений.Вставить(Ключ, Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти);
		
	Иначе
		
		ВыключитьРежимРаботаГТД(Ключ, ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗНМатериалыПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		НоваяСтрока.КлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
		
		НоваяСтрока.РезервОтгрузка = НоваяСтрока.Резерв;
		
	КонецЦикла;
	
КонецПроцедуры // ЗНМатериалыПолучитьЗапасыИзХранилища()

&НаСервере
Процедура ВидЗаказаПриИзмененииСервер()
	
	ЭтотОбъект.ЗаказНарядВСостоянииВыполнения = СостоянияЗаказовВызовСервера.ЭтоСостояниеВыполненияЗаказНаряда(Объект.СостояниеЗаказа, Объект.ВидЗаказа);
	Объект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(Объект.ВидЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущейСтраницейЗавершениеЗаказа()
	
	Элементы.ЗНСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ОткрытьФормуЦеныИВалютаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") 
		И РезультатЗакрытия.БылиВнесеныИзменения Тогда
		
		Модифицированность = Истина;
		
		Если Объект.ВалютаДокумента <> РезультатЗакрытия.ВалютаДокумента Тогда
			
			Объект.БанковскийСчет = Неопределено;
			
		КонецЕсли;
		
		Объект.ВидЦен = РезультатЗакрытия.ВидЦен;
		Объект.ВидСкидкиНаценки = РезультатЗакрытия.ВидСкидки;
		// ДисконтныеКарты
		Если ЗначениеЗаполнено(РезультатЗакрытия.ДисконтнаяКарта) И ЗначениеЗаполнено(РезультатЗакрытия.Контрагент) И Не Объект.Контрагент.Пустая() Тогда
			Если РезультатЗакрытия.Контрагент = Объект.Контрагент Тогда
				Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
				Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
			Иначе // Выдадим сообщение и не будем менять данные о дисконтной карте.
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
				,
				"Контрагент",
				"Объект");
			КонецЕсли;
		Иначе
			Объект.ДисконтнаяКарта = РезультатЗакрытия.ДисконтнаяКарта;
			Объект.ПроцентСкидкиПоДисконтнойКарте = РезультатЗакрытия.ПроцентСкидкиПоДисконтнойКарте;
		КонецЕсли;
		// Конец ДисконтныеКарты
		Объект.ВалютаДокумента = РезультатЗакрытия.ВалютаДокумента;
		Объект.Курс = РезультатЗакрытия.КурсРасчетов;
		Объект.Кратность = РезультатЗакрытия.КратностьРасчетов;
		Объект.СуммаВключаетНДС = РезультатЗакрытия.СуммаВключаетНДС;
		Объект.НДСВключатьВСтоимость = РезультатЗакрытия.НДСВключатьВСтоимость;
		Объект.НалогообложениеНДС = РезультатЗакрытия.НалогообложениеНДС;
		ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
		
		// Пересчитываем цены по виду цен.
		Если РезультатЗакрытия.ПерезаполнитьЦены Тогда
			
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
			
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И РезультатЗакрытия.ПересчитатьЦены Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, "Запасы");
			УправлениеНебольшойФирмойКлиент.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, "Работы");
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если РезультатЗакрытия.НалогообложениеНДС <> РезультатЗакрытия.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ РезультатЗакрытия.ПерезаполнитьЦены
			И НЕ РезультатЗакрытия.СуммаВключаетНДС = РезультатЗакрытия.ПредСуммаВключаетНДС Тогда
			
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Запасы");
			УправлениеНебольшойФирмойКлиент.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Работы");
			
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));
				
		КонецЦикла;
		
		// Сформируем надпись цены и валюты.
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС, 
			Объект.ДисконтнаяКарта, 
			Объект.ПроцентСкидкиПоДисконтнойКарте);
			
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// АвтоматическиеСкидки
		Если РезультатЗакрытия.ПерезаполнитьСкидки ИЛИ РезультатЗакрытия.ПерезаполнитьЦены ИЛИ РезультатЗакрытия.ПересчитатьЦены Тогда
			СброситьФлагСкидкиРассчитаныКлиент("ПерезаполнениеПоДаннымФормыЦеныИВалюта");
		КонецЕсли;
		
		//Ручная скидка - заполнение полей ввода на форме
		СкидкиНаценкиКлиентСервер.РассчитатьСуммуИПроцентСкидки(ЭтотОбъект);
		//Конец Ручная скидка	
		
	КонецЕсли;
	
	ПересчитатьПлатежныйКалендарь();
	ОбновитьПодвалФормы();
	
КонецПроцедуры // ОткрытьФормуЦеныИВалютаЗавершение()

&НаКлиенте
Процедура ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КурсНациональнаяВалюта, Объект.Курс),
				СтрокаТабличнойЧасти.Кратность,
				?(Объект.ВалютаДокумента = НациональнаяВалюта, КратностьНациональнаяВалюта, Объект.Кратность));  
			
		КонецЦикла;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте", 
			Объект.ВидЦен, 
			Объект.ВидСкидкиНаценки, 
			Объект.ВалютаДокумента, 
			ВалютаРасчетов, 
			Объект.Курс, 
			КурсНациональнаяВалюта, 
			Объект.СуммаВключаетНДС, 
			УчетВалютныхОпераций, 
			Объект.НалогообложениеНДС, 
			Объект.ДисконтнаяКарта, 
			Объект.ПроцентСкидкиПоДисконтнойКарте
			);
		
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьУстановкиНовогоКурсаВалюты()

&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		ДанныеДоговора = ДополнительныеПараметры.ДанныеДоговора;
		
		Если ДополнительныеПараметры.ПересчетНеобходимПоЗапасам Тогда
			
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Запасы", Истина);
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.ПересчетНеобходимПоРаботам Тогда
			
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен();
			
		КонецЕсли;
		
		ПересчитатьПлатежныйКалендарь();
		ОбновитьПодвалФормы();
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаДокументаПоУсловиямДоговора()

&НаКлиенте
Процедура ОпределитьНеобходимостьЗаполненияПодчиненногоСчетФактуры(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		УправлениеНебольшойФирмойСервер.ИзменитьПодчиненнуюСчетФактуру(Объект.Ссылка);
		Оповестить("ОбновитьДокументИБПослеЗаполнения");
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьНеобходимостьЗаполненияПодчиненногоСчетФактуры()

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Пока Объект.ПлатежныйКалендарь.Количество() > 1 Цикл
		Объект.ПлатежныйКалендарь.Удалить(Объект.ПлатежныйКалендарь.Количество()-1);
	КонецЦикла;
	
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

&НаКлиенте
Процедура ЗапасыПодбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	МаркерПодбора = "Запасы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	
	Если ФункциональнаяОпцияРезервированиеЗапасов Тогда
		
		ПараметрыПодбора.Вставить("СтруктурнаяЕдиница",			Объект.СтруктурнаяЕдиницаРезерв);
		ПараметрыПодбора.Вставить("ЗаполнятьРезерв",			Истина);
		ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", Истина);
		
	Иначе
		
		ПараметрыПодбора.Вставить("ЗаполнятьРезерв", 			Ложь);
		
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	
	ПараметрыПодбора.Вставить("ИсключитьТипНоменклатурыРабота", Истина);
	
	ПараметрыПодбора.Вставить("ВидСкидкиНаценки", 		Объект.ВидСкидкиНаценки);
	ПараметрыПодбора.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	ПараметрыПодбора.Вставить("ВидЦен", 				Объект.ВидЦен);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	Объект.Организация);
	ПараметрыПодбора.Вставить("НалогообложениеНДС",		Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	НЕ Элементы.ЗапасыЦена.ТолькоПросмотр);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры",		ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	#Если ВебКлиент Тогда
		//Обход ошибки платформы передачи данных формы в веб-клиенте при изменении состава элементов формы
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораОстаткиРезервыЦены", ПараметрыПодбора, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	#Иначе
		
		ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	#КонецЕсли
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура РаботыПодбор(Команда)
	
	ИмяТабличнойЧасти = "Работы";
	МаркерПодбора = "Работы";
	
	ПодборДляМатериаловВРаботах = Ложь;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	ПараметрыПодбора.Вставить("ВидСкидкиНаценки", 		Объект.ВидСкидкиНаценки);
	ПараметрыПодбора.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	ПараметрыПодбора.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);
	ПараметрыПодбора.Вставить("ВидРабот", 				Объект.ВидРабот);
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("Валюта", 				Объект.ВалютаДокумента);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	Объект.Организация);
	ПараметрыПодбора.Вставить("ИспользуютсяНормы", 		Истина);
	
	ПараметрыПодбора.Вставить("СуммаВключаетНДС", 		Объект.СуммаВключаетНДС);
	ПараметрыПодбора.Вставить("ВидЦенПоВидуРабот", 		Объект.ВидЦен);
	ПараметрыПодбора.Вставить("НалогообложениеНДС", 	Объект.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("ОтображатьКолонкуЦена", 	Ложь);
	ПараметрыПодбора.Вставить("ДоступноИзменениеЦены",	НЕ Элементы.ЗНРаботыЦена.ТолькоПросмотр);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы.ЗНРаботыНоменклатура.ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	
	ИмяТабличнойЧасти = "МатериалыЗаказчика";
	МаркерПодбора = "МатериалыЗаказчика";
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 		Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",	Компания);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы["ЗН" + ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	#Если ВебКлиент Тогда
		//Обход ошибки платформы передачи данных формы в веб-клиенте при изменении состава элементов формы
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораОстаткиРезервыЦены", ПараметрыПодбора, ЭтотОбъект);
		
	#Иначе
		
		ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
		
	#КонецЕсли
	
КонецПроцедуры // ПодборВыполнить()

&НаКлиенте
Процедура ЗаписатьОшибкуЧтенияДанныхИзХранилища()
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка", , ТекстОшибкиЖурналаРегистрации);
	
КонецПроцедуры // ЗаписатьОшибкуЧтенияДанныхИзХранилища()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
				|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
				|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		Если НоваяСтрока.Свойство("Пометка") Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Всего")
			И НЕ ЗначениеЗаполнено(НоваяСтрока.Всего) Тогда
			
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
		КонецЕсли;
		
		// Дозаполнение
		Если ИмяТабличнойЧасти = "Работы" Тогда
			
			НоваяСтрока.КлючСвязи = УправлениеНебольшойФирмойСервер.СоздатьНовыйКлючСвязи(ЭтотОбъект);
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				НоваяСтрока.ТипНоменклатурыУслуга = (СтрокаЗагрузки.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
				
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "Запасы" Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				НоваяСтрока.ТипНоменклатурыЗапас = (СтрокаЗагрузки.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
				
			КонецЕсли;
			
			// Если заказ "Выполнен" знач. в подборе выбирали товар отгруженный,
			// иначе в подборе выбирали товар к резерву, но поле тоже нужно заполнить.
			НоваяСтрока.РезервОтгрузка = НоваяСтрока.Резерв;
			
		КонецЕсли;
		
		Если НоваяСтрока.Свойство("Спецификация") Тогда 
			
			НоваяСтрока.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.Характеристика);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// АвтоматическиеСкидки
	Если ТаблицаДляЗагрузки.Количество() > 0 Тогда
		СброситьФлагСкидкиРассчитаныСервер("ОбработкаПодбора");
	КонецЕсли;

КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Функция ПоместитьПредоплатаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.Предоплата.Выгрузить(,
			"Документ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СуммаПлатежа"),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьПредоплатаВХранилище()

&НаСервере
Процедура ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресПредоплатаВХранилище);
	Объект.Предоплата.Загрузить(ТаблицаДляЗагрузки);
	
	Элементы.ЗНГруппаПредоплата.Заголовок = РаботаСФормойДокументаКлиентСервер.ПолучитьЗаголовокПредоплаты(Объект.Предоплата, Объект.ВалютаДокумента);
	
КонецПроцедуры // ПолучитьПредоплатаИзХранилища()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаКлиенте
Процедура УправлениеФормой()
	
	УстановитьВидимостьИДоступностьОтСостояния();
	УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата();
	УстановитьВидимостьОтПользовательскихНастроек();
	УстановитьВидимостьДоговора();
	
	ЗаказЗавершен	= Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.Завершен");
	ЗаказОтменен	= Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Отменен");
	РедактироватьСписком = Элементы.РедактироватьСписком.Пометка;
	
	Элементы.СтраницаЗавершениеЗаказа.Видимость		= ЗаказЗавершен;
	Элементы.ПричинаОтмены.Доступность				= ЗаказОтменен;
	Элементы.БанковскийСчет.Видимость				= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Безналичные");
	Элементы.Касса.Видимость						= Объект.ТипДенежныхСредств = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств.Наличные");
	Элементы.ПлатежныйКалендарьСтрокой.Видимость	= Не РедактироватьСписком;
	Элементы.СписокПлатежныйКалендарь.Видимость		= РедактироватьСписком;
	Элементы.БанковскийСчет.ОтметкаНезаполненного	= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.БанковскийСчет);
	Элементы.Касса.ОтметкаНезаполненного			= Объект.ЗапланироватьОплату И Не ЗначениеЗаполнено(Объект.Касса);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьОтСостояния()
	
	Если ЗаказНарядВСостоянииВыполнения Тогда
		
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыРезервОтгрузка.Видимость = Истина;
		
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоРезервам.Видимость = Истина;
		
		Элементы.ЗНМатериалыРезерв.Видимость = Ложь;
		Элементы.ЗНМатериалыРезервОтгрузка.Видимость = Истина;
		
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткамДляВсех.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервам.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервамДляВсех.Видимость = Истина;
		
		Элементы.ЗНГруппаПредоплата.Доступность = Истина;
		
	Иначе
		
		Элементы.ЗапасыРезерв.Видимость = Истина;
		Элементы.ЗапасыРезервОтгрузка.Видимость = Ложь;
		
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Истина;
		Элементы.ЗапасыИзменитьРезервЗаполнитьПоРезервам.Видимость = Ложь;
		
		Элементы.ЗНМатериалыРезерв.Видимость = Истина;
		Элементы.ЗНМатериалыРезервОтгрузка.Видимость = Ложь;
		
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткам.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоОстаткамДляВсех.Видимость = Истина;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервам.Видимость = Ложь;
		Элементы.МатериалыИзменитьРезервЗаполнитьПоРезервамДляВсех.Видимость = Ложь;
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
		КонецЦикла;
		
		Для каждого СтрокаМатериалы Из Объект.Материалы Цикл
			СтрокаМатериалы.РезервОтгрузка = СтрокаМатериалы.Резерв;
		КонецЦикла;
		
		Элементы.ЗНГруппаПредоплата.Доступность = Ложь;
		
		Если Объект.Предоплата.Количество() > 0 Тогда
			Объект.Предоплата.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата()
	
	// Зарплата.
	Элементы.ЗНГруппаИсполнители.Видимость = ИспользоватьПодсистемуЗарплата;
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуЗарплата()

&НаКлиенте
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	Если Объект.ПоложениеВидаРабот = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		Элементы.ЗНВидРабот.Видимость = Истина;
		Элементы.ЗНРаботыВидРабот.Видимость = Ложь;
		Элементы.ЗНРаботыВидРабот.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		Элементы.ТаблицаРаботыВидРабот.Видимость = Ложь;
		ВидРаботВШапке = Истина;
	Иначе
		Элементы.ЗНВидРабот.Видимость = Ложь;
		Элементы.ЗНРаботыВидРабот.Видимость = Истина;
		Элементы.ЗНРаботыВидРабот.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Элементы.ТаблицаРаботыВидРабот.Видимость = Истина;
		ВидРаботВШапке = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьТовары Тогда
		Элементы.ЗНГруппаЗапасы.Видимость = Истина;
	Иначе
		Элементы.ЗНГруппаЗапасы.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьМатериалыЗаказчика Тогда
		Элементы.ЗНГруппаМатериалыЗаказчика.Видимость = Истина
	Иначе
		Элементы.ЗНГруппаМатериалыЗаказчика.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьМатериалы Тогда
		Элементы.ЗНМатериалы.Видимость = Истина
	Иначе
		Элементы.ЗНМатериалы.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользоватьЗарплатаИсполнителей 
		И ИспользоватьПодсистемуЗарплата Тогда
		
		Элементы.ЗНГруппаИсполнители.Видимость = Истина
		
	Иначе
		
		Элементы.ЗНГруппаИсполнители.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

&НаКлиенте
Процедура РедактироватьЗачетПредоплаты(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите вначале договор контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	    ЗаказДляПодбораПредоплаты = ПредопределенноеЗначение("Документ.ПриемИПередачаВРемонт.ПустаяСсылка");
	Иначе	
		ЗаказДляПодбораПредоплаты = ?(КонтрагентВестиРасчетыПоЗаказам, Объект.Ссылка, Неопределено);
	КонецЕсли;
	
	АдресПредоплатаВХранилище = ПоместитьПредоплатаВХранилище();
	ПараметрыПодбора = Новый Структура(
		"АдресПредоплатаВХранилище,
		|Подбор,
		|ЕстьЗаказ,
		|ЗаказВШапке,
		|Компания,
		|Заказ,
		|Дата,
		|Ссылка,
		|Контрагент,
		|Договор,
		|Курс,
		|Кратность,
		|ВалютаДокумента,
		|СуммаДокумента",
		АдресПредоплатаВХранилище, // АдресПредоплатаВХранилище
		Истина, // Подбор
		Ложь, // ЕстьЗаказ
		Истина, // ЗаказВШапке
		Компания, // Компания
		ЗаказДляПодбораПредоплаты, // Заказ
		Объект.Дата, // Дата
		Объект.Ссылка, // Ссылка
		Объект.Контрагент, // Контрагент
		Объект.Договор, // Договор
		Объект.Курс, // Курс
		Объект.Кратность, // Кратность
		Объект.ВалютаДокумента, // ВалютаДокумента
		Объект.Работы.Итог("Всего") + Объект.Запасы.Итог("Всего")
	);
	
	КодВозврата = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАвансовПокупателей", ПараметрыПодбора,,,,, Новый ОписаниеОповещения("РедактироватьЗачетПредоплатыЗавершение", ЭтотОбъект, Новый Структура("АдресПредоплатаВХранилище", АдресПредоплатаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗачетПредоплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресПредоплатаВХранилище = ДополнительныеПараметры.АдресПредоплатаВХранилище;
	
	КодВозврата = Результат;
	Если КодВозврата = КодВозвратаДиалога.OK Тогда
		ПолучитьПредоплатаИзХранилища(АдресПредоплатаВХранилище);
	КонецЕсли;
	
КонецПроцедуры // РедактироватьЗачетПредоплаты()

&НаКлиенте
Процедура УстановитьВидимостьДоговора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		КонтрагентВестиРасчетыПоЗаказам = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоЗаказам;
		Элементы.ЗНДоговор.Видимость = ПараметрыРасчетовСКонтрагентом.ВестиРасчетыПоДоговорам;
		
	Иначе
		
		КонтрагентВестиРасчетыПоЗаказам = Ложь;
		Элементы.ЗНДоговор.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоговора()

&НаСервере
Процедура ЗаполнитьПараметрыРасчетовСКонтрагентом()
	
	ПараметрыРасчетовСКонтрагентом = 
		Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам"));

КонецПроцедуры

#КонецОбласти

#Область ИзменитьРезервТовары

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗНТоварыЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
КонецПроцедуры // ЗНИзменитьТоварыРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервЗаполнитьПоРезервам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗНТоварыЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
КонецПроцедуры // ЗНИзменитьТоварыРезервЗаполнитьПоРезервам()

&НаКлиенте
Процедура ЗНИзменитьТоварыРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Товары"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
		Если СтрокаТабличнойЧасти.ТипНоменклатурыЗапас Тогда
			СтрокаТабличнойЧасти.Резерв = 0;
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗНИзменитьТоварыРезервОчиститьРезерв()

#КонецОбласти

#Область ИзменитьРезервМатериалы

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткам(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	МатериалыКлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
	Если РезультатПоиска.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Материалы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере(МатериалыКлючСвязи);
	
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Материалы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехЗавершение", ЭтотОбъект),
			НСтр("ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсехФрагмент()
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоОстаткамДляВсех()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервам(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	МатериалыКлючСвязи = Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"];
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
	Если РезультатПоиска.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Материалы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере(МатериалыКлючСвязи);
	
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоРезервам()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Материалы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехЗавершение", ЭтотОбъект),
			НСтр("ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсехФрагмент()
	
	ЗНМатериалыЗаполнитьКолонкуРезервПоРезервамНаСервере();
	
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервЗаполнитьПоРезервамДляВсех()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезерв(Команда)
	
	ТекущаяСтрокаТЧ = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущаяСтрокаТЧ = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", Элементы.ЗНМатериалы.ОтборСтрок["КлючСвязи"]));
	Если РезультатПоиска.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Материалы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
		
		СтрокаТабличнойЧасти.Резерв = 0;
		СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		
	КонецЦикла;
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервОчиститьРезерв()

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсех(Команда)
	
	Если Объект.Материалы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Материалы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Объект.Работы.Количество() > 1 Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехЗавершение", ЭтотОбъект),
			НСтр("ru = 'В табличной части ""Материалы"" колонка ""Резерв"" будет перезаполнена для всех работ! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗНИзменитьМатериалыРезервОчиститьРезервДляВсехФрагмент()
	
	Перем СтрокаТабличнойЧасти;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		
		СтрокаТабличнойЧасти.Резерв = 0;
		СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		
	КонецЦикла;
	
КонецПроцедуры // ЗНИзменитьМатериалыРезервОчиститьРезервДляВсех()

#КонецОбласти

#Область ДисконтныеКарты

&НаКлиенте
Процедура ВыбранаДисконтнаяКарта(ДисконтнаяКарта)

	ВладелецДисконтнойКарты = ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта);
	Если Объект.Контрагент.Пустая() И Не ВладелецДисконтнойКарты.Пустая() Тогда
		Объект.Контрагент = ВладелецДисконтнойКарты;
		КонтрагентПриИзменении(Элементы.ЗНКонтрагент);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Заполнен контрагент и считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В документе заполнен контрагент и считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	ИначеЕсли Объект.Контрагент <> ВладелецДисконтнойКарты И Не ВладелецДисконтнойКарты.Пустая() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дисконтная карта не считана. Владелец дисконтной карты не совпадает с контрагентом в документе.'"),
			,
			"Контрагент",
			"Объект");
		
		Возврат;
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Считана дисконтная карта'"),
			ПолучитьНавигационнуюСсылку(ДисконтнаяКарта),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Считана дисконтная карта %1'"), ДисконтнаяКарта),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительно(ДисконтнаяКарта)
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.ДисконтнаяКарта = ДисконтнаяКарта;
	Объект.ПроцентСкидкиПоДисконтнойКарте = УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, ДисконтнаяКарта);
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
			Объект.ВидЦен,
			Объект.ВидСкидкиНаценки,
			Объект.ВалютаДокумента,
			ВалютаРасчетов,
			Объект.Курс,
			КурсНациональнаяВалюта,
			Объект.СуммаВключаетНДС,
			УчетВалютныхОпераций,
			Объект.НалогообложениеНДС,
			Объект.ДисконтнаяКарта,
			Объект.ПроцентСкидкиПоДисконтнойКарте);
			
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Если Объект.Запасы.Количество() > 0 Или Объект.Работы.Количество() > 0 Тогда
		Текст = НСтр("ru = 'Перезаполнить скидки во всех строках?'");
		Оповещение = Новый ОписаниеОповещения("ВыбранаДисконтнаяКартаДополнительноЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаДисконтнаяКартаДополнительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
		УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Работы");
	КонецЕсли;
	
	// Платежный календарь.
	ПересчитатьПлатежныйКалендарь();
	
	// АвтоматическиеСкидки
	СброситьФлагСкидкиРассчитаныКлиент("ПересчетСкидокПоДисконтнойКарте");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаДисконтнойКарты(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.ВладелецКарты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоДисконтнаяКартаСФиксированнойСкидкой(ДисконтнаяКарта)
	
	Возврат ДисконтнаяКарта.Владелец.ВидСкидкиВДисконтныхКартах = Перечисления.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка;
	
КонецФункции

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокумента()
	
	Если Объект.ДисконтнаяКарта.Пустая() ИЛИ ЭтоДисконтнаяКартаСФиксированнойСкидкой(Объект.ДисконтнаяКарта) Тогда
		Возврат;
	КонецЕсли;
	
	ПредПроцентСкидкиПоДисконтнойКарте = Объект.ПроцентСкидкиПоДисконтнойКарте;
	НовПроцентСкидкиПоДисконтнойКарте = УправлениеНебольшойФирмойСервер.ВычислитьПроцентСкидкиПоДисконтнойКарте(Объект.Дата, Объект.ДисконтнаяКарта);
	
	Если ПредПроцентСкидкиПоДисконтнойКарте <> НовПроцентСкидкиПоДисконтнойКарте Тогда
		
		Если Объект.Запасы.Количество() > 0 Тогда
			Текст = НСтр("ru = 'Изминть % скидки по накопительной дисконтной карте с "+ПредПроцентСкидкиПоДисконтнойКарте+"% на "+НовПроцентСкидкиПоДисконтнойКарте+"% и перезаполнить скидки во всех строках?'");
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Истина);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			Текст = НСтр("ru = 'Изминть % скидки по накопительной дисконтной карте с "+ПредПроцентСкидкиПоДисконтнойКарте+"% на "+НовПроцентСкидкиПоДисконтнойКарте+"%?'");
			
			ДополнительныеПараметры = Новый Структура("НовПроцентСкидкиПоДисконтнойКарте, ПересчитатьТЧ", НовПроцентСкидкиПоДисконтнойКарте, Ложь);
			Оповещение = Новый ОписаниеОповещения("ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется только для НАКОПИТЕЛЬНЫХ дисконтных карт.
// Процедура пересчитывает скидки документа, после изменения даты документа. Пересчёт выполняется, если процент скидки
// по выбранной дисконтной карте, изменился. 
//
&НаКлиенте
Процедура ПересчитатьПроцентСкидкиПриИзмененииДатыДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПроцентСкидкиПоДисконтнойКарте = ДополнительныеПараметры.НовПроцентСкидкиПоДисконтнойКарте;
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, НалогообложениеНДС, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте",
				Объект.ВидЦен,
				Объект.ВидСкидкиНаценки,
				Объект.ВалютаДокумента,
				ВалютаРасчетов,
				Объект.Курс,
				КурсНациональнаяВалюта,
				Объект.СуммаВключаетНДС,
				УчетВалютныхОпераций,
				Объект.НалогообложениеНДС,
				Объект.ДисконтнаяКарта,
				Объект.ПроцентСкидкиПоДисконтнойКарте);
				
		ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		Если ДополнительныеПараметры.ПересчитатьТЧ Тогда
			УправлениеНебольшойФирмойКлиент.ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ЭтотОбъект, "Запасы");
			
			// Платежный календарь.
			ПересчитатьПлатежныйКалендарь();
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьДисконтнуюКартуНажатиеЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт

	Если ТипЗнч(ВозвращаемыеПараметры) = Тип("Структура") Тогда
		СчитанаДисконтнаяКарта = ВозвращаемыеПараметры.СчитанаДисконтнаяКарта;
		ВыбранаДисконтнаяКарта(ВозвращаемыеПараметры.ДисконтнаяКарта);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область АвтоматическиеСкидки

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	Если Объект.Запасы.Количество() = 0 И Объект.Работы.Количество() = 0 Тогда
		Если Объект.СкидкиНаценки.Количество() > 0 Тогда
			Объект.СкидкиНаценки.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	
КонецПроцедуры

// Функция сравнивает данные расчёта скидок на текущий момент времени с данными последнего расчёт скидок в документе.
// Если скидки изменились, то функция возвращает значение Истина.
//
&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Запасы.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Если Не СкидкиИзменились Тогда
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
					ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка Тогда
					СкидкиИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСерверПереопределяемый.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СкидкиНаценкиСерверПереопределяемый.ОбновитьОтображениеСкидки(Объект, "Запасы");
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
	
		Объект.СкидкиРассчитаны = Истина;
	
	КонецЕсли;
	
	Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
	
	ЕстьРучныеСкидки = Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить();
	Для Каждого ТекущаяСтрока Из Объект.Запасы Цикл
		ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ТекущаяСтрока.Цена * ТекущаяСтрока.Количество * ТекущаяСтрока.ПроцентСкидкиНаценки / 100, 0);
		ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если ТекСуммаСкидки >= ТекущаяСтрока.Сумма И ТекущаяСтрока.Цена > 0 Тогда
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Истина;
		Иначе
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекущаяСтрока Из Объект.Работы Цикл
		ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ТекущаяСтрока.Цена * ТекущаяСтрока.Количество * ТекущаяСтрока.ПроцентСкидкиНаценки / 100, 0);
		ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекущаяСтрока.СуммаАвтоматическойСкидки;
		Если ТекСуммаСкидки >= ТекущаяСтрока.Сумма И ТекущаяСтрока.Цена > 0 Тогда
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Истина;
		Иначе
			ТекущаяСтрока.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.Запасы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент("Запасы")
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахРаботы(Команда)
	
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахКлиент("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахКлиент(ИмяТЧ)
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	
	СтруктураПараметры.Вставить("ТолькоСообщенияПослеОформления",   Ложь);
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	Иначе
		РабочееМесто = ""
	КонецЕсли;
	
	СтруктураПараметры.Вставить("РабочееМесто", РабочееМесто);
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		ТекстВопроса = НСтр("ru='Скидки (наценки) не рассчитаны, рассчитать?'");
		
		ДополнительныеПараметры = Новый Структура("ИмяТЧ", ИмяТЧ); 
		ДополнительныеПараметры.Вставить("СтруктураПараметры", СтруктураПараметры);
		ОбработчикОповещения = Новый ОписаниеОповещения("ОповещениеВопросРассчитатьСкидки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВопросРассчитатьСкидки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметры = ДополнительныеПараметры.СтруктураПараметры;
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ДополнительныеПараметры.ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиЗавершитьОбработкуВопроса(СтруктураПараметры, ИмяТЧ)
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиНаценкиКлиент();
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Элемент.ТекущийЭлемент = Элементы.ЗапасыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗапасыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент("Запасы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// АвтоматическиеСкидки
	Если НоваяСтрока И Копирование И
		(Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки <> 0 ИЛИ Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки <> 0) Тогда
		Элемент.ТекущиеДанные.ПроцентАвтоматическойСкидки = 0;
		Элемент.ТекущиеДанные.СуммаАвтоматическойСкидки = 0;
		РассчитатьСуммуВСтрокеТабличнойЧасти();
	ИначеЕсли ИспользоватьАвтоматическиеСкидки И НоваяСтрока И Копирование Тогда
		// Автоматические скидки стали неактуальны.
		СброситьФлагСкидкиРассчитаныКлиент("ПриНачалеРедактирования");
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерийныеНомера = "";
	КонецЕсли;	
	
	// ГрупповоеИзменениеСтрок
	Элемент.ТекущиеДанные.Пометка = Истина;
	// Конец ГрупповоеИзменениеСтрок
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Элемент.ТекущийЭлемент = Элементы.ЗНРаботыПроцентАвтоматическойСкидки ИЛИ Элемент.ТекущийЭлемент = Элементы.ЗНРаботыСуммаАвтоматическойСкидки)
		И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьИнформациюОСкидкахКлиент("Работы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СброситьФлагСкидкиРассчитаныСервер(Действие, КолонокаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0) И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаКлиенте
Функция СброситьФлагСкидкиРассчитаныКлиент(Действие, КолонокаТЧ = "")
	
	ТребуетсяПересчет = Ложь;
	Если ИспользоватьАвтоматическиеСкидки И (Объект.Запасы.Количество() > 0 ИЛИ Объект.Работы.Количество() > 0) И (Объект.СкидкиРассчитаны ИЛИ УстановленСерыйЦвет) Тогда
		ТребуетсяПересчет = СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ);
	КонецЕсли;
	Возврат ТребуетсяПересчет;
	
КонецФункции

&НаСервере
Функция СброситьФлагСкидкиРассчитаны(Действие, КолонокаТЧ = "")
	
	Возврат СкидкиНаценкиСервер.СброситьФлагСкидкиРассчитаны(ЭтотОбъект, Действие, КолонокаТЧ, "Запасы", "Работы");
	
КонецФункции

&НаСервере
Процедура АвтоматическиеСкидкиПриСозданииНаСервере()
	
	УстановленСерыйЦвет = Ложь;
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки");
	Если ИспользоватьАвтоматическиеСкидки Тогда
		Если Объект.Запасы.Количество() = 0 И Объект.Работы.Количество() = 0 Тогда
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьСерый;
			УстановленСерыйЦвет = Истина;
		ИначеЕсли НЕ Объект.СкидкиРассчитаны Тогда
			Объект.СкидкиРассчитаны = Ложь;
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.ОбновитьКрасный;
		Иначе
			Элементы.ЗапасыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
			Элементы.РаботыРассчитатьСкидкиНаценки.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура РаботыКопироватьСтроки(Команда)
	КопироватьСтроки("Работы", "Работы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКопироватьСтроки(Команда)
	КопироватьСтроки("Материалы", "ЗНМатериалы");
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	КопироватьСтроки("Запасы", "Запасы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаКопироватьСтроки(Команда)
	КопироватьСтроки("МатериалыЗаказчика", "ЗНМатериалыЗаказчика");
КонецПроцедуры

&НаКлиенте
Процедура РаботыВставитьСтроки(Команда)
	ИмяТабличнойЧасти = "Работы";
	ВставитьСтроки("Работы", "Работы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВставитьСтроки(Команда)
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы");
	Если НЕ Отказ Тогда
		ВставитьСтроки("Материалы", "ЗНМатериалы");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	ВставитьСтроки("Запасы", "Запасы");
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаказчикаВставитьСтроки(Команда)
	ВставитьСтроки("МатериалыЗаказчика", "ЗНМатериалыЗаказчика");
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ, ИмяЭлемента)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ, ИмяЭлемента)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяЭлемента].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоСкопированных, КоличествоВставленных)
	
	ИмяТЧ = Новый Структура("ИмяТЧ,ИмяЭлемента", ИмяТЧ, ИмяЭлемента);
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВставленныеСтроки(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		Если ИмяТЧ = "Работы" Тогда
			Строка = Объект.Работы[Количество - Итератор];
			УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтотОбъект, Строка);
			УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтотОбъект, "ЗНМатериалы", Строка);
			
			РассчитатьСуммуВСтрокеТабличнойЧасти("Работы", Строка);
			
		ИначеЕсли ИмяТЧ = "Материалы" Тогда
			Строка = Объект.Материалы[Количество - Итератор];
			УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтотОбъект, "ЗНМатериалы", Строка);
			
			Элементы.ЗНМатериалы.ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
			
		ИначеЕсли ИмяТЧ = "Запасы" Тогда
			Строка = Объект.Запасы[Количество - Итератор];
			РассчитатьСуммуВСтрокеТабличнойЧасти("Запасы", Строка);
			
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПодвалФормы();
	ПересчитатьПлатежныйКалендарь();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, ИмяЭлемента, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		
		Если ИмяТЧ = "Работы" Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
				Строка.Количество = СтруктураДанные.НормаВремени;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Кратность) Тогда
				Строка.Кратность = 1;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Строка.Коэффициент) Тогда
				Строка.Коэффициент = 1;
			КонецЕсли;
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			
			Строка.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
			
		ИначеЕсли ИмяТЧ = "Запасы" Тогда
			
			Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
			Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
			
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
			
		ИначеЕсли ИмяТЧ = "МатериалыЗаказчика" Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеСтрок

&НаКлиенте
Процедура ЗапасыСнятьФлажки(Команда)
	УстановитьПометку("Запасы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыУстановитьФлажки(Команда)
	УстановитьПометку("Запасы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Запасы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Запасы");
	НастроитьОформлениеПанелиРедактирования("Запасы", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСнятьФлажки(Команда)
	УстановитьПометку("Работы", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РаботыУстановитьФлажки(Команда)
	УстановитьПометку("Работы", Истина);
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменитьСтроки(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Работы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВыполнитьДействие(Команда)
	
	ОбработатьТаблицу("Работы");
	НастроитьОформлениеПанелиРедактирования("Работы", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыОтменитьИзменения(Команда)
	
	ПоказатьСкрытьПанельРедактирования("Работы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Запасы");
	НастроитьОформлениеПанелиРедактирования("Запасы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования("Запасы", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменениеСтрокДействиеПриИзменении(Элемент)
	
	ОпределитьОбъектИзменений("Работы");
	НастроитьОформлениеПанелиРедактирования("Работы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыИзменениеСтрокЗначениеПриИзменении(Элемент)
	
	НастроитьОформлениеПанелиРедактирования("Работы", 3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометку(ИмяТЧ, Пометка)
	
	НаборЭлементов = НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ);
	НаборЭлементов.КнопкаСнятьФлажки.Видимость = НЕ НаборЭлементов.КнопкаСнятьФлажки.Видимость;
	НаборЭлементов.КнопкаУстановитьФлажки.Видимость = НЕ НаборЭлементов.КнопкаУстановитьФлажки.Видимость;
	
	Для каждого Строка Из Объект[НаборЭлементов.ИмяТЧ] Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьПанельРедактирования(ИмяТЧ, ИзменяетДанные = Неопределено)
	
	Перем СостояниеПерехода;
	ГрупповоеИзменениеСтрокСервер.ПоказатьСкрытьПанельРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ),
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеРезервнымиКопиямиТаблицы(ИмяТЧ, СостояниеПерехода, ИзменяетДанные)
	
	Если ИмяТЧ = "Запасы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "ЗапасыРезервнаяКопияТаблицыАдрес";
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		РеквизитРезервнаяКопияТаблицыАдрес = "РаботыРезервнаяКопияТаблицыАдрес";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
		ЭтотОбъект,
		Объект[ИмяТЧ],
		ЭтотОбъект[РеквизитРезервнаяКопияТаблицыАдрес],
		СостояниеПерехода,
		ИзменяетДанные
	);
	
	Если ИмяТЧ = "Запасы" Тогда
		ГрупповоеИзменениеСтрокСервер.УправлениеРезервнымиКопиями(
			ЭтотОбъект,
			Объект.СерийныеНомера,
			ЭтотОбъект.СерийныеНомераРезервнаяКопияТаблицыАдрес,
			СостояниеПерехода,
			ИзменяетДанные
		);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "Запасы" Тогда
		РеквизитЗначение = "ЗапасыИзменениеСтрокЗначение";
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		РеквизитЗначение = "РаботыИзменениеСтрокЗначение";
	КонецЕсли;
	
	ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущееДействиеИзмененияСтрок()
	
	СохраняемыеНастройки = "";
	
	Если ЗапасыИзменениеСтрокДействие <> ЗапасыИзменениеСтрокДействиеПриОткрытии Тогда
		СохраняемыеНастройки = "Запасы";
	КонецЕсли;
	
	Если РаботыИзменениеСтрокДействие <> РаботыИзменениеСтрокДействиеПриОткрытии Тогда
		Если ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
			СохраняемыеНастройки = СохраняемыеНастройки + ",";
		КонецЕсли;
		СохраняемыеНастройки = СохраняемыеНастройки + "Работы";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СохраняемыеНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущееДействиеИзмененияСтрокСервер(СохраняемыеНастройки)
	
	ИменаТЧ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеНастройки);
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		ГрупповоеИзменениеСтрокСервер.СохранитьНастройки(НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	Если ИмяТЧ = "Запасы" Тогда
		ВыполненноеДействие = ЗапасыИзменениеСтрокДействие;
		ПримененноеЗначение = ЗапасыИзменениеСтрокЗначение;
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		ВыполненноеДействие = РаботыИзменениеСтрокДействие;
		ПримененноеЗначение = РаботыИзменениеСтрокЗначение;
	КонецЕсли;
	
	ИзменяемыеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Пометка", Истина));
	Для каждого Строка Из ИзменяемыеСтроки Цикл
		
		Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ИмяТЧ, Строка);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
			//Ручные скидки
			РассчитатьСуммуИПроцентСкидкиРаботыЗапасы();
			//Конец Ручные скидки
			
			// АвтоматическиеСкидки.
			ТребуетсяПересчетАвтоматическихСкидок = СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			Строка.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
			// Конец АвтоматическиеСкидки
			
			ОбновитьПодвалФормы();
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
		ИначеЕсли ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
			ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			Если Строка.Количество <> 0 Тогда
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			// Скидки.
			Если Строка.ПроцентСкидкиНаценки = 100 Тогда
				Строка.Сумма = 0;
			ИначеЕсли Строка.ПроцентСкидкиНаценки <> 0 И Строка.Количество <> 0 Тогда
				Строка.Сумма = Строка.Сумма * (1 - Строка.ПроцентСкидкиНаценки / 100);
			КонецЕсли;
			
			РассчитатьСуммуНДС(Строка);
			Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);
			
			// АвтоматическиеСкидки.
			СброситьФлагСкидкиРассчитаныКлиент("РассчитатьСуммуВСтрокеТабличнойЧасти");
			
			Строка.ПроцентАвтоматическойСкидки = 0;
			Строка.СуммаАвтоматическойСкидки = 0;
			Строка.ОбщаяСуммаСкидкиБольшеСуммы = Ложь;
			// Конец АвтоматическиеСкидки
			
			ОбновитьПодвалФормы();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПересчитатьПлатежныйКалендарь();
	
	Если ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки")
		ИЛИ ВыполненноеДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой") Тогда
		
		ГрупповоеИзменениеСтрокКлиент.ОчиститьДействиеЗначение(ВыполненноеДействие, ПримененноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Запасы,
			ЗапасыИзменениеСтрокДействие,
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит,
			ЗапасыИзменениеСтрокЗначение,
			"ЗапасыНоменклатура"
		);
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Запасы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				
				Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					
					СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
					
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
				// Конец ДисконтныеКарты
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				Строка.Спецификация = СтруктураДанные.Спецификация;
				Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
					Строка.Количество = 1;
				КонецЕсли;
				Строка.Цена = СтруктураДанные.Цена;
				Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Содержание = "";
				
				Строка.ТипНоменклатурыЗапас = СтруктураДанные.ЭтоЗапас;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьПоФактическимОстаткамНомераГТД Тогда
			
			ПараметрыПодбора = Новый Структура;
			ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
			ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
			ПараметрыПодбора.Вставить("Дата", Объект.Дата);
			ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
			ПараметрыПодбора.Вставить("Организация", Объект.Организация);
			ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
			
			ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
			ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
			ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
			
			Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
				
				СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
				Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ПодобратьНомераГТД Тогда
			
			ПараметрыПодбора = Новый Структура;
			ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
			ПараметрыПодбора.Вставить("Организация", Объект.Организация);
			
			ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
			ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
			ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
			
		КонецЕсли;
		
		Если ЗапасыИзменениеСтрокДействие = Перечисления.ДействияГрупповогоИзмененияСтрок.ОчиститьНомераГТДИСтраныПроисхождения Тогда
			
			ГрузовыеТаможенныеДекларацииСервер.ОчиститьНомераГТДИСтраныПроисхождения(Объект.Запасы);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Работы,
			РаботыИзменениеСтрокДействие,
			РаботыИзменениеСтрокОбъектИзмененийРеквизит,
			РаботыИзменениеСтрокЗначение,
			"ЗНРаботыНоменклатура"
		);
		
		Если РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ИзменяемыеСтроки = Объект.Работы.НайтиСтроки(Новый Структура("Пометка", Истина));
			Для каждого Строка Из ИзменяемыеСтроки Цикл
				
				Строка.Материалы = "";
				Строка.Исполнители = "";
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", Объект.Организация);
				СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
				СтруктураДанные.Вставить("ДатаОбработки", Объект.Дата);
				СтруктураДанные.Вставить("НормаВремени", 1);
				СтруктураДанные.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
				
				Если ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидРабот", Объект.ВидРабот);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				ИначеЕсли (НЕ ВидРаботВШапке) И ЗначениеЗаполнено(Объект.ВидЦен) Тогда
					СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦен", Объект.ВидЦен);
					СтруктураДанные.Вставить("Коэффициент", 1);
					СтруктураДанные.Вставить("ВидРабот", Строка.ВидРабот);
					СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
				КонецЕсли;
				
				// ДисконтныеКарты
				СтруктураДанные.Вставить("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
				СтруктураДанные.Вставить("ПроцентСкидкиПоДисконтнойКарте", Объект.ПроцентСкидкиПоДисконтнойКарте);		
				// Конец ДисконтныеКарты

				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				Строка.Количество = СтруктураДанные.НормаВремени;
				Строка.Кратность = 1; 
				Строка.Коэффициент = 1;
				Строка.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				Строка.Спецификация = СтруктураДанные.Спецификация;
				Строка.Содержание = "";
				
				Если (ВидРаботВШапке И ЗначениеЗаполнено(Объект.ВидЦен) И СтруктураДанные.Свойство("Цена")) ИЛИ СтруктураДанные.Свойство("Цена") Тогда
					Строка.Цена = СтруктураДанные.Цена;
					Строка.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
				КонецЕсли;
				
				Строка.ТипНоменклатурыУслуга = СтруктураДанные.ЭтоУслуга;
				
				Если Строка <> Неопределено Тогда
					Элементы.ЗНРаботаМатериалы.Доступность = НЕ Строка.ТипНоменклатурыУслуга;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОбъектИзменений(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Если ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыЦена";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыПроцентСкидкиНаценки";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСумма";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "ЗапасыСтавкаНДС";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			ЗапасыИзменениеСтрокОбъектИзмененийРеквизит = "";
			ЗапасыИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		Если РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Цена";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыЦена";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьПроцентСкидкиНаценки") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "ПроцентСкидкиНаценки";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыПроцентСкидкиНаценки";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСумма";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "Сумма";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСумма";
			
		ИначеЕсли РаботыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "СтавкаНДС";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "ЗНРаботыСтавкаНДС";
			
		ИначеЕсли ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки")
			ИЛИ ЗапасыИзменениеСтрокДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента") Тогда
			
			РаботыИзменениеСтрокОбъектИзмененийРеквизит = "";
			РаботыИзменениеСтрокОбъектИзмененийЭлемент = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Работы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ЗНГруппаРаботыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РаботыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РаботыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РаботыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗНРаботыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗНРаботыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РаботыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РаботыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РаботыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Запасы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаЗапасыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ЗапасыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ЗапасыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ЗапасыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗапасыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗапасыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ЗапасыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ЗапасыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ЗапасыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ЗапасыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[ЗапасыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Работы");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ЗНГруппаРаботыИзменениеСтрок);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.РаботыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.РаботыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.РаботыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ЗНРаботыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ЗНРаботыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.РаботыИзменениеСтрокДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.РаботыИзменениеСтрокЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         РаботыИзменениеСтрокОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(РаботыИзменениеСтрокОбъектИзмененийЭлемент), 
		                                                     Элементы[РаботыИзменениеСтрокОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ, РазрешеноРедактированиеЦенДокументов)
	
	Если ИмяТЧ = "Запасы" Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		ГрузовыеТаможенныеДекларацииСервер.ЗаполнитьСписокДействий(Действия, Истина, ИмяТЧ);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ЗаполнитьСерийныеНомера);
		КонецЕсли;
		
		Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.ЗапасыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Работы" Тогда
		
		Действия = Новый Массив;
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ИзменитьЦеныНаПроцент);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ОкруглитьЦены);
		Если РазрешеноРедактированиеЦенДокументов Тогда
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьЦеныПоВиду);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
			Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		КонецЕсли;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСтавкуНДС);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.ДобавитьИзДокумента);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		Элементы.РаботыИзменениеСтрокДействие.СписокВыбора.Очистить();
		Для каждого Действие Из Действия Цикл
			ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
			Элементы.РаботыИзменениеСтрокДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборМатериалыСерийныеНомера()
	
	ТекущиеДанныеИдентификатор = Элементы.ЗНМатериалы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеровМатериалы(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры
&НаСервере
Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор)
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Истина,
		"Запасы", "СерийныеНомера", "КлючСвязи");
	
КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийныхНомеровМатериалы(ТекущиеДанныеИдентификатор) Экспорт
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор, Истина,
		"Материалы", "СерийныеНомераМатериалы", "КлючСвязиСерийныеНомера");
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыСерийныхНомеровМатериалы(ДокОбъект, ТекСтрокаДанные, УИДФормы, ИмяТЧ = "Материалы", ИмяТЧСерийныхНомеров="СерийныеНомераМатериалы") Экспорт
	
	ОтборСерийныеНомераТекущейСтроки = Новый Структура("КлючСвязи", ТекСтрокаДанные.КлючСвязиСерийныеНомера);
	ОтборСерийныеНомераТекущейСтроки = ДокОбъект[ИмяТЧСерийныхНомеров].НайтиСтроки(ОтборСерийныеНомераТекущейСтроки);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДокОбъект[ИмяТЧСерийныхНомеров].Выгрузить(ОтборСерийныеНомераТекущейСтроки), УИДФормы);
	
	ПараметрыОткрытия = Новый Структура("Запасы, УникальныйИдентификаторФормыВладельца, АдресВоВременномХранилище, ДокСсылка", 
		Новый Структура("КлючСвязи, Номенклатура, Характеристика, Количество", 
			ТекСтрокаДанные.КлючСвязиСерийныеНомера, 
			ТекСтрокаДанные.Номенклатура,
			ТекСтрокаДанные.Характеристика,
			ТекСтрокаДанные.Количество),
			УИДФормы,
			АдресВоВременномХранилище,
			ДокОбъект.Ссылка
			);
			
	Если ДокОбъект.Свойство("Организация") Тогда
		ПараметрыОткрытия.Вставить("Организация", ДокОбъект.Организация);
	КонецЕсли; 
	Если ТекСтрокаДанные.Свойство("СтруктурнаяЕдиница") Тогда
		ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ТекСтрокаДанные.СтруктурнаяЕдиница);
	ИначеЕсли ДокОбъект.Свойство("СтруктурнаяЕдиница") Тогда
		ПараметрыОткрытия.Вставить("СтруктурнаяЕдиница", ДокОбъект.СтруктурнаяЕдиница);
	КонецЕсли; 		
	Если ТекСтрокаДанные.Свойство("Ячейка") Тогда
		ПараметрыОткрытия.Вставить("Ячейка", ТекСтрокаДанные.Ячейка);
	ИначеЕсли ДокОбъект.Свойство("Ячейка") Тогда
		ПараметрыОткрытия.Вставить("Ячейка", ДокОбъект.Ячейка);
	КонецЕсли; 		
	Если ТекСтрокаДанные.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыОткрытия.Запасы.Вставить("ЕдиницаИзмерения", ТекСтрокаДанные.ЕдиницаИзмерения);
		Если ТипЗнч(ТекСтрокаДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		    ПараметрыОткрытия.Запасы.Вставить("Коэффициент", ТекСтрокаДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			ПараметрыОткрытия.Запасы.Вставить("Коэффициент", 1);
		КонецЕсли;
	КонецЕсли;
	Если ТекСтрокаДанные.Свойство("Партия") Тогда
		ПараметрыОткрытия.Запасы.Вставить("Партия", ТекСтрокаДанные.Партия);
	Иначе
		ПараметрыОткрытия.Запасы.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей)
	
	Модифицированность = Истина;
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки, ПараметрыИменаПолей);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// ЭДО
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеСлужебныйКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЭД()
	
	Элементы.ВидЭД.СписокВыбора.Очистить();
	
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец, "ТОРГ-12");
	Элементы.ВидЭД.СписокВыбора.Добавить(Перечисления.ВидыЭД.АктИсполнитель, "Акт выполненных работ");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ТОРГ12Продавец; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеЭДОНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры
// Конец ЭДО

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзКлассификатораКонтактов()
	
	ЭлектроннаяПочтаУНФКлиент.ПоказатьВыборИзКлассификатораКонтактов(ЭтотОбъект, "ЗНКонтрагент");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
