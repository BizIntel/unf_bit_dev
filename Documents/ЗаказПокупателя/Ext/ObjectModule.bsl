#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ОчиститьДатуНомерВходящегоДокумента(ЭтотОбъект);
	
	ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(ВидЗаказа);
	Иначе
		ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	КонецЕсли;
	ЭтотОбъект.УдалитьЗакрыт = Ложь;
	ЭтотОбъект.КалькуляцияРассчитана = Ложь;
	ЭтотОбъект.Событие = Документы.Событие.ПустаяСсылка();
	
	Предоплата.Очистить();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидОперации")
		И ДанныеЗаполнения.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И ДанныеЗаполнения.Свойство("Номенклатура") Тогда
		
		Номенклатура = ДанныеЗаполнения.Номенклатура;
		ТабличнаяЧасть = Новый ТаблицаЗначений;
		ТабличнаяЧасть.Колонки.Добавить("Номенклатура");
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
			ИмяТЧ = "Запасы";
		ИначеЕсли Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ИмяТЧ = "Работы";
		Иначе
			ИмяТЧ = "";
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		Если ЗначениеЗаполнено(ИмяТЧ) Тогда
			ДанныеЗаполнения.Вставить(ИмяТЧ, ТабличнаяЧасть);
		КонецЕсли;
		Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот Тогда
			ДанныеЗаполнения.Вставить("ВидРабот", Номенклатура);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд);
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ЗаполнитьПоПриемуВРемонт");
	ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, "ОбработчикЗаполнения");
	Иначе
		ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, , "СостояниеЗаказа, ВариантЗавершения, ПричинаОтмены");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УсловияСчетаЗаказа) Тогда
		УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия();
	КонецЕсли;
	
	ДозаполнитьПоУмолчанию();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		ДатаОтгрузки = Дата;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	Если ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.ДатаОтгрузки <> ДатаОтгрузки Тогда
				СтрокаТабличнойЧасти.ДатаОтгрузки = ДатаОтгрузки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			ДатаОтгрузки = Финиш;
		Иначе
			Если Запасы.Количество() > 0 Тогда
				ДатаОтгрузки = Запасы[0].ДатаОтгрузки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоложениеВидаРабот = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			СтрокаТабличнойЧасти.ВидРабот = ВидРабот;
		КонецЦикла;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		СписокРесурсов = "";
		Для Каждого СтрокаРесурс Из РесурсыПредприятия Цикл
			СписокРесурсов = СписокРесурсов + ?(СписокРесурсов = "","","; " + Символы.ПС) + СокрЛП(СтрокаРесурс.РесурсПредприятия);
		КонецЦикла;
		
		СписокНоменклатуры = "";
		Для Каждого СтрокаНоменклатура Из Работы Цикл
			ХарактеристикаПредставление = "";
			Если Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() 
				И ЗначениеЗаполнено(СтрокаНоменклатура.Характеристика) Тогда
				ХарактеристикаПредставление = " (" + СокрЛП(СтрокаНоменклатура.Характеристика) + ")";
			КонецЕсли;
			КоличествоНоменклатуры = СтрокаНоменклатура.Количество * СтрокаНоменклатура.Кратность * СтрокаНоменклатура.Коэффициент;
			СписокНоменклатуры = СписокНоменклатуры + ?(СписокНоменклатуры = "","","; " + Символы.ПС) + СокрЛП(СтрокаНоменклатура.Номенклатура) + ХарактеристикаПредставление + ", " + КоличествоНоменклатуры + " " + СокрЛП(Справочники.КлассификаторЕдиницИзмерения.ч);
		КонецЦикла;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказНарядов") Тогда
			ЭтотОбъект.ВидЗаказа = Справочники.ВидыЗаказНарядов.Основной;
		КонецЕсли;
		
	Иначе
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыЗаказовПокупателей") Тогда
			ЭтотОбъект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего") + Работы.Итог("Всего");
	
	ДатаИзменения = ТекущаяДата();
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность()
		И НЕ ПометкаУдаления Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	СостоянияЗаказов.ПередЗаписьюЗаказа(ЭтотОбъект);
	
	ПривестиДанныеКСогласованномуСостоянию();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияЗаказов.ПриЗаписиЗаказа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.ЗаказПокупателя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, ЭтотОбъект);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьГрафикДвиженияЗапасов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыПокупателей(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПотребностьВЗапасах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
		
	КонецЕсли;
	
	УправлениеНебольшойФирмойСервер.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыПоЗаказамПрогноз(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьНачисленияИУдержания(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПерсоналом(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	
	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	// ДисконтныеКарты
	УправлениеНебольшойФирмойСервер.ОтразитьПродажиПоДисконтнойКарте(ДополнительныеСвойства, Движения, Отказ);
	// АвтоматическиеСкидки
	УправлениеНебольшойФирмойСервер.ОтразитьПредоставленныеАвтоматическиеСкидки(ДополнительныеСвойства, Движения, Отказ);
	// Эквайринг
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетодЭквайринг(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Биллинг
	УправлениеНебольшойФирмойСервер.ОтразитьВыполнениеДоговораОбслуживания(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ЗаказПокупателя.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.ЗаказПокупателя.ВыполнитьКонтроль(ЭтотОбъект, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненная счет-фактура
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Запасы.ДатаОтгрузки"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДатаОтгрузки"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("МатериалыЗаказчика.ДатаПоступления"));
		
		ПроверяемыеРеквизиты.Добавить("Старт");
		ПроверяемыеРеквизиты.Добавить("Финиш");
		
		Если Материалы.Количество() > 0 ИЛИ Запасы.Количество() > 0 Тогда
			
			ПроверяемыеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
			
		КонецЕсли;
		
	Иначе
		
		Если ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДатаОтгрузки"));
		Иначе
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Запасы.ДатаОтгрузки"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Запасы.Итог("Резерв") > 0 Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
		
			Если СтрокаЗапасы.Резерв > 0
			И НЕ ЗначениеЗаполнено(СтруктурнаяЕдиницаРезерв) Тогда
				
				ТекстСообщения = НСтр("ru = 'Не заполнен склад резерва'");
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "СтруктурнаяЕдиницаРезерв", Отказ);
				
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		
		Если ПроверяемыеРеквизиты.Найти("Касса") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Касса"));
		КонецЕсли;
		
	ИначеЕсли ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		
		Если ПроверяемыеРеквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БанковскийСчет"));
		КонецЕсли;
		
	Иначе
		
		Если ПроверяемыеРеквизиты.Найти("Касса") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Касса"));
		КонецЕсли;
		Если ПроверяемыеРеквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БанковскийСчет"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапланироватьОплату
		И ПлатежныйКалендарь.Количество() = 1
		И НЕ ЗначениеЗаполнено(ПлатежныйКалендарь[0].ДатаОплаты) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Дата оплаты"" не заполнено.'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "ДатаОплаты", Отказ);
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПлатежныйКалендарь.ДатаОплаты"));
		
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
		
			Для каждого СтрокаЗапасы Из Запасы Цикл
				
				Если СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
					
					ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Товары, услуги"" количество резервируемых позиций превышает общее количество запасов.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
						ЭтотОбъект,
						ТекстСообщения,
						"Запасы",
						СтрокаЗапасы.НомерСтроки,
						"Резерв",
						Отказ
					);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
			
			СтрокаСостояния = ЭтотОбъект.ВидЗаказа.ПорядокСостояний.Найти(ЭтотОбъект.СостояниеЗаказа, "Состояние");
			Если СтрокаСостояния <> Неопределено Тогда
			
				ЗаказНарядВСостоянииВыполнения = СтрокаСостояния.НомерСтроки >= ЭтотОбъект.ВидЗаказа.НомерСостоянияВыполнения;
				
				Для Каждого СтрокаЗапасы Из Запасы Цикл
					
					Если ЗаказНарядВСостоянииВыполнения
						И СтрокаЗапасы.РезервОтгрузка > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Товары"" количество списываемых позиций из резерва превышает общее количество запасов.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
							ЭтотОбъект,
							ТекстСообщения,
							"Запасы",
							СтрокаЗапасы.НомерСтроки,
							"РезервОтгрузка",
							Отказ
						);
						
					ИначеЕсли СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда	
						
						ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Товары"" количество резервируемых позиций превышает общее количество запасов.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
							ЭтотОбъект,
							ТекстСообщения,
							"Запасы",
							СтрокаЗапасы.НомерСтроки,
							"Резерв",
							Отказ
						);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрокаЗапасы Из Материалы Цикл
					
					Если ЗаказНарядВСостоянииВыполнения
						И СтрокаЗапасы.РезервОтгрузка > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Материалы"" количество списываемых позиций из резерва превышает общее количество запасов.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
							ЭтотОбъект,
							ТекстСообщения,
							"Материалы",
							СтрокаЗапасы.НомерСтроки,
							"РезервОтгрузка",
							Отказ
						);
						
					ИначеЕсли СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
						
						ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Материалы"" количество резервируемых позиций превышает общее количество запасов.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
							ЭтотОбъект,
							ТекстСообщения,
							"Материалы",
							СтрокаЗапасы.НомерСтроки,
							"Резерв",
							Отказ
						);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Серийные номера
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиницаРезерв,"ОрдерныйСклад") = Истина Тогда
				РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Запасы, СерийныеНомера, СтруктурнаяЕдиницаРезерв, ЭтотОбъект);
				РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Материалы, СерийныеНомераМатериалы, СтруктурнаяЕдиницаРезерв, ЭтотОбъект, "КлючСвязиСерийныеНомера");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаЗапасы.Цена * СтрокаЗапасы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ОКР(ТекСумма * СтрокаЗапасы.ПроцентСкидкиНаценки / 100, 2), 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаЗапасы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %Номер% списка ""Товары, работы, услуги"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Сумма",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЕстьРучныеСкидки Тогда
		Для каждого СтрокаРаботы Из Работы Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаРаботы.Цена * СтрокаРаботы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, ОКР(ТекСумма * СтрокаРаботы.ПроцентСкидкиНаценки / 100, 2), 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаРаботы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаРаботы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаРаботы.Сумма) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %Номер% списка ""Работы"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаРаботы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Работы",
					СтрокаРаботы.НомерСтроки,
					"Сумма",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Так же проверим заполнение начислений сотрудников
	Документы.ЗаказПокупателя.ЕстьИсполнителиСПустойСуммойНачисления(Исполнители);
	
	// Биллинг
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд
		И ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг")
		И Договор.ЭтоДоговорОбслуживания Тогда
		
		Для Каждого Стр Из Работы Цикл
			Если НЕ УправлениеНебольшойФирмойСервер.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, Стр.Номенклатура) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Запрещено проводить незапланированные работы/услуги по текущему договору обслуживания!'"),
					Договор.ДоговорОбслуживанияТарифныйПлан,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Работы", Стр.НомерСтроки, "Номенклатура"),,
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Стр Из Запасы Цикл
			Если НЕ УправлениеНебольшойФирмойСервер.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, Стр.Номенклатура, Стр.Характеристика) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Запрещено проводить незапланированные товары по текущему договору обслуживания!'"),
					Договор.ДоговорОбслуживанияТарифныйПлан,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Работы", Стр.НомерСтроки, "Номенклатура"),,
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен
		И Не СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВариантЗавершения"));
	КонецЕсли;
	
	Если Не ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПричинаОтмены"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

Процедура ОбработчикЗаполнения(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти(ДанныеЗаполнения)) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ЗапросДанныхДляЗаполнения(ДанныеЗаполнения).Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	ЭтотОбъект.Запасы.Очистить();
	ВыборкаТабличнаяЧасть = ВыборкаШапка[ИмяТабличнойЧасти(ДанныеЗаполнения)].Выбрать();
	Пока ВыборкаТабличнаяЧасть.Следующий() Цикл
		НовСтр = ЭтотОбъект.Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаТабличнаяЧасть);
		НовСтр.ТипНоменклатурыЗапас = (ВыборкаТабличнаяЧасть.НоменклатураТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас);
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		ВыборкаСкидкиНаценки = ВыборкаШапка.СкидкиНаценки.Выбрать();
		Пока ВыборкаСкидкиНаценки.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ЭтотОбъект.СкидкиНаценки.Добавить(), ВыборкаСкидкиНаценки);
		КонецЦикла;
	КонецЕсли;
	
	СуммаОплаты = Запасы.Итог("Всего");
	
КонецПроцедуры

Процедура ЗаполнитьПоПриемуВРемонт(ДокументСсылкаПриемВРемонт) Экспорт
	
	// Заполнение шапки документа.
	ЭтотОбъект.ДокументОснование = ДокументСсылкаПриемВРемонт.Ссылка;
	ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
	Организация = ДокументСсылкаПриемВРемонт.Организация;
	Контрагент = ДокументСсылкаПриемВРемонт.Контрагент;
	Договор = ДокументСсылкаПриемВРемонт.Договор;
	
	ВидЦен = Договор.ВидЦен;
	ВидСкидкиНаценки = Договор.ВидСкидкиНаценки;
	ВалютаДокумента = Договор.ВалютаРасчетов;
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено);
	НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Организация,, Дата);
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
	Курс = СтруктураПоВалюте.Курс;
	Кратность = СтруктураПоВалюте.Кратность;
	
КонецПроцедуры

Функция ЗапросДанныхДляЗаполнения(ДанныеЗаполнения)
	
	Конструктор = Новый СхемаЗапроса;
	Пакет = Конструктор.ПакетЗапросов[0];
	Пакет.ВыбиратьРазрешенные = Истина;
	Оператор0 = Пакет.Операторы[0];
	Оператор0.Источники.Добавить(ДанныеЗаполнения.Метаданные().ПолноеИмя());
	Для Каждого ОписаниеПоляШапки Из ОписаниеПолейШапки(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(ОписаниеПоляШапки.Ключ);
		Если ЗначениеЗаполнено(ОписаниеПоляШапки.Значение) Тогда
			Пакет.Колонки[Пакет.Колонки.Количество() - 1].Псевдоним = ОписаниеПоляШапки.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекОписаниеПоляТабличнойЧастиЗапасы Из ОписаниеПолейТабличнойЧастиЗапасы(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1.%2",
		ИмяТабличнойЧасти(ДанныеЗаполнения),
		ТекОписаниеПоляТабличнойЧастиЗапасы.Ключ));
		Если ЗначениеЗаполнено(ТекОписаниеПоляТабличнойЧастиЗапасы.Значение) Тогда
			Пакет.Колонки[Пакет.Колонки.Количество() - 1].Псевдоним = ТекОписаниеПоляТабличнойЧастиЗапасы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.КлючСвязи");
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.СкидкаНаценка");
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.Сумма");
	КонецЕсли;
	
	Оператор0.Отбор.Добавить("Ссылка = &Параметр");
	
	Результат = Новый Запрос(Конструктор.ПолучитьТекстЗапроса());
	Результат.УстановитьПараметр("Параметр", ДанныеЗаполнения);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяТабличнойЧасти(ДанныеЗаполнения)
	
	ИменаТабличныхЧастей = Новый Соответствие;
	ИменаТабличныхЧастей[Тип("ДокументСсылка.СчетНаОплату")] = "Запасы";
	
	Возврат ИменаТабличныхЧастей[ТипЗнч(ДанныеЗаполнения)];
	
КонецФункции

Функция ОписаниеПолейШапки(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	
	ДанныеЗаполненияМетаданные = ДанныеЗаполнения.Метаданные();
	
	Результат.Вставить("Ссылка", "ДокументОснование");
	Результат.Вставить("Организация");
	Результат.Вставить("Организация.БанковскийСчетПоУмолчанию", "БанковскийСчет");
	
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ДисконтнаяКарта");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "УсловияСчетаЗаказа");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ПроцентСкидкиПоДисконтнойКарте");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Курс");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Кратность");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "СуммаВключаетНДС");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "НалогообложениеНДС");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Договор");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Контрагент");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ВалютаДокумента");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("СкидкиРассчитаны");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьРеквизитЕслиОнЕстьВДокументе(РезультатСоответствие, ДанныеЗаполненияМетаданные, ИмяРеквизита)
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, ДанныеЗаполненияМетаданные) Тогда
		РезультатСоответствие.Вставить(ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеПолейТабличнойЧастиЗапасы(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Номенклатура.ТипНоменклатуры");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Содержание");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("Количество");
	Результат.Вставить("Цена");
	Результат.Вставить("ПроцентСкидкиНаценки");
	Результат.Вставить("Сумма");
	Результат.Вставить("СтавкаНДС");
	Результат.Вставить("СуммаНДС");
	Результат.Вставить("Всего");
	Если ИмяТабличнойЧасти(ДанныеЗаполнения) <> "РаботыИУслуги" Тогда
		Результат.Вставить("Партия");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("КлючСвязи");
		Результат.Вставить("СуммаАвтоматическойСкидки");
		Результат.Вставить("ПроцентАвтоматическойСкидки");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоРесурсам(ИсполнителиКлючСвязи) Экспорт
	
	МассивСотрудников	= Новый Массив();
	МассивБригад 		= Новый Массив();
	Для каждого СтрокаТЧ Из РесурсыПредприятия Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.РесурсПредприятия) Тогда
			
			ЗначениеРесурса = СтрокаТЧ.РесурсПредприятия.ЗначениеРесурса;
			Если ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				МассивСотрудников.Добавить(ЗначениеРесурса);
				
			ИначеЕсли ТипЗнч(ЗначениеРесурса) = Тип("СправочникСсылка.Бригады") Тогда
				
				МассивБригад.Добавить(ЗначениеРесурса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Наименование КАК Наименование,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сотрудники.Ссылка КАК Сотрудник,
	|		Сотрудники.Наименование КАК Наименование
	|	ИЗ
	|		Справочник.Сотрудники КАК Сотрудники
	|	ГДЕ
	|		Сотрудники.Ссылка В(&МассивСотрудников)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сотрудники.Ссылка,
	|		Сотрудники.Наименование
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		БригадыСостав.Сотрудник,
	|		БригадыСостав.Сотрудник.Наименование
	|	ИЗ
	|		Справочник.Бригады.Состав КАК БригадыСостав
	|	ГДЕ
	|		БригадыСостав.Ссылка В(&МассивБригад)) КАК ТаблицаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность
	|					И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ТаблицаСотрудников.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Наименование КАК Наименование,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	1 КАК КТУ,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК РазмерНачисленияУдержания
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("МассивБригад", МассивБригад);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ИсполнителиКлючСвязи = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
					
					НоваяСтрока = Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.КлючСвязи = ИсполнителиКлючСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьИсполнителиПоБригадам(МассивБригад, ИсполнителиКлючСвязи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БригадыСостав.Сотрудник КАК Сотрудник,
	|	БригадыСостав.Сотрудник.Наименование КАК Наименование,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания КАК ВидНачисленияУдержания
	|ПОМЕСТИТЬ ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|ИЗ
	|	Справочник.Бригады.Состав КАК БригадыСостав
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность
	|					И ВидНачисленияУдержания В (ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплата), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент), ЗНАЧЕНИЕ(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма))) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО БригадыСостав.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|ГДЕ
	|	БригадыСостав.Ссылка В(&МассивБригад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Наименование КАК Наименование,
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	1 КАК КТУ,
	|	ПлановыеНачисленияИУдержанияСрезПоследних.Сумма * КурсВалютыНачисления.Курс * КурсВалютыДокумента.Кратность / (КурсВалютыДокумента.Курс * КурсВалютыНачисления.Кратность) КАК РазмерНачисленияУдержания
	|ИЗ
	|	ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний КАК ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияИУдержания.СрезПоследних(
	|				&НаДату,
	|				Организация = &Организация
	|					И Актуальность) КАК ПлановыеНачисленияИУдержанияСрезПоследних
	|		ПО ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.Сотрудник = ПлановыеНачисленияИУдержанияСрезПоследних.Сотрудник
	|			И ВременнаяТаблицаСотрудникиИВидыНачисленийУдержаний.ВидНачисленияУдержания = ПлановыеНачисленияИУдержанияСрезПоследних.ВидНачисленияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсВалютыНачисления
	|		ПО (ПлановыеНачисленияИУдержанияСрезПоследних.Валюта = КурсВалютыНачисления.Валюта),
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, Валюта = &ВалютаДокумента) КАК КурсВалютыДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("НаДату", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("МассивБригад", МассивБригад);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаСотрудников = МассивРезультатов[1].Выгрузить();
	
	Если ИсполнителиКлючСвязи = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Работы Цикл
			
			Если СтрокаТабличнойЧасти.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
					
					НоваяСтрока = Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТЧ Из ТаблицаСотрудников Цикл
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.КлючСвязи = ИсполнителиКлючСвязи;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкуРезервПоОстаткам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	ТаблицаПериодов = Новый ТаблицаЗначений();
	ТаблицаПериодов.Колонки.Добавить("ДатаОтгрузки");
	ТаблицаПериодов.Колонки.Добавить("СтрокаЗапасы");
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			НоваяСтрока = ТаблицаПериодов.Добавить();
			НоваяСтрока.ДатаОтгрузки = СтрокаЗапасы.ДатаОтгрузки;
			НоваяСтрока.СтрокаЗапасы = СтрокаЗапасы;
		КонецЦикла;
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		ТаблицаПериодов.Сортировать("ДатаОтгрузки");
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			СтрокаЗапасы = СтрокаТаблицыПериодов.СтрокаЗапасы;
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаПериодов.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыЗаполнитьКолонкуРезервПоОстаткам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "РезервОтгрузка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТоварыЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "РезервОтгрузка");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	&Заказ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатурыЗапас";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				
				СтрокаЗапасы.РезервОтгрузка = ВсегоОстаток;
				ВсегоОстаток = 0;
				
			Иначе
				
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
		Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
			СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура МатериалыЗаполнитьКолонкуРезервПоОстаткам(МатериалыКлючСвязи) Экспорт
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "Резерв");
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "РезервОтгрузка");
	Иначе
		РезультатПоиска = Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			СтрокаТабличнойЧасти.Резерв = 0;
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
		Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоКлючуСвязи
	|				ТОГДА ТаблицаЗапасы.КлючСвязи = &КлючСвязи
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Материалы.Выгрузить());
	Запрос.УстановитьПараметр("ОтборПоКлючуСвязи", ?(МатериалыКлючСвязи = Неопределено, Ложь, Истина));
	Запрос.УстановитьПараметр("КлючСвязи", МатериалыКлючСвязи);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если МатериалыКлючСвязи <> Неопределено Тогда
			СтруктураДляПоиска.Вставить("КлючСвязи", МатериалыКлючСвязи);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Материалы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Резерв;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура МатериалыЗаполнитьКолонкуРезервПоРезервам(МатериалыКлючСвязи) Экспорт
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Материалы.ЗагрузитьКолонку(Новый Массив(Материалы.Количество()), "РезервОтгрузка");
	Иначе
		РезультатПоиска = Материалы.НайтиСтроки(Новый Структура("КлючСвязи", МатериалыКлючСвязи));
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			СтрокаТабличнойЧасти.РезервОтгрузка = 0;
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	&Заказ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоКлючуСвязи
	|				ТОГДА ТаблицаЗапасы.КлючСвязи = &КлючСвязи
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Материалы.Выгрузить());
	Запрос.УстановитьПараметр("ОтборПоКлючуСвязи", ?(МатериалыКлючСвязи = Неопределено, Ложь, Истина));
	Запрос.УстановитьПараметр("КлючСвязи", МатериалыКлючСвязи);
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						&СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Финиш);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиницаРезерв);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если МатериалыКлючСвязи <> Неопределено Тогда
			СтруктураДляПоиска.Вставить("КлючСвязи", МатериалыКлючСвязи);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Материалы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				
				СтрокаЗапасы.РезервОтгрузка = ВсегоОстаток;
				ВсегоОстаток = 0;
				
			Иначе
				
				СтрокаЗапасы.РезервОтгрузка = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если МатериалыКлючСвязи = Неопределено Тогда
		Для каждого СтрокаТабличнойЧасти Из Материалы Цикл
			Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
				СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаТабличнойЧасти Из РезультатПоиска Цикл
			Если СтрокаТабличнойЧасти.РезервОтгрузка < СтрокаТабличнойЧасти.Резерв Тогда
				СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.РезервОтгрузка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьПоУмолчанию()
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Если Не ЗначениеЗаполнено(ВидЗаказа) Тогда
			ЭтотОбъект.ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказНаряда();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказНаряда(ВидЗаказа);
		КонецЕсли;
		
	Иначе // Заказ покупателя
		
		Если Не ЗначениеЗаполнено(ВидЗаказа) Тогда
			ЭтотОбъект.ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказаПокупателя();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СостояниеЗаказа) Тогда
			ЭтотОбъект.СостояниеЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура отмены проведения у подченненой счет фактуры
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится счет фактура %ПредставлениеСчетФактуры%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Заказ-наряд  № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПривестиДанныеКСогласованномуСостоянию()
	
	Если СостояниеЗаказа <> Справочники.СостоянияЗаказовПокупателей.Завершен 
		И СостояниеЗаказа <> Справочники.СостоянияЗаказНарядов.Завершен Тогда
		
		ЭтотОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
	КонецЕсли;
	
	Если ВариантЗавершения <> Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
		ЭтотОбъект.ПричинаОтмены	= Справочники.ПричиныОтменыЗаказа.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли