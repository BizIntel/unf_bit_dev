#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ВидОперации = Неопределено;
	
	Если ВидФормы = "ФормаДокумента" Или ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
		КонецЕсли;
		
		// Если документ копируется, то вид операции получаем из копируемого документа.
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			Если Параметры.Свойство("ЗначениеКопирования")
				И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ВидОперации");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			Если Параметры.Свойство("ЗначенияЗаполнения") 
				И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
				
				Если Параметры.ЗначенияЗаполнения.Свойство("ШаблонДокумента") Тогда
					ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Параметры.ЗначенияЗаполнения.ШаблонДокумента,
					"ВидОперации");
				КонецЕсли;
				
				Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
					ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ФормыЗаказаПокупателя = ПолучитьСоответствиеВидовОперацийФормам();
		ВыбраннаяФорма = ФормыЗаказаПокупателя[ВидОперации];
		Если ВыбраннаяФорма = Неопределено Тогда
			ВыбраннаяФорма = "ФормаДокумента";
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		
		Если Параметры.Свойство("ЗаказНаряд") Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
		КонецЕсли;
		
		// Если установлен отбор, то вид операции получаем из отбора.
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ВидОперации")
				И ТипЗнч(Параметры.Отбор.ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийЗаказПокупателя") Тогда
				ВидОперации = Параметры.Отбор.ВидОперации;
			КонецЕсли;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ФормыЗаказаПокупателя = ПолучитьСоответствиеВидовОперацийФормам(Истина);
		ВыбраннаяФорма = ФормыЗаказаПокупателя[ВидОперации];
		Если ВыбраннаяФорма = Неопределено Тогда
			ВыбраннаяФорма = "ФормаСписка";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	Поля.Добавить("ВидОперации");
	Поля.Добавить("Проведен");
	Поля.Добавить("ПометкаУдаления");
	
КонецПроцедуры // ОбработкаПолученияПолейПредставления()

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.Номер = Null Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.Проведен Тогда
		Состояние = "";
	Иначе
		Если Данные.ПометкаУдаления Тогда
			Состояние = НСтр("ru='(удален)'");
		ИначеЕсли Данные.Свойство("Проведен") И НЕ Данные.Проведен Тогда
			Состояние = НСтр("ru='(не проведен)'");
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд") Тогда
		ЗаголовокПредставление = НСтр("ru='Заказ-наряд'");
	Иначе
		ЗаголовокПредставление = НСтр("ru='Заказ покупателя'");
	КонецЕсли;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 от %3 %4'"),
		ЗаголовокПредставление,
		?(Данные.Свойство("Номер"), ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Данные.Номер, Истина, Истина), ""),
		Формат(Данные.Дата, "ДЛФ=D"),
		Состояние);
	
	КонецПроцедуры // ОбработкаПолученияПредставления()

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Осуществляет проверку возможности ввода на основании.
//
Процедура ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДанныеЗаполнения, ЗначенияРеквизитов) Экспорт
	
	Если ЗначенияРеквизитов.Свойство("Проведен") Тогда
		Если НЕ ЗначенияРеквизитов.Проведен Тогда
			ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Свойство("СостояниеЗаказа")
		И ЗначенияРеквизитов.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% в состоянии Завершен. Ввод на основании завершенного заказа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Свойство("СостояниеЗаказа") Тогда
		Если ЗначенияРеквизитов.Свойство("ВидОперации") Тогда
			Если ЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
				Если ЗначенияРеквизитов.Свойство("ЗаказНарядВозврат") Тогда
					Если Не (ЗначенияРеквизитов.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен
							И ЗначенияРеквизитов.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно) Тогда
							
						ТекстОшибки = НСтр("ru='Документ %Документ% в состоянии %СостояниеЗаказа%. Ввод возврата от покупателя на основании запрещен.'");
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СостояниеЗаказа%", ЗначенияРеквизитов.СостояниеЗаказа);
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				ИначеЕсли ЗначенияРеквизитов.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен Тогда
					ТекстОшибки = НСтр("ru='Документ %Документ% в состоянии %СостояниеЗаказа%. Ввод на основании запрещен.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДанныеЗаполнения);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СостояниеЗаказа%", ЗначенияРеквизитов.СостояниеЗаказа);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствие видов операций заказа покупателя открываемым формам.
//
// Параметры:
//  ФормыСписка	 - Булево	 - Признак возврата форм документов или списков
Функция ПолучитьСоответствиеВидовОперацийФормам(ФормыСписка = Ложь) Экспорт
	
	ФормыЗаказаПокупателя = Новый Соответствие;
	
	Если ФормыСписка Тогда
		
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд,			"ФормаСпискаЗаказНаряда");
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу,		"ФормаСписка");
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку,	"ФормаСписка");
		
	Иначе
		
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд,			"ФормаЗаказНаряда");
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу,		"ФормаДокумента");
		ФормыЗаказаПокупателя.Вставить(Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку,	"ФормаДокумента");
		
	КонецЕсли;
	
	Возврат ФормыЗаказаПокупателя;
	
КонецФункции

#КонецОбласти

#Область НачислениеЗарплаты

Функция РассчитатьЗначениеНачисленияПоСтрокеНаСервере(КоэффициентыРаботы, СуммаРаботы, КТУ, СуммаКТУ, ВидНачисленияУдержания, Размер) Экспорт
	
	Если ВидНачисленияУдержания = Справочники.ВидыНачисленийИУдержаний.ФиксированнаяСумма Тогда
		
		Возврат Размер;
		
	ИначеЕсли ВидНачисленияУдержания = Справочники.ВидыНачисленийИУдержаний.СдельнаяОплата Тогда
		
		Возврат КоэффициентыРаботы * Размер * (КТУ / СуммаКТУ);
		
	ИначеЕсли ВидНачисленияУдержания = Справочники.ВидыНачисленийИУдержаний.СдельнаяОплатаПроцент Тогда
		
		Возврат (СуммаРаботы / 100 * Размер) * (КТУ / СуммаКТУ);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтрокуРаботыПоКлючуСвязи(ТабличнаяЧастьРаботы, КлючСвязи) Экспорт
	
	МассивНайденныйСтрок = ТабличнаяЧастьРаботы.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	Возврат ?(МассивНайденныйСтрок.Количество() <> 1, Неопределено, МассивНайденныйСтрок[0]);
	
КонецФункции

Функция ПолучитьСтрокиИсполнителейПоКлючуСвязи(ТабличнаяЧастьИсполнители, КлючСвязи) Экспорт
	
	Возврат ТабличнаяЧастьИсполнители.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
КонецФункции

Функция ВычислитьСуммуКТУПоКлючуСвязи(ТабличнаяЧастьИсполнители, КлючСвязи) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КлючСвязи) Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТЧ_Исполнители
	|ИЗ
	|	&ТабличнаяЧасть КАК ЗаказПокупателяИсполнители
	| ГДЕ ЗаказПокупателяИсполнители.КлючСвязи = &КлючСвязи";
	
	Запрос.УстановитьПараметр("КлючСвязи", КлючСвязи);
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧастьИсполнители.Выгрузить());
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ТЧ_Исполнители.КТУ) КАК СуммаКТУ
	|ИЗ
	|	ТЧ_Исполнители КАК ТЧ_Исполнители
	|ГДЕ 
	|	ТЧ_Исполнители.ВидНачисленияУдержания <> Значение(Справочник.ВидыНачисленийИУдержаний.ФиксированнаяСумма)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Возврат 1;
		
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат ?(Выборка.СуммаКТУ = 0, 1, Выборка.СуммаКТУ);
	
КонецФункции

Функция ЕстьИсполнителиСПустойСуммойНачисления(Исполнители) Экспорт
	
	Перем Ошибки;
	ШаблонТекстаСообщения = НСтр("ru = 'Не верно указана сумма начисления для сотрудника %1 в строке %2.'");
	
	Для каждого Исполнитель Из Исполнители Цикл
		
		Если Исполнитель.СуммаНачисления = 0 Тогда
			
			ТекстДляОднойОшибки = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаСообщения, Исполнитель.Сотрудник.Наименование, Исполнитель.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Объект.Исполнители[%1].Сотрудник", 
				ТекстДляОднойОшибки, 
				Неопределено, 
				Исполнитель.НомерСтроки, 
				);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
		ИЛИ ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы" Тогда
	
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Содержание", "Содержание", ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000, , , , , НастройкиЗагрузкиДанных.СодержаниеВидимо);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Партия", "Партия (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , Истина);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Резерв", "Резерв", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3, , , , , ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", "Ставка НДС", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СуммаНДС", "Сумма НДС", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		
		ПолеВидимо = (НастройкиЗагрузкиДанных.ПоложениеДатыВЗаказе = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаОтгрузки", "Дата отгрузки", ОписаниеТиповСтрока25, ОписаниеТиповДата, , , , , ПолеВидимо);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Спецификации");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Спецификация", "Спецификация (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
	
	ИначеЕсли ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Калькуляция" Тогда
		
		Если НастройкиЗагрузкиДанных.ЗагрузкаКалькуляции Тогда
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоРасход", "Это расход", ОписаниеТиповСтрока25, ОписаниеТиповБулево, , , , , НастройкиЗагрузкиДанных.ЗагрузкаКалькуляции);
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура, ПланСчетовСсылка.Управленческий");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура или расход (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
		Иначе
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", "Штрихкод", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", "Артикул", ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование", "Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
		КонецЕсли; 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Спецификации");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Спецификация", "Спецификация (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
			
		КонецЕсли;
	
		Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
			
			ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
			
		КонецЕсли;
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_3);
		Если НастройкиЗагрузкиДанных.ЗагрузкаКалькуляции Тогда
			ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Себестоимость", "Себестоимость", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
		ИЛИ ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы" Тогда
	
		Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
		ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
		
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
		
		Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
		ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Калькуляция" Тогда
		
		Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанныхКалькуляция_xlsx");
		ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
		
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанныхКалькуляция_mxl");
		
		Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанныхКалькуляция_csv");
		ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
		НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ПолноеИмяОбъектаЗаполнения = НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
			ИЛИ ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы" Тогда
		
			// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
			
			// Содержание
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Содержание, СтрокаТаблицыФормы.Содержание_ВходящиеДанные);
			
			// Характеристика по Владельцу и Наименованию
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Партия по Владельцу и Наименованию
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПартию(СтрокаТаблицыФормы.Партия, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Партия_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Количество
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
			
			// Резерв
			Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Резерв, СтрокаТаблицыФормы.Резерв_ВходящиеДанные, 0);
				
			КонецЕсли;
			
			// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
			ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// Цена
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные, 1);
			
			// СтавкаНДС по наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, Неопределено);
			
			// СуммаНДС
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СуммаНДС, СтрокаТаблицыФормы.СуммаНДС_ВходящиеДанные, 0);
			
			// ДатаОтгрузки
			Если НастройкиЗагрузкиДанных.ПоложениеДатыВЗаказе = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.ДатаОтгрузки, СтрокаТаблицыФормы.ДатаОтгрузки_ВходящиеДанные);
				
			КонецЕсли;
			
			// Спецификация
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
				
				Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпецификацию(СтрокаТаблицыФормы.Спецификация, СтрокаТаблицыФормы.Спецификация_ВходящиеДанные, СтрокаТаблицыФормы.Номенклатура);
					
				КонецЕсли;
				
			КонецЕсли;
				
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		ИначеЕсли ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Калькуляция" Тогда
			
			ЭтоЗагрузкаКалькуляции = НастройкиЗагрузкиДанных.ЗагрузкаКалькуляции;
			
			Если ЭтоЗагрузкаКалькуляции Тогда
				// Это расход
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ЭтоРасход, СтрокаТаблицыФормы.ЭтоРасход_ВходящиеДанные);
			КонецЕсли; 
			
			Если ЭтоЗагрузкаКалькуляции И СтрокаТаблицыФормы.ЭтоРасход Тогда
				// Расход по наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаЗатрат(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.НоменклатураНаименование, ПланыСчетов.Управленческий.ПустаяСсылка());
				// Себестоимость
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Себестоимость, СтрокаТаблицыФормы.Себестоимость_ВходящиеДанные, 0);
			Иначе
				// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
				// Характеристика по Владельцу и Наименованию
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
						ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
					КонецЕсли;
				КонецЕсли;
				// Спецификация
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
					ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура) Тогда
						ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпецификацию(СтрокаТаблицыФормы.Спецификация, СтрокаТаблицыФормы.Спецификация_ВходящиеДанные, СтрокаТаблицыФормы.Номенклатура);
					КонецЕсли;
				КонецЕсли;
				// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
				Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
					ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура), СтрокаТаблицыФормы.Номенклатура.ЕдиницаИзмерения, Справочники.КлассификаторЕдиницИзмерения.шт);
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
				КонецЕсли;
			КонецЕсли; 
			
			// Количество
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные, 1);
			
			ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	Если ПустаяСтрока(ПолноеИмяОбъектаЗаполнения) 
		ИЛИ ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Запасы" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
			И (СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас 
				ИЛИ СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга)
			И СтрокаТаблицыФормы.Количество <> 0;
		
	ИначеЕсли ПолноеИмяОбъектаЗаполнения="Документ.ЗаказПокупателя.ТабличнаяЧасть.Калькуляция" Тогда
		
		СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
			И (ТипЗнч(СтрокаТаблицыФормы.Номенклатура)<>Тип("СправочникСсылка.Номенклатура")
				ИЛИ (НЕ СтрокаТаблицыФормы.Свойство("Себестоимость") И СтрокаТаблицыФормы.Количество<>0)
				ИЛИ (СтрокаТаблицыФормы.Себестоимость=0 И СтрокаТаблицыФормы.Количество<>0));
				
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - состав полей см. в функции ВерсионированиеОбъектов.НастройкиПодсистемы
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов – Массив – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати – СписокЗначений – значение – ссылка на объект;
//                                            представление – имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода – Структура – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МакетЗаказПокупателя") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МакетЗаказПокупателя", "Заказ покупателя", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "МакетЗаказПокупателя"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплату", "Счет на оплату", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СчетНаОплату"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплатуСФаксимильнойПодписью") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплатуСФаксимильнойПодписью", "Счет на оплату", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СчетНаОплатуСФаксимильнойПодписью"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплату") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплату", "Счет на частичную оплату", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СчетНаЧастичнуюОплату"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплатуСФаксимильнойПодписью") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаЧастичнуюОплатуСФаксимильнойПодписью", "Счет на частичную оплату", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СчетНаЧастичнуюОплатуСФаксимильнойПодписью"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслуг", "Акт об оказании услуг", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктОбОказанииУслуг"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслугПодробно") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслугПодробно", "Акт об оказании услуг (подробно)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктОбОказанииУслугПодробно"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяСУслугами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяСУслугами", "Накладная (с услугами)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "НакладнаяСУслугами"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Накладная", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Накладная"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12", "ТОРГ12", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТОРГ12"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ12СУслугами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ12СУслугами", "ТОРГ12 (с услугами)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ТОРГ12СУслугами"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаряд") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаряд", "Заказ-наряд", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЗаказНаряд"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "БланкТоварногоНаполнения", "Бланк товарного наполнения", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "БланкТоварногоНаполнения"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "УниверсальныйПередаточныйДокумент"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриложениеКДоговору") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПриложениеКДоговору", "Приложение к договору", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ПриложениеКДоговору"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ГарантийныйТалон") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ГарантийныйТалон", "Гарантийный талон", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ГарантийныйТалон"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Калькуляция") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Калькуляция", "Калькуляция", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "Калькуляция"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СводныйОтчет") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СводныйОтчет", "Сводный отчет", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СводныйОтчет"));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СводныйОтчетЗаказНаряд") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СводныйОтчетЗаказНаряд", "Сводный отчет", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "СводныйОтчетЗаказНаряд"));
		
		//*************************
		//Изменения внесены ООО Бизнес-Интеллект
		//*************************	
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСдачиПриемкиВыполненныхРаботУслугЗН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСдачиПриемкиВыполненныхРаботУслугЗН", "Акт сдачи-приемки выполненных услуг (с факсимиле)", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "АктСдачиПриемкиВыполненныхРаботУслугЗН"));
		//*************************
		//Конец изменений
		//*************************		
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	Если ИмяМакета = "МакетЗаказПокупателя" Тогда
		
		Возврат ПечатьЗаказПокупателя(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "СчетНаОплату" ИЛИ ИмяМакета = "СчетНаЧастичнуюОплату" Тогда
		
		Возврат ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "СчетНаОплатуСФаксимильнойПодписью" ИЛИ ИмяМакета = "СчетНаЧастичнуюОплатуСФаксимильнойПодписью" Тогда
		
		Возврат ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивОбъектов, ОбъектыПечати, СтрЗаменить(ИмяМакета, "СФаксимильнойПодписью", ""));
		
	ИначеЕсли ИмяМакета = "АктОбОказанииУслуг" ИЛИ ИмяМакета = "АктОбОказанииУслугПодробно" Тогда
		
		Возврат ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "Накладная" ИЛИ ИмяМакета = "НакладнаяСУслугами" Тогда
		
		Возврат ПечатьРасходнаяНакладная(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ТОРГ12" ИЛИ ИмяМакета = "ТОРГ12СУслугами" Тогда
		
		Возврат ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ЗаказНаряд" Тогда
		
		Возврат ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "БланкТоварногоНаполнения" Тогда
		
		Возврат ПечатьБланкТоварногоНаполнения(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "УниверсальныйПередаточныйДокумент" Тогда
		
		Возврат СформироватьУниверсальныйПередаточныйДокумент(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "ПриложениеКДоговору" Тогда
		
		Возврат ПечатьПриложениеКДоговору(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "ГарантийныйТалон" Тогда
			
		Возврат РаботаСНоменклатуройСервер.ПечатьГарантийныйТалон(МассивОбъектов, ОбъектыПечати);
		
	ИначеЕсли ИмяМакета = "Калькуляция" Тогда
			
		Возврат ПечатьКалькуляция(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "СводныйОтчет" Тогда
			
		Возврат ПечатьСводныйОтчет(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
	ИначеЕсли ИмяМакета = "СводныйОтчетЗаказНаряд" Тогда
			
		Возврат ПечатьСводныйОтчетЗаказНаряд(МассивОбъектов, ОбъектыПечати, ИмяМакета);
		
		//*************************
		//Изменения внесены ООО Бизнес-Интеллект
		//*************************	
	ИначеЕсли ИмяМакета = "АктСдачиПриемкиВыполненныхРаботУслугЗН"   Тогда
		ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
		Возврат бизЗаполнениеДокументов.СформироватьАктОбОказанииУслугЗаказНаряд(МассивОбъектов,ОбъектыПечати, ВидОперации, ИмяМакета);
		//*************************
		//Конец изменений
		//*************************		
		
	КонецЕсли;
	
КонецФункции // ПечатнаяФорма()

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	// Заказ покупателя
	//
	
	// Заказ покупателя
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МакетЗаказПокупателя";
	КомандаПечати.Представление = НСтр("ru = 'Заказ покупателя'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 1;
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 4;
	
	// Счет на оплату (частичная оплата)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаЧастичнуюОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на частичную оплату'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 7;
	
	// Видимость команд печати с факсимиле не будет регулироваться признаком заполненности поле в Организации
	// для того, что бы пользователи знали про данную возможность
	
	// Счет на оплату с факсимиле
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплатуСФаксимильнойПодписью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (с факсимиле)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 10;
	
	// Счет на оплату с факсимиле (частичная оплата)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаЧастичнуюОплатуСФаксимильнойПодписью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на частичную оплату (с факсимиле)'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью";
	КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 14;
	
	// Договор
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.СформироватьБланкиДоговоров";
	КомандаПечати.Идентификатор = "БланкДоговора";
	КомандаПечати.Представление = НСтр("ru = 'Форма договора'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 17;
	
	// Приложение к договору
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриложениеКДоговору";
	КомандаПечати.Представление = НСтр("ru = 'Приложение к договору'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 20;
	
	// Калькуляция
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Калькуляция";
	КомандаПечати.Представление = НСтр("ru = 'Калькуляция'");
	КомандаПечати.СписокФорм = "ФормаДокумента";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 25;
	
	// СводныйОтчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СводныйОтчет";
	КомандаПечати.Представление = НСтр("ru = 'Сводно о заказе'");
	КомандаПечати.СписокФорм = "ФормаДокумента";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 30;
	
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	// Заказ-наряд
	//
	// Комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	
	//*************************
	//Изменения внесены ООО Бизнес-Интеллект
	//*************************
	ЗначениеИдентификатора = "МакетЗаказПокупателя,ЗаказНаряд,АктОбОказанииУслуг,АктОбОказанииУслугПодробно,Накладная,НакладнаяСУслугами,СчетНаОплату,СчетНаЧастичнуюОплату,СчетНаОплатуСФаксимильнойПодписью,СчетНаЧастичнуюОплатуСФаксимильнойПодписью,АктСдачиПриемкиВыполненныхРаботУслугЗН,ТОРГ12,ТОРГ12СУслугами,ГарантийныйТалон,УниверсальныйПередаточныйДокумент";

	
	//ЗначениеИдентификатора = "МакетЗаказПокупателя,ЗаказНаряд,АктОбОказанииУслуг,АктОбОказанииУслугПодробно,Накладная,НакладнаяСУслугами,СчетНаОплату,СчетНаЧастичнуюОплату,СчетНаОплатуСФаксимильнойПодписью,СчетНаЧастичнуюОплатуСФаксимильнойПодписью,ТОРГ12,ТОРГ12СУслугами,ГарантийныйТалон,УниверсальныйПередаточныйДокумент";
	
	//*************************
	//Конец изменений
	//*************************
	
	ЗначениеИдентификатора = СтрЗаменить(ЗначениеИдентификатора, ",ГарантийныйТалон", ?(ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера"), ",ГарантийныйТалон", ""));
	КомандаПечати.Идентификатор = ЗначениеИдентификатора;
	
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 51;
	
	
	// Заказ покупателя
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МакетЗаказПокупателя";
	КомандаПечати.Представление = НСтр("ru = 'Заказ покупателя'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 54;
	
	// Заказ-наряд
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказНаряд";
	КомандаПечати.Представление = НСтр("ru = 'Заказ-наряд'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 57;
	
	// Акт об оказании услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 60;
	
	// Акт об оказании услуг (подробно)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОбОказанииУслугПодробно";
	КомандаПечати.Представление = НСтр("ru = 'Акт об оказании услуг (подробно)'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 63;
	
	// Расходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 66;
	
	// Расходная накладная (с услугами)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НакладнаяСУслугами";
	КомандаПечати.Представление = НСтр("ru = 'Расходная накладная (с услугами)'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 69;
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 72;
	
	// Счет на оплату (частичная оплата)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаЧастичнуюОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на частичную оплату'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизации";
	КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 75;
	
	// Видимость команд печати с факсимиле не будет регулироваться признаком заполненности поле в Организации
	// для того, что бы пользователи знали про данную возможность
	
	// Счет на оплату с факсимиле
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаОплатуСФаксимильнойПодписью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату (с факсимиле)'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 78;
	
	// Счет на оплату с факсимиле (частичная оплата)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СчетНаЧастичнуюОплатуСФаксимильнойПодписью";
	КомандаПечати.Представление = НСтр("ru = 'Счет на частичную оплату (с факсимиле)'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПредложитьЗаполнитьРеквизитыОрганизацииСФаксимильнойПодписью";
	КомандаПечати.ФункциональныеОпции = "ПлатежныйКалендарь";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 81;
	
	// ТОРГ-12
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ12'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 84;
	
	// ТОРГ-12 (с услугами)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТОРГ12СУслугами";
	КомандаПечати.Представление = НСтр("ru = 'ТОРГ12 (с услугами)'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 87;
	
	// Бланк товарного наполнения
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "БланкТоварногоНаполнения";
	КомандаПечати.Представление = НСтр("ru = 'Бланк товарного наполнения'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 90;
	
	// УПД
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьУПД";
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("ru = 'Универсальный передаточный документ'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 93;
	
	// Договор
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.СформироватьБланкиДоговоров";
	КомандаПечати.Идентификатор = "БланкДоговора";
	КомандаПечати.Представление = НСтр("ru = 'Форма договора'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 96;
	
	// Приложение к договору
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПриложениеКДоговору";
	КомандаПечати.Представление = НСтр("ru = 'Приложение к договору'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 99;
	
	// Приложение к договору
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ГарантийныйТалон";
	КомандаПечати.Представление = НСтр("ru = 'Гарантийный талон'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьСерийныеНомера";
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 102;
	
	// СводныйОтчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СводныйОтчетЗаказНаряд";
	КомандаПечати.Представление = НСтр("ru = 'Сводно о заказ-наряде'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечать";
	КомандаПечати.Порядок = 105;
	
	//*************************
	//Изменения внесены ООО Бизнес-Интеллект
	//*************************	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСдачиПриемкиВыполненныхРаботУслугЗН";
	КомандаПечати.Представление = НСтр("ru = 'Акт сдачи-приемки выполненных услуг(с факсимиле)'");
	КомандаПечати.СписокФорм = "ФормаЗаказНаряда,ФормаСпискаЗаказНаряда,ФормаСпискаДокументовКОтгрузке,ФормаСпискаДокументовКОплате";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ГруппаВажныеКомандыЗаказНаряд";
	КомандаПечати.Порядок = 108;
	//*************************
	//Конец изменений
	//*************************
	
КонецПроцедуры

Функция СформироватьУниверсальныйПередаточныйДокумент(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент			= Новый ТабличныйДокумент;
	
	НачалоИспользованияСФ1137	= Константы.НачалоИспользованияСФ1137.Получить();
	СтруктураЗаполненияСекции	= Новый Структура;
	СтавкаНДС0					= УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СчетФактура.ПФ_MXL_УниверсальныйПередаточныйДокумент");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Финиш КАК ДатаДокумента,
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.Номер КАК Номер,
		|	ЗаказПокупателя.Организация КАК Руководители,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Контрагент КАК Покупатель,
		|	ЕСТЬNULL(ЗаказПокупателя.Договор.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
		|	ЗаказПокупателя.Организация КАК Поставщик,
		|	ЗаказПокупателя.Организация КАК Грузоотправитель,
		|	ЗаказПокупателя.Контрагент КАК Грузополучатель,
		|	ЗаказПокупателя.Контрагент КАК Плательщик,
		|	ЗаказПокупателя.Договор.Представление КАК Основание,
		|	ЗаказПокупателя.ВалютаДокумента КАК Валюта,
		|	ЗаказПокупателя.СуммаВключаетНДС,
		|	ЗаказПокупателя.НДСВключатьВСтоимость,
		|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
		|	ЗаказПокупателя.Курс,
		|	ЗаказПокупателя.Кратность
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ИспользоватьПересчет = Шапка.РасчетыВУсловныхЕдиницах И (Шапка.Валюта <> Константы.НациональнаяВалюта.Получить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗапросыПоТЧ.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЗапросыПоТЧ.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ЗапросыПоТЧ.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗапросыПоТЧ.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК ТоварНаименование,
		|	ЗапросыПоТЧ.Характеристика КАК Характеристика,
		|	ЗапросыПоТЧ.Номенклатура.Код КАК ЗапасКод,
		|	ЗапросыПоТЧ.Номенклатура.Артикул КАК Артикул,
		|	ВЫБОР
		|		КОГДА ЗапросыПоТЧ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|			ТОГДА ЗапросыПоТЧ.Номенклатура.ТоварнаяНоменклатураВЭД.Код
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТНВЭДКод,
		|	ЗапросыПоТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗапросыПоТЧ.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	0 КАК КоличествоВОдномМесте,
		|	ЗапросыПоТЧ.СтавкаНДС КАК СтавкаНДС,
		|	&Цена_Параметр КАК Цена,
		|	ЗапросыПоТЧ.Количество КАК Количество,
		|	0 КАК КоличествоМест,
		|	&Сумма_Параметр КАК Сумма,
		|	&СуммаНДС_Параметр КАК СуммаНДС,
		|	&Всего_Параметр КАК Всего,
		|	ЗапросыПоТЧ.Содержание КАК Содержание,
		|	ЗапросыПоТЧ.Приоритет КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|		ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|		ЗаказПокупателяЗапасы.Цена КАК Цена,
		|		СУММА(ЗаказПокупателяЗапасы.Количество) КАК Количество,
		|		СУММА(ЗаказПокупателяЗапасы.Сумма) КАК Сумма,
		|		СУММА(ЗаказПокупателяЗапасы.СуммаНДС) КАК СуммаНДС,
		|		СУММА(ЗаказПокупателяЗапасы.Всего) КАК Всего,
		|		МИНИМУМ(ЗаказПокупателяЗапасы.НомерСтроки) КАК НомерСтроки,
		|		ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|		0 КАК Приоритет
		|	ИЗ
		|		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|	ГДЕ
		|		ЗаказПокупателяЗапасы.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателяЗапасы.Номенклатура,
		|		ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
		|		ЗаказПокупателяЗапасы.СтавкаНДС,
		|		ЗаказПокупателяЗапасы.Цена,
		|		ЗаказПокупателяЗапасы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Содержание КАК СТРОКА(1000)),
		|		ЗаказПокупателяЗапасы.НомерСтроки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказПокупателяРаботы.Номенклатура,
		|		ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
		|		ЗаказПокупателяРаботы.СтавкаНДС,
		|		ЗаказПокупателяРаботы.Цена,
		|		СУММА(ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Коэффициент),
		|		СУММА(ЗаказПокупателяРаботы.Сумма),
		|		СУММА(ЗаказПокупателяРаботы.СуммаНДС),
		|		СУММА(ЗаказПокупателяРаботы.Всего),
		|		МИНИМУМ(ЗаказПокупателяРаботы.НомерСтроки),
		|		ЗаказПокупателяРаботы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Содержание КАК СТРОКА(1000)),
		|		1
		|	ИЗ
		|		Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|	ГДЕ
		|		ЗаказПокупателяРаботы.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателяРаботы.Номенклатура,
		|		ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
		|		ЗаказПокупателяРаботы.СтавкаНДС,
		|		ЗаказПокупателяРаботы.Цена,
		|		ЗаказПокупателяРаботы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Содержание КАК СТРОКА(1000)),
		|		ЗаказПокупателяРаботы.НомерСтроки) КАК ЗапросыПоТЧ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	ЗапросыПоТЧ.НомерСтроки";
		
		Если ИспользоватьПересчет Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"Выразить(ЗапросыПоТЧ.Цена * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"Выразить(ЗапросыПоТЧ.Сумма * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"Выразить(ЗапросыПоТЧ.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"Выразить(ЗапросыПоТЧ.Всего * &Курс / &Кратность КАК Число(15,2))");
			
			Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
			Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"ЗапросыПоТЧ.Цена");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"ЗапросыПоТЧ.Сумма");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"ЗапросыПоТЧ.СуммаНДС");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"ЗапросыПоТЧ.Всего");
			
		КонецЕсли;
		
		КоличествоСтраниц = 1;
		
		ТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
		
		СведенияОПокупателе			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.ДатаДокумента,	,	);
		СведенияОПоставщике			= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаДокумента,	,	);
		
		ФлагОнЖе = Истина; // В заказ-наряде нет поля грузоотправитель.
		
		СведенияОГрузоотправителе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
			?(ФлагОнЖе, Шапка.Поставщик, Шапка.Грузоотправитель), 
			Шапка.ДатаДокумента,	,);
			
		СведенияОГрузополучателе	= УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(
			?(ФлагОнЖе И НЕ ЗначениеЗаполнено(Шапка.Грузополучатель), Шапка.Покупатель, Шапка.Грузополучатель), 
			Шапка.ДатаДокумента,	,);
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СчетФактураВыданный = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Шапка.Ссылка, Ложь);
		НоменДляПечати = ?(ЗначениеЗаполнено(СчетФактураВыданный), СчетФактураВыданный.Номер, Шапка.Номер);
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(НоменДляПечати, Шапка.Префикс);
			
		Иначе
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НоменДляПечати, Истина, Истина);
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("Номер", НомерДокумента);
		СтруктураЗаполненияСекции.Вставить("Дата", Формат(?(ЗначениеЗаполнено(СчетФактураВыданный), СчетФактураВыданный.Дата, Шапка.ДатаДокумента), "ДФ='дд ММММ гггг'")+ " г.");
		СтруктураЗаполненияСекции.Вставить("НомерИсправления", "--");
		СтруктураЗаполненияСекции.Вставить("ДатаИсправления", "--");
		
		ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		Если НЕ (Шапка.ДатаДокумента < '20090609' ИЛИ Шапка.ДатаДокумента >= НачалоИспользованияСФ1137) Тогда
			
			ПредставлениеПоставщика = ПредставлениеПоставщика + " (" + УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Представление,") + ")";
			
		КонецЕсли;
		
		СтруктураЗаполненияСекции.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		
		ЗначениеАдресаПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		СтруктураЗаполненияСекции.Вставить("АдресПоставщика", ?(ПустаяСтрока(ЗначениеАдресаПоставщика), "--", ЗначениеАдресаПоставщика));
		СтруктураЗаполненияСекции.Вставить("ПоДокументу", "-- от --");
		СтруктураЗаполненияСекции.Вставить("ПредставлениеПокупателя", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,"));
		
		ЗначениеАдресаПокупателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
		СтруктураЗаполненияСекции.Вставить("АдресПокупателя", ?(ПустаяСтрока(ЗначениеАдресаПокупателя), "--", ЗначениеАдресаПокупателя));
		
		Если ФлагОнЖе Тогда
			
			ПредставлениеГрузоотправителя = "он же";
			
		ИначеЕсли ЗначениеЗаполнено(Шапка.Грузоотправитель) Тогда
			
			ПредставлениеГрузоотправителя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование, ФактическийАдрес,");
			
		Иначе
			
			ПредставлениеГрузоотправителя = "--";
			
		КонецЕсли; 
		СтруктураЗаполненияСекции.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
		
		Если ЗначениеЗаполнено(Шапка.Грузополучатель) Тогда
			
			ПредставлениеГрузополучателя  = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,");
			
		Иначе
			
			ПредставлениеГрузополучателя = ?(Шапка.ДатаДокумента >= НачалоИспользованияСФ1137, "--", "");
			
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
		
		КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ИННпоставщика", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП);
		
		КПП = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда 
			КПП = "/" + КПП;
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ИННПокупателя", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП);
		
		Если Шапка.Валюта <> Константы.НациональнаяВалюта.Получить()
			И НЕ ИспользоватьПересчет Тогда
			
			Валюта = СокрЛП(Шапка.Валюта.НаименованиеПолное) + ", " + СокрЛП(Шапка.Валюта.Код) + "";
			
		Иначе
			
			Валюта = "Российский рубль,643";
			
		Конецесли;
		СтруктураЗаполненияСекции.Вставить("Валюта", Валюта);
		СтруктураЗаполненияСекции.Вставить("СтатусУПД", "2");
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку ТЧ накладной
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим ТЧ накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		ИтогоСтоимость	= 0;
		ИтогоСуммаНДС	= 0;
		ИтогоВсего		= 0;
		
		НомерСтроки = 0;
		НомерЛиста = 1;
		КоличествоСтрок = ТабличнаяЧасть.Количество();
		
		Для Каждого Строчка Из ТабличнаяЧасть Цикл
			
			СтруктураЗаполненияСекции.Очистить();
			
			НомерСтроки = НомерСтроки + 1;
			
			СтруктураЗаполненияСекции.Вставить("НомерСтроки", НомерСтроки);
			СтруктураЗаполненияСекции.Вставить("ТоварКод", Строчка.Артикул);
			
			ТоварНаименование = Строчка.Содержание;
			Если ПустаяСтрока(ТоварНаименование) Тогда
				
				ТоварНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Строчка.ТоварНаименование, Строчка.Характеристика, Строчка.Артикул);
				
			КонецЕсли;
			
			Если Шапка.ДатаДокумента >= Дата(2016, 07, 01) Тогда
				
				Если Строчка.СтавкаНДС = СтавкаНДС0
					И НЕ ПустаяСтрока(Строчка.ТНВЭДКод) Тогда
					
					ТоварНаименование = ТоварНаименование + НСтр("ru=', код ТН ВЭД '") + Строчка.ТНВЭДКод;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураЗаполненияСекции.Вставить("ТоварНаименование", ТоварНаименование);
			
			ЕдиницаИзмеренияКод = Строчка.ЕдиницаИзмеренияКод;
			Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 
				И НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
				
				ЕдиницаИзмеренияКод = "--";
				
			КонецЕсли;
			СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмеренияКод", ЕдиницаИзмеренияКод);
			
			ЕдиницаИзмерения = Строчка.ЕдиницаИзмерения;
			Если Шапка.ДатаДокумента >= НачалоИспользованияСФ1137 
				И НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				
				ЕдиницаИзмерения = "--";
				
			КонецЕсли;
			СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			СтруктураЗаполненияСекции.Вставить("Акциз", ?(Шапка.ДатаДокумента < НачалоИспользованияСФ1137, "", Нстр("ru = 'без акциза'")));
			СтруктураЗаполненияСекции.Вставить("Количество", Строчка.Количество);
			
			Если Строчка.Цена = 0 ИЛИ Строчка.Количество = 0 Тогда
				
				СтруктураЗаполненияСекции.Вставить("Цена", 0);
				
			Иначе
				
				СтруктураЗаполненияСекции.Вставить("Цена", Окр((Строчка.Всего - Строчка.СуммаНДС) / Строчка.Количество,2));
				
			КонецЕсли;
			
			Если Строчка.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				
				СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмерения", "--");
				СтруктураЗаполненияСекции.Вставить("ЕдиницаИзмеренияКод", "--");
				СтруктураЗаполненияСекции.Вставить("Акциз", Нстр("ru = 'без акциза'"));
				СтруктураЗаполненияСекции.Вставить("Количество", "--");
				СтруктураЗаполненияСекции.Вставить("Цена", "--");
				
			КонецЕсли;
			
			СтруктураЗаполненияСекции.Вставить("Стоимость", Строчка.Всего - Строчка.СуммаНДС);
			СтруктураЗаполненияСекции.Вставить("Всего", Строчка.Всего);
			
			Если ВРег(Строчка.СтавкаНДС) = "БЕЗ НДС" Тогда
				
				СтруктураЗаполненияСекции.Вставить("СтавкаНДС", Нстр("ru ='без НДС'"));
				СтруктураЗаполненияСекции.Вставить("СуммаНДС", Нстр("ru ='без НДС'"));
				
			Иначе
				
				СтруктураЗаполненияСекции.Вставить("СтавкаНДС",Строчка.СтавкаНДС);
				СтруктураЗаполненияСекции.Вставить("СуммаНДС", Строчка.СуммаНДС);
				
			КонецЕсли;
			
			СтруктураЗаполненияСекции.Вставить("СтранаПроисхожденияКод", "--");
			СтруктураЗаполненияСекции.Вставить("ПредставлениеСтраны", "--");
			СтруктураЗаполненияСекции.Вставить("ПредставлениеГТД", "--");
			
			ИтогоСтоимость	= ИтогоСтоимость + (Строчка.Всего - Строчка.СуммаНДС);
			ИтогоСуммаНДС	= ИтогоСуммаНДС + Строчка.СуммаНДС;
			ИтогоВсего		= ИтогоВсего + Строчка.Всего;
			
			ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
			
			Если НЕ УправлениеНебольшойФирмойСервер.ПроверитьВыводСчетаФактурыНаСтраницу(ТабличныйДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерДокумента, Истина) Тогда
				
				КоличествоСтраниц = КоличествоСтраниц + 1;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Выводим область ИТОГО
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		
		СтруктураЗаполненияСекции.Очистить();
		СтруктураЗаполненияСекции.Вставить("ИтогоСуммаНДС", ИтогоСуммаНДС);
		СтруктураЗаполненияСекции.Вставить("ИтогоВсего", ИтогоВсего);
		СтруктураЗаполненияСекции.Вставить("ИтогоСтоимость", ?(ИтогоСтоимость = 0, "--", ИтогоСтоимость));
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим область Подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Руководители, Шапка.ДатаДокумента);
		Если Шапка.Руководители.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			
			Руководители.Вставить("ФИОПБОЮЛ", Руководители.ФИОРуководителя);
			Руководители.Удалить("ФИОРуководителя"); 
			
		КонецЕсли;
		
		Руководители.Вставить("Свидетельство", УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
		
		ОбластьМакета.Параметры.КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
			УправлениеНебольшойФирмойСервер.ФормаМножественногоЧисла(НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц)
			);
		
		ОбластьМакета.Параметры.Заполнить(Руководители);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим область Подвал накладной
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		СтруктураЗаполненияСекции.Очистить();
		СтруктураЗаполненияСекции.Вставить("ДатаОтгрузкиПередачи", Формат(Шапка.ДатаДокумента, "ДФ='« дд » ММММ гггг'"));
		
		ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		Если НЕ ПустаяСтрока(СведенияОПоставщике.ИНН) 
			И НЕ ПустаяСтрока(СведенияОПоставщике.КПП) Тогда
			
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ПредставлениеОрганизации, СведенияОПоставщике.ИНН, СведенияОПоставщике.КПП);
			
		ИначеЕсли НЕ ПустаяСтрока(СведенияОПоставщике.ИНН) Тогда
			
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеОрганизации, СведенияОПоставщике.ИНН);
			
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
				
		ПредставлениеКонтрагента = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		Если НЕ ПустаяСтрока(СведенияОПокупателе.ИНН)
			И НЕ ПустаяСтрока(СведенияОПокупателе.КПП) Тогда
			
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ПредставлениеКонтрагента, СведенияОПокупателе.ИНН, СведенияОПокупателе.КПП);
				
		ИначеЕсли НЕ ПустаяСтрока(СведенияОПокупателе.ИНН) Тогда
			
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеКонтрагента, СведенияОПокупателе.ИНН);
			
		КонецЕсли;
		СтруктураЗаполненияСекции.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
		
		СтруктураЗаполненияСекции.Вставить("ДолжностьКладовщика", Руководители.КладовщикДолжность);
		СтруктураЗаполненияСекции.Вставить("ФИОКладовщика", Руководители.ФИОКладовщика);
		
		ОбластьМакета.Параметры.Заполнить(СтруктураЗаполненияСекции);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьУниверсальныйПередаточныйДокумент

Функция ПечатьЗаказПокупателя(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК ДатаДокумента,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.Ответственный,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Работы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Коэффициент * ЗаказПокупателя.Работы.Кратность КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Характеристика,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Содержание,
	|		Ссылка.Старт КАК ДатаОтгрузки,
	|		СуммаАвтоматическойСкидки
	|	),
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ТОГДА ЗаказПокупателя.Запасы.Ссылка.Старт
	|			ИНАЧЕ ЗаказПокупателя.Запасы.ДатаОтгрузки
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки
	|	)
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|	,ЗаказПокупателя.Запасы.НомерСтроки
	|	,ЗаказПокупателя.Работы.НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_МакетЗаказПокупателя";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_МакетЗаказПокупателя");
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Заказ покупателя № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		ВыборкаСтрокРаботы = Шапка.Работы.Выбрать();
		
		ЕстьСкидки = (Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") + Шапка.Работы.Выгрузить().Итог("ЕстьСкидка")) <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		НомерСтроки = 0;
		
		Пока ВыборкаСтрокРаботы.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);
			
			ОбластьМакета.Параметры.Запас = ?(ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание), ВыборкаСтрокРаботы.Содержание,
				УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокРаботы.Запас, ВыборкаСтрокРаботы.Характеристика, ВыборкаСтрокРаботы.Артикул));
				
			Если ЕстьСкидки Тогда
				
				Если ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 100 Тогда
					
					Скидка									= ВыборкаСтрокРаботы.Цена * ВыборкаСтрокРаботы.Количество;
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= Скидка;
					
				ИначеЕсли ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 0 
					И ВыборкаСтрокРаботы.СуммаАвтоматическойСкидки = 0 Тогда
					
					ОбластьМакета.Параметры.Скидка			= 0;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокРаботы.Сумма;
					
				Иначе
					
					Скидка									= ВыборкаСтрокРаботы.Количество * ВыборкаСтрокРаботы.Цена - ВыборкаСтрокРаботы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокРаботы.Сумма + Скидка;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокРаботы.СуммаНДС;
			Всего		= Всего		+ ВыборкаСтрокРаботы.Всего;
			Количество	= Количество+ 1;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			
			ОбластьМакета.Параметры.Запас = ?(ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание), ВыборкаСтрокЗапасы.Содержание, 
				УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул));
			
			Если ЕстьСкидки Тогда
				
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					
					Скидка									= ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= Скидка;
					
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 
					И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
					
					ОбластьМакета.Параметры.Скидка			= 0;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокЗапасы.Сумма;
					
				Иначе
					
					Скидка									= ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокЗапасы.Сумма + Скидка;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего		= Всего		+ ВыборкаСтрокЗапасы.Всего;
			Количество	= Количество+ 1;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		Иначе
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Отпустил = Шапка.Ответственный;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	

КонецФункции // ПечатнаяФорма()

Функция ПечатьСчетНаОплату(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.Дата КАК ДатаДокумента,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.УсловияСчетаЗаказа КАК ДополнительныеУсловия,
	|	ЗаказПокупателя.Комментарий КАК Комментарий,
	|	ЗаказПокупателя.Договор,
	|	ЗаказПокупателя.ДокументОснование,
	|	ЗаказПокупателя.Ответственный,
	|	ЗаказПокупателя.Автор,
	|	ЗаказПокупателя.ДисконтнаяКарта,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.СостояниеЗаказа,
	|	ЗаказПокупателя.Работы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Коэффициент * ЗаказПокупателя.Работы.Кратность КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		НомерСтроки КАК НомерСтроки,
	|		СуммаАвтоматическойСкидки
	|	),
	|	ЗаказПокупателя.Запасы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Количество КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		НомерСтроки КАК НомерСтроки,
	|		СуммаАвтоматическойСкидки,
	|		Спецификация
	|	),
	|	ЗаказПокупателя.ПлатежныйКалендарь.(
	|		ПроцентОплаты,
	|		СуммаОплаты,
	|		СуммаНДСОплаты
	|	)
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		//*************************
		//Изменения внесены ООО Бизнес-Интеллект
		//*************************	
		ОтчетОУдаленныхСоединениях = Шапка.Ссылка.BizОтчетTW;
		//*************************
		//Конец изменений
		//*************************
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		ВыборкаСтрокРаботы = Шапка.Работы.Выбрать();
		ТаблицаПредоплаты = Шапка.ПлатежныйКалендарь.Выгрузить(); 
				
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплату_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_" + ИмяМакета);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		//Для совместимости со старыми макетами
		Если Макет.Области.Найти("ЗаглавиеСЛоготипом") <> Неопределено
			И Макет.Области.Найти("ЗаглавиеБезЛоготипа") <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Шапка.Организация.ФайлЛоготип) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеСЛоготипом");
				ОбластьМакета.Параметры.Заполнить(Шапка);
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе // Если картинки не выбраны печатаем обычный заголовок
					
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");
				ОбластьМакета.Параметры.Заполнить(Шапка);
					
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		//Новый вариант макета содержит логотип в области ЗаголовокСчетаСЛоготипом
		Если Макет.Области.Найти("ЗаголовокСчетаСЛоготипом") <> Неопределено
			И ЗначениеЗаполнено(Шапка.Организация.ФайлЛоготип) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
				ОбластьМакета.Параметры.Заполнить(Шапка);
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
		ИначеЕсли Макет.Области.Найти("ЗаголовокСчета") <> Неопределено Тогда
			
			// Если картинки не выбраны печатаем обычный заголовок	
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
			ОбластьМакета.Параметры.Заполнить(Шапка);
				
		Иначе
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			ОбластьМакета.Параметры.БанкПолучателяПредставление = СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город;
		КонецЕсли; 
		ОбластьМакета.Параметры.ИНН = СведенияОбОрганизации.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОбОрганизации.КПП;
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ?(ПустаяСтрока(СведенияОбОрганизации.ТекстКорреспондента), СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.ТекстКорреспондента);
		ОбластьМакета.Параметры.БИКБанкаПолучателя = СведенияОбОрганизации.БИК;
		ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = СведенияОбОрганизации.КоррСчет;
		ОбластьМакета.Параметры.СчетПолучателяПредставление = СведенияОбОрганизации.НомерСчета;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ТекстЗаголовка = "Счет на оплату № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = (Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") + Шапка.Работы.Выгрузить().Итог("ЕстьСкидка")) <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;

		Пока ВыборкаСтрокРаботы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			Если ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокРаботы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокРаботы.Запас, 
																	ВыборкаСтрокРаботы.Характеристика, ВыборкаСтрокРаботы.Артикул);
			КонецЕсли;
						
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокРаботы.Цена * ВыборкаСтрокРаботы.Количество;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокРаботы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокРаботы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокРаботы.Количество * ВыборкаСтрокРаботы.Цена - ВыборкаСтрокРаботы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокРаботы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма 	+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокРаботы.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокРаботы.Всего;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
																	ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
			КонецЕсли;
																
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокРаботы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокЗапасы.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		Иначе
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
		КонецЕсли; 
		
		Если ИмяМакета = "СчетНаЧастичнуюОплату" Тогда
			Если СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДСкОплате = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
			Иначе
				ОбластьМакета.Параметры.НДСкОплате = ?(Шапка.СуммаВключаетНДС, "В том числе НДС оплаты:", "Сумма НДС оплаты:");
				Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
					ОбластьМакета.Параметры.ВсегоНДСкОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаНДСОплаты"));
				Иначе
					ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
				КонецЕсли;
			КонецЕсли; 
			Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
				ОбластьМакета.Параметры.ВсегоКОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаОплаты"));
				ОбластьМакета.Параметры.ПроцентОплаты = ТаблицаПредоплаты.Итог("ПроцентОплаты");
			Иначе
				ОбластьМакета.Параметры.ВсегоКОплате = "-";
				ОбластьМакета.Параметры.ПроцентОплаты = "-";
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеНебольшойФирмойСервер.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Дополнительные условия
		Если ЗначениеЗаполнено(Шапка.ДополнительныеУсловия) И
			ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловия")) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительныеУсловия");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			
			// Добавим отступ перед текстом
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим построчно многострочный текст
			// для того, чтобы корректно печатались длинные тексты
			ТекстДополнительныхУсловий = Шапка.ДополнительныеУсловия.ТекстУсловий;
			ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
				СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		

		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		
		//*************************
		//Изменения внесены ООО Бизнес-Интеллект
		//*************************	
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		Руководители = бизЗаполнениеДокументов.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация,
		ПользовательИБ.УникальныйИдентификатор, Шапка.ДатаДокумента);
		
		ОбластьМакета.Параметры.ФИОРуководителя	= Руководители.ФИОРуководителя;
		ОбластьМакета.Параметры.ФИОБухгалтера = Руководители.ФИОГлавногоБухгалтера;
		ОбластьМакета.Параметры.ПредставлениеПодписанта = Руководители.ПредставлениеПодписантаРуководителя;
		//*************************
		//Конец изменений
		//*************************

		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
		//
		//ОбластьМакета.Параметры.ФИОРуководителя = Руководители.ФИОРуководителя;
		//ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ФИОГлавногоБухгалтера;
		

		//*************************
		//Изменения внесены ООО Бизнес-Интеллект
		//*************************	
		Если ЗначениеЗаполнено(ОтчетОУдаленныхСоединениях) Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ОбъОтчетОУдаленныхСоединениях = ОтчетОУдаленныхСоединениях.ПолучитьОбъект();
			ОбъОтчетОУдаленныхСоединениях.ПечатьОтчетаОудаленыхСоединениях(ТабличныйДокумент, Шапка.Ссылка);
			ОтчетОУдаленныхСоединениях = Неопределено;
		КонецЕсли;
		//*************************
		//Конец изменений
		//*************************
		

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплату()

Функция ПечатьСчетНаОплатуСФаксимильнойПодписью(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.Дата КАК ДатаДокумента,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.УсловияСчетаЗаказа КАК ДополнительныеУсловия,
	|	ЗаказПокупателя.Комментарий КАК Комментарий,
	|	ЗаказПокупателя.Договор,
	|	ЗаказПокупателя.ДокументОснование,
	|	ЗаказПокупателя.Ответственный,
	|	ЗаказПокупателя.Автор,
	|	ЗаказПокупателя.ДисконтнаяКарта,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.СостояниеЗаказа,
	|	ЗаказПокупателя.Работы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Коэффициент * ЗаказПокупателя.Работы.Кратность КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		НомерСтроки КАК НомерСтроки,
	|		СуммаАвтоматическойСкидки
	|	),
	|	ЗаказПокупателя.Запасы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Количество КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		НомерСтроки КАК НомерСтроки,
	|		СуммаАвтоматическойСкидки,
	|		Спецификация
	|	),
	|	ЗаказПокупателя.ПлатежныйКалендарь.(
	|		ПроцентОплаты,
	|		СуммаОплаты,
	|		СуммаНДСОплаты
	|	)
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		//Изменения внесены ООО Бизнес-Интеллект / ПечатьСчетНаОплатуСФаксимильнойПодписью()
		//*************************	
		ОтчетОУдаленныхСоединениях = ШАпка.Ссылка.BizОтчетTW;
		//*************************
		//Конец изменений
		//*************************
				
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		ВыборкаСтрокРаботы = Шапка.Работы.Выбрать();
		ТаблицаПредоплаты = Шапка.ПлатежныйКалендарь.Выгрузить(); 
				
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплату_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_" + ИмяМакета);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		//Для совместимости со старыми макетами
		Если Макет.Области.Найти("ЗаглавиеСЛоготипом") <> Неопределено
			И Макет.Области.Найти("ЗаглавиеБезЛоготипа") <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Шапка.Организация.ФайлЛоготип) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеСЛоготипом");
				ОбластьМакета.Параметры.Заполнить(Шапка);
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе // Если картинки не выбраны печатаем обычный заголовок
					
					ОбластьМакета = Макет.ПолучитьОбласть("ЗаглавиеБезЛоготипа");
					ОбластьМакета.Параметры.Заполнить(Шапка);
					
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		//Если используется пользовательский макет - этих секций не было
		Если Макет.Области.Найти("ЗаголовокСчетаСЛоготипом") <> Неопределено
			И ЗначениеЗаполнено(Шапка.Организация.ФайлЛоготип) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчетаСЛоготипом");
				ОбластьМакета.Параметры.Заполнить(Шапка);
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлЛоготип);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.Логотип.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
		ИначеЕсли Макет.Области.Найти("ЗаголовокСчета") <> Неопределено Тогда
			
			// Если картинки не выбраны печатаем обычный заголовок	
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
			ОбластьМакета.Параметры.Заполнить(Шапка);
				
		Иначе
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			ОбластьМакета.Параметры.БанкПолучателяПредставление = СведенияОбОрганизации.Банк.Наименование + " " + СведенияОбОрганизации.Банк.Город;;
		КонецЕсли; 
		ОбластьМакета.Параметры.ИНН = СведенияОбОрганизации.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОбОрганизации.КПП;
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ?(ПустаяСтрока(СведенияОбОрганизации.ТекстКорреспондента), СведенияОбОрганизации.ПолноеНаименование, СведенияОбОрганизации.ТекстКорреспондента);
		ОбластьМакета.Параметры.БИКБанкаПолучателя = СведенияОбОрганизации.БИК;
		ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = СведенияОбОрганизации.КоррСчет;
		ОбластьМакета.Параметры.СчетПолучателяПредставление = СведенияОбОрганизации.НомерСчета;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ТекстЗаголовка = "Счет на оплату № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = (Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") + Шапка.Работы.Выгрузить().Итог("ЕстьСкидка")) <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		
		Пока ВыборкаСтрокРаботы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			Если ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокРаботы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокРаботы.Запас, 
																	ВыборкаСтрокРаботы.Характеристика, ВыборкаСтрокРаботы.Артикул);
			КонецЕсли;
						
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокРаботы.Цена * ВыборкаСтрокРаботы.Количество;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокРаботы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокРаботы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокРаботы.Количество * ВыборкаСтрокРаботы.Цена - ВыборкаСтрокРаботы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокРаботы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма		+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокРаботы.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокРаботы.Всего;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
																	ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
			КонецЕсли;
																
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего	= Всего		+ ВыборкаСтрокЗапасы.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		Иначе
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
		КонецЕсли; 
		
		Если ИмяМакета = "СчетНаЧастичнуюОплату" Тогда
			Если СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДСкОплате = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
			Иначе
				ОбластьМакета.Параметры.НДСкОплате = ?(Шапка.СуммаВключаетНДС, "В том числе НДС оплаты:", "Сумма НДС оплаты:");
				Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
					ОбластьМакета.Параметры.ВсегоНДСкОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаНДСОплаты"));
				Иначе
					ОбластьМакета.Параметры.ВсегоНДСкОплате = "-";
				КонецЕсли;
			КонецЕсли; 
			Если ТаблицаПредоплаты.Итог("ПроцентОплаты") > 0 Тогда
				ОбластьМакета.Параметры.ВсегоКОплате = УправлениеНебольшойФирмойСервер.ФорматСумм(ТаблицаПредоплаты.Итог("СуммаОплаты"));
				ОбластьМакета.Параметры.ПроцентОплаты = ТаблицаПредоплаты.Итог("ПроцентОплаты");
			Иначе
				ОбластьМакета.Параметры.ВсегоКОплате = "-";
				ОбластьМакета.Параметры.ПроцентОплаты = "-";
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ИтогоКОплате") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета ""Итог к оплате"". Возможно используется пользовательский макет.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоКОплате");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			ОбластьМакета.Параметры.Заполнить(Новый Структура("ИтогоКОплате", УправлениеНебольшойФирмойСервер.ФорматСумм(Всего)));
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
																					
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// Дополнительные условия
		Если ЗначениеЗаполнено(Шапка.ДополнительныеУсловия) И
			ЗначениеЗаполнено(Макет.Области.Найти("ДополнительныеУсловия")) Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительныеУсловия");
			ОбластьМакета.Параметры.Заполнить(Шапка);
			
			// Добавим отступ перед текстом
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим построчно многострочный текст
			// для того, чтобы корректно печатались длинные тексты
			ТекстДополнительныхУсловий = Шапка.ДополнительныеУсловия.ТекстУсловий;
			ЧислоСтрокТекста = СтрЧислоСтрок(ТекстДополнительныхУсловий);
			Для СчетчикСтрок = 1 По ЧислоСтрокТекста Цикл
				СтруктураПараметров = Новый Структура("ТекстДополнительныхУсловий", СтрПолучитьСтроку(ТекстДополнительныхУсловий, СчетчикСтрок));
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;		
		
		Если Макет.Области.Найти("ПодвалСчетаСФаксимильнойПечатью") <> Неопределено Тогда
		
			Если ЗначениеЗаполнено(Шапка.Организация.ФайлФаксимильнаяПечать) Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаСФаксимильнойПечатью");
				ОбластьМакета.Параметры.Заполнить(Шапка);
				
				ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Шапка.Организация.ФайлФаксимильнаяПечать);
				Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
					
					ОбластьМакета.Рисунки.ФаксимильнаяПечать.Картинка = Новый Картинка(ДанныеКартинки);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru ='Факсимиле для организации не установлена. Установка факсимиле выполняется в карточке организации, раздел ""Настройка печати"".'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
				ОбластьМакета.Параметры.Заполнить(Шапка);
				
				Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);
				
				ОбластьМакета.Параметры.ФИОРуководителя = Руководители.ФИОРуководителя;
				ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ФИОГлавногоБухгалтера;
				
			КонецЕсли;
			
		Иначе
			
			// Добавлять второе предупреждение не нужно, так как предупреждение добавлено при попытке вывести заголовок.
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//*************************
		//Изменения внесены ООО Бизнес-Интеллект / ПечатьСчетНаОплатуСФаксимильнойПодписью()
		//*************************	
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Если ЗначениеЗаполнено(ОтчетОУдаленныхСоединениях) Тогда
			ОбъОтчетОУдаленныхСоединениях = ОтчетОУдаленныхСоединениях.ПолучитьОбъект();
			ОбъОтчетОУдаленныхСоединениях.ПечатьОтчетаОудаленыхСоединениях(ТабличныйДокумент, Шапка.Ссылка);
			ОтчетОУдаленныхСоединениях = Неопределено;
		КонецЕсли;
		//*************************
		//Конец изменений
		//*************************
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьСчетНаОплатуСФаксимильнойПодписью()

Функция ПечатьАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Финиш КАК ДатаДокумента,
	|	ЗаказПокупателя.Дата КАК Дата,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Работы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Товар,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Коэффициент * ЗаказПокупателя.Работы.Кратность КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Количество КАК Время,
	|		Кратность,
	|		Коэффициент,
	|		СуммаАвтоматическойСкидки
	|	)
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокТовары = Шапка.Работы.Выбрать();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ПФ_MXL_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_" + ИмяМакета);
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		Если Шапка.Дата < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Акт № "
		                                        + НомерДокумента
		                                        + " от "
		                                        + Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = Шапка.Работы.Выгрузить().Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Содержание) Тогда
				ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Содержание;
			Иначе
				ОбластьМакета.Параметры.Товар = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокТовары.Товар, 
																	ВыборкаСтрокТовары.Характеристика, ВыборкаСтрокТовары.Артикул);
			КонецЕсли;
																
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокТовары.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокТовары.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокТовары.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма;
				Иначе
					Скидка = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена - ВыборкаСтрокТовары.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокТовары.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокТовары.СуммаНДС;
			Всего		= Всего 	+ ВыборкаСтрокТовары.Всего;
			Количество	= Количество+ 1;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		Иначе
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
		                                        + Строка(Количество)
		                                        + ", на сумму "
		                                        + УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатнаяФорма()

Функция ПечатьРасходнаяНакладная(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";

	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Финиш КАК ДатаДокумента,
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.Номер,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
		|	ЗаказПокупателя.СерийныеНомера.(
		|		СерийныйНомер,
		|		КлючСвязи
		|	)
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.Ссылка,
		|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
		|	ЗаказПокупателяЗапасы.Номенклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"""""
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.Наименование
		|		ИНАЧЕ ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ КАК Запас,
		|	ЗаказПокупателяЗапасы.Номенклатура.Артикул КАК Артикул,
		|	ЗаказПокупателяЗапасы.Номенклатура.Код КАК Код,
		|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаХранения,
		|	ЗаказПокупателяЗапасы.Количество КАК Количество,
		|	ЗаказПокупателяЗапасы.Цена КАК Цена,
		|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
		|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
		|	ЗаказПокупателяЗапасы.Всего КАК Всего,
		|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
		|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьСкидка,
		|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	0 КАК Приоритет,
		|	ЗаказПокупателяЗапасы.КлючСвязи
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &ТекущийДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателяРаботы.Ссылка,
		|	ЗаказПокупателяРаботы.НомерСтроки,
		|	ЗаказПокупателяРаботы.Номенклатура.Ссылка,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"""""
		|			ТОГДА ЗаказПокупателяРаботы.Номенклатура.Наименование
		|		ИНАЧЕ ЗаказПокупателяРаботы.Номенклатура.НаименованиеПолное
		|	КОНЕЦ,
		|	ЗаказПокупателяРаботы.Номенклатура.Артикул,
		|	ЗаказПокупателяРаботы.Номенклатура.Код,
		|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
		|	ЗаказПокупателяРаботы.Количество,
		|	ЗаказПокупателяРаботы.Цена,
		|	ЗаказПокупателяРаботы.Сумма,
		|	ЗаказПокупателяРаботы.СуммаНДС,
		|	ЗаказПокупателяРаботы.Всего,
		|	ЗаказПокупателяРаботы.Характеристика,
		|	ЗаказПокупателяРаботы.Содержание,
		|	ЗаказПокупателяРаботы.ПроцентСкидкиНаценки,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяРаботы.ПроцентСкидкиНаценки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ЗаказПокупателяРаботы.Номенклатура.ТипНоменклатуры,
		|	1,
		|	NULL
		|ИЗ
		|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|ГДЕ
		|	ЗаказПокупателяРаботы.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	НомерСтроки";
		
		РезультатВыполненияПакетаЗапроса = Запрос.ВыполнитьПакет();
		
		Шапка = РезультатВыполненияПакетаЗапроса[0].Выбрать();
		Шапка.Следующий();
		
		ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
		ВыборкаСтрокЗапасы = РезультатВыполненияПакетаЗапроса[1].Выбрать();

		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_Накладная";
									  
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_Накладная");
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);

		Если Шапка.Дата < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Расходная накладная № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = РезультатВыполненияПакетаЗапроса[1].Выгрузить().Итог("ЕстьСкидка") <> 0;
	
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
		
			Если ИмяМакета = "Накладная" И ВыборкаСтрокЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			Иначе
				СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокЗапасы.КлючСвязи);
				ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
					ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул, СтрокаСерийныеНомера);
			КонецЕсли;
																
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= Скидка;
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 Тогда
					ОбластьМакета.Параметры.Скидка			= 0;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокЗапасы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокЗапасы.Сумма * ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки / (100 - ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки);
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокЗапасы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			Количество	= Количество + 1;
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма	= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего	= Всего 	+ ВыборкаСтрокЗапасы.Всего;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		Иначе
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьТОРГ12(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";

	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Финиш КАК ДатаДокумента,
		|	ЗаказПокупателя.Дата КАК Дата,
		|	ЗаказПокупателя.Номер КАК Номер,
		|	ЗаказПокупателя.Организация КАК Руководители,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Организация КАК Поставщик,
		|	ЗаказПокупателя.Контрагент КАК Грузополучатель,
		|	ЗаказПокупателя.Организация КАК Грузоотправитель,
		|	ЗаказПокупателя.Контрагент КАК Плательщик,
		|	ЗаказПокупателя.Договор.Представление КАК Основание,
		|	ЗаказПокупателя.ВалютаДокумента,
		|	ЗаказПокупателя.СуммаВключаетНДС,
		|	ЗаказПокупателя.НДСВключатьВСтоимость,
		|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
		|	ЗаказПокупателя.Курс,
		|	ЗаказПокупателя.Кратность
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		
		Шапка.Следующий();
		
		ИспользоватьПересчет = (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗапросыПоТЧ.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЗапросыПоТЧ.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ЗапросыПоТЧ.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗапросыПоТЧ.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК ЗапасНаименование,
		|	ЗапросыПоТЧ.Характеристика КАК Характеристика,
		|	ЗапросыПоТЧ.Номенклатура.Код КАК ЗапасКод,
		|	ЗапросыПоТЧ.Номенклатура.Артикул КАК Артикул,
		|	ЗапросыПоТЧ.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
		|	ЗапросыПоТЧ.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
		|	ЗапросыПоТЧ.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумента,
		|	ЗапросыПоТЧ.ЕдиницаИзмерения КАК ВидУпаковки,
		|	0 КАК КоличествоВОдномМесте,
		|	ЗапросыПоТЧ.СтавкаНДС КАК СтавкаНДС,
		|	&Цена_Параметр КАК Цена,
		|	ЗапросыПоТЧ.Количество КАК Количество,
		|	0 КАК КоличествоМест,
		|	&Сумма_Параметр КАК Сумма,
		|	&СуммаНДС_Параметр КАК СуммаНДС,
		|	&Всего_Параметр КАК Всего,
		|	ЗапросыПоТЧ.Содержание КАК Содержание,
		|	ЗапросыПоТЧ.Приоритет КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|		ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|		ЗаказПокупателяЗапасы.Цена КАК Цена,
		|		СУММА(ЗаказПокупателяЗапасы.Количество) КАК Количество,
		|		СУММА(ЗаказПокупателяЗапасы.Сумма) КАК Сумма,
		|		СУММА(ЗаказПокупателяЗапасы.СуммаНДС) КАК СуммаНДС,
		|		СУММА(ЗаказПокупателяЗапасы.Всего) КАК Всего,
		|		МИНИМУМ(ЗаказПокупателяЗапасы.НомерСтроки) КАК НомерСтроки,
		|		ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|		0 КАК Приоритет
		|	ИЗ
		|		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|	ГДЕ
		|		ЗаказПокупателяЗапасы.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателяЗапасы.Номенклатура,
		|		ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
		|		ЗаказПокупателяЗапасы.СтавкаНДС,
		|		ЗаказПокупателяЗапасы.Цена,
		|		ЗаказПокупателяЗапасы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Содержание КАК СТРОКА(1000)),
		|		ЗаказПокупателяЗапасы.НомерСтроки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказПокупателяРаботы.Номенклатура,
		|		ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
		|		ЗаказПокупателяРаботы.СтавкаНДС,
		|		ЗаказПокупателяРаботы.Цена,
		|		СУММА(ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Коэффициент),
		|		СУММА(ЗаказПокупателяРаботы.Сумма),
		|		СУММА(ЗаказПокупателяРаботы.СуммаНДС),
		|		СУММА(ЗаказПокупателяРаботы.Всего),
		|		МИНИМУМ(ЗаказПокупателяРаботы.НомерСтроки),
		|		ЗаказПокупателяРаботы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Содержание КАК СТРОКА(1000)),
		|		1
		|	ИЗ
		|		Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|	ГДЕ
		|		ЗаказПокупателяРаботы.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателяРаботы.Номенклатура,
		|		ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
		|		ЗаказПокупателяРаботы.СтавкаНДС,
		|		ЗаказПокупателяРаботы.Цена,
		|		ЗаказПокупателяРаботы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Содержание КАК СТРОКА(1000)),
		|		ЗаказПокупателяРаботы.НомерСтроки) КАК ЗапросыПоТЧ
		|ГДЕ
		|	&УсловиеФильтраУслуг
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	ЗапросыПоТЧ.НомерСтроки";
		
		Если ИспользоватьПересчет Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"Выразить(ЗапросыПоТЧ.Цена * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"Выразить(ЗапросыПоТЧ.Сумма * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"Выразить(ЗапросыПоТЧ.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"Выразить(ЗапросыПоТЧ.Всего * &Курс / &Кратность КАК Число(15,2))");
			
			Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
			Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"ЗапросыПоТЧ.Цена");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"ЗапросыПоТЧ.Сумма");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"ЗапросыПоТЧ.СуммаНДС");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"ЗапросыПоТЧ.Всего");
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФильтраУслуг", 
				?(ИмяМакета = "ТОРГ12", "НЕ ЗапросыПоТЧ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) 
				| И НЕ ЗапросыПоТЧ.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)", "ИСТИНА"));
		
		ЗапросЗапасы = Запрос.Выполнить().Выгрузить();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ТОРГ12";

		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_ТОРГ12");
		
		ОбластьМакетаШапка				= Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы	= Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока				= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице	= Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего				= Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал				= Макет.ПолучитьОбласть("Подвал");
		
		// Выводим общие реквизиты шапки
		
		СведенияОПоставщике       = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация,      Шапка.ДатаДокумента, ,);
		СведенияОГрузоотправителе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента, ,);
		СведенияОПокупателе       = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент,       Шапка.ДатаДокумента, ,);
		СведенияОГрузополучателе  = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента, ,);

		ОбластьМакетаШапка.Параметры.Заполнить(Шапка);
		
		Если Шапка.Дата < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакетаШапка.Параметры.НомерДокумента = НомерДокумента;
		ОбластьМакетаШапка.Параметры.ДатаДокумента  = Шапка.ДатаДокумента;
		
		Если Шапка.Организация = Шапка.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет");
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,Факс,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;

		ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика      = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПоставщике);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика     = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе);

		// Выводим всевозможные коды
		
		//*************************
		//Изменения внесены ООО Бизнес-Интеллект // ПечатьТОРГ12() 
		//*************************	
		ОбластьМакетаШапка.Параметры.Основание = Шапка.Основание;
		//*************************
		//Конец изменений
		//*************************	
		
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО     = СведенияОГрузоотправителе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО  = СведенияОПоставщике.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО = СведенияОПокупателе.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ОснованиеНомер   = "";
		ОбластьМакетаШапка.Параметры.ОснованиеДата    = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";

		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);

		// Инициализация счетчика страниц
		НомерСтраницы = 1;

		// Инициализация итогов по странице
		ИтогоМестНаСтранице       = 0;
		ИтогоКоличествоНаСтранице = 0;
		ИтогоСуммаНаСтранице      = 0;
		ИтогоНДСНаСтранице        = 0;
		ИтогоСуммаСНДСНаСтранице  = 0;

		// Инициализация итогов по документу
		ИтогоМест       = 0;
		ИтогоКоличество = 0;
		ИтогоСуммаСНДС  = 0;
		ИтогоСумма      = 0;
		ИтогоНДС        = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ЗапросЗапасы.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Выводим многострочную часть докмента
		Для Каждого ВыборкаСтрок Из ЗапросЗапасы Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.КоличествоМест) Тогда
				ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСтрок.Содержание) Тогда
				ОбластьМакетаСтрока.Параметры.ЗапасНаименование = ВыборкаСтрок.Содержание;
			Иначе
				ОбластьМакетаСтрока.Параметры.ЗапасНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрок.ЗапасНаименование, 
																	ВыборкаСтрок.Характеристика, ВыборкаСтрок.Артикул);
			КонецЕсли;
			
			СуммаСНДС = ВыборкаСтрок.Всего;
			
			КоличествоМест = ВыборкаСтрок.КоличествоМест;
			
			Коэффициент = 1;
			Если ТипЗнч(ВыборкаСтрок.ЕдиницаИзмеренияДокумента) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				
				Коэффициент = ВыборкаСтрок.ЕдиницаИзмеренияДокумента.Коэффициент;
				
			КонецЕсли;
			
			Количество = ВыборкаСтрок.Количество * Коэффициент;
			
			ОбластьМакетаСтрока.Параметры.Количество = Количество;
			
			СуммаНДС		= ВыборкаСтрок.СуммаНДС;
			СуммаБезНДС		= ВыборкаСтрок.Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 0);
			
			ОбластьМакетаСтрока.Параметры.СуммаСНДС		= СуммаСНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС		= СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС		= ВыборкаСтрок.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС	= СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.Цена			= СуммаБезНДС / ?(Количество = 0, 1, Количество);
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			Если НомерСтроки = 1 Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы);	// если первая строка, то должен
			КонецЕсли;														// помещаться заголовок
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;

			Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выводим итоги по странице
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
				ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
				ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Очистим итоги по странице
				ИтогоМестНаСтранице       = 0;
				ИтогоКоличествоНаСтранице = 0;
				ИтогоСуммаНаСтранице      = 0;
				ИтогоНДСНаСтранице        = 0;
				ИтогоСуммаСНДСНаСтранице  = 0;
				
				// Выведем заголовок таблицы
				НомерСтраницы = НомерСтраницы + 1;
				ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
				ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				
			КонецЕсли;
				
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);

			// Увеличим итоги по странице
			ИтогоМестНаСтранице       = ИтогоМестНаСтранице       + КоличествоМест;
			ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
			ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
			ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
			ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

			// Увеличим итоги по документу
			ИтогоМест       = ИтогоМест       + КоличествоМест;
			ИтогоКоличество = ИтогоКоличество + Количество;
			ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
			ИтогоНДС        = ИтогоНДС        + СуммаНДС;
			ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

		КонецЦикла;

		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;

		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСумма;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;

		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);

		// Выводим подвал документа
		
		//*************************
		//Изменения внесены ООО Бизнес-Интеллект  // ПечатьТОРГ12()
		//*************************	
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		Руководители = бизЗаполнениеДокументов.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация,
		ПользовательИБ.УникальныйИдентификатор, Шапка.ДатаДокумента);
		
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя		= Руководители.ФИОРуководителя;
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера   = Руководители.ФИОГлавногоБухгалтера;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика	= Руководители.РуководительДолжность;
		ОбластьМакетаПодвал.Параметры.ФИОКладовщика			= Руководители.ФИОРуководителя;
		ОбластьМакетаПодвал.Параметры.ПредставлениеПодписанта = Руководители.ПредставлениеПодписантаРуководителя;
		//*************************
		//Конец изменений
		//*************************
		
		//Руководители = УправлениеНебольшойФирмойСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Руководители, Шапка.ДатаДокумента);

		//ОбластьМакетаПодвал.Параметры.ФИОРуководителя		= Руководители.ФИОРуководителя;
		//ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера		= Руководители.ФИОГлавногоБухгалтера;
		//ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		//ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика	= Руководители.КладовщикДолжность;
		//ОбластьМакетаПодвал.Параметры.ФИОКладовщика			= Руководители.ФИОКладовщика;
		
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью		= ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
		ОбластьМакетаПодвал.Параметры.СуммаПрописью			= РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.НациональнаяВалюта.Получить());
		
		ПолнаяДатаДокумента = Формат(Шапка.ДатаДокумента, "ДФ=""дд ММММ гггг """"года""""""");
		ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
		ПервыйРазделитель   = СтрНайти(ПолнаяДатаДокумента," ");
		ВторойРазделитель   = СтрНайти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
		
		ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
		ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
		ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);	
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьТОРГ12()

Функция ПечатьЗаказНаряд(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";

	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Номер КАК Номер,
		|	ЗаказПокупателя.Дата КАК ДатаДокумента,
		|	ЗаказПокупателя.Старт,
		|	ЗаказПокупателя.Финиш,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
		|	ЗаказПокупателя.Запасы.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
		|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|		КОНЕЦ КАК Товар,
		|		Номенклатура.Артикул КАК Артикул,
		|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		Всего КАК Всего,
		|		Характеристика,
		|		Содержание КАК Содержание,
		|		ПроцентСкидкиНаценки,
		|		ВЫБОР
		|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
		|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЕстьСкидка,
		|		СуммаАвтоматическойСкидки,
		|		КлючСвязи
		|	),
		|	ЗаказПокупателя.МатериалыЗаказчика.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.МатериалыЗаказчика.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|				ТОГДА ЗаказПокупателя.МатериалыЗаказчика.Номенклатура.Наименование
		|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.МатериалыЗаказчика.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|		КОНЕЦ КАК Товар,
		|		Номенклатура.Артикул КАК Артикул,
		|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Характеристика
		|	),
		|	ЗаказПокупателя.СерийныеНомера.(
		|		СерийныйНомер,
		|		КлючСвязи
		|	)
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.УстановитьПараметр("НаДату", Шапка.ДатаДокумента);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяРаботы.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ЗаказПокупателяРаботы.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК Товар,
		|	ЗаказПокупателяРаботы.Номенклатура.Артикул КАК Артикул,
		|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяРаботы.Количество КАК Количество,
		|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Кратность * ЗаказПокупателяРаботы.Коэффициент КАК КоличествоКратностьКоэффициент,
		|	ЗаказПокупателяРаботы.Цена КАК Цена,
		|	ЗаказПокупателяРаботы.Сумма КАК Сумма,
		|	ЗаказПокупателяРаботы.СуммаНДС КАК СуммаНДС,
		|	ЕСТЬNULL(ЗаказПокупателяРаботы.Всего, 0) КАК Всего,
		|	ЗаказПокупателяРаботы.Характеристика КАК Характеристика,
		|	ЗаказПокупателяРаботы.Содержание КАК Содержание,
		|	ЗаказПокупателяРаботы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяРаботы.ПроцентСкидкиНаценки <> 0
		|				ИЛИ ЗаказПокупателяРаботы.СуммаАвтоматическойСкидки <> 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЕстьСкидка,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество,
		|	ЗаказПокупателяИсполнители.Сотрудник.Физлицо КАК Физлицо,
		|	ЗаказПокупателяРаботы.КлючСвязи КАК КлючСвязи,
		|	ЗаказПокупателяРаботы.СуммаАвтоматическойСкидки
		|ИЗ
		|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Исполнители КАК ЗаказПокупателяИсполнители
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&НаДату, ) КАК ФИОФизЛицСрезПоследних
		|			ПО ЗаказПокупателяИсполнители.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ПО ЗаказПокупателяРаботы.КлючСвязи = ЗаказПокупателяИсполнители.КлючСвязи
		|			И (ЗаказПокупателяИсполнители.Ссылка = &ТекущийДокумент)
		|ГДЕ
		|	ЗаказПокупателяРаботы.Ссылка = &ТекущийДокумент
		|ИТОГИ
		|	МАКСИМУМ(Товар),
		|	МАКСИМУМ(Артикул),
		|	МАКСИМУМ(ЕдиницаИзмерения),
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(КоличествоКратностьКоэффициент),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(СуммаНДС),
		|	МАКСИМУМ(Всего),
		|	МАКСИМУМ(Характеристика),
		|	МАКСИМУМ(Содержание),
		|	МАКСИМУМ(ПроцентСкидкиНаценки),
		|	МАКСИМУМ(ЕстьСкидка)
		|ПО
		|	КлючСвязи";
		
		РезультатЗапросаРаботы = Запрос.Выполнить();
		ВыборкаСтрокРаботы = РезультатЗапросаРаботы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КлючСвязи");
		ВыборкаСтрокТовары = Шапка.Запасы.Выбрать();
		ВыборкаСтрокМатериалыЗаказчика = Шапка.МатериалыЗаказчика.Выбрать();
		ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ПФ_MXL_ЗаказНаряд";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_ЗаказНаряд");
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Заказ-наряд № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Сроки");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтроки		= 0;
		СуммаРаботы		= 0;
		СуммаНДСРаботы	= 0;
		Сумма			= 0;
		СуммаНДС		= 0;
		Всего			= 0;
		Количество		= 0;
		
		// РАБОТЫ
		ЕстьСкидки = РезультатЗапросаРаботы.Выгрузить().Итог("ЕстьСкидка") <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкойРаботы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкойРаботы");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыРаботы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботы");
			
		КонецЕсли;
		
		Пока ВыборкаСтрокРаботы.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);
			
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			Если ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание) Тогда
				ОбластьМакета.Параметры.Товар = ВыборкаСтрокРаботы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Товар = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокРаботы.Товар, 
																	ВыборкаСтрокРаботы.Характеристика, ВыборкаСтрокРаботы.Артикул);
			КонецЕсли;
																
			Если ЕстьСкидки Тогда
				Если ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 100 Тогда
					Скидка = ВыборкаСтрокРаботы.Цена * ВыборкаСтрокРаботы.КоличествоКратностьКоэффициент;
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
				ИначеЕсли ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокРаботы.СуммаАвтоматическойСкидки = 0 Тогда
					ОбластьМакета.Параметры.Скидка         = 0;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокРаботы.Сумма;
				Иначе
					Скидка = ВыборкаСтрокРаботы.КоличествоКратностьКоэффициент * ВыборкаСтрокРаботы.Цена - ВыборкаСтрокРаботы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка         = Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокРаботы.Сумма + Скидка;
				КонецЕсли;
			КонецЕсли;
			
			Выборка = ВыборкаСтрокРаботы.Выбрать();
			СтрокаИсполнители = "";
			Пока Выборка.Следующий() Цикл
				ПредставлениеСотрудник = УправлениеНебольшойФирмойСервер.ПолучитьФамилиюИмяОтчество(Выборка.Фамилия, Выборка.Имя, Выборка.Отчество);
				СтрокаИсполнители = СтрокаИсполнители + ?(СтрокаИсполнители = "", "", ", ") 
									+ ?(ЗначениеЗаполнено(ПредставлениеСотрудник), ПредставлениеСотрудник, Выборка.Физлицо);
				ОбластьМакета.Параметры.Исполнители = СтрокаИсполнители;
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма			= Сумма			+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДС		= СуммаНДС		+ ВыборкаСтрокРаботы.СуммаНДС;
			Всего			= Всего			+ ВыборкаСтрокРаботы.Всего;
			СуммаРаботы		= СуммаРаботы	+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДСРаботы	= СуммаНДСРаботы+ ВыборкаСтрокРаботы.СуммаНДС;
			Количество		= Количество	+ 1; 
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРаботы");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаРаботы);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДСРаботы");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		Иначе
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДСРаботы);
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ТОВАРЫ
		Если Шапка.Запасы.Выгрузить().Количество() > 0 Тогда
		
			ЕстьСкидки = Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") <> 0;
			
			Если ЕстьСкидки Тогда
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкойТовары");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкойТовары");
				
			Иначе
				
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыТовары");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТовары");
				
			КонецЕсли;
			
			СуммаТовары		= 0;
			СуммаНДСТовары	= 0;
			
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
				
				Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Содержание) Тогда
					ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Содержание;
				Иначе
					СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокТовары.КлючСвязи);
					ОбластьМакета.Параметры.Товар = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокТовары.Товар, 
						ВыборкаСтрокТовары.Характеристика, ВыборкаСтрокТовары.Артикул, СтрокаСерийныеНомера);
				КонецЕсли;
				
				Если ЕстьСкидки Тогда
					Если ВыборкаСтрокТовары.ПроцентСкидкиНаценки = 100 Тогда
						Скидка = ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество;
						ОбластьМакета.Параметры.Скидка         = Скидка;
						ОбластьМакета.Параметры.СуммаБезСкидки = Скидка;
					ИначеЕсли ВыборкаСтрокТовары.ПроцентСкидкиНаценки = 0 И ВыборкаСтрокТовары.СуммаАвтоматическойСкидки = 0 Тогда
						ОбластьМакета.Параметры.Скидка         = 0;
						ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма;
					Иначе
						Скидка = ВыборкаСтрокТовары.Количество * ВыборкаСтрокТовары.Цена - ВыборкаСтрокТовары.Сумма; // АвтоматическиеСкидки
						ОбластьМакета.Параметры.Скидка         = Скидка;
						ОбластьМакета.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				СуммаТовары		= СуммаТовары	+ ВыборкаСтрокТовары.Сумма;
				СуммаНДСТовары	= СуммаНДСТовары+ ВыборкаСтрокТовары.СуммаНДС;
				Сумма			= Сумма			+ ВыборкаСтрокТовары.Сумма;
				СуммаНДС		= СуммаНДС		+ ВыборкаСтрокТовары.СуммаНДС;
				Всего 			= Всего			+ ВыборкаСтрокТовары.Всего;
				Количество		= Количество	+ 1;
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТовары");
			ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаТовары);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДСТовары");
			Если СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДС = "-";
			Иначе
				ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
				ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДСТовары);
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли; 
		
		// МАТЕРИАЛЫ ЗАКАЗЧИКА
		Если Шапка.МатериалыЗаказчика.Выгрузить().Количество() > 0 Тогда
		
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалыЗаказчика");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаМатериалыЗаказчика");
			
			Пока ВыборкаСтрокМатериалыЗаказчика.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокМатериалыЗаказчика);
				
				ОбластьМакета.Параметры.Товар = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокМатериалыЗаказчика.Товар, 
																		ВыборкаСтрокМатериалыЗаказчика.Характеристика, ВыборкаСтрокМатериалыЗаказчика.Артикул);
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалыЗаказчика");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли; 
		
		// ПОДВАЛ
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатнаяФорма()

Функция ПечатьБланкТоварногоНаполнения(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";

	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Дата КАК ДатаДокумента,
		|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК ПредставлениеСклада,
		|	ЗаказПокупателя.Номер,
		|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
		|	ЗаказПокупателя.Запасы.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура.Склад КАК Склад,
		|		Номенклатура.Ячейка КАК Ячейка,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
		|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
		|			ИНАЧЕ ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное
		|		КОНЕЦ КАК Запас,
		|		Номенклатура.Артикул КАК Артикул,
		|		Номенклатура.Код КАК Код,
		|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Характеристика,
		|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|		КлючСвязи
		|	),
		|	ЗаказПокупателя.Материалы.(
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура.Склад КАК Склад,
		|		Номенклатура.Ячейка КАК Ячейка,
		|		ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Материалы.Номенклатура.НаименованиеПолное КАК СТРОКА(100))) = """"
		|				ТОГДА ЗаказПокупателя.Материалы.Номенклатура.Наименование
		|			ИНАЧЕ ЗаказПокупателя.Материалы.Номенклатура.НаименованиеПолное
		|		КОНЕЦ КАК Материал,
		|		Номенклатура.Артикул КАК Артикул,
		|		Номенклатура.Код КАК Код,
		|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|		Количество КАК Количество,
		|		Характеристика,
		|		Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
		|	),
		|	ЗаказПокупателя.СерийныеНомера.(
		|		СерийныйНомер,
		|		КлючСвязи
		|	)
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
			
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
        ВыборкаСтрокМатериалы = Шапка.Материалы.Выбрать();
		ВыборкаСтрокСерийныеНомера = Шапка.СерийныеНомера.Выбрать();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_БланкТоварногоНаполнения";
									  
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_БланкТоварногоНаполнения");
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Заказ - наряд № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Склад");
		ОбластьМакета.Параметры.ПредставлениеСклада = Шапка.ПредставлениеСклада;
		ТабличныйДокумент.Вывести(ОбластьМакета);
						
		ОбластьМакета = Макет.ПолучитьОбласть("ВремяПечати");
		ОбластьМакета.Параметры.ВремяПечати = "Дата и время печати: "
												 + ТекущаяДата()
												+ ". Пользователь: "
												+ Пользователи.ТекущийПользователь();
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);			
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл

			Если НЕ ВыборкаСтрокЗапасы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			
			СтрокаСерийныеНомера = РаботаССерийнымиНомерами.СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, ВыборкаСтрокЗапасы.КлючСвязи);
			ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
					ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул, СтрокаСерийныеНомера);
																
			ТабличныйДокумент.Вывести(ОбластьМакета);
							
		КонецЦикла;

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыМатериалы");
		ТабличныйДокумент.Вывести(ОбластьМакета);			
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаМатериалы");
		
		Пока ВыборкаСтрокМатериалы.Следующий() Цикл

			Если НЕ ВыборкаСтрокМатериалы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокМатериалы);
			ОбластьМакета.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокМатериалы.Материал, 
																	ВыборкаСтрокМатериалы.Характеристика, ВыборкаСтрокМатериалы.Артикул);
						
			ТабличныйДокумент.Вывести(ОбластьМакета);
							
		КонецЦикла;

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоМатериалы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатнаяФорма()

Функция ПечатьПриложениеКДоговору(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК Номер,
	|	ЗаказПокупателя.Дата КАК ДатаДокумента,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.Ответственный,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Работы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Работы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Работы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Работы.Количество * ЗаказПокупателя.Работы.Коэффициент * ЗаказПокупателя.Работы.Кратность КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		Характеристика,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Работы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Работы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		Содержание,
	|		Ссылка.Старт КАК ДатаОтгрузки,
	|		СуммаАвтоматическойСкидки
	|	),
	|	ЗаказПокупателя.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА ЗаказПокупателя.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателя.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Всего КАК Всего,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|				ТОГДА ЗаказПокупателя.Запасы.Ссылка.Старт
	|			ИНАЧЕ ЗаказПокупателя.Запасы.ДатаОтгрузки
	|		КОНЕЦ КАК ДатаОтгрузки,
	|		Характеристика,
	|		Содержание,
	|		ПроцентСкидкиНаценки,
	|		ВЫБОР
	|			КОГДА ЗаказПокупателя.Запасы.ПроцентСкидкиНаценки <> 0
	|					ИЛИ ЗаказПокупателя.Запасы.СуммаАвтоматическойСкидки <> 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕстьСкидка,
	|		СуммаАвтоматическойСкидки
	|	),
	|	ДоговорыКонтрагентов.Ссылка КАК СсылкаДоговора,
	|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ЗаказПокупателя.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЗаказПокупателя.Запасы.НомерСтроки,
	|	ЗаказПокупателя.Работы.НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_МакетПриложениеКДоговору";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_ПриложениеКДоговору");
		
		СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "к договору № "
												+ Шапка.НомерДоговора
												+ " от "
												+ Формат(Шапка.ДатаДоговора, "ДЛФ=DD");
		ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,РегистрационныйНомер,ЮридическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		ВыборкаСтрокРаботы = Шапка.Работы.Выбрать();
		
		ЕстьСкидки = (Шапка.Запасы.Выгрузить().Итог("ЕстьСкидка") + Шапка.Работы.Выгрузить().Итог("ЕстьСкидка")) <> 0;
		
		Если ЕстьСкидки Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
			
		Иначе
			
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			
		КонецЕсли;
		
		Сумма		= 0;
		СуммаНДС	= 0;
		Всего		= 0;
		Количество	= 0;
		НомерСтроки = 0;
		
		Пока ВыборкаСтрокРаботы.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокРаботы);
			
			ОбластьМакета.Параметры.Запас = ?(ЗначениеЗаполнено(ВыборкаСтрокРаботы.Содержание), ВыборкаСтрокРаботы.Содержание,
				УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокРаботы.Запас, ВыборкаСтрокРаботы.Характеристика, ВыборкаСтрокРаботы.Артикул));
				
			Если ЕстьСкидки Тогда
				
				Если ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 100 Тогда
					
					Скидка									= ВыборкаСтрокРаботы.Цена * ВыборкаСтрокРаботы.Количество;
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= Скидка;
					
				ИначеЕсли ВыборкаСтрокРаботы.ПроцентСкидкиНаценки = 0 
					И ВыборкаСтрокРаботы.СуммаАвтоматическойСкидки = 0 Тогда
					
					ОбластьМакета.Параметры.Скидка			= 0;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокРаботы.Сумма;
					
				Иначе
					
					Скидка									= ВыборкаСтрокРаботы.Количество * ВыборкаСтрокРаботы.Цена - ВыборкаСтрокРаботы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокРаботы.Сумма + Скидка;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокРаботы.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокРаботы.СуммаНДС;
			Всего		= Всего		+ ВыборкаСтрокРаботы.Всего;
			Количество	= Количество+ 1;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			
			ОбластьМакета.Параметры.Запас = ?(ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание), ВыборкаСтрокЗапасы.Содержание, 
				УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул));
			
			Если ЕстьСкидки Тогда
				
				Если ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 100 Тогда
					
					Скидка									= ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= Скидка;
					
				ИначеЕсли ВыборкаСтрокЗапасы.ПроцентСкидкиНаценки = 0 
					И ВыборкаСтрокЗапасы.СуммаАвтоматическойСкидки = 0 Тогда
					
					ОбластьМакета.Параметры.Скидка			= 0;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокЗапасы.Сумма;
					
				Иначе
					
					Скидка 									= ВыборкаСтрокЗапасы.Количество * ВыборкаСтрокЗапасы.Цена - ВыборкаСтрокЗапасы.Сумма; // АвтоматическиеСкидки
					ОбластьМакета.Параметры.Скидка			= Скидка;
					ОбластьМакета.Параметры.СуммаБезСкидки	= ВыборкаСтрокЗапасы.Сумма + Скидка;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма		= Сумма		+ ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС	= СуммаНДС	+ ВыборкаСтрокЗапасы.СуммаНДС;
			Всего		= Всего		+ ВыборкаСтрокЗапасы.Всего;
			Количество	= Количество+ 1;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		Иначе
			ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
			ОбластьМакета.Параметры.ВсегоНДС = УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаНДС);
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Всего;
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований "
												+ Строка(Количество)
												+ ", на сумму "
												+ УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	

КонецФункции // ПечатнаяФорма()

Функция ПечатнаяФормаКарточкиЗаказов(Заказы, РаскрашиватьСостояния = Ложь, РаскрашиватьОплату = Ложь) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_КарточкиЗаказов";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КарточкиЗаказов";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если РаскрашиватьОплату Тогда
		Цвета = УправлениеНебольшойФирмойКлиентСервер.ЦветаСерийДиаграмм();
		ЦветБезОплаты = Цвета[0];
		ЦветЧастичнаяОплата = Цвета[2];
		ЦветПолнаяОплата = Цвета[4];
	КонецЕсли;
	
	СтруктураОбластей = Новый Структура;
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_КарточкаЗаказа");
	
	СтруктураОбластей.Вставить("Заголовок",				Макет.ПолучитьОбласть("Заголовок"));
	СтруктураОбластей.Вставить("Шапка",					Макет.ПолучитьОбласть("Шапка"));
	СтруктураОбластей.Вставить("Комментарий",			Макет.ПолучитьОбласть("Комментарий"));
	СтруктураОбластей.Вставить("Отступ",				Макет.ПолучитьОбласть("Отступ"));
	СтруктураОбластей.Вставить("ОтступСПодчеркиванием",	Макет.ПолучитьОбласть("ОтступСПодчеркиванием"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Заказ
		|ПОМЕСТИТЬ втПервыйЗаказ
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателяПредыдущие
		|		ПО ЗаказПокупателя.Контрагент = ЗаказПокупателяПредыдущие.Контрагент
		|			И ЗаказПокупателя.МоментВремени > ЗаказПокупателяПредыдущие.МоментВремени
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В(&Заказы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ЗаказПокупателяПредыдущие.Ссылка) = 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Заказ,
		|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа,
		|	ЗаказПокупателя.СуммаДокумента КАК СуммаЗаказа,
		|	ЕСТЬNULL(ФактОплатыЗаказов.СуммаАванса, 0) + ЕСТЬNULL(ФактОплатыЗаказов.СуммаОплаты, 0) КАК СуммаОплаты,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.СуммаДокумента = 0
		|			ТОГДА 0
		|		ИНАЧЕ (ЕСТЬNULL(ФактОплатыЗаказов.СуммаАванса, 0) + ЕСТЬNULL(ФактОплатыЗаказов.СуммаОплаты, 0)) * 100 / ЗаказПокупателя.СуммаДокумента
		|	КОНЕЦ КАК ПроцентОплаты,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА втПервыйЗаказ.Заказ ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПервыйЗаказ,
		|	ЗаказПокупателя.Ответственный КАК Ответственный,
		|	ЗаказПокупателя.Комментарий КАК Комментарий,
		|	ЗаказПокупателя.СостояниеЗаказа.Цвет КАК ЦветСостояния,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Ссылка) КАК ЗаказПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.СостояниеЗаказа) КАК СостояниеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент) КАК КонтрагентПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Ответственный) КАК ОтветственныйПредставление
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФактОплатыЗаказов КАК ФактОплатыЗаказов
		|		ПО (ЗаказПокупателя.Ссылка = (ВЫРАЗИТЬ(ФактОплатыЗаказов.СчетНаОплату КАК Документ.ЗаказПокупателя)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПервыйЗаказ КАК втПервыйЗаказ
		|		ПО ЗаказПокупателя.Ссылка = втПервыйЗаказ.Заказ
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В(&Заказы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПокупателя.Дата";
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
		
		СтруктураОбластей.Заголовок.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(СтруктураОбластей.Заголовок);
		
		СтруктураОбластей.Шапка.Параметры.Заполнить(Выборка);
		СтруктураОбластей.Шапка.Параметры.СуммаОплаты = Формат(Выборка.СуммаОплаты, "ЧДЦ=2; ЧН=0,00");
		СтруктураОбластей.Шапка.Параметры.ПроцентОплаты = Формат(Выборка.ПроцентОплаты, "ЧДЦ=; ЧН=0");
		
		Если РаскрашиватьСостояния Тогда
			ОбластьСостояние = СтруктураОбластей.Шапка.Область("ОбластьСостояние");
			ЦветСостояния = Выборка.ЦветСостояния.Получить();
			Если ЦветСостояния = Неопределено Тогда
				ОбластьСостояние.ЦветТекста = Новый Цвет;
			Иначе
				ОбластьСостояние.ЦветТекста = ЦветСостояния;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьОплата = СтруктураОбластей.Шапка.Область("ОбластьОплата");
		Если РаскрашиватьОплату Тогда
			Если Выборка.ПроцентОплаты = 100 Тогда
				ОбластьОплата.ЦветТекста = ЦветПолнаяОплата;
			ИначеЕсли Выборка.ПроцентОплаты > 0 И Выборка.ПроцентОплаты < 100 Тогда
				ОбластьОплата.ЦветТекста = ЦветЧастичнаяОплата;
			ИначеЕсли Выборка.ПроцентОплаты = 0 Тогда
				ОбластьОплата.ЦветТекста = ЦветБезОплаты;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.Шапка);
		
		Если НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
			ТабличныйДокумент.Вывести(СтруктураОбластей.Отступ);
			СтруктураОбластей.Комментарий.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(СтруктураОбластей.Комментарий);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтруктураОбластей.ОтступСПодчеркиванием);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьКалькуляция(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";
	
	ОтображатьСебестоимость = ХранилищеСистемныхНастроек.Загрузить("ЗаказПокупателя", "ОтображатьСебестоимость");
	Если ТипЗнч(ОтображатьСебестоимость)<>Тип("Булево") Тогда
		ОтображатьСебестоимость = РольДоступна("ПолныеПрава");
	КонецЕсли; 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка,
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата,
	|	ЗаказПокупателя.Организация,
	|	ЗаказПокупателя.Контрагент,
	|	ЗаказПокупателя.КалькуляцияРассчитана,
	|	ЗаказПокупателя.СуммаДокумента
	|ПОМЕСТИТЬ Заказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка,
	|	ЗаказПокупателяЗапасы.НомерСтроки,
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	ЗаказПокупателяЗапасы.Спецификация,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Количество,
	|	ЗаказПокупателяЗапасы.Всего,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки + ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки = 100
	|				ИЛИ ЗаказПокупателяЗапасы.Всего = 0
	|			ТОГДА ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Цена * ВЫБОР
	|					КОГДА ЗаказПокупателяЗапасы.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС)
	|							И НЕ ЗаказПокупателяЗапасы.Ссылка.СуммаВключаетНДС
	|						ТОГДА (100 + ЗаказПокупателяЗапасы.СтавкаНДС.Ставка) / 100
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Всего / (1 - (ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки + ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки) / 100) - ЗаказПокупателяЗапасы.Всего
	|	КОНЕЦ КАК СуммаСкидки,
	|	ЗаказПокупателяЗапасы.КлючСвязи
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяКалькуляция.Ссылка,
	|	ЗаказПокупателяКалькуляция.Номенклатура,
	|	ЗаказПокупателяКалькуляция.Характеристика,
	|	ЗаказПокупателяКалькуляция.Спецификация,
	|	ЗаказПокупателяКалькуляция.Количество,
	|	ЗаказПокупателяКалькуляция.ЕдиницаИзмерения,
	|	ЗаказПокупателяКалькуляция.Себестоимость,
	|	ЗаказПокупателяКалькуляция.КлючСвязи,
	|	ЗаказПокупателяКалькуляция.Источник
	|ПОМЕСТИТЬ Калькуляции
	|ИЗ
	|	Документ.ЗаказПокупателя.Калькуляция КАК ЗаказПокупателяКалькуляция
	|ГДЕ
	|	ЗаказПокупателяКалькуляция.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Ссылка КАК Ссылка,
	|	Заказы.Номер КАК Номер,
	|	Заказы.Дата КАК ДатаДокумента,
	|	Заказы.Организация КАК Организация,
	|	Заказы.Контрагент КАК Контрагент,
	|	Заказы.Организация.Префикс КАК Префикс,
	|	Заказы.КалькуляцияРассчитана КАК КалькуляцияРассчитана,
	|	Заказы.СуммаДокумента КАК СуммаДокумента,
	|	Калькуляции.КлючСвязи КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Калькуляции.Номенклатура) = ТИП(ПланСчетов.Управленческий)
	|			ТОГДА Калькуляции.Номенклатура
	|		КОГДА (ВЫРАЗИТЬ(Калькуляции.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА Калькуляции.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(Калькуляции.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК Номенклатура,
	|	Калькуляции.Характеристика,
	|	Калькуляции.Спецификация,
	|	Калькуляции.Количество,
	|	Калькуляции.ЕдиницаИзмерения,
	|	ЕСТЬNULL(Калькуляции.Номенклатура.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК НоменклатураИзделие,
	|	ЕСТЬNULL(Запасы.Характеристика, НЕОПРЕДЕЛЕНО) КАК ХарактеристикаИзделие,
	|	ЕСТЬNULL(Запасы.Спецификация, НЕОПРЕДЕЛЕНО) КАК СпецификацияИзделие,
	|	ЕСТЬNULL(Запасы.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмеренияИзделие,
	|	ЕСТЬNULL(Запасы.Количество, НЕОПРЕДЕЛЕНО) КАК КоличествоИзделие,
	|	ЕСТЬNULL(Запасы.Номенклатура.Артикул, """") КАК АртикулИзделие,
	|	ЕСТЬNULL(Запасы.НомерСтроки, 999999) КАК НомерСтрокиЗапасов,
	|	ВЫБОР
	|		КОГДА Запасы.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительныйМатериал,
	|	Калькуляции.Себестоимость КАК Себестоимость,
	|	Запасы.Всего КАК Сумма,
	|	Запасы.СуммаСкидки КАК Скидка
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Калькуляции КАК Калькуляции
	|			ЛЕВОЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|			ПО Калькуляции.Ссылка = Запасы.Ссылка
	|				И Калькуляции.КлючСвязи = Запасы.КлючСвязи
	|				И (Калькуляции.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Запас))
	|		ПО Заказы.Ссылка = Калькуляции.Ссылка
	|ГДЕ
	|	Заказы.КалькуляцияРассчитана
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заказы.Ссылка,
	|	Заказы.Номер,
	|	Заказы.Дата,
	|	Заказы.Организация,
	|	Заказы.Контрагент,
	|	Заказы.Организация.Префикс,
	|	Заказы.КалькуляцияРассчитана,
	|	Заказы.СуммаДокумента,
	|	Запасы.КлючСвязи,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Запасы.Номенклатура,
	|	Запасы.Характеристика,
	|	Запасы.Спецификация,
	|	Запасы.ЕдиницаИзмерения,
	|	Запасы.Количество,
	|	Запасы.Номенклатура.Артикул,
	|	Запасы.НомерСтроки,
	|	ЛОЖЬ,
	|	0,
	|	Запасы.Всего,
	|	Запасы.СуммаСкидки
	|ИЗ
	|	Заказы КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Запасы КАК Запасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Калькуляции КАК Калькуляции
	|			ПО Запасы.Ссылка = Калькуляции.Ссылка
	|				И Запасы.КлючСвязи = Калькуляции.КлючСвязи
	|				И (Калькуляции.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиСтрокКалькуляции.Запас))
	|		ПО Заказы.Ссылка = Запасы.Ссылка
	|ГДЕ
	|	(Калькуляции.Ссылка ЕСТЬ NULL 
	|			ИЛИ НЕ Заказы.КалькуляцияРассчитана)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтрокиЗапасов
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(ДатаДокумента),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Префикс),
	|	МАКСИМУМ(КалькуляцияРассчитана),
	|	МАКСИМУМ(СуммаДокумента),
	|	МАКСИМУМ(НоменклатураИзделие),
	|	МАКСИМУМ(ХарактеристикаИзделие),
	|	МАКСИМУМ(СпецификацияИзделие),
	|	МАКСИМУМ(ЕдиницаИзмеренияИзделие),
	|	МАКСИМУМ(КоличествоИзделие),
	|	МАКСИМУМ(АртикулИзделие),
	|	СУММА(Себестоимость),
	|	МАКСИМУМ(Сумма),
	|	МАКСИМУМ(Скидка)
	|ПО
	|	Ссылка,
	|	НомерСтрокиЗапасов";
	
	Шапка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		Если НЕ Шапка.КалькуляцияРассчитана Тогда
			Сообщить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Калькуляция не рассчитана для заказа %1 от %2'"),
			НомерДокумента,
			Формат(Шапка.ДатаДокумента, "ДЛФ=D")));
			Продолжить;
		КонецЕсли; 
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_Калькуляция";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_Калькуляция");
		
		СведенияОбКонтрагенте = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента, ,);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "Калькуляция заказа покупателя № "
												+ НомерДокумента
												+ " от "
												+ Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ФизическийАдрес,Телефоны,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		ОбластьСостава = Макет.ПолучитьОбласть("Состав");
		
		НомерСтроки = 0;
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		
		ВыборкаИзделий = Шапка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИзделий.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаИзделий.НоменклатураИзделие) Тогда
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьСтроки.Параметры.Заполнить(ВыборкаИзделий);
				ОбластьСтроки.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаИзделий.НоменклатураИзделие, 
				ВыборкаИзделий.ХарактеристикаИзделие, 
				ВыборкаИзделий.АртикулИзделие);
				ОбластьСтроки.Параметры.НомерСтроки = Формат(НомерСтроки, "ЧГ=0");
				ТабличныйДокумент.Вывести(ОбластьСтроки, 0);
				
			КонецЕсли; 
			
			ВыборкаСостава = ВыборкаИзделий.Выбрать();
			Пока ВыборкаСостава.Следующий() Цикл
				
				Если НЕ ЗначениеЗаполнено(ВыборкаСостава.Номенклатура) ИЛИ ВыборкаСостава.Номенклатура=ВыборкаСостава.НоменклатураИзделие Тогда
					Продолжить;
				КонецЕсли; 
				
				Если ВыборкаСостава.ДополнительныйМатериал Тогда
					
					НомерСтроки = НомерСтроки + 1;
					
					ОбластьСтроки.Параметры.Заполнить(ВыборкаСостава);
					ОбластьСтроки.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
					ВыборкаСостава.Номенклатура, 
					ВыборкаСостава.Характеристика, 
					ВыборкаСостава.Артикул);
					ОбластьСтроки.Параметры.КоличествоИзделие = ВыборкаСостава.Количество;
					ОбластьСтроки.Параметры.ЕдиницаИзмеренияИзделие = ВыборкаСостава.ЕдиницаИзмерения;
					ОбластьСтроки.Параметры.НомерСтроки = Формат(НомерСтроки, "ЧГ=0");
					ТабличныйДокумент.Вывести(ОбластьСтроки, 0);
					Продолжить;
					
				КонецЕсли;
				
				ОбластьСостава.Параметры.Заполнить(ВыборкаСостава);
				
				ОбластьСостава.Параметры.Запас = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаСостава.Номенклатура, 
				ВыборкаСостава.Характеристика, 
				ВыборкаСостава.Артикул);
				
				ТабличныйДокумент.Вывести(ОбластьСостава, 1);
			
			КонецЦикла; 
			
		КонецЦикла;
		
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Если НЕ ОтображатьСебестоимость Тогда
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(, 23, , 25), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	

КонецФункции // ПечатнаяФорма()

#Область СводныйОтчет

Функция ПечатьСводныйОтчет(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_СводныйОтчет");
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Для каждого ЗаказПокупателя Из МассивОбъектов Цикл
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		Параметры = Новый Структура;
		Параметры.Вставить("ЗаказПокупателя", ЗаказПокупателя);
		ВывестиСекциюЗаголовок(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюЗапасы(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюОтгрузка(Макет, ТабличныйДокумент, Параметры);
		ВывестиГрафикПлатежей(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюОплаты(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюДоходыРасходы(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюСобытия(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюОбсуждение(Макет, ТабличныйДокумент, Параметры);
	КонецЦикла; 
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСводныйОтчетЗаказНаряд(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказПокупателя";
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказПокупателя.ПФ_MXL_СводныйОтчет");
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Для каждого ЗаказПокупателя Из МассивОбъектов Цикл
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		Параметры = Новый Структура;
		Параметры.Вставить("ЗаказПокупателя", ЗаказПокупателя);
		Параметры.Вставить("ЭтоЗаказНаряд", Истина);
		ВывестиСекциюЗаголовокЗаказНаряд(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюРаботы(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюЗапасы(Макет, ТабличныйДокумент, Параметры);
		ВывестиГрафикПлатежей(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюОплаты(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюДоходыРасходы(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюСобытия(Макет, ТабличныйДокумент, Параметры);
		ВывестиСекциюОбсуждение(Макет, ТабличныйДокумент, Параметры);
	КонецЦикла; 
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиСекциюЗаголовок(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата,
	|	ЗаказПокупателя.СуммаДокумента,
	|	ЗаказПокупателя.ВалютаДокумента.СимвольноеПредставление КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.ВалютаДокумента) КАК ВалютаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент) КАК Контрагент,
	|	ЗаказПокупателя.Организация,
	|	ЗаказПокупателя.Ответственный,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.ПоложениеДатыОтгрузки = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|			ТОГДА ЗаказПокупателя.ДатаОтгрузки
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПлановаяДатаОтгрузки,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент.КонтактноеЛицо) КАК КонтактноеЛицо,
	|	ЗаказПокупателя.Контрагент.КонтактноеЛицо.Должность КАК Должность,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаРезерв КАК Склад,
	|	ЕСТЬNULL(Скидки.СуммаРучнойСкидки, 0) КАК СуммаРучнойСкидки,
	|	ЕСТЬNULL(Скидки.СуммаАвтоматическойСкидки, 0) КАК СуммаАвтоматическойСкидки,
	|	ЕСТЬNULL(Скидки.СуммаРучнойСкидки, 0) + ЕСТЬNULL(Скидки.СуммаАвтоматическойСкидки, 0) КАК СуммаСкидки,
	|	ЗаказПокупателя.Контрагент.КонтактнаяИнформация.(
	|		Тип КАК КИКонтрагентаТип,
	|		Вид КАК КИКонтрагентаВид,
	|		Представление КАК КИКонтрагентаПредставление
	|	) КАК КИКонтрагента,
	|	КонтактныеЛица.КонтактнаяИнформация.(
	|		Тип КАК КИКонтактногоЛицаТип,
	|		Вид КАК КИКонтактногоЛицаВид,
	|		Представление КАК КИКонтактногоЛицаПредставление
	|	) КАК КИКонтактногоЛица,
	|	ЗаказПокупателя.СостояниеЗаказа,
	|	ЕСТЬNULL(Оплаты.ДокументОплаты, НЕОПРЕДЕЛЕНО) КАК ДокументОплаты,
	|	ЕСТЬNULL(Оплаты.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(Оплаты.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(Оплаты.КоличествоДокументов, 0) КАК КоличествоДокументовОплаты,
	|	ЕСТЬNULL(Отгрузки.ДокументОтгрузки, НЕОПРЕДЕЛЕНО) КАК ДокументОтгрузки,
	|	ЕСТЬNULL(Отгрузки.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтгрузки,
	|	ЕСТЬNULL(Отгрузки.КоличествоДокументов, 0) КАК КоличествоДокументовОтгрузки,
	|	ЕСТЬNULL(Отгрузки.СуммаОтгрузки / ЗаказПокупателя.Курс * ЗаказПокупателя.Кратность, 0) КАК СуммаОтгрузки,
	|	ЗаказПокупателя.Комментарий,
	|	ЗаказПокупателя.ПометкаУдаления,
	|	ЗаказПокупателя.Проведен
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО ЗаказПокупателя.Контрагент.КонтактноеЛицо = КонтактныеЛица.Ссылка,
	|	(ВЫБРАТЬ
	|		СУММА(ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки / 100) КАК СуммаРучнойСкидки,
	|		СУММА(ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки / 100) КАК СуммаАвтоматическойСкидки
	|	ИЗ
	|		Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|	ГДЕ
	|		ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя) КАК Скидки,
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Регистратор) КАК ДокументОплаты,
	|		МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Период) КАК ДатаОплаты,
	|		СУММА(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) КАК СуммаОплаты,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОплатаСчетовИЗаказовОбороты.Регистратор) КАК КоличествоДокументов
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , Регистратор, СчетНаОплату = &ЗаказПокупателя) КАК ОплатаСчетовИЗаказовОбороты
	|	ГДЕ
	|		ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот <> 0) КАК Оплаты,
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПродажиОбороты.Регистратор) КАК ДокументОтгрузки,
	|		МАКСИМУМ(ПродажиОбороты.Период) КАК ДатаОтгрузки,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПродажиОбороты.Регистратор) КАК КоличествоДокументов,
	|		СУММА(ПродажиОбороты.СуммаОборот * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность, 0)) КАК СуммаОтгрузки
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(, , Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты,
	|		РегистрСведений.КурсыВалют.СрезПоследних(
	|				,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						ВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК ВалютаУчета)) КАК КурсыВалютСрезПоследних) КАК Отгрузки
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Дата = Формат(Шапка.Дата, "ДЛФ=D");
	Область.Параметры.ТекущаяДата = Формат(ТекущаяДата(), НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''"));
	Область.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Истина);
	Результат.Вывести(Область);
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("Номер", Шапка.Номер);
	Если Шапка.ПометкаУдаления Тогда
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Помечен на удаление'"));
	ИначеЕсли Шапка.Проведен Тогда
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Проведен'"));
	Иначе
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Не проведен'"));
	КонецЕсли; 
	Показатели.Вставить("Контрагент", Шапка.Контрагент);
	Показатели.Вставить("Валюта", Шапка.Валюта);
	Показатели.Вставить("ВалютаПредставление", Шапка.ВалютаПредставление);
	ВыборкаКИ = Шапка.КИКонтрагента.Выбрать();
	Пока ВыборкаКИ.Следующий() Цикл
		Если ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
			Показатели.Вставить("EmailКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		ИначеЕсли ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			Показатели.Вставить("ТелефонКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		ИначеЕсли ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			Показатели.Вставить("ФактАдресКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		КонецЕсли; 
	КонецЦикла; 
	Показатели.Вставить("СостояниеЗаказа", Шапка.СостояниеЗаказа);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Показатели.Вставить("Организация", Шапка.Организация);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		Показатели.Вставить("Подразделение", Шапка.Подразделение);
	КонецЕсли; 
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		Показатели.Вставить("Склад", Шапка.Склад);
	КонецЕсли; 
	Показатели.Вставить("Ответственный", Шапка.Ответственный);
	Если ЗначениеЗаполнено(Шапка.КонтактноеЛицо) Тогда
		Показатели.Вставить("КонтактноеЛицо", Шапка.КонтактноеЛицо);
		Показатели.Вставить("Должность", Шапка.Должность);
		ВыборкаКИ = Шапка.КИКонтактногоЛица.Выбрать();
		Пока ВыборкаКИ.Следующий() Цикл
			Если ВыборкаКИ.КИКонтактногоЛицаВид=Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
				Показатели.Вставить("EmailКонтактногоЛица", ВыборкаКИ.КИКонтактногоЛицаПредставление);
			ИначеЕсли ВыборкаКИ.КИКонтактногоЛицаВид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
				Показатели.Вставить("ТелефонКонтактногоЛица", ВыборкаКИ.КИКонтактногоЛицаПредставление);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Показатели.Вставить("СуммаДокумента", Шапка.СуммаДокумента);
	Если Шапка.СуммаДокумента>0 Тогда
		Если Шапка.СуммаСкидки<>0 Тогда
			Показатели.Вставить("СуммаСкидки", Шапка.СуммаСкидки);
			Показатели.Вставить("СуммаРучнойСкидки", Шапка.СуммаРучнойСкидки);
			Показатели.Вставить("СуммаАвтоматическойСкидки", Шапка.СуммаАвтоматическойСкидки);
		КонецЕсли;
		Показатели.Вставить("КоличествоДокументовОплаты", Шапка.КоличествоДокументовОплаты);
		Показатели.Вставить("СуммаОплаты", Шапка.СуммаОплаты);
		Показатели.Вставить("ДокументОплаты", Шапка.ДокументОплаты);
		Показатели.Вставить("ДатаОплаты", Шапка.ДатаОплаты);
		Если Шапка.КоличествоДокументовОплаты<=1 Тогда
			Параметры.Вставить("ОплатаОднимДокументом");
		КонецЕсли;
		Показатели.Вставить("КоличествоДокументовОтгрузки", Шапка.КоличествоДокументовОтгрузки);
		Показатели.Вставить("СуммаОтгрузки", Шапка.СуммаОтгрузки);
		Показатели.Вставить("ДокументОтгрузки", Шапка.ДокументОтгрузки);
		Показатели.Вставить("ДатаОтгрузки", Шапка.ДатаОтгрузки);
		Если Шапка.КоличествоДокументовОтгрузки<=1 Тогда
			Параметры.Вставить("ОтгрузкаОднимДокументом");
		КонецЕсли;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Шапка.ПлановаяДатаОтгрузки) Тогда
		Показатели.Вставить("ПлановаяДатаОтгрузки", Шапка.ПлановаяДатаОтгрузки);
		Параметры.Вставить("ДатаОтгрузкиВШапке");
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
	Результат.Вывести(Область);
	
	СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
	СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокЗаказчик");
	СтекПоказателейЛеваяКолонка.Добавить("Контрагент");
	СтекПоказателейЛеваяКолонка.Добавить("EmailКонтрагента");
	СтекПоказателейЛеваяКолонка.Добавить("ТелефонКонтрагента");
	СтекПоказателейЛеваяКолонка.Добавить("ФактАдресКонтрагента");
	Если Шапка.Контрагент<>Шапка.КонтактноеЛицо Тогда
		СтекПоказателейЛеваяКолонка.Добавить("КонтактноеЛицо");
		СтекПоказателейЛеваяКолонка.Добавить("EmailКонтактногоЛица");
		СтекПоказателейЛеваяКолонка.Добавить("ТелефонКонтактногоЛица");
	КонецЕсли; 
	
	СтекПоказателейПраваяКолонка = Новый СписокЗначений;
	СтекПоказателейПраваяКолонка.Добавить("Номер");
	СтекПоказателейПраваяКолонка.Добавить("СуммаДокумента");
	СтекПоказателейПраваяКолонка.Добавить("Валюта");
	Если Шапка.СуммаРучнойСкидки<>0 И Шапка.СуммаАвтоматическойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаСкидки");
	КонецЕсли;
	Если Шапка.СуммаРучнойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Шапка.СуммаАвтоматическойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли; 
	
	Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
		ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
	Результат.Вывести(Область);
	
	СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
	СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокИсполнитель");
	СтекПоказателейЛеваяКолонка.Добавить("Организация");
	СтекПоказателейЛеваяКолонка.Добавить("Подразделение");
	СтекПоказателейЛеваяКолонка.Добавить("Склад");
	СтекПоказателейЛеваяКолонка.Добавить("Ответственный");
	
	СтекПоказателейПраваяКолонка = Новый СписокЗначений;
	СтекПоказателейПраваяКолонка.Добавить("ЗаголовокСостояние");
	СтекПоказателейПраваяКолонка.Добавить("СостояниеДокумента");
	СтекПоказателейПраваяКолонка.Добавить("СостояниеЗаказа");
	Если Шапка.СостояниеЗаказа<>Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		СтекПоказателейПраваяКолонка.Добавить("ПлановаяДатаОтгрузки");
	КонецЕсли; 
	СтекПоказателейПраваяКолонка.Добавить("СуммаОплаты");
	СтекПоказателейПраваяКолонка.Добавить("СуммаОтгрузки");
	
	Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
		ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(Шапка.Комментарий) Тогда
		Область = Макет.ПолучитьОбласть("ОтступОдинарный");
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТекстовыеДанные");
		Область.Параметры.Текст = Шапка.Комментарий;
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть("Отступ");
		Результат.Вывести(Область);
	Иначе
		Область = Макет.ПолучитьОбласть("Отступ");
		Результат.Вывести(Область);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВывестиСекциюЗаголовокЗаказНаряд(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Номер,
	|	ЗаказПокупателя.Дата,
	|	ЗаказПокупателя.СуммаДокумента,
	|	ЗаказПокупателя.Старт,
	|	ЗаказПокупателя.Финиш,
	|	ЗаказПокупателя.ВалютаДокумента.СимвольноеПредставление КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.ВалютаДокумента) КАК ВалютаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент) КАК Контрагент,
	|	ЗаказПокупателя.Организация,
	|	ЗаказПокупателя.Ответственный,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Контрагент.КонтактноеЛицо) КАК КонтактноеЛицо,
	|	ЗаказПокупателя.Контрагент.КонтактноеЛицо.Должность КАК Должность,
	|	ЗаказПокупателя.СтруктурнаяЕдиницаПродажи КАК Подразделение,
	|	ЕСТЬNULL(Скидки.СуммаРучнойСкидки, 0) КАК СуммаРучнойСкидки,
	|	ЕСТЬNULL(Скидки.СуммаАвтоматическойСкидки, 0) КАК СуммаАвтоматическойСкидки,
	|	ЕСТЬNULL(Скидки.СуммаРучнойСкидки, 0) + ЕСТЬNULL(Скидки.СуммаАвтоматическойСкидки, 0) КАК СуммаСкидки,
	|	ЗаказПокупателя.Контрагент.КонтактнаяИнформация.(
	|		Тип КАК КИКонтрагентаТип,
	|		Вид КАК КИКонтрагентаВид,
	|		Представление КАК КИКонтрагентаПредставление
	|	) КАК КИКонтрагента,
	|	КонтактныеЛица.КонтактнаяИнформация.(
	|		Тип КАК КИКонтактногоЛицаТип,
	|		Вид КАК КИКонтактногоЛицаВид,
	|		Представление КАК КИКонтактногоЛицаПредставление
	|	) КАК КИКонтактногоЛица,
	|	ЗаказПокупателя.СостояниеЗаказа,
	|	ЕСТЬNULL(Оплаты.ДокументОплаты, НЕОПРЕДЕЛЕНО) КАК ДокументОплаты,
	|	ЕСТЬNULL(Оплаты.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОплаты,
	|	ЕСТЬNULL(Оплаты.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(Оплаты.КоличествоДокументов, 0) КАК КоличествоДокументовОплаты,
	|	ЗаказПокупателя.Комментарий,
	|	ЗаказПокупателя.ПометкаУдаления,
	|	ЗаказПокупателя.Проведен
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО ЗаказПокупателя.Контрагент.КонтактноеЛицо = КонтактныеЛица.Ссылка,
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапросСкидки.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
	|		СУММА(ВложенныйЗапросСкидки.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаказПокупателяРаботы.Цена * ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.ПроцентСкидкиНаценки / 100 КАК СуммаРучнойСкидки,
	|			ЗаказПокупателяРаботы.Цена * ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.ПроцентАвтоматическойСкидки / 100 КАК СуммаАвтоматическойСкидки
	|		ИЗ
	|			Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|		ГДЕ
	|			ЗаказПокупателяРаботы.Ссылка = &ЗаказПокупателя
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки / 100,
	|			ЗаказПокупателяЗапасы.Цена * ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки / 100
	|		ИЗ
	|			Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ГДЕ
	|			ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя) КАК ВложенныйЗапросСкидки) КАК Скидки,
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Регистратор) КАК ДокументОплаты,
	|		МАКСИМУМ(ОплатаСчетовИЗаказовОбороты.Период) КАК ДатаОплаты,
	|		СУММА(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) КАК СуммаОплаты,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОплатаСчетовИЗаказовОбороты.Регистратор) КАК КоличествоДокументов
	|	ИЗ
	|		РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , Регистратор, СчетНаОплату = &ЗаказПокупателя) КАК ОплатаСчетовИЗаказовОбороты
	|	ГДЕ
	|		ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот <> 0) КАК Оплаты
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ЗаказПокупателя";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Область = Макет.ПолучитьОбласть("ЗаголовокЗаказНаряд");
	Область.Параметры.Дата = Формат(Шапка.Дата, "ДЛФ=D");
	Область.Параметры.ТекущаяДата = Формат(ТекущаяДата(), НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ:мм'''"));
	Область.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Истина);
	Результат.Вывести(Область);
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("Номер", Шапка.Номер);
	Если Шапка.ПометкаУдаления Тогда
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Помечен на удаление'"));
	ИначеЕсли Шапка.Проведен Тогда
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Проведен'"));
	Иначе
		Показатели.Вставить("СостояниеДокумента", НСтр("ru = 'Не проведен'"));
	КонецЕсли; 
	Показатели.Вставить("Контрагент", Шапка.Контрагент);
	Показатели.Вставить("Валюта", Шапка.Валюта);
	Показатели.Вставить("Старт", Шапка.Старт);
	Показатели.Вставить("Финиш", Шапка.Финиш);
	Показатели.Вставить("ВалютаПредставление", Шапка.ВалютаПредставление);
	ВыборкаКИ = Шапка.КИКонтрагента.Выбрать();
	Пока ВыборкаКИ.Следующий() Цикл
		Если ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
			Показатели.Вставить("EmailКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		ИначеЕсли ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			Показатели.Вставить("ТелефонКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		ИначеЕсли ВыборкаКИ.КИКонтрагентаВид=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			Показатели.Вставить("ФактАдресКонтрагента", ВыборкаКИ.КИКонтрагентаПредставление);
		КонецЕсли; 
	КонецЦикла; 
	Показатели.Вставить("СостояниеЗаказа", Шапка.СостояниеЗаказа);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Показатели.Вставить("Организация", Шапка.Организация);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям") Тогда
		Показатели.Вставить("Подразделение", Шапка.Подразделение);
	КонецЕсли; 
	Показатели.Вставить("Ответственный", Шапка.Ответственный);
	Если ЗначениеЗаполнено(Шапка.КонтактноеЛицо) Тогда
		Показатели.Вставить("КонтактноеЛицо", Шапка.КонтактноеЛицо);
		Показатели.Вставить("Должность", Шапка.Должность);
		ВыборкаКИ = Шапка.КИКонтактногоЛица.Выбрать();
		Пока ВыборкаКИ.Следующий() Цикл
			Если ВыборкаКИ.КИКонтактногоЛицаВид=Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
				Показатели.Вставить("EmailКонтактногоЛица", ВыборкаКИ.КИКонтактногоЛицаПредставление);
			ИначеЕсли ВыборкаКИ.КИКонтактногоЛицаВид=Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
				Показатели.Вставить("ТелефонКонтактногоЛица", ВыборкаКИ.КИКонтактногоЛицаПредставление);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Показатели.Вставить("СуммаДокумента", Шапка.СуммаДокумента);
	Если Шапка.СуммаДокумента>0 Тогда
		Если Шапка.СуммаСкидки<>0 Тогда
			Показатели.Вставить("СуммаСкидки", Шапка.СуммаСкидки);
			Показатели.Вставить("СуммаРучнойСкидки", Шапка.СуммаРучнойСкидки);
			Показатели.Вставить("СуммаАвтоматическойСкидки", Шапка.СуммаАвтоматическойСкидки);
		КонецЕсли;
		Показатели.Вставить("КоличествоДокументовОплаты", Шапка.КоличествоДокументовОплаты);
		Показатели.Вставить("СуммаОплаты", Шапка.СуммаОплаты);
		Показатели.Вставить("ДокументОплаты", Шапка.ДокументОплаты);
		Показатели.Вставить("ДатаОплаты", Шапка.ДатаОплаты);
		Если Шапка.КоличествоДокументовОплаты<=1 Тогда
			Параметры.Вставить("ОплатаОднимДокументом");
		КонецЕсли;
	КонецЕсли; 
	
	Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
	Результат.Вывести(Область);
	
	СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
	СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокЗаказчик");
	СтекПоказателейЛеваяКолонка.Добавить("Контрагент");
	СтекПоказателейЛеваяКолонка.Добавить("EmailКонтрагента");
	СтекПоказателейЛеваяКолонка.Добавить("ТелефонКонтрагента");
	СтекПоказателейЛеваяКолонка.Добавить("ФактАдресКонтрагента");
	Если Шапка.Контрагент<>Шапка.КонтактноеЛицо Тогда
		СтекПоказателейЛеваяКолонка.Добавить("КонтактноеЛицо");
		СтекПоказателейЛеваяКолонка.Добавить("EmailКонтактногоЛица");
		СтекПоказателейЛеваяКолонка.Добавить("ТелефонКонтактногоЛица");
	КонецЕсли; 
	
	СтекПоказателейПраваяКолонка = Новый СписокЗначений;
	СтекПоказателейПраваяКолонка.Добавить("Номер");
	СтекПоказателейПраваяКолонка.Добавить("СуммаДокумента");
	СтекПоказателейПраваяКолонка.Добавить("Валюта");
	Если Шапка.СуммаРучнойСкидки<>0 И Шапка.СуммаАвтоматическойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаСкидки");
	КонецЕсли;
	Если Шапка.СуммаРучнойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Шапка.СуммаАвтоматическойСкидки<>0 Тогда
		СтекПоказателейПраваяКолонка.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли; 
	
	Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
		ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("ОтступЗаголовка");
	Результат.Вывести(Область);
	
	СтекПоказателейЛеваяКолонка = Новый СписокЗначений;
	СтекПоказателейЛеваяКолонка.Добавить("ЗаголовокИсполнитель");
	СтекПоказателейЛеваяКолонка.Добавить("Организация");
	СтекПоказателейЛеваяКолонка.Добавить("Подразделение");
	СтекПоказателейЛеваяКолонка.Добавить("Ответственный");
	
	СтекПоказателейПраваяКолонка = Новый СписокЗначений;
	СтекПоказателейПраваяКолонка.Добавить("ЗаголовокСостояние");
	СтекПоказателейПраваяКолонка.Добавить("СостояниеДокумента");
	СтекПоказателейПраваяКолонка.Добавить("СостояниеЗаказа");
	Если Шапка.СостояниеЗаказа<>Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		СтекПоказателейПраваяКолонка.Добавить("Старт");
		СтекПоказателейПраваяКолонка.Добавить("Финиш");
	КонецЕсли; 
	СтекПоказателейПраваяКолонка.Добавить("СуммаОплаты");
	
	Пока СтекПоказателейЛеваяКолонка.Количество()>0 ИЛИ СтекПоказателейПраваяКолонка.Количество()>0 Цикл
		ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка);	
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(Шапка.Комментарий) Тогда
		Область = Макет.ПолучитьОбласть("ОтступОдинарный");
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть("ТекстовыеДанные");
		Область.Параметры.Текст = Шапка.Комментарий;
		Результат.Вывести(Область);
		Область = Макет.ПолучитьОбласть("Отступ");
		Результат.Вывести(Область);
	Иначе
		Область = Макет.ПолучитьОбласть("Отступ");
		Результат.Вывести(Область);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВывестиСекциюЗапасы(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика,
	|	ЗаказПокупателяЗапасы.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента.СимвольноеПредставление КАК Валюта,
	|	ЗаказПокупателяЗапасы.Цена,
	|	ЗаказПокупателяЗапасы.Количество,
	|	ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.Цена * (ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки + ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки) / 100 КАК Скидка,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
	|ИТОГИ
	|	СУММА(Скидка),
	|	СУММА(Всего)
	|ПО
	|	Валюта";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	Область = Макет.ПолучитьОбласть("ШапкаЗапасы");
	Область.Параметры.Валюта = ВыборкаИтоги.Валюта;
	Результат.Вывести(Область, 1);
	
	Область = Макет.ПолучитьОбласть("СтрокаЗапасы");
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Область.Параметры.НоменклатураРасшифровка = ВыборкаДетали.Номенклатура;
		Область.Параметры.Номенклатура = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
		ВыборкаДетали.Номенклатура, 
		ВыборкаДетали.Характеристика, 
		ВыборкаДетали.Артикул);
		Результат.Вывести(Область, 2);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПодвалЗапасы");
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Результат.Вывести(Область, 1);
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры
 
Процедура ВывестиСекциюРаботы(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура,
	|	ЗаказПокупателяРаботы.Характеристика,
	|	ЗаказПокупателяРаботы.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателяРаботы.Ссылка.ВалютаДокумента.СимвольноеПредставление КАК Валюта,
	|	ЗаказПокупателяРаботы.Цена,
	|	ЗаказПокупателяРаботы.Количество,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Цена * (ЗаказПокупателяРаботы.ПроцентСкидкиНаценки + ЗаказПокупателяРаботы.ПроцентАвтоматическойСкидки) / 100 КАК Скидка,
	|	ЗаказПокупателяРаботы.Всего КАК Всего
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка = &ЗаказПокупателя
	|ИТОГИ
	|	СУММА(Скидка),
	|	СУММА(Всего)
	|ПО
	|	Валюта";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	Область = Макет.ПолучитьОбласть("ШапкаРаботы");
	Область.Параметры.Валюта = ВыборкаИтоги.Валюта;
	Результат.Вывести(Область, 1);
	
	Область = Макет.ПолучитьОбласть("СтрокаРаботы");
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Область.Параметры.НоменклатураРасшифровка = ВыборкаДетали.Номенклатура;
		Область.Параметры.Номенклатура = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
		ВыборкаДетали.Номенклатура, 
		ВыборкаДетали.Характеристика, 
		ВыборкаДетали.Артикул);
		Результат.Вывести(Область, 2);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПодвалРаботы");
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Результат.Вывести(Область, 1);
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры
 
Процедура ВывестиСекциюДоходыРасходы(Макет, Результат, Параметры)
	
	ЭтоЗаказНаряд = Параметры.Свойство("ЭтоЗаказНаряд");
	
	МассивПустыеТипы = Новый Массив;
	МассивПустыеТипы.Добавить(Неопределено);
	Для каждого Тип Из Метаданные.ПланыВидовХарактеристик.АналитикаДоходовИРасходов.Тип.Типы() Цикл
		МассивПустыеТипы.Добавить(Новый(Тип));
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.УстановитьПараметр("ПустыеТипы", МассивПустыеТипы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&ЗаказПокупателя КАК Документ.ЗаказПокупателя).ВалютаДокумента КАК Валюта,
	|	ВЫБОР
	|		КОГДА ДиР.Аналитика В (&ПустыеТипы)
	|				ИЛИ ДиР.Аналитика ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДиР.Аналитика
	|	КОНЕЦ КАК Аналитика,
	|	ДиР.СчетУчета КАК СчетУчета,
	|	СУММА(ВЫРАЗИТЬ(ДиР.СуммаДоходовПлан * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаДоходовПлан,
	|	СУММА(ВЫРАЗИТЬ(ДиР.СуммаРасходовПлан * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаРасходовПлан,
	|	СУММА(ВЫРАЗИТЬ(ДиР.СуммаДоходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаДоходовФакт,
	|	СУММА(ВЫРАЗИТЬ(ДиР.СуммаРасходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) КАК СуммаРасходовФакт,
	|	ВЫБОР
	|		КОГДА ЗапасыЗаказа.Номенклатура ЕСТЬ NULL 
	|				И РаботыЗаказа.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительныйРасход,
	|	ВЫБОР
	|		КОГДА ЗапасыЗаказа.Номенклатура ЕСТЬ NULL 
	|				И РаботыЗаказа.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ДиР.СчетУчета
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДиР.Аналитика В (&ПустыеТипы)
	|						ИЛИ ДиР.Аналитика ЕСТЬ NULL 
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ДиР.Аналитика
	|			КОНЕЦ
	|	КОНЕЦ КАК Запас,
	|	МАКСИМУМ(ДиР.ФинансовыйРезультатРассчитан) КАК ФинансовыйРезультатРассчитан,
	|	СУММА((ВЫРАЗИТЬ(ДиР.СуммаДоходовПлан * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) - (ВЫРАЗИТЬ(ДиР.СуммаРасходовПлан * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2)))) КАК ПрибыльПлан,
	|	СУММА((ВЫРАЗИТЬ(ДиР.СуммаДоходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2))) - (ВЫРАЗИТЬ(ДиР.СуммаРасходовФакт * КурсыВалютУчет.Курс / КурсыВалютУчет.Кратность / КурсыВалютЗаказ.Курс * КурсыВалютЗаказ.Кратность КАК ЧИСЛО(15, 2)))) КАК ПрибыльФакт,
	|	ДиР.Регистратор КАК Регистратор,
	|	МАКСИМУМ(ДиР.Период) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		НЕОПРЕДЕЛЕНО КАК Регистратор,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|		ДоходыИРасходыПоЗаказамПрогнозОбороты.СчетУчета КАК СчетУчета,
	|		ДоходыИРасходыПоЗаказамПрогнозОбороты.Аналитика КАК Аналитика,
	|		СУММА(ДоходыИРасходыПоЗаказамПрогнозОбороты.СуммаДоходовОборот) КАК СуммаДоходовПлан,
	|		СУММА(ДоходыИРасходыПоЗаказамПрогнозОбороты.СуммаРасходовОборот) КАК СуммаРасходовПлан,
	|		0 КАК СуммаДоходовФакт,
	|		0 КАК СуммаРасходовФакт,
	|		ЛОЖЬ КАК ФинансовыйРезультатРассчитан
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходыПоЗаказамПрогноз.Обороты(, , Период, ЗаказПокупателя = &ЗаказПокупателя) КАК ДоходыИРасходыПоЗаказамПрогнозОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоходыИРасходыПоЗаказамПрогнозОбороты.СчетУчета,
	|		ДоходыИРасходыПоЗаказамПрогнозОбороты.Аналитика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПродажиОбороты.Регистратор,
	|		ПродажиОбороты.Период,
	|		ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВыручкаОтПродаж),
	|		ПродажиОбороты.Номенклатура,
	|		0,
	|		0,
	|		СУММА(ПродажиОбороты.СуммаОборот),
	|		СУММА(ПродажиОбороты.СебестоимостьОборот),
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(, , Регистратор, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПродажиОбороты.Номенклатура,
	|		ПродажиОбороты.Регистратор,
	|		ПродажиОбороты.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоходыИРасходыОбороты.Регистратор,
	|		ДоходыИРасходыОбороты.Период,
	|		ДоходыИРасходыОбороты.СчетУчета,
	|		ДоходыИРасходыОбороты.Аналитика,
	|		0,
	|		0,
	|		СУММА(ДоходыИРасходыОбороты.СуммаДоходовОборот),
	|		СУММА(ДоходыИРасходыОбороты.СуммаРасходовОборот),
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|						ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета)) КАК ДоходыИРасходыОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоходыИРасходыОбороты.Период,
	|		ДоходыИРасходыОбороты.Регистратор,
	|		ДоходыИРасходыОбороты.Аналитика,
	|		ДоходыИРасходыОбороты.СчетУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(ЗакрытиеМесяца.Ссылка),
	|		МАКСИМУМ(ЗакрытиеМесяца.Дата),
	|		ДоходыИРасходыОбороты.СчетУчета,
	|		ДоходыИРасходыОбороты.Аналитика,
	|		0,
	|		0,
	|		СУММА(-ДоходыИРасходыОбороты.СуммаДоходовОборот),
	|		СУММА(-ДоходыИРасходыОбороты.СуммаРасходовОборот),
	|		ИСТИНА
	|	ИЗ
	|		РегистрНакопления.ДоходыИРасходы.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|						ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|							И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета)
	|					И СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)) КАК ДоходыИРасходыОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|			ПО (НАЧАЛОПЕРИОДА(ДоходыИРасходыОбороты.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЗакрытиеМесяца.Дата, МЕСЯЦ))
	|				И (ЗакрытиеМесяца.Проведен)
	|				И (ЗакрытиеМесяца.РасчетФинансовогоРезультата)
	|	ГДЕ
	|		НЕ ЗакрытиеМесяца.Ссылка ЕСТЬ NULL 
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоходыИРасходыОбороты.Аналитика,
	|		ДоходыИРасходыОбороты.СчетУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФинансовыйРезультатОбороты.Регистратор,
	|		ФинансовыйРезультатОбороты.Период,
	|		ФинансовыйРезультатОбороты.СчетУчета,
	|		ФинансовыйРезультатОбороты.Аналитика,
	|		0,
	|		0,
	|		СУММА(ФинансовыйРезультатОбороты.СуммаДоходовОборот),
	|		СУММА(ФинансовыйРезультатОбороты.СуммаРасходовОборот),
	|		ИСТИНА
	|	ИЗ
	|		РегистрНакопления.ФинансовыйРезультат.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И (СчетУчета.СпособРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияРасходов.НеРаспределять)
	|						И (НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|							ИЛИ НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж <> СчетУчета
	|								И НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж <> СчетУчета))) КАК ФинансовыйРезультатОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ФинансовыйРезультатОбороты.Регистратор,
	|		ФинансовыйРезультатОбороты.Период,
	|		ФинансовыйРезультатОбороты.СчетУчета,
	|		ФинансовыйРезультатОбороты.Аналитика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстаткиИОбороты.Регистратор,
	|		ЗапасыОстаткиИОбороты.Период,
	|		ЗапасыОстаткиИОбороты.СчетУчета,
	|		НЕОПРЕДЕЛЕНО,
	|		0,
	|		0,
	|		0,
	|		СУММА(ЗапасыОстаткиИОбороты.СуммаПриход - ЗапасыОстаткиИОбороты.СуммаРасход),
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрНакопления.Запасы.ОстаткиИОбороты(
	|				,
	|				,
	|				Регистратор,
	|				Движения,
	|				ЗаказПокупателя = &ЗаказПокупателя
	|					И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И СчетУчета В
	|						(ВЫБРАТЬ
	|							ЗапасыОстатки.СчетУчета
	|						ИЗ
	|							РегистрНакопления.Запасы.Остатки(, ЗаказПокупателя = &ЗаказПокупателя
	|								И Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ЗапасыОстатки
	|						ГДЕ
	|							ЗапасыОстатки.КоличествоОстаток = 0
	|							И ЗапасыОстатки.СуммаОстаток <> 0)) КАК ЗапасыОстаткиИОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстаткиИОбороты.Регистратор,
	|		ЗапасыОстаткиИОбороты.Период,
	|		ЗапасыОстаткиИОбороты.СчетУчета) КАК ДиР
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура
	|		ИЗ
	|			Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ГДЕ
	|			ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПокупателяЗапасы.Номенклатура) КАК ЗапасыЗаказа
	|		ПО ДиР.Аналитика = ЗапасыЗаказа.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура
	|		ИЗ
	|			Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|		ГДЕ
	|			ЗаказПокупателяРаботы.Ссылка = &ЗаказПокупателя
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПокупателяРаботы.Номенклатура) КАК РаботыЗаказа
	|		ПО ДиР.Аналитика = РаботыЗаказа.Номенклатура,
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					ВалютаУчета.Значение КАК Валюта
	|				ИЗ
	|					Константа.ВалютаУчета КАК ВалютаУчета)) КАК КурсыВалютУчет,
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = ВЫРАЗИТЬ(&ЗаказПокупателя КАК Документ.ЗаказПокупателя).ВалютаДокумента) КАК КурсыВалютЗаказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ДиР.Аналитика В (&ПустыеТипы)
	|				ИЛИ ДиР.Аналитика ЕСТЬ NULL 
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДиР.Аналитика
	|	КОНЕЦ,
	|	ДиР.СчетУчета,
	|	ВЫБОР
	|		КОГДА ЗапасыЗаказа.Номенклатура ЕСТЬ NULL 
	|				И РаботыЗаказа.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ДиР.СчетУчета
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДиР.Аналитика В (&ПустыеТипы)
	|						ИЛИ ДиР.Аналитика ЕСТЬ NULL 
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ДиР.Аналитика
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЗапасыЗаказа.Номенклатура,
	|	РаботыЗаказа.Номенклатура,
	|	ДиР.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДополнительныйРасход,
	|	Запас,
	|	Аналитика,
	|	Период
	|ИТОГИ
	|	СУММА(СуммаДоходовПлан),
	|	СУММА(СуммаРасходовПлан),
	|	СУММА(СуммаДоходовФакт),
	|	СУММА(СуммаРасходовФакт),
	|	МАКСИМУМ(ФинансовыйРезультатРассчитан),
	|	СУММА(ПрибыльПлан),
	|	СУММА(ПрибыльФакт),
	|	МАКСИМУМ(Период)
	|ПО
	|	Валюта,
	|	ДополнительныйРасход,
	|	Запас,
	|	Аналитика,
	|	Регистратор";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	Область = Макет.ПолучитьОбласть("ШапкаДоходыРасходы"+?(ЭтоЗаказНаряд, "ЗаказНаряд", ""));
	Область.Параметры.Валюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВыборкаИтоги.Валюта);
	Если НЕ ВыборкаИтоги.ФинансовыйРезультатРассчитан Тогда
		Область.Параметры.ОтметкаПояснения = "*";
	КонецЕсли; 
	Результат.Вывести(Область, 1);
	ОбластьГруппа = Макет.ПолучитьОбласть("ГрупировкаДоходыРасходы"+?(ЭтоЗаказНаряд, "ЗаказНаряд", ""));
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаДоходыРасходы"+?(ЭтоЗаказНаряд, "ЗаказНаряд", ""));
	ОбластьАналитика = Макет.ПолучитьОбласть("АналитикаДоходыРасходы"+?(ЭтоЗаказНаряд, "ЗаказНаряд", ""));
	ОбластьРегистратор = Макет.ПолучитьОбласть("РегистраторДоходыРасходы"+?(ЭтоЗаказНаряд, "ЗаказНаряд", ""));
	
	ВыборкаДопРасходы = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДопРасходы.Следующий() Цикл
		ОбластьГруппа.Параметры.Заполнить(ВыборкаДопРасходы);
		Если ВыборкаДопРасходы.ДополнительныйРасход Тогда
			ОбластьГруппа.Параметры.Группа = НСтр("ru = 'Расходы'");;
		Иначе
			ОбластьГруппа.Параметры.Группа = НСтр("ru = 'Запасы'");;
		КонецЕсли; 
		Результат.Вывести(ОбластьГруппа, 2);
		ВыборкаЗапасы = ВыборкаДопРасходы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗапасы.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаЗапасы);
			Результат.Вывести(ОбластьСтрока, 3);
			Если ВыборкаДопРасходы.ДополнительныйРасход Тогда
				ВыборкаАналитика = ВыборкаЗапасы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаАналитика.Следующий() Цикл
					Если ВыборкаАналитика.Количество()>1
						ИЛИ (ЗначениеЗаполнено(ВыборкаАналитика.Аналитика) 
						И ВыборкаАналитика.Аналитика<>ВыборкаАналитика.Запас) Тогда
						ОбластьАналитика.Параметры.Заполнить(ВыборкаАналитика);
						Если НЕ ЗначениеЗаполнено(ВыборкаАналитика.Аналитика) Тогда
							ОбластьАналитика.Параметры.Аналитика = НСтр("ru = '<Без аналитики>'");
						КонецЕсли; 
						Результат.Вывести(ОбластьАналитика, 4);
					КонецЕсли; 
					ВыборкаРегистратор = ВыборкаАналитика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаРегистратор.Следующий() Цикл
						Если НЕ ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор) Тогда
							Продолжить;
						КонецЕсли;
						Если ВыборкаРегистратор.СуммаДоходовФакт=0 И ВыборкаРегистратор.СуммаРасходовФакт=0 Тогда
							Продолжить;
						КонецЕсли; 
						ОбластьРегистратор.Параметры.Заполнить(ВыборкаРегистратор);
						Результат.Вывести(ОбластьРегистратор, 5, , Ложь);
					КонецЦикла; 
				КонецЦикла;
			Иначе
				ВыборкаРегистратор = ВыборкаЗапасы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
				Пока ВыборкаРегистратор.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор) Тогда
						Продолжить;
					КонецЕсли; 
					Если ВыборкаРегистратор.СуммаДоходовФакт=0 И ВыборкаРегистратор.СуммаРасходовФакт=0 Тогда
						Продолжить;
					КонецЕсли; 
					ОбластьРегистратор.Параметры.Заполнить(ВыборкаРегистратор);
					Результат.Вывести(ОбластьРегистратор, 5, , Ложь);
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("ПодвалДоходыРасходы"+?(ЭтоЗаказНаряд, "ЗаказНаряд", ""));
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Результат.Вывести(Область, 1);
	
	Если НЕ ВыборкаИтоги.ФинансовыйРезультатРассчитан Тогда
		Область = Макет.ПолучитьОбласть("ПоясняющаяНадпись");
		Область.Параметры.Текст = НСтр("ru = '* По заказу не рассчитан финансовый результат. После закрытия месяца сумма фактических расходов может измениться.'");
		Результат.Вывести(Область, 1);
	КонецЕсли; 
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры
 
Процедура ВывестиСекциюОтгрузка(Макет, Результат, Параметры)
	
	Если Параметры.Свойство("ОтгрузкаОднимДокументом") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.Номенклатура.Артикул КАК Артикул,
	|	ПродажиОбороты.Характеристика,
	|	ПродажиОбороты.Документ.Номер КАК НомерДокумента,
	|	ПродажиОбороты.Документ.Дата КАК ДатаДокумента,
	|	ПродажиОбороты.Документ КАК ДокументОтгрузки,
	|	ПродажиОбороты.КоличествоОборот КАК КоличествоОтгружено,
	|	ПродажиОбороты.СуммаОборот КАК СуммаОтгружено,
	|	ПродажиОбороты.Документ.Дата КАК ДатаОтгрузкиФакт,
	|	ЕСТЬNULL(ВложенныйЗапрос.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтгрузкиПлан,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.СуммаДокумента = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПродажиОбороты.СуммаОборот / ВложенныйЗапрос.СуммаДокумента * 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПроцентОтгружено,
	|	ВложенныйЗапрос.СуммаДокумента,
	|	ВложенныйЗапрос.Валюта.СимвольноеПредставление КАК Валюта,
	|	ПродажиОбороты.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПоложениеДатыОтгрузки КАК ПоложениеДатыОтгрузки,
	|	ЕСТЬNULL(ПродажиОбороты.Документ.СтруктурнаяЕдиница, НЕОПРЕДЕЛЕНО) КАК Склад
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(, , Период, ЗаказПокупателя = &ЗаказПокупателя) КАК ПродажиОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|			ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ЗаказПокупателяЗапасы.Ссылка.ПоложениеДатыОтгрузки = ЗНАЧЕНИЕ(Перечисление.ПоложениеРеквизитаНаФорме.ВШапке)
	|						ТОГДА ЗаказПокупателяЗапасы.Ссылка.ДатаОтгрузки
	|					ИНАЧЕ ЗаказПокупателяЗапасы.ДатаОтгрузки
	|				КОНЕЦ) КАК ДатаОтгрузки,
	|			ЗаказПокупателяЗапасы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|			ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента КАК Валюта,
	|			ЗаказПокупателяЗапасы.Ссылка.ПоложениеДатыОтгрузки КАК ПоложениеДатыОтгрузки
	|		ИЗ
	|			Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ГДЕ
	|			ЗаказПокупателяЗапасы.Ссылка = &ЗаказПокупателя
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказПокупателяЗапасы.Номенклатура,
	|			ЗаказПокупателяЗапасы.Характеристика,
	|			ЗаказПокупателяЗапасы.Ссылка.СуммаДокумента,
	|			ЗаказПокупателяЗапасы.Ссылка.ВалютаДокумента,
	|			ЗаказПокупателяЗапасы.Ссылка.ПоложениеДатыОтгрузки) КАК ВложенныйЗапрос
	|		ПО ПродажиОбороты.Номенклатура = ВложенныйЗапрос.Номенклатура
	|			И ПродажиОбороты.Характеристика = ВложенныйЗапрос.Характеристика
	|ИТОГИ
	|	МАКСИМУМ(НомерДокумента),
	|	СУММА(КоличествоОтгружено),
	|	СУММА(СуммаОтгружено),
	|	МАКСИМУМ(ДатаОтгрузкиПлан),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА МАКСИМУМ(ВложенныйЗапрос.СуммаДокумента) = 0
	|				ТОГДА 0
	|			ИНАЧЕ СУММА(СуммаОтгружено) / МАКСИМУМ(ВложенныйЗапрос.СуммаДокумента) * 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПроцентОтгружено,
	|	МАКСИМУМ(ПоложениеДатыОтгрузки),
	|	МАКСИМУМ(Склад)
	|ПО
	|	Валюта,
	|	ДокументОтгрузки";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	Область = Макет.ПолучитьОбласть("ШапкаОтгрузка");
	Результат.Вывести(Область, 1);
	ОбластьДокумент = Макет.ПолучитьОбласть("СтрокаОтгрузкаДокумент");
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаОтгрузкаНоменклатура");
	
	НачалоВывода = Результат.ВысотаТаблицы;
	
	ВыборкаДокумент = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокумент.Следующий() Цикл
		ОбластьДокумент.Параметры.Заполнить(ВыборкаДокумент);
		ОбластьДокумент.Параметры.ПредставлениеДокумента = Строка(ВыборкаДокумент.ДокументОтгрузки.Метаданные().Синоним)+" №"+
		ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДокумент.НомерДокумента, Истина, Истина);
		Результат.Вывести(ОбластьДокумент, 2);
		ВыборкаДетали = ВыборкаДокумент.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			ОбластьСтрока.Параметры.Заполнить(ВыборкаДетали);
			ОбластьСтрока.Параметры.НоменклатураРасшифровка = ВыборкаДетали.Номенклатура;
			ОбластьСтрока.Параметры.Номенклатура = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
			ВыборкаДетали.Номенклатура, 
			ВыборкаДетали.Характеристика, 
			ВыборкаДетали.Артикул);
			Если ВыборкаДетали.ПоложениеДатыОтгрузки=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
				ОбластьСтрока.Параметры.ДатаОтгрузкиПлан = "";
			КонецЕсли; 
			Результат.Вывести(ОбластьСтрока, 3);
		КонецЦикла;
	КонецЦикла; 
	
	Область = Макет.ПолучитьОбласть("ПодвалОтгрузка");
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Результат.Вывести(Область, 1);
	
	Если Параметры.Свойство("ДатаОтгрузкиВШапке") И Результат.ВысотаТаблицы>=НачалоВывода Тогда
		ВыведеннаяОбласть = Результат.Область(НачалоВывода, 4, Результат.ВысотаТаблицы, 4);
		ВыведеннаяОбласть.ШиринаКолонки = 0;
	КонецЕсли; 
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры
 
Процедура ВывестиСекциюОплаты(Макет, Результат, Параметры)
	
	Если Параметры.Свойство("ОплатаОднимДокументом") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаСчетовИЗаказовОбороты.Регистратор КАК ДокументОплаты,
	|	ОплатаСчетовИЗаказовОбороты.Регистратор.Дата КАК ДатаОплаты,
	|	ОплатаСчетовИЗаказовОбороты.Регистратор.Номер КАК НомерДокумента,
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК СуммаОплаты,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ОплатаСчетовИЗаказовОбороты.СчетНаОплату.СуммаДокумента = 0
	|				ТОГДА 0
	|			ИНАЧЕ (ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) / ОплатаСчетовИЗаказовОбороты.СчетНаОплату.СуммаДокумента * 100
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ПроцентОплаты,
	|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ВалютаДокумента.СимвольноеПредставление КАК Валюта,
	|	ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.Регистратор.СуммаДокумента, 0) КАК СуммаПлатежа,
	|	ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.Регистратор.ВалютаДенежныхСредств.СимвольноеПредставление, """") КАК ВалютаПлатежа
	|ИЗ
	|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(, , Авто, СчетНаОплату = &ЗаказПокупателя) КАК ОплатаСчетовИЗаказовОбороты
	|ГДЕ
	|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот <> 0
	|ИТОГИ
	|	СУММА(СуммаОплаты),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА МАКСИМУМ(СуммаДокумента) = 0
	|				ТОГДА 0
	|			ИНАЧЕ СУММА(СуммаОплаты) / МАКСИМУМ(СуммаДокумента) * 100
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ПроцентОплаты
	|ПО
	|	Валюта";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	Область = Макет.ПолучитьОбласть("ШапкаОплата");
	Результат.Вывести(Область, 1);
	Область = Макет.ПолучитьОбласть("СтрокаОплата");
	
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	НомерСтроки = 0;
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Область.Параметры.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДетали.НомерДокумента, Истина, Истина);
		Область.Параметры.ВидДокумента = ВыборкаДетали.ДокументОплаты.Метаданные().Синоним;
		Если ВыборкаДетали.СуммаПлатежа=0 ИЛИ ВыборкаДетали.ВалютаПлатежа=ВыборкаДетали.Валюта Тогда
			Область.Параметры.СуммаПлатежа = "";
			Область.Параметры.ВалютаПлатежа = "";
		КонецЕсли; 
		Результат.Вывести(Область, 2);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПодвалОплата");
	Область.Параметры.Заполнить(ВыборкаИтоги);
	Результат.Вывести(Область, 1);
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры
 
Процедура ВывестиГрафикПлатежей(Макет, Результат, Параметры)
	
	Если Параметры.Свойство("ОплатаОднимДокументом") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежныйКалендарьОбороты.СуммаОборот КАК СуммаОплаты,
	|	ПлатежныйКалендарьОбороты.Валюта,
	|	ПлатежныйКалендарьОбороты.ПериодДень КАК ДатаОплаты,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПлатежныйКалендарьОбороты.СчетНаОплату.СуммаДокумента = 0
	|				ТОГДА 0
	|			ИНАЧЕ ПлатежныйКалендарьОбороты.СуммаОборот / ПлатежныйКалендарьОбороты.СчетНаОплату.СуммаДокумента * 100
	|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ПроцентОплаты
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Обороты(, , Авто, СчетНаОплату = &ЗаказПокупателя) КАК ПлатежныйКалендарьОбороты
	|ГДЕ
	|	ПлатежныйКалендарьОбороты.СуммаОборот <> 0";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ШапкаГрафикПлатежей");
	Результат.Вывести(Область);
	Область = Макет.ПолучитьОбласть("СтрокаГрафикПлатежей");
	
	ВыборкаДетали = РезультатЗапроса.Выбрать();
	НомерСтроки = 0;
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Результат.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПодвалГрафикПлатежей");
	Результат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область);
	
КонецПроцедуры
 
Процедура ВывестиСекциюСобытия(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Событие.Ссылка КАК Событие,
	|	Событие.Дата КАК ДатаСобытия,
	|	Событие.ТипСобытия,
	|	Событие.Состояние КАК СостояниеСобытия,
	|	Событие.Тема,
	|	Событие.Содержание,
	|	Событие.Ответственный,
	|	Событие.СписокУчастников
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	(Событие.ДокументОснование = &ЗаказПокупателя
	|			ИЛИ Событие.Ссылка В
	|				(ВЫБРАТЬ
	|					СобытиеДокументыОснования.Ссылка
	|				ИЗ
	|					Документ.Событие.ДокументыОснования КАК СобытиеДокументыОснования
	|				ГДЕ
	|					СобытиеДокументыОснования.ДокументОснование = &ЗаказПокупателя))
	|	И НЕ Событие.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ШапкаСобытия");
	Результат.Вывести(Область);
	Область = Макет.ПолучитьОбласть("СтрокаСобытия");
	
	ВыборкаДетали = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Область.Параметры.Содержание = СокрЛП(ВыборкаДетали.Содержание);
		Область.Параметры.ДатаСобытия = Формат(ВыборкаДетали.ДатаСобытия, "ДЛФ=D");
		СтрокаКонтакты = "";
		Область.Параметры.Контакты = ВыборкаДетали.СписокУчастников;
		Результат.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры
 
Процедура ВывестиСекциюОбсуждение(Макет, Результат, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", Параметры.ЗаказПокупателя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Обсуждения.МоментВремени КАК ДатаСообщения,
	|	Обсуждения.Пользователь,
	|	Обсуждения.Комментарий
	|ИЗ
	|	РегистрСведений.Обсуждения КАК Обсуждения
	|ГДЕ
	|	Обсуждения.Объект = &ЗаказПокупателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСообщения";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоЗаказНаряд") Тогда
		Область = Макет.ПолучитьОбласть("ШапкаОбсуждениеЗаказНаряд");
	Иначе	
		Область = Макет.ПолучитьОбласть("ШапкаОбсуждение");
	КонецЕсли; 
	Результат.Вывести(Область);
	Область = Макет.ПолучитьОбласть("СтрокаОбсуждение");
	
	НомерСтроки = 0;
	ВыборкаДетали = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область.Параметры.Заполнить(ВыборкаДетали);
		Если Год(ВыборкаДетали.ДатаСообщения)=Год(ТекущаяДатаСеанса()) Тогда
			Область.Параметры.ДатаСообщения = Формат(ВыборкаДетали.ДатаСообщения, НСтр("ru = 'ДФ=''д МММ ЧЧ:мм'''"));
		Иначе
			Область.Параметры.ДатаСообщения = Формат(ВыборкаДетали.ДатаСообщения, НСтр("ru = 'ДФ=''д МММ гггг ЧЧ:мм'''"));
		КонецЕсли;
		Позиция = Найти(ВыборкаДетали.Комментарий, "HREF");
		Если Позиция>0 Тогда
			ТекстСсылки = Сред(ВыборкаДетали.Комментарий, Позиция+6);
			ТекстСсылки = Лев(ТекстСсылки, Найти(ТекстСсылки, "'")-1);
			СсылкаНаОбъект = ОбсужденияСервер.ПолучитьСсылкуИзНавигационной(ТекстСсылки);
			Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
				Область.Параметры.Ссылка = СсылкаНаОбъект;
			КонецЕсли; 
		КонецЕсли; 
		Область.Параметры.Комментарий = ОтчетыУНФ.ТекстБезТегов(ВыборкаДетали.Комментарий);
		Результат.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область, 1);
	
КонецПроцедуры

Процедура ВывестиСледующуюСтрокуШапки(Результат, Макет, Показатели, СтекПоказателейЛеваяКолонка, СтекПоказателейПраваяКолонка)
	
	ЗначениеЛевойКолонки = СледующийПоказательДляВывода(СтекПоказателейЛеваяКолонка, Показатели);
	ЗначениеПравойКолонки = СледующийПоказательДляВывода(СтекПоказателейПраваяКолонка, Показатели);
	
	Если ЗначениеЛевойКолонки=Неопределено И ЗначениеПравойКолонки=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Область = ОбластьПоПоказателю(Макет, ЗначениеЛевойКолонки, Показатели, Истина);
	Результат.Вывести(Область);
	Область = ОбластьПоПоказателю(Макет, ЗначениеПравойКолонки, Показатели, Ложь);
	Результат.Присоединить(Область);
	
КонецПроцедуры

Функция СледующийПоказательДляВывода(Список, Показатели)
	
	Пока Истина Цикл
		Если Список.Количество()=0 Тогда
			Прервать;
		КонецЕсли; 	
		ИмяПоказателя = Список[0].Значение;
		Список.Удалить(0);
		Если СтрНайти(ИмяПоказателя, "Заголовок")>0 Тогда
			Возврат ИмяПоказателя;
		КонецЕсли; 
		Если НЕ Показатели.Свойство(ИмяПоказателя) Тогда
			Продолжить;
		КонецЕсли;
		Возврат ИмяПоказателя;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция ОбластьПоПоказателю(Макет, Показатель, Показатели, Левая)
	
	Колонка = ?(Левая, "ЛеваяКолонка", "ПраваяКолонка");
	
	Если Показатель=Неопределено Тогда
		Возврат Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
	КонецЕсли;
	
	Если СтрНайти(Показатель, "Заголовок")>0 Тогда
		Текст = СтрЗаменить(Показатель, "Заголовок", "");
		Область = Макет.ПолучитьОбласть("Подзаголовок|"+Колонка);
		Область.Параметры.Текст = Текст+":";
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Номер" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Номер заказа:'");
		Область.Параметры.Значение = Показатели.Номер;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СостояниеДокумента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
		Область.Параметры.Значение = Показатели.СостояниеДокумента;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Контрагент" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.Контрагент;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Старт" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Старт:'");
		СтрокаФормата = НСтр("ru = 'д МММ'");
		Если Год(ТекущаяДатаСеанса())<>Год(Показатели.Старт) Тогда
			СтрокаФормата = СтрокаФормата+НСтр("ru = ' гггг'");
		КонецЕсли; 
		Если НачалоДня(Показатели.Старт)<>Показатели.Старт Тогда
			СтрокаФормата = СтрокаФормата+НСтр("ru = ' ЧЧ:мм'");
		КонецЕсли;
		СтрокаФормата = СтрШаблон("ДФ='%1'", СтрокаФормата);
		Область.Параметры.Значение = Формат(Показатели.Старт, СтрокаФормата);
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Финиш" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Финиш:'");
		СтрокаФормата = НСтр("ru = 'д МММ'");
		Если Год(ТекущаяДатаСеанса())<>Год(Показатели.Финиш) Тогда
			СтрокаФормата = СтрокаФормата+НСтр("ru = ' гггг'");
		КонецЕсли; 
		Если НачалоДня(Показатели.Финиш)<>Показатели.Финиш Тогда
			СтрокаФормата = СтрокаФормата+НСтр("ru = ' ЧЧ:мм'");
		КонецЕсли;
		СтрокаФормата = СтрШаблон("ДФ='%1'", СтрокаФормата);
		Область.Параметры.Значение = Формат(Показатели.Финиш, СтрокаФормата);
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СостояниеЗаказа" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.СостояниеЗаказа;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="ПлановаяДатаОтгрузки" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'План. отгрузка:'");
		Если Год(ТекущаяДатаСеанса())=Год(Показатели.ПлановаяДатаОтгрузки) Тогда
			Область.Параметры.Значение = Формат(Показатели.ПлановаяДатаОтгрузки, НСтр("ru = 'ДФ=''д МММ'''"));
		Иначе
			Область.Параметры.Значение = Формат(Показатели.ПлановаяДатаОтгрузки, НСтр("ru = 'ДФ=''д МММ гггг'''"));
		КонецЕсли; 
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СуммаДокумента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Сумма заказа:'");
		Область.Параметры.Значение = Формат(Показатели.СуммаДокумента, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Валюта" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Валюта:'");
		Область.Параметры.Значение = Показатели.ВалютаПредставление;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СуммаСкидки" Тогда
		ПроцентСкиди = Окр(Показатели.СуммаСкидки/(Показатели.СуммаСкидки+Показатели.СуммаДокумента)*100, 2);
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = СтрШаблон(НСтр("ru = 'Скидка (%1):'"), Строка(ПроцентСкиди)+"%");
		Область.Параметры.Значение = Формат(Показатели.СуммаСкидки, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="СуммаРучнойСкидки" Тогда
		ПроцентСкиди = Окр(Показатели.СуммаРучнойСкидки/(Показатели.СуммаСкидки+Показатели.СуммаДокумента)*100, 2);
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Если Показатели.СуммаРучнойСкидки=0 Тогда
			ЗаголовокПоказателя = НСтр("ru = 'Ручная скидка (%1):'");
		Иначе
			ЗаголовокПоказателя = НСтр("ru = '- ручная (%1):'");
		КонецЕсли; 
		Область.Параметры.Показатель = СтрШаблон(ЗаголовокПоказателя, Строка(ПроцентСкиди)+"%");
		Область.Параметры.Значение = Формат(Показатели.СуммаРучнойСкидки, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="СуммаАвтоматическойСкидки" Тогда
		ПроцентСкиди = Окр(Показатели.СуммаАвтоматическойСкидки/(Показатели.СуммаСкидки+Показатели.СуммаДокумента)*100, 2);
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Если Показатели.СуммаРучнойСкидки=0 Тогда
			ЗаголовокПоказателя = НСтр("ru = 'Авт. скидка (%1):'");
		Иначе
			ЗаголовокПоказателя = НСтр("ru = '- авто. (%1):'");
		КонецЕсли; 
		Область.Параметры.Показатель = СтрШаблон(ЗаголовокПоказателя, Строка(ПроцентСкиди)+"%");
		Область.Параметры.Значение = Формат(Показатели.СуммаАвтоматическойСкидки, "ЧДЦ=2");
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="Организация" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Организация:'");
		Область.Параметры.Значение = Показатели.Организация;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Подразделение" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Подразделение:'");
		Область.Параметры.Значение = Показатели.Подразделение;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Склад" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Склад:'");
		Область.Параметры.Значение = Показатели.Склад;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="Ответственный" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Ответственный:'");
		Область.Параметры.Значение = Показатели.Ответственный;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="КонтактноеЛицо" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанные|"+Колонка);
		Область.Параметры.Показатель = НСтр("ru = 'Контакт:'");
		Область.Параметры.Значение = Строка(Показатели.КонтактноеЛицо)+?(ЗначениеЗаполнено(Показатели.Должность), " ("+Показатели.Должность+")", "");
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СуммаОплаты" Тогда
		ПроцентОплаты = ?(Показатели.СуммаДокумента=0, 0,Окр(Показатели.СуммаОплаты/Показатели.СуммаДокумента*100, 2));
		Если НЕ ЗначениеЗаполнено(Показатели.ДокументОплаты) Тогда
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
			Область.Параметры.Значение = НСтр("ru = 'Не оплачен'");
		ИначеЕсли ПроцентОплаты=100 Тогда
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
			Если Год(ТекущаяДатаСеанса())=Год(Показатели.ДатаОплаты) Тогда
				Область.Параметры.Значение = СтрШаблон(НСтр("ru = 'Оплачен %1'"), Формат(Показатели.ДатаОплаты, НСтр("ru = 'ДФ=''д МММ'''")));
			Иначе
				Область.Параметры.Значение = СтрШаблон(НСтр("ru = 'Оплачен %1'"), Формат(Показатели.ДатаОплаты, НСтр("ru = 'ДФ=''д МММ гггг'''")));
			КонецЕсли;
		Иначе
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеВажно|"+Колонка);
			Область.Параметры.Показатель = СтрШаблон(НСтр("ru = 'Оплачено%1:'"), ?(ПроцентОплаты<>100, " ("+Строка(ПроцентОплаты)+"%)", ""));
			Область.Параметры.Значение = Формат(Показатели.СуммаОплаты, "ЧДЦ=2");
		КонецЕсли; 
		Если Показатели.КоличествоДокументовОплаты=1 Тогда
			Область.Параметры.ЗначениеРасшифровка = Показатели.ДокументОплаты;
		КонецЕсли; 
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="СуммаОтгрузки" Тогда
		ПроцентОтгрузки = ?(Показатели.СуммаДокумента=0, 0, Окр(Показатели.СуммаОтгрузки/Показатели.СуммаДокумента*100, 2));
		Если НЕ ЗначениеЗаполнено(Показатели.ДокументОтгрузки) Тогда
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
			Область.Параметры.Значение = НСтр("ru = 'Не отгружен'");
		ИначеЕсли ПроцентОтгрузки=100 Тогда
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовкаВажно|"+Колонка);
			Если Год(ТекущаяДатаСеанса())=Год(Показатели.ДатаОтгрузки) Тогда
				Область.Параметры.Значение = СтрШаблон(НСтр("ru = 'Отгружен %1'"), Формат(Показатели.ДатаОтгрузки, НСтр("ru = 'ДФ=''д МММ'''")));
			Иначе
				Область.Параметры.Значение = СтрШаблон(НСтр("ru = 'Отгружен %1'"), Формат(Показатели.ДатаОтгрузки, НСтр("ru = 'ДФ=''д МММ гггг'''")));
			КонецЕсли; 
		Иначе
			Область = Макет.ПолучитьОбласть("ОбщиеДанныеВажно|"+Колонка);
			Область.Параметры.Показатель = СтрШаблон(НСтр("ru = 'Отгружено%1:'"), ?(ПроцентОтгрузки<>100, " ("+ПроцентОтгрузки+"%)", ""));
			Область.Параметры.Значение = Формат(Показатели.СуммаОтгрузки, "ЧДЦ=2");
		КонецЕсли; 
		Если Показатели.КоличествоДокументовОтгрузки=1 Тогда
			Область.Параметры.ЗначениеРасшифровка = Показатели.ДокументОтгрузки;
		КонецЕсли; 
		Возврат Область;
	КонецЕсли;
	
	Если Показатель="EmailКонтрагента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.EmailКонтрагента;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="ТелефонКонтрагента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.ТелефонКонтрагента;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="ФактАдресКонтрагента" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.ФактАдресКонтрагента;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="EmailКонтактногоЛица" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.EmailКонтактногоЛица;
		Возврат Область;
	КонецЕсли; 
	
	Если Показатель="ТелефонКонтактногоЛица" Тогда
		Область = Макет.ПолучитьОбласть("ОбщиеДанныеБезЗаголовка|"+Колонка);
		Область.Параметры.Значение = Показатели.ТелефонКонтактногоЛица;
		Возврат Область;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - состав полей см. в функции ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ЗаполнитьСписокТекущихДелЗаказПокупателя(ТекущиеДела);
	ЗаполнитьСписокТекущихДелЗаказНаряд(ТекущиеДела);
	
КонецПроцедуры

Процедура ЗаполнитьСписокТекущихДелЗаказПокупателя(ТекущиеДела)
	
	ГруппаДел	= НСтр("ru = 'Заказы покупателей'");
	ИмяФормы	= "Документ.ЗаказПокупателя.Форма.ФормаСписка";
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПокупателя)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ГрафикВыполненияЗаказов)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ГрафикОплатыЗаказов)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|		КОНЕЦ) КАК ЗаказыПокупателейПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказПокупателя.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|		КОНЕЦ) КАК ЗаказыПокупателейПросроченаОплата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|			КОГДА ДокЗаказПокупателя.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|		КОНЕЦ) КАК ЗаказыПокупателейНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказПокупателя.Ссылка) КАК ЗаказыПокупателейНеЗавершенные
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов КАК ГрафикВыполнения
		|		ПО ДокЗаказПокупателя.Ссылка = ГрафикВыполнения.Заказ
		|			И (ГрафикВыполнения.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатыЗаказов КАК ГрафикОплаты
		|		ПО ДокЗаказПокупателя.Ссылка = ГрафикОплаты.СчетНаОплату
		|			И (ГрафикОплаты.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))}
		|ГДЕ
		|	ДокЗаказПокупателя.Проведен
		|	И ДокЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|	И НЕ ДокЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|	И ДокЗаказПокупателя.Ответственный В(&СотрудникиПользователя)";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗаказыПокупателейПросроченоВыполнение";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыПокупателейПросроченоВыполнение > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просрочено выполнение'");
	Дело.Количество		= ДанныеДел.ЗаказыПокупателейПросроченоВыполнение;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение", "ПросроченоВыполнение");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыПокупателейПросроченаОплата";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыПокупателейПросроченаОплата > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просрочена оплата'");
	Дело.Количество		= ДанныеДел.ЗаказыПокупателейПросроченаОплата;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченаОплата", "ПросроченаОплата");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыПокупателейНаСегодня";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыПокупателейНаСегодня > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На сегодня'");
	Дело.Количество		= ДанныеДел.ЗаказыПокупателейНаСегодня;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказыПокупателейНеЗавершенные";
	Дело.ЕстьДела		= ДанныеДел.ЗаказыПокупателейНеЗавершенные > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'Не завершенные'");
	Дело.Количество		= ДанныеДел.ЗаказыПокупателейНеЗавершенные;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НеЗавершенные", "НеЗавершенные");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

Процедура ЗаполнитьСписокТекущихДелЗаказНаряд(ТекущиеДела)
	
	ГруппаДел	= НСтр("ru = 'Заказ наряды'");
	ИмяФормы	= "Документ.ЗаказПокупателя.Форма.ФормаСпискаЗаказНаряда";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
		Или Не ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказПокупателя)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ГрафикВыполненияЗаказов)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ГрафикОплатыЗаказов)
		Или ТекущиеДелаСервер.ДелоОтключено(ГруппаДел) Тогда
		
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказНаряд.Финиш < &ТекущаяДата
		|					И НЕ ГрафикВыполненияЗаказов.Заказ ЕСТЬ NULL 
		|				ТОГДА ДокЗаказНаряд.Ссылка
		|		КОНЕЦ) КАК ЗаказНарядыПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказНаряд.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказНаряд.Ссылка
		|		КОНЕЦ) КАК ЗаказНарядыПросроченаОплата,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ДокЗаказНаряд.Старт <= КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|					И ДокЗаказНаряд.Финиш >= &ТекущаяДата
		|				ТОГДА ДокЗаказНаряд.Ссылка
		|			КОГДА ДокЗаказНаряд.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
		|				ТОГДА ДокЗаказНаряд.Ссылка
		|		КОНЕЦ) КАК ЗаказНарядыНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказНаряд.Ссылка) КАК ЗаказНарядыНеЗавершенные
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокЗаказНаряд
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатыЗаказов КАК ГрафикОплаты
		|		ПО ДокЗаказНаряд.Ссылка = ГрафикОплаты.СчетНаОплату
		|			И (ГрафикОплаты.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))}
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов КАК ГрафикВыполненияЗаказов
		|		ПО ДокЗаказНаряд.Ссылка = ГрафикВыполненияЗаказов.Заказ
		|			И (ГрафикВыполненияЗаказов.Период <= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
		|ГДЕ
		|	ДокЗаказНаряд.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|	И ДокЗаказНаряд.Проведен
		|	И НЕ ДокЗаказНаряд.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказНарядов.Завершен)
		|	И ДокЗаказНаряд.Ответственный В(&СотрудникиПользователя)";
	
	ДанныеДел = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	 = "ЗаказНарядыПросроченоВыполнение";
	Дело.ЕстьДела		= ДанныеДел.ЗаказНарядыПросроченоВыполнение > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просрочено выполнение'");
	Дело.Количество		= ДанныеДел.ЗаказНарядыПросроченоВыполнение;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченоВыполнение", "ПросроченоВыполнение");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказНарядыПросроченаОплата";
	Дело.ЕстьДела		= ДанныеДел.ЗаказНарядыПросроченаОплата > 0;
	Дело.Важное			= Истина;
	Дело.Представление	= НСтр("ru = 'Просрочена оплата'");
	Дело.Количество		= ДанныеДел.ЗаказНарядыПросроченаОплата;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,ПросроченаОплата", "ПросроченаОплата");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказНарядыНаСегодня";
	Дело.ЕстьДела		= ДанныеДел.ЗаказНарядыНаСегодня > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'На сегодня'");
	Дело.Количество		= ДанныеДел.ЗаказНарядыНаСегодня;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НаСегодня", "НаСегодня");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор	= "ЗаказНарядыНеЗавершенные";
	Дело.ЕстьДела		= ДанныеДел.ЗаказНарядыНеЗавершенные > 0;
	Дело.Важное			= Ложь;
	Дело.Представление	= НСтр("ru = 'Не завершенные'");
	Дело.Количество		= ДанныеДел.ЗаказНарядыНеЗавершенные;
	Дело.Форма			= ИмяФормы;
	Дело.ПараметрыФормы	= Новый Структура("КлючНазначенияИспользования,ТекущиеДела,НеЗавершенные", "НеЗавершенные");
	Дело.Владелец		= ГруппаДел;
	Дело.Подсказка		= "";
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсРабочегоПроцесса

Функция РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ТипДействия = Неопределено) Экспорт
	
	НедоступныеРеквизиты = Новый Массив;
	
	НедоступныеРеквизиты.Добавить("НомерВходящегоДокумента");
	НедоступныеРеквизиты.Добавить("ДатаВходящегоДокумента");
	НедоступныеРеквизиты.Добавить("СписокРесурсов");
	НедоступныеРеквизиты.Добавить("СписокНоменклатуры");
	НедоступныеРеквизиты.Добавить("СтруктурнаяЕдиницаРезерв");
	
	Возврат НедоступныеРеквизиты;
	
КонецФункции

Процедура СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаЗапасыНаСкладах.Период КАК Период
	|	,ТаблицаЗапасыНаСкладах.Организация КАК Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия КАК Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасыНаСкладах
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаЗапасыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяССылка)
	|	И ТаблицаЗапасыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Период
	|	,ТаблицаЗапасыНаСкладах.Организация
	|	,ТаблицаЗапасыНаСкладах.Номенклатура
	|	,ТаблицаЗапасыНаСкладах.Характеристика
	|	,ТаблицаЗапасыНаСкладах.Партия
	|	,ТаблицаЗапасыНаСкладах.НомерГТД
	|	,ТаблицаЗапасыНаСкладах.СтранаПроисхождения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаМатериалыНаСкладах.НомерСтроки) КАК НомерСтроки
	|	,ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|	,ТаблицаМатериалыНаСкладах.Период КАК Период
	|	,ТаблицаМатериалыНаСкладах.Организация КАК Организация
	|	,ТаблицаМатериалыНаСкладах.Номенклатура КАК Номенклатура
	|	,ТаблицаМатериалыНаСкладах.Характеристика КАК Характеристика
	|	,ТаблицаМатериалыНаСкладах.Партия КАК Партия
	|	,ТаблицаМатериалыНаСкладах.НомерГТД КАК НомерГТД
	|	,ТаблицаМатериалыНаСкладах.СтранаПроисхождения КАК СтранаПроисхождения
	|	,СУММА(ТаблицаМатериалыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаМатериалыНаСкладах
	|ГДЕ
	|	ТаблицаМатериалыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.Россия)
	|	И ТаблицаМатериалыНаСкладах.СтранаПроисхождения <> Значение(Справочник.СтраныМира.ПустаяССылка)
	|	И ТаблицаМатериалыНаСкладах.НомерГТД <> Значение(Справочник.НомераГТД.ПустаяССылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМатериалыНаСкладах.Период
	|	,ТаблицаМатериалыНаСкладах.Организация
	|	,ТаблицаМатериалыНаСкладах.Номенклатура
	|	,ТаблицаМатериалыНаСкладах.Характеристика
	|	,ТаблицаМатериалыНаСкладах.Партия
	|	,ТаблицаМатериалыНаСкладах.НомерГТД
	|	,ТаблицаМатериалыНаСкладах.СтранаПроисхождения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыВРазрезеГТД", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Функция СформироватьТекстЗапросаОстаткиЗапасыВРазрезеГТД()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыВРазрезеГТДИзменение.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД) КАК НомерГТДПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.Партия) КАК ПартияПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения) КАК СтранаПроисхожденияПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗапасыВРазрезеГТДОстатки.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыВРазрезеГТДИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыВРазрезеГТД,
	|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыВРазрезеГТД
	|ИЗ
	|	ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыВРазрезеГТД.Остатки(
	|				&МоментКонтроля,
	|				(Организация, НомерГТД, Номенклатура, Характеристика, Партия, СтранаПроисхождения) В
	|					(ВЫБРАТЬ
	|						ДвиженияЗапасыВРазрезеГТДИзменение.Организация КАК Организация,
	|						ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД КАК НомерГТД,
	|						ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура КАК Номенклатура,
	|						ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика КАК Характеристика,
	|						ДвиженияЗапасыВРазрезеГТДИзменение.Партия КАК Партия,
	|						ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения КАК СтранаПроисхождения
	|					ИЗ
	|						ДвиженияЗапасыВРазрезеГТДИзменение КАК ДвиженияЗапасыВРазрезеГТДИзменение)) КАК ЗапасыВРазрезеГТДОстатки
	|		ПО ДвиженияЗапасыВРазрезеГТДИзменение.Организация = ЗапасыВРазрезеГТДОстатки.Организация
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.НомерГТД = ЗапасыВРазрезеГТДОстатки.НомерГТД
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Номенклатура = ЗапасыВРазрезеГТДОстатки.Номенклатура
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Характеристика = ЗапасыВРазрезеГТДОстатки.Характеристика
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.Партия = ЗапасыВРазрезеГТДОстатки.Партия
	|			И ДвиженияЗапасыВРазрезеГТДИзменение.СтранаПроисхождения = ЗапасыВРазрезеГТДОстатки.СтранаПроисхождения
	|ГДЕ
	|	ЕСТЬNULL(ЗапасыВРазрезеГТДОстатки.КоличествоОстаток, 0) < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Процедура СформироватьТаблицаВыпускПродукции(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВыпускПродукции.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВыпускПродукции.Финиш КАК Период,
	|	ТаблицаВыпускПродукции.Организация КАК Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика КАК Характеристика,
	|	ТаблицаВыпускПродукции.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|			ТОГДА ТаблицаВыпускПродукции.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаВыпускПродукции.Спецификация КАК Спецификация,
	|	СУММА(ТаблицаВыпускПродукции.Количество) КАК Количество,
	|	0 КАК КоличествоПлан
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаВыпускПродукции,
	|	Константы КАК Константы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаВыпускПродукции.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ТаблицаВыпускПродукции.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыпускПродукции.Финиш,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ТаблицаВыпускПродукции.Партия,
	|	ТаблицаВыпускПродукции.ЗаказПокупателя,
	|	ТаблицаВыпускПродукции.Спецификация,
	|	Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаВыпускПродукции.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаВыпускПродукции.Финиш,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ТаблицаВыпускПродукции.Партия,
	|	ВЫБОР
	|		КОГДА Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|			ТОГДА ТаблицаВыпускПродукции.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаВыпускПродукции.Спецификация,
	|	0,
	|	СУММА(ТаблицаВыпускПродукции.Количество)
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаВыпускПродукции,
	|	Константы КАК Константы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаВыпускПродукции.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ТаблицаВыпускПродукции.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыпускПродукции.Финиш,
	|	ТаблицаВыпускПродукции.Организация,
	|	ТаблицаВыпускПродукции.СтруктурнаяЕдиница,
	|	ТаблицаВыпускПродукции.Номенклатура,
	|	ТаблицаВыпускПродукции.Характеристика,
	|	ТаблицаВыпускПродукции.Партия,
	|	ТаблицаВыпускПродукции.ЗаказПокупателя,
	|	ТаблицаВыпускПродукции.Спецификация,
	|	Константы.ФункциональнаяОпцияРезервированиеЗапасов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаВыпускПродукции()

Процедура СформироватьТаблицаГрафикДвиженияЗапасов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаРаботы.НомерСтроки КАК НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаРаботы.Финиш, ДЕНЬ) КАК Период,
	|	ТаблицаРаботы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ТаблицаРаботы.ЗаказПокупателя КАК Заказ,
	|	ТаблицаРаботы.Номенклатура КАК Номенклатура,
	|	ТаблицаРаботы.Характеристика КАК Характеристика,
	|	ТаблицаРаботы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаТовары.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаТовары.Старт, ДЕНЬ),
	|	ТаблицаТовары.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка),
	|	ТаблицаТовары.Заказ,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ТаблицаМатериалы.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаМатериалы.Старт, ДЕНЬ),
	|	ТаблицаМатериалы.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка),
	|	ТаблицаМатериалы.Заказ,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.Характеристика,
	|	ТаблицаМатериалы.Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаВыпускПродукции()

Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ВозникновениеОбязательствПокупателя", НСтр("ru='Возникновение обязательств покупателя'"));
	Запрос.УстановитьПараметр("ЗачетАванса", НСтр("ru='Зачет предоплаты'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.Финиш КАК Дата,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчета,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ТаблицаДокумента.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК Заказ,
	|	ТаблицаДокумента.ВалютаРасчетов КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаДляОстатка,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВалДляОстатка,
	|	ВЫРАЗИТЬ(&ВозникновениеОбязательствПокупателя КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаРасчетыСПокупателями
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ТаблицаДокумента.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ТаблицаДокумента.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ВозникновениеОбязательствПокупателя КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаДокумента.Сумма <> 0
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ТаблицаДокумента.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетов,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ТипРасчетов,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.ДокументКуда
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда,
	|	СУММА(ТаблицаДокумента.Сумма),
	|	СУММА(ТаблицаДокумента.СуммаВал),
	|	-СУММА(ТаблицаДокумента.Сумма),
	|	-СУММА(ТаблицаДокумента.СуммаВал),
	|	ВЫРАЗИТЬ(&ЗачетАванса КАК СТРОКА(100))
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Контрагент,
	|	ТаблицаДокумента.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Договор,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.ДокументКуда
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Заказ = НЕОПРЕДЕЛЕНО
	|				ИЛИ НЕ ТаблицаДокумента.ВестиРасчетыПоЗаказам
	|			ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаДокумента.Заказ
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.ВалютаРасчетов,
	|	ТаблицаДокумента.ТипРасчетовКуда
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Валюта,
	|	Документ,
	|	Заказ,
	|	ТипРасчетов,
	|	СчетУчета";
	
	Запрос.Выполнить();
	
	// Установка исключительной блокировки контролируемых остатков расчетов с контрагентами.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРасчетыСПокупателями.Организация КАК Организация,
	|	ВременнаяТаблицаРасчетыСПокупателями.Контрагент КАК Контрагент,
	|	ВременнаяТаблицаРасчетыСПокупателями.Договор КАК Договор,
	|	ВременнаяТаблицаРасчетыСПокупателями.Документ КАК Документ,
	|	ВременнаяТаблицаРасчетыСПокупателями.Заказ КАК Заказ,
	|	ВременнаяТаблицаРасчетыСПокупателями.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ВременнаяТаблицаРасчетыСПокупателями КАК ВременнаяТаблицаРасчетыСПокупателями";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПокупателями");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	
	Для каждого КолонкаРезультатЗапроса Из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	НомерЗапроса = 0;
	Запрос.Текст = УправлениеНебольшойФирмойСервер.ПолучитьТекстЗапросаКурсовыеРазницыРасчетыСПокупателями(Запрос.МенеджерВременныхТаблиц, Истина, НомерЗапроса);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", МассивРезультатов[НомерЗапроса].Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаРасчетыСПокупателями()

Процедура СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаДоходыИРасходы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходыИРасходы.Финиш КАК Период,
	|	ТаблицаДоходыИРасходы.Организация КАК Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи КАК СтруктурнаяЕдиница,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК СуммаДоходов,
	|	0 КАК СуммаРасходов,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма) КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаДоходыИРасходы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаДоходыИРасходы.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Финиш,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Финиш,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫРАЗИТЬ(&ОтражениеДоходов КАК СТРОКА(100)),
	|	СУММА(ТаблицаДоходыИРасходы.Сумма),
	|	0,
	|	СУММА(ТаблицаДоходыИРасходы.Сумма)
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаДоходыИРасходы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И НЕ ТаблицаДоходыИРасходы.ТоварыНаКомиссии
	|	И ТаблицаДоходыИРасходы.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходыИРасходы.Финиш,
	|	ТаблицаДоходыИРасходы.НомерСтроки,
	|	ТаблицаДоходыИРасходы.Организация,
	|	ТаблицаДоходыИРасходы.ПодразделениеПродажи,
	|	ТаблицаДоходыИРасходы.НаправлениеДеятельностиПродажи,
	|	ТаблицаДоходыИРасходы.ЗаказПокупателя,
	|	ТаблицаДоходыИРасходы.СчетУчетаПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее),
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ТаблицаДокумента.Валюта,
	|	&КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА 0
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаДокумента.СуммаКурсовойРазницы
	|	КОНЕЦ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ОтражениеДоходов", НСтр("ru='Отражение доходов'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходы()

Процедура СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Финиш КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаДокумента.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Финиш,
	|	ТаблицаДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ТаблицаДокумента.НаправлениеДеятельностиПродажи,
	|	ТаблицаДокумента.Сумма,
	|	ТаблицаДокумента.Сумма КАК НеРаспределено
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаДокумента.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	СУММА(ТаблицаДокумента.Сумма) КАК СуммаКСписанию
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Статья КАК Статья
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
  	
	ТаблицаЗапасыДоходыИРасходыОтложенные = МассивРезультатов[0].Выгрузить();
	ВыборкаРезультатаЗапроса = МассивРезультатов[1].Выбрать();
	
	ТаблицаПредоплатаДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Скопировать();
	ТаблицаПредоплатаДоходыИРасходыОтложенные.Очистить();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		СуммаКСписанию = ВыборкаРезультатаЗапроса.СуммаКСписанию;
		Для каждого СтрокаЗапасыДоходыИРасходыОтложенные Из ТаблицаЗапасыДоходыИРасходыОтложенные Цикл
			Если СуммаКСписанию = 0 Тогда
				Продолжить
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов <= СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СуммаКСписанию = СуммаКСписанию - СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов;
			ИначеЕсли СтрокаЗапасыДоходыИРасходыОтложенные.СуммаДоходов > СуммаКСписанию Тогда
				СтрокаПредоплатаДоходыИРасходыОтложенные = ТаблицаПредоплатаДоходыИРасходыОтложенные.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПредоплатаДоходыИРасходыОтложенные, СтрокаЗапасыДоходыИРасходыОтложенные);
				СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов = СуммаКСписанию;
				СуммаКСписанию = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПредоплатаДоходыИРасходыОтложенные Из ТаблицаПредоплатаДоходыИРасходыОтложенные Цикл
		СтрокаЗапасыДоходыИРасходыОтложенные = ТаблицаЗапасыДоходыИРасходыОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапасыДоходыИРасходыОтложенные, СтрокаПредоплатаДоходыИРасходыОтложенные);
		СтрокаЗапасыДоходыИРасходыОтложенные.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаЗапасыДоходыИРасходыОтложенные.НеРаспределено = -СтрокаПредоплатаДоходыИРасходыОтложенные.СуммаДоходов;
	КонецЦикла;
	
	ВыборкаРезультатаЗапроса = МассивРезультатов[2].Выбрать();
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Статья = ВыборкаРезультатаЗапроса.Статья;
	Иначе
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.Документ КАК Документ,
	|	Таблица.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Статья КАК Статья,
	|	Таблица.СуммаДоходов КАК СуммаДоходов
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.УстановитьПараметр("Таблица", ТаблицаПредоплатаДоходыИРасходыОтложенные);
	Запрос.УстановитьПараметр("Статья", Статья);
	
	Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", ТаблицаЗапасыДоходыИРасходыОтложенные);
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыОтложенные()

Процедура СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаДокумента.Финиш КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ВестиРасчетыПоДокументам
	|			ТОГДА ТаблицаДокумента.Документ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Документ,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыНераспределенные()

Процедура СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КассовыйМетодУчетаДоходовИРасходов", СтруктураДополнительныеСвойства.УчетнаяПолитика.КассовыйМетодУчетаДоходовИРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Финиш КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ТаблицаДокумента.Статья КАК Статья,
	|	-ТаблицаДокумента.Сумма КАК СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплата КАК ТаблицаДокумента,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	&КассовыйМетодУчетаДоходовИРасходов
	|	И НЕ ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|	И НЕ ТаблицаДокумента.ЭтоЭквайринговаяОперация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Период,
	|	Таблица.Организация,
	|	Таблица.НаправлениеДеятельности,
	|	Таблица.Статья,
	|	Таблица.СуммаДоходов
	|ИЗ
	|	ВременнаяТаблицаПредоплатаДоходыИРасходыОтложенные КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаДоходыИРасходыКассовыйМетод()

Процедура СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗаказыПокупателей.Период КАК Период,
	|	ТаблицаЗаказыПокупателей.Организация КАК Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика КАК Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.КоличествоПлан) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаЗаказыПокупателей
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество)
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗаказыПокупателей
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Период,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗаказыПокупателей.Финиш,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество)
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаЗаказыПокупателей,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Финиш,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗаказыПокупателей.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗаказыПокупателей.Финиш,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя,
	|	СУММА(ТаблицаЗаказыПокупателей.Количество)
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗаказыПокупателей,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказыПокупателей.Финиш,
	|	ТаблицаЗаказыПокупателей.Организация,
	|	ТаблицаЗаказыПокупателей.Номенклатура,
	|	ТаблицаЗаказыПокупателей.Характеристика,
	|	ТаблицаЗаказыПокупателей.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗаказыПокупателей()

Процедура СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасыНаСкладах.Финиш КАК Период,
	|	ТаблицаЗапасыНаСкладах.Организация КАК Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия КАК Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка КАК Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество) КАК Количество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад
	|	И ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыНаСкладах.Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасыНаСкладах.Ячейка,
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество)
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	НЕ ТаблицаЗапасыНаСкладах.ОрдерныйСклад
	|	И ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасыНаСкладах.Ячейка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка),
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество)
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыНаСкладах.НомерСтроки),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка),
	|	СУММА(ТаблицаЗапасыНаСкладах.Количество)
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасыНаСкладах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасыНаСкладах.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыНаСкладах.Финиш,
	|	ТаблицаЗапасыНаСкладах.Организация,
	|	ТаблицаЗапасыНаСкладах.Номенклатура,
	|	ТаблицаЗапасыНаСкладах.Характеристика,
	|	ТаблицаЗапасыНаСкладах.Партия,
	|	ТаблицаЗапасыНаСкладах.СтруктурнаяЕдиница";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыНаСкладах()

Процедура СформироватьТаблицаЗапасыКРасходуСоСкладов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Количество КАК Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Количество
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасы.ОрдерныйСклад
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыКРасходуСоСкладов()

Процедура СформироватьТаблицаНачисленияИУдержания(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачисленияИУдержания.Организация КАК Организация,
	|	ТаблицаНачисленияИУдержания.Период КАК Период,
	|	ТаблицаНачисленияИУдержания.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачисленияИУдержания.Валюта КАК Валюта,
	|	ТаблицаНачисленияИУдержания.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаНачисленияИУдержания.Сотрудник КАК Сотрудник,
	|	ТаблицаНачисленияИУдержания.ДатаНачала КАК ДатаНачала,
	|	ТаблицаНачисленияИУдержания.ДатаОкончания КАК ДатаОкончания,
	|	ТаблицаНачисленияИУдержания.ОтработаноДней КАК ОтработаноДней,
	|	ТаблицаНачисленияИУдержания.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ТаблицаНачисленияИУдержания.Размер КАК Размер,
	|	ТаблицаНачисленияИУдержания.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ТаблицаНачисленияИУдержания.СуммаВал КАК СуммаВал,
	|	ТаблицаНачисленияИУдержания.Сумма КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаНачисленияИУдержания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияИУдержания", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

Процедура СформироватьТаблицаРасчетыСПерсоналом(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасчетыСПерсоналом.Организация КАК Организация,
	|	ТаблицаРасчетыСПерсоналом.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаРасчетыСПерсоналом.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаРасчетыСПерсоналом.Валюта КАК Валюта,
	|	ТаблицаРасчетыСПерсоналом.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаРасчетыСПерсоналом.Сотрудник КАК Сотрудник,
	|	ТаблицаРасчетыСПерсоналом.Сумма КАК Сумма,
	|	ТаблицаРасчетыСПерсоналом.СуммаВал КАК СуммаВал,
	|	ТаблицаРасчетыСПерсоналом.СчетУчета КАК СчетУчета,
	|	&НачислениеЗарплаты КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаРасчетыСПерсоналом";
	
	Запрос.УстановитьПараметр("НачислениеЗарплаты", НСтр("ru = 'Начисление зарплаты'"));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПерсоналом", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

Процедура СформироватьТаблицаПродажи(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Финиш КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.Характеристика КАК Характеристика,
	|	ТаблицаПродажи.Партия КАК Партия,
	|	ТаблицаПродажи.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаПродажи.Документ КАК Документ,
	|	ТаблицаПродажи.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПродажи.СтруктурнаяЕдиница КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Ответственный,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСПродажи) КАК СуммаНДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Сумма,
	|	0 КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаПродажи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Финиш,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.СтруктурнаяЕдиница,
	|	ТаблицаПродажи.Ответственный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродажи.Финиш,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи,
	|	ТаблицаПродажи.Ответственный,
	|	СУММА(ТаблицаПродажи.Количество),
	|	СУММА(ТаблицаПродажи.СуммаНДСЗакупкиПродажи),
	|	СУММА(ТаблицаПродажи.Сумма),
	|	0
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаПродажи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Финиш,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.Характеристика,
	|	ТаблицаПродажи.Партия,
	|	ТаблицаПродажи.ЗаказПокупателя,
	|	ТаблицаПродажи.Документ,
	|	ТаблицаПродажи.СтавкаНДС,
	|	ТаблицаПродажи.ПодразделениеПродажи,
	|	ТаблицаПродажи.Ответственный";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

Процедура СформироватьТаблицаПотребностьВЗапасах(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаПотребностьВЗапасах.Старт, ДЕНЬ) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаПотребностьВЗапасах.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ВЫБОР
	|		КОГДА Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|			ТОГДА ТаблицаПотребностьВЗапасах.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаПотребностьВЗапасах.Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика,
	|	ТаблицаПотребностьВЗапасах.Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаПотребностьВЗапасах,
	|	Константы КАК Константы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПотребностьВЗапасах.НомерСтроки,
	|	НАЧАЛОПЕРИОДА(ТаблицаПотребностьВЗапасах.Финиш, ДЕНЬ),
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаПотребностьВЗапасах.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка),
	|	ВЫБОР
	|		КОГДА Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|			ТОГДА ТаблицаПотребностьВЗапасах.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаПотребностьВЗапасах.Номенклатура,
	|	ТаблицаПотребностьВЗапасах.Характеристика,
	|	ТаблицаПотребностьВЗапасах.Количество
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаПотребностьВЗапасах,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка,
	|	Константы КАК Константы
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПотребностьВЗапасах.НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

Процедура СформироватьТаблицаЗапасыПринятые(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыПринятые.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыПринятые.Финиш КАК Период,
	|	ТаблицаЗапасыПринятые.Организация КАК Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика КАК Характеристика,
	|	ТаблицаЗапасыПринятые.Партия КАК Партия,
	|	ТаблицаЗапасыПринятые.Заказ КАК Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчета КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПриемаПередачиТоваров.ОтчетКомитенту) КАК ТипПриемаПередачи,
	|	СУММА(ТаблицаЗапасыПринятые.Количество) КАК Количество,
	|	0 КАК СуммаРасчетов,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК Сумма,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК СуммаПродажи,
	|	&ВалютаУпрУчета КАК Валюта,
	|	СУММА(ТаблицаЗапасыПринятые.Сумма) КАК СуммаВал,
	|	ВЫРАЗИТЬ(&ПриемЗапасовТоварыНаКомиссии КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасыПринятые,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаЗапасыПринятые.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И ТаблицаЗапасыПринятые.ТоварыНаКомиссии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыПринятые.Финиш,
	|	ТаблицаЗапасыПринятые.Организация,
	|	ТаблицаЗапасыПринятые.Номенклатура,
	|	ТаблицаЗапасыПринятые.Характеристика,
	|	ТаблицаЗапасыПринятые.Партия,
	|	ТаблицаЗапасыПринятые.Заказ,
	|	ТаблицаЗапасыПринятые.СчетУчета";
	
	Запрос.УстановитьПараметр("ПриемЗапасовТоварыНаКомиссии", НСтр("ru = 'Прием запасов'"));
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаЗапасыПринятые()

Процедура СформироватьТаблицаЗапасыРаботы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Финиш КАК Период,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|			ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	0 КАК Сумма,
	|	СУММА(ТаблицаЗапасы.СуммаНДС) КАК СуммаНДС,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&СборкаЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка) КАК КоррСтруктурнаяЕдиница,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ПустаяСсылка) КАК КоррСчетУчета,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК КоррНоменклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК КоррХарактеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК КоррСпецификация
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка,
	|	Константы КАК Константы
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Финиш,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	Константы.ФункциональнаяОпцияРезервированиеЗапасов,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета";
	
	Запрос.УстановитьПараметр("СборкаЗапасов", НСтр("ru = 'Сборка запасов'"));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", РезультатЗапроса.Выгрузить());
	
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	ЗаказПустаяСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		КоличествоТребуется = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуется > 0 Тогда
			
			// Добавим выпуск работы.
			СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыПриход.ДокументПродажи = Неопределено;
			СтрокаТаблицыПриход.ЗаказПродажи = Неопределено;
			СтрокаТаблицыПриход.Подразделение = Неопределено;
			СтрокаТаблицыПриход.Ответственный = Неопределено;
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			СуммаКСписанию = 0;
			
			// Добавим реализацию работы.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru = 'Списание запасов'");
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
				
		КонецЕсли;
			
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

Процедура СформироватьТаблицаЗапасыМатериалы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	// Автосписание
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.Финиш КАК Период,
	|	ТаблицаЗапасы.Период КАК ДатаДокумента,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ТаблицаЗапасы.ВариантЗавершения КАК ВариантЗавершения,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПродажи,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказПродажи,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК Ответственный,
	|	ТаблицаЗапасы.СчетУчета КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетКт,
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда,
	|	&ПеремещениеЗапасов КАК Содержание,
	|	&ПеремещениеЗапасов КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.РезервОтгрузка) КАК РезервОтгрузка,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)

	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Финиш,
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.СостояниеЗаказа,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.ВариантЗавершения,
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов";
	
	Запрос.УстановитьПараметр("ПеремещениеЗапасов", НСтр("ru = 'Перемещение запасов'"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПеремещение", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|		ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|	ГДЕ
	|		ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|		ТаблицаЗапасы.СчетУчетаЗапасов,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|		ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|	ГДЕ
	|		ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|						ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|						И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток),
	|		СУММА(ЗапасыОстатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ИЗ
	|						ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|						ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|					ГДЕ
	|						ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|						И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен))) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия,
	|		ЗапасыОстатки.ЗаказПокупателя
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия,
	|	ЗапасыОстатки.ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Финиш, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Финиш);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
	
	ВременнаяТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.СкопироватьКолонки();
	
	ПустаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПустойСчетУчета = ПланыСчетов.Управленческий.ПустаяСсылка();
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяПартия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
	ПустаяСпецификация = Справочники.Спецификации.ПустаяСсылка();
	ПустойЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	РезервированиеЗапасов = Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтруктураДляПоискаПеремещение = Новый Структура;
		СтруктураДляПоискаПеремещение.Вставить("Организация", СтрокаТаблицаЗапасыПеремещение.Организация);
		СтруктураДляПоискаПеремещение.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница);
		СтруктураДляПоискаПеремещение.Вставить("СчетУчета", СтрокаТаблицаЗапасыПеремещение.СчетУчета);
		СтруктураДляПоискаПеремещение.Вставить("Номенклатура", СтрокаТаблицаЗапасыПеремещение.Номенклатура);
		СтруктураДляПоискаПеремещение.Вставить("Характеристика", СтрокаТаблицаЗапасыПеремещение.Характеристика);
		СтруктураДляПоискаПеремещение.Вставить("Партия", СтрокаТаблицаЗапасыПеремещение.Партия);
		
		КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
		КоличествоРезервОтгрузкаПеремещение = СтрокаТаблицаЗапасыПеремещение.РезервОтгрузка;
		КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
		
		Если КоличествоТребуетсяРезервПеремещение > 0 Тогда
			
			// Резервирование
			
			СтрокаТаблицаЗапасыПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
			
			КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяРезервПеремещение Тогда
				
				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяРезервПеремещение / КоличествоОстатокПеремещение , 2, 1);
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяРезервПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
				
			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяРезервПеремещение Тогда
				
				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			СтрокаТаблицыРасходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.ДатаДокумента;
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
			СтрокаТаблицыРасходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
			
			// Приход.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезервПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				СтрокаТаблицыПриходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.ДатаДокумента;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
				
			КонецЕсли;
			
			Если СтрокаТаблицаЗапасыПеремещение.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен
				И СтрокаТаблицаЗапасыПеремещение.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно Тогда
				
				// Перемещение
				
				ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
				ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
				
				КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
				КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
				КоличествоТребуетсяРезервОтгрузкаПеремещение = СтрокаТаблицаЗапасыПеремещение.РезервОтгрузка;
				
				КоличествоРезервОтгрузкаПеремещение = КоличествоТребуетсяРезервОтгрузкаПеремещение - КоличествоТребуетсяРезервПеремещение;
				Если КоличествоРезервОтгрузкаПеремещение > 0 Тогда
					КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение - КоличествоРезервОтгрузкаПеремещение;
				Иначе
					КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
				КонецЕсли;
				
				СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
				
				МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
				
				КоличествоОстатокПеремещение = 0;
				СуммаОстатокПеремещение = 0;
				
				Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
					КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
					СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
				КонецЕсли;
				
				Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяРезервПеремещение Тогда
					
					СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяРезервПеремещение / КоличествоОстатокПеремещение , 2, 1);
					
					МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяРезервПеремещение;
					МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
					
				ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяРезервПеремещение Тогда
					
					СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
					
					МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
					МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
					
				Иначе
					СуммаКСписаниюПеремещение = 0;
				КонецЕсли;
				
				// Расход.
				СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыРасходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.Период;
				СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
				СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
					СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
				КонецЕсли;
				
				// Приход.
				Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезервПеремещение > 0 Тогда
					
					СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
					
					СтрокаТаблицыПриходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.Период;
					СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
					
					СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
					СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
					СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
					СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
					СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
					СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
					СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
					
					СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.КоррЗаказПокупателя;
					
					СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
					СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
					СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
					СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
					СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
					СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
					
					СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
					
					СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
					
					СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяРезервПеремещение;
					
					СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоРезервОтгрузкаПеремещение > 0 
			И СтрокаТаблицаЗапасыПеремещение.ЭтоСостояниеВыполненияЗаказНаряда Тогда

			
			// Перемещение зарезервированных материалов др. документами.
			
			КоличествоТребуетсяРезервПеремещение = СтрокаТаблицаЗапасыПеремещение.Резерв;
			КоличествоТребуетсяСвободныйОстатокПеремещение = СтрокаТаблицаЗапасыПеремещение.Количество;
			КоличествоТребуетсяРезервОтгрузкаПеремещение = СтрокаТаблицаЗапасыПеремещение.РезервОтгрузка;
			
			КоличествоРезервОтгрузкаПеремещение = КоличествоТребуетсяРезервОтгрузкаПеремещение - КоличествоТребуетсяРезервПеремещение;
			Если КоличествоРезервОтгрузкаПеремещение > 0 Тогда
				КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение - КоличествоРезервОтгрузкаПеремещение;
			Иначе
				КоличествоТребуетсяСвободныйОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение - КоличествоТребуетсяРезервПеремещение;
			КонецЕсли;
			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ДокументСсылкаЗаказПокупателя);
			
			МассивСтрокОстатковОтгрузкаПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокОтгрузкаПеремещение = 0;
			СуммаОстатокОтгрузкаПеремещение = 0;
			
			Если МассивСтрокОстатковОтгрузкаПеремещение.Количество() > 0 Тогда
				КоличествоОстатокОтгрузкаПеремещение = МассивСтрокОстатковОтгрузкаПеремещение[0].КоличествоОстаток;
				СуммаОстатокОтгрузкаПеремещение = МассивСтрокОстатковОтгрузкаПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокОтгрузкаПеремещение > 0 И КоличествоОстатокОтгрузкаПеремещение > КоличествоРезервОтгрузкаПеремещение Тогда
				
				СуммаКСписаниюОтгрузкаПеремещение = Окр(СуммаОстатокОтгрузкаПеремещение * КоличествоРезервОтгрузкаПеремещение / КоличествоОстатокОтгрузкаПеремещение , 2, 1);
				
				МассивСтрокОстатковОтгрузкаПеремещение[0].КоличествоОстаток = МассивСтрокОстатковОтгрузкаПеремещение[0].КоличествоОстаток - КоличествоРезервОтгрузкаПеремещение;
				МассивСтрокОстатковОтгрузкаПеремещение[0].СуммаОстаток = МассивСтрокОстатковОтгрузкаПеремещение[0].СуммаОстаток - СуммаКСписаниюОтгрузкаПеремещение;
				
			ИначеЕсли КоличествоОстатокОтгрузкаПеремещение = КоличествоРезервОтгрузкаПеремещение Тогда
				
				СуммаКСписаниюОтгрузкаПеремещение = СуммаОстатокОтгрузкаПеремещение;
				
				МассивСтрокОстатковОтгрузкаПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковОтгрузкаПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюОтгрузкаПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.Период;
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюОтгрузкаПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоРезервОтгрузкаПеремещение;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюОтгрузкаПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюОтгрузкаПеремещение;
			КонецЕсли;
			
			// Приход.
			Если Окр(СуммаКСписаниюОтгрузкаПеремещение, 2, 1) <> 0 ИЛИ КоличествоРезервОтгрузкаПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.Период = СтрокаТаблицаЗапасыПеремещение.Период;
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.КоррЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = СтрокаТаблицаЗапасыПеремещение.ЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюОтгрузкаПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоРезервОтгрузкаПеремещение;
				
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстатокПеремещение > 0
			И СтрокаТаблицаЗапасыПеремещение.ЭтоСостояниеВыполненияЗаказНаряда Тогда

			
			СтруктураДляПоискаПеремещение.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатковПеремещение = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоискаПеремещение);
			
			КоличествоОстатокПеремещение = 0;
			СуммаОстатокПеремещение = 0;
			
			Если МассивСтрокОстатковПеремещение.Количество() > 0 Тогда
				КоличествоОстатокПеремещение = МассивСтрокОстатковПеремещение[0].КоличествоОстаток;
				СуммаОстатокПеремещение = МассивСтрокОстатковПеремещение[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстатокПеремещение > 0 И КоличествоОстатокПеремещение > КоличествоТребуетсяСвободныйОстатокПеремещение Тогда
				
				СуммаКСписаниюПеремещение = Окр(СуммаОстатокПеремещение * КоличествоТребуетсяСвободныйОстатокПеремещение / КоличествоОстатокПеремещение , 2, 1);
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = МассивСтрокОстатковПеремещение[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстатокПеремещение;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = МассивСтрокОстатковПеремещение[0].СуммаОстаток - СуммаКСписаниюПеремещение;
				
			ИначеЕсли КоличествоОстатокПеремещение = КоличествоТребуетсяСвободныйОстатокПеремещение Тогда
				
				СуммаКСписаниюПеремещение = СуммаОстатокПеремещение;
				
				МассивСтрокОстатковПеремещение[0].КоличествоОстаток = 0;
				МассивСтрокОстатковПеремещение[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписаниюПеремещение = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасходПеремещение, СтрокаТаблицаЗапасыПеремещение);
			
			СтрокаТаблицыРасходПеремещение.Сумма = СуммаКСписаниюПеремещение;
			СтрокаТаблицыРасходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
			СтрокаТаблицыРасходПеремещение.ЗаказПокупателя = ПустойЗаказПокупателя;
			СтрокаТаблицыРасходПеремещение.Спецификация = Неопределено;
			СтрокаТаблицыРасходПеремещение.КоррСпецификация = Неопределено;
			
			Если НЕ РезервированиеЗапасов Тогда
				СтрокаТаблицыРасходПеремещение.КоррЗаказПокупателя = ПустойЗаказПокупателя;
			КонецЕсли;
			
			// Сформируем проводки.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 Тогда
				СтрокаТаблицаУправленческийПеремещение = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческийПеремещение, СтрокаТаблицаЗапасыПеремещение);
				СтрокаТаблицаУправленческийПеремещение.Сумма = СуммаКСписаниюПеремещение;
			КонецЕсли;
			
			// Приход.
			Если Окр(СуммаКСписаниюПеремещение, 2, 1) <> 0 ИЛИ КоличествоТребуетсяСвободныйОстатокПеремещение > 0 Тогда
				
				СтрокаТаблицыПриходПеремещение = ВременнаяТаблицаЗапасыПеремещение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриходПеремещение, СтрокаТаблицаЗапасыПеремещение);
				
				СтрокаТаблицыПриходПеремещение.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриходПеремещение.Организация = СтрокаТаблицаЗапасыПеремещение.Организация;
				СтрокаТаблицыПриходПеремещение.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				СтрокаТаблицыПриходПеремещение.Номенклатура = СтрокаТаблицаЗапасыПеремещение.КоррНоменклатура;
				СтрокаТаблицыПриходПеремещение.Характеристика = СтрокаТаблицаЗапасыПеремещение.КоррХарактеристика;
				СтрокаТаблицыПриходПеремещение.Партия = СтрокаТаблицаЗапасыПеремещение.КоррПартия;
				СтрокаТаблицыПриходПеремещение.Спецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыПеремещение.СтруктурнаяЕдиница;
				СтрокаТаблицыПриходПеремещение.КоррСчетУчета = СтрокаТаблицаЗапасыПеремещение.СчетУчета;
				СтрокаТаблицыПриходПеремещение.КоррНоменклатура = СтрокаТаблицаЗапасыПеремещение.Номенклатура;
				СтрокаТаблицыПриходПеремещение.КоррХарактеристика = СтрокаТаблицаЗапасыПеремещение.Характеристика;
				СтрокаТаблицыПриходПеремещение.КоррПартия = СтрокаТаблицаЗапасыПеремещение.Партия;
				СтрокаТаблицыПриходПеремещение.КоррСпецификация = Неопределено;
				
				СтрокаТаблицыПриходПеремещение.КоррЗаказПокупателя = ПустойЗаказПокупателя;
				
				СтрокаТаблицыПриходПеремещение.Сумма = СуммаКСписаниюПеремещение;
				
				СтрокаТаблицыПриходПеремещение.Количество = КоличествоТребуетсяСвободныйОстатокПеремещение;
				
				СтрокаТаблицыПриходПеремещение.СчетУчета = СтрокаТаблицаЗапасыПеремещение.КоррСчетУчета;
				
				Если РезервированиеЗапасов Тогда
					СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				Иначе
					СтрокаТаблицыПриходПеремещение.ЗаказПокупателя = ПустойЗаказПокупателя;
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение = ВременнаяТаблицаЗапасыПеремещение;
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыПеремещение[н];
		
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);

	КонецЦикла;
	
	// Конец Автосписание
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаЗапасы.Финиш КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов КАК СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасы.Спецификация КАК Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация КАК КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СчетДт КАК СчетДт,
	|	ТаблицаЗапасы.СчетКт КАК СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК Содержание,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Резерв) КАК Резерв,
	|	СУММА(ТаблицаЗапасы.РезервОтгрузка) КАК РезервОтгрузка,
	|	0 КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаМатериалы КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Финиш,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СценарийПланирования,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.СчетУчетаЗапасов,
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.Спецификация,
	|	ТаблицаЗапасы.КоррСпецификация,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СчетДт,
	|	ТаблицаЗапасы.СчетКт,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыЗапасы", Запрос.Выполнить().Выгрузить());
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиницаЗапасов);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчетаЗапасов);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		КоличествоТребуетсяРезервОтгрузка = СтрокаТаблицаЗапасы.РезервОтгрузка;
		КоличествоТребуетсяСвободныйОстаток = СтрокаТаблицаЗапасы.Количество;
		
		ТаблицаЗапасыОстаткиПеремещение = РезультатЗапроса.Выгрузить();
		ТаблицаЗапасыОстаткиПеремещение.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоТребуетсяРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Спишем материалы, которые зарезервированны др. документами.
		КоличествоОтгрузкаРезерв = КоличествоТребуетсяРезервОтгрузка - КоличествоТребуетсяРезерв;
		Если КоличествоОтгрузкаРезерв > 0 Тогда
			
			КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоОтгрузкаРезерв;
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", ДокументСсылкаЗаказПокупателя);
			
			МассивСтрокОтгрузкаОстатков = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОтгрузкаОстаток = 0;
			СуммаОтгрузкаОстаток = 0;
			
			Если МассивСтрокОтгрузкаОстатков.Количество() > 0 Тогда
				КоличествоОтгрузкаОстаток = МассивСтрокОтгрузкаОстатков[0].КоличествоОстаток;
				СуммаОтгрузкаОстаток = МассивСтрокОтгрузкаОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОтгрузкаОстаток > 0 И КоличествоОтгрузкаОстаток > КоличествоОтгрузкаРезерв Тогда
				
				СуммаОтгрузкаКСписанию = Окр(СуммаОтгрузкаОстаток * КоличествоОтгрузкаРезерв / КоличествоОтгрузкаОстаток , 2, 1);
				
				МассивСтрокОтгрузкаОстатков[0].КоличествоОстаток = МассивСтрокОтгрузкаОстатков[0].КоличествоОстаток - КоличествоОтгрузкаРезерв;
				МассивСтрокОтгрузкаОстатков[0].СуммаОстаток = МассивСтрокОтгрузкаОстатков[0].СуммаОстаток - СуммаОтгрузкаКСписанию;
				
			ИначеЕсли КоличествоОтгрузкаОстаток = КоличествоОтгрузкаРезерв Тогда
				
				СуммаОтгрузкаКСписанию = СуммаОтгрузкаОстаток;
				
				МассивСтрокОтгрузкаОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОтгрузкаОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаОтгрузкаКСписанию = 0;
			КонецЕсли;
			
			// Спишем запасы со склада (производственного подразделения).
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			СтрокаТаблицыРасход.Сумма = СуммаОтгрузкаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоОтгрузкаРезерв;
			
			// Отнесем списанные запасы либо на стоимость запасов на складе либо на затраты НЗП.
			Если Окр(СуммаОтгрузкаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.Сумма = СуммаОтгрузкаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				// Сформируем проводки.
				Если Окр(СуммаОтгрузкаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстаткиПеремещение.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);
				
				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;
				
			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда
				
				СуммаКСписанию = СуммаОстаток;
				
				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;
				
			Иначе
				СуммаКСписанию = 0;
			КонецЕсли;
			
			// Расход.
			СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
			СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;
			
			Если РезервированиеЗапасов Тогда
				СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
			Иначе
				СтрокаТаблицыРасход.ЗаказПокупателя = ПустойЗаказПокупателя;
				СтрокаТаблицыРасход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
			КонецЕсли;
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
				
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасы.КоррСпецификация;
				
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасы.Спецификация;
				
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = 0;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				
				Если РезервированиеЗапасов Тогда
					СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				Иначе
					СтрокаТаблицыПриход.ЗаказПокупателя = ПустойЗаказПокупателя;
					СтрокаТаблицыПриход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
				КонецЕсли;
				
				// Сформируем проводки.
				Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицыПриход);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	
КонецПроцедуры // СформироватьТаблицаЗапасыМатериалы()

Процедура СформироватьТаблицаЗапасыИсполнители(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасыИсполнители.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЗапасыИсполнители.СценарийПланирования КАК СценарийПланирования,
	|	ТаблицаЗапасыИсполнители.Период КАК Период,
	|	ТаблицаЗапасыИсполнители.Организация КАК Организация,
	|	ТаблицаЗапасыИсполнители.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасыИсполнители.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасыИсполнители.СчетУчетаЗапасов КАК СчетУчета,
	|	ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов КАК КоррСчетУчета,
	|	ТаблицаЗапасыИсполнители.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасыИсполнители.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасыИсполнители.КоррПартия КАК КоррПартия,
	|	ТаблицаЗапасыИсполнители.КоррСпецификация КАК КоррСпецификация,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК Спецификация,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ВЫБОР
	|		КОГДА Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|			ТОГДА ТаблицаЗапасыИсполнители.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА Константы.ФункциональнаяОпцияРезервированиеЗапасов
	|			ТОГДА ТаблицаЗапасыИсполнители.ЗаказПокупателя
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	КОНЕЦ КАК КоррЗаказПокупателя,
	|	СУММА(ТаблицаЗапасыИсполнители.Сумма) КАК Сумма,
	|	ИСТИНА КАК ФиксированнаяСтоимость,
	|	ЛОЖЬ КАК ЗатратыНаВыпуск,
	|	&НачислениеЗарплаты КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаЗапасыИсполнители,
	|	Константы КАК Константы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасыИсполнители.Период,
	|	ТаблицаЗапасыИсполнители.СценарийПланирования,
	|	ТаблицаЗапасыИсполнители.СчетУчетаЗапасов,
	|	ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов,
	|	ТаблицаЗапасыИсполнители.КоррНоменклатура,
	|	ТаблицаЗапасыИсполнители.КоррХарактеристика,
	|	ТаблицаЗапасыИсполнители.КоррПартия,
	|	ТаблицаЗапасыИсполнители.КоррСпецификация,
	|	ТаблицаЗапасыИсполнители.Организация,
	|	ТаблицаЗапасыИсполнители.СтруктурнаяЕдиница,
	|	ТаблицаЗапасыИсполнители.ЗаказПокупателя,
	|	Константы.ФункциональнаяОпцияРезервированиеЗапасов,
	|	ТаблицаЗапасыИсполнители.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапасыИсполнители.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасыИсполнители.Период КАК Период,
	|	ТаблицаЗапасыИсполнители.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаЗапасыИсполнители.СчетУчетаЗапасов КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаЗапасыИсполнители.СчетУчета КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчета.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчета.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаЗапасыИсполнители.Сумма КАК Сумма,
	|	&НачислениеЗарплаты КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаЗапасыИсполнители
	|ГДЕ
	|	ТаблицаЗапасыИсполнители.Сумма > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапасыИсполнители.НомерСтроки,
	|	ТаблицаЗапасыИсполнители.Период,
	|	ТаблицаЗапасыИсполнители.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.КоррСчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаЗапасыИсполнители.СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаЗапасыИсполнители.СчетУчетаЗапасов.Валютный
	|			ТОГДА ТаблицаЗапасыИсполнители.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаЗапасыИсполнители.Сумма,
	|	&РазноскаЗарплаты
	|ИЗ
	|	ВременнаяТаблицаИсполнители КАК ТаблицаЗапасыИсполнители
	|ГДЕ
	|	ТаблицаЗапасыИсполнители.Сумма > 0";
	
	Запрос.УстановитьПараметр("НачислениеЗарплаты", НСтр("ru = 'Начисление зарплаты'"));	
	Запрос.УстановитьПараметр("РазноскаЗарплаты", 	НСтр("ru = 'Отнесение затрат на продукцию'"));	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗапасыИсполнители = МассивРезультатов[0].Выгрузить();
	ТаблицаУправленческий = МассивРезультатов[1].Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаУправленческий Цикл
		СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицы);	
	КонецЦикла; 
	
	ПустаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПустойСчетУчета = ПланыСчетов.Управленческий.ПустаяСсылка();
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяПартия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
    ПустаяСпецификация = Справочники.Спецификации.ПустаяСсылка();
    ПустойЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	Для н = 0 По ТаблицаЗапасыИсполнители.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасыИсполнители = ТаблицаЗапасыИсполнители[н];
		
		// Оприходуем затраты по зарплате в НЗП.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыИсполнители);
		
		СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = ПустаяСтруктурнаяЕдиница;
		СтрокаТаблицыПриход.КоррСчетУчета = ПустойСчетУчета;
		СтрокаТаблицыПриход.КоррНоменклатура = ПустаяНоменклатура;
		СтрокаТаблицыПриход.КоррХарактеристика = ПустаяХарактеристика;
		СтрокаТаблицыПриход.КоррПартия = ПустаяПартия;
		СтрокаТаблицыПриход.КоррСпецификация = ПустаяСпецификация;
		СтрокаТаблицыПриход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
		
		// Спишем их на продукцию.
		СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасыИсполнители);
		СтрокаТаблицыРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
		СтрокаТаблицыРасход.ФиксированнаяСтоимость = Ложь;
		СтрокаТаблицыРасход.ЗатратыНаВыпуск = Истина;

		// Включим в себестоимость продукции.
		СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасыИсполнители);
		
		СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасыИсполнители.КоррСтруктурнаяЕдиница;
		СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасыИсполнители.КоррСчетУчета;
		СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасыИсполнители.КоррНоменклатура;
		СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасыИсполнители.КоррХарактеристика;
		СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасыИсполнители.КоррПартия;
		СтрокаТаблицыПриход.Спецификация = СтрокаТаблицаЗапасыИсполнители.КоррСпецификация;
		СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасыИсполнители.КоррЗаказПокупателя;
		
		СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасыИсполнители.СтруктурнаяЕдиница;
		СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасыИсполнители.СчетУчета;
		СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасыИсполнители.Номенклатура;
		СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасыИсполнители.Характеристика;
		СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасыИсполнители.Партия;
		СтрокаТаблицыПриход.КоррСпецификация = СтрокаТаблицаЗапасыИсполнители.Спецификация;
		СтрокаТаблицыПриход.КоррЗаказПокупателя = СтрокаТаблицаЗапасыИсполнители.ЗаказПокупателя;
		
		СтрокаТаблицыПриход.ФиксированнаяСтоимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

Процедура СформироватьТаблицаЗапасыТовары(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЗапасы.Финиш КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|				И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выполнен,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаЗапасы.Документ КАК Документ,
	|	ТаблицаЗапасы.Документ КАК ДокументПродажи,
	|	ТаблицаЗапасы.Заказ КАК ЗаказПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК Подразделение,
	|	ТаблицаЗапасы.Ответственный КАК Ответственный,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи КАК НаправлениеДеятельности,
	|	ТаблицаЗапасы.ПодразделениеПродажи КАК ПодразделениеПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.КоррОрганизация КАК КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)) КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.КоррСчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии КАК ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.КоррПартия КАК КоррПартия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказ КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.Количество КАК Количество,
	|	ТаблицаЗапасы.Резерв КАК Резерв,
	|	ТаблицаЗапасы.РезервОтгрузка КАК РезервОтгрузка,
	|	ТаблицаЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаЗапасы.СуммаНДС КАК СуммаНДС,
	|	ТаблицаЗапасы.Сумма КАК Сумма,
	|	0 КАК Себестоимость,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость КАК СчетДт,
	|	ТаблицаЗапасы.СчетУчета КАК СчетКт,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ВЫРАЗИТЬ(&СписаниеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаЗапасы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ТаблицаЗапасы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|				И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаЗапасы.Финиш,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.Заказ,
	|	ТаблицаЗапасы.НаправлениеДеятельностиПродажи,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.Ответственный,
	|	ТаблицаЗапасы.КоррОрганизация,
	|	ЕСТЬNULL(ТаблицаЗапасы.КоррСтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ТаблицаЗапасы.КоррСчетУчета,
	|	ТаблицаЗапасы.ТоварыНаКомиссии,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.КоррХарактеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.КоррПартия,
	|	ТаблицаЗапасы.КоррЗаказ,
	|	ТаблицаЗапасы.Количество,
	|	ТаблицаЗапасы.Резерв,
	|	ТаблицаЗапасы.РезервОтгрузка,
	|	ТаблицаЗапасы.СтавкаНДС,
	|	ТаблицаЗапасы.СуммаНДС,
	|	ТаблицаЗапасы.Сумма,
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета,
	|	ЕСТЬNULL(ТаблицаЗапасы.СтруктурнаяЕдиница, ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)),
	|	ТаблицаЗапасы.Документ,
	|	ТаблицаЗапасы.ПодразделениеПродажи,
	|	ТаблицаЗапасы.СчетУчетаСебестоимость,
	|	ТаблицаЗапасы.СчетУчета";
	
	Запрос.УстановитьПараметр("СписаниеЗапасов", НСтр("ru = 'Списание запасов'"));
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыЗапасы", Запрос.Выполнить().Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация КАК Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|		ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ТаблицаЗапасы.Партия КАК Партия,
	|		ВЫБОР
	|			КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				ТОГДА ТаблицаЗапасы.Заказ
	|			ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|		КОНЕЦ КАК ЗаказПокупателя
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ТаблицаЗапасы
	|	ГДЕ
	|		ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаЗапасы.Организация,
	|		ТаблицаЗапасы.СтруктурнаяЕдиница,
	|		ТаблицаЗапасы.СчетУчета,
	|		ТаблицаЗапасы.Номенклатура,
	|		ТаблицаЗапасы.Характеристика,
	|		ТаблицаЗапасы.Партия,
	|		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ТаблицаЗапасы) КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Блокировка = Новый БлокировкаДанных;
    ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
    
    Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
    	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
    КонецЦикла;
    Блокировка.Заблокировать();
    
    // Получение остатков запасов по стоимости.
    Запрос.Текст =
    "ВЫБРАТЬ
    |	ЗапасыОстатки.Организация КАК Организация,
    |	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
    |	ЗапасыОстатки.СчетУчета КАК СчетУчета,
    |	ЗапасыОстатки.Номенклатура КАК Номенклатура,
    |	ЗапасыОстатки.Характеристика КАК Характеристика,
    |	ЗапасыОстатки.Партия КАК Партия,
    |	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
    |	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
    |	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
    |ИЗ
    |	(ВЫБРАТЬ
    |		ЗапасыОстатки.Организация КАК Организация,
    |		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
    |		ЗапасыОстатки.СчетУчета КАК СчетУчета,
    |		ЗапасыОстатки.Номенклатура КАК Номенклатура,
    |		ЗапасыОстатки.Характеристика КАК Характеристика,
    |		ЗапасыОстатки.Партия КАК Партия,
    |		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
    |		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
    |		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
    |	ИЗ
    |		РегистрНакопления.Запасы.Остатки(
    |				&МоментКонтроля,
    |				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
    |					(ВЫБРАТЬ
    |						ТаблицаЗапасы.Организация КАК Организация,
    |						ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
    |						ТаблицаЗапасы.СчетУчета КАК СчетУчета,
    |						ТаблицаЗапасы.Номенклатура КАК Номенклатура,
    |						ТаблицаЗапасы.Характеристика КАК Характеристика,
    |						ТаблицаЗапасы.Партия КАК Партия,
    |						ВЫБОР
    |							КОГДА ТаблицаЗапасы.Заказ ССЫЛКА Документ.ЗаказПокупателя
    |								ТОГДА ТаблицаЗапасы.Заказ
    |							ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
    |						КОНЕЦ
    |					ИЗ
    |						ВременнаяТаблицаТовары КАК ТаблицаЗапасы
    |					ГДЕ
    |						ТаблицаЗапасы.Заказ <> НЕОПРЕДЕЛЕНО)) КАК ЗапасыОстатки
    |	
    |	СГРУППИРОВАТЬ ПО
    |		ЗапасыОстатки.Организация,
    |		ЗапасыОстатки.СтруктурнаяЕдиница,
    |		ЗапасыОстатки.СчетУчета,
    |		ЗапасыОстатки.Номенклатура,
    |		ЗапасыОстатки.Характеристика,
    |		ЗапасыОстатки.Партия,
    |		ЗапасыОстатки.ЗаказПокупателя
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		ЗапасыОстатки.Организация,
    |		ЗапасыОстатки.СтруктурнаяЕдиница,
    |		ЗапасыОстатки.СчетУчета,
    |		ЗапасыОстатки.Номенклатура,
    |		ЗапасыОстатки.Характеристика,
    |		ЗапасыОстатки.Партия,
    |		ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка),
    |		СУММА(ЗапасыОстатки.КоличествоОстаток),
    |		СУММА(ЗапасыОстатки.СуммаОстаток)
    |	ИЗ
    |		РегистрНакопления.Запасы.Остатки(
    |				&МоментКонтроля,
    |				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
    |					(ВЫБРАТЬ
    |						ТаблицаЗапасы.Организация,
    |						ТаблицаЗапасы.СтруктурнаяЕдиница,
    |						ТаблицаЗапасы.СчетУчета,
    |						ТаблицаЗапасы.Номенклатура,
    |						ТаблицаЗапасы.Характеристика,
    |						ТаблицаЗапасы.Партия,
    |						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
    |					ИЗ
    |						ВременнаяТаблицаТовары КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
    |	
    |	СГРУППИРОВАТЬ ПО
    |		ЗапасыОстатки.Организация,
    |		ЗапасыОстатки.СтруктурнаяЕдиница,
    |		ЗапасыОстатки.СчетУчета,
    |		ЗапасыОстатки.Номенклатура,
    |		ЗапасыОстатки.Характеристика,
    |		ЗапасыОстатки.Партия
    |	
    |	ОБЪЕДИНИТЬ ВСЕ
    |	
    |	ВЫБРАТЬ
    |		ДвиженияДокументаЗапасы.Организация,
    |		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
    |		ДвиженияДокументаЗапасы.СчетУчета,
    |		ДвиженияДокументаЗапасы.Номенклатура,
    |		ДвиженияДокументаЗапасы.Характеристика,
    |		ДвиженияДокументаЗапасы.Партия,
    |		ДвиженияДокументаЗапасы.ЗаказПокупателя,
    |		ВЫБОР
    |			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
    |				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
    |			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
    |		КОНЕЦ,
    |		ВЫБОР
    |			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
    |				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
    |			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
    |		КОНЕЦ
    |	ИЗ
    |		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
    |	ГДЕ
    |		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
    |		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля) КАК ЗапасыОстатки
    |
    |СГРУППИРОВАТЬ ПО
    |	ЗапасыОстатки.Организация,
    |	ЗапасыОстатки.СтруктурнаяЕдиница,
    |	ЗапасыОстатки.СчетУчета,
    |	ЗапасыОстатки.Номенклатура,
    |	ЗапасыОстатки.Характеристика,
    |	ЗапасыОстатки.Партия,
    |	ЗапасыОстатки.ЗаказПокупателя";
    
    Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Финиш, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.Ссылка.Финиш);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
    ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия,ЗаказПокупателя");
		
	ПустаяСтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ПустойСчетУчета = ПланыСчетов.Управленческий.ПустаяСсылка();
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустаяПартия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
    ПустойЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	РезервированиеЗапасов = Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить();
	
	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасыЗапасы[н];
				
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
				
		// Т.к. в заказе-наряде сами резервируем и сами списываем, то всегда списываем из свободного остатка все количество.
		КоличествоТребуетсяВсего = СтрокаТаблицаЗапасы.Количество;
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Резерв;
		КоличествоТребуетсяРезервОтгрузка = СтрокаТаблицаЗапасы.РезервОтгрузка;
		КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяВсего - КоличествоТребуетсяРезерв;
		
		Если КоличествоТребуетсяВсего > 0 Тогда
			
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", ПустойЗаказПокупателя);
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоТребуетсяРезерв > 0 Тогда // Нужно сделать резерв.
				
				Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда

					СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);

					МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
					МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

				ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда

					СуммаКСписанию = СуммаОстаток;

					МассивСтрокОстатков[0].КоличествоОстаток = 0;
					МассивСтрокОстатков[0].СуммаОстаток = 0;

				Иначе
					СуммаКСписанию = 0;
				КонецЕсли;
				
				// Спишем запасы из свободного остатка.
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыРасход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыРасход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыРасход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыРасход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыРасход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыРасход.КоррЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыРасход.ЗаказПродажи = Неопределено;
				СтрокаТаблицыРасход.ДокументПродажи = Неопределено;
				СтрокаТаблицыРасход.Подразделение = Неопределено;
				СтрокаТаблицыРасход.Ответственный = Неопределено;
				СтрокаТаблицыРасход.СтавкаНДС = Неопределено;
				
				СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
				СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
				СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Списание запасов из свободного остатка в резерв'");
				
				// Поставим их в резерв.
				СтрокаТаблицыПриход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
				
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
				
				СтрокаТаблицыПриход.ЗаказПродажи = Неопределено;
				СтрокаТаблицыПриход.ДокументПродажи = Неопределено;
				СтрокаТаблицыПриход.Подразделение = Неопределено;
				СтрокаТаблицыПриход.Ответственный = Неопределено;
				СтрокаТаблицыПриход.СтавкаНДС = Неопределено;
				
				СтрокаТаблицыПриход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяРезерв;
				СтрокаТаблицыПриход.СодержаниеПроводки = НСтр("ru='Поступление запасов в резерв из свободного остатка'");
				
				Если СтрокаТаблицаЗапасы.Выполнен Тогда // Если заказ выполнени - надо и продать.
					
					// Спишем запасы из резерва.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
					СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из резерва'");
					
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						
						// Сформируем проводки.
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
						СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
						
						// Продвигаем доходы и расходы.
						СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
						
						СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
						СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
						СтрокаДоходыИРасходы.СуммаДоходов = 0;
						СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
						СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
						
						СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
						
						// Продвигаем себестоимость продаж.
						СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
						СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
						СтрокаПродажи.Количество = 0;
						СтрокаПродажи.Сумма = 0;
						СтрокаПродажи.СуммаНДС = 0;
						СтрокаПродажи.Себестоимость = СуммаКСписанию;				
						
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
			// Если заказ на выполнени - надо списать резерв др. документов.
			КоличествоРезервОтгрузка = КоличествоТребуетсяРезервОтгрузка - КоличествоТребуетсяРезерв;
			Если СтрокаТаблицаЗапасы.Выполнен 
				И КоличествоРезервОтгрузка > 0 Тогда
				
				КоличествоТребуетсяСвободныйОстаток = КоличествоТребуетсяСвободныйОстаток - КоличествоРезервОтгрузка;
				
				СтруктураДляПоиска.Вставить("ЗаказПокупателя", ДокументСсылкаЗаказПокупателя);
			
				МассивСтрокОстатковОтгрузка = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
				
				КоличествоОстатокОтгрузка = 0;
				СуммаОстатокОтгрузка = 0;
				
				Если МассивСтрокОстатковОтгрузка.Количество() > 0 Тогда
					КоличествоОстатокОтгрузка = МассивСтрокОстатковОтгрузка[0].КоличествоОстаток;
					СуммаОстатокОтгрузка = МассивСтрокОстатковОтгрузка[0].СуммаОстаток;
				КонецЕсли;
				
				Если КоличествоОстатокОтгрузка > 0 И КоличествоОстатокОтгрузка > КоличествоРезервОтгрузка Тогда

					СуммаКСписаниюОтгрузка = Окр(СуммаОстатокОтгрузка * КоличествоРезервОтгрузка / КоличествоОстатокОтгрузка , 2, 1);

					МассивСтрокОстатковОтгрузка[0].КоличествоОстаток = МассивСтрокОстатковОтгрузка[0].КоличествоОстаток - КоличествоРезервОтгрузка;
					МассивСтрокОстатковОтгрузка[0].СуммаОстаток = МассивСтрокОстатковОтгрузка[0].СуммаОстаток - СуммаКСписаниюОтгрузка;

				ИначеЕсли КоличествоОстатокОтгрузка = КоличествоРезервОтгрузка Тогда

					СуммаКСписаниюОтгрузка = СуммаОстатокОтгрузка;

					МассивСтрокОстатковОтгрузка[0].КоличествоОстаток = 0;
					МассивСтрокОстатковОтгрузка[0].СуммаОстаток = 0;

				Иначе
					СуммаКСписаниюОтгрузка = 0;	
				КонецЕсли;
				
				// Спишем запасы из резерва.
				СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
					
				СтрокаТаблицыРасход.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
				СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
				СтрокаТаблицыРасход.Сумма = СуммаКСписаниюОтгрузка;
				
				СтрокаТаблицыРасход.Количество = КоличествоРезервОтгрузка;
				
				СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из резерва'");
				
				Если Окр(СуммаКСписаниюОтгрузка, 2, 1) <> 0 Тогда
					
					// Сформируем проводки.
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
					СтрокаТаблицаУправленческий.Сумма = СуммаКСписаниюОтгрузка;
					
					// Продвигаем доходы и расходы.
					СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
					
					СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
					СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
					СтрокаДоходыИРасходы.СуммаДоходов = 0;
					СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписаниюОтгрузка;
					СтрокаДоходыИРасходы.Сумма = СуммаКСписаниюОтгрузка;
					
					СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
					
					// Продвигаем себестоимость продаж.
					СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
					СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаПродажи.Количество = 0;
					СтрокаПродажи.Сумма = 0;
					СтрокаПродажи.СуммаНДС = 0;
					СтрокаПродажи.Себестоимость = СуммаКСписаниюОтгрузка;				
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если КоличествоТребуетсяСвободныйОстаток > 0 Тогда
				
				Если СтрокаТаблицаЗапасы.Выполнен Тогда // Если заказ выполнени - надо и продать.
					
					Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяСвободныйОстаток Тогда

						СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяСвободныйОстаток / КоличествоОстаток , 2, 1);

						МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяСвободныйОстаток;
						МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

					ИначеЕсли КоличествоОстаток = КоличествоТребуетсяСвободныйОстаток Тогда

						СуммаКСписанию = СуммаОстаток;

						МассивСтрокОстатков[0].КоличествоОстаток = 0;
						МассивСтрокОстатков[0].СуммаОстаток = 0;

					Иначе
						СуммаКСписанию = 0;	
					КонецЕсли;	
				
					// Спишем запасы из свободного остатка.
					СтрокаТаблицыРасход = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
						
					СтрокаТаблицыРасход.ЗаказПокупателя = ПустойЗаказПокупателя;
					СтрокаТаблицыРасход.ЗатратыНаВыпуск = Ложь;
					СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
					СтрокаТаблицыРасход.Количество = КоличествоТребуетсяСвободныйОстаток;
					СтрокаТаблицыРасход.СодержаниеПроводки = НСтр("ru='Продажа запасов из свободного остатка'");
					
					Если НЕ РезервированиеЗапасов Тогда
						СтрокаТаблицыРасход.КоррЗаказПокупателя = ПустойЗаказПокупателя;
					КонецЕсли;
					
					Если Окр(СуммаКСписанию, 2, 1) <> 0 Тогда
						
						// Сформируем проводки.
						СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
						СтрокаТаблицаУправленческий.Сумма = СуммаКСписанию;
						
						// Продвигаем доходы и расходы.
						СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
						
						СтрокаДоходыИРасходы.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.ПодразделениеПродажи;
						СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
						СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
						СтрокаДоходыИРасходы.СуммаДоходов = 0;
						СтрокаДоходыИРасходы.СуммаРасходов = СуммаКСписанию;
						СтрокаДоходыИРасходы.Сумма = СуммаКСписанию;
						
						СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
						
						// Продвигаем себестоимость продаж.
						СтрокаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПродажи, СтрокаТаблицаЗапасы);
						СтрокаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
						СтрокаПродажи.Количество = 0;
						СтрокаПродажи.Сумма = 0;
						СтрокаПродажи.СуммаНДС = 0;
						СтрокаПродажи.Себестоимость = СуммаКСписанию;				
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Удалить("ТаблицаЗапасыЗапасы");
	
КонецПроцедуры // СформироватьТаблицаЗапасы()

Процедура СформироватьТаблицаУправленческий(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ТаблицаУправленческий.НомерСтроки КАК НомерСтроки,
	|	ТаблицаУправленческий.Финиш КАК Период,
	|	ТаблицаУправленческий.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалДт,
	|	ТаблицаУправленческий.СчетУчетаПродажи КАК СчетКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаПродажи.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаПродажи.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалКт,
	|	ТаблицаУправленческий.Сумма КАК Сумма,
	|	&ОтражениеВыручки КАК Содержание
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаУправленческий,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ТаблицаУправленческий.НомерСтроки,
	|	ТаблицаУправленческий.Финиш,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПокупателем.Валютный
	|			ТОГДА ТаблицаУправленческий.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.СчетУчетаРасчетовСПоставщиком
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчетаПродажи
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА &ВалютаУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.ТоварыНаКомиссии
	|			ТОГДА ТаблицаУправленческий.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаУправленческий.Сумма,
	|	&ОтражениеВыручки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаУправленческий,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаУправленческий.Сумма <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	1,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.ВалютаРасчетов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный
	|			ТОГДА ТаблицаДокумента.СуммаВал
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ТаблицаДокумента.Сумма,
	|	&ЗачетПредоплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Период КАК Период,
	|		ТаблицаДокумента.Организация КАК Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный КАК СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|		СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал,
	|		СУММА(ТаблицаДокумента.Сумма) КАК Сумма
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Период КАК Период,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.СчетУчетаАвансовПокупателя.Валютный КАК СчетУчетаАвансовПокупателяВалютный,
	|			ТаблицаДокумента.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.СчетУчетаРасчетовСПокупателем.Валютный КАК СчетУчетаРасчетовСПокупателемВалютный,
	|			ТаблицаДокумента.ВалютаРасчетов КАК ВалютаРасчетов,
	|			ТаблицаДокумента.СуммаВал КАК СуммаВал,
	|			ТаблицаДокумента.Сумма КАК Сумма
	|		ИЗ
	|			ВременнаяТаблицаПредоплата КАК ТаблицаДокумента
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя,
	|			ТаблицаДокумента.Контрагент.СчетУчетаАвансовПокупателя.Валютный,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем,
	|			ТаблицаДокумента.Контрагент.СчетУчетаРасчетовСПокупателем.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			0,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаДокумента
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДокумента.Период,
	|		ТаблицаДокумента.Организация,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателя,
	|		ТаблицаДокумента.СчетУчетаАвансовПокупателяВалютный,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателем,
	|		ТаблицаДокумента.СчетУчетаРасчетовСПокупателемВалютный,
	|		ТаблицаДокумента.ВалютаРасчетов
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаДокумента.Сумма) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.Сумма) <= -0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) >= 0.005
	|			ИЛИ СУММА(ТаблицаДокумента.СуммаВал) <= -0.005)) КАК ТаблицаДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	1,
	|	ТаблицаУправленческий.Дата,
	|	ТаблицаУправленческий.Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический),
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СчетУчета
	|		ИНАЧЕ &ОтрицательнаяКурсоваяРазницаСчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА &ПоложительнаяКурсоваяРазницаСчетУчета
	|		ИНАЧЕ ТаблицаУправленческий.СчетУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы < 0
	|				И ТаблицаУправленческий.СчетУчетаВалютный
	|			ТОГДА ТаблицаУправленческий.Валюта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	ВЫБОР
	|		КОГДА ТаблицаУправленческий.СуммаКурсовойРазницы > 0
	|			ТОГДА ТаблицаУправленческий.СуммаКурсовойРазницы
	|		ИНАЧЕ -ТаблицаУправленческий.СуммаКурсовойРазницы
	|	КОНЕЦ,
	|	&КурсоваяРазница
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата КАК Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация КАК Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета КАК СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный КАК СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта КАК Валюта,
	|		СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) КАК СуммаКурсовойРазницы
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДокумента.Дата КАК Дата,
	|			ТаблицаДокумента.Организация КАК Организация,
	|			ТаблицаДокумента.СчетУчета КАК СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный КАК СчетУчетаВалютный,
	|			ТаблицаДокумента.Валюта КАК Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы КАК СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТаблицаДокумента.Дата,
	|			ТаблицаДокумента.Организация,
	|			ТаблицаДокумента.СчетУчета,
	|			ТаблицаДокумента.СчетУчета.Валютный,
	|			ТаблицаДокумента.Валюта,
	|			ТаблицаДокумента.СуммаКурсовойРазницы
	|		ИЗ
	|			ВременнаяТаблицаКурсовыхРазницРасчетыСПокупателями КАК ТаблицаДокумента
	|		ГДЕ
	|			ТаблицаДокумента.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)) КАК ТаблицаКурсовыхРазницРасчетыСПокупателями
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Дата,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Организация,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчета,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.СчетУчетаВалютный,
	|		ТаблицаКурсовыхРазницРасчетыСПокупателями.Валюта
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) >= 0.005
	|			ИЛИ СУММА(ТаблицаКурсовыхРазницРасчетыСПокупателями.СуммаКурсовойРазницы) <= -0.005)) КАК ТаблицаУправленческий
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ЗачетПредоплаты", НСтр("ru = 'Зачет предоплаты'"));
	Запрос.УстановитьПараметр("ОтражениеВыручки", НСтр("ru = 'Выручка от продажи'"));
	Запрос.УстановитьПараметр("КурсоваяРазница", НСтр("ru='Курсовая разница'"));
	Запрос.УстановитьПараметр("ПоложительнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ОтрицательнаяКурсоваяРазницаСчетУчета", ПланыСчетов.Управленческий.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяПроводка = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицаУправленческий()

Процедура СформироватьТаблицаЗапасы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	// Установка исключительной блокировки контролируемых остатков запасов.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.Запасы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;

	Для каждого КолонкаРезультатЗапроса из РезультатЗапроса.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	// Получение остатков запасов по стоимости.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|		СУММА(ЗапасыОстатки.СуммаОстаток) КАК СуммаОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				&МоментКонтроля,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						ТаблицаЗапасы.Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы)) КАК ЗапасыОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапасыОстатки.Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета,
	|		ЗапасыОстатки.Номенклатура,
	|		ЗапасыОстатки.Характеристика,
	|		ЗапасыОстатки.Партия
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Сумма, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &ПериодКонтроля
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментКонтроля", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодКонтроля", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапасыОстатки = РезультатЗапроса.Выгрузить();
	ТаблицаЗапасыОстатки.Индексы.Добавить("Организация,СтруктурнаяЕдиница,СчетУчета,Номенклатура,Характеристика,Партия");
	
	ВременнаяТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.СкопироватьКолонки();

	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
		СтруктураДляПоиска.Вставить("СтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
		СтруктураДляПоиска.Вставить("СчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
		СтруктураДляПоиска.Вставить("Номенклатура", СтрокаТаблицаЗапасы.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", СтрокаТаблицаЗапасы.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", СтрокаТаблицаЗапасы.Партия);
		
		КоличествоТребуетсяРезерв = СтрокаТаблицаЗапасы.Количество;
		
		Если КоличествоТребуетсяРезерв > 0 Тогда
			
			МассивСтрокОстатков = ТаблицаЗапасыОстатки.НайтиСтроки(СтруктураДляПоиска);
			
			КоличествоОстаток = 0;
			СуммаОстаток = 0;
			
			Если МассивСтрокОстатков.Количество() > 0 Тогда
				КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток;
				СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток;
			КонецЕсли;
			
			Если КоличествоОстаток > 0 И КоличествоОстаток > КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = Окр(СуммаОстаток * КоличествоТребуетсяРезерв / КоличествоОстаток , 2, 1);

				МассивСтрокОстатков[0].КоличествоОстаток = МассивСтрокОстатков[0].КоличествоОстаток - КоличествоТребуетсяРезерв;
				МассивСтрокОстатков[0].СуммаОстаток = МассивСтрокОстатков[0].СуммаОстаток - СуммаКСписанию;

			ИначеЕсли КоличествоОстаток = КоличествоТребуетсяРезерв Тогда

				СуммаКСписанию = СуммаОстаток;

				МассивСтрокОстатков[0].КоличествоОстаток = 0;
				МассивСтрокОстатков[0].СуммаОстаток = 0;

			Иначе
				СуммаКСписанию = 0;	
			КонецЕсли;
	
			// Расход.
			СтрокаТаблицыРасход = ВременнаяТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасход, СтрокаТаблицаЗапасы);
			
			СтрокаТаблицыРасход.Сумма = СуммаКСписанию;
			СтрокаТаблицыРасход.Количество = КоличествоТребуетсяРезерв;
			СтрокаТаблицыРасход.ЗаказПокупателя = Неопределено;
			
			// Приход
			Если Окр(СуммаКСписанию, 2, 1) <> 0 ИЛИ КоличествоТребуетсяРезерв > 0 Тогда
				
				СтрокаТаблицыПриход = ВременнаяТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриход, СтрокаТаблицаЗапасы);
					
				СтрокаТаблицыПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					
				СтрокаТаблицыПриход.СтруктурнаяЕдиница = СтрокаТаблицаЗапасы.КоррСтруктурнаяЕдиница;
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
				СтрокаТаблицыПриход.Номенклатура = СтрокаТаблицаЗапасы.КоррНоменклатура;
				СтрокаТаблицыПриход.Характеристика = СтрокаТаблицаЗапасы.КоррХарактеристика;
				СтрокаТаблицыПриход.Партия = СтрокаТаблицаЗапасы.КоррПартия;
				СтрокаТаблицыПриход.ЗаказПокупателя = СтрокаТаблицаЗапасы.КоррЗаказПокупателя;
					
				СтрокаТаблицыПриход.КоррСтруктурнаяЕдиница = СтрокаТаблицаЗапасы.СтруктурнаяЕдиница;
				СтрокаТаблицыПриход.КоррСчетУчета = СтрокаТаблицаЗапасы.СчетУчета;
				СтрокаТаблицыПриход.КоррНоменклатура = СтрокаТаблицаЗапасы.Номенклатура;
				СтрокаТаблицыПриход.КоррХарактеристика = СтрокаТаблицаЗапасы.Характеристика;
				СтрокаТаблицыПриход.КоррПартия = СтрокаТаблицаЗапасы.Партия;
				СтрокаТаблицыПриход.КоррЗаказПокупателя = Неопределено;
					
				СтрокаТаблицыПриход.Сумма = СуммаКСписанию;
				СтрокаТаблицыПриход.Количество = КоличествоТребуетсяРезерв;
					
				СтрокаТаблицыПриход.СчетУчета = СтрокаТаблицаЗапасы.КоррСчетУчета;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы = ВременнаяТаблицаЗапасы;
	
КонецПроцедуры // СформироватьТаблицаЗапасов()

Процедура ОтнестиЗатратыНаРаботы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)

	Для н = 0 По СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.Количество() - 1 Цикл
		
		СтрокаТаблицаЗапасы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы[н];
		
		Если СтрокаТаблицаЗапасы.ВидДвижения = ВидДвиженияНакопления.Расход 
			И СтрокаТаблицаЗапасы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		
			СтруктураДляПоиска = Новый Структура;
			СтруктураДляПоиска.Вставить("Организация", СтрокаТаблицаЗапасы.Организация);
			СтруктураДляПоиска.Вставить("КоррСтруктурнаяЕдиница", СтрокаТаблицаЗапасы.СтруктурнаяЕдиница);
			СтруктураДляПоиска.Вставить("КоррСчетУчета", СтрокаТаблицаЗапасы.СчетУчета);
			СтруктураДляПоиска.Вставить("КоррНоменклатура", СтрокаТаблицаЗапасы.Номенклатура);
			СтруктураДляПоиска.Вставить("КоррХарактеристика", СтрокаТаблицаЗапасы.Характеристика);
			СтруктураДляПоиска.Вставить("КоррПартия", СтрокаТаблицаЗапасы.Партия);
			СтруктураДляПоиска.Вставить("ВидДвижения", ВидДвиженияНакопления.Расход);
			
			НайденныеСтроки = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗапасы.НайтиСтроки(СтруктураДляПоиска);
			
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
				СтрокаТаблицаЗапасы.Сумма = СтрокаТаблицаЗапасы.Сумма + НайденнаяСтрока.Сумма;
				Если СтрокаТаблицаЗапасы.Сумма <> 0 Тогда
				
					// Сформируем проводки.
					СтрокаТаблицаУправленческий = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаУправленческий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаУправленческий, СтрокаТаблицаЗапасы);
					СтрокаТаблицаУправленческий.СценарийПланирования = Справочники.СценарииПланирования.Фактический;
					СтрокаТаблицаУправленческий.Содержание = НСтр("ru = 'Списание запасов'");
					СтрокаТаблицаУправленческий.Сумма = НайденнаяСтрока.Сумма;
					
					// Продвигаем себестоимость продаж.
					СтрокаТаблицаПродажи = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПродажи.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаПродажи, СтрокаТаблицаЗапасы);
					
					СтрокаТаблицаПродажи.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаТаблицаПродажи.Количество = 0;
					СтрокаТаблицаПродажи.Сумма = 0;
					СтрокаТаблицаПродажи.СуммаНДС = 0;
					СтрокаТаблицаПродажи.Себестоимость = НайденнаяСтрока.Сумма;

					// Продвигаем доходы и расходы.
					СтрокаДоходыИРасходы = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходыИРасходы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДоходыИРасходы, СтрокаТаблицаЗапасы);
					
					СтрокаДоходыИРасходы.ЗаказПокупателя = ДокументСсылкаЗаказПокупателя;
					СтрокаДоходыИРасходы.СчетУчета = СтрокаТаблицаЗапасы.СчетУчетаСебестоимость;
					СтрокаДоходыИРасходы.СуммаДоходов = 0;
					СтрокаДоходыИРасходы.СуммаРасходов = НайденнаяСтрока.Сумма;
					СтрокаДоходыИРасходы.Сумма = НайденнаяСтрока.Сумма;
					
					СтрокаДоходыИРасходы.СодержаниеПроводки = НСтр("ru='Отражение расходов'");
				
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли; 
		
	КонецЦикла;		
	

КонецПроцедуры // ОтнестиЗатратыНаРаботы()

Процедура СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ДатаОплаты КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.ТипДенежныхСредств,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден) КАК СтатусУтвержденияПлатежа,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|			ТОГДА ТаблицаДокумента.Ссылка.Касса
	|		КОГДА ТаблицаДокумента.Ссылка.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			ТОГДА ТаблицаДокумента.Ссылка.БанковскийСчет
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКасса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Договор.РасчетыВУсловныхЕдиницах
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.СуммаОплаты * ВЫБОР
	|						КОГДА КурсыВалютРасчетов.Курс <> 0
	|								И КурсыВалютДокумента.Кратность <> 0
	|							ТОГДА КурсыВалютДокумента.Курс * КурсыВалютРасчетов.Кратность / (ЕСТЬNULL(КурсыВалютРасчетов.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1))
	|						ИНАЧЕ 1
	|					КОНЕЦ КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ ТаблицаДокумента.СуммаОплаты
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.ПлатежныйКалендарь КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютРасчетов
	|		ПО ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов = КурсыВалютРасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, ) КАК КурсыВалютДокумента
	|		ПО ТаблицаДокумента.Ссылка.ВалютаДокумента = КурсыВалютДокумента.Валюта
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПлатежныйКалендарь()

Процедура СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК СчетНаОплату,
	|	ТаблицаДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Контрагент.ВестиУчетОплатыПоСчетам
	|	И ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ТаблицаДокумента.СуммаДокумента <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОплатаСчетовИЗаказов", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаОплатаСчетовИЗаказов()

Процедура СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаЗаказПокупателя.ДисконтнаяКарта.Пустая() Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Финиш КАК Период,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты КАК ВладелецКарты,
	|	ТаблицаПродажи.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_РаботыИТовары
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ТаблицаПродажи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродажи.Финиш,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта,
	|	ТаблицаПродажи.Документ.ДисконтнаяКарта.ВладелецКарты,
	|	ТаблицаПродажи.Сумма
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ТаблицаПродажи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РаботыИТовары.Период,
	|	ВТ_РаботыИТовары.ДисконтнаяКарта,
	|	ВТ_РаботыИТовары.ВладелецКарты,
	|	СУММА(ВТ_РаботыИТовары.Сумма) КАК Сумма
	|ИЗ
	|	ВТ_РаботыИТовары КАК ВТ_РаботыИТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РаботыИТовары.ВладелецКарты,
	|	ВТ_РаботыИТовары.Период,
	|	ВТ_РаботыИТовары.ДисконтнаяКарта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоДисконтнойКарте()

Процедура СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылкаЗаказПокупателя.СкидкиНаценки.Количество() = 0 Или НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка КАК АвтоматическаяСкидка,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма КАК СуммаСкидки,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ВременнаяТаблицаТовары.Документ КАК ДокументСкидки,
	|	ВременнаяТаблицаТовары.Контрагент КАК ПолучательСкидки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаТовары.КлючСвязи = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Период,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.СкидкаНаценка,
	|	ВременнаяТаблицаАвтоСкидкиНаценки.Сумма,
	|	ВременнаяТаблицаРаботы.Номенклатура,
	|	ВременнаяТаблицаРаботы.Характеристика,
	|	ВременнаяТаблицаРаботы.Документ,
	|	ВременнаяТаблицаРаботы.Контрагент
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаАвтоСкидкиНаценки КАК ВременнаяТаблицаАвтоСкидкиНаценки
	|		ПО ВременнаяТаблицаРаботы.КлючСвязиДляСкидокНаценок = ВременнаяТаблицаАвтоСкидкиНаценки.КлючСвязи,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|	И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам()

Процедура СформироватьТаблицаВыполнениеДоговораОбслуживания(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговораОбслуживания", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВременнаяТаблицаРаботы.Период,
	|	ВременнаяТаблицаРаботы.Договор,
	|	ВременнаяТаблицаРаботы.Номенклатура КАК ОбъектДоговораОбслуживания,
	|	ВременнаяТаблицаРаботы.Характеристика,
	|	ИСТИНА КАК УказанаСтоимость,
	|	ВременнаяТаблицаРаботы.КоличествоПлан КАК Количество,
	|	ВременнаяТаблицаРаботы.СуммаВал КАК Сумма
	|ИЗ
	|	ВременнаяТаблицаРаботы КАК ВременнаяТаблицаРаботы,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоДоговорОбслуживания
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Период,
	|	ВременнаяТаблицаТовары.Договор,
	|	ВременнаяТаблицаТовары.Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика,
	|	ИСТИНА,
	|	ВременнаяТаблицаТовары.Количество,
	|	ВременнаяТаблицаТовары.СуммаВал
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары,
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ВременнаяТаблицаШапка.ЭтоДоговорОбслуживания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыполнениеДоговораОбслуживания", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура СформироватьТаблицаСерийныеНомера(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ДокументСсылка.СерийныеНомера.Количество()=0 И ДокументСсылка.СерийныеНомераМатериалы.Количество()=0 Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", Новый ТаблицаЗначений);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СНОбщаяТаблица.Период,
	|	СНОбщаяТаблица.ВидДвижения,
	|	СНОбщаяТаблица.ДатаСобытия,
	|	СНОбщаяТаблица.Операция,
	|	СНОбщаяТаблица.СерийныйНомер,
	|	СНОбщаяТаблица.Организация,
	|	СНОбщаяТаблица.Номенклатура,
	|	СНОбщаяТаблица.Характеристика,
	|	СНОбщаяТаблица.Партия,
	|	СНОбщаяТаблица.СтруктурнаяЕдиница,
	|	СНОбщаяТаблица.Ячейка,
	|	СУММА(СНОбщаяТаблица.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВременнаяТаблицаЗапасы.Период КАК Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|		ВременнаяТаблицаЗапасы.Период КАК ДатаСобытия,
	|		ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход) КАК Операция,
	|		СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|		ВременнаяТаблицаЗапасы.Организация КАК Организация,
	|		ВременнаяТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|		ВременнаяТаблицаЗапасы.Характеристика КАК Характеристика,
	|		ВременнаяТаблицаЗапасы.Партия КАК Партия,
	|		ВременнаяТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ВременнаяТаблицаЗапасы.Ячейка КАК Ячейка,
	|		1 КАК Количество
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаЗапасы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомера КАК СерийныеНомера
	|			ПО ВременнаяТаблицаЗапасы.КлючСвязи = СерийныеНомера.КлючСвязи,
	|		ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|	ГДЕ
	|		ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаМатериалы.Период,
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|		ВременнаяТаблицаМатериалы.Период,
	|		ЗНАЧЕНИЕ(Перечисление.ОперацииСерийныхНомеров.Расход),
	|		СерийныеНомера.СерийныйНомер,
	|		ВременнаяТаблицаМатериалы.Организация,
	|		ВременнаяТаблицаМатериалы.Номенклатура,
	|		ВременнаяТаблицаМатериалы.Характеристика,
	|		ВременнаяТаблицаМатериалы.Партия,
	|		ВременнаяТаблицаМатериалы.СтруктурнаяЕдиницаЗапасов,
	|		ВременнаяТаблицаМатериалы.Ячейка,
	|		1
	|	ИЗ
	|		ВременнаяТаблицаМатериалы КАК ВременнаяТаблицаМатериалы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСерийныеНомераМатериалы КАК СерийныеНомера
	|			ПО ВременнаяТаблицаМатериалы.КлючСвязиСерийныеНомера = СерийныеНомера.КлючСвязи,
	|		ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|	ГДЕ
	|		ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|		И ВременнаяТаблицаШапка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)) КАК СНОбщаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	СНОбщаяТаблица.Период,
	|	СНОбщаяТаблица.ДатаСобытия,
	|	СНОбщаяТаблица.Операция,
	|	СНОбщаяТаблица.СерийныйНомер,
	|	СНОбщаяТаблица.Организация,
	|	СНОбщаяТаблица.Номенклатура,
	|	СНОбщаяТаблица.Характеристика,
	|	СНОбщаяТаблица.Партия,
	|	СНОбщаяТаблица.СтруктурнаяЕдиница,
	|	СНОбщаяТаблица.Ячейка,
	|	СНОбщаяТаблица.ВидДвижения";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", РезультатЗапроса);
	Если СтруктураДополнительныеСвойства.УчетнаяПолитика.ОстаткиСерийныхНомеров Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", РезультатЗапроса);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	КонецЕсли; 
	
КонецПроцедуры // СформироватьТаблицаСерийныеНомера()

Процедура ИнициализироватьДанныеДокументаЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказНаряд.Договор.ЭтоДоговорОбслуживания КАК ЭтоДоговорОбслуживания,
	|	ВЫБОР
	|		КОГДА ЗаказНаряд.Договор.ЭтоДоговорОбслуживания
	|				И ЗаказНаряд.Договор.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВестиУчетРасходовПоДоговорамОбслуживания,
	|	ЗаказНаряд.Договор.ДоговорОбслуживанияНаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВидыЗаказНарядовПорядокСостояний.НомерСтроки >= ВЫРАЗИТЬ(ЗаказНаряд.ВидЗаказа КАК Справочник.ВидыЗаказНарядов).НомерСостоянияВыполнения КАК ЭтоСостояниеВыполненияЗаказНаряда,
	|	ЗаказНаряд.ВариантЗавершения КАК ВариантЗавершения
	|ПОМЕСТИТЬ ВременнаяТаблицаШапка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказНаряд
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗаказНарядов.ПорядокСостояний КАК ВидыЗаказНарядовПорядокСостояний
	|		ПО ЗаказНаряд.ВидЗаказа = ВидыЗаказНарядовПорядокСостояний.Ссылка
	|			И ЗаказНаряд.СостояниеЗаказа = ВидыЗаказНарядовПорядокСостояний.Состояние
	|ГДЕ
	|	ЗаказНаряд.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалютСрезПоследних
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта В (&ВалютаУчета, &ВалютаНациональная)) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядРаботы.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядРаботы.Ссылка.Дата КАК Период,
	|	ЗаказНарядРаботы.Ссылка.Финиш,
	|	&Организация КАК Организация,
	|	ЗаказНарядРаботы.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ЗаказНарядРаботы.Ссылка.Ответственный КАК Ответственный,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ЗаказНарядРаботы.Номенклатура.СчетУчетаЗатрат КАК СчетУчета,
	|	ЗаказНарядРаботы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядРаботы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК Партия,
	|	ЗаказНарядРаботы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказНарядРаботы.Ссылка КАК Документ,
	|	ЗаказНарядРаботы.Ссылка.Контрагент КАК Контрагент,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ЗаказНарядРаботы.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ЗаказНарядРаботы.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ЗаказНарядРаботы.Ссылка.Договор КАК Договор,
	|	ЗаказНарядРаботы.Ссылка.СтруктурнаяЕдиницаПродажи КАК ПодразделениеПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗаказНарядРаботы.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ ЗаказНарядРаботы.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ ЗаказНарядРаботы.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	ЗаказНарядРаботы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказНарядРаботы.Количество * ЗаказНарядРаботы.Коэффициент * ЗаказНарядРаботы.Кратность КАК Количество,
	|	ЗаказНарядРаботы.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядРаботы.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядРаботы.Всего * ЗаказНарядРаботы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядРаботы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядРаботы.СуммаНДС * ЗаказНарядРаботы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядРаботы.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядРаботы.СуммаНДС * ЗаказНарядРаботы.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядРаботы.СуммаНДС * КурсыРегВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность / (ЗаказНарядРаботы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядРаботы.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядРаботы.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядРаботы.Всего * КурсыРегВалюты.Курс * ЗаказНарядРаботы.Ссылка.Кратность / (ЗаказНарядРаботы.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядРаботы.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ЗаказНарядРаботы.Количество * ЗаказНарядРаботы.Коэффициент * ЗаказНарядРаботы.Кратность КАК КоличествоПлан,
	|	ЗаказНарядРаботы.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНарядРаботы.Ссылка.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНарядРаботы.Спецификация,
	|	ЗаказНарядРаботы.КлючСвязиДляСкидокНаценок
	|ПОМЕСТИТЬ ВременнаяТаблицаРаботы
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказНарядРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЗаказНарядРаботы.Ссылка = &Ссылка
	|	И ЗаказНарядРаботы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказНарядРаботы.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядТовары.Ссылка КАК Документ,
	|	ЗаказНарядТовары.Ссылка.Контрагент КАК Контрагент,
	|	ЗаказНарядТовары.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ЗаказНарядТовары.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ЗаказНарядТовары.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ЗаказНарядТовары.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ЗаказНарядТовары.Ссылка.Договор КАК Договор,
	|	ЗаказНарядТовары.Ссылка.Дата КАК Период,
	|	ЗаказНарядТовары.Ссылка.Финиш,
	|	ЗаказНарядТовары.Ссылка.Старт,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК КоррОрганизация,
	|	ЗаказНарядТовары.Ссылка.СтруктурнаяЕдиницаПродажи КАК ПодразделениеПродажи,
	|	ЗаказНарядТовары.Ссылка.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности
	|		ИНАЧЕ ЗаказНарядТовары.Номенклатура.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|		ИНАЧЕ ЗаказНарядТовары.Номенклатура.НаправлениеДеятельности.СчетУчетаВыручкиОтПродаж
	|	КОНЕЦ КАК СчетУчетаПродажи,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаШапка.ВестиУчетРасходовПоДоговорамОбслуживания
	|			ТОГДА ВременнаяТаблицаШапка.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|		ИНАЧЕ ЗаказНарядТовары.Номенклатура.НаправлениеДеятельности.СчетУчетаСебестоимостиПродаж
	|	КОНЕЦ КАК СчетУчетаСебестоимость,
	|	ЗаказНарядТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказНарядТовары.Ссылка.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	НЕОПРЕДЕЛЕНО КАК КоррСтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказНарядТовары.Ссылка.СтруктурнаяЕдиницаРезерв.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ЗаказНарядТовары.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ЗаказНарядТовары.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	НЕОПРЕДЕЛЕНО КАК КоррСчетУчета,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|				И ЗаказНарядТовары.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ТоварыНаКомиссии)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТоварыНаКомиссии,
	|	ЗаказНарядТовары.Номенклатура КАК Номенклатура,
	|	ЗаказНарядТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказНарядТовары.НомерГТД КАК НомерГТД,
	|	НЕОПРЕДЕЛЕНО КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядТовары.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНарядТовары.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК КоррПартия,
	|	ЗаказНарядТовары.Ссылка КАК Заказ,
	|	ЗаказНарядТовары.Ссылка КАК ЗаказПокупателя,
	|	НЕОПРЕДЕЛЕНО КАК КоррЗаказ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядТовары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказНарядТовары.Количество
	|		ИНАЧЕ ЗаказНарядТовары.Количество * ЗаказНарядТовары.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядТовары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказНарядТовары.Резерв
	|		ИНАЧЕ ЗаказНарядТовары.Резерв * ЗаказНарядТовары.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядТовары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказНарядТовары.РезервОтгрузка
	|		ИНАЧЕ ЗаказНарядТовары.РезервОтгрузка * ЗаказНарядТовары.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК РезервОтгрузка,
	|	ЗаказНарядТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядТовары.СуммаНДС * ЗаказНарядТовары.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.СуммаНДС * ЗаказНарядТовары.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСЗакупкиПродажи,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.Всего * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.Всего * ЗаказНарядТовары.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.НДСВключатьВСтоимость
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|						ТОГДА ЗаказНарядТовары.СуммаНДС * КурсыРегВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность / (ЗаказНарядТовары.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|					ИНАЧЕ ЗаказНарядТовары.СуммаНДС
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказНарядТовары.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА ЗаказНарядТовары.Всего * КурсыРегВалюты.Курс * ЗаказНарядТовары.Ссылка.Кратность / (ЗаказНарядТовары.Ссылка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядТовары.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	ЗаказНарядТовары.Всего КАК СуммаРасчетовПринятыеПереданные,
	|	ЗаказНарядТовары.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ЗаказНарядТовары.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ЗаказНарядТовары.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ЗаказНарядТовары.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНарядТовары.Ссылка.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНарядТовары.КлючСвязи
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказНарядТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЗаказНарядТовары.Ссылка = &Ссылка
	|	И ЗаказНарядТовары.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказНарядТовары.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядМатериалы.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядМатериалы.Ссылка.Дата КАК Период,
	|	ЗаказНарядМатериалы.Ссылка.Финиш,
	|	ЗаказНарядМатериалы.Ссылка.Старт,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	ЗаказНарядМатериалы.Ссылка КАК Заказ,
	|	ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ЗаказНарядМатериалы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиницаЗапасов,
	|	ВЫБОР
	|		КОГДА &УчетПоЯчейкам
	|			ТОГДА ЗаказНарядМатериалы.Ссылка.Ячейка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаЗапасов,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаРезерв.ОрдерныйСклад
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрдерныйСклад,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаПродажи.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетУчетаЗапасов,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаПродажи.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|			ТОГДА ЗаказНарядРаботы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ЗаказНарядРаботы.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК КоррСчетУчета,
	|	ЗаказНарядМатериалы.Номенклатура КАК Номенклатура,
	|	ЗаказНарядМатериалы.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЗаказНарядМатериалы.НомерГТД КАК НомерГТД,
	|	ЗаказНарядРаботы.Номенклатура КАК КоррНоменклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказНарядРаботы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК КоррХарактеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказНарядМатериалы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	ЗаказНарядРаботы.Спецификация КАК КоррСпецификация,
	|	ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка) КАК Спецификация,
	|	ЗаказНарядМатериалы.Ссылка КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказНарядМатериалы.Количество
	|		ИНАЧЕ ЗаказНарядМатериалы.Количество * ЗаказНарядМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказНарядМатериалы.Резерв
	|		ИНАЧЕ ЗаказНарядМатериалы.Резерв * ЗаказНарядМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Резерв,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказНарядМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказНарядМатериалы.РезервОтгрузка
	|		ИНАЧЕ ЗаказНарядМатериалы.РезервОтгрузка * ЗаказНарядМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК РезервОтгрузка,
	|	0 КАК Сумма,
	|	ЗаказНарядРаботы.Номенклатура.СчетУчетаЗатрат КАК СчетДт,
	|	ВЫБОР
	|		КОГДА ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ОтветственноеХранение)
	|				ИЛИ ЗаказНарядМатериалы.Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартий.ДавальческоеСырье)
	|			ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаказНарядМатериалы.Ссылка.СтруктурнаяЕдиницаПродажи.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|					ТОГДА ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗапасов
	|				ИНАЧЕ ЗаказНарядМатериалы.Номенклатура.СчетУчетаЗатрат
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетКт,
	|	ВЫРАЗИТЬ(&РаспределениеЗапасов КАК СТРОКА(100)) КАК СодержаниеПроводки,
	|	ВЫРАЗИТЬ(&РаспределениеЗапасов КАК СТРОКА(100)) КАК Содержание,
	|	ЗаказНарядМатериалы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказНарядМатериалы.Ссылка.Старт КАК Старт1,
	|	ЗаказНарядМатериалы.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНарядМатериалы.Ссылка.ВариантЗавершения КАК ВариантЗавершения,
	|	ЗаказНарядМатериалы.КлючСвязиСерийныеНомера
	|ПОМЕСТИТЬ ВременнаяТаблицаМатериалы
	|ИЗ
	|	Документ.ЗаказПокупателя.Материалы КАК ЗаказНарядМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Работы КАК ЗаказНарядРаботы
	|		ПО ЗаказНарядМатериалы.КлючСвязи = ЗаказНарядРаботы.КлючСвязи
	|ГДЕ
	|	ЗаказНарядМатериалы.Ссылка = &Ссылка
	|	И ЗаказНарядРаботы.Ссылка = &Ссылка
	|	И ЗаказНарядМатериалы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказНарядМатериалы.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНарядИсполнители.НомерСтроки КАК НомерСтроки,
	|	ЗаказНарядИсполнители.Ссылка.Финиш КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Фактический) КАК СценарийПланирования,
	|	НАЧАЛОПЕРИОДА(ЗаказНарядИсполнители.Ссылка.Финиш, МЕСЯЦ) КАК ПериодРегистрации,
	|	ЗаказНарядИсполнители.Ссылка.ВалютаДокумента КАК Валюта,
	|	ЗаказНарядИсполнители.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ЗаказНарядИсполнители.Сотрудник,
	|	ЗаказНарядИсполнители.Ссылка.Старт КАК ДатаНачала,
	|	ЗаказНарядИсполнители.Ссылка.Финиш КАК ДатаОкончания,
	|	0 КАК ОтработаноДней,
	|	ЗаказНарядРаботы.Количество * ЗаказНарядРаботы.Коэффициент * ЗаказНарядРаботы.Кратность КАК ОтработаноЧасов,
	|	ЗаказНарядИсполнители.СуммаНачисления КАК СуммаВал,
	|	ЗаказНарядИсполнители.ВидНачисленияУдержания КАК ВидНачисленияУдержания,
	|	ЗаказНарядИсполнители.Сотрудник.СчетРасчетовСПерсоналом КАК СчетУчета,
	|	ЗаказНарядИсполнители.ВидНачисленияУдержания.СчетЗатрат КАК СчетУчетаЗапасов,
	|	ЗаказНарядРаботы.Номенклатура.СчетУчетаЗатрат КАК КоррСчетУчетаЗапасов,
	|	ЗаказНарядРаботы.Номенклатура КАК КоррНоменклатура,
	|	ЗаказНарядРаботы.Характеристика КАК КоррХарактеристика,
	|	ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка) КАК КоррПартия,
	|	ЗаказНарядРаботы.Спецификация КАК КоррСпецификация,
	|	ЗаказНарядИсполнители.Ссылка КАК ЗаказПокупателя,
	|	ЗаказНарядИсполнители.РазмерНачисленияУдержания КАК Размер,
	|	ВЫРАЗИТЬ(ЗаказНарядИсполнители.СуммаНачисления * ВЫБОР
	|			КОГДА ЗаказНарядИсполнители.Ссылка.ВалютаДокумента = &ВалютаНациональная
	|				ТОГДА КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказНарядИсполнители.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказНарядИсполнители.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЗаказНарядИсполнители.Ссылка КАК КоррЗаказ,
	|	ЗаказНарядИсполнители.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЗаказНарядИсполнители.Ссылка.ВариантЗавершения КАК ВариантЗавершения
	|ПОМЕСТИТЬ ВременнаяТаблицаИсполнители
	|ИЗ
	|	Документ.ЗаказПокупателя.Исполнители КАК ЗаказНарядИсполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Работы КАК ЗаказНарядРаботы
	|		ПО ЗаказНарядИсполнители.КлючСвязи = ЗаказНарядРаботы.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыУпрВалюты
	|		ПО (КурсыУпрВалюты.Валюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыРегВалюты
	|		ПО (КурсыРегВалюты.Валюта = &ВалютаНациональная),
	|	ВременнаяТаблицаШапка КАК ВременнаяТаблицаШапка
	|ГДЕ
	|	ЗаказНарядИсполнители.Ссылка = &Ссылка
	|	И ЗаказНарядРаботы.Ссылка = &Ссылка
	|	И ЗаказНарядРаботы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ЗаказНарядИсполнители.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ЗаказНарядИсполнители.Ссылка.ВариантЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ВременнаяТаблицаШапка.ЭтоСостояниеВыполненияЗаказНаряда = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента.Ссылка.Финиш КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя КАК СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком КАК СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику КАК СчетУчетаАвансовПоставщику,
	|	ТаблицаДокумента.Ссылка.Договор КАК Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ТаблицаДокумента.Ссылка КАК Заказ,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Прочее) КАК НаправлениеДеятельностиПродажи,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс) КАК ТипРасчетов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетовКуда,
	|	&Ссылка КАК ДокументКуда,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ КАК ДокументДата,
	|	СУММА(ВЫРАЗИТЬ(ТаблицаДокумента.СуммаРасчетов * ТаблицаДокумента.Ссылка.Курс * КурсыВалютУчетаСрезПоследних.Кратность / (КурсыВалютУчетаСрезПоследних.Курс * ТаблицаДокумента.Ссылка.Кратность) КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаРасчетов) КАК СуммаВал,
	|	ТаблицаДокумента.Ссылка.Финиш,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЭквайринговаяОперация,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ) КАК ДатаПлатежа
	|ПОМЕСТИТЬ ВременнаяТаблицаПредоплата
	|ИЗ
	|	Документ.ЗаказПокупателя.Предоплата КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалютСрезПоследних КАК КурсыВалютУчетаСрезПоследних
	|		ПО (КурсыВалютУчетаСрезПоследних.Валюта = &ВалютаУчета)
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|	И ТаблицаДокумента.Ссылка.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказНарядов.Завершен)
	|	И ТаблицаДокумента.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Успешно)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Документ,
	|	ТаблицаДокумента.Ссылка.Контрагент,
	|	ТаблицаДокумента.Ссылка.Договор,
	|	ТаблицаДокумента.Ссылка.Договор.ВалютаРасчетов,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПокупателем,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПокупателя,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаРасчетовСПоставщиком,
	|	ТаблицаДокумента.Ссылка.Контрагент.СчетУчетаАвансовПоставщику,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|				ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.Взаимозачет)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Статья
	|				КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Статья
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходСоСчета
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходСоСчета).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеВКассу
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеВКассу).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.РасходИзКассы
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.РасходИзКассы).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.ПоступлениеНаСчет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.ПоступлениеНаСчет).Дата
	|					КОГДА ТаблицаДокумента.Документ ССЫЛКА Документ.Взаимозачет
	|						ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Документ КАК Документ.Взаимозачет).Дата
	|				КОНЕЦ
	|		ИНАЧЕ ТаблицаДокумента.Ссылка.Дата
	|	КОНЕЦ,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДоговорам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоДокументам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиРасчетыПоЗаказам,
	|	ТаблицаДокумента.Ссылка.Контрагент.ВестиУчетОплатыПоСчетам,
	|	ТаблицаДокумента.Ссылка.Финиш,
	|	ТаблицаДокумента.Документ.ЭквайринговыйТерминал,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаДокумента.Документ) = ТИП(Документ.ОперацияПоПлатежнымКартам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ТаблицаДокумента.Ссылка.Финиш
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСкидкиНаценки.КлючСвязи,
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЗаказПокупателяСкидкиНаценки.Ссылка.ВалютаДокумента = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ЗаказПокупателяСкидкиНаценки.Сумма * КурсыРегВалюты.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ ЗаказПокупателяСкидкиНаценки.Сумма * ЗаказПокупателяСкидкиНаценки.Ссылка.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * ЗаказПокупателяСкидкиНаценки.Ссылка.Кратность)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ЗаказПокупателяСкидкиНаценки.Ссылка.Дата КАК Период,
	|	ЗаказПокупателяСкидкиНаценки.Ссылка.Контрагент КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВременнаяТаблицаАвтоСкидкиНаценки
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ЗаказПокупателяСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаВалютаУчета.Значение
	|					ИЗ
	|						Константа.ВалютаУчета КАК КонстантаВалютаУчета)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						КонстантаНациональнаяВалюта.Значение
	|					ИЗ
	|						Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта)) КАК КурсыРегВалюты
	|		ПО (ИСТИНА),
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ЗаказПокупателяСкидкиНаценки.Ссылка = &Ссылка
	|	И ЗаказПокупателяСкидкиНаценки.Сумма <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСерийныеНомера.КлючСвязи,
	|	ЗаказПокупателяСерийныеНомера.СерийныйНомер
	|ПОМЕСТИТЬ ВременнаяТаблицаСерийныеНомера
	|ИЗ
	|	Документ.ЗаказПокупателя.СерийныеНомера КАК ЗаказПокупателяСерийныеНомера
	|ГДЕ
	|	ЗаказПокупателяСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|	И НЕ ЗаказПокупателяСерийныеНомера.Ссылка.СтруктурнаяЕдиницаРезерв.ОрдерныйСклад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСерийныеНомера.КлючСвязи,
	|	ЗаказПокупателяСерийныеНомера.СерийныйНомер
	|ПОМЕСТИТЬ ВременнаяТаблицаСерийныеНомераМатериалы
	|ИЗ
	|	Документ.ЗаказПокупателя.СерийныеНомераМатериалы КАК ЗаказПокупателяСерийныеНомера
	|ГДЕ
	|	ЗаказПокупателяСерийныеНомера.Ссылка = &Ссылка
	|	И &ИспользоватьСерийныеНомера
	|	И НЕ ЗаказПокупателяСерийныеНомера.Ссылка.СтруктурнаяЕдиницаРезерв.ОрдерныйСклад";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.Дляпроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("УчетПоЯчейкам", СтруктураДополнительныеСвойства.УчетнаяПолитика.УчетПоЯчейкам);
	Запрос.УстановитьПараметр("РаспределениеЗапасов", НСтр("ru = 'Распределение запасов'"));
	
	Запрос.УстановитьПараметр("ИспользоватьСерийныеНомера", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьСерийныеНомера);
	
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаНациональная", Константы.НациональнаяВалюта.Получить());
	
	Запрос.ВыполнитьПакет();
	
	// Формирование проводок документа.
	УправлениеНебольшойФирмойСервер.СформироватьТаблицуПроводок(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаВыпускПродукции(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаГрафикДвиженияЗапасов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыОтложенные(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыНераспределенные(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаДоходыИРасходыКассовыйМетод(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗаказыПокупателей(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыНаСкладах(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыВРазрезеГТД(СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыКРасходуСоСкладов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаНачисленияИУдержания(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРасчетыСПерсоналом(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПродажи(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПотребностьВЗапасах(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыРаботы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыМатериалы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыИсполнители(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыТовары(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаЗапасыПринятые(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	ОтнестиЗатратыНаРаботы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	// ДисконтныеКарты
	СформироватьТаблицаПродажиПоДисконтнойКарте(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// АвтоматическиеСкидки
	СформироватьТаблицаПродажиПоПредоставленнымАвтоматическимСкидкам(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// Эквайринг
	ЭквайринговыеОперацииСервер.СформироватьТаблицаДоходыИРасходыКассовыйМетодЭквайринг(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	// Серийные номера
	СформироватьТаблицаСерийныеНомера(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);	
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыПоЗаказамПрогноз", Новый ТаблицаЗначений);
	
	СформироватьТаблицаУправленческий(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	// Биллинг
	СформироватьТаблицаВыполнениеДоговораОбслуживания(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокументаЗаказНаряд()

Процедура ИнициализироватьДанныеДокументаЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства) 

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ЗаказПокупателяЗапасы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателяЗапасы.Количество
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ЗаказПокупателяЗапасы.ДатаОтгрузки КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|	И НЕ ЗаказПокупателяЗапасы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяМатериалы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяМатериалы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление) КАК ТипДвижения,
	|	ЗаказПокупателяМатериалы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателяМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателяМатериалы.Количество
	|		ИНАЧЕ ЗаказПокупателяМатериалы.Количество * ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалы
	|ГДЕ
	|	ЗаказПокупателяМатериалы.Ссылка = &Ссылка
	|	И ЗаказПокупателяМатериалы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|	И НЕ ЗаказПокупателяМатериалы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяЗапасы.ДатаОтгрузки КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Отгрузка) КАК ТипДвижения,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателяЗапасы.Количество
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|	И НЕ ЗаказПокупателяЗапасы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗаказПокупателяМатериалы.НомерСтроки,
	|	ЗаказПокупателяМатериалы.ДатаПоступления,
	|	&Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженийЗапасов.Поступление),
	|	ЗаказПокупателяМатериалы.Ссылка,
	|	ЗаказПокупателяМатериалы.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателяМатериалы.Количество
	|		ИНАЧЕ ЗаказПокупателяМатериалы.Количество * ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалы
	|ГДЕ
	|	ЗаказПокупателяМатериалы.Ссылка = &Ссылка
	|	И ЗаказПокупателяМатериалы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|	И НЕ ЗаказПокупателяМатериалы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяМатериалы.НомерСтроки КАК НоменСтроки,
	|	ЗаказПокупателяМатериалы.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ЗаказПокупателяМатериалы.Ссылка КАК ЗаказПокупателя,
	|	ЗаказПокупателяМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ЗаказПокупателяМатериалы.Ссылка КАК ИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателяМатериалы.Количество
	|		ИНАЧЕ ЗаказПокупателяМатериалы.Количество * ЗаказПокупателяМатериалы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.МатериалыЗаказчика КАК ЗаказПокупателяМатериалы
	|ГДЕ
	|	ЗаказПокупателяМатериалы.Ссылка = &Ссылка
	|	И ЗаказПокупателяМатериалы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку)
	|	И НЕ ЗаказПокупателяМатериалы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяМатериалы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ЗаказПокупателяЗапасы.Ссылка.Дата КАК Период,
	|	&Организация КАК Организация,
	|	ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ЗаказПокупателяЗапасы.Номенклатура.СчетУчетаЗапасов КАК СчетУчета,
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА ЗаказПокупателяЗапасы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПартии
	|			ТОГДА ЗаказПокупателяЗапасы.Партия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Партия,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка) КАК ЗаказПокупателя,
	|	ЗаказПокупателяЗапасы.Ссылка КАК КоррЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателяЗапасы.Резерв
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Резерв * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	0 КАК Сумма,
	|	&РезервированиеЗапасов КАК СодержаниеПроводки
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|	И ЗаказПокупателяЗапасы.Резерв > 0
	|	И НЕ ЗаказПокупателяЗапасы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаЗапасы.НомерСтроки) КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаЗапасы.Период КАК Период,
	|	ТаблицаЗапасы.Организация КАК Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница КАК КоррСтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета КАК СчетУчета,
	|	ТаблицаЗапасы.СчетУчета КАК КоррСчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Номенклатура КАК КоррНоменклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Характеристика КАК КоррХарактеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.Партия КАК КоррПартия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя КАК КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки КАК СодержаниеПроводки,
	|	СУММА(ТаблицаЗапасы.Количество) КАК Количество,
	|	СУММА(ТаблицаЗапасы.Сумма) КАК Сумма,
	|	ЛОЖЬ КАК ФиксированнаяСтоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗапасы.Период,
	|	ТаблицаЗапасы.Организация,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя,
	|	ТаблицаЗапасы.КоррЗаказПокупателя,
	|	ТаблицаЗапасы.СодержаниеПроводки,
	|	ТаблицаЗапасы.СтруктурнаяЕдиница,
	|	ТаблицаЗапасы.СчетУчета,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ЗаказПокупателяКалькуляция.Ссылка.Дата КАК Период,
	|	ЗаказПокупателяКалькуляция.Ссылка КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА ЗаказПокупателяКалькуляция.Номенклатура
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказПокупателяКалькуляция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура
	|	КОНЕЦ КАК Аналитика,
	|	0 КАК СуммаДоходов,
	|	СУММА(ЗаказПокупателяКалькуляция.Себестоимость) КАК СуммаРасходов,
	|	ЗаказПокупателяКалькуляция.Ссылка.Организация,
	|	ЗаказПокупателяКалькуляция.Ссылка.СтруктурнаяЕдиницаПродажи КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказПокупателя.Калькуляция КАК ЗаказПокупателяКалькуляция
	|ГДЕ
	|	ЗаказПокупателяКалькуляция.Ссылка = &Ссылка
	|	И НЕ ЗаказПокупателяКалькуляция.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ЗаказПокупателяКалькуляция.Ссылка.КалькуляцияРассчитана
	|	И ЗаказПокупателяКалькуляция.Себестоимость <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяКалькуляция.Ссылка.Дата,
	|	ЗаказПокупателяКалькуляция.Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА ЗаказПокупателяКалькуляция.Номенклатура
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипыНоменклатуры.Запас)
	|			ТОГДА ЗаказПокупателяКалькуляция.Номенклатура.СчетУчетаЗапасов
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура.СчетУчетаЗатрат
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие
	|		КОГДА ЗаказПокупателяКалькуляция.Номенклатура ССЫЛКА ПланСчетов.Управленческий
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗаказПокупателяКалькуляция.Номенклатура
	|	КОНЕЦ,
	|	ЗаказПокупателяКалькуляция.Ссылка.Организация,
	|	ЗаказПокупателяКалькуляция.Ссылка.СтруктурнаяЕдиницаПродажи,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЗаказПокупателяКалькуляция.НоменклатураИзделие.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.НомерСтроки,
	|	ЗаказПокупателяЗапасы.Ссылка.Дата,
	|	ЗаказПокупателяЗапасы.Ссылка,
	|	ЗНАЧЕНИЕ(ПланСчетов.Управленческий.ВыручкаОтПродаж),
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Всего,
	|	0,
	|	ЗаказПокупателяЗапасы.Ссылка.Организация,
	|	ЗаказПокупателяЗапасы.Ссылка.СтруктурнаяЕдиницаПродажи,
	|	ЗаказПокупателяЗапасы.Номенклатура.НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка
	|	И НЕ ЗаказПокупателяЗапасы.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|	И ЗаказПокупателяЗапасы.Ссылка.КалькуляцияРассчитана";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказПокупателя);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ИспользоватьПартии",  СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьПартии);
	Запрос.УстановитьПараметр("РезервированиеЗапасов", НСтр("ru = 'Резервирование запасов'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПокупателей", МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПотребностьВЗапасах", МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрафикДвиженияЗапасов", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРазмещениеЗаказов", МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасы", МассивРезультатов[5].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыПоЗаказамПрогноз", МассивРезультатов[6].Выгрузить());
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыпускПродукции", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходы", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетод", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыНераспределенные", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыОтложенные", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыНаСкладах", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыКРасходуСоСкладов", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗапасыПринятые", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияИУдержания", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПерсоналом", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаУправленческий", Новый ТаблицаЗначений);
	
	// ДисконтныеКарты
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажиПоДисконтнойКарте", Новый ТаблицаЗначений);
	// АвтоматическиеСкидки
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныеАвтоматическиеСкидки", Новый ТаблицаЗначений);
	// Эквайринг
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходыИРасходыКассовыйМетодЭквайринг", Новый ТаблицаЗначений);
	
	//Серийные номера - только для Заказ-наряда
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераОстатки", Новый ТаблицаЗначений);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСерийныеНомераГарантии", Новый ТаблицаЗначений);
	
	СформироватьТаблицаЗапасы(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
	СформироватьТаблицаПлатежныйКалендарь(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОплатаСчетовИЗаказов(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокументаЗаказПокупателя()

Процедура ИнициализироватьДанныеДокумента(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства, ДокументОбъектЗаказПокупателя) Экспорт

	Если ДокументОбъектЗаказПокупателя.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		ИнициализироватьДанныеДокументаЗаказНаряд(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	Иначе
		ИнициализироватьДанныеДокументаЗаказПокупателя(ДокументСсылкаЗаказПокупателя, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольОтрицательныхОстатков

Процедура ВыполнитьКонтроль(ДокументОбъектЗаказПокупателя, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УправлениеНебольшойФирмойСервер.ВыполнитьКонтрольОстатков() Тогда
		Возврат;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Если временные таблицы "ДвиженияЗапасыНаСкладахИзменение", "ДвиженияЗапасыИзменение",
	// "ДвиженияЗаказыПокупателейИзменение", "ДвиженияПотребностьВЗапасахИзменение",
	// "ДвиженияРасчетыСПокупателямиИзменение" содержат записи, необходимо выполнить 
	// контроль остатков.
	
	Если СтруктураВременныеТаблицы.ДвиженияЗапасыНаСкладахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗапасыВРазрезеГТДИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияЗаказыПокупателейИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияПотребностьВЗапасахИзменение
		ИЛИ СтруктураВременныеТаблицы.ДвиженияРасчетыСПокупателямиИзменение 
		ИЛИ СтруктураВременныеТаблицы.ДвиженияСерийныеНомераИзменение
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = СформироватьТекстЗапросаОстаткиЗапасыНаСкладах() // [0]
		+ СформироватьТекстЗапросаОстаткиЗапасы() // [1]
		+ СформироватьТекстЗапросаОстаткиЗаказыПокупателей() // [2]
		+ СформироватьТекстЗапросаОстаткиПотребностьВЗапасах() // [3]
		+ СформироватьТекстЗапросаОстаткиРасчетыСПокупателями()// [4]
		+ СформироватьТекстЗапросаОстаткиСерийныеНомера()// [5]
		+ СформироватьТекстЗапросаОстаткиЗапасыВРазрезеГТД();
		
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Отрицательный остаток запасов на складе.
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[0].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыНаСкладах(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета запасов.
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[1].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасы(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по заказу покупателя.
		Если НЕ МассивРезультатов[2].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[2].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗаказыПокупателей(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток потребности в запасах.
		Если НЕ МассивРезультатов[3].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[3].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструПотребностьВЗапасах(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по расчетам с покупателями.
		Если НЕ МассивРезультатов[4].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[4].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструРасчетыСПокупателями(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток учета серийных номеров.
		Если НЕ МассивРезультатов[5].Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[5].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструСерийныеНомера(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
		КонецЕсли;
		
		// Отрицательный остаток по остаткам запасов в разрезе номеров ГТД.
		Если Константы.КонтролироватьОстаткиПоНомерамГТД.Получить()
			И НЕ МассивРезультатов[6].Пустой() Тогда
			
			ВыборкаИзРезультатаЗапроса = МассивРезультатов[6].Выбрать();
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибкахПроведенияПоРегиструЗапасыВРазрезеГТД(ДокументОбъектЗаказПокупателя, ВыборкаИзРезультатаЗапроса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

Функция СформироватьТекстЗапросаОстаткиЗапасыНаСкладах()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыНаСкладахИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗапасыНаСкладахИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияЗапасыНаСкладахИзменение.Ячейка КАК ЯчейкаПредставление,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыНаСкладахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасыНаСкладах,
	|	ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасыНаСкладах
	|ИЗ
	|	ДвиженияЗапасыНаСкладахИзменение КАК ДвиженияЗапасыНаСкладахИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(&МоментКонтроля, ) КАК ЗапасыНаСкладахОстатки
	|		ПО ДвиженияЗапасыНаСкладахИзменение.Организация = ЗапасыНаСкладахОстатки.Организация
	|			И ДвиженияЗапасыНаСкладахИзменение.СтруктурнаяЕдиница = ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыНаСкладахИзменение.Номенклатура = ЗапасыНаСкладахОстатки.Номенклатура
	|			И ДвиженияЗапасыНаСкладахИзменение.Характеристика = ЗапасыНаСкладахОстатки.Характеристика
	|			И ДвиженияЗапасыНаСкладахИзменение.Партия = ЗапасыНаСкладахОстатки.Партия
	|			И ДвиженияЗапасыНаСкладахИзменение.Ячейка = ЗапасыНаСкладахОстатки.Ячейка
	|			И (ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗапасыНаСкладах()

Функция СформироватьТекстЗапросаОстаткиЗапасы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗапасыИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗапасыИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗапасыИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияЗапасыИзменение.СчетУчета КАК СчетУчетаПредставление,
	|	ДвиженияЗапасыИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗапасыИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияЗапасыИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияЗапасыИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
	|	ЗапасыОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	ЗапасыОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗапасыИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗапасы,
	|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗапасы
	|ИЗ
	|	ДвиженияЗапасыИзменение КАК ДвиженияЗапасыИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(&МоментКонтроля, ) КАК ЗапасыОстатки
	|		ПО ДвиженияЗапасыИзменение.Организация = ЗапасыОстатки.Организация
	|			И ДвиженияЗапасыИзменение.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
	|			И ДвиженияЗапасыИзменение.СчетУчета = ЗапасыОстатки.СчетУчета
	|			И ДвиженияЗапасыИзменение.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И ДвиженияЗапасыИзменение.Характеристика = ЗапасыОстатки.Характеристика
	|			И ДвиженияЗапасыИзменение.Партия = ЗапасыОстатки.Партия
	|			И ДвиженияЗапасыИзменение.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
	|			И (ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗапасы()

Функция СформироватьТекстЗапросаОстаткиЗаказыПокупателей()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияЗаказыПокупателейИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияЗаказыПокупателейИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя КАК ЗаказПредставление,
	|	ДвиженияЗаказыПокупателейИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияЗаказыПокупателейИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ЗаказыПокупателейОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияЗаказыПокупателейИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК ОстатокЗаказыПокупателей,
	|	ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказыПокупателей
	|ИЗ
	|	ДвиженияЗаказыПокупателейИзменение КАК ДвиженияЗаказыПокупателейИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&МоментКонтроля, ) КАК ЗаказыПокупателейОстатки
	|		ПО ДвиженияЗаказыПокупателейИзменение.Организация = ЗаказыПокупателейОстатки.Организация
	|			И ДвиженияЗаказыПокупателейИзменение.ЗаказПокупателя = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|			И ДвиженияЗаказыПокупателейИзменение.Номенклатура = ЗаказыПокупателейОстатки.Номенклатура
	|			И ДвиженияЗаказыПокупателейИзменение.Характеристика = ЗаказыПокупателейОстатки.Характеристика
	|			И (ЕСТЬNULL(ЗаказыПокупателейОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиЗаказыПокупателей()

Функция СформироватьТекстЗапросаОстаткиПотребностьВЗапасах()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияПотребностьВЗапасахИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияПотребностьВЗапасахИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.ТипДвижения КАК ТипДвиженияПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя КАК ЗаказПокупателяПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияПотребностьВЗапасахИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ПотребностьВЗапасахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияПотребностьВЗапасахИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК ОстатокПотребностьВЗапасах,
	|	ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокПотребностьВЗапасах
	|ИЗ
	|	ДвиженияПотребностьВЗапасахИзменение КАК ДвиженияПотребностьВЗапасахИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПотребностьВЗапасах.Остатки(&МоментКонтроля, ) КАК ПотребностьВЗапасахОстатки
	|		ПО ДвиженияПотребностьВЗапасахИзменение.Организация = ПотребностьВЗапасахОстатки.Организация
	|			И ДвиженияПотребностьВЗапасахИзменение.ТипДвижения = ПотребностьВЗапасахОстатки.ТипДвижения
	|			И ДвиженияПотребностьВЗапасахИзменение.ЗаказПокупателя = ПотребностьВЗапасахОстатки.ЗаказПокупателя
	|			И ДвиженияПотребностьВЗапасахИзменение.Номенклатура = ПотребностьВЗапасахОстатки.Номенклатура
	|			И ДвиженияПотребностьВЗапасахИзменение.Характеристика = ПотребностьВЗапасахОстатки.Характеристика
	|			И (ЕСТЬNULL(ПотребностьВЗапасахОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиПотребностьВЗапасах()

Функция СформироватьТекстЗапросаОстаткиРасчетыСПокупателями()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияРасчетыСПокупателямиИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияРасчетыСПокупателямиИзменение.Организация КАК ОрганизацияПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Контрагент КАК КонтрагентПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Договор КАК ДоговорПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Договор.ВалютаРасчетов КАК ВалютаПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Документ КАК ДокументПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.Заказ КАК ЗаказПредставление,
	|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетовПредставление,
	|	ЛОЖЬ КАК ДвиженияДенежныхДокументов,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПередЗаписью КАК СуммаПередЗаписью,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаПриЗаписи КАК СуммаПриЗаписи,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаИзменение КАК СуммаИзменение,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПередЗаписью КАК СуммаВалПередЗаписью,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи КАК СуммаВалПриЗаписи,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение КАК СуммаВалИзменение,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалПриЗаписи - ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаПолученныхАвансов,
	|	ДвиженияРасчетыСПокупателямиИзменение.СуммаВалИзменение + ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаНепогашеннойЗадолженности,
	|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) КАК СуммаВалОстаток,
	|	ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов КАК ТипРасчетов
	|ИЗ
	|	ДвиженияРасчетыСПокупателямиИзменение КАК ДвиженияРасчетыСПокупателямиИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПокупателями.Остатки(&МоментКонтроля, ) КАК РасчетыСПокупателямиОстатки
	|		ПО ДвиженияРасчетыСПокупателямиИзменение.Организация = РасчетыСПокупателямиОстатки.Организация
	|			И ДвиженияРасчетыСПокупателямиИзменение.Контрагент = РасчетыСПокупателямиОстатки.Контрагент
	|			И ДвиженияРасчетыСПокупателямиИзменение.Договор = РасчетыСПокупателямиОстатки.Договор
	|			И ДвиженияРасчетыСПокупателямиИзменение.Документ = РасчетыСПокупателямиОстатки.Документ
	|			И ДвиженияРасчетыСПокупателямиИзменение.Заказ = РасчетыСПокупателямиОстатки.Заказ
	|			И ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = РасчетыСПокупателямиОстатки.ТипРасчетов
	|			И (ВЫБОР
	|				КОГДА ДвиженияРасчетыСПокупателямиИзменение.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|					ТОГДА ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) > 0
	|				ИНАЧЕ ЕСТЬNULL(РасчетыСПокупателямиОстатки.СуммаВалОстаток, 0) < 0
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиРасчетыСПокупателями()

Функция СформироватьТекстЗапросаОстаткиСерийныеНомера()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДвиженияСерийныеНомераИзменение.НомерСтроки КАК НомерСтроки,
	|	ДвиженияСерийныеНомераИзменение.СерийныйНомер КАК СерийныйНомерПредставление,
	|	ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПредставление,
	|	ДвиженияСерийныеНомераИзменение.Номенклатура КАК НоменклатураПредставление,
	|	ДвиженияСерийныеНомераИзменение.Характеристика КАК ХарактеристикаПредставление,
	|	ДвиженияСерийныеНомераИзменение.Партия КАК ПартияПредставление,
	|	ДвиженияСерийныеНомераИзменение.Ячейка КАК ЯчейкаПредставление,
	|	СерийныеНомераОстатки.СтруктурнаяЕдиница.ТипСтруктурнойЕдиницы КАК ТипСтруктурнойЕдиницы,
	|	СерийныеНомераОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(ДвиженияСерийныеНомераИзменение.КоличествоИзменение, 0) + ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК ОстатокСерийныеНомера,
	|	ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокСерийныеНомера
	|ИЗ
	|	ДвиженияСерийныеНомераИзменение КАК ДвиженияСерийныеНомераИзменение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(&МоментКонтроля, ) КАК СерийныеНомераОстатки
	|		ПО ДвиженияСерийныеНомераИзменение.СтруктурнаяЕдиница = СерийныеНомераОстатки.СтруктурнаяЕдиница
	|			И ДвиженияСерийныеНомераИзменение.Номенклатура = СерийныеНомераОстатки.Номенклатура
	|			И ДвиженияСерийныеНомераИзменение.Характеристика = СерийныеНомераОстатки.Характеристика
	|			И ДвиженияСерийныеНомераИзменение.Партия = СерийныеНомераОстатки.Партия
	|			И ДвиженияСерийныеНомераИзменение.СерийныйНомер = СерийныеНомераОстатки.СерийныйНомер
	|			И ДвиженияСерийныеНомераИзменение.Ячейка = СерийныеНомераОстатки.Ячейка
	|			И (ЕСТЬNULL(СерийныеНомераОстатки.КоличествоОстаток, 0) < 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции // СформироватьТекстЗапросаОстаткиСерийныеНомера()

#КонецОбласти

#КонецЕсли