#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения на основании документа ПриходныйОрдер.
//
// Параметры:
//	ДокументСсылкаПриходныйОрдер - ДокументСсылка.ПриходныйОрдер - Плановый платеж
//	
Процедура ЗаполнитьПоПриходномуОрдеру(ДокументСсылкаПриходныйОрдер) Экспорт
	
	Организация = ДокументСсылкаПриходныйОрдер.Организация;
	ДокументОснование = ДокументСсылкаПриходныйОрдер.Ссылка;
	Запасы.Очистить();
	
	Для каждого ТекСтрокаЗапасы Из ДокументСсылкаПриходныйОрдер.Запасы Цикл
		
		НоваяСтрока = Запасы.Добавить();
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаЗапасы.ЕдиницаИзмерения;
		НоваяСтрока.Количество = ТекСтрокаЗапасы.Количество;
		НоваяСтрока.Номенклатура = ТекСтрокаЗапасы.Номенклатура;
		НоваяСтрока.Партия = ТекСтрокаЗапасы.Партия;
		НоваяСтрока.Характеристика = ТекСтрокаЗапасы.Характеристика;
		НоваяСтрока.СтруктурнаяЕдиница = ДокументСсылкаПриходныйОрдер.СтруктурнаяЕдиница;
		НоваяСтрока.Ячейка = ДокументСсылкаПриходныйОрдер.Ячейка;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоПриходномуОрдеру()

// Обработчик ввода на основании документа РасходИзКассы.
//
// Параметры:
//	ДокументСсылкаРасходИзКассы - ДокументСсылка.РасходИзКассы.
//	
Процедура ЗаполнитьПоРасходуИзКассы(ДокументСсылкаРасходИзКассы) Экспорт
	
	Если ДокументСсылкаРасходИзКассы.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Авансовый отчет на основании расхода из кассы с этим видом операции!'");
	КонецЕсли;
	
	Организация = ДокументСсылкаРасходИзКассы.Организация;
	ДокументОснование = ДокументСсылкаРасходИзКассы.Ссылка;
	Сотрудник = ДокументСсылкаРасходИзКассы.Подотчетник;
	ВалютаДокумента = ДокументСсылкаРасходИзКассы.ВалютаДенежныхСредств;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	ВыданныеАвансы.Очистить();
	НоваяСтрока = ВыданныеАвансы.Добавить();
	НоваяСтрока.Документ = ДокументСсылкаРасходИзКассы.Ссылка;
	НоваяСтрока.Сумма = ДокументСсылкаРасходИзКассы.СуммаДокумента;
	
КонецПроцедуры // ЗаполнитьПоРасходуИзКассы()

// Обработчик заполнения на основании документа РасходСоСчета.
//
// Параметры:
//	ДокументСсылкаРасходСоСчета - ДокументСсылка.РасходСоСчета.
//	
Процедура ЗаполнитьПоРасходуСоСчета(ДокументСсылкаРасходСоСчета) Экспорт
	
	Если ДокументСсылкаРасходСоСчета.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Подотчетнику Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести Авансовый отчет на основании расхода со счета с этим видом операции!'");
	КонецЕсли;
	
	Организация = ДокументСсылкаРасходСоСчета.Организация;
	ДокументОснование = ДокументСсылкаРасходСоСчета.Ссылка;
	Сотрудник = ДокументСсылкаРасходСоСчета.Подотчетник;
	ВалютаДокумента = ДокументСсылкаРасходСоСчета.ВалютаДенежныхСредств;
	
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ВалютаДокумента));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	ВыданныеАвансы.Очистить();
	НоваяСтрока = ВыданныеАвансы.Добавить();
	НоваяСтрока.Документ = ДокументСсылкаРасходСоСчета.Ссылка;
	НоваяСтрока.Сумма = ДокументСсылкаРасходСоСчета.СуммаДокумента;
	
КонецПроцедуры // ЗаполнитьПоРасходуСоСчета()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходИзКассы")] = "ЗаполнитьПоРасходуИзКассы";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходСоСчета")] = "ЗаполнитьПоРасходуСоСчета";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИзрасходованоИтог = ВыданныеАвансы.Итог("Сумма");
	ЗапасыИтог = Запасы.Итог("Всего");
	РасходыИтог = Расходы.Итог("Всего");
	ОплатыИтог = Оплаты.Итог("СуммаПлатежа");
	
	Если ИзрасходованоИтог > ЗапасыИтог + РасходыИтог + ОплатыИтог Тогда
		ТекстСообщения = НСтр("ru = 'Израсходованная сумма авансов превышает сумму по документу!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
			ЭтотОбъект,
			ТекстСообщения,
			"ВыданныеАвансы",
			1,
			"Сумма",
			Отказ
		);
	КонецЕсли;
	
	Для каждого СтрокаОплаты Из Оплаты Цикл
		Если СтрокаОплаты.Контрагент.ВестиРасчетыПоДокументам
		   И НЕ СтрокаОплаты.ПризнакАванса
		   И НЕ ЗначениеЗаполнено(СтрокаОплаты.Документ) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Документ расчетов"" в строке %НомерСтроки% списка ""Оплаты"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрокаОплаты.НомерСтроки));
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Оплаты",
				СтрокаОплаты.НомерСтроки,
				"Документ",
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаРасходы Из Расходы Цикл
		
		Если ПолучитьФункциональнуюОпцию("УчетПоНесколькимПодразделениям")
		   И (СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.НезавершенноеПроизводство
		 ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.КосвенныеЗатраты
		 ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Доходы
		 ИЛИ СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы)
		 И НЕ ЗначениеЗаполнено(СтрокаРасходы.СтруктурнаяЕдиница) Тогда
			ТекстСообщения = НСтр(
				"ru = 'Для номенклатуры ""%Номенклатура%"" указанной в строке %НомерСтроки% списка ""Расходы"", должен быть заполнен реквизит ""Подразделение"".'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", СокрЛП(Строка(СтрокаРасходы.Номенклатура))); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%",Строка(СтрокаРасходы.НомерСтроки));
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
				ЭтотОбъект,
				ТекстСообщения,
				"Расходы",
				СтрокаРасходы.НомерСтроки,
				"СтруктурнаяЕдиница",
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего") + Расходы.Итог("Всего") + Оплаты.Итог("СуммаПлатежа");
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		Для каждого СтрокаРасходы из Расходы Цикл
			
			Если СтрокаРасходы.Номенклатура.СчетУчетаЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
				
				СтрокаРасходы.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
				
			Иначе
				
				СтрокаРасходы.НаправлениеДеятельности = Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Оплаты Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контрагент)
		И НЕ СтрокаТЧ.Контрагент.ВестиРасчетыПоДоговорам
		И НЕ ЗначениеЗаполнено(СтрокаТЧ.Договор) Тогда
			СтрокаТЧ.Договор = СтрокаТЧ.Контрагент.ДоговорПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.АвансовыйОтчет.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКПоступлениюНаСклады(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПодотчетниками(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыКассовыйМетод(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыНераспределенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходыОтложенные(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.АвансовыйОтчет.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.АвансовыйОтчет.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Подчиненная счет-фактура (полученная)
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура отмены проведения у подченненой счет фактуры (полученной)
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка, Истина);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
		
	ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится %ПредставлениеСчетФактуры%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Авансовый отчет № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (полученная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры //КонтрольПодчиненнойСчетФактуры()

#КонецОбласти

#КонецЕсли