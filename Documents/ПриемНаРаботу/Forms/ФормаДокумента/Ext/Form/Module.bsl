#Область ОбработчикиСлужебные

&НаКлиенте
// Процедура изменяет текущую строку ТЧ Сотрудники
//
Процедура ИзменитьТекущегоСотрудника()
	
	Элементы.Сотрудники.ТекущаяСтрока = ТекущийСотрудник;
	
КонецПроцедуры // ИзменитьТекущегоСотрудника()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервере
// Процедура заполняет список выбора управляющего поля Текущий сотрудник
//
Процедура ЗаполнитьСписокВыбораТекущихСотрудников()
	
	Элементы.ТекущийСотрудникНачисленияУдержания.СписокВыбора.Очистить();
	Элементы.ТекущийСотрудникНалоги.СписокВыбора.Очистить();
	Для каждого СтрокаСотрудник Из Объект.Сотрудники Цикл
		
		ПредставлениеСтроки = Строка(СтрокаСотрудник.Сотрудник) + НСтр("ru =', ТН: '") + Строка(СтрокаСотрудник.Сотрудник.Код);
		Элементы.ТекущийСотрудникНачисленияУдержания.СписокВыбора.Добавить(СтрокаСотрудник.ПолучитьИдентификатор(), ПредставлениеСтроки);
		Элементы.ТекущийСотрудникНалоги.СписокВыбора.Добавить(СтрокаСотрудник.ПолучитьИдентификатор(), ПредставлениеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВыбораТекущихСотрудников()

&НаСервере
Процедура УстановитьВидимостьВкладок()
	
	Если Объект.Организация.ИспользуетсяОтчетность Тогда
		Элементы.СтраницаНалоги.Видимость = Ложь;
	Иначе
		Элементы.СтраницаНалоги.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	ИмяТабличнойЧасти = "Сотрудники";
	ВалютаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	
	Если НЕ Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
		Если Элементы.Найти("СотрудникиСотрудникКод") <> Неопределено Тогда
			Элементы.СотрудникиСотрудникКод.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	УчетНалогов = ПолучитьФункциональнуюОпцию("ВестиУчетНалогаНаДоходыИВзносов");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТекущийСотрудникНалоги", "Видимость", УчетНалогов);
	Если НЕ УчетНалогов Тогда
		
		Элементы.Сотрудники.РасширеннаяПодсказка.Заголовок = 
			НСтр("ru = 'Начисления и удержания указываются на соответствующей странице для каждого сотрудника в отдельности.'");
			
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
	// Конец СтандартныеПодсистемы.Печать
	УстановитьВидимостьВкладок();
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзменениеПоКадровомуУчету");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_Организации" И Источник = Объект.Организация Тогда
		УстановитьВидимостьВкладок();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	УстановитьВидимостьВкладок();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриСменеСтраницы поля СтраницыОсновная
//
Процедура СтраницыОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаНачисленияУдержания
		ИЛИ ТекущаяСтраница = Элементы.СтраницаНалоги Тогда
		
		ЗаполнитьСписокВыбораТекущихСотрудников();
		
		ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
		
		Если ДанныеТекущейСтроки <> Неопределено Тогда
			
			ТекущийСотрудник = ДанныеТекущейСтроки.ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СтраницыОсновнаяПриСменеСтраницы()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ТекущийСотрудникНачисленияУдержания
//
Процедура ТекущийСотрудникНачисленияУдержанияПриИзменении(Элемент)
	
	ИзменитьТекущегоСотрудника();
	
КонецПроцедуры // ТекущийСотрудникНачисленияУдержанияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ТекущийСотрудникНалоги
//
Процедура ТекущийСотрудникНалогиПриИзменении(Элемент)
	
	ИзменитьТекущегоСотрудника();
	
КонецПроцедуры // ТекущийСотрудникНалогиПриИзменении()

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
// Процедура - обработчик события ПриАктивизации строки табличной части Сотрудники.
//
Процедура СотрудникиПриАктивизацииСтроки(Элемент)
		
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НачисленияУдержания");
	УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НалогиНаДоходы");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриНачалеРедактирования табличной части Сотрудники.
//
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ЭтаФорма);
		УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НачисленияУдержания");
		УправлениеНебольшойФирмойКлиент.УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ЭтаФорма, "НалогиНаДоходы");
		
		СтрокаТабличнойЧасти = Элементы.Сотрудники.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтруктурнаяЕдиница) Тогда
			
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ОсновноеПодразделение;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередУдалением табличной части Сотрудники.
//
Процедура СотрудникиПередУдалением(Элемент, Отказ)

	УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НачисленияУдержания");
    УправлениеНебольшойФирмойКлиент.УдалитьСтрокиПодчиненнойТабличнойЧасти(ЭтаФорма, "НалогиНаДоходы");


КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении Сотрудник табличной части Сотрудники.
//
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	Элементы.Сотрудники.ТекущиеДанные.ЗанимаемыхСтавок = 1;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриНачалеРедактирования табличной части НачисленияУдержания.
//
Процедура НачисленияУдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
		СтрокаТабличнойЧасти = Элементы.НачисленияУдержания.ТекущиеДанные;
		СтрокаТабличнойЧасти.Валюта = ВалютаПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередНачаломДобавления табличной части НачисленияУдержания.
//
Процедура НачисленияУдержанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении ВидНачисленияУдержания табличной части НачисленияУдержания.
//
Процедура НачисленияУдержанияВидНачисленияУдержанияПриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.ПроставитьСчетЗатратПоУмолчанию(ЭтаФорма);
	
КонецПроцедуры // НачисленияУдержанияВидНачисленияУдержанияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриНачалеРедактирования табличной части НалогиНаДоходы.
//
Процедура НалогиНаДоходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		УправлениеНебольшойФирмойКлиент.ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ЭтаФорма, Элемент.Имя);
		СтрокаТабличнойЧасти = Элементы.НалогиНаДоходы.ТекущиеДанные;
		СтрокаТабличнойЧасти.Валюта = ВалютаПоУмолчанию;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередНачаломДобавления табличной части НалогиНаДоходы.
//
Процедура НалогиНаДоходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = УправлениеНебольшойФирмойКлиент.ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти



