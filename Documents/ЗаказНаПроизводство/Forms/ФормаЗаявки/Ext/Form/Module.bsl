
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем ПриИзмененииСтарт;

&НаКлиенте
Перем ПриИзмененииФиниш;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	
	СтруктураДанные.Вставить("ТипНоменклатуры", СтруктураДанные.Номенклатура.ТипНоменклатуры);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Процедура формирует соответствие видов операций.
//
&НаСервере
Процедура ПолучитьСтруктуруВидовОпераций()
	
	Структура = Новый Структура;
	
	Структура.Вставить("Сборка", Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка);
	Структура.Вставить("Разборка", Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка);
	
	ВидыОпераций = Структура;
	
КонецПроцедуры // ПолучитьСтруктуруВидовОпераций()

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступность()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		
		// Тип номенклатуры.
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		// Тип номенклатуры.
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивЗапасРабота = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивЗапасРабота);
		НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивЗапасРабота);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

////////////////////////////////////////////////////////////////////////////////
// КАЛЕНДАРЬ (ЗАГРУЗКА РЕСУРСОВ)

/// Процедура формирует период расписания работ.
//
&НаКлиенте
Процедура СформироватьПериодРасписанияРабот()
	
	ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
	ДатаКалендаряОкончание = КонецДня(ДатаКалендаря);
	
	ДеньРасписания = Формат(ДатаКалендаряНачало, "ДФ=дд");
	МесяцРасписания = Формат(ДатаКалендаряНачало, "ДФ=МММ");
	ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
	ДеньНеделиРасписания = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
	
	ПредставлениеПериода = ДеньНеделиРасписания + " " + ДеньРасписания + " " + МесяцРасписания + " " + ГодРасписания;
	
КонецПроцедуры // СформироватьПериодРасписанияРабот()

// Функция возвращает список ресурсов по виду ресурса.
//
&НаСервере
Функция ПолучитьСписокРесурсовПоВидамРесурсов()
	
	СписокВидовРесурсов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	РегистрСведений.ВидыРесурсовПредприятия КАК ВидыРесурсовПредприятия
	|ГДЕ
	|	ВидыРесурсовПредприятия.ВидРесурсаПредприятия = &ВидРесурсаПредприятия";
	
	Запрос.УстановитьПараметр("ВидРесурсаПредприятия", ОтборВидРесурса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СписокВидовРесурсов;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВидовРесурсов.Добавить(Выборка.РесурсПредприятия);
	КонецЦикла;
	
	Возврат СписокВидовРесурсов;
	
КонецФункции // ПолучитьСписокРесурсовПоВидамРесурсов()

// Функция возвращает список ресурсов для быстрого отбора.
//
&НаСервере
Функция ПолучитьСписокРесурсовДляОтбора()
	
	Если ЗначениеЗаполнено(ОтборКлючевойРесурс) Тогда
		СписокВидовРесурсов = Новый СписокЗначений;
		СписокВидовРесурсов.Добавить(ОтборКлючевойРесурс);
	ИначеЕсли ЗначениеЗаполнено(ОтборВидРесурса) Тогда
		СписокВидовРесурсов = ПолучитьСписокРесурсовПоВидамРесурсов();
	Иначе
		СписокВидовРесурсов = Неопределено;
	КонецЕсли;
	
	Возврат СписокВидовРесурсов;
	
КонецФункции // ПолучитьСписокРесурсовДляОтбора()

// Процедура заполняет общие параметры календаря.
//
&НаСервере
Процедура ЗаполнитьПараметрыКалендаряПриСозданииНаСервере()
	
	Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ОграничениеВремениС = Параметры.ОграничениеВремениС;
		ОграничениеВремениПо = Параметры.ОграничениеВремениПо;
		КратностьДня = Параметры.КратностьДня;
		Если Параметры.Свойство("ДатаКалендаря") Тогда
			ДатаКалендаря = Параметры.ДатаКалендаря;
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Расшифровка") Тогда
		ОграничениеВремениС = Параметры.ОграничениеВремениС;
		ОграничениеВремениПо = Параметры.ОграничениеВремениПо;
		КратностьДня = Параметры.КратностьДня;
		ОтборКлючевойРесурс = Параметры.ОтборКлючевойРесурс;
		ОтборВидРесурса = Параметры.ОтборВидРесурса;
		РасшифровкаКалендаря = Параметры.Расшифровка;
		Если РасшифровкаКалендаря.Количество() > 0 Тогда
			СтруктураИнтервал = РасшифровкаКалендаря[0];
			Если СтруктураИнтервал.Свойство("РесурсПредприятия") Тогда
				ДатаКалендаря = ТекущаяДата();
				ЗаполнитьТаблицуЗадействованныхРесурсовПриСозданииНаСервере(РасшифровкаКалендаря);
			Иначе
				ДатаКалендаря = СтруктураИнтервал.Интервал;
			КонецЕсли;
		Иначе
			ДатаКалендаря = ТекущаяДата();
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("ТолькоДень") Тогда
		ОграничениеВремениС = Параметры.ОграничениеВремениС;
		ОграничениеВремениПо = Параметры.ОграничениеВремениПо;
		КратностьДня = Параметры.КратностьДня;
		ОтборКлючевойРесурс = Параметры.ОтборКлючевойРесурс;
		ОтборВидРесурса = Параметры.ОтборВидРесурса;
		ДатаКалендаря =  Параметры.ТолькоДень;
		Расшифровка = Неопределено;
	Иначе
		ОграничениеВремениС = '00010101090000';
		ОграничениеВремениПо = '00010101210000';
		КратностьДня = 30;
		ДатаКалендаря = ТекущаяДата();
		Расшифровка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыКалендаряПриСозданииНаСервере()

// Процедура формирует таблицу ресурсов для заявки.
//
&НаСервере
Процедура ЗаполнитьТаблицуЗадействованныхРесурсовПриСозданииНаСервере(РасшифровкаКалендаря)
	
	ТаблицаРесурсов = Новый ТаблицаЗначений;
	ТаблицаРесурсов.Колонки.Добавить("РесурсПредприятия");
	ТаблицаРесурсов.Колонки.Добавить("РесурсПредприятияНаименование");
	ТаблицаРесурсов.Колонки.Добавить("Интервал");
	Для каждого ЭлРасшифровки Из РасшифровкаКалендаря Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		НоваяСтрока.РесурсПредприятия = ЭлРасшифровки.РесурсПредприятия;
		НоваяСтрока.РесурсПредприятияНаименование = ЭлРасшифровки.РесурсПредприятия.Наименование;
		НоваяСтрока.Интервал = ЭлРасшифровки.Интервал;
	КонецЦикла;
	
	НоваяСтрока = Неопределено;
	Ресурс = Неопределено;
	Индекс = 1;
	ПервыйСтарт = '00010101';
	ПоследнийФиниш = '00010101';
	ТаблицаРесурсов.Сортировать("РесурсПредприятияНаименование,Интервал");
	Для каждого СтрокаРесурсов Из ТаблицаРесурсов Цикл
		Если Индекс = 1 Тогда
			ДатаКалендаря = СтрокаРесурсов.Интервал;
		КонецЕсли;
		Если Ресурс = СтрокаРесурсов.РесурсПредприятия Тогда
			Если НоваяСтрока <> Неопределено Тогда
				ПредыдущийФиниш = НоваяСтрока.Финиш;
				СледующийФиниш = СтрокаРесурсов.Интервал + КратностьДня * 60;
				Если НачалоДня(ПредыдущийФиниш) = НачалоДня(СледующийФиниш) Тогда
					НоваяСтрока.Финиш = СтрокаРесурсов.Интервал + КратностьДня * 60;
					Если ПервыйСтарт > НоваяСтрока.Старт ИЛИ ПервыйСтарт = '00010101' Тогда
						ПервыйСтарт = НоваяСтрока.Старт;
					КонецЕсли;
					Если ПоследнийФиниш < НоваяСтрока.Финиш ИЛИ ПоследнийФиниш = '00010101' Тогда
						ПоследнийФиниш = НоваяСтрока.Финиш;
					КонецЕсли;
				Иначе
					НоваяСтрока.Финиш = ПредыдущийФиниш;
					НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
					НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.РесурсПредприятия;
					НоваяСтрока.Мощность = 1;
					НоваяСтрока.Старт = СледующийФиниш - КратностьДня * 60;
					НоваяСтрока.Финиш = СледующийФиниш;
					Если ПервыйСтарт > НоваяСтрока.Старт ИЛИ ПервыйСтарт = '00010101' Тогда
						ПервыйСтарт = НоваяСтрока.Старт;
					КонецЕсли;
					Если ПоследнийФиниш < НоваяСтрока.Финиш ИЛИ ПоследнийФиниш = '00010101' Тогда
						ПоследнийФиниш = НоваяСтрока.Финиш;
					КонецЕсли;
				КонецЕсли;
				ДлительностьВСекундах = НоваяСтрока.Финиш - НоваяСтрока.Старт;
				Часы = Цел(ДлительностьВСекундах / 3600);
				Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
				НоваяСтрока.Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
			КонецЕсли;
		Иначе
			НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
			НоваяСтрока.РесурсПредприятия = СтрокаРесурсов.РесурсПредприятия;
			НоваяСтрока.Мощность = 1;
			НоваяСтрока.Старт = СтрокаРесурсов.Интервал;
			НоваяСтрока.Финиш = СтрокаРесурсов.Интервал + КратностьДня * 60;
			ДлительностьВСекундах = НоваяСтрока.Финиш - НоваяСтрока.Старт;
			Часы = Цел(ДлительностьВСекундах / 3600);
			Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
			НоваяСтрока.Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
			Ресурс = СтрокаРесурсов.РесурсПредприятия;
			Если ПервыйСтарт > НоваяСтрока.Старт ИЛИ ПервыйСтарт = '00010101' Тогда
				ПервыйСтарт = НоваяСтрока.Старт;
			КонецЕсли;
			Если ПоследнийФиниш < НоваяСтрока.Финиш ИЛИ ПоследнийФиниш = '00010101' Тогда
				ПоследнийФиниш = НоваяСтрока.Финиш;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Объект.Старт = ПервыйСтарт;
	Объект.Финиш = ПоследнийФиниш;
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
КонецПроцедуры // ЗаполнитьТаблицуЗадействованныхРесурсовПриСозданииНаСервере()

// Функция получает таблицу задействованных ресурсов текущего заказа.
//
&НаКлиенте
Функция ПолучитьТаблицуЗадействованныхРесурсов()
	
	СтруктураТЧРесурсов = Новый Структура;
	МассивЗадействованныхРесурсов = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.РесурсыПредприятия Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("РесурсПредприятия", СтрокаТЧ.РесурсПредприятия);
		СтруктураСтроки.Вставить("Мощность", СтрокаТЧ.Мощность);
		СтруктураСтроки.Вставить("Длительность", СтрокаТЧ.Длительность);
		СтруктураСтроки.Вставить("Старт", СтрокаТЧ.Старт);
		СтруктураСтроки.Вставить("Финиш", СтрокаТЧ.Финиш);
		МассивЗадействованныхРесурсов.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураТЧРесурсов.Вставить("Ссылка", Объект.Ссылка);
	СтруктураТЧРесурсов.Вставить("ТабличнаяЧасть", МассивЗадействованныхРесурсов);
	
	Возврат СтруктураТЧРесурсов;
	
КонецФункции // ПолучитьТаблицуЗадействованныхРесурсов()

// Процедура формирует календарь загрузки ресурсов.
//
&НаСервере
Процедура ОбновитьКалендарь(СтруктураТЧРесурсов)
	
	ТабДок = ЗагрузкаРесурсов;
	ТабДок.Очистить();
	
	СписокРесурсов = ПолучитьСписокРесурсовДляОтбора();
	ОбновитьКалендарьПериодДень(ТабДок, СтруктураТЧРесурсов, СписокРесурсов);
	
	ТабДок.ФиксацияСверху = 4;
	ТабДок.ФиксацияСлева = 5;
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
КонецПроцедуры // ОбновитьКалендарь()

// Процедура формирует календарь загрузки ресурсов - период день.
//
&НаСервере
Процедура ОбновитьКалендарьПериодДень(ТабДок, СтруктураТЧРесурсов, СписокРесурсов)
	
	МакетШкалы = Обработки.Планировщик.ПолучитьМакет("ШкалаДень");
	
	// Вывод шкалы.
	Отступ = 1;
	ШагШкалы = 3;
	НачалоШкалы = 6;
	СдвигПоШкале = 1;
	НизРазделителяШкалы = 3;
	ВерхРазделителяШкалы = 2;
	
	Если ЗначениеЗаполнено(ОграничениеВремениС) Тогда
		ЧасС = Час(ОграничениеВремениС);
		МинутаС = Минута(ОграничениеВремениС);
	Иначе
		ЧасС = 0;
		МинутаС = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОграничениеВремениПо) Тогда
		ЧасПо = Час(ОграничениеВремениПо);
		МинутаПо = Минута(ОграничениеВремениПо);
	Иначе
		ЧасПо = 24;
		МинутаПо = 0;
	КонецЕсли;
	
	ОбластьСписокРесурсов = МакетШкалы.Область("Шкала60|СписокРесурсов");
	ТабДок.ВставитьОбласть(ОбластьСписокРесурсов, ТабДок.Область(ОбластьСписокРесурсов.Имя));
	Если КратностьДня = 60 Тогда
		Если ЧасС = ЧасПо Тогда
			ЧасПо = ЧасС + СдвигПоШкале;
		ИначеЕсли МинутаПо <> 0 Тогда
			ЧасПо = ЧасПо + СдвигПоШкале;
		КонецЕсли;
		ВсегоМинутС =  ЧасС * 60;
		ВсегоМинутПо = ЧасПо * 60;
		НомерКолонкиС = НачалоШкалы + ?(ЧасС-Цел(ЧасС/2)*2 = 1, (ЧасС - СдвигПоШкале), ЧасС) / 2 * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(ЧасС-Цел(ЧасС/2)*2 = 1, (ЧасС - СдвигПоШкале), ЧасС)) * 60 * 60;
		НомерКолонкиПо = НачалоШкалы + ?(ЧасПо-Цел(ЧасПо/2)*2 = 1, (ЧасПо + СдвигПоШкале), ЧасПо) / 2 * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(ЧасПо-Цел(ЧасПо/2)*2 = 1, (ЧасПо + СдвигПоШкале), ЧасПо)) * 60 * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала60|Кратность60");
	ИначеЕсли КратностьДня = 15 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 30) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 30) = (ВсегоМинутС / 30), ВсегоМинутС, Цел(ВсегоМинутС / 30) * 30)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 30) = (ВсегоМинутПо / 30), (ВсегоМинутПо / 30), Цел(ВсегоМинутПо / 30) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 30) = (ВсегоМинутПо / 30), ВсегоМинутПо, Цел(ВсегоМинутПо / 30) * 30 + 30)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала15|Кратность15");
	ИначеЕсли КратностьДня = 10 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 20) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 20) = (ВсегоМинутС / 20), ВсегоМинутС, Цел(ВсегоМинутС / 20) * 20)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 20) = (ВсегоМинутПо / 20), (ВсегоМинутПо / 20), Цел(ВсегоМинутПо / 20) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 20) = (ВсегоМинутПо / 20), ВсегоМинутПо, Цел(ВсегоМинутПо / 20) * 20 + 20)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала10|Кратность10");
	ИначеЕсли КратностьДня = 5 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 10) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 10) = (ВсегоМинутС / 10), ВсегоМинутС, Цел(ВсегоМинутС / 10) * 10)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 10) = (ВсегоМинутПо / 10), (ВсегоМинутПо / 10), Цел(ВсегоМинутПо / 10) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 10) = (ВсегоМинутПо / 10), ВсегоМинутПо, Цел(ВсегоМинутПо / 10) * 10 + 10)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала5|Кратность5");
	Иначе // 30 мин
		Если ЧасС = ЧасПо Тогда
			ЧасПо = ЧасС + СдвигПоШкале;
		ИначеЕсли МинутаПо <> 0 Тогда
			ЧасПо = ЧасПо + СдвигПоШкале;
		КонецЕсли;
		ВсегоМинутС =  ЧасС * 60;
		ВсегоМинутПо = ЧасПо * 60;
		НомерКолонкиС = НачалоШкалы + ЧасС * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 60) = (ВсегоМинутС / 60), ВсегоМинутС, ВсегоМинутС - 30)) * 60;
		НомерКолонкиПо = НачалоШкалы + ЧасПо * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 60) = (ВсегоМинутПо / 60), ВсегоМинутПо, ВсегоМинутПо + 30)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала30|Кратность30");
	КонецЕсли;
	ОбластьМакета = МакетШкалы.Область("R" + ОбластьШкалы.Верх + "C"+ НомерКолонкиС +":R"+ ОбластьШкалы.Низ +"C" + НомерКолонкиПо);
	ОбластьТабДок = ТабДок.Область("R" + СдвигПоШкале + "C" + НачалоШкалы + ":R"+ (ШагШкалы + 1) +"C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС));
	ТабДок.ВставитьОбласть(ОбластьМакета, ОбластьТабДок);
	
	// Инициализация массива дней.
	МассивДней = Новый Массив;
	МассивДней.Добавить(ДатаКалендаряНачало);
	
	// Оформление первой колонки.
	КоординатыПервойКолонки = "R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале);
	ТабДок.Область(КоординатыПервойКолонки).Текст = Формат(ДатаКалендаряНачало, "ДФ=""дд ММММ гггг дддд""");
	ТабДок.Область("R" + ВерхРазделителяШкалы + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + НизРазделителяШкалы + "C" + (НачалоШкалы + СдвигПоШкале)).ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	// Оформление последней колонки.
	КоординатыПоследнейКолонки = "R" + СдвигПоШкале + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС) + ":R" + (ШагШкалы + 1) + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
	ТабДок.Область(КоординатыПоследнейКолонки).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ТабДок.Область(КоординатыПоследнейКолонки).ЦветРамки = ЦветаСтиля.ЦветРамки;
	
	КоординатыДляОбъединения = "R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + СдвигПоШкале + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
	ОбластьОбъединения = ТабДок.Область(КоординатыДляОбъединения);
	ОбластьОбъединения.Объединить();
	
	// Координаты конца дня.
	КоординатыОкончанияДня = КоординатыПоследнейКолонки;
	
	// Оформление выходного дня.
	Если Деньнедели(ДатаКалендаряНачало) = 6 
		ИЛИ Деньнедели(ДатаКалендаряНачало) = 7 Тогда
		КоординатыВыходногоДня = "R" + (СдвигПоШкале + 1) + "C" + НачалоШкалы + ":R"+ (ШагШкалы + 1) +"C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
		ТабДок.Область(КоординатыВыходногоДня).Цветфона = ЦветаСтиля.НерабочееВремяВыходной;
	КонецЕсли;
	
	// Иницаилизация размеров шкалы.
	ТабДок.Область(1,,1,).ВысотаСтроки = 16;
	ТабДок.Область(2,,2,).ВысотаСтроки = 6;
	ТабДок.Область(3,,3,).ВысотаСтроки = 5;
	ТабДок.Область(4,,4,).ВысотаСтроки = 5;
	
	ТабДок.Область(,1,,1).ШиринаКолонки = 16;
	ТабДок.Область(,2,,2).ШиринаКолонки = 1;
	ТабДок.Область(,3,,3).ШиринаКолонки = 3;
	ТабДок.Область(,4,,4).ШиринаКолонки = 1;
	ТабДок.Область(,5,,5).ШиринаКолонки = 3;
	
	НомерКолонки = НачалоШкалы;
	НомерПоследнейКолонки = ТабДок.ШиринаТаблицы;
	Пока НомерКолонки <= НомерПоследнейКолонки Цикл
		
		ТабДок.Область(,НомерКолонки,,НомерКолонки).ШиринаКолонки = 0.8;
		ТабДок.Область(,НомерКолонки + 1,,НомерКолонки + 1).ШиринаКолонки = 6;
		ТабДок.Область(,НомерКолонки + 2,,НомерКолонки + 2).ШиринаКолонки = 6;
		НомерКолонки = НомерКолонки + 3;
		
	КонецЦикла;
	
	// Вывод расписания загрузки ресурсов.
	ЦветЯчейкиРесурсЗанят = ЦветаСтиля.РесурсЗанят;
	ЦветЯчейкиРесурсСвободен =  ЦветаСтиля.РабочееВремяЗанятоПолностью;
	ЦветЯчейкиРесурсНеРедактируется = ЦветаСтиля.РабочееВремяСвободноДоступно;
	ЦветРамкиЯчейки = ЦветаСтиля.РамкаЯчейки;
	ЦветЯчейкиРедактируется = ЦветаСтиля.ТекущийИнтервалВремени;
	
	НачалоСпискаРесурсов = ОбластьСписокРесурсов.Низ + Отступ;
	НомерПервойКолонки = ТабДок.Область(КоординатыПервойКолонки).Лево - 1;
	НомерПоследнейКолонкиДня = ТабДок.Область(КоординатыОкончанияДня).Право;
	
	// Загрузка ресурса.
	ТаблицаИнтервалов = Новый ТаблицаЗначений();
	ТаблицаИнтервалов.Колонки.Добавить("Интервал");
	ТаблицаИнтервалов.Колонки.Добавить("ИнтервалЗагружен");
	ТаблицаИнтервалов.Колонки.Добавить("ИнтервалРедактировался");
	ТаблицаИнтервалов.Колонки.Добавить("Загрузка");
	ТаблицаИнтервалов.Индексы.Добавить("Интервал");
	
	РезультатЗапроса = ПолучитьРасписаниеЗагрузкиРесурсов(СтруктураТЧРесурсов, СписокРесурсов, МассивДней);
	
	// Загрузка ресурса (по графику, отклонениям).
	ВыборкаРесурс = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	НомерСтроки = 1;
	Пока ВыборкаРесурс.Следующий() Цикл
		
		// Список ресурсов.
		R = НачалоСпискаРесурсов + НомерСтроки;
		ТабДок.Область(R, 1).Текст = ВыборкаРесурс.РесурсПредприятия;
		ТабДок.Область(R, 1).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабДок.Область(R, 1).Расшифровка = ВыборкаРесурс.РесурсПредприятия;
		
		ОбластьОбъединения = ТабДок.Область(R,1,R,НачалоШкалы-1);
		ОбластьОбъединения.Объединить();
		
		МощностьРесурса = ?(ВыборкаРесурс.Мощность = 1, 0, ВыборкаРесурс.Мощность);
		
		// Загрузка ресурса.
		ТаблицаИнтервалов.Очистить();
		
		РаботаПоГрафику = Ложь;
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Есть отклонение на текущий день.
			Если Выборка.ОтклоненияНеРабочийДень
				И ЗначениеЗаполнено(Выборка.ОтклоненияВремяНачала) И ЗначениеЗаполнено(Выборка.ОтклоненияВремяОкончания) Тогда
				
				РассчитатьИнтервалы(ТаблицаИнтервалов, КратноеОграничениеС, КратноеОграничениеПо, Выборка.ОтклоненияВремяНачала, Выборка.ОтклоненияВремяОкончания);
				
			КонецЕсли;
			
			// Есть гарфик на текущий день.
			Если НЕ Выборка.ОтклоненияНеРабочийДень
				И ЗначениеЗаполнено(Выборка.ВремяНачала) И ЗначениеЗаполнено(Выборка.ВремяОкончания) Тогда
				
				РассчитатьИнтервалы(ТаблицаИнтервалов, КратноеОграничениеС, КратноеОграничениеПо, Выборка.ВремяНачала, Выборка.ВремяОкончания);
				
			КонецЕсли;
			
			// Работа по графику.
			Если ЗначениеЗаполнено(Выборка.ГрафикРаботы) Тогда
				РаботаПоГрафику = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		// Вывод загрузки календаря.
		Интервал = 0;
		КратноеВремяС = КратноеОграничениеС;
		СледующаяПерваяКолонка = НомерПервойКолонки;
		СледующаяПоследняяКолонка = НомерПоследнейКолонкиДня;
		Пока СледующаяПерваяКолонка <= СледующаяПоследняяКолонка Цикл
			
			// Ячейка 1.
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Шрифт = Новый Шрифт(, 8, Истина, , , );
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
			ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветРамки = ЦветРамкиЯчейки;
			
			ИнтервалПоиска = ДатаКалендаряНачало + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
			СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
			РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
			Если РезультатПоиска.Количество() = 0 И НЕ РаботаПоГрафику Тогда
				
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			ИначеЕсли РезультатПоиска.Количество() = 0 И РаботаПоГрафику Тогда
				
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсНеРедактируется;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			Иначе
				
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			КонецЕсли;
			
			// Ячейка 2.
			ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Шрифт = Новый Шрифт(, 8, Истина, , , );
			
			КратноеВремяС = КратноеВремяС + КратностьДня * 60;
			ИнтервалПоиска = ДатаКалендаряНачало + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
			СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
			РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
			Если РезультатПоиска.Количество() = 0 И НЕ РаботаПоГрафику Тогда
				
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			ИначеЕсли РезультатПоиска.Количество() = 0 И РаботаПоГрафику Тогда
				
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсНеРедактируется;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			Иначе
				
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса);
				
			КонецЕсли;
			
			КратноеВремяС = КратноеВремяС + КратностьДня * 60;
			СледующаяПерваяКолонка = СледующаяПерваяКолонка + 3;
			Интервал = Интервал + 3;
			
		КонецЦикла;
		
		// Инициализация размеров строк.
		R = ШагШкалы + НомерСтроки + СдвигПоШкале;
		ТабДок.Область(R, 1).ВысотаСтроки = 5;
		ТабДок.Область(R + Отступ, 1).ВысотаСтроки = 18;
		
		НомерСтроки = НомерСтроки + 2;
		
	КонецЦикла;
	
	// Загрузка ресурса (по заказам).
	ВыборкаРесурс = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	НомерСтроки = 1;
	Пока ВыборкаРесурс.Следующий() Цикл
		
		// Список ресурсов.
		R = НачалоСпискаРесурсов + НомерСтроки;
		МощностьРесурса = ?(ВыборкаРесурс.Мощность = 1, 0, ВыборкаРесурс.Мощность);
		
		// Загрузка ресурса.
		ТаблицаИнтервалов.Очистить();
		
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Есть заказ на текущий день.
			Если ЗначениеЗаполнено(Выборка.ВремяНачала) И ЗначениеЗаполнено(Выборка.ВремяОкончания) Тогда
				
				РассчитатьИнтервалы(ТаблицаИнтервалов, КратноеОграничениеС, КратноеОграничениеПо, Выборка.ВремяНачала, Выборка.ВремяОкончания, Выборка.Загрузка, Выборка.Редактирование);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Вывод загрузки календаря.
		Интервал = 0;
		КратноеВремяС = КратноеОграничениеС;
		СледующаяПерваяКолонка = НомерПервойКолонки;
		СледующаяПоследняяКолонка = НомерПоследнейКолонкиДня;
		Пока СледующаяПерваяКолонка <= СледующаяПоследняяКолонка Цикл
			
			// Ячейка 1.
			ИнтервалПоиска = ДатаКалендаряНачало + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
			СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
			РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
			Загрузка = 0;
			ИнтервалРедактировался = Ложь;
			Для каждого СтрокаПоиска Из РезультатПоиска Цикл
				
				Если СтрокаПоиска.ИнтервалЗагружен Тогда
					
					Если СтрокаПоиска.ИнтервалРедактировался Тогда
						ИнтервалРедактировался = Истина;
					КонецЕсли;
					Загрузка = Загрузка + СтрокаПоиска.Загрузка;
					
				КонецЕсли;
					
			КонецЦикла;
				
			Если Загрузка <> 0 Тогда
				
				ВсегоЗагрузка = Загрузка;
				Если МощностьРесурса = 0 Тогда
					Загрузка = 0;
				Иначе
					Загрузка = МощностьРесурса - Загрузка;
				КонецЕсли;
					
				Если Загрузка = 0 Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = Загрузка;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ИначеЕсли Загрузка < 0 Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = Загрузка * (-1);
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				Иначе
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = Загрузка;
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				КонецЕсли;
					
				Если ИнтервалРедактировался Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветФона = ЦветЯчейкиРедактируется;
					Если Загрузка < 0 Тогда
						ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветЯчейкиРесурсЗанят;
					КонецЕсли;
				КонецЕсли;
				
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса, ВсегоЗагрузка);
				
			КонецЕсли;
			
			// Ячейка 2.
			КратноеВремяС = КратноеВремяС + КратностьДня * 60;
			ИнтервалПоиска = ДатаКалендаряНачало + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
			СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
			РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
			Загрузка = 0;
			ИнтервалРедактировался = Ложь;
			Для каждого СтрокаПоиска Из РезультатПоиска Цикл
				
				Если СтрокаПоиска.ИнтервалЗагружен Тогда
					
					Если СтрокаПоиска.ИнтервалРедактировался Тогда
						ИнтервалРедактировался = Истина;
					КонецЕсли;
					Загрузка = Загрузка + СтрокаПоиска.Загрузка;
					
				КонецЕсли;
				
			КонецЦикла;
				
			Если Загрузка <> 0 Тогда
				
				ВсегоЗагрузка = Загрузка;
				Если МощностьРесурса = 0 Тогда
					Загрузка = 0;
				Иначе
					Загрузка = МощностьРесурса - Загрузка;
				КонецЕсли;
				
				Если Загрузка = 0 Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = Загрузка;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ИначеЕсли Загрузка < 0 Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = Загрузка * (-1);
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				Иначе
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = Загрузка;
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				КонецЕсли;
				
				Если ИнтервалРедактировался Тогда
					ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветФона = ЦветЯчейкиРедактируется;
					Если Загрузка < 0 Тогда
						ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветЯчейкиРесурсЗанят;
					КонецЕсли;
				КонецЕсли;
				
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, МощностьРесурса, ВсегоЗагрузка);
				
			КонецЕсли;
			
			КратноеВремяС = КратноеВремяС + КратностьДня * 60;
			СледующаяПерваяКолонка = СледующаяПерваяКолонка + 3;
			Интервал = Интервал + 3;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 2;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьКалендарьПериодДень()

// Процедура обновляет ячейку календаря по параметрам расшифровки.
//
&НаКлиенте
Процедура ОбновитьЯчейкуКалендаря(КоординатыЯчейки, Расшифровка)
	
	ВсегоЗагрузка = Расшифровка.Загрузка + 1;
	Если Расшифровка.Мощность = 0 Тогда
		Загрузка = 0;
	Иначе
		Загрузка = Расшифровка.Мощность - Расшифровка.Загрузка - 1;
	КонецЕсли;
	
	ЗагрузкаРесурсов.Область(КоординатыЯчейки).ЦветФона = ЦветРедактируется;
	Если Загрузка < 0 Тогда
		ЗагрузкаРесурсов.Область(КоординатыЯчейки).Текст = Загрузка *(-1);
		ЗагрузкаРесурсов.Область(КоординатыЯчейки).ЦветТекста = ЦветРесурсЗанят;
	Иначе
		ЗагрузкаРесурсов.Область(КоординатыЯчейки).Текст = Загрузка;
	КонецЕсли;
	
	Расшифровка.Загрузка = ВсегоЗагрузка;
	
КонецПроцедуры // ОбновитьЯчейкуКалендаря()

// Процедура расчитывает интервалы планирования для шкалы календаря.
//
&НаСервере
Процедура РассчитатьИнтервалы(ТаблицаИнтервалов, ВремяС, ВремяПо, ВремяНачала, ВремяОкончания, Загрузка = 0, Редактирование = Неопределено)
	
	КратноеОграничениеВремениС = НачалоДня(ВремяНачала) + Час(ВремяС) * 60 * 60 + Минута(ВремяС) * 60;
	КратноеОграничениеВремениПо = НачалоДня(ВремяНачала) + Час(ВремяПо) * 60 * 60 + Минута(ВремяПо) * 60;
	
	// Если 24 часа.
	Если КратноеОграничениеВремениС >= КратноеОграничениеВремениПо Тогда
		КратноеОграничениеВремениПо = КратноеОграничениеВремениПо + 24 * 60 * 60;
	КонецЕсли;
	
	Если КратностьДня = 60 Тогда
		
		ЧасВремяНачала = Час(ВремяНачала);
		КратноеВремяНачала = НачалоДня(ВремяНачала) + ЧасВремяНачала * 60 * 60;
		ЧасВремяОкончания = ?(Минута(ВремяОкончания) <> 0, Час(ВремяОкончания) + 1, Час(ВремяОкончания));
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + ЧасВремяОкончания * 60 * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если Час(КратноеВремяНачала) >= Час(КратноеОграничениеВремениС) И Час(КратноеВремяНачала) <= Час(КратноеОграничениеВремениПо) Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 15 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 15) * 15;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 15) = Минута(ВремяОкончания) / 15, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 15) * 15 + 15);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 10 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 10) * 10;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 10) = Минута(ВремяОкончания) / 10, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 10) * 10 + 10);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 5 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 5) * 5;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 5) = Минута(ВремяОкончания) / 5, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 5) * 5 + 5);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
		ВремяС = КратноеОграничениеВремениС;
		
	Иначе // Кратность = 30
		
		МинутВремяНачала = ?(Минута(ВремяНачала) < 30, Час(ВремяНачала) * 60, Час(ВремяНачала) * 60 + 30);
		КратноеВремяНачала = НачалоДня(ВремяНачала) + МинутВремяНачала * 60;
		Если Минута(ВремяОкончания) <= 30 Тогда
			МинутВремяОкончания = ?(Минута(ВремяОкончания) = 0, Час(ВремяОкончания) * 60, Час(ВремяОкончания) * 60 + 30);
		Иначе
			МинутВремяОкончания = (Час(ВремяОкончания) + 1) * 60;
		КонецЕсли;
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Загрузка = Загрузка;
				Если Редактирование = Неопределено Тогда
					НоваяСтрока.ИнтервалЗагружен = Ложь;
					НоваяСтрока.ИнтервалРедактировался = Ложь;
				Иначе
					НоваяСтрока.ИнтервалЗагружен = Истина;
					НоваяСтрока.ИнтервалРедактировался = Редактирование;
					НоваяСтрока.Загрузка = Загрузка;
				КонецЕсли;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьИнтервалы()

// Функция возвращает расписание загрузки ресурсов.
//
&НаСервере
Функция ПолучитьРасписаниеЗагрузкиРесурсов(СтруктураТЧРесурсов, СписокРесурсов, МассивДней)
	
	ТаблицаРесурсов = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.КлючевыеРесурсы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаРесурсов.Колонки.Добавить("РесурсПредприятия", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаРесурсов.Колонки.Добавить("Старт", ОписаниеТипов);
	ТаблицаРесурсов.Колонки.Добавить("Финиш", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаРесурсов.Колонки.Добавить("Мощность", ОписаниеТипов);
	
	Для каждого СтрокаРесурса Из СтруктураТЧРесурсов.ТабличнаяЧасть Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРесурса);
	КонецЦикла;
	ТекущийДокумент = СтруктураТЧРесурсов.Ссылка;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование
	|ПОМЕСТИТЬ ВременнаяТаблицаРесурсовПредприятия
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	(&ОтборПоКлючевомуРесурсу
	|			ИЛИ КлючевыеРесурсы.Ссылка В (&ОтборСписокКлючевыхРесурсов))
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|	ТаблицаРесурсов.Старт КАК Старт,
	|	ТаблицаРесурсов.Финиш КАК Финиш,
	|	ТаблицаРесурсов.Мощность КАК Мощность
	|ПОМЕСТИТЬ ВременнаяТаблицаЗаявка
	|ИЗ
	|	&ТаблицаРесурсов КАК ТаблицаРесурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала КАК ОтклоненияВремяНачала,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания КАК ОтклоненияВремяОкончания,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.НеРабочийДень, ЛОЖЬ) КАК ОтклоненияНеРабочийДень
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыРесурсов.СрезПоследних(&ДатаНачала, ) КАК ТаблицаГрафиков
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ТаблицаГрафиков.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО (ТаблицаГрафиков.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботы.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ГрафикиРаботы.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование,
	|	ВремяНачала,
	|	ВремяОкончания
	|ИТОГИ
	|	МИНИМУМ(Мощность)
	|ПО
	|	РесурсПредприятия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВложенныйЗапрос.Редактирование КАК Редактирование,
	|	ВложенныйЗапрос.Старт КАК ВремяНачала,
	|	ВложенныйЗапрос.Финиш КАК ВремяОкончания,
	|	ВложенныйЗапрос.Мощность КАК Загрузка
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЛОЖЬ КАК Редактирование,
	|			ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Мощность КАК Мощность,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Старт КАК Старт,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Финиш КАК Финиш
	|		ИЗ
	|			Документ.ЗаказНаПроизводство.РесурсыПредприятия КАК ЗаказНаПроизводствоРесурсыПредприятия
	|		ГДЕ
	|			НЕ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Проведен
	|			И НЕ ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовНаПроизводство.Завершен)
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Ссылка <> &ТекущийДокумент
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЛОЖЬ,
	|			ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия,
	|			ЗаказПокупателяРесурсыПредприятия.Мощность,
	|			ЗаказПокупателяРесурсыПредприятия.Старт,
	|			ЗаказПокупателяРесурсыПредприятия.Финиш
	|		ИЗ
	|			Документ.ЗаказПокупателя.РесурсыПредприятия КАК ЗаказПокупателяРесурсыПредприятия
	|		ГДЕ
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			И НЕ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|			И ЗаказПокупателяРесурсыПредприятия.Ссылка.Проведен
	|			И НЕ ЗаказПокупателяРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			И ЗаказПокупателяРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ЗаказПокупателяРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИСТИНА,
	|			ТаблицаРесурсов.РесурсПредприятия,
	|			ТаблицаРесурсов.Мощность,
	|			ТаблицаРесурсов.Старт,
	|			ТаблицаРесурсов.Финиш
	|		ИЗ
	|			ВременнаяТаблицаЗаявка КАК ТаблицаРесурсов
	|		ГДЕ
	|			ТаблицаРесурсов.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ТаблицаРесурсов.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ТаблицаРесурсов.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))) КАК ВложенныйЗапрос
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ВложенныйЗапрос.РесурсПредприятия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование,
	|	ВремяНачала,
	|	ВремяОкончания
	|ИТОГИ
	|	МИНИМУМ(Мощность)
	|ПО
	|	РесурсПредприятия";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаКалендаряНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКалендаряОкончание);
	Запрос.УстановитьПараметр("ОтборПоКлючевомуРесурсу", СписокРесурсов = Неопределено);
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	Запрос.УстановитьПараметр("ТаблицаРесурсов", ТаблицаРесурсов);
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // ПолучитьРасписаниеЗагрузкиРесурсов()

// Функция возвращает значение расшифровки ячейки.
//
&НаСервере
Функция ПолучитьРасшифровкуЯчейки(РесурсПредприятия, Интервал, Мощность, Загрузка = 0, Редактирование = Ложь)
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("РесурсПредприятия", РесурсПредприятия);
	СтруктураРасшифровки.Вставить("Интервал", Интервал);
	СтруктураРасшифровки.Вставить("Мощность", Мощность);
	СтруктураРасшифровки.Вставить("Загрузка", Загрузка);
	СтруктураРасшифровки.Вставить("Редактирование", Ложь);
	
	Возврат СтруктураРасшифровки;
	
КонецФункции // ПолучитьРасшифровкуЯчейки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	ПолучитьСтруктуруВидовОпераций();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьРабочийКалендарь = Ложь;
	Иначе
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли; 
	ДокументМодифицирован = Ложь;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
	КонецЕсли;
	
	// Установка периода календаря.
	ДатаКалендаря = Объект.Старт;
	ЗаполнитьПараметрыКалендаряПриСозданииНаСервере();
	ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
	ДатаКалендаряОкончание = КонецДня(ДатаКалендаря);
	
	ЦветРесурсЗанят = ЦветаСтиля.РесурсЗанят;
	ЦветРедактируется = ЦветаСтиля.ТекущийИнтервалВремени;
	
	// Заполнение таблицы (структуры) ресурсов.
	СтруктураТЧРесурсов = Новый Структура;
	МассивЗадействованныхРесурсов = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.РесурсыПредприятия Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("РесурсПредприятия", СтрокаТЧ.РесурсПредприятия);
		СтруктураСтроки.Вставить("Мощность", СтрокаТЧ.Мощность);
		СтруктураСтроки.Вставить("Длительность", СтрокаТЧ.Длительность);
		СтруктураСтроки.Вставить("Старт", СтрокаТЧ.Старт);
		СтруктураСтроки.Вставить("Финиш", СтрокаТЧ.Финиш);
		МассивЗадействованныхРесурсов.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураТЧРесурсов.Вставить("Ссылка", Объект.Ссылка);
	СтруктураТЧРесурсов.Вставить("ТабличнаяЧасть", МассивЗадействованныхРесурсов);
	
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// Обработчик механизма "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьПериодРасписанияРабот();
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ДокументМодифицирован Тогда
		ОповеститьРабочийКалендарь = Истина;
		ДокументМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

// Процедура обработчик события ПередЗаписьюНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		ДокументМодифицирован = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события ПередЗакрытием формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененЗаказНаПроизводство", Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНД ПАНЕЛИ СОСТОЯНИЕ ЗАКАЗОВ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ОбработкаВыбора поля ввода ВидОперации.
//
&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ВидыОпераций.Разборка Тогда
		
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			
			Если Не СтрокаПродукция.ТипНоменклатурыЗапас Тогда
				
				ТекстСообщения = НСтр("ru = 'Операция разборки не выполняется для работ и услуг!
				|В строке №%Номер% табличной части ""Продукция"" номенклатура ""%НоменклатураПредставление%"" является работой (услугой)'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаПродукция.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураПредставление%", Строка(СтрокаПродукция.Номенклатура));
				
				УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, ТекстСообщения);
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода ВидОперации.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // ВидОперацииПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

// Процедура - обработчик события ПриИзменении поля ввода Ресурс.
//
&НаКлиенте
Процедура ОтборКлючевойРесурсПриИзменении(Элемент)
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // ОтборКлючевойРесурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВидРесурса.
//
&НаКлиенте
Процедура ОтборВидРесурсаПриИзменении(Элемент)
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // ОтборВидРесурсаПриИзменении()

// Процедура - обработчик команды Календарь.
//
&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("ДатаКалендаря", ДатаКалендаря);
	ДатаКалендаряНачало = Неопределено;

	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДатаКалендаряНачало = Результат;
		
		ДатаКалендаря = КонецДня(ДатаКалендаряНачало);
		СформироватьПериодРасписанияРабот();
		
		СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
		ОбновитьКалендарь(СтруктураТЧРесурсов);
		
	КонецЕсли;
	
КонецПроцедуры // ПредставлениеПериодаНачалоВыбора()

// Процедура - обработчик команды УменьшитьПериод.
//
&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ДатаКалендаря = КонецДня(ДатаКалендаря - 60 * 60 * 24);
	СформироватьПериодРасписанияРабот();
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // УменьшитьПериод()

// Процедура - обработчик команды УвеличитьПериод.
//
&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ДатаКалендаря = КонецДня(ДатаКалендаря + 60 * 60 * 24);
	СформироватьПериодРасписанияРабот();
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // УвеличитьПериод()

// Процедура - обработчик команды Обновить.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураТЧРесурсов = ПолучитьТаблицуЗадействованныхРесурсов();
	ОбновитьКалендарь(СтруктураТЧРесурсов);
	
КонецПроцедуры // Обновить()

// Процедура - обработчик события ПриИзменении поля ввода Старт.
//
&НаКлиенте
Процедура СтартПриИзменении(Элемент)
	
	Если Объект.Старт > Объект.Финиш Тогда
		Объект.Старт = ПриИзмененииСтарт;
		Сообщить(НСтр("ru='Дата старта не может быть больше даты финиша.'"));
	Иначе
		ПриИзмененииСтарт = Объект.Старт;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Финиш.
//
&НаКлиенте
Процедура ФинишПриИзменении(Элемент)
	
	Если Час(Объект.Финиш) = 0 И Минута(Объект.Финиш) = 0 Тогда
		Объект.Финиш = КонецДня(Объект.Финиш);
	КонецЕсли;
	
	Если Объект.Финиш < Объект.Старт Тогда
		Объект.Финиш = ПриИзмененииФиниш;
		Сообщить(НСтр("ru='Дата финиша не может быть меньше даты старта.'"));
	Иначе
		ПриИзмененииФиниш = Объект.Финиш;
	КонецЕсли;
	
КонецПроцедуры // ФинишПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ПРОДУКЦИЯ

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ТипНоменклатуры = СтруктураДанные.ТипНоменклатуры;
	
КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ПродукцияХарактеристикаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РЕСУРСЫ ПРЕДПРИЯТИЯ

// Процедура расчитывает значение старта и финиша.
//
&НаКлиенте
Процедура РассчитатьСтартИФинишЗаявки()
	
	МинСтарт = '00010101';
	МаксФиниш = '00010101';
	Для каждого СтрокаРесурс Из Объект.РесурсыПредприятия Цикл
		Если МинСтарт > СтрокаРесурс.Старт ИЛИ МинСтарт = '00010101' Тогда
			МинСтарт = СтрокаРесурс.Старт;
		КонецЕсли;
		Если МаксФиниш < СтрокаРесурс.Финиш ИЛИ МаксФиниш = '00010101' Тогда
			МаксФиниш = СтрокаРесурс.Финиш;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Старт = МинСтарт;
	Объект.Финиш = МаксФиниш;
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
КонецПроцедуры // РассчитатьСтартИФинишЗаявки()

// Процедура производит расчет длительности выполнения операций.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Функция РассчитатьДлительность(ТекущаяСтрока)
	
	ДлительностьВСекундах = ТекущаяСтрока.Финиш - ТекущаяСтрока.Старт;
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
	
	Возврат Длительность;
	
КонецФункции // РассчитатьДлительность()

// Получает набор данных с сервера для процедуры РесурсыПредприятияПриНачалеРедактирования.
//
&НаКлиенте
Функция ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования(СтруктураДанных)
	
	СтруктураДанных.Старт = Объект.Старт - Секунда(Объект.Старт);
	СтруктураДанных.Финиш = Объект.Финиш - Секунда(Объект.Финиш);
	
	Если ЗначениеЗаполнено(СтруктураДанных.Старт) И ЗначениеЗаполнено(СтруктураДанных.Финиш) Тогда
		Если НачалоДня(СтруктураДанных.Старт) <> НачалоДня(СтруктураДанных.Финиш) Тогда
			СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
		КонецЕсли;
		Если СтруктураДанных.Старт >= СтруктураДанных.Финиш Тогда
			СтруктураДанных.Финиш = СтруктураДанных.Старт + 1800;
			Если НачалоДня(СтруктураДанных.Финиш) <> НачалоДня(СтруктураДанных.Старт) Тогда
				Если КонецДня(СтруктураДанных.Старт) = СтруктураДанных.Старт Тогда
					СтруктураДанных.Старт = СтруктураДанных.Старт - 29 * 60;
				КонецЕсли;
				СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Старт) Тогда
		СтруктураДанных.Старт = СтруктураДанных.Старт;
		СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
		Если СтруктураДанных.Финиш = СтруктураДанных.Старт Тогда
			СтруктураДанных.Старт = НачалоДня(СтруктураДанных.Старт);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Финиш) Тогда
		СтруктураДанных.Старт = НачалоДня(СтруктураДанных.Финиш);
		СтруктураДанных.Финиш = СтруктураДанных.Финиш;
		Если СтруктураДанных.Финиш = СтруктураДанных.Старт Тогда
			СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Финиш) - 59;
		КонецЕсли;
	Иначе
		СтруктураДанных.Старт = НачалоДня(ТекущаяДата());
		СтруктураДанных.Финиш = КонецДня(ТекущаяДата()) - 59;
	КонецЕсли;
	
	ДлительностьВСекундах = СтруктураДанных.Финиш - СтруктураДанных.Старт;
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
	СтруктураДанных.Длительность = Длительность;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования()

// Процедура - обработчик события ПриНачалеРедактирования табличной части РесурсыПредприятия.
//
&НаКлиенте
Процедура РесурсыПредприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.РесурсыПредприятия.ТекущиеДанные;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Старт", '00010101');
		СтруктураДанных.Вставить("Финиш", '00010101');
		СтруктураДанных.Вставить("Длительность", '00010101');
		
		СтруктураДанных = ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования(СтруктураДанных);
		СтрокаТабличнойЧасти.Старт = СтруктураДанных.Старт;
		СтрокаТабличнойЧасти.Финиш = СтруктураДанных.Финиш;
		СтрокаТабличнойЧасти.Длительность = СтруктураДанных.Длительность;
		
		РассчитатьСтартИФинишЗаявки();
		
	КонецЕсли;
	
КонецПроцедуры // РесурсыПредприятияПриНачалеРедактирования()

// Процедура - обработчик события ПослеУдаления табличной части РесурсыПредприятия.
//
&НаКлиенте
Процедура РесурсыПредприятияПослеУдаления(Элемент)
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияПослеУдаления

// Процедура - обработчик события ПриИзменении поля ввода РесурсПредприятия.
//
&НаКлиенте
Процедура РесурсыПредприятияРесурсПредприятияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РесурсыПредприятия.ТекущиеДанные;
	СтрокаТабличнойЧасти.Мощность = 1;
	
КонецПроцедуры // РесурсыПредприятияРесурсПредприятияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода День.
//
&НаКлиенте
Процедура РесурсыПредприятияДеньПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если ТекущаяСтрока.Старт = '00010101' Тогда
		ТекущаяСтрока.Старт = ТекущаяДата();
	КонецЕсли;
	
	ФинишВСекундах = Час(ТекущаяСтрока.Финиш) * 3600 + Минута(ТекущаяСтрока.Финиш) * 60;
	ДлительностьВСекундах = Час(ТекущаяСтрока.Длительность) * 3600 + Минута(ТекущаяСтрока.Длительность) * 60;
	ТекущаяСтрока.Финиш = НачалоДня(ТекущаяСтрока.Старт) + ФинишВСекундах;
	ТекущаяСтрока.Старт = ТекущаяСтрока.Финиш - ДлительностьВСекундах;
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияДеньПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Длительность.
//
&НаКлиенте
Процедура РесурсыПредприятияДлительностьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	ДлительностьВСекундах = Час(ТекущаяСтрока.Длительность) * 3600 + Минута(ТекущаяСтрока.Длительность) * 60;
	Если ДлительностьВСекундах = 0 Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
	Иначе
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + ДлительностьВСекундах;
	КонецЕсли;
	Если НачалоДня(ТекущаяСтрока.Старт) <> НачалоДня(ТекущаяСтрока.Финиш) Тогда
		ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
	КонецЕсли;
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияДлительностьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Старт.
//
&НаКлиенте
Процедура РесурсыПредприятияСтартПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если ТекущаяСтрока.Старт = '00010101' Тогда
		ТекущаяСтрока.Старт = НачалоДня(ТекущаяСтрока.Финиш);
	КонецЕсли;
	
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияСтартПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Финиш.
//
&НаКлиенте
Процедура РесурсыПредприятияФинишПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если Час(ТекущаяСтрока.Финиш) = 0 И Минута(ТекущаяСтрока.Финиш) = 0 Тогда
		ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
	Конецесли;
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
	РассчитатьСтартИФинишЗаявки();
	
КонецПроцедуры // РесурсыПредприятияФинишПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ДОКУМЕНТА

// Процедура - обработчик события ОбработкаРасшифровки.
//
&НаКлиенте
Процедура ЗагрузкаРесурсовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НайденоСовпадение = Ложь;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("РесурсПредприятия", Расшифровка.РесурсПредприятия);
		МассивСтрок = Объект.РесурсыПредприятия.НайтиСтроки(СтруктураПоиска);
		Для каждого ЭлМассиваСтрок Из МассивСтрок Цикл
			Если ЭлМассиваСтрок.Старт = Расшифровка.Интервал
				И ЭлМассиваСтрок.Финиш = Расшифровка.Интервал + КратностьДня * 60 
				И Не НайденоСовпадение Тогда
				ЭлМассиваСтрок.Мощность = ЭлМассиваСтрок.Мощность + 1;
				НайденоСовпадение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденоСовпадение Тогда
			НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
			НоваяСтрока.РесурсПредприятия = Расшифровка.РесурсПредприятия;
			НоваяСтрока.Мощность = 1;
			НоваяСтрока.Старт = Расшифровка.Интервал;
			НоваяСтрока.Финиш = Расшифровка.Интервал + КратностьДня * 60;
			НоваяСтрока.Длительность = РассчитатьДлительность(НоваяСтрока);
			РассчитатьСтартИФинишЗаявки();
		КонецЕсли;
		
		ОбновитьЯчейкуКалендаря(Элемент.ТекущаяОбласть.Имя, Расшифровка);
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаРесурсовОбработкаРасшифровки()

// Процедура - обработчик команды ЗадействоватьРесурс.
//
&НаКлиенте
Процедура ЗадействоватьРесурс(Команда)
	
	ИзмененСписокРесурсов = Ложь;
	ТекущаяОбластьКалендаря = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
	ПерваяСтрока = ТекущаяОбластьКалендаря.Верх;
	ПоследняяСтрока = ТекущаяОбластьКалендаря.Низ;
	ПоследняяКолонка = ТекущаяОбластьКалендаря.Право;
	Пока ПерваяСтрока <= ПоследняяСтрока Цикл
		
		СтруктураПодбора = Новый Структура;
		СтруктураПодбора.Вставить("РесурсПредприятия");
		СтруктураПодбора.Вставить("Мощность");
		СтруктураПодбора.Вставить("Старт");
		СтруктураПодбора.Вставить("Финиш");
		СтруктураПодбора.Вставить("Длительность");
		
		НовыйИнтервал = Ложь;
		ПервыйСтарт = Истина;
		ПерваяКолонка = ТекущаяОбластьКалендаря.Лево;
		Пока ПерваяКолонка <= ПоследняяКолонка Цикл
			РасшифровкаЯчейки = ЗагрузкаРесурсов.Область(ПерваяСтрока, ПерваяКолонка).Расшифровка;
			Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") Тогда
				
				Если ПервыйСтарт Тогда
					НовыйИнтервал = Истина;
					СтруктураПодбора.РесурсПредприятия = РасшифровкаЯчейки.РесурсПредприятия;
					СтруктураПодбора.Мощность = 1;
					СтруктураПодбора.Старт = РасшифровкаЯчейки.Интервал;
					
					ПервыйСтарт = Ложь;
					ИзмененСписокРесурсов = Истина;
				КонецЕсли;
				
				Если НовыйИнтервал <> Неопределено Тогда
					СтруктураПодбора.Финиш = РасшифровкаЯчейки.Интервал + КратностьДня * 60;
				КонецЕсли;
				
				ТекущаяОбластьИмя = "R" + ПерваяСтрока + "C" + ПерваяКолонка;
				ОбновитьЯчейкуКалендаря(ТекущаяОбластьИмя, РасшифровкаЯчейки);
				
			КонецЕсли;
			ПерваяКолонка = ПерваяКолонка + 1;
		КонецЦикла;
		
		Если НовыйИнтервал Тогда
			
			НайденоСовпадение = Ложь;
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("РесурсПредприятия", СтруктураПодбора.РесурсПредприятия);
			МассивСтрок = Объект.РесурсыПредприятия.НайтиСтроки(СтруктураПоиска);
			Для каждого ЭлМассиваСтрок Из МассивСтрок Цикл
				Если ЭлМассиваСтрок.Старт = СтруктураПодбора.Старт
					И ЭлМассиваСтрок.Финиш = СтруктураПодбора.Финиш
					И Не НайденоСовпадение Тогда
					ЭлМассиваСтрок.Мощность = ЭлМассиваСтрок.Мощность + 1;
					НайденоСовпадение = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НайденоСовпадение Тогда
				НоваяСтрока = Объект.РесурсыПредприятия.Добавить();
				НоваяСтрока.РесурсПредприятия = СтруктураПодбора.РесурсПредприятия;
				НоваяСтрока.Мощность = СтруктураПодбора.Мощность;
				НоваяСтрока.Старт = СтруктураПодбора.Старт;
				НоваяСтрока.Финиш = СтруктураПодбора.Финиш;
				НоваяСтрока.Длительность = РассчитатьДлительность(НоваяСтрока);
				РассчитатьСтартИФинишЗаявки();
			КонецЕсли;
			
		КонецЕсли;
		
		ПерваяСтрока = ПерваяСтрока + 1;
	КонецЦикла;
	
	Если ИзмененСписокРесурсов Тогда
		РассчитатьСтартИФинишЗаявки();
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗадействоватьРесурс()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
