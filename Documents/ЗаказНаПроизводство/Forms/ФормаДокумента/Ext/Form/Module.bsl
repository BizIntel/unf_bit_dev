
#Область ОписаниеПеременных

&НаКлиенте
Перем ПриИзмененииСтарт;

&НаКлиенте
Перем ПриИзмененииФиниш;

&НаКлиенте
Перем ДанныеВыбораСостояния;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ЭтотОбъект.ОснованиеСоздания = Параметры.Основание;
	ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	Элементы.ЗаказПокупателя.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗаказНаПроизводствоОснование);
	
	Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
	
	//Установить надпись основание
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		Элементы.ДокументОснованиеНадпись.Видимость = Ложь;
	Иначе
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);	
	КонецЕсли;
	
	УстановитьРежимИСписокВыбора();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОповеститьРабочийКалендарь = Ложь;
	Иначе
		ОповеститьРабочийКалендарь = Истина;
	КонецЕсли; 
	ДокументМодифицирован = Ложь;
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Продукция");
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриИзмененииСтарт = Объект.Старт;
	ПриИзмененииФиниш = Объект.Финиш;
	
	УстановитьВидимостьИДоступность();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ОповеститьРабочийКалендарь Тогда
		Оповестить("ИзмененЗаказНаПроизводство", Объект.Ответственный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		ТекущаяСтраницыПродукция= (Элементы.Страницы.ТекущаяСтраница = Элементы.ТЧПродукция);
		ИмяТабличнойЧасти		= ?(ТекущаяСтраницыПродукция, "Продукция", "Запасы");
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, Истина, Ложь);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СостоянияЗаказовНаПроизводство" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Продукция");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказовНаПроизводство.Завершен)
	);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Проведение"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		ДокументМодифицирован = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ВариантЗавершенияРасширеннаяПодсказка.Заголовок = СтрШаблон(НСтр("ru='Предыдущее состояние: %1'"),
		СостоянияЗаказов.ПолучитьСостояниеЗаказаПередЗавершением(
			ТекущийОбъект.Ссылка,
			Справочники.СостоянияЗаказовНаПроизводство.Завершен)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ДокументМодифицирован Тогда
		ОповеститьРабочийКалендарь = Истина;
		ДокументМодифицирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура СостояниеЗаказаПриИзменении(Элемент)
	
	Если Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовНаПроизводство.Завершен") Тогда
		Объект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
			// В веб-клиенте установка текущей страницы должна происходить после включения видимости у страницы
			ПодключитьОбработчикОжидания("УстановитьТекущейСтраницейЗавершениеЗаказа", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния Тогда
		ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовНаПроизводство"), ПараметрыПолученияДанных);
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Ложь;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Элементы.ЗаказПокупателя.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗаказНаПроизводствоОснование);
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

&НаКлиенте
Процедура ЗаказПокупателяПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ПродукцияРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			СтрокаПродукция.Резерв = 0;
		КонецЦикла;
		
	Иначе
		
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ЗапасыРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ЗапасыИзменитьРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Резерв = 0;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаказПокупателяПриИзменении()

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		
		ТипНоменклатурыЗапас = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас");
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			
			Если ЗначениеЗаполнено(СтрокаПродукция.Номенклатура)
				И СтрокаПродукция.ТипНоменклатуры <> ТипНоменклатурыЗапас Тогда
				
				ТекстСообщения = НСтр("ru = 'Операция разборки не выполняется для работ и услуг!
								|В строке №%Номер% табличной части ""Продукция"" номенклатура ""%НоменклатураПредставление%"" является работой (услугой)'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаПродукция.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураПредставление%", Строка(СтрокаПродукция.Номенклатура));
				
				УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект, ТекстСообщения);
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииОбработкаВыбора()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура СтартПриИзменении(Элемент)
	
	Если Объект.Старт > Объект.Финиш И ЗначениеЗаполнено(Объект.Финиш) Тогда
		Объект.Старт = ПриИзмененииСтарт;
		Сообщить(НСтр("ru='Дата старта не может быть больше даты финиша.'"));
	Иначе
		ПриИзмененииСтарт = Объект.Старт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФинишПриИзменении(Элемент)
	
	Если Час(Объект.Финиш) = 0 И Минута(Объект.Финиш) = 0 Тогда
		Объект.Финиш = КонецДня(Объект.Финиш);
	КонецЕсли;
	
	Если Объект.Финиш < Объект.Старт Тогда
		Объект.Финиш = ПриИзмененииФиниш;
		Сообщить(НСтр("ru='Дата финиша не может быть меньше даты старта.'"));
	Иначе
		ПриИзмененииФиниш = Объект.Финиш;
	КонецЕсли;
	
КонецПроцедуры // ФинишПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница)
		И Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
		
		ДанныеСтруктурнаяЕдиницаРезерв = ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(Объект.СтруктурнаяЕдиница);
		Объект.СтруктурнаяЕдиницаРезерв = ДанныеСтруктурнаяЕдиницаРезерв;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

&НаКлиенте
Процедура СтруктурнаяЕдиницаРезервПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв)
		И Не ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		ДанныеСтруктурнаяЕдиница = ПолучитьДанныеСтруктурнаяЕдиницаРезервПриИзменении(Объект.СтруктурнаяЕдиницаРезерв);
		Объект.СтруктурнаяЕдиница = ДанныеСтруктурнаяЕдиница;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаРезервПриИзменении()

&НаКлиенте
Процедура ПродукцияСтруктурнаяЕдиницаРезервОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПродукцияСтруктурнаяЕдиницаРезервОткрытие()

&НаКлиенте
Процедура ЗапасыСтруктурнаяЕдиницаРезервОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаРезерв) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыСтруктурнаяЕдиницаРезервОткрытие()

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		//Выбрать основание
		СписокОснований = Новый СписокЗначений;
		СписокОснований.Добавить("Документ.ЗаказПокупателя.ФормаВыбора", "Заказ покупателя");
		СписокОснований.Добавить("Документ.ЗаказНаПроизводство.ФормаВыбора", "Заказ на производство");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокОснований, Элементы.ДокументОснованиеНадпись);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) тогда
			возврат;
		КонецЕсли;
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоТипу(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
	СтрокаТабличнойЧасти.ТипНоменклатуры = СтруктураДанные.ТипНоменклатуры;
	
КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ПродукцияХарактеристикаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Спецификация = СтруктураДанные.Спецификация;
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРесурсыПредприятия

&НаКлиенте
Процедура РесурсыПредприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.РесурсыПредприятия.ТекущиеДанные;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Старт", '00010101');
		СтруктураДанных.Вставить("Финиш", '00010101');
		СтруктураДанных.Вставить("Длительность", '00010101');
		
		СтруктураДанных = ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования(СтруктураДанных);
		СтрокаТабличнойЧасти.Старт = СтруктураДанных.Старт;
		СтрокаТабличнойЧасти.Финиш = СтруктураДанных.Финиш;
		СтрокаТабличнойЧасти.Длительность = СтруктураДанных.Длительность;
		
	КонецЕсли;
	
КонецПроцедуры // РесурсыПредприятияПриНачалеРедактирования()

&НаКлиенте
Процедура РесурсыПредприятияРесурсПредприятияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РесурсыПредприятия.ТекущиеДанные;
	СтрокаТабличнойЧасти.Мощность = 1;
	
КонецПроцедуры // РесурсыПредприятияРесурсПредприятияПриИзменении()

&НаКлиенте
Процедура РесурсыПредприятияДеньПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если ТекущаяСтрока.Старт = '00010101' Тогда
		ТекущаяСтрока.Старт = ТекущаяДата();
	КонецЕсли;
	
	ФинишВСекундах = Час(ТекущаяСтрока.Финиш) * 3600 + Минута(ТекущаяСтрока.Финиш) * 60;
	ДлительностьВСекундах = Час(ТекущаяСтрока.Длительность) * 3600 + Минута(ТекущаяСтрока.Длительность) * 60;
	ТекущаяСтрока.Финиш = НачалоДня(ТекущаяСтрока.Старт) + ФинишВСекундах;
	ТекущаяСтрока.Старт = ТекущаяСтрока.Финиш - ДлительностьВСекундах;
	
КонецПроцедуры // РесурсыПредприятияДеньПриИзменении()

&НаКлиенте
Процедура РесурсыПредприятияДлительностьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	ДлительностьВСекундах = Час(ТекущаяСтрока.Длительность) * 3600 + Минута(ТекущаяСтрока.Длительность) * 60;
	Если ДлительностьВСекундах = 0 Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
	Иначе
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + ДлительностьВСекундах;
	КонецЕсли;
	Если НачалоДня(ТекущаяСтрока.Старт) <> НачалоДня(ТекущаяСтрока.Финиш) Тогда
		ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
	КонецЕсли;
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
КонецПроцедуры // РесурсыПредприятияДлительностьПриИзменении()

&НаКлиенте
Процедура РесурсыПредприятияСтартПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если ТекущаяСтрока.Старт = '00010101' Тогда
		ТекущаяСтрока.Старт = НачалоДня(ТекущаяСтрока.Финиш);
	КонецЕсли;
	
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
КонецПроцедуры // РесурсыПредприятияСтартПриИзменении()

&НаКлиенте
Процедура РесурсыПредприятияФинишПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РесурсыПредприятия.ТекущиеДанные;
	
	Если Час(ТекущаяСтрока.Финиш) = 0 И Минута(ТекущаяСтрока.Финиш) = 0 Тогда
		ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
	Конецесли;
	Если ТекущаяСтрока.Старт >= ТекущаяСтрока.Финиш Тогда
		ТекущаяСтрока.Финиш = ТекущаяСтрока.Старт + 1800;
		Если НачалоДня(ТекущаяСтрока.Финиш) <> НачалоДня(ТекущаяСтрока.Старт) Тогда
			Если КонецДня(ТекущаяСтрока.Старт) = ТекущаяСтрока.Старт Тогда
				ТекущаяСтрока.Старт = ТекущаяСтрока.Старт - 29 * 60;
			КонецЕсли;
			ТекущаяСтрока.Финиш = КонецДня(ТекущаяСтрока.Старт) - 59;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока.Длительность = РассчитатьДлительность(ТекущаяСтрока);
	
КонецПроцедуры // РесурсыПредприятияФинишПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ЗаполнитьПоДокументу();
        
        Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
            
            Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
                
                Для Каждого СтрокаЗапасы Из Объект.Продукция Цикл
                    СтрокаЗапасы.Резерв = 0;
                КонецЦикла;
                Элементы.Продукция.ПодчиненныеЭлементы.ПродукцияРезерв.Видимость = Ложь;
                
            Иначе
                
                Если Элементы.Продукция.ПодчиненныеЭлементы.ПродукцияРезерв.Видимость = Ложь Тогда
                    Элементы.Продукция.ПодчиненныеЭлементы.ПродукцияРезерв.Видимость = Истина;
                КонецЕсли;
                
            КонецЕсли;
            
        Иначе
            
            Если НЕ ЗначениеЗаполнено(Объект.ЗаказПокупателя) Тогда
                
                Для Каждого СтрокаЗапасы Из Объект.Запасы Цикл
                    СтрокаЗапасы.Резерв = 0;
                КонецЦикла;
                
                Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Ложь;
                Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
                
            Иначе
                
                Если НЕ Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость Тогда
                    Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыРезерв.Видимость = Истина;
                    Элементы.ЗапасыИзменитьРезерв.Видимость = Истина;
                КонецЕсли;
                
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателя(Команда)
	
	Ответ = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаказуПокупателяЗавершение", ЭтотОбъект), НСтр("ru = 'Документ будет полностью перезаполнен по ""Заказу покупателя""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказуПокупателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу("ЗаказПокупателя");
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

&НаКлиенте
Процедура ИзменитьРезервЗаполнитьПоОстаткам(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуРезервПоОстаткамНаСервере();
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура ИзменитьРезервОчиститьРезерв(Команда)
	
	Если Объект.Запасы.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Табличная часть ""Запасы"" не заполнена!'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		СтрокаТабличнойЧасти.Резерв = 0;
	КонецЦикла;
	
КонецПроцедуры // ИзменитьРезервЗаполнитьПоОстаткам()

&НаКлиенте
Процедура КомандаЗаполнитьПоСпецификации(Команда)
	
	Если Объект.Запасы.Количество() <> 0 Тогда
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Материалы"" будет перезаполнена! Продолжить выполнение операции?'"), 
							РежимДиалогаВопрос.ДаНет, 0);
        Возврат;
		
	КонецЕсли;
	
	КомандаЗаполнитьПоСпецификацииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСпецификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    КомандаЗаполнитьПоСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСпецификацииФрагмент()
    
    ЗаполнитьПоСпецификацииНаСервере();

КонецПроцедуры // КомандаЗаполнитьПоСпецификации()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПоСпецификацииНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	СтекСпецификацийУзлов = Новый Массив;
	Документ.ЗаполнитьТабличнуюЧастьПоСпецификации(СтекСпецификацийУзлов);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗаполнитьПоСпецификацииНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Если СтруктураДанные.Свойство("Характеристика") Тогда
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	Иначе
		СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура));
	КонецЕсли;
	
	СтруктураДанные.Вставить("ТипНоменклатуры", СтруктураДанные.Номенклатура.ТипНоменклатуры);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Спецификация", УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(СтруктураДанные.Номенклатура, СтруктураДанные.Характеристика));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении(Склад)
	
	Если Склад.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ Склад.ИсточникПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		Возврат Склад.ИсточникПеремещения;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()	

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтруктурнаяЕдиницаРезервПриИзменении(Склад)
	
	Если Склад.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад
		ИЛИ Склад.ПолучательПеремещения.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		
		Возврат Склад.ПолучательПеремещения;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Склад.ПолучательПеремещения;
	
КонецФункции // ПолучитьДанныеСтруктурнаяЕдиницаПриИзменении()

&НаСервере
Процедура ЗаполнитьПоДокументу(Реквизит = "ЗаказНаПроизводствоОснование")
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект[Реквизит]);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаКлиенте
Процедура УстановитьВидимостьИДоступность()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Разборка") Тогда
		
		// Резерв.
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		Элементы.ЗапасыРезерв.Видимость = Ложь;
		Элементы.ЗапасыИзменитьРезерв.Видимость = Ложь;
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ПродукцияРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		
		Для каждого СтрокаЗапасы Из Объект.Запасы Цикл
			СтрокаЗапасы.Резерв = 0;
		КонецЦикла;
		
		// Тип номенклатуры.
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		// Резерв.
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ЗапасыРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ЗапасыИзменитьРезерв.Видимость = ЗначениеЗаполнено(Объект.ЗаказПокупателя);
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.Видимость = Ложь;
		Элементы.ПродукцияРезерв.Видимость = Ложь;
		
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			СтрокаПродукция.Резерв = 0;
		КонецЦикла;
		
		// Тип номенклатуры.
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		НовыйМассив.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		МассивЗапасРабота = Новый ФиксированныйМассив(НовыйМассив);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивЗапасРабота);
		НовыйПараметр2 = Новый ПараметрВыбора("Дополнительно.ОграничениеТипа", МассивЗапасРабота);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыйМассив.Добавить(НовыйПараметр2);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ПродукцияНоменклатура.ПараметрыВыбора = НовыеПараметры;
		
	КонецЕсли;
	
	Элементы.СтраницаЗавершениеЗаказа.Видимость = Объект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовНаПроизводство.Завершен");
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура УстановитьРежимИСписокВыбора()
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.РежимВыбораИзСписка = Истина;
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.ПродукцияСтруктурнаяЕдиницаРезерв.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.РежимВыбораИзСписка = Истина;
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.ЗапасыСтруктурнаяЕдиницаРезерв.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьРежимИСписокВыбора()

// ПодключаемоеОборудование
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ЗаказНаПроизводство.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));			
		Иначе
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.Спецификация = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Спецификация;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НайденнаяСтрока = МассивСтрокТЧ[0];
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы.Запасы.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);

КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ЗаполнитьКолонкуРезервПоОстаткамНаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьКолонкуРезервПоОстаткам();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоОстаткамНаСервере()

&НаСервереБезКонтекста
Функция ИспользуетсяРезервирование(ВидОперацииОбъекта, ЗаказПокупателяОбъекта, ИмяТабличнойЧасти)
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить()
		И ЗначениеЗаполнено(ЗаказПокупателяОбъекта) Тогда
		
		Если ИмяТабличнойЧасти = "Запасы" И ВидОперацииОбъекта = Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка Тогда
			Возврат Истина;
		ИначеЕсли ИмяТабличнойЧасти = "Продукция" И ВидОперацииОбъекта = Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ИспользуетсяРезервирование()

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбИмяФормы.Значение, СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоДокументуОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу("ДокументОснование");
    КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуПокупателя()

&НаКлиенте
Функция РассчитатьДлительность(ТекущаяСтрока)
	
	ДлительностьВСекундах = ТекущаяСтрока.Финиш - ТекущаяСтрока.Старт;
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
	
	Возврат Длительность;
	
КонецФункции // РассчитатьДлительность()

&НаКлиенте
Функция ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования(СтруктураДанных)
	
	СтруктураДанных.Старт = Объект.Старт - Секунда(Объект.Старт);
	СтруктураДанных.Финиш = Объект.Финиш - Секунда(Объект.Финиш);
	
	Если ЗначениеЗаполнено(СтруктураДанных.Старт) И ЗначениеЗаполнено(СтруктураДанных.Финиш) Тогда
		Если НачалоДня(СтруктураДанных.Старт) <> НачалоДня(СтруктураДанных.Финиш) Тогда
			СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
		КонецЕсли;
		Если СтруктураДанных.Старт >= СтруктураДанных.Финиш Тогда
			СтруктураДанных.Финиш = СтруктураДанных.Старт + 1800;
			Если НачалоДня(СтруктураДанных.Финиш) <> НачалоДня(СтруктураДанных.Старт) Тогда
				Если КонецДня(СтруктураДанных.Старт) = СтруктураДанных.Старт Тогда
					СтруктураДанных.Старт = СтруктураДанных.Старт - 29 * 60;
				КонецЕсли;
				СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Старт) Тогда
		СтруктураДанных.Старт = СтруктураДанных.Старт;
		СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Старт) - 59;
		Если СтруктураДанных.Финиш = СтруктураДанных.Старт Тогда
			СтруктураДанных.Старт = НачалоДня(СтруктураДанных.Старт);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанных.Финиш) Тогда
		СтруктураДанных.Старт = НачалоДня(СтруктураДанных.Финиш);
		СтруктураДанных.Финиш = СтруктураДанных.Финиш;
		Если СтруктураДанных.Финиш = СтруктураДанных.Старт Тогда
			СтруктураДанных.Финиш = КонецДня(СтруктураДанных.Финиш) - 59;
		КонецЕсли;
	Иначе
		СтруктураДанных.Старт = НачалоДня(ТекущаяДата());
		СтруктураДанных.Финиш = КонецДня(ТекущаяДата()) - 59;
	КонецЕсли;
	
	ДлительностьВСекундах = СтруктураДанных.Финиш - СтруктураДанных.Старт;
	Часы = Цел(ДлительностьВСекундах / 3600);
	Минуты = (ДлительностьВСекундах - Часы * 3600) / 60;
	Длительность = Дата(0001, 01, 01, Часы, Минуты, 0);
	СтруктураДанных.Длительность = Длительность;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеРесурсыПредприятияПриНачалеРедактирования()

&НаКлиенте
Процедура УстановитьТекущейСтраницейЗавершениеЗаказа()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗавершениеЗаказа;
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	ЕстьХарактеристики 	= Истина;
	ЕстьПартии 			= Ложь;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 			Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 		Компания);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации",	Истина);
	ПараметрыПодбора.Вставить("ИспользуютсяПартии", 		Ложь);
	ПараметрыПодбора.Вставить("ОтображатьКолонкуЦена", 		Ложь);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка") Тогда
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Ложь);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	Иначе
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Истина);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Ложь);
	КонецЕсли;
	ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", ИспользуетсяРезервирование(Объект.ВидОперации, Объект.ЗаказПокупателя, ИмяТабличнойЧасти));
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ПодборПродукция(Команда)
	
	ИмяТабличнойЧасти 	= "Продукция";
	ЕстьХарактеристики 	= Истина;
	ЕстьПартии 			= Ложь;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 			Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",		Компания);
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", Объект.СтруктурнаяЕдиницаРезерв);
	
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации",	Истина);
	ПараметрыПодбора.Вставить("ИспользуютсяПартии", 		Ложь);
	ПараметрыПодбора.Вставить("ОтображатьКолонкуЦена",		Ложь);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказНаПроизводство.Сборка") Тогда
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Истина);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Ложь);
	Иначе
		ПараметрыПодбора.Вставить("ЭтоПриходныйДокумент", Ложь);
		ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	КонецЕсли;
	ПараметрыПодбора.Вставить("ИспользуетсяРезервирование", ИспользуетсяРезервирование(Объект.ВидОперации, Объект.ЗаказПокупателя, ИмяТабличнойЧасти));
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборПродукция()

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		Если ИмяТабличнойЧасти = "Продукция" Тогда
			
			Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура) Тогда
				
				НоваяСтрока.ТипНоменклатуры = СтрокаЗагрузки.Номенклатура.ТипНоменклатуры;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы", Ложь);
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

&НаКлиенте
Процедура ПродукцияКопироватьСтроки(Команда)
	
	КопироватьСтроки("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВставитьСтроки(Команда)
	
	ВставитьСтроки("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", Строка.Характеристика);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.Спецификация) Тогда
			Строка.Спецификация = СтруктураДанные.Спецификация;
		КонецЕсли;
		
		Если ИмяТЧ = "Продукция" Тогда
			Строка.ТипНоменклатуры = СтруктураДанные.ТипНоменклатуры;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
