
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"ТТНИсходящаяЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Осуществляет поиск ТТН по идентификатору ЕГАИС.
//
// Параметры:
//  ИдентификаторЕГАИС - Строка - идентификатор ТТН в системе ЕГАИС.
//
// Возвращаемое значение:
//   ДокументСсылка.ТТНИсходящаяЕГАИС - найденная ТТН. Неопределено - если не найдена.
//
Функция ТТНПоИдентификатору(ИдентификаторЕГАИС) Экспорт
	Перем Результат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка КАК ТТН
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.ИдентификаторЕГАИС = &ИдентификаторЕГАИС";
	
	Запрос.УстановитьПараметр("ИдентификаторЕГАИС", ИдентификаторЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ТТН;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные ТТН в виде структуры перед выгрузкой в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС - выгружаемая ТТН,
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид выгружаемого документа.
//
// Возвращаемое значение:
//   Структура - данные ТТН.
//
Функция ИнициализироватьДанныеДокументаДляВыгрузки(ДокументСсылка, ВидДокумента) Экспорт

	Если ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		Возврат ИнициализироватьДанныеТТН(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПодтверждениеАктаРасхожденийТТН Тогда
		Возврат ИнициализироватьДанныеПодтвержденияАктаРасхожденийТТН(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ОтказОтАктаРасхожденийТТН Тогда
		Возврат ИнициализироватьДанныеОтказаОтАктаРасхожденийТТН(ДокументСсылка);
		
	ИначеЕсли ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктОтказаОтТТН Тогда
		Возврат ИнициализироватьДанныеАктаОтказаОтТТН(ДокументСсылка);
		
	Иначе
		ТекстОшибки = НСтр("ru='Неподдерживаемый вид документа %1 для исходящей ТТН'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидДокумента);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецФункции

// Добавляет на форму списка условное оформление состояния фиксации.
//
//  Параметры:
//   Форма - УправляемаяФорма – форма документа.
//   ОформляемоеПоле - Строка – имя поля для оформления.
//   ПутьКДанным - Строка - путь к реквизиту СтатусОбработки.
//
Процедура УстановитьУсловноеОформлениеСтатусаОбработки(Форма, ОформляемоеПоле = "Список", ПутьКДанным = "Список.СтатусОбработки") Экспорт
	
	УсловноеОформлениеКД = Форма.УсловноеОформление;
	
	// Представление статуса Передается
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяАктОтказа);
	
	ПредставлениеЭлемента = НСтр("ru = 'Документ передается в ЕГАИС'");
	
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиПередается);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементУсловногоОформления.Отбор,
		ПутьКДанным,
		СписокСтатусов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		ПредставлениеЭлемента,
		Истина);
	
	// Представление статуса ОшибкаПередачи
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиАктаОтказа);
	
	ПредставлениеЭлемента = НСтр("ru = 'Получена ошибка передачи в ЕГАИС'");
	
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЕГАИССтатусОбработкиОшибкаПередачи);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементУсловногоОформления.Отбор,
		ПутьКДанным,
		СписокСтатусов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		ПредставлениеЭлемента,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру, необходимую для выгрузки строки ТТН.
//
Функция СтруктураДанныхСтрокиТТНИсходящей()
	
	Результат = Новый Структура;
	Результат.Вставить("АлкогольнаяПродукция"   , Неопределено); // Элемент справочника КлассификаторАлкогольнойПродукцииЕГАИС.
	Результат.Вставить("ИдентификаторУпаковки"  , Неопределено); // Идентификатор упаковки.
	Результат.Вставить("Количество"             , 0);            // Количество продукции в ТТН.
	Результат.Вставить("Цена"                   , 0);            // Цена продукции в ТТН.
	Результат.Вставить("НомерПартии"            , Неопределено); // Номер партии продукции.
	Результат.Вставить("ИдентификаторСтроки"    , "");           // Идентификатор позиции внутри накладной.
	Результат.Вставить("НомерСправкиА"          , "");           // Номер справки "А" приложения к ТТН.
	Результат.Вставить("СправкаБ"               , Неопределено); // Элемент справочника СправкиБЕГАИС.
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные ТТН в виде структуры.
//
Функция ИнициализироватьДанныеТТН(ДокументСсылка)
	
	ДанныеТТН = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхТТН();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Идентификатор КАК Идентификатор,
	|	ТТНИсходящаяЕГАИС.ВидОперации КАК ВидОперации,
	|	ТТНИсходящаяЕГАИС.Упакована КАК Упакована,
	|	ТТНИсходящаяЕГАИС.НомерТТН КАК НомерТТН,
	|	ТТНИсходящаяЕГАИС.ДатаТТН КАК ДатаТТН,
	|	ТТНИсходящаяЕГАИС.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТТНИсходящаяЕГАИС.Грузоотправитель КАК Грузоотправитель,
	|	ТТНИсходящаяЕГАИС.Грузополучатель КАК Грузополучатель,
	|	ТТНИсходящаяЕГАИС.Поставщик КАК Поставщик,
	|	ТТНИсходящаяЕГАИС.Основание КАК Основание,
	|	ТТНИсходящаяЕГАИС.Комментарий КАК Комментарий,
	|	ТТНИсходящаяЕГАИС.ТипДоставки КАК ТипДоставки,
	|	ТТНИсходящаяЕГАИС.Перевозчик КАК Перевозчик,
	|	ТТНИсходящаяЕГАИС.Автомобиль КАК Автомобиль,
	|	ТТНИсходящаяЕГАИС.Прицеп КАК Прицеп,
	|	ТТНИсходящаяЕГАИС.Заказчик КАК Заказчик,
	|	ТТНИсходящаяЕГАИС.Водитель КАК Водитель,
	|	ТТНИсходящаяЕГАИС.ПунктПогрузки КАК ПунктПогрузки,
	|	ТТНИсходящаяЕГАИС.ПунктРазгрузки КАК ПунктРазгрузки,
	|	ТТНИсходящаяЕГАИС.Перенаправление КАК Перенаправление,
	|	ТТНИсходящаяЕГАИС.Экспедитор КАК Экспедитор
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДанныеТТН, Выборка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНИсходящаяЕГАИСТовары.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТТНИсходящаяЕГАИСТовары.Количество КАК Количество,
	|	ТТНИсходящаяЕГАИСТовары.Цена КАК Цена,
	|	ТТНИсходящаяЕГАИСТовары.НомерПартии КАК НомерПартии,
	|	ТТНИсходящаяЕГАИСТовары.СправкаБ.НомерСправкиА КАК НомерСправкиА,
	|	ТТНИсходящаяЕГАИСТовары.СправкаБ КАК СправкаБ
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТТН = СтруктураДанныхСтрокиТТНИсходящей();
		ЗаполнитьЗначенияСвойств(СтрокаТТН, Выборка);
		СтрокаТТН.ИдентификаторСтроки = Формат(Выборка.НомерСтроки, "ЧГ=0");
		
		ДанныеТТН.ТаблицаТоваров.Добавить(СтрокаТТН);
	КонецЦикла;
	
	Возврат ДанныеТТН;
	
КонецФункции

// Возвращает данные подтверждения акта расхождений ТТН в виде структуры.
//
Функция ИнициализироватьДанныеПодтвержденияАктаРасхожденийТТН(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК Отказ,
	|	ТТНИсходящаяЕГАИС.Номер КАК Номер,
	|	ТТНИсходящаяЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
	|	ТТНИсходящаяЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеДляВыгрузки = СтруктураДанныхПодтвержденияАктаРасхожденийТТН();
	ЗаполнитьЗначенияСвойств(ДанныеДляВыгрузки, Выборка);
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

// Возвращает данные отказа от акта расхождений ТТН в виде структуры.
//
Функция ИнициализироватьДанныеОтказаОтАктаРасхожденийТТН(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК Отказ,
	|	ТТНИсходящаяЕГАИС.Номер КАК Номер,
	|	ТТНИсходящаяЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
	|	ТТНИсходящаяЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеДляВыгрузки = СтруктураДанныхПодтвержденияАктаРасхожденийТТН();
	ЗаполнитьЗначенияСвойств(ДанныеДляВыгрузки, Выборка);
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции

// Возвращает данные акта отказа от ТТН.
//
Функция ИнициализироватьДанныеАктаОтказаОтТТН(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Номер КАК Номер,
	|	ИСТИНА КАК Отказ,
	|	ТТНИсходящаяЕГАИС.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
	|	ТТНИсходящаяЕГАИС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеАкта = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхАктаПодтвержденияТТН();
	ЗаполнитьЗначенияСвойств(ДанныеАкта, Выборка);
	ДанныеАкта.Идентификатор = Строка(ДокументСсылка.УникальныйИдентификатор());
	
	Возврат ДанныеАкта;
	
КонецФункции

// Возвращает структуру, необходимую для выгрузки подтверждения акта расхождений ТТН.
//
Функция СтруктураДанныхПодтвержденияАктаРасхожденийТТН()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор"     , "");   // Идентификатор документа (клиентский, к заполнению необязательный).
	Результат.Вставить("Отказ"             , Ложь); // Признак отказа от акта расхождений ТТН.
	Результат.Вставить("Номер"             , "");   // Номер подтверждения.
	Результат.Вставить("ИдентификаторЕГАИС", "");   // Идентификатор ТТН в системе ЕГАИС.
	Результат.Вставить("Комментарий"       , "");   // Примечание.
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли