
&НаКлиенте
Перем МассивПередаваемыхФайлов;

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьРеквизитыДокумента(Док, РеквизитыДокумента)
	
	ДокОбъект = Док.ПолучитьОбъект();
	
	РеквизитыДокумента.КодНалоговогоОргана = ДокОбъект.КодНалоговогоОргана;
	РеквизитыДокумента.ПериодПо  	       = КонецДня(ДокОбъект.ДатаОкончания);
	РеквизитыДокумента.Организация         = ДокОбъект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИЗаписать(ДокументыОснования, ТекстВыгрузки = Неопределено, ПечатаемыеЛисты = Неопределено, ФайлДляСохранения = Неопределено, ДляЦелейФормированияМЧБ = Ложь, ПроверкаБлокировкиФормы = Ложь, КаталогСохранения = Неопределено, СообщенияОбОшибках = Неопределено, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина, ВыгружатьСОшибками = Ложь, ФайлВыгрузкиВоВременномХранилище = Неопределено, УникальныйИДФормы = Неопределено, ВыполняемоеОповещение = Неопределено, СтруктураДополнительныхПараметров = Неопределено) Экспорт
	
	// реквизиты шапки берем из первого документа, если такой есть
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РежимВызоваЭкспортируемогоМетодаФормы = Истина;
	ПервыйДок = ДокументыОснования.Получить(0).Значение;
	
	// заполняем табличную часть "Выгрузки" документами-основаниями
	Для Каждого Стр Из ДокументыОснования Цикл
		НовСтр = Основания.Добавить();
		НовСтр.Ссылка = Стр.Значение;
		НовСтр.Пометка = Истина;
	КонецЦикла;
	
	// формируем текст выгрузки. Если во время формирования произошла ошибка - вернем признак ошибки
	Попытка
		СформироватьТекстыВыгрузкиКлиент(ПечатаемыеЛисты, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы, , ПервыйДок, СообщенияОбОшибках, ВыгружатьСОшибками, СтруктураДополнительныхПараметров);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиент.СформироватьТекстСообщения(ОписаниеОшибки()));
		Сообщение.Сообщить();
		ОшибкаВыгрузки = Истина;
	КонецПопытки;
	
	Если ОшибкаВыгрузки = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекстВыгрузки <> Неопределено Тогда
		Для Каждого Стр Из Объект.Выгрузки Цикл
			Если НЕ ПустаяСтрока(Стр.Текст) Тогда
				ТекстВыгрузки = Стр.Текст;
				Если ВыполняемоеОповещение <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//выгружаем сформированный текст. если во время выгрузки произошла ошибка - вернем признак ошибки
	Если ФайлДляСохранения = Неопределено Тогда
		Попытка
			СохранитьТексты(Ложь, Ложь, КаталогСохранения, Неопределено, "", Неопределено, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно, ФайлВыгрузкиВоВременномХранилище, УникальныйИДФормы, Ложь, Неопределено);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиент.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			ОшибкаВыгрузки = Истина;
		КонецПопытки;
		
		Если ОшибкаВыгрузки Тогда
			Возврат;
		КонецЕсли;
		
		ТекстСообщенияОВыгрузкеП1Приложения3 = "";
		
		Если СтруктураДополнительныхПараметров <> Неопределено И СтруктураДополнительныхПараметров.Свойство("ТекстСообщенияОВыгрузкеП1Приложения3", ТекстСообщенияОВыгрузкеП1Приложения3) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + СтруктураДополнительныхПараметров.ТекстСообщенияОВыгрузкеП1Приложения3 + "'");
			Сообщение.Сообщить();
		КонецЕсли;
		
	Иначе
		Если Объект.Выгрузки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Текст = Новый ТекстовыйДокумент;
		ТекстВыгрузки0 = Объект.Выгрузки.Получить(0).Текст;
		Текст.УстановитьТекст(ТекстВыгрузки0);
		
		ФайлВыгрузкиЗаписан = Ложь;
		
		Если Лев(ТекстВыгрузки0, 9) = "Структура" Тогда
			
			ТекстВыгрузкиПосл = Объект.Выгрузки.Получить(Объект.Выгрузки.Количество() - 1).Текст;
			СтруктураВыгрузки0 = СтруктураИзСтрокПараметров(ТекстВыгрузкиПосл);
			
			АдресФайлаВыгрузки = Неопределено;
			
			Если ТипЗнч(СтруктураВыгрузки0) = Тип("Структура") И СтруктураВыгрузки0.Свойство("АдресФайлаВыгрузки", АдресФайлаВыгрузки)
			   И ЗначениеЗаполнено(АдресФайлаВыгрузки) Тогда
				Если Лев(АдресФайлаВыгрузки, 2) <> "e1" Тогда
					АдресФайлаВыгрузки = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				
				Если АдресФайлаВыгрузки <> Неопределено Тогда
					ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
					ПередаваемыйФайл.Хранение = АдресФайлаВыгрузки;
					ПередаваемыйФайл.Имя = ФайлДляСохранения;
					МассивПередаваемыхФайлов = Новый Массив;
					МассивПередаваемыхФайлов.Добавить(ПередаваемыйФайл);
					Если ВыполняемоеОповещение <> Неопределено И ДляЦелейФормированияМЧБ Тогда
						НачатьПолучениеФайлов(ВыполняемоеОповещение, МассивПередаваемыхФайлов, , Ложь);
					КонецЕсли;
					Возврат;
				КонецЕсли;
				
			#Иначе
				
				Если АдресФайлаВыгрузки <> Неопределено Тогда
					ДвоичныйФайл = ПолучитьИзВременногоХранилища(АдресФайлаВыгрузки);
					Попытка
						ДвоичныйФайл.Записать(ФайлДляСохранения);
						ФайлВыгрузкиЗаписан = Истина;
					Исключение
						Возврат;
					КонецПопытки;
				КонецЕсли;
				
			#КонецЕсли
			
		КонецЕсли;
		
		Если НЕ ФайлВыгрузкиЗаписан Тогда
			
			КодировкаФайлаВыгрузки = ?(Объект.Выгрузки.Получить(0).Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия400
				ИЛИ Объект.Выгрузки.Получить(0).Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия500
				ИЛИ Объект.Выгрузки.Получить(0).Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия401алко,
				"windows-1251", ?(Объект.Выгрузки.Получить(0).Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСГС
				ИЛИ Объект.Выгрузки.Получить(0).Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияРПН
				ИЛИ Объект.Выгрузки.Получить(0).Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияБанкРоссии, КодировкаТекста.UTF8, "cp866"));
				
			Попытка
				Текст.Записать(ФайлДляСохранения, КодировкаФайлаВыгрузки);
			Исключение
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не указана организация.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Выгрузки.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Тексты выгрузки будут очищены.%1Продолжить?'"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Внимание!");
	Иначе
		ЗаполнитьСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСервер()
	
	КодыИМНС = Новый СписокЗначений;
	Если ПустаяСтрока(Объект.КодНалоговогоОргана) Тогда
		КодыИМНС.Добавить("");
		КодыИМНС.Добавить(" ");
		КодыИМНС.Добавить("  ");
		КодыИМНС.Добавить("   ");
		КодыИМНС.Добавить("    ");
	Иначе
		КодыИМНС.Добавить(Объект.КодНалоговогоОргана);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала
	               |	И РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания
	               |	И РегламентированныйОтчет.Организация = &Организация
	               |	И РегламентированныйОтчет.ФорматВыгрузки <> """"
				   |"
				   + ?(НЕ ПустаяСтрока(Объект.КодНалоговогоОргана), "	И РегламентированныйОтчет.КодНалоговогоОргана В(&КодыИМНС)", "")
				   + "
	               |УПОРЯДОЧИТЬ ПО
	               |	РегламентированныйОтчет.НаименованиеОтчета,
	               |	РегламентированныйОтчет.Вид";

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.ПериодПо));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ПериодПо));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("КодыИМНС", КодыИМНС);
	
	Основания.Очистить();
	Ссылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого Стр Из Ссылки Цикл
		Основания.Добавить();
	КонецЦикла;
	
	ТаблЗначОснования = РеквизитФормыВЗначение("Основания", Тип("ТаблицаЗначений"));
	
	ТаблЗначОснования.ЗагрузитьКолонку(Ссылки, "Ссылка");
	ТаблЗначОснования.ЗаполнитьЗначения(Истина, "Пометка");
	
	ЗначениеВРеквизитФормы(ТаблЗначОснования, "Основания");
	
	Объект.Выгрузки.Очистить();
	
	ОснованияПриПолученииДанных();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.СсылкаНаОбъект) Тогда
		ЗначениеВРеквизитФормы(Параметры.СсылкаНаОбъект.ПолучитьОбъект(), "Объект");
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.ВыгрузкаРегламентированныхОтчетов"));
				
	Если ДокументОбъект.ЭтоНовый() Тогда
		
		ДокументОбъект.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
		Объект.ПериодПо = КонецМесяца(ДобавитьМесяц(КонецКвартала(ТекущаяДатаСеанса()), -3));
		ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
		Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
			Объект.Организация = ОргПоУмолчанию;
		КонецЕсли;
		
		Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			
			ОргПоУмолчанию = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
			
			Объект.Организация = ОргПоУмолчанию;
			
		КонецЕсли;

	КонецЕсли;
	
	Для Каждого Стр Из Объект.Основная Цикл
		НовСтр = Основания.Добавить();
		НовСтр.Ссылка = Стр.Основание;
		НовСтр.НомерСтрокиТекстаВыгрузки = Стр.НомерСтрокиТекстаВыгрузки;
		НовСтр.Пометка = Истина;
	КонецЦикла;

	Год = Год(Объект.ПериодПо);
	Месяц = Месяц(Объект.ПериодПо);
	
	УстановитьЗначениеВПолеВыбораПериода();
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
	
	Элементы.Организация.ТолькоПросмотр = НЕ РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
			
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	ВерсииФорматовВыгрузки = Новый Структура;
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсияФСС", Перечисления.ВерсииФорматовВыгрузки.ВерсияФСС);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсияПФР", Перечисления.ВерсииФорматовВыгрузки.ВерсияПФР);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия700ПФР", Перечисления.ВерсииФорматовВыгрузки.Версия700ПФР);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия500", Перечисления.ВерсииФорматовВыгрузки.Версия500);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия400", Перечисления.ВерсииФорматовВыгрузки.Версия400);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия300", Перечисления.ВерсииФорматовВыгрузки.Версия300);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия201", Перечисления.ВерсииФорматовВыгрузки.Версия201);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия200", Перечисления.ВерсииФорматовВыгрузки.Версия200);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия201алко", Перечисления.ВерсииФорматовВыгрузки.Версия201алко);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия300алко", Перечисления.ВерсииФорматовВыгрузки.Версия300алко);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия301алко", Перечисления.ВерсииФорматовВыгрузки.Версия301алко);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия302алко", Перечисления.ВерсииФорматовВыгрузки.Версия302алко);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсия401алко", Перечисления.ВерсииФорматовВыгрузки.Версия401алко);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсияФСГС", Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсияРПН", Перечисления.ВерсииФорматовВыгрузки.ВерсияРПН);
	ВерсииФорматовВыгрузки.Вставить("ПеречислениеВерсииФорматовВыгрузкиВерсияБанкРоссии", Перечисления.ВерсииФорматовВыгрузки.ВерсияБанкРоссии);
	
	РежимВызоваЭкспортируемогоМетодаФормы = Ложь;
	
	ОснованияПриПолученииДанных();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.КодНалоговогоОргана.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокВыбора().ВыгрузитьЗначения());
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеВПолеВыбораПериода()
	
	Если Месяц = 1 Тогда
		
		ПолеВыбораПериод = "Январь";
				
	ИначеЕсли Месяц = 2 Тогда
		
		ПолеВыбораПериод = "Февраль";
		
	ИначеЕсли Месяц = 3 Тогда
		
		ПолеВыбораПериод = "Март (I квартал)";
		
	ИначеЕсли Месяц = 4 Тогда
		
		ПолеВыбораПериод = "Апрель";
		
	ИначеЕсли Месяц = 5 Тогда
		
		ПолеВыбораПериод = "Май";
		
	ИначеЕсли Месяц = 6 Тогда
		
		ПолеВыбораПериод = "Июнь (II квартал)";
		
	ИначеЕсли Месяц = 7 Тогда
		
		ПолеВыбораПериод = "Июль";
		
	ИначеЕсли Месяц = 8 Тогда
		
		ПолеВыбораПериод = "Август";
		
	ИначеЕсли Месяц = 9 Тогда
		
		ПолеВыбораПериод = "Сентябрь (III квартал)";
		
	ИначеЕсли Месяц = 10 Тогда
		
		ПолеВыбораПериод = "Октябрь";
		
	ИначеЕсли Месяц = 11 Тогда
		
		ПолеВыбораПериод = "Ноябрь";
		
	ИначеЕсли Месяц = 12 Тогда
		
		ПолеВыбораПериод = "Декабрь (IV квартал)";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОснованияПриПолученииДанных(ПервыйДок = Неопределено, КПП = Неопределено)
	
	Если НЕ ПервыйДок = Неопределено Тогда
		
		РеквизитыДокумента = Новый Структура;
	 	РеквизитыДокумента.Вставить("КодНалоговогоОргана", "");
		РеквизитыДокумента.Вставить("ПериодПо",            "");
		РеквизитыДокумента.Вставить("Организация",         "");
	
		ПолучитьРеквизитыДокумента(ПервыйДок, РеквизитыДокумента);
	
		Объект.КодНалоговогоОргана = РеквизитыДокумента.КодНалоговогоОргана;
		Объект.ПериодПо            = КонецДня(РеквизитыДокумента.ПериодПо);
		Объект.Организация         = РеквизитыДокумента.Организация;
		
		КПП = ПервыйДок.КПП;
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			КПП = РегламентированнаяОтчетностьВызовСервера.КПППоКомбинацииОрганизацииИКодаИФНС(Объект.Организация, Объект.КодНалоговогоОргана);
		КонецЕсли;
		
	КонецЕсли;	
		
	СуществуютНепривязанныеТекстыВыгрузки = Ложь;
	Для Инд = 1 По Объект.Выгрузки.Количество() Цикл
		Если РеквизитФормыВЗначение("Основания", Тип("ТаблицаЗначений")).Найти(Инд, "НомерСтрокиТекстаВыгрузки") = Неопределено Тогда
			СуществуютНепривязанныеТекстыВыгрузки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СсылкиНаОтчеты = Новый Массив;
	СоответствиеСсылкиОформлениюСтроки = Новый Соответствие;
	Для Каждого Стр Из Основания Цикл
		СсылкаНаОтчет = Стр.Ссылка;
		СоответствиеСсылкиОформлениюСтроки.Вставить(СсылкаНаОтчет, Стр);
		СсылкиНаОтчеты.Добавить(СсылкаНаОтчет);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.НаименованиеОтчета,
	               |	РегламентированныйОтчет.ФорматВыгрузки,
	               |	РегламентированныйОтчет.ЕдиницаИзмерения,
	               |	РегламентированныйОтчет.ТочностьЕдиницыИзмерения,
	               |	РегламентированныйОтчет.Вид,
	               |	РегламентированныйОтчет.Комментарий,
	               |	РегламентированныйОтчет.ДатаНачала,
	               |	РегламентированныйОтчет.ДатаОкончания,
				   |	РегламентированныйОтчет.Организация,
				   |	РегламентированныйОтчет.КодНалоговогоОргана,
				   |	РегламентированныйОтчет.ИсточникОтчета,
				   |	РегламентированныйОтчет.ВыбраннаяФорма,
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.Ссылка В(&Ссылка)";
	Запрос.УстановитьПараметр("Ссылка", СсылкиНаОтчеты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Стр = СоответствиеСсылкиОформлениюСтроки[Выборка.Ссылка];
		Стр.Отчет                     = Выборка.НаименованиеОтчета;
		Стр.Вид                       = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Выборка.Вид);
		Стр.Период                    = ПредставлениеПериода(НачалоДня(Выборка.ДатаНачала), КонецДня(Выборка.ДатаОкончания), "ФП=Истина");
		Стр.Комментарий               = Выборка.Комментарий;
		Стр.Организация               = Выборка.Организация;
		Стр.ДатаОкончания             = Выборка.ДатаОкончания;
		Стр.ДатаНачала                = Выборка.ДатаНачала;
		Стр.КодНалоговогоОргана       = Выборка.КодНалоговогоОргана;
		Стр.ИсточникОтчета            = Выборка.ИсточникОтчета;
		Стр.ЕдиницаИзмерения          = Выборка.ЕдиницаИзмерения;
		Стр.ТочностьЕдиницыИзмерения  = Выборка.ТочностьЕдиницыИзмерения;
		Стр.ВыбраннаяФорма            = Выборка.ВыбраннаяФорма;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажки(Пометка)
	
	Если Объект.Выгрузки.Количество() <> 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСнятьФлажкиЗавершение", ЭтотОбъект, Новый Структура("Пометка", Пометка)), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При изменении списка документов будут очищены тексты выгрузки.%1Продолжить?'"), Символы.ПС), РежимДиалогаВопрос.ДаНет);
	Иначе
		Для Каждого Элемент Из Основания Цикл
			Элемент.Пометка = Пометка;
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Пометка = ДополнительныеПараметры.Пометка;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		Объект.Выгрузки.Очистить();
	КонецЕсли;
	Для Каждого Элемент Из Основания Цикл
		Элемент.Пометка = Пометка;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстыВыгрузки(Команда)
		
	СформироватьТекстыВыгрузкиКлиент( , , Истина);
	
	Если ОшибкаВыгрузки <> Истина Тогда
		ПоказатьПредупреждение(,НСтр("ru='Формирование текстов выгрузки успешно завершено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстыВыгрузкиКлиент(ПечатаемыеЛисты = Неопределено, ДляЦелейФормированияМЧБ = Ложь, ПроверкаБлокировкиФормы = Ложь, ДляОтправкиВФНС = Ложь, ПервыйДок = Неопределено, СообщенияОбОшибках = Неопределено, ВыгружатьСОшибками = Ложь, СтруктураДополнительныхПараметров = Неопределено)
	
	ОшибкаВыгрузки = Ложь;
	
	КПП = Неопределено;
	
	СформироватьТекстыВыгрузкиСервер(ПервыйДок, ДляОтправкиВФНС, КПП, ОшибкаВыгрузки);
	
	Если ОшибкаВыгрузки Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФСС	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСС));
	ОтборПФР	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияПФР));
	Отбор700ПФР	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия700ПФР));
	Отбор500	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия500));
	Отбор400	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия400));
	Отбор300	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия300));
	Отбор201	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201));
	Отбор201алко = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201алко));
	Отбор302алко = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия302алко));
	Отбор401алко = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия401алко));
	ОтборФСГС	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСГС));
	ОтборРПН	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияРПН));
	ОтборБанкРоссии = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияБанкРоссии));
	
	СчетчикВыгруженныхДокументов = 0;
	НомерОтчета = 0;
	ВыгрузкаПрервана = Ложь;
	
	//выгрузка в формате ФСС
	Если ОтборФСС.Количество() <> 0 Тогда
		Текст = Новый ТекстовыйДокумент;
		ТекТекст = Новый ТекстовыйДокумент;
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из ОтборФСС Цикл
			
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = Стр.ВыбраннаяФорма;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
				
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
				
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
					
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Объект.Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ОпределитьИмяФайлаВыгрузкиФССПоТекстуВыгрузки(ТекстВыгрузкиВXML);
				НовСтр.Тип		= ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСС;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр          = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
				Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
					ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ФСС
	
	//выгрузка в формате ПФР
	Если ОтборПФР.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате ПФР
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		// Последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки.
		Для Каждого Стр Из ОтборПФР Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = Стр.ВыбраннаяФорма;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ, ВыгружатьСОшибками) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
					
					Если ВыгружатьСОшибками
					   И ТекФорма.ТаблицаСообщений.Количество() > 0 Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
					
				Иначе
					ВызватьИсключение Неопределено;
					
				КонецЕсли;
				
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
				
				Если НЕ ВыгружатьСОшибками Тогда
					ОшибкаВыгрузки = Истина;
				КонецЕсли;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
					ОтобразитьФормуНавигацииПоОшибкам();
				Иначе
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
				КонецЕсли;
				
				Если НЕ ВыгружатьСОшибками Тогда
					
					ВыгрузкаПрервана = Истина;
					
					Прервать;
					
				КонецЕсли;
				
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				Если ТипЗнч(ТекстВыгрузкиВXML) = Тип("Массив") Тогда
					Для Каждого ЭлементПакетаВыгрузки Из ТекстВыгрузкиВXML Цикл
						Если ТипЗнч(ЭлементПакетаВыгрузки) = Тип("Структура") Тогда
							НовСтр = Объект.Выгрузки.Добавить();
							НовСтр.ИмяФайла = ЭлементПакетаВыгрузки.ИмяФайлаВыгрузки;
							НовСтр.Тип      = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияПФР;
							НовСтр.Текст    = СтрокиПараметровИзСтруктуры(ЭлементПакетаВыгрузки);
							ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
							Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
								ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ПФР
	
	//выгрузка в формате 7.00
	Если Отбор700ПФР.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 7.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор700ПФР Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = Стр.ВыбраннаяФорма;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ, ВыгружатьСОшибками) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
					
					Если ВыгружатьСОшибками
					   И ТекФорма.ТаблицаСообщений.Количество() > 0 Тогда
						ВызватьИсключение Неопределено;
					КонецЕсли;
					
				Иначе
					ВызватьИсключение Неопределено;
					
				КонецЕсли;
				
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
				
				Если НЕ ВыгружатьСОшибками Тогда
					ОшибкаВыгрузки = Истина;
				КонецЕсли;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
					ОтобразитьФормуНавигацииПоОшибкам();
				Иначе
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
				КонецЕсли;
				
				Если НЕ ВыгружатьСОшибками Тогда
					
					ВыгрузкаПрервана = Истина;
					
					Прервать;
					
				КонецЕсли;
					
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				Если ТипЗнч(ТекстВыгрузкиВXML) = Тип("Массив") Тогда
					Для Каждого ЭлементВыгрузки Из ТекстВыгрузкиВXML Цикл
						НовСтр = Объект.Выгрузки.Добавить();
						НовСтр.ИмяФайла	= ЭлементВыгрузки.ИмяФайла;
						НовСтр.Тип		= ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия700ПФР;
						НовСтр.Текст	= ЭлементВыгрузки.Текст;
						ТекСтр          = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
						Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
							ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
						КонецЕсли;
					КонецЦикла;
				Иначе
					НовСтр = Объект.Выгрузки.Добавить();
					НовСтр.ИмяФайла	= ИзвлечьИмяФайлаИзТекстаXML700ПФР(ТекстВыгрузкиВXML);
					НовСтр.Тип		= ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия700ПФР;
					НовСтр.Текст	= ТекстВыгрузкиВXML;
					ТекСтр          = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
					Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
						ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 7.00
	
	//выгрузка в формате 5.00
	Если Отбор500.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда	
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 5.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор500 Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = Стр.ВыбраннаяФорма;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;
				
				РезультатВыполненияВыгрузки = ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ);
				
				Если ТипЗнч(РезультатВыполненияВыгрузки) = Тип("Структура") Тогда
					Если РезультатВыполненияВыгрузки.КоличествоОшибок = 0 Тогда
						СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
					Иначе
						ПараметрыФормы = Новый Структура;
						ПараметрыФормы.Вставить("СохраненныйОтчет", Стр.Док);
						ПараметрыФормы.Вставить("ПредставлениеОшибок", РезультатВыполненияВыгрузки.ПредставлениеОшибок);
						ПараметрыФормы.Вставить("НазваниеДекларации", РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
						
						ФормаСообщенийОбОшибках = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаСообщенийОбОшибках", ПараметрыФормы);
						Если ФормаСообщенийОбОшибках.Открыта() Тогда
							ФормаСообщенийОбОшибках.Закрыть();
							ФормаСообщенийОбОшибках = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаСообщенийОбОшибках", ПараметрыФормы);
						КонецЕсли;
						ФормаСообщенийОбОшибках.Открыть();
						ВыгрузкаПрервана = Истина;
						ОшибкаВыгрузки = Истина;
						СообщенияОбОшибках = "Подавление вывода сообщения о невозможности получить файлы выгрузки";
					КонецЕсли;
				Иначе
					Если РезультатВыполненияВыгрузки = Истина Тогда
						СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
					Иначе
						ВызватьИсключение Неопределено;
					КонецЕсли;
				КонецЕсли;
				
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
				
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
					
					ОтобразитьФормуНавигацииПоОшибкам();
				Иначе
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				Если ТипЗнч(ТекстВыгрузкиВXML) = Тип("Массив") Тогда
					Для Каждого ЭлементПакетаВыгрузки Из ТекстВыгрузкиВXML Цикл
						Если ТипЗнч(ЭлементПакетаВыгрузки) = Тип("Структура") Тогда
							НовСтр = Объект.Выгрузки.Добавить();
							НовСтр.ИмяФайла = ЭлементПакетаВыгрузки.ИмяФайлаВыгрузки;
							НовСтр.Тип      = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия500;
							НовСтр.Текст    = СтрокиПараметровИзСтруктуры(ЭлементПакетаВыгрузки);
							ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
							Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
								ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
							КонецЕсли;
						Иначе
							НовСтр = Объект.Выгрузки.Добавить();
							НовСтр.ИмяФайла = ИзвлечьИмяФайлаИзТекстаXML(ЭлементПакетаВыгрузки);
							НовСтр.Тип      = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия500;
							НовСтр.Текст    = ЭлементПакетаВыгрузки;
							ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
							Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
								ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					НовСтр = Объект.Выгрузки.Добавить();
					НовСтр.ИмяФайла = ИзвлечьИмяФайлаИзТекстаXML(ТекстВыгрузкиВXML);
					НовСтр.Тип      = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия500;
					НовСтр.Текст    = ТекстВыгрузкиВXML;
					ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
					Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
						ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 5.00
	
	//выгрузка в формате 4.00
	Если Отбор400.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
				
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 4.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор400 Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = Стр.ВыбраннаяФорма;
								
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;	
					
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
								
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
				
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Объект.Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ИзвлечьИмяФайлаИзТекстаXML(ТекстВыгрузкиВXML);
				НовСтр.Тип		= ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия400;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
				Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
					ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 4.00
	
	//выгрузка в формате 3.00
	Если Отбор300.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда	
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 3.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор300 Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);

			Если КПП = Неопределено Тогда
				ОшибкаВыгрузки = Истина;
				Возврат;
			КонецЕсли;
			
			//пытаемся сформировать служебную часть выгрузки и сведения об отправителе
			//если не получается - взводим флаг ошибки и прерываемся
			Текст.Очистить();
			Если НЕ РегламентированнаяОтчетностьВызовСервера.ВывестиСведенияСлужебнойЧастиИОбОтправителе30(Текст, Объект.Организация, КПП, СокрЛП(Объект.КодНалоговогоОргана)) Тогда 
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = НСтр("ru='Не удалось сформировать общую информацию для файла выгрузки формата 3.00.'");

				Сообщение.Сообщить();
				
				ОшибкаВыгрузки = Истина;			
				
				Возврат;
				
			КонецЕсли;
			
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = Стр.ВыбраннаяФорма;
								
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;	
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекТекст, НЕ ДляЦелейФормированияМЧБ) Тогда
					Текст.УстановитьТекст(Текст.ПолучитьТекст() + ТекТекст.ПолучитьТекст());
					Текст.ДобавитьСтроку("@@@");
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
								
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
				
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				Текст.ДобавитьСтроку("===");
				Текст.ЗаменитьСтроку(6, "КолДок:1");	
				ИмяФайлаВыгрузки = ПроставитьИдДокИСформироватьИмяФайлаНаСервере(Текст, Объект.Организация, Стр.Док);
				Если ИмяФайлаВыгрузки = Неопределено Тогда
					ОшибкаВыгрузки = Истина;
					ВыгрузкаПрервана = Истина;
					Прервать;
				КонецЕсли;
				НовСтр = Объект.Выгрузки.Добавить();
				НовСтр.ИмяФайла = ИмяФайлаВыгрузки;
				НовСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия300;
				НовСтр.Текст = Текст.ПолучитьТекст();
				ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
				Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
					ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 3.00
	
	//выгрузка в формате 2.01
	СчетчикВыгруженныхДокументов201 = 0;
	Если (Отбор201.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 2.01
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор201 Цикл
			
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			Текст.Очистить();
			//пытаемся сформировать служебную часть выгрузки и сведения об отправителе
			//если не получается - взводим флаг ошибки и прерываемся
			
			Если НЕ ВывестиОписаниеФормыОтчетности(Текст, Объект.Организация, Объект.КодНалоговогоОргана) Тогда
				ОшибкаВыгрузки = Истина;
				Возврат;
			КонецЕсли;
						
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = Стр.ВыбраннаяФорма;
								
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;	
		
				//вызываем универсальную выгрузку
				Если ТекФорма.УниверсальнаяВыгрузка(ТекТекст, НЕ ДляЦелейФормированияМЧБ) Тогда
					Текст.УстановитьТекст(Текст.ПолучитьТекст() + ТекТекст.ПолучитьТекст());
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
					СчетчикВыгруженныхДокументов201 = СчетчикВыгруженныхДокументов201 + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
				
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
				
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				//добавляем признак конца файла выгрузки
				Текст.ДобавитьСтроку("@@@");
				Текст.ДобавитьСтроку("===");
				Если СчетчикВыгруженныхДокументов <> 0 Тогда
					ПроставитьКолФОтч(Текст, 1);	
					ИмяФайлаВыгрузки = ПроставитьИдДокИСформироватьИмяФайлаНаСервере(Текст, Объект.Организация, Стр.Док);
					НовСтр = Объект.Выгрузки.Добавить();
					Если ИмяФайлаВыгрузки = Неопределено Тогда
						ОшибкаВыгрузки = Истина;
						ВыгрузкаПрервана = Истина;
						Прервать;
					КонецЕсли;
					НовСтр.ИмяФайла = ИмяФайлаВыгрузки;
					НовСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201;
					НовСтр.Текст = Текст.ПолучитьТекст();
					ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
					Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
						ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		//скомпилировали общий текст выгрузки из текстов для каждого документа
		
	КонецЕсли;
	
	// выгрузка в формате 2.01 алко
	Если (Отбор201алко.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор201алко Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = Стр.ВыбраннаяФорма;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;	
	
				ТекФорма.Инициализация(Истина);
				
				//вызываем универсальную выгрузку
				Если ТекФорма.УниверсальнаяВыгрузка(ТекТекст, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;

				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
					
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если СчетчикВыгруженныхДокументов <> 0 Тогда
				НовСтр = Объект.Выгрузки.Добавить();
				ИмяФайлаВыгрузки = СформироватьИмяФайла(Стр.Док, ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201алко);
				Если ИмяФайлаВыгрузки = Неопределено Тогда
					ОшибкаВыгрузки = Истина;
					ВыгрузкаПрервана = Истина;
					Прервать;
				КонецЕсли;
				НовСтр.ИмяФайла = ИмяФайлаВыгрузки;
				НовСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201алко;
				НовСтр.Текст = ТекТекст.ПолучитьТекст();
				ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
				Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
					ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// выгрузка в формате 3.02 алко
	Если (Отбор302алко.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор302алко Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			Попытка
				ТекТекст.Очистить();
				ИмяТекФормы = Стр.ВыбраннаяФорма;
								
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;	
				
				ТекФорма.Инициализация(Истина);
				
				//вызываем универсальную выгрузку
				Если ТекФорма.УниверсальнаяВыгрузка(ТекТекст, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
								
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
				
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если СчетчикВыгруженныхДокументов <> 0 Тогда
				НовСтр = Объект.Выгрузки.Добавить();
				ИмяФайлаВыгрузки = СформироватьИмяФайла(Стр.Док, ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия302алко);
				Если ИмяФайлаВыгрузки = Неопределено Тогда
					ОшибкаВыгрузки = Истина;
					ВыгрузкаПрервана = Истина;
					Прервать;
				КонецЕсли;
				НовСтр.ИмяФайла = ИмяФайлаВыгрузки;
				НовСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия302алко;
				НовСтр.Текст = ТекТекст.ПолучитьТекст();
				ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
				Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
					ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//выгрузка в формате 4.01 алко
	Если (Отбор401алко.Количество() <> 0) И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 4.01 алко
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из Отбор401алко Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = Стр.ВыбраннаяФорма;
								
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;	
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
				
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
				
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Объект.Выгрузки.Добавить();
				НовСтр.ИмяФайла	= ИзвлечьИмяФайлаИзТекстаXML(ТекстВыгрузкиВXML);
				НовСтр.Тип		= ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия401алко;
				НовСтр.Текст	= ТекстВыгрузкиВXML;
				ТекСтр			= Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
				Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
					ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 4.01 алко
	
	//выгрузка в формате ФСГС
	Если ОтборФСГС.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 5.00
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из ОтборФСГС Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекстВыгрузкиВXML = ""; ИмяФайлаXML = "";
			
			Попытка
				ИмяТекФормы = Стр.ВыбраннаяФорма;
								
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ИмяВыбраннойФормы = ?(СтрНайти(ИмяТекФормы, "_") = 0, ИмяТекФормы, Лев(ИмяТекФормы, СтрНайти(ИмяТекФормы, "_") - 1));
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяВыбраннойФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;
				
				Если СтрНайти(ТекФорма.ИмяФормы, "РегламентированныйОтчетСтатистикаБухОтчетность") > 0 Тогда
					РезультатВыгрузки = ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, Истина, ИмяФайлаXML, ЭтаФорма);
				Иначе
					РезультатВыгрузки = ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, Истина, ИмяФайлаXML, ВыгружатьСОшибками);
				КонецЕсли;
				
				// При выборе формата выгрузки статистики прекращаем выполнение. Не выводим никаких сообщений.
				Если РезультатВыгрузки = "НеВыбранФормат" Тогда
					СообщенияОбОшибках = Новый Массив;
					ВызватьИсключение Неопределено;
				КонецЕсли;
				
				Если РезультатВыгрузки Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
				
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
				
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если Стр.Отчет = "Статистика: Форма П-1" И Год(Стр.ДатаНачала) <= 2016 Тогда
				
				ТекстВыгрузкиВXML_П1Пр3 = ""; ИмяФайлаXML_П1Пр3 = "";
				
				Если СтруктураДополнительныхПараметров = Неопределено Тогда
					
					СтруктураДополнительныхПараметров = Новый Структура;
					
					ТекДокП1Пр3 = Неопределено;
					НазваниеИсточникОтчета = Неопределено;
					Пр3ДатаНачала = Неопределено;
					Пр3ДатаОкончания = Неопределено;
					Пр3ВыбраннаяФорма = Неопределено;
										
					ПолучитьПриложение3П1НаСервере(Стр.Док, ТекДокП1Пр3, НазваниеИсточникОтчета, Пр3ВыбраннаяФорма, Пр3ДатаНачала, Пр3ДатаОкончания);
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("мСохраненныйДок",          ТекДокП1Пр3);
					ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Пр3ДатаНачала);
					ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Пр3ДатаОкончания);
					ПараметрыФормы.Вставить("мВыбраннаяФорма",          Пр3ВыбраннаяФорма);
					ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
					
					Если НазваниеИсточникОтчета = "" ИЛИ НазваниеИсточникОтчета = "Без приложения" Тогда
						ТекФормаП1Пр3 = Неопределено;
					Иначе
						ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(НазваниеИсточникОтчета, Пр3ВыбраннаяФорма);
						ТекФормаП1Пр3 = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
					КонецЕсли;	
						
				Иначе
					ТекДокП1Пр3   = СтруктураДополнительныхПараметров.ТекДокП1Пр3;
					ТекФормаП1Пр3 = СтруктураДополнительныхПараметров.ТекФормаП1Пр3;	
				КонецЕсли;
				
				Если ТекФормаП1Пр3 = Неопределено Тогда
					
					Если НазваниеИсточникОтчета <> "Без приложения" Тогда
						ТекстСообщения = НСтр("ru='Не найден сохраненный отчет ""Статистика: Форма П-1 Приложение 3"" для выгрузки в файл XML - соответствующий раздел будет пустым.'");
						СтруктураДополнительныхПараметров.Вставить("ТекстСообщенияОВыгрузкеП1Приложения3", ТекстСообщения);
					КонецЕсли;
						
				Иначе
					
					СтрДокП1Пр3 = Новый Структура;
					СтрДокП1Пр3.Вставить("Док", ТекДокП1Пр3);
					СтрДокП1Пр3.Вставить("Отчет", "Статистика: Форма П-1 Приложение 3");
					СтрДокП1Пр3.Вставить("НаименованиеОтчета", "Статистика: Форма П-1 Приложение 3");
					СтрДокП1Пр3.Вставить("КодНалоговогоОргана", "");
					СтрДокП1Пр3.Вставить("ДатаНачала",    ТекФормаП1Пр3.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
					СтрДокП1Пр3.Вставить("ДатаОкончания", ТекФормаП1Пр3.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
					СтрДокП1Пр3.Вставить("Вид",           ТекФормаП1Пр3.НомерКорректировки * ТекФормаП1Пр3.СтруктураРеквизитовФормы.ВидДокумента);
					
					Попытка
						
						Если ТекФормаП1Пр3.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML_П1Пр3, Истина, ИмяФайлаXML_П1Пр3) Тогда
							СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
						Иначе
							ВызватьИсключение Неопределено;
						КонецЕсли;
						
						ТекстВыгрузкиВXML = ТекФорма.ОбъединитьТекстыXML_П1(ТекстВыгрузкиВXML, ТекстВыгрузкиВXML_П1Пр3);

						ТекстСообщения = "Сохраненный отчет """ + РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтрДокП1Пр3) + 
									     """ выгружен вместе с отчетом ""Статистика: Форма П-1"".";
						
						СтруктураДополнительныхПараметров.Вставить("ТекстСообщенияОВыгрузкеП1Приложения3", ТекстСообщения);
						

					Исключение
						Попытка
							Для Каждого СтрСообщения Из ТекФормаП1Пр3.ТаблицаСообщений Цикл
								НовСтр = ТаблицаСообщений.Добавить();
								НовСтр.ОтчетДок = ТекДокП1Пр3;
								НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтрДокП1Пр3);
								НовСтр.Раздел = СтрСообщения.Раздел;
								НовСтр.Страница = СтрСообщения.Страница;
								НовСтр.Строка = СтрСообщения.Строка;
								НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
								НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
								НовСтр.Графа = СтрСообщения.Графа;
								НовСтр.Описание = СтрСообщения.Описание;
							КонецЦикла;
							ТекФормаП1Пр3.ТаблицаСообщений.Очистить();
						Исключение
						КонецПопытки;

						ОшибкаВыгрузки = Истина;
						
						Если СообщенияОбОшибках = Неопределено Тогда
							
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтрДокП1Пр3));
							Сообщение.Сообщить();
						
							ОтобразитьФормуНавигацииПоОшибкам();
							
						Иначе
							
							ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
							
						КонецЕсли;
				
						ВыгрузкаПрервана = Истина;
						Прервать;
					КонецПопытки;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Объект.Выгрузки.Добавить();
				НовСтр.ИмяФайла = ИмяФайлаXML;
				НовСтр.Тип      = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСГС;
				НовСтр.Текст    = ТекстВыгрузкиВXML;
				ТекСтр          = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
				Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
					ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ФСГС
	
	//выгрузка в формате РПН
	Если ОтборРПН.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 1.3
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		//последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки
		Для Каждого Стр Из ОтборРПН Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекстВыгрузкиВXML = ""; ИмяФайлаXML = "";
			
			Попытка
				ИмяТекФормы = Стр.ВыбраннаяФорма;
								
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ИмяВыбраннойФормы = ?(СтрНайти(ИмяТекФормы, "_") = 0, ИмяТекФормы, Лев(ИмяТекФормы, СтрНайти(ИмяТекФормы, "_") - 1));
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяВыбраннойФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;
				
				РезультатВыгрузки = ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, Истина, ИмяФайлаXML, ВыгружатьСОшибками);
				
				Если РезультатВыгрузки Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;
				
				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
				
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				НовСтр = Объект.Выгрузки.Добавить();
				НовСтр.ИмяФайла = ИмяФайлаXML;
				НовСтр.Тип      = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияРПН;
				НовСтр.Текст    = ТекстВыгрузкиВXML;
				ТекСтр          = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
				Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
					ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате РПН
	
	// Выгрузка в формате БанкРоссии.
	Если ОтборБанкРоссии.Количество() <> 0 И (НЕ ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате БанкРоссии
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	
		// Последовательно, для каждого документа из списка, инициализируем "контекст"
		//(создаем окружение) и вызываем экспортную процедуру, формирующую текст выгрузки.
		Для Каждого Стр Из ОтборБанкРоссии Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			Попытка
				ТекстВыгрузкиВXML = "";
				ИмяТекФормы = Стр.ВыбраннаяФорма;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
				ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
				ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
				ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
				ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
				
				Если ЭтаФорма.ВладелецФормы = Неопределено
				 ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
					ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
				Иначе
					ТекФорма = ЭтаФорма.ВладелецФормы;
				КонецЕсли;
				
				Если ТекФорма.УниверсальнаяВыгрузка(ТекстВыгрузкиВXML, НЕ ДляЦелейФормированияМЧБ) Тогда
					СчетчикВыгруженныхДокументов = СчетчикВыгруженныхДокументов + 1;
				Иначе
					ВызватьИсключение Неопределено;
				КонецЕсли;
			Исключение
				Попытка
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					ТекФорма.ТаблицаСообщений.Очистить();
				Исключение
				КонецПопытки;

				ОшибкаВыгрузки = Истина;
				
				Если СообщенияОбОшибках = Неопределено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось выгрузить %1.'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					Сообщение.Сообщить();
					
					ОтобразитьФормуНавигацииПоОшибкам();
					
				Иначе
					
					ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
					
				КонецЕсли;
				
				ВыгрузкаПрервана = Истина;
				Прервать;
			КонецПопытки;
			
			Если НЕ ВыгрузкаПрервана Тогда
				Если ТипЗнч(ТекстВыгрузкиВXML) = Тип("Массив") Тогда
					Для Каждого ЭлементПакетаВыгрузки Из ТекстВыгрузкиВXML Цикл
						Если ТипЗнч(ЭлементПакетаВыгрузки) = Тип("Структура") Тогда
							НовСтр = Объект.Выгрузки.Добавить();
							НовСтр.ИмяФайла = ЭлементПакетаВыгрузки.ИмяФайлаВыгрузки;
							НовСтр.Тип      = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияБанкРоссии;
							НовСтр.Текст    = ПолучитьСтрокуИзВременногоХранилища(ЭлементПакетаВыгрузки.АдресФайлаВыгрузки, ?(ЭлементПакетаВыгрузки.Свойство("КодировкаФайлаВыгрузки"), ЭлементПакетаВыгрузки.КодировкаФайлаВыгрузки, "windows-1251"));
							ТекСтр = Основания.НайтиСтроки(Новый Структура("Ссылка", Стр.Док));
							Если ТекСтр.Количество() > 0 И ТекСтр[0].Пометка Тогда
								ТекСтр[0].НомерСтрокиТекстаВыгрузки = НовСтр.НомерСтроки;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// Конец выгрузки в формате БанкРоссии.
	
	Если ВыгрузкаПрервана И СообщенияОбОшибках = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать тексты выгрузки.'");
		Сообщение.Сообщить();
		
		Если ТаблицаСообщений.Количество() <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Для исправления ошибок используйте окно навигации по ошибкам.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ РежимВызоваЭкспортируемогоМетодаФормы Тогда
		Если ТаблицаСообщений.Количество() <> 0 Тогда
			
			Если СообщенияОбОшибках = Неопределено Тогда
				ОтобразитьФормуНавигацииПоОшибкам();
			Иначе
				ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВыгрузкаПрервана
	   И НЕ ОшибкаВыгрузки Тогда
		ОбработатьСобытие1СОтчетностиНаСервере(ПервыйДок);
	КонецЕсли;
	   		
КонецПроцедуры

&НаКлиенте
Функция СтрокиПараметровИзСтруктуры(СтруктураПараметров)
	
	СтрокиПараметров = "";
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтрокиПараметров = "Структура";
		
		Для каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
			СтрокиПараметров = СтрокиПараметров + Символы.ПС;
			СтрокиПараметров = СтрокиПараметров + ЭлементСтруктуры.Ключ + ":" + СокрЛП(ЭлементСтруктуры.Значение);
		
		КонецЦикла;
		
		Возврат СтрокиПараметров;
		
	КонецЕсли;
	
	Возврат Строка(СтруктураПараметров);
	
КонецФункции

&НаСервере
Процедура ОбработатьСобытие1СОтчетностиНаСервере(ПервыйДок)
	
	РегламентированнаяОтчетность.ОбработатьСобытие1СОтчетности(НСтр("ru = 'Регламентированный отчет. Выгрузка'"), ПервыйДок);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстыВыгрузкиСервер(ПервыйДок, ДляОтправкиВФНС, КПП, ОшибкаВыгрузки)
				
	ОснованияПриПолученииДанных(ПервыйДок, КПП);
			
	КоличествоДокументовДляВыгрузки = 0;
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка Тогда
			КоличествоДокументовДляВыгрузки = КоличествоДокументовДляВыгрузки + 1;
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоДокументовДляВыгрузки = 0 Тогда
						
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбраны документы.'");
			
		Сообщение.Сообщить();
		
		ОшибкаВыгрузки = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Стр Из Основания Цикл
		Если Стр.Организация <> Основания.Получить(0).Организация Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='У выбранных отчетов различаются реквизиты ""Организация"". Пакетная выгрузка невозможна.'");
			
			Сообщение.Сообщить();
			
			ОшибкаВыгрузки = Истина;
			Возврат;
			
		КонецЕсли;
		Если КонецДня(Стр.ДатаОкончания) <> КонецДня(Основания.Получить(0).ДатаОкончания) Тогда
								
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='У выбранных отчетов различаются даты окончания периодов составления. Пакетная выгрузка невозможна.'");
			
			Сообщение.Сообщить();
			
			ОшибкаВыгрузки = Истина;
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	//проверка на то, что у всех документов-оснований один код ИМНС
	НалоговыеОрганы.Очистить();
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка И СокрЛП(Стр.КодНалоговогоОргана) <> "" Тогда //исключаем из проверки отчеты в ПФР и в ФСС с пустым кодом ИМНС
			НовСтр = НалоговыеОрганы.Добавить();
			НовСтр.КодНалоговогоОргана = Стр.КодНалоговогоОргана;
		КонецЕсли;
	КонецЦикла;
	
	Если НалоговыеОрганы.Количество() > 0 Тогда
		
		НайденныеСтроки = НалоговыеОрганы.НайтиСтроки(Новый Структура("КодНалоговогоОргана", НалоговыеОрганы[0].КодНалоговогоОргана));
				
		Если НЕ НалоговыеОрганы.Количество() = НайденныеСтроки.Количество() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='У выбранных отчетов различаются коды ИМНС, в которую они должны представляться. Процесс прерван.'");
			
			Сообщение.Сообщить();
			
			ОшибкаВыгрузки = Истина;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	//конец проверки
	
	//очищаем табличную часть, в которой хранятся ранее сформированные выгрузки
	Объект.Выгрузки.Очистить();
	
	Для Каждого Элемент Из Основания Цикл
		Элемент.НомерСтрокиТекстаВыгрузки = 0;
	КонецЦикла;
		
	ОтчетыВыгружаемыеТолькоИзФормы = Новый Массив;
	
	//заполняем таблицу "документ для выгрузки <-> версия формата выгрузки"
	ВерсииИОтчеты.Очистить();
	
	ЕстьНеопределенныеФорматы = Ложь;
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка Тогда
			НовСтр = ВерсииИОтчеты.Добавить();
			НовСтр.Док           = Стр.Ссылка;
			НовСтр.Версия        = РегламентированнаяОтчетностьВызовСервера.ВерсияФорматаВыгрузки(Стр.Ссылка, Стр.ИсточникОтчета, Стр.ДатаОкончания);
			НовСтр.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
			НовСтр.Точность      = Стр.ТочностьЕдиницыИзмерения;
			НовСтр.ИсточникОтчета = Стр.ИсточникОтчета;
			НовСтр.Отчет	     = Стр.Отчет;
			НовСтр.ДатаНачала	 = Стр.ДатаНачала;
			НовСтр.ДатаОкончания = Стр.ДатаОкончания;
			Если ТипЗнч(Стр.Вид) = Тип("Строка") Тогда
				ВидДлина = СтрДлина(Стр.Вид);
				СтрокаПроверки = "1234567890";
				ВидРезультат = "";
				Для НомПоз = 1 По ВидДлина Цикл
					ТекСимвол = Сред(Стр.Вид, НомПоз, 1);
					ВидРезультат = ВидРезультат + ?(СтрНайти(СтрокаПроверки, ТекСимвол) = 0, "", ТекСимвол);
				КонецЦикла;
				ВидРезультат = ?(ВидРезультат = "", 0, Число(ВидРезультат));
				НовСтр.Вид = ВидРезультат;
			Иначе
				НовСтр.Вид = Стр.Вид;
			КонецЕсли;
			НовСтр.КодНалоговогоОргана = Стр.КодНалоговогоОргана;
			НовСтр.ВыбраннаяФорма = Стр.ВыбраннаяФорма;
			Если НЕ ЗначениеЗаполнено(НовСтр.Версия) Тогда	
				ЕстьНеопределенныеФорматы = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//заполнили таблицу
	
	Если ОтчетыВыгружаемыеТолькоИзФормы.Количество() > 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Выгрузка следующих отчетов возможна только из формы отчета:'");

		Сообщение.Сообщить();

		Для Каждого Док Из ОтчетыВыгружаемыеТолькоИзФормы Цикл
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' - %1'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Док));

			Сообщение.Сообщить();

		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//Если среди выбранных присутствуют отчеты с неопределенным форматом выгрузки, то 
	//выведем список этих отчетов и прекратим формирование электронного представления
	Если ЕстьНеопределенныеФорматы Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Для следующих отчетов выгрузка не предусмотрена:'");

		Сообщение.Сообщить();
		
		Для Каждого Стр Из ВерсииИОтчеты Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Версия) Тогда
												
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' - %1'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));

				Сообщение.Сообщить();

			КонецЕсли;
		КонецЦикла;
						
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Продолжение невозможно. Формирование текстов выгрузки прервано.'");

		Сообщение.Сообщить();
		
		ОшибкаВыгрузки = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	//Определим список отчетов, которые должны выгружаться в формате <> Перечисления.ПорядкиОкругленияОтчетности.Окр1
	ОтчетыСохраненныеСНевернымОкруглением = Новый СписокЗначений;
	
	// Определим список отчетов, которые не могут отправляться в ФНС
	Если ДляОтправкиВФНС Тогда
		ОтчетыНеотправляемыеВФНС = Новый Массив;
	КонецЕсли;
	
	ОтчетыБаланса = Новый СписокЗначений;
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБаланс");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма2");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма3");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма4");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма5");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма6");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБухОтчетность");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБухОтчетностьСОНКО");
	ОтчетыБаланса.Добавить("БухгалтерскаяОтчетностьВБанк");
	
	ОтчетыАлко = Новый СписокЗначений;
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение1");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение2");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение3");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение4");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение5");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение6");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение7");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение8");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение9");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение10");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение11");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение12");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение13");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение14");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение15");
	
	ОтчетыФСС = Новый СписокЗначений;
	ОтчетыФСС.Добавить("РегламентированныйОтчет4ФСС");
	ОтчетыФСС.Добавить("РегламентированныйОтчет4аФСС");
	
	ОтчетыЗаявления = Новый СписокЗначений;
	ОтчетыЗаявления.Добавить("РегламентированныйОтчетЗаявлениеОВвозеТоваров");
	
	ОтчетыРСВ2 = Новый СписокЗначений;
	ОтчетыРСВ2.Добавить("РегламентированныйОтчетРСВ2");
	
	ОтчетыРВ3 = Новый СписокЗначений;
	ОтчетыРВ3.Добавить("РегламентированныйОтчетРВ3");
	
	ОтчетыФСГС = Новый СписокЗначений;
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаБухОтчетность");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11К");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1П");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Т");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1И");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Информ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма5З");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1СХ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2инв");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2к");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП3");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП4НЗ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП5М");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМПром");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМТорг");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПм");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПОбразование");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПКультура");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПНаука");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПСоц");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПЗдрав");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаС1");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаС2");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма22ЖКХсв");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Автотранс");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Алкоголь");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1АлкогольОпт");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ЦеныПриобр");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9КС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПсвед");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Услуги");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПроизв");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАуслуги");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма65Автотранс");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Закупки");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3СБвывоз");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11Сделка");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАППМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3ТОРГПМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2НаукаКр");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТРавто");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Учет");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСуслуги");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ВЭС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11ТЭР");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4ТЭР");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МБ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма12Ф");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТГМС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТОРГ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1НатураБМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма7Травматизм");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ТПВоздух");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма26ЖКХ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма12Строительство");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4Запасы");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Технология");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИЖС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Администрация");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАФЛ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПмсх");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПриобр");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МО");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4Инновация");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма24Энергетика");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма14МЕТлом");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2МС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ГСГЗ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Туст");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Приватизация");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2Приватизация");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Тчзп");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма85К");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТЕП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ФПинд");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Кадры");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1КСРКраткая");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1КСР");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ДМДавальческоеСырье");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4ДМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РабочаяСила");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФПФ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФСС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФОМС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ФП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1СХцены");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2СБСеверСр");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2МПинн");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Контракт");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11НА");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РЖ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ГС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТОРГм");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаИЖС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСТрусл");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма57Т");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Предприниматель");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПСП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПмес");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВМП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВбюджет");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПУслуги");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаПрочиеФормы");
	
	ОтчетыРПН = Новый СписокЗначений;
	ОтчетыРПН.Добавить("РегламентированныйОтчетРасчетПлатыОкрСредаСвод");
	ОтчетыРПН.Добавить("РегламентированныйОтчетОтходыСубъектовМСП");
	ОтчетыРПН.Добавить("РегламентированныйОтчетФорма2ТПОтходы");
	ОтчетыРПН.Добавить("РегламентированныйОтчетРасчетЭкологическийСбор");
	
	Для Каждого Стр Из ВерсииИОтчеты Цикл
		ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
		Точность = Стр.Точность;
		ИсточникОтчета = Стр.ИсточникОтчета;
		Если ОтчетыАлко.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ДляОтправкиВФНС Тогда
				ОтчетыНеотправляемыеВФНС.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ОтчетыФСГС.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыРПН.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыЗаявления.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыБаланса.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000
			   И ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОтчетыФСС.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
			 ИЛИ Точность <> 2 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		ИначеЕсли ОтчетыРСВ2.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
			 ИЛИ (Стр.ВыбраннаяФорма = "ФормаОтчета2010Кв1" И Точность <> 0)
			 ИЛИ (Стр.ВыбраннаяФорма <> "ФормаОтчета2010Кв1" И Точность <> 2)Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		ИначеЕсли ОтчетыРВ3.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
			 ИЛИ ((Стр.ВыбраннаяФорма = "ФормаОтчета2010Кв1" ИЛИ Стр.ВыбраннаяФорма = "ФормаОтчета2011Кв4") И Точность <> 0)
			 ИЛИ (НЕ (Стр.ВыбраннаяФорма = "ФормаОтчета2010Кв1" ИЛИ Стр.ВыбраннаяФорма = "ФормаОтчета2011Кв4") И Точность <> 2)Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		Иначе
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Точность <> 0 Тогда
			ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	// если отчетов, которые нельзя отправлять в ФНС, больше нуля,
	// тогда сообщим пользователю
	Если ДляОтправкиВФНС И ОтчетыНеотправляемыеВФНС.Количество() > 0 Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Следующие отчеты не предназначены для отправки в ФНС по каналам связи:'");

		Сообщение.Сообщить();
		
		Для Каждого ОтчетНеотправляемыйВФНС Из ОтчетыНеотправляемыеВФНС Цикл
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' - %1'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ОтчетНеотправляемыйВФНС));

			Сообщение.Сообщить();

		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//если отчетов, которые сохранены с неверным округлением, больше 0, тогда сообщим пользователю,
	//взведем флаг ошибки и прервемся
	Если ОтчетыСохраненныеСНевернымОкруглением.Количество() <> 0 Тогда
						
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Следующие отчеты сохранены с единицей измерения и/или точностью, не соответствующими требованиям формата выгрузки:'");

		Сообщение.Сообщить();
		
		Для Каждого Сч Из ОтчетыСохраненныеСНевернымОкруглением Цикл
			ТекстСообщения = " - " + РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Сч.Значение);
			ТекстСообщения = ТекстСообщения + " должен быть сохранен с единицей измерения ";
			Если ОтчетыБаланса.НайтиПоЗначению(Сч.Значение.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в тысячах рублей"" или ""в миллионах рублей"" с точностью ""0""";
			ИначеЕсли ОтчетыФСС.НайтиПоЗначению(Сч.Значение.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""2""";
			ИначеЕсли ОтчетыРСВ2.НайтиПоЗначению(Сч.Значение.ИсточникОтчета) <> Неопределено Тогда
				Если Сч.Значение.ВыбраннаяФорма = "ФормаОтчета2010Кв1" Тогда
					ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""0""";
				Иначе
					ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""2""";
				КонецЕсли;
			ИначеЕсли ОтчетыРВ3.НайтиПоЗначению(Сч.Значение.ИсточникОтчета) <> Неопределено Тогда
				Если Сч.Значение.ВыбраннаяФорма = "ФормаОтчета2010Кв1" ИЛИ Сч.Значение.ВыбраннаяФорма = "ФормаОтчета2011Кв4" Тогда
					ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""0""";
				Иначе
					ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""2""";
				КонецЕсли;
			Иначе
				ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""0""";
			КонецЕсли;
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);

			Сообщение.Сообщить();

		КонецЦикла;
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Сохраните отчеты с нужной единицей измерения и перезапустите процесс формирования.'");

		Сообщение.Сообщить();
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Продолжение невозможно. Формирование текстов выгрузки прервано.'");

		Сообщение.Сообщить();

		ОшибкаВыгрузки = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСообщений.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураИзСтрокПараметров(СтрокиПараметров)
	
	СтруктураПараметров = Новый Структура;
	
	ЭтоСтруктура = Ложь;
	
	Для НомСтр = 1 По СтрЧислоСтрок(СтрокиПараметров) Цикл
	
		СтрокаПараметров = СтрПолучитьСтроку(СтрокиПараметров, НомСтр);
		
		Если НЕ ЭтоСтруктура Тогда
			Если СтрокаПараметров = "Структура" И НомСтр = 1 Тогда
				ЭтоСтруктура = Истина;
				Продолжить;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		ВхождениеДвоеточия = СтрНайти(СтрокаПараметров, ":");
		Если ВхождениеДвоеточия <> 0 Тогда
			СтруктураПараметров.Вставить(СокрЛП(Лев(СтрокаПараметров, ВхождениеДвоеточия - 1)), СокрЛП(Сред(СтрокаПараметров, ВхождениеДвоеточия + 1)));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПолучитьДокументИлиПараметрыОтбораП1Пр3(ДокП1)
	
	РеквизитыП1 = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокП1, "Организация,Периодичность,Период");
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ИсточникОтчета", "РегламентированныйОтчетСтатистикаФормаП1Приложение3"); 
	Запрос.УстановитьПараметр("Организация", РеквизитыП1.Организация); 
	Запрос.УстановитьПараметр("Периодичность", РеквизитыП1.Периодичность); 
	Запрос.УстановитьПараметр("Период", РеквизитыП1.Период);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегламентированныйОтчет.Ссылка КАК Док
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.Периодичность = &Периодичность
	|	И РегламентированныйОтчет.Период = &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентированныйОтчет.ДатаОкончания";

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапроса   = РезультатЗапроса.Выгрузить();
	
	ТекСтрока = Неопределено;
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ТаблицаЗапроса.Количество() = 1 Тогда
		Возврат ТаблицаЗапроса[0].Док;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ПолучитьПриложение3П1НаСервере(СсылкаНаДокументОтчетП1, СсылкаНаДокументОтчетПр3, НазваниеИсточникОтчета, Пр3ВыбраннаяФорма, Пр3ДатаНачала, Пр3ДатаОкончания)
	
	ДанныеОтчетаП1ХранилищеЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокументОтчетП1, "ДанныеОтчета");
	ДанныеОтчетаП1Структура = ДанныеОтчетаП1ХранилищеЗначения.Получить();
	СсылкаНаДокументОтчетПр3 = ДанныеОтчетаП1Структура.ВыбранныйОтчетПриложение3;
	Если СсылкаНаДокументОтчетПр3 = "Выгрузка без приложения" Тогда
		НазваниеИсточникОтчета = "Без приложения";
	ИначеЕсли СсылкаНаДокументОтчетПр3 = Неопределено Тогда
		СсылкаПр3 = ПолучитьДокументИлиПараметрыОтбораП1Пр3(СсылкаНаДокументОтчетП1);
		Если ЗначениеЗаполнено(СсылкаПр3) Тогда 
			СсылкаНаДокументОтчетПр3 = СсылкаПр3;
			РеквизитыП1Пр3 = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаПр3, "ВыбраннаяФорма,ДатаНачала,ДатаОкончания,ИсточникОтчета");
			Пр3ВыбраннаяФорма = РеквизитыП1Пр3.ВыбраннаяФорма;
			Пр3ДатаНачала = РеквизитыП1Пр3.ДатаНачала;
			Пр3ДатаОкончания = РеквизитыП1Пр3.ДатаОкончания;
			НазваниеИсточникОтчета = РеквизитыП1Пр3.ИсточникОтчета;
		Иначе
			НазваниеИсточникОтчета = "Без приложения";
		КонецЕсли;
	Иначе
		Пр3ВыбраннаяФорма = СсылкаНаДокументОтчетПр3.ВыбраннаяФорма;
		Пр3ДатаНачала = СсылкаНаДокументОтчетПр3.ДатаНачала;
		Пр3ДатаОкончания = СсылкаНаДокументОтчетПр3.ДатаОкончания;
		НазваниеИсточникОтчета = СсылкаНаДокументОтчетПр3.ИсточникОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроставитьИдДокИСформироватьИмяФайлаНаСервере(Текст, Организация, Док)
	
	ПроставитьИдДок(Текст, Организация);
	
	Возврат СформироватьИмяФайла(Док);
	
КонецФункции

&НаСервере
Функция ВывестиОписаниеФормыОтчетности(Текст, Организация, КодНалоговогоОргана)
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ВывестиСведенияСлужебнойЧастиИОбОтправителе30(Текст, Организация, , СокрЛП(КодНалоговогоОргана), "2.01") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось сформировать общую информацию для файла выгрузки формата 2.01.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ВывестиСведенияИнформационнойЧасти201ИСведенияОбОрганизации(Текст, Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось выгрузить сведения об организации для файла выгрузки формата 2.01.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВывестиСведенияОРуководствеОрганизации201(Текст, Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось выгрузить сведения о руководстве организации для файла выгрузки формата 2.01.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьФормуНавигацииПоОшибкам()
	
	Если ТаблицаСообщений.Количество() = 0 Тогда
		НовСтр = ТаблицаСообщений.Добавить();
		НовСтр.Описание = "Выгрузка прервана.";
	КонецЕсли;
	
	ТаблицаСообщенийСтруктура = Новый Структура("ТаблицаСообщений", ТаблицаСообщений);
	
	ПараметрыФормы = Новый Структура("ВладелецТС", ТаблицаСообщенийСтруктура);
	
	ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
	
	Если ФормаНавигацииПоОшибкам.Открыта() Тогда
		
		ФормаНавигацииПоОшибкам.Закрыть();
		
		ФормаНавигацииПоОшибкам = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
		
	КонецЕсли;
	
	ФормаНавигацииПоОшибкам.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьИдДок(Текст, Организация)
	
	ПериодДляСчетчика = ?(Основания.Количество() = 0, Объект.ПериодПо, Основания.Получить(0).ДатаНачала);
	СчДок = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(Организация, ПериодДляСчетчика) + 1;
	ИсходноеЗначениеСчетчика = СчДок;
	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		ТекИнд = Текст.КоличествоСтрок() - Сч + 1;
		ТекСтр = Текст.ПолучитьСтроку(ТекИнд);
		Если Лев(ТекСтр, 6) = "ИдДок:" Тогда
			ЭтоАлко = (СтрНайти(Текст.ПолучитьТекст(), Символы.ПС + "ТипИнф:11520") <> 0);
			Если ЭтоАлко Тогда
				Текст.ЗаменитьСтроку(ТекИнд, Лев(ТекСтр,СтрДлина(ТекСтр) - 4) + Формат(СчДок, "ЧЦ=2; ЧДЦ=0; ЧН=; ЧВН=; ЧГ=0") + Прав(ТекСтр, 2));
			Иначе
				Текст.ЗаменитьСтроку(ТекИнд, Лев(ТекСтр,СтрДлина(ТекСтр) - 8) + Формат(СчДок, "ЧЦ=8; ЧВН=; ЧГ=0"));
			КонецЕсли;
			СчДок = СчДок + 1;
		КонецЕсли;
	КонецЦикла;
	Если ИсходноеЗначениеСчетчика <> СчДок Тогда
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхДокументов(Организация, СчДок - 1, ПериодДляСчетчика);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(Док = Неопределено, ВерсияФормата = Неопределено)
	
	Если ВерсияФормата = Неопределено Тогда
		Если ТекущаяДатаСеанса() < '20070701' Тогда
			ОргИНН = СокрЛП(Объект.Организация.ИНН);
			Если СтрДлина(СокрЛП(ОргИНН)) < 12 Тогда
				КатегорияНП = 1;
			Иначе
				КатегорияНП = 2;
			КонецЕсли;
			Возврат "O" 
					+ ?(КатегорияНП = 1, Сред(СокрЛП(ОргИНН),5,5), Сред(СокрЛП(ОргИНН),6,5))
					+ Прав(Формат(Объект.ПериодПо, "ДФ=dd.MM.yy"),2);
		ИначеЕсли ТекущаяДатаСеанса() < '20081001' Тогда
						
			КППОтчета = Док.КПП;
			Если НЕ ЗначениеЗаполнено(КППОтчета) Тогда
				КППОтчета = РегламентированнаяОтчетностьВызовСервера.КПППоКомбинацииОрганизацииИКодаИФНС(Объект.Организация, Объект.КодНалоговогоОргана);
			КонецЕсли;
			
			Если КППОтчета <> Неопределено Тогда
				ИННОтчета = Объект.Организация.ИНН;
				Если СтрДлина(СокрЛП(ИННОтчета)) < 12 Тогда
					КатегорияНП = 1;
				Иначе
					КатегорияНП = 2;
				КонецЕсли;
				Если КатегорияНП = 1 Тогда
					Возврат "O"
							+ ИННОтчета
							+ "_"
							+ СокрЛП(КППОтчета)
							+ "_"
							+ Формат(Объект.ПериодПо, "ДФ=yy")
							+ "_"
							+ "NNNNNN"
							+ ".txt";
				ИначеЕсли КатегорияНП = 2 Тогда
					Возврат "O"
							+ ИННОтчета
							+ "_"
							+ Формат(Объект.ПериодПо, "ДФ=yy")
							+ "_"
							+ "NNNNNN"
							+ ".txt";
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			
			КППОтчета = Док.КПП;
			Если НЕ ЗначениеЗаполнено(КППОтчета) Тогда
				КППОтчета = РегламентированнаяОтчетностьВызовСервера.КПППоКомбинацииОрганизацииИКодаИФНС(Объект.Организация, Объект.КодНалоговогоОргана);
			КонецЕсли;
			
			Если КППОтчета <> Неопределено Тогда
				ИННОтчета = Объект.Организация.ИНН;
				
				КодИФНСПосредника = ?(Объект.Организация.КрупнейшийНалогоплательщик,
					Объект.Организация.КодНалоговогоОрганаПолучателя, "");
				Если СтрДлина(СокрЛП(ИННОтчета)) < 12 Тогда
					КатегорияНП = 1;
				Иначе
					КатегорияНП = 2;
				КонецЕсли;
				Если КатегорияНП = 1 Тогда
					Возврат "O"
							+ ИННОтчета
							+ "_" + СокрЛП(КППОтчета)
							+ "_" + СокрЛП(?(ПустаяСтрока(КодИФНСПосредника), Объект.КодНалоговогоОргана, КодИФНСПосредника))
							+ СокрЛП(Объект.КодНалоговогоОргана)
							+ "_" + Формат(Объект.ПериодПо, "ДФ=yy")
							+ "_" + "NNNNNNNN"
							+ ".txt";
				ИначеЕсли КатегорияНП = 2 Тогда
					Возврат "O"
							+ ИННОтчета
							+ "_" + СокрЛП(?(ПустаяСтрока(КодИФНСПосредника), Объект.КодНалоговогоОргана, КодИФНСПосредника))
							+ СокрЛП(Объект.КодНалоговогоОргана)
							+ "_" + Формат(Объект.ПериодПо, "ДФ=yy")
							+ "_" + "NNNNNNNN"
							+ ".txt";
				КонецЕсли;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВерсияФормата <> Перечисления.ВерсииФорматовВыгрузки.Версия302алко Тогда
		Возврат "A"
				+ Сред(Док.ИсточникОтчета, 38, 1)
				+ Сред(СокрЛП(Объект.Организация.ИНН), 5, 5)
				+ Прав(Формат(Док.ДатаОкончания, "ДФ=y; ДП=0"), 1);
	Иначе
		ПризнакПериодаОтчета = ?(Док.Периодичность = Перечисления.Периодичность.Квартал, 2, 1);
		Возврат "A"
				+ Сред(Док.ИсточникОтчета, 38, 1)
				+ СокрЛП(Док.Организация.ИНН)
				+ Док.Организация.КПП
				+ ПризнакПериодаОтчета
				+ Формат(Месяц(Док.ДатаОкончания) % ?(ПризнакПериодаОтчета = 2, 12, 13), "ЧЦ=2; ЧН=00; ЧВН=")
				+ Прав(Формат(Строка(Год(Док.ДатаНачала))), 1);
	КонецЕсли;
			
КонецФункции

&НаКлиенте
Процедура СохранитьТексты(НЕЗаписыватьДокумент,
	                      ДляСпринтера,
						  КаталогСохранения,
						  ИмяКонечногоФайла,
						  ТекстВыгрузки,
						  КодировкаТекстаВыгрузки,
						  ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно,
						  ФайлВыгрузкиВоВременномХранилище,
						  УникальныйИДФормы,
						  ВозвращатьИменаИТекстыФайловВыгрузкиВВидеМассивов,
						  ВыполняемоеОповещение) Экспорт
	
	Если Объект.Выгрузки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Нет текстов выгрузки для сохранения!'"));
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	Если ФайлВыгрузкиВоВременномХранилище = Неопределено Тогда
		
		// определяем каталог выгрузки
		Если КаталогСохранения = Неопределено Тогда
			
			#Если НЕ ВебКлиент Тогда
				
				Если НЕ НЕЗаписыватьДокумент Тогда
					ПутьВыгрузки = РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузки();
					Если ПутьВыгрузки = Ложь Тогда
						ОшибкаВыгрузки = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			#КонецЕсли
			
		Иначе
			
			ПутьВыгрузки = КаталогСохранения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// формируем список отчетов для выгрузки
	СписокВыбора = Новый СписокЗначений;
	Для Каждого Стр Из Объект.Выгрузки Цикл
		Если Не ПустаяСтрока(Стр.Текст) Тогда
			НовСтр = СписокВыбора.Добавить(Стр, Формат(Стр.НомерСтроки, "ЧГ=") + ". Файл: " + Стр.ИмяФайла + " (" + Стр.Тип + ")");
			НовСтр.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// если не выбран ни один отчет, то прерываемся
	ЧислоВыгружаемыхОтчетов = 0;
	Для Каждого Эл Из СписокВыбора Цикл
		Если Эл.Пометка Тогда
			ЧислоВыгружаемыхОтчетов = ЧислоВыгружаемыхОтчетов + 1;
		КонецЕсли;
	КонецЦикла;
	Если ЧислоВыгружаемыхОтчетов = 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Нет информации для сохранения!'");
		Сообщение.Сообщить();
		
		ОшибкаВыгрузки = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	ИменаЗаписанныхФайловВыгрузки = Новый Массив;
	
	ВыгруженХотяБыОдинФайл = Ложь;
	БылаОшибкаЗаписи = Ложь;
	
	СчетчикФайловОбщий = 0;
	СчетчикФайловАлко  = 0;
	
	// инициализируем счетчики выгрузки
	ПолучитьСчетчикВыгруженныхФайлов(СчетчикФайловОбщий, СчетчикФайловАлко);
	
	ИсходныйСчетчикФайловОбщий = СчетчикФайловОбщий;
	ИсходныйСчетчикФайловАлко = СчетчикФайловАлко;
	
	МассивПередаваемыхФайловКомплекта = Новый Массив;
	
	МассивПередаваемыхФайлов = Новый Массив;
	
	МассивИменФайловВыгрузки = Новый Массив;
	МассивТекстовФайловВыгрузки = Новый Массив;
	
	ВебБраузер = РегламентированнаяОтчетностьКлиент.ВебБраузер();
	
	ВыполняетсяСохранениеБолееОдногоФайлаВыгрузкиВБраузереMSIE = (ВебБраузер = "MSIE" И СписокВыбора.Количество() > 1);
	
	// последовательно пытаемся записать выбранные пользователем файлы,
	// в случае неудачи - информируем пользователя, взводим флаг ошибки записи и прерываемся.
	Для Каждого Стр Из СписокВыбора Цикл
		
		Если НЕ Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ТекСтр = Стр.Значение;
		
		Если НЕ ПустаяСтрока(ТекСтр.ИмяФайла) Тогда
			
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ТекСтр.Текст);
			
			Если ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия400
				ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия401алко
				ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия500
				ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияПФР
				ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия700ПФР
				ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСС
				ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСГС
				ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияРПН
				ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияБанкРоссии Тогда
				
				ИмяКонечногоФайла = ТекСтр.ИмяФайла;
				КодировкаТекстаВыгрузки = "windows-1251";
				
				Если Лев(ТекСтр.Текст, 9) = "Структура" Тогда
					ВозвращатьИменаИТекстыФайловВыгрузкиВВидеМассивов = Истина;
					ТекстВыгрузки = СтруктураИзСтрокПараметров(ТекСтр.Текст);
					КодировкаФайлаВыгрузки = Неопределено;
					Если ТипЗнч(ТекстВыгрузки) = Тип("Структура") И ТекстВыгрузки.Свойство("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки)
					   И ЗначениеЗаполнено(КодировкаФайлаВыгрузки) Тогда
						КодировкаТекстаВыгрузки = КодировкаФайлаВыгрузки;
					КонецЕсли;
				Иначе
					ТекстВыгрузки = ТекСтр.Текст;
				КонецЕсли;
					
				Если ((ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСГС)
					И (НЕ ВРег(Лев(ИмяКонечногоФайла, 6)) = "NO_BUH") И (НЕ ВРег(Лев(ИмяКонечногоФайла, 6)) = "NO_BOU"))
					ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияПФР
					ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияРПН
					ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияБанкРоссии Тогда
					КодировкаТекстаВыгрузки = "utf-8";
				КонецЕсли; 
				
				Попытка
				
					Если НЕ НЕЗаписыватьДокумент Тогда // НЕ вызов для выгрузки без сохранения в файл
						
						АдресФайлаВыгрузки = Неопределено;
						
						Если ТипЗнч(ТекстВыгрузки) = Тип("Структура") И ТекстВыгрузки.Свойство("АдресФайлаВыгрузки", АдресФайлаВыгрузки)
							   И ЗначениеЗаполнено(АдресФайлаВыгрузки) Тогда
							Если Лев(АдресФайлаВыгрузки, 2) <> "e1" Тогда
								АдресФайлаВыгрузки = Неопределено;
							КонецЕсли;
						КонецЕсли;
						
						Если ФайлВыгрузкиВоВременномХранилище = Неопределено Тогда
							
							#Если ВебКлиент Тогда
								
								Если ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно Тогда
									
									Если АдресФайлаВыгрузки <> Неопределено Тогда
										
										Если ВыполняетсяСохранениеБолееОдногоФайлаВыгрузкиВБраузереMSIE Тогда
											
											МассивПередаваемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяКонечногоФайла, АдресФайлаВыгрузки));
											
										Иначе
											
											ПолучитьФайл(АдресФайлаВыгрузки, ИмяКонечногоФайла, Истина);
											
										КонецЕсли;
										
									Иначе
										
										Если ВыполняетсяСохранениеБолееОдногоФайлаВыгрузкиВБраузереMSIE Тогда
											
											МассивПередаваемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяКонечногоФайла, ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(
														 			 									                          Текст, ТекСтр.ИмяФайла, КодировкаТекстаВыгрузки)));
											
										Иначе
										
											ПолучитьФайл(ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(
														 Текст, ТекСтр.ИмяФайла, КодировкаТекстаВыгрузки), ИмяКонечногоФайла, Истина);
											
										КонецЕсли;
											
									КонецЕсли;
									
								Иначе
									
									ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
									
									Если АдресФайлаВыгрузки <> Неопределено Тогда
										ПередаваемыйФайл.Хранение = АдресФайлаВыгрузки;
									Иначе
										ПередаваемыйФайл.Хранение = ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(
											Текст, ТекСтр.ИмяФайла, КодировкаТекстаВыгрузки);
									КонецЕсли;
										
									Если ПутьВыгрузки <> Неопределено Тогда
										
										ПередаваемыйФайл.Имя = ПутьВыгрузки + ИмяКонечногоФайла;
										
										МассивПередаваемыхФайлов.Добавить(ПередаваемыйФайл);
										
									Иначе
										
										// Случай предусмотрен для отчета "Форма РСВ-1" редакции 2014 г., когда данные
										// персонифицированного учета (разделы 2.5 и 6) получены из внешней программы,
										// и выгружается комплект файлов.
										
										ПередаваемыйФайл.Имя = ИмяКонечногоФайла;
										
										МассивПередаваемыхФайловКомплекта.Добавить(ПередаваемыйФайл);
										
									КонецЕсли;
									
								КонецЕсли;
								
							#Иначе
								
								ИмяВременногоФайла = КаталогВременныхФайлов() + ИмяКонечногоФайла;
								ПолноеИмяКонечногоФайла = ПутьВыгрузки + ИмяКонечногоФайла;
								
								Если АдресФайлаВыгрузки <> Неопределено Тогда
									ДвоичныйФайл = ПолучитьИзВременногоХранилища(АдресФайлаВыгрузки);
									ДвоичныйФайл.Записать(ИмяВременногоФайла);
								Иначе
									ТекстВыгрузки = ТекСтр.Текст;
									Текст.Записать(ИмяВременногоФайла, КодировкаТекстаВыгрузки);
								КонецЕсли;
								
								ПереместитьФайл(ИмяВременногоФайла, ПолноеИмяКонечногоФайла);
								
							#КонецЕсли
							
							// Обработка выгрузки дополнительных файлов бухгалтерской отчетности.
							Если СтрНайти(ТекСтр.ИмяФайла, "NO_BUHOTCH_") = 1
								ИЛИ СтрНайти(ТекСтр.ИмяФайла, "NO_BOUPR_") = 1
								ИЛИ СтрНайти(ТекСтр.ИмяФайла, "NO_BUHMP_") = 1 Тогда
								
								#Если ВебКлиент Тогда
									
									Для Каждого ПередаваемыйФайл Из МассивПередаваемыхФайловКомплекта Цикл
										
										МассивПередаваемыхФайлов.Добавить(ПередаваемыйФайл);
										
									КонецЦикла;	
									
									МассивПередаваемыхФайловКомплекта.Очистить();
									
									Если ВебБраузер = "MSIE" Тогда
										ВыполняетсяСохранениеБолееОдногоФайлаВыгрузкиВБраузереMSIE = Истина;
									КонецЕсли;
									
								#КонецЕсли
								
								МассивДополнительныхФайлов = Новый Массив;         // массив структур с данными полученных доп. файлов
								СписокДополнительныхФайлов = Новый СписокЗначений; // список доп. файлов, которые необходимо прикрепить
								
								ПолучитьДополнительныеФайлыБухгалтерскойОтчетности(
									ТекСтр.Текст, ПутьВыгрузки, МассивДополнительныхФайлов, СписокДополнительныхФайлов, ИменаЗаписанныхФайловВыгрузки);
								
								Если МассивДополнительныхФайлов.Количество() > 0 Тогда
									
									#Если ВебКлиент Тогда
										
										Если ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно Тогда
												
											Для ИндМассива = 0 По МассивДополнительныхФайлов.Количество() - 1 Цикл
												
												АдресДанныхТекДопФайла = МассивДополнительныхФайлов[ИндМассива].АдресДанныхДопФайла;
												ИмяТекДопФайла         = МассивДополнительныхФайлов[ИндМассива].ИмяДопФайла;
																								
												Если ВыполняетсяСохранениеБолееОдногоФайлаВыгрузкиВБраузереMSIE Тогда
												
													МассивПередаваемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяТекДопФайла, АдресДанныхТекДопФайла));
													
												Иначе	
												
													ПолучитьФайл(АдресДанныхТекДопФайла, ИмяТекДопФайла, Истина);
													
												КонецЕсли;	
												
												ИменаЗаписанныхФайловВыгрузки.Добавить(МассивДополнительныхФайлов[ИндМассива].ИмяДопФайла);
												
											КонецЦикла;
											
										Иначе
											
											Для ИндМассива = 0 По МассивДополнительныхФайлов.Количество() - 1 Цикл
												
												ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
												ПередаваемыйФайл.Хранение = МассивДополнительныхФайлов[ИндМассива].АдресДанныхДопФайла;
												
												Если ПутьВыгрузки <> Неопределено Тогда
													
													ПередаваемыйФайл.Имя = ПутьВыгрузки + МассивДополнительныхФайлов[ИндМассива].ИмяДопФайла;
													
													МассивПередаваемыхФайлов.Добавить(ПередаваемыйФайл);
													
												Иначе
													
													ПередаваемыйФайл.Имя = МассивДополнительныхФайлов[ИндМассива].ИмяДопФайла;
													
													МассивПередаваемыхФайлов.Добавить(ПередаваемыйФайл);
													
												КонецЕсли;
												
												ИменаЗаписанныхФайловВыгрузки.Добавить(МассивДополнительныхФайлов[ИндМассива].ИмяДопФайла);
												
											КонецЦикла;
											
										КонецЕсли;
										
									#Иначе
										
										Для ИндМассива = 0 По МассивДополнительныхФайлов.Количество() - 1 Цикл
											
											ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
											ПередаваемыйФайл.Хранение = МассивДополнительныхФайлов[ИндМассива].АдресДанныхДопФайла;
											
											Если ПутьВыгрузки <> Неопределено Тогда
												
												ПередаваемыйФайл.Имя = ПутьВыгрузки + МассивДополнительныхФайлов[ИндМассива].ИмяДопФайла;
												
												МассивПередаваемыхФайлов.Добавить(ПередаваемыйФайл);
												
											Иначе
												
												ПередаваемыйФайл.Имя = МассивДополнительныхФайлов[ИндМассива].ИмяДопФайла;
												
												МассивПередаваемыхФайловКомплекта.Добавить(ПередаваемыйФайл);
												
											КонецЕсли;
											
											ИменаЗаписанныхФайловВыгрузки.Добавить(МассивДополнительныхФайлов[ИндМассива].ИмяДопФайла);
											
										КонецЦикла;
										
										Если МассивПередаваемыхФайлов.Количество() > 0 Тогда
											
											ДопПараметры = Новый Структура;
											ДопПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);	
											
											ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьТекстыПослеНачалаПолученияФайлов", ЭтотОбъект, ДопПараметры);
											
											НачатьПолучениеФайлов(ОписаниеОповещения, МассивПередаваемыхФайлов, , Ложь);
											
										КонецЕсли;
										
									#КонецЕсли
									
								КонецЕсли;
								
								// Для устаревших версий отчета (за исключением "Бухгалтерской отчетности в Росстат")
								// выводится сообщение о необходимости прикрепить файлы.
								Если ТекСтр.Тип <> ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСГС Тогда
									
									Если СписокДополнительныхФайлов.Количество() > 0 Тогда
										
										Сообщение = Новый СообщениеПользователю;
										Сообщение.Текст = НСтр("ru='К файлу выгрузки бухгалтерской отчетности приложите:'");
										Сообщение.Сообщить();
										
										Для Каждого ДополнительныйФайл Из СписокДополнительныхФайлов Цикл
											
											Сообщение = Новый СообщениеПользователю;
											Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='%1'"), ДополнительныйФайл.Представление);
											Сообщение.Сообщить();
											
											Сообщение = Новый СообщениеПользователю;
											Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='%1'"), ДополнительныйФайл.Значение);
											Сообщение.Сообщить();
											
										КонецЦикла;
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							Если АдресФайлаВыгрузки <> Неопределено Тогда
								ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище", АдресФайлаВыгрузки);
							Иначе
								ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище", ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, ТекСтр.ИмяФайла, КодировкаТекстаВыгрузки, УникальныйИДФормы));
							КонецЕсли;
							ФайлВыгрузкиВоВременномХранилище.Вставить("ИмяФайлаВыгрузки", ИмяКонечногоФайла);
							ФайлВыгрузкиВоВременномХранилище.Вставить("ТипФайлаВыгрузки", ТекСтр.Тип);
							ФайлВыгрузкиВоВременномХранилище.Вставить("КодировкаФайлаВыгрузки", КодировкаТекстаВыгрузки);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИменаЗаписанныхФайловВыгрузки.Добавить(ТекСтр.ИмяФайла);
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;

					Если ФайлВыгрузкиВоВременномХранилище = Неопределено Тогда
						
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать файл ""%1"". Возможно, недостаточно места на диске или диск защищен от записи.'"), ИмяКонечногоФайла);
						
						#Если ВебКлиент Тогда
							Если НЕ ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно Тогда
								Сообщение.Текст = Сообщение.Текст + НСтр("ru=' Также, возможно, не подключено расширение для работы с файлами.'");
							КонецЕсли;
						#КонецЕсли
						
					Иначе
						
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось поместить файл выгрузки ""%1"" во временное хранилище!'"), ИмяКонечногоФайла);
						
					КонецЕсли;

					Сообщение.Сообщить();
					
					БылаОшибкаЗаписи = Истина;
					
					Прервать;
					
				КонецПопытки;
				
			Иначе
				
				Попытка
					
					Если ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201алко ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия300алко
					ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия301алко ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия302алко Тогда
						СчФ = СчетчикФайловАлко;
					Иначе
						СчФ = СчетчикФайловОбщий;
					КонецЕсли;
					
					Если ФайлВыгрузкиВоВременномХранилище = Неопределено Тогда
						
						#Если НЕ ВебКлиент Тогда
							ИмяВременногоФайла = КаталогВременныхФайлов() + ТекСтр.ИмяФайла + "." + Формат(СчФ, "ЧЦ=3; ЧН=; ЧВН=; ЧГ=");
						#КонецЕсли
						
					КонецЕсли;
					
					Если ВРЕГ(Прав(ТекСтр.ИмяФайла, 4)) = ".TXT" Тогда // это "обычная" налоговая отчетность
						Если СтрНайти(ТекСтр.ИмяФайла, "NNNNNNNN") = 0 Тогда
							КороткоеИмяФайла = Сред(ТекСтр.ИмяФайла, 1, СтрДлина(ТекСтр.ИмяФайла) - 10) + Формат(СчФ, "ЧЦ=6; ЧН=; ЧВН=; ЧГ=") + ".txt";
						Иначе
							КороткоеИмяФайла = Сред(ТекСтр.ИмяФайла, 1, СтрДлина(ТекСтр.ИмяФайла) - 12) + Формат(СчФ, "ЧЦ=8; ЧН=; ЧВН=; ЧГ=") + ".txt";
						КонецЕсли;
					Иначе // это декларация по алкоголю
						Если НЕ ДляСпринтера Тогда
							КороткоеИмяФайла = ТекСтр.ИмяФайла + "." + Формат(СчФ, "ЧЦ=3; ЧН=; ЧВН=; ЧГ=");
						Иначе
							КодАбонента = СдачаОтчетностиЧерезТакскомСпринтерВызовСервера.ПолучитьНастройкиИнтеграцииСоСпринтером(Объект.Организация).КодАбонента;
							КодИМНСПриОбмене = Лев(КодАбонента, 4);
							РасширениеФайла = Прав(КодАбонента, 3);
							КороткоеИмяФайла = КодИМНСПриОбмене + Формат(СчФ, "ЧЦ=4; ЧДЦ=0; ЧН=; ЧВН=; ЧГ=0") + "." + РасширениеФайла;
						КонецЕсли;
					КонецЕсли;
					
					Если ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия700ПФР Тогда
						КороткоеИмяФайла = ТекСтр.ИмяФайла;
					КонецЕсли;
					
					ТекстВыгрузки = ТекСтр.Текст;
					ИмяКонечногоФайла = КороткоеИмяФайла;
					КодировкаТекстаВыгрузки = "cp866";
					
					Если НЕ НЕЗаписыватьДокумент Тогда // НЕ вызов для выгрузки без сохранения в файл
						
						Если ФайлВыгрузкиВоВременномХранилище = Неопределено Тогда
							
							#Если ВебКлиент Тогда
								
								Если ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно Тогда
									
									Если ВыполняетсяСохранениеБолееОдногоФайлаВыгрузкиВБраузереMSIE Тогда
												
										МассивПередаваемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяКонечногоФайла, ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, КороткоеИмяФайла, КодировкаТекстаВыгрузки)));
													
									Иначе	
									
										ПолучитьФайл(ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, КороткоеИмяФайла, КодировкаТекстаВыгрузки), ИмяКонечногоФайла, Истина);
										
									КонецЕсли;	
									
								Иначе
									
									ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
									
									ПередаваемыйФайл.Имя      = ПутьВыгрузки + КороткоеИмяФайла;
									ПередаваемыйФайл.Хранение = ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, КороткоеИмяФайла, КодировкаТекстаВыгрузки);
									
									МассивПередаваемыхФайлов.Добавить(ПередаваемыйФайл);
																		
								КонецЕсли;   
								
							#Иначе
								
								ИмяКонечногоФайла = ПутьВыгрузки + КороткоеИмяФайла;
								Текст.Записать(ИмяВременногоФайла, "cp866");
								ПереместитьФайл(ИмяВременногоФайла, ИмяКонечногоФайла);
								
							#КонецЕсли
							
						Иначе
							
							ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище", ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, КороткоеИмяФайла, КодировкаТекстаВыгрузки, УникальныйИДФормы));
							ФайлВыгрузкиВоВременномХранилище.Вставить("ИмяФайлаВыгрузки", КороткоеИмяФайла);
							ФайлВыгрузкиВоВременномХранилище.Вставить("ТипФайлаВыгрузки", ТекСтр.Тип);
							ФайлВыгрузкиВоВременномХранилище.Вставить("КодировкаФайлаВыгрузки", КодировкаТекстаВыгрузки);
							
						КонецЕсли;
					
					КонецЕсли;
					
					ИменаЗаписанныхФайловВыгрузки.Добавить(КороткоеИмяФайла);
					
					Если ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201алко ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия300алко
					ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия301алко ИЛИ ТекСтр.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия302алко Тогда
						СчетчикФайловАлко = СчетчикФайловАлко + 1;
					Иначе
						СчетчикФайловОбщий = СчетчикФайловОбщий + 1;
					КонецЕсли;
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;

					Если ФайлВыгрузкиВоВременномХранилище = Неопределено Тогда
						
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать файл ""%1"". Возможно, недостаточно места на диске или диск защищен от записи.'"), ИмяКонечногоФайла);
						
						#Если ВебКлиент Тогда
							Если НЕ ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно Тогда
								Сообщение.Текст = Сообщение.Текст + НСтр("ru=' Также, возможно, не подключено расширение для работы с файлами.'");
							КонецЕсли;
						#КонецЕсли
						
					Иначе
						
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось поместить файл выгрузки ""%1"" во временное хранилище!'"), ИмяКонечногоФайла);
						
					КонецЕсли;
					
					Сообщение.Сообщить();
					
					БылаОшибкаЗаписи = Истина;
					
					Прервать;
					
				КонецПопытки;
				
			КонецЕсли;
			
			ВыгруженХотяБыОдинФайл = Истина;
			
			Если ВозвращатьИменаИТекстыФайловВыгрузкиВВидеМассивов Тогда
				
				МассивИменФайловВыгрузки.Добавить(ТекСтр.ИмяФайла);
				
				Если Лев(ТекСтр.Текст, 9) = "Структура" Тогда
					МассивТекстовФайловВыгрузки.Добавить(СтруктураИзСтрокПараметров(ТекСтр.Текст));
				Иначе
					МассивТекстовФайловВыгрузки.Добавить(ТекСтр.Текст);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсходныйСчетчикФайловОбщий <> СчетчикФайловОбщий Тогда
		РегламентированнаяОтчетностьВызовСервера.УстановитьСчетчикВыгруженныхФайлов(Объект.Организация, СчетчикФайловОбщий - 1, , Объект.ПериодПо, Объект.КодНалоговогоОргана);
	КонецЕсли;
	Если ИсходныйСчетчикФайловАлко <> СчетчикФайловАлко Тогда
		РегламентированнаяОтчетностьВызовСервера.УстановитьСчетчикВыгруженныхФайлов(Объект.Организация, СчетчикФайловАлко - 1, "СчетчикФайловАлко", Объект.ПериодПо);
	КонецЕсли;
	
	// Если был выгружен хотя бы один файл и не было ошибок записи - сохраним
	// и проведем документ. Иначе выведем соответствующее сообщение.
	Если ВыгруженХотяБыОдинФайл Тогда
		
		Если ВозвращатьИменаИТекстыФайловВыгрузкиВВидеМассивов Тогда
			Если МассивИменФайловВыгрузки.Количество() > 0 Тогда
				ИмяКонечногоФайла = МассивИменФайловВыгрузки;
			КонецЕсли;
			Если МассивТекстовФайловВыгрузки.Количество() > 0 Тогда
				ТекстВыгрузки = МассивТекстовФайловВыгрузки;
			КонецЕсли;
		КонецЕсли;
		
		Если БылаОшибкаЗаписи = Истина Тогда
			Если НЕ РежимВызоваЭкспортируемогоМетодаФормы Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='В процессе записи отчетов произошла ошибка!'");
				Сообщение.Сообщить();
				
			КонецЕсли;
		Иначе
			
			Если НЕ НЕЗаписыватьДокумент Тогда
				СохранитьДокументыОснования();
				СоздатьНовыйДокументВыгрузкаРегламентированныхОтчетов(Объект.ПериодПо, Объект.Организация, Объект.КодНалоговогоОргана, Объект.Основная, Объект.Выгрузки);
			КонецЕсли;
			
			Если ФайлВыгрузкиВоВременномХранилище = Неопределено Тогда
				
				Если КаталогСохранения = Неопределено И НЕ НеЗаписыватьДокумент Тогда
					
					#Если НЕ ВебКлиент Тогда
						
						Если ИменаЗаписанныхФайловВыгрузки.Количество() = 1 Тогда
							ТекстСообщения = "Файл выгрузки регламентированного отчета """ + ИменаЗаписанныхФайловВыгрузки[0]
										   + """ сохранен в каталог """ + ПутьВыгрузки + """.";
						Иначе
							ТекстСообщения = "Файлы выгрузки регламентированных отчетов:";
							Для Каждого ИмяЗаписанногоФайлаВыгрузки Из ИменаЗаписанныхФайловВыгрузки Цикл
								ТекстСообщения = ТекстСообщения + Символы.ПС + "- """ + ИмяЗаписанногоФайлаВыгрузки + """;";
							КонецЦикла;
							ТекстСообщения = ТекстСообщения +  Символы.ПС + "сохранены в каталог """ + ПутьВыгрузки + """.";
						КонецЕсли;
						
						Сообщение = Новый СообщениеПользователю;
						
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
						
						Сообщение.Сообщить();
																														
					#Иначе
						
						// Случай предусмотрен для отчета "Форма РСВ-1" редакции 2014 г., когда данные
						// персонифицированного учета (разделы 2.5 и 6) получены из внешней программы,
						// и выгружается комплект файлов.
						
						Если МассивПередаваемыхФайловКомплекта.Количество() > 0 Тогда
							
							Если ПутьВыгрузки = Неопределено Тогда
								
								ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
								ВыборФайла.Заголовок = "Укажите каталог";
								ВыборФайла.МножественныйВыбор = Ложь;
								
								ДопПараметры = Новый Структура;
								ДопПараметры.Вставить("МассивПередаваемыхФайловКомплекта", МассивПередаваемыхФайловКомплекта);
								ДопПараметры.Вставить("ИменаЗаписанныхФайловВыгрузки", ИменаЗаписанныхФайловВыгрузки);
								ДопПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
								
								ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьТекстыПослеПоказаДиалогаВыбораКаталога", ЭтотОбъект, ДопПараметры);
									
								ВыборФайла.Показать(ОписаниеОповещения);
								
								Возврат;
								
							Иначе
								
								ТекстПояснения = НСтр("ru = 'Выполняется сохранение файлов комплекта.
								|Пожалуйста, подождите.'");
								Состояние(ТекстПояснения);
								
								ДопПараметры = Новый Структура;
								ДопПараметры.Вставить("ИменаЗаписанныхФайловВыгрузки", ИменаЗаписанныхФайловВыгрузки);
								ДопПараметры.Вставить("ПутьВыгрузки", ПутьВыгрузки);
								ДопПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
								
								ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьТекстыПослеНачалаПолученияФайловРазделов2_5И6", ЭтотОбъект, ДопПараметры);
				
								НачатьПолучениеФайлов(ОписаниеОповещения, МассивПередаваемыхФайловКомплекта, , Ложь);
								
								Возврат;
								
							КонецЕсли;
																					
						ИначеЕсли МассивПередаваемыхФайлов.Количество() > 0 Тогда
							
							Если ВыполняетсяСохранениеБолееОдногоФайлаВыгрузкиВБраузереMSIE Тогда
								
								ПодключитьОбработчикОжидания("Подключаемый_ПолучитьФайл", 1);
							
							Иначе
								
								ДопПараметры = Новый Структура;
								ДопПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
								
								ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьТекстыПослеНачалаПолученияФайлов", ЭтотОбъект, ДопПараметры);
								
								НачатьПолучениеФайлов(ОписаниеОповещения, МассивПередаваемыхФайлов, , Ложь);
								
							КонецЕсли;
							
							Оповестить("ВыполненоСохранениеФайлаВыгрузки");
							
							Возврат;
				
						КонецЕсли;
						
					#КонецЕсли
					
				ИначеЕсли НЕ ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно Тогда
					
					#Если ВебКлиент Тогда
						
						Если ВыполняетсяСохранениеБолееОдногоФайлаВыгрузкиВБраузереMSIE Тогда
							
							ПодключитьОбработчикОжидания("Подключаемый_ПолучитьФайл", 1);
							
						Иначе
							
							ДопПараметры = Новый Структура;
							ДопПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
							
							ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьТекстыПослеНачалаПолученияФайлов", ЭтотОбъект, ДопПараметры);
							
							НачатьПолучениеФайлов(ОписаниеОповещения, МассивПередаваемыхФайлов, , Ложь);
							
						КонецЕсли;	
						
						Оповестить("ВыполненоСохранениеФайлаВыгрузки");
						
						Возврат;
					
					#КонецЕсли	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Оповестить("ВыполненоСохранениеФайлаВыгрузки");
			
		КонецЕсли;
		
	Иначе
		
		ОшибкаВыгрузки = Истина;
		
	КонецЕсли;
		
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьФайл()
	
	Если МассивПередаваемыхФайлов.Количество() = 0 Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПолучитьФайл");
		
		Возврат;
		
	КонецЕсли;
		
	ПолучитьФайл(МассивПередаваемыхФайлов[0].Хранение, МассивПередаваемыхФайлов[0].Имя);
	
	МассивПередаваемыхФайлов.Удалить(0);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстыПослеНачалаПолученияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполняемоеОповещение);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстыПослеНачалаПолученияФайловРазделов2_5И6(ПолученныеФайлы, ДополнительныеПараметры) Экспорт

	Если НЕ ПолученныеФайлы = Неопределено Тогда
		
		Если ДополнительныеПараметры.ИменаЗаписанныхФайловВыгрузки.Количество() = 1 Тогда
			
			ТекстСообщения = "Файл выгрузки регламентированного отчета """ + ДополнительныеПараметры.ИменаЗаписанныхФайловВыгрузки[0]
			+ """ сохранен в каталог """ + ДополнительныеПараметры.ПутьВыгрузки + """.";
			
		Иначе
			
			ТекстСообщения = "Файлы выгрузки регламентированного отчета:";
			
			Для Каждого ИмяЗаписанногоФайлаВыгрузки Из ДополнительныеПараметры.ИменаЗаписанныхФайловВыгрузки Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + "- """ + ИмяЗаписанногоФайлаВыгрузки + """;";
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения +  Символы.ПС + "сохранены в каталог """ + ДополнительныеПараметры.ПутьВыгрузки + """.";
			
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
		
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры								

&НаКлиенте
Процедура СохранитьТекстыПослеПоказаДиалогаВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		
		ПутьВыгрузки = ВыбранныеФайлы[0];
		
		Для Каждого ОписаниеФайла Из ДополнительныеПараметры.МассивПередаваемыхФайловКомплекта Цикл
			ОписаниеФайла.Имя = ПутьВыгрузки + ПолучитьРазделительПути() + ВРег(ОписаниеФайла.Имя);
		КонецЦикла;
		
		ТекстПояснения = НСтр("ru = 'Выполняется сохранение файлов комплекта.
		|Пожалуйста, подождите.'");
		Состояние(ТекстПояснения);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИменаЗаписанныхФайловВыгрузки", ДополнительныеПараметры.ИменаЗаписанныхФайловВыгрузки);
		ДопПараметры.Вставить("ПутьВыгрузки", ПутьВыгрузки);
		ДопПараметры.Вставить("ВыполняемоеОповещение", ДополнительныеПараметры.ВыполняемоеОповещение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьТекстыПослеНачалаПолученияФайловРазделов2_5И6", ЭтотОбъект, ДопПараметры);
		
		НачатьПолучениеФайлов(ОписаниеОповещения, ДополнительныеПараметры.МассивПередаваемыхФайловКомплекта, , Ложь);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСчетчикВыгруженныхФайлов(СчетчикФайловОбщий, СчетчикФайловАлко)
	
	СчетчикФайловОбщий = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(Объект.Организация, , Объект.ПериодПо, Объект.КодНалоговогоОргана);
	СчетчикФайловАлко = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(Объект.Организация, "СчетчикФайловАлко", Объект.ПериодПо);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Текст, ТекСтрИмяФайла, КодировкаТекста, УникальныйИДФормы = Неопределено)
		
	ИмяВременногоФайла = КаталогВременныхФайлов() + ТекСтрИмяФайла;
		
	Текст.Записать(ИмяВременногоФайла, КодировкаТекста);	
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ФайлВыгрузки, ?(ЗначениеЗаполнено(УникальныйИДФормы) = Истина, УникальныйИДФормы, Новый УникальныйИдентификатор()));
	
КонецФункции

&НаСервере
Процедура СоздатьНовыйДокументВыгрузкаРегламентированныхОтчетов(ПериодПо, Организация, КодНалоговогоОргана, Знач Основная, Знач Выгрузки)
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	
	НовыйДок.Дата = ТекущаяДатаСеанса();
	
	НовыйДок.ПериодПо    = ПериодПо;
	НовыйДок.ПредставлениеПериода = РегламентированнаяОтчетность.ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(НовыйДок);
	НовыйДок.Организация = Организация;
	НовыйДок.КодНалоговогоОргана = КодНалоговогоОргана;
	НовыйДок.Основная.Загрузить(Основная.Выгрузить());
	НовыйДок.Выгрузки.Загрузить(Выгрузки.Выгрузить());
	
	Для каждого ТекСтрока Из НовыйДок.Выгрузки Цикл
		Если Лев(ТекСтрока.Текст, 9) = "Структура" Тогда
			СтруктураПараметров = СтруктураИзСтрокПараметров(ТекСтрока.Текст);
			Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("АдресФайлаВыгрузки") Тогда
				Если Лев(СтруктураПараметров.АдресФайлаВыгрузки, 2) = "e1" Тогда
					Кодировка = ?(СтруктураПараметров.Свойство("КодировкаФайлаВыгрузки"), СтруктураПараметров.КодировкаФайлаВыгрузки, "windows-1251");
					Попытка
						ТекСтрока.Текст = ПолучитьСтрокуИзВременногоХранилища(СтруктураПараметров.АдресФайлаВыгрузки, Кодировка);
					Исключение
						Сообщение = Новый СообщениеПользователю;
						ТекстСообщения = "Не удалось записать текст выгрузки, соответствующий файлу """ + ТекСтрока.ИмяФайла + """. Возможно, недостаточно места на диске или диск защищен от записи.";
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
						Сообщение.Сообщить();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НовыйДок.ЭтоНовый() Тогда
		НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	КонецЕсли;
	
	НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилища, Кодировка)
	
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресВременногоХранилища).Записать(ИмяВременногоФайла);
	
	ТекстовыйФайл = Новый ЧтениеТекста(ИмяВременногоФайла, Кодировка);
	Текст = ТекстовыйФайл.Прочитать();
	ТекстовыйФайл.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура СохранитьДокументыОснования()
	
	Объект.Основная.Очистить();
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка Тогда
			НовСтр = Объект.Основная.Добавить();
			НовСтр.Основание = Стр.Ссылка;
			НовСтр.НомерСтрокиТекстаВыгрузки = Стр.НомерСтрокиТекстаВыгрузки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИмяФайлаВыгрузкиФССПоТекстуВыгрузки(ТекстВыгрузки)
	
	// загружаем строку в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстВыгрузки);
	Если ДеревоXML = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить имя файла выгрузки ФСС по тексту выгрузки.'");

		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// ищем элемент TITLE
	ЭлементыTITLE = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "TITLE", "Э"), Истина);
	Если ЭлементыTITLE.Количество() = 0 Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить имя файла выгрузки ФСС по тексту выгрузки.'");

		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЭлементTITLE = ЭлементыTITLE[0];
	
	// находим атрибуты REG_NUM, DOP_NUM и QUART_NUM
	АтрибутREG_NUM = ЭлементTITLE.Строки.Найти("REG_NUM", "Имя");
	АтрибутDOP_NUM = ЭлементTITLE.Строки.Найти("DOP_NUM", "Имя");
	АтрибутYEAR_NUM = ЭлементTITLE.Строки.Найти("YEAR_NUM", "Имя");
	АтрибутQUART_NUM = ЭлементTITLE.Строки.Найти("QUART_NUM", "Имя");
	
	// проверяем достаточность
	Если (АтрибутREG_NUM = Неопределено И АтрибутDOP_NUM = Неопределено) ИЛИ АтрибутYEAR_NUM = Неопределено Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить имя файла выгрузки ФСС по тексту выгрузки.'");

		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// определяем значения
	ЗначениеREG_NUM = ?(АтрибутREG_NUM = Неопределено, "", СокрЛП(АтрибутREG_NUM.Значение));
	ЗначениеDOP_NUM = ?(АтрибутDOP_NUM = Неопределено, "", СокрЛП(АтрибутDOP_NUM.Значение));
	ЗначениеYEAR_NUM = ?(АтрибутYEAR_NUM = Неопределено, "", СокрЛП(АтрибутYEAR_NUM.Значение));
	ЗначениеQUART_NUM = ?(АтрибутQUART_NUM = Неопределено, "", СокрЛП(АтрибутQUART_NUM.Значение));
	
	// формируем имя файла
	ИмяФайла = ?(ЗначениеЗаполнено(ЗначениеDOP_NUM), ЗначениеDOP_NUM, ЗначениеREG_NUM) + "_" + ЗначениеYEAR_NUM + ?(ЗначениеЗаполнено(ЗначениеQUART_NUM), "_" + ЗначениеQUART_NUM, "") + ".xml";
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция СоздатьДеревоСтруктурыXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено)
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ИзвлечьИмяФайлаИзТекстаXML(Знач ТекстXML)
	
	ИмяФайла = "";
	ВхождениеИдФайл = СтрНайти(ТекстXML, " ИдФайл");
	Если ВхождениеИдФайл <> 0 Тогда
		ТекстXML = Сред(ТекстXML, ВхождениеИдФайл);
		ВхождениеПервойКавычки = СтрНайти(ТекстXML, """");
		Если ВхождениеПервойКавычки <> 0 Тогда
			ТекстXML = Сред(ТекстXML, ВхождениеПервойКавычки + 1);
			ВхождениеВторойКавычки = СтрНайти(ТекстXML, """");
			Если ВхождениеВторойКавычки <> 0 Тогда
				ИмяФайла = СокрЛП(Лев(ТекстXML, ВхождениеВторойКавычки - 1)) + ".xml";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Функция ИзвлечьИмяФайлаИзТекстаXML700ПФР(Знач ТекстXML)
	
	ИмяФайла = "";
	ВхождениеИмяФайла = СтрНайти(ТекстXML, "ИмяФайла");
	Если ВхождениеИмяФайла <> 0 Тогда
		ТекстXML = Сред(ТекстXML, ВхождениеИмяФайла);
		НачалоИмениФайла = СтрНайти(ТекстXML, "PFR");
		КонецИмениФайла = СтрНайти(ТекстXML, ".XML");
		Если НачалоИмениФайла <> 0 И КонецИмениФайла <> 0 Тогда
			ИмяФайла = СокрЛП(Сред(ТекстXML, НачалоИмениФайла, КонецИмениФайла - НачалоИмениФайла) + ".XML");
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ПроставитьКолФОтч(Текст, СчетчикВыгруженныхДокументов201)
	
	Для Сч = 1 По Текст.КоличествоСтрок() Цикл
		Если Лев(Текст.ПолучитьСтроку(Сч), 8) = "КолФОтч:" Тогда
			Текст.ЗаменитьСтроку(Сч, "КолФОтч:" + СчетчикВыгруженныхДокументов201);
			Возврат;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьДополнительныеФайлыБухгалтерскойОтчетности(ТекстОсновногоФайла, ПутьВыгрузки, МассивДополнительныхФайлов, СписокДополнительныхФайлов, ИменаЗаписанныхФайловВыгрузки)
	
	ОтчетОснование = Основания[0].Ссылка; // для бухотчетности связь 1 к 1
	Если ЗначениеЗаполнено(ОтчетОснование) Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстОсновногоФайла);
		ПостроительDOM = Новый ПостроительDOM;
		
		КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
		
		ЭлементыПояснительнаяЗаписка = КорневойУзел.ПолучитьЭлементыПоИмени("Пояснения");// версия формата 5.06
		Если ЭлементыПояснительнаяЗаписка.Количество() = 0 Тогда
			ЭлементыПояснительнаяЗаписка = КорневойУзел.ПолучитьЭлементыПоИмени("ПояснЗап");// версии формата до 5.06
		КонецЕсли;
		
		Если ЭлементыПояснительнаяЗаписка.Количество() > 0 Тогда
			УзелДополнительногоФайла = ЭлементыПояснительнаяЗаписка[0];
			АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлПЗ");
			Если АтрибутУзла.Указан Тогда
				
				ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
				ЗаписьРегистраСведений.РегламентированныйОтчет = ОтчетОснование.Ссылка;
				ЗаписьРегистраСведений.ВидДополнительногоФайла = "Пояснительная записка";
				
				ЗаписьРегистраСведений.Прочитать();
				
				Если НЕ ПустаяСтрока(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
					ИмяДопФайла = АтрибутУзла.Значение;
					АдресДанныхДопФайла = ПоместитьВоВременноеХранилище(
						ЗаписьРегистраСведений.СодержимоеФайла.Получить(), Новый УникальныйИдентификатор);
					СтруктураДанных = Новый Структура("ИмяДопФайла,АдресДанныхДопФайла", ИмяДопФайла, АдресДанныхДопФайла);
					МассивДополнительныхФайлов.Добавить(СтруктураДанных);
				Иначе
					СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл пояснительной записки, присвоив ему имя");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементыАудиторскоеЗаключение = КорневойУзел.ПолучитьЭлементыПоИмени("АудитЗакл");
		Если ЭлементыАудиторскоеЗаключение.Количество() > 0 Тогда
			УзелДополнительногоФайла = ЭлементыАудиторскоеЗаключение[0];
			АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлАЗ");
			Если АтрибутУзла.Указан Тогда
				
				ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
				ЗаписьРегистраСведений.РегламентированныйОтчет = ОтчетОснование.Ссылка;
				ЗаписьРегистраСведений.ВидДополнительногоФайла = "Аудиторское заключение";
				
				ЗаписьРегистраСведений.Прочитать();
				
				Если НЕ ПустаяСтрока(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
					ИмяДопФайла = АтрибутУзла.Значение;
					АдресДанныхДопФайла = ПоместитьВоВременноеХранилище(
						ЗаписьРегистраСведений.СодержимоеФайла.Получить(), Новый УникальныйИдентификатор);
					СтруктураДанных = Новый Структура("ИмяДопФайла,АдресДанныхДопФайла", ИмяДопФайла, АдресДанныхДопФайла);
					МассивДополнительныхФайлов.Добавить(СтруктураДанных);
				Иначе
					СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл аудиторского заключения, присвоив ему имя");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементыЗаявленияРевизионногоСоюза = КорневойУзел.ПолучитьЭлементыПоИмени("ЗаявСХПр");
		Если ЭлементыЗаявленияРевизионногоСоюза.Количество() > 0 Тогда
			УзелДополнительногоФайла = ЭлементыЗаявленияРевизионногоСоюза[0];
			АтрибутУзла = УзелДополнительногоФайла.Атрибуты.ПолучитьИменованныйЭлемент("НаимФайлЗСХП");
			Если АтрибутУзла.Указан Тогда
				
				ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
				ЗаписьРегистраСведений.РегламентированныйОтчет = ОтчетОснование.Ссылка;
				ЗаписьРегистраСведений.ВидДополнительногоФайла = "Заявление союза сельхозпроизводителей";
				
				ЗаписьРегистраСведений.Прочитать();
				
				Если НЕ ПустаяСтрока(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
					ИмяДопФайла = АтрибутУзла.Значение;
					АдресДанныхДопФайла = ПоместитьВоВременноеХранилище(
						ЗаписьРегистраСведений.СодержимоеФайла.Получить(), Новый УникальныйИдентификатор);
					СтруктураДанных = Новый Структура("ИмяДопФайла,АдресДанныхДопФайла", ИмяДопФайла, АдресДанныхДопФайла);
					МассивДополнительныхФайлов.Добавить(СтруктураДанных);
				Иначе
					СписокДополнительныхФайлов.Добавить(АтрибутУзла.Значение, "- файл заявления ревизионного союза сельскохозяйственных производителей, присвоив ему имя");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиСведенияИнформационнойЧасти201ИСведенияОбОрганизации(Текст, Орг)
	
	Результат = Истина;
	
	Св = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Орг);//берем на дату выгрузки.
	
	ДатаДокС = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	ОргИНН = СокрЛП(Орг.ИНН);
	ОргКПП = Орг.КПП;
	КатегорияНП = ?(Св.ТипНП = 3, 2, 1);
	
	Если НЕ ПустаяСтрока(ОргКПП) Тогда
		ИДОтпр = ОргИНН + ?(СтрДлина(ОргИНН) = 12, "", "**") + ОргКПП;
	Иначе
		Если КатегорияНП = 1 Тогда 
			// налогоплательщик - ЮЛ
			ИДОтпр = ОргИНН + "***********";
		Иначе
			// налогоплательщик - ФЛ
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	
	СчДок = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(Орг, Основания.Получить(0).Ссылка.ДатаНачала) + 1;
	
	ИдДок = ИДОтпр + Формат(Год(Основания.Получить(0).Ссылка.ДатаНачала), "ЧГ=") + Формат(СчДок, "ЧЦ=8; ЧН=; ЧВН=; ЧГ=");
	
	Текст.ДобавитьСтроку("ИдДок:" + СокрЛП(ИдДок)); 
	Текст.ДобавитьСтроку("ДатаДок:" + ДатаДокС);
	
	КодНО = СОкрЛП(Св.КодНО);
	НаимОИВ = ВРЕГ(СокрЛП(Св.НаимНО));
	Докпредст = СокрЛП(Св.ТипНП);
	Свидетельство = ВРЕГ(СокрЛП(Св.СвидСН) + "," + Формат(Св.СвидДВ, "ДФ=dd.MM.yyyy; ДЛФ=D") + "," + Св.СвидНОКод);
	ОКВЭД = СокрЛП(Св.ОКВЭД);
	ОКАТО = СокрЛП(Св.ОКАТО);
	КатНП = "01";
	КолФОтч = "1";
	
	Если НЕ ПроверитьИОбработатьАдрЮр(Св) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("КодНО:"			+ КодНО			);
	Текст.ДобавитьСтроку("НаимОИВ:"			+ НаимОИВ		);
	Текст.ДобавитьСтроку("ДокПредст:"		+ ДокПредст		);
	Текст.ДобавитьСтроку("Свидетельство:"	+ Свидетельство	);
	Текст.ДобавитьСтроку("ОКВЭД:"			+ ОКВЭД			);
	Если ЗначениеЗаполнено(ОКАТО) Тогда
		Текст.ДобавитьСтроку("ОКАТО:" + ОКАТО);
	КонецЕсли;
	Текст.ДобавитьСтроку("КатНП:"			+ КатНП			);	
	Текст.ДобавитьСтроку("КолФОтч:"			+ КолФОтч		);
	Текст.ДобавитьСтроку("###");
	
	Если Св.ТипНП = 1 Тогда//российская организация
		НаимЮЛПол = СокрЛП(Св.НаимЮЛПол);
		ИННЮЛ = СокрЛП(Св.ИННЮЛ);
		КППЮЛ = СокрЛП(Св.КППЮЛ);
		ОГРН = СокрЛП(Св.ОГРН);
		ПризАдр = "1";
		АдрЮр = СокрЛП(Св.АдрЮр);
		
		Если НЕ ЗначениеЗаполнено(НаимЮЛПол) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для организации не задано полное наименование!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИННЮЛ, Ложь) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для организации неверно задан ИНН!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОГРН) И НЕ РегламентированнаяОтчетность.ОГРНСоответствуетТребованиям(ОГРН) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для организации неверно задан ОГРН!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Текст.ДобавитьСтроку("НаимЮЛПол:"	+ ВРЕГ(СтрЗаменить(НаимЮлПол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("ИННЮЛ:"		+ ИННЮЛ				);
		Текст.ДобавитьСтроку("КППЮЛ:"		+ КППЮЛ				);
		Текст.ДобавитьСтроку("ОГРН:"		+ ОГРН				);
		Текст.ДобавитьСтроку("ПризАдр:"		+ ПризАдр			);
		Текст.ДобавитьСтроку("АдрЮр:"		+ ВРЕГ(АдрЮр)		);
		
	ИначеЕсли Св.ТипНП = 2 Тогда//обособленное подразделение
		НаимЮЛПол = СокрЛП(Орг.ГоловнаяОрганизация.НаименованиеПолное);
		НаимОППол = СокрЛП(Св.НаимОППол);
		ИННЮЛ = СокрЛП(Св.ИННЮЛ);
		КППЮЛ = СокрЛП(Орг.ГоловнаяОрганизация.КПП);
		КППОП = СокрЛП(Св.КППОП);
		ОГРН = СокрЛП(Св.ОГРН);
		ПризАдр = 1;
		АдрОП = СокрЛП(Св.АдрЮр);
		СвГоловОрг = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Орг.ГоловнаяОрганизация);
		Если НЕ ПроверитьИОбработатьАдрГолОрг(СвГоловОрг) Тогда
			Возврат Ложь;
		КонецЕсли;
		АдрЮр = СвГоловОрг.АдрЮр;
		
		Если НЕ ЗначениеЗаполнено(НаимЮЛПол) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для головной организации не задано полное наименование!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НаимОППол) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для обособленного подразделения не задано полное наименование!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ИННЮЛ) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для организации неверно задан ИНН!'");

			Сообщение.Сообщить();

			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОГРН) И НЕ РегламентированнаяОтчетность.ОГРНСоответствуетТребованиям(ОГРН) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для организации неверно задан ОГРН!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Текст.ДобавитьСтроку("НаимЮЛПол:"	+ ВРЕГ(СтрЗаменить(НаимЮлПол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("НаимОППол:"	+ ВРЕГ(СтрЗаменить(НаимОППол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("ИННЮЛ:"		+ ИННЮЛ				);
		Текст.ДобавитьСтроку("КППЮЛ:"		+ КППЮЛ				);
		Текст.ДобавитьСтроку("КППОП:"		+ КППОП				);
		Текст.ДобавитьСтроку("ОГРН:"		+ ОГРН				);
		Текст.ДобавитьСтроку("ПризАдр:"		+ ПризАдр			);
		Текст.ДобавитьСтроку("АдрЮр:"		+ ВРЕГ(АдрЮр)		);
		Текст.ДобавитьСтроку("АдрОП:"		+ ВРЕГ(АдрОП)		);
		Текст.ДобавитьСтроку("ТелОП:");
		
	ИначеЕсли Св.ТипНП = 3 Тогда//ИП
		ФИО = ВРЕГ(СокрЛП(РегламентированнаяОтчетность.СтрЗаменитьПробелы(Св.ФИО)));
		ИННФЛ = СокрЛП(Св.ИННФЛ);
		ТелСлуж = СокрЛП(Св.ТелСлуж);
		ТелДом = СокрЛП(Св.ТелДом);
		
		Если НЕ ЗначениеЗаполнено(Св.ФИО) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для индивидуального предпринимателя не задано ФИО!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ИННФЛ) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для индивидуального предпринимателя неверно задан ИНН!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Текст.ДобавитьСтроку("ФИО:"		+ ФИО		);
		Текст.ДобавитьСтроку("ИННФЛ:"	+ ИННФЛ		);
		Текст.ДобавитьСтроку("ТелСлуж:"	+ ТелСлуж	);
		Текст.ДобавитьСтроку("ТелДом:"	+ ТелДом	);
		
	ИначеЕсли Св.ТипНП = 5 Тогда//иностранная организация
		НаимОИОПол = СокрЛП(Св.НаимОИОПол);
		ИННИО = СокрЛП(Св.ИННИО);
		КППИО = СокрЛП(Св.КППИО);
		КППИмИО = "";
		КодИОСтрРег =  СокрЛП(Св.КодИОСтрРег);
		НаимИОПол = СокрЛП(Св.НаимИоПол);
		СтрИО = СокрЛП(Св.СтрИО);
		КодСтрИО = СокрЛП(Св.КодСтрИО);
		АдрИО = ?(Св.АдрИО = ",,,,,,,,,", "", СокрЛП(Св.АдрИО));
		
		Если НЕ ЗначениеЗаполнено(НаимОИОПол) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для отделения иностранной организации не задано полное наименование!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ИННИО) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Для иностранной организации неверно задан ИНН!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		
		Текст.ДобавитьСтроку("НаимОИОПол:"	+ ВРЕГ(СтрЗаменить(НаимОИОПол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("ИННИО:"		+ ИННИО				);
		Текст.ДобавитьСтроку("КППИО:"		+ КППИО				);
		Текст.ДобавитьСтроку("КППИмИО:"		+ КППИмИО			);
		Текст.ДобавитьСтроку("КодИОСтрРег:"	+ ВРЕГ(КодИОСтрРег)	);
		Текст.ДобавитьСтроку("НаимИОПол:"	+ ВРЕГ(СтрЗаменить(НаимИОПол, Символы.ПС, "")));
		Текст.ДобавитьСтроку("СтрИО:"		+ ВРЕГ(СтрИО)		);
		Текст.ДобавитьСтроку("КодСтрИО:"	+ ВРЕГ(КодСтрИО)	);
		Текст.ДобавитьСтроку("АдрИО:"		+ ВРЕГ(АдрИО)		);
		
	КонецЕсли;
	
	Текст.ДобавитьСтроку("###");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьИОбработатьАдрЮр(Сведения)
	
	Результат = Истина;
	
	Сведения.АдрЮр = ?(Лев(СокрЛП(Сведения.АдрЮр), 1) = ",", "643" + СокрЛП(Сведения.АдрЮр), СокрЛП(Сведения.АдрЮр));
	
	Если Сведения.АдрЮр = "643,,,,,,,,," Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить юридический адрес организации!'");

		Сообщение.Сообщить();
		
		Результат = Ложь;
		
	Иначе
		Если СтрЧислоВхождений(Сведения.АдрЮр, ",") <> 9 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='В информационной базе указан некорректный юридический адрес организации (число запятых в адресе должно быть равно девяти)!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		Иначе
			СтрАдрес = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Сведения.АдрЮр);
			Если ПустаяСтрока(СтрАдрес.Индекс) Тогда
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = НСтр("ru='В юридическом адресе организации, хранящемся в информационной базе, не указан индекс!'");

				Сообщение.Сообщить();
				
				Результат = Ложь;
				
			КонецЕсли;
			Если ПустаяСтрока(СтрАдрес.Регион) Тогда
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = НСтр("ru='В юридическом адресе организации, хранящемся в информационной базе, не указан регион!'");

				Сообщение.Сообщить();
				
				Результат = Ложь;
				
			Иначе
				КодРегиона = РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СтрАдрес.Регион);
				Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
												
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось определить код региона по его названию, выделенному из юридического адреса организации.%1Проверьте правильность указания названия региона в юридическом адресе!'"), Символы.ПС);

					Сообщение.Сообщить();
		            							
					Результат = Ложь;
					
				Иначе
					СтрАдрес.Вставить("Регион", КодРегиона);
					Сведения.Вставить("АдрЮр", РегламентированнаяОтчетность.СобратьАдрес(СтрАдрес));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьИОбработатьАдрГолОрг(Сведения)
	
	Результат = Истина;
	
	Сведения.АдрЮр = ?(Лев(СокрЛП(Сведения.АдрЮр), 1) = ",", "643" + СокрЛП(Сведения.АдрЮр), СокрЛП(Сведения.АдрЮр));
	
	Если Сведения.АдрЮр = "643,,,,,,,,," Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить юридический адрес головной организации!'");

		Сообщение.Сообщить();
	
		Результат = Ложь;
		
	Иначе
		Если СтрЧислоВхождений(Сведения.АдрЮр, ",") <> 9 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='В информационной базе указан некорректный юридический адрес головной организации (число запятых в адресе должно быть равно девяти)!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		Иначе
			СтрАдрес = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Сведения.АдрЮр);
			Если ПустаяСтрока(СтрАдрес.Индекс) Тогда
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = НСтр("ru='В юридическом адресе головной организации, хранящемся в информационной базе, не указан индекс!'");

				Сообщение.Сообщить();
				
				Результат = Ложь;
				
			КонецЕсли;
			Если ПустаяСтрока(СтрАдрес.Регион) Тогда
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = НСтр("ru='В юридическом адресе головной организации, хранящемся в информационной базе, не указан регион!'");

				Сообщение.Сообщить();
				
				Результат = Ложь;
				
			Иначе
				КодРегиона = РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СтрАдрес.Регион);
				Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
												
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось определить код региона по его названию, выделенному из юридического адреса головной организации.%1Проверьте правильность указания названия региона в юридическом адресе головной организации!'"), Символы.ПС);

					Сообщение.Сообщить();
							
					Результат = Ложь;
					
				Иначе
					СтрАдрес.Вставить("Регион", КодРегиона);
					Сведения.Вставить("АдрЮр", РегламентированнаяОтчетность.СобратьАдрес(СтрАдрес));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВывестиСведенияОРуководствеОрганизации201(Текст, Орг)
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Орг) Тогда // для ИП сведения о руководстве не выводятся
		Возврат Истина;
	КонецЕсли;
	
	Результат = Истина;
	
	Св = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Орг, , "ИННРук, ФИОРук, КодУдЛичнРук, СерияУдЛичнРук, НомерУдЛичнРук, ДатаУдЛичнРук, АдрМЖРукРФ, ТелРук, " +
											  							   "ИННБух, ФИОБух, КодУдЛичнБух, СерияУдЛичнБух, НомерУдЛичнБух, ДатаУдЛичнБух, АдрМЖБухРФ, ТелБух");//берем на дату выгрузки.
	
	Св.ИННРук = СокрЛП(Св.ИННРук);
	Св.ФИОРук = СокрЛП(Св.ФИОРук);
	Св.КодУдЛичнРук = СокрЛП(Св.КодУдЛичнРук);
	Св.СерияУдЛичнРук = СокрЛП(Св.СерияУдЛичнРук);
	Св.НомерУдЛичнРук = СокрЛП(Св.НомерУдЛичнРук);
	Св.Вставить("СерияИНомерУдЛичнРук", СокрЛП(Св.СерияУдЛичнРук + " " + Св.НомерУдЛичнРук));
	Св.ДатаУдЛичнРук = Св.ДатаУдЛичнРук;
	Св.АдрМЖРукРФ = ?(Лев(СокрЛП(Св.АдрМЖРукРФ), 1) = ",", "643" + СокрЛП(Св.АдрМЖРукРФ), СокрЛП(Св.АдрМЖРукРФ));
	Св.ИННБух = СокрЛП(Св.ИННБух);
	Св.ФИОБух = СокрЛП(Св.ФИОБух);
	Св.КодУдЛичнБух = СокрЛП(Св.КодУдЛичнБух);
	Св.СерияУдЛичнБух = СокрЛП(Св.СерияУдЛичнБух);
	Св.НомерУдЛичнБух = СокрЛП(Св.НомерУдЛичнБух);
	Св.Вставить("СерияИНомерУдЛичнБух", СокрЛП(Св.СерияУдЛичнБух + " " + Св.НомерУдЛичнБух));
	Св.ДатаУдЛичнБух = Св.ДатаУдЛичнБух;
	Св.АдрМЖБухРФ = ?(Лев(СокрЛП(Св.АдрМЖБухРФ), 1) = ",", "643" + СокрЛП(Св.АдрМЖБухРФ), СокрЛП(Св.АдрМЖБухРФ));
	
	Если ПустаяСтрока(Св.ФИОРук) Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить ФИО руководителя организации!'");

		Сообщение.Сообщить();
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Св.ИННРук)
	И НЕ ЗначениеЗаполнено(Св.КодУдЛичнРук)
	И НЕ ЗначениеЗаполнено(Св.СерияИНомерУдЛичнРук)
	И НЕ ЗначениеЗаполнено(Св.ДатаУдЛичнРук)
	И (Св.АдрМЖРукРф = "643,,,,,,,,,") Тогда
	
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить ИНН руководителя организации!'");
	
		Сообщение.Сообщить();
		
		Результат = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Св.ИННРук) Тогда
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(Св.ИННРук, Истина) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='ИНН руководителя организации не соответствует требованиям!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Св.КодУдЛичнРук) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не удалось определить код вида документа, удостоверяющего личность руководителя организации!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Св.СерияИНомерУдЛичнРук) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не удалось определить серию и номер документа, удостоверяющего личность руководителя организации!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Св.ДатаУдЛичнРук) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не удалось определить дату выдачи удостоверения личности руководителя организации!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		Если Св.АдрМЖРукРФ = "643,,,,,,,,," Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не удалось определить адрес места жительства руководителя организации!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		Иначе	
			Если СтрЧислоВхождений(Св.АдрМЖРукРФ, ",") <> 9 Тогда
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = НСтр("ru='В информационной базе указан некорректный адрес места жительства руководителя организации (число запятых в адресе должно быть равно девяти)!'");

				Сообщение.Сообщить();
				
				Результат = Ложь;
				
			Иначе
				СтрАдресРук = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Св.АдрМЖРукРф);
				Если ПустаяСтрока(СтрАдресРук.Индекс) Тогда
					
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = НСтр("ru='Не указан индекс в адресе места жительства руководителя организации!'");

					Сообщение.Сообщить();
					
					Результат = Ложь;
					
				КонецЕсли;
				Если ПустаяСтрока(СтрАдресРук.Регион) Тогда
					
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = НСтр("ru='Не указан регион в адресе места жительства руководителя организации!'");

					Сообщение.Сообщить();
					
					Результат = Ложь;
					
				Иначе
					КодРегионаРук = РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СтрАдресРук.Регион);
					Если Не ЗначениеЗаполнено(КодРегионаРук) Тогда
								
						Сообщение = Новый СообщениеПользователю;

						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось определить код региона по его названию, выделенному из адреса места жительства руководителя организации.%1Проверьте правильность указания названия региона в адресе места жительства руководителя!'"), Символы.ПС);

						Сообщение.Сообщить();
								
						Результат = Ложь;
						
					Иначе
						СтрАдресРук.Вставить("Регион", КодРегионаРук);
						АдресРук = РегламентированнаяОтчетность.СобратьАдрес(СтрАдресРук);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Св.ФИОБух) Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить ФИО главного бухгалтера организации!'");

		Сообщение.Сообщить();
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Св.ИННБух)
	И НЕ ЗначениеЗаполнено(Св.КодУдЛичнБух)
	И НЕ ЗначениеЗаполнено(Св.СерияИНомерУдЛичнБух)
	И НЕ ЗначениеЗаполнено(Св.ДатаУдЛичнБух)
	И Св.АдрМЖБухРф = "643,,,,,,,,," Тогда
	
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не удалось определить ИНН главного бухгалтера организации!'");

		Сообщение.Сообщить();
		
		Результат = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Св.ИННБух) Тогда
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(Св.ИННБух, Истина) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='ИНН главного бухгалтера организации не соответствует требованиям!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(Св.КодУдЛичнБух) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не удалось определить код вида документа, удостоверяющего личность главного бухгалтера организации!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Св.СерияИНомерУдЛичнБух) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не удалось определить серию и номер документа, удостоверяющего личность главного бухгалтера организации!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Св.ДатаУдЛичнБух) Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не удалось определить дату выдачи удостоверения личности главного бухгалтера организации!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		КонецЕсли;
		Если Св.АдрМЖБухРФ = "643,,,,,,,,," Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не удалось определить адрес места жительства главного бухгалтера организации!'");

			Сообщение.Сообщить();
			
			Результат = Ложь;
			
		Иначе	
			Если СтрЧислоВхождений(Св.АдрМЖБухРФ, ",") <> 9 Тогда
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = НСтр("ru='В информационной базе указан некорректный адрес места жительства главного бухгалтера организации (число запятых в адресе должно быть равно девяти)!'");

				Сообщение.Сообщить();
				
				Результат = Ложь;
				
			Иначе
				СтрАдресБух = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Св.АдрМЖБухРф);
				Если ПустаяСтрока(СтрАдресБух.Индекс) Тогда
					
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = НСтр("ru='Не указан индекс в адресе места жительства главного бухгалтера организации!'");

					Сообщение.Сообщить();

					Результат = Ложь;
					
				КонецЕсли;
				Если ПустаяСтрока(СтрАдресБух.Регион) Тогда
					
					Сообщение = Новый СообщениеПользователю;

					Сообщение.Текст = НСтр("ru='Не указан регион в адресе места жительства главного бухгалтера организации!'");

					Сообщение.Сообщить();

					Результат = Ложь;
					
				Иначе
					КодРегионаБух = РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СтрАдресБух.Регион);
					Если Не ЗначениеЗаполнено(КодРегионаБух) Тогда
														
						Сообщение = Новый СообщениеПользователю;

						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось определить код региона по его названию, выделенному из адреса места жительства главного бухгалтера организации.%1Проверьте правильность указания названия региона в адресе места жительства главного бухгалтера!'"), Символы.ПС);

						Сообщение.Сообщить();
								
						Результат = Ложь;
						
					Иначе
						СтрАдресБух.Вставить("Регион", КодРегионаБух);
						АдресБух = РегламентированнаяОтчетность.СобратьАдрес(СтрАдресБух);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Св.ФИОРук));
	Текст.ДобавитьСтроку("ИННРук:" + Св.ИННРук);			
	Текст.ДобавитьСтроку("ТелРук:" + ВРЕГ(СокрЛП(Лев(Св.ТелРук, 20))));
	Если ПустаяСтрока(Св.ИННРук) Тогда
		Текст.ДобавитьСтроку("УдЛичнРук:" + ВРЕГ(СокрЛП(Лев(Св.КодУдЛичнРук, 2))) + "," + ВРЕГ(СокрЛП(Лев(Св.СерияИНомерУдЛичнРук, 25))));
		Текст.ДобавитьСтроку("ДатаУдЛичнРук:" + Формат(Св.ДатаУдЛичнРук, "ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("АдрМЖРукРФ:" + ВРЕГ(АдресРук));
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(Св.ФИОБух));
	Текст.ДобавитьСтроку("ИННБух:" + Св.ИННБух);
	Текст.ДобавитьСтроку("ТелБух:" + ВРЕГ(СокрЛП(Лев(Св.ТелБух, 20))));
	Если НЕ ПустаяСтрока(Св.ФИОБух) И ПустаяСтрока(Св.ИННБух) Тогда
		Текст.ДобавитьСтроку("УдЛичнБух:" + ВРЕГ(СокрЛП(Лев(Св.КодУдЛичнБух, 2))) + "," + ВРЕГ(СокрЛП(Лев(Св.СерияИНомерУдЛичнБух, 25))));
		Текст.ДобавитьСтроку("ДатаУдЛичнБух:" + Формат(Св.ДатаУдЛичнБух, "ДФ=dd.MM.yyyy"));
		Текст.ДобавитьСтроку("АдрМЖБухРФ:" + ВРЕГ(АдресБух));
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ФИОУпПред:,,");
	Текст.ДобавитьСтроку("###");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Проверить(ДокументыОснования, СообщенияОбОшибках = Неопределено) Экспорт
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РежимВызоваЭкспортируемогоМетодаФормы = Истина;
	ПервыйДок = ДокументыОснования.Получить(0).Значение;
	
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("КодНалоговогоОргана", "");
	РеквизитыДокумента.Вставить("ПериодПо",    "");
	РеквизитыДокумента.Вставить("Организация", "");
	
	ПолучитьРеквизитыДокумента(ПервыйДок, РеквизитыДокумента);
	
	Объект.КодНалоговогоОргана = РеквизитыДокумента.КодНалоговогоОргана;
	Объект.ПериодПо	   = КонецДня(РеквизитыДокумента.ПериодПо);
	Объект.Организация = РеквизитыДокумента.Организация;
	
	Для Каждого Стр Из ДокументыОснования Цикл
		НовСтр = Основания.Добавить();
		НовСтр.Ссылка = Стр.Значение;
		НовСтр.Пометка = Истина;
	КонецЦикла;
	
	ПроверитьОтчеты(СообщенияОбОшибках);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтчеты(СообщенияОбОшибках = Неопределено)
	
	ОшибкаВыгрузки = Ложь;
	ПодавитьВыводСтаройФормыНавигацииПоОшибкам = Ложь;
	
	ПроверитьОтчетыСервер(ОшибкаВыгрузки);
	
	Если ОшибкаВыгрузки Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФСС	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСС));
	ОтборПФР	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияПФР));
	Отбор700ПФР  = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия700ПФР));
	Отбор500	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия500));
	Отбор400	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия400));
	Отбор300	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия300));
	Отбор201	 = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201));
	Отбор201алко = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия201алко));
	Отбор302алко = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия302алко));
	Отбор401алко = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия401алко));
	ОтборФСГС    = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСГС));
	ОтборРПН     = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияРПН));
	ОтборБанкРоссии = ВерсииИОтчеты.НайтиСтроки(Новый Структура("Версия", ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияБанкРоссии));
	
	Текст    = Новый ТекстовыйДокумент;//текст, объединяющий все выгруженные документы в формате 3.00
	ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
	СчетчикВыгруженныхДокументов = 0;
	
	НомерОтчета = 0;
	
	ВыгрузкаПрервана = Ложь;
	
	//выгрузка в формате ФСС
	Если ОтборФСС.Количество() <> 0 Тогда
		
		Для Каждого Стр Из ОтборФСС Цикл
			
			НомерОтчета = НомерОтчета + 1;
			
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
				
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;	
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ФСС
	
	//выгрузка в формате ПФР
	Если ОтборПФР.Количество() <> 0 Тогда
		
		Для Каждого Стр Из ОтборПФР Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ПФР
	
	//выгрузка в формате 7.00
	Если Отбор700ПФР.Количество() <> 0 Тогда
		
		Для Каждого Стр Из Отбор700ПФР Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;	
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 7.00
	
	//выгрузка в формате 5.00
	Если Отбор500.Количество() <> 0 Тогда
		
		Для Каждого Стр Из Отбор500 Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;
			
			РезультатПроверки = ТекФорма.ПроверитьПоказатели();
			
			Если ТипЗнч(РезультатПроверки) = Тип("Структура") Тогда
				Если РезультатПроверки.КоличествоОшибок <> 0 Тогда
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("СохраненныйОтчет", Стр.Док);
					ПараметрыФормы.Вставить("ПредставлениеОшибок", РезультатПроверки.ПредставлениеОшибок);
					ПараметрыФормы.Вставить("НазваниеДекларации", РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));
					
					ФормаСообщенийОбОшибках = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаСообщенийОбОшибках", ПараметрыФормы);
					Если ФормаСообщенийОбОшибках.Открыта() Тогда
						ФормаСообщенийОбОшибках.Закрыть();
						ФормаСообщенийОбОшибках = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаСообщенийОбОшибках", ПараметрыФормы);
					КонецЕсли;
					ФормаСообщенийОбОшибках.Открыть();
					ОшибкаВыгрузки = Истина;
					ПодавитьВыводСтаройФормыНавигацииПоОшибкам = Истина;
				КонецЕсли;
				
			Иначе
				Если НЕ РезультатПроверки Тогда
					ОшибкаВыгрузки = Истина;
					
					Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
						НовСтр = ТаблицаСообщений.Добавить();
						НовСтр.ОтчетДок = Стр.Док;
						НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
						НовСтр.Раздел = СтрСообщения.Раздел;
						НовСтр.Страница = СтрСообщения.Страница;
						НовСтр.Строка = СтрСообщения.Строка;
						НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
						НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
						НовСтр.Графа = СтрСообщения.Графа;
						НовСтр.Описание = СтрСообщения.Описание;
					КонецЦикла;
					
					ТекФорма.ТаблицаСообщений.Очистить();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 5.00
	
	//выгрузка в формате 4.00
	Если Отбор400.Количество() <> 0 Тогда
		
		Для Каждого Стр Из Отбор400 Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
					
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 4.00
	
	//**********************************************************
	//выгрузка в формате 3.00
	Если Отбор300.Количество() <> 0 Тогда
		
		КПП = РегламентированнаяОтчетностьВызовСервера.КПППоКомбинацииОрганизацииИКодаИФНС(Объект.Организация, Объект.КодНалоговогоОргана);
		Если КПП = Неопределено Тогда
			ОшибкаВыгрузки = Истина;
			Возврат;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ВывестиСведенияСлужебнойЧастиИОбОтправителе30(Текст, Объект.Организация, КПП, СокрЛП(Объект.КодНалоговогоОргана)) Тогда 			
			ОшибкаВыгрузки = Истина;			
			Возврат;
		КонецЕсли;
		
		Для Каждого Стр Из Отбор300 Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;	
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате 3.00
	//**********************************************************
	
	//*****************************************
	СчетчикВыгруженныхДокументов201 = 0;
	//выгрузка в формате 2.01
	Если (Отбор201.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Текст = Новый ТекстовыйДокумент;
		ТекТекст = Новый ТекстовыйДокумент;//текст выгрузки текущего документа
		
		Если НЕ ВывестиОписаниеФормыОтчетности(Текст, Объект.Организация, Объект.КодНалоговогоОргана) Тогда
			ОшибкаВыгрузки = Истина;
			Возврат;
		КонецЕсли;
		
		Для Каждого Стр Из Отбор201 Цикл
			
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;	
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	//*****************************************
	
	//*****************************************
	//выгрузка в формате 2.01 алко
	Если (Отбор201алко.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Для Каждого Стр Из Отбор201Алко Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;	
			
			ТекФорма.Инициализация(Истина);
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//*****************************************
	
	//*****************************************
	//выгрузка в формате 3.02 алко
	Если (Отбор302алко.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Для Каждого Стр Из Отбор302алко Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;	
			
			ТекФорма.Инициализация(Истина);
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//*****************************************
	
	//*****************************************
	//выгрузка в формате 4.01 алко
	Если Отбор401алко.Количество() <> 0 Тогда
		
		Для Каждого Стр Из Отбор401алко Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;	
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//*****************************************
	
	//*****************************************
	//выгрузка в формате ФСГС
	Если (ОтборФСГС.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Для Каждого Стр Из ОтборФСГС Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ИмяВыбраннойФормы = ?(СтрНайти(ИмяТекФормы, "_") = 0, ИмяТекФормы, Лев(ИмяТекФормы, СтрНайти(ИмяТекФормы, "_") - 1));
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяВыбраннойФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;
			
			ТекФорма.ТаблицаСообщений.Очистить();
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате ФСГС
	//*****************************************
	
	//*****************************************
	//выгрузка в формате РПН
	Если (ОтборРПН.Количество() <> 0) И (Не ВыгрузкаПрервана) Тогда
		
		Для Каждого Стр Из ОтборРПН Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("мВыбраннаяФорма",          Стр.ВыбраннаяФорма);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ИмяВыбраннойФормы = ?(СтрНайти(ИмяТекФормы, "_") = 0, ИмяТекФормы, Лев(ИмяТекФормы, СтрНайти(ИмяТекФормы, "_") - 1));
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяВыбраннойФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате РПН
	//*****************************************
	
	//*****************************************
	//выгрузка в формате БанкРоссии
	Если ОтборБанкРоссии.Количество() <> 0 Тогда
		
		Для Каждого Стр Из ОтборБанкРоссии Цикл
			НомерОтчета = НомерОтчета + 1;
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обработка отчета %1 (%2 из %3) ...'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр), НомерОтчета, ВерсииИОтчеты.Количество()), , , БиблиотекаКартинок.СохранитьСписок);
			
			ТекТекст.Очистить();
			ИмяТекФормы = Стр.ВыбраннаяФорма;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Стр.ДатаНачала);
			ПараметрыФормы.Вставить("мСохраненныйДок",          Стр.Док);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  Стр.ДатаОкончания);
			ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
			
			Если ЭтаФорма.ВладелецФормы = Неопределено
				ИЛИ НЕ ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("УправляемаяФорма") Тогда
				ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(Стр.ИсточникОтчета, ИмяТекФормы);
				ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
			Иначе
				ТекФорма = ЭтаФорма.ВладелецФормы;
			КонецЕсли;	
			
			Если НЕ ТекФорма.ПроверитьПоказатели() Тогда
				
				ОшибкаВыгрузки = Истина;
				
				Для Каждого СтрСообщения Из ТекФорма.ТаблицаСообщений Цикл
					
					НовСтр = ТаблицаСообщений.Добавить();
					НовСтр.ОтчетДок = Стр.Док;
					НовСтр.Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр);
					НовСтр.Раздел = СтрСообщения.Раздел;
					НовСтр.Страница = СтрСообщения.Страница;
					НовСтр.Строка = СтрСообщения.Строка;
					НовСтр.СтрокаПП = СтрСообщения.СтрокаПП;
					НовСтр.ИмяЯчейки = СтрСообщения.ИмяЯчейки;
					НовСтр.Графа = СтрСообщения.Графа;
					НовСтр.Описание = СтрСообщения.Описание;
					
				КонецЦикла;
				
				ТекФорма.ТаблицаСообщений.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	//конец выгрузки в формате БанкРоссии
	//*****************************************
	
	Если СообщенияОбОшибках = Неопределено Тогда
		Если ОшибкаВыгрузки = Истина ИЛИ ТаблицаСообщений.Количество() <> 0 Тогда
			ТекстСообщения = "В ходе проверки были найдены ошибки, препятствующие выгрузке.";
			Если ТаблицаСообщений.Количество() <> 0 Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + "Для исправления ошибок используйте специальное окно навигации по ошибкам.";
			КонецЕсли;
			
			Если НЕ ПодавитьВыводСтаройФормыНавигацииПоОшибкам Тогда
				ОтобразитьФормуНавигацииПоОшибкам();
				#Если НЕ ВебКлиент Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщения;
					Сообщение.Сообщить();
				#КонецЕсли
			КонецЕсли;
			
		Иначе
			ПоказатьПредупреждение(,НСтр("ru='Ошибок не обнаружено!'"));
		КонецЕсли;
		
	Иначе
		ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОтчетыСервер(ОшибкаВыгрузки)
		
	ОснованияПриПолученииДанных();
		
	КоличествоДокументовДляВыгрузки = 0;
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка Тогда
			КоличествоДокументовДляВыгрузки = КоличествоДокументовДляВыгрузки + 1;
		КонецЕсли;
	КонецЦикла;
		
	Если КоличествоДокументовДляВыгрузки = 0 Тогда
					
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = НСтр("ru='Не выбраны документы.'");
				
		Сообщение.Сообщить();
		
		ОшибкаВыгрузки = Истина;
		
		Возврат;
		
	КонецЕсли;

	Если РежимВызоваЭкспортируемогоМетодаФормы <> Истина Тогда
		Для Каждого Стр Из Основания Цикл
			Если Стр.Организация <> Основания.Получить(0).Организация Тогда
												
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='У выбранных отчетов различаются реквизиты ""Организация"". Пакетная выгрузка невозможна.'");
				
				Сообщение.Сообщить();
				
				ОшибкаВыгрузки = Истина;
				
				Возврат;
				
			КонецЕсли;
			Если КонецДня(Стр.ДатаОкончания) <> КонецДня(Основания.Получить(0).ДатаОкончания) Тогда
												
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='У выбранных отчетов различаются даты окончания периодов составления. Пакетная выгрузка невозможна.'");
				
				Сообщение.Сообщить();
				
				ОшибкаВыгрузки = Истина;
				
				Возврат;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//проверка на то, что у всех документов-оснований один код ИМНС
	Если РежимВызоваЭкспортируемогоМетодаФормы <> Истина Тогда
		НалоговыеОрганы.Очистить();
		Для Каждого Стр Из Основания Цикл
			Если Стр.Пометка И СокрЛП(Стр.КодНалоговогоОргана) <> "" Тогда //исключаем из проверки отчеты в ПФР с пустым кодом ИМНС	
				НовСтр = НалоговыеОрганы.Добавить();
				НовСтр.КодНалоговогоОргана = Стр.КодНалоговогоОргана;
			КонецЕсли;
		КонецЦикла;
		
		Если НалоговыеОрганы.Количество() > 0 Тогда
			
			НайденныеСтроки = НалоговыеОрганы.НайтиСтроки(Новый Структура("КодНалоговогоОргана", НалоговыеОрганы[0].КодНалоговогоОргана));
			
			Если НЕ НалоговыеОрганы.Количество() = НайденныеСтроки.Количество() Тогда
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='У выбранных отчетов различаются коды ИФНС, в которую они должны представляться. Процесс прерван.'");
				
				Сообщение.Сообщить();
				
				ОшибкаВыгрузки = Истина;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	//конец проверки
	
	ОтчетыВыгружаемыеТолькоИзФормы = Новый Массив;
	
	//заполняем таблицу "документ для выгрузки <-> версия формата выгрузки"
	ВерсииИОтчеты.Очистить();
	
	ЕстьНеопределенныеФорматы = Ложь;
	Для Каждого Стр Из Основания Цикл
		Если Стр.Пометка Тогда
			НовСтр = ВерсииИОтчеты.Добавить();
			НовСтр.Док           = Стр.Ссылка;
			НовСтр.Версия        = РегламентированнаяОтчетностьВызовСервера.ВерсияФорматаВыгрузки(Стр.Ссылка, Стр.ИсточникОтчета, Стр.ДатаОкончания);
			НовСтр.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
			НовСтр.Точность      = Стр.ТочностьЕдиницыИзмерения;
			НовСтр.ИсточникОтчета = Стр.ИсточникОтчета;
			НовСтр.Отчет         = Стр.Отчет;
			НовСтр.ДатаНачала    = Стр.ДатаНачала;
			НовСтр.ДатаОкончания = Стр.ДатаОкончания;
			Если ТипЗнч(Стр.Вид) = Тип("Строка") Тогда
				ВидДлина = СтрДлина(Стр.Вид);
				СтрокаПроверки = "1234567890";
				ВидРезультат = "";
				Для НомПоз = 1 По ВидДлина Цикл
					ТекСимвол = Сред(Стр.Вид, НомПоз, 1);
					ВидРезультат = ВидРезультат + ?(СтрНайти(СтрокаПроверки, ТекСимвол) = 0, "", ТекСимвол);
				КонецЦикла;
				ВидРезультат = ?(ВидРезультат = "", 0, Число(ВидРезультат));
				НовСтр.Вид = ВидРезультат;
			Иначе
				НовСтр.Вид = Стр.Вид;
			КонецЕсли;
			НовСтр.КодНалоговогоОргана = Стр.КодНалоговогоОргана;
			НовСтр.ВыбраннаяФорма = Стр.ВыбраннаяФорма;
			Если НЕ ЗначениеЗаполнено(НовСтр.Версия) Тогда
				ЕстьНеопределенныеФорматы = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//заполнили таблицу
	
	Если ОтчетыВыгружаемыеТолькоИзФормы.Количество() > 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Выгрузка следующих отчетов возможна только из формы отчета:'");

		Сообщение.Сообщить();
		
		Для Каждого Док Из ОтчетыВыгружаемыеТолькоИзФормы Цикл
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' - %1'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Док));

			Сообщение.Сообщить();
			
		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//Если среди выбранных присутствуют отчеты с неопределенным форматом выгрузки, то 
	//выведем список этих отчетов и прекратим формирование электронного представления
	Если ЕстьНеопределенныеФорматы Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Для следующих отчетов выгрузка и проверка не предусмотрены:'");

		Сообщение.Сообщить();
		
		Для Каждого Стр Из ВерсииИОтчеты Цикл
			Если НЕ ЗначениеЗаполнено(Стр.Версия) Тогда
				
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' - %1'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Стр));

				Сообщение.Сообщить();
				
			КонецЕсли;
		КонецЦикла;
		ОшибкаВыгрузки = Истина;
		Возврат;
	КонецЕсли;
	
	//Определим список отчетов, которые должны выгружаться в формате <> Перечисления.ПорядкиОкругленияОтчетности.Окр1
	ОтчетыСохраненныеСНевернымОкруглением = Новый СписокЗначений;
	ОтчетыБаланса = Новый СписокЗначений;
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБаланс");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма2");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма3");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма4");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма5");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетФорма6");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБухОтчетность");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБухОтчетностьМП");
	ОтчетыБаланса.Добавить("РегламентированныйОтчетБухОтчетностьСОНКО");
	ОтчетыБаланса.Добавить("БухгалтерскаяОтчетностьВБанк");
	
	ОтчетыАлко = Новый СписокЗначений;
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение1");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение2");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение3");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение4");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение5");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение6");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение7");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение8");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение9");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение10");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение11");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение12");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение13");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение14");
	ОтчетыАлко.Добавить("РегламентированныйОтчетАлкоПриложение15");
				
	ОтчетыФСС = Новый СписокЗначений;
	ОтчетыФСС.Добавить("РегламентированныйОтчет4ФСС");
	ОтчетыФСС.Добавить("РегламентированныйОтчет4аФСС");
	
	ОтчетыЗаявления = Новый СписокЗначений;
	ОтчетыЗаявления.Добавить("РегламентированныйОтчетЗаявлениеОВвозеТоваров");
	
	ОтчетыРСВ2 = Новый СписокЗначений;
	ОтчетыРСВ2.Добавить("РегламентированныйОтчетРСВ2");
	
	ОтчетыРВ3 = Новый СписокЗначений;
	ОтчетыРВ3.Добавить("РегламентированныйОтчетРВ3");
	
	ОтчетыФСГС = Новый СписокЗначений;
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаБухОтчетность");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11К");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1П");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Т");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1И");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Информ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма5З");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1СХ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2инв");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2к");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП3");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП4НЗ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП5М");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМПром");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМТорг");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПм");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПОбразование");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПКультура");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПНаука");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПСоц");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПЗдрав");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаС1");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаС2");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма22ЖКХсв");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Автотранс");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Алкоголь");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1АлкогольОпт");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ЦеныПриобр");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9КС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПсвед");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Услуги");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПроизв");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАуслуги");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма65Автотранс");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Закупки");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3СБвывоз");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11Сделка");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАППМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3ТОРГПМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2НаукаКр");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТРавто");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Учет");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСуслуги");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ВЭС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11ТЭР");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4ТЭР");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МБ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма12Ф");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТГМС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТОРГ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1НатураБМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма7Травматизм");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ТПВоздух");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма26ЖКХ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма12Строительство");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4Запасы");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Технология");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИЖС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Администрация");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАФЛ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПмсх");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПриобр");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МО");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4Инновация");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма24Энергетика");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма14МЕТлом");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2МС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ГСГЗ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Туст");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Приватизация");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2Приватизация");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Тчзп");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма85К");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТЕП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ФПинд");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Кадры");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1КСРКраткая");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1КСР");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ДМДавальческоеСырье");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4ДМ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РабочаяСила");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФПФ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФСС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФОМС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ФП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1СХцены");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2СБСеверСр");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2МПинн");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Контракт");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11НА");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РЖ");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ГС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТОРГм");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаИЖС");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСТрусл");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма57Т");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Предприниматель");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПСП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПмес");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВМП");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВбюджет");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПУслуги");
	ОтчетыФСГС.Добавить("РегламентированныйОтчетСтатистикаПрочиеФормы");
	
	ОтчетыРПН = Новый СписокЗначений;
	ОтчетыРПН.Добавить("РегламентированныйОтчетРасчетПлатыОкрСредаСвод");
	ОтчетыРПН.Добавить("РегламентированныйОтчетОтходыСубъектовМСП");
	ОтчетыРПН.Добавить("РегламентированныйОтчетФорма2ТПОтходы");
	ОтчетыРПН.Добавить("РегламентированныйОтчетРасчетЭкологическийСбор");
	
	ОтчетыБанкРоссии = Новый СписокЗначений;
	ОтчетыБанкРоссии.Добавить("РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО");
	
	Для Каждого Стр Из ВерсииИОтчеты Цикл
		ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
		Точность = Стр.Точность;
		ИсточникОтчета = Стр.ИсточникОтчета;
		Если ОтчетыАлко.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыФСГС.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыРПН.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОтчетыЗаявления.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если ОтчетыБаланса.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000
			   И ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОтчетыФСС.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
			 ИЛИ Точность <> 2 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		ИначеЕсли ОтчетыРСВ2.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
			 ИЛИ (Стр.ВыбраннаяФорма = "ФормаОтчета2010Кв1" И Точность <> 0)
			 ИЛИ (Стр.ВыбраннаяФорма <> "ФормаОтчета2010Кв1" И Точность <> 2)Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		ИначеЕсли ОтчетыРВ3.НайтиПоЗначению(ИсточникОтчета) <> Неопределено Тогда
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
			 ИЛИ ((Стр.ВыбраннаяФорма = "ФормаОтчета2010Кв1" ИЛИ Стр.ВыбраннаяФорма = "ФормаОтчета2011Кв4") И Точность <> 0)
			 ИЛИ (НЕ (Стр.ВыбраннаяФорма = "ФормаОтчета2010Кв1" ИЛИ Стр.ВыбраннаяФорма = "ФормаОтчета2011Кв4") И Точность <> 2)Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
			КонецЕсли;
			Продолжить;
		Иначе
			Если ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
				ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Точность <> 0 Тогда
			ОтчетыСохраненныеСНевернымОкруглением.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	//если отчетов, которые сохранены с неверным округлением, больше 0, тогда сообщим пользователю,
	//взведем флаг ошибки и прервемся
	Если ОтчетыСохраненныеСНевернымОкруглением.Количество() <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Следующие отчеты сохранены с единицей измерения и/или точностью, не соответствующими требованиям формата выгрузки:'");
		
		Сообщение.Сообщить();
		
		Для Каждого Сч Из ОтчетыСохраненныеСНевернымОкруглением Цикл
			ТекстСообщения = " - " + РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Сч.Значение);
			ТекстСообщения = ТекстСообщения + " должен быть сохранен с единицей измерения ";
			Если ОтчетыБаланса.НайтиПоЗначению(Сч.Значение.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в тысячах рублей"" или ""в миллионах рублей"" с точностью ""0""";
			ИначеЕсли ОтчетыФСС.НайтиПоЗначению(Сч.Значение.ИсточникОтчета) <> Неопределено Тогда
				ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""2""";
			ИначеЕсли ОтчетыРСВ2.НайтиПоЗначению(Сч.Значение.ИсточникОтчета) <> Неопределено Тогда
				Если Сч.Значение.ВыбраннаяФорма = "ФормаОтчета2010Кв1" Тогда
					ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""0""";
				Иначе
					ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""2""";
				КонецЕсли;
			ИначеЕсли ОтчетыРВ3.НайтиПоЗначению(Сч.Значение.ИсточникОтчета) <> Неопределено Тогда
				Если Сч.Значение.ВыбраннаяФорма = "ФормаОтчета2010Кв1" ИЛИ Сч.Значение.ВыбраннаяФорма = "ФормаОтчета2011Кв4" Тогда
					ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""0""";
				Иначе
					ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""2""";
				КонецЕсли;
			Иначе
				ТекстСообщения = ТекстСообщения + """в рублях"" с точностью ""0""";
			КонецЕсли;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстСообщения);
			
			Сообщение.Сообщить();

		КонецЦикла;
		
		ОшибкаВыгрузки = Истина;
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Сохраните отчеты с нужной единицей измерения и запустите проверку повторно.'");

		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСообщений.Очистить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСообщенияОбОшибках(СообщенияОбОшибках)
	
	Для Каждого Элемент Из ТаблицаСообщений Цикл
		
		СтрокаТаблицыСообщений = Новый Структура;
		
		СтрокаТаблицыСообщений.Вставить("ОтчетДок",  Элемент.ОтчетДок);
		СтрокаТаблицыСообщений.Вставить("Отчет",     Элемент.Отчет);
		СтрокаТаблицыСообщений.Вставить("Раздел",    Элемент.Раздел);
		СтрокаТаблицыСообщений.Вставить("Страница",  Элемент.Страница);
		СтрокаТаблицыСообщений.Вставить("Строка",    Элемент.Строка);
		СтрокаТаблицыСообщений.Вставить("СтрокаПП",  Элемент.СтрокаПП);
		СтрокаТаблицыСообщений.Вставить("ИмяЯчейки", Элемент.ИмяЯчейки);
		СтрокаТаблицыСообщений.Вставить("Графа",     Элемент.Графа);
		СтрокаТаблицыСообщений.Вставить("Описание",  Элемент.Описание);
		
		СообщенияОбОшибках.Добавить(СтрокаТаблицыСообщений);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстВыгрузки(Команда)
	
	Если Элементы.Основания.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не задана текущая строка!'"));
		Возврат;
	КонецЕсли;
	
	НепривязанныеТекстыВыгрузки = Новый Массив;
	Для Инд = 1 По Объект.Выгрузки.Количество() Цикл
		Если Основания.НайтиСтроки(Новый Структура("НомерСтрокиТекстаВыгрузки", Инд)).Количество() = 0 Тогда
			НепривязанныеТекстыВыгрузки.Добавить(Объект.Выгрузки.Получить(Инд - 1));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НепривязанныеТекстыВыгрузки.Количество() = 0 И Элементы.Основания.ТекущиеДанные.НомерСтрокиТекстаВыгрузки = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru='Для выбранного отчета текст выгрузки не сформирован!'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.Основания.ТекущиеДанные.НомерСтрокиТекстаВыгрузки <> 0 Тогда
		
		Если Элементы.Основания.ТекущиеДанные.НомерСтрокиТекстаВыгрузки <= Объект.Выгрузки.Количество() Тогда
		
			Выгрузка = Объект.Выгрузки.Получить(Элементы.Основания.ТекущиеДанные.НомерСтрокиТекстаВыгрузки - 1);
			ПоказатьТекстВыгрузкиДляВыбранногоЭлемента(Выгрузка);
			
		Иначе
			
			ПоказатьПредупреждение(,НСтр("ru='Для выбранного отчета текст выгрузки не сформирован!'"));
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если НепривязанныеТекстыВыгрузки.Количество() = 1 Тогда
			
			Выгрузка = НепривязанныеТекстыВыгрузки[0];
			ПоказатьТекстВыгрузкиДляВыбранногоЭлемента(Выгрузка);
			
		Иначе
			
			СписокНепривязанныхТекстовВыгрузки = Новый СписокЗначений;
			
			Для Каждого Стр Из НепривязанныеТекстыВыгрузки Цикл
				СписокНепривязанныхТекстовВыгрузки.Добавить(Стр, Стр.ИмяФайла + " (" + Стр.Тип + ")");
			КонецЦикла;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьТекстВыгрузкиЗавершение", ЭтотОбъект);
			СписокНепривязанныхТекстовВыгрузки.ПоказатьВыборЭлемента(ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстВыгрузкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Выгрузка = ВыбранныйЭлемент.Значение;
	ПоказатьТекстВыгрузкиДляВыбранногоЭлемента(Выгрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстВыгрузкиДляВыбранногоЭлемента(Выгрузка)
	
	Если Выгрузка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия400
	 ИЛИ Выгрузка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия401алко 
	 ИЛИ Выгрузка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия500
	 ИЛИ Выгрузка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсия700ПФР
	 ИЛИ Выгрузка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияФСС Тогда
		
		ТипФайла = "windows-1251";
		
	ИначеЕсли Выгрузка.Тип = ВерсииФорматовВыгрузки.ПеречислениеВерсииФорматовВыгрузкиВерсияПФР Тогда
		
		ТипФайла = "utf-8";
		
	Иначе
		
		ТипФайла = "cp866";
		
	КонецЕсли;
	
	Если ВРег(СокрЛП(СтрПолучитьСтроку(Выгрузка.Текст, 1))) = ВРег(СокрЛП("Структура")) Тогда
		
		АдресФайлаВыгрузки = СтрЗаменить(СтрПолучитьСтроку(Выгрузка.Текст, 3), "АдресФайлаВыгрузки:", "");
		
		ТекстВыгрузки = ПолучитьСтрокуИзВременногоХранилища(АдресФайлаВыгрузки, ТипФайла);
				
	Иначе
		
		ТекстВыгрузки = Выгрузка.Текст;
		
	КонецЕсли;
		
	Текст = Новый ТекстовыйДокумент;
	
	Текст.УстановитьТекст(ТекстВыгрузки);
	Текст.УстановитьТипФайла(ТипФайла);
	
	Текст.ТолькоПросмотр = Истина;
				
	Текст.Показать(РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(Элементы.Основания.ТекущиеДанные) + " - электронное представление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтчет(Команда)
	
	ПроверитьОтчеты();	
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьТексты(Ложь, Ложь, Неопределено, Неопределено, "", Неопределено, Истина, Неопределено, Неопределено, Ложь, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СохраненнаяДата = Объект.Дата;
	СохраненныйКомментарий = Объект.Комментарий;
	
	Прочитать();
	
	Объект.Дата = СохраненнаяДата;
	Объект.Комментарий = СохраненныйКомментарий;
	
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	СохранитьДокументыОснования();
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбора()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	РегламентированныйОтчет.КодНалоговогоОргана
	                      |ИЗ
	                      |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
						  |ГДЕ
						  |	РегламентированныйОтчет.КодНалоговогоОргана <> """" И
						  |	РегламентированныйОтчет.КодНалоговогоОргана <> "" "" И
						  |	РегламентированныйОтчет.КодНалоговогоОргана <> ""  "" И
						  |	РегламентированныйОтчет.КодНалоговогоОргана <> ""   "" И
						  |	РегламентированныйОтчет.КодНалоговогоОргана <> ""    "" И
			              |	РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала И
			              |	РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания");
						  
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Запрос.Текст = Запрос.Текст + " И
	                      |	РегламентированныйОтчет.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.ПериодПо));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ПериодПо));
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодНалоговогоОргана"));
	СписокВыбора.СортироватьПоЗначению();
	СписокВыбора.Вставить(0, "");
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеПараметровОтбора(ВыполняемоеОповещение) 
	
	Если (Основания.Количество() = 0) И (Объект.Выгрузки.Количество() = 0) Тогда
		Основания.Очистить();
		Элементы.КодНалоговогоОргана.СписокВыбора.Очистить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
	Иначе
		ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеПараметровОтбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При изменении реквизита будут очищены список документов и тексты выгрузок.%1Продолжить?'"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПараметровОтбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
	Иначе
		Основания.Очистить();
		Элементы.КодНалоговогоОргана.СписокВыбора.Очистить();
		Объект.Выгрузки.Очистить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, , "КодНО");
	
	Если СведенияОбОрганизации.Свойство("КодНО") Тогда
		Элементы.КодНалоговогоОргана.СписокВыбора.Добавить(СведенияОбОрганизации.КодНО);
		Объект.КодНалоговогоОргана = СведенияОбОрганизации.КодНО;
	КонецЕсли;
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиентСервер.ВидимостьКнопкиЗашифроватьИОтправить(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОрганизацияОчисткаЗавершение", ЭтотОбъект);
	ИзменениеПараметровОтбора(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчисткаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Объект.Организация Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОрганизацияОбработкаВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ИзменениеПараметровОтбора(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Объект.Организация = ДополнительныеПараметры.ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено И (Объект.КодНалоговогоОргана <> ВыбранноеЗначение И НЕ (ПустаяСтрока(Объект.КодНалоговогоОргана) И ПустаяСтрока(ВыбранноеЗначение))) Тогда
		Объект.КодНалоговогоОргана = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("КодНалоговогоОрганаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИзменениеПараметровОтбора(ОписаниеОповещения);
			
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Элемент = ДополнительныеПараметры.Элемент;
		СписокВыбора = ПолучитьСписокВыбора();
		Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаКодНалоговогоОрганаЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаКодНалоговогоОрганаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.КодНалоговогоОргана = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	
	Если Год <> Год(Объект.ПериодПо) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ГодПриИзмененииЗавершение", ЭтотОбъект);
		ИзменениеПараметровОтбора(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Объект.ПериодПо = КонецМесяца(Дата(Год, Месяц(Объект.ПериодПо), 1));
	Иначе
		Год = Год(Объект.ПериодПо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНомерМесяца(ПредставлениеМесяца)

	НомерМесяца = 0;
	
	Если ПредставлениеМесяца = "Январь" Тогда
		
		НомерМесяца = 1;
		
	ИначеЕсли ПредставлениеМесяца = "Февраль" Тогда
		
		НомерМесяца = 2;
		
	ИначеЕсли ПредставлениеМесяца = "Март (I квартал)" Тогда
		
		НомерМесяца = 3;
		
	ИначеЕсли ПредставлениеМесяца = "Апрель" Тогда
		
		НомерМесяца = 4;
		
	ИначеЕсли ПредставлениеМесяца = "Май" Тогда
		
		НомерМесяца = 5;
		
	ИначеЕсли ПредставлениеМесяца = "Июнь (II квартал)" Тогда
		
		НомерМесяца = 6;
		
	ИначеЕсли ПредставлениеМесяца = "Июль" Тогда
		
		НомерМесяца = 7;
		
	ИначеЕсли ПредставлениеМесяца = "Август" Тогда
		
		НомерМесяца = 8;
		
	ИначеЕсли ПредставлениеМесяца = "Сентябрь (III квартал)" Тогда
		
		НомерМесяца = 9;
		
	ИначеЕсли ПредставлениеМесяца = "Октябрь" Тогда
		
		НомерМесяца = 10;
		
	ИначеЕсли ПредставлениеМесяца = "Ноябрь" Тогда
		
		НомерМесяца = 11;
		
	ИначеЕсли ПредставлениеМесяца = "Декабрь (IV квартал)" Тогда
		
		НомерМесяца = 12;
		
	КонецЕсли;

	Возврат НомерМесяца;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииМесяца()
	
	Объект.ПериодПо = КонецМесяца(Дата(Год, Месяц, 1));
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораПериодПриИзменении(Элемент)
	
	Месяц = ПолучитьНомерМесяца(ПолеВыбораПериод);
	Если Месяц <> Месяц(Объект.ПериодПо) Тогда
		ДополнительныеПараметры = Новый Структура("Месяц", Месяц);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолеВыбораПериодПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИзменениеПараметровОтбора(ОписаниеОповещения);
	Иначе
		ПриИзмененииМесяца();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораПериодПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Месяц = ДополнительныеПараметры.Месяц;
	Если Не Результат Тогда
		Месяц = Месяц(Объект.ПериодПо);
		УстановитьЗначениеВПолеВыбораПериода();
	Иначе
		ПриИзмененииМесяца();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	ТекущийОбъект.ПредставлениеПериода = РегламентированнаяОтчетность.ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(ТекущийОбъект.Ссылка);
	ТекущийОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьОтчет(Отчет, ПроверкаБлокировкиФормы = Истина, ДляОтправкиВФНС = Истина, ТекстФайлаВыгрузки = "", ИмяФайлаВыгрузки = "", КодировкаТекстаВыгрузки = Неопределено, ВозвращатьИменаИТекстыФайловВыгрузкиВВидеМассивов = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Отчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РежимВызоваЭкспортируемогоМетодаФормы	= Истина;
	ПервыйДок								= Отчет;
		
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("КодНалоговогоОргана", "");
	РеквизитыДокумента.Вставить("ПериодПо", "");
	РеквизитыДокумента.Вставить("Организация", "");
	
	ПолучитьРеквизитыДокумента(ПервыйДок, РеквизитыДокумента);
	
	Объект.КодНалоговогоОргана = РеквизитыДокумента.КодНалоговогоОргана;
	Объект.ПериодПо		= КонецДня(РеквизитыДокумента.ПериодПо);
	Объект.Организация	= РеквизитыДокумента.Организация;
	
	// заполняем табличную часть "Выгрузки" документами-основаниями
	НовСтр = Основания.Добавить();
	НовСтр.Ссылка = Отчет;
	НовСтр.Пометка = Истина;
	
	// формируем текст выгрузки. Если во время формирования произошла ошибка - вернем признак ошибки
	СформироватьТекстыВыгрузкиКлиент( , , ПроверкаБлокировкиФормы, ДляОтправкиВФНС, Отчет);
	Если ОшибкаВыгрузки = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// создаем временный каталог, куда выгружаем файл
	СохранитьТексты(Истина, Ложь, Неопределено, ИмяФайлаВыгрузки, ТекстФайлаВыгрузки, КодировкаТекстаВыгрузки, Истина, Неопределено, Неопределено, ВозвращатьИменаИТекстыФайловВыгрузкиВВидеМассивов, Неопределено);
	Если ОшибкаВыгрузки = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ЗашифроватьИОтправить

&НаКлиенте
Процедура ЗашифроватьИОтправить(Команда)
	
	ОрганизацияСсылка = Объект.Организация;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ПоказатьПредупреждение(,"Выберите организацию.");
		Возврат;
	КонецЕсли;          
	
	Если Объект.Выгрузки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Тексты выгрузки не сформированы.");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗашифроватьИОтправитьПослеПроверки", 
		ЭтотОбъект); 
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиент.ПроверитьНастройкиИнтеграцииСоСпринтером(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправитьПослеПроверки(Результат, ВходящийКонтекст) Экспорт
	
	//сохраняем тексты выгрузки в каталог 
	КаталогОтправки = СдачаОтчетностиЧерезТакскомСпринтерВызовСервера.ПолучитьНастройкиИнтеграцииСоСпринтером(Объект.Организация).КаталогОтправкиДанныхОтчетности;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗашифроватьИОтправитьПослеПроверкиПослеСохраненияТекстов", 
		ЭтотОбъект);
	
	СохранитьТексты(Ложь, Истина, КаталогОтправки, Неопределено, "", Неопределено, Истина, Неопределено, Неопределено, Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправитьПослеПроверкиПослеСохраненияТекстов(Результат, ВходящийКонтекст) Экспорт
	
	#Если ВебКлиент Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗашифроватьИОтправитьПослеПредупреждения", 
			ЭтотОбъект); 
			
		ПоказатьПредупреждение(ОписаниеОповещения, 
			"Для отправки файлов выгрузки требуется предварительно сохранить их в каталог: 
			|" + КаталогОтправки + "
			|затем закрыть данное сообщение.");
	#Иначе
		
		//отправляем файл выгрузки в Спринтер
		СдачаОтчетностиЧерезТакскомСпринтерКлиент.ОтправитьВСпринтерСогласноНастройкамОрганизации(Объект.Организация);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьИОтправитьПослеПредупреждения(ВходящийКонтекст) Экспорт
	
	СдачаОтчетностиЧерезТакскомСпринтерКлиент.ОтправитьВСпринтерСогласноНастройкамОрганизации(Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОснованияПередНачаломИзменения(Элемент, Отказ)
	                         	
	Если Элементы.Основания.ТекущийЭлемент.Имя = "ОснованияПометка"
		И Объект.Выгрузки.Количество() <> 0 Тогда
		
		Отказ = Истина;
		ТекСтрока = Элементы.Основания.ТекущиеДанные;
		ДополнительныеПараметры = Новый Структура("ТекСтрока", ТекСтрока);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОснованияПередНачаломИзмененияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При изменении списка документов будут очищены тексты выгрузки.%1Продолжить?'"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПередНачаломИзмененияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Выгрузки.Очистить();
		ТекСтрока.Пометка = Не ТекСтрока.Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаОчистка(Элемент, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КодНалоговогоОрганаОчисткаЗавершение", ЭтотОбъект);
	ИзменениеПараметровОтбора(ОписаниеОповещения)
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаОчисткаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Объект.КодНалоговогоОргана = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти