&НаКлиенте
Перем ДанныеВыбораПериодаИзВыпадающегоСписка;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");	
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечатьПереопределенная);
	// Конец СтандартныеПодсистемы.Печать
	
	ВидПериода  = Перечисления.ДоступныеПериодыОтчета.Месяц;
	ОтчетныйПериодЗначение.ДатаНачала = Объект.ОтчетныйПериод;
	ОтчетныйПериодЗначение.ДатаОкончания  = Объект.ОкончаниеОтчетногоПериода;
	ОтчетныйПериодПредставление = ОтчетыУНФКлиентСервер.ПредставлениеСтандартногоПериода(ОтчетныйПериодЗначение, ВидПериода);
	
	Если Объект.СформированАвтоматически Тогда
		Элементы.ОтчетныйПериодПредставление.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьДоступностьДанныхФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСотрудники
	&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	ИдентфикаторыСтрок = Новый Массив;
	ИдентфикаторыСтрок.Добавить(Элементы.Сотрудники.ТекущаяСтрока);	
	ЗаполнитьДанныеСотрудников(ИдентфикаторыСтрок);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторыСтрок = Новый Массив;
	
	Для Каждого Сотрудник Из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		
		ИдентификаторыСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗаполнитьДанныеСотрудников(ИдентификаторыСтрок);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКоманд

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	ОчиститьСообщения();	
	Отказ = Ложь;
	ПроверитьНаСервере(Отказ);
	ПроверкаСтороннимиПрограммами(Отказ);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьКомандуПечатиЗавершение", ЭтотОбъект, Команда);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ВыполнитьКомандуПечатиЗавершение(Результат, Команда) Экспорт
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка);
	ПолучитьФайл(ДанныеФайла.АдресФайла, ДанныеФайла.ИмяФайла+".xml", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ДанныеФайла = ПолучитьДанныеФайлаНаСервере(Объект.Ссылка);
	Если ДанныеФайла <> Неопределено Тогда
		ПолучитьФайл(ДанныеФайла.АдресФайла, ДанныеФайла.ИмяФайла+".xml", Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);	
	ПроверитьСЗапросомДальнейшегоДействия(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, Параметры) Экспорт
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	ДанныеОбъектаВДанныеФормы(ТекущийОбъект);
	УстановитьДоступностьДанныхФормы();
КонецПроцедуры

&НаСервере
Процедура ДанныеОбъектаВДанныеФормы(ТекущийОбъект)
	ФлагБлокировкиДокумента = Объект.ДокументПринятВПФР;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДанныхФормы()
	Если Объект.ДокументПринятВПФР Тогда  
		ТолькоПросмотр = Истина;	
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	Объект.Сотрудники.Очистить();
	
	Объект.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	Объект.ДолжностьРуководителя = Справочники.Должности.ПустаяСсылка();
	
	Объект.ИмяФайлаДляПФР = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ИмяФайла(Объект.Организация, Объект.Дата);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	ДанныеДляЗаполнения = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ДанныеДляЗаполнения(Объект);	
	
	Объект.Сотрудники.Очистить();
	
	Объект.Сотрудники.Загрузить(ДанныеДляЗаполнения);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСотрудников(ИдентификаторыЗаполянемыхСтрок)
	ЗаполняемыеСтроки   = Новый Массив;
	СписокФизическихЛиц = Новый Массив;
	
	Для Каждого ИдентфикаторСтроки Из ИдентификаторыЗаполянемыхСтрок Цикл
		ДанныеСтроки = Объект.Сотрудники.НайтиПоИдентификатору(ИдентфикаторСтроки);
		
		Если ДанныеСтроки <> Неопределено Тогда 	
			Если ЗначениеЗаполнено(ДанныеСтроки.Сотрудник) Тогда	
				ЗаполняемыеСтроки.Добавить(ДанныеСтроки);
				СписокФизическихЛиц.Добавить(ДанныеСтроки.Сотрудник);
			Иначе
				ЗаполнитьДанныеСтрокиПустымиЗначениями(ДанныеСтроки);	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	ДанныеДляЗаполнения = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ДанныеФизическихЛицПоСпискуЗначений(СписокФизическихЛиц, Объект.Дата);
	ДанныеДляЗаполнения.Индексы.Добавить("Сотрудник");
	
	Для Каждого ЗаполняемаяСтрока Из ЗаполняемыеСтроки Цикл
		ДанныеПоФизическомуЛицу = ДанныеДляЗаполнения.НайтиСтроки(Новый Структура("Сотрудник", ЗаполняемаяСтрока.Сотрудник));
		
		Если ДанныеПоФизическомуЛицу.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока, ДанныеПоФизическомуЛицу[0]);	
		Иначе
			ЗаполнитьДанныеСтрокиПустымиЗначениями(ЗаполняемаяСтрока);		
		КонецЕсли;		
	КонецЦикла;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиПустымиЗначениями(ДанныеСтроки)
	ДанныеСтроки.Фамилия = "";
	ДанныеСтроки.Имя = "";
	ДанныеСтроки.Отчество = "";
	ДанныеСтроки.ИНН = "";
	ДанныеСтроки.СтраховойНомерПФР = "";
КонецПроцедуры	

&НаСервере
Процедура ПроверитьНаСервере(Отказ = Ложь)
		
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ПроверитьДанныеДокумента(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	Объект.ИмяФайлаДляПФР = Документы.СведенияОЗастрахованныхЛицахСЗВ_М.ИмяФайла(Объект.Организация, Объект.Дата);
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьНаСервере(Отказ);	
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							
		Оповещение = Новый ОписаниеОповещения("ПроверитьСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе 
		ПроверитьСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаСтороннимиПрограммами(Отказ)
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'При проверке встроенной проверкой обнаружены ошибки.'")
	Иначе	
		ТекстСообщения = НСтр("ru = 'При проверке встроенной проверкой ошибок не обнаружено.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлаНаСервере(ДокументОтчетности)
	Возврат Новый Структура("ИмяФайла, АдресФайла",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОтчетности, "ИмяФайлаДляПФР"),
			УчетСтраховыхВзносов.СохранитьФайлВыгрузкиСЗВМ(ДокументОтчетности));
КонецФункции


&НаКлиенте
Процедура ОтчетныйПериодПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = ОтчетныйПериодЗначение.ДатаНачала;
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = НачалоМесяца(ОтчетыКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияКлиент.ДатаСеанса()));
	КонецЕсли;
	ОтчетныйПериодЗначение.ДатаНачала = НачалоПериода;
	ОтчетныйПериодЗначение.ДатаОкончания = КонецМесяца(НачалоПериода);
	
	// Параметры для чтения из обработчиков:
	ПараметрыВыбораИзСписка = Новый Структура;
	// Для выбора значения:
	ПараметрыВыбораИзСписка.Вставить("Значение",               ОтчетныйПериодЗначение);
	ПараметрыВыбораИзСписка.Вставить("Элемент",                Элемент);
	// Для загрузки значения:
	ПараметрыВыбораИзСписка.Вставить("ВидПериода",             ВидПериода);
	
	ВыборПериодаИзВыпадающегоСписка(-1, ПараметрыВыбораИзСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // Отмена выбора.
	КонецЕсли;
	
	Если Результат = -1 Тогда // Начало выбора.
		// Чтение параметров для формирования списка из сохраненного значения периода.
		ПараметрыВыбора.Вставить("НачалоПериода", ПараметрыВыбора.Значение.ДатаНачала);
		ПараметрыВыбора.Вставить("Вариант",       ПараметрыВыбора.Значение.Вариант);
		ИндексНачальногоЗначения = Неопределено;
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
		// Чтение параметров для формирования списка из выбранного значения.
		ПараметрыВыбора.Вставить("НачалоПериода", Результат.Значение.НачалоПериода);
		ПараметрыВыбора.Вставить("Вариант",       Результат.Значение.Вариант);
		ИндексНачальногоЗначения = Результат.Значение.ИндексНачальногоЗначения;
	Иначе
		// Загрузка результата выбора.
		ЗагрузитьРезультатВыбораПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора);
		Возврат;
	КонецЕсли;
	
	// Формирование списка выбора.
	Если ПараметрыВыбора.Вариант = Неопределено Или ПараметрыВыбора.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		СписокПериодов = ОтчетыУНФКлиентСервер.СписокФиксированныхПериодов(ПараметрыВыбора.НачалоПериода, ПараметрыВыбора.ВидПериода);
		
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(ПараметрыВыбора.НачалоПериода);
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            СписокПериодов[0].Значение);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", 0);
		СписокПериодов[0].Значение = ОписаниеНавигационногоЭлемента;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            СписокПериодов[8].Значение);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", 8);
		СписокПериодов[8].Значение = ОписаниеНавигационногоЭлемента;
		
		Если Не ПараметрыВыбора.Свойство("ВариантСтандартногоПериодаПоВиду") Тогда
			ПараметрыВыбора.Вставить("ВариантСтандартногоПериодаПоВиду", ОтчетыУНФКлиентСервер.ПривестиВидПериодаКСтандартному(ПараметрыВыбора.ВидПериода));
		КонецЕсли;
		
		
	Иначе
		
		СписокПериодов = ОтчетыУНФКлиентСервер.СписокВычисляемыхПериодов(ПараметрыВыбора.ВидПериода);
		
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(ПараметрыВыбора.Вариант);
		КонецЕсли;
		
		ОписаниеНавигационногоЭлемента = Новый Структура;
		ОписаниеНавигационногоЭлемента.Вставить("НачалоПериода",            ПараметрыВыбора.НачалоПериода);
		ОписаниеНавигационногоЭлемента.Вставить("Вариант",                  Неопределено);
		ОписаниеНавигационногоЭлемента.Вставить("ИндексНачальногоЗначения", Неопределено);
		СписокПериодов.Добавить(ОписаниеНавигационногоЭлемента, НСтр("ru = 'Фиксированный...'"));
		
	КонецЕсли;
	
	Если ИндексНачальногоЗначения = Неопределено Тогда
		ИндексНачальногоЗначения = СписокПериодов.Количество() - 1;
	КонецЕсли;
	
	ДанныеВыбораПериодаИзВыпадающегоСписка = Новый Структура;
	ДанныеВыбораПериодаИзВыпадающегоСписка.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	ДанныеВыбораПериодаИзВыпадающегоСписка.Вставить("СписокПериодов", СписокПериодов);
	ДанныеВыбораПериодаИзВыпадающегоСписка.Вставить("ИндексНачальногоЗначения", ИндексНачальногоЗначения);
	Если Результат = -1 Тогда
		НачатьВыборПериодаИзВыпадающегоСписка();
	Иначе
		ПодключитьОбработчикОжидания("НачатьВыборПериодаИзВыпадающегоСписка", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборПериодаИзВыпадающегоСписка()
	
	Если ДанныеВыбораПериодаИзВыпадающегоСписка.Свойство("ПараметрыВыбора") Тогда
		Контекст = ДанныеВыбораПериодаИзВыпадающегоСписка;
		ДанныеВыбораПериодаИзВыпадающегоСписка = Новый Структура;
		Обработчик = Новый ОписаниеОповещения("ВыборПериодаИзВыпадающегоСписка", ЭтотОбъект, Контекст.ПараметрыВыбора);
		ПоказатьВыборИзСписка(Обработчик, Контекст.СписокПериодов, Контекст.ПараметрыВыбора.Элемент, Контекст.ИндексНачальногоЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатВыбораПериодаИзВыпадающегоСписка(Результат, ПараметрыВыбора)
	
	Значение = ПараметрыВыбора.Значение;
	
	// Запись результата выбора в данные формы и пользовательские настройки КД.
	Если ТипЗнч(Результат.Значение) = Тип("ВариантСтандартногоПериода") Тогда
		ОтчетныйПериодПредставление = ?(ПустаяСтрока(Результат.Представление), Строка(Результат.Значение), Результат.Представление);
		Значение.Вариант = Результат.Значение;
	Иначе
		ОтчетныйПериодЗначение.ДатаНачала = ОтчетыКлиентСервер.НачалоПериодаОтчета(ПараметрыВыбора.ВидПериода, Результат.Значение);
		ОтчетныйПериодЗначение.ДатаОкончания  = ОтчетыКлиентСервер.КонецПериодаОтчета(ПараметрыВыбора.ВидПериода, Результат.Значение);
		
		ОтчетныйПериодПредставление = Результат.Представление;
		
		Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Значение.ДатаНачала    = ОтчетныйПериодЗначение.ДатаНачала;
		Значение.ДатаОкончания = ОтчетныйПериодЗначение.ДатаОкончания;
		
	КонецЕсли;
	ОтчетныйПериодЗначение = Значение;
	
	Объект.ОтчетныйПериод  = ОтчетныйПериодЗначение.ДатаНачала;
	Объект.ОкончаниеОтчетногоПериода  = ОтчетныйПериодЗначение.ДатаОкончания;
	Модифицированность = Истина;
	
КонецПроцедуры


#КонецОбласти
