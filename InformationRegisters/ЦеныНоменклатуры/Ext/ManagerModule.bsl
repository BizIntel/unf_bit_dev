#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает ключ записи регистра.
//
Функция ПолучитьКлючЗаписи(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныНоменклатурыСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&НаДату,
		|			ВидЦен = &ВидЦен
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", 			СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("Номенклатура", 		СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", 	СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("ВидЦен", 			СтруктураПараметров.ВидЦен);
	
	СтруктураВозврата = Новый Структура("ЗаписьСуществует, Период, ВидЦен, Номенклатура, Характеристика", Ложь);
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтруктураПараметров);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультат.Количество() > 0 Тогда
		
		СтруктураВозврата.Период 				= ТаблицаРезультат[0].Период;
		СтруктураВозврата.ЗаписьСуществует		= Истина;
		
	КонецЕсли; 

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьКлючЗаписи()

// Устанавливает запись регистра по переданным данным
//
Процедура УстановитьИзменитьОсновнуюЦенуПродажи(ДанныеЗаполнения) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаполнения);
	МенеджерЗаписи.Автор = Пользователи.АвторизованныйПользователь();
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры // УстановитьИзменитьОсновнуюЦенуПродажи()

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПриОпределенииЗначенияПоУмолчанию(СправочникСсылка, ИмяРеквизита, ВходящиеДанные, СтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию)
	
	Если СтрокаСопоставлена 
		И НЕ ЗначениеЗаполнено(ВходящиеДанные) Тогда
		
		ЗначениеПоУмолчанию = СправочникСсылка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", 	"Штрихкод", 	ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", 	"Артикул", 		ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование","Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Характеристика", "Характеристика (наименование)", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения, СправочникСсылка.ЕдиницыИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидЦен", "Вид цен (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2, , , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Дата", "Дата (начало использования)", ОписаниеТиповСтрока25, ОписаниеТиповДата);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ОбновлятьДанные = НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	
	ОбщееЗначение = Неопределено;
	НастройкиЗагрузкиДанных.Свойство("ОбщееЗначение", ОбщееЗначение);
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование);
		ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			Если ЭтаСтрокаСопоставлена Тогда
				
				// Характеристика по Владельцу и Наименованию
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьХарактеристику(СтрокаТаблицыФормы.Характеристика, СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Характеристика_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.шт;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "ЕдиницаИзмерения", СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// ВидыЦен по наименованию
		ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(ОбщееЗначение), ОбщееЗначение, Справочники.Контрагенты.ПолучитьОсновнойВидЦенПродажи());
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьВидЦен(СтрокаТаблицыФормы.ВидЦен, СтрокаТаблицыФормы.ВидЦен_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Цена
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные);
		
		// Дата
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.Дата, СтрокаТаблицыФормы.Дата_ВходящиеДанные);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыФормы.Дата) Тогда
			
			СтрокаТаблицыФормы.Дата = НачалоДня(ТекущаяДата());
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = ЗначениеЗаполнено(СтрокаТаблицыФормы.ВидЦен)
		И НЕ СтрокаТаблицыФормы.ВидЦен.РассчитыватьАвтоматически
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура)
		И СтрокаТаблицыФормы.Цена > 0
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.ЕдиницаИзмерения)
		И ЗначениеЗаполнено(СтрокаТаблицыФормы.Дата)
		;
	
	Если СтрокаТаблицыФормы[ИмяСлужебногоПоля] Тогда
		
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(СтрокаТаблицыФормы.Дата));
		НаборЗаписей.Отбор.ВидЦен.Установить(СтрокаТаблицыФормы.ВидЦен);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТаблицыФормы.Номенклатура);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			НаборЗаписей.Отбор.Характеристика.Установить(СтрокаТаблицыФормы.Характеристика);
			
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		СтрокаТаблицыФормы._СтрокаСопоставлена = (НаборЗаписей.Количество() > 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	Автор						= Пользователи.АвторизованныйПользователь();
	ОбновлятьСуществующие		= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьНовые 				= СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ТаблицаСопоставленияДанных	= СтруктураДанных.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	КоличествоЗаписейТранзакции	= 0;
	ТранзакцияОткрыта			= Ложь;
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьНовые);
			
			Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
				
				КоличествоЗаписейТранзакции		= КоличествоЗаписейТранзакции + 1;
				
				МенеджерЗаписи 					= РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Актуальность		= Истина;
				МенеджерЗаписи.ВидЦен			= СтрокаТаблицы.ВидЦен;
				МенеджерЗаписи.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
				МенеджерЗаписи.Номенклатура		= СтрокаТаблицы.Номенклатура;
				МенеджерЗаписи.Период			= СтрокаТаблицы.Дата;
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
					
					МенеджерЗаписи.Характеристика	= СтрокаТаблицы.Характеристика;
					
				КонецЕсли;
				
				МенеджерЗаписи.Цена				= СтрокаТаблицы.Цена;
				МенеджерЗаписи.Автор			= Автор;
				МенеджерЗаписи.Записать(Истина);
				
			КонецЕсли;
			
			ИндексТекущейстроки	= ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
			ТекстПрогресса		= СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейстроки, РазмерТаблицыДанных);
			
			ДлительныеОперации.СообщитьПрогресс(ИндексТекущейстроки * 100 / РазмерТаблицыДанных, ТекстПрогресса);
			
			Если КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
				
				ЗафиксироватьТранзакцию();
				ТранзакцияОткрыта = Ложь;
				КоличествоЗаписейТранзакции = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоЗаписейТранзакции > 0 Тогда
			
			ЗафиксироватьТранзакцию();
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.ЦеныНоменклатуры, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли