#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список доступных значений для поля "ТипОС".
// ТипОС совпадает с типами платформы из СистемнаяИнформация, хотя имеет другой смысл (относится к операционной системе).
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Массив - список доступных значений.
//
Функция ПолучитьЗначенияДопустимыхТиповОС() Экспорт

	Результат = Новый Массив;

	Результат.Добавить("Linux_x86");
	Результат.Добавить("Linux_x86_64");
	Результат.Добавить("MacOS_x86");
	Результат.Добавить("MacOS_x86_64");
	Результат.Добавить("Windows_x86");
	Результат.Добавить("Windows_x86_64");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура загружает стандартные значения из макета с именем "СтандартныеЗначения".
// Имеет смысл заполнять значения из макета:
//  - при обновлении конфигурации (когда подключение к интернету может занять много времени);
//  - при первоначальном заполнении пустой базы, когда не заполнены параметры, логины и пароли для доступа к веб-сервисам обновлений.
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьСтандартныеЗначения() Экспорт

	НаименованиеПроцедурыФункции = "РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива.ЗагрузитьСтандартныеЗначения"; // Идентификатор.

	ОбъектМетаданных = РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива; // Переопределение
	ИмяСвойства = "InformationRegisterRecordSet_ДоступныеВерсииАгентаКопированияОблачногоАрхива"; // Переопределение

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультата = 0;
	ОписаниеРезультата = "";
	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
	ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
		ШагВыполнения,
		"ОблачныйАрхив.ЗагрузкаСтандартныхЗначений." + ИмяСвойства, // Идентификатор.
		СтрШаблон(
			НСтр("ru='Загрузка стандартных значений (%1)'"),
			ИмяСвойства));

	СодержимоеМакета = ОбъектМетаданных.ПолучитьМакет("СтандартныеЗначения").ПолучитьТекст();
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(СодержимоеМакета);
	ЧтениеХМЛ.Прочитать();

	НаборЗаписей = РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива.СоздатьНаборЗаписей();

	ХМЛТип = ПолучитьXMLТип(ЧтениеХМЛ);
	Если (НРег(ХМЛТип.ИмяТипа) = НРег("DefaultData")) Тогда // И (ВРег(ХМЛТип.URIПространстваИмен)=ВРег("http://v8.1c.ru/8.1/data/enterprise/current-config"))
		ОбъектХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
		СвойствоОбъект = ОбъектХДТО.Свойства().Получить(ИмяСвойства);
		Если ТипЗнч(СвойствоОбъект) = Тип("СвойствоXDTO") Тогда
			НаборЗаписейХДТО = ОбъектХДТО.Получить(СвойствоОбъект);
			СвойствоЗапись = НаборЗаписейХДТО.Свойства().Получить("Record");
			ЗаписьХДТО = НаборЗаписейХДТО.Свойства().Получить("Record");
			Если (СвойствоЗапись.ВерхняяГраница = -1) ИЛИ (СвойствоЗапись.ВерхняяГраница > 1) Тогда
				СписокХДТО = НаборЗаписейХДТО.ПолучитьСписок(СвойствоЗапись);
				Для каждого ТекущаяЗаписьХДТО Из СписокХДТО Цикл
					ЗагрузитьСтандартноеЗначение(НаборЗаписей, ТекущаяЗаписьХДТО, ОбъектМетаданных, ИмяСвойства, КонтекстВыполненияВложенный);
				КонецЦикла;
			ИначеЕсли (СвойствоЗапись.НижняяГраница = 1) И (СвойствоЗапись.ВерхняяГраница = 1) Тогда
				ЗагрузитьСтандартноеЗначение(НаборЗаписей, НаборЗаписейХДТО.Получить(СвойствоЗапись), ОбъектМетаданных, ИмяСвойства, КонтекстВыполненияВложенный);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	НаборЗаписей.Записать(Истина);

	ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
		ШагВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);
	КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

	ТекстСообщения = СтрШаблон(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|'"),
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));

	// Запись в журнал регистрации.
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Сервис и регламент'"), // Имя события
		СтрШаблон(
			НСтр("ru='Облачный архив. Сервис и регламент. Загрузка стандартных значений. %1'"),
			ИмяСвойства), // ИмяСобытия
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура загружает стандартное значение из макета с именем "СтандартныеЗначения".
//
// Параметры:
//  НаборЗаписей       - НаборЗаписейРегистраСведений;
//  ОбъектХДТО         - Объект ХДТО - загружаемый объект;
//  ОбъектМетаданных   - Объект метаданных;
//  ИмяСвойств  а      - Строка - имя свойства;
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
Процедура ЗагрузитьСтандартноеЗначение(НаборЗаписей, ТекущаяЗаписьХДТО, ОбъектМетаданных, ИмяСвойства, КонтекстВыполнения)

	НаименованиеПроцедурыФункции = "РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива.ЗагрузитьСтандартноеЗначение"; // Идентификатор.

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = Неопределено;
	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
	ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
		ШагВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции, // Идентификатор шага.
		НСтр("ru='Загрузка записи регистра сведений'"));

		Попытка
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекущаяЗаписьХДТО);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			КодРезультата = 2001;
			ОписаниеРезультата = СтрШаблон(
				НСтр("ru='Не удалось добавить запись в регистр сведений по причине:
				|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
		ШагВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);
	КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|'"),
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
