#Область СлужебныеПроцедурыИФункции

// Формирует штрихкод EAN13.
//
&НаСервереБезКонтекста
Функция СформироватьШтрихкодEAN13()
	
	Возврат РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13();
	
КонецФункции // СформироватьШтрихкодEAN13()

&НаСервереБезКонтекста
Функция СформироватьШтрихкодEAN13ВесовогоТовара(ПрефиксВесовогоТовара = "1")
	
	Возврат РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодВесовогоТовараEAN13(ПрефиксВесовогоТовара);
	
КонецФункции

// ПодключаемоеОборудование
&НаКлиенте
Функция ПолученыШтрихкоды(ДанныеШтрикодов)
	
	Модифицированность = Истина;
	
	Если ДанныеШтрикодов.Количество() > 0 Тогда
		Запись.Штрихкод = ДанныеШтрикодов[ДанныеШтрикодов.Количество() - 1].Штрихкод;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолученыШтрихкоды()
// Конец ПодключаемоеОборудование

// Процедура обработчик команды НовыйШтрихкод.
//
&НаКлиенте
Процедура НовыйШтрихкод(Команда)
	
	Если ИспользоватьОбменСПодключаемымОборудованиемOffline Тогда
		ПрефиксВесовогоТовара = 1;
		ПоказатьВводЧисла(Новый ОписаниеОповещения("НовыйШтрихкодЗавершение", ЭтотОбъект, Новый Структура("ПрефиксВесовогоТовара", ПрефиксВесовогоТовара)), ПрефиксВесовогоТовара, НСтр("ru = 'Если товар весовой, то введите префикс весового товара или нажмите кнопку Отмена'"), 1, 0);
	Иначе
		Запись.Штрихкод = СформироватьШтрихкодEAN13();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйШтрихкодЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    ПрефиксВесовогоТовара = ?(Результат1 = Неопределено, ДополнительныеПараметры.ПрефиксВесовогоТовара, Результат1);
    
    
    Результат = (Результат1 <> Неопределено);
    Если Результат Тогда
        Запись.Штрихкод = СформироватьШтрихкодEAN13ВесовогоТовара(ПрефиксВесовогоТовара);
    Иначе
        Запись.Штрихкод = СформироватьШтрихкодEAN13();
    КонецЕсли;

КонецПроцедуры // НовыйШтрихкод()

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	ИспользоватьОбменСПодключаемымОборудованиемOffline = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСПодключаемымОборудованиемOffline");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;

			ПолученыШтрихкоды(Данные);
		ИначеЕсли ИмяСобытия = "DataCollectionTerminal" Тогда
			ПолученыШтрихкоды(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события ОбработкаПроверкиЗаполненияНаСервере.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Партия,
	|	ПРЕДСТАВЛЕНИЕ(ШтрихкодыНоменклатуры.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ШтрихкодыНоменклатуры.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ШтрихкодыНоменклатуры.Партия) КАК ПартияПредставление
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Запись.Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() // Штрихкод уже записан в БД
	   И Запись.ИсходныйКлючЗаписи.Штрихкод <> Запись.Штрихкод Тогда
		
		ОписаниеОшибки = НСтр("ru='Такой штрихкод уже назначен для номенклатуры %Номенклатура%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Номенклатура%", """" + Выборка.НоменклатураПредставление + """"
		                + ?(ЗначениеЗаполнено(Выборка.Характеристика), " " + НСтр("ru='с характеристикой'") + " """ + Выборка.ХарактеристикаПредставление + """", "")
		                + ?(ЗначениеЗаполнено(Выборка.Партия), " """ + НСтр("ru='с партией'") + " " + Выборка.ПартияПредставление + """", ""));
		
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ОписаниеОшибки, , , "Запись.Штрихкод", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

#КонецОбласти
