
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыРегистраСведений(
		"ПротоколОбменаЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Записывает сессию обмена с УТМ.
//
// Параметры:
//  ПараметрыСессии - Структура - параметры сессии обмена.
//
Процедура ЗаписатьСессиюОбменаСУТМ(ПараметрыСессии) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ПротоколОбменаЕГАИС.СоздатьМенеджерЗаписи();
	Запись.ИдентификаторСессииОбмена = Строка(Новый УникальныйИдентификатор);
	
	Если ПараметрыСессии.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.КвитанцияФиксации Тогда
		Запись.ДатаЗапроса = ТекущаяДатаСеанса() - 1;
	Иначе
		Запись.ДатаЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыСессии);
	Запись.Записать();
	
КонецПроцедуры

// Возвращает данные последнего исходящего запроса по идентификатору.
//
// Параметры:
//  ИдентификаторЗапроса - Строка - идентификатор исходящего запроса.
//
// Возвращаемое значение:
//   Структура - данные последнего исходящего запроса. Неопределено - если запрос не найден.
//
Функция НайтиИсходящийЗапрос(ИдентификаторЗапроса) Экспорт
	
	Результат = Новый Структура("ВидДокумента, ДокументОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколОбменаЕГАИС.ДатаЗапроса КАК ДатаЗапроса,
	|	ПротоколОбменаЕГАИС.ВидДокумента КАК ВидДокумента,
	|	ПротоколОбменаЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|ГДЕ
	|	ПротоколОбменаЕГАИС.ТипЗапроса = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовЕГАИС.Исходящий)
	|	И ПротоколОбменаЕГАИС.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗапроса УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст последней ошибки, полученной из ЕГАИС.
//
// Параметры:
//  ДокументОснование - ДокументСсылка - ссылка на выгруженный ранее документ.
//
// Возвращаемое значение:
//   Строка - текст последней ошибки. Пустая строка - если ошибок не было.
//
Функция ТекстПоследнейОшибки(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПротоколОбменаЕГАИС.Комментарий КАК Комментарий,
	|	ПротоколОбменаЕГАИС.ДатаЗапроса КАК ДатаЗапроса,
	|	ПротоколОбменаЕГАИС.ПолученОтказ КАК ПолученОтказ
	|ИЗ
	|	РегистрСведений.ПротоколОбменаЕГАИС КАК ПротоколОбменаЕГАИС
	|ГДЕ
	|	ПротоколОбменаЕГАИС.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗапроса УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ПолученОтказ Тогда
			Возврат Выборка.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецЕсли