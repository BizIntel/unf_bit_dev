
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отбор = "Измененные";
	
	Устройство             = Параметры.Устройство;
	
	ПараметрыУстройства = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьПараметрыУстройства(Устройство);
	
	ТипОборудования        = ПараметрыУстройства.ТипОборудования;
	УзелИнформационнойБазы = ПараметрыУстройства.УзелИнформационнойБазы;
	МаксимальныйКод        = ПараметрыУстройства.МаксимальныйКод;
	
	ПравилоОбмена          = Параметры.ПравилоОбмена;
	
	ПодключаемоеОборудованиеOfflineВызовСервера.ОбновитьКодыТоваров(ПравилоОбмена);
	
	ОтборПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		Элементы.ТоварыЗарегистрироватьИзменения.Видимость                = Ложь;
		Элементы.ТоварыКонтекстноеМенюЗарегистрироватьИзменения.Видимость = Ложь;
	КонецЕсли;
	
	Заголовок = "Товары" + " " + НСтр("ru = 'для'") + " " + Устройство;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	
	Состояние(НСтр("ru = 'Выполняется обновление таблицы товаров...'"));
	
	ОтборПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, ВыбраннаяСтрока.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗарегистрироватьИзменения(Команда)
	
	ОписаниеОшибки = "";
	МассивКодов = Новый Массив;
	МассивСтрок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		НайденнаяСтрока = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		МассивСтрок.Добавить(НайденнаяСтрока);
		МассивКодов.Добавить(НайденнаяСтрока.Код);
	КонецЦикла;
	
	Если МассивКодов.Количество() > 0 Тогда
		Результат = ЗарегистрироватьИзмененияНаСервере(МассивКодов, ОписаниеОшибки);
		Если Результат Тогда
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				СтрокаТЧ.ИндексКартинкиЕстьИзменения = 1;
			КонецЦикла;
			Оповестить("Запись_КодыТоваровПодключаемогоОборудования", Новый Структура, Неопределено);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В процессе регистрации изменений произошла ошибка:'") + " " + ОписаниеОшибки);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбраны строки для регистрации изменений'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОчистить(Команда)
	
	Устройства = Новый Массив;
	Устройства.Добавить(Устройство);
	
	Выполнено = 0;
	
	ОповещениеОВыполнении = Новый ОписаниеОповещения(
		"ОбменСОборудованиемЗавершение",
		ЭтотОбъект,
	);
	
	ПодключаемоеОборудованиеOfflineКлиент.АсинхронныйОчиститьТоварыВОборудованиеOffline(ТипОборудования, Устройства, , , ОповещениеОВыполнении);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПерезагрузить(Команда)
	
	Устройства = Новый Массив;
	Устройства.Добавить(Устройство);
	
	Выполнено = 0;
	
	ОповещениеОВыполнении = Новый ОписаниеОповещения(
		"ОбменСОборудованиемЗавершение",
		ЭтотОбъект,
	);
	
	ПодключаемоеОборудованиеOfflineКлиент.АсинхронныйВыгрузитьТоварыВОборудованиеOffline(ТипОборудования, Устройства, , , ОповещениеОВыполнении, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменСОборудованиемЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		ОтборПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыгрузить(Команда)
	
	Устройства = Новый Массив;
	Устройства.Добавить(Устройство);
	
	Выполнено = 0;
	
	ОповещениеОВыполнении = Новый ОписаниеОповещения(
		"ТоварыВыгрузитьЗавершение",
		ЭтотОбъект,
	);
	
	ПодключаемоеОборудованиеOfflineКлиент.АсинхронныйВыгрузитьТоварыВОборудованиеOffline(ТипОборудования, Устройства, , , ОповещениеОВыполнении, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыгрузитьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат Тогда
		Оповестить("Запись_ПравилаОбменаСПодключаемымОборудованиемOffline", Новый Структура, Неопределено);
		ОтборПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенников(Команда)
	
	АдресВХранилище = ПолучитьДанныеДляПечатиЦенников();
	Если АдресВХранилище <> Неопределено Тогда
	
		СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
		
		ОткрытьФорму(
			"Обработка.ПечатьЭтикетокИЦенников.Форма.Форма",
			СтруктураПараметры,            // Параметры
			,                              // Владелец
			Новый УникальныйИдентификатор  // Уникальность
		);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьКодыТоваров(Команда)
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Новый Структура("ПравилоОбмена, Устройство", ПравилоОбмена, Устройство));
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline",
		"КодыТоваров",
		МассивОбъектов,
		Неопределено,
		Неопределено
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрациюИзмененийДляВыделенныхСтрок(Команда)
	
	ОписаниеОшибки = "";
	МассивСтрок = Новый Массив;
	МассивКодов = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		НайденнаяСтрока = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		МассивСтрок.Добавить(НайденнаяСтрока);
		МассивКодов.Добавить(НайденнаяСтрока.Код);
	КонецЦикла;
	
	Если МассивКодов.Количество() > 0 Тогда
		Результат = УдалитьРегистрациюИзмененийНаСервере(МассивКодов, ОписаниеОшибки);
		Если Результат Тогда
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				СтрокаТЧ.ИндексКартинкиЕстьИзменения = 0;
			КонецЦикла;
			Оповестить("Запись_КодыТоваровПодключаемогоОборудования", Новый Структура, Неопределено);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В процессе удаления регистрации изменений произошла ошибка:'") + " " + ОписаниеОшибки);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбраны строки для удаления регистрации изменений'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ОтборПриИзмененииНаСервере()
	
	ПараметрыВыгрузки = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьПараметрыУстройства(Устройство);
	
	Если Отбор = "Измененные" Тогда
		ПараметрыВыгрузки.Вставить("ЧастичнаяВыгрузка", Истина);
		Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровКВыгрузке(Устройство, ПараметрыВыгрузки);
	ИначеЕсли Отбор = "С ошибками" Тогда
		ПараметрыВыгрузки.Вставить("ЧастичнаяВыгрузка", Ложь);
		Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровКВыгрузке(Устройство, ПараметрыВыгрузки).Скопировать(Новый Структура("ЕстьОшибки", Истина));
	Иначе
		ПараметрыВыгрузки.Вставить("ЧастичнаяВыгрузка", Ложь);
		Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровКВыгрузке(Устройство, ПараметрыВыгрузки);
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		Товары.Загрузить(Таблица);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПолучитьДанныеДляПечатиЦенников()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(СправочникПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница, НЕОПРЕДЕЛЕНО) КАК СтруктурнаяЕдиница,
	|	ЕСТЬNULL(КассыККМ.Владелец, НЕОПРЕДЕЛЕНО) КАК Организация,
	|	ЕСТЬNULL(СправочникПодключаемоеОборудование.ПравилоОбмена.СтруктурнаяЕдиница.РозничныйВидЦен, НЕОПРЕДЕЛЕНО) КАК ВидЦены
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка)
	|ГДЕ
	|	СправочникПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТовары.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Индекс = 1;
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Характеристика = СтрокаТЧ.Характеристика;
		НоваяСтрока.Партия = СтрокаТЧ.Партия;
		НоваяСтрока.ЕдиницаИзмерения = СтрокаТЧ.ЕдиницаИзмерения;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Порядок = Индекс;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	// Подготовка структуры действий для обработки печати этикеток и ценников
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", Выборка.Организация);
	СтруктураДействий.Вставить("ЗаполнитьСклад", Выборка.СтруктурнаяЕдиница);
	СтруктураДействий.Вставить("ЗаполнитьВидЦен", Выборка.ВидЦены);
	СтруктураДействий.Вставить("ЗаполнитьПравилоОбмена", ПравилоОбмена);
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	// Подготовка данных для заполенения табличной части обработки печати этикеток и ценников
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Запасы", ТаблицаТовары);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

&НаСервере
Функция ЗарегистрироватьИзмененияНаСервере(МассивКодов, ОписаниеОшибки = "")
	
	ВозвращаемоеЗначение = Истина;
	
	Попытка
		НачатьТранзакцию();
		Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
		Для Каждого Код Из МассивКодов Цикл
			
			Набор.Отбор.ПравилоОбмена.Значение = ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.Код.Значение = Код;
			Набор.Отбор.Код.Использование = Истина;
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Набор);
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ВозвращаемоеЗначение = Ложь;
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция УдалитьРегистрациюИзмененийНаСервере(МассивКодов, ОписаниеОшибки = "")
	
	ВозвращаемоеЗначение = Истина;
	
	Попытка
		НачатьТранзакцию();
		Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
		Для Каждого Код Из МассивКодов Цикл
			
			Набор.Отбор.ПравилоОбмена.Значение = ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.Код.Значение = Код;
			Набор.Отбор.Код.Использование = Истина;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелИнформационнойБазы, Набор);
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Если Отбор = "Измененные" Тогда
			ОтборПриИзмененииНаСервере();
		КонецЕсли;
		
	Исключение
		ВозвращаемоеЗначение = Ложь;
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
