////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов                   = СтруктураСоответствияНастройкиОтборовРеквизитамФормы();
	ИменаРеквизитовБазыКорреспондента = СтруктураСоответствияНастройкиОтборовКорреспондентаРеквизитамФормы();
	
	ТаблицаВидовДокументов = ПолучитьТаблицуВидовДокументовИзКонтекста();
	ОбменДаннымиСервер.ФормаНастройкиУзловПриСозданииНаСервере(ЭтаФорма, Отказ);
	
	ВидыДокументов.Загрузить(ТаблицаВидовДокументов);
	
	Для каждого СтрокаТаблицы Из ОрганизацииУНФ Цикл
		Попытка
			ИдОрганизации = Новый УникальныйИдентификатор(СтрокаТаблицы.УникальныйИдентификаторСсылки);
			СтрокаТаблицы.Представление = Справочники.Организации.ПолучитьСсылку(ИдОрганизации);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РежимСинхронизации = 
		?(Не РучнойОбмен, "АвтоматическаяСинхронизация", "РучнаяСинхронизация")
	;
	
	РежимСинхронизацииОрганизацийУНФ =
		?(ИспользоватьОтборПоОрганизациямУНФ, "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям", "СинхронизироватьДанныеПоВсемОрганизациям")
	;
	
	РежимСинхронизацииДокументов =
		?(ИспользоватьОтборПоВидамДокументов, "СинхронизироватьДанныеТолькоПоВыбраннымВидамДокументов", "СинхронизироватьДанныеПоВсемДокументам")
	;
	
	Если Не ЗначениеЗаполнено(ПравилаОтправкиДокументовБП) Тогда
		ПравилаОтправкиДокументовБП = "АвтоматическаяСинхронизация";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовБП) Тогда
		ДатаНачалаВыгрузкиДокументовБП = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	
	РежимСинхронизацииОрганизацийБП =
		?(ИспользоватьОтборПоОрганизациямБП, "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям", "СинхронизироватьДанныеПоВсемОрганизациям")
	;
	
	УстановитьВидимостьИДоступность();
	ПриИзмененииРежимаСинхронизацииДанных();
	ОбновитьНаименованиеКомандФормы();
	
	ПолучитьОписаниеКонтекста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РучнойОбмен = 
		?(РежимСинхронизации = "АвтоматическаяСинхронизация", Ложь, Истина)
	;
	
	Если РежимСинхронизации <> "АвтоматическаяСинхронизация" Тогда
		
		ИспользоватьОтборПоОрганизациямУНФ = Ложь;
		ОрганизацииУНФ.Очистить();
		
		ИспользоватьОтборПоВидамДокументов = Ложь;
		ВидыДокументов.Очистить();
		
	Иначе
		
		Если ОрганизацииУНФ.Количество() > 0 Тогда
			Если РежимСинхронизацииОрганизацийУНФ = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям" Тогда
				ИспользоватьОтборПоОрганизациямУНФ = Истина;
			Иначе
				ИспользоватьОтборПоОрганизациямУНФ = Ложь;
				ОрганизацииУНФ.Очистить();
			КонецЕсли;
		Иначе
			ИспользоватьОтборПоОрганизациямУНФ = Ложь;
		КонецЕсли;
		
		Если ВидыДокументов.Количество() > 0 Тогда
			Если РежимСинхронизацииДокументов = "СинхронизироватьДанныеТолькоПоВыбраннымВидамДокументов" Тогда
				ИспользоватьОтборПоВидамДокументов = Истина;
			Иначе
				ИспользоватьОтборПоВидамДокументов = Ложь;
				ВидыДокументов.Очистить();
			КонецЕсли;
		Иначе
			ИспользоватьОтборПоВидамДокументов = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОрганизацииБП.Количество() > 0 Тогда
		Если РежимСинхронизацииОрганизацийБП = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям" Тогда
			ИспользоватьОтборПоОрганизациямБП = Истина;
		Иначе
			ИспользоватьОтборПоОрганизациямБП = Ложь;
			ОрганизацииБП.Очистить();
		КонецЕсли;
	Иначе
		ИспользоватьОтборПоОрганизациямБП = Ложь;
	КонецЕсли;
	
	ПолучитьОписаниеКонтекста();
	
	Модифицированность = Ложь;
	
	Закрыть(ВыгрузитьКонтекстФормы());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораПоОрганизациям(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресТаблицыОрганизаций", ПолучитьАдресТабличнойЧасти("ОрганизацииУНФ"));
	ПараметрыФормы.Вставить("ИмяТаблицыДляЗаполнения", "ОрганизацииУНФ");
	
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаВыбораОрганизаций",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры
	
	&НаКлиенте
Процедура ОткрытьФормуОтбораПоОрганизациямБПНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресТаблицыОрганизаций", ПолучитьАдресТабличнойЧасти("ОрганизацииБП"));
	ПараметрыФормы.Вставить("ИмяТаблицыДляЗаполнения", "ОрганизацииБП");
	
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаВыбораОрганизаций",
		ПараметрыФормы,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииОрганизацийПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииОрганизацийБППриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСинхронизацииДокументовПриИзменении(Элемент)
	
	Если РежимСинхронизацииДокументов = "СинхронизироватьДанныеТолькоПоДокументамОтобраннымВручную" Тогда
		НаправлениеСинхронизации = "ОдносторонняяСинхронизация";
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораПоВидамДокументов(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидыДокументов", ПолучитьМассивОбъектовТабличнойЧасти("ВидыДокументов", "ИмяОбъектаМетаданных"));
	
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаВыбораВидовДокументов",
		ПараметрыФормы,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоОрганизациям(Команда)
	
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить отбор по организациям?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьОтборПоОрганизациямЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоОрганизациямЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ=КодВозвратаДиалога.Да Тогда
        ОрганизацииУНФ.Очистить();
        УстановитьВидимостьИДоступность();
        ОбновитьНаименованиеКомандФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоОрганизациямБП(Команда)
	
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить отбор по организациям?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьОтборПоОрганизациямБПЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоОрганизациямБПЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ=КодВозвратаДиалога.Да Тогда
        ОрганизацииБП.Очистить();
        УстановитьВидимостьИДоступность();
        ОбновитьНаименованиеКомандФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоВидамДокументов(Команда)
	
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить отбор по видам документов?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьОтборПоВидамДокументовЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоВидамДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ=КодВозвратаДиалога.Да Тогда
        ВидыДокументов.Очистить();
        УстановитьВидимостьИДоступность();
        ОбновитьНаименованиеКомандФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяСинхронизацияПриИзменении(Элемент)
	
	ПриИзмененииРежимаСинхронизацииДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура РучнаяСинхронизацияПриИзменении(Элемент)
	
	ПриИзмененииРежимаСинхронизацииДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	//Видимость отбора по организациям
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.ГруппаОтборПоОрганизациям.Видимость = Ложь;
	Иначе
		Элементы.ГруппаОтборПоОрганизациям.Видимость = Истина;
		ОтборПоОрганизациямИспользуется = РежимСинхронизацииОрганизацийУНФ = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям";
		ОтборПоОрганизациямНастроен = ОрганизацииУНФ.Количество() > 0;
		Элементы.ОткрытьФормуОтбораПоОрганизациям.Видимость = ОтборПоОрганизациямИспользуется;
		Элементы.ОчиститьОтборПоОрганизациям.Видимость = ОтборПоОрганизациямИспользуется И ОтборПоОрганизациямНастроен;
	КонецЕсли;
	
	ОтборПоОрганизациямБПИспользуется = РежимСинхронизацииОрганизацийБП = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям";
	ОтборПоОрганизациямБПНастроен = ОрганизацииБП.Количество() > 0;
	Элементы.ОткрытьФормуОтбораПоОрганизациямБП.Видимость = ОтборПоОрганизациямБПИспользуется;
	Элементы.ОчиститьОтборПоОрганизациямБП.Видимость = ОтборПоОрганизациямБПИспользуется И ОтборПоОрганизациямБПНастроен;
	
	//Видимость отбора по видам документов
	ОтборПоВидамДокументовИспользуется = РежимСинхронизацииДокументов = "СинхронизироватьДанныеТолькоПоВыбраннымВидамДокументов";
	ОтборПоВидамДокументовНастроен = ВидыДокументов.Количество() > 0;
	Элементы.ОткрытьФормуОтбораПоВидамДокументов.Видимость = ОтборПоВидамДокументовИспользуется;
	Элементы.ОчиститьОтборПоВидамДокументов.Видимость = ОтборПоВидамДокументовИспользуется И ОтборПоВидамДокументовНастроен;

КонецПроцедуры

&НаСервере
Функция ПолучитьМассивОбъектовТабличнойЧасти(ИмяТабличнойЧасти, ИмяКолонки)

	Возврат ЭтаФорма[ИмяТабличнойЧасти].Выгрузить().ВыгрузитьКолонку(ИмяКолонки);

КонецФункции

&НаСервере
Функция ПолучитьАдресТабличнойЧасти(ИмяТабличнойЧасти)
	
	ТаблицаОрганизаций = ЭтаФорма[ИмяТабличнойЧасти].Выгрузить();
	ТаблицаОрганизаций.Колонки.Добавить("Организация");
	Для каждого СтрокаТаблицы Из ТаблицаОрганизаций Цикл
		СтрокаТаблицы.Организация = СтрокаТаблицы.Представление;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОрганизаций);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	ИмяТаблицыДляЗаполнения = СтруктураПараметров.ИмяТаблицыДляЗаполнения;
	
	ЭтаФорма[ИмяТаблицыДляЗаполнения].Очистить();
	
	ТаблицаВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	Для каждого СтрокаТаблицы Из ТаблицаВыбранныхЗначений Цикл
		
		НоваяСтрока = ЭтаФорма[ИмяТаблицыДляЗаполнения].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		Если ИмяТаблицыДляЗаполнения = "ОрганизацииУНФ" 
			ИЛИ ИмяТаблицыДляЗаполнения = "ОрганизацииБП" Тогда
			НоваяСтрока.Представление = СтрокаТаблицы.Организация;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьИДоступность();
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	//Обновим заголовок выбранных организаций
	Если ОрганизацииУНФ.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = ОрганизацииУНФ.Выгрузить(Новый Структура("Использовать", Истина)).ВыгрузитьКолонку("Представление");
		НовыйЗаголовокОрганизаций = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СокращенноеПредставлениеКоллекцииЗначений(ВыбранныеОрганизации);
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации '");
		
	КонецЕсли;
	
	Элементы.ОткрытьФормуОтбораПоОрганизациям.Заголовок = НовыйЗаголовокОрганизаций;
	
	Если ОрганизацииБП.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = ОрганизацииБП.Выгрузить(Новый Структура("Использовать", Истина)).ВыгрузитьКолонку("Представление");
		НовыйЗаголовокОрганизаций = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СокращенноеПредставлениеКоллекцииЗначений(ВыбранныеОрганизации);
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации '");
		
	КонецЕсли;
	
	Элементы.ОткрытьФормуОтбораПоОрганизациямБП.Заголовок = НовыйЗаголовокОрганизаций;
	
	//Обновим заголовок выбранных видов документов
	Если ВидыДокументов.Количество() > 0 Тогда
		
		ВыбранныеВидыДокументов = ВидыДокументов.Выгрузить().ВыгрузитьКолонку("Представление");
		НовыйЗаголовокВидовДокументов = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СокращенноеПредставлениеКоллекцииЗначений(ВыбранныеВидыДокументов);
		
	Иначе
		
		НовыйЗаголовокВидовДокументов = НСтр("ru = 'Выбрать виды документов '");
		
	КонецЕсли;
	
	Элементы.ОткрытьФормуОтбораПоВидамДокументов.Заголовок = НовыйЗаголовокВидовДокументов;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеКонтекста()
	
	ОписаниеКонтекста = (""
		+ СформироватьОписаниеПравилОтправкиУНФ()
		+ Символы.ПС + Символы.ПС
		+ СформироватьОписаниеПравилОтправкиБП()
	);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеПравилОтправкиУНФ()

	ТекстОписания = НСтр("ru = 'Правила отправки данных из программы ""Управление небольшой фирмой"" :'") + Символы.ПС;
	
	ТекстОписания = ТекстОписания + НСтр("ru = 'Вся нормативно-справочная информация автоматически регистрируется к отправке;'");
	
	Если РучнойОбмен Тогда
		
		ТекстОписания = НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует документы к отправке;'");
		
	Иначе
		
		Если ИспользоватьОтборПоВидамДокументов Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы автоматически регистрируются к отправке:'");
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Все документы автоматически регистрируются к отправке:'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовУНФ) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'начиная с %ДатаНачала%'");
			ТекстОписания = СтрЗаменить(ТекстОписания,"%ДатаНачала%", Формат(ДатаНачалаВыгрузкиДокументовУНФ, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		Если ИспользоватьОтборПоОрганизациямУНФ Тогда
			КоллекцияЗначений = ОрганизацииУНФ.Выгрузить(Новый Структура("Использовать", Истина)).ВыгрузитьКолонку("Представление");
			ПредставлениеКоллекции = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'с отбором по организациям: %ПредставлениеКоллекции%'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'по всем организациям'");
		КонецЕсли;
		
		Если ИспользоватьОтборПоВидамДокументов Тогда
			КоллекцияЗначений = ВидыДокументов.Выгрузить().ВыгрузитьКолонку("Представление");
			ПредставлениеКоллекции = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'с отбором по видам документов: %ПредставлениеКоллекции%'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		КонецЕсли;
		
	КонецЕсли;
	
	Если АвтоматическиЗачитыватьАвансы Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Авансы автоматически зачитываются при переносе документов в ""Бухгалтерию предприятия""'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеПравилОтправкиБП()

	ТекстОписания = НСтр("ru = 'Правила отправки данных из программы ""Бухгалтерия предприятия"" :'") + Символы.ПС;
	
	ТекстОписания = ТекстОписания + НСтр("ru = 'Вся нормативно-справочная информация автоматически регистрируется к отправке;'");
	
	Если ПравилаОтправкиДокументовБП = "НеСинхронизировать" Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы отправляться не будут;'");
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Все документы автоматически регистрируются к отправке:'");
		
		Если ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовБП) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'начиная с %ДатаНачала%'");
			ТекстОписания = СтрЗаменить(ТекстОписания,"%ДатаНачала%", Формат(ДатаНачалаВыгрузкиДокументовБП, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		Если ИспользоватьОтборПоОрганизациямБП Тогда
			КоллекцияЗначений = ОрганизацииБП.Выгрузить(Новый Структура("Использовать", Истина)).ВыгрузитьКолонку("Представление");
			ПредставлениеКоллекции = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'с отбором по организациям: %ПредставлениеКоллекции%'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'по всем организациям'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОписания;

КонецФункции

&НаКлиенте
Функция ВыгрузитьКонтекстФормы()
	
	МассивИменОбъектовМетаданных = Новый Массив;
	МассивПредставлений = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ВидыДокументов Цикл
		МассивИменОбъектовМетаданных.Добавить(СтрокаТаблицы.ИмяОбъектаМетаданных);
		МассивПредставлений.Добавить(СтрокаТаблицы.Представление);
	КонецЦикла;
	
	СтруктураОтбораПоВидамДокументов = Новый Структура;
	СтруктураОтбораПоВидамДокументов.Вставить("ИмяОбъектаМетаданных", МассивИменОбъектовМетаданных);
	СтруктураОтбораПоВидамДокументов.Вставить("Представление", МассивПредставлений);
	
	//Сохраним введенные значения этой программы
	СтруктураНастроек = ЭтотОбъект.Контекст.НастройкаОтборовНаУзле;
	СоответсвующиеРеквизиты = ЭтотОбъект.ИменаРеквизитов;
	
	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
		
		Если СоответсвующиеРеквизиты.Свойство(ЭлементНастройки.Ключ) Тогда
			
			ИмяРеквизита = СоответсвующиеРеквизиты[ЭлементНастройки.Ключ];
			
		Иначе
			
			ИмяРеквизита = ЭлементНастройки.Ключ;
			
		КонецЕсли;
		
		РеквизитФормы = ЭтотОбъект[ИмяРеквизита];
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			
			ИмяТаблицы = ЭлементНастройки.Ключ;
			
			Таблица = Новый Массив;
			
			Для Каждого Элемент Из ЭтотОбъект[ИмяРеквизита] Цикл
				
				СтрокаТаблицы = Новый Структура("Использовать, Представление, УникальныйИдентификаторСсылки");
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
				
				Таблица.Добавить(СтрокаТаблицы);
				
			КонецЦикла;
			
			СтруктураНастроек.Вставить(ИмяТаблицы, Таблица);
			
		Иначе
			
			СтруктураНастроек.Вставить(ЭлементНастройки.Ключ, ЭтотОбъект[ИмяРеквизита]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураНастроек.ВидыДокументов		   = СтруктураОтбораПоВидамДокументов;
	ЭтотОбъект.Контекст.НастройкаОтборовНаУзле = СтруктураНастроек;
	
	//Сохраним введенные значения другой программы
	СтруктураНастроек = ЭтотОбъект.Контекст.НастройкаОтборовНаУзлеБазыКорреспондента;
	СоответсвующиеРеквизиты = ЭтотОбъект.ИменаРеквизитовБазыКорреспондента;
	
	Для Каждого ЭлементНастройки Из СтруктураНастроек Цикл
		
		Если СоответсвующиеРеквизиты.Свойство(ЭлементНастройки.Ключ) Тогда
			
			ИмяРеквизита = СоответсвующиеРеквизиты[ЭлементНастройки.Ключ];
			
		Иначе
			
			ИмяРеквизита = ЭлементНастройки.Ключ;
			
		КонецЕсли;
		
		РеквизитФормы = ЭтотОбъект[ИмяРеквизита];
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			
			ИмяТаблицы = ЭлементНастройки.Ключ;
			
			Таблица = Новый Массив;
			
			Для Каждого Элемент Из ЭтотОбъект[ИмяРеквизита] Цикл
				
				СтрокаТаблицы = Новый Структура("Использовать, Представление, УникальныйИдентификаторСсылки");
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
				
				Таблица.Добавить(СтрокаТаблицы);
				
			КонецЦикла;
			
			СтруктураНастроек.Вставить(ИмяТаблицы, Таблица);
			
		Иначе
			
			СтруктураНастроек.Вставить(ЭлементНастройки.Ключ, ЭтотОбъект[ИмяРеквизита]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтотОбъект.Контекст.НастройкаОтборовНаУзлеБазыКорреспондента = СтруктураНастроек;
	
	ЭтотОбъект.Контекст.Вставить("ОписаниеКонтекста", ЭтотОбъект.ОписаниеКонтекста);
	ЭтотОбъект.Контекст.Вставить("ВидыДокументов", СтруктураОтбораПоВидамДокументов);
	
	Возврат ЭтотОбъект.Контекст;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииРежимаСинхронизацииДанных()

	Если РежимСинхронизации = "АвтоматическаяСинхронизация" Тогда
		
		Элементы.ГруппаУсловияОтправкиДанных.Доступность = Истина;
		
	Иначе
		
		Элементы.ГруппаУсловияОтправкиДанных.Доступность = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуВидовДокументовИзКонтекста();

	ТаблицаВидовДокументов = ВидыДокументов.Выгрузить().СкопироватьКолонки();
	
	Если ТипЗнч(Параметры.Настройки) <> Тип("Структура")
		ИЛИ Не Параметры.Настройки.Свойство("ВидыДокументов")
		ИЛИ ТипЗнч(Параметры.Настройки.ВидыДокументов) <> Тип("Структура") Тогда
		
		Возврат ТаблицаВидовДокументов;
	КонецЕсли;
	
	СтруктураВидыДокументов = Параметры.Настройки.ВидыДокументов;
	
	КоличествоСтрок = СтруктураВидыДокументов.ИмяОбъектаМетаданных.Количество();
	УстановитьКоличествоСтрокТаблицы(ТаблицаВидовДокументов, КоличествоСтрок);
	ТаблицаВидовДокументов.ЗагрузитьКолонку(СтруктураВидыДокументов.ИмяОбъектаМетаданных, "ИмяОбъектаМетаданных");
	
	КоличествоСтрок = СтруктураВидыДокументов.Представление.Количество();
	УстановитьКоличествоСтрокТаблицы(ТаблицаВидовДокументов, КоличествоСтрок);
	ТаблицаВидовДокументов.ЗагрузитьКолонку(СтруктураВидыДокументов.Представление, "Представление");
	
	Параметры.Настройки.Удалить("ВидыДокументов");
	
	Возврат ТаблицаВидовДокументов;
	
КонецФункции

&НаСервере
Процедура УстановитьКоличествоСтрокТаблицы(Таблица, КоличествоСтрок)
	
	Пока Таблица.Количество() < КоличествоСтрок Цикл
		
		Таблица.Добавить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтруктураСоответствияНастройкиОтборовРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", "ДатаНачалаВыгрузкиДокументовУНФ");
	СтруктураНастроек.Вставить("ИспользоватьОтборПоВидамДокументов", "ИспользоватьОтборПоВидамДокументов");
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", "ИспользоватьОтборПоОрганизациямУНФ");
	СтруктураНастроек.Вставить("РучнойОбмен", "РучнойОбмен");
	СтруктураНастроек.Вставить("ВидыДокументов", "ВидыДокументов");
	СтруктураНастроек.Вставить("Организации", "ОрганизацииУНФ");
	СтруктураНастроек.Вставить("АвтоматическиЗачитыватьАвансы", "АвтоматическиЗачитыватьАвансы");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция СтруктураСоответствияНастройкиОтборовКорреспондентаРеквизитамФормы()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",    "ДатаНачалаВыгрузкиДокументовБП");
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", "ИспользоватьОтборПоОрганизациямБП");
	СтруктураНастроек.Вставить("Организации",                     "ОрганизацииБП");
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",       "ПравилаОтправкиДокументовБП");
	СтруктураНастроек.Вставить("РежимВыгрузкиДокументов",         "РежимВыгрузкиДокументовБП");
	
	Возврат СтруктураНастроек;
	
КонецФункции





