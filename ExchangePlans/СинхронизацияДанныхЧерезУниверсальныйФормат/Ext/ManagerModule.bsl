#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииБсп

#Область НастройкиПоУмолчанию

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИмяФормы             - Строка - имя формы
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	СтруктураТабличнойЧастиВидыДокументов = Новый Структура;
	СтруктураТабличнойЧастиВидыДокументов.Вставить("ТипДокумента", Новый Массив);
	СтруктураТабличнойЧастиВидыДокументов.Вставить("ИмяОбъектаМетаданных", Новый Массив);
	СтруктураТабличнойЧастиВидыДокументов.Вставить("Представление", Новый Массив);
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоВидамДокументов", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("РучнойОбмен", Ложь);
	СтруктураНастроек.Вставить("ВидыДокументов", СтруктураТабличнойЧастиВидыДокументов);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("АвтоматическиЗачитыватьАвансы", Ложь);
	СтруктураНастроек.Вставить("ВерсияФорматаОбмена", "1.3");
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИмяФормы             - Строка - имя формы
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация_Ключ", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",    НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("Организации",                     СтруктураТабличнойЧастиОрганизации);
	СтруктураНастроек.Вставить("ПравилаОтправкиДокументов",       "АвтоматическаяСинхронизация");
	СтруктураНастроек.Вставить("ВерсияФорматаОбмена",             "1.3");
	СтруктураНастроек.Вставить("ВариантНастройки",                "ОбменУТ11");
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИмяФормы             - Строка - имя формы
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИмяФормы             - Строка - имя формы
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
// 
// Возвращаемое значение:
//      Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки = "") Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		СтруктураНастроек.Вставить("СтатьяЗатрат",                     "");
		СтруктураНастроек.Вставить("СтатьяЗатрат_Ключ",                "");
		СтруктураНастроек.Вставить("СтатьяПрочихДоходовРасходов",      "");
		СтруктураНастроек.Вставить("СтатьяПрочихДоходовРасходов_Ключ", "");
		СтруктураНастроек.Вставить("УслугаПоВознаграждению",           "");
		СтруктураНастроек.Вставить("УслугаПоВознаграждению_Ключ",      "");
		СтруктураНастроек.Вставить("СпособОтраженияРасходов",          "");
		СтруктураНастроек.Вставить("СпособОтраженияРасходов_Ключ",     "");
		
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область ВыводОписаний

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Любая программа с поддержкой универсального формата данных'");
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки = "") Экспорт
	
	ПоясняющийТекст = "";
	
	Если ИдентификаторНастройки = "ОбменБП30" Тогда
		ПоясняющийТекст = НСтр("ru = 'Данная настройка позволит синхронизировать данные между программами ""1С:Управление небольшой фирмой, редакция 1.0"",
		|и ""Бухгалтерия предприятия, редакция 3.0"".  В синхронизации участвуют документы и нормативно-справочной информация.'");
	Иначе
		ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные между любыми программами, поддерживающими универсальный формат обмена ""Enterprise Data"".'");
	КонецЕсли;
	
	Возврат ПоясняющийТекст;
	
КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки = "") Экспорт
	Возврат "ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаПодробнойИнформацииПоОбмену";
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//      НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                           полученная при помощи функции НастройкаОтборовНаУзле().
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//     Строка - описание ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	ТекстОписания = НСтр("ru = 'Вся нормативно-справочная информация автоматически регистрируется к отправке;'");
	
	Если НастройкаОтборовНаУзле.РучнойОбмен Тогда
		
		ТекстОписания = НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует документы к отправке;'");
		
	Иначе
		
		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоВидамДокументов Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы автоматически регистрируются к отправке:'");
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Все документы автоматически регистрируются к отправке:'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'начиная с %ДатаНачала%'");
			ТекстОписания = СтрЗаменить(ТекстОписания,"%ДатаНачала%", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
			КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'с отбором по организациям: %ПредставлениеКоллекции%'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'по всем организациям'");
		КонецЕсли;
		
		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоВидамДокументов Тогда
			КоллекцияЗначений = НастройкаОтборовНаУзле.ВидыДокументов.Представление;
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'с отбором по видам документов: %ПредставлениеКоллекции%'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.АвтоматическиЗачитыватьАвансы Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Авансы автоматически зачитываются при переносе документов в ""Бухгалтерию предприятия""'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//      ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                              полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Строка - описание для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//      НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                           полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Строка - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	Возврат "";

	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//      ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                              полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
//      ВерсияКорреспондента - Строка - версия корреспондента
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
// Возвращаемое значение:
//      Строка - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки = "") Экспорт
	
	ТекстОписания = "";
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ТекстОписания = НСтр("ru = 'Основная статья затрат для подстановки в документы по умолчанию: %Значение%';");
		Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяЗатрат) Тогда
			ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяЗатрат));
		Иначе
			ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru = 'не указана'"));
		КонецЕсли;
		
		ТекстОписания = ТекстОписания + Символы.ПС + Символы.ПС + НСтр("ru = 'Основная статья прочих доходов и расходов для подстановки в документы по умолчанию: %Значение%';");
		Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяПрочихДоходовРасходов) Тогда
			ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяПрочихДоходовРасходов));
		Иначе
			ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru = 'не указана'"));
		КонецЕсли;
		
		ТекстОписания = ТекстОписания + Символы.ПС + Символы.ПС + НСтр("ru = 'Услуга по комиссионному вознаграждению для подстановки в документ Отчет комитенту по умолчанию: %Значение%';");
		Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.УслугаПоВознаграждению) Тогда
			ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.УслугаПоВознаграждению));
		Иначе
			ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru = 'не указана'"));
		КонецЕсли;
		
		ТекстОписания = ТекстОписания + Символы.ПС + Символы.ПС + НСтр("ru = 'Способ отражения расходов для заполнения документа Передача материалов в эксплуатацию: %Значение%';");
		Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СпособОтраженияРасходов) Тогда
			ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", Строка(ЗначенияПоУмолчаниюНаУзле.СпособОтраженияРасходов));
		Иначе
			ТекстОписания = СтрЗаменить(ТекстОписания, "%Значение%", НСтр("ru = 'не указан'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

#КонецОбласти

#Область КонстантыИПроверкаПараметровУчета

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	Возврат "";
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	Возврат "";
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределяемаяНастройкаДополненияВыгрузки

// Предназначена для настройки вариантов интерактивной настройки выгрузки по сценарию узла.
// Для настройки необходимо установить значения свойств параметров в необходимые значения.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производится настройка
//     Параметры  - Структура        - Параметры для изменения. Содержит поля:
//
//         ВариантБезДополнения - Структура     - настройки типового варианта "Не добавлять".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 1.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантВсеДокументы - Структура      - настройки типового варианта "Добавить все документы за период".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 2.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантПроизвольныйОтбор - Структура - настройки типового варианта "Добавить данные с произвольным отбором".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 3.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантДополнительно - Структура     - настройки дополнительного варианта по сценарию узла.
//                                                Содержит поля:
//             Использование            - Булево            - флаг разрешения использования варианта. По умолчанию Ложь.
//             Порядок                  - Число             - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 4.
//             Заголовок                - Строка            - название варианта для отображения на форме.
//             ИмяФормыОтбора           - Cтрока            - Имя формы, вызываемой для редактирования настроек.
//             ЗаголовокКомандыФормы    - Cтрока            - Заголовок для отрисовки на форме команды открытия формы настроек.
//             ИспользоватьПериодОтбора - Булево            - флаг того, что необходим общий отбор по периоду. По умолчанию Ложь.
//             ПериодОтбора             - СтандартныйПериод - значение периода общего отбора, предлагаемого по умолчанию.
//
//             Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                            Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Можно  использовать специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки, предлагаемого по умолчанию.
//                 Отбор               - ОтборКомпоновкиДанных - отбор по умолчанию. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", необходимо использовать поле "Ссылка.Организация"
Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт
	
КонецПроцедуры

// Возвращает представление отбора для варианта дополнения выгрузки по сценарию узла.
// См. описание "ВариантДополнительно" в процедуре "НастроитьИнтерактивнуюВыгрузку"
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого определяется представление отбора
//     Параметры  - Структура        - Характеристики отбора. Содержит поля:
//         ИспользоватьПериодОтбора - Булево            - флаг того, что необходимо использовать общий отбор по периоду.
//         ПериодОтбора             - СтандартныйПериод - значение периода общего отбора.
//         Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                        Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Могут быть использованы специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки.
//                 Отбор               - ОтборКомпоновкиДанных - поля отбора. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", будет использовано поле "Ссылка.Организация"
//
// Возвращаемое значение: 
//     Строка - описание отбора
//
Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт
	
КонецФункции

// Возвращает список организаций по таблице отбора (см "ПредставлениеОтбораИнтерактивнойВыгрузки")
// Также используется из демонстрационной формы "НастройкаВыгрузки" этого плана обмена.
//
// Параметры:
//     ТаблицаОтбора - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла. Содержит колонки:
//         ПолноеИмяМетаданных - Строка
//         ВыборПериода        - Булево
//         Период              - СтандартныйПериод
//         Отбор               - ОтборКомпоновкиДанных
//
// Возвращаемое значение:
//     СписокЗначений - значение - ссылка на организацию, представление - наименование
//
Функция ОрганизацииОтбораИнтерактивнойВыгрузки(Знач ТаблицаОтбора) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ТаблицаОтбора.Количество()=0 Или ТаблицаОтбора[0].Отбор.Элементы.Количество()=0 Тогда
		// Нет данных отбора
		Возврат Результат;
	КонецЕсли;
		
	// Мы знаем состав отбора, так как помещали туда сами - или из "НастроитьИнтерактивнуюВыгрузку"
	// или как результат редактирования в форме
	
	СтрокаДанных = ТаблицаОтбора[0].Отбор.Элементы[0];
	Отобранные   = СтрокаДанных.ПравоеЗначение;
	ТипКоллекции = ТипЗнч(Отобранные);
	
	Если ТипКоллекции=Тип("СписокЗначений") Тогда
		Для Каждого Элемент Из Отобранные Цикл
			ДобавитьСписокОрганизций(Результат, Элемент.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипКоллекции=Тип("Массив") Тогда
		ДобавитьСписокОрганизций(Результат, Отобранные);
		 
	ИначеЕсли ТипКоллекции=Тип("СправочникСсылка.Организации") Тогда
		Если Результат.НайтиПоЗначению(Отобранные)=Неопределено Тогда
			Результат.Добавить(Отобранные, Отобранные.Наименование);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в список органинизаций коллекцию
//
// Параметры:
//     Список      - СписокЗначений - дополняемый список
//     Организации - коллекция организаций
// 
Процедура ДобавитьСписокОрганизций(Список, Знач Организации)
	
	Для Каждого Организация Из Организации Цикл
		
		Если ТипЗнч(Организация)=Тип("Массив") Тогда
			ДобавитьСписокОрганизций(Список, Организация);
			Продолжить;
		КонецЕсли;
		
		Если Список.НайтиПоЗначению(Организация)=Неопределено Тогда
			Список.Добавить(Организация, Организация.Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДополнительныеДанныеДляКорреспондента(ДополнительныеДанные) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию
// 
// Параметры:
//      Настройки - Структура - Сеодержит настройки по умолчанию
//      ИдентификаторНастройки          - Строка - имя дополнительной настройки обмена
//
Процедура ОпределитьНастройки(Настройки, ИдентификаторНастройки = "") Экспорт
	
	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Ложь;
	Настройки.ПутьКФайлуКомплектаПравилНаПользовательскомСайте = "";
	Настройки.ПутьКФайлуКомплектаПравилВКаталогеШаблонов = "\1c\smallbusiness";
	
	Если ИдентификаторНастройки = "ОбменУниверсальный" Тогда
		Настройки.Вставить("ЗаголовокКомандыДляСозданияНовогоОбменаДанными", НСтр("ru = 'Другая программа'"));
		Настройки.Вставить("ЗаголовокПомощникаСозданияОбмена",               НСтр("ru = 'Настройка синхронизации данных через универсальный формат'"));
		Настройки.Вставить("ЗаголовокУзлаПланаОбмена",                       НСтр("ru = 'Синхронизация данных через универсальный формат'"));
		Настройки.Вставить("НаименованиеКонфигурацииКорреспондента",         НСтр("ru = 'Другая программа'"));
	ИначеЕсли ИдентификаторНастройки = "ОбменБП30" Тогда
		Настройки.Вставить("ЗаголовокКомандыДляСозданияНовогоОбменаДанными", НСтр("ru = 'Бухгалтерия предприятия, редакция 3.0'"));
		Настройки.Вставить("ЗаголовокПомощникаСозданияОбмена",               НСтр("ru = 'Настройка синхронизации с программой ""Бухгалтерия предприятия, редакция. 3.0""'"));
		Настройки.Вставить("ЗаголовокУзлаПланаОбмена",                       НСтр("ru = 'Синхронизация с программой ""Бухгалтерия предприятия, редакция 3.0""'"));
		Настройки.Вставить("НаименованиеКонфигурацииКорреспондента",         НСтр("ru = 'Бухгалтерия предприятия, редакция 3.0'"));
	Иначе
		Настройки.Вставить("НаименованиеКонфигурацииКорреспондента",         НСтр("ru = 'Через универсальный формат обмена'"));
	КонецЕсли;
	
	Настройки.ВариантыНастроекОбмена = МассивДоступныхВариантовНастроекОбмена();
	Настройки.Вставить("ЭтоПланОбменаXDTO", Истина);
	
КонецПроцедуры

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат НСтр("ru = 'Синхронизация данных через универсальный формат'");
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

//Возвращает возможность использование данного плана обмена в модели сервсиа
 //
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	Возврат Результат;
	
КонецФункции

//Возвращает режим запуска, в случае интерактивного инициирования синхронизации
//Возвращаемые значения АвтоматическаяСинхронизация Или ИнтерактивнаяСинхронизация
//На основании этих значений запускается либо помощник интерактивного обмена, либо автообмен
Функция РежимЗапускаСинхронизацииДанных(УзелИнформационнойБазы) Экспорт

	Если УзелИнформационнойБазы.РучнойОбмен Тогда
		
		Возврат "ИнтерактивнаяСинхронизация";
		
	Иначе
		
		Возврат "АвтоматическаяСинхронизация";
		
	КонецЕсли;
	
КонецФункции

//Возвращает сценарий работы помощника интерактивного сопостовления
//НеОтправлять, ИнтерактивнаяСинхронизацияДокументов, ИнтерактивнаяСинхронизацияСправочников либо пустую строку
Функция ИнициализироватьСценарийРаботыПомощникаИнтерактивногоОбмена(УзелИнформационнойБазы) Экспорт
	
	Если УзелИнформационнойБазы.РучнойОбмен Тогда
		
		Возврат "ИнтерактивнаяСинхронизацияДокументов";
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает имя обработки выгрузки данных
//
Функция ИмяОбработкиВыгрузки() Экспорт
	
	// Не используется. Вызывается только в обработке КОИБ, которая не применяется для данного плана обмена
	Возврат "";
	
КонецФункции // ИмяОбработкиВыгрузки()

// Функция возвращает имя обработки загрузки 
//
Функция ИмяОбработкиЗагрузки() Экспорт
	
	// Не используется. Вызывается только в обработке КОИБ, которая не применяется для данного плана обмена
	Возврат "";
	
КонецФункции // ИмяОбработкиЗагрузки()

Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	Возврат "РежимВыгрузкиПриНеобходимости";
	
КонецФункции

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат "УправлениеНебольшойФирмой";
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
//  Параметры:
// ВерсияКорреспондента (только чтение) – Строка – версия конфигурации корреспондента, например, "2.1.5.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
КонецПроцедуры

// Обработчик события при отправке данных узла-отправителя.
// Событие возникает при отправке данных узла-отправителя из текущей базы в корреспондент,
// до помещения данных узла в сообщения обмена.
// В обработчике можно изменить отправляемые данные или вовсе отказаться от отправки данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется отправка данных.
// Игнорировать – Булево – признак отказа от выгрузки данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то отправка данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при получении данных узла-отправителя.
// Событие возникает при получении данных узла-отправителя,
// когда данные узла прочитаны из сообщения обмена, но не записаны в информационную базу.
// В обработчике можно изменить полученные данные или вовсе отказаться от получения данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется получение данных.
// Игнорировать – Булево – признак отказа от получения данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то получение данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2) Экспорт
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

Функция МассивДоступныхВариантовНастроекОбмена()
	
	МассивНастроек = Новый Массив();
	
	МассивНастроек.Добавить("ОбменБП30");
	МассивНастроек.Добавить("ОбменУниверсальный");
	
	Возврат МассивНастроек;
	
КонецФункции

// Определяет массив узлов на которых будет произведена регистрация объекта
//
Функция ОпределитьМассивПолучателей(Выгрузка, Объект, Получатели) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Выгрузка Тогда
		Возврат Получатели;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("УзлыДляРегистрации")
		И ТипЗнч(Объект.ДополнительныеСвойства.УзлыДляРегистрации) = Тип("Массив") Тогда
		
		Получатели = Объект.ДополнительныеСвойства.УзлыДляРегистрации;
		
		Возврат Получатели;
	КонецЕсли;
	
	МассивИсключаемыхУзлов = Новый Массив;
	
	Для Каждого Узел Из Получатели Цикл
		
		Если Узел.РучнойОбмен Тогда
			
			МассивИсключаемыхУзлов.Добавить(Узел);
			
		ИначеЕсли Узел.ИспользоватьОтборПоВидамДокументов Тогда
			
			Если Узел.ВидыДокументов.Найти(Объект.Метаданные().Имя, "ИмяОбъектаМетаданных") = Неопределено Тогда
				МассивИсключаемыхУзлов.Добавить(Узел);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Получатели = ОбщегоНазначенияКлиентСервер.СократитьМассив(Получатели, МассивИсключаемыхУзлов);
	
	Возврат Получатели;
	
КонецФункции

// Регистрирует документы, связанные с переданным документом по ссылке.
//
Процедура ЗарегистрироватьСвязанныеДокументы(Выгрузка, Объект, ПРО, Получатели) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Выгрузка
		ИЛИ Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗарегистрированныхДокументов = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ЗарегистрированныеДокументы", МассивЗарегистрированныхДокументов);
	Если ТипЗнч(МассивЗарегистрированныхДокументов) <> Тип("Массив") Тогда
		МассивЗарегистрированныхДокументов = Новый Массив;
	КонецЕсли;
	
	Если МассивЗарегистрированныхДокументов.Найти(Объект.Ссылка) = Неопределено Тогда
		МассивЗарегистрированныхДокументов.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	МассивУзловДляРегистрации = Новый Массив;
	Для каждого УзелПолучатель Из Получатели Цикл
		Если УзелПолучатель.ИспользоватьОтборПоВидамДокументов
			ИЛИ УзелПолучатель.РучнойОбмен Тогда
			МассивУзловДляРегистрации.Добавить(УзелПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныеДокументы = Новый ТаблицаЗначений;
	СвязанныеДокументы.Колонки.Добавить("Документ");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ВыданныеАвансы Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Оплаты Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ДополнительныеРасходы") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.ДокументПоступления;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя")
		И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Покупатели Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.СчетФактура;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОПереработке") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетПереработчика") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеВКассу") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходИзКассы") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактура") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = Объект.ДокументОснование;
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ДокументыОснования Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.ДокументОснование;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = Объект.ДокументОснование;
		КонецЕсли;
		
	КонецЕсли;
	
	СвязанныеДокументы.Свернуть("Документ");
	Если СвязанныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из СвязанныеДокументы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивЗарегистрированныхДокументов.Найти(ДокументОбъект.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("УзлыДляРегистрации", МассивУзловДляРегистрации);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗарегистрированныеДокументы", МассивЗарегистрированныхДокументов);
		ОбменДаннымиСобытия.ВыполнитьПравилаРегистрацииДляОбъекта(ДокументОбъект, ПРО.ИмяПланаОбмена, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезФормат

Функция ФорматОбмена() Экспорт
	
	Возврат "http://v8.1c.ru/edi/edi_stnd/EnterpriseData";
	
КонецФункции

Процедура ПолучитьВерсииФорматаОбмена(ВерсииФормата) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	| СинхронизацияДанныхЧерезУниверсальныйФормат.ПутьКМенеджеруОбмена
	|ИЗ
	| ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	| СинхронизацияДанныхЧерезУниверсальныйФормат.ПутьКМенеджеруОбмена <> """"");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсииФормата.Вставить("1.3", ВнешниеОбработки.Создать(Выборка.ПутьКМенеджеруОбмена));
	Иначе
		ВерсииФормата.Вставить("1.3", МенеджерОбменаЧерезУниверсальныйФормат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПереходНаУниверсальныйФормат

// Функция-обертка, выполняет подготовку параметров и вызывает основную функцию 
// (см. ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат).
// Вызывается при первом обмене по настройке синхронизации данных через универсальный формат
//  через COM-соединение.
//
// Параметры:
//  ПараметрыНастройкиСинхронизацииДанных - Структура - сведения о настройке синхронизации, с которой происходит переход: 
//  * Код - Строка, Код настройки.
//  * ВариантНастройки - Строка, вариант настройки синхронизации данных через универсальный формат базы-корреспондента.
//  * Ошибка - булево, признак ошибки при выполнении функции.
//  * СообщениеОбОшибке - строка, текст сообщения об ошибке.
//
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода),
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода)
Функция ПереходНаСинхронизациюЧерезУниверсальныйФорматВнешнееСоединение(ПараметрыНастройкиСинхронизацииДанных) Экспорт
	ВариантНастройки = ПараметрыНастройкиСинхронизацииДанных.ВариантНастройки;
	Если НЕ ЗначениеЗаполнено(ВариантНастройки) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		ТекстСообщения = НСтр("ru = 'Не указан вариант настройки синхронизации в базе-корреспонденте'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = ТекстСообщения;
		Возврат Неопределено;
	КонецЕсли;
	ИмяПланаОбменаСтаройНастройки = ИмяПланаОбменаСтаройНастройки(ВариантНастройки);
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбменаСтаройНастройки) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru = 'Передан неизвестный вариант настройки синхронизации: %1.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ВариантНастройки);

		Возврат Неопределено;
	КонецЕсли;
	
	Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбменаСтаройНастройки) = Неопределено Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru = 'Не обнаружен план обмена, соответствующий варианту настройки: %1.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ВариантНастройки);
		Возврат Неопределено;
	КонецЕсли;
	
	КодНастройки = ПараметрыНастройкиСинхронизацииДанных.Код;
	НастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбменаСтаройНастройки].НайтиПоКоду(КодНастройки);
	Если НЕ ЗначениеЗаполнено(НастройкаСинхронизацииДанных) Тогда
		ПараметрыНастройкиСинхронизацииДанных.Ошибка = Истина;
		НСтрока = НСтр("ru = 'Не найден узел корреспондента для плана обмена: %1, код: %2.'");
		ПараметрыНастройкиСинхронизацииДанных.СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
												ИмяПланаОбменаСтаройНастройки, 
												КодНастройки);

		Возврат Неопределено;
	КонецЕсли;
	Возврат ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
КонецФункции

// Функция-обертка, выполняет подготовку параметров и вызывает основную функцию 
// (см. ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат).
// Вызывается при транспорте Интернет: корреспондент выполнил переход на универсальный формат,
//  а текущая ИБ нет. 
//
// Параметры:
//  КодУзла - Строка, Код настройки.
//  Ошибка - булево, признак ошибки при выполнении функции.
//
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода),
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода)
Функция ПереходНаСинхронизациюЧерезУниверсальныйФорматИнтернет(КодУзла, Ошибка) Экспорт
	ИмяПланаОбменаСтаройНастройки = "";
	Если Метаданные.ПланыОбмена.Найти("ОбменУправлениеНебольшойФирмойБухгалтерия30") <> Неопределено Тогда
		ИмяПланаОбменаДляПерехода = "ОбменУправлениеНебольшойФирмойБухгалтерия30";
	КонецЕсли;
	НастройкаСинхронизацииЧерезУниверсальныйФормат = Неопределено;
	Если ИмяПланаОбменаДляПерехода <> "" Тогда
		НастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбменаДляПерехода].НайтиПоКоду(КодУзла);
		Если НЕ НастройкаСинхронизацииДанных.Пустая() Тогда
			ПланОбменаМенеджер = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат;
			Попытка
				НастройкаСинхронизацииЧерезУниверсальныйФормат = 
					ПланОбменаМенеджер.ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
				УзелНеНайден = Ложь;
			Исключение
				Ошибка = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат НастройкаСинхронизацииЧерезУниверсальныйФормат;
КонецФункции

// Функция возвращает имя плана обмена старой настройки,
//  соответствующее варианту настройки в синхронизации данных через универсальный формат
//
// Параметр: ВариантНастройки (строка)
// Возвращаемое значение - строка (имя плана обмена)
Функция ИмяПланаОбменаСтаройНастройки(ВариантНастройки) Экспорт
	Если СокрЛП(ВариантНастройки) = "ОбменБП30" Тогда
		Возврат "ОбменУправлениеНебольшойФирмойБухгалтерия30";
	КонецЕсли;
	Возврат "";
КонецФункции

// Функция выполняет переход с существующей настройки синхронизации данных 
//  на настройку синхронизации данных через универсальный формат.
//
// Параметры:
//  НастройкаСинхронизацииДанных - Ссылка на настройку синхронизации данных, с которой выполняется переход.
// 
// Возвращаемое значение:
//  Ссылка на настройку синхронизации данных через универсальный формат (при успешном выполнении перехода).
//  Неопределено (в случае критичных ошибок, возникших в процессе перехода).
Функция ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных) Экспорт
	НастройкаСинхронизацииЧерезУниверсальныйФормат = Неопределено;
	КодНастройки = НастройкаСинхронизацииДанных.Код;
	ИмяПланаОбменаСтаройНастройки = НастройкаСинхронизацииДанных.Метаданные().Имя;
	
	ОбновитьПовторноИспользуемыеЗначения();
	// Поиск или создание настройки синхронизации через универсальный формат.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
	|ИЗ 
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ 
	|	НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел 
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.Код = &КодНастройки";
	Запрос.УстановитьПараметр("КодНастройки", КодНастройки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ИмяСобытияЖурналРегистрации = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат'");
	
	Сообщение = НСтр("ru = 'Начало перехода'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	Сообщение = НСтр("ru = 'Создание новой настройки синхронизации данных'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	
	НачатьТранзакцию();
	
	Попытка
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НоваяНастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			// Создание новой настройки.
			НоваяНастройкаОбъект = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.СоздатьУзел();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяНастройкаОбъект, НастройкаСинхронизацииДанных,,
								"НомерОтправленного, НомерПринятого, ПометкаУдаления");
		
		ВариантНастройки = "";
		Если ИмяПланаОбменаСтаройНастройки = "ОбменУправлениеНебольшойФирмойБухгалтерия30" Тогда
			ВариантНастройки = "ОбменБП30";
		КонецЕсли;
		НоваяНастройкаОбъект.ВариантНастройки = ВариантНастройки;
		
		МетаданныеСтаройНастройки = Метаданные.ПланыОбмена[ИмяПланаОбменаСтаройНастройки];
		
		Если МетаданныеСтаройНастройки.ТабличныеЧасти.Найти("Организации") <> Неопределено Тогда
			НоваяНастройкаОбъект.Организации.Очистить();
			Для Каждого СтрокаОрганизации Из НастройкаСинхронизацииДанных.Организации Цикл
				НоваяСтрокаОрганизации = НоваяНастройкаОбъект.Организации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОрганизации, СтрокаОрганизации);
			КонецЦикла;
		КонецЕсли;
		
		Если МетаданныеСтаройНастройки.ТабличныеЧасти.Найти("ВидыДокументов") <> Неопределено Тогда
			НоваяНастройкаОбъект.ВидыДокументов.Очистить();
			Для Каждого СтрокаВидыДокументов Из НастройкаСинхронизацииДанных.ВидыДокументов Цикл
				НоваяСтрокаВидыДокументов = НоваяНастройкаОбъект.ВидыДокументов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВидыДокументов, СтрокаВидыДокументов);
			КонецЦикла;
		КонецЕсли;
		
		ДоступныеВерсииФормата = Новый Соответствие;
		ПолучитьВерсииФорматаОбмена(ДоступныеВерсииФормата);
		Для Каждого КлючИЗначение Из ДоступныеВерсииФормата Цикл
			НоваяНастройкаОбъект.ВерсияФорматаОбмена = КлючИЗначение.Ключ;
		КонецЦикла;
		НоваяНастройкаОбъект.Записать();
		НастройкаСинхронизацииЧерезУниверсальныйФормат = НоваяНастройкаОбъект.Ссылка;
		
		// Регистрация изменений.
		Сообщение = НСтр("ru = 'Регистрация изменений'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ВыполнитьРегистрациюИзменений(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		// Настройки транспорта.
		Сообщение = НСтр("ru = 'Заполнение настроек транспорта сообщений'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ВыгружатьСообщениеПослеПерехода = Ложь;
		ОбработатьНастройкиТранспортаСообщенийОбмена(НастройкаСинхронизацииДанных, 
											НастройкаСинхронизацииЧерезУниверсальныйФормат, 
											ВыгружатьСообщениеПослеПерехода);
		
		// Дата запрета изменения.
		Сообщение = НСтр("ru = 'Заполнение настроек запрета изменения данных'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ОбработатьДатыЗапретаИзменения(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		// Сценарии обменов данными.
		Сообщение = НСтр("ru = 'Заполнение сценариев обмена данными'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ОбработатьСценарииОбменовДанными(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		//  ПубличныеИдентификаторыСинхронизируемыхОбъектов и ДанныеОбъектовДляРегистрацииВОбменах.
		ОбработатьСоответствияОбъектовИнформационныхБаз(НастройкаСинхронизацииДанных, 
														НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		// Заполнение настроек главного узла.
		Сообщение = НСтр("ru = 'Заполнение настроек главного узла'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

		ЭтотУзелСсылка = ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел();
		КодЭтогоУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзелСсылка, "Код");
		Если НЕ ЗначениеЗаполнено(КодЭтогоУзла) Тогда
			СтарыйГлавныйУзел = ПланыОбмена[ИмяПланаОбменаСтаройНастройки].ЭтотУзел();
			НовыйГлавныйУзел = ЭтотУзелСсылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(НовыйГлавныйУзел, СтарыйГлавныйУзел,,
									"НомерОтправленного, НомерПринятого, ПометкаУдаления");
			НовыйГлавныйУзел.Записать();
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Заполнение результатов обмена данными'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		ОбработатьРезультатыОбменаДанными(НастройкаСинхронизацииДанных, НастройкаСинхронизацииЧерезУниверсальныйФормат);
		
		Если НЕ НастройкаСинхронизацииДанных.ПометкаУдаления Тогда
			Сообщение = НСтр("ru = 'Пометка на удаление старой настройки'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
			НастройкаСинхронизацииДанных.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(НастройкаСинхронизацииДанных);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		
		ВызватьИсключение;
	КонецПопытки;
	
	// Обновление правил обмена при необходимости.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Ссылка
	|ИЗ 
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ 
	|	НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел";
	Если Запрос.Выполнить().Выгрузить().Количество() < 2 Тогда
		// Была создана первая настройка для этого плана обмена, правила еще не актуализированы.
		ОбменДаннымиСервер.ВыполнитьОбновлениеПравилДляОбменаДанными();
	КонецЕсли;
	
	Если ВыгружатьСообщениеПослеПерехода Тогда
		// Выгрузка сообщения по новой настройке обмена.
		Отказ = Ложь;
		ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, 
											НастройкаСинхронизацииЧерезУниверсальныйФормат,
											Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
		Если Отказ Тогда
			Сообщение = НСтр("ru = 'Выгрузка данных через универсальный формат не выполнена.'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		Иначе
			Сообщение = НСтр("ru = 'Выгрузка данных через универсальный формат.'");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	Сообщение = НСтр("ru = 'Окончание перехода'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	Возврат НастройкаСинхронизацииЧерезУниверсальныйФормат;
КонецФункции

// Процедура копирует регистрацию изменений с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ВыполнитьРегистрациюИзменений(СтарыйУзел, НовыйУзел)
	СоставНовогоПланаОбмена = Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Состав;
	НомерСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтарыйУзел, "НомерОтправленного");
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(СтарыйУзел, НомерСообщения);
	Пока ВыборкаИзменений.Следующий() Цикл
		ОбъектРегистрации = ВыборкаИзменений.Получить();
		
		Если ОбъектРегистрации = Неопределено Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(ОбъектРегистрации) = Тип("УдалениеОбъекта") Тогда
			Если НЕ СоставНовогоПланаОбмена.Содержит(ОбъектРегистрации.Ссылка.Метаданные()) Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли НЕ СоставНовогоПланаОбмена.Содержит(ОбъектРегистрации.Метаданные()) Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(НовыйУзел, ОбъектРегистрации);
	КонецЦикла;
КонецПроцедуры

// Процедура переносит сведения о дате запрета изменения с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ОбработатьДатыЗапретаИзменения(СтарыйУзел, НовыйУзел)
	ДатыЗапрета = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	ДатыЗапрета.Отбор.Пользователь.Установить(СтарыйУзел);
	ДатыЗапрета.Прочитать();
	
	ДатыЗапретаНовый = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	ДатыЗапретаНовый.Отбор.Пользователь.Установить(НовыйУзел);

	Для Каждого ДатаЗапрета Из ДатыЗапрета Цикл
		ЗаписьНовая = ДатыЗапретаНовый.Добавить();
		ЗаписьНовая.Пользователь = НовыйУзел;
		ЗаполнитьЗначенияСвойств(ЗаписьНовая, ДатаЗапрета,,"Пользователь");
	КонецЦикла;
	ДатыЗапрета.Очистить();
	ДатыЗапрета.Записать();
	ДатыЗапретаНовый.Записать();
КонецПроцедуры

// Процедура переносит сведения о сценариях обменов данными с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ОбработатьСценарииОбменовДанными(СтарыйУзел, НовыйУзел)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ссылка
	|ИЗ 
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена
	|ГДЕ 
	|	УзелИнформационнойБазы = &НастройкаСинхронизации
	|	И НЕ Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СценарийОбменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтруктураПоиска = Новый структура("УзелИнформационнойБазы", СтарыйУзел);
		СтрокиИсточникДанных = СценарийОбменаОбъект.НастройкиОбмена.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаИсточникДанных Из СтрокиИсточникДанных Цикл
			СтрокаИсточникДанных.УзелИнформационнойБазы = НовыйУзел;
		КонецЦикла;
		
		СценарийОбменаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

// Процедура переносит сведения о соответствиях объектов информационных баз с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ОбработатьСоответствияОбъектовИнформационныхБаз(СтарыйУзел, НовыйУзел)
	// Заполнение ДанныеОбъектовДляРегистрацииВОбменах.
	ИмяСобытияЖурналРегистрации = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат. Данные для регистрации в обменах'");
	Сообщение = НСтр("ru = 'Заполнение данных для регистрации в обменах'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УникальныйИдентификаторИсточника КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
	|ГДЕ 
	|	УзелИнформационнойБазы = &НастройкаСинхронизации";
	Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
	НаборЗаписейДанныеОбъектов = РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах.СоздатьНаборЗаписей();
	НаборЗаписейДанныеОбъектов.Отбор.УзелИнформационнойБазы.Установить(НовыйУзел);
	НаборЗаписейДанныеОбъектов.Прочитать();
	НаборЗаписейДанныеОбъектов.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗаписьДанныеОбъектов = НаборЗаписейДанныеОбъектов.Добавить();
		НоваяЗаписьДанныеОбъектов.Ссылка = Выборка.Ссылка;
		НоваяЗаписьДанныеОбъектов.УзелИнформационнойБазы = НовыйУзел;
	КонецЦикла;
	НаборЗаписейДанныеОбъектов.Записать();
	
	// ПубличныеИдентификаторыСинхронизируемыхОбъектов.
	ЭтоБП = (Найти(НРЕГ(Метаданные.Имя), "бухгалтерия") > 0);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УникальныйИдентификаторИсточника КАК УИДИсточника,
	|	Количество(УникальныйИдентификаторПриемника) КАК КоличествоСсылок
	|ПОМЕСТИТЬ СоответствияОбъектовСОтбором
	|ИЗ 
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз
	|ГДЕ УзелИнформационнойБазы = &НастройкаСинхронизации 
	|	И УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
	|СГРУППИРОВАТЬ ПО УникальныйИдентификаторИсточника
	|;
	|ВЫБРАТЬ 
	|	СоответствияОбъектовСОтбором.УИДИсточника КАК УникальныйИдентификаторИсточника,
	|	СоответствияОбъектовИБ.УникальныйИдентификаторПриемника,
	|	СоответствияОбъектовИБ.ТипПриемника
	|ИЗ 
	|	СоответствияОбъектовСОтбором
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИБ 
	|ПО 
	|	СоответствияОбъектовИБ.УникальныйИдентификаторИсточника = СоответствияОбъектовСОтбором.УИДИсточника
	|	И СоответствияОбъектовИБ.УзелИнформационнойБазы = &НастройкаСинхронизации
	|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
	|ГДЕ 
	|	СоответствияОбъектовСОтбором.КоличествоСсылок > 1 
	|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
	|;
	|ВЫБРАТЬ 
	|	СоответствияОбъектовСОтбором.УИДИсточника КАК Ссылка,
	|	СоответствияОбъектовИБ.УникальныйИдентификаторПриемника КАК Идентификатор
	|ИЗ 
	|	СоответствияОбъектовСОтбором
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИБ 
	|ПО 
	|	СоответствияОбъектовИБ.УникальныйИдентификаторИсточника = СоответствияОбъектовСОтбором.УИДИсточника
	|	И СоответствияОбъектовИБ.УзелИнформационнойБазы = &НастройкаСинхронизации
	|	И СоответствияОбъектовИБ.УникальныйИдентификаторПриемника <> ВЫРАЗИТЬ("""" КАК Строка(36))
	|ГДЕ СоответствияОбъектовСОтбором.КоличествоСсылок = 1
	|";
	Запрос.УстановитьПараметр("НастройкаСинхронизации", СтарыйУзел);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ИмяСобытияЖурналРегистрации = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат.Заполнение публичных идентификаторов'");
	Сообщение = НСтр("ru = 'Формирование публичных идентификаторов - начало'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

	// Отображение ссылок "один ко многим"
	Если НЕ РезультатЗапроса[1].Пустой() Тогда
		Сообщение = НСтр("ru = 'Обнаружены записи, в которых одной ссылке на источник соответствуют несколько приемников'") 
					+ Символы.ПС + НСтр("ru = 'Эти записи обработаны не будут.'");
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);

		Выборка = РезультатЗапроса[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			НСтрока = НСтр("ru = 'Уникальный идентификатор источника: %1, Уникальный идентификатор приемника: %2, Тип приемника: %3'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
															Выборка.УникальныйИдентификаторИсточника, 
															Выборка.УникальныйИдентификаторПриемника, 
															Выборка.ТипПриемника);

			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		КонецЦикла;
	КонецЕсли;
	// Формирование записей в регистр Публичные идентификаторы
	СчетчикЗаписей = 0;
	Выборка = РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Проверка равенства идентификаторов.
		// Соответствия с разными значениями УИДов - заполняются только на стороне БП,
		// так как их надо заполнить только для одного из корреспондентов.
		Если НЕ ЭтоБП Тогда
			ИдентификаторИсточникаСтрокой = СокрЛП(Выборка.Ссылка.УникальныйИдентификатор());
			Если ИдентификаторИсточникаСтрокой <> СокрЛП(Выборка.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СчетчикЗаписей = СчетчикЗаписей + 1;
		СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, Ссылка, Идентификатор", 
											НовыйУзел, Выборка.Ссылка, Выборка.Идентификатор);
		ОбменДаннымиСервер.ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, 
													"ПубличныеИдентификаторыСинхронизируемыхОбъектов", Ложь);
	КонецЦикла;
	Сообщение = НСтр("ru = 'Формирование публичных идентификаторов завершено. Количество записей:'") 
				+ СчетчикЗаписей;
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);
	// Очистка регистра СоответствиеОбъектовИнформационныхБаз
	НаборЗаписейСоответствиеОбъектов = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейСоответствиеОбъектов.Отбор.УзелИнформационнойБазы.Установить(СтарыйУзел);
	НаборЗаписейСоответствиеОбъектов.Записать();
	Сообщение = НСтр("ru = 'Соответствие объектов информационных баз очищен'");
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Информация, , , Сообщение);

КонецПроцедуры

// Процедура переносит сведения о настройках транспорта сообщений с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
//  ВыгружатьСообщениеПослеПерехода - булево, признак того что после завершения перехода следует выгрузить
//   сообщение обмена по новой настройке. Устанавливается в ходе выполнения процедуры, если
//   вид транспорта по умолчанию - файловый ресурс, ftp или email.
Процедура ОбработатьНастройкиТранспортаСообщенийОбмена(СтарыйУзел, НовыйУзел, ВыгружатьСообщениеПослеПерехода)
	НастройкиТранспортаОбменаНовогоУзла = РегистрыСведений.НастройкиТранспортаОбмена.СоздатьНаборЗаписей();
	НастройкиТранспортаОбменаНовогоУзла.Отбор.Узел.Установить(НовыйУзел);
	НастройкиТранспортаОбменаНовогоУзла.Прочитать();
	НастройкиТранспортаОбменаНовогоУзла.Очистить();
	НастройкиТранспортаОбменаСтарогоУзла = РегистрыСведений.НастройкиТранспортаОбмена.СоздатьНаборЗаписей();
	НастройкиТранспортаОбменаСтарогоУзла.Отбор.Узел.Установить(СтарыйУзел);
	НастройкиТранспортаОбменаСтарогоУзла.Прочитать();
	
	МассивДоступныеТранспортыСообщений = ИспользуемыеТранспортыСообщенийОбмена();
	Если НастройкиТранспортаОбменаСтарогоУзла.Количество()>0 Тогда
		НастройкиТранспортаОбменаНовогоУзла.Загрузить(НастройкиТранспортаОбменаСтарогоУзла.Выгрузить());
		Для Каждого НастройкаУзла Из НастройкиТранспортаОбменаНовогоУзла Цикл
			НастройкаУзла.Узел = НовыйУзел;
			ВидТранспортаПоУмолчанию = НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию;
			Если ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE
				ИЛИ ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL
				ИЛИ ВидТранспортаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
				ВыгружатьСообщениеПослеПерехода = Истина;
			КонецЕсли;
			Если МассивДоступныеТранспортыСообщений.Найти(ВидТранспортаПоУмолчанию) = Неопределено Тогда
				// Переопределение вида транспорта по умолчанию
				ВидПоУмолчанию = Неопределено;
				Если ЗначениеЗаполнено(НастройкаУзла.FILEКаталогОбменаИнформацией) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
				ИначеЕсли ЗначениеЗаполнено(НастройкаУзла.FTPСоединениеПуть) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
				ИначеЕсли ЗначениеЗаполнено(НастройкаУзла.EMAILУчетнаяЗапись) Тогда
					ВидПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
				КонецЕсли;
				НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию = ВидПоУмолчанию;
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'Переход на синхронизацию данных через универсальный формат. Заполнение настроек транспорта сообщений'");
				НСтрока = НСтр("ru = 'Используемое ранее подключение по умолчанию недоступно для синхронизации данных через универсальный формат (%1)'");
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, ВидТранспортаПоУмолчанию);

				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
				Если ЗначениеЗаполнено(НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию) Тогда
					НСтрока = НСтр("ru = 'Взамен назначено подключение по умолчанию: %1. Необходимо проверить корректность настроек транспорта сообщений'");
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, 
																НастройкаУзла.ВидТранспортаСообщенийОбменаПоУмолчанию);

				Иначе
					Сообщение = НСтр("ru = 'Подключение по умолчанию очищено. Необходимо выполнить настройку транспорта сообщений вручную'");
				КонецЕсли;
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
			КонецЕсли;
		КонецЦикла;
		
		НастройкиТранспортаОбменаСтарогоУзла.Очистить();
		НастройкиТранспортаОбменаСтарогоУзла.Записать();
		НастройкиТранспортаОбменаНовогоУзла.Записать();
	КонецЕсли;
	
	НастройкиУзловИБНовогоУзла = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СоздатьНаборЗаписей();
	НастройкиУзловИБНовогоУзла.Отбор.УзелИнформационнойБазы.Установить(НовыйУзел);
	НастройкиУзловИБНовогоУзла.Прочитать();
	НастройкиУзловИБНовогоУзла.Очистить();

	НастройкиУзловИБСтарогоУзла = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СоздатьНаборЗаписей();
	НастройкиУзловИБСтарогоУзла.Отбор.УзелИнформационнойБазы.Установить(СтарыйУзел);
	НастройкиУзловИБСтарогоУзла.Прочитать();
	
	Если НастройкиУзловИБСтарогоУзла.Количество()>0 Тогда
		НастройкиУзловИБНовогоУзла.Загрузить(НастройкиУзловИБСтарогоУзла.Выгрузить());
		Для Каждого НастройкаУзла Из НастройкиУзловИБНовогоУзла Цикл
			НастройкаУзла.УзелИнформационнойБазы = НовыйУзел;
		КонецЦикла;
		
		НастройкиУзловИБСтарогоУзла.Очистить();
		НастройкиУзловИБСтарогоУзла.Записать();
		НастройкиУзловИБНовогоУзла.Записать();
	КонецЕсли;
КонецПроцедуры

// Процедура переносит сведения о результатах обмена данными с одного узла на другой.
//
// Параметры:
//  СтарыйУзел - ссылка на узел плана обмена, который является источником сведений
//  НовыйУзел - ссылка на узел плана обмена, который является получателем сведений
Процедура ОбработатьРезультатыОбменаДанными(СтарыйУзел, НовыйУзел)
	РезультатыОбмена = РегистрыСведений.РезультатыОбменаДанными.СоздатьНаборЗаписей();
	РезультатыОбмена.Прочитать();
	
	Для Каждого РезультатОбмена Из РезультатыОбмена Цикл
		Если РезультатОбмена.УзелИнформационнойБазы <> СтарыйУзел Тогда
			Продолжить;
		КонецЕсли;
		Если РезультатОбмена.Пропущена Тогда
			РезультатыОбмена.Удалить(РезультатОбмена);
			Продолжить;
		КонецЕсли;
		РезультатОбмена.УзелИнформационнойБазы = НовыйУзел;
	КонецЦикла;
	РезультатыОбмена.Записать();
КонецПроцедуры

// Процедура выполняет попытку перехода на новый обмен с существующего обмена.
//  Вызывается, если в ходе синхронизации данных получено сообщение не соответствующее формату "старого" обмена.
//
// Параметры:
//  НастройкаСинхронизацииДанных - ссылка на узел плана обмена, с которого выполняется переход на новый обмен
//  ОбменЧерезВнешнееСоединение - булево, признак того что текущий обмен выполняется через внешнее соединение
Процедура ВыполнитьПереходНаНовыйОбмен(НастройкаСинхронизацииДанных, ОбменЧерезВнешнееСоединение = Ложь) Экспорт
	Попытка
		НастройкаСинхронизацииЧерезУниверсальныйФормат = 
			ВыполнитьПереходНаСинхронизациюДанныхЧерезУниверсальныйФормат(НастройкаСинхронизацииДанных);
	Исключение
	КонецПопытки;
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#КонецЕсли