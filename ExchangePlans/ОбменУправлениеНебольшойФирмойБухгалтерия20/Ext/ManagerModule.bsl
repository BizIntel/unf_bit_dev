#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Позволяет переопределить настройки плана обмена, заданные по умолчанию.
// Значения настроек по умолчанию см. в ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию
// 
// Параметры:
//	Настройки - Структура - Содержит настройки по умолчанию
//
// Пример:
//	Настройки.ПредупреждатьОНесоответствииВерсийПравилОбмена = Ложь;
Процедура ОпределитьНастройки(Настройки, ИдентификаторНастройки) Экспорт
	
	
	
КонецПроцедуры // ОпределитьНастройки()

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для УНФ-БП";
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	СтруктураТабличнойЧастиВидыДокументов = Новый Структура;
	СтруктураТабличнойЧастиВидыДокументов.Вставить("ИмяОбъектаМетаданных", Новый Массив);
	СтруктураТабличнойЧастиВидыДокументов.Вставить("Представление", Новый Массив);
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ЗагружатьДокументыИзБухгалтерииПредприятия", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоВидамДокументов", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям", Ложь);
	СтруктураНастроек.Вставить("РучнойОбмен", Ложь);
	СтруктураНастроек.Вставить("ВидыДокументов", СтруктураТабличнойЧастиВидыДокументов);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	
	Возврат СтруктураНастроек;

КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Касса", Справочники.Кассы.ПустаяСсылка());
	СтруктураНастроек.Вставить("КассаККМ", Справочники.КассыККМ.ПустаяСсылка());
	СтруктураНастроек.Вставить("ВидНалога", Справочники.ВидыНалогов.ПустаяСсылка());
	СтруктураНастроек.Вставить("СтатьяРасход", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	СтруктураНастроек.Вставить("СтатьяПриход", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	ТекстОписания = НСтр("ru = 'Вся нормативно-справочная информация автоматически регистрируется к отправке;'");
	
	Если НастройкаОтборовНаУзле.РучнойОбмен Тогда
		
		ТекстОписания = НСтр("ru = 'Пользователь самостоятельно отбирает и регистрирует документы к отправке;'");
		
		Если Не НастройкаОтборовНаУзле.ЗагружатьДокументыИзБухгалтерииПредприятия Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы приложения ""Бухгалтерия предприятия"" в синхронизации не участвуют;'");
		КонецЕсли;
		
	Иначе
		
		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоВидамДокументов Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Документы автоматически регистрируются к отправке:'");
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Все документы автоматически регистрируются к отправке:'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'начиная с %ДатаНачала%'");
			ТекстОписания = СтрЗаменить(ТекстОписания,"%ДатаНачала%", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
			КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'с отбором по организациям: %ПредставлениеКоллекции%'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		Иначе
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'по всем организациям'");
		КонецЕсли;
		
		Если НастройкаОтборовНаУзле.ИспользоватьОтборПоВидамДокументов Тогда
			КоллекцияЗначений = НастройкаОтборовНаУзле.ВидыДокументов.Представление;
			ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
			ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'с отбором по видам документов: %ПредставлениеКоллекции%'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	МассивПараметров = Новый Массив;
	Описание = "";
	
	// Вид налога
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.ВидНалога) Тогда
		НСтрока = НСтр("ru = 'Вид налога: %1'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, Строка(ЗначенияПоУмолчаниюНаУзле.ВидНалога));
	Иначе
		Описание = "Вид налога не задан";
	КонецЕсли;
	
	МассивПараметров.Добавить(Описание);
	
	// Статья ДДС (расход)
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяРасход) Тогда
		НСтрока = НСтр("ru = 'Статья ДДС (расход): %2'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, , Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяРасход));
	Иначе
		Описание = "Статья ДДС (расход) не задана";
	КонецЕсли;
	
	МассивПараметров.Добавить(Описание);
	
	// Статья ДДС (приход)
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяПриход) Тогда
		НСтрока = НСтр("ru = 'Статья ДДС (приход): %3'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, , , Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяПриход));
	Иначе
		Описание = "Статья ДДС (приход) не задана";
	КонецЕсли;
	
	МассивПараметров.Добавить(Описание);
	
	// Касса
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.Касса) Тогда
		НСтрока = НСтр("ru = 'Касса: %4'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, , , , Строка(ЗначенияПоУмолчаниюНаУзле.Касса));
	Иначе
		Описание = "Касса не задана";
	КонецЕсли;
		
	МассивПараметров.Добавить(Описание);
	
	// Касса ККМ
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.КассаККМ) Тогда
		НСтрока = НСтр("ru = 'Касса ККМ: %5'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтрока, , , , , Строка(ЗначенияПоУмолчаниюНаУзле.КассаККМ));
	ИначеЕсли Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить() Тогда
		Описание = "Касса ККМ не задана";
	Иначе
		Описание = "___________________________________________";
	КонецЕсли;
	
	МассивПараметров.Добавить(Описание);
	
	НСтрока = НСтр("ru = 'При загрузке реквизиты документов будет автоматически дозаполнены значениями:
		|%1
		|%2
		|%3
		|%4
		|%5'"
	);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтрока, МассивПараметров);
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Создать обмен с конфигурацией ""1C: Бухгалтерия предприятия 8, ред. 2.0""'");
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Возврат Результат;
	
КонецФункции

Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
	
КонецПроцедуры

Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку с кратким описанием обмена данными, 
// которое выводится на первой станице Помощника создания обмена данными.
// 
// Испрользуется начиная с БСП 2.1.2
//
Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	ПоясняющийТекст = НСтр("ru = '	Позволяет синхронизировать данные между приложениями 1С:Управление небольшой фирмой, ред. 1.6 и 1С:Бухгалтерия предприятия 8, ред. 2.0.
	|Из приложения Управление небольшой фирмой в приложение Бухгалтерия предприятия переносятся справочники и все необходимые документы, а 
	|из приложения Бухгалтерия предприятия в приложение Управление небольшой фирмой - справочники и документы учета денежных средств. Для 
	|получения более подробной информации нажмите на ссылку Подробное описание.'");
	
	Возврат ПоясняющийТекст;
	
КонецФункции // КраткаяИнформацияПоОбмену()

// Вовзращает ссылку на веб-страницу или полный путь к форме внутри конфигурации строкой
// 
Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	Возврат "ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.Форма.ФормаПодробнойИнформацииПоОбмену";
	
КонецФункции

// Возвращает имя семейства конфигураций. 
// Используется для поддержки обменов с измененными конфигурациями в сервисе.
//
Функция ИмяКонфигурацииИсточника() Экспорт
	
	Возврат "УправлениеНебольшойФирмой";
	
КонецФункции // ИмяКонфигурацииИсточника()

//////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ ОБМЕНА ЧЕРЕЗ ВНЕШНЕЕ СОЕДИНЕНИЕ

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт
	
	Возврат "";
	
КонецФункции

// Функция возвращает имя обработки выгрузки данных
//
Функция ИмяОбработкиВыгрузки() Экспорт
	
	Возврат "";
	
КонецФункции // ИмяОбработкиВыгрузки()

// Функция возвращает имя обработки загрузки данных
//
Функция ИмяОбработкиЗагрузки() Экспорт
	
	Возврат "";
	
КонецФункции // ИмяОбработкиЗагрузки()

// Функция должна возвращать:
// Истина, в том случае, если корреспондент поддерживает сценарий обмена, 
// в котором текущая ИБ работает в локальном режиме, 
// а корреспондент в модели сервиса. 
// 
// Ложь – если такой сценарий обмена не поддерживается.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции // КорреспондентВМоделиСервиса()

////////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ

// Инициализирует у всех узлов режим выгрузки при необходимости
//
Процедура ИнициализироватьРежимВыгрузкиПриНеобходимости() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БП.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20 КАК БП
	                      |ГДЕ
	                      |	БП.Ссылка <> &ЭтотУзел
	                      |	И ВЫБОР
	                      |			КОГДА БП.РежимВыгрузкиПриНеобходимости <> ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ ЛОЖЬ
	                      |		КОНЕЦ = ИСТИНА");
						  
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеНебольшойФирмойБухгалтерия20.ЭтотУзел());
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		
		УзелПланаОбменаОбъект = ВыборкаУзлов.Ссылка.ПолучитьОбъект();
		УзелПланаОбменаОбъект.РежимВыгрузкиПриНеобходимости = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		УзелПланаОбменаОбъект.ДополнительныеСвойства.Вставить("Загрузка");
		УзелПланаОбменаОбъект.Записать();
		
		РегистрыСведений.ИзмененияОбщихДанныхУзлов.ЗарегистрироватьИзменения(УзелПланаОбменаОбъект.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Возвращает сценарий работы помощника интерактивного сопостовления
//НеОтправлять, ИнтерактивнаяСинхронизацияДокументов, ИнтерактивнаяСинхронизацияСправочников либо пустую строку
Функция ИнициализироватьСценарийРаботыПомощникаИнтерактивногоОбмена(УзелИнформационнойБазы) Экспорт
	
	Если УзелИнформационнойБазы.РучнойОбмен Тогда
		
		Возврат "ИнтерактивнаяСинхронизацияДокументов";
		
	КонецЕсли;
	
КонецФункции

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 3) Экспорт
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

// Определяет массив узлов на которых будет произведена регистрация объекта
//
Функция ОпределитьМассивПолучателей(Выгрузка, Объект, Получатели) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Выгрузка Тогда
		Возврат Получатели;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("УзлыДляРегистрации")
		И ТипЗнч(Объект.ДополнительныеСвойства.УзлыДляРегистрации) = Тип("Массив") Тогда
		
		Получатели = Объект.ДополнительныеСвойства.УзлыДляРегистрации;
		
		Возврат Получатели;
	КонецЕсли;
	
	МассивИсключаемыхУзлов = Новый Массив;
	
	Для Каждого Узел Из Получатели Цикл
		
		Если Узел.РучнойОбмен Тогда
			
			МассивИсключаемыхУзлов.Добавить(Узел);
			
		ИначеЕсли Узел.ИспользоватьОтборПоВидамДокументов Тогда
			
			Если Узел.ВидыДокументов.Найти(Объект.Метаданные().Имя, "ИмяОбъектаМетаданных") = Неопределено Тогда
				МассивИсключаемыхУзлов.Добавить(Узел);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Получатели = ОбщегоНазначенияКлиентСервер.СократитьМассив(Получатели, МассивИсключаемыхУзлов);
	
	Возврат Получатели;
	
КонецФункции

// Регистрирует документы, связанные с переданным документом по ссылке.
//
Процедура ЗарегистрироватьСвязанныеДокументы(Выгрузка, Объект, ПРО, Получатели) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Выгрузка
		ИЛИ Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗарегистрированныхДокументов = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("ЗарегистрированныеДокументы", МассивЗарегистрированныхДокументов);
	Если ТипЗнч(МассивЗарегистрированныхДокументов) <> Тип("Массив") Тогда
		МассивЗарегистрированныхДокументов = Новый Массив;
	КонецЕсли;
	
	Если МассивЗарегистрированныхДокументов.Найти(Объект.Ссылка) = Неопределено Тогда
		МассивЗарегистрированныхДокументов.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	МассивУзловДляРегистрации = Новый Массив;
	Для каждого УзелПолучатель Из Получатели Цикл
		Если УзелПолучатель.ИспользоватьОтборПоВидамДокументов
			ИЛИ УзелПолучатель.РучнойОбмен Тогда
			МассивУзловДляРегистрации.Добавить(УзелПолучатель);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУзловДляРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныеДокументы = Новый ТаблицаЗначений;
	СвязанныеДокументы.Колонки.Добавить("Документ");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ВыданныеАвансы Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Оплаты Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ДополнительныеРасходы") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.ДокументПоступления;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПокупателя")
		И Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Покупатели Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.СчетФактура;
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОПереработке") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетПереработчика") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеВКассу") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаСчет") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходнаяНакладная") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходИзКассы") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходнаяНакладная") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Предоплата Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РасходСоСчета") Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.Документ;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактура") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = Объект.ДокументОснование;
		КонецЕсли;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.ДокументыОснования Цикл
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = СтрокаТабличнойЧасти.ДокументОснование;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			НоваяСтрока = СвязанныеДокументы.Добавить();
			НоваяСтрока.Документ = Объект.ДокументОснование;
		КонецЕсли;
		
	КонецЕсли;
	
	СвязанныеДокументы.Свернуть("Документ");
	Если СвязанныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из СвязанныеДокументы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивЗарегистрированныхДокументов.Найти(ДокументОбъект.Ссылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РегистацияДоступна = Истина;
		МетаДокумент = ДокументОбъект.Метаданные();
		Для каждого УзелДляРегистрации Из МассивУзловДляРегистрации Цикл
			Если УзелДляРегистрации.Метаданные().Состав.Найти(МетаДокумент) = Неопределено Тогда
				РегистацияДоступна = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не РегистацияДоступна Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("УзлыДляРегистрации", МассивУзловДляРегистрации);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗарегистрированныеДокументы", МассивЗарегистрированныхДокументов);
		ОбменДаннымиСобытия.ВыполнитьПравилаРегистрацииДляОбъекта(ДокументОбъект, ПРО.ИмяПланаОбмена, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

//Возвращает режим запуска, в случае интерактивного инициирования синхронизации
//Возвращаемые значения АвтоматическаяСинхронизация Или ИнтерактивнаяСинхронизация
//На основании этих значений запускается либо помощник интерактивного обмена, либо автообмен
Функция РежимЗапускаСинхронизацииДанных(УзелИнформационнойБазы) Экспорт
	
	Если УзелИнформационнойБазы.РучнойОбмен Тогда
		
		Возврат "ИнтерактивнаяСинхронизация";
		
	Иначе
		
		Возврат "АвтоматическаяСинхронизация";
		
	КонецЕсли;
	
КонецФункции

//Возвращает значения ограничений объектов узла плана обмена для интерактивной регистрации к обмену
//Структура: ВсеДокументы, ВсеСправочники, ДетальныйОтбор
//Детальный отбор либо неопределено, либо массив объектов метаданных входящих в состав узла (Указывается полное имя метаданных)
Функция ДобавитьГруппыОграничений(УзелИнформационнойБазы) Экспорт
	//Пример типового возврата
	Возврат Новый Структура("ВсеДокументы, ВсеСправочники, ДетальныйОтбор", Ложь, Ложь, Неопределено);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
//  Параметры:
// ВерсияКорреспондента (только чтение) – Строка – версия конфигурации корреспондента, например, "2.1.5.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
КонецПроцедуры

// Обработчик события при отправке данных узла-отправителя.
// Событие возникает при отправке данных узла-отправителя из текущей базы в корреспондент,
// до помещения данных узла в сообщения обмена.
// В обработчике можно изменить отправляемые данные или вовсе отказаться от отправки данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется отправка данных.
// Игнорировать – Булево – признак отказа от выгрузки данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то отправка данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

// Обработчик события при получении данных узла-отправителя.
// Событие возникает при получении данных узла-отправителя,
// когда данные узла прочитаны из сообщения обмена, но не записаны в информационную базу.
// В обработчике можно изменить полученные данные или вовсе отказаться от получения данных узла.
//
//  Параметры:
// Отправитель – ПланОбменаОбъект – узел плана обмена, от имени которого выполняется получение данных.
// Игнорировать – Булево – признак отказа от получения данных узла.
//                         Если в обработчике установить значение этого параметра в Истина,
//                         то получение данных узла выполнена не будет. Значение по умолчанию – Ложь.
//
Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая настройка дополнения выгрузки

// Предназначена для настройки вариантов интерактивной настройки выгрузки по сценарию узла.
// Для настройки необходимо установить значения свойств параметров в необходимые значения.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производится настройка
//     Параметры  - Структура        - Параметры для изменения. Содержит поля:
//
//         ВариантБезДополнения - Структура     - настройки типового варианта "Не добавлять".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 1.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантВсеДокументы - Структура      - настройки типового варианта "Добавить все документы за период".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 2.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантПроизвольныйОтбор - Структура - настройки типового варианта "Добавить данные с произвольным отбором".
//                                                Содержит поля:
//             Использование - Булево - флаг разрешения использования варианта. По умолчанию Истина.
//             Порядок       - Число  - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 3.
//             Заголовок     - Строка - позволяет переопределить название типового варианта.
//             Пояснение     - Строка - позволяет переопределить текст пояснения варианта для пользователя.
//
//         ВариантДополнительно - Структура     - настройки дополнительного варианта по сценарию узла.
//                                                Содержит поля:
//             Использование            - Булево            - флаг разрешения использования варианта. По умолчанию Ложь.
//             Порядок                  - Число             - порядок размещения варианта на форме помощника, сверху вниз. По умолчанию 4.
//             Заголовок                - Строка            - название варианта для отображения на форме.
//             ИмяФормыОтбора           - Cтрока            - Имя формы, вызываемой для редактирования настроек.
//             ЗаголовокКомандыФормы    - Cтрока            - Заголовок для отрисовки на форме команды открытия формы настроек.
//             ИспользоватьПериодОтбора - Булево            - флаг того, что необходим общий отбор по периоду. По умолчанию Ложь.
//             ПериодОтбора             - СтандартныйПериод - значение периода общего отбора, предлагаемого по умолчанию.
//
//             Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                            Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Можно  использовать специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки, предлагаемого по умолчанию.
//                 Отбор               - ОтборКомпоновкиДанных - отбор по умолчанию. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", необходимо использовать поле "Ссылка.Организация"
//
Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт
	
	//
	// Пример использования в демо-БСП 2.1.5.12 (ПО._ДемоОбменСБиблиотекойСтандартныхПодсистем)
	//
	
КонецПроцедуры

// Возвращает представление отбора для варианта дополнения выгрузки по сценарию узла.
// См. описание "ВариантДополнительно" в процедуре "НастроитьИнтерактивнуюВыгрузку"
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого определяется представление отбора
//     Параметры  - Структура        - Характеристики отбора. Содержит поля:
//         ИспользоватьПериодОтбора - Булево            - флаг того, что необходимо использовать общий отбор по периоду.
//         ПериодОтбора             - СтандартныйПериод - значение периода общего отбора.
//         Отбор                    - ТаблицаЗначений   - содержит строки с описанием подробных отборов по сценарию узла.
//                                                        Содержит колонки:
//                 ПолноеИмяМетаданных - Строка                - полное имя метаданных регистрируемого объекта, отбор которого описывает строка.
//                                                               Например "Документ._ДемоПоступлениеТоваров". Могут быть использованы специальные 
//                                                               значения "ВсеДокументы" и "ВсеСправочники" для отбора соответственно всех 
//                                                               документов и всех справочников, регистрирующихся на узле Получатель.
//                 ВыборПериода        - Булево                - флаг того, что данная строка описывает отбор с общим периодом.
//                 Период              - СтандартныйПериод     - значение периода общего отбора для метаданных строки.
//                 Отбор               - ОтборКомпоновкиДанных - поля отбора. Поля отбора формируются в соответствии с общим правилами
//                                                               формирования полей компоновки. Например, для указания отбора по реквизиту
//                                                               документа "Организация", будет использовано поле "Ссылка.Организация"
//
// Возвращаемое значение: 
//     Строка - описание отбора
//
Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт
	
	//
	// Пример использования в демо-БСП 2.1.5.12 (ПО._ДемоОбменСБиблиотекойСтандартныхПодсистем)
	//
	
КонецФункции

#КонецЕсли