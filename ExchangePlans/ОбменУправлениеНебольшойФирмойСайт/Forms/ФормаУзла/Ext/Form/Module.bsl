
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ВыполнитьДействияПриСозданииНаСервере()
	
	Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
		Элементы.ГруппаВыгружатьНаСайтГоризонтально.Видимость = Истина;
	Иначе
		Элементы.ГруппаВыгружатьНаСайтГоризонтально.Видимость = Ложь;
		Если Не Объект.ВыгружатьНаСайт Тогда
			Объект.ВыгружатьНаСайт = Истина;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ЗначениеЗаполнено(ПарольИзХранилища), ЭтотОбъект.УникальныйИдентификатор, "");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаНачалаВыгрузкиЗаказов = НачалоМесяца(ТекущаяДата());
		Объект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
		Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
	КонецЕсли;
	
	УстановитьНадписьРасписанияОбменаСервер();
	
	ЗаполнитьСписокВидовЦенСервер();
	
	ЗаполнитьТаблицуКаталоговСервер();
	
	УстановитьПараметрыТаблицыКаталоговСервер();
	
	УстановитьТипЗначенийСпискаГруппТаблицыКаталоговСервер();
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	Элементы.СтраницаВыгрузкаТоваров.Видимость = Объект.ОбменТоварами;
	Элементы.СтраницаОбменЗаказами.Видимость = Объект.ОбменЗаказами;
	
	Элементы.ФайлЗагрузки.Доступность = Объект.ОбменЗаказами;
	
	Если Не РазделениеВключено Тогда
		Элементы.ГруппаАвтообменСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтообменСтраница1;
		Элементы.НастроитьРасписаниеОбмена.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	Иначе
		Элементы.ГруппаАвтообменСтраницы.ТекущаяСтраница = Элементы.ГруппаАвтообменСтраница2;
		Элементы.ИнтервалОбменаССайтом.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	КонецЕсли;
	
	Если Объект.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ПредопределенноеЗначение Тогда
		Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость = Истина;
		Элементы.ГруппаДляНовыхКонтрагентов.Доступность = Ложь;
	Иначе
		Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость = Ложь;
		Элементы.ГруппаДляНовыхКонтрагентов.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ВыгружатьНаСайт Тогда
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаНаСайт;
		ПереключательНазначениеОбмена = 0;
	Иначе
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаВКаталог;
		ПереключательНазначениеОбмена = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначенийСпискаГруппТаблицыКаталоговСервер()
	
	Если Объект.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Иначе
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
		
		СтрокаТаблицыКаталогов.Группы.ТипЗначения = ТипЗначений;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыТаблицыКаталоговСервер()
	
	ЗаголовокТаблицы = НСтр("ru = 'Таблица каталогов (соответствие групп номенклатуры каталогам на сайте)'");
	Если Объект.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		ЗаголовокКолонки = НСтр("ru = 'Группы номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		ЗаголовокКолонки = НСтр("ru = 'Категории номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	КонецЕсли;
	
	Элементы.ГруппаТаблицаКаталогов.Заголовок = ЗаголовокТаблицы;
	Элементы.ТаблицаКаталоговГруппыКатегории.Заголовок = ЗаголовокКолонки;
	Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовЦенСервер()
	
	СписокВидовЦенСтрока = "";
	Для каждого СтрокаВидовЦен Из Объект.ВидыЦен Цикл 
		
		НовыйЭлемент = СписокВидовЦен.Добавить();
		НовыйЭлемент.Значение = СтрокаВидовЦен.ВидЦен;
		
		СписокВидовЦенСтрока = СписокВидовЦенСтрока + ?(СписокВидовЦенСтрока = "","","; ") + СтрокаВидовЦен.ВидЦен.Наименование;
		
	КонецЦикла;
	
	Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = СписокВидовЦенСтрока;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКаталоговСервер()
	
	НадписьВсеЭлементыСписка = ОбменССайтом.НадписьВсеГруппы();
	
	СохраненнаяТаблицаКаталогов = РеквизитФормыВЗначение("Объект").СохраненнаяТаблицаКаталогов.Получить();
	
	Если НЕ ТипЗнч(СохраненнаяТаблицаКаталогов) = Тип("ТаблицаЗначений") Тогда
		
		СоздатьКаталогПоУмолчаниюСервер();
		
	Иначе
		
		Для Каждого СтрокаСохраненнойТаблицыКаталогов Из СохраненнаяТаблицаКаталогов Цикл
			
			НоваяСтрока = ТаблицаКаталогов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСохраненнойТаблицыКаталогов);
			
			ХранилищеНастроекКомпоновки = СтрокаСохраненнойТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить();
			НоваяСтрока.АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(ХранилищеНастроекКомпоновки, УникальныйИдентификатор);
			
		КонецЦикла;
		
		Если ТаблицаКаталогов.Количество() = 0 Тогда
			
			СоздатьКаталогПоУмолчаниюСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКаталогПоУмолчаниюСервер()
	
	НоваяСтрока = ТаблицаКаталогов.Добавить();
	НоваяСтрока.Каталог = НСтр("ru = 'Основной каталог товаров'");
	НоваяСтрока.Группы.Добавить(НеОпределено, НадписьВсеЭлементыСписка);
	НоваяСтрока.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры 

&НаСервере
Функция ПроверитьУзелОбменаЭтаИБСервер()
	
	ЭтотУзел = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ЭтотУзел();
	Возврат Объект.Ссылка = ЭтотУзел;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьВыбранныеГруппыСерверБезКонтекста(СписокГрупп, НадписьВсеЭлементыСписка, ВыборГруппИЭлементов)
	
	ГруппыВыбраны = Ложь;
	
	Если ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
		// Удаляем не группы номенклатуры.
		МассивУдалить = Новый Массив;
		Для Каждого ЭлементСЗ Из СписокГрупп Цикл
			
			ТекГруппа = ЭлементСЗ.Значение;
			Если ЗначениеЗаполнено(ТекГруппа) И НЕ ТекГруппа.ЭтоГруппа Тогда
				МассивУдалить.Добавить(ЭлементСЗ);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекГруппа) Тогда
				ЭлементСЗ.Представление = Строка(ЭлементСЗ.Значение);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекГруппа) И НЕ ЗначениеЗаполнено(ЭлементСЗ.Представление) Тогда
				ЭлементСЗ.Представление = ОбменССайтом.НадписьНетГруппы();
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементМУ Из МассивУдалить Цикл
			СписокГрупп.Удалить(ЭлементМУ);
		КонецЦикла;
	КонецЕсли;
	
	// Удаляем дубли и подчиненные элементы.
	МассивУдалить = Новый Массив;
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если НЕ МассивУдалить.Найти(ЭлементСЗ) = НеОпределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекГруппа = ЭлементСЗ.Значение;
		
		Для Каждого ЭлементСЗВлож Из СписокГрупп Цикл

			Если НЕ МассивУдалить.Найти(ЭлементСЗВлож) = НеОпределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекГруппа)
				ИЛИ НЕ ЗначениеЗаполнено(ЭлементСЗВлож.Значение) Тогда
				//Пропускаем элемент "Все" и "Нет группы"
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлементСЗВлож = ЭлементСЗ
				И ЭлементСЗВлож.Значение = ТекГруппа Тогда
				
				МассивУдалить.Добавить(ЭлементСЗВлож);
				
			Иначе
				
				Если ЭлементСЗВлож.Значение.ПринадлежитЭлементу(ТекГруппа) Тогда
				
					МассивУдалить.Добавить(ЭлементСЗВлож);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементМУ Из МассивУдалить Цикл
		
		СписокГрупп.Удалить(ЭлементМУ);
		
	КонецЦикла;
	
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если ЗначениеЗаполнено(ЭлементСЗ.Значение) ИЛИ ЗначениеЗаполнено(ЭлементСЗ.Представление) Тогда
			
			ГруппыВыбраны = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ГруппыВыбраны Тогда
		
		СписокГрупп.Очистить();
		СписокГрупп.Добавить(НеОпределено, НадписьВсеЭлементыСписка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПолейОбменЗаказами()
	
	Элементы.ФайлЗагрузки.Доступность = Объект.ОбменЗаказами;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбменТоварами()
	
	УстановитьВидимостьСтраницФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбменЗаказами()
	
	УстановитьВидимостьСтраницФормы();
	УстановитьДоступностьПолейОбменЗаказами();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособИдентификацииКонтрагентов()
	
	СпособИдентификации = ПредопределенноеЗначение("Перечисление.СпособыИдентификацииКонтрагентов.ПредопределенноеЗначение");
	
	Если Объект.СпособИдентификацииКонтрагентов = СпособИдентификации Тогда
		
		Если НЕ Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость Тогда
			Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость = Истина;
			Элементы.ГруппаДляНовыхКонтрагентов.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость Тогда
			Элементы.КонтрагентДляПодстановкиВЗаказы.Видимость = Ложь;
			Элементы.ГруппаДляНовыхКонтрагентов.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПереключательНазначениеОбмена()
	
	Объект.ВыгружатьНаСайт = ПереключательНазначениеОбмена = 0;
	УстановитьВидимостьСтраницТипаОбмена();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает ПериодПовтораВТечениеДня в секундах
//
Функция ПолучитьПериодПовтораВТечениеДня()
	
	ЗначенияВыбора = СоответствиеЗначенийВыбораККоличествуСекунд();
	
	ПериодПовтораВТечениеДня = ЗначенияВыбора.Получить(ИнтервалОбменаССайтом);
	Возврат ?(ПериодПовтораВТечениеДня = Неопределено, 1800, ПериодПовтораВТечениеДня);
	
КонецФункции //ПолучитьПериодПовтораВТечениеДня()

&НаКлиенте
// Функция возвращает соответствие надписей выбора к количеству секунд
// 
Функция СоответствиеЗначенийВыбораККоличествуСекунд()
	
	СоответствиеНадписей = Новый Соответствие;
	СоответствиеНадписей.Вставить("Один раз в 5 минут", 300);
	СоответствиеНадписей.Вставить("Один раз в 15 минут", 900);
	СоответствиеНадписей.Вставить("Один раз в 30 минут", 1800);
	СоответствиеНадписей.Вставить("Один раз в час", 3600);
	СоответствиеНадписей.Вставить("Один раз в 3 часа", 10800);
	СоответствиеНадписей.Вставить("Один раз в 6 часов", 21600);
	СоответствиеНадписей.Вставить("Один раз в 12 часов", 43200);
	
	Возврат СоответствиеНадписей;
	
КонецФункции //СоответствиеЗначенийВыбораККоличествуСекунд()

&НаКлиенте
// Заполняет значения расписания регламентного задания.
//
Процедура УстановитьРасписаниеРегламентногоЗадания()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);

	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	ПериодПовтораВТечениеДня = ПолучитьПериодПовтораВТечениеДня();
	
	Если ПериодПовтораВТечениеДня > 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.Месяцы					= Месяцы;
		Расписание.ДниНедели				= ДниНедели;
		Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня; // секунды
		Расписание.ПериодПовтораДней		= 1; // каждый день
		
		РасписаниеРегламентногоЗадания = Расписание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если Не РазделениеВключено Тогда
		
		Если РасписаниеРегламентногоЗадания = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
		Иначе
			ТекстЗаголовка = РасписаниеРегламентногоЗадания;
		КонецЕсли;
		
		Элементы.НастроитьРасписаниеОбмена.Заголовок = ТекстЗаголовка;
		
	Иначе
		
		Если РасписаниеРегламентногоЗадания = Неопределено Тогда
			
			ИнтервалОбменаССайтом = "Один раз в 30 минут"; 
			
		Иначе
			
			ЗначениеПериода = РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня;
			Если ЗначениеПериода = 0 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 30 минут";
				
			ИначеЕсли ЗначениеПериода <= 300 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 5 минут";
				
			ИначеЕсли ЗначениеПериода <= 900 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 15 минут";
				
			ИначеЕсли ЗначениеПериода <= 1800 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 30 минут";
				
			ИначеЕсли ЗначениеПериода <= 3600 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в час";
				
			ИначеЕсли ЗначениеПериода <= 10800 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 3 часа";
				
			ИначеЕсли ЗначениеПериода <= 21600 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 6 часов";
				
			ИначеЕсли ЗначениеПериода <= 43200 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 12 часов";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	УстановитьДоступностьРасписанияОбмена();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		
		Если Не РазделениеВключено Тогда
			ВыполнитьНастройкуРасписанияОбмена();
		Иначе
			УстановитьРасписаниеРегламентногоЗадания();
		КонецЕсли;
		
		УстановитьНадписьРасписанияОбмена();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасписанияОбмена()
	
	Если Не РазделениеВключено Тогда
		Элементы.НастроитьРасписаниеОбмена.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	Иначе
		Элементы.ИнтервалОбменаССайтом.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьНастройкуРасписанияОбменаЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбменаЗавершение(Расписание, ДополнительныеПараметры) Экспорт

	РасписаниеРегламентногоЗадания = Расписание;

КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияТаблицаКаталогов(Элемент, Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторКаталога = "";
		
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.Группы.Количество() = 1
		И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Группы[0].Значение) 
		И Элемент.ТекущиеДанные.Группы[0].Представление = НадписьВсеЭлементыСписка)
		ИЛИ Элемент.ТекущиеДанные.Группы.Количество() = 0 Тогда
			
		НовыйСписокГрупп = Новый СписокЗначений;
		
		Если Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
			ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		Иначе
			ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
			Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		КонецЕсли;
		
		НовыйСписокГрупп.ТипЗначения = ТипЗначений;
		НовыйСписокГрупп.Добавить(Неопределено, НадписьВсеЭлементыСписка);
		Элемент.ТекущиеДанные.Группы = НовыйСписокГрупп;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговГруппыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Группы = Элементы.ТаблицаКаталогов.ТекущиеДанные.Группы;
	
	Если Группы.Количество() = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(Группы[0].Значение) 
			И Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
			
			Группы.Очистить();
		ИначеЕсли НЕ ЗначениеЗаполнено(Группы[0].Значение) И Группы[0].Представление = НадписьВсеЭлементыСписка Тогда
			Группы.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораКаталога(АдресНастроекКомпоновки)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресНастроекКомпоновки", АдресНастроекКомпоновки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуОтбораКаталогаЗавершение", ЭтотОбъект);
	
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.Форма.ФормаНастройкиОтбора", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтбораКаталогаЗавершение(НастройкиКомпоновки, ДополнительныеПараметры) Экспорт

	Если НастройкиКомпоновки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(НастройкиКомпоновки, УникальныйИдентификатор);
	
	Элементы.ТаблицаКаталогов.ТекущиеДанные.АдресНастроекКомпоновки = АдресНастроекКомпоновки;

КонецПроцедуры // ОткрытьФормуОтбораКаталога()

&НаКлиенте
Процедура ВыбратьВидыЦенНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокВидовЦен", СписокВидовЦен);
	
	Результат = Неопределено;

	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДаннымиССайтом.Форма.ФормаВыбораВидовЦен",ПараметрыФормы,ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьВидыЦенНоменклатурыЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦенНоменклатурыЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    Результат = Результат1;
    
    Если Результат <> Неопределено Тогда
        
        СписокВидовЦен = Результат;
        
        СписокВидовЦенСтрока = "";
        Для каждого ЭлементСЗ Из СписокВидовЦен Цикл
            
            СписокВидовЦенСтрока = СписокВидовЦенСтрока + ?(СписокВидовЦенСтрока = "","","; ") + ЭлементСЗ.Представление;
            
        КонецЦикла;
        
        Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = СписокВидовЦенСтрока;
        
        Модифицированность = Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублированиеСтатусов(ИмяКолонки)
	
	СтатусЗаказаНаСайте = Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные.СтатусЗаказаНаСайте;
	СостояниеЗаказаПокупателя = Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные.СостояниеЗаказаПокупателя;
	
	Если НЕ ПустаяСтрока(СтатусЗаказаНаСайте) Тогда
		Найдено = Объект.СоответствиеСтатусовЗаказов.НайтиСтроки(Новый Структура("СтатусЗаказаНаСайте", СтатусЗаказаНаСайте));
		Если Найдено.Количество() > 1 Тогда
			ИмяКолонки = "СтатусЗаказаНаСайте";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеЗаказаПокупателя) Тогда
		Найдено = Объект.СоответствиеСтатусовЗаказов.НайтиСтроки(Новый Структура("СостояниеЗаказаПокупателя", СостояниеЗаказаПокупателя));
		Если Найдено.Количество() > 1 Тогда
			ИмяКолонки = "СтатусЗаказаКлиента";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПроверитьУникальностьИдентификатора()
	
	ИдентификаторКаталога = Элементы.ТаблицаКаталогов.ТекущиеДанные.ИдентификаторКаталога;
	Найдено = ТаблицаКаталогов.НайтиСтроки(Новый Структура("ИдентификаторКаталога", ИдентификаторКаталога));
	ИдентификаторыУникальны = Найдено.Количество() = 1;
	
	Если НЕ ИдентификаторыУникальны Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Идентификатор каталога должен быть уникальным!'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ТаблицаКаталогов", ТаблицаКаталогов.Индекс(Элементы.ТаблицаКаталогов.ТекущиеДанные) + 1, "ИдентификаторКаталога"));
	
	КонецЕсли;
	
	Возврат ИдентификаторыУникальны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаСервере
Процедура УстановитьНадписьРасписанияОбменаСервер()
	
	Если Не РазделениеВключено Тогда
		
		Если РасписаниеРегламентногоЗадания = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
		Иначе
			ТекстЗаголовка = РасписаниеРегламентногоЗадания;
		КонецЕсли;
		
		Элементы.НастроитьРасписаниеОбмена.Заголовок = ТекстЗаголовка;
		
	Иначе
		
		Если РасписаниеРегламентногоЗадания = Неопределено Тогда
			
			ИнтервалОбменаССайтом = "Один раз в 30 минут"; 
			
		Иначе
			
			ЗначениеПериода = РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня;
			Если ЗначениеПериода = 0 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 30 минут";
				
			ИначеЕсли ЗначениеПериода <= 300 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 5 минут";
				
			ИначеЕсли ЗначениеПериода <= 900 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 15 минут";
				
			ИначеЕсли ЗначениеПериода <= 1800 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 30 минут";
				
			ИначеЕсли ЗначениеПериода <= 3600 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в час";
				
			ИначеЕсли ЗначениеПериода <= 10800 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 3 часа";
				
			ИначеЕсли ЗначениеПериода <= 21600 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 6 часов";
				
			ИначеЕсли ЗначениеПериода <= 43200 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 12 часов";
				
			КонецЕсли;

			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницТипаОбмена()
	
	Если Объект.ВыгружатьНаСайт Тогда
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаНаСайт;
	Иначе
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаВКаталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницФормы()
	
	Элементы.СтраницаВыгрузкаТоваров.Видимость = Объект.ОбменТоварами;
	Элементы.СтраницаОбменЗаказами.Видимость = Объект.ОбменЗаказами;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Задание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(Объект.ИдентификаторРегламентногоЗадания);
	
	Если Не Задание = Неопределено Тогда
		
		Если ТипЗнч(Задание.Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
			РасписаниеРегламентногоЗадания = Задание.Расписание;
		ИначеЕсли ТипЗнч(Задание.Расписание) = Тип("ХранилищеЗначения") Тогда
			РасписаниеРегламентногоЗадания = Задание.Расписание.Получить();
		Иначе
			РасписаниеРегламентногоЗадания = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УзелОбменаЭтаИБ = ПроверитьУзелОбменаЭтаИБСервер();
	
	Если УзелОбменаЭтаИБ Тогда
		Возврат;
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ВыполнитьДействияПриСозданииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ИспользоватьРегламентныеЗадания
		И (РасписаниеРегламентногоЗадания = Неопределено
		ИЛИ (РазделениеВключено И Не РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня > 0)) Тогда
		
		ТекущийОбъект.ИспользоватьРегламентныеЗадания = Ложь;
	КонецЕсли;
	
	Задание = ОбменССайтомРегламентныеЗадания.НайтиЗадание(ТекущийОбъект.ИдентификаторРегламентногоЗадания);
	Если ТекущийОбъект.ИспользоватьРегламентныеЗадания Тогда
		
		Если Задание = Неопределено Тогда
			ИдентификаторЗадания = ОбменССайтомРегламентныеЗадания.СоздатьНовоеЗадание(ТекущийОбъект.Код, ТекущийОбъект.Наименование, РасписаниеРегламентногоЗадания);
			ТекущийОбъект.ИдентификаторРегламентногоЗадания = ИдентификаторЗадания;
		Иначе
			ОбменССайтомРегламентныеЗадания.УстановитьПараметрыЗадания(Задание, Истина, ТекущийОбъект.Код, ТекущийОбъект.Наименование, РасписаниеРегламентногоЗадания);
		КонецЕсли;
		
	Иначе
		
		Если Задание <> Неопределено Тогда
			ОбменССайтомРегламентныеЗадания.УдалитьЗадание(Задание);
		КонецЕсли;
		ТекущийОбъект.ИдентификаторРегламентногоЗадания = Неопределено;
		
	КонецЕсли;
	
	// Сохранение видов цен.
	
	ВидыЦен = ТекущийОбъект.ВидыЦен;
	ВидыЦен.Очистить();
	
	Для каждого ЭлементСЗ Из СписокВидовЦен Цикл 
		
		НоваяСтрока = ВидыЦен.Добавить();
		НоваяСтрока.ВидЦен = ЭлементСЗ.Значение;
		
	КонецЦикла;
	
	// Таблица каталогов.
	
	ТаблицаКаталоговТЗ = ДанныеФормыВЗначение(ТаблицаКаталогов, Тип("ТаблицаЗначений"));
	ТаблицаКаталоговТЗ.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталоговТЗ Цикл
		
		Если НЕ ЭтоАдресВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НастройкиКомпоновки = ПолучитьИзВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки);
		СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки = Новый ХранилищеЗначения(НастройкиКомпоновки);
		
	КонецЦикла;
	
	ТаблицаКаталоговТЗ.Колонки.Удалить("АдресНастроекКомпоновки");
	
	ТекущийОбъект.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталоговТЗ);
	ТекущийОбъект.ВыполнятьПолнуюВыгрузкуПринудительно = ТекущийОбъект.ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменССайтом.ОбновитьПараметрыСеанса();
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если УзелОбменаЭтаИБ Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
			
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ОбменТоварами И ТаблицаКаталогов.Количество() = 0 Тогда
		
		Отказ = Истина;
		
		Сообщение = НСтр("ru = 'Таблица каталогов не заполнена!'");
		Поле = "ТаблицаКаталогов";
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, Объект.Ссылка, Поле);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик команды КомандаПроверитьСоединение.
//
&НаКлиенте
Процедура КомандаПроверитьСоединение(Команда)
	
	Если Модифицированность Тогда
		
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаПроверитьСоединениеЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Настройка обмена изменена и не записана. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	КомандаПроверитьСоединениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьСоединениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    
    Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ Записать() Тогда
        Возврат;
    КонецЕсли;
    
    КомандаПроверитьСоединениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьСоединениеФрагмент()
    
    Перем ТекстПредупреждения;
    
    ТекстПредупреждения = "";
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ИмяПользователя", Объект.ИмяПользователя);
	НастройкиПодключения.Вставить("АдресСайта", Объект.АдресСайта);
	
    ПроверитьПодключение(НастройкиПодключения, ТекстПредупреждения);
    
    ПоказатьПредупреждение(,ТекстПредупреждения);

КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключение(НастройкиПодключения, ТекстПредупреждения)
	
	Если Объект.Ссылка.Пустая() ИЛИ ПарольИзменен Тогда
		ПарольИзХранилища = Пароль;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПарольИзХранилища = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Пароль", ПарольИзХранилища);
	
	ОбменССайтом.ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстПредупреждения);
	
КонецПроцедуры

// Процедура - обработчик команды НастроитьРасписаниеОбмена.
//
&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	
	ВыполнитьНастройкуРасписанияОбмена();
	УстановитьНадписьРасписанияОбмена();
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик команды НастроитьОтбор.
//
&НаКлиенте
Процедура НастроитьОтбор(Команда)
	
	Если Элементы.ТаблицаКаталогов.ТекущиеДанные = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуОтбораКаталога(Элементы.ТаблицаКаталогов.ТекущиеДанные.АдресНастроекКомпоновки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события ПередОкончаниемРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура СоответствиеСтатусовЗаказовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = "";
	Если НЕ ПроверитьДублированиеСтатусов(ИмяКолонки) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Такой статус уже указан в другой строке таблицы!'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.СоответствиеСтатусовЗаказов", Объект.СоответствиеСтатусовЗаказов.Индекс(Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные) + 1, ИмяКолонки));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода КаталогВыгрузки.
//
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
    
    Если Не Подключено Тогда
        ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
        Возврат;
    КонецЕсли;
    
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
    
    Диалог.Заголовок = НСтр("ru = 'Укажите каталог обмена'");
    Диалог.Каталог = Объект.КаталогВыгрузки;
    
    Диалог.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));

КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        Объект.КаталогВыгрузки = Диалог.Каталог;
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события Открытие поля ввода КаталогВыгрузки.
//
&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.КаталогВыгрузки;
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗапускПриложения(Неопределено, ПолноеИмяФайла);
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода ФайлЗагрузки.
//
&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ФайлЗагрузкиНачалоВыбораЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбораЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
    
    Если Не Подключено Тогда
        
        ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
        Возврат;
        
    КонецЕсли;
    
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    
    Диалог.Заголовок = НСтр("ru = 'Выберите xml-файл с заказами'");
    Диалог.ПолноеИмяФайла = Объект.ФайлЗагрузки;
    Диалог.Фильтр = НСтр("ru = 'Документ XML'") + " (*.xml)|*.xml";
    
    Диалог.Показать(Новый ОписаниеОповещения("ФайлЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));

КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        
        Объект.ФайлЗагрузки = Диалог.ПолноеИмяФайла;
        
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события Открытие поля ввода ФайлЗагрузки.
//
&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.ФайлЗагрузки;
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗапускПриложения(Неопределено, "explorer.exe /select, " + ПолноеИмяФайла);
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Комментарий");
	
КонецПроцедуры

// Процедура - обработчик события ПередОкончаниемРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Отказ = НЕ ПроверитьУникальностьИдентификатора();
	
КонецПроцедуры

// Процедура - обработчик события ПриОкончанииРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыбранныеГруппыСерверБезКонтекста(Элемент.ТекущиеДанные.Группы, НадписьВсеЭлементыСписка, Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов);
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторКаталога) Тогда
		Элемент.ТекущиеДанные.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.Каталог) Тогда
		Элемент.ТекущиеДанные.Каталог = НСтр("ru = 'Каталог товаров'") + " " + ВРег(СокрЛП(Лев(Элемент.ТекущиеДанные.ИдентификаторКаталога, 8)));
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ПослеУдаления таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования таблицы ТаблицаКаталогов.
//
&НаКлиенте
Процедура ТаблицаКаталоговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТаблицаКаталогов(Элемент, Копирование);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля переключателя ПереключательНазначениеОбмена.
//
&НаКлиенте
Процедура ПереключательНазначениеОбменаПриИзменении(Элемент)
	
	ПриИзмененииПереключательНазначениеОбмена();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля флажка ИспользоватьРегламентныеЗадания.
//
&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ПриИзмененииИспользоватьРегламентныеЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбменаССайтомПриИзменении(Элемент)
	
	УстановитьРасписаниеРегламентногоЗадания();
	УстановитьНадписьРасписанияОбмена();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля флажка ОбменТоварами.
//
&НаКлиенте
Процедура ОбменТоварамиПриИзменении(Элемент)
	
	ПриИзмененииОбменТоварами();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля флажка ОбменЗаказами.
//
&НаКлиенте
Процедура ОбменЗаказамиПриИзменении(Элемент)
	
	ПриИзмененииОбменЗаказами();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СпособИдентификацииКонтрагентов.
//
&НаКлиенте
Процедура СпособИдентификацииКонтрагентовПриИзменении(Элемент)
	
	ПриИзмененииСпособИдентификацииКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказовПокупателей"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	АвтоПодборСостоянияЗаказа(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеСтатусовЗаказовСтатусЗаказаКлиентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	АвтоПодборСостоянияЗаказа(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АвтоПодборСостоянияЗаказа(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ВидЗаказа", Объект.ВидЗаказа);
	ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа)
	
	Возврат ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	
КонецФункции

&НаКлиенте
Процедура ОтборГруппыКатегорииНоменклатурыПриИзменении(Элемент)
	
	Если ТаблицаКаталогов.Количество()>0 Тогда
		ТаблицаКаталогов.Очистить();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьПараметрыТаблицыКаталоговКлиент", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыТаблицыКаталоговКлиент()
	
	ЗаголовокТаблицы = НСтр("ru = 'Таблица каталогов (соответствие групп номенклатуры каталогам на сайте)'");
	Если Объект.ОтборГруппыКатегорииНоменклатуры = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		ЗаголовокКолонки = НСтр("ru = 'Группы номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе
		ЗаголовокКолонки = НСтр("ru = 'Категории номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	КонецЕсли;
	
	Элементы.ГруппаТаблицаКаталогов.Заголовок = ЗаголовокТаблицы;
	Элементы.ТаблицаКаталоговГруппыКатегории.Заголовок = ЗаголовокКолонки;
	Элементы.ТаблицаКаталоговГруппыКатегории.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстФайловОбмена(Команда)

	УзелОбмена = Объект.Ссылка;
	
    Если УзелОбмена = ОбменССайтомПовтИсп.ПолучитьЭтотУзелПланаОбмена("ОбменУправлениеНебольшойФирмойСайт") Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
        Возврат;
    КонецЕсли;
    
    СоответствиеПакетов = ОбменССайтом.ТекстФайлаОбмена(УзелОбмена, Истина);
	
	Для каждого Пакет Из СоответствиеПакетов Цикл
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Пакет.Значение);
		Текст.Показать(Пакет.Ключ);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстФайловПолногоОбмена(Команда)

	УзелОбмена = Объект.Ссылка;
	
    Если УзелОбмена = ОбменССайтомПовтИсп.ПолучитьЭтотУзелПланаОбмена("ОбменУправлениеНебольшойФирмойСайт") Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
        НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
        Возврат;
    КонецЕсли;
    
    СоответствиеПакетов = ОбменССайтом.ТекстФайлаОбмена(УзелОбмена, Ложь);
	
	Для каждого Пакет Из СоответствиеПакетов Цикл
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Пакет.Значение);
		Текст.Показать(Пакет.Ключ);
	КонецЦикла; 
	
КонецПроцедуры
