
#Область СобытияФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если НЕ ТекущийОбъект = НеОпределено Тогда
		
		УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект);
		
		Возврат;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ИспользоватьРегламентныеЗадания Тогда
		Если ТекущийОбъект.Код <> "" тогда
			Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
			Если Задание = НеОпределено Тогда
				Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("Б_ЗаданиеБитрикс24_1С");
				Задание.Использование = Истина;
				Задание.Ключ = Строка(Новый УникальныйИдентификатор);
				Задание.Наименование = ТекущийОбъект.Наименование;
				ТекущийОбъект.ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
			КонецЕсли;
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(ТекущийОбъект.Код);
			Задание.Параметры = ПараметрыЗадания;
			Задание.Расписание = РасписаниеРегламентногоЗадания;
			Задание.Записать();
			
		Иначе
			Сообщить("Код настройки не прописался в регламентном задании. Необходимо переуказать регламентное задание настройку обмена");	
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресНастроек) тогда
		лНастройки = ПолучитьИзВременногоХранилища(АдресНастроек);
		лНастройки.Контрагенты.ВыгрузкаКонтрагентов = ВыгрузкаКонтрагентов;
		лНастройки.Документы.ВыгрузкаДокументов		= ВыгрузкаДокументов;
		
		ТекущийОбъект.СохраненныеНастройки = Новый ХранилищеЗначения(лНастройки);
	КонецЕсли;	
	
	ТекущийОбъект.ВыгружатьТолькоИзменения	= ?(ПереключательВыгрузкаИзменений = 0, Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УзелОбменаЭтаИБ = Объект.Ссылка = ПланыОбмена.Б_Битрикс24_1С.УзелОбменаЭтойИБСервер();
	
	Если УзелОбменаЭтаИБ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если УзелОбменаЭтаИБ Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
			
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	
	УстановитьНадписьРасписанияОбмена();   
	ПереключательВыгрузкаИзменений = ?(Объект.ВыгружатьТолькоИзменения, 1, 0);
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект = НеОпределено)
	
	Если НЕ ТекущийОбъект = НеОпределено Тогда
		
		УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект);
		
		ОбновитьТокен();

		Возврат;
	
	КонецЕсли;

	ЗаполнениеНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТокен()
	Токен = РегистрыСведений.Б_Битрикс24_1С_ТокеныОбменаСБ24.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Адрес, НастройкаВыгрузкиБ24","", Объект.Ссылка)).Токен;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеНастроек()
	
	ОбновитьТокен();
	
	СохраненнаяСтруктураНастроек = РеквизитФормыВЗначение("Объект").СохраненныеНастройки.Получить();
	
	Если ТипЗнч(СохраненнаяСтруктураНастроек) = Тип("Структура") Тогда

		ВыгрузкаДокументов 				= СохраненнаяСтруктураНастроек.Документы.ВыгрузкаДокументов;
		ВыгрузкаКонтрагентов 			= СохраненнаяСтруктураНастроек.Контрагенты.ВыгрузкаКонтрагентов;
		ВыгрузкаКонтактов 				= СохраненнаяСтруктураНастроек.Контакты.ВыгрузкаКонтактов;
		
		АдресНастроек	= ПоместитьВоВременноеХранилище (СохраненнаяСтруктураНастроек, УникальныйИдентификатор);
		
	Иначе
		
		ВыгрузкаКонтрагентов 	= Истина;
		ВыгрузкаКонтактов 		= Истина;
		ВыгрузкаДокументов 		= Истина;
		Объект.ВыгружатьТолькоИзменения = Истина;
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("Контрагенты"	, ПолучитьНастройкиКонтрагентовПоУмолчанию());
		СтруктураНастроек.Вставить("Контакты"		, ПолучитьНастройкиКонтактовПоУмолчанию());
		СтруктураНастроек.Вставить("Документы"		, ПолучитьНастройкиДокументовПоУмолчанию());
		
		АдресНастроек	= ПоместитьВоВременноеХранилище (СтруктураНастроек, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиКонтрагентовПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыгрузкаКонтрагентов"			, Истина);	
	Результат.Вставить("КоличествоКонтрагентовВПакете"	, 50);	
	
	СтруктураССхемамиК = ПланыОбмена.Б_Битрикс24_1С.ПолучитьСтруктуруСхемКомпоновки();
	
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов = Новый КомпоновщикНастроекКомпоновкиДанных;		
	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Контрагенты, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.ЗагрузитьНастройки(СтруктураССхемамиК.Контрагенты.НастройкиПоУмолчанию);
	
	Результат.Вставить("НастройкиКомпоновкиДанныхКонтрагентов", КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.ПолучитьНастройки());	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиКонтактовПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыгрузкаКонтактов"			, Истина);	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиДокументовПоУмолчанию()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыгрузкаДокументов"			, Истина);	
	Результат.Вставить("КоличествоДокументовВПакете", 50);	
	Результат.Вставить("ТочкаАктуальности"			, НачалоМесяца(ТекущаяДата()));	
	
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("РасходнаяНакладная");	
	Результат.Вставить("СписокДокументов"		, СписокДокументов);	
	
	СтруктураССхемамиК = ПланыОбмена.Б_Битрикс24_1С.ПолучитьСтруктуруСхемКомпоновки();
	
	КомпоновщикНастроекКомпоновкиДанныхДокументов = Новый КомпоновщикНастроекКомпоновкиДанных;		
	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Документы, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхДокументов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхДокументов.ЗагрузитьНастройки(СтруктураССхемамиК.Документы.НастройкиПоУмолчанию);
	
	Результат.Вставить("НастройкиКомпоновкиДанныхДокументов", КомпоновщикНастроекКомпоновкиДанныхДокументов.ПолучитьНастройки());	
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьВыгрузкуНаСервере(Узел)
	Б_Битрикс24_1С_Сервер.ВыполнитьВыгрузку(Узел);    
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСохраненииНастройки", ЭтаФорма, Параметры), "Настройка выгрузки изменена и не записана. Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Состояние("Начата выгрузка на портал");
		
		ВыполнитьВыгрузкуНаСервере(Объект.Ссылка);
		ОбновитьТокен();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОСохраненииНастройки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
			
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Состояние("Начата выгрузка на портал");
		
		ВыполнитьВыгрузкуНаСервере(Объект.Ссылка);
		ОбновитьТокен();
		
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыгрузитьОрганизацииНаСервере()
	Б_Битрикс24_1С_Сервер.ВыгрузитьОрганизации(Объект.Ссылка);    
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьОрганизации(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСохраненииНастройкиДляОрганизации", ЭтаФорма, Параметры), "Настройка выгрузки изменена и не записана. Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
				
		Состояние("Начата выгрузка на портал");
		
		ВыгрузитьОрганизацииНаСервере();
		ОбновитьТокен();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОСохраненииНастройкиДляОрганизации(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
			
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Состояние("Начата выгрузка на портал");
		
		ВыгрузитьОрганизацииНаСервере();
		ОбновитьТокен();
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроек"	, АдресНастроек);
	
	ОтветФормы = Неопределено;
	
	ОткрытьФорму("ПланОбмена.Б_Битрикс24_1С.Форма.НастройкиВыгрузки", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьВыгрузкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВыгрузкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОтветФормы = Результат;
    
    Если ОтветФормы <> Неопределено тогда
        
        Модифицированность = Истина;
	
		ОбновлениеНастроекСервер(ОтветФормы, Ложь);
		
    КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Прочие

&НаСервере
Процедура ОбновлениеНастроекСервер(ОтветФормы, ОбновлятьТаблицуКаталогов = Ложь)
	
	Если ЭтоАдресВременногоХранилища(ОтветФормы.АдресНастроек) тогда
	
		Настройки 	= ПолучитьИзВременногоХранилища(ОтветФормы.АдресНастроек);
		
		АдресНастроек = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыгружаемыеОбъекты()
	
	Если ЭтоАдресВременногоХранилища(АдресНастроек) тогда
		лНастройки = ПолучитьИзВременногоХранилища(АдресНастроек);
		лНастройки.Контрагенты.ВыгрузкаКонтрагентов = ВыгрузкаКонтрагентов;
		лНастройки.Контакты.ВыгрузкаКонтактов 		= ВыгрузкаКонтактов;
		лНастройки.Документы.ВыгрузкаДокументов		= ВыгрузкаДокументов;
		АдресНастроек	= ПоместитьВоВременноеХранилище (лНастройки, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеСРегламентнымиЗаданиями

////////////////////////////////////////////////////////////////
//                                                           //
//  ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С РЕГЛАМЕНТНЫМИ ЗАДАНИЯМИ //
//                                                         //
////////////////////////////////////////////////////////////

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект)
	
	Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
	
	Если НЕ Задание = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Задание.Расписание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	ПриИзмененииИспользоватьРегламентныеЗадания()
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	УстановитьДоступностьРасписанияОбмена();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		ВыполнитьНастройкуРасписанияОбмена();
		УстановитьНадписьРасписанияОбмена();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеОбмена.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасписанияОбмена()
	Элементы.НастроитьРасписаниеОбмена.Доступность = Объект.ИспользоватьРегламентныеЗадания;
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменятьРасписание", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменятьРасписание(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = РасписаниеЗадания;
	УстановитьНадписьРасписанияОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	ВыполнитьНастройкуРасписанияОбмена();
	УстановитьНадписьРасписанияОбмена();
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогЛогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Предупреждение(НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог лога'");
	Диалог.Каталог   = Объект.КаталогЛога;
	
	Если Диалог.Выбрать() Тогда
		
		Объект.КаталогЛога = Диалог.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЛогаОткрытие(Элемент, СтандартнаяОбработка)
			
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(Объект.КаталогЛога) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение(Объект.КаталогЛога);

КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьДокументыПриИзменении(Элемент)
	ОбновитьВыгружаемыеОбъекты();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаКонтрагентовПриИзменении(Элемент)
	ОбновитьВыгружаемыеОбъекты();
КонецПроцедуры

&НаКлиенте
Процедура АдресПорталаПриИзменении(Элемент)
	ОбновитьТокен();
КонецПроцедуры

&НаКлиенте
Процедура ТокенИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаКонтактовПриИзменении(Элемент)
	ОбновитьВыгружаемыеОбъекты();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НоваяЗапись = РегистрыСведений.Б_Битрикс24_1С_ТокеныОбменаСБ24.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период 				= ТекущаяДата();
	НоваяЗапись.НастройкаВыгрузкиБ24= ТекущийОбъект.Ссылка;
	НоваяЗапись.Адрес 				= "";
	НоваяЗапись.Токен 				= Токен;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

