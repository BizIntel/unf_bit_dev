
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбменСGoogle.ПодготовитьРеквизитыДляАвтоподбораИзКлассификатора(ЭтотОбъект, Параметры);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПриСозданииПриЧтенииНаСервере();
		
		Если ЗначениеЗаполнено(КлассификаторДляЗаполненияКИ) Тогда
			ЗаполнитьКонтактнуюИнформацию(КлассификаторДляЗаполненияКИ);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтотОбъект.СобытиеДляПоказаПослеЗакрытия = Параметры.СобытиеДляПоказаПослеЗакрытия;
	
	Элементы.Должность.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Новый Массив));
	Элементы.Должность.КнопкаВыпадающегоСписка = Элементы.Должность.СписокВыбора.Количество() > 0;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КомандыГлобальные");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И ЗначениеЗаполнено(СобытиеДляПоказаПослеЗакрытия) Тогда
		ПоказатьЗначение(, СобытиеДляПоказаПослеЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеРолей(ТекущийОбъект);
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохраним введеную должность контактного лица в истории ввода
	Если Не ПустаяСтрока(Объект.Должность) Тогда
		
		// Удалим если значение уже было
		НайденныйЭлемент = Элементы.Должность.СписокВыбора.НайтиПоЗначению(СокрЛП(Объект.Должность));
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Должность.СписокВыбора.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		// Вставим на первое место
		Элементы.Должность.СписокВыбора.Вставить(0, СокрЛП(Объект.Должность));
		// Сократим список выбора до 10 значений
		Пока Элементы.Должность.СписокВыбора.Количество() > 10 Цикл
			Элементы.Должность.СписокВыбора.Удалить(Элементы.Должность.СписокВыбора.Количество()-1);
		КонецЦикла;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СпискиВыбора", "ДолжностиКонтактныхЛиц", Элементы.Должность.СписокВыбора.ВыгрузитьЗначения());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("КонтактноеЛицо",	Объект.Ссылка);
	ПараметрОповещения.Вставить("Владелец",			Объект.Владелец);
	ПараметрОповещения.Вставить("Наименование",		Объект.Наименование);
	
	Оповестить("Запись_КонтактноеЛицо", ПараметрОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// УНФ.Google
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ОписаниеОповещения") Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьОбработкуОповещения(ВыбранноеЗначение);
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторКонтактов") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьКонтактнуюИнформацию(ВыбранноеЗначение);
		ОбновитьЭлементыКонтактнойИнформации();
	КонецЕсли;
	// Конец УНФ.Google
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.НаименованиеАвтоПодбор(ЭтотОбъект, Элемент.Имя, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоРолейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РольИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Роль_")+1);
	СтрокаРолей = ДанныеРолей.НайтиПоИдентификатору(РольИД);
	ДанныеРолей.Удалить(СтрокаРолей);
	
	ОбновитьЭлементыРолей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	ПрочитатьДанныеРолей();
	ОбновитьЭлементыРолей();
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект, , 6);
	// Конец УНФ.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыКонтактнойИнформации()
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбновитьЭлементыКонтактнойИнформации(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область Роли

&НаСервере
Процедура ПрочитатьДанныеРолей()
	
	ДанныеРолей.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаРоли.Роль КАК Роль,
		|	КонтактныеЛицаРоли.Роль.ПометкаУдаления КАК ПометкаУдаления,
		|	КонтактныеЛицаРоли.Роль.Наименование КАК Наименование
		|ИЗ
		|	Справочник.КонтактныеЛица.Роли КАК КонтактныеЛицаРоли
		|ГДЕ
		|	КонтактныеЛицаРоли.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыеДанныеРоли = ДанныеРолей.Добавить();
		НавигационнаяСсылкаФС = "Роль_" + НовыеДанныеРоли.ПолучитьИдентификатор();
		
		НовыеДанныеРоли.Роль = Выборка.Роль;
		НовыеДанныеРоли.ПометкаУдаления = Выборка.ПометкаУдаления;
		НовыеДанныеРоли.ПредставлениеРоли = ФорматированнаяСтрокаПредставленияРоли(Выборка.Наименование, Выборка.ПометкаУдаления, НавигационнаяСсылкаФС);
		НовыеДанныеРоли.ДлинаРоли = СтрДлина(Выборка.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыРолей()
	
	ФС = ДанныеРолей.Выгрузить(, "ПредставлениеРоли").ВыгрузитьКолонку("ПредставлениеРоли");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы.ОблакоРолей.Заголовок	= Новый ФорматированнаяСтрока(ФС);
	Элементы.РолиИОтступ.Видимость	= ФС.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРолей(ТекущийОбъект)
	
	ТекущийОбъект.Роли.Загрузить(ДанныеРолей.Выгрузить(,"Роль"));
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьРольНаСервере(Роль)
	
	Если ДанныеРолей.НайтиСтроки(Новый Структура("Роль", Роль)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРоли = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Роль, "Наименование, ПометкаУдаления");
	
	СтрокаРолей = ДанныеРолей.Добавить();
	НавигационнаяСсылкаФС = "Роль_" + СтрокаРолей.ПолучитьИдентификатор();
	
	СтрокаРолей.Роль = Роль;
	СтрокаРолей.ПометкаУдаления = ДанныеРоли.ПометкаУдаления;
	СтрокаРолей.ПредставлениеРоли = ФорматированнаяСтрокаПредставленияРоли(ДанныеРоли.Наименование, ДанныеРоли.ПометкаУдаления, НавигационнаяСсылкаФС);
	СтрокаРолей.ДлинаРоли = СтрДлина(ДанныеРоли.Наименование);
	
	ОбновитьЭлементыРолей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИПрикрепитьРольНаСервере(знач ЗаголовокРоли)
	
	Роль = НайтиСоздатьРоль(ЗаголовокРоли);
	ПрикрепитьРольНаСервере(Роль);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьРоль(Знач ЗаголовокРоли)
	
	Роль = Справочники.РолиКонтактныхЛиц.НайтиПоНаименованию(ЗаголовокРоли, Истина);
	
	Если Роль.Пустая() Тогда
		
		РольОбъект = Справочники.РолиКонтактныхЛиц.СоздатьЭлемент();
		РольОбъект.Наименование = ЗаголовокРоли;
		РольОбъект.Записать();
		Роль = РольОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Роль;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаПредставленияРоли(НаименованиеРоли, ПометкаУдаления, НавигационнаяСсылкаФС)
	
	#Если Клиент Тогда
	Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	БазовыйШрифт = ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля("ОбычныйШрифтТекста");
	#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	БазовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	#КонецЕсли
	
	Шрифт = Новый Шрифт(БазовыйШрифт,,,Истина,,?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеРоли + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаКлиенте
Процедура ПолеВводаРолиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
		ПрикрепитьРольНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаРолиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьРольНаСервере(Текст);
		ТекущийЭлемент = Элементы.ПолеВводаРоли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область Google

&НаСервере
Процедура ЗаполнитьКонтактнуюИнформацию(Знач КлассификаторСсылка)
	
	ДанныеКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	КлассификаторСсылка,
	"Title, JSON");
	
	Объект.Наименование = ДанныеКонтакта.Title;
	
	ЭтотОбъект.КонтактнаяИнформация.Очистить();
	
	Справочники.КлассификаторКонтактов.ЗаполнитьКонтактнуюИнформациюИзJSON(
	ЭтотОбъект.КонтактнаяИнформация,
	ДанныеКонтакта.JSON,
	Тип("СправочникСсылка.КонтактныеЛица"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
