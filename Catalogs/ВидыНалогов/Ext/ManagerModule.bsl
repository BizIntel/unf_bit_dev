#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает дату вступления в силу актуального классификатора кодов бюджетной классификации
//
Функция ДатаАктуальностиКлассификатора() Экспорт
	
	Возврат '20170101';
	
КонецФункции

Функция ВидыНалогов() Экспорт
	
	Результат = Новый Структура;
	
	КоллекцияМетаданных = Перечисления.ВидыНалогов.Получить(0).Метаданные().ЗначенияПеречисления;
	
	Для Индекс = 0 По КоллекцияМетаданных.Количество() - 1 Цикл
		Результат.Вставить(КоллекцияМетаданных[Индекс].Имя, Перечисления.ВидыНалогов.Получить(Индекс));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает КБК с учетом вида налогового обязательства
//
// Параметры:
//   КБК                        - Строка
//   ВидНалоговогоОбязательства - Строка
//
// Возвращаемое значение:
//   Строка
//
Функция КБКПоВидуНалоговогоОбязательства(КБК, ВидНалога, Знач ВидНалоговогоОбязательства = Неопределено, Знач Период = Неопределено, Знач ПериодПлатежа = Неопределено) Экспорт
	
	Если ПустаяСтрока(КБК) Тогда
		Возврат КБК;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КБК) <> ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
			Возврат КБК; // Сохраняем заданный код подвида доходов
		Иначе
			ВидНалоговогоОбязательства = "Налог";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	КодГлавногоАдминистратора    = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КБК);
	КодВидаДоходов               = ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КБК);
	КодПодвидаДоходов            = КодПодвидаДоходов(КБК, ВидНалога, ВидНалоговогоОбязательства, Период, ПериодПлатежа);
	КодОперацииСектораУправления = ПлатежиВБюджетКлиентСервер.КодОперацииСектораУправления(КБК);
	
	Возврат КодГлавногоАдминистратора + КодВидаДоходов + КодПодвидаДоходов + КодОперацииСектораУправления;
	
КонецФункции

Функция КодПодвидаДоходов(КБК, ВидНалога, ВидНалоговогоОбязательства, Знач Период, Знач ПериодПлатежа = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ПериодПлатежа) Тогда
		ПериодПлатежа = Период;
	КонецЕсли;
	
	ЭтоНалог    = ВидНалоговогоОбязательства = "Налог";
	ЭтоПени     = ЭтоПени(ВидНалоговогоОбязательства);
	ЭтоПроценты = ЭтоПроценты(ВидНалоговогоОбязательства);
	ЭтоШтраф    = ЭтоШтраф(ВидНалоговогоОбязательства);
	
	Если ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС
		Или ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда
		
		Если ПлатежиВБюджетКлиентСервер.НовыйАдминистраторСтраховыхВзносов(ПериодПлатежа) Тогда
			КодПодвидаДоходов = "1013";
			Если ЭтоПени Тогда
				КодПодвидаДоходов = "2013";
			ИначеЕсли ЭтоПроценты Тогда
				КодПодвидаДоходов = "2213";
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "3013";
			КонецЕсли;
		Иначе
			КодПодвидаДоходов = "1011";
			Если ЭтоПени Или ЭтоПроценты Тогда
				КодПодвидаДоходов = "2011";
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "3011";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные Тогда
		
		КодПодвидаДоходов = "12";
		
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС Тогда
		
		КодПодвидаДоходов = "6";
		
	Иначе
		
		КодПодвидаДоходов = "1";
		Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть
			И ПлатежиВБюджетКлиентСервер.СтраховыеВзносыРаздельно(Период) Тогда
			
			Если ВидНалоговогоОбязательства = "ВзносыСвышеПредела" Тогда
				КодПодвидаДоходов = "12";
			ИначеЕсли ЭтоНалог Тогда
				КодПодвидаДоходов = "11";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПлатежиВБюджетКлиентСервер.НовыйАдминистраторСтраховыхВзносов(ПериодПлатежа)
			И (ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть
			ИЛИ ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть
			ИЛИ ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС) Тогда
			
			Если ЭтоНалог Тогда
				КодПодвидаДоходов = "111";
			ИначеЕсли ЭтоПени Тогда
				КодПодвидаДоходов = "211";
			ИначеЕсли ЭтоПроценты Тогда
				КодПодвидаДоходов = "221";
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "301";
			КонецЕсли;
			
		Иначе
			
			Если ЭтоПени Или ЭтоПроценты Тогда
				КодПодвидаДоходов = "2";
				Если ПлатежиВБюджетКлиентСервер.ПениПроцентыРаздельно(КБК, Период) Тогда
					КодПодвидаДоходов = ?(ЭтоПени, "21", "22");
				КонецЕсли;
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "3";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РасположениеЭлемента = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодПодвидаДоходов");
	Для Счетчик = СтрДлина(КодПодвидаДоходов) + 1 По РасположениеЭлемента.Длина Цикл
		КодПодвидаДоходов = КодПодвидаДоходов + "0";
	КонецЦикла;
	
	Возврат КодПодвидаДоходов;
	
КонецФункции

// Ищет КБК в макете (указанной версии) по переданному Коду
//
// Параметры:
//
//	- Код - Строка
//	- ВерсияКлассификатора - Число - Значение по умолчанию: 0
//	- КБКИсходный - Строка
//
Функция НайтиКодДоходаБюджета(Код, ВерсияКлассификатора = 0, КБКИсходный = "", ОпределитьКОСГУ = Ложь) Экспорт
	
	// Функция оставлена для совместимости.
	// Следует использовать ОписаниеКБК()
	// В качестве Код и КБКИсходный передается шаблон кода (17 знаков)
	
	ВидДохода = Лев(Код, 10);
	КОСГУ    = Сред(Код, 15);
	
	КодДоходаБюджета = Новый Структура();
	КодДоходаБюджета.Вставить("ВидДохода",           ВидДохода);
	КодДоходаБюджета.Вставить("КОСГУ",               КОСГУ);
	КодДоходаБюджета.Вставить("Наименование",        "");
	КодДоходаБюджета.Вставить("КраткоеНаименование", "");
	КодДоходаБюджета.Вставить("ПодвидДохода",        "");
	
	Период = ДатаАктуальностиКлассификатора();
	Если ЗначениеЗаполнено(ВерсияКлассификатора) Тогда
		Период = Дата(ВерсияКлассификатора, 1, 1);
	КонецЕсли;
	
	Если Период < ДатаАктуальностиКлассификатора() Тогда
		Период = НачалоГода(ДатаАктуальностиКлассификатора() - 1);
	КонецЕсли;
	
	ОписаниеКБК = Неопределено;
	Если ЗначениеЗаполнено(КБКИсходный) Тогда
		ОписаниеКБК = ОписаниеКБК("000" + СокрЛП(КБКИсходный), Период, ОпределитьКОСГУ);
	КонецЕсли;
	
	Если ОписаниеКБК = Неопределено Тогда
		ОписаниеКБК = ОписаниеКБК("000" + СокрЛП(Код), Период, ОпределитьКОСГУ);
	КонецЕсли;
	
	Если ОписаниеКБК = Неопределено Тогда
		Возврат КодДоходаБюджета;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КодДоходаБюджета, ОписаниеКБК);
	
	НайденныйШаблон = ОписаниеКБК.НайденныйШаблон;
	
	КодДоходаБюджета.ВидДохода = Лев(НайденныйШаблон,  10);
	КодДоходаБюджета.КОСГУ     = Сред(НайденныйШаблон, 15);
	
	ВыбраныйПодвидДохода = Сред(НайденныйШаблон, 11, 4);
	Если НЕ ПустаяСтрока(ВыбраныйПодвидДохода) И ВыбраныйПодвидДохода <> "0000"
		И СтрДлина(ВыбраныйПодвидДохода) = 4 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВыбраныйПодвидДохода) Тогда
		КодДоходаБюджета.ПодвидДохода = ВыбраныйПодвидДохода;
	КонецЕсли;
	
	Возврат КодДоходаБюджета;
	
КонецФункции

Функция ОписаниеКБК(КБК, Период, ОпределитьКОСГУ = Ложь) Экспорт
	
	Если НЕ ПлатежиВБюджетКлиентСервер.КБКЗадан(КБК) Тогда
		ДлинаКБК = СтрДлина(КБК);
		Если НЕ (ОпределитьКОСГУ И (ДлинаКБК = 13 ИЛИ ДлинаКБК = 17)) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяМакета = ИмяМакетаКБК(Период);
	
	ИсточникДанных = Справочники.ВидыНалогов.ПолучитьМакет(ИмяМакета);
	ОбластьПоиска  = ИсточникДанных.Область(2, 1, ИсточникДанных.ВысотаТаблицы, 1);
	
	ШаблонКБК      = ПлатежиВБюджетКлиентСервер.ШаблонКБК(КБК, Ложь);
	
	ОбластьДанных = Неопределено;
	Если ШаблонКБК <> "" Тогда
		ОбластьДанных = ИсточникДанных.НайтиТекст(ШаблонКБК,, ОбластьПоиска);
		Если ОбластьДанных = Неопределено Тогда
			ШаблонКБК     = ПлатежиВБюджетКлиентСервер.ШаблонКБК(КБК, Истина);
			ОбластьДанных = ИсточникДанных.НайтиТекст(ШаблонКБК,, ОбластьПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластьДанных = Неопределено И ОпределитьКОСГУ Тогда
		ШаблонКБКБезКОСГУ = ПлатежиВБюджетКлиентСервер.ЭлементКБК(КБК, "КодВидаДоходов");
		ОбластьДанных     = ИсточникДанных.НайтиТекст(ШаблонКБКБезКОСГУ,, ОбластьПоиска);
		
		Если ОбластьДанных <> Неопределено Тогда
			ШаблонКБК = ШаблонКБКБезКОСГУ + ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластьДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСтроки                     = ОбластьДанных.Верх;
	НомерКолонкиКод                 = 1;
	НомерКолонкиНаименование        = 2;
	НомерКолонкиКраткоеНаименование = 3;
	
	Описание = Новый Структура();
	
	Если ОпределитьКОСГУ Тогда
		НайденныйКБК = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиКод);
		Описание.Вставить("КОСГУ",           Прав(НайденныйКБК, 3));
		Описание.Вставить("НайденныйШаблон", НайденныйКБК); // ШаблонКБК + Описание.КОСГУ);
	Иначе
		Описание.Вставить("НайденныйШаблон", ШаблонКБК);
	КонецЕсли;
	
	Описание.Вставить("Наименование",        ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиНаименование));
	Описание.Вставить("КраткоеНаименование", ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиКраткоеНаименование));
	
	Возврат Описание;
	
КонецФункции

// Проверяет актуальность реквизитов при подготовке платежных документов
//
// Параметры:
//   Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//   Период - Дата - дата платежного документа
//
// Возвращаемое значение:
//  Булево
//
Функция РеквизитыАктуальны(Налог, Знач Период = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Налог) ИЛИ
		Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если НачалоДня(Период) < ДатаАктуальностиКлассификатора() Тогда
		// Платеж относится к периоду действия старого классификатора
		Возврат Истина;
	КонецЕсли;
	
	ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налог, "ВидНалога, ДатаАктуальности");
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитов.ВидНалога) И ЗначениеЗаполнено(ЗначениеРеквизитов.ДатаАктуальности) Тогда
		// Проверка актуальности выполняется только для поставляемых элементов
		РеквизитыАктуальны = (НачалоДня(ЗначениеРеквизитов.ДатаАктуальности) >= ДатаАктуальностиКлассификатора());
	Иначе
		РеквизитыАктуальны = Истина;
	КонецЕсли;
	
	Возврат РеквизитыАктуальны;
	
КонецФункции

// Возвращает администратора налога по КБК
//
// Параметры:
//   Налог - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыГосударственныхОрганов
//
Функция ВидГосударственногоОргана(Налог) Экспорт
	
	Если ЗначениеЗаполнено(Налог) Тогда
		КБК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "КодБК");
	Иначе
		КБК = "";
	КонецЕсли;
	
	Возврат ПлатежиВБюджетКлиентСервер.ВидГосударственногоОргана(КБК);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет поставляемые данные справочника
//
// Параметры:
//   Период - Дата - период действия классификатора КБК
//
Процедура ОбновитьПоставляемыеДанныеИзКлассификатора(Период = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СуществующиеНалоги = НайтиНалоги();
	
	ВидыНалогов = Новый Массив;
	Для Каждого КлючИЗначение Из СуществующиеНалоги Цикл
		ВидыНалогов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора(Период, Новый Структура("ВидНалога", ВидыНалогов));
	ТаблицаПоставляемыхДанных.Индексы.Добавить("ВидНалога");
	
	НачатьТранзакцию();
	
	Для Каждого КлючИЗначение Из СуществующиеНалоги Цикл
		
		СтрокаДанныхКлассификатора = ТаблицаПоставляемыхДанных.Найти(КлючИЗначение.Ключ, "ВидНалога");
		
		Если СтрокаДанныхКлассификатора <> Неопределено Тогда
			Объект = КлючИЗначение.Значение.ПолучитьОбъект();
			
			Если Объект.НазначениеПлатежаИзменено Тогда
				ЗаполнитьЗначенияСвойств(Объект, СтрокаДанныхКлассификатора,, "НазначениеПлатежа");
			Иначе
				ЗаполнитьЗначенияСвойств(Объект, СтрокаДанныхКлассификатора);
			КонецЕсли;
			
			Объект.ДатаАктуальности = ДатаАктуальностиКлассификатора();
			Объект.КодБК = КБКПоВидуНалоговогоОбязательства(
				СтрокаДанныхКлассификатора.КодБК, СтрокаДанныхКлассификатора.ВидНалога, , ДатаАктуальностиКлассификатора());
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ИмяМакетаКБК(Знач Период = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	Если НачалоГода(Период) < ДатаАктуальностиКлассификатора() Тогда
		Возврат "КлассификацияДоходовБюджетов";
	Иначе
		Возврат "КлассификацияДоходовБюджетов2017";
	КонецЕсли;
	
КонецФункции

Функция НайтиНалоги(ВидыНалогов = Неопределено)
	
	Налоги = Новый Соответствие();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВидыНалоговИПлатежейВБюджет.Ссылка,
		|	ВидыНалоговИПлатежейВБюджет.ВидНалога
		|ИЗ
		|	Справочник.ВидыНалогов КАК ВидыНалоговИПлатежейВБюджет
		|ГДЕ
		|	&УсловиеПоВидамНалогов
		|	И ВидыНалоговИПлатежейВБюджет.ВидНалога <> ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПрочиеНалогиИСборы)
		|	И ВидыНалоговИПлатежейВБюджет.ВидНалога <> ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ПустаяСсылка)";
		
	Если ВидыНалогов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоВидамНалогов", "ВидыНалоговИПлатежейВБюджет.ВидНалога В(&ВидыНалогов)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоВидамНалогов", "ИСТИНА");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыНалогов", ВидыНалогов);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Налоги.Вставить(Выборка.ВидНалога, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Налоги;
	
КонецФункции

Функция НайтиПоставляемыеДанные(ВидНалога = Неопределено, КБК = Неопределено, СчетУчета = Неопределено, Период = Неопределено, НазначениеПлатежаИзменено = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ВидНалога) Тогда
		
		ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора(Период, Новый Структура("ВидНалога", ВидНалога));
		
	ИначеЕсли Не ПустаяСтрока(КБК) Тогда
		
		КодБК = Лев(СокрЛ(КБК), 13) + ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() + Сред(СокрЛП(КБК), 18);
		ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора(Период, Новый Структура("КодБК", КодБК));
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ТаблицаПоставляемыхДанных.Количество() > 0 Тогда
		
		СтруктураДанных = НоваяСтруктураПоставляемыхДанных();
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ТаблицаПоставляемыхДанных[0]);
		
		Если ЗначениеЗаполнено(СтруктураДанных.ВидНалога) Тогда
			
			Если ЗначениеЗаполнено(Период) И Период < ДатаАктуальностиКлассификатора() Тогда
				СтруктураДанных.ДатаАктуальности = Период;
			Иначе
				СтруктураДанных.ДатаАктуальности = ДатаАктуальностиКлассификатора();
			КонецЕсли;
			
			СтруктураДанных.НазначениеПлатежаИзменено = НазначениеПлатежаИзменено;
			ПодменитьРеквизитыПриСовпаденииКБК(СтруктураДанных);
			
		КонецЕсли;
		
		Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(СтруктураДанных.КодБК) = ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
			СтруктураДанных.КодБК = КБКПоВидуНалоговогоОбязательства(СтруктураДанных.КодБК, СтруктураДанных.ВидНалога, , СтруктураДанных.ДатаАктуальности);
		КонецЕсли;
		
	Иначе
		
		СтруктураДанных = Неопределено;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ПодменитьРеквизитыПриСовпаденииКБК(Объект) Экспорт
	
	Если ДатаАктуальностиКлассификатора() < ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа90н() Тогда
		
		Если ЗначениеЗаполнено(Объект.ВидНалога) И Объект.ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда
			// До 2016 года фиксированные взносы в ФФОМС уплачиваются по тому же КБК, что и взносы за работников.
			// По умолчанию реквизиты содержат наименование и назначение для взносов с ФОТ.
			Объект.Наименование      = НСтр("ru = 'Фиксированные взносы в ФФОМС'");
			Если НЕ Объект.НазначениеПлатежаИзменено Тогда
				Объект.НазначениеПлатежа = НСтр("ru = 'Страховые взносы на ОМС, зачисляемые в бюджет ФФОМС. Регистрационный номер в ПФР <ПФР_ИП>'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Функция ПрочитатьПоставляемыеДанныеКлассификатора(Период = Неопределено, Отбор = Неопределено, ТолькоСИдентификаторами = Ложь) Экспорт
	Перем ВидНалога;
	Перем ОтборПоВидуНалога, ОтборПоКБК, ОтборПоШаблонуКБК;
	
	УстановленОтбор = (Отбор <> Неопределено);
	
	Если УстановленОтбор И ТипЗнч(Отбор) = Тип("Структура") Тогда
		Отбор.Свойство("ВидНалога", ОтборПоВидуНалога);
		Отбор.Свойство("КодБК",     ОтборПоКБК);
		Если ОтборПоКБК <> Неопределено Тогда
			ОтборПоШаблонуКБК = ПлатежиВБюджетКлиентСервер.ПустойКодГлавногоАдминистратора() + ПлатежиВБюджетКлиентСервер.ШаблонКБК(ОтборПоКБК, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ТипОтбораПоВидуНалога = ТипЗнч(ОтборПоВидуНалога);
	
	УстановленМножественныйОтбор = (ТипОтбораПоВидуНалога = Тип("Массив"));
	Если УстановленМножественныйОтбор Тогда
		ОтборПоВидуНалога = ОбщегоНазначенияПереопределяемый.УдалитьПовторяющиесяЭлементыМассива(ОтборПоВидуНалога);
	КонецЕсли;
	
	ТаблицаПоставляемыхДанных = НоваяТаблицаПоставляемыхДанных();
	
	НомерКолонкиКБК                = 1; // Код дохода бюджета
	НомерКолонкиНаименованиеПолное = 2; // Полное наименование
	НомерКолонкиНаименование       = 3; // Краткое наименование
	НомерКолонкиКодАдминистратора  = 4; // Код главного администратора доходов бюджета
	НомерКолонкиНазначениеПлатежа  = 5; // Шаблон назначения платежа
	НомерКолонкиИдентификатор      = 6; // Идентификатор
	
	ИсточникДанных = Справочники.ВидыНалогов.ПолучитьМакет(ИмяМакетаКБК(Период));
	
	ПредопределенныеВидовНалогов = ВидыНалогов();
	
	ПустойКодГлавногоАдминистратора = ПлатежиВБюджетКлиентСервер.ПустойКодГлавногоАдминистратора();
	
	Для НомерСтроки = 2 По ИсточникДанных.ВысотаТаблицы Цикл
		
		КБК = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиКБК);
		Если ПустаяСтрока(КБК) Тогда
			// Конец таблицы
			Прервать;
		КонецЕсли;
		
		КодАдминистратора = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиКодАдминистратора);
		
		КодБК = ?(Не ПустаяСтрока(КодАдминистратора), КодАдминистратора + КБК, ПустойКодГлавногоАдминистратора + КБК);
		
		Если УстановленОтбор И ОтборПоКБК <> Неопределено Тогда
			Если Не ПустаяСтрока(КодАдминистратора) Тогда
				Если ОтборПоКБК <> КодБК Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если ОтборПоШаблонуКБК <> КодБК Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаИдентификаторов = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиИдентификатор);
		Если УстановленОтбор И ОтборПоВидуНалога <> Неопределено И ПустаяСтрока(СтрокаИдентификаторов) Тогда
			// Непоставляемые данные
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаИдентификаторов) Тогда
			МассивИдентификаторов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИдентификаторов);
		Иначе
			МассивИдентификаторов = Новый Массив;
			МассивИдентификаторов.Добавить("");
		КонецЕсли;
		
		НаименованиеПолное    = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиНаименованиеПолное);
		Наименование          = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиНаименование);
		НазначениеПлатежа     = ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонкиНазначениеПлатежа);
		
		Для Индекс = 0 По МассивИдентификаторов.ВГраница() Цикл
			
			Идентификатор = СокрЛП(МассивИдентификаторов[Индекс]);
			
			Если ПустаяСтрока(Идентификатор) Или Не ПредопределенныеВидовНалогов.Свойство(Идентификатор, ВидНалога) Тогда
				Если ТолькоСИдентификаторами Тогда
					Если Лев(КБК, 3) = "118" Тогда // не будем читать весь макет, начиная с 118 точно нет КБК, с поддерживаемыми налогами.
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
			КонецЕсли;
			
			Если УстановленОтбор И ОтборПоВидуНалога <> Неопределено Тогда
				Если ТипОтбораПоВидуНалога = Тип("Массив") Тогда
					Если ОтборПоВидуНалога.Найти(ВидНалога) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли ОтборПоВидуНалога <> ВидНалога Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПоставляемыхДанных.Добавить();
			НоваяСтрока.ВидНалога          = ВидНалога;
			НоваяСтрока.КодБК              = КодБК;
			НоваяСтрока.НаименованиеПолное = НаименованиеПолное;
			НоваяСтрока.Наименование       = Наименование;
			НоваяСтрока.НазначениеПлатежа  = НазначениеПлатежа;
			
			Если УстановленОтбор Тогда
				Если УстановленМножественныйОтбор Тогда
					Если ОтборПоВидуНалога <> Неопределено И ТаблицаПоставляемыхДанных.Количество() = ОтборПоВидуНалога.Количество() Тогда
						// Все значения отбора уже найдены
						Возврат ТаблицаПоставляемыхДанных;
					КонецЕсли;
				Иначе
					// Возвращаем первую найденную запись
					Возврат ТаблицаПоставляемыхДанных;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаПоставляемыхДанных;
	
КонецФункции

Функция НоваяСтруктураПоставляемыхДанных()
	
	ТаблицаПоставляемыхДанных = НоваяТаблицаПоставляемыхДанных();
	
	СтруктураПоставляемыхДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаПоставляемыхДанных.Добавить());
	СтруктураПоставляемыхДанных.Вставить("СчетУчета", );
	СтруктураПоставляемыхДанных.Вставить("ДатаАктуальности", Дата(1, 1, 1));
	СтруктураПоставляемыхДанных.Вставить("НазначениеПлатежаИзменено", Ложь);
	
	Возврат СтруктураПоставляемыхДанных;
	
КонецФункции

Функция НоваяТаблицаПоставляемыхДанных()
	
	ТаблицаПоставляемыхДанных = Новый ТаблицаЗначений;
	ТаблицаПоставляемыхДанных.Колонки.Добавить("ВидНалога",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	ТаблицаПоставляемыхДанных.Колонки.Добавить("КодБК",              ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаПоставляемыхДанных.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаПоставляемыхДанных.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаПоставляемыхДанных.Колонки.Добавить("НазначениеПлатежа",  ОбщегоНазначения.ОписаниеТипаСтрока(210));
	
	Возврат ТаблицаПоставляемыхДанных;
	
КонецФункции

Функция ЗначениеИзИсточникаДанных(ИсточникДанных, НомерСтроки, НомерКолонки)
	
	ОбластьДанных = ИсточникДанных.Область(НомерСтроки, НомерКолонки);
	Если ОбластьДанных = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ОбластьДанных.Текст;
	КонецЕсли;
	
КонецФункции

Функция ЭтоПени(ВидНалоговогоОбязательства) Экспорт
	
	
	Возврат ВидНалоговогоОбязательства = "ПениАкт"
		Или ВидНалоговогоОбязательства = "ПениСам";
	
КонецФункции

Функция ЭтоПроценты(ВидНалоговогоОбязательства) Экспорт
	
	Возврат ВидНалоговогоОбязательства = "Проценты";
	
КонецФункции

Функция ЭтоШтраф(ВидНалоговогоОбязательства) Экспорт
	
	Возврат ВидНалоговогоОбязательства = "Штраф";
	
КонецФункции

Функция ДанныеВыбораПоКБК(КодБК) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблонКБК", Лев(КодБК, 13) + "%");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыНалоговИПлатежейВБюджет.Ссылка,
	|	ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|ГДЕ
	|	ВидыНалоговИПлатежейВБюджет.КодБК ПОДОБНО &ШаблонКБК";
	
	
	Если ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяПенсионнымФондом(КодБК) ИЛИ
		ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяФСС(КодБК) Тогда
		Запрос.УстановитьПараметр("ШаблонКБК182",
			ПлатежиВБюджетКлиентСервер.КодАдминистрированияНалоговымиОрганами()
				+ ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КодБК) + "%");
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|"
		+ "ВЫБРАТЬ
		|	ВидыНалоговИПлатежейВБюджет.Ссылка,
		|	ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
		|ИЗ
		|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
		|ГДЕ
		|	ВидыНалоговИПлатежейВБюджет.КодБК ПОДОБНО &ШаблонКБК182
		|	И НЕ ВидыНалоговИПлатежейВБюджет.ПометкаУдаления";
	ИначеЕсли ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(КодБК)
		ИЛИ ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяФСС(КодБК) Тогда
		Запрос.УстановитьПараметр("ШаблонКБК392",
			ПлатежиВБюджетКлиентСервер.КодАдминистрированияПенсионнымФондом()
				+ ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КодБК) + "%");
		Запрос.УстановитьПараметр("ШаблонКБК393",
			ПлатежиВБюджетКлиентСервер.КодАдминистрированияФСС()
				+ ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КодБК) + "%");
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|"
		 + "ВЫБРАТЬ
		|	ВидыНалоговИПлатежейВБюджет.Ссылка,
		|	ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
		|ИЗ
		|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
		|ГДЕ
		|	ВидыНалоговИПлатежейВБюджет.КодБК ПОДОБНО &ШаблонКБК392
		|	И НЕ ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыНалоговИПлатежейВБюджет.Ссылка,
		|	ВидыНалоговИПлатежейВБюджет.ПометкаУдаления
		|ИЗ
		|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
		|ГДЕ
		|	ВидыНалоговИПлатежейВБюджет.КодБК ПОДОБНО &ШаблонКБК393
		|	И НЕ ВидыНалоговИПлатежейВБюджет.ПометкаУдаления";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления",
			Выборка.Ссылка, Выборка.ПометкаУдаления));
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Формирует назначение платежа для уплаты налогов
//
// Параметры:
//   Налог                      - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//   ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//   Организация                - СправочникСсылка.Организации
//
// Возвращаемое значение:
//  Строка - назначение платежа
//
Функция НазначениеПлатежа(Налог, ВидНалоговогоОбязательства = Неопределено, Организация = Неопределено, Знач Период = Неопределено,
	ПредставлениеНалоговогоПериода = "", ШаблонНазначения = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НазначениеПлатежа = "";
	Если ЗначениеЗаполнено(Налог)  Тогда
		ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налог, "ВидНалога, НазначениеПлатежа, ДатаАктуальности");
		ВидНалога         = ЗначениеРеквизитов.ВидНалога;
		НазначениеПлатежа = ЗначениеРеквизитов.НазначениеПлатежа;
		ДатаАктуальности  = ЗначениеРеквизитов.ДатаАктуальности;
	КонецЕсли;
	
	// Если требуется устаревшее значение или новое значение до вступления классификатора в силу, читаем данные из макета
	Если ЗначениеЗаполнено(ВидНалога) И ЗначениеЗаполнено(ДатаАктуальности) Тогда
		
		Если (НачалоДня(Период) >= ДатаАктуальностиКлассификатора() И ДатаАктуальности < ДатаАктуальностиКлассификатора())
			Или (НачалоДня(Период) < ДатаАктуальностиКлассификатора() И ДатаАктуальности >= ДатаАктуальностиКлассификатора()) Тогда
			
			ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора(, Новый Структура("ВидНалога", ВидНалога));
			Если ТаблицаПоставляемыхДанных.Количество() > 0 Тогда
				НазначениеПлатежа = ТаблицаПоставляемыхДанных[0].НазначениеПлатежа;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ШаблонНазначения) Тогда
		ШаблонНазначения = НазначениеПлатежа;
	Иначе
		Параметр = "";
		ПозицияПараметра = СтрНайти(НазначениеПлатежа, "<Период");
		Если ПозицияПараметра = 0 Тогда
			ПозицияПараметра = СтрНайти(НазначениеПлатежа, "<ПФР");
		КонецЕсли;
		Если ПозицияПараметра = 0 Тогда
			ПозицияПараметра = СтрНайти(НазначениеПлатежа, "<ФСС");
		КонецЕсли;
		
		Если ПозицияПараметра > 0 Тогда
			Параметр = Сред(НазначениеПлатежа, ПозицияПараметра);
		КонецЕсли;
		
		НазначениеПлатежа = СокрЛП(ШаблонНазначения + " " + ?(СтрНайти(НазначениеПлатежа, Параметр) = 0, Параметр, ""));
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставлениеНалоговогоПериода)
		Тогда
		
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", ПредставлениеНалоговогоПериода);
		
	Иначе
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", "");
	КонецЕсли;
	
	// При уплате страховых взносов, как правило, требуется указывать регистрационный номер
	ВидГосударственногоОргана = Справочники.ВидыНалогов.ВидГосударственногоОргана(Налог);
	Если ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР
		ИЛИ ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС
		ИЛИ ПлатежиВБюджетКлиентСервер.ЭтоВзносыНаПенсионноеСтрахование(ВидНалога)
		ИЛИ ПлатежиВБюджетКлиентСервер.ЭтоВзносыНаСоциальноеСтрахование(ВидНалога) Тогда
		
		КлючиРеквизитов = "РегистрационныйНомерПФР, РегистрационныйНомерПФР_ИП, РегистрационныйНомерФСС";
		РеквизитыОрганизации = ?(ЗначениеЗаполнено(Организация), ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, КлючиРеквизитов), Новый Структура(КлючиРеквизитов));
		
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР>",    РеквизитыОрганизации.РегистрационныйНомерПФР);
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР_ИП>", РеквизитыОрганизации.РегистрационныйНомерПФР_ИП);
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС>",    РеквизитыОрганизации.РегистрационныйНомерФСС);
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС_ИП>", РеквизитыОрганизации.РегистрационныйНомерФСС);
		
	КонецЕсли;
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "  ", " ");
	
	Возврат НазначениеПлатежа;
	
КонецФункции

// Возвращает КБК налога
//
// Параметры:
//   Налог                      - СправочникСсылка.ВидыНалоговИПлатежейВБюджет
//   ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//   Период                     - Дата - период действия классификатора КБК
//
// Возвращаемое значение:
//   Строка
//
Функция КБК(Налог, Знач ВидНалоговогоОбязательства = Неопределено, Знач Период = Неопределено, ПериодПлатежа = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Налог) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		ВидНалоговогоОбязательства = "Налог";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налог, "ВидНалога, КодБК, ДатаАктуальности");
	ВидНалога        = ЗначениеРеквизитов.ВидНалога;
	КодБК            = ЗначениеРеквизитов.КодБК;
	ДатаАктуальности = ЗначениеРеквизитов.ДатаАктуальности;
	
	// Если требуется устаревшее значение или новое значение до вступления классификатора в силу, читаем данные из макета
	Если ЗначениеЗаполнено(ВидНалога) И ЗначениеЗаполнено(ДатаАктуальности) Тогда
		
		Если (НачалоДня(Период) >= ДатаАктуальностиКлассификатора() И ДатаАктуальности < ДатаАктуальностиКлассификатора())
			Или (НачалоДня(Период) < ДатаАктуальностиКлассификатора() И ДатаАктуальности >= ДатаАктуальностиКлассификатора()) Тогда
			
			ТаблицаПоставляемыхДанных = ПрочитатьПоставляемыеДанныеКлассификатора(Период, Новый Структура("ВидНалога", ВидНалога));
			Если ТаблицаПоставляемыхДанных.Количество() > 0 Тогда
				КодБК = ТаблицаПоставляемыхДанных[0].КодБК;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КодБК) = ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
		КодБК = КБКПоВидуНалоговогоОбязательства(КодБК, ВидНалога, ВидНалоговогоОбязательства, Период, ПериодПлатежа);
	ИначеЕсли ПлатежиВБюджетКлиентСервер.ЭтоКБКНалогиВзносы(КодБК) И ВидНалоговогоОбязательства <> "Налог" Тогда
		ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(КодБК, Истина);
		КодБК = КБКПоВидуНалоговогоОбязательства(ШаблонКБК, ВидНалога, ВидНалоговогоОбязательства, Период, ПериодПлатежа);
	ИначеЕсли ЗначениеЗаполнено(ПериодПлатежа) И Год(ПериодПлатежа) < Год(Период) Тогда
		КодБК = КБКПоВидуНалоговогоОбязательства(КодБК, ВидНалога, ВидНалоговогоОбязательства, Период, ПериодПлатежа);
	КонецЕсли;
	
	Возврат КодБК;
	
КонецФункции


#КонецОбласти

#КонецЕсли