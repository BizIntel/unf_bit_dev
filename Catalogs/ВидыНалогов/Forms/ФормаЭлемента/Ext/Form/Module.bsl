#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	ПредупреждениеПриРедактировании = НСтр("ru = 'Автоматическое обновление реквизитов будет отключено'");
	ПредопределенныеВидыНалогов = Справочники.ВидыНалогов.ВидыНалогов();
	УстановитьТекстДополнительногоПараметра(ЭтотОбъект);
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилисьСчетаВидыНалогов" Тогда
		Объект.СчетУчета = Параметр.СчетУчета;
		Объект.СчетУчетаКВозмещению = Параметр.СчетУчетаКВозмещению;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы


&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		Объект.ВидНалога = Неопределено;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НаименованиеНачалоВыбораЗавершение", ЭтотОбъект);
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого КлючИЗначение Из ПредопределенныеВидыНалогов Цикл
		Если КлючИЗначение.Значение <> ПредопределенноеЗначение("Перечисление.ВидыНалогов.ПрочиеНалогиИСборы") Тогда
			СписокВыбора.Добавить(КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СписокВыбора.НайтиПоЗначению(Объект.ВидНалога);
	
	ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(Объект.ВидНалога));
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект.ВидНалога = ВыбранноеЗначение.Значение;
		ЗаполнитьРеквизитыПоВидуНалога(ЭтотОбъект);
		Если Не ЗначениеЗаполнено(Объект.ВидНалога) Тогда
			// В классификаторе может и не быть всех видов налогов
			Объект.Наименование = Строка(ВыбранноеЗначение.Значение);
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодБКПриИзменении(Элемент)
	
	КодБК = ПлатежиВБюджетКлиентСервер.ОставитьВСтрокеТолькоЦифры(Объект.КодБК);
	
	Объект.КодБК = КодБК;
	
	ЗаполнитьРеквизитыПоКБК(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		Объект.НазначениеПлатежаИзменено = Истина;
		Элементы.НазначениеПлатежа.ПредупреждениеПриРедактировании = "";
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КонструкторКБК(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) И Не ПустаяСтрока(ПредупреждениеПриРедактировании) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросКонструкторКБКЗавершение", ЭтотОбъект);
		
		ТекстВопроса = ПредупреждениеПриРедактировании + "." + Символы.ПС +
			НСтр("ru = 'Продолжить редактирование?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		
		ОткрытьФорму("Справочник.ВидыНалогов.Форма.КонструкторКБК", Новый Структура("КБК, ВидПеречисления", Объект.КодБК, ПлатежиВБюджетКлиентСервер.ВидПеречисления(Объект.КодБК, ТекущаяДата())), Элементы.КодБК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКонструкторКБКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ВидНалога = Неопределено;
		УправлениеФормой(ЭтотОбъект);
		
		ОткрытьФорму("Справочник.ВидыНалогов.Форма.КонструкторКБК", Новый Структура("КБК", Объект.КодБК), Элементы.КодБК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзКлассификатора(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВопросОбновитьИзКлассификатораЗавершение", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Реквизиты элемента будут заменены значениями из классификатора.
		|Все ручные изменения будут потеряны. Продолжить?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры


&НаКлиенте
Процедура ВопросОбновитьИзКлассификатораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаблокироватьДанныеФормыДляРедактирования();
		
		ЗаполнитьРеквизитыПоВидуНалога(ЭтотОбъект);
		Записать();
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры


// Конец СтандартныеПодсистемы.Печать

#КонецОбласти


&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоПоставляемыйЭлемент = ЗначениеЗаполнено(Объект.ВидНалога);
	
	Элементы.ФормаОбновитьИзКлассификатора.Доступность = ЭтоПоставляемыйЭлемент;
	
	ВариантОтображениеПредупреждения = ?(ЭтоПоставляемыйЭлемент,
		ОтображениеПредупрежденияПриРедактировании.Отображать,
		ОтображениеПредупрежденияПриРедактировании.НеОтображать);
	
	Элементы.КодБК.ОтображениеПредупрежденияПриРедактировании              = ВариантОтображениеПредупреждения;
	Элементы.Наименование.ОтображениеПредупрежденияПриРедактировании       = ВариантОтображениеПредупреждения;
	
	
	Если Объект.НазначениеПлатежаИзменено Тогда
		Элементы.НазначениеПлатежа.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.НазначениеПлатежа.ОтображениеПредупрежденияПриРедактировании = ВариантОтображениеПредупреждения;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПоВидуНалога(Форма)
	
	Объект = Форма.Объект;
	
	СтруктураДанных = НайтиПоставляемыеДанные(Объект.ВидНалога, Неопределено, Неопределено);
	
	Если СтруктураДанных = Неопределено Тогда
		Объект.ВидНалога = Неопределено;
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных,, "СчетУчета");
		Объект.КодБК           = СтруктураДанных.КодБК;
		Форма.НаименованиеКБК = СтруктураДанных.НаименованиеПолное;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПоставляемыеДанные(Знач ВидНалога = Неопределено, Знач КБК = Неопределено, Знач СчетУчета = Неопределено, НазначениеПлатежаИзменено = Ложь)
	
	Если ВидНалога = Перечисления.ВидыНалогов.ПрочиеНалогиИСборы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных = Справочники.ВидыНалогов.НайтиПоставляемыеДанные(ВидНалога, КБК, СчетУчета,, НазначениеПлатежаИзменено);
	
	Если ВидНалога = Неопределено // Если обновляется предопределенный элемент справочника, то нельзя делать его непредопределенным.
		И СтруктураДанных <> Неопределено
		И СтруктураДанных.Свойство("ВидНалога")
		И ЗначениеЗаполнено(СтруктураДанных.ВидНалога)
		И Не Справочники.ВидыНалогов.НайтиПоРеквизиту("ВидНалога", СтруктураДанных.ВидНалога).Пустая() Тогда
		
		СтруктураДанных.ВидНалога = Перечисления.ВидыНалогов.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПоКБК(Форма)
	
	Объект = Форма.Объект;
	
	СтруктураДанных = НайтиПоставляемыеДанные(Неопределено, Объект.КодБК, Неопределено);
	
	Если СтруктураДанных = Неопределено Тогда
		
		Объект.ВидНалога = Неопределено;
		Форма.НаименованиеКБК = "";
		
	Иначе
		
		НаименованиеПодвидаДохода = "";
		Если ПлатежиВБюджетКлиентСервер.ЭтоКБКШтраф(Объект.КодБК) Тогда
			НаименованиеПодвидаДохода = НСтр("ru = '(штраф)'");
		ИначеЕсли ПлатежиВБюджетКлиентСервер.ЭтоКБКПени(Объект.КодБК) Тогда
			НаименованиеПодвидаДохода = НСтр("ru = '(пени)'");
		ИначеЕсли ПлатежиВБюджетКлиентСервер.ЭтоКБКПроценты(Объект.КодБК) Тогда
			НаименованиеПодвидаДохода = НСтр("ru = '(проценты)'");
		ИначеЕсли ПлатежиВБюджетКлиентСервер.ЭтоКБКПениПроценты(Объект.КодБК) Тогда
			НаименованиеПодвидаДохода = НСтр("ru = '(пени, проценты)'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураДанных.ВидНалога) Тогда
			
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных,, "СчетУчета");
			
		Иначе
			
			Если НЕ ПустаяСтрока(СтруктураДанных.Наименование) Тогда
				Объект.Наименование = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2'"),
					СтруктураДанных.Наименование,
					НаименованиеПодвидаДохода));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.СчетУчета) Тогда
				Объект.СчетУчета = СтруктураДанных.СчетУчета;
			КонецЕсли;
			
			Если ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
				Объект.НазначениеПлатежа = СтруктураДанных.НазначениеПлатежа;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.НаименованиеКБК = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"),
			СтруктураДанных.НаименованиеПолное,
			НаименованиеПодвидаДохода));
		
	КонецЕсли;
	
	УстановитьТекстДополнительногоПараметра(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстДополнительногоПараметра(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДополнительныйПараметр = ТекстДополнительногоПараметра(Объект.КодБК, Объект.ВидНалога);
	Форма.ДополнительныйПараметр = ДополнительныйПараметр.Наименование;
	Элементы.НадписьДополнительныйПараметр.РасширеннаяПодсказка.Заголовок = ДополнительныйПараметр.Подсказка;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ТекстДополнительногоПараметра(Знач КБК, Знач ВидНалога)
	
	ДополнительныйПараметр = Новый Структура("Наименование, Подсказка", "", "");
	
	ПараметрНеЗадан = Истина;
	Если ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(КБК) Тогда
		ДополнительныйПараметр.Наименование = НСтр("ru = '<Период>'");
		ДополнительныйПараметр.Подсказка = НСтр("ru = '- текст, вместо которого в назначение платежа будет подставлен налоговый период платежа'");
		ПараметрНеЗадан = Ложь;
	КонецЕсли;
	
	Если ПараметрНеЗадан И ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяПенсионнымФондом(КБК) Тогда
		Если ПлатежиВБюджетКлиентСервер.ЭтоФиксированныеВзносы(ВидНалога) Тогда
			// Данный параметр поддерживаем только для "поставляемых" налогов
			ДополнительныйПараметр.Наименование = НСтр("ru = '<ПФР_ИП>'");
			ДополнительныйПараметр.Подсказка = НСтр("ru = '- текст, вместо которого в назначение платежа будет подставлен регистрационный номер ""за себя""'");
			ПараметрНеЗадан = Ложь;
		Иначе
			ДополнительныйПараметр.Наименование = НСтр("ru = '<ПФР>'");
			ДополнительныйПараметр.Подсказка = НСтр("ru = '- текст, вместо которого в назначение платежа будет подставлен регистрационный номер'");
			ПараметрНеЗадан = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрНеЗадан И ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяФСС(КБК) Тогда
		Если ПлатежиВБюджетКлиентСервер.ЭтоФиксированныеВзносы(ВидНалога) Тогда
			// Данный параметр поддерживаем только для "поставляемых" налогов
			ДополнительныйПараметр.Наименование = НСтр("ru = '<ФСС_ИП>'");
			ДополнительныйПараметр.Подсказка = НСтр("ru = '- текст, вместо которого в назначение платежа будет подставлен регистрационный номер ""за себя""'");
			ПараметрНеЗадан = Ложь;
		Иначе
			ДополнительныйПараметр.Наименование = НСтр("ru = '<ФСС>'");
			ДополнительныйПараметр.Подсказка = НСтр("ru = '- текст, вместо которого в назначение платежа будет подставлен регистрационный номер'");
			ПараметрНеЗадан = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнительныйПараметр;
	
КонецФункции


