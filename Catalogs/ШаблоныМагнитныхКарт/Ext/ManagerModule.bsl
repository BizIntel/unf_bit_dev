#Область ПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Производит разложение данных дорожек магнитной карты по шаблонам.
// На входе:
// ДанныеДорожек - массив строк. Значения полученные из дорожек.
// ПараметрыДорожек - массив структур содержащих параметры настройки устройства.
//  * Использовать, булево - признак использования дорожки.
//  * НомерДорожки, число - порядковый номер дорожки 1-3.
//
// На выходе:
// Массив структур содержащих расшифрованные данные по всем подходящим шаблонам со ссылкой на них.
// * Массив - шаблоны
//   * Структура - данные шаблона.
//     - Шаблон, СправочникСсылка.ШаблоныМагнитныхКарт
//     - ДанныеДорожек, массив полей всех дорожек.
//       * Структура - данные поля.
//         - Поле
//         - ЗначениеПоля
Функция РасшифроватьКодМагнитнойКарты(ДанныеДорожек, ПараметрыДорожек) Экспорт
	
	Если ДанныеДорожек.Количество() = 0
		ИЛИ ПараметрыДорожек.Количество() = 0 Тогда
		Возврат Неопределено; // нет данных
	КонецЕсли;
	
	ДанныеОтбор = Новый Массив;
	СчетчикДорожек = 0;
	Для каждого текПараметр Из ПараметрыДорожек Цикл
		Если текПараметр.Использовать Тогда
			Попытка
				ДанныеОтбор.Добавить(Новый Структура("НомерДорожки, ДлинаДорожки, ДанныеДорожки"
													, текПараметр.НомерДорожки, СтрДлина(ДанныеДорожек[СчетчикДорожек]), ДанныеДорожек[СчетчикДорожек]));
			Исключение
				Возврат Неопределено; // неверный формат шаблона
			КонецПопытки;
		КонецЕсли;
		СчетчикДорожек = СчетчикДорожек + 1;
	КонецЦикла;
	
	// 1 Этап. Ищем шаблоны совпадающие по длине кода
	// а) При сравнении играют роль только доступные дорожки
	// б) Необходимо чтобы хотя бы одна дорожка была доступной.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШаблоныМагнитныхКарт.Ссылка,
	|	
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки1,
	|	ШаблоныМагнитныхКарт.Префикс1,
	|	ШаблоныМагнитныхКарт.Суффикс1,
	|	ШаблоныМагнитныхКарт.ДлинаКода1,
	|	ШаблоныМагнитныхКарт.РазделительБлоков1,
	|	
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки2,
	|	ШаблоныМагнитныхКарт.Префикс2,
	|	ШаблоныМагнитныхКарт.Суффикс2,
	|	ШаблоныМагнитныхКарт.ДлинаКода2,
	|	ШаблоныМагнитныхКарт.РазделительБлоков2,
	|	
	|	ШаблоныМагнитныхКарт.ДоступностьДорожки3,
	|	ШаблоныМагнитныхКарт.Префикс3,
	|	ШаблоныМагнитныхКарт.Суффикс3,
	|	ШаблоныМагнитныхКарт.ДлинаКода3,
	|	ШаблоныМагнитныхКарт.РазделительБлоков3
	|ИЗ
	|	Справочник.ШаблоныМагнитныхКарт КАК ШаблоныМагнитныхКарт
	|ГДЕ
	|	(ШаблоныМагнитныхКарт.ДоступностьДорожки1
	|			ИЛИ ШаблоныМагнитныхКарт.ДоступностьДорожки2
	|			ИЛИ ШаблоныМагнитныхКарт.ДоступностьДорожки3)
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки1
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода1 = &ДлинаКода1
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки2
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода2 = &ДлинаКода2
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ШаблоныМагнитныхКарт.ДоступностьДорожки3
	|				ТОГДА ШаблоныМагнитныхКарт.ДлинаКода3 = &ДлинаКода3
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ");
	Запрос.УстановитьПараметр("ДлинаКода1", СтрДлина(ДанныеДорожек[0]));
	Запрос.УстановитьПараметр("ДлинаКода2", СтрДлина(ДанныеДорожек[1]));
	Запрос.УстановитьПараметр("ДлинаКода3", СтрДлина(ДанныеДорожек[2]));
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокШаблонов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		// 2-Ой этап - Пропускаем шаблоны не совпадающие по суффиксу, префиксу, разделителю.
		
		Если НЕ КодСоответствуетШаблонуМК(ДанныеДорожек, Выборка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДорожки = Новый Массив;
		Для каждого текОтбор Из ДанныеОтбор Цикл
			Для каждого текПоле Из Выборка.Ссылка["ПоляДорожки"+Строка(текОтбор.НомерДорожки)] Цикл
				
				// Поиск блока по номеру
				ДанныеСтрока = текОтбор.ДанныеДорожки;
				Префикс = Выборка["Префикс"+Строка(текОтбор.НомерДорожки)];
				Если Префикс = Лев(ДанныеСтрока, СтрДлина(Префикс)) Тогда
					ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Префикс)); // Удаляем префикс если есть
				КонецЕсли;
				Суффикс = Выборка["Суффикс"+Строка(текОтбор.НомерДорожки)];
				Если Суффикс = Прав(ДанныеСтрока, СтрДлина(Суффикс)) Тогда
					ДанныеСтрока = Лев(ДанныеСтрока, СтрДлина(ДанныеСтрока)-СтрДлина(Суффикс)); // Удаляем суффикс если есть
				КонецЕсли;
				
				текНомерБлока = 0;
				Пока текНомерБлока < текПоле.НомерБлока Цикл
					РазделительБлоков = Выборка["РазделительБлоков"+Строка(текОтбор.НомерДорожки)];
					ПозицияРазделителя = Найти(ДанныеСтрока, РазделительБлоков);
					Если ПустаяСтрока(РазделительБлоков) ИЛИ ПозицияРазделителя = 0 Тогда
						Блок = ДанныеСтрока;
					ИначеЕсли ПозицияРазделителя = 1 Тогда
						Блок = "";
						ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-1);
					Иначе
						Блок = Лев(ДанныеСтрока, ПозицияРазделителя-1);
						ДанныеСтрока = Прав(ДанныеСтрока, СтрДлина(ДанныеСтрока)-ПозицияРазделителя);
					КонецЕсли;
					текНомерБлока = текНомерБлока + 1;
				КонецЦикла;
				
				// Поиск подстроки в блоке
				ЗначениеПоля = Сред(Блок, текПоле.НомерПервогоСимволаПоля, ?(текПоле.ДлинаПоля = 0, СтрДлина(Блок), текПоле.ДлинаПоля));
				
				ДанныеПоля = Новый Структура("Поле, ЗначениеПоля", текПоле.Поле, ЗначениеПоля);
				ДанныеДорожки.Добавить(ДанныеПоля);
			КонецЦикла;
		КонецЦикла;
		Шаблон = Новый Структура("Шаблон, ДанныеДорожек", Выборка.Ссылка, ДанныеДорожки);
		СписокШаблонов.Добавить(Шаблон);
	КонецЦикла;
	
	Если СписокШаблонов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокШаблонов;
	
КонецФункции

// Определяет соответствует ли код карты шаблону.
// На входе:
// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
// ДанныеШаблона - структура содержащая данные шаблона:
//	- Суффикс
//	- Префикс
//	- РазделительБлоков
//	- ДлинаКода
// На выходе:
// Истина - код соответствует шаблону.
Функция КодСоответствуетШаблонуМК(ДанныеДорожек, ДанныеШаблона)
	
	Для Итератор = 1 По 3 Цикл
		Если ДанныеШаблона["ДоступностьДорожки"+Строка(Итератор)] Тогда
			текСтрока = ДанныеДорожек[Итератор - 1];
			Если Прав(текСтрока, СтрДлина(ДанныеШаблона["Суффикс"+Строка(Итератор)])) <> ДанныеШаблона["Суффикс"+Строка(Итератор)]
				Или Лев(текСтрока, СтрДлина(ДанныеШаблона["Префикс"+Строка(Итератор)])) <> ДанныеШаблона["Префикс"+Строка(Итератор)]
				Или Найти(текСтрока, ДанныеШаблона["РазделительБлоков"+Строка(Итератор)]) = 0
				Или СтрДлина(текСтрока) <> ДанныеШаблона["ДлинаКода"+Строка(Итератор)] Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

#КонецЕсли

#КонецОбласти