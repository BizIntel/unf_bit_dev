&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФормыВладельца = Параметры.ИдентификаторФормыВладельца;
	
	//список выбора вида документа
	СписокВыбораВидДокумента = Элементы.ВидДокумента.СписокВыбора;
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.СчетФактура);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.Договор);        
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ОтчетНИОКР);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ЗаполнитьПоОтборамТаблицуОтображаемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникПриИзменении(Элемент)
	
	ЗаполнитьПоОтборамТаблицуОтображаемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемыеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = Элемент.ТекущиеДанные;
	ОткрытьФормуЗагружаемогоДокумента(ДанныеСтроки);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка Из ОтображаемыеДокументы Цикл
		Строка.Выбрать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка Из ОтображаемыеДокументы Цикл
		Строка.Выбрать = Истина;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ТекстСообщения = НСтр("ru = 'Для загрузки необходимо указать организацию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Выбрать", Истина);
	
	СтрокиВыбранныхДокументов = ОтображаемыеДокументы.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиВыбранныхДокументов.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Для загрузки необходимо выбрать хотя бы один документ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;	
	
	МассивИменЗагружаемыхФайлов = Новый Массив;
	СтруктураРезультата = СформироватьСтруктуруРезультатНаСервере(МассивИменЗагружаемыхФайлов);
	
	ОповеститьОВыборе(СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПослеЗагрузкиФайла", ЭтотОбъект);
	
	ЗагрузитьФайл(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПослеЗагрузкиФайла(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗагрузки Тогда
		Закрыть();
	Иначе
		//установим все флажки по умолчанию
		Для Каждого Строка Из ОтображаемыеДокументы Цикл
			Строка.Выбрать = Истина;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(ВыполняемоеОповещение)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ВыполняемоеОповещение);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлПослеПодключенияРасширенияРаботыСФайлами(Результат, ВыполняемоеОповещение) Экспорт 

	ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами = Результат;
	
	Если ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами Тогда
		
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Заголовок = "Выберите файл для загрузки";
		ДиалогВыбора.МножественныйВыбор = Ложь;
		ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
		НачалоИмениФайла = "SCAN_";
		ДиалогВыбора.Фильтр = "ZIP архив(" + НачалоИмениФайла + "*.zip)|" + НачалоИмениФайла + "*.zip";
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлПослеВыбораФайла", ЭтотОбъект, ВыполняемоеОповещение);
		ДиалогВыбора.Показать(ОписаниеОповещения);
	
	Иначе
		
		АдресФайлаОбменаВоВременномХранилище = "";
		ИмяФайлаОбмена = "";                                                           
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлЗавершение", ЭтотОбъект, ВыполняемоеОповещение);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаОбменаВоВременномХранилище, ИмяФайлаОбмена, Истина, УникальныйИдентификатор);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлПослеВыбораФайла(МассивПолныхИменВыбранныхФайлов, ВыполняемоеОповещение) Экспорт
	
	Если МассивПолныхИменВыбранныхФайлов = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайлаОбменаНаКлиенте = МассивПолныхИменВыбранныхФайлов[0];
	
	ПомещаемыеФайлы = Новый Массив;
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайлаОбменаНаКлиенте); 
	ПомещаемыеФайлы.Добавить(ОписаниеФайла);

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлПослеПомещенияФайла", ЭтотОбъект, ВыполняемоеОповещение); 
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлПослеПомещенияФайла(ПомещенныеФайлы, ВыполняемоеОповещение) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		Возврат;
	КонецЕсли;	
	
	АдресФайлаОбменаВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
		
	Результат = ЗагрузитьФайлНаСервере(АдресФайлаОбменаВоВременномХранилище);
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлЗавершение(Результат, АдресФайлаОбменаВоВременномХранилище, ИмяФайлаОбмена, ВыполняемоеОповещение) Экспорт
	
	Если Результат Тогда
		Если Прав(ИмяФайлаОбмена,4) = ".zip" Тогда
			Результат = ЗагрузитьФайлНаСервере(АдресФайлаОбменаВоВременномХранилище);
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
			Возврат;
		Иначе
			РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Выбранный файл не является zip-архивом.", ИдентификаторФормыВладельца);
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
			Возврат;
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьФайлНаСервере(АдресФайлаОбменаВоВременномХранилище)
	
	ПолноеИмяФайлаОбменаНаСервере = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресФайлаОбменаВоВременномХранилище).Записать(ПолноеИмяФайлаОбменаНаСервере);
	
	// распаковываем файл описания из архива обмена
	ИмяФайлаОписания = "scandescription.xml";
	ЧтениеЗИП = Новый ЧтениеZipФайла(ПолноеИмяФайлаОбменаНаСервере);
	ЭлементОписание = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписания);
	Если ЭлементОписание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	КаталогРаспаковки = КонтекстЭДОСервер.СоздатьВременныйКаталогСервер();
	ЧтениеЗИП.Извлечь(ЭлементОписание, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	// читаем XML
	ТекстXML = КонтекстЭДОСервер.ПрочитатьТекстИзФайла(КаталогРаспаковки + ИмяФайлаОписания, , Истина);
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ЧтениеЗИП.Закрыть();
		КонтекстЭДОСервер.УдалитьВременныйФайл(ПолноеИмяФайлаОбменаНаСервере);
		КонтекстЭДОСервер.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем XML в дерево
	ДеревоXML = КонтекстЭДОСервер.ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		ЧтениеЗИП.Закрыть();
		КонтекстЭДОСервер.УдалитьВременныйФайл(ПолноеИмяФайлаОбменаНаСервере);
		КонтекстЭДОСервер.УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Ложь;
	КонецЕсли;
	
	// разбираем дерево XML, заполняем таблицу ЗагруженныеДокументы
	Если НЕ ЗаполнитьТаблицуЗагруженныеДокументы(ДеревоXML) Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	//заполняем таблицу ОтображаемыеДокументы
	ЗаполнитьПоОтборамТаблицуОтображаемыеДокументы();
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеСтрокиУзла(Узел, Имя) 
	
	СтрокаУзла = Узел.Строки.Найти(Имя, "Имя");
	Если СтрокаУзла = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаУзла.Значение;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьСтрокаУзла(Узел, Имя) 
	
	СтрокаУзла = Узел.Строки.Найти(Имя, "Имя");
	Возврат СтрокаУзла <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаУзла(Узел, Имя) 
	
	Возврат Узел.Строки.Найти(Имя, "Имя");
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивСтрокУзла(Узел, Имя) 
	
	Возврат Узел.Строки.НайтиСтроки(Новый Структура("Имя", Имя));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрибавляемаяСтрока(Знач ПараметрСтрока) 
	
	Если ЗначениеЗаполнено(ПараметрСтрока) Тогда
		ПараметрСтрока = " " + ПараметрСтрока;
	КонецЕсли;
	
	Возврат ПараметрСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаВЧисло(ИсходнаяСтрока)
	// Превращает строку в число без вызова исключений. Стандартная функция преобразования
	//   Число() строго контролирует отсутствие каких-либо символов кроме числовых.
	
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Тогда // Минус
			Если Результат <> 0 Тогда
				Возврат 0;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ОпределитьОрганизациюПоИННиКПП(ИНН, КПП)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуЗагруженныеДокументы(ДеревоXML)
	
	Если НЕ ЕстьСтрокаУзла(ДеревоXML, "Файл") Тогда
		РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания.", ИдентификаторФормыВладельца);
		Возврат Ложь;
	КонецЕсли;
	
	УзелФайл = СтрокаУзла(ДеревоXML, "Файл");
	
	Если НЕ ЕстьСтрокаУзла(УзелФайл, "ВерсФорм")
		ИЛИ НЕ ЕстьСтрокаУзла(УзелФайл, "ДатаВыгрузки")
		ИЛИ НЕ ЕстьСтрокаУзла(УзелФайл, "ВремяВыгрузки")
		ИЛИ НЕ ЕстьСтрокаУзла(УзелФайл, "Организация")
		ИЛИ НЕ ЕстьСтрокаУзла(УзелФайл, "Документ") Тогда
	
		РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания.", ИдентификаторФормыВладельца);
		Возврат Ложь;
	
	КонецЕсли;
	
	ВерсияФормата	 	= СтрокаВЧисло(ЗначениеСтрокиУзла(УзелФайл, "ВерсФорм"));
	Если ВерсияФормата >= 2 Тогда
	
		РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания. Версия формата " + Формат(ВерсияФормата, "ЧДЦ=2; ЧРД=.") + " не поддерживается.", ИдентификаторФормыВладельца);
		Возврат Ложь;
	
	КонецЕсли;

	УзелОрганизация 	= СтрокаУзла(УзелФайл, "Организация");
	УзелУчастники 		= СтрокаУзла(УзелФайл, "Участники");
	
	//разбираем узел Организация
	Если НЕ ЕстьСтрокаУзла(УзелОрганизация, "Наименование")
		ИЛИ НЕ ЕстьСтрокаУзла(УзелОрганизация, "ИНН") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания.", ИдентификаторФормыВладельца);
		Возврат Ложь;
		
	КонецЕсли;
	
	ИНН = ЗначениеСтрокиУзла(УзелОрганизация, "ИНН");
	КПП = ЗначениеСтрокиУзла(УзелОрганизация, "КПП");
	
	ИННКПП = ИНН + ?(ЗначениеЗаполнено(КПП),"/" + КПП,"");
	
	ОрганизацияСсылка = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		
		Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Пакет обмена предназначен для организации с реквизитами ИНН/КПП: " + ИННКПП + "
			|Установлена для загрузки текущая организация", ИдентификаторФормыВладельца);
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
			ОрганизацияСсылка = Модуль.ОрганизацияПоУмолчанию();

		Иначе
			РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("В справочнике организаций не обнаружено элемента с реквизитами ИНН/КПП: " + ИННКПП, ИдентификаторФормыВладельца);	
		КонецЕсли;
		
	КонецЕсли;

	ПредставлениеОрганизация = ЗначениеСтрокиУзла(УзелОрганизация, "Наименование") + " " + ИННКПП;
	
	ПредставлениеДатаВремяВыгрузки = ЗначениеСтрокиУзла(УзелФайл, "ДатаВыгрузки") + " " 
	+ СтрЗаменить(ЗначениеСтрокиУзла(УзелФайл, "ВремяВыгрузки"), ".", ":");
	
	СоответствиеУчастников = Новый Соответствие;
	СписокВыбораУчастников = Элементы.Участник.СписокВыбора;
	СписокВыбораУчастников.Очистить();
	
	РеквизитыУчастников.Очистить();
	
	Если УзелУчастники <> Неопределено Тогда
		Для каждого УзелУчастник Из МассивСтрокУзла(УзелУчастники, "Участник") Цикл
			
			Если НЕ ЕстьСтрокаУзла(УзелУчастник, "Идентификатор") Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания.", ИдентификаторФормыВладельца);
				Возврат Ложь;
				
			КонецЕсли;
			
			Идентификатор = ЗначениеСтрокиУзла(УзелУчастник, "Идентификатор");
			
			НоваяСтрокаРеквизиты = РеквизитыУчастников.Добавить();
			НоваяСтрокаРеквизиты.ИдентификаторУчастника 	= Идентификатор;
			
			Если ЕстьСтрокаУзла(УзелУчастник, "ЮридическоеЛицо") Тогда
				//это организация
				
				НоваяСтрокаРеквизиты.ЯвляетсяЮрЛицом = Истина;
				
				УзелЮридическоеЛицо = СтрокаУзла(УзелУчастник, "ЮридическоеЛицо");
				
				НаименованиеОрганизации = ЗначениеСтрокиУзла(УзелЮридическоеЛицо, "Наименование");
				ИНН 					= ЗначениеСтрокиУзла(УзелЮридическоеЛицо, "ИНН");
				КПП 					= ЗначениеСтрокиУзла(УзелЮридическоеЛицо, "КПП");
				
				НоваяСтрокаРеквизиты.НаименованиеОрганизации 	= НаименованиеОрганизации;
				НоваяСтрокаРеквизиты.ИНН 						= ИНН;
				НоваяСтрокаРеквизиты.КПП 						= КПП;
				
				ИННКПП = ИНН + ?(ЗначениеЗаполнено(КПП),"/" + КПП,"");
				ПредставлениеУчастника = НаименованиеОрганизации + ПрибавляемаяСтрока(ИННКПП);
				
			ИначеЕсли ЕстьСтрокаУзла(УзелУчастник, "ФизическоеЛицо") Тогда
				//это ИП	
				
				НоваяСтрокаРеквизиты.ЯвляетсяЮрЛицом = Ложь;
				
				УзелФизическоеЛицо = СтрокаУзла(УзелУчастник, "ФизическоеЛицо");
				
				ИНН = ЗначениеСтрокиУзла(УзелФизическоеЛицо, "ИНН");
				
				НоваяСтрокаРеквизиты.ИНН = ИНН;
				
				Если ЕстьСтрокаУзла(УзелФизическоеЛицо, "ФИО") Тогда
					УзелФИО = СтрокаУзла(УзелФизическоеЛицо, "ФИО");	
					ФамилияИП	= ЗначениеСтрокиУзла(УзелФИО, "ФамилияИП");
					ИмяИП 		= ЗначениеСтрокиУзла(УзелФИО, "ИмяИП");
					ОтчествоИП 	= ЗначениеСтрокиУзла(УзелФИО, "ОтчествоИП");
					
					НоваяСтрокаРеквизиты.ФамилияИП 	= ФамилияИП;
					НоваяСтрокаРеквизиты.ИмяИП 		= ИмяИП;
					НоваяСтрокаРеквизиты.ОтчествоИП = ОтчествоИП;
					
					ПредставлениеУчастника = ФамилияИП + ПрибавляемаяСтрока(ИмяИП) + ПрибавляемаяСтрока(ОтчествоИП) + ПрибавляемаяСтрока(ИНН);
				Иначе
					ПредставлениеУчастника = ИНН;
				КонецЕсли;
				
			Иначе
				
				РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания.", ИдентификаторФормыВладельца);
				Возврат Ложь;
				
			КонецЕсли;
			
			СоответствиеУчастников.Вставить(Идентификатор, ПредставлениеУчастника);
			СписокВыбораУчастников.Добавить(Идентификатор, ПредставлениеУчастника);
			
		КонецЦикла;
	КонецЕсли;
		
	СоответствиеВидовДокументов = Новый Соответствие;
	
	СоответствиеВидовДокументов.Вставить("01", Перечисления.ВидыПредставляемыхДокументов.СчетФактура);
	СоответствиеВидовДокументов.Вставить("02", Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
	СоответствиеВидовДокументов.Вставить("03", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
	СоответствиеВидовДокументов.Вставить("04", Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация);
	СоответствиеВидовДокументов.Вставить("05", Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации);
	СоответствиеВидовДокументов.Вставить("06", Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
	СоответствиеВидовДокументов.Вставить("07", Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены);
	СоответствиеВидовДокументов.Вставить("08", Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору);
	СоответствиеВидовДокументов.Вставить("09", Перечисления.ВидыПредставляемыхДокументов.Договор);
	СоответствиеВидовДокументов.Вставить("10", Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура);
	СоответствиеВидовДокументов.Вставить("11", Перечисления.ВидыПредставляемыхДокументов.ОтчетНИОКР);
	
	СоответствиеПредставлениеРолиУчастникаПоКоду = ПолучитьСоответствиеПредставлениеРолиУчастникаПоКоду();
	
	Для каждого УзелДокумент Из МассивСтрокУзла(УзелФайл, "Документ") Цикл
		
		Если НЕ ЕстьСтрокаУзла(УзелДокумент, "Вид") 
			ИЛИ НЕ ЕстьСтрокаУзла(УзелДокумент, "Файл") Тогда
			
			РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания.", ИдентификаторФормыВладельца);
			Возврат Ложь;
			
		КонецЕсли;
		
		//добавляем новую строку таблицы ЗагруженныеДокументы и заполняем ее
		НоваяСтрокаДок = ЗагруженныеДокументы.Добавить();
		
		НоваяСтрокаДок.ИдентификаторДокумента = Новый УникальныйИдентификатор;
		
		НоваяСтрокаДок.ВидДокумента 		= СоответствиеВидовДокументов[ЗначениеСтрокиУзла(УзелДокумент, "Вид")];
		НоваяСтрокаДок.Дата 				= ДатаИзСтроки(ЗначениеСтрокиУзла(УзелДокумент, "Дата"));
		НоваяСтрокаДок.Номер 				= ЗначениеСтрокиУзла(УзелДокумент, "Номер");
		НоваяСтрокаДок.СуммаВсего		 	= СтрокаВЧисло(ЗначениеСтрокиУзла(УзелДокумент, "СуммаВсего"));
		НоваяСтрокаДок.СуммаНалога		 	= СтрокаВЧисло(ЗначениеСтрокиУзла(УзелДокумент, "СуммаНалога"));
		НоваяСтрокаДок.НомерОснования 		= ЗначениеСтрокиУзла(УзелДокумент, "НомерОснования");
		НоваяСтрокаДок.ДатаОснования		= ДатаИзСтроки(ЗначениеСтрокиУзла(УзелДокумент, "ДатаОснования"));
		НоваяСтрокаДок.Предмет				= ЗначениеСтрокиУзла(УзелДокумент, "Предмет");
		НоваяСтрокаДок.НачалоПериода		= ДатаИзСтроки(ЗначениеСтрокиУзла(УзелДокумент, "НачалоПериода"));
		НоваяСтрокаДок.КонецПериода			= ДатаИзСтроки(ЗначениеСтрокиУзла(УзелДокумент, "КонецПериода"));
		
		ПредставлениеДокумента = Строка(НоваяСтрокаДок.ВидДокумента);
		
		Если ЗначениеЗаполнено(НоваяСтрокаДок.Номер) Тогда
			ПредставлениеДокумента = ПредставлениеДокумента + " N" + НоваяСтрокаДок.Номер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаДок.Дата) Тогда
			ПредставлениеДокумента = ПредставлениеДокумента + " от " + Формат(НоваяСтрокаДок.Дата, "ДЛФ=D");
		КонецЕсли;
		
		НоваяСтрокаДок.ПредставлениеДокумента = ПредставлениеДокумента;
		
		Для каждого УзелФайл Из МассивСтрокУзла(УзелДокумент, "Файл") Цикл
			
			Если НЕ ЕстьСтрокаУзла(УзелФайл, "Имя") 
				ИЛИ НЕ ЕстьСтрокаУзла(УзелФайл, "Размер") Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания.", ИдентификаторФормыВладельца);
				Возврат Ложь;
				
			КонецЕсли;
			
			//добавляем новую строку таблицы ФайлыДокументов и заполняем ее
			НоваяСтрокаФайлы = ФайлыДокументов.Добавить();
			НоваяСтрокаФайлы.ИдентификаторДокумента = НоваяСтрокаДок.ИдентификаторДокумента;
			НоваяСтрокаФайлы.Имя = ЗначениеСтрокиУзла(УзелФайл, "Имя");
			НоваяСтрокаФайлы.Размер = СтрокаВЧисло(ЗначениеСтрокиУзла(УзелФайл, "Размер"));
			НоваяСтрокаФайлы.НомерСтраницы = СтрокаВЧисло(ЗначениеСтрокиУзла(УзелФайл, "НомерСтраницы"));
			НоваяСтрокаФайлы.ИмяНаДиске = ЗначениеСтрокиУзла(УзелФайл, "ИмяНаДиске");
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаФайлы.ИмяНаДиске) Тогда
				НоваяСтрокаФайлы.ИмяНаДиске = НоваяСтрокаФайлы.Имя; 
			КонецЕсли;
		
		КонецЦикла;
		
		Для каждого УзелУчастник Из МассивСтрокУзла(УзелДокумент, "Участник") Цикл
			
			Если НЕ ЕстьСтрокаУзла(УзелУчастник, "Идентификатор") Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.СообщитьПользователю("Некорректная структура XML файла описания.", ИдентификаторФормыВладельца);
				Возврат Ложь;
				
			КонецЕсли;

			//добавляем новую строку таблицы УчастникиДокументов и заполняем ее
			НоваяСтрокаУч = УчастникиДокументов.Добавить();
			НоваяСтрокаУч.ИдентификаторДокумента = НоваяСтрокаДок.ИдентификаторДокумента;
			НоваяСтрокаУч.Роль = СоответствиеПредставлениеРолиУчастникаПоКоду[ЗначениеСтрокиУзла(УзелУчастник, "Роль")];
			НоваяСтрокаУч.ИдентификаторУчастника = ЗначениеСтрокиУзла(УзелУчастник, "Идентификатор");
		
		КонецЦикла;

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаИзСтроки(СтрДата)
	Если СтрДата = "" Тогда
		ВозвращаемаяДата = Дата(1, 1, 1);
	Иначе
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрДата, ".");
		Если Число(МассивПодстрок[0]) = 0 Тогда
			МассивПодстрок[0] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[1]) = 0 Тогда
			МассивПодстрок[1] = "1";
		КонецЕсли;
		Если Число(МассивПодстрок[2]) = 0 Тогда
			МассивПодстрок[2] = "1";
		КонецЕсли;
		ВозвращаемаяДата = Дата(МассивПодстрок[2], МассивПодстрок[1], МассивПодстрок[0]);
	КонецЕсли;
	
	Возврат ВозвращаемаяДата;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоОтборамТаблицуОтображаемыеДокументы()
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ПараметрыОтбора.Вставить("ВидДокумента", ВидДокумента);
	КонецЕсли;
	
	Если ПараметрыОтбора.Количество() = 0 Тогда
		ОтобранныеСтроки = ЗагруженныеДокументы;	// ОтобранныеСтроки - ТЗ
	Иначе
		ОтобранныеСтроки = ЗагруженныеДокументы.НайтиСтроки(ПараметрыОтбора); // ОтобранныеСтроки - массив строк ТЗ ЗагруженныеДокументы
	КонецЕсли;
	
	ОтображаемыеДокументы.Очистить();
	
	
	ПараметрыОтбораТЗУчастников = Новый Структура;
	ПараметрыОтбораТЗУчастников.Вставить("ИдентификаторУчастника", Участник);
	
	Для каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл
		
		Если ЗначениеЗаполнено(Участник) Тогда
			
			ПараметрыОтбораТЗУчастников.Вставить("ИдентификаторДокумента", ОтобраннаяСтрока.ИдентификаторДокумента);
			
			МассивУчастниковДокумента = УчастникиДокументов.НайтиСтроки(ПараметрыОтбораТЗУчастников); //массив строк ТЗ УчастникиДокументов
			Если МассивУчастниковДокумента.Количество() > 0 Тогда
				//среди участников документа есть требуемый
				НоваяСтрока = ОтображаемыеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтобраннаяСтрока); 	
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = ОтображаемыеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтобраннаяСтрока); 
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

&НаСервере
Функция СформироватьСтруктуруРезультатНаСервере(МассивИменЗагружаемыхФайлов)
	
	СтруктураРезультата = Новый Структура;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Выбрать", Истина);
	
	ВыбранныеСтроки = ОтображаемыеДокументы.НайтиСтроки(ПараметрыОтбора);
	
	ТЗОтображаемыеДокументы = РеквизитФормыВЗначение("ОтображаемыеДокументы");
	ВыбранныеДокументы = ТЗОтображаемыеДокументы.Скопировать(Новый Массив);
	
	ТЗФайлыДокументов = РеквизитФормыВЗначение("ФайлыДокументов");
	ФайлыВыбранныхДокументов = ТЗФайлыДокументов.Скопировать(Новый Массив);
	ПараметрыОтбораФайлов = Новый Структура;
	
	Для каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		
		НоваяСтрока = ВыбранныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбраннаяСтрока); 
		
		ПараметрыОтбораФайлов.Вставить("ИдентификаторДокумента", ВыбраннаяСтрока.ИдентификаторДокумента);
		ФайлыВыбранногоДокумента = ТЗФайлыДокументов.НайтиСтроки(ПараметрыОтбораФайлов);
		
		Для каждого ФайлВыбранногоДокумента Из ФайлыВыбранногоДокумента Цикл
			НоваяСтрока = ФайлыВыбранныхДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлВыбранногоДокумента);
			
			МассивИменЗагружаемыхФайлов.Добавить(ФайлВыбранногоДокумента.ИмяНаДиске);
		КонецЦикла;
		
	КонецЦикла;
	
 	АдресТЗВыбранныеДокументы = ПоместитьВоВременноеХранилище(ВыбранныеДокументы, ИдентификаторФормыВладельца);
	СтруктураРезультата.Вставить("АдресТЗЗагруженныеДокументы", АдресТЗВыбранныеДокументы);
	
	АдресТЗУчастникиДокументов = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("УчастникиДокументов"), ИдентификаторФормыВладельца);
	СтруктураРезультата.Вставить("АдресТЗУчастникиДокументов", АдресТЗУчастникиДокументов);
	
	АдресТЗРеквизитыУчастников = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("РеквизитыУчастников"), ИдентификаторФормыВладельца);
	СтруктураРезультата.Вставить("АдресТЗРеквизитыУчастников", АдресТЗРеквизитыУчастников);
	
	
	АдресТЗФайлыДокументов = ПоместитьВоВременноеХранилище(ФайлыВыбранныхДокументов, ИдентификаторФормыВладельца);
	СтруктураРезультата.Вставить("АдресТЗФайлыДокументов", АдресТЗФайлыДокументов);

	СтруктураРезультата.Вставить("ОрганизацияСсылка", ОрганизацияСсылка);
	
	СтруктураРезультата.Вставить("ПолноеИмяФайлаОбмена", ПолноеИмяФайлаОбменаНаСервере);
	
	Возврат СтруктураРезультата;
			
КонецФункции

&НаСервере
Функция ПредставлениеУчастникаПоИдентификатору(ИдентификаторУчастника)
	
	ПараметрыОтбораТЗУчастников = Новый Структура;
	ПараметрыОтбораТЗУчастников.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
	
	СтрокаРеквизитов = РеквизитыУчастников.НайтиСтроки(ПараметрыОтбораТЗУчастников)[0];
	
	ИННКПП = СтрокаРеквизитов.ИНН + ?(ЗначениеЗаполнено(СтрокаРеквизитов.КПП),"/" + СтрокаРеквизитов.КПП,"");
	
	Если СтрокаРеквизитов.ЯвляетсяЮрЛицом Тогда
		//это организация
		ПредставлениеУчастника = СтрокаРеквизитов.НаименованиеОрганизации + ПрибавляемаяСтрока(ИННКПП);
	Иначе
		//это ИП
		ПредставлениеУчастника = СтрокаРеквизитов.ФамилияИП + ПрибавляемаяСтрока(СтрокаРеквизитов.ИмяИП) + ПрибавляемаяСтрока(СтрокаРеквизитов.ОтчествоИП) + ПрибавляемаяСтрока(ИННКПП);
	КонецЕсли;
	
	Возврат ПредставлениеУчастника;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеПредставлениеРолиУчастникаПоКоду()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("01",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Продавец);
	Соответствие.Вставить("02",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
	Соответствие.Вставить("03",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
	Соответствие.Вставить("04",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Отправитель);
	Соответствие.Вставить("05",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
	Соответствие.Вставить("06",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Учредитель);
	Соответствие.Вставить("07",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Арендодатель);
	Соответствие.Вставить("08",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Займодатель);
	Соответствие.Вставить("09",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Векселедатель);
	Соответствие.Вставить("10",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Страхователь);
	Соответствие.Вставить("11",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Экспортер);
	Соответствие.Вставить("12",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Работодатель);
	Соответствие.Вставить("13",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Покупатель);
	Соответствие.Вставить("14",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
	Соответствие.Вставить("15",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Получатель);
	Соответствие.Вставить("16",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
	Соответствие.Вставить("17",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поверенный);
	Соответствие.Вставить("18",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Агент);
	Соответствие.Вставить("19",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Арендатор);
	Соответствие.Вставить("20",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Займополучатель);
	Соответствие.Вставить("21",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Векселеполучатель);
	Соответствие.Вставить("22",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Пользователь);
	Соответствие.Вставить("23",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Хранитель);
	Соответствие.Вставить("24",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Страховщик);
	Соответствие.Вставить("25",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Импортер);
	Соответствие.Вставить("26",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Работник);
	Соответствие.Вставить("27",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Участник);
	Соответствие.Вставить("28",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
	Соответствие.Вставить("29",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Декларант);
	Соответствие.Вставить("30",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Перевозчик);
	Соответствие.Вставить("31",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Экспедитор);
	Соответствие.Вставить("32",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Акционер);
	Соответствие.Вставить("33",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Эмитент);
	Соответствие.Вставить("34",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Инвестор);
	Соответствие.Вставить("35",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.ГенеральныйПодрядчик);
	Соответствие.Вставить("36",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Субподрядчик);
	Соответствие.Вставить("37",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Подрядчик);
	Соответствие.Вставить("38",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Посредник);
	Соответствие.Вставить("39",Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.ЛицоСоставившееДокумент);
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруПараметровНаСервере(СтруктураПараметров, ИдентификаторДокумента)
	
	ТЗУчастникиДокумента = Новый ТаблицаЗначений;
	ТЗУчастникиДокумента.Колонки.Добавить("РольУчастника");
	ТЗУчастникиДокумента.Колонки.Добавить("ПредставлениеУчастника");
	
	ТЗФайлыДокумента = ФайлыДокументов.Выгрузить(Новый Массив, "ИмяНаДиске, Имя, Размер, НомерСтраницы");
	
	ПараметрыОтбораТЗ = Новый Структура;
	ПараметрыОтбораТЗ.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	
	//Участники документа
	МассивУчастниковДокумента = УчастникиДокументов.НайтиСтроки(ПараметрыОтбораТЗ); //массив строк ТЗ УчастникиДокументов
	Для каждого СтрокаУчастникДокумента Из МассивУчастниковДокумента Цикл
		
		НоваяСтрокаТЗУчастникиДокумента = ТЗУчастникиДокумента.Добавить(); 
		НоваяСтрокаТЗУчастникиДокумента.РольУчастника = СтрокаУчастникДокумента.Роль;
		НоваяСтрокаТЗУчастникиДокумента.ПредставлениеУчастника = ПредставлениеУчастникаПоИдентификатору(СтрокаУчастникДокумента.ИдентификаторУчастника);
	
	КонецЦикла;

	АдресТЗУчастникиДокумента = ПоместитьВоВременноеХранилище(ТЗУчастникиДокумента, УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресТЗУчастникиДокумента", АдресТЗУчастникиДокумента);
	
	//Файлы документа
	МассивФайловДокумента = ФайлыДокументов.НайтиСтроки(ПараметрыОтбораТЗ); //массив строк ТЗ ФайлыДокументов
	Для каждого СтрокаФайлДокумента Из МассивФайловДокумента Цикл
		
		НоваяСтрокаТЗФайлыДокумента = ТЗФайлыДокумента.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗФайлыДокумента, СтрокаФайлДокумента);
	
	КонецЦикла;

	
	АдресТЗФайлыДокумента = ПоместитьВоВременноеХранилище(ТЗФайлыДокумента, УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресТЗФайлыДокумента", АдресТЗФайлыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагружаемогоДокумента(ДанныеСтроки)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ВидДокумента", 			ДанныеСтроки.ВидДокумента);
	СтруктураПараметров.Вставить("НомерДокумента", 			ДанныеСтроки.Номер);
	СтруктураПараметров.Вставить("ДатаДокумента", 			ДанныеСтроки.Дата);
	СтруктураПараметров.Вставить("НомерОснования", 			ДанныеСтроки.НомерОснования);
	СтруктураПараметров.Вставить("ДатаОснования", 			ДанныеСтроки.ДатаОснования);
	СтруктураПараметров.Вставить("КонецПериода", 			ДанныеСтроки.КонецПериода);
	СтруктураПараметров.Вставить("НачалоПериода", 			ДанныеСтроки.НачалоПериода);
	СтруктураПараметров.Вставить("ПредметДокумента", 		ДанныеСтроки.Предмет);
	СтруктураПараметров.Вставить("СуммаВсего", 				ДанныеСтроки.СуммаВсего);
	СтруктураПараметров.Вставить("СуммаНалога", 			ДанныеСтроки.СуммаНалога);
	
	СтруктураПараметров.Вставить("Организация", 			ОрганизацияСсылка);
	
	ДополнитьСтруктуруПараметровНаСервере(СтруктураПараметров, ДанныеСтроки.ИдентификаторДокумента);
	
	ПараметрыФормы = Новый Структура("СтруктураПараметров", СтруктураПараметров);
	ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.Форма.ФормаЗагружаемогоДокумента", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти
