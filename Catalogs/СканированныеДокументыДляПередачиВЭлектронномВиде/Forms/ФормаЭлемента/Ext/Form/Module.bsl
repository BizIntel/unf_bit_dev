
&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаСервере
Перем КонтекстЭДОСервер;

&НаКлиенте
Перем ЗначениеВидДокументаПередНачаломВыбораИзСписка;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// инициализируем контекст ЭДО - модуль обработки
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента.
		
		Если Параметры.РежимПодготовки Тогда
			
			РежимПодготовки = Истина;
			Элементы.Источник.ТолькоПросмотр = Истина;
			Элементы.ВидДокумента.ТолькоПросмотр = Истина;
			
			НомерДокументаПодготовки = Параметры.НомерДокументаПодготовки;
			КоличествоДокументовПодготовки = Параметры.КоличествоДокументовПодготовки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ПараметрыИсточникаПодготовки) Тогда
			ПараметрыИсточника = Параметры.ПараметрыИсточникаПодготовки;
			
			//создание элемента и заполнение на основе источника (реквизиты и импорт файлов)
			Объект.Источник 			= ПараметрыИсточника.Источник;
			Объект.ВидДокумента 		= ПараметрыИсточника.ВидДокументаФНС;
			Объект.НомерСтрокиИсточника = ПараметрыИсточника.НомерСтрокиИсточника;
			
			ЗаполнитьПоИсточникуНаСервере();
			ИмпортироватьФайлыИсточникаПриОткрытии = Истина;
			
			ПараметрыИсточникаПодготовки = Параметры.ПараметрыИсточникаПодготовки;
			ПараметрыИсточникаПодготовки.Вставить("Организация", Объект.Организация);
			
		ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			Заголовок = Объект.Наименование;
		Иначе
			// Добавление элемента.
			Объект.Наименование = "Подготовка документа к отправке";
			Заголовок = "Подготовка документа к отправке";
			
			ДобавитьВОтобранные = Параметры.ДобавитьВОтобранные;
			
			Если НЕ ЗначениеЗаполнено(Объект.Организация)Тогда
				Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
					Объект.Организация = Модуль.ОрганизацияПоУмолчанию();
				КонецЕсли;
				
				// Если организаций больше одной, то используем основную организацию
				Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				ДобавитьУчастникаОрганизацию(Объект.Организация);
			КонецЕсли;
			
		КонецЕсли;

	Иначе
		Заголовок = Объект.Наименование;
	КонецЕсли;
	
	//заполнение списков выбора
	ЗаполнитьСпискиВыбора();
		
	//заполнение таблиц участников сделки и файлов
	ОбновитьТаблицуУчастников();
	ЗаполнитьТаблицуФайловПередОткрытием();
	
	
	//управление видимостью/доступностью элементов формы
	УправлениеЭУ();
	УправлениеЭУПросмотрСписокВложений();
	УправлениеЭУПодготовка();
	УправлениеЭУДокументИсточник();
	
	//ФО Использование одной организации
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ЗаголовокОрганизация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Наименование = "Подготовка документа к отправке";
	КонецЕсли;
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Закрыть();
		Возврат;
	КонецЕсли;

	УстановитьРазмерКартинкиПоЗначениюПереключателя();
	
	Если ИмпортироватьФайлыИсточникаПриОткрытии Тогда
		ИмпортироватьФайлыИсточника();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если РежимПодготовки Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрыть", ЭтотОбъект);
			
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(
			Оповещение, 
			Отказ, 
			ЗавершениеРаботы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбновитьОбъектРеквизитыУчастников();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьФайлыФормыВБазу();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ДобавитьВОтобранные", ДобавитьВОтобранные);
	
	Если ПараметрыИсточникаПодготовки <> Неопределено И (ПараметрыИсточникаПодготовки.Источник <> Объект.Источник ИЛИ ПараметрыИсточникаПодготовки.ВидДокументаФНС <> Объект.ВидДокумента
		ИЛИ ПараметрыИсточникаПодготовки.НомерСтрокиИсточника <> Объект.НомерСтрокиИсточника ИЛИ ПараметрыИсточникаПодготовки.Организация <> Объект.Организация) Тогда
		
		ПараметрыОповещения.Вставить("ПараметрыИсточникаПодготовки", ПараметрыИсточникаПодготовки);
		ПараметрыИсточникаПодготовки = Неопределено;
	КонецЕсли;
	
	Оповестить("Запись_СканированныеДокументыДляПередачиВЭлектронномВиде", ПараметрыОповещения, Объект.Ссылка);
	
	ДобавитьВОтобранные = Ложь;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ЗначениеВидДокументаПередНачаломВыбораИзСписка = Объект.ВидДокумента;

КонецПроцедуры

&НаКлиенте
Процедура ИсточникОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.НомерСтрокиИсточника = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУчастниковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		НоваяСтрока = ТаблицаУчастников.Добавить();
		НоваяСтрока.ЯвляетсяЮрЛицом = Истина;
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(НоваяСтрока, Объект.ВидДокумента);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУчастниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаУчастниковСоставноеПоле" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ВидДокумента", 		Объект.ВидДокумента); 
		СтруктураРеквизитов.Вставить("ЮрЛицоНаименование", 	ТекущиеДанные.ЮрЛицоНаименование); 
		СтруктураРеквизитов.Вставить("ЮрЛицоИНН", 			ТекущиеДанные.ЮрЛицоИНН); 
		СтруктураРеквизитов.Вставить("ЮрЛицоКПП", 			ТекущиеДанные.ЮрЛицоКПП); 
		СтруктураРеквизитов.Вставить("ФизЛицоФамилия", 		ТекущиеДанные.ФизЛицоФамилия); 
		СтруктураРеквизитов.Вставить("ФизЛицоИмя", 			ТекущиеДанные.ФизЛицоИмя); 
		СтруктураРеквизитов.Вставить("ФизЛицоОтчество", 	ТекущиеДанные.ФизЛицоОтчество); 
		СтруктураРеквизитов.Вставить("ФизЛицоИНН", 			ТекущиеДанные.ФизЛицоИНН); 
		СтруктураРеквизитов.Вставить("ЯвляетсяЮрЛицом", 	ТекущиеДанные.ЯвляетсяЮрЛицом); 
		СтруктураРеквизитов.Вставить("РольУчастника", 		ТекущиеДанные.РольУчастника); 
		СтруктураРеквизитов.Вставить("Контрагент", 			ТекущиеДанные.Контрагент); 
		
		СтруктураРеквизитов.Вставить("СписокРолейУчастников", Элементы.ТаблицаУчастниковРольУчастника.СписокВыбора); 
		
		ПараметрыФормы = Новый Структура("СтруктураРеквизитов", СтруктураРеквизитов);
		
		ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки", ВыбраннаяСтрока); 
		
		//Описание оповещения
		ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаУчастниковВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.Форма.ФормаУчастникаСделки", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Результат, ВходящийКонтекст) Экспорт

	Если Записать() Тогда
		
		Модифицированность = Ложь;
		Закрыть(Истина);
		
	КонецЕсли;

КонецПроцедуры

#Область ТаблицаУчастников

&НаСервере
Процедура ДобавитьУчастникаОрганизацию(Организация)
	
	СтрокаТЧ = Объект.РеквизитыУчастников.Добавить();
	
	СтрокаТЧ.ЯвляетсяЮрЛицом = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	
	Если СтрокаТЧ.ЯвляетсяЮрЛицом Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол";	
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), СтрокаСведений);	
		СтрокаТЧ.ЮрЛицоНаименование = СведенияОбОрганизации.НаимЮЛПол; 
		СтрокаТЧ.ЮрЛицоИНН = СведенияОбОрганизации.ИННЮЛ; 
		СтрокаТЧ.ЮрЛицоКПП = СведенияОбОрганизации.КППЮЛ; 
		
	Иначе
		
		СтрокаСведений = "ИННФЛ, ФИО";	
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДатаСеанса(), СтрокаСведений);	
		СтрокаТЧ.ФизЛицоИНН  = СведенияОбОрганизации.ИННФЛ;
		
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИО);
		СтрокаТЧ.ФизЛицоФамилия  = ФИО.Фамилия;	
		СтрокаТЧ.ФизЛицоИмя      = ФИО.Имя;	
		СтрокаТЧ.ФизЛицоОтчество = ФИО.Отчество;
		
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	//список выбора ролей участников
	ЗаполнитьСписокВыбораРолей();
	
	//список выбора направления документа
	СписокВыбораНаправление = Элементы.Направление.СписокВыбора;
	СписокВыбораНаправление.Добавить(Перечисления.НаправленияДокументаПоТребованиюФНС.Выдан);
	СписокВыбораНаправление.Добавить(Перечисления.НаправленияДокументаПоТребованиюФНС.Получен);

	//список выбора вида документа
	СписокВыбораВидДокумента = Элементы.ВидДокумента.СписокВыбора;
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.СчетФактура);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.Договор);        
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены);
	СписокВыбораВидДокумента.Добавить(Перечисления.ВидыПредставляемыхДокументов.ОтчетНИОКР);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораРолей()
	
	ОбщийМассивРолей = Новый Массив;
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Агент);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Акционер);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Арендатор);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Арендодатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Векселедатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Векселеполучатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.ГенеральныйПодрядчик);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Декларант);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Займодатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Займополучатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Импортер);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Инвестор);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.ЛицоСоставившееДокумент); 
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Отправитель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Перевозчик);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поверенный);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Подрядчик);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Покупатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Получатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Пользователь);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Посредник);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Продавец);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Работник);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Работодатель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Страхователь);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Страховщик);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Субподрядчик);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Участник);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Учредитель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Хранитель);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Экспедитор);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Экспортер);
	ОбщийМассивРолей.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Эмитент);

	СписокРолейУчастников = Элементы.ТаблицаУчастниковРольУчастника.СписокВыбора;
	СписокРолейУчастников.Очистить();     
		 
	ВидДокумента = Объект.ВидДокумента;
	
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СчетФактура Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Агент);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Покупатель);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Продавец);
	ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Агент);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Покупатель);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Продавец);
	ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Агент);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
	ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12 Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Экспедитор);
	ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Перевозчик);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Экспедитор);
	ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Декларант);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Импортер);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Экспортер);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Отправитель);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Получатель);
	ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Декларант);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Импортер);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Экспортер);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Отправитель);
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Получатель);
	ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
	ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ОтчетНИОКР Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);	
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
	КонецЕсли;
	
	Если СписокРолейУчастников.Количество() > 0 Тогда
		СписокРолейУчастников.Добавить(Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.ПустаяСсылка(), "-------------------------------------------");
	КонецЕсли;
	
	Для каждого Роль Из ОбщийМассивРолей Цикл
		Если СписокРолейУчастников.НайтиПоЗначению(Роль) = Неопределено Тогда
			СписокРолейУчастников.Добавить(Роль);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуУчастников()
	
	ТаблицаУчастников.Очистить();
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыУчастников Цикл
		НоваяСтрока = ТаблицаУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.РольУчастника = СтрокаТЧ.Роль;
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(НоваяСтрока, Объект.ВидДокумента);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(СтрокаТаблицы, ВидДокумента)
	
	СтрокаТаблицы.СоставноеПоле = ПолучитьНаименованиеУчастникаСделки(СтрокаТаблицы);
	
	//установим значение поля НеобходимыеПоляЗаполнены
	НеобходимыеПоляЗаполнены = Истина;	
	Если СтрокаТаблицы.ЯвляетсяЮрЛицом Тогда
		//юридическое лицо
		
		ВидДокумента = ВидДокумента;
		Если ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.СпецификацияЦены") 
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.Договор") 
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ДополнениеКДоговору")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ОтчетНИОКР") Тогда
			ОбязательноЗаполнениеИНН = Истина;
		Иначе
			ОбязательноЗаполнениеИНН = Ложь;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЮрЛицоНаименование) ИЛИ 
		(ОбязательноЗаполнениеИНН И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЮрЛицоИНН)) Тогда
			НеобходимыеПоляЗаполнены = Ложь;
		КонецЕсли;
		
	Иначе
		//физическое лицо
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ФизЛицоФамилия) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ФизЛицоИмя) Тогда
			НеобходимыеПоляЗаполнены = Ложь;
		КонецЕсли;

	КонецЕсли;
	СтрокаТаблицы.НеобходимыеПоляЗаполнены = НеобходимыеПоляЗаполнены;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВычисляемыеПоляВсехСтрокТаблицыУчастников()
	
	ВидДокумента = Объект.ВидДокумента;
	
	Для каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(СтрокаТаблицы, ВидДокумента);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНаименованиеУчастникаСделки(ДанныеСтроки)
	Если ДанныеСтроки.ЯвляетсяЮрЛицом Тогда
		//юридическое лицо
		Если ЗначениеЗаполнено(ДанныеСтроки.ЮрЛицоНаименование) Тогда
			ТекстНаименование = ДанныеСтроки.ЮрЛицоНаименование;
		Иначе
			ТекстНаименование = "Наименование";
		КонецЕсли;
		
		ТекстНаименование = ТекстНаименование + ", ИНН";
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЮрЛицоИНН) Тогда
			ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ЮрЛицоИНН;
		КонецЕсли;	
		
		ТекстНаименование = ТекстНаименование + ", КПП";
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЮрЛицоКПП) Тогда
			ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ЮрЛицоКПП;
		КонецЕсли;	
	Иначе
		//физическое лицо
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоФамилия) И НЕ ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоИмя) И НЕ ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоОтчество) Тогда
			
			ТекстНаименование = "ФИО";
			
		Иначе
			
			ТекстНаименование = ДанныеСтроки.ФизЛицоФамилия;
			
			Если ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоИмя) Тогда
				ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ФизЛицоИмя;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоОтчество) Тогда
				ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ФизЛицоОтчество;
			КонецЕсли;	

		КонецЕсли;
		
		ТекстНаименование = ТекстНаименование + ", ИНН";
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ФизЛицоИНН) Тогда
			ТекстНаименование = ТекстНаименование + " " + ДанныеСтроки.ФизЛицоИНН;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ТекстНаименование;
КонецФункции

&НаКлиенте
Процедура ТаблицаУчастниковВыборЗавершение(СтуктураРезультат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтуктураРезультат) <> Тип("Структура")  Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ТаблицаУчастников.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтуктураРезультат);
	ЗаполнитьВычисляемыеПоляСтрокиТаблицыУчастников(ТекущаяСтрока, Объект.ВидДокумента);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбъектРеквизитыУчастников()
	
	Объект.РеквизитыУчастников.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		НоваяСтрока = Объект.РеквизитыУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Роль = СтрокаТаблицы.РольУчастника;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаФайлов

#Область ДобавлениеФайлов

#Область Перетаскивание

&НаКлиенте
Процедура ТаблицаФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПеретаскиваемыеФайлы(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивИменФайловИзЗначенияПеретаскивания(ЗначениеПеретаскивания)
	
	МассивПолныхИменФайлов = Новый Массив;
	
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
		//перетаскивают один файл
		
		Если ЗначениеПеретаскивания.Расширение = ".jpg" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".tif" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".png" 
		ИЛИ ЗначениеПеретаскивания.Расширение = ".pdf" Тогда
			МассивПолныхИменФайлов.Добавить(ЗначениеПеретаскивания.ПолноеИмя);	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		//перетаскивают несколько файлов
		Для каждого ЭлМассива Из ЗначениеПеретаскивания Цикл
			Если ТипЗнч(ЭлМассива) = Тип("Файл") Тогда
				Если ЭлМассива.Расширение = ".jpg" 
				ИЛИ ЭлМассива.Расширение = ".tif" 
				ИЛИ ЭлМассива.Расширение = ".png" 
				ИЛИ ЭлМассива.Расширение = ".pdf" Тогда
					МассивПолныхИменФайлов.Добавить(ЭлМассива.ПолноеИмя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивПолныхИменФайлов;
	
КонецФункции

&НаКлиенте
Процедура АдресКартинкиПросмотрПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиПросмотрПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПеретаскиваемыеФайлы(ПараметрыПеретаскивания.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПеретаскиваемыеФайлы(ЗначениеПеретаскивания)
	
	МассивПолныхИмен = ПолучитьМассивИменФайловИзЗначенияПеретаскивания(ЗначениеПеретаскивания);
	
	Если ЗначениеЗаполнено(МассивПолныхИмен) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивПолныхИмен", МассивПолныхИмен);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПеретаскиваниемРасширениеПредложено", ЭтотОбъект, ДополнительныеПараметры);
		ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, , Истина)
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПеретаскиваниемРасширениеПредложено(Результат, ДополнительныеПараметры) Экспорт
	
	ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами = Результат;	
	
	Если ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами Тогда
		
		МассивПолныхИмен = ДополнительныеПараметры.МассивПолныхИмен;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеПолученияСвойствФайлов", ЭтотОбъект);
		ПолучитьСвойстваФайлов(ОписаниеОповещения, МассивПолныхИмен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ИмпортироватьФайлыИсточника()
	
	ИсточникСсылка = Объект.Источник;
	
	Если НЕ ЗначениеЗаполнено(ИсточникСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСвойствФайлов = Новый Массив;
	ФайлыИсточников = Новый Соответствие;
	ФайлыИсточников.Вставить(ИсточникСсылка, МассивСвойствФайлов);
	
	КонтекстЭДОКлиент.ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, УникальныйИдентификатор);
	МассивСвойствФайлов = ФайлыИсточников[ИсточникСсылка];
	
	Если НЕ ЗначениеЗаполнено(МассивСвойствФайлов)Тогда
		//нет присоединенных файлов по БСП механизму
		//попытаемся получить через переопределеяемый метод
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, УникальныйИдентификатор);
		МассивСвойствФайлов = ФайлыИсточников[ИсточникСсылка];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МассивСвойствФайлов)Тогда
		ПроверитьИИмпортироватьФайлы(МассивСвойствФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МаксКолвоФайлов()
	
	Возврат 1247;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксРазмерФайлов()
	
	Возврат 72;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксРазмерФайла()
	
	Возврат 60;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьИДобавитьВложения()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИДобавитьВложенияРасширениеПредложено", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, , Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИДобавитьВложенияРасширениеПредложено(Результат, ДополнительныеПараметры) Экспорт
	
	ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами = Результат;	
	
	Если ПоддерживаетсяИспользованиеРасширенияРаботыСФайлами Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Фильтр = "PNG, TIFF, JPEG, PDF (*.png;*.tif;*.jpg;*.pdf)|*.png;*.tif;*.jpg;*.pdf";
		Диалог.МножественныйВыбор = Истина;
		Диалог.ПредварительныйПросмотр = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеВыбораФайлов", ЭтотОбъект);
		Диалог.Показать(ОписаниеОповещения);
		
	Иначе
		АдресДанных = "";
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияБезРасширенияРаботыСФайлами", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресДанных, , Истина, УникальныйИдентификатор);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВыбораФайлов(МассивПолныхИменВыбранныхФайлов, ДополнительныеПараметры) Экспорт
	
	Если МассивПолныхИменВыбранныхФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеПолученияСвойствФайлов", ЭтотОбъект);
	ПолучитьСвойстваФайлов(ОписаниеОповещения, МассивПолныхИменВыбранныхФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеПолученияСвойствФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаДобавляемыхФайловНаСервере(Результат.СвойстваФайлов, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// составляем массив с объектами Файл
	МассивФайлов = Новый Массив;
	
	Для Каждого СвойстваФайла Из Результат.СвойстваФайлов Цикл
		
		Свойства = Новый Структура();
		Свойства.Вставить("Имя",         СвойстваФайла.Имя);
		Свойства.Вставить("ПолноеИмя",   СвойстваФайла.ПолноеИмя);
		Свойства.Вставить("Расширение",  СвойстваФайла.Расширение);
		Свойства.Вставить("Размер",      СвойстваФайла.Размер);
		Свойства.Вставить("АдресДанных", Неопределено);

		МассивФайлов.Добавить(Свойства);
		
	КонецЦикла;
	
	// проверяем на пересечение имен с уже имеющимися
	Если ВложенияСПодобнымиИменамиУжеИмеются(МассивФайлов) Тогда
		ТекстВопроса = НСтр("ru = 'Среди выбранных файлов присутствуют такие, имена которых пересекаются с уже имеющимися вложениями.
		|Продолжить действие с заменой имеющихся вложений на выбранные с аналогичными именами?'");
		ДополнительныеПараметры = Новый Структура;					
		ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеВопросаИменаПересекаются", ЭтотОбъект, ДополнительныеПараметры); 
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьВложенияСЗаменой(МассивФайлов);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВопросаИменаПересекаются(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВложенияСЗаменой(ДополнительныеПараметры.МассивФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияСЗаменой(МассивФайлов)
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ЭлФайл Из МассивФайлов Цикл 
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ЭлФайл.ПолноеИмя); 
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("МассивФайлов", МассивФайлов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияСЗаменойПослеПомещенияФайлов", ЭтотОбъект, ДополнительныеПараметры); 
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияСЗаменойПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	
	Для каждого ЭлФайл Из МассивФайлов Цикл
		Для каждого ОписаниеПереданногоФайла Из ПомещенныеФайлы Цикл
			Если ОписаниеПереданногоФайла.Имя = ЭлФайл.ПолноеИмя Тогда
				ЭлФайл.АдресДанных = ОписаниеПереданногоФайла.Хранение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	//загружаем в ИБ
	ДобавитьВТаблицуФайловПослеПроверок(МассивФайлов);
	
КонецПроцедуры

// Получает список свойств файла или каталога. 
//
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат - Структура:
//      * Выполнено      - Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. ОписаниеОшибки.
//      * СвойстваФайлов  - Массив структур. Структура - свойства файла.
//        ** Имя              - Строка - имя файла.
//        ** ИмяБезРасширения - Строка - имя файла (без расширения).
//        ** ПолноеИмя        - Строка - полное имя файла (включающее путь к файлу).
//        ** Путь             - Строка - путь к файлу.
//        ** Расширение       - Строка - расширение имени файла.
//        ** Размер           - Число  - размер файла (в байтах).
//        ** Существует       - Булево - определяет, существует ли файл.
//        ** ЭтоКаталог       - Булево - если Истина, то каталог, иначе - файл.
//
//  МассивПолныхИменФайлов - Массив - массив полных имен файлов.
//
&НаКлиенте
Процедура ПолучитьСвойстваФайлов(ОповещениеОЗавершении, МассивПолныхИменФайлов)
	
	МассивСвойствФайлов = Новый Массив;
	
	ПолучитьСвойстваФайлаПоследовательно(ОповещениеОЗавершении, МассивСвойствФайлов, МассивПолныхИменФайлов, 0);
	
КонецПроцедуры

//вспомогательная к ПолучитьСвойстваФайлов
&НаКлиенте
Процедура ПолучитьСвойстваФайлаПоследовательно(ОповещениеОЗавершении, МассивСвойствФайлов, МассивПолныхИменФайлов, ПорядковыйНомерФайла)
	
	Если ПорядковыйНомерФайла <= МассивПолныхИменФайлов.ВГраница() Тогда
		
		ТекущийФайлПолноеИмя = МассивПолныхИменФайлов[ПорядковыйНомерФайла];
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении",  ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("МассивСвойствФайлов",    МассивСвойствФайлов);
		ДополнительныеПараметры.Вставить("МассивПолныхИменФайлов", МассивПолныхИменФайлов);
		ДополнительныеПараметры.Вставить("ПорядковыйНомерФайла",   ПорядковыйНомерФайла);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьСвойстваФайловПослеПолученияСвойствОдногоФайла", ЭтотОбъект, ДополнительныеПараметры);
		ОперацииСФайламиЭДКОКлиент.ПолучитьСвойстваФайла(ОписаниеОповещения, ТекущийФайлПолноеИмя);
		Возврат;
		
	Иначе
		
		РезультатСтруктура = Новый Структура;
		РезультатСтруктура.Вставить("Выполнено", Истина);
		РезультатСтруктура.Вставить("СвойстваФайлов", МассивСвойствФайлов);
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатСтруктура);
		
	КонецЕсли;
	
КонецПроцедуры

//вспомогательная к ПолучитьСвойстваФайлов
&НаКлиенте
Процедура ПолучитьСвойстваФайловПослеПолученияСвойствОдногоФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		
		РезультатСтруктура = Новый Структура;
		РезультатСтруктура.Вставить("Выполнено", Ложь);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатСтруктура);

		Возврат;	
		
	КонецЕсли;
	
	ДополнительныеПараметры.МассивСвойствФайлов.Добавить(Результат.СвойстваФайла);
	ПолучитьСвойстваФайлаПоследовательно(ДополнительныеПараметры.ОповещениеОЗавершении, ДополнительныеПараметры.МассивСвойствФайлов, ДополнительныеПараметры.МассивПолныхИменФайлов, ДополнительныеПараметры.ПорядковыйНомерФайла + 1)
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияБезРасширенияРаботыСФайлами(ФайлыБылиВыбраны, АдресДанных, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если ФайлыБылиВыбраны Тогда
		
		// составляем массив с объектами Файл
		МассивФайлов = Новый Массив;

		Файл = КонтекстЭДОКлиент.СвойстваФайла(АдресДанных, ВыбранноеИмяФайла);
		
		СвойстваФайла = Новый Структура();
		СвойстваФайла.Вставить("Имя",         Файл.Имя);
		СвойстваФайла.Вставить("ПолноеИмя",   Файл.ПолноеИмя);
		СвойстваФайла.Вставить("Расширение",  Файл.Расширение);
		СвойстваФайла.Вставить("Размер",      Файл.Размер);
		СвойстваФайла.Вставить("АдресДанных", Файл.АдресДанных);

		МассивФайлов.Добавить(СвойстваФайла);
		
		//загружаем в ИБ
		ДобавитьВТаблицуФайловПослеПроверок(МассивФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИИмпортироватьФайлы(МассивСвойствФайлов)
	
	ТекстСообщения = "";
	Если НЕ ПроверкаДобавляемыхФайловНаСервере(МассивСвойствФайлов, ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьВТаблицуФайловПослеПроверок(МассивСвойствФайлов);
	
КонецПроцедуры

&НаСервере
Функция ПроверкаДобавляемыхФайловНаСервере(МассивСвойствФайлов, ТекстСообщения)
	
	ЕстьОшибки = Ложь;
	ПревышенРазмерОтдельныхФайлов 	= Ложь;
	ПревышенОбщийРазмерФайлов 		= Ложь;
	ПревышеноОбщееКолВоФайлов 		= Ложь;
	
	КолвоВыбранныхФайлов = МассивСвойствФайлов.Количество();
	
	ДопустимоеКоличествоФайлов 	= МаксКолвоФайлов() - КоличествоФайловВложений;
	ДопустимыйРазмерВБайтах 	= МаксРазмерФайлов()*1024*1024 - РазмерВБайтахВложений;
	
	//проверка на количество выбранных файлов
	Если КолВоВыбранныхФайлов > ДопустимоеКоличествоФайлов Тогда
		ТекстСообщения = "Общее количество файлов изображений превысило допустимое (" + МаксКолвоФайлов() + " файлов).
		|Рекомендуется использовать многостраничный формат (TIFF или PDF).
		|";	
		ЕстьОшибки = Истина;
		ПревышеноОбщееКолВоФайлов = Истина;
	КонецЕсли;
	
	//проверка на размеры выбранных файлов
	УменьшаемыйДопустимыйРазмер = ДопустимыйРазмерВБайтах;
	
	Для Каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		
		Если СвойстваФайла.Размер > МаксРазмерФайла()*1024*1024 Тогда
			ЕстьОшибки = Истина;
			ПревышенРазмерОтдельныхФайлов = Истина;
			ТекстСообщения = ТекстСообщения + "Размер файла " + СвойстваФайла.Имя + " превышает допустимый (" + МаксРазмерФайла() + " Мб).
			|";
		КонецЕсли;
		
		УменьшаемыйДопустимыйРазмер = УменьшаемыйДопустимыйРазмер - СвойстваФайла.Размер;
		
		Если УменьшаемыйДопустимыйРазмер < 0 Тогда
			ЕстьОшибки = Истина;
			ПревышенОбщийРазмерФайлов = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = "Добавление изображений отменено.
		|" + ТекстСообщения;
		Если ПревышенОбщийРазмерФайлов Тогда
			ТекстСообщения = ТекстСообщения + "Общий размер файлов изображений превысил допустимый (" + МаксРазмерФайлов() + " Мб).
			|Убедитесь в том, что добавляемые файлы соответствуют требованиям.";
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СокрЛП(ТекстСообщения);
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ДобавитьВТаблицуФайловПослеПроверок(МассивСвойствФайлов) 
	
	Для каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		
		НовыйФайлИмя 			= СвойстваФайла.Имя;
		НовыйФайлАдресДанных 	= СвойстваФайла.АдресДанных;
		НовыйФайлРазмер 		= СвойстваФайла.Размер;
		
		РедактируемаяСтрокаТаблицыФайлов = Неопределено;
		Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
			Если СтрокаТаблицыФайлов.ИмяФайла = НовыйФайлИмя Тогда
			
				РедактируемаяСтрокаТаблицыФайлов = СтрокаТаблицыФайлов;
			    Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		Если РедактируемаяСтрокаТаблицыФайлов = Неопределено Тогда
			РедактируемаяСтрокаТаблицыФайлов = ТаблицаФайлов.Добавить();
		КонецЕсли;
		
		РедактируемаяСтрокаТаблицыФайлов.ИмяФайла 				= НовыйФайлИмя;
		РедактируемаяСтрокаТаблицыФайлов.АдресДанныхФайлаФормы 	= НовыйФайлАдресДанных;
		РедактируемаяСтрокаТаблицыФайлов.Размер 				= НовыйФайлРазмер;
		
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(РедактируемаяСтрокаТаблицыФайлов);

	КонецЦикла;
	
	ПронумероватьСтрокиТаблицыФайлов();
	
	ОбновитьРазмерыДокумента();
	
	Модифицированность = Истина;
	
	//для режима просмотра нужно показать последнее добавленное изображение
	НомерВложенияПросмотр = КоличествоФайловВложений;
	ОбновитьАдресКартинкиПросмотра();
		
КонецПроцедуры

&НаСервере
Функция ВложенияСПодобнымиИменамиУжеИмеются(МассивСвойствФайлов)
	
	МассивИменФайлов = Новый Массив;
	Для Каждого СвойстваФайла Из МассивСвойствФайлов Цикл
		МассивИменФайлов.Добавить(СвойстваФайла.Имя);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		Если МассивИменФайлов.Найти(СтрокаТаблицыФайлов.ИмяФайла) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ТаблицаФайловПрочее

&НаКлиенте
Процедура ТаблицаФайловПриИзменении(Элемент)
	//Срабатывает при удалении, перемещении
	//При добавлении не срабатывает - стоит отказ и ручная обработка
	
	ПронумероватьСтрокиТаблицыФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПослеУдаления(Элемент)
	
	ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
	//перенумерация происходит в следующем обработчике - ТаблицаФайловПриИзменении
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(СтрокаТаблицы)
	
	ПредставлениеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1 (%2)'"), СтрокаТаблицы.ИмяФайла, ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТекстовоеПредставлениеРазмераФайла(СтрокаТаблицы.Размер));
	
	СтрокаТаблицы.СоставноеПоле = ПредставлениеФайла;
	
КонецПроцедуры
		
&НаСервере
Процедура ЗаполнитьТаблицуФайловПередОткрытием()
	
	ТаблицаФайлов.Очистить();
	МассивФайлов = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Объект.Ссылка, МассивФайлов);
	
	Для каждого ПрисоединенныйФайл Из МассивФайлов Цикл
	
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);	
		
		НоваяСтрока = ТаблицаФайлов.Добавить();
		НоваяСтрока.ПрисоединенныйФайлСсылка 	= ПрисоединенныйФайл;
		НоваяСтрока.НомерСтраницыФайлаБазы 		= ПрисоединенныйФайл.НомерСтраницы;
		НоваяСтрока.ИмяФайла 					= ДанныеФайла.ИмяФайла;
		НоваяСтрока.Размер	 					= ДанныеФайла.Размер;
		НоваяСтрока.АдресДанныхФайлаБазы 		= ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		
		// при первоначальном заполнении продублируем значения полей базы и формы
		НоваяСтрока.АдресДанныхФайлаФормы 		= НоваяСтрока.АдресДанныхФайлаБазы;
		НоваяСтрока.НомерСтраницыФайлаФормы		= НоваяСтрока.НомерСтраницыФайлаБазы;

		//заполним составное поле
		ЗаполнитьВычисляемыеПоляСтрокиТаблицыФайлов(НоваяСтрока);

	КонецЦикла;
	
	ТаблицаФайлов.Сортировать("НомерСтраницыФайлаФормы Возр");
	
	ОбновитьРазмерыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФайлыФормыВБазу()
	
	//файлы, удаленные из таблицы файлов, требуется удалить из базы
	МассивУдаляемыхФайлов = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Объект.Ссылка, МассивУдаляемыхФайлов);
	
	//запишем данные из таблицы файлов в присоединяемые файлы
	Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		
		ПрисоединенныйФайлСсылка = СтрокаТаблицыФайлов.ПрисоединенныйФайлСсылка;
		//Попытаемся найти присоединенный файл в массиве файлов - кандидатов на удаление
		ИндексНайденногоФайла = МассивУдаляемыхФайлов.Найти(ПрисоединенныйФайлСсылка);
		Если ИндексНайденногоФайла <> Неопределено Тогда
			МассивУдаляемыхФайлов.Удалить(ИндексНайденногоФайла);
		КонецЕсли;
		
		Если СтрокаТаблицыФайлов.АдресДанныхФайлаБазы <> СтрокаТаблицыФайлов.АдресДанныхФайлаФормы Тогда
			//файл требуется записать в базу
			Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
				//в базе уже есть ссылка на этот файл, но сам файл изменился, его требуется обновить в базе
				ИнформацияОФайле = Новый Структура;
				ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", СтрокаТаблицыФайлов.АдресДанныхФайлаФормы);
				ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
				ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайлСсылка, ИнформацияОФайле);		
			Иначе
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ВладелецФайлов", 		Объект.Ссылка);
				ДополнительныеПараметры.Вставить("ИмяБезРасширения", 	СтрокаТаблицыФайлов.ИмяФайла);
				ДополнительныеПараметры.Вставить("Автор", 				Неопределено);
				ДополнительныеПараметры.Вставить("РасширениеБезТочки", 	Неопределено);
				ДополнительныеПараметры.Вставить("ВремяИзмененияУниверсальное", Неопределено);
				
				//это новый файл, добавим его в базу
				ПрисоединенныйФайлСсылка = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(
					ДополнительныеПараметры,
					СтрокаТаблицыФайлов.АдресДанныхФайлаФормы);
					
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицыФайлов.НомерСтраницыФайлаФормы <> СтрокаТаблицыФайлов.НомерСтраницыФайлаБазы Тогда
			
			//требуется установать новый номер
			ИзменитьНомерСтраницыНаСервере(ПрисоединенныйФайлСсылка, СтрокаТаблицыФайлов.НомерСтраницыФайлаФормы)
			
		КонецЕсли;
		
	КонецЦикла;
	
	//удалим из базы присоединенные файлы, оставшиеся в массиве удаляемых файлов
	Если МассивУдаляемыхФайлов.Количество() > 0 Тогда
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КонтекстЭДОСервер.УдалитьПрисоединенныеФайлыСканированныеДокументыДляПередачиВЭлектронномВиде(МассивУдаляемыхФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНавигациюПросмотраВложений()
	
	НадписьНавигацияИз = Элементы.НадписьНавигацияИз;
	НадписьНавигацияИз.Заголовок = "из " + КоличествоФайловВложений;
	
	Буфер = НомерВложенияПросмотр;
	СписокНомеров = Элементы.НомерВложенияПросмотр.СписокВыбора;
	СписокНомеров.Очистить();
	Для Счетчик = 1 По КоличествоФайловВложений Цикл
		СписокНомеров.Добавить(Счетчик);	
	КонецЦикла;
	
	Если Буфер <= КоличествоФайловВложений Тогда
		НомерВложенияПросмотр = Буфер;
	Иначе
		НомерВложенияПросмотр = КоличествоФайловВложений;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРазмеровТаблицыФайлов();
	
	КолвоФайлов = 0;	
	Размер		= 0;
	Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		КолвоФайлов = КолвоФайлов 	+ 1;
		Размер 		= Размер 		+ СтрокаТаблицыФайлов.Размер;
	КонецЦикла;
	
	Возврат Новый Структура("КолвоФайлов, Размер", КолвоФайлов, Размер);
	
КонецФункции

&НаСервере
Процедура ОбновитьРазмерыДокумента()
	
	НадписьРазмерыСканДокумента = Элементы.НадписьРазмерыСканДокумента;
	
	СтруктураРазмеров = ПолучитьСтруктуруРазмеровТаблицыФайлов();
	
	КоличествоФайловВложений 	= СтруктураРазмеров.КолвоФайлов;
	РазмерВБайтахВложений 		= СтруктураРазмеров.Размер;
	
	ЗаполнитьНавигациюПросмотраВложений();
	
	//Заполним элементы группы размеров описи
	ДопустимоеКоличествоФайлов = МаксКолвоФайлов() - КоличествоФайловВложений;
	ДопустимыйРазмерВБайтах = МаксРазмерФайлов()*1024*1024 - РазмерВБайтахВложений;
	ДопустимоеКоличествоМегабайт = ОкруглитьРазмер(ДопустимыйРазмерВБайтах);
	
	СодержимоеТекста = "";
	
	Если (ДопустимоеКоличествоФайлов < 0) ИЛИ (ДопустимоеКоличествоМегабайт < 0) Тогда
		
		ЦветТекста = Новый Цвет(255, 0, 0); // красный
		
		Если ДопустимоеКоличествоФайлов < 0 Тогда
			
			СодержимоеТекста = "Допустимое количество файлов превышено на " +(-ДопустимоеКоличествоФайлов) + ".";
			
		ИначеЕсли ДопустимоеКоличествоМегабайт < 0 Тогда
			
			СодержимоеТекста = "Допустимый размер описи превышен на " +(-ДопустимоеКоличествоМегабайт) + " Мб.";
		
		КонецЕсли;
		
	Иначе
		
		ЦветТекста = Новый Цвет(134, 134, 134); //серый
		
		СодержимоеТекста = "Можно добавить еще " + ДопустимоеКоличествоМегабайт + " Мб.";
		
	КонецЕсли;
	
	НадписьРазмерыСканДокумента.ЦветТекста = ЦветТекста;
	НадписьРазмерыСканДокумента.Заголовок = СодержимоеТекста;
	
	ЕстьВложения = (КоличествоФайловВложений > 0);
	УправлениеЭУЕстьНетВложений(ЕстьВложения);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВниманиеНажатие(Элемент)
	ОткрытьФорму("Справочник.СканированныеДокументыДляПередачиВЭлектронномВиде.Форма.ФормаТребованияКФайлам", , ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ОкруглитьРазмер(РазмерВБайтах)
	
	РазмерВМегабайтах = Окр(РазмерВБайтах / 1024 / 1024, 2, РежимОкругления.Окр15как20);
	
	Если РазмерВМегабайтах = 0 Тогда
		РазмерВМегабайтах = 0.01;	
	КонецЕсли;
	
	Возврат РазмерВМегабайтах;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ВыбратьИДобавитьВложения();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНомерСтраницыНаСервере(ПрисоединенныйФайлСсылка, НомерСтраницы)
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.НомерСтраницы = НомерСтраницы;
	ПрисоединенныйФайлОбъект.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	ТекДанные = Элементы.ТаблицаФайлов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(ТекДанные.АдресДанныхФайлаФормы, ТекДанные.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекстВопроса = НСтр("ru = 'Удалить выделенные файлы изображений?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьФайлыЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// удалим выделенные файлы изображений
	Для каждого ИдентификаторСтроки Из Элементы.ТаблицаФайлов.ВыделенныеСтроки Цикл
		СтрокаТаблицыФайлов = ТаблицаФайлов.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТаблицаФайлов.Удалить(СтрокаТаблицыФайлов);
	КонецЦикла;
	
	ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
	ПронумероватьСтрокиТаблицыФайлов();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭУ()
	ВидДокумента = Объект.ВидДокумента;
	
	//панель Направление
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.Договор
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ОтчетНИОКР Тогда
		Объект.Направление = Перечисления.НаправленияДокументаПоТребованиюФНС.ПустаяСсылка();
		Элементы.Направление.Видимость = Ложь;
	Иначе
		Элементы.Направление.Видимость = Истина;
	КонецЕсли;

	//ПанельПредмет
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.Договор Тогда
		Элементы.ПредметДокумента.Видимость = Истина;
	Иначе
		Объект.ПредметДокумента = "";
		Элементы.ПредметДокумента.Видимость = Ложь;
	КонецЕсли;
	
	//элемент ДатаДокумента
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации Тогда
		Объект.ДатаДокумента = Дата(1,1,1);
		Элементы.ДатаДокумента.Видимость = Ложь;
		Элементы.ЗаголовокДатаДокумента.Видимость = Ложь;
	Иначе
		Элементы.ДатаДокумента.Видимость = Истина;
		Элементы.ЗаголовокДатаДокумента.Видимость = Истина;
	КонецЕсли;

	
	//ПанельСумма
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ОтчетНИОКР Тогда
		Объект.СуммаВсего = 0;
		Объект.СуммаНалога = 0;
		Элементы.ГруппаСумма.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСумма.Видимость = Истина;
	КонецЕсли;
	
	//ПанельПериод
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот Тогда
		Элементы.ГруппаПериод.Видимость = Истина;
	Иначе
		Объект.НачалоПериода = Дата(1,1,1);
		Объект.КонецПериода = Дата(1,1,1);
		Элементы.ГруппаПериод.Видимость = Ложь;
	КонецЕсли;
	
	//ПанельОснование
	Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура 
		ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ОтчетНИОКР Тогда
		
		Элементы.ГруппаОснование.Видимость = Истина;
		
		Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации Тогда
			Объект.ДатаОснования = Дата(1,1,1);
			Элементы.ЗаголовокДатаОснования.Видимость 	= Ложь;
			Элементы.ДатаОснования.Видимость 			= Ложь;
			
			Элементы.ПодсказкаОснованиеСДатой.Видимость 	= Ложь;
			Элементы.ПодсказкаОснованиеБезДаты.Видимость 	= Истина;
		Иначе
			Элементы.ЗаголовокДатаОснования.Видимость 	= Истина;
			Элементы.ДатаОснования.Видимость 			= Истина;
			
			Элементы.ПодсказкаОснованиеСДатой.Видимость 	= Истина;
			Элементы.ПодсказкаОснованиеБезДаты.Видимость 	= Ложь;
		КонецЕсли;

		Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12 Тогда
			
			Элементы.НомерОснования.АвтоОтметкаНезаполненного 	= Ложь;
			Элементы.ДатаОснования.АвтоОтметкаНезаполненного 	= Ложь;
			
			Элементы.НомерОснования.ОтметкаНезаполненного 		= Ложь;
			Элементы.ДатаОснования.ОтметкаНезаполненного 		= Ложь;
			
		Иначе
			
			Элементы.НомерОснования.АвтоОтметкаНезаполненного 	= Истина;
			Элементы.ДатаОснования.АвтоОтметкаНезаполненного 	= Истина;
			
		КонецЕсли;
		
		//подсказка основания
		Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДобавочныйЛистГрузовойТаможеннойДекларации Тогда
			
			ТекстПодсказки = "Грузовая таможенная декларация/транзитная декларация";
			
		ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДополнениеКДоговору 
			ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СпецификацияЦены Тогда

			ТекстПодсказки = "Договор";
			
		ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура Тогда
			
			ТекстПодсказки = "Договор, соглашение или иной первичный документ, подтверждающий согласие (факт уведомления) покупателя на изменение стоимости отгруженных товаров (выполненных работ, оказанных услуг)";
			
		ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ОтчетНИОКР Тогда
			
			ТекстПодсказки = "Договор, государственный/муниципальный контракт, иной документ";
			
		Иначе
			
			ТекстПодсказки = "Договор, заказ-наряд, счет на оплату, заявка покупателя или иной первичный документ, подтверждающий возникновение договорных отношений между участниками сделки";
			
		КонецЕсли;

		Элементы.ПодсказкаОснованиеСДатой.Подсказка 	= ТекстПодсказки;
		Элементы.ПодсказкаОснованиеБезДаты.Подсказка 	= ТекстПодсказки;
		
	Иначе
		Объект.НомерОснования = "";
		Объект.ДатаОснования = Дата(1,1,1);
		Элементы.ГруппаОснование.Видимость = Ложь;
		Элементы.ПодсказкаОснованиеСДатой.Видимость = Ложь;
		Элементы.ПодсказкаОснованиеБезДаты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУПросмотрСписокВложений()
	
	Элементы.ГруппаСписокВложений.Видимость 						= НЕ РежимПросмотра;	
	Элементы.ГруппаПросмотрВложений.Видимость 						= РежимПросмотра;	
	Элементы.ГруппаУправлениеТаблицаФайловРежимСписка.Видимость 	= НЕ РежимПросмотра;
	Элементы.ГруппаУправлениеТаблицаФайловРежимПросмотра.Видимость 	= РежимПросмотра;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУПодготовка()
	
	Если Параметры.РежимПодготовки Тогда
		//режим подготовки
		Элементы.КоманднаяПанельОсновная.Видимость 				= Ложь;
		Элементы.КоманднаяПанельРежимПодготовки.Видимость 		= Истина;
		Элементы.ЗаписатьИПерейтиКСледующему.КнопкаПоУмолчанию	= Истина;
		
		Если Параметры.НомерДокументаПодготовки = Параметры.КоличествоДокументовПодготовки Тогда
			//это последний документ из списка на подготовку
			ЭтоПоследнийДокументПодготовки = Истина;
			Элементы.Пропустить.Видимость = Ложь;
			Элементы.ЗаписатьИПерейтиКСледующему.Заголовок = "Записать и завершить";
			
			ТекстЗаголовка = "Добавьте изображения, проверьте реквизиты и завершите подготовку"; 
		Иначе
			ТекстЗаголовка = "Добавьте изображения, проверьте реквизиты и перейдите к подготовке следующего документа"; 
		КонецЕсли;
		
		Элементы.ЗаголовокИнформация.Заголовок = ТекстЗаголовка;
		
	Иначе
		//обычный режим
	    Элементы.КоманднаяПанельОсновная.Видимость 				= Истина;
		Элементы.КоманднаяПанельРежимПодготовки.Видимость 		= Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию		= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУЕстьНетВложений(ЕстьВложения)
	
	Элементы.ГруппаПросмотрВложенийНавигация.Видимость 	= ЕстьВложения;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУДокументИсточник()
	
	МассивДоступныхВидовДокументовИсточников = ЭлектронныйДокументооборотСКонтролирующимиОрганами.МассивДоступныхВидовДокументовИсточников();
	Если МассивДоступныхВидовДокументовИсточников.Количество() = 0 Тогда
		//В прикладном решении нет ни одного документа-источника
		Элементы.Источник.Видимость = Ложь;
	Иначе
		//В прикладном решении есть хотя бы один документ-источник
		//источник видим, но иногда недоступен
		ВидДокументаФНС = Объект.ВидДокумента;
		Если НЕ ЗначениеЗаполнено(ВидДокументаФНС) Тогда
			//вид документа не определен
			Элементы.Источник.Доступность = Истина;
		Иначе
			//вид документа определен
			Если МассивДоступныхВидовДокументовИсточников.Найти(Объект.ВидДокумента) = Неопределено Тогда
				//В прикладном решении нет ни одного документа-источника по данному виду документа
				Объект.Источник = Неопределено;
				Элементы.Источник.Доступность = Ложь;
				Элементы.Источник.ПодсказкаВвода = "Отсутствует для данного вида документа";
			Иначе
				Элементы.Источник.Доступность = Истина;
				Элементы.Источник.ПодсказкаВвода = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ЗаписатьИПерейтиКСледующему(Команда)
	
	Если Записать() Тогда
		ПрограммноеЗакрытие = Истина;
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Пропустить(Команда)
	
	ТекстВопроса = НСтр("ru = 'Пропустить подготовку текущего документа и перейти к следующему?
	|Изменения в текущем документе не сохранятся.'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПропуститьЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПрограммноеЗакрытие = Истина;
	Закрыть(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ПараметрыФормы.Вставить("ОтборВидДокументаФНС", Объект.ВидДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Направление) Тогда
		ПараметрыФормы.Вставить("ОтборНаправление", Объект.Направление);
	КонецЕсли;
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсточникНачалоВыбораПродолжение", ЭтотОбъект);
	
	//Открываем форму выбора документов, результат закрытия передаем в ИсточникНачалоВыбораПродолжение
	ОткрытьФорму("РегистрСведений.ДокументыПоТребованиюФНС.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникНачалоВыбораПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИсточника = Результат;
	
	//заполнение элементы на основе параметров источника (реквизиты и импорт файлов)
	Объект.Источник 			= ПараметрыИсточника.Источник;
	Объект.ВидДокумента 		= ПараметрыИсточника.ВидДокументаФНС;
	Объект.НомерСтрокиИсточника = ПараметрыИсточника.НомерСтрокиИсточника;
	
	ЗаполнитьПоИсточникуНаСервере();
	ИмпортироватьФайлыИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВРежимеПросмотра(Команда)
	
	ВыбратьИДобавитьВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ВидДокументаПриИзмененииНаСервере();
	
	Если ЗначениеВидДокументаПередНачаломВыбораИзСписка <> Объект.ВидДокумента Тогда
		Объект.Источник = Неопределено;
		Объект.НомерСтрокиИсточника = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидДокументаПриИзмененииНаСервере()
	
	СформироватьЗаголовокФормы(ЭтотОбъект);
	
	ЗаполнитьВычисляемыеПоляВсехСтрокТаблицыУчастников();

	ЗаполнитьСписокВыбораРолей();
	
	УправлениеЭУ();
	УправлениеЭУДокументИсточник();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДокументаПриИзменении(Элемент)
	
	СформироватьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДокументаПриИзменении(Элемент)
	
	СформироватьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры     

&НаКлиенте
Процедура РежимПросмотраПриИзменении(Элемент)
	
	Если РежимПросмотра Тогда
		Если Элементы.ТаблицаФайлов.ТекущиеДанные <> Неопределено Тогда
			НомерВложенияПросмотр = Элементы.ТаблицаФайлов.ТекущиеДанные.НомерСтраницыФайлаФормы;
		Иначе
			НомерВложенияПросмотр = КоличествоФайловВложений;	
		КонецЕсли;
	КонецЕсли;
		
	ОтработатьИзменениеРежимаПросмотраНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ОтработатьИзменениеРежимаПросмотраНаСервере()
	
	УправлениеЭУПросмотрСписокВложений();
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиПросмотрНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьИДобавитьВложения();

КонецПроцедуры

&НаКлиенте
Процедура ПросмотрВРеальномРазмереПриИзменении(Элемент)
	
	УстановитьРазмерКартинкиПоЗначениюПереключателя();	
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВложенияПросмотрПриИзменении(Элемент)
	
	ОбновитьАдресКартинкиПросмотра();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерВложенияПросмотрНаНачальный(Команда)
	
	Если КоличествоФайловВложений > 0 Тогда
		НомерВложенияПросмотр = 1;
	Иначе
		НомерВложенияПросмотр = 0;
	КонецЕсли;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерВложенияПросмотрНаКонечный(Команда)
	
	НомерВложенияПросмотр = КоличествоФайловВложений;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВРежимеПросмотра(Команда)
	
	Если НомерВложенияПросмотр > 0 Тогда
		ТаблицаФайлов.Удалить(НомерВложенияПросмотр - 1);
		Модифицированность = Истина;
		ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере();
		ПронумероватьСтрокиТаблицыФайлов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокФормы(ФормаОбъект)
	
	ТекстЗаголовка = "";
	
	Если ФормаОбъект.РежимПодготовки Тогда
		//заголовок в режиме подготовки
		ТекстЗаголовка = "Документ " + Формат(ФормаОбъект.НомерДокументаПодготовки, "ЧГ=0") + " из " + Формат(ФормаОбъект.КоличествоДокументовПодготовки, "ЧГ=0") + ". ";
	КонецЕсли;
	
	Объект = ФормаОбъект.Объект;
	
	ТекстЗаголовка = ТекстЗаголовка 
	+ ?(ЗначениеЗаполнено(Объект.ВидДокумента), Строка(Объект.ВидДокумента), "Подготовка документа к отправке") 
	+ ?(ЗначениеЗаполнено(Объект.НомерДокумента), " " + Объект.НомерДокумента, "") 
	+ ?(ЗначениеЗаполнено(Объект.ДатаДокумента), " от " + Формат(Объект.ДатаДокумента, "ДФ='dd.MM.yyyy ""г.""'"), "");
	
	ФормаОбъект.Заголовок = ТекстЗаголовка;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьПоИсточникуНаСервере()
	
	//заполнение происходит по параметрам:
	//Источник
	//НомерСтрокиИсточника
	//ВидДокумента
	//Значения берутся из предварительно заполненных реквизитов объекта
	
	//очистим текущие реквизиты
	Объект.Организация 		= Неопределено;
	Объект.НомерДокумента 	= Неопределено;
	Объект.ДатаДокумента 	= Неопределено;
	Объект.СуммаВсего 		= Неопределено;
	Объект.СуммаНалога 		= Неопределено;
	Объект.НомерОснования 	= Неопределено;
	Объект.ДатаОснования 	= Неопределено;
	Объект.НачалоПериода 	= Неопределено;
	Объект.КонецПериода 	= Неопределено;
	Объект.Направление 		= Неопределено;
	
	
	Объект.РеквизитыУчастников.Очистить();
	
	//получим из переопределяемого метода свойства для заполнения
	МассивСтруктур = Новый Массив;
	СвойстваИсточников = Новый Соответствие;
	СвойстваИсточников.Вставить(Объект.Источник, МассивСтруктур);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьСвойстваИсточниковДляЗаполненияСканированныхДокументовПоТребованиюФНС(СвойстваИсточников);
	Если ЗначениеЗаполнено(СвойстваИсточников) Тогда
		
		МассивСтруктур = СвойстваИсточников[Объект.Источник];
		Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
			
			СтруктураРеквизитов = ЭлектронныйДокументооборотСКонтролирующимиОрганами.НайтиСтруктуруСвойствИсточникаПоКлючевымПолям(МассивСтруктур, Объект.ВидДокумента, Объект.НомерСтрокиИсточника);
			Если ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
				// заполняем реквизиты объекта
				
				СтруктураРеквизитов.Свойство("Организация", 			Объект.Организация);
				СтруктураРеквизитов.Свойство("Направление", 			Объект.Направление);
				СтруктураРеквизитов.Свойство("Дата", 			Объект.ДатаДокумента);
				СтруктураРеквизитов.Свойство("Номер", 			Объект.НомерДокумента);
				СтруктураРеквизитов.Свойство("СуммаВсего", 		Объект.СуммаВсего);
				СтруктураРеквизитов.Свойство("СуммаНалога", 	Объект.СуммаНалога);
				
				СтруктураРеквизитов.Свойство("НомерОснования", 	Объект.НомерОснования);
				СтруктураРеквизитов.Свойство("ДатаОснования", 	Объект.ДатаОснования);
				СтруктураРеквизитов.Свойство("Предмет", 		Объект.ПредметДокумента);
				СтруктураРеквизитов.Свойство("НачалоПериода", 	Объект.НачалоПериода);
				СтруктураРеквизитов.Свойство("КонецПериода", 	Объект.КонецПериода);
				
				Участники = Неопределено;
				СтруктураРеквизитов.Свойство("Участники", Участники);
				Если ТипЗнч(Участники) = Тип("Массив") Тогда
					Для каждого СвойстваУчастника Из Участники Цикл
						НоваяСтрока = Объект.РеквизитыУчастников.Добавить();
						СвойстваУчастника.Свойство("Роль", 					НоваяСтрока.Роль);
						СвойстваУчастника.Свойство("ЯвляетсяЮрЛицом", 		НоваяСтрока.ЯвляетсяЮрЛицом);
						СвойстваУчастника.Свойство("ЮрЛицоНаименование", 	НоваяСтрока.ЮрЛицоНаименование);
						СвойстваУчастника.Свойство("ЮрЛицоИНН", 			НоваяСтрока.ЮрЛицоИНН);
						СвойстваУчастника.Свойство("ЮрЛицоКПП", 			НоваяСтрока.ЮрЛицоКПП);
						СвойстваУчастника.Свойство("ФизЛицоФамилия", 		НоваяСтрока.ФизЛицоФамилия);
						СвойстваУчастника.Свойство("ФизЛицоИмя", 			НоваяСтрока.ФизЛицоИмя);
						СвойстваУчастника.Свойство("ФизЛицоОтчество", 		НоваяСтрока.ФизЛицоОтчество);
						СвойстваУчастника.Свойство("ФизЛицоИНН", 			НоваяСтрока.ФизЛицоИНН);
						СвойстваУчастника.Свойство("Контрагент", 			НоваяСтрока.Контрагент);
					КонецЦикла;
				КонецЕсли;
				
				//если не поступили данные по участникам сделки, тогда заполним одну строку реквизитами организации (без указания роли).
				Если Объект.РеквизитыУчастников.Количество() = 0 Тогда
					Если ЗначениеЗаполнено(Объект.Организация) Тогда
						ДобавитьУчастникаОрганизацию(Объект.Организация);
					КонецЕсли;
				КонецЕсли;		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//обновим интерфейс
	СформироватьЗаголовокФормы(ЭтотОбъект);
	ОбновитьТаблицуУчастников();
	ЗаполнитьСписокВыбораРолей();
	УправлениеЭУ();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресКартинкиПросмотра()
	
	Если РежимПросмотра Тогда
		Если НомерВложенияПросмотр > 0 Тогда
			НовыйАдресДанных = ТаблицаФайлов[НомерВложенияПросмотр - 1].АдресДанныхФайлаФормы;
			Если АдресКартинкиПросмотр <> НовыйАдресДанных Тогда
				АдресКартинкиПросмотр = НовыйАдресДанных;
			КонецЕсли;
			Элементы.АдресКартинкиПросмотр.Гиперссылка = Ложь;
		Иначе
			АдресКартинкиПросмотр = "";
			Элементы.АдресКартинкиПросмотр.Гиперссылка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазмерКартинкиПоЗначениюПереключателя()

	Элементы.АдресКартинкиПросмотр.РазмерКартинки = 
		?(ПросмотрВРеальномРазмере, РазмерКартинки.РеальныйРазмер, РазмерКартинки.Пропорционально);	

КонецПроцедуры

&НаСервере
Процедура ПронумероватьСтрокиТаблицыФайлов()
	
	Для каждого СтрокаТаблицыФайлов Из ТаблицаФайлов Цикл
		СтрокаТаблицыФайлов.НомерСтраницыФайлаФормы = (ТаблицаФайлов.Индекс(СтрокаТаблицыФайлов) + 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеУдаленияСтрокиТаблицыФайловНаСервере()
	
	ОбновитьРазмерыДокумента();
	Если КоличествоФайловВложений = 0 Тогда
		НомерВложенияПросмотр = КоличествоФайловВложений;
	КонецЕсли;
	
	ОбновитьАдресКартинкиПросмотра();
	
КонецПроцедуры

#КонецОбласти





