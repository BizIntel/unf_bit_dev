
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		ТекстОшибки = НСтр("ru = 'Запрещено создавать новую организацию
								|при выключенной настройке параметра учета ""Учет по нескольким организациям"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветТекстаНекорректногоЗаполнения = ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента;
	
	РежимИсправленияОшибок = Параметры.ОшибкиЗаполнения;
	
	Если РежимИсправленияОшибок Тогда
		ПроверкаДанныхКлиентСервер.ВывестиСообщенияОбОшибкахЗаполнения("Объект", Параметры.ПереченьОшибок);
		ОтметитьОшибки(Параметры.ПереченьОшибок);
	КонецЕсли;
	
	// КлассификаторОПФ - реквизит формы
	КлассификаторОПФ.Загрузить(РегламентированныеДанныеПовтИсп.КлассификаторОрганизационноПравовыхФорм());
	Для Каждого СтрокаТаблицы Из КлассификаторОПФ Цикл
		Элементы.КодОКОПФ.СписокВыбора.Добавить(СтрокаТаблицы.Код, СтрокаТаблицы.Код + " - " + СтрокаТаблицы.ПолнаяФорма);
	КонецЦикла;
	
	ТаблицаКлассификатора = РегламентированныеДанныеПовтИсп.КлассификаторФормСобственности();
	Для Каждого СтрокаТаблицы Из ТаблицаКлассификатора Цикл
		Элементы.КодОКФС.СписокВыбора.Добавить(СтрокаТаблицы.Код, СтрокаТаблицы.Код + " - " + СтрокаТаблицы.Наименование);
	КонецЦикла;
	
	УстановитьПредставлениеПлатежныхРеквизитов(
		Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган,
		Объект.КодНалоговогоОрганаПолучателя,
		ПлатежныеРеквизитыФНСПредставление
	);
	
	УстановитьПредставлениеПлатежныхРеквизитов(
		Перечисления.ВидыГосударственныхОрганов.ОрганФСС,
		Объект.КодОрганаФСС + ?(Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, 3, 1),
		ПлатежныеРеквизитыФССПредставление
	);
	
	УстановитьПредставлениеПлатежныхРеквизитов(
		Перечисления.ВидыГосударственныхОрганов.ОрганПФР,
		Объект.КодОрганаПФР,
		ПлатежныеРеквизитыПФРПредставление
	);
	
	ОбновитьИнформациюОбОтветственныхЛицах();
	
	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");
	
	ВыполнитьВсеПроверки(ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ФормироватьНаименованиеАвтоматически = Истина;
		
		// УНФ.КонтактнаяИнформация
		КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
		// Конец УНФ.КонтактнаяИнформация
		
		УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
		
		Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
			ПрочитатьФизЛицо(Объект.ФизическоеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючСистемыНалогообложения.ОбъектНалогообложения) Тогда
		КлючСистемыНалогообложения.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы;
		КлючСистемыНалогообложения.СтавкаНалога = 6;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		Элементы.Фамилия.АвтоОтметкаНезаполненного	= Неопределено;
		Элементы.Имя.АвтоОтметкаНезаполненного		= Неопределено;
		Элементы.Отчество.АвтоОтметкаНезаполненного	= Неопределено;
	КонецЕсли;
	
	ЭтоВебКлиент = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	Элементы.КоманднаяПанельЛоготип.Видимость = ЭтоВебКлиент;
	Элементы.КоманднаяПанельФаксимиле.Видимость = ЭтоВебКлиент;
	
	// Если форма открыта из календаря подготовки отчетности, то необходимо показать сообщение, где включить
	// соотвтствующую задаче опцию
	Если НЕ Параметры.ЗадачаНалогов.Пустая() Тогда
		ОбработатьПараметрыЗадачиНалогов();
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
	// Конец МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ЮридическоеФизическоеЛицо.Видимость = Ложь;
		Элементы.ЮридическиеДанные.Видимость = Ложь;
		Элементы.КонтактнаяИнформация.Видимость = Ложь;
		Элементы.ОсновнойБанковскийСчет.Видимость = Ложь;
		Элементы.ОсновнаяКасса.Видимость = Ложь;
		Элементы.НастройкаЛоготипаДляПечати.Видимость = Ложь;
		Элементы.Подписи.Видимость = Ложь;
		Элементы.Налогообложение.Видимость = Ложь;
		Элементы.ФормаЗаполнитьРеквизитыПоДаннымЕГР.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
	КонецЕсли;
	// МобильноеПриложение
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.КомандыПечати);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПрисоединенныеФайлы"
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = ВыбранноеЗначение;
			ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлЛоготип, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресЛоготипа = ДвоичныеДанныеКартинки;
			КонецЕсли;
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Объект.ФайлФаксимильнаяПечать = ВыбранноеЗначение;
			ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресФаксимильнойПечати = ДвоичныеДанныеКартинки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Ссылка Тогда
		
		Объект.БанковскийСчетПоУмолчанию = Параметр.НовыйОсновнойСчет;
		ПрочитатьБанковскийСчетПоУмолчанию(Объект.БанковскийСчетПоУмолчанию);
		Если Не Модифицированность Тогда
			Записать();
		КонецЕсли;
		Оповестить("УстановкаОсновногоСчетаВыполнена");
		
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
		Модифицированность	= Истина;
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлЛоготип, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда
				АдресЛоготипа = ДвоичныеДанныеКартинки;
			КонецЕсли;
			РаботаСЛоготипом = Ложь;
			
		ИначеЕсли РаботаСФаксимиле Тогда
			
			Объект.ФайлФаксимильнаяПечать = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			Если ДвоичныеДанныеКартинки <> Неопределено Тогда 
				АдресФаксимильнойПечати = ДвоичныеДанныеКартинки;
			КонецЕсли;
			РаботаСФаксимиле = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" И Источник <> Объект.Ссылка И Параметр = Объект.ФизическоеЛицо Тогда
		
		ПрочитатьФизЛицо(Параметр);
		
	ИначеЕсли ИмяСобытия = "УстановленоДолжностноеЛицо" Тогда
		
		ОбработатьЗаписьОтветственногоНаСервере(Источник);
		
	// РегламентированнаяОтчетность
	ИначеЕсли ИмяСобытия = "ПривязатьУчетнуюЗаписьКОрганизации" И Объект.Ссылка = Параметр.Организация Тогда
	
		ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате");
		УчетнаяЗаписьОбмена = Параметр.УчетнаяЗапись;
		Параметр.Вставить("ОповещениеОтработано", Истина);
		
	ИначеЕсли ИмяСобытия = "ЗаписьВидаДеятельностиЕНВД" И Параметр.Свойство("Организация") И Объект.Ссылка = Параметр.Организация Тогда
		
		СформироватьНадписьНастройкиЕНВД();
	ИначеЕсли ИмяСобытия = "ЗаписьПатента" И Параметр.Свойство("Организация") И Объект.Ссылка = Параметр.Организация Тогда
		
		СформироватьНадписьНастройкиПатента();
	// Конец РегламентированнаяОтчетность
	
	ИначеЕсли ИмяСобытия = "ЗаписьСистемыНалогообложения" И Параметр.Свойство("Организация") И Объект.Ссылка = Параметр.Организация Тогда
	
		ПрочитатьНастройкиСистемыНалогообложения(Объект.Ссылка);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ФайлЛоготип) Тогда
		ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(ТекущийОбъект.ФайлЛоготип, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресЛоготипа = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ФайлФаксимильнаяПечать) Тогда
		ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(ТекущийОбъект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			АдресФаксимильнойПечати = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПрочитатьФизЛицо(ТекущийОбъект.ФизическоеЛицо);
	КонецЕсли;
	
	ПрочитатьНастройкиСтраховыхВзносов(ТекущийОбъект.Ссылка);
	ПрочитатьНастройкиСистемыНалогообложения(ТекущийОбъект.Ссылка);
	Если ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.ВидТарифа) Тогда
		УстановитьПодсказкуПоТарифу();
	КонецЕсли;
	
	СформироватьНадписьНастройкиЕНВД();
	СформироватьНадписьНастройкиПатента();
	
	ЗначениеВРеквизитФормы(РегламентированнаяОтчетностьУСН.ПолучитьРегистрациюВИФНС(ТекущийОбъект.Ссылка).ПолучитьОбъект(), "РегистрацияВНалоговомОргане");
	Объект.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
	
	ПрочитатьБанковскийСчетПоУмолчанию(ТекущийОбъект.БанковскийСчетПоУмолчанию);
	
	// Заполним список возможных кратких наименований и определим флаг автоматической смены краткого наименования
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	ФормироватьНаименованиеАвтоматически = ПустаяСтрока(Объект.Наименование)
		Или Элементы.Наименование.СписокВыбора.НайтиПоЗначению(Объект.Наименование) <> Неопределено;
		
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// Алгоритм формирования наименования зависит от юридического адреса. Необходимо вызывать после УНФ.КонтактнаяИнформация
	ФормироватьНаименованиеПлательщикаАвтоматически = ?(НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект) = ТекущийОбъект.НаименованиеПлательщикаПриПеречисленииНалогов, 0, 1);
	
	// Алгоритм формирования заголовка контактной информации зависит от юридического адреса. Необходимо вызывать после УНФ.КонтактнаяИнформация
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохраним предыдущие значения для последующего анализа
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПрежнийВидОрганизации", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "ЮридическоеФизическоеЛицо"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", ТекущийОбъект.ЭтоНовый());
	
	// Заполним основной банковский счет
	УстановитьБанковскийСчетПоУмолчанию(ТекущийОбъект);
	
	// Физическое лицо, будет создано в ПриЗаписи()
	Если ТекущийОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо И Не ЗначениеЗаполнено(ТекущийОбъект.ФизическоеЛицо) Тогда
		ТекущийОбъект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
	КонецЕсли;
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновлятьИнтерфейс = Ложь;
	Если Объект.ИспользуетсяОтчетность И Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность") Тогда
		ОбновлятьИнтерфейс = Истина;
	КонецЕсли;
	
	Если Объект.ИспользуетсяОтчетность И (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
		ИЛИ Объект.ИПИспользуетТрудНаемныхРаботников) Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата") Тогда
			ОбновлятьИнтерфейс = Истина;
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ВестиУчетНалогаНаДоходыИВзносов") Тогда
			ОбновлятьИнтерфейс = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользуетсяОтчетность И КлючСистемыНалогообложения.РозничнаяПродажаАлкоголя Тогда
		Если Не ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж") Тогда
			ОбновлятьИнтерфейс = Истина;
		КонецЕсли;
		
		Если Не Константы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Получить() Тогда
			ОбновлятьИнтерфейс = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьНастройкиСтраховыхВзносов(ТекущийОбъект.Ссылка);
	ЗаписатьНастройкиСистемыНалогообложения(ТекущийОбъект.Ссылка);
	ЗаписатьБанковскийСчетПоУмолчанию(ТекущийОбъект);
	ЗаписатьФизЛицо(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// РегламентированнаяОтчетность
	РезультатВыполнения = КалендарьОтчетности.ЗапуститьЗаполнениеВФоне(
		УникальныйИдентификатор,
		ТекущийОбъект.Ссылка,
		?(ТекущийОбъект.ДополнительныеСвойства.Свойство("ПрежнийВидОрганизации"), ТекущийОбъект.ДополнительныеСвойства.ПрежнийВидОрганизации <> ТекущийОбъект.ЮридическоеФизическоеЛицо, Ложь));
	
	ПараметрыЗаписи.Вставить("ОповеститьОбИзмененииЗадачОтчетности", РезультатВыполнения.ЗаданиеВыполнено);
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	// Конец РегламентированнаяОтчетность
	
	ПрочитатьФизЛицо(ТекущийОбъект.ФизическоеЛицо);
	
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Организации", Объект.Ссылка, Объект.Ссылка);
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Оповестить("Запись_ФизическиеЛица", Объект.ФизическоеЛицо, Объект.Ссылка);
	КонецЕсли;
	
	// РегламентированнаяОтчетность
	Если ПараметрыЗаписи.Свойство("ОповеститьОбИзмененииЗадачОтчетности") И ПараметрыЗаписи.ОповеститьОбИзмененииЗадачОтчетности Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности"));
	КонецЕсли;
	
	Если ОбновлятьИнтерфейс Тогда
		
		ОбновитьИнтерфейс();
	КонецЕсли;
	// Конец РегламентированнаяОтчетность
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Если Не ЗначениеЗаполнено(ФИОФизическихЛиц.Фамилия) 
			И Не ЗначениеЗаполнено(ФИОФизическихЛиц.Имя) 
			И Не ЗначениеЗаполнено(ФИОФизическихЛиц.Отчество) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнено ФИО'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	"Фамилия", "ФИОФизическихЛиц", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОсновнойСчет_Номер) И Не ЗначениеЗаполнено(ОсновнойСчет_Банк) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Банк'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОсновнойСчет_Банк", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойСчет_Банк) И ПустаяСтрока(ОсновнойСчет_Номер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Номер счета'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОсновнойСчет_Номер", , Отказ);
	КонецЕсли;
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Запись"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	
	Если СтрНайти(Объект.Префикс, "-") > 0 Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе организации использовать символ ""-"".'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ФормироватьНаименованиеАвтоматически И Элементы.Наименование.СписокВыбора.Количество() > 0 Тогда
		Объект.Наименование = Элементы.Наименование.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеФизическоеЛицоПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Объект.КодОКОПФ = "50102";
	КонецЕсли;
	
	ВыполнитьВсеПроверки(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	
	Если Не ЗаблокироватьФизическоеЛицоПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФизическоеЛицоФИОПриИзмененииЗавершение", ЭтотОбъект);
	Если Не ПустаяСтрока(ФИОФизическихЛиц.Фамилия) Тогда
		ПроверитьОднофамильцев(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПриИзменении(Элемент)
	
	ЗаблокироватьФизическоеЛицоПриРедактировании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолПриИзменении(Элемент)
	
	ЗаблокироватьФизическоеЛицоПриРедактировании();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	ЗаблокироватьФизическоеЛицоПриРедактировании();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаВыбора",, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");
	
КонецПроцедуры

&НаКлиенте
Процедура БанкСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаОбъекта",,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = "ЗагрузитьКлассификатор" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.КлассификаторБанковРФ.Форма.ЗагрузкаКлассификатора");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.КлассификаторБанковРФ") Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйБанк = РаботаСБанкамиВызовСервера.СсылкаНаБанкИзКлассификатора(ВыбранноеЗначение);
	Если ЗначениеЗаполнено(НайденныйБанк) Тогда
		ВыбранноеЗначение = НайденныйБанк;
	Иначе
		Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = РаботаСБанкамиВызовСервера.БанкАвтоПодборДанныеВыбора(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПоУмолчаниюПриИзменении(Элемент)
	
	УстановитьЗаголовокКассы(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтветственноеЛицоНажатие("Руководитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтветственноеЛицоНажатие("ГлавныйБухгалтер");
	
КонецПроцедуры

&НаКлиенте
Процедура КассирНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтветственноеЛицоНажатие("Кассир");
	
КонецПроцедуры

&НаКлиенте
Процедура КладовщикНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтветственноеЛицоНажатие("Кладовщик");
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьНаименованиеПлательщикаАвтоматическиПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмеютсяСотрудникиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПолучателяПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КодНалоговогоОрганаПолучателя) Тогда
		КодНалоговогоОрганаПолучателяПриИзмененииНаСервере();
		ВыполнитьЗаполнениеСведенийОНалоговойИнспекции();
	КонецЕсли;
	
	УстановитьЗаголовокНалоговойИнспекции(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	ПроверитьЗаполнениеЭлемента("ПлатежныеРеквизитыФНСПредставление");
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)
	
	Объект.КодОКВЭД = СтрЗаменить(Объект.КодОКВЭД, ",", ".");
	СформироватьПредставлениеПроверкиОКВЭД(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если СтрЗаканчиваетсяНа(ВыбранноеЗначение, "0000") Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru='Выберите код ОКОПФ, не являющийся группой кодов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КодОКОПФ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НабранныйТекст = СокрЛП(Текст);
	Если Не ПустаяСтрока(НабранныйТекст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ЖирныйШрифт = Новый Шрифт(,,Истина);
		
		Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Позиция = СтрНайти(ЭлементСписка.Представление, НабранныйТекст);
			Если Позиция > 0 Тогда
				КомпонентыФС = Новый Массив;
				КомпонентыФС.Добавить(Лев(ЭлементСписка.Представление, Позиция-1));
				КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Сред(ЭлементСписка.Представление, Позиция, СтрДлина(НабранныйТекст)), ЖирныйШрифт, WebЦвета.Зеленый));
				КомпонентыФС.Добавить(Сред(ЭлементСписка.Представление, Позиция + СтрДлина(НабранныйТекст)));
				ДанныеВыбора.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(КомпонентыФС));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКФСПриИзменении(Элемент)
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КодОКФСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НабранныйТекст = СокрЛП(Текст);
	Если Не ПустаяСтрока(НабранныйТекст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		ЖирныйШрифт = Новый Шрифт(,,Истина);
		
		Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Позиция = СтрНайти(ЭлементСписка.Представление, НабранныйТекст);
			Если Позиция > 0 Тогда
				КомпонентыФС = Новый Массив;
				КомпонентыФС.Добавить(Лев(ЭлементСписка.Представление, Позиция-1));
				КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Сред(ЭлементСписка.Представление, Позиция, СтрДлина(НабранныйТекст)), ЖирныйШрифт, WebЦвета.Зеленый));
				КомпонентыФС.Добавить(Сред(ЭлементСписка.Представление, Позиция + СтрДлина(НабранныйТекст)));
				ДанныеВыбора.Добавить(ЭлементСписка.Значение, Новый ФорматированнаяСтрока(КомпонентыФС));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФПриИзменении(Элемент)
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаПФРПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ВыполнитьЗаполнениеСведенийОбОтделенииПФР();
	КонецЕсли;
	УстановитьЗаголовокПенсионногоФонда(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФССПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КодОрганаФСС) Тогда
		ВыполнитьЗаполнениеСведенийОбОтделенииФСС();
	КонецЕсли;
	УстановитьЗаголовокФСС(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектНалогообложенияПриИзменении(Элемент)
	
	Если КлючСистемыНалогообложения.ОбъектНалогообложения = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНалогообложения.Доходы") Тогда
		КлючСистемыНалогообложения.СтавкаНалога = 6;
	Иначе
		КлючСистемыНалогообложения.СтавкаНалога = 15;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиОГРН(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПФР_ИППриИзменении(Элемент)
	
	КодОрганаПФР = ПолучитьКодОрганаПФР(Объект.РегистрационныйНомерПФР_ИП);
	Если НЕ ПустаяСтрока(КодОрганаПФР) Тогда
		Объект.КодОрганаПФР = КодОрганаПФР;
		ПроверитьЗаполнениеЭлемента("КодОрганаПФР");
	КонецЕсли;
	ВыполнитьЗаполнениеСведенийОбОтделенииПФР();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерПФРПриИзменении(Элемент)
	
	КодОрганаПФР = ПолучитьКодОрганаПФР(Объект.РегистрационныйНомерПФР);
	Если НЕ ПустаяСтрока(КодОрганаПФР) Тогда
		Объект.КодОрганаПФР = КодОрганаПФР;
	КонецЕсли;
	ВыполнитьЗаполнениеСведенийОбОтделенииПФР();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерФССПриИзменении(Элемент)
	
	РегистрационныйНомерФСС = ПолучитьКодОрганаФСС(Объект.РегистрационныйНомерФСС);
	Если НЕ ПустаяСтрока(РегистрационныйНомерФСС) Тогда
		Объект.КодОрганаФСС = РегистрационныйНомерФСС;
	КонецЕсли;
	ВыполнитьЗаполнениеСведенийОбОтделенииФСС();
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыПФРПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодОрганаПФР);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовПФР", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФНСПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодНалоговогоОрганаПолучателя);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", РегистрацияВНалоговомОргане.НаименованиеИФНС);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФССПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодОрганаФСС);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", Объект.НаименованиеТерриториальногоОрганаФСС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФСС", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикЕНВДПриИзменении(Элемент)
	Объект.ИспользуетсяОтчетность = КлючСистемыНалогообложения.ПлательщикУСН Или КлючСистемыНалогообложения.ПлательщикЕНВД Или КлючСистемыНалогообложения.ПрименяетсяПатент;
	
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
	УстановитьЗаголовокНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяетсяПатентПриИзменении(Элемент)
	
	Объект.ИспользуетсяОтчетность = КлючСистемыНалогообложения.ПлательщикУСН Или КлючСистемыНалогообложения.ПлательщикЕНВД Или КлючСистемыНалогообложения.ПрименяетсяПатент;
	
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
	УстановитьЗаголовокНалогообложения(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ПлательщикУСНПриИзменении(Элемент)
	
	Объект.ИспользуетсяОтчетность = КлючСистемыНалогообложения.ПлательщикУСН Или КлючСистемыНалогообложения.ПлательщикЕНВД Или КлючСистемыНалогообложения.ПрименяетсяПатент;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если КлючСистемыНалогообложения.ПлательщикУСН Тогда
		Ставка = ПолучитьНулевуюСтавкуНДС();
	Иначе
		Ставка = Получить18процентнуюСтавкуНДС();
	КонецЕсли;
	
	Если Ставка <> Неопределено Тогда
		Объект.СтавкаНДСПоУмолчанию = Ставка;
	КонецЕсли;
	Модифицированность = Истина;
	
	УстановитьЗаголовокНалогообложения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиСтраховогоНомераПФР(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифСтраховыхВзносовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.ВидТарифа) Тогда
		УстановитьПодсказкуПоТарифу();
		ОбновитьОтображениеДанных();
	Иначе
		Элементы.ДекорацияОписаниеТарифа.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифСтраховыхВзносовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.ВидТарифа) Тогда
		УстановитьПодсказкуПоТарифу();
		ОбновитьОтображениеДанных();
	Иначе
		Элементы.ДекорацияОписаниеТарифа.Заголовок = "";
	КонецЕсли;
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиИНН(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	
	Если ПустаяСтрока(Объект.КПП) Тогда
		РаботаСКонтрагентамиКлиентСерверПереопределяемый.ЗаполнитьКППпоИНН(Объект.ИНН, Объект.КПП);
	КонецЕсли;
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиКПП(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	
	УстановитьЗаголовокЮридическихДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОПриИзменении(Элемент)
	
	СформироватьПредставлениеПроверкиОКПО(ЭтотОбъект);
	СформироватьПредставлениеПроверкиДанных(ЭтотОбъект);
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПлательщикаПриПеречисленииНалоговПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКТМОПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТарифНаТравматизмПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	ПроверитьЗаполнениеЭлемента(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ОбработкаВыбораКодОрганаФСГСПолучателя", ЭтотОбъект));
	
	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		ДополнительныеПараметры.Вставить("ТекущийКодТОГС", Объект.КодОрганаФСГС);
	Иначе
		Отбор = Новый Структура("Тип,Вид");
		Отбор.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
		Отбор.Вид =ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
		ДанныеИсточника = ЭтотОбъект.КонтактнаяИнформация.НайтиСтроки(Отбор);
		Если ДанныеИсточника.Количество() > 0 Тогда
			ЗначенияПолей = ДанныеИсточника[0].ЗначенияПолей;
			КодРегиона = КодРегионаПоАдресу(ЗначенияПолей);
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				ДополнительныеПараметры.Вставить("КодРегиона", Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН="));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьКодОрганаТОГС(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКодОрганаФСГСПолучателя(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.КодОрганаФСГС = ВыбранноеЗначение.КодТОГС;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	Если Не ПустаяСтрока(ПолеПоискаИНН) Или Не ПустаяСтрока(Объект.ИНН) Тогда
	// Выполняем заполнение по ИНН без открытия вспомогательной формы
		
		ЗначениеПоиска = ?(ПустаяСтрока(ПолеПоискаИНН), Объект.ИНН, ПолеПоискаИНН);
		Если КлючевыеРеквизитыЗаполнены(ЭтотОбъект) Тогда
			ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерезаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект, Новый Структура("ИНН", ЗначениеПоиска));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН(ЗначениеПоиска);
		КонецЕсли;
		
	Иначе
	// Открываем форму заполнения реквизитов
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокаПоиска", ?(ПустаяСтрока(Объект.НаименованиеПолное), Объект.ИНН, Объект.НаименованиеПолное));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеРеквизитовОрганизацияВыбрана", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтраховыхВзносов(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отмена'"));
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияИсторииСтраховыхВзносов", ЭтотОбъект);
		
		ПоказатьВопрос(
			Оповещение, 
			НСтр("ru='Переход к истории страховых взносов возможен только после записи.
						|Записать?'"),
			СписокКнопок);
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЕНВД(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВидыДеятельностиЕНВД.ФормаСписка", Новый Структура("Отбор", Новый Структура("Владелец",Объект.Ссылка)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНалогообложения(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Записать'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Отмена'"));
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияИсторииНалогообложения", ЭтотОбъект);
		
		ПоказатьВопрос(
			Оповещение, 
			НСтр("ru='Переход к истории налогобложения возможен только после записи.
						|Записать?'"),
			СписокКнопок);
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("РегистрСведений.СистемыНалогообложенияОрганизаций.ФормаСписка", Новый Структура("Организация", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрПечатнойФормыСчетНаОплату(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Справочник.Организации",
		"ПредварительныйПросмотрПечатнойФормыСчетНаОплату",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка),
		ЭтотОбъект,
		Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЛоготипаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеЛоготипаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеЛоготипа(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлЛоготип);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)
	
	Объект.ФайлЛоготип = Неопределено;
	АдресЛоготипа = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимиле(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеФаксимилеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФаксимилеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеФаксимиле(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлФаксимильнаяПечать);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеФаксимиле(Команда)
	
	Объект.ФайлФаксимильнаяПечать = Неопределено;
	АдресФаксимильнойПечати = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксимилеИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговогоОрганаПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОрганаПолучателя) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код инспекции"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодНалоговогоОрганаПолучателя;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОНалоговойИнспекции();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПФРПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код органа ПФР"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодОрганаПФР;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОбОтделенииПФР();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыФССПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаФСС) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код органа ФСС"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодОрганаФСС;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОбОтделенииФСС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримененияЕНВД(Команда)
	ОткрытьФорму("РегистрСведений.ПримененияЕНВД.ФормаСписка", Новый Структура("Отбор", Новый Структура("Организация",Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПатент(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Патенты.ФормаСписка", Новый Структура("Отбор", Новый Структура("Владелец",Объект.Ссылка)),,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// Установим видимость элементов формы в зависимости от вида организации
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		
		Элементы.ГруппаФИО.Видимость							= Ложь;
		Элементы.КПП.Видимость									= Истина;
		Элементы.СвидетельствоСерияНомер.Видимость				= Ложь;
		Элементы.СвидетельствоДатаВыдачи.Видимость				= Ложь;
		Элементы.ГруппаДанныеПФР_ИП.Видимость					= Ложь;
		Элементы.ГруппаФСС.Видимость							= Истина;
		Элементы.ГруппаИмеютсяСотрудники.Видимость				= Ложь;
		Элементы.РегистрационныйНомерПФР.Видимость				= Истина;
		Элементы.СвидетельствоСерияНомер.Видимость				= Ложь;
		Элементы.СвидетельствоДатаВыдачи.Видимость				= Ложь;
		Элементы.ГруппаДокументУдостоверяющийЛичность.Видимость	= Ложь;
		Элементы.Гражданство.Видимость							= Ложь;
		Элементы.Пол.Видимость									= Ложь;
		Элементы.ДатаРождения.Видимость							= Ложь;
		Элементы.Подписи.Видимость								= Истина;
		
		Элементы.ИНН.ПодсказкаВвода			= НСтр("ru = '10 цифр'");
		Элементы.ИНН.ОграничениеТипа		= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10));
		Элементы.ОГРН.Заголовок				= НСтр("ru = 'ОГРН'");
		Элементы.ОГРН.Подсказка				= НСтр("ru = 'Основной государственный регистрационный номер юридического лица'");
		Элементы.ОГРН.ПодсказкаВвода		= НСтр("ru = '13 цифр'");
		Элементы.ОГРН.ОграничениеТипа		= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(13));
		Элементы.КодПоОКПО.ПодсказкаВвода	= НСтр("ru = '8 цифр'");
		Элементы.КодПоОКПО.ОграничениеТипа	= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(8));
		
		Элементы.Налоговая.Видимость				= Ложь;
		Элементы.ГруппаКодыРосстатаКоды.Видимость	= Ложь;
		Элементы.ГруппаПФР.Видимость				= Ложь;
		Элементы.ГруппаФСС.Видимость				= Ложь;
		Элементы.ПлательщикЕНВДГруппа.Видимость		= Ложь;
		Элементы.ИспользуетсяОтчетность.Видимость	= Ложь;
		Элементы.ПлательщикУСНГруппа.Видимость		= Ложь;
		Элементы.ПроизводственныйКалендарь.Видимость= Истина;
		Элементы.ГруппаПатент.Видимость 			= Ложь;
		Элементы.ПрименяетсяПатентГруппа.Видимость 	= Ложь;
		Элементы.ПлательщикТорговыйСборГруппа.Видимость = Ложь;
		Элементы.ГруппаТорговыйСборИстория.Видимость= Ложь;
		Элементы.ПродажиСлабогоАлкоголяГруппа.Видимость= Ложь;
		Объект.ИспользуетсяОтчетность = Ложь;
	Иначе
		
		Элементы.ГруппаФИО.Видимость							= Истина;
		Элементы.КПП.Видимость									= Ложь;
		Элементы.СвидетельствоСерияНомер.Видимость				= Истина;
		Элементы.СвидетельствоДатаВыдачи.Видимость				= Истина;
		Элементы.ГруппаДанныеПФР_ИП.Видимость					= Истина;
		Элементы.ГруппаФСС.Видимость							= Объект.ИПИспользуетТрудНаемныхРаботников;
		Элементы.РегистрационныйНомерПФР.Видимость				= Объект.ИПИспользуетТрудНаемныхРаботников;
		Элементы.ГруппаИмеютсяСотрудники.Видимость				= Истина;
		Элементы.СвидетельствоСерияНомер.Видимость				= Истина;
		Элементы.СвидетельствоДатаВыдачи.Видимость				= Истина;
		Элементы.ГруппаДокументУдостоверяющийЛичность.Видимость	= Истина;
		Элементы.Гражданство.Видимость							= Истина;
		Элементы.Пол.Видимость									= Истина;
		Элементы.ДатаРождения.Видимость							= Истина;
		Элементы.Подписи.Видимость								= Ложь;
		
		Элементы.ИНН.ПодсказкаВвода			= НСтр("ru = '12 цифр'");
		Элементы.ИНН.ОграничениеТипа		= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12));
		Элементы.ОГРН.Заголовок				= НСтр("ru = 'ОГРН ИП'");
		Элементы.ОГРН.Подсказка 			= НСтр("ru = 'Основной государственный регистрационный номер индивидуального предпринимателя, 
														|указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
		Элементы.ОГРН.ПодсказкаВвода		= НСтр("ru = '15 цифр'");
		Элементы.ОГРН.ОграничениеТипа		= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(15));
		Элементы.КодПоОКПО.ПодсказкаВвода	= НСтр("ru = '10 цифр'");
		Элементы.КодПоОКПО.ОграничениеТипа	= Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10));
		
		Элементы.Налоговая.Видимость				= Истина;
		Элементы.ГруппаКодыРосстатаКоды.Видимость	= Истина;
		Элементы.ГруппаПФР.Видимость				= Истина;
		Элементы.ГруппаФСС.Видимость				= Объект.ИПИспользуетТрудНаемныхРаботников;
		Элементы.ПлательщикУСНГруппа.Видимость		= Форма.КлючСистемыНалогообложения.ПлательщикУСН;
		Элементы.ПлательщикЕНВДГруппа.Видимость		= Форма.КлючСистемыНалогообложения.ПлательщикЕНВД;
		Элементы.ИспользуетсяОтчетность.Видимость	= Форма.КлючСистемыНалогообложения.ПлательщикЕНВД ИЛИ Форма.КлючСистемыНалогообложения.ПлательщикУСН ИЛИ Форма.КлючСистемыНалогообложения.ПрименяетсяПатент;
		Элементы.ПроизводственныйКалендарь.Видимость= Объект.ИПИспользуетТрудНаемныхРаботников;
		Элементы.ГруппаПатент.Видимость 			= Истина;
		Элементы.ПрименяетсяПатентГруппа.Видимость	= Форма.КлючСистемыНалогообложения.ПрименяетсяПатент;
		Элементы.ГруппаТорговыйСборИстория.Видимость = Истина;
		Элементы.ПлательщикТорговыйСборГруппа.Видимость= Форма.КлючСистемыНалогообложения.ПлательщикТорговыйСбор;
		Элементы.ПродажиСлабогоАлкоголяГруппа.Видимость= Истина;
		
	КонецЕсли;
	
	// Установим видимость элементов формы в зависимости от применяемых схем налогооблажения
	Элементы.ПримененияЕНВД.Видимость = Форма.КлючСистемыНалогообложения.ПлательщикЕНВД;
	Элементы.ГруппаВидУчетаСтраховыхВзносов.Видимость =  Форма.КлючСистемыНалогообложения.ПлательщикУСН И Форма.КлючСистемыНалогообложения.ПлательщикЕНВД;
	
	// Управление формированием наименования плательщика в бюджет
	Элементы.НаименованиеПлательщикаПриПеречисленииНалогов.Доступность = Форма.ФормироватьНаименованиеПлательщикаАвтоматически = 1;
	
	// Заполнение по ЕГР
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость			= Не ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ФормаЗаполнитьРеквизитыПоДаннымЕГР.Видимость	= ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодобратьСловоПодЧисло(Число, СловоДляОдин, СловоДляДва, СловоДляПять)
	
	Если Число > 4 И Число < 21 Тогда
		
		Возврат СловоДляПять;
		
	ИначеЕсли (Число % 10) = 1 Тогда
		
		Возврат СловоДляОдин;
		
	ИначеЕсли (Число % 10) <= 5 Тогда
		
		Возврат СловоДляДва;
		
	Иначе
		
		Возврат СловоДляПять;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтметитьОшибки(ПереченьОшибок)
	
	ЦветПодсветки = ЦветТекстаНекорректногоЗаполнения;
	
	ОшибкаГруппаЮридическиеДанные      = Ложь;
	ОшибкаГруппаПенсионныйФонд         = Ложь;
	ОшибкаГруппаНастройкаЛоготипа      = Ложь;
	ОшибкаГруппаОсновнаяКасса          = Ложь;
	ОшибкаГруппаНалоговая              = Ложь;
	ОшибкаГруппаКодыРосстата           = Ложь;
	ОшибкаГруппаФСС                    = Ложь;
	ОшибкаГруппаАдресаТелефоны         = Ложь;
	ОшибкаГруппаОсновнойБанковскийСчет = Ложь;
	
	Если ПереченьОшибок.Получить("ФИОФизическихЛиц.Фамилия")<> Неопределено Тогда
		Элементы.Фамилия.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "Фамилия";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("ФИОФизическихЛиц.Имя")<> Неопределено Тогда
		Элементы.Имя.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =  "Имя";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("ФИОФизическихЛиц.Отчество")<> Неопределено Тогда
		Элементы.Отчество.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "Отчество";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.НаименованиеПолное")<> Неопределено Тогда
		Элементы.НаименованиеПолное.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "НаименованиеПолное";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("ФизическоеЛицо.Пол")<> Неопределено Тогда
		Элементы.Пол.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "Пол";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("ФизическоеЛицо.ДатаРождения")<> Неопределено Тогда
		Элементы.ДатаРождения.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ДатаРождения";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.ИНН")<> Неопределено Тогда
		Элементы.ИНН.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ИНН";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.ОГРН")<> Неопределено Тогда
		Элементы.ОГРН.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ОГРН";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.РегистрационныйНомерПФР_ИП")<> Неопределено Тогда
		Элементы.РегистрационныйНомерПФР_ИП.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаПенсионныйФонд = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "РегистрационныйНомерПФР_ИП";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаПФР";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.Наименование")<> Неопределено Тогда
		Элементы.Наименование.ЦветТекстаЗаголовка = ЦветПодсветки;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "Наименование";
		СтрокаОписанияОшибки.ИмяГруппы = "";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КПП")<> Неопределено Тогда
		Элементы.КПП.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КПП";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодПоОКПО")<> Неопределено Тогда
		Элементы.КодПоОКПО.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодПоОКПО";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.НаименованиеПлательщикаПриПеречисленииНалогов")<> Неопределено Тогда
		Элементы.НаименованиеПлательщикаПриПеречисленииНалогов.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаНастройкаЛоготипа = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "НаименованиеПлательщикаПриПеречисленииНалогов";
		СтрокаОписанияОшибки.ИмяГруппы = "НастройкаЛоготипаДляПечати";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КассаПоУмолчанию")<> Неопределено Тогда
		Элементы.КассаПоУмолчанию.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаОсновнаяКасса = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КассаПоУмолчанию";
		СтрокаОписанияОшибки.ИмяГруппы = "ОсновнаяКасса";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодПоОКАТО")<> Неопределено Тогда
		Элементы.КодОКАТО.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОКАТО";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодПоОКТМО")<> Неопределено Тогда
		Элементы.КодПоОКТМО.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаЮридическиеДанные = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодПоОКТМО";
		СтрокаОписанияОшибки.ИмяГруппы = "ЮридическиеДанные";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодНалоговогоОрганаПолучателя")<> Неопределено Тогда
		Элементы.КодНалоговогоОрганаПолучателя.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаНалоговая = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодНалоговогоОрганаПолучателя";
		СтрокаОписанияОшибки.ИмяГруппы = "Налоговая";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("ПлатежныеРеквизитыФНСПредставление")<> Неопределено Тогда
		Элементы.ПлатежныеРеквизитыФНСПредставление.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаНалоговая = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ПлатежныеРеквизитыФНСПредставление";
		СтрокаОписанияОшибки.ИмяГруппы = "Налоговая";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодОКОПФ")<> Неопределено Тогда
		Элементы.КодОКОПФ.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаКодыРосстата = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОКОПФ";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаКодыРосстатаКоды";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодОКФС")<> Неопределено Тогда
		Элементы.КодОКФС.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаКодыРосстата = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОКФС";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаКодыРосстатаКоды";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодОКВЭД")<> Неопределено Тогда
		Элементы.КодОКВЭД.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаКодыРосстата = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОКВЭД";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаКодыРосстатаКоды";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.СтраховойНомерПФР")<> Неопределено Тогда
		Элементы.СтраховойНомерПФР.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаПенсионныйФонд = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "СтраховойНомерПФР";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаПФР";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.РегистрационныйНомерПФР")<> Неопределено Тогда
		Элементы.РегистрационныйНомерПФР.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаПенсионныйФонд = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "РегистрационныйНомерПФР";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаПФР";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодОрганаПФР")<> Неопределено Тогда
		Элементы.КодОрганаПФР.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаПенсионныйФонд = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОрганаПФР";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаПФР";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.ДатаРегистрации")<> Неопределено Тогда
		Элементы.ДатаРегистрации.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаНалоговая = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ДатаРегистрации";
		СтрокаОписанияОшибки.ИмяГруппы = "Налоговая";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("КлючТарифаСтраховыхВзносов.ВидТарифа")<> Неопределено Тогда
		Элементы.ВидТарифа.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаФСС = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидТарифа";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаФСС";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.ТарифНаТравматизм")<> Неопределено Тогда
		Элементы.ТарифНаТравматизм.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаФСС = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ТарифНаТравматизм";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаФСС";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.КодОрганаФСС")<> Неопределено Тогда
		Элементы.КодОрганаФСС.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаФСС = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "КодОрганаФСС";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаФСС";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.РегистрационныйНомерФСС")<> Неопределено Тогда
		Элементы.РегистрационныйНомерФСС.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаФСС = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "РегистрационныйНомерФСС";
		СтрокаОписанияОшибки.ИмяГруппы = "ГруппаФСС";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("ПредставлениеКИ_0")<> Неопределено Тогда
		НайденныеСтроки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Попытка
				Элементы.ВидКИ_0.ЦветТекста = ЦветПодсветки;
			Исключение
			КонецПопытки;
		КонецЕсли;
		ОшибкаГруппаАдресаТелефоны = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидКИ_0";
		СтрокаОписанияОшибки.ИмяГруппы = "КонтактнаяИнформация";
		
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("ПредставлениеКИ_2")<> Неопределено Тогда
		НайденныеСтроки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Попытка
				Элементы.ВидКИ_2.ЦветТекста = ЦветПодсветки;
			Исключение
			КонецПопытки;
		КонецЕсли;
		ОшибкаГруппаАдресаТелефоны = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидКИ_2";
		СтрокаОписанияОшибки.ИмяГруппы = "КонтактнаяИнформация";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("ПредставлениеКИ_1")<> Неопределено Тогда
		НайденныеСтроки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Попытка
				Элементы.ВидКИ_1.ЦветТекста = ЦветПодсветки;
			Исключение
			КонецПопытки;
		КонецЕсли;
		ОшибкаГруппаАдресаТелефоны = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидКИ_1";
		СтрокаОписанияОшибки.ИмяГруппы = "КонтактнаяИнформация";
	КонецЕсли;
	
	Если ПереченьОшибок.Получить("Объект.БанковскийСчетПоУмолчанию")<> Неопределено Тогда
		Элементы.НомерСчета.ЦветТекстаЗаголовка = ЦветПодсветки;
		ОшибкаГруппаОсновнойБанковскийСчет = Истина;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "НомерСчета";
		СтрокаОписанияОшибки.ИмяГруппы = "ОсновнойБанковскийСчет";
	КонецЕсли;
	
	Если ОшибкаГруппаЮридическиеДанные Тогда
		Элементы.ЮридическиеДанные.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
	Если ОшибкаГруппаНастройкаЛоготипа Тогда
		Элементы.НастройкаЛоготипаДляПечати.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
	Если ОшибкаГруппаПенсионныйФонд Тогда
		Элементы.ГруппаПФР.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
	Если ОшибкаГруппаОсновнаяКасса Тогда
		Элементы.ОсновнаяКасса.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
	Если ОшибкаГруппаНалоговая Тогда
		Элементы.Налоговая.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
	Если ОшибкаГруппаКодыРосстата Тогда
		Элементы.ГруппаКодыРосстатаКоды.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
	Если ОшибкаГруппаФСС Тогда
		Элементы.ГруппаФСС.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
	Если ОшибкаГруппаАдресаТелефоны Тогда
		Элементы.КонтактнаяИнформация.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
	Если ОшибкаГруппаОсновнойБанковскийСчет Тогда
		Элементы.ОсновнойБанковскийСчет.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЭлемента(ИмяЭлемента)
	Если РежимИсправленияОшибок Тогда
		ПроверитьЗаполнениеЭлементаНаСервере(ИмяЭлемента);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеЭлементаНаСервере(ИмяЭлемента)
	
	СтрокиОшибкиЗаполнения = ОшибкиЗаполнения.НайтиСтроки(Новый Структура("ИмяПоля",ИмяЭлемента));
	Если СтрокиОшибкиЗаполнения.Количество() > 0 Тогда
		Строка = СтрокиОшибкиЗаполнения[0];
		ПроверкаВыполненаУспешно = Ложь;
		Если ИмяЭлемента = "Фамилия"
			ИЛИ ИмяЭлемента = "Имя"
			ИЛИ ИмяЭлемента = "Отчество" Тогда
			Если Не ПустаяСтрока(ФИОФизическихЛиц[ИмяЭлемента]) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "НаименованиеПолное"
			ИЛИ ИмяЭлемента = "НаименованиеПлательщикаПриПеречисленииНалогов"
			ИЛИ ИмяЭлемента = "КодПоОКАТО"
			ИЛИ ИмяЭлемента = "КодПоОКТМО"
			ИЛИ ИмяЭлемента = "КодНалоговогоОрганаПолучателя"
			ИЛИ ИмяЭлемента = "КодОКОПФ"
			ИЛИ ИмяЭлемента = "КодОКФС"
			ИЛИ ИмяЭлемента = "КодОрганаПФР"
			ИЛИ ИмяЭлемента = "Наименование" Тогда
			Если Не ПустаяСтрока(Объект[ИмяЭлемента]) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "Пол" ИЛИ ИмяЭлемента = "ДатаРождения" Тогда
			Если ЗначениеЗаполнено(ФизическоеЛицо[ИмяЭлемента]) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ИНН" Тогда
			Если НЕ ПустаяСтрока(Объект.ИНН) И РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(СокрЛП(Объект.ИНН), Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ОГРН" Тогда
			Если Не ПустаяСтрока(Объект.ОГРН) И РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(СокрЛП(Объект.ОГРН), Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "РегистрационныйНомерПФР_ИП" Тогда
			Если СтрДлина(СокрЛП(Объект.РегистрационныйНомерПФР_ИП))= 14  Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "КПП" Тогда
			Если НЕ ПустаяСтрока(Объект.КПП) И  РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(СокрЛП(Объект.КПП), "") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "КодПоОКПО" Тогда
			Если НЕ ПустаяСтрока(Объект.КодПоОКПО) И РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(СокрЛП(Объект.КодПоОКПО), Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "КассаПоУмолчанию"
			ИЛИ ИмяЭлемента = "КодОрганаФСС"
			ИЛИ ИмяЭлемента = "ТарифНаТравматизм"
			ИЛИ ИмяЭлемента = "ДатаРегистрации" Тогда
			Если ЗначениеЗаполнено(Объект[ИмяЭлемента]) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ПлатежныеРеквизитыФНСПредставление" Тогда
			ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Объект.КодНалоговогоОрганаПолучателя);
			Если ЗначениеЗаполнено(ГосОрган.Ссылка) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "КодОКВЭД" Тогда
			Если НЕ ПустаяСтрока(Объект.КодОКВЭД) И ПроверкаДанныхКлиентСервер.КодОКВЭДСоответствуетТребованиям(Объект.КодОКВЭД) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "СтраховойНомерПФР" Тогда
			Если НЕ ПустаяСтрока(Объект.СтраховойНомерПФР) И РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СокрЛП(Объект.СтраховойНомерПФР),"") Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "РегистрационныйНомерПФР" Тогда
			Если НЕ ПустаяСтрока(Объект.РегистрационныйНомерПФР) И ПроверкаДанныхКлиентСервер.РегНомерПФРСоответствуетТребованиям(СокрЛП(Объект.РегистрационныйНомерПФР)) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ВидТарифа" Тогда
			Если ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.ВидТарифа) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "РегистрационныйНомерФСС" Тогда
			Если  СтрДлина(СокрЛП(Объект.РегистрационныйНомерФСС))= 10 Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ВидКИ_0" Тогда
			Строки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));
			Если Строки.Количество() > 0 И НЕ ПустаяСтрока(Строки[0].Представление) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ВидКИ_1" Тогда
			Строки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
			Если Строки.Количество() > 0 И НЕ ПустаяСтрока(Строки[0].Представление) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "ВидКИ_2" Тогда
			Строки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
			Если Строки.Количество() > 0 И НЕ ПустаяСтрока(Строки[0].Представление) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		ИначеЕсли ИмяЭлемента = "НомерСчета" Тогда
			Если Не ПустаяСтрока(ОсновнойСчет_Номер) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаВыполненаУспешно Тогда
			Если СтрНайти(ИмяЭлемента, "ВидКИ") > 0 Тогда
				Элементы[ИмяЭлемента].ЦветТекста = ЦветТекста;
			Иначе
				Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = ЦветТекста;
			КонецЕсли;
			Строка.ЗаполненоКорректно = Истина;
			Если Не ПустаяСтрока(Строка.ИмяГруппы) Тогда
				СтрокиГруппы = ОшибкиЗаполнения.НайтиСтроки(Новый Структура("ИмяГруппы, ЗаполненоКорректно",Строка.ИмяГруппы, Ложь));
				Если СтрокиГруппы.Количество() = 0 Тогда
					Элементы[Строка.ИмяГруппы].ЦветТекстаЗаголовка = Новый Цвет;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтрНайти(ИмяЭлемента, "ВидКИ") > 0 Тогда
				Элементы[ИмяЭлемента].ЦветТекста = ЦветТекстаНекорректногоЗаполнения;
			Иначе
				Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = ЦветТекстаНекорректногоЗаполнения;
			КонецЕсли;
			Строка.ЗаполненоКорректно = Ложь;
			Если Не ПустаяСтрока(Строка.ИмяГруппы) Тогда
				Элементы[Строка.ИмяГруппы].ЦветТекстаЗаголовка = ЦветТекстаНекорректногоЗаполнения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьНастройкиЕНВД()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыДеятельностиЕНВД.Ссылка) КАК КоличествоВидов
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	|ГДЕ
	|	ВидыДеятельностиЕНВД.Владелец = &Владелец
	|	И ВидыДеятельностиЕНВД.Актуально
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыДеятельностиЕНВД.Наименование КАК НазваниеВидаДеятельности
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	|ГДЕ
	|	ВидыДеятельностиЕНВД.Владелец = &Владелец
	|	И ВидыДеятельностиЕНВД.Актуально");
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	
	Если Не Выборка.Следующий() Или Выборка.КоличествоВидов = 0 Тогда
		Элементы.НастроитьЕНВД.Заголовок = НСтр("ru='<<Указать виды деятельности для ЕНВД>>'");
	ИначеЕсли Выборка.КоличествоВидов = 1 Тогда
		ВыборкаИмени = Результат[1].Выбрать();
		ВыборкаИмени.Следующий();
		Элементы.НастроитьЕНВД.Заголовок = ВыборкаИмени.НазваниеВидаДеятельности
	Иначе
		Элементы.НастроитьЕНВД.Заголовок = НСтр("ru='Заполнено %1 %2 деятельности по ЕНВД'");
		Элементы.НастроитьЕНВД.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.НастроитьЕНВД.Заголовок,
			Выборка.КоличествоВидов,
			ПодобратьСловоПодЧисло(
				Выборка.КоличествоВидов,
				НСтр("ru='вид'"),
				НСтр("ru='вида'"),
				НСтр("ru='видов'")));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьНастройкиПатента()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Патенты.Ссылка) КАК КоличествоПатентов
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Патенты.Наименование КАК НазваниеПатента
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	
	Если Не Выборка.Следующий() Или Выборка.КоличествоПатентов = 0 Тогда
		Элементы.НастроитьПатент.Заголовок = НСтр("ru='<<Указать патент>>'");
	ИначеЕсли Выборка.КоличествоПатентов = 1 Тогда
		ВыборкаИмени = Результат[1].Выбрать();
		ВыборкаИмени.Следующий();
		Элементы.НастроитьПатент.Заголовок = ВыборкаИмени.НазваниеПатента;
	Иначе
		Элементы.НастроитьПатент.Заголовок = НСтр("ru='Заполнено %1 %2'");
		Элементы.НастроитьПатент.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.НастроитьПатент.Заголовок,
			Выборка.КоличествоПатентов,
			ПодобратьСловоПодЧисло(
				Выборка.КоличествоПатентов,
				НСтр("ru='патент'"),
				НСтр("ru='патента'"),
				НСтр("ru='патентов'")));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуПоТарифу()
	
	СрезПоТарифу = РегистрыСведений.ТарифыСтраховыхВзносов.ПолучитьПоследнее(ТекущаяДатаСеанса(), Новый Структура("ВидТарифа", КлючТарифаСтраховыхВзносов.ВидТарифа));
	Элементы.ДекорацияОписаниеТарифа.Заголовок = СтрШаблон(
		НСтр("ru = '(ПФР - %1%4, ФСС - %2%4, ФФОМС - %3%4)'"),
		СрезПоТарифу.ПФР,
		СрезПоТарифу.ФСС,
		СрезПоТарифу.ФФОМС,"%"
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеПлатежныхРеквизитов(Вид, Код, ПлатежныеРеквизитыПредставление)
	
	Если ЗначениеЗаполнено(Код) Тогда
		ГосударственныйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Вид, Код);
	Иначе
		ГосударственныйОрган = Неопределено;
	КонецЕсли;
	
	ПлатежныеРеквизитыПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(ГосударственныйОрган);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеПлательщикаПоУмолчанию(Форма)
	
	Объект = Форма.Объект;
	
	// Для организации заполняем из полного наименования
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
		Возврат Объект.НаименованиеПолное;
	КонецЕсли;
	
	// Для ИП:
	// п.4 Приложения 1 к Приказу Минфина 107н:
	// Фамилия имя отчество "(ИП)" "//"Адрес регистрации"//"
	Шаблон = "%1 (ИП) //%2//";
	
	ФИО = Форма.ФИОФизическихЛиц.Фамилия + ?(ПустаяСтрока(Форма.ФИОФизическихЛиц.Имя), "", " " + Форма.ФИОФизическихЛиц.Имя) + ?(ПустаяСтрока(Форма.ФИОФизическихЛиц.Отчество), "", " " + Форма.ФИОФизическихЛиц.Отчество);
	АдресРегистрации = КонтактнаяИнформацияУНФКлиентСервер.ПолучитьЗначениеКонтактнойИнформации(Форма, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	
	Возврат СтрШаблон(Шаблон, ФИО, АдресРегистрации);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораНаименования(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.Наименование.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Не ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		
		Форма.ОрганизационноПравоваяФорма = ВыделитьИзНаименованияОПФ(Форма.КлассификаторОПФ, Объект.НаименованиеПолное);
		
		СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		
		Если НЕ ПустаяСтрока(Форма.ОрганизационноПравоваяФорма.КраткаяФорма) Тогда
			СписокВыбора.Вставить(0, Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ + " " + Форма.ОрганизационноПравоваяФорма.КраткаяФорма);
			СписокВыбора.Добавить(Форма.ОрганизационноПравоваяФорма.КраткаяФорма + " " + Форма.ОрганизационноПравоваяФорма.НаименованиеБезОПФ);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.Наименование.КнопкаВыпадающегоСписка = СписокВыбора.Количество() > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыделитьИзНаименованияОПФ(КлассификаторОПФ, знач НаименованиеОрганизации)
	
	Результат = Новый Структура("НаименованиеБезОПФ, КраткаяФорма, ПолнаяФорма", НаименованиеОрганизации, "", "");
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НаименованиеОрганизации);
	
	Для Каждого Слово Из МассивСлов Цикл
		Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
			Если ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.ПолнаяФорма) Тогда
				Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
				Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
				Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, Слово, "")));
				Возврат Результат;
			ИначеЕсли Не ПустаяСтрока(ДанныеОПФ.КраткаяФорма) И ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.КраткаяФорма) Тогда
				Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
				Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
				Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, Слово, "")));
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КодРегионаПоАдресу(Адрес)
	
	Если ТипЗнч(Адрес) = Тип("СписокЗначений") Тогда
		
		Регион = "";
		Для Каждого ЭлементАдреса ИЗ Адрес Цикл
			Если ЭлементАдреса.Представление = "КодРегиона" Тогда
				Возврат ЭлементАдреса.Значение;
			ИначеЕсли ЭлементАдреса.Представление = "Регион" Тогда
				Регион = ЭлементАдреса.Значение;
			КонецЕсли;
		КонецЦикла;
		Возврат АдресныйКлассификатор.КодРегионаПоНаименованию(Регион);
		
	Иначе
		Регион = УправлениеКонтактнойИнформацией.РегионАдресаКонтактнойИнформации(Адрес);
		Если ЗначениеЗаполнено(Регион) Тогда
			КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(Регион);
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				Возврат КодРегиона;
			КонецЕсли;
		КонецЕсли;
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура КодНалоговогоОрганаПолучателяПриИзмененииНаСервере()
	
	Регистрация = НайтиРегистрациюВИФНС(Объект.КодНалоговогоОрганаПолучателя, Объект.Ссылка);
	Если ЗначениеЗаполнено(Регистрация) Тогда
		Объект.РегистрацияВНалоговомОргане = Регистрация;
		ЗначениеВРеквизитФормы(Регистрация.ПолучитьОбъект(), "РегистрацияВНалоговомОргане");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиРегистрациюВИФНС(КодИФНС, Организация)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацииВНалоговомОргане.Ссылка
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Код = &Код
		|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
		|	И РегистрацииВНалоговомОргане.Владелец = &Владелец");
		
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("Код", КодИФНС);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() ТОгда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область БанковскийСчетПоУмолчанию

&НаСервере
Процедура ПрочитатьБанковскийСчетПоУмолчанию(БанковскийСчетПоУмолчанию)
	
	Если ЗначениеЗаполнено(БанковскийСчетПоУмолчанию) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчетПоУмолчанию, "Банк, НомерСчета");
		ОсновнойСчет_Банк = ЗначенияРеквизитов.Банк;
		ОсновнойСчет_Номер = ЗначенияРеквизитов.НомерСчета;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетПоУмолчанию(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(ОсновнойСчет_Банк)
		Или ПустаяСтрока(ОсновнойСчет_Номер) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОсновнойСчет_Банк) = Тип("СправочникСсылка.КлассификаторБанковРФ") Тогда
		ОсновнойСчет_Банк = РаботаСБанкамиПереопределяемый.БанкИзКлассификатора(ОсновнойСчет_Банк);
	КонецЕсли;
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
	// Если организация новая, банковский счет надо создавать новый
		НадоСоздаватьНовый = Истина;
	Иначе
	// Для существующей организации, надо проверять наличие банковского счета с такими же ключевыми полями
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.Банк = &Банк
		|	И БанковскиеСчета.НомерСчета = &НомерСчета";
		
		Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.Ссылка);
		Запрос.УстановитьПараметр("Банк", ОсновнойСчет_Банк);
		Запрос.УстановитьПараметр("НомерСчета", ОсновнойСчет_Номер);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если РезультатЗапроса.Пустой() Тогда
			// Нет банковского счета с такими ключевыми полями
			Если ЗначениеЗаполнено(ТекущийОбъект.БанковскийСчетПоУмолчанию) Тогда
				// Модифицируется существующий основной счет
				НадоСоздаватьНовый = Ложь;
			Иначе
				// Создается новый
				НадоСоздаватьНовый = Истина;
			КонецЕсли;
		Иначе
			// Банковский счет есть, устанавливаем его в качестве основного
			НадоСоздаватьНовый = Ложь;
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ТекущийОбъект.БанковскийСчетПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НадоСоздаватьНовый Тогда
		ТекущийОбъект.БанковскийСчетПоУмолчанию = Справочники.БанковскиеСчета.ПолучитьСсылку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьБанковскийСчетПоУмолчанию(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(ОсновнойСчет_Банк)
		Или ПустаяСтрока(ОсновнойСчет_Номер) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БанковскийСчетОбъект = ТекущийОбъект.БанковскийСчетПоУмолчанию.ПолучитьОбъект();
	
	Если БанковскийСчетОбъект = Неопределено Тогда
		
		// Создание
		БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		БанковскийСчетОбъект.УстановитьСсылкуНового(ТекущийОбъект.БанковскийСчетПоУмолчанию);
		БанковскийСчетОбъект.Заполнить(ТекущийОбъект.Ссылка);
		
	КонецЕсли;
	
	// Внесение изменений
	БанковскийСчетОбъект.Банк = ОсновнойСчет_Банк;
	БанковскийСчетОбъект.НомерСчета = ОсновнойСчет_Номер;
	БанковскийСчетОбъект.СформироватьНаименование();
	
	// Запись объекта
	БанковскийСчетОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СистемыНалогообложенияОрганизаций

&НаСервере
Процедура ПрочитатьНастройкиСистемыНалогообложения(Организация)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизаций.Период,
	|	СистемыНалогообложенияОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(, Организация = &Организация) КАК СистемыНалогообложенияОрганизаций");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "КлючСистемыНалогообложения");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючСистемыНалогообложения.ОбъектНалогообложения) Тогда
		КлючСистемыНалогообложения.ОбъектНалогообложения = Перечисления.ВидыОбъектовНалогообложения.Доходы;
		КлючСистемыНалогообложения.СтавкаНалога = 6;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСистемыНалогообложения(Организация)
	
	Если КлючСистемыНалогообложения.Организация.Пустая() Тогда
		КлючСистемыНалогообложения.Организация = Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючСистемыНалогообложения.Период) Тогда
		КлючСистемыНалогообложения.Период = '20000101';
	КонецЕсли;
	
	МенеджерЗаписи = РеквизитФормыВЗначение("КлючСистемыНалогообложения");
	
	Если МенеджерЗаписи.ПлательщикУСН Тогда
		МенеджерЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
	Иначе
		МенеджерЗаписи.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияИсторииНалогообложения(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("РегистрСведений.СистемыНалогообложенияОрганизаций.ФормаСписка", Новый Структура("Организация", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПараметрыЗадачиНалогов()
	
	Если Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоЕНВД
		ИЛИ Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалогЕНВД Тогда
		
		Сообщи = новый СообщениеПользователю();
		Сообщи.Текст = НСтр("ru='Включите опцию применения ЕНВД в разделе Налоогобложение'");
		Сообщи.КлючДанных = Объект.Ссылка;
		сообщи.Поле = "КлючСистемыНалогообложения.ПлательщикЕНВД";
		сообщи.Сообщить();
		
	ИначеЕсли Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Справки2НДФЛ
		ИЛИ Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ОтчетностьВПФР
		ИЛИ Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.Форма4ФСС 
		ИЛИ Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогиСотрудников
		ИЛИ Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.СреднесписочнаяЧисленность Тогда
		
		Сообщи = новый СообщениеПользователю();
		Сообщи.Текст = НСтр("ru='Включите испольльзование труда наемный рабочих в разделе Налогообложение'");
		Сообщи.КлючДанных = Объект.Ссылка;
		сообщи.Поле = "Объект.ИПИспользуетТрудНаемныхРаботников";
		сообщи.Сообщить();
		
	ИначеЕсли Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.АвансовыйПлатежПоУСН
		ИЛИ Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ДекларацияПоУСН
		ИЛИ Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ЕдиныйНалог Тогда
		
		Сообщи = новый СообщениеПользователю();
		Сообщи.Текст = НСтр("ru='Включите опцию применения УСН в разделе Налоогобложение'");
		Сообщи.КлючДанных = Объект.Ссылка;
		сообщи.Поле = "КлючСистемыНалогообложения.ПлательщикУСН";
		сообщи.Сообщить();
	ИначеЕсли Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.НалогПатент Тогда
		
		Сообщи = новый СообщениеПользователю();
		Сообщи.Текст = НСтр("ru='Включите опцию применения патента в разделе Налоогобложение'");
		Сообщи.КлючДанных = Объект.Ссылка;
		сообщи.Поле = "КлючСистемыНалогообложения.ПрименяетсяПатент";
		сообщи.Сообщить();
		
	ИначеЕсли Параметры.ЗадачаНалогов = Справочники.ЗадачиКалендаряПодготовкиОтчетности.ТорговыйСбор Тогда
		
		Сообщи = новый СообщениеПользователю();
		Сообщи.Текст = НСтр("ru='Включите опцию применения торгового сбора в разделе Налоогобложение'");
		Сообщи.КлючДанных = Объект.Ссылка;
		сообщи.Поле = "КлючСистемыНалогообложения.ПлательщикТорговыйСбор";
		сообщи.Сообщить();
		
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ПрименяемыеТарифыСтраховыхВзносов

&НаСервере
Процедура ПрочитатьНастройкиСтраховыхВзносов(Организация)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.Период,
	|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(, Организация = &Организация) КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "КлючТарифаСтраховыхВзносов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСтраховыхВзносов(Организация)
	
	Если КлючТарифаСтраховыхВзносов.Организация.Пустая() Тогда
		КлючТарифаСтраховыхВзносов.Организация = Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючТарифаСтраховыхВзносов.Период) Тогда
		КлючТарифаСтраховыхВзносов.Период = '20000101';
	КонецЕсли;
	
	МенеджерЗаписи = РеквизитФормыВЗначение("КлючТарифаСтраховыхВзносов");
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияИсторииСтраховыхВзносов(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ОткрытьФорму("РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФизЛицо

&НаСервере
Процедура ПрочитатьФизЛицо(ФизЛицо)
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ФизЛицо.ПолучитьОбъект(), "ФизическоеЛицо");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.Период КАК Период,
		|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "ФИОФизическихЛиц");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Период КАК Период,
		|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо,
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ФизЛицо = &ФизЛицо
		|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		ЗначениеВРеквизитФормы(МенеджерЗаписи, "ДокументыФизическихЛиц");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьФизЛицо(ТекущийОбъект)
	
	Если Объект.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФИОФизическихЛиц.Период) Тогда
		ФИОФизическихЛиц.Период = '19800101';
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ФИОФизическихЛиц.ФизЛицо) Тогда
		ФИОФизическихЛиц.ФизЛицо = ТекущийОбъект.ФизическоеЛицо;
	КонецЕсли;
	МенеджерЗаписи = РеквизитФормыВЗначение("ФИОФизическихЛиц");
	МенеджерЗаписи.Записать();
	
	Если Не ЗначениеЗаполнено(ДокументыФизическихЛиц.Период) Тогда
		ДокументыФизическихЛиц.Период = '19800101';
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументыФизическихЛиц.Физлицо) Тогда
		ДокументыФизическихЛиц.Физлицо = ТекущийОбъект.ФизическоеЛицо;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументыФизическихЛиц.ВидДокумента) Тогда
		ДокументыФизическихЛиц.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	КонецЕсли;
	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
	МенеджерЗаписи = РеквизитФормыВЗначение("ДокументыФизическихЛиц");
	МенеджерЗаписи.Записать();
	
	ФизическоеЛицо.Наименование = ФИОФизическихЛиц.Фамилия
		+ ?(ПустаяСтрока(ФИОФизическихЛиц.Имя), "", " " + ФИОФизическихЛиц.Имя)
		+ ?(ПустаяСтрока(ФИОФизическихЛиц.Отчество), "", " " + ФИОФизическихЛиц.Отчество);
	
	ФизЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
	Если ФизЛицоОбъект.Ссылка.Пустая() Тогда
		ФизЛицоОбъект.УстановитьСсылкуНового(ТекущийОбъект.ФизическоеЛицо);
	КонецЕсли;
	ФизЛицоОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаблокироватьФизическоеЛицоПриРедактировании()
	
	Если Не Параметры.Ключ.Пустая() И Не ФизическоеЛицоЗаблокировано Тогда
		Если Не ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере() Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удается внести изменения в личные данные физического лица. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьФизЛицо(Объект.ФизическоеЛицо);
			Возврат Ложь;
		Иначе
			ФизическоеЛицоЗаблокировано = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере()
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицо.Ссылка, ФизическоеЛицо.ВерсияДанных, УникальныйИдентификатор);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОднофамильцев(ОповещениеЗавершения = Неопределено)
	
	Однофамильцы = ПодобратьСписокФизЛицСервер();
	
	Если Однофамильцы.Количество() > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура("ЗаголовокФормы,ТекстИнформационнойНадписи,ФизическиеЛица");
		
		Если Однофамильцы.Количество() = 1 Тогда
			ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найден человек с похожим именем'");
			ПараметрыОткрытия.ТекстИнформационнойНадписи = 
				НСтр("ru='Если вы хотите указать в качестве индивидуального предпринимателя это физическое лицо, нажмите ""Да, это тот, кто мне нужен"".
					|Если это однофамилец, нажмите ""Нет, это другой человек"".'");
		Иначе
			ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найдены люди с похожими именами'");
			ПараметрыОткрытия.ТекстИнформационнойНадписи = 
				НСтр("ru='Если вы хотите указать в качестве индивидуального предпринимателя одно из приведенных в списке физических лиц, выберите его и нажмите ""Отмеченный человек тот, кто мне нужен"".
					|Если это однофамилец, нажмите ""Нет, это другой человек"".'");
		КонецЕсли;
		
		ПараметрыОткрытия.ФизическиеЛица = Однофамильцы;
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьОднофамильцевЗавершение", ЭтотОбъект, ОповещениеЗавершения);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФизическиеЛицаСПохожимиДанными", ПараметрыОткрытия, , , , , Оповещение);
	
	Иначе
		
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОднофамильцевЗавершение(ВыбранноеФизлицоСсылка, ОповещениеЗавершения) Экспорт
	
	Если ВыбранноеФизлицоСсылка <> Неопределено Тогда
		Объект.ФизическоеЛицо = ВыбранноеФизлицоСсылка;
		ПрочитатьФизЛицо(ВыбранноеФизлицоСсылка);
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобратьСписокФизЛицСервер()
	
	Возврат Справочники.ФизическиеЛица.ПодобратьСписокФизЛиц(
		ФИОФизическихЛиц.Фамилия,
		ФИОФизическихЛиц.Имя,
		ФИОФизическихЛиц.Отчество,
		Объект.ФизическоеЛицо);
	
КонецФункции

&НаКлиенте
Процедура ФизическоеЛицоФИОПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиРегламентированныхДанных

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьВсеПроверки(Форма)
	
	СформироватьПредставлениеПроверкиИНН(Форма);
	СформироватьПредставлениеПроверкиКПП(Форма);
	СформироватьПредставлениеПроверкиОКПО(Форма);
	СформироватьПредставлениеПроверкиОГРН(Форма);
	СформироватьПредставлениеПроверкиОКВЭД(Форма);
	СформироватьПредставлениеПроверкиСтраховогоНомераПФР(Форма);
	
	СформироватьПредставлениеПроверкиДанных(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиДанных(Форма)
	
	КомпонентыФС = Новый Массив;
	
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиИНН) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиИНН);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиКПП) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиКПП);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиОКПО) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиОКПО);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиОГРН) Тогда
		КомпонентыФС.Добавить(Форма.ПредставлениеПроверкиОГРН);
		КомпонентыФС.Добавить(Символы.ПС);
	КонецЕсли;
	
	
	Если КомпонентыФС.Количество() > 0 Тогда
		КомпонентыФС.Удалить(КомпонентыФС.ВГраница());
	КонецЕсли;
	
	Форма.ПредставлениеПроверкиДанных = Новый ФорматированнаяСтрока(КомпонентыФС);
	Форма.Элементы.ПредставлениеПроверкиДанных.Видимость = Не ПустаяСтрока(Форма.ПредставлениеПроверкиДанных);
	Если Не ПустаяСтрока(Форма.ПредставлениеПроверкиДанных) Тогда
		Форма.Элементы.ПредставлениеПроверкиДанных.Высота = СтрЧислоСтрок(Форма.ПредставлениеПроверкиДанных);
	КонецЕсли;
	
	Форма.Элементы.ПредставлениеПроверкиСтраховогоНомераПФР.Видимость = Не ПустаяСтрока(Форма.ПредставлениеПроверкиСтраховогоНомераПФР);
	Форма.Элементы.ПредставлениеПроверкиОКВЭД.Видимость = Не ПустаяСтрока(Форма.ПредставлениеПроверкиОКВЭД);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиИНН(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.ИНН) Тогда
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, ЭтоЮрЛицо(Объект.ЮридическоеФизическоеЛицо), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиИНН = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиКПП(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.КПП) Тогда
		РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Объект.КПП, ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиКПП = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиОКПО(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.КодПоОКПО) Тогда
		РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(Объект.КодПоОКПО, ЭтоЮрЛицо(Объект.ЮридическоеФизическоеЛицо), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиОКПО = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиОГРН(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.ОГРН) И Не Объект.ИностраннаяОрганизация Тогда
		РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(Объект.ОГРН, ЭтоЮрЛицо(Объект.ЮридическоеФизическоеЛицо), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиОГРН = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиОКВЭД(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(Объект.КодОКВЭД) Тогда
		Если Не ПроверкаДанныхКлиентСервер.КодОКВЭДСоответствуетТребованиям(СокрЛП(Объект.КодОКВЭД)) Тогда
			ОписаниеОшибки = НСтр("ru='Код ОКВЭД не соответствует требованиям'");
		КонецЕсли;
	КонецЕсли;
	Форма.ПредставлениеПроверкиОКВЭД = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПроверкиСтраховогоНомераПФР(Форма)
	
	Объект = Форма.Объект;
	ОписаниеОшибки = "";
	Если Не ПустаяСтрока(СтрЗаменить(Объект.СтраховойНомерПФР, "-", "")) Тогда
		РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СокрЛП(Объект.СтраховойНомерПФР), ОписаниеОшибки);
	КонецЕсли;
	Форма.ПредставлениеПроверкиСтраховогоНомераПФР = Новый ФорматированнаяСтрока(ОписаниеОшибки, , Форма.ЦветТекстаНекорректногоЗаполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮрЛицо(ЮрФизЛицо)
	
	Возврат ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
КонецФункции

#КонецОбласти

#Область ФаксимилеИЛоготип

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УправлениеФлагамиРаботыСКартинками(ЭтоРаботаСЛоготипом = Ложь, ЭтоРаботаСФаксимиле = Ложь)
	
	РаботаСЛоготипом = ЭтоРаботаСЛоготипом;
	РаботаСФаксимиле = ЭтоРаботаСФаксимиле;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	ИмяРеквизитаОбъекта = "";
	
	Если РаботаСЛоготипом Тогда
		
		ИмяРеквизитаОбъекта = "ФайлЛоготип";
		
	ИначеЕсли РаботаСФаксимиле Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРеквизитаОбъекта)
		И ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(Объект[ИмяРеквизитаОбъекта], УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Записать();
	
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, ИмяРеквизитаОбъекта, Фильтр;
	
	Если РаботаСЛоготипом Тогда
		
		ИмяРеквизитаОбъекта = "ФайлЛоготип";
		
	ИначеЕсли РаботаСФаксимиле Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		
		ПросмотретьПрисоединенныйФайл();
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		+ "|Все файлы(*.*)|*.*"
		+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		+ "|Формат GIF(*.gif*)|*.gif"
		+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		+ "|Формат PNG(*.png*)|*.png"
		+ "|Формат TIFF(*.tif)|*.tif"
		+ "|Формат icon(*.ico)|*.ico"
		+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	Записать();
	
	
	ДобавитьИзображениеЛоготипаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаФрагмент()
	
	Перем ИдентификаторФайла;
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь);
	
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	Записать();
	
	ДобавитьИзображениеФаксимилеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимилеФрагмент()
	
	Перем ИдентификаторФайла;
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина);
	
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическоеЗаполнениеРеквизитов

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(знач ИНН)
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ИНН, ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
	// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
		
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов организации
				|необходимо подключиться к интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения, ИНН", "ЗаполнитьРеквизитыПоИНН", ИНН);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииПФР()
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания отделения ПФ РФ
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Данные по отделению ПФ РФ пригодятся при уплате налогов.
				|Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОбОтделенииПФР");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииФСС()
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания отделения ФСС
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Данные по отделению ФСС пригодятся при уплате налогов.
				|Подключиться сейчас?'");
			
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОбОтделенииФСС");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции()
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания налогового органа
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Данные по налоговому органу пригодятся при уплате налогов.
				|Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ИНН, ОписаниеОшибки = "")
	
	Если СтрДлина(ИНН) = 12 Тогда
		ЭтоЮрЛицо = Ложь;
	Иначе
		ЭтоЮрЛицо = Истина;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		
		РеквизитыОрганизации = ДанныеЕдиныхГосРеестров.РеквизитыЮридическогоЛицаПоИНН(ИНН);
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыОрганизации.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Объект.Наименование			= РеквизитыОрганизации.Наименование;
		Объект.НаименованиеПолное	= РеквизитыОрганизации.НаименованиеСокращенное;
		Объект.ИНН					= РеквизитыОрганизации.ИНН;
		Объект.КПП					= РеквизитыОрганизации.КПП;
		Объект.ОГРН					= РеквизитыОрганизации.РегистрационныйНомер;
		
		Если РеквизитыОрганизации.КодОКВЭД <> Неопределено Тогда
			Объект.КодОКВЭД			= РеквизитыОрганизации.КодОКВЭД;
		КонецЕсли;
		
		Если РеквизитыОрганизации.ЮридическийАдрес <> Неопределено Тогда
			
			РеквизитыОрганизации.ЮридическийАдрес.Вставить("ЗначенияПолей", РеквизитыОрганизации.ЮридическийАдрес.КонтактнаяИнформация);
			
			// Юридический адрес
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(
				ЭтотОбъект,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
				РеквизитыОрганизации.ЮридическийАдрес,
				Истина
			);
			// Фактический адрес
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(
				ЭтотОбъект,
				Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
				РеквизитыОрганизации.ЮридическийАдрес,
				Ложь
			);
		КонецЕсли;
		
		// Телефон
		Если РеквизитыОрганизации.Телефон <> Неопределено Тогда
			
			РеквизитыОрганизации.Телефон.Вставить("ЗначенияПолей", РеквизитыОрганизации.Телефон.КонтактнаяИнформация);
			КонтактнаяИнформацияУНФ.ЗаполнитьЗначениеКонтактнойИнформации(
				ЭтотОбъект,
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
				РеквизитыОрганизации.Телефон,
				Истина
			);
		КонецЕсли;
		
		Реквизиты = РеквизитыОрганизации;
		
	Иначе
		
		РеквизитыПредпринимателя = ДанныеЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(ИНН);
		
		Если ЗначениеЗаполнено(РеквизитыПредпринимателя.ОписаниеОшибки) Тогда
			ОписаниеОшибки = РеквизитыПредпринимателя.ОписаниеОшибки;
			Возврат;
		КонецЕсли;
		
		Объект.Наименование			= РеквизитыПредпринимателя.Наименование;
		Объект.НаименованиеПолное	= РеквизитыПредпринимателя.НаименованиеСокращенное;
		Объект.ИНН					= РеквизитыПредпринимателя.ИНН;
		Объект.ОГРН					= РеквизитыПредпринимателя.РегистрационныйНомер;
		
		Если РеквизитыПредпринимателя.СвидетельствоОРегистрации <> Неопределено Тогда
			Объект.СвидетельствоСерияНомер = "" + РеквизитыПредпринимателя.СвидетельствоОРегистрации.Серия + " " + РеквизитыПредпринимателя.СвидетельствоОРегистрации.Номер;
			Объект.СвидетельствоДатаВыдачи = РеквизитыПредпринимателя.СвидетельствоОРегистрации.Дата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
			
			Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Фамилия) Тогда
				ФИОФизическихЛиц.Фамилия = РеквизитыПредпринимателя.Фамилия;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Имя) Тогда
				ФИОФизическихЛиц.Имя = РеквизитыПредпринимателя.Имя;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Отчество) Тогда
				ФИОФизическихЛиц.Отчество = РеквизитыПредпринимателя.Отчество;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыПредпринимателя.Пол) Тогда
				ФизическоеЛицо.Пол = ?(РеквизитыПредпринимателя.Пол = "1", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
			КонецЕсли;
		КонецЕсли;
		
		Реквизиты = РеквизитыПредпринимателя;
		
	КонецЕсли;
	
	Объект.ЮридическоеФизическоеЛицо = ?(ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	//Устанавливаем сведения о налоговой инспекции
	//В том случае, если указан юридический адрес, получаем код налоговой инспекции по адресу
	//и заполняем реквизиты инспеции по коду
	//В том случае, если юридического адреса нет - заполняем данные о налоговой инспекции
	//из кода в ЕГРЮЛ/ЕГРИП
	Если Реквизиты.Свойство("ЮридическийАдрес")
		И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
		ОписаниеОшибкиАдрес = "";
		ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(Реквизиты.ЮридическийАдрес.КонтактнаяИнформация, ОписаниеОшибкиАдрес);
		Если ЗначениеЗаполнено(ОписаниеОшибкиАдрес)
			И ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане)
			И ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане.Код) Тогда
			
			Объект.КодНалоговогоОрганаПолучателя = Реквизиты.РегистрацияВНалоговомОргане.Код;
			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане) Тогда
		
		Объект.КодНалоговогоОрганаПолучателя = Реквизиты.РегистрацияВНалоговомОргане.Код;
		
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("РегистрацияВПенсионномФонде")
		И ЗначениеЗаполнено(Реквизиты.РегистрацияВПенсионномФонде) Тогда
		Объект.КодОрганаПФР = Реквизиты.РегистрацияВПенсионномФонде.КодОрганаПФР;
		Если ЭтоЮрЛицо Тогда
			Объект.РегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
		Иначе
			Объект.РегистрационныйНомерПФР_ИП = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
		КонецЕсли;
		
		ЗаполнитьСведенияОбОтделенииПФР();
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("РегистрацияВФСС")
		И ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС) Тогда
		Объект.КодОрганаФСС = Реквизиты.РегистрацияВФСС.КодОрганаФСС;
		
		Объект.НаименованиеТерриториальногоОрганаФСС = Реквизиты.РегистрацияВФСС.НаименованиеОрганаФСС;
		Объект.РегистрационныйНомерФСС = Реквизиты.РегистрацияВФСС.РегистрационныйНомерФСС;
		
		ЗаполнитьСведенияОбОтделенииФСС();
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораНаименования(ЭтотОбъект);
	Если ЗначениеЗаполнено(Реквизиты.НаименованиеПолное) Тогда
		Элементы.Наименование.СписокВыбора.Добавить(Реквизиты.НаименованиеПолное);
	КонецЕсли;
	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
	КонтактнаяИнформацияУНФКлиентСервер.ЗаполнитьСписокВыбораАдресов(ЭтотОбъект);
	ВыполнитьВсеПроверки(ЭтотОбъект);
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Лев(Объект.КодОрганаПФР, 3));
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияПФР.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияПФР.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияПФР.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияПФР);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыПФРПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыОтделенияПФР);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаФСС) Тогда
		Возврат;
	КонецЕсли;
	КодПодчиненностиФСС = Объект.КодОрганаФСС + ?(Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, 3, 1);
	РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(КодПодчиненностиФСС);
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияФСС.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияФСС.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияФСС);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыФССПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыОтделенияФСС);
	
	Объект.НаименованиеТерриториальногоОрганаФСС = РеквизитыОтделенияФСС.Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОрганаПолучателя) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Объект.КодНалоговогоОрганаПолучателя);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыФНСПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыНалоговогоОргана);
	
	РегистрацияВНалоговомОргане.Наименование     = РеквизитыНалоговогоОргана.Наименование;
	РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(ЗначенияПолейАдреса, ОписаниеОшибки = "")
	
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	Если НЕ ЗначениеЗаполнено(ЗначенияПолейАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = ДанныеАдресногоКлассификатора.НалоговыйОрганПоАдресу(ЗначенияПолейАдреса);
	Если ЗначениеЗаполнено(СведенияОНалоговомОрганеПоАдресу.ОписаниеОшибки) Тогда
		ОписаниеОшибки = СведенияОНалоговомОрганеПоАдресу.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Объект.КодНалоговогоОрганаПолучателя = ?(ЭтоФизЛицо, 
		СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляФизическихЛиц,
		СведенияОНалоговомОрганеПоАдресу.КодНалоговойДляЮридическихЛиц);
	
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
	
	РегистрацияВНалоговомОргане.КодПоОКАТО = СведенияОНалоговомОрганеПоАдресу.КодПоОКАТО;
	РегистрацияВНалоговомОргане.КодПоОКТМО = СведенияОНалоговомОрганеПоАдресу.КодПоОКТМО;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовПФР(Ответ, ДопПараметры) Экспорт
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			Ответ.Код,
			ПлатежныеРеквизитыПФРПредставление);
		Объект.КодОрганаПФР = Ответ.Код;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			Ответ.Код,
			ПлатежныеРеквизитыФНСПредставление);
		Объект.КодНалоговогоОрганаПолучателя = Ответ.Код;
		РегистрацияВНалоговомОргане.Наименование     = Ответ.Наименование;
		РегистрацияВНалоговомОргане.НаименованиеИФНС = Ответ.НаименованиеПолное;
		
		Модифицированность = Истина;
		ПроверитьЗаполнениеЭлемента("ПлатежныеРеквизитыФНСПредставление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФСС(Ответ, ДопПараметры) Экспорт
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			Ответ.Код,
			ПлатежныеРеквизитыФССПредставление);
		
		Объект.КодОрганаФСС = Ответ.Код;
		Объект.НаименованиеТерриториальногоОрганаФСС = Ответ.Наименование;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполнены(Форма)
	
	Результат = Ложь;
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Наименование)
		Или Объект.КонтактнаяИнформация.Количество() > 0 Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВопросПерезаполнитьРеквизитыПоИННЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(ДополнительныеПараметры.ИНН);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнениеРеквизитовОрганизацияВыбрана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) 
		Или ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИНН = Результат;
	ВыполнитьЗаполнениеРеквизитовПоИНН(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПодключитьИнтернетПоддержкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеИнтернетПоддержкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеИнтернетПоддержкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда
		
		Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьРеквизитыПоИНН" И ДополнительныеПараметры.Свойство("ИНН") Тогда
			
			ВыполнитьЗаполнениеРеквизитовПоИНН(ДополнительныеПараметры.ИНН);
			
		ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду" Тогда
			
			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
			
		ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОбОтделенииФСС" Тогда
			
			ЗаполнитьСведенияОбОтделенииФСС();
			
		ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОбОтделенииПФР" Тогда
			
			ЗаполнитьСведенияОбОтделенииПФР();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодОрганаПФР(РегНомерПФР)
	
	Результат = Лев(СокрЛ(РегНомерПФР), 7);	
	
	Если СтрДлина(СокрЛП(Результат)) < 7 Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКодОрганаФСС(РегНомерФСС)
	
	
	Результат = Лев(СокрЛ(РегНомерФСС), 4);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНулевуюСтавкуНДС()
	Возврат Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
КонецФункции

&НаСервереБезКонтекста
Функция Получить18процентнуюСтавкуНДС()
	Возврат Справочники.СтавкиНДС.НайтиПоНаименованию("18%");
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	ПроверитьЗаполнениеЭлемента("ВидКИ_" + Прав(Элемент.Имя, 1));
	
	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ИмяЭлемента", "ВидКИ_" + Прав(Элемент.Имя, 1));
	ОповещениеОЗакрытииДиалога = Новый ОписаниеОповещения("ДополнительныеДействияПриЗакрытииДиалога", ЭтотОбъект, ДополнительныеПараметры);
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ОповещениеОЗакрытииДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДействияПриЗакрытииДиалога(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьЗаполнениеЭлемента(ДополнительныеПараметры.ИмяЭлемента);
	
	Если ФормироватьНаименованиеПлательщикаАвтоматически = 0 Тогда
		Объект.НаименованиеПлательщикаПриПеречисленииНалогов = НаименованиеПлательщикаПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодписиОтветственныхЛиц

&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	ТекстПоУмолчанию	= НСтр("ru = 'Создать'");
	Руководитель		= ТекстПоУмолчанию;
	ГлавныйБухгалтер	= ТекстПоУмолчанию;
	Кассир				= ТекстПоУмолчанию;
	Кладовщик			= ТекстПоУмолчанию;
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛица.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛица.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛица.ПустойКлюч();
	КладовщикКлючЗаписи			= РегистрыСведений.ОтветственныеЛица.ПустойКлюч();
	
	Если Объект.Ссылка.Пустая() Тогда
		УстановитьЗаголовокПодписи(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаСрезПоследних.Период КАК Период,
		|	ОтветственныеЛицаСрезПоследних.Организация КАК Организация,
		|	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица КАК ТипОтветственногоЛица,
		|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаСрезПоследних.Сотрудник) КАК Сотрудник,
		|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаСрезПоследних.Должность) КАК Должность
		|ИЗ
		|	РегистрСведений.ОтветственныеЛица.СрезПоследних КАК ОтветственныеЛицаСрезПоследних
		|ГДЕ
		|	ОтветственныеЛицаСрезПоследних.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	Отбор	= Новый Структура("Период, Организация, ТипОтветственногоЛица");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТипОтветственногоЛицаСтрокой = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ТипОтветственногоЛица);
		
		ЭлементФормы = ЭтотОбъект.Элементы.Найти(ТипОтветственногоЛицаСтрокой);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект[ТипОтветственногоЛицаСтрокой] = СтрШаблон(НСтр("ru = '%1 (%2)'"), Выборка.Сотрудник, Выборка.Должность);
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтотОбъект[ТипОтветственногоЛицаСтрокой + "КлючЗаписи"] = РегистрыСведений.ОтветственныеЛица.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
	УстановитьЗаголовокПодписи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоНажатие(ТипОтветственногоЛицаСтрокой)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветственноеЛицоВопросЗадан", ЭтотОбъект, Новый Структура("ТипОтветственногоЛицаСтрокой", ТипОтветственногоЛицаСтрокой));
		ТекстВопроса = НСтр("ru='Для установки ответственного лица необходимо записать организацию.
								|Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОтветственноеЛицоОбъектЗаписан(ТипОтветственногоЛицаСтрокой);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоОбъектЗаписан(ТипОтветственногоЛицаСтрокой)
	
	ТипОтветственногоЛица = ПредопределенноеЗначение("Перечисление.ТипыОтветственныхЛиц." + ТипОтветственногоЛицаСтрокой);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация",			Объект.Ссылка);
	ДанныеЗаполнения.Вставить("ТипОтветственногоЛица",	ТипОтветственногоЛица);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",								ЭтотОбъект[ТипОтветственногоЛицаСтрокой + "КлючЗаписи"]);
	ПараметрыФормы.Вставить("ЕстьСобственныеДанныеЗаполнения",	Истина);
	ПараметрыФормы.Вставить("СобственныеДанныеЗаполнения",		ДанныеЗаполнения);
	
	ОткрытьФорму("РегистрСведений.ОтветственныеЛица.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			ОтветственноеЛицоОбъектЗаписан(ДополнительныеПараметры.ТипОтветственногоЛицаСтрокой);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьОтветственногоНаСервере(знач ДанныеЗаписи)
	
	Если РуководительКлючЗаписи.Пустой() И ДанныеЗаписи.ТипОтветственногоЛица <> Перечисления.ТипыОтветственныхЛиц.Руководитель Тогда
		СоздатьЗаписьОтветственныхЛиц(Перечисления.ТипыОтветственныхЛиц.Руководитель, ДанныеЗаписи);
	КонецЕсли;
	
	Если ГлавныйБухгалтерКлючЗаписи.Пустой() И ДанныеЗаписи.ТипОтветственногоЛица <> Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер Тогда
		СоздатьЗаписьОтветственныхЛиц(Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер, ДанныеЗаписи);
	КонецЕсли;
	
	Если КассирКлючЗаписи.Пустой() И ДанныеЗаписи.ТипОтветственногоЛица <> Перечисления.ТипыОтветственныхЛиц.Кассир Тогда
		СоздатьЗаписьОтветственныхЛиц(Перечисления.ТипыОтветственныхЛиц.Кассир, ДанныеЗаписи);
	КонецЕсли;
	
	Если КладовщикКлючЗаписи.Пустой() И ДанныеЗаписи.ТипОтветственногоЛица <> Перечисления.ТипыОтветственныхЛиц.Кладовщик Тогда
		СоздатьЗаписьОтветственныхЛиц(Перечисления.ТипыОтветственныхЛиц.Кладовщик, ДанныеЗаписи);
	КонецЕсли;
	
	ОбновитьИнформациюОбОтветственныхЛицах();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьЗаписьОтветственныхЛиц(ТипОтветственного, ДанныеЗаписи)
	
	Запись = РегистрыСведений.ОтветственныеЛица.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ДанныеЗаписи);
	Запись.ТипОтветственногоЛица = ТипОтветственного;
	Запись.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаголовкиСвернутогоОтображенияГрупп

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВсеЗаголовкиСвернутогоОтображения(Форма)
	
	УстановитьЗаголовокЮридическихДанных(Форма);
	УстановитьЗаголовокБанковскогоСчета(Форма);
	УстановитьЗаголовокКассы(Форма);
	УстановитьЗаголовокКонтактнойИнформации(Форма);
	УстановитьЗаголовокПодписи(Форма);
	УстановитьЗаголовокНалогообложения(Форма);
	УстановитьЗаголовокНалоговойИнспекции(Форма);
	УстановитьЗаголовокКодовСтатистики(Форма);
	УстановитьЗаголовокПенсионногоФонда(Форма);
	УстановитьЗаголовокФСС(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЮридическихДанных(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Не ПустаяСтрока(Объект.ИНН) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ИНН'") + " " + Объект.ИНН);
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='ИНН ...'"));
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.КПП) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='КПП'") + " " + Объект.КПП);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.ОГРН) Тогда
		Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
			ДинамическиеПараметры.Добавить(НСтр("ru='ОГРН'") + " " + Объект.ОГРН);
		Иначе
			ДинамическиеПараметры.Добавить(НСтр("ru='ОГРН ИП'") + " " + Объект.ОГРН);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ЮридическиеДанные", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокБанковскогоСчета(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетПоУмолчанию) Тогда
		ДинамическиеПараметры.Добавить(Объект.БанковскийСчетПоУмолчанию);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ОсновнойБанковскийСчет", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКассы(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.КассаПоУмолчанию) Тогда
		ДинамическиеПараметры.Добавить(Объект.КассаПоУмолчанию);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ОсновнаяКасса", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКонтактнойИнформации(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	ЮрАдрес = КонтактнаяИнформацияУНФКлиентСервер.ПолучитьЗначениеКонтактнойИнформации(Форма, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	Если ЗначениеЗаполнено(ЮрАдрес) Тогда
		ДинамическиеПараметры.Добавить(ЮрАдрес);
	КонецЕсли;
	
	Телефон = КонтактнаяИнформацияУНФКлиентСервер.ПолучитьЗначениеКонтактнойИнформации(Форма, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
	Если ЗначениеЗаполнено(Телефон) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='тел.:'") + " " + Телефон);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "КонтактнаяИнформация", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокПодписи(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Не ПустаяСтрока(Форма.Руководитель) И Форма.Руководитель <> НСтр("ru = 'Создать'") Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='руководитель'") + " " + Форма.Руководитель);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "Подписи", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокНалогообложения(Форма)
	
	Объект = Форма.КлючСистемыНалогообложения;
	ДинамическиеПараметры = Новый Массив;
	Если ЭтоЮрЛицо(Форма.Объект.ЮридическоеФизическоеЛицо) Тогда
		НадписьСтавка = "";
	Иначе
		НадписьСтавка =  ?(Не ПустаяСтрока(Объект.СтавкаНалога),"- "+ Объект.СтавкаНалога+"%","");
	КонецЕсли;
	
	Если Объект.ПлательщикУСН Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='УСН'") +НадписьСтавка );
	КонецЕсли;
	
	Если Объект.ПлательщикЕНВД Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ЕНВД'"));
	КонецЕсли;
	
	Если Объект.ПрименяетсяПатент Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Патент'"));
	КонецЕсли;
	
	Если Объект.ПлательщикТорговыйСбор Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Торговый сбор'"));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "Налогообложение", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокНалоговойИнспекции(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Не ПустаяСтрока(Объект.КодНалоговогоОрганаПолучателя) Тогда
		ДинамическиеПараметры.Добавить(Объект.КодНалоговогоОрганаПолучателя);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "Налоговая", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКодовСтатистики(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Не ПустаяСтрока(Объект.КодОКВЭД) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ОКВЭД '")+Объект.КодОКВЭД);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.КодОКФС) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ОКФС '")+Объект.КодОКФС);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.КодОКОПФ) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='ОКОПФ '")+Объект.КодОКОПФ);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаКодыРосстатаКоды", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокПенсионногоФонда(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Не ПустаяСтрока(Объект.КодОрганаПФР) Тогда
		ДинамическиеПараметры.Добавить(Объект.КодОрганаПФР);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаПФР", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФСС(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Не ПустаяСтрока(Объект.КодОрганаФСС) Тогда
		ДинамическиеПараметры.Добавить(Объект.КодОрганаФСС);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаФСС", ДинамическиеПараметры);
	
КонецПроцедуры

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикТорговыйСборПриИзменении(Элемент)
	
	Объект.ИспользуетсяОтчетность = КлючСистемыНалогообложения.ПлательщикУСН Или КлючСистемыНалогообложения.ПлательщикЕНВД ИЛИ КлючСистемыНалогообложения.ПлательщикТорговыйСбор;
	
	УправлениеФормой(ЭтотОбъект);
	
	Модифицированность = Истина;
	
	УстановитьЗаголовокНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочки(Команда)
	ОткрытьФорму("Справочник.ТорговыеТочки.ФормаСписка", Новый Структура("Организация",Объект.Ссылка));
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
