#Область ОписаниеПеременных

&НаКлиенте
Перем РазрешенияПолучены;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.БлокироватьВладельца Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ИспользоватьДляОтправки = Истина;
		Объект.ИспользоватьДляПолучения = Истина;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль, ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ЗначениеЗаполнено(Пароли.Пароль), ЭтотОбъект.УникальныйИдентификатор, "");
		ПарольSMTP = ?(ЗначениеЗаполнено(Пароли.ПарольSMTP), ЭтотОбъект.УникальныйИдентификатор, "");
	КонецЕсли;
	
	Элементы.НастроитьАвтоматически.Доступность = Не ТолькоПросмотр;
	
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = Не ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ПарольSMTPИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, ПарольSMTP, "ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемПодтверждениеПолучено", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(
	ОписаниеОповещения,
	Отказ,
	ЗавершениеРаботы,
	ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РазрешенияПолучены <> Истина Тогда
		Если Не ПроверитьЗаполнение() Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Запрос = СоздатьЗапросНаИспользованиеВнешнихРесурсов();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПолучениеРазрешенийЗавершение", ЭтотОбъект, ПараметрыЗаписи);
		
		РаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запрос), ЭтотОбъект, ОповещениеОЗакрытии);
		
		Отказ = Истина;
	КонецЕсли;
	РазрешенияПолучены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПротоколПриИзменении(Элемент)
	
	УстановитьПортВходящейПочты();
	
КонецПроцедуры

&НаКлиенте
Процедура СерверВходящейПочтыПриИзменении(Элемент)
	Объект.СерверВходящейПочты = СокрЛП(НРег(Объект.СерверВходящейПочты));
КонецПроцедуры

&НаКлиенте
Процедура СерверИсходящейПочтыПриИзменении(Элемент)
	Объект.СерверИсходящейПочты = СокрЛП(НРег(Объект.СерверИсходящейПочты));
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	Объект.АдресЭлектроннойПочты = СокрЛП(Объект.АдресЭлектроннойПочты);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗащищенноеСоединениеДляИсходящейПочтыПриИзменении(Элемент)
	УстановитьПортИсходящейПочты();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗащищенноеСоединениеДляВходящейПочтыПриИзменении(Элемент)
	УстановитьПортВходящейПочты();
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляПолученияПисемПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляОтправкиПисемПриИзменении(Элемент)
	ПарольSMTPИзменен = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьАвтоматически(Команда)
	
	Элементы.АвтоматическаяНастройка.ТекущаяСтраница = Элементы.ВыполняетсяНастройка;
	
	ПодключитьОбработчикОжидания("ВыполнитьАвтоматическуюНастройку", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПортВходящейПочты()
	
	Если Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты Тогда
		Объект.ПортСервераВходящейПочты = 993;
	Иначе
		Объект.ПортСервераВходящейПочты = 143;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПортИсходящейПочты()
	Если Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты Тогда
		Объект.ПортСервераИсходящейПочты = 465;
	Иначе
		Объект.ПортСервераИсходящейПочты = 25;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПодтверждениеПолучено(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРазрешенийЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		РазрешенияПолучены = Истина;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗапросНаИспользованиеВнешнихРесурсов()
	
	Возврат РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(
		Разрешения(), Объект.Ссылка);
	
КонецФункции

&НаСервере
Функция Разрешения()
	
	Результат = Новый Массив;
	
	Если Объект.ИспользоватьДляОтправки Тогда
		Результат.Добавить(
			РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"SMTP",
				Объект.СерверИсходящейПочты,
				Объект.ПортСервераИсходящейПочты,
				НСтр("ru = 'Электронная почта.'")));
	КонецЕсли;
	
	Если Объект.ИспользоватьДляПолучения Тогда
		Результат.Добавить(
			РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				Объект.ПротоколВходящейПочты,
				Объект.СерверВходящейПочты,
				Объект.ПортСервераВходящейПочты,
				НСтр("ru = 'Электронная почта.'")));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьАвтоматическуюНастройку()
	
	ПодобратьНастройкиУчетнойЗаписи();
	
	Если ПроверкаЗавершиласьСОшибками Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось подобрать настройки для подключения. Настройте вручную.'");
		Элементы.АвтоматическаяНастройка.ТекущаяСтраница = Элементы.КомандаНастроитьАвтоматически;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Неопределено;
	ПроверитьВыполнениеФоновогоЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьНастройкиУчетнойЗаписи()
	
	НаименованиеЗадания = НСтр("ru = 'Поиск настроек почтового сервера'");
	ВыполняемыйМетод = "Справочники.УчетныеЗаписиЭлектроннойПочты.ОпределитьНастройкиУчетнойЗаписи";
	
	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль, ПарольSMTP");
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресЭлектроннойПочты", Объект.АдресЭлектроннойПочты);
	СтруктураПараметров.Вставить("Пароль", ?(ПарольИзменен, Пароль, Пароли.Пароль));
	СтруктураПараметров.Вставить("ПарольSMTP", ?(ПарольSMTPИзменен, ПарольSMTP, Пароли.ПарольSMTP));
	СтруктураПараметров.Вставить("ДляОтправки", Объект.ИспользоватьДляОтправки);
	СтруктураПараметров.Вставить("ДляПолучения", Объект.ИспользоватьДляПолучения);
	
	Попытка
		ПроверкаЗавершиласьСОшибками = Ложь;
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		ВыполняемыйМетод,
		СтруктураПараметров, 
		НаименованиеЗадания);
	Исключение
		ПроверкаЗавершиласьСОшибками = Истина;
		Элементы.АвтоматическаяНастройка.ТекущаяСтраница = Элементы.КомандаНастроитьАвтоматически;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания()
	
	Если Не РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		Попытка
			РезультатФоновогоЗадания.ЗаданиеВыполнено = ЗаданиеВыполнено(РезультатФоновогоЗадания.ИдентификаторЗадания);
		Исключение
			ПроверкаЗавершиласьСОшибками = Истина;
			Элементы.АвтоматическаяНастройка.ТекущаяСтраница = Элементы.КомандаНастроитьАвтоматически;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		
		НайденныеНастройки = ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища);
		
		ПроверкаЗавершиласьСОшибками = Объект.ИспользоватьДляОтправки <> НайденныеНастройки.ДляОтправки 
			Или Объект.ИспользоватьДляПолучения <> НайденныеНастройки.ДляПолучения;
			
		ЗаполнитьЗначенияСвойств(Объект, НайденныеНастройки);
		
		Если НайденныеНастройки.Свойство("Протокол") Тогда
			Объект.ПротоколВходящейПочты = НайденныеНастройки.Протокол;
		КонецЕсли;
		
		Если ПроверкаЗавершиласьСОшибками Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось подобрать настройки для подключения. Настройте вручную.'"));
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Автоматическая настройка выполнена успешно!'"));
			Модифицированность = Истина;
		КонецЕсли;
		
		Элементы.АвтоматическаяНастройка.ТекущаяСтраница = Элементы.КомандаНастроитьАвтоматически;
		
	Иначе
		
		Если ПараметрыОбработчикаОжидания = Неопределено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

#КонецОбласти
