&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаСервере
Перем КонтекстЭДОСервер;

&НаКлиенте
Перем МассивВыбранныхДокументов;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// инициализация реквизитов сообщения
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//создание нового элемента
		Заголовок = "Ответ на требование о представлении документов (создание)";
		Объект.ДатаСоздания = ТекущаяДатаСеанса();
		
		// Заполняем организацию из параметров, переданных в форму
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("Организация") Тогда
				Объект.Организация = Справочники.Организации.ПустаяСсылка();
				ОрганизацияОтбор = Параметры.ЗначенияЗаполнения.Организация;
			КонецЕсли;
		КонецЕсли;
		
		// Копируем табличную часть.
		Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьДеревоДокументов(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	Иначе
		
		Заголовок = Объект.Наименование;
		ЗаполнитьДеревоДокументов(Объект.Ссылка);
		
	КонецЕсли;
	
	Элементы.ПредставляемыеДокументы.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	СформироватьСоставМенюДобавитьИзБазы();
	
	УправлениеСтатусомИДоступностью();
	
	ОпределитьВложенияИРазмерВложений(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОписиИсходящихДокументовВНалоговыеОрганы", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПроверкаЗаполнения() = Ложь Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СканированныеДокументыДляПередачиВЭлектронномВиде" Тогда
		ОбновитьРазмерыОписи(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПредставляемыеДокументы.Очистить();
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		//Обход групп документов
		
		Для каждого СтрокаДокумент Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			//Обход самих документов
			НоваяСтрока = ТекущийОбъект.ПредставляемыеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумент);
			
			НоваяСтрока.ЯвляетсяИнформацией = ГруппаДокументов.ЯвляетсяИнформацией;
			НоваяСтрока.ПорядковыйНомер 	= ГруппаДокументов.ПорядковыйНомер;
			
			НоваяСтрока.НомерДокументаОснования 		= СтрокаДокумент.НомерДокОсн;
			НоваяСтрока.ДатаДокументаОснования 			= СтрокаДокумент.ДатаДокОсн;
			
			Если СтрокаДокумент.Загружен Тогда
				
				НоваяСтрока.СсылкаНаОбъект 				= Неопределено;
				НоваяСтрока.Загружен_Номер 				= СтрокаДокумент.ЗД_Номер;
				НоваяСтрока.Загружен_Дата 				= СтрокаДокумент.ЗД_Дата;
				НоваяСтрока.Загружен_Контрагент 		= СтрокаДокумент.ЗД_Контрагент;
				НоваяСтрока.Загружен_Направление 		= СтрокаДокумент.ЗД_Направление;
				
			КонецЕсли;
			
			НоваяСтрока.КНД 							= СтрокаДокумент.КНД;
			НоваяСтрока.ПодтверждениеКНД 				= СтрокаДокумент.ПодтверждениеКНД;
			НоваяСтрока.ПодтверждениеИмяФайлаДанных 	= СтрокаДокумент.ПодтверждениеИмяФайлаДанных;
			НоваяСтрока.ПодтверждениеИмяФайлаПодписи 	= СтрокаДокумент.ПодтверждениеИмяФайлаПодписи;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставляемыеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ПризнакТолькоПросмотр = ЭтотОбъект.ТолькоПросмотр;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		
		Если Поле.Имя = "ПредставляемыеДокументыСоставноеПоле" И НЕ ПризнакТолькоПросмотр Тогда
			
			// выберем пункт требования и перенесем в него документы
			//Описание оповещения
			ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки", Элемент.ТекущаяСтрока); 
			ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПунктТребованияГруппыДокументов", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТипПункта", ?(ДанныеСтроки.ЯвляетсяИнформацией, "2", "1"));
			ПараметрыФормы.Вставить("НомерПункта", ДанныеСтроки.ПорядковыйНомер);
			//Открываем форму выбора пункта требования, результат закрытия передаем в ПеремещениеВыделенныхСтрокЗавершение
			ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаВыбораПунктаТребования", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			Возврат;	
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ДанныеСтроки.СсылкаНаОбъект) = Тип("Строка") Тогда
			//ошибка: удалилась ссылка на объект
			Возврат;
		ИначеЕсли ДанныеСтроки.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот") 
		И Поле.Имя = "ПредставляемыеДокументыПредставлениеОснования" И НЕ ПризнакТолькоПросмотр И ТипЗнч(ДанныеСтроки.СсылкаНаОбъект) <> ТипСкан Тогда
			//откроем форму редактирования договора
			
			ДополнительныеПараметры = Новый Структура("ИдентификаторТекущейСтроки", Элемент.ТекущаяСтрока); 
			//Описание оповещения
			ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеДоговораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("НомерДоговора", ДанныеСтроки.НомерДокОсн);
			ПараметрыФормы.Вставить("ДатаДоговора", ДанныеСтроки.ДатаДокОсн);
			
			//Открываем форму выбора пункта требования, результат закрытия передаем в ПеремещениеВыделенныхСтрокЗавершение
			ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаРеквизитовДоговора", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОбъект) Тогда
			//откроем объект по ссылке
			ОткрытьДокумент(ДанныеСтроки.СсылкаНаОбъект)
		ИначеЕсли ДанныеСтроки.Загружен Тогда
			ОткрытьФормуЗагруженногоДокумента(ДанныеСтроки, НЕ Элемент.ТолькоПросмотр);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПередУдалением(Элемент, Отказ)
	
	ПередИнтерактивнымУдалениемВыделенныхСтрокНаСервере(Элемент.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПослеУдаления(Элемент)
	
	УдалитьПустыеГруппыДокументов();
	Записать();
	Модифицированность = Ложь;
	ОбновитьРазмерыОписи(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;	

КонецПроцедуры

&НаКлиенте
Процедура ТребованиеПриИзменении(Элемент)
	
	ТребованиеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьТребованиеПослеВыбора", 
		ЭтотОбъект);
	
	ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов");	
	КонтекстЭДОКлиент.ПоказатьФормуВыбораТребованияФНС(ОписаниеОповещения, , ВидДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//отрабатываем более логичное поведение:
	//если перемещают группы на другую группу, то не сливаем содержимое групп в целевую, а лишь выполняем стандартную обработку
	ЦелеваяСтрока = ДеревоДокументов.НайтиПоИдентификатору(Строка);
	Если ЦелеваяСтрока.ЭтоГруппа Тогда
		Для каждого ИдентификаторПереносимойСтроки Из ПараметрыПеретаскивания.Значение Цикл
			Если НЕ ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторПереносимойСтроки).ЭтоГруппа Тогда
				СтандартнаяОбработка = Ложь;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		Возврат
	КонецЕсли;
	
	Если ЦелеваяСтрока.ЭтоГруппа Тогда
		ЦелевойПунктТребования = ЦелеваяСтрока.ПорядковыйНомерВыгрузки;
	Иначе
		ЦелевойПунктТребования = ЦелеваяСтрока.ПолучитьРодителя().ПорядковыйНомерВыгрузки;
	КонецЕсли;
	
	ПеренестиВыделенныеСтрокиЗавершениеНаСервере(ЦелевойПунктТребования, ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	УдалитьПустыеГруппыДокументов();
	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПриИзменении(Элемент)
	
	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляемыеДокументыПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Элементы.ПредставляемыеДокументыИзменить.Доступность = (ДанныеСтроки <> Неопределено И НЕ ДанныеСтроки.ЭтоГруппа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВыделенныеСтроки(Команда)
	
	ДанныеСтроки = Элементы.ПредставляемыеДокументы.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивИдентификаторовВыделенныхСтрок = Элементы.ПредставляемыеДокументы.ВыделенныеСтроки;
	
	// выберем пункт требования и перенесем в него документы
	//Описание оповещения
	ДополнительныеПараметры = Новый Структура("МассивИдентификаторовВыделенныхСтрок", МассивИдентификаторовВыделенныхСтрок); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиВыделенныеСтрокиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипПункта", ?(ДанныеСтроки.ЯвляетсяИнформацией, "2", "1"));
	ПараметрыФормы.Вставить("НомерПункта", ДанныеСтроки.ПорядковыйНомер);
	//Открываем форму выбора пункта требования, результат закрытия передаем в ПеремещениеВыделенныхСтрокЗавершение
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаВыбораПунктаТребования", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаНесколько(Команда)
	
	ТекстВопроса = НСтр("ru = 'Для продолжения необходимо сохранить введеную информацию.
						|Продолжить?'");
						
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Попытка
		РезультатЗаписи = Записать();
	Исключение
		РезультатЗаписи = Ложь;
	КонецПопытки;
	
	Если НЕ РезультатЗаписи Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Во время сохранения произошли ошибки! Продолжение невозможно.'"));
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru = 'Текущий ответ на требование будет разбит на несколько. Продолжить?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазбитьНаНесколькоЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументы(Команда)
	
	//Параметры формы
	ПараметрыФормы = Новый Структура();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Требование""'"), , "Объект.Требование");
		Возврат;
	КонецЕсли;
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыЗавершение", ЭтотОбъект);
	
	//Открываем форму выбора документов, результат закрытия передаем в ДобавитьДокументыЗавершение
	ОткрытьФорму("РегистрСведений.ДокументыПоТребованиюФНС.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтчетыПоНДС(Команда)
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Требование""'"), , "Объект.Требование");
		Возврат;
	КонецЕсли;
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыНДСЗавершение", ЭтотОбъект);

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ВыбратьДокументНДСДляПередачиФНС(ОписаниеОповещения, ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыТакскомИзФайлаОбмена(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Требование""'"), , "Объект.Требование");
		Возврат;
	КонецЕсли;
	
	ИННКППОрганизации = ПолучитьСтрокойИННКППОрганизации(Объект.Организация);
	
	ПараметрыФормы = Новый Структура("ИННКППОрганизации, ИдентификаторФормыВладельца", ИННКППОрганизации, УникальныйИдентификатор);
	
	//Описание оповещения
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыТакскомИзФайлаОбменаЗавершение", ЭтотОбъект);
	
	//Открываем форму выбора сканированных документов, результат закрытия передаем в ДобавитьСканированныеДокументыЗавершение
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаЗагрузкаДокументовИзФайлаОбмена", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	Попытка
		РезультатЗаписи = Записать();
	Исключение
		РезультатЗаписи = Ложь;
	КонецПопытки;
	
	Если НЕ РезультатЗаписи Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Во время сохранения произошли ошибки! Продолжение невозможно.'"));
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаПередОтправкой(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	//обновление файлов перед отправкой
	
	РезультатОбновления = ОбновитьФайлыДокументовИБНаСервере();

	Если РезультатОбновления Тогда
		
		РазвернутьДеревоДокументов();
		
	Иначе
		
		ПоказатьПредупреждение(, "Не удалось обновить файлы документов базы данных!");
		Возврат;
		
	КонецЕсли;
	
	ТребуетсяРазбитьНаНесколько = (ДопустимоеКоличествоФайлов < 0) ИЛИ (ДопустимоеКоличествоМегабайт < 0);
	
	Если ТребуетсяРазбитьНаНесколько Тогда
		
		Если ДопустимоеКоличествоФайлов < 0 Тогда
			
			ТекстВопроса = "Допустимое количество файлов превышено на " +(-ДопустимоеКоличествоФайлов) + ".";
			
		ИначеЕсли ДопустимоеКоличествоМегабайт < 0 Тогда
			
			ТекстВопроса = "Допустимый размер описи превышен на " +(-ДопустимоеКоличествоМегабайт) + " Мб.";
		
		КонецЕсли;
		
		ТекстВопроса = ТекстВопроса + "
		|Перед отправкой текущий ответ на требование требуется разбить на несколько.";
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(Истина, "Разбить");
		СписокКнопок.Добавить(Ложь, "Отмена");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОтправитьВопросРазбитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		Возврат;
		
	Иначе
		ТекстВопроса = "Ответ на требование о представлении документов (информации) будет отправлен в ФНС. Продолжить?";
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОтправитьВопросОписьБудетОтправленаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	УправлениеСтатусомИДоступностью();

КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ДанныеСтроки = Элементы.ПредставляемыеДокументы.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено И НЕ ДанныеСтроки.ЭтоГруппа Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОбъект) Тогда
			ПоказатьЗначение(, ДанныеСтроки.СсылкаНаОбъект);
		ИначеЕсли ДанныеСтроки.Загружен Тогда
			ОткрытьФормуЗагруженногоДокумента(ДанныеСтроки, Ложь);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


&НаСервере
Процедура СформироватьСоставМенюДобавитьИзБазы()
	
	СоответствиеВидовДокументовНДС = ПолучитьСоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС();
	
	Если СоответствиеВидовДокументовНДС.Количество() = 0 Тогда
		//В прикладном решении нет ни одного объекта метаданных, соответствующего хотя бы одному из видов документов категории "Отчеты по НДС"
		Элементы.ПредставляемыеДокументыДобавитьДокументыНДС.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВычисляемыеПоляДереваДокументов(Форма)
	
	ЕстьАкты = Ложь;
	
	ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	ДеревоДокументов = Форма.ДеревоДокументов;
	ГруппыДок = ДеревоДокументов.ПолучитьЭлементы();
	Для каждого ГруппаДок Из ГруппыДок Цикл
		// это строка группы документов
		ГруппаДок.ЭтоГруппа = Истина;
		
		ТекстПорядковыйНомерВыгрузки = ?(ГруппаДок.ЯвляетсяИнформацией, "2.", "1.");
		ТекстПорядковыйНомерВыгрузки = ТекстПорядковыйНомерВыгрузки + Формат(ГруппаДок.ПорядковыйНомер, "ЧЦ=2; ЧН=; ЧВН=");
		ГруппаДок.ПорядковыйНомерВыгрузки = ТекстПорядковыйНомерВыгрузки;
		
		ГруппаДок.ИсточникДокумента = 0;
		
		ЭлементыДок = ГруппаДок.ПолучитьЭлементы();
		
		КоличествоДокументов = ЭлементыДок.Количество();
		ТекстСоставноеПоле = "Пункт требования " + ТекстПорядковыйНомерВыгрузки + " (" + СформироватьСтрокуПредставленияДокументов(КоличествоДокументов) + ")";
		
		ГруппаДок.СоставноеПоле = ТекстСоставноеПоле;
		
		Для каждого ЭлементДок Из ЭлементыДок Цикл
			// это строка документа
			ЭлементДок.ЭтоГруппа = Ложь;
			
			Если НЕ ЭлементДок.Загружен Тогда
				
				ТекстСоставноеПоле = ЭлементДок.СсылкаНаОбъект;
				
				Если ТипЗнч(ЭлементДок.СсылкаНаОбъект) = ТипСкан Тогда
					ЭлементДок.ИсточникДокумента = 2;
				Иначе
					ЭлементДок.ИсточникДокумента = 1;
				КонецЕсли;
				
			Иначе
				
				ЭлементДок.ИсточникДокумента = 3;
				
				ДобавкаНаправление = ?(ЭлементДок.ЗД_Направление = "Входящий", " (Полученный)", ""); 
				ТекстСоставноеПоле = Строка(ЭлементДок.ВидДокумента) + " " + ЭлементДок.ЗД_Номер + " от " + Формат(ЭлементДок.ЗД_Дата, "ДЛФ=D") + ДобавкаНаправление;
				
			КонецЕсли;
			
			Если ЭлементДок.ИсточникДокумента <> 2 И ЭлементДок.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот") Тогда
				ЕстьАкты = Истина;
				Если НЕ ЗначениеЗаполнено(ЭлементДок.НомерДокОсн) ИЛИ НЕ ЗначениеЗаполнено(ЭлементДок.ДатаДокОсн) Тогда
				
					ЭлементДок.ПредставлениеОснования = "Заполнить договор";
				Иначе
					//реквизиты договора заполнены
					ЭлементДок.ПредставлениеОснования = "Договор " + Строка(ЭлементДок.НомерДокОсн) + " от " + Формат(ЭлементДок.ДатаДокОсн, "ДЛФ=D");
				
				КонецЕсли;
	            
			КонецЕсли;
			
			ЭлементДок.СоставноеПоле = ТекстСоставноеПоле;
			
		КонецЦикла;
		
		
		
	КонецЦикла;
	
	Форма.Элементы.ПредставляемыеДокументыПредставлениеОснования.Видимость = ЕстьАкты;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДокументов(СсылкаНаДокумент)
	
	ДеревоОбъект  = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ЯвляетсяИнформацией КАК ЯвляетсяИнформацией,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ВидДокумента КАК ВидДокумента,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.СсылкаНаОбъект,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Номер,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Дата,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Контрагент,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.КНД,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Загружен_Направление,		
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.НомерДокументаОснования,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ДатаДокументаОснования,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаДанных,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ИмяФайлаПодписи,		
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ВерсияФайлаДанных,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеКНД,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаДанных,
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.ПодтверждениеИмяФайлаПодписи
		|ИЗ
		|	Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.ПредставляемыеДокументы КАК ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы
		|ГДЕ
		|	ОписиИсходящихДокументовВНалоговыеОрганыПредставляемыеДокументы.Ссылка = &СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЯвляетсяИнформацией,
		|	ПорядковыйНомер
		|ИТОГИ ПО
		|	ЯвляетсяИнформацией,
		|	ПорядковыйНомер,
		|	ВидДокумента";

	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаДокумент);

	Результат = Запрос.Выполнить();

	ВыборкаЯвляетсяИнформацией = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоОбъект  = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	
	Пока ВыборкаЯвляетсяИнформацией.Следующий() Цикл
		
		ВыборкаПорядковыйНомер = ВыборкаЯвляетсяИнформацией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПорядковыйНомер.Следующий() Цикл
			
			// добавляем строку групп документов
			СтрокаГрупп = ДеревоОбъект.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГрупп,ВыборкаПорядковыйНомер);

			ВыборкаВидДокумента = ВыборкаПорядковыйНомер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВидДокумента.Следующий() Цикл
				
				ВыборкаДетальныеЗаписи = ВыборкаВидДокумента.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					// добавляем строку документов
					НоваяСтрока = СтрокаГрупп.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					
					НоваяСтрока.НомерДокОсн 					= ВыборкаДетальныеЗаписи.НомерДокументаОснования;
					НоваяСтрока.ДатаДокОсн 						= ВыборкаДетальныеЗаписи.ДатаДокументаОснования;
					
					Если ВыборкаДетальныеЗаписи.Загружен Тогда
						
						НоваяСтрока.ЗД_Номер 					= ВыборкаДетальныеЗаписи.Загружен_Номер;
						НоваяСтрока.ЗД_Дата 					= ВыборкаДетальныеЗаписи.Загружен_Дата;
						НоваяСтрока.ЗД_Контрагент				= ВыборкаДетальныеЗаписи.Загружен_Контрагент;
						НоваяСтрока.ЗД_Направление 				= ВыборкаДетальныеЗаписи.Загружен_Направление;
						
					КонецЕсли;
					
					НоваяСтрока.КНД 							= ВыборкаДетальныеЗаписи.КНД;
					НоваяСтрока.ПодтверждениеКНД 				= ВыборкаДетальныеЗаписи.ПодтверждениеКНД;
					НоваяСтрока.ПодтверждениеИмяФайлаДанных 	= ВыборкаДетальныеЗаписи.ПодтверждениеИмяФайлаДанных;
					НоваяСтрока.ПодтверждениеИмяФайлаПодписи 	= ВыборкаДетальныеЗаписи.ПодтверждениеИмяФайлаПодписи;
					
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	// Преобразование объекта прикладного типа ДеревоЗначений
	// в реквизит управляемой формы (данные формы)
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоДокументов");

	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(СсылкаНаОбъект)
	
	//проверяем на принадлежность к сканированным
	ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");

	Если ТипЗнч(СсылкаНаОбъект) = ТипСкан Тогда
		ПоказатьЗначение(, СсылкаНаОбъект);
		Возврат;
	КонецЕсли;
	
	//проверяем на принадлежность к отчетам НДС
	СоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС = ПолучитьСоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС();
	
	ВидДокумента = СоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС[ТипЗнч(СсылкаНаОбъект)];
	Если ВидДокумента <> Неопределено  Тогда
		ПоказатьЗначение(, СсылкаНаОбъект);
		Возврат;
	КонецЕсли;
	
	//считаем, что это ЭД
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьАктуальныйЭД(СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеДоговораЗавершение(СтуктураРезультат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(СтуктураРезультат) <> Тип("Структура")  Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоДокументов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
	ТекущаяСтрока.НомерДокОсн = СтуктураРезультат.Номер;
	ТекущаяСтрока.ДатаДокОсн = СтуктураРезультат.Дата;
	
	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	Записать();
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПунктТребованияГруппыДокументов(ВыбранныйПунктТребования, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныйПунктТребования) = Тип("Строка") Тогда
		//Был выбран пункт требования
		
		СтруктураПунктТребования = РазложитьПунктТребования(ВыбранныйПунктТребования);
		
		//поиск указанного пункта требования
		ЦелеваяГруппаДокументов = Неопределено;
		Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
			Если ГруппаДокументов.ПорядковыйНомерВыгрузки = ВыбранныйПунктТребования Тогда
				ЦелеваяГруппаДокументов = ГруппаДокументов;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если ЦелеваяГруппаДокументов = Неопределено Тогда
			//группы документов с выбранным пунктом требования нет, просто переименовываем текущую
			ГруппаДокументов = ДеревоДокументов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
			
			ГруппаДокументов.ЯвляетсяИнформацией 		= СтруктураПунктТребования.ЯвляетсяИнформацией;
			ГруппаДокументов.ПорядковыйНомер 			= СтруктураПунктТребования.ПорядковыйНомер;
			ГруппаДокументов.ПорядковыйНомерВыгрузки 	= ВыбранныйПунктТребования;
		Иначе
			//нашлась группа документов с выбранным пунктом требования, переносим в нее документы исходной группы
			МассивИдентификаторовВыделенныхСтрок = Новый Массив;
			
			ГруппаДокументов = ДеревоДокументов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
			Для каждого СтрокаДокумент Из ГруппаДокументов.ПолучитьЭлементы() Цикл
				МассивИдентификаторовВыделенныхСтрок.Добавить(СтрокаДокумент.ПолучитьИдентификатор());
			КонецЦикла;
			
			ПеренестиВыделенныеСтрокиЗавершениеНаСервере(ВыбранныйПунктТребования, МассивИдентификаторовВыделенныхСтрок);
			УдалитьПустыеГруппыДокументов();
		КонецЕсли;
		
		ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
	Иначе
		//Не был выбран пункт требования 	
	КонецЕсли;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВыделенныеСтрокиЗавершение(ВыбранныйПунктТребования, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПунктТребования) = Тип("Строка") Тогда
		//Был выбран пункт требования
		
		МассивИдентификаторовВыделенныхСтрок = ДополнительныеПараметры.МассивИдентификаторовВыделенныхСтрок;
		ПеренестиВыделенныеСтрокиЗавершениеНаСервере(ВыбранныйПунктТребования, МассивИдентификаторовВыделенныхСтрок);
		УдалитьПустыеГруппыДокументов();
		ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);
		Записать();
	Иначе
		//Не был выбран пункт требования 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВыделенныеСтрокиЗавершениеНаСервере(ВыбранныйПунктТребования, МассивИдентификаторовВыделенныхСтрок) 
	
	СтруктураПунктТребования = РазложитьПунктТребования(ВыбранныйПунктТребования);
	
	//поиск указанного пункта требования
	ЦелеваяГруппаДокументов = Неопределено;
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		Если ГруппаДокументов.ПорядковыйНомерВыгрузки = ВыбранныйПунктТребования Тогда
			ЦелеваяГруппаДокументов = ГруппаДокументов;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если ЦелеваяГруппаДокументов = Неопределено Тогда
		ЦелеваяГруппаДокументов = ДеревоДокументов.ПолучитьЭлементы().Добавить();
		ЦелеваяГруппаДокументов.ЯвляетсяИнформацией = СтруктураПунктТребования.ЯвляетсяИнформацией;
		ЦелеваяГруппаДокументов.ПорядковыйНомер = СтруктураПунктТребования.ПорядковыйНомер;
	КонецЕсли;
	
	// определили целевую группу документов
	
	// преобразуем массив, разложив выделенные строки групп на составляющие
	НовыйМассивИдентификаторов = Новый Массив;
	Для каждого ИдентификаторВыделеннойСтроки Из МассивИдентификаторовВыделенныхСтрок Цикл
		ВыделеннаяСтрока = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если ВыделеннаяСтрока.ЭтоГруппа Тогда
			//это группа
			Для каждого СтрокаДокумента Из ВыделеннаяСтрока.ПолучитьЭлементы() Цикл
				ДополнитьМассивЗначением(НовыйМассивИдентификаторов, СтрокаДокумента.ПолучитьИдентификатор());
			КонецЦикла;
		Иначе
			//это документ
			ДополнитьМассивЗначением(НовыйМассивИдентификаторов, ИдентификаторВыделеннойСтроки);
		КонецЕсли;
	КонецЦикла;
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для каждого ИдентификаторСтрокиУдаляемогоДокумента Из НовыйМассивИдентификаторов Цикл
		УдаляемаяСтрокаДокумента = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторСтрокиУдаляемогоДокумента);
		
		МассивУдаляемыхСтрок.Добавить(УдаляемаяСтрокаДокумента);
		
		НоваяСтрокаДокумента = ЦелеваяГруппаДокументов.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента, УдаляемаяСтрокаДокумента);
		
		НоваяСтрокаДокумента.ЯвляетсяИнформацией = СтруктураПунктТребования.ЯвляетсяИнформацией;
		НоваяСтрокаДокумента.ПорядковыйНомер = СтруктураПунктТребования.ПорядковыйНомер;
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		УдаляемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(УдаляемаяСтрока);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗагруженногоДокумента(ДанныеСтроки, ДоступностьДоговора = Истина)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДоступностьДоговора", 	ДоступностьДоговора);
	
	СтруктураПараметров.Вставить("ВидДокумента", 			ДанныеСтроки.ВидДокумента);
	СтруктураПараметров.Вставить("Номер", 					ДанныеСтроки.ЗД_Номер);
	СтруктураПараметров.Вставить("Дата", 					ДанныеСтроки.ЗД_Дата);
	СтруктураПараметров.Вставить("КНД", 					ДанныеСтроки.КНД);
	СтруктураПараметров.Вставить("Направление", 			ДанныеСтроки.ЗД_Направление);
	СтруктураПараметров.Вставить("Контрагент", 				ДанныеСтроки.ЗД_Контрагент);
	СтруктураПараметров.Вставить("ИмяФайлаДанных", 			ДанныеСтроки.ИмяФайлаДанных);
	СтруктураПараметров.Вставить("ИмяФайлаПодписи",			ДанныеСтроки.ИмяФайлаПодписи);
	СтруктураПараметров.Вставить("НомерДокументаОснования",	ДанныеСтроки.НомерДокОсн);
	СтруктураПараметров.Вставить("ДатаДокументаОснования",	ДанныеСтроки.ДатаДокОсн);
	
	АдресаФайловЗагруженногоДокумента = КонтекстЭДОКлиент.ПолучитьАдресаФайловЗагруженногоДокумента(Объект.Ссылка, СтруктураПараметров.ИмяФайлаДанных, СтруктураПараметров.ИмяФайлаПодписи, УникальныйИдентификатор);
	
	Если АдресаФайловЗагруженногоДокумента <> Неопределено Тогда
		АдресФайлаДанных = АдресаФайловЗагруженногоДокумента.АдресФайлаДанных;	
		АдресФайлаПодписи = АдресаФайловЗагруженногоДокумента.АдресФайлаПодписи;	
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("АдресФайлаДанных", 		АдресФайлаДанных);
	СтруктураПараметров.Вставить("АдресФайлаПодписи",		АдресФайлаПодписи);
	
	ПараметрыФормы = Новый Структура("СтруктураПараметров", СтруктураПараметров);
	
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаЗагруженногоИз1СТакскомДокумента", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтрокуПредставленияДокументов(КоличествоДокументов)
	
	РезультатСтрокой = СтрЗаменить(ЧислоПрописью(КоличествоДокументов, "Л = ru_RU; НП=Истина, НД=Ложь", "документ, документа, документов, м, , , , ,0"),
								ЧислоПрописью(КоличествоДокументов, "Л = ru_RU; НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
								"");
	
	Возврат Формат(КоличествоДокументов, "ЧН=0; ЧГ=0") + " " + РезультатСтрокой;
	
КонецФункции

&НаСервере
Функция ОкруглитьРазмер(РазмерВБайтах)
	
	РазмерВМегабайтах = Окр(РазмерВБайтах / 1024 / 1024, 2, РежимОкругления.Окр15как20);
	
	Если РазмерВМегабайтах = 0 Тогда
		РазмерВМегабайтах = 0.01;	
	КонецЕсли;
	
	Возврат РазмерВМегабайтах;
	
КонецФункции

&НаСервере
Процедура ОбновитьРазмерыОписи(СсылкаНаДокумент)
	
	Если ЭтотОбъект.ТолькоПросмотр Тогда
		
		Элементы.ПредставляемыеДокументыФайлы.Видимость = Ложь;
		Элементы.ГруппаРазмерыОписи.Видимость = Ложь;
		Возврат;
		
	Иначе
		
		Элементы.ПредставляемыеДокументыФайлы.Видимость = Истина;
		Элементы.ГруппаРазмерыОписи.Видимость = Истина;	
	
	КонецЕсли;
	
	НадписьРазмерыОписи = Элементы.НадписьРазмерыОписи;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	//Получим таблицу файлов
	ТЗДокументыФайлыРазмер = КонтекстЭДОСервер.ПолучитьТаблицуДокументовОписиИРазмерыФайлов(СсылкаНаДокумент);
	
	СуммаКолвоФайлов = 6;
	СуммаРазмерФайлов = 0;
	МаксКолвоФайлов = 2500;
	МаксРазмерФайлов = 72*1024*1024;
	СоответствиеДокументФайлы = Новый Соответствие;
	
	СуммаКолвоФайловГруппы = 0;
	СуммаРазмерФайловГруппы = 0;
	
	//Сформируем соответствие файлов
	Для каждого СтрокаДокумент Из ТЗДокументыФайлыРазмер Цикл
		
		РазмерВБайтах = СтрокаДокумент.РазмерФайлов;
		КолвоФайлов = СтрокаДокумент.КоличествоФайлов;
		
		СуммаКолвоФайлов = СуммаКолвоФайлов + КолвоФайлов;
		СуммаРазмерФайлов = СуммаРазмерФайлов + РазмерВБайтах;

		СтруктураФайлы = Новый Структура;
		СтруктураФайлы.Вставить("Количество", КолвоФайлов);
		СтруктураФайлы.Вставить("Размер", РазмерВБайтах);
		
		СоответствиеДокументФайлы.Вставить(СтрокаДокумент.ИдентификаторДокумента, СтруктураФайлы);
		
	КонецЦикла;
	
	//Заполним таблицу документов данными из соответствия файлов
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если ЗначениеЗаполнено(ЭлементГруппы.ИмяФайлаДанных) Тогда
				ИдентификаторДокумента = ЭлементГруппы.ИмяФайлаДанных;
			Иначе
				ИдентификаторДокумента = ЭлементГруппы.СсылкаНаОбъект;
			КонецЕсли; 
			
			СтруктураФайлы = СоответствиеДокументФайлы[ИдентификаторДокумента];
			Если СтруктураФайлы <> Неопределено Тогда
				РазмерВБайтах = СтруктураФайлы.Размер;
				РазмерВМегабайтах = ОкруглитьРазмер(РазмерВБайтах);
				
				ЭлементГруппы.Файлы = Формат(РазмерВМегабайтах, "ЧГ=0") + " Мб";
				ЭлементГруппы.КоличествоФайлов = СтруктураФайлы.Количество; // служебное невидимое поле
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//Заполним элементы группы размеров описи
	ДопустимоеКоличествоФайлов = МаксКолвоФайлов - СуммаКолвоФайлов;
	ДопустимоеКоличествоМегабайт = ОкруглитьРазмер(МаксРазмерФайлов - СуммаРазмерФайлов);
	ТребуетсяРазбитьНаНесколько = (ДопустимоеКоличествоФайлов < 0) ИЛИ (ДопустимоеКоличествоМегабайт < 0);
	
	СодержимоеТекста = "";
	
	Если ТребуетсяРазбитьНаНесколько Тогда
		
		ЦветТекста = Новый Цвет(255, 0, 0); // красный
		
		Если ДопустимоеКоличествоФайлов < 0 Тогда
			
			СодержимоеТекста = "Допустимое количество файлов превышено на " +(-ДопустимоеКоличествоФайлов) + ".";
			
		ИначеЕсли ДопустимоеКоличествоМегабайт < 0 Тогда
			
			СодержимоеТекста = "Допустимый размер описи превышен на " +(-ДопустимоеКоличествоМегабайт) + " Мб.";
		
		КонецЕсли;
		
		
	Иначе
		//отправке ничего не угрожает
		
		ЦветТекста = Новый Цвет(134, 134, 134); //серый
		
		СодержимоеТекста = "Можно добавить еще " + ДопустимоеКоличествоМегабайт + " Мб.";
		
	КонецЕсли;
	
	НадписьРазмерыОписи.ЦветТекста = ЦветТекста;
	НадписьРазмерыОписи.Заголовок = СодержимоеТекста;
	
	Элементы.НадписьРазбитьНаНесколько.Видимость = ТребуетсяРазбитьНаНесколько;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования()
	// выберем пункт требования и добавим документы
	//Описание оповещения
	ДополнительныеПараметры = Новый Структура("МассивРезультат", МассивВыбранныхДокументов); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыПоПунктуТребования", ЭтотОбъект, ДополнительныеПараметры);
	
	//Открываем форму выбора пункта требования, результат закрытия передаем в ДобавитьДокументыПоПунктуТребования
	ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаВыбораПунктаТребования", , ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДокументов()
	
	Для Каждого СтрокаГруппы Из ДеревоДокументов.ПолучитьЭлементы() Цикл
        Элементы.ПредставляемыеДокументы.Развернуть(СтрокаГруппы.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Функция ПолучитьТекущийДокумент()
	
	ТекущаяСтрока = Элементы.ПредставляемыеДокументы.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущийДокумент = ДеревоДокументов.НайтиПоИдентификатору(ТекущаяСтрока).СоставноеПоле;
	Иначе
		ТекущийДокумент = Неопределено;
	КонецЕсли;

	Возврат ТекущийДокумент;

КонецФункции 

&НаСервере
Процедура УстановитьТекущийДокумент(ПредставлениеДокумента)
	
	ИдентификаторСтроки = Неопределено;
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если ЭлементГруппы.СоставноеПоле = ПредставлениеДокумента Тогда
				
				ИдентификаторСтроки = ЭлементГруппы.ПолучитьИдентификатор();
				Прервать;
				
			КонецЕсли; 
			
			
		КонецЦикла;
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ПредставляемыеДокументы.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Функция ОбновитьФайлыДокументовИБНаСервере()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер.ОбновитьФайлыДокументовИБОписиИсходящихДокументов(Объект.Ссылка) Тогда
		
		Прочитать();
		
		ПредставлениеТекущегоДокумента = ПолучитьТекущийДокумент();
		
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоДокументов(Объект.Ссылка);
		
		УстановитьТекущийДокумент(ПредставлениеТекущегоДокумента);
		
		ОбновитьРазмерыОписи(Объект.Ссылка);
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РазбитьНаНесколькоЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ ПроверкаПередРазбивкой(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	МассивСозданныхОписей = РазбитьНаНесколькоНаСервере(ТекстПредупреждения);
	Если МассивСозданныхОписей = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	    Возврат;
	Иначе
		
		Оповестить("Запись_ОписиИсходящихДокументовВНалоговыеОрганы",,Объект.Ссылка);
		
		Прочитать();

		//обновим дерево документов текущей описи   
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоДокументов(Объект.Ссылка);
		ОбновитьРазмерыОписи(Объект.Ссылка);
		
		//откроем форму групповой отправки
		СписокОписей = Новый СписокЗначений;
		СписокОписей.ЗагрузитьЗначения(МассивСозданныхОписей);
		СписокОписей.Добавить(Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокОписей", СписокОписей);
		ПараметрыФормы.Вставить("Требование", Объект.Требование);
		
		ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаГрупповойОтправки", ПараметрыФормы);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция РазбитьНаНесколькоНаСервере(ТекстПредупреждения)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.РазбитьОписьИсходящихДокументовНаНесколько(Объект.Ссылка, ТекстПредупреждения);
		
КонецФункции

&НаКлиенте
Процедура ДобавитьДокументыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено И РезультатВыбора.Количество() > 0 Тогда
		
		МассивВыбранныхДокументов = РезультатВыбора;
		ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
						
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыПоПунктуТребования(ВыбранныйПунктТребования, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПунктТребования) = Тип("Строка") Тогда
		//Был выбран пункт требования
		
		ОтработатьРезультатДобавленияДокументовНаСервере(ВыбранныйПунктТребования, ДополнительныеПараметры.МассивРезультат);
		
		Записать();
		ОбновитьРазмерыОписи(Объект.Ссылка);
		
		РазвернутьДеревоДокументов();
		
	Иначе
		//Не был выбран пункт требования 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС()
	
	РезультатСоответствие = Новый Соответствие; 
	
	МассивВидовДокументовНДС = Новый Массив;
	МассивВидовДокументовНДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.КнигаПокупок"));
	МассивВидовДокументовНДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.КнигаПродаж"));
	МассивВидовДокументовНДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ДополнительныйЛистКнигиПокупок"));
	МассивВидовДокументовНДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ДополнительныйЛистКнигиПродаж"));
	МассивВидовДокументовНДС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПредставляемыхДокументов.ЖурналПолученныхИВыставленныхСчетовФактур"));
	
	СоответствиеТиповИсточниковВидамДокументовФНС = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС(СоответствиеТиповИсточниковВидамДокументовФНС);
	
	Для каждого ВидДокументаНДС Из МассивВидовДокументовНДС Цикл
		МассивТипоИсточников = СоответствиеТиповИсточниковВидамДокументовФНС[ВидДокументаНДС];
		
		Если МассивТипоИсточников <> Неопределено Тогда
			Для каждого ТипИсточника Из МассивТипоИсточников Цикл
				РезультатСоответствие.Вставить(ТипИсточника, ВидДокументаНДС);
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;

	Возврат РезультатСоответствие;
	
КонецФункции 

&НаКлиенте
Процедура ДобавитьДокументыНДСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС = ПолучитьСоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС();
		
		ВидДокумента = СоответствиеВидДокументаФНСТипуВыбранногоДокументаНДС[ТипЗнч(Результат)];
		
		Если ВидДокумента = Неопределено  Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбор отменен. Не удалось определить вид выбранного документа.'"));
			Возврат;
		КонецЕсли;
		
		МассивВыбранныхДокументов = Новый Массив;
		СтруктураСвойств = Новый Структура("ВыбранныйДокумент, ВидДокументаФНС");
		СтруктураСвойств.ВыбранныйДокумент 	= Результат;
		СтруктураСвойств.ВидДокументаФНС 	= ВидДокумента;
		
		МассивВыбранныхДокументов.Добавить(СтруктураСвойств);
		ПодключитьОбработчикОжидания("Подключаемый_ДобавитьДокументыПередВыборомПунктаТребования", 0.2, Истина);
	КонецЕсли;     
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыТакскомИзФайлаОбменаЗавершение(СтруктураВыбора, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВыбора <> Неопределено Тогда
		
		// выберем пункт требования и добавим документы
		//Описание оповещения
		ДополнительныеПараметры = Новый Структура("СтруктураВыбора", СтруктураВыбора); 
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументыТакскомИзФайлаОбменаПоПунктуТребования", ЭтотОбъект, ДополнительныеПараметры);
	
		//Открываем форму выбора пункта требования, результат закрытия передаем в ДобавитьДокументыТакскомИзФайлаОбменаПоПунктуТребования
		ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаВыбораПунктаТребования", , ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
						
	КонецЕсли;   
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументыТакскомИзФайлаОбменаПоПунктуТребования(ВыбранныйПунктТребования, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйПунктТребования) = Тип("Строка") Тогда
		//Был выбран пункт требования
		
		ОтработатьРезультатДобавленияДокументовФайлаОбменаНаСервере(ВыбранныйПунктТребования, ДополнительныеПараметры.СтруктураВыбора);
		
		Записать();
		ОбновитьРазмерыОписи(Объект.Ссылка);
		
	Иначе
		//Не был выбран пункт требования 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтработатьРезультатДобавленияДокументовФайлаОбменаНаСервере(ПунктТребования, СтруктураВыбора)
	
	ТЗЗагружаемыеДокументы = ПолучитьИзВременногоХранилища(СтруктураВыбора.АдресТЗЗагруженныеДокументы);
	ПолноеИмяФайлаОбмена = СтруктураВыбора.ПолноеИмяФайлаОбмена;
	
	ДокументыДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	СтрокиДерева = ДокументыДеревоЗначений.Строки;

	//определим, есть ли новые документы среди выбранных
	ЕстьНовыеДокументы = Ложь;
	
	Для каждого СвойстваЗагружаемогоДокумента Из ТЗЗагружаемыеДокументы Цикл
		
		//поиск дублей
		НайденнаяСтрока = СтрокиДерева.Найти(СвойстваЗагружаемогоДокумента.ФайлВыгрузкиИмя, "ИмяФайлаДанных", Истина);
		Если НайденнаяСтрока = Неопределено Тогда
			// это новый документ
			ЕстьНовыеДокументы = Истина;
			Прервать;
		КонецЕсли;	
		
    КонецЦикла;

	Если НЕ ЕстьНовыеДокументы Тогда
		//все документы уже загружены
		Возврат Истина;	
	КонецЕсли;
	
	// определили, новые документы среди выбранных - есть
	
	СтруктураПунктТребования = РазложитьПунктТребования(ПунктТребования);
	
	//поиск указанного пункта требования
	ГруппаДокументов = СтрокиДерева.Найти(ПунктТребования, "ПорядковыйНомерВыгрузки", Ложь);
	Если ГруппаДокументов = Неопределено Тогда
		
		// такой группы еще нет, добавим новую строку
		ГруппаДокументов = СтрокиДерева.Добавить();
		ГруппаДокументов.ЯвляетсяИнформацией = СтруктураПунктТребования.ЯвляетсяИнформацией;
		ГруппаДокументов.ПорядковыйНомер = СтруктураПунктТребования.ПорядковыйНомер;

	КонецЕсли;
	
	// заполняем дерево документов и массив имен новых файлов
	МассивИменНовыхФайлов = Новый Массив;
	
	Для каждого СвойстваЗагружаемогоДокумента Из ТЗЗагружаемыеДокументы Цикл
		
		//поиск дублей
		НайденнаяСтрока = СтрокиДерева.Найти(СвойстваЗагружаемогоДокумента.ФайлВыгрузкиИмя, "ИмяФайлаДанных", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			// такой документ уже есть
			Продолжить;
		КонецЕсли;	
		
		// добавляем в массив МассивИменНовыхФайлов имена файлов выгрузки и подписи 
		МассивИменНовыхФайлов.Добавить(СвойстваЗагружаемогоДокумента.ФайлВыгрузкиИмя);
		МассивИменНовыхФайлов.Добавить(СвойстваЗагружаемогоДокумента.ФайлПодписиИмя);
		
		Если ЗначениеЗаполнено(СвойстваЗагружаемогоДокумента.ПодтверждениеФайлВыгрузкиИмя) Тогда
			МассивИменНовыхФайлов.Добавить(СвойстваЗагружаемогоДокумента.ПодтверждениеФайлВыгрузкиИмя);
			МассивИменНовыхФайлов.Добавить(СвойстваЗагружаемогоДокумента.ПодтверждениеФайлПодписиИмя);
		КонецЕсли;
		
		НоваяСтрока = ГруппаДокументов.Строки.Добавить();
		НоваяСтрока.Загружен 			= Истина;
        
		НоваяСтрока.ЯвляетсяИнформацией = СтруктураПунктТребования.ЯвляетсяИнформацией;
		НоваяСтрока.ПорядковыйНомер = СтруктураПунктТребования.ПорядковыйНомер;
		
		НоваяСтрока.ВидДокумента = СвойстваЗагружаемогоДокумента.ВидДокумента;	
		
		НоваяСтрока.ЗД_Номер 			= СвойстваЗагружаемогоДокумента.Номер;
		НоваяСтрока.ЗД_Дата 			= СвойстваЗагружаемогоДокумента.Дата;
		НоваяСтрока.ЗД_Контрагент 		= СвойстваЗагружаемогоДокумента.Контрагент;
		НоваяСтрока.ДатаДокОсн 			= СвойстваЗагружаемогоДокумента.ДатаДокОсн;
		НоваяСтрока.НомерДокОсн 		= СвойстваЗагружаемогоДокумента.НомерДокОсн;
		НоваяСтрока.КНД 				= СвойстваЗагружаемогоДокумента.КНД;
		НоваяСтрока.ЗД_Направление 		= СвойстваЗагружаемогоДокумента.Направление;
		НоваяСтрока.ИмяФайлаДанных 		= СвойстваЗагружаемогоДокумента.ФайлВыгрузкиИмя;
		НоваяСтрока.ИмяФайлаПодписи 	= СвойстваЗагружаемогоДокумента.ФайлПодписиИмя;
		
		НоваяСтрока.ПодтверждениеКНД 				= СвойстваЗагружаемогоДокумента.ПодтверждениеКНД;
		НоваяСтрока.ПодтверждениеИмяФайлаДанных 	= СвойстваЗагружаемогоДокумента.ПодтверждениеФайлВыгрузкиИмя;
		НоваяСтрока.ПодтверждениеИмяФайлаПодписи 	= СвойстваЗагружаемогоДокумента.ПодтверждениеФайлПодписиИмя;
		
		ДобавкаНаправление = ?(НоваяСтрока.ЗД_Направление = "Входящий", " (Полученный)", ""); 
		НоваяСтрока.СоставноеПоле 			= Строка(НоваяСтрока.ВидДокумента) + " " + НоваяСтрока.ЗД_Номер + " от " + Формат(НоваяСтрока.ЗД_Дата, "ДЛФ=D") + ДобавкаНаправление;
	КонецЦикла;
	
	// Преобразование объекта прикладного типа ДеревоЗначений
	// в реквизит управляемой формы (данные формы)
	ЗначениеВРеквизитФормы(ДокументыДеревоЗначений, "ДеревоДокументов");

	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);

	// Загружаем новые файлы из пакета обмена
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	Если НЕ ЗагрузитьФайлыИзФайлаОбменаВИБ(Объект.Ссылка, ПолноеИмяФайлаОбмена, МассивИменНовыхФайлов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Произошла ошибка при загрузке документов из файла обмена.'"));
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтрокойИННКППОрганизации(СсылкаОрганизация)
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СсылкаОрганизация) Тогда
				Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СсылкаОрганизация, , "ИННФЛ");
				ИННКППОрганизации = СокрЛП(Сведения.ИННФЛ);
			Иначе
				Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СсылкаОрганизация, , "ИННЮЛ, КППЮЛ");
				ИННКППОрганизации = СокрЛП(Сведения.ИННЮЛ) + СокрЛП(Сведения.КППЮЛ);
			КонецЕсли;
			
		
	Возврат ИННКППОрганизации;        
	
КонецФункции

&НаСервере
Функция РазложитьПунктТребования(ПунктТребованияСтрокой)
	ЯвляетсяИнформацией = НЕ (Лев(ПунктТребованияСтрокой, 1) = "1");
	ПорядковыйНомер = Число(Прав(ПунктТребованияСтрокой, 2));
	СтруктураРезультат = Новый Структура("ЯвляетсяИнформацией, ПорядковыйНомер", ЯвляетсяИнформацией, ПорядковыйНомер);
	
	Возврат СтруктураРезультат;	
		
КонецФункции

&НаСервере
Процедура ОтработатьРезультатДобавленияДокументовНаСервере(ПунктТребования, МассивРезультат)
	
	ДокументыДеревоЗначений = РеквизитФормыВЗначение("ДеревоДокументов", Тип("ДеревоЗначений"));
	СтрокиДерева = ДокументыДеревоЗначений.Строки;

	МассивРезультатаПослеПоискаДублей = Новый Массив;
	
	ТаблицаНовыхДокументовИБГруппы = Новый ТаблицаЗначений;
	ТаблицаНовыхДокументовИБГруппы.Колонки.Добавить("ИмяФайла");
	ТаблицаНовыхДокументовИБГруппы.Колонки.Добавить("АдресФайла");

	//сформируем массивы ссылок на документы ЭД и документы НДС
	МассивНДС 	= Новый Массив;
	МассивЭД 	= Новый Массив;
	
	МассивАктовПриемки	= Новый Массив;
	
	ТипСкан = Тип("СправочникСсылка.СканированныеДокументыДляПередачиВЭлектронномВиде");
	
	Для каждого СтруктураСвойств Из МассивРезультат Цикл
		
		СсылкаНаОбъект 	= СтруктураСвойств.ВыбранныйДокумент;
		ВидДокумента 	= СтруктураСвойств.ВидДокументаФНС;
		
		//поиск дублей
		НайденнаяСтрока = СтрокиДерева.Найти(СсылкаНаОбъект, "СсылкаНаОбъект", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			// такая ссылка уже есть
			Продолжить;
		КонецЕсли;	
		
		МассивРезультатаПослеПоискаДублей.Добавить(СтруктураСвойств);
		
		Если ТипЗнч(СсылкаНаОбъект) <> ТипСкан Тогда
			
			Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.КнигаПокупок 
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.КнигаПродаж 
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДополнительныйЛистКнигиПокупок
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ДополнительныйЛистКнигиПродаж
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ЖурналПолученныхИВыставленныхСчетовФактур Тогда
				
				МассивНДС.Добавить(СсылкаНаОбъект);
				
			ИначеЕсли ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.СчетФактура
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ПередачаТоваров
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.ПередачаУслуг
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.УПД
				ИЛИ ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.УКД Тогда
				
				МассивЭД.Добавить(СсылкаНаОбъект);
				
				Если ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот Тогда
					МассивАктовПриемки.Добавить(СсылкаНаОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивРезультатаПослеПоискаДублей.Количество() = 0 Тогда
		//нет добавляемых документов
		Возврат;
	КонецЕсли;
	
	СтруктураПунктТребования = РазложитьПунктТребования(ПунктТребования);
	
	//поиск указанного пункта требования
	ГруппаДокументов = СтрокиДерева.Найти(ПунктТребования, "ПорядковыйНомерВыгрузки", Ложь);
	Если ГруппаДокументов = Неопределено Тогда
		
		// такой группы еще нет, добавим новую строку
		ГруппаДокументов = СтрокиДерева.Добавить();
		ГруппаДокументов.ЯвляетсяИнформацией = СтруктураПунктТребования.ЯвляетсяИнформацией;
		ГруппаДокументов.ПорядковыйНомер = СтруктураПунктТребования.ПорядковыйНомер;

	КонецЕсли;
	
	// обработаем сформированные массивы
	// сформируем соответствия с файлами выгрузки
	СоответствиеНДС 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьФайлыВыгрузкиНДС(МассивНДС, УникальныйИдентификатор);
	СоответствиеЭД 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьФайлыВыгрузкиЭД(МассивЭД, УникальныйИдентификатор);
	
	СоответствиеДоговорАкта = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьНомерДатаДоговораДокументов(МассивАктовПриемки);
	
	Для каждого СтруктураСвойств Из МассивРезультатаПослеПоискаДублей Цикл
		
		СсылкаНаОбъект 	= СтруктураСвойств.ВыбранныйДокумент;
		ВидДокумента 	= СтруктураСвойств.ВидДокументаФНС;
		
		НоваяСтрока = ГруппаДокументов.Строки.Добавить();
		
		НоваяСтрока.ЯвляетсяИнформацией = СтруктураПунктТребования.ЯвляетсяИнформацией;
		НоваяСтрока.ПорядковыйНомер = СтруктураПунктТребования.ПорядковыйНомер;
		
		НоваяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
		НоваяСтрока.ВидДокумента = ВидДокумента;	
		
		Если ТипЗнч(СсылкаНаОбъект) <> ТипСкан Тогда
			
			Если СоответствиеНДС <> Неопределено Тогда
				МассивФайлов = СоответствиеНДС.Получить(СсылкаНаОбъект);
			Иначе
				МассивФайлов = Неопределено;
			КонецЕсли;
			
			Если МассивФайлов <> Неопределено Тогда
				// это документ НДС
				Для каждого ДанныеФайла Из МассивФайлов Цикл
					Если ДанныеФайла.ТипФайла = "ФайлВыгрузки" Тогда
						НоваяСтрока.ИмяФайлаДанных = ДанныеФайла.ИмяФайла;
						НоваяСтрока.ВерсияФайлаДанных = СсылкаНаОбъект.ВерсияДанных;
					КонецЕсли;
					
					//Заполняем ТаблицаНовыхДокументовИБГруппы
					НоваяСтрокаТаблицаНовыхДокументовИБГруппы = ТаблицаНовыхДокументовИБГруппы.Добавить();
					НоваяСтрокаТаблицаНовыхДокументовИБГруппы.ИмяФайла 		= ДанныеФайла.ИмяФайла;
					НоваяСтрокаТаблицаНовыхДокументовИБГруппы.АдресФайла 	= ДанныеФайла.АдресВременногоХранилища;
					
				КонецЦикла;
				
			Иначе
				
				Если СоответствиеЭД <> Неопределено Тогда
					МассивФайлов = СоответствиеЭД.Получить(СсылкаНаОбъект);
				Иначе
					МассивФайлов = Неопределено;
				КонецЕсли;
				
				Если МассивФайлов <> Неопределено Тогда
					// это документ ЭД
					// сначала извлекаем имена файлов выгрузки (относительно них генерируем имена файлов подписи)
					
					ИмяФайлаВыгрузки 		= "";
					ИмяФайлаПодтверждения 	= "";
					
					Для каждого ДанныеФайла Из МассивФайлов Цикл
						Если ДанныеФайла.ТипФайла = "ФайлВыгрузки" Тогда
							ИмяФайлаВыгрузки = ДанныеФайла.ИмяФайла;	
						ИначеЕсли ДанныеФайла.ТипФайла = "ФайлПодтверждения" Тогда
							ИмяФайлаПодтверждения = ДанныеФайла.ИмяФайла;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого ДанныеФайла Из МассивФайлов Цикл
						
						Если ДанныеФайла.ТипФайла = "ФайлВыгрузки" Тогда
							НоваяСтрока.ИмяФайлаДанных = ИмяФайлаВыгрузки;
							НоваяСтрока.ВерсияФайлаДанных = СсылкаНаОбъект.ВерсияДанных;
							НоваяСтрока.КНД = ДанныеФайла.КНД;
							
							//Заполняем ТаблицаНовыхДокументовИБГруппы
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы = ТаблицаНовыхДокументовИБГруппы.Добавить();
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы.ИмяФайла 		= НоваяСтрока.ИмяФайлаДанных;
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы.АдресФайла 	= ДанныеФайла.АдресВременногоХранилища;
							
						ИначеЕсли ДанныеФайла.ТипФайла = "ЭЦП" Тогда
							НоваяСтрока.ИмяФайлаПодписи = Сред(ИмяФайлаВыгрузки, 1, СтрДлина(ИмяФайлаВыгрузки) - 4) + "SGN.sgn";
							
							//Заполняем ТаблицаНовыхДокументовИБГруппы
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы = ТаблицаНовыхДокументовИБГруппы.Добавить();
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы.ИмяФайла 		= НоваяСтрока.ИмяФайлаПодписи;
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы.АдресФайла 	= ДанныеФайла.АдресВременногоХранилища;
							
						ИначеЕсли ДанныеФайла.ТипФайла = "ФайлПодтверждения" Тогда
							НоваяСтрока.ПодтверждениеИмяФайлаДанных = ИмяФайлаПодтверждения;
							НоваяСтрока.ПодтверждениеКНД = ДанныеФайла.КНД;
							
							//Заполняем ТаблицаНовыхДокументовИБГруппы
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы = ТаблицаНовыхДокументовИБГруппы.Добавить();
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы.ИмяФайла 		= НоваяСтрока.ПодтверждениеИмяФайлаДанных;
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы.АдресФайла 	= ДанныеФайла.АдресВременногоХранилища;
							
						ИначеЕсли ДанныеФайла.ТипФайла = "ЭЦППодтверждения" Тогда
							НоваяСтрока.ПодтверждениеИмяФайлаПодписи = Сред(ИмяФайлаПодтверждения, 1, СтрДлина(ИмяФайлаПодтверждения) - 4) + "SGN.sgn";
							
							//Заполняем ТаблицаНовыхДокументовИБГруппы
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы = ТаблицаНовыхДокументовИБГруппы.Добавить();
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы.ИмяФайла 		= НоваяСтрока.ПодтверждениеИмяФайлаПодписи;
							НоваяСтрокаТаблицаНовыхДокументовИБГруппы.АдресФайла 	= ДанныеФайла.АдресВременногоХранилища;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НоваяСтрока.ВидДокумента = Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот Тогда
						//Заполним реквизиты договора
						Если СоответствиеДоговорАкта <> Неопределено Тогда
							РеквизитыДоговора = СоответствиеДоговорАкта[СсылкаНаОбъект];
						Иначе
							РеквизитыДоговора = Неопределено;
						КонецЕсли;
						
						Если РеквизитыДоговора <> Неопределено Тогда
							НоваяСтрока.НомерДокОсн = РеквизитыДоговора.НомерДоговора;
							НоваяСтрока.ДатаДокОсн = РеквизитыДоговора.ДатаДоговора;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Преобразование объекта прикладного типа ДеревоЗначений
	// в реквизит управляемой формы (данные формы)
	ЗначениеВРеквизитФормы(ДокументыДеревоЗначений, "ДеревоДокументов");

	ЗаполнитьВычисляемыеПоляДереваДокументов(ЭтотОбъект);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;

	// Загружаем новые файлы из документов ИБ	
	Если ТаблицаНовыхДокументовИБГруппы.Количество() > 0 Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КонтекстЭДОСервер.ПоместитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Объект.Ссылка, ТаблицаНовыхДокументовИБГруппы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьФайлыЗагруженныхДокументовПоМассивуИмен(ОбъектСсылка, МассивИменУдаляемыхФайлов)
	
	НаборЗаписей = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Документ.Установить(ОбъектСсылка); 
	
	Для каждого ИмяУдаляемогоФайла Из МассивИменУдаляемыхФайлов Цикл
		НаборЗаписей.Отбор.ИмяФайла.Установить(ИмяУдаляемогоФайла); 
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьМассивЗначением(ДополняемыйМассив, Знач ДополняемоеЗначение)
	
	Если ДополняемыйМассив.Найти(ДополняемоеЗначение) = Неопределено  Тогда
		//такого элемента еще нет
		ДополняемыйМассив.Добавить(ДополняемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередИнтерактивнымУдалениемВыделенныхСтрокНаСервере(Знач МассивИдентификаторовВыделенныхСтрок)
	
	// все выделенные строки будут удалены
	// удалим файлы удаляемых документов из ИБ
	
	// преобразуем массив, разложив выделенные строки групп на составляющие
	НовыйМассивИдентификаторов = Новый Массив;
	Для каждого ИдентификаторВыделеннойСтроки Из МассивИдентификаторовВыделенныхСтрок Цикл
		ВыделеннаяСтрока = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если ВыделеннаяСтрока.ЭтоГруппа Тогда
			//это группа
			Для каждого СтрокаДокумента Из ВыделеннаяСтрока.ПолучитьЭлементы() Цикл
				ДополнитьМассивЗначением(НовыйМассивИдентификаторов, СтрокаДокумента.ПолучитьИдентификатор());
			КонецЦикла;
		Иначе
			//это документ
			ДополнитьМассивЗначением(НовыйМассивИдентификаторов, ИдентификаторВыделеннойСтроки);
		КонецЕсли;
	КонецЦикла;
	
	// соберем массив МассивИменУдаляемыхФайлов
	МассивИменУдаляемыхФайлов = Новый Массив;
	
	Для каждого ИдентификаторСтрокиУдаляемогоДокумента Из НовыйМассивИдентификаторов Цикл
		СтрокаДокумента = ДеревоДокументов.НайтиПоИдентификатору(ИдентификаторСтрокиУдаляемогоДокумента);
		
		ИмяФайлаДанных 	= СтрокаДокумента.ИмяФайлаДанных;
		ИмяФайлаПодписи	= СтрокаДокумента.ИмяФайлаПодписи;
		ПодтверждениеИмяФайлаДанных 	= СтрокаДокумента.ПодтверждениеИмяФайлаДанных;
		ПодтверждениеИмяФайлаПодписи	= СтрокаДокумента.ПодтверждениеИмяФайлаПодписи;
		
		Если ЗначениеЗаполнено(ИмяФайлаДанных) Тогда
			МассивИменУдаляемыхФайлов.Добавить(ИмяФайлаДанных);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
			МассивИменУдаляемыхФайлов.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодтверждениеИмяФайлаДанных) Тогда
			МассивИменУдаляемыхФайлов.Добавить(ПодтверждениеИмяФайлаДанных);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодтверждениеИмяФайлаПодписи) Тогда
			МассивИменУдаляемыхФайлов.Добавить(ПодтверждениеИмяФайлаПодписи);
		КонецЕсли;

		
	КонецЦикла;
	
	// Удаляем файлы из регистра сведений согласно массиву МассивИменУдаляемыхФайлов 
	Если МассивИменУдаляемыхФайлов.Количество() > 0  Тогда
		УдалитьФайлыЗагруженныхДокументовПоМассивуИмен(Объект.Ссылка, МассивИменУдаляемыхФайлов);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеГруппыДокументов()
	
	МассивУдаляемыхГрупп = Новый Массив;
	
	ГруппыДок = ДеревоДокументов.ПолучитьЭлементы();
	Для каждого ГруппаДок Из ГруппыДок Цикл
		
		ЭлементыДок = ГруппаДок.ПолучитьЭлементы();
		Если ЭлементыДок.Количество() = 0 Тогда
		
			МассивУдаляемыхГрупп.Добавить(ГруппаДок);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемаяГруппа Из МассивУдаляемыхГрупп Цикл
		
		ИндексУдаляемойГруппы = ГруппыДок.Индекс(УдаляемаяГруппа);
		ГруппыДок.Удалить(ИндексУдаляемойГруппы);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьФайлыИзФайлаОбменаВИБ(ОбъектСсылка, ПолноеИмяФайлаОбмена, МассивИменЗагружаемыхФайлов)
	
	// Сокращаем массив имен загружаемых файлов на те значения, которые уже загружены в ИБ
	
	СписокИменФайлов = Новый СписокЗначений;
	СписокИменФайлов.ЗагрузитьЗначения(МассивИменЗагружаемыхФайлов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла
		|ИЗ
		|	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
		|ГДЕ
		|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &ОбъектСсылка
		|	И ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла В(&СписокИменФайлов)";

	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("СписокИменФайлов", СписокИменФайлов);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ИндексЭлемента = МассивИменЗагружаемыхФайлов.Найти(Выборка.ИмяФайла);
		Если ИндексЭлемента <> Неопределено Тогда
			МассивИменЗагружаемыхФайлов.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивИменЗагружаемыхФайлов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Извлекаем все файлы из ZIP файла обмена
	
	Попытка
		ФайлОбмена = Новый Файл(ПолноеИмяФайлаОбмена);
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		
		КаталогОбмена = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
		
		ЧтениеЗИП = Новый ЧтениеZipФайла(ПолноеИмяФайлаОбмена);	
		ЧтениеЗИП.ИзвлечьВсе(КаталогОбмена);
		
		// Наполняем регистр сведений ФайлыДокументовРеализацииПолномочийНалоговыхОрганов файлами
		
		НаборЗаписей = РегистрыСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Документ.Установить(ОбъектСсылка); 
		НаборЗаписей.Прочитать();
		
		Для каждого ИмяЗагружаемогоФайла Из МассивИменЗагружаемыхФайлов Цикл
			
			ПолноеИмяЗагружаемогоФайла = КаталогОбмена + ИмяЗагружаемогоФайла;
			ЗагружаемыйФайл = Новый Файл(ПолноеИмяЗагружаемогоФайла);
			РазмерФайла = ЗагружаемыйФайл.Размер();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Документ = ОбъектСсылка;
			НоваяЗапись.ИмяФайла = ИмяЗагружаемогоФайла;
			НоваяЗапись.ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.xml;
			НоваяЗапись.Размер = РазмерФайла;
			НоваяЗапись.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяЗагружаемогоФайла), Новый СжатиеДанных(9));;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		// Все необходимые файлы добвлены в ИБ. Удаляем каталог обмена и файл обмена.
		УдалитьФайлы(КаталогОбмена);
		УдалитьФайлы(ПолноеИмяФайлаОбмена);
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;	
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Требование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Требование""'"), , "Объект.Требование");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ТребованиеПриИзмененииНаСервере()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПриИзмененииТребованияВОтвете(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТребованиеПослеВыбора(ВыбранноеТребование, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранноеТребование <> Неопределено Тогда
		Объект.Требование = ВыбранноеТребование;
		ТребованиеПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Закрыть();
	КонецЕсли;
	
	Если ЕстьБитыеСсылки Тогда
		ПоказатьПредупреждение(, "Список представляемых документов поврежден.");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрорисоватьСтатус(ЭтоИзменяемоеСообщение = Истина)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		ЭтоИзменяемоеСообщение = Ложь;
	КонецЕсли;
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Объект.Ссылка, Объект.Организация, "ФНС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(ЭтаФорма, ПараметрыПрорисовкиПанелиОтправки);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСтатусомИДоступностью()
	             
	ЭтоИзменяемоеСообщение = Истина;
	ПроверкаБитыхСсылокПередОткрытием(ЭтоИзменяемоеСообщение);
	ПрорисоватьСтатус(ЭтоИзменяемоеСообщение);
	
	// устанавливаем картинку заголовка
	УправлениеЭУОтправка(ЭтоИзменяемоеСообщение);
	
	// регулируем ТолькоПросмотр
	УстановитьТолькоПросмотр(НЕ ЭтоИзменяемоеСообщение);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаБитыхСсылокПередОткрытием(ЭтоИзменяемоеСообщение)
	
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если (ЭлементГруппы.СсылкаНаОбъект = Неопределено ИЛИ ТипЗнч(ЭлементГруппы.СсылкаНаОбъект) = Тип("Строка")) И ЭлементГруппы.Загружен = Ложь Тогда
				//это битая ссылка
				ЭтоИзменяемоеСообщение = Ложь;
				ЕстьБитыеСсылки = Истина;
				Возврат;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУОтправка(ЭтоИзменяемоеСообщение = Неопределено)
	
	Если КонтекстЭДОСервер = Неопределено Тогда 
		// инициализируем контекст ЭДО - модуль обработки
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			Элементы.КнопкаОтправить.Доступность = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// регулируем видимость кнопки Отправить
	СтатусОтправки = КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте Тогда
		ЭтоИзменяемоеСообщение = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоИзменяемоеСообщение Тогда
		Элементы.КнопкаОтправить.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотр(ПризнакТолькоПросмотр = Истина)
	
	Если ПризнакТолькоПросмотр Тогда
		
		Элементы.ГруппаКоманднаяПанельПредставляемыеДокументы.Видимость = НЕ ПризнакТолькоПросмотр;
		
	КонецЕсли;
	
	Элементы.ПредставляемыеДокументы.ТолькоПросмотр = ПризнакТолькоПросмотр;
	ЭтотОбъект.ТолькоПросмотр = ПризнакТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПередОтправкой(ТекстПредупреждения)
	
	РезультатПроверки = Истина;
	
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если ЭлементГруппы.КоличествоФайлов = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа %1 отсутствуют прикрепленные файлы.'"), ЭлементГруппы.СоставноеПоле);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				РезультатПроверки = Ложь;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РезультатПроверки = Ложь Тогда
		ТекстПредупреждения = "Отправка невозможна: требуется устранить нарушения."
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПроверкаПередРазбивкой(ТекстПредупреждения)
	
	РезультатПроверки = Истина;
	
	Для каждого ГруппаДокументов Из ДеревоДокументов.ПолучитьЭлементы() Цикл
		
		Для каждого ЭлементГруппы Из ГруппаДокументов.ПолучитьЭлементы() Цикл
			
			Если ЭлементГруппы.КоличествоФайлов = 0 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У документа %1 отсутствуют прикрепленные файлы.'"), ЭлементГруппы.СоставноеПоле);
				РезультатПроверки = Ложь;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РезультатПроверки = Ложь Тогда
		ТекстПредупреждения = "Разбивка отменена: требуется устранить нарушения."
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура КомандаОтправитьВопросОписьБудетОтправленаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиЗавершение", ЭтотОбъект);
	
	КонтекстЭДОКлиент.ОтправкаОписиИсходящихДокументовВФНС(
		Объект.Ссылка,
		Объект.Организация,
		УникальныйИдентификатор,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент.ПредупредитьЕслиСтатусОтправкиВКонверте(Объект.Ссылка, "письмо");
	
	УправлениеСтатусомИДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьВопросРазбитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> Истина Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстПредупреждения = "";
	МассивСозданныхОписей = РазбитьНаНесколькоНаСервере(ТекстПредупреждения);
	Если МассивСозданныхОписей = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		Возврат;
	Иначе
		
		Прочитать();
		
		//обновим дерево документов текущей описи   
		ДеревоДокументов.ПолучитьЭлементы().Очистить();
		ЗаполнитьДеревоДокументов(Объект.Ссылка);
		ОбновитьРазмерыОписи(Объект.Ссылка);
		
		//откроем форму групповой отправки
		СписокОписей = Новый СписокЗначений;
		СписокОписей.ЗагрузитьЗначения(МассивСозданныхОписей);
		СписокОписей.Добавить(Объект.Ссылка);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокОписей", СписокОписей);
		ПараметрыФормы.Вставить("Требование", Объект.Требование);
		
		ОткрытьФорму("Справочник.ОписиИсходящихДокументовВНалоговыеОрганы.Форма.ФормаГрупповойОтправки", ПараметрыФормы, , Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	УправлениеСтатусомИДоступностью();

КонецПроцедуры

&НаСервере
Процедура ОпределитьВложенияИРазмерВложений(Параметры)

	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		Вложения = КонтекстЭДОСервер.ПолучитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Параметры.ЗначениеКопирования);
		
		Если Вложения.Количество() > 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Записать();
			КонецЕсли;
			
			Вложения.Колонки.Добавить("АдресФайла");
			Для каждого Вложение Из Вложения Цикл
				Вложение.АдресФайла = ПоместитьВоВременноеХранилище(Вложение.Данные.Получить(), УникальныйИдентификатор);
			КонецЦикла;
			
			КонтекстЭДОСервер.ПоместитьФайлыДокументовРеализацииПолномочийНалоговыхОрганов(Объект.Ссылка, Вложения);
			
			ОбновитьРазмерыОписи(Объект.Ссылка);
			
		Иначе
			ОбновитьРазмерыОписи(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	Иначе
		ОбновитьРазмерыОписи(Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

#КонецОбласти