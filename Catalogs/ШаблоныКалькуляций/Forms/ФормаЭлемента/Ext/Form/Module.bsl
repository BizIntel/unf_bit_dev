
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	УстановитьУсловноеОформление();
	ОбновитьДополнительныеРеквизиты();
	ОбновитьЗаголовкиСтраниц();
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.ШаблоныКалькуляций.ТабличныеЧасти.Запасы, НастройкиЗагрузкиДанныхЗапасы, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.ШаблоныКалькуляций.ТабличныеЧасти.Расходы, НастройкиЗагрузкиДанныхРасходы, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// ПодборНоменклатурыВДокументах
	ПодборНоменклатурыВДокументах.НазначитьФормуПодбора(ПараметрыОткрытияПодбора, Объект.Ссылка.Метаданные().Имя, "Запасы");
	// Конец ПодборНоменклатурыВДокументах
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДополнительныеРеквизиты();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
			
		АдресЗапасовВХранилище	= Параметр;
		ЕстьХарактеристики 		= Истина;
		ЕстьПартии			= Ложь;
		
		Если МаркерПодбора = "Запасы" Тогда
			
			Если НЕ ПустаяСтрока(ТекстОшибкиЖурналаРегистрации) Тогда
				ЗаписатьОшибкуЧтенияДанныхИзХранилища();
			КонецЕсли;
			
			ИмяТабличнойЧасти	= "Запасы";
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
		МаркерПодбора = "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КлючСвязи = 0;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОбновитьЗаголовкиСтраниц();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПослеУдаления(Элемент)
	
	ОбновитьЗаголовкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанные, "Характеристика, Спецификация, ЕдиницаИзмерения, СпособПополнения, ТипНоменклатуры, ИспользоватьХарактеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		СтрокаТабличнойЧасти.КлючСвязи = 0;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ОбновитьЗаголовкиСтраниц();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПослеУдаления(Элемент)
	
	ОбновитьЗаголовкиСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСпособРасчетаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) И СтрокаТабличнойЧасти.СпособРасчета<>ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммыЗатрат.ФиксированнаяСумма") Тогда
		СтрокаТабличнойЧасти.Валюта = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) И СтрокаТабличнойЧасти.СпособРасчета=ПредопределенноеЗначение("Перечисление.СпособыРасчетаСуммыЗатрат.ФиксированнаяСумма") Тогда
		СтрокаТабличнойЧасти.Валюта = ВалютаУчета;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Запасы
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Запасы.ИспользоватьХарактеристики");
	Отбор.ПравоеЗначение 	= Ложь;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыХарактеристика");
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Запасы.СпособПополнения");
	Отбор.ПравоеЗначение 	= Перечисления.СпособыПополненияЗапасов.Производство;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыСпецификация");
	
	// Услуги
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение 		= Истина;
	Оформление.Использование 	= Истина;
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("Текст");
	Оформление.Значение 		= "%";
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Расходы.СпособРасчета");
	Отбор.ПравоеЗначение 	= Перечисления.СпособыРасчетаСуммыЗатрат.ФиксированнаяСумма;
	
	Поле = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	Поле.Использование = Истина;
	Поле.Поле = Новый ПолеКомпоновкиДанных("РасходыВалюта");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизиты()
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипНоменклатуры) Тогда
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
			НоваяСтрока.Идентификатор = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЦикла;
	
	Если ТаблицаНоменклатуры.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатуры.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаНоменклатуры.Номенклатура.СпособПополнения КАК СпособПополнения,
	|	ТаблицаНоменклатуры.Номенклатура.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТабличнойЧасти = Объект.Запасы.НайтиПоИдентификатору(Выборка.Идентификатор);
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, "ТипНоменклатуры, СпособПополнения, ИспользоватьХарактеристики");
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовкиСтраниц()
	
	Элементы.СтраницаЗапасы.Заголовок = НСтр("ru = 'Запасы'")+?(Объект.Запасы.Количество()=0, "", " ("+Объект.Запасы.Количество()+")");	
	Элементы.СтраницаРасходы.Заголовок = НСтр("ru = 'Расходы'")+?(Объект.Расходы.Количество()=0, "", " ("+Объект.Расходы.Количество()+")");	
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДанные.Номенклатура, "Спецификация, ЕдиницаИзмерения, СпособПополнения, ТипНоменклатуры, ИспользоватьХарактеристики");
	
	СтруктураДанные.Вставить("СпособПополнения", ЗначенияРеквизитов.СпособПополнения);
	СтруктураДанные.Вставить("ТипНоменклатуры", ЗначенияРеквизитов.ТипНоменклатуры);
	СтруктураДанные.Вставить("ИспользоватьХарактеристики", ЗначенияРеквизитов.ИспользоватьХарактеристики);
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанные.ЕдиницаИзмерения) Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитов.ЕдиницаИзмерения);
	КонецЕсли;
	Если НЕ СтруктураДанные.Свойство("Спецификация") Тогда
		СтруктураДанные.Вставить("Спецификация", ЗначенияРеквизитов.Спецификация);
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти
 
#Область РаботаСПодбором

&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти = "Запасы";
	МаркерПодбора = "Запасы";
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]) Тогда
		
		ПодборНоменклатурыВДокументахКлиент.ОткрытьПодбор(ЭтотОбъект, ИмяТабличнойЧасти, ПараметрыОткрытияПодбора[ИмяТабличнойЧасти]);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				ТекущаяДата());
	ПараметрыПодбора.Вставить("ИспользуютсяСпецификации", Истина);
	ПараметрыПодбора.Вставить("ИспользуютсяПартии", 	Ложь);
	ПараметрыПодбора.Вставить("ЗаполнятьРезерв", 		Ложь);
	ПараметрыПодбора.Вставить("ДоступноРедактированиеСтруктурнойЕдиницы", Истина);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация"));
	ПараметрыПодбора.Вставить("Организация", 	ПредопределенноеЗначение("Справочник.Организации.ОсновнаяОрганизация"));
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОшибкуЧтенияДанныхИзХранилища()
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Ошибка", , ТекстОшибкиЖурналаРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Если НЕ (ТипЗнч(ТаблицаДляЗагрузки) = Тип("ТаблицаЗначений")
		ИЛИ ТипЗнч(ТаблицаДляЗагрузки) = Тип("Массив")) Тогда
		
		ТекстОшибкиЖурналаРегистрации = "Несоответствие типа переданного в документ из подбора [" + ТипЗнч(ТаблицаДляЗагрузки) + "].
				|Адрес запасов в хранилище: " + СокрЛП(АдресЗапасовВХранилище) + "
				|Имя табличной части: " + СокрЛП(ИмяТабличнойЧасти);
		
		Возврат;
		
	Иначе
		
		ТекстОшибкиЖурналаРегистрации = "";
		
	КонецЕсли;
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ИмяТабличнойЧасти)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СтрокиДобавлены = Ложь;
	
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		
		Если ИмяТабличнойЧасти="Запасы" Тогда
			
			НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
			НоваяСтрока.Количество = СтрокаТаблицы.Количество;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
				
				НоваяСтрока.Характеристика = СтрокаТаблицы.Характеристика;
				
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
				
				НоваяСтрока.Спецификация = СтрокаТаблицы.Спецификация;
				
			КонецЕсли;
					
			Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
				
				НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
				
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				
				НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
				
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти="Расходы" Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
				НоваяСтрока.Валюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
			КонецЕсли; 
			НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаСуммыЗатрат.ФиксированнаяСумма;
			
		КонецЕсли; 
		
		СтрокиДобавлены = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(АдресЗагруженныхДанных, ИмяТабличнойЧасти) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаЗапасы(Команда)
	
	НастройкиЗагрузкиДанныхЗапасы.Вставить("ИмяТабличнойЧасти", "Запасы");
	НастройкиЗагрузкиДанныхЗапасы.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаЗапасы");
	НастройкиЗагрузкиДанныхЗапасы.Вставить("Заголовок", НСтр("ru = 'Загрузка запасов из файла'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанныхЗапасы);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанныхЗапасы, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзФайлаРасходы(Команда)
	
	НастройкиЗагрузкиДанныхРасходы.Вставить("ИмяТабличнойЧасти", "Расходы");
	НастройкиЗагрузкиДанныхРасходы.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаРасходы");
	НастройкиЗагрузкиДанныхРасходы.Вставить("Заголовок", НСтр("ru = 'Загрузка расходов из файла'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанныхРасходы);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанныхРасходы, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
			
			Если ДополнительныеПараметры.ИмяТабличнойЧасти="Запасы" Тогда
				ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанныхЗапасы.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанныхЗапасы);
				ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанныхЗапасы, ОписаниеОповещения, ЭтотОбъект);
			ИначеЕсли ДополнительныеПараметры.ИмяТабличнойЧасти="Расходы" Тогда
				ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанныхРасходы.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанныхРасходы);
				ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанныхРасходы, ОписаниеОповещения, ЭтотОбъект);
			КонецЕсли; 
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки, ДополнительныеПараметры.ИмяТабличнойЧасти);
			
		КонецЕсли;
		
	Иначе
		
		ЗагрузитьИзФайлаЗавершение(РезультатЗагрузки, ДополнительныеПараметры.ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки, ИмяТабличнойЧасти)
	
	Попытка
		
		ПоказатьСодержание = Ложь;
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
				
				Если ИмяТабличнойЧасти="Запасы" Тогда
					
					НоваяСтрока.Номенклатура = СтрокаТаблицы.Номенклатура;
					НоваяСтрока.Количество = СтрокаТаблицы.Количество;
					
					Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
						
						НоваяСтрока.Характеристика = СтрокаТаблицы.Характеристика;
						
					КонецЕсли;
					
					Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуРаботы")
						ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство") Тогда
						
						НоваяСтрока.Спецификация = СтрокаТаблицы.Спецификация;
						
					КонецЕсли;
							
					Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
						
						НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
						
					ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
						
						НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаИзмерения;
						
					КонецЕсли;
					
				ИначеЕсли ИмяТабличнойЧасти="Расходы" Тогда
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
						НоваяСтрока.Валюта = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
					КонецЕсли; 
					НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаСуммыЗатрат.ФиксированнаяСумма;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Модифицированность = Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

