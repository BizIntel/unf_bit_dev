
#Область ОписаниеПеременных

&НаКлиенте
Перем ХронологияПереключенияСтраниц;

&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПодключаемыйМодуль;

&НаКлиенте
Перем СертификатXML; //данные сертификата дополнительной обработки в виде строки

&НаКлиенте
Перем МенеджерКриптографииНаКлиенте;

&НаКлиенте
Перем ОтпечаткиСертификатов;

&НаКлиенте
Перем ВерсияВКСбербанк;

&НаКлиенте
Перем ИдентификаторЗадания; // идентификатор фоновых операций

&НаКлиенте
Перем Отпечаток; // отпечаток текущего сертификата

&НаКлиенте
Перем ИдентификаторХранилища; // Идентификатор банковского ключа

&НаКлиенте
Перем URLВК; // ссылка на скачивание внешней компоненты

&НаКлиенте
Перем ВерсияВК; // Ожидаемая версия внешней компоненты

&НаКлиенте
Перем КомуВыданСертификатВК;

&НаКлиенте
Перем СохранитьВКВИБ; // если скачана новая версия ВК и тест пройден, то она сохраняется в ИБ для дальнейшего использования

&НаКлиенте
Перем СертификатВК; //двоичные данные сертификата внешней компоненты

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = '1С:ДиректБанк: Обновление списка банков, поддерживающих обмен.'");
	
	ФоновыеЗадания.Выполнить("ОбменСБанкамиСлужебный.ЗагрузитьСписокDirectBankАсинхронно", , , НаименованиеЗадания);
	
	ЕстьПравоДобавленияНастройкиЭДО = ПравоДоступа("Добавление", Метаданные.Справочники.НастройкиОбменСБанками);
	
	Если Не ЕстьПравоДобавленияНастройкиЭДО Тогда
		ТекстСообщения = НСтр("ru = 'Нет прав настройки прямого обмена с банком.
									|Обратитесь к администратору'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Элементы.Шаги.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.КомандыНавигации.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД Тогда
		Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(Организация) Тогда
			Элементы.Организация.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Банк) Тогда
		Банк = Параметры.Банк;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИдентификаторОрганизации) Тогда
		ИдентификаторОрганизации = Параметры.ИдентификаторОрганизации;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Организация")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация) Тогда
		Организация = Параметры.ЗначенияЗаполнения.Организация;
	КонецЕсли;
	
	Если  Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Банк")
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Банк) Тогда
		Банк = Параметры.ЗначенияЗаполнения.Банк;
	КонецЕсли;
	
	НеПоказыватьСтраницуВыборОрганизацииИБанка = ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк);
	
	Элементы.ГруппаВнешнийМодуль.Видимость = Ложь;
	
	АдресСервера = "https://";
	АдресСервераНастроек = "https://";
	
	Если Параметры.НеИспользоватьРучноеЗаполнение Тогда
		Элементы.РучноеЗаполнение.Видимость = Ложь;
		НеИспользоватьРучноеЗаполнение = Параметры.НеИспользоватьРучноеЗаполнение;
	КонецЕсли;
	
	РасширенныйРежим = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ТестовыйРежим);
	
	Если Не ТестовыйРежим Тогда
		Элементы.ПолучениеНастроекССервераБанка.Видимость = Ложь;
		СпособСозданияНастройки = 1;
	КонецЕсли;
	
	СохранитьЛогин = Истина;
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	Если РазделениеВключено Тогда
		Элементы.СтраницыВыбораВнешнегоМодуля.ТекущаяСтраница = Элементы.СтраницаСуществующийМодуль;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(Организация, Банк);
		Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
			ВерсияФормата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ВерсияФормата");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ИнформацияНаСайтеБанка.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		НастройкиОбменаСБанком = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Банк, Истина);
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
			ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
			Если ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
				Элементы.ПолучениеНастроекССервераБанка.Видимость = Ложь;
				СпособСозданияНастройки = 0; // Автоматическое получение настроек
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НеПоказыватьСтраницуИнформации = Параметры.НеПоказыватьСтраницуИнформации;
	
	Элементы.ПолучитьНастройки.Видимость = Ложь;
	
	// Загрузка настроек из файла в форме списка настроек обмена
	Если ЗначениеЗаполнено(Параметры.АдресДанныхФайлаНастроек) Тогда
		СпособСозданияНастройки = 1;
		АдресФайлаНастроекОбмена = Параметры.АдресДанныхФайлаНастроек;
	КонецЕсли;
	
	НомерБанковскогоСчета = Параметры.НомерБанковскогоСчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ХронологияПереключенияСтраниц = Новый Массив;
	
	#Если ВебКлиент Тогда
		Элементы.ПутьКФайлуВнешнегоМодуля.РедактированиеТекста = Ложь;
		Элементы.ПутьКФайлуКомпонентыСбербанка.РедактированиеТекста = Ложь;
		Элементы.ПутьКФайлуСертификатаСбербанка.РедактированиеТекста = Ложь;
		Элементы.ПутьКФайлуНастроек.РедактированиеТекста = Ложь;
	#КонецЕсли
	
	ИзменитьЗаголовок();
	
	СпособАутентификацииПриИзменении(Неопределено);
	
	Если НеПоказыватьСтраницуИнформации Тогда
		Если НеПоказыватьСтраницуВыборОрганизацииИБанка Тогда
			ПереключитьШагПослеВыбораОрганизацииИБанка();
		Иначе
			Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаВыборОрганизацииИБанка;
		КонецЕсли;
	КонецЕсли;
	
	// Загрузка из файла формы списка настроек обмена.
	Если СпособСозданияНастройки = 1 И ЗначениеЗаполнено(АдресФайлаНастроекОбмена) Тогда
		
		УчастникиОбменаИзФайла = УчастникиОбменаИзФайла(АдресФайлаНастроекОбмена, Организация);
		
		Если УчастникиОбменаИзФайла = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
		Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ РаботаПомощникаЗавершена Тогда
	
		СтандартнаяОбработка = Ложь;
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Подключение к сервису 1С:ДиректБанк не завершено.
											|Продолжить закрытие программы?'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Подключение к сервису 1С:ДиректБанк не завершено.
											|Закрыть помощник подключения?'");
		КонецЕсли;
	
		Оповещение = Новый ОписаниеОповещения("ПриЗакрытииПомощника", ЭтотОбъект);
		
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
			ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, "ЗакрытьФорму", Оповещение);

	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы И ЗначениеЗаполнено(СертификатАутентификацииСсылка) Тогда
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(СертификатАутентификацииСсылка, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияСинхронизацииНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("http://directbank.1c.ru");
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуКомпонентыСбербанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранФайлВКСбербанка = Ложь;
	#Если ВебКлиент Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораФайлаВКСбербанкаИзВеб", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресФайлаВКСбербанка, "*.zip", , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Внешний модуль'") + "(*.zip)|*.zip";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл внешнего модуля банка'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаВКСбербанкаИзТонкогоКлиента", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатСмешанныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокВыбораСертификатовАутентификацииСВыводомОшибки", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуСертификатаСбербанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранФайлСертификатаСбербанка = Ложь;
	#Если ВебКлиент Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораФайлаСертификатаСбербанкаИзВеб", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресФайлаСертификатаСбербанка, "*.cer", , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Сертификат банка'") + "(*.cer)|*.cer";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл сертификата банка'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаСертификатаСбербанкаИзТонкогоКлиента", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуВнешнегоМодуляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
СтандартнаяОбработка = Ложь;
	
	ВыбранФайлВнешнегоМодуля = Ложь;
	#Если ВебКлиент Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораФайлаВнешнегоМодуляИзВеб", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресФайлаВнешнегоМодуля, , , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Внешний модуль(*.zip;*.epf)|*.zip;*.epf'");
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл внешнего модуля банка'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаВнешнегоМодуляИзТонкогоКлиента", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяКриптографияПриИзменении(Элемент)
	
	Элементы.ГруппаСертификаты.Доступность = ИспользуетсяКриптография;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВнешнийМодульПриИзменении(Элемент)
	
	Элементы.ГруппаВнешнийМодуль.Видимость = ИспользуетсяВнешнийМодуль;
	Если ИспользуетсяВнешнийМодуль Тогда
		СпособАутентификации = 1;
		ИспользуетсяКриптография = Истина;
	КонецЕсли;
	
	Если РазделениеВключено Тогда
		Элементы.СтраницыВыбораВнешнегоМодуля.ТекущаяСтраница = Элементы.СтраницаСуществующийМодуль;
		Элементы.ГруппаПредупреждение.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияНажатие(Элемент)
	
	ЭлектроннаяПодписьСлужебныйКлиент.ОткрытьИнструкциюПоРаботеСПрограммами();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ПриИзмененииБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранФайлНастроекОбмена = Ложь;
	#Если ВебКлиент Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПослеВыбораФайлаНастроекОбменаИзВеб", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещенияОЗавершении, АдресФайлаНастроекОбмена, "*.xml", , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Файл настроек обмена'") + "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл настроек обмена'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаНастроекОбменаИзТонкогоКлиента", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОбменаНажатие(Элемент)
	
	ПоказатьЗначение( , НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАутентификацииПриИзменении(Элемент)
	
	Если СпособАутентификации Тогда
		Элементы.СтраницаПользовательСмешанный.Видимость = Истина;
		Элементы.СтраницаСертификатСмешанный.Видимость = Ложь;
	Иначе
		Элементы.СтраницаПользовательСмешанный.Видимость = Ложь;
		Элементы.СтраницаСертификатСмешанный.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификаты

&НаКлиенте
Процедура СертификатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗаполнитьОрганизациюВСертификате(ВыбранноеЗначение, Организация);
	
	НовСтрока = Сертификаты.Добавить();
	НовСтрока.Сертификат = ВыбранноеЗначение;
	
	ПеренумероватьСертификаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПриИзменении(Элемент)
	
	ПеренумероватьСертификаты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	ОчиститьСообщения();
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен")
		ИЛИ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		
		ЭлектроннаяПодписьКлиент.СертификатНачалоВыбораСПодтверждением(Элементы.Сертификаты, Неопределено, Ложь, Ложь);
		
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиАутентификациюПослеПодключенияВКСбербанка", ЭтотОбъект);
		ПараметрыПодключения = Новый Структура;
		ПараметрыПодключения.Вставить("АдресВК", АдресФайлаВКСбербанка);
		ПараметрыПодключения.Вставить("ИмяВК", "VPNKeyTLS");
		
		ОбменСБанкамиСлужебныйКлиент.ПодключитьВнешнююКомпонентуБанка(
			ОписаниеОповещения, АдресФайлаВКСбербанка, "VPNKeyTLS");
	
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		
		Устройства = ОбменСБанкамиСлужебныйКлиент.ПодключенныеХранилищаЧерезДополнительнуюОбработку(ПодключаемыйМодуль);
		Если Устройства.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		СписокВыбора = Новый СписокЗначений;
		Для Каждого Элемент Из Устройства Цикл
			ТекЗапись = СписокВыбора.Добавить(Элемент);
		КонецЦикла;
		
		Если Устройства.Количество() > 1 Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораКлючаЧерезДополнительнуюОбработку", ЭтотОбъект);
			ЗаголовокВыбора = НСтр("ru = 'Выберите электронный ключ:'");
			СписокВыбора.ПоказатьВыборЭлемента(ОповещениеОЗакрытии, ЗаголовокВыбора);
		Иначе
			ПослеВыбораКлючаЧерезДополнительнуюОбработку(ТекЗапись)
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть(НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаОписание Тогда
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаОписание);
		
		Если НеПоказыватьСтраницуВыборОрганизацииИБанка Тогда
			ПереключитьШагПослеВыбораОрганизацииИБанка();
		Иначе
			Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаВыборОрганизацииИБанка;
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаВыборОрганизацииИБанка Тогда
		
		Отказ = Ложь;
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите организацию'"), , "Организация", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Банк) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите банк'"), , "Банк", , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаВыборОрганизацииИБанка);
		
		НастройкаОбмена = ОбменСБанкамиСлужебныйВызовСервера.НастройкаОбмена(Организация, Банк);
		
		ПереключитьШагПослеВыбораОрганизацииИБанка();
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаВыборСпособаСозданияНастройки Тогда
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаВыборСпособаСозданияНастройки);
		Если СпособСозданияНастройки = 0 Тогда // получение настроек с сервера банка
			ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
			Оповещение = Новый ОписаниеОповещения(
				"СменитьСтраницуПослеПолучениеССервераПослеЗаполненияПрограммКриптографии", ЭтотОбъект);
			ЗаполнитьПрограммыКриптографии(Оповещение);
		ИначеЕсли СпособСозданияНастройки = 1 Тогда // загрузка настроек из файла
			СменитьСтраницуШаги(Элементы.СтраницаВыборФайлаНастроек);
		ИначеЕсли СпособСозданияНастройки = 2 Тогда // ручной режим
			Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
				СменитьСтраницуШаги(Элементы.СтраницаСбербанк);
			Иначе
				Если РазделениеВключено Тогда
					СменитьСтраницуШаги(Элементы.СтраницаАсинхронныйОбмен);
				Иначе
					СменитьСтраницуШаги(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаЗапросИспользованияВнешнегоМодуля Тогда
		
		Если ИспользуетсяВнешнийМодуль Тогда
			Если Элементы.СтраницыВыбораВнешнегоМодуля.ТекущаяСтраница = Элементы.СтраницаВыбратьФайл Тогда
				#Если ВебКлиент Тогда
					Если НЕ ВыбранФайлВнешнегоМодуля Тогда
						ТекстСообщения = НСтр("ru = 'Не выбран файл внешнего модуля'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВнешнегоМодуля");
						Возврат;
					КонецЕсли;
				#Иначе
					Если ЗначениеЗаполнено(ПутьКФайлуВнешнегоМодуля) Тогда
						Попытка
							ДвоичныеДанныеВнешнегоМодуля = Новый ДвоичныеДанные(ПутьКФайлуВнешнегоМодуля);
						Исключение
							ТекстСообщения = НСтр("ru = 'Неверно указан путь к файлу внешнего модуля'");
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВнешнегоМодуля");
							Возврат;
						КонецПопытки;
						АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВнешнегоМодуля, УникальныйИдентификатор);
					Иначе
						ТекстСообщения = НСтр("ru = 'Не выбран файл внешнего модуля'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВнешнегоМодуля");
						Возврат;
					КонецЕсли;
				#КонецЕсли
				РасширениеФайла = ВРег(ОбменСБанкамиСлужебныйКлиент.РасширениеФайла(ПутьКФайлуВнешнегоМодуля));
				Если Не РасширениеФайла = "EPF" И НЕ РасширениеФайла = "ZIP" Тогда
					ТекстСообщения = НСтр("ru = 'Указан неверный файл.
												|Файл внешнего модуля должен иметь расширение ""zip"" или ""epf""'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВнешнегоМодуля");
					Возврат;
				КонецЕсли;
				
				Если РасширениеФайла = "ZIP" Тогда // внешняя компонента
					
					ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
					ИнформацияОКомпоненте = ИнформацияОВКБанка(АдресФайлаВнешнегоМодуля);
					
					ВерсияВК = ИнформацияОКомпоненте.Версия;
					
					Если ИнформацияОКомпоненте = Неопределено Тогда
						Возврат;
					КонецЕсли;
					
					ИмяВнешнегоМодуля = ИнформацияОКомпоненте.ИмяМодуля;
					
					Если ЗначениеЗаполнено(ИнформацияОКомпоненте.ВерсияВБазе)
						И (ИнформацияОКомпоненте.ВерсияВБазе <> ИнформацияОКомпоненте.Версия) Тогда
						Оповещение = Новый ОписаниеОповещения("ПослеВыбораВерсииВК", ЭтотОбъект, ИнформацияОКомпоненте);
						ВыбратьВерсиюИспользуемогоВнешнегоМодуля(
							Оповещение, ИнформацияОКомпоненте.ВерсияВБазе, ИнформацияОКомпоненте.Версия);
						Возврат;
					КонецЕсли;
					
					ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
					СменитьСтраницуШаги(Элементы.СтраницаФинал);
					
					ПолучитьНастройкиОбменаССервераБанкаЧерезВК();
				Иначе //внешняя обработка
					
					Оповещение = Новый ОписаниеОповещения("ПослеИнициализацииДополнительнойОбработки", ЭтотОбъект);
					ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
					НачатьИнициализациюДополнительнойОбработки(Оповещение);
					
				КонецЕсли;
			Иначе // разделенный режим
				ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
				ДанныеВнешнейКомпоненты = ДанныеВнешнейКомпоненты(ИмяВнешнегоМодуля);
				ВерсияВК = ДанныеВнешнейКомпоненты.Версия;
				АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(
					ДанныеВнешнейКомпоненты.ДвоичныеДанныеМодуля, УникальныйИдентификатор);
				ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
				СменитьСтраницуШаги(Элементы.СтраницаФинал);
				ПолучитьНастройкиОбменаССервераБанкаЧерезВК();
			КонецЕсли;
		Иначе
			ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
			ПодключитьОбработчикОжидания("ЗаполнитьСписокВыбораСертификатовАутентификации", 0.1, Истина);
			СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаАсинхронныйОбмен Тогда
		
		НастройкиЗагруженыИзФайла = Ложь;
		
		Отказ = Ложь;
		
		АдресСервера = АдресСервераНастроек;
		
		Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан идентификатор организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации", , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаАсинхронныйОбмен);
		
		СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
	
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаСертификаты Тогда
		Если ИспользуетсяКриптография И НЕ Сертификаты.Количество() Тогда
			ТекстСообщения = НСтр("ru = 'Добавьте сертификаты электронной подписи'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сертификаты");
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаСертификаты);
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
		
		Если СохранитьВнешнююОбработку Тогда
			СохранитьВнешнююОбработку(
				АдресФайлаВнешнегоМодуля, ВерсияДополнительнойОбработки, ИмяВнешнегоМодуля, НаименованиеВнешнейОбработки);
		КонецЕсли;
		
		Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;

		ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаСбербанк Тогда
		
		#Если ВебКлиент Тогда
			Если Не ВыбранФайлСертификатаСбербанка Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран сертификат банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуСертификатаСбербанка");
				Возврат;
			КонецЕсли;
			
			Если Не ВыбранФайлВКСбербанка Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран файл внешнего модуля'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуКомпонентыСбербанка");
				Возврат;
			КонецЕсли;
		#Иначе
			Если ЗначениеЗаполнено(ПутьКФайлуСертификатаСбербанка) Тогда
				Попытка
					ДвоичныеДанныеСертификатаСбербанка = Новый ДвоичныеДанные(ПутьКФайлуСертификатаСбербанка);
				Исключение
					ТекстСообщения = НСтр("ru = 'Неверно указан путь к файлу сертификата банка'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуСертификатаСбербанка");
					Возврат;
				КонецПопытки;
				АдресФайлаСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаСбербанка, УникальныйИдентификатор);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран файл сертификата банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуСертификатаСбербанка");
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПутьКФайлуВКСбербанка) Тогда
				Попытка
					ДвоичныеДанныеВКСбербанка = Новый ДвоичныеДанные(ПутьКФайлуВКСбербанка);
				Исключение
					ТекстСообщения = НСтр("ru = 'Неверно указан путь к файлу внешнего модуля'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВКСбербанка");
					Возврат;
				КонецПопытки;
				АдресФайлаВКСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВКСбербанка, УникальныйИдентификатор);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран файл внешнего модуля банка'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуВКСбербанка");
				Возврат;
			КонецЕсли;
		#КонецЕсли
			
		Файл = Новый Файл(ПутьКФайлуСертификатаСбербанка);
		Если Не Файл.Расширение = ".cer" Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный файл.
										|Файл сертификата банка должен иметь расширение ""cer""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"ПутьКФайлуСертификатаСбербанка");
			Возврат;
		КонецЕсли;

		Файл = Новый Файл(ПутьКФайлуВКСбербанка);
		Если Не Файл.Расширение = ".zip" Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный файл.
										|Файл внешнего модуля должен иметь расширение ""zip""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"ПутьКФайлуВКСбербанка");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
				"Поле", "Заполнение", НСтр("ru = 'Идентификатор организации'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации");
			Возврат;
		КонецЕсли;

		Попытка
			Идентификатор = Новый УникальныйИдентификатор(ИдентификаторОрганизации);
		Исключение
			ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения(
				"Поле", "Корректность", НСтр("ru = 'Идентификатор организации'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИдентификаторОрганизации");
		КонецПопытки;
		
		ОбменСБанкамиСлужебныйКлиент.УдалитьВнешнююКомпонентуИзКэш("VPNKeyTLS");
		
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиВерсииВК", ЭтотОбъект);
		
		ОбменСБанкамиСлужебныйКлиент.ПроверитьВерсиюВКСбербанк(Оповещение, АдресФайлаВКСбербанка);
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаПолучениеССервера Тогда
		
		НастройкиЗагруженыИзФайла = Ложь;
		
		Отказ = Ложь;
		
		Если НЕ ЗначениеЗаполнено(АдресСервераНастроек) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите адрес сервера банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервераНастроек", , Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресСервера)
			И НЕ ОбменСБанкамиСлужебныйКлиент.ПравильныйФорматАдреса(АдресСервераНастроек) Тогда
			ТекстСообщения = НСтр("ru = 'Адрес сервера банка должен начинаться с ""https://"" или ""http://""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервераНастроек", , Отказ);
		КонецЕсли;
		
		Если СпособАутентификации = 0 И Не ЗначениеЗаполнено(СертификатАутентификации) Тогда  // по сертификату
			ТекстСообщения = НСтр("ru = 'Выберите сертификат для аутентификации на сервере банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СертификатАутентификации", , Отказ);
		КонецЕсли;
		
		Если СпособАутентификации = 1 И Не ЗначениеЗаполнено(Логин) Тогда
			ТекстСообщения = НСтр("ru = 'Введите логин для аутентификации на сервере банка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Логин", , Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаПолучениеССервера);
		Если СпособСозданияНастройки = 2 Тогда // ручное создание настройки
			СменитьСтраницуШаги(Элементы.СтраницаПодождите);
		Иначе
			СменитьСтраницуШаги(Элементы.СтраницаФинал);
		КонецЕсли;
	
		Если СпособАутентификации = 0 Тогда // по сертификату
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолучитьИнформациюОМенеджереКриптографииПослеПолученияСертификатаКриптографии", ЭтотОбъект);
			ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, СертификатАутентификации, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ПолучитьНастройкиОбменаССервераБанкаБазоваяАутентификация", 0.1, Истина);
		КонецЕсли;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.СтраницаВыборФайлаНастроек Тогда
		
		НастройкиЗагруженыИзФайла = Истина;
		
		#Если ВебКлиент Тогда
			Если Не ВыбранФайлНастроекОбмена Тогда
				ТекстСообщения = НСтр("ru = 'Не выбран файл настроек обмена'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуНастроекОбмена");
				Возврат;
			КонецЕсли;
		#Иначе
			Если ЗначениеЗаполнено(ПутьКФайлуНастроекОбмена) Тогда
				Попытка
					ДвоичныеДанныеФайлаНастроек = Новый ДвоичныеДанные(ПутьКФайлуНастроекОбмена);
				Исключение
					ТекстСообщения = НСтр("ru = 'Неверно указан путь к файлу настроек обмена'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуНастроекОбмена");
					Возврат;
				КонецПопытки;
				АдресФайлаНастроекОбмена = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаНастроек, УникальныйИдентификатор);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не выбран файл настроек обмена'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуНастроекОбмена");
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		Файл = Новый Файл(ПутьКФайлуНастроекОбмена);
		Если Не Файл.Расширение = ".xml" Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный файл.
										|Файл настроек должен иметь расширение ""xml""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПутьКФайлуНастроекОбмена");
			Возврат;
		КонецЕсли;
		
		УчастникиОбменаИзФайла = УчастникиОбменаИзФайла(АдресФайлаНастроекОбмена, Организация);
		
		Если УчастникиОбменаИзФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если УчастникиОбменаИзФайла.Организация <> Организация Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный файл.
										|Требуются настройки для организации: %1
										|Файл настроек содержит настройки для организации: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Организация, УчастникиОбменаИзФайла.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	
		Если УчастникиОбменаИзФайла.Банк <> Банк Тогда
			ТекстСообщения = НСтр("ru = 'Указан неверный файл.
										|Требуются настройки для банка: %1
										|Файл настроек содержит настройки для банка: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Банк, УчастникиОбменаИзФайла.Банк);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	
		СпособСозданияНастройки = 1;
		
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаВыборФайлаНастроек);
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
		Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	ОбменСБанкамиСлужебныйКлиент.ПрерватьПроцессыНаКлиенте(НастройкаОбмена);
	ВернутьсяНаПредыдущуюСтраницу();

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ОбменСБанкамиСлужебныйКлиент.ПрерватьПроцессыНаКлиенте(НастройкаОбмена);
	Закрыть(НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройки(Команда)
	
	ОчиститьСообщения();
	
	Элементы.ПолучитьНастройки.Видимость = Ложь;
	Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	Элементы.СтраницыРезультатПодключения.ТекущаяСтраница = Элементы.СтраницаНеЗавершено;
	
	ОбменЧерезВК = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
	
	Если ПрограммаБанка = ОбменЧерезВК Тогда
		Если СпособСозданияНастройки = 2 Тогда // ручная настройка
			ПолучитьНастройкиОбменаССервераБанкаЧерезВК();
		Иначе
			ПодключитьОбработчикОжидания("СкачатьВКССервераБанка", 0.1, Истина);
		КонецЕсли;
	Иначе // асинхронный обмен
		Если СпособАутентификации = 0 Тогда // по сертификату
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолучитьИнформациюОМенеджереКриптографииПослеПолученияСертификатаКриптографии", ЭтотОбъект);
			ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, СертификатАутентификации, Истина);
		Иначе
			ПодключитьОбработчикОжидания("ПолучитьНастройкиОбменаССервераБанкаБазоваяАутентификация", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ПриИзмененииОрганизации()
	
	Сертификаты.Очистить();
	
	БанкиОрганизации = БанкиОрганизации(Организация);
	
	Если БанкиОрганизации.Найти(Банк) = Неопределено Тогда
		Если БанкиОрганизации.Количество() = 1 Тогда 
			Банк = БанкиОрганизации[0];
		Иначе 
			Банк = "";
		КонецЕсли;
		ПриИзмененииБанка();
	Иначе
		ИзменитьЗаголовок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииБанка()
	
	ВнешняяКомпонентаЗагружена = Ложь;
	ИзменитьЗаголовок();
	Элементы.ИнформацияНаСайтеБанка.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		НастройкиОбменаСБанком = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Банк, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БанкиОрганизации(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчетаОрганизаций.Банк КАК Банк
	               |ИЗ
	               |	&БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	               |ГДЕ
	               |	БанковскиеСчетаОрганизаций.Владелец = &Организация
	               |	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	БанковскиеСчетаОрганизаций.Банк";
	
	ИмяСправочникаБанковскиеСчета = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("БанковскиеСчетаОрганизаций");
	
	Если ИмяСправочникаБанковскиеСчета = Неопределено Тогда 
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&БанковскиеСчетаОрганизаций", "Справочник." + ИмяСправочникаБанковскиеСчета);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Банк");
	
КонецФункции

#КонецОбласти

#Область ИзменениеИнтерфейса

&НаКлиенте
Процедура СоздатьМенеджерКриптографииПослеЗаполненияПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПереключитьСтраницыПослеСозданияМенеджераКриптографии", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьСертификаты()
	
	Счетчик = 0;
	Для Каждого Строка Из Сертификаты Цикл
		Счетчик = Счетчик + 1;
		Строка.Номер = Счетчик;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуКомандНавигации(НоваяСтраница)
	
	Если НоваяСтраница = Элементы.ДалееОтмена Тогда
		Элементы.ДалееПервая.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееПервая.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееПервая;
	ИначеЕсли НоваяСтраница = Элементы.НазадДалееОтмена Тогда
		Элементы.ДалееВторая.КнопкаПоУмолчанию = Истина;
		Элементы.ДалееВторая.АктивизироватьПоУмолчанию = Истина;
		ТекущийЭлемент = Элементы.ДалееВторая;
	ИначеЕсли НоваяСтраница = Элементы.НазадГотово Тогда
		Элементы.ГотовоПервая.КнопкаПоУмолчанию = Истина;
	ИначеЕсли НоваяСтраница = Элементы.Готово Тогда
		Элементы.ГотовоВторая.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Элементы.КомандыНавигации.ТекущаяСтраница = НоваяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуШаги(НоваяСтраница)
	
	Элементы.ИнформацияНаСайтеБанка.Видимость = Ложь;
	Элементы.ПолучитьНастройки.Видимость = Ложь;
	Элементы.КомандыНавигации.Доступность = Истина;
	
	КомандыСВозвратом = Элементы.НазадДалееОтмена;
	КомандыБезВозврата = Элементы.ДалееОтмена;

	Если НоваяСтраница = Элементы.СтраницаФинал Тогда
		
		Элементы.СтраницыРезультатПодключения.ТекущаяСтраница = Элементы.СтраницаНеЗавершено;
		
		Элементы.ОткрытьНастройкуОбмена.Видимость = Ложь;
		
		Если ХронологияПереключенияСтраниц.Количество() Тогда
			КомандыСВозвратом = Элементы.НазадОтмена;
		Иначе
			КомандыБезВозврата = Элементы.Отмена;
		КонецЕсли;
		
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = Новый Картинка;
		СинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн");
		Элементы.ГруппаТестированиеНастройкиОбмена.Видимость = ПрограммаБанка <> СинхронныйОбмен;
		Если СпособСозданияНастройки <> 0
			И НЕ (ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК")
					И СпособСозданияНастройки = 2) Тогда
			Элементы.ГруппаПолучениеНастроекССервераБанка.Видимость = Ложь;
		Иначе // Получение настроек с сервера банка
			Элементы.ГруппаПолучениеНастроекССервераБанка.Видимость = Истина;
			Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
			Элементы.СозданиеНастройкиОбменаКартинка.Картинка = Новый Картинка;
		КонецЕсли;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаАсинхронныйОбмен Тогда
		ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Если Не ЗначениеЗаполнено(ВерсияФормата) Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		КонецЕсли;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаВыборСпособаСозданияНастройки Тогда
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			Элементы.ПолучениеНастроекССервераБанка.Видимость = Ложь;
			Если СпособСозданияНастройки = 0 Тогда
				СпособСозданияНастройки = 1;
			КонецЕсли
		Иначе
			Элементы.ПолучениеНастроекССервераБанка.Видимость = ТестовыйРежим;
		КонецЕсли;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаПолучениеССервера Тогда
		СпособАутентификацииПриИзменении(Неопределено);
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком) И ЗначениеЗаполнено(НастройкиОбменаСБанком.АдресСтраницыБанка) Тогда
			ВывестиСсылкуНаСайтБанка(Элементы.ИнформацияНаСайтеБанка, НастройкиОбменаСБанком.АдресСтраницыБанка);
		КонецЕсли;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаВыборОрганизацииИБанка Тогда
		НастройкиЗагруженыИзФайла = Ложь;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаСертификаты Тогда
		Элементы.ГруппаСертификаты.Доступность = ИспользуетсяКриптография;
		АсинхронныйОбмен = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Элементы.ГруппаНастроекКриптографии.Видимость = ПрограммаБанка = АсинхронныйОбмен;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаВыборФайлаНастроек Тогда
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком) И ЗначениеЗаполнено(НастройкиОбменаСБанком.АдресСтраницыБанка) Тогда
			ВывестиСсылкуНаСайтБанка(Элементы.ИнформацияНаСайтеБанка, НастройкиОбменаСБанком.АдресСтраницыБанка);
		КонецЕсли;
	ИначеЕсли НоваяСтраница = Элементы.СтраницаПодождите Тогда
		КомандыСВозвратом = Элементы.Отмена;
		КомандыБезВозврата = Элементы.Отмена;
	КонецЕсли;
	
	Если ХронологияПереключенияСтраниц.Количество() Тогда
		СменитьСтраницуКомандНавигации(КомандыСВозвратом)
	Иначе
		СменитьСтраницуКомандНавигации(КомандыБезВозврата)
	КонецЕсли;
	
	Элементы.Шаги.ТекущаяСтраница = НоваяСтраница;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСтраницыПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда  // ошибка создания менеджера криптографии
		ВернутьсяНаПредыдущуюСтраницу();
		Возврат;
	КонецЕсли;
	
	СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьШагПослеВыбораОрганизацииИБанка()
	
	Элементы.АдресСервераНастроек.Видимость = Истина;
	Элементы.СпособАутентификации.Видимость = Истина;
	
	Если НастройкиОбменаСБанком = Неопределено Тогда // Неизвестный банк
		ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Если Не ТестовыйРежим И НеИспользоватьРучноеЗаполнение Тогда // осталась только загрузка из файла
			СпособСозданияНастройки = 1; // загрузка из файла
			СменитьСтраницуШаги(Элементы.СтраницаВыборФайлаНастроек);
		Иначе
			СменитьСтраницуШаги(Элементы.СтраницаВыборСпособаСозданияНастройки);
		КонецЕсли;
	ИначеЕсли НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		URLВК = НастройкиОбменаСБанком.АдресСервера;
		СменитьСтраницуШаги(Элементы.СтраницаФинал);
		ПодключитьОбработчикОжидания("СкачатьВКССервераБанка", 0.1, Истина);
	ИначеЕсли НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		РесурсПриемник = "/wsi2/order";
		РесурсИсточник = "/wsi2/statement";
		АдресСервера = "https://ic.alfabank.ru/";
		СпособСозданияНастройки = 2;
		ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		ИспользуетсяКриптография = Истина;
		Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииПослеЗаполненияПрограммКриптографии", ЭтотОбъект);
		ЗаполнитьПрограммыКриптографии(Оповещение);
	ИначеЕсли НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		Если НеИспользоватьРучноеЗаполнение Тогда
			СменитьСтраницуШаги(Элементы.СтраницаВыборФайлаНастроек);
		Иначе
			СменитьСтраницуШаги(Элементы.СтраницаВыборСпособаСозданияНастройки);
		КонецЕсли;
	ИначеЕсли НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком.АдресСервера) Тогда
			АдресСервераНастроек = НастройкиОбменаСБанком.АдресСервера;
			СпособСозданияНастройки = 0;
			Если Не ТестовыйРежим Тогда
				Элементы.АдресСервераНастроек.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком.СпособАутентификации) Тогда
			Если НастройкиОбменаСБанком.СпособАутентификации = "ИзФайла" Тогда
				СменитьСтраницуШаги(Элементы.СтраницаВыборФайлаНастроек);
			ИначеЕсли НастройкиОбменаСБанком.СпособАутентификации = "ПоЛогинуИлиСертификату" Тогда
				Оповещение = Новый ОписаниеОповещения(
					"СменитьСтраницуПослеПолучениеССервераПослеЗаполненияПрограммКриптографии", ЭтотОбъект);
				ЗаполнитьПрограммыКриптографии(Оповещение);
			ИначеЕсли НастройкиОбменаСБанком.СпособАутентификации = "ПоСертификату" Тогда
				СпособАутентификации = 0;
				Элементы.СпособАутентификации.Видимость = Ложь;
				Оповещение = Новый ОписаниеОповещения(
					"СменитьСтраницуСертификатДляПолученияНастроекПослеЗаполненияПрограммКриптографии", ЭтотОбъект);
				ЗаполнитьПрограммыКриптографии(Оповещение);
			ИначеЕсли НастройкиОбменаСБанком.СпособАутентификации = "ПоЛогину" Тогда
				Элементы.СпособАутентификации.Видимость = Ложь;
				СпособАутентификации = 1;
				СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
			Иначе
				СменитьСтраницуШаги(Элементы.СтраницаВыборСпособаСозданияНастройки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуПослеПолучениеССервераПослеЗаполненияПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСписокВыбораСертификатовАутентификации();
	СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуСертификатДляПолученияНастроекПослеЗаполненияПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьСписокВыбораСертификатовАутентификации();
	СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаголовок()
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		Шаблон = "%1 - %2";
		Элементы.Заголовок.Заголовок = СтрШаблон(Шаблон, Организация, Банк);
	Иначе
		Элементы.Заголовок.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АсинхронныйОбмен

&НаКлиенте
Процедура ПослеВыбораФайлаНастроекОбменаИзВеб(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранФайлНастроекОбмена = Результат;
	АдресФайлаНастроекОбмена = Адрес;
	ПутьКФайлуНастроекОбмена = ВыбранноеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаНастроекОбменаИзТонкогоКлиента(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ НЕ ВыбранныеФайлы.Количество() Тогда
		ПутьКФайлуНастроекОбмена = "";
	Иначе
		ПутьКФайлуНастроекОбмена = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТестНастройкиАсинхронныйОбмен()
	
	ВидЭДЗапросЗонд = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросЗонд");
	
	РеквизитыНастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыОбменаПоВидуЭД(
		НастройкаОбмена, ВидЭДЗапросЗонд);
	
	Если РеквизитыНастройкиОбмена.ТребуетсяПодпись ИЛИ РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РеквизитыНастройкиОбмена", РеквизитыНастройкиОбмена);
		Оповещение = Новый ОписаниеОповещения(
			"ПродолжитьТестНастроекАсинхронныйОбменПослеПолученияОтпечатков", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина);
		
	Иначе
	
		НастройкиОбмена = Неопределено;
		СообщениеЗапросЗонд = Неопределено;
		ОбменСБанкамиСлужебныйВызовСервера.СформироватьЗапросЗонд(
			НастройкаОбмена, Новый Массив, СообщениеЗапросЗонд, НастройкиОбмена);
	
		Если НЕ ЗначениеЗаполнено(СообщениеЗапросЗонд) ИЛИ НастройкиОбмена = Неопределено Тогда
			ОбработатьРезультатТестаНастройки(Ложь);
			Возврат;
		КонецЕсли;
	
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЗапросЗонд", СообщениеЗапросЗонд);
		ДополнительныеПараметры.Вставить("РеквизитыНастройкиОбмена", РеквизитыНастройкиОбмена);
		
		Если НастройкиЗагруженыИзФайла Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПолучитьИдентификаторСессииПослеЗапросаПароляБазоваяАутентификация", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(НастройкаОбмена, Оповещение, Истина);
		Иначе
			ПолучитьРеквизитыНастройкиОбмена(НастройкаОбмена, АдресСервера, ИдентификаторОрганизации);
			Оповещение = Новый ОписаниеОповещения(
			"ВыполнитьТестНастроекПослеПолученияИдентификатораСессии", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИдентификаторСессииБазоваяАутентификация(Оповещение, АдресСервера, ИдентификаторОрганизации, Логин, Пароль);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСессииПослеЗапросаПароляБазоваяАутентификация(ДанныеАутентификации, ДополнительныеПараметры) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения(
		"ВыполнитьТестНастроекПослеПолученияИдентификатораСессии", ЭтотОбъект, ДополнительныеПараметры);
	ПолучитьИдентификаторСессииБазоваяАутентификация(Оповещение,
		ДополнительныеПараметры.РеквизитыНастройкиОбмена.АдресСервера,
		ДополнительныеПараметры.РеквизитыНастройкиОбмена.ИдентификаторОрганизации,
		ДанныеАутентификации.Пользователь, ДанныеАутентификации.ПарольПользователя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыНастройкиОбмена(Знач НастройкаОбмена, АдресСервера, ИдентификаторОрганизации)
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "АдресСервера, ИдентификаторОрганизации");
	АдресСервера = РеквизитыНастройкиОбмена.АдресСервера;
	ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьТестНастроекАсинхронныйОбменПослеПолученияОтпечатков(ДанныеОтпечатков, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДанныеОтпечатков) = Тип("Строка") Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ОтпечаткиСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеОтпечатков Цикл
		ОтпечаткиСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	РеквизитыНастройкиОбмена = ДополнительныеПараметры.РеквизитыНастройкиОбмена;

	НастройкиОбмена = Неопределено;
	СообщениеЗапросЗонд = Неопределено;
	ОбменСБанкамиСлужебныйВызовСервера.СформироватьЗапросЗонд(
		НастройкаОбмена, ОтпечаткиСертификатов, СообщениеЗапросЗонд, НастройкиОбмена);
	
	Если НЕ ЗначениеЗаполнено(СообщениеЗапросЗонд) ИЛИ НастройкиОбмена = Неопределено Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ЗапросЗонд", СообщениеЗапросЗонд);

	Если НастройкиОбмена.Подписывать Тогда
		
		Если НастройкиОбмена.ДоступныеСертификаты.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не найден подходящий сертификат подписи.
										|Убедитесь, что сертификаты, указанные в настройке обмена, установлены в личное хранилище сертификатов операционной системы'");
			ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
			ОбработатьРезультатТестаНастройки(Ложь);
			Возврат;
		КонецЕсли;
		
		Операция = НСтр("ru = 'Подписание электронного документа'");
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("Операция", Операция);
		ОписаниеДанных.Вставить("ОтборСертификатов", НастройкиОбмена.ДоступныеСертификаты);
		ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
		ОписаниеДанных.Вставить("БезПодтверждения", Истина);
		НаборДанных = Новый Массив;
		Данные = Новый Структура;
		ПараметрыДляПолученияДД = Новый Структура("СообщениеОбмена, ОписаниеДанных", СообщениеЗапросЗонд, ОписаниеДанных);
		
		ПредставлениеИПрисоединенныйФайл = ПредставлениеИПрисоединенныйФайл(СообщениеЗапросЗонд);
		
		СсылкаНаДД = Новый ОписаниеОповещения(
			"ПолучитьДвоичныеДанныеДляСообщенияОбмена", ОбменСБанкамиСлужебныйКлиент, ПараметрыДляПолученияДД);
		Данные.Вставить("Данные", СсылкаНаДД);
		Данные.Вставить("Объект", ПредставлениеИПрисоединенныйФайл.ПрисоединенныйФайл);
		Представление = ПредставлениеИПрисоединенныйФайл.Представление;
		ОбработчикОткрытияЭД = Новый ОписаниеОповещения(
			"ПриОткрытииЭлектронногоДокумента", ОбменСБанкамиСлужебныйКлиент, СообщениеЗапросЗонд);
		ДанныеДляПредставления = Новый Структура("Представление, Значение", Представление, ОбработчикОткрытияЭД);
		Данные.Вставить("Представление", ДанныеДляПредставления);
		НаборДанных.Добавить(Данные);
		ОписаниеДанных.Вставить("НаборДанных", НаборДанных);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодписанияЗапросаЗонда", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеОповещения);
	Иначе
		ПродолжитьТестНастроекПослеПроверкиЭПЗапросаЗонда(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеИПрисоединенныйФайл(СообщениеОбмена)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить(
		"Представление", ОбменСБанкамиСлужебныйВызовСервера.ПредставлениеЭлектронногоДокумента(СообщениеОбмена));
	СтруктураВозврата.Вставить(
		"ПрисоединенныйФайл", ОбменСБанкамиСлужебныйВызовСервера.ПрисоединенныйФайл(СообщениеОбмена));
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ПослеПодписанияЗапросаЗонда(Результат, ПараметрыОбработки) Экспорт
	
	Если Результат.Успех Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьТестНастроекПослеПроверкиЭПЗапросаЗонда", ЭтотОбъект, ПараметрыОбработки);
		ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписи(ОписаниеОповещения, ПараметрыОбработки.ЗапросЗонд);
	Иначе
		ОбработатьРезультатТестаНастройки(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьТестНастроекПослеПроверкиЭПЗапросаЗонда(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда // Подпись неверна
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СертификатАутентификацииСсылка) Тогда
		МассивСертификатов = Новый Массив;
		МассивСертификатов.Добавить(СертификатАутентификацииСсылка);
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(СертификатАутентификации, ПарольСертификата);
	Иначе
		МассивСертификатов = СертификатыАутентификации(НастройкаОбмена, ОтпечаткиСертификатов);
	КонецЕсли;
	
	Если ДополнительныеПараметры.РеквизитыНастройкиОбмена.АутентификацияПоСертификату Тогда
	
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
		ОписаниеДанных.Вставить("БезПодтверждения",  Истина);
		ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
		ОписаниеДанных.Вставить("РазрешитьЗапоминатьПароль", Ложь);
		
		ПараметрыПолученияМаркера = Новый Структура("НастройкаОбмена", НастройкаОбмена);

		ОписаниеПолученияДанных = Новый ОписаниеОповещения(
			"ПолучитьЗашифрованныйИдентификаторСессии", ОбменСБанкамиСлужебныйКлиент, ПараметрыПолученияМаркера);
				
		ОписаниеДанных.Вставить("Данные", ОписаниеПолученияДанных);
					
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОписаниеОповещения);
	Иначе
		Если НастройкиЗагруженыИзФайла Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПолучитьИдентификаторСессииПослеЗапросаПароляБазоваяАутентификация", ЭтотОбъект, ДополнительныеПараметры);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(НастройкаОбмена, Оповещение, Истина);
		Иначе
			Оповещение = Новый ОписаниеОповещения(
			"ВыполнитьТестНастроекПослеПолученияИдентификатораСессии", ЭтотОбъект, ДополнительныеПараметры);
			ПолучитьИдентификаторСессииБазоваяАутентификация(Оповещение, АдресСервера, ИдентификаторОрганизации, Логин, Пароль);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуЗапросаЗондаПослеРасшифровкиМаркера(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		ИдентификаторСессииБанка = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
			Результат.РасшифрованныеДанные);
		ВыполнитьТестНастроекПослеПолученияИдентификатораСессии(ИдентификаторСессииБанка, ДополнительныеПараметры);
	Иначе
		ОбработатьРезультатТестаНастройки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСессииБазоваяАутентификация(Оповещение, АдресСервера, ИдентификаторОрганизации, Логин, Пароль)
	
	ДанныеSMSАвторизации = Неопределено;
	ДанныеАутентификации = Новый Структура("Пользователь, Пароль", Логин, Пароль);
	БазоваяВерсияФорматаАсинхронногоОбмена = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	ИдентификаторСессииБанка = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанкаБазоваяАутентификация(АдресСервера,
		ИдентификаторОрганизации, ДанныеАутентификации, БазоваяВерсияФорматаАсинхронногоОбмена, ДанныеSMSАвторизации);
	Если ЗначениеЗаполнено(ДанныеSMSАвторизации) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ИдентификаторСессии", ИдентификаторСессииБанка);
		ПараметрыФормы.Вставить("Телефон", ДанныеSMSАвторизации.МаскаТелефона);
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОповещениеПослеПолученияИдентификатораСессии", Оповещение);
		ДополнительныеПараметры.Вставить("НеподтвержденныйИдентификаторСессииБанка", ИдентификаторСессииБанка);
		ДополнительныеПараметры.Вставить("АдресСервера", АдресСервера);
		ДополнительныеПараметры.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
		ДополнительныеПараметры.Вставить("ВерсияAPI", БазоваяВерсияФорматаАсинхронногоОбмена);
		ОО = Новый ОписаниеОповещения("ОтправитьОдноразовыйПарольПослеВводаИзSMS", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросОдноразовогоПароля", ПараметрыФормы, , , , , ОО);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, ИдентификаторСессииБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОдноразовыйПарольПослеВводаИзSMS(ОдноразовыйПароль, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ОдноразовыйПароль) Тогда
		ИдентификаторСессииБанка = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанкаПоSMS(ДополнительныеПараметры.АдресСервера,
			ДополнительныеПараметры.ИдентификаторОрганизации, ДополнительныеПараметры.НеподтвержденныйИдентификаторСессииБанка,
			ОдноразовыйПароль, ДополнительныеПараметры.ВерсияAPI);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОповещениеПослеПолученияИдентификатораСессии, ИдентификаторСессииБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестНастроекПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
		
	ПараметрыЗапроса = Новый Структура;

	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", ИдентификаторСессии);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", ДополнительныеПараметры.ЗапросЗонд);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	МассивСообщений = Новый Массив;
	ОперацияВыполнена = ОбменСБанкамиСлужебныйВызовСервера.ОтправитьЗапросЗондНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений);
		
	Если МассивСообщений.Количество() Тогда //Произошла ошибка
		Для Каждого Сообщение Из МассивСообщений Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
		
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаЗонда();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаЗонда();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаЗонда()
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);
	
	Если МассивСообщений.Количество() Тогда
		Для Каждого Сообщение Из МассивСообщений Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	МассивСообщений = Новый Массив;
	
	ОперацияВыполнена = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияИзвещенияОСостоянииЭД(МассивСообщений);
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);
			ОбработатьРезультатПолученияИзвещенияОСостоянииЭД(МассивСообщений);
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияИзвещенияОСостоянииЭД(МассивСообщений)
		
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Оповестить("ОбновитьСостояниеОбменСБанками", СтруктураВозврата.ПараметрОповещения);
	
	Если СтруктураВозврата <> Неопределено И СтруктураВозврата.Свойство("ДанныеЭП")
		И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЭП", СтруктураВозврата.ДанныеЭП);
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
		ДополнительныеПараметры.Вставить("МассивСообщений", МассивСообщений);
		
		СохранитьОчереднуюПодпись(ДополнительныеПараметры);
		
		Возврат;
		
	КонецЕсли;
	
	ПослеОбработкиПолученныхПодписей(МассивСообщений, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиПолученныхПодписей(МассивСообщений, ЕстьОшибка)
	
	Если МассивСообщений.Количество() Тогда
		// Проверка, что ошибка возникла в БЭД, а не в прикладном коде.
		СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);

		Если СтруктураВозврата.ЕстьОшибка Тогда
			Для Каждого Сообщение Из МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла;
			ОбработатьРезультатТестаНастройки(Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;

	ОбработатьРезультатТестаНастройки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОчереднуюПодпись(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДанныеЭП.Количество() = 0 Тогда
		ПослеОбработкиПолученныхПодписей(ДополнительныеПараметры.МассивСообщений, ДополнительныеПараметры.ЕстьОшибка);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДополнительныеПараметры.ДанныеЭП Цикл
		Прервать;
	КонецЦикла;
	ДополнительныеПараметры.ДанныеЭП.Удалить(КлючЗначение.Ключ);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПодписейСообщенияОбмена", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ДобавитьПодписиИОпределитьСтатусы(Оповещение, КлючЗначение.Ключ, КлючЗначение.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПодписейСообщенияОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Истина);
	КонецЕсли;
	
	СохранитьОчереднуюПодпись(ДополнительныеПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкуОбменаИзФайла()
	
	ЗагружатьВК = СпособСозданияНастройки <> 2;

	Задание = ЗагрузитьНастройкуОбменаИзФайлаНаСервере(
		АдресФайлаНастроекОбмена, УникальныйИдентификатор, ЗагружатьВК, Организация);
	
	АдресХранилища = Задание.АдресХранилища;
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			ПослеСозданияНастройкиОбмена();
		Иначе
			ОбработатьРезультатСозданияНастройкиОбмена(Ложь);
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Задание.Идентификатор;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияЗагрузкиНастройкиОбменаИзФайла", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеЗаданияЗагрузкиНастройкиОбменаИзФайла()
	
	Задание = ОбменСБанкамиСлужебныйВызовСервера.ПроверитьВыполнениеФоновогоЗаданияНаСервере(
		ИдентификаторЗадания, УникальныйИдентификатор);
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			ПодключитьОбработчикОжидания("ПослеСозданияНастройкиОбмена", 0.1, Истина);
		Иначе
			ОбработатьРезультатСозданияНастройкиОбмена(Ложь);
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания(
			"ПроверитьВыполнениеЗаданияЗагрузкиНастройкиОбменаИзФайла", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьНастройкуОбменаИзФайлаНаСервере(Знач АдресФайлаНастроекОбмена, Знач ИдентификаторФормы, Знач ЗагружатьВК, Знач Организация)
	
	Задание = Новый Структура();
	Задание.Вставить("Завершено", Ложь);
	Задание.Вставить("Успешно", Ложь);
	Задание.Вставить("Идентификатор");
	Задание.Вставить("АдресХранилища");
	
	Попытка
		ДвоичныеДанныеФайлаНастроек = ПолучитьИзВременногоХранилища(АдресФайлаНастроекОбмена);
		Параметры = Новый Структура;
		Параметры.Вставить("ДвоичныеДанныеФайлаНастроек", ДвоичныеДанныеФайлаНастроек);
		Параметры.Вставить("ЗагружатьВК", ЗагружатьВК);
		Параметры.Вставить("Организация", Организация);
		НазваниеЗадания = НСтр("ru = 'Прямой обмен с банком: Загрузка настроек обмена из файла'");
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ИдентификаторФормы,
			"Справочники.НастройкиОбменСБанками.ЗагрузитьНастройкиОбменаИзФайла", Параметры, НазваниеЗадания);
		Задание.АдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		Задание.Идентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(
				РезультатФоновогоЗадания.ИдентификаторЗадания);
			Если МассивСообщений.Количество() Тогда
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					СообщениеОбОшибке.ИдентификаторНазначения = ИдентификаторФормы;
					СообщениеОбОшибке.Сообщить();
				КонецЦикла;
				Задание.Успешно = Ложь;
			Иначе
				Задание.Успешно = Истина;
			КонецЕсли;
			Задание.Завершено = Истина;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Текст = НСтр("ru = 'Не удалось загрузить настройки обмена.'");
		ВидОперации = НСтр("ru = 'Загрузка настроек обмена из файла'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Текст, 1);
	КонецПопытки;
	
	Возврат Задание;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьИнформациюОМенеджереКриптографииПослеПолученияСертификатаКриптографии(СертификатКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СертификатКриптографии) <> Тип("СертификатКриптографии") Тогда
		Если СпособСозданияНастройки = 0 Тогда // автоматическое получение с сервера банка
			ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Иначе // ручное создание настройки обмена, переключаем на предыдущий шаг
			СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьИнформациюОМенеджереКриптографииПослеПолученияДвоичныхДанныхСертификата", ЭтотОбъект);
	
	СертификатКриптографии.НачатьВыгрузку(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОМенеджереКриптографииПослеПолученияДвоичныхДанныхСертификата(ВыгруженныеДанные, ДополнительныеПараметры) Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ДанныеСертификата", ВыгруженныеДанные);
	
	Обработчик = Новый ОписаниеОповещения(
		"ПолучитьИдентификаторСессииПослеПолученияИнформацииОМенеджереКриптографии", ЭтотОбъект, ПараметрыОбработки);
	МенеджерКриптографииНаКлиенте.НачатьПолучениеИнформацииМодуляКриптографии(Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСессииПослеПолученияИнформацииОМенеджереКриптографии(ИнформацияМодуля, ДополнительныеПараметры) Экспорт
	
	СертификатАутентификацииСсылка = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		ДополнительныеПараметры.ДанныеСертификата, Организация, ИнформацияМодуля.Имя);
			
	Если Не ЗначениеЗаполнено(СертификатАутентификацииСсылка) Тогда
		Если СпособСозданияНастройки = 0 Тогда // автоматическое получение с сервера банка
			ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Иначе // ручное создание настройки обмена, переключаем на предыдущий шаг
			СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(СертификатАутентификацииСсылка, ПарольСертификата);

	ПробнаяОперация = СпособСозданияНастройки = 2;
	Попытка
		ИдентификаторСессии = ОбменСБанкамиСлужебныйВызовСервера.МаркерБанкаПоСертификату(
			АдресСервераНастроек, "0", ДополнительныеПараметры.ДанныеСертификата, , ПробнаяОперация);
	Исключение
		Если НЕ ПробнаяОперация Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Если СпособСозданияНастройки = 0 Тогда // автоматическое получение с сервера банка
			ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Иначе // автоматическое получение настроек не поддерживается банком, переключаем на следующий шаг.
			СменитьСтраницуШаги(Элементы.СтраницаАсинхронныйОбмен);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Аутентификация на сервере банка'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных", НСтр("ru = 'Аутентификация на сервере банка'"));
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(СертификатАутентификацииСсылка);
	ОписаниеДанных.Вставить("ОтборСертификатов", МассивСертификатов);
	ОписаниеДанных.Вставить("БезПодтверждения", Истина);
	ОписаниеДанных.Вставить("ЭтоАутентификация", Истина);
	ОписаниеДанных.Вставить("Данные", ИдентификаторСессии);
	
	ОбработкаРезультата = Новый ОписаниеОповещения("ПослеРасшифровкиИдентификатораСессии", ЭтотОбъект);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРасшифровкиИдентификатораСессии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Если СпособСозданияНастройки = 0 Тогда // автоматическое получение с сервера банка
			ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Иначе // ручное создание настройки обмена, переключаем на предыдущий шаг, т.к. маркер не расшифровывается
			СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	ИдентификаторСессии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(Результат.РасшифрованныеДанные);

	ПолучитьНастройкиОбменаПослеПолученияИдентификатораСессии(ИдентификаторСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиОбменаССервераБанкаБазоваяАутентификация()
	
	НастройкаОбмена = ПредопределенноеЗначение("Справочник.НастройкиОбменСБанками.ПустаяСсылка");
	Обработчик = Новый ОписаниеОповещения("ПолучитьНастройкиОбменаПослеПолученияИдентификатораСессии", ЭтотОбъект);
	
	ДанныеАутентификации = Новый Структура("Пользователь, Пароль", Логин, Пароль);
	БазоваяВерсияФорматаАсинхронногоОбмена = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	ОбменСБанкамиСлужебныйКлиент.ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, АдресСервераНастроек, "0",
		ДанныеАутентификации, БазоваяВерсияФорматаАсинхронногоОбмена, НастройкаОбмена, СпособСозданияНастройки = 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиОбменаПослеПолученияИдентификатораСессии(ИдентификаторСессии, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Если СпособСозданияНастройки = 0 Тогда // автоматическое получение с сервера банка
			ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Иначе // ручное создание настройки обмена, переключаем на предыдущий шаг, т.к. пустой идентификатор сессии.
			СменитьСтраницуШаги(Элементы.СтраницаПолучениеССервера);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// При ручном создании настройки обмена пробуем получить настройки с сервера банка.
	ПробнаяОперация = СпособСозданияНастройки = 2;
	
	ПараметрыПолученияНастроек = Новый Структура;
	ПараметрыПолученияНастроек.Вставить("АдресСервера", АдресСервераНастроек);
	ПараметрыПолученияНастроек.Вставить("Организация", Организация);
	ПараметрыПолученияНастроек.Вставить("Банк", Банк);
	ПараметрыПолученияНастроек.Вставить("ИдентификаторСессии", ИдентификаторСессии);
	ПараметрыПолученияНастроек.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыПолученияНастроек.Вставить("ПробнаяОперация", ПробнаяОперация);
	ПараметрыПолученияНастроек.Вставить("НомерБанковскогоСчета", НомерБанковскогоСчета);
	ПараметрыПолученияНастроек.Вставить("ИдентификаторОрганизации", "0");
	ПараметрыПолученияНастроек.Вставить("ВерсияФормата", ВерсияФормата);
	
	Задание = ЗагрузитьНастройкиОбменаНаСервере(ПараметрыПолученияНастроек, АдресФайлаНастроекОбмена);
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			НастройкиОбмена = ПолучитьИзВременногоХранилища(АдресФайлаНастроекОбмена);
			Если ПробнаяОперация Тогда
				
				Если НастройкиОбмена = Неопределено Тогда // не удалось получить настройки в автоматическом режиме
					СменитьСтраницуШаги(Элементы.СтраницаАсинхронныйОбмен);
					Возврат;
				Иначе
					НастройкиЗагруженыИзФайла = Истина;
					СменитьСтраницуШаги(Элементы.СтраницаФинал);
				КонецЕсли;
			КонецЕсли;
			Если НастройкиОбмена = Неопределено Тогда
				ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
			Иначе
				ОбработатьРезультатПолученияНастроекССервераБанка(Истина);
				Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
				ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
			КонецЕсли;
		Иначе
			ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Задание.Идентификатор;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияПолученияНастроекОбмена", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьНастройкиОбменаНаСервере(Знач ПараметрыПолученияНастроек, АдресФайлаНастроекОбмена)
	
	Задание = Новый Структура();
	Задание.Вставить("Завершено", Ложь);
	Задание.Вставить("Успешно");
	Задание.Вставить("Значение");
	Задание.Вставить("Идентификатор");
	
	Попытка
		НазваниеЗадания = НСтр("ru = 'Прямой обмен с банком: Получение настроек обмена с сервера банка'");
		
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			ПараметрыПолученияНастроек.УникальныйИдентификатор,
			"Справочники.НастройкиОбменСБанками.ПолучитьНастройкиОбменаССервераБанка", ПараметрыПолученияНастроек, НазваниеЗадания);
		АдресФайлаНастроекОбмена = РезультатФоновогоЗадания.АдресХранилища;
		Задание.Идентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
		Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(
				РезультатФоновогоЗадания.ИдентификаторЗадания);
			Если МассивСообщений.Количество() Тогда
				Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
					СообщениеОбОшибке.Сообщить();
				КонецЦикла;
				Задание.Успешно = Ложь;
			Иначе
				Задание.Успешно = Истина;
			КонецЕсли;
			Задание.Завершено = Истина;
		КонецЕсли;
	Исключение
		Задание.Завершено = Истина;
		Задание.Успешно = Ложь;
		Задание.Значение = Новый Структура;
		Текст = НСтр("ru = 'Не удалось загрузить настройки обмена с сервера банка.'");
		ВидОперации = НСтр("ru = 'Получение настроек обмена с сервера банка'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Текст, 1);
	КонецПопытки;
	
	Возврат Задание;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеЗаданияПолученияНастроекОбмена()
	
	Задание = ОбменСБанкамиСлужебныйВызовСервера.ПроверитьВыполнениеФоновогоЗаданияНаСервере(
		ИдентификаторЗадания, УникальныйИдентификатор);
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			Если СпособСозданияНастройки = 2 Тогда // ручной режим, попытка получить настройки автоматически
				НастройкиОбмена = ПолучитьИзВременногоХранилища(АдресФайлаНастроекОбмена);
				Если НастройкиОбмена = Неопределено Тогда // не удалось получить настройки в автоматическом режиме
					СменитьСтраницуШаги(Элементы.СтраницаАсинхронныйОбмен);
					Возврат;
				Иначе
					СменитьСтраницуШаги(Элементы.СтраницаФинал);
				КонецЕсли;
			КонецЕсли;
			ОбработатьРезультатПолученияНастроекССервераБанка(Истина);
			Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
			ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
		Иначе
			ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания(
			"ПроверитьВыполнениеЗаданияПолученияНастроекОбмена", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСертификатовАутентификации()
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСертификатовАутентификацииСВыводомОшибки()
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЛичныеСертификатыПослеСозданияМенеджераКриптографии(МенеджерКриптографии, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		Возврат;
	Иначе
		МенеджерКриптографииНаКлиенте = МенеджерКриптографии;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолученияХранилища", ЭтотОбъект, ДополнительныеПараметры);
		
	МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(
		ОписаниеОповещения, ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыПослеПолученияХранилища(ХранилищеСертификатовКриптографии, ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеПолученияСертификатов = Новый ОписаниеОповещения(
		"ЗаполнитьСписокВыбораСертификатовПослеПолученияИзХранилища", ЭтотОбъект, ДополнительныеПараметры);
		
	ХранилищеСертификатовКриптографии.НачатьПолучениеВсех(ОповещениеПослеПолученияСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСертификатовПослеПолученияИзХранилища(Сертификаты, ДополнительныеПараметры) Экспорт
	
	Если НЕ Сертификаты.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СертификатСмешанный.СписокВыбора.Очистить();
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Для Каждого Сертификат Из Сертификаты Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДатаСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСертификата(Сертификат);
		Если Сертификат.Субъект.Свойство("O") И ЗначениеЗаполнено(Сертификат.Субъект.O) Тогда
			ПредставлениеСертификата = ПредставлениеСертификата + " (" + Сертификат.Субъект.O + ")";
		КонецЕсли;
		ОтпечатокСертификата = Base64Строка(Сертификат.Отпечаток);
		Элементы.СертификатСмешанный.СписокВыбора.Добавить(ОтпечатокСертификата, ПредставлениеСертификата);
	КонецЦикла;
	
	Элементы.СертификатСмешанный.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СертификатыАутентификации(НастройкаОбмена, ОтпечаткиСертификатов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.СертификатыПодписейОрганизации КАК НастройкиОбменСБанкамиСертификатыПодписейОрганизации
	|ГДЕ
	|	НастройкиОбменСБанкамиСертификатыПодписейОрганизации.Ссылка = &НастройкаОбмена
	|	И &ПроверкаПользователя
	|	И НЕ НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.ПометкаУдаления
	|	И НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Отпечаток В(&ОтпечаткиСертификатов)";
	Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
	Запрос.УстановитьПараметр("ОтпечаткиСертификатов", ОтпечаткиСертификатов);
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаПользователя",
			"НастройкиОбменСБанкамиСертификатыПодписейОрганизации.СертификатЭП.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("СертификатЭП");
	
КонецФункции

&НаСервереБезКонтекста
Функция БИКБанка(Банк)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	
КонецФункции

#КонецОбласти

#Область Сбербанк

&НаКлиенте
Процедура ПослеПроверкиВерсииВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОВК = ОбменСБанкамиСлужебныйВызовСервера.ИнформацияОВКБанка(АдресФайлаВКСбербанка);
	
	ВерсияВКСбербанк = ИнформацияОВК.Версия;
	ИмяВнешнегоМодуля = ИнформацияОВК.Название;
	
	ИспользуетсяКриптография = Истина;
	ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаСбербанк);
	СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаСертификатаСбербанкаИзТонкогоКлиента(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ НЕ ВыбранныеФайлы.Количество() Тогда
		ПутьКФайлуСертификатаСбербанка = "";
	Иначе
		ПутьКФайлуСертификатаСбербанка = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаСертификатаСбербанкаИзВеб(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранФайлСертификатаСбербанка = Результат;
	АдресФайлаСертификатаСбербанка = Адрес;
	ПутьКФайлуСертификатаСбербанка = ВыбранноеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВКСбербанкаИзТонкогоКлиента(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ НЕ ВыбранныеФайлы.Количество() Тогда
		ПутьКФайлуВКСбербанка = "";
	Иначе
		ПутьКФайлуВКСбербанка = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВКСбербанкаИзВеб(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранФайлВКСбербанка = Результат;
	АдресФайлаВКСбербанка = Адрес;
	ПутьКФайлуВКСбербанка = ВыбранноеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастройкиОбменаСбербанк()
	
	Если ПодключаемыйМодуль = Неопределено Тогда // настройка загружена из файла настроек
		ОбменСБанкамиСлужебныйКлиент.УдалитьВнешнююКомпонентуИзКэш("VPNKeyTLS");
		
		Оповещение = Новый ОписаниеОповещения("АутентифицироватьсяНаТокенеПослеПроверкиВерсииВКСбербанк", ЭтотОбъект);
		
		РеквизитыНастройки = Новый Структура("АдресФайлаВК");
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьРеквизитыНастройкиОбмена(НастройкаОбмена, РеквизитыНастройки);
		
		ОбменСБанкамиСлужебныйКлиент.ПроверитьВерсиюВКСбербанк(Оповещение, РеквизитыНастройки.АдресФайлаВК);

		Возврат;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйКлиент.ЗакэшироватьПодключаемыйМодуль("VPNKeyTLS", ПодключаемыйМодуль);
	
	Обработчик = Новый ОписаниеОповещения("ОтправитьТестовыйЗапросПослеУстановкиКаналаСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.УстановитьВиртуальныйКаналСоСбербанком(Обработчик, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьТестовыйЗапросПослеУстановкиКаналаСбербанк(КаналУстановлен, ДополнительныеПараметры) Экспорт
	
	Если Не КаналУстановлен Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьТестовыйЗапросПослеОпределенияСертификатаСбербанк", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ОпределитьСертификатПодписиСбербанк(Оповещение, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура АутентифицироватьсяНаТокенеПослеПроверкиВерсииВКСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПровестиТестНастроекПослеАутентификацииНаТокенеСбербанка", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.АутентифицироватьсяНаТокенеСбербанка(Оповещение, НастройкаОбмена, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиТестНастроекПослеАутентификацииНаТокенеСбербанка(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		ПодключаемыйМодуль = Неопределено;
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ПодключеннаяВнешняяКомпонентаБанка("VPNKeyTLS");
	
	ТестНастройкиОбменаСбербанк();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьТестовыйЗапросПослеОпределенияСертификатаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	РеквизитыНастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.РеквизитыНастройкиОбмена(НастройкаОбмена);
	ИдентификаторОрганизации = РеквизитыНастройкиОбмена.ИдентификаторОрганизации;
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	СтрокаПодписи = "ATTRIBUTES" + Символ(10) + "OrgId=" + ИдентификаторОрганизации + Символ(10) + "RequestId="
		+ ИдентификаторЗапроса;

	СтрокаПодписиBase64 = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(СтрокаПодписи);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПодписиBase64", СтрокаПодписиBase64);
	ДополнительныеПараметры.Вставить("СертификатСсылка", Результат.СертификатСсылка);
	ДополнительныеПараметры.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Представление = НСтр("ru = 'Тестовый запрос'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодписьПослеУстановкиСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодписатьДанныеСбербанк(
		ОписаниеОповещения, ПодключаемыйМодуль, СтрокаПодписиBase64, Результат.ИдентификаторСертификата, Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписьПослеУстановкиСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда // Пользователь отказался подписывать
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	ИначеЕсли Результат.Успех Тогда
		
		ПараметрыСертификата = Новый Структура("СертификатBase64");
		
		ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовСертификата(
			ДополнительныеПараметры.СертификатСсылка, ПараметрыСертификата);
		
		ДополнительныеПараметры.Вставить("ДанныеПодписи", Результат.ЭП);
		
		Оповещение = Новый ОписаниеОповещения(
			"ОтправитьТестовыйЗапросПослеУстановкиПодписиСбербанк", ЭтотОбъект, ДополнительныеПараметры);
		
		ОбменСБанкамиСлужебныйКлиент.ПроверитьПодписьНаТокенеСбербанк(Оповещение, ПодключаемыйМодуль,
			ДополнительныеПараметры.СтрокаПодписиBase64, Результат.ЭП, ПараметрыСертификата.СертификатBase64);
	Иначе
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(Результат.ТекстОшибки, УникальныйИдентификатор);
		ОбработатьРезультатТестаНастройки(Ложь);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьТестовыйЗапросПослеУстановкиПодписиСбербанк(ПодписьВерна, ДополнительныеПараметры) Экспорт
	
	Если Не ПодписьВерна Тогда
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(НСтр("ru = 'Установленная подпись неверна.'"), УникальныйИдентификатор);
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	ТестоваяСтрока = ОбменСБанкамиСлужебныйВызовСервера.ТекстЗапросаНочнойВыписки(НастройкаОбмена,
		ДополнительныеПараметры.ИдентификаторЗапроса, ИдентификаторОрганизации, ДополнительныеПараметры.ДанныеПодписи,
		ДополнительныеПараметры.СертификатСсылка);
		
	Оповещение = Новый ОписаниеОповещения("ПослеОтправкиТестовогоЗапросаСбербанк", ЭтотОбъект);
	ПодключаемыйМодуль1С = ОбменСБанкамиСлужебныйКлиент.ПодключеннаяВнешняяКомпонентаБанка("SBRFServiceProxy");
	ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросВСбербанк(
		Оповещение, ПодключаемыйМодуль1С, ТестоваяСтрока, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиТестовогоЗапросаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(Результат.ТекстОшибки, УникальныйИдентификатор);
		ОбработатьРезультатТестаНастройки(Ложь);
	Иначе
		ОбработатьРезультатТестаНастройки(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиАутентификациюПослеПодключенияВКСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = Результат;
	
	Оповещение = Новый ОписаниеОповещения("ПослеАутентификацииНаТокенеСбербанка", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.АутентифицироватьсяНаТокенеСбербанка(Оповещение, НастройкаОбмена, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеАутентификацииНаТокенеСбербанка(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьСертификатПослеПолученияСпискаСТокенаСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеСертификатовСТокенаСбербанк(Оповещение, ПодключаемыйМодуль);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатПослеПолученияСпискаСТокенаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(Результат.ТекстОшибки, УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
		
	СоответствиеСертификатов = Результат.СоответствиеСертификатов;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СоответствиеСертификатов", СоответствиеСертификатов);
	
	СписокСертификатов = Новый СписокЗначений;
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
			ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(КлючЗначение.Ключ), ДополнительныеПараметры);
			Возврат;
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаСертификатов = Новый Соответствие;
	
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = Элемент.Значение;
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураСертификата = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСертификата(ДвоичныеДанныеСертификата);
		
		Если ЗначениеЗаполнено(СтруктураСертификата) Тогда
			ШаблонПредставления = НСтр("ru = '%1, до %2'");
			ДатаСтрокой = Формат(СтруктураСертификата.ДействителенДО, "ДФ=MM.yyyy");
			Представление = СтрШаблон(ШаблонПредставления, СтруктураСертификата.КомуВыдан, ДатаСтрокой);
			ВыборкаСертификатов.Вставить(ИдентификаторСертификата, Представление);
		КонецЕсли;
		
	КонецЦикла;

	Если ВыборкаСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из ВыборкаСертификатов Цикл
			ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(КлючЗначение.Ключ), ДополнительныеПараметры);
			Возврат;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элемент Из ВыборкаСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	ОО = Новый ОписаниеОповещения("ОбработкаВыбораСертификатаСбербанка", ЭтотОбъект, ДополнительныеПараметры);
	
	ЗаголовокФормыВыбора = НСтр("ru = 'Выберите добавляемый сертификат подписи'");

	СписокСертификатов.ПоказатьВыборЭлемента(ОО, ЗаголовокФормыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСертификатаСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСертификата = Результат.Значение;
	
	ДвоичныеДанныеСертификата = ДополнительныеПараметры.СоответствиеСертификатов.Получить(ИдентификаторСертификата);
	
	ОписаниеОшибки = "";
	НовыйСертификат = ОбменСБанкамиСлужебныйВызовСервера.СоздатьСертификатСбербанка(
		ДвоичныеДанныеСертификата, Организация);
	Если НЕ ЗначениеЗаполнено(НовыйСертификат) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Сертификаты.Добавить();
	НоваяСтрока.Сертификат = НовыйСертификат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСИспользованиемДополнительнойОбработки

&НаСервереБезКонтекста
Процедура СохранитьВнешнююОбработку(Знач АдресФайла, Знач Версия, Знач ИмяМодуля, Знач Наименование)
	
	ОбменСБанкамиСлужебный.СохранитьВнешнююОбработку(АдресФайла, Версия, ИмяМодуля, Наименование);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВнешнегоМодуляИзТонкогоКлиента(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ НЕ ВыбранныеФайлы.Количество() Тогда
		ПутьКФайлуВнешнегоМодуля = "";
	Иначе
		ПутьКФайлуВнешнегоМодуля = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаВнешнегоМодуляИзВеб(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранФайлВнешнегоМодуля = Результат;
	АдресФайлаВнешнегоМодуля = Адрес;
	ПутьКФайлуВнешнегоМодуля = ВыбранноеИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастройкиОбменаЧерезДополнительнуюОбработку()
	
	ОтпечатокBase64 = ОбменСБанкамиСлужебныйВызовСервера.СтрокаBase64БезBOM(Отпечаток);
	ДвоичныеДанные = Base64Значение(ОтпечатокBase64);
	МассивПодписи = Новый Массив;
	МассивПодписи.Добавить(ДвоичныеДанные);
	Попытка
		МассивПодписей = ПодключаемыйМодуль.Подписать(СертификатXML, МассивПодписи);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка установки подписи.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Установка подписи'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, , 1, НастройкаОбмена);
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецПопытки;

	Попытка
		ДопПараметры = Новый Структура("ИдентификаторХранилища", ИдентификаторХранилища);
		ПодписьВалидна = ПодключаемыйМодуль.ПроверитьПодпись(СертификатXML, ДвоичныеДанные, МассивПодписей[0], ДопПараметры);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка проверки подписи.
								|Код ошибки: ДО-%1
								|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Проверка подписи'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, , 1, НастройкаОбмена);
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецПопытки;
	
	Попытка
		ПодключаемыйМодуль.ОтправитьЗапрос(СертификатXML, 1);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка отправки тестового запроса.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Отправка тестового запроса'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, , 1, НастройкаОбмена);
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецПопытки;
	
	ОбработатьРезультатТестаНастройки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКлючаЧерезДополнительнуюОбработку(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторХранилища = ВыбранныйЭлемент.Значение;
	
	ТребуетсяУстановкаPINКода = ОбменСБанкамиСлужебныйКлиент.НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ПодключаемыйМодуль, ИдентификаторХранилища);

	Если ТребуетсяУстановкаPINКода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторХранилища", ИдентификаторХранилища);
	Если ТребуетсяУстановкаPINКода Тогда
		ОбработчикВводаPIN = Новый ОписаниеОповещения(
			"ОбработатьВводPINЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбменСБанками.Форма.ЗапросPINКода", ДополнительныеПараметры, , , , , ОбработчикВводаPIN);
	Иначе
		ПослеУстановкиPINЧерезДополнительнуюОбработку(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводPINЧерезДополнительнуюОбработку(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	PINУстановлен = ОбменСБанкамиСлужебныйКлиент.УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
		ПодключаемыйМодуль, ДополнительныеПараметры.ИдентификаторХранилища, Результат);

	Если PINУстановлен Тогда
		ПослеУстановкиPINЧерезДополнительнуюОбработку(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиPINЧерезДополнительнуюОбработку(ДополнительныеПараметры)
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеВыбораСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьСертификатЧерезДополнительнуюОбработку(
		Оповещение, ПодключаемыйМодуль, ДополнительныеПараметры.ИдентификаторХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСертификатаЧерезДополнительнуюОбработку(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СертификатXML = ДанныеСертификата.СертификатXML;
	
	НовыйСертификат = НайтиСоздатьСертификатВнешнегоМодуля(СертификатXML, Организация, ПрограммаБанка, ДанныеСертификата);
		
	НовСтрока = Сертификаты.Добавить();
	НовСтрока.Сертификат = НовыйСертификат;
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьДополнительнуюОбработку()
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресФайлаВнешнегоМодуля);
		ДвоичныеДанныеОбработки.Записать(ВремФайл);
		ПодключаемыйМодуль = ВнешниеОбработки.ПолучитьФорму(ВремФайл);
		ИмяВнешнегоМодуля = ПодключаемыйМодуль.ЭтотОбъект;
		ПозицияТочки = СтрНайти(ИмяВнешнегоМодуля, ".");
		ИмяВнешнегоМодуля = Сред(ИмяВнешнегоМодуля, ПозицияТочки + 1);
	#Иначе
		
		ПодключитьВнешнююОбработку();
		
		Если НЕ ЗначениеЗаполнено(ИмяВнешнегоМодуля) Тогда // обработка не подключилась
			Возврат Ложь;
		КонецЕсли;
		
		ИмяФормыОбработки = "ВнешняяОбработка." + ИмяВнешнегоМодуля + ".Форма";
		Попытка
			ПараметрыФормыОбработки = Новый Структура("РежимЭДО", Истина);
			ПодключаемыйМодуль = ПолучитьФорму(ИмяФормыОбработки, ПараметрыФормыОбработки, , УникальныйИдентификатор);
		Исключение
			Операция = НСтр("ru = 'Получение формы внешней обработки.'");
			ТекстСообщения = НСтр("ru = 'Не удалось подключить указанный внешний модуль'");
			ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, , 1);
			Возврат Ложь;
		КонецПопытки;
	#КонецЕсли
	
	СведенияОВнешнейОбработке = ОбменСБанкамиСлужебныйВызовСервера.СведенияОВнешнейОбработке(ИмяВнешнегоМодуля);
	
	Если Не ЗначениеЗаполнено(СведенияОВнешнейОбработке) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияДополнительнойОбработки = СведенияОВнешнейОбработке.Версия;
	НаименованиеВнешнейОбработки = СведенияОВнешнейОбработке.Наименование;
	
	Если Не ЗначениеЗаполнено(ВерсияДополнительнойОбработки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПодключитьВнешнююОбработку()
	
	ОбменСБанкамиСлужебный.ПодключитьВнешнююОбработку(АдресФайлаВнешнегоМодуля, ИмяВнешнегоМодуля);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьИнициализациюДополнительнойОбработки(Оповещение)

	Если НЕ ПодключитьДополнительнуюОбработку() Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;

	ВерсияАктуальнойОбработки = Неопределено;
	
	ОбменСБанкамиСлужебныйВызовСервера.ПроверитьАктуальностьВнешнейОбработки(
		ИмяВнешнегоМодуля, ВерсияДополнительнойОбработки, ВерсияАктуальнойОбработки);
		
	Если ЗначениеЗаполнено(ВерсияАктуальнойОбработки) Тогда
		ТекстВопроса = НСтр("ru = 'В информационной базе уже есть модуль версии %1.
								|Выбранный модуль имеет другую версию %2.
								|Модуль какой версии нужно теперь использовать?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, ВерсияАктуальнойОбработки, ВерсияДополнительнойОбработки);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеПослеИнициализацииДополнительнойОбработки", Оповещение);
		ОповещениеДляВопроса = Новый ОписаниеОповещения(
			"ПослеВопросаОНовойВерсииДополнительнойОбработки", ЭтотОбъект, ДополнительныеПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, ВерсияДополнительнойОбработки);
		Кнопки.Добавить(Ложь, ВерсияАктуальнойОбработки);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ЗаголовокВопроса = НСтр("ru = 'Выбор модуля для использования'");
		ПоказатьВопрос(ОповещениеДляВопроса, ТекстВопроса, Кнопки, , Истина, ЗаголовокВопроса);
	Иначе
		СохранитьВнешнююОбработку = Истина;
		ИнициализироватьДополнительнуюОбработкуПослеПодключения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьДополнительнуюОбработкуПослеПодключения(Оповещение)
	
	Попытка
		ОписаниеОбработки = ПодключаемыйМодуль.ОписаниеОбработки();
		ВерсияAPI = ОписаниеОбработки.ВерсияAPI;
	Исключение
		ВерсияAPI = 1;
	КонецПопытки;
	
	Если ВерсияAPI = 1 Тогда
		Попытка
			ПодключаемыйМодуль.Инициализировать();
			ВыполнитьОбработкуОповещения(Оповещение, Истина);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка инициализации внешнего модуля.
										|Код ошибки: ДО-%1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Инициализация внешней обработки'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецПопытки;
	Иначе
		Попытка
			АдресКомпонентыДополнительнойОбработки = "";
			ИнициализацияВыполнена = ПодключаемыйМодуль.НачатьИнициализацию(АдресКомпонентыДополнительнойОбработки);
		Исключение
			ШаблонОшибки = НСтр("ru = 'Ошибка инициализации внешнего модуля.
										|Код ошибки: ДО-%1
										|%2'");
			ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
			ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
			Операция = НСтр("ru = 'Инициализация внешней обработки'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
			Возврат;
		КонецПопытки;
		
		Если ИнициализацияВыполнена Тогда
			ЗавершитьИнициализациюВнешнейКомпонентыДополнительнойОбработки(Оповещение);
		Иначе
			ДополнительныеПараметры = Новый Структура("ОповещениеПослеИнициализацииДополнительнойОбработки", Оповещение);
			ОбработчикПослеУстановкиВК = Новый ОписаниеОповещения("ПослеУстановкиВнешнейКомпонентыДополнительногоМодуля",
				ЭтотОбъект, ДополнительныеПараметры, "ПослеОшибкиУстановкиВнешнейКомпонентыДополнительногоМодуля", ЭтотОбъект);
			НачатьУстановкуВнешнейКомпоненты(ОбработчикПослеУстановкиВК, АдресКомпонентыДополнительнойОбработки);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОНовойВерсииДополнительнойОбработки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Истина Тогда // Заменить внешнюю обработку
		СохранитьВнешнююОбработку = Истина;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		СохранитьВнешнююОбработку = Ложь;
		АдресФайлаВнешнегоМодуля = АдресВнешнейОбработки(ИмяВнешнегоМодуля, УникальныйИдентификатор);
		
		Если Не ЗначениеЗаполнено(АдресФайлаВнешнегоМодуля) ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресФайлаВнешнегоМодуля) Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки, Ложь);
			Возврат;
		КонецЕсли;
		
		Если НЕ ПодключитьДополнительнуюОбработку() Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки, Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьДополнительнуюОбработкуПослеПодключения(
		ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИнициализациюВнешнейКомпонентыДополнительнойОбработки(Оповещение)
	
	Попытка
		ПодключаемыйМодуль.ЗавершитьИнициализацию();
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Ошибка завершения инициализации внешнего модуля.
									|Код ошибки: ДО-%1
									|%2'");
		ДеталиОшибки = ПодключаемыйМодуль.ДеталиОшибки();
		ТекстСообщения = СтрШаблон(ШаблонОшибки, Формат(ДеталиОшибки.Код, "ЧН=0; ЧГ="), ДеталиОшибки.Сообщение);
		Операция = НСтр("ru = 'Завершение инициализации внешней обработки'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, , 1);
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиВнешнейКомпонентыДополнительногоМодуля(ДополнительныеПараметры) Экспорт
	
	ЗавершитьИнициализациюВнешнейКомпонентыДополнительнойОбработки(
		ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОшибкиУстановкиВнешнейКомпонентыДополнительногоМодуля(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВидОперации = НСтр("ru = 'Установка внешней компоненты дополнительной обработки'");
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	ТекстСообщения = НСтр("ru = 'При подключении внешнего модуля произошла ошибка.'");
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеИнициализацииДополнительнойОбработки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИнициализацииДополнительнойОбработки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
		СменитьСтраницуШаги(Элементы.СтраницаСертификаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресВнешнейОбработки(ИмяМодуля, УникальныйИдентификатор)
	
	УстановитьПривилегированныйРежим(Истина);

	ДанныеВнешнихМодулей = Константы.ВнешниеФайлыОбменСБанками.Получить().Получить();
	
	Если НЕ ДанныеВнешнихМодулей.Свойство("ВнешниеОбработки") Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеМодуля = ДанныеВнешнихМодулей.ВнешниеОбработки.Получить(ИмяМодуля);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеМодуля.ДвоичныеДанныеМодуля, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ОбменСИспользованиемВнешнейКомпоненты

&НаКлиенте
Процедура ВыбратьВерсиюИспользуемогоВнешнегоМодуля(Оповещение, Версия1, Версия2)
	
	ТекстВопроса = НСтр("ru = 'В информационной базе уже есть модуль версии %1.
						|Выбранный модуль имеет другую версию %2.
						|Модуль какой версии нужно теперь использовать?'");
	ТекстВопроса = СтрШаблон(ТекстВопроса, Версия1, Версия2);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(Версия1, Версия1);
	Кнопки.Добавить(Версия2, Версия2);
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	ЗаголовокВопроса = НСтр("ru = 'Выбор версии модуля'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , , ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастройкиОбменаВК()
	
	// Удаляем признак прерывания процесса
	ОбменСБанкамиСлужебныйКлиент.ПроцессПрерван(НастройкаОбмена);

	ПараметрыСоединения = Неопределено;
	Если СпособСозданияНастройки <> 1 Тогда // аутентификация на токене уже выполнена
		ПараметрыСоединения = Новый Структура;
		ПараметрыСоединения.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
		ПараметрыСоединения.Вставить("Отпечаток", Отпечаток);
		ПараметрыСоединения.Вставить("СертификатBase64", Base64Строка(СертификатВК));
		ПараметрыСоединения.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеТестаНастройкиВК", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ТестНастройкиОбменаВК(Оповещение, НастройкаОбмена, ПараметрыСоединения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСертификатыПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ОбработатьРезультатСозданияНастройкиОбмена(Ложь);
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = Результат;
	
	СохранитьОчереднойСертификатВИнформационнойБазеВК(ДополнительныеПараметры.ДвоичныеДанныеСертификатовИзФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСертификатПослеПолученияДанныхКлючаВК(СтруктураСертификата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураСертификата = Неопределено Тогда
		ОбработатьРезультатСозданияНастройкиОбмена(Ложь);
		Возврат;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	
	Успех = ДобавитьСертификатВНастройкуОбменаВК(
		НастройкаОбмена, ДополнительныеПараметры.СертификатBase64, СтруктураСертификата);
		
	Если Успех Тогда
		СохранитьОчереднойСертификатВИнформационнойБазеВК(ДополнительныеПараметры.ДанныеСертификатов);
	Иначе
		ОбработатьРезультатСозданияНастройкиОбмена(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОчереднойСертификатВИнформационнойБазеВК(ДанныеСертификатов)
	
	Если ДанныеСертификатов.Количество() = 0 Тогда
		ОбработатьРезультатСозданияНастройкиОбмена(Истина);
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		ПодключитьОбработчикОжидания("ТестНастройкиОбменаВК", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ДанныеСертификатов.Получить(0);
	СертификатBase64 = Base64Строка(ДвоичныеДанныеСертификата);
	ДанныеСертификатов.Удалить(0);
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СертификатBase64", СертификатBase64);
	ДополнительныеПараметры.Вставить("ДанныеСертификатов", ДанныеСертификатов);
	
	Обработчик = Новый ОписаниеОповещения(
		"СохранитьСертификатПослеПолученияДанныхКлючаВК", ЭтотОбъект, ДополнительныеПараметры);
		
	ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеКлючаЧерезВК(Обработчик, ПодключаемыйМодуль, СертификатBase64);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеЗаданияСкачкиВК()
	
	Задание = ОбменСБанкамиСлужебныйВызовСервера.ПроверитьВыполнениеФоновогоЗаданияНаСервере(
		ИдентификаторЗадания, УникальныйИдентификатор);
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
			ВерсияВК = СтруктураДанных.Версия;
			СохранитьВКВИБ = СтруктураДанных.СохранитьВИБ;
			АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(СтруктураДанных.ДанныеВК, УникальныйИдентификатор);
			ИмяВнешнегоМодуля = СтруктураДанных.ИмяВнешнегоМодуля;
			ПолучитьНастройкиОбменаССервераБанкаЧерезВК();
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияСкачкиВК", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиВнешнейКомпоненты(ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПовторнойПопыткиПодключенияВнешнейКомпоненты", ЭтотОбъект);
	ИдентификаторВК = "V" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""); //генерация уникального имени

	НачатьПодключениеВнешнейКомпоненты(
		Оповещение, АдресФайлаВнешнегоМодуля, ИдентификаторВК, ТипВнешнейКомпоненты.Native);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНастроекИзБанкаВК(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	АдресФайлаНастроекОбмена = ПоместитьВоВременноеХранилище(Base64Значение(РезультатВызова), УникальныйИдентификатор);
	
	УчастникиОбменаИзФайла = УчастникиОбменаИзФайла(АдресФайлаНастроекОбмена, Организация);
		
	Если УчастникиОбменаИзФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УчастникиОбменаИзФайла.Организация <> Организация Тогда
		ТекстСообщения = НСтр("ru = 'Указана неверная учетная запись.
									|Требуются настройки для организации: %1
									|Получены настройки для организации: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Организация, УчастникиОбменаИзФайла.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Возврат;
	КонецЕсли;

	Если УчастникиОбменаИзФайла.Банк <> Банк Тогда
		ТекстСообщения = НСтр("ru = 'Подключено неверное аппаратное устройство.
									|Требуются настройки для банка: %1
									|Получены настройки для банка: %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Банк, УчастникиОбменаИзФайла.Банк);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатПолученияНастроекССервераБанка(Истина);
	Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	ПодключитьОбработчикОжидания("СоздатьНастройкуОбмена", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПовторнойПопыткиПодключенияВнешнейКомпоненты(Подключено, ДополнительныеПараметры) Экспорт

	Если НЕ Подключено Тогда
		ТекстСообщения = НСтр("ru = 'Внешний модуль не удалось подключить.
									|Обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Возврат;
	КонецЕсли;
	
	СоздатьОбъектПодключаемогоМодуля();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИнициализацииВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(Результат, УникальныйИдентификатор);
		ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ЗагрузитьНастройкиОбменаССервераБанкаПослеПолученияДанныхСертификата", ЭтотОбъект);
		
	ПараметрыСоединения = Новый Структура();
	ПараметрыСоединения.Вставить("ИдентификаторОрганизации", "");
	ПараметрыСоединения.Вставить("БИК", БИКБанка(Банк));
	ПараметрыСоединения.Вставить("КлючУникальности", "");
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеСертификатаСТокенаВК(Оповещение, ПодключаемыйМодуль, ПараметрыСоединения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВерсииВК(Версия, ДополнительныеПараметры) Экспорт
	
	Если Версия = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Версия = ДополнительныеПараметры.ВерсияВБазе Тогда
		
		ДанныеВнешнейКомпоненты = ДанныеВнешнейКомпоненты(ДополнительныеПараметры.ИмяМодуля);
		
		АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(
			ДанныеВнешнейКомпоненты.ДвоичныеДанныеМодуля, УникальныйИдентификатор);
			
	КонецЕсли;
	
	ВерсияВК = Версия;
	
	ХронологияПереключенияСтраниц.Добавить(Элементы.СтраницаЗапросИспользованияВнешнегоМодуля);
	СменитьСтраницуШаги(Элементы.СтраницаФинал);
	
	ПолучитьНастройкиОбменаССервераБанкаЧерезВК();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиОбменаССервераБанкаЧерезВК()
	
	ИдентификаторВК = "V" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""); //генерация уникального имени
	Оповещение = Новый ОписаниеОповещения("ПослеПопыткиПодключенияВнешнейКомпоненты", ЭтотОбъект);
	НачатьПодключениеВнешнейКомпоненты(
		Оповещение, АдресФайлаВнешнегоМодуля, ИдентификаторВК, ТипВнешнейКомпоненты.Native);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВК(НастройкаОбмена, УникальныйИдентификатор)
	
	ИмяМодуля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ИмяВнешнегоМодуля");
	ДанныеВК = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейКомпоненты(ИмяМодуля);
	АдресВК = ПоместитьВоВременноеХранилище(ДанныеВК.ДвоичныеДанныеМодуля, УникальныйИдентификатор);
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("АдресВК", АдресВК);
	СтруктураВозврата.Вставить("ИмяМодуля", ИмяМодуля);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОшибкуПолученияНастроекИзБанкаВК(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = НСтр("ru = 'При получении настроек обмена из банка произошла ошибка.'");
	ВидОперации = НСтр("ru = 'Получение настроек обмена с сервера банка.'");
	
	Оповещение = Новый ОписаниеОповещения("СообщитьОшибкуПользователю", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьИнформациюОбОшибкеВК(
		Оповещение, ПодключаемыйМодуль, ВидОперации, ТекстСообщения);
		
	ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьСертификатВнешнегоМодуля(Знач ДанныеСертификата, Знач Организация, Знач ПрограммаБанка, Знач СвойстваСертификата)
	
	Возврат ОбменСБанкамиСлужебный.НайтиСоздатьСертификатВнешнегоМодуля(
		ДанныеСертификата, Организация, ПрограммаБанка, СвойстваСертификата);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияОВКБанка(Знач АдресВнешнегоМодуля)
	
	Возврат ОбменСБанкамиСлужебный.ИнформацияОВКБанка(АдресВнешнегоМодуля);
	
КонецФункции

&НаКлиенте
Процедура ПослеТестаНастройкиВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(Результат, УникальныйИдентификатор);
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
		ОбработатьРезультатТестаНастройки(Ложь);
		Возврат;
	КонецЕсли;
	
	Если НЕ РазделениеВключено И (СпособСозданияНастройки = 2 ИЛИ (СпособСозданияНастройки = 0 И СохранитьВКВИБ)) Тогда
		ОбменСБанкамиСлужебныйВызовСервера.СохранитьВКБанка(АдресФайлаВнешнегоМодуля);
	КонецЕсли;
	
	ОбработатьРезультатТестаНастройки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъектПодключаемогоМодуля()
	
	Попытка
		ПодключаемыйМодуль = Новый("AddIn." + ИдентификаторВК + "." + ИмяВнешнегоМодуля);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка подключения внешнего модуля банка.'");
		Операция = НСтр("ru = 'Подключение внешней компоненты банка'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ПодробноеПредставлениеОшибки, ТекстСообщения, 1);
		ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Возврат;
	КонецПопытки;
	
	Оповещение = Новый ОписаниеОповещения("ИнициализироватьПослеПроверкиВерсииВК", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ПроверитьВерсиюВК(Оповещение, ПодключаемыйМодуль, ВерсияВК);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПослеПроверкиВерсииВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(Результат, УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеИнициализацииВК", ЭтотОбъект);

	ОбменСБанкамиСлужебныйКлиент.ИнициализироватьВК(Оповещение, ПодключаемыйМодуль);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиОбменаССервераБанкаПослеПолученияДанныхСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(Результат, УникальныйИдентификатор);
		ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ОбработатьРезультатПолученияНастроекССервераБанка(Ложь);
		Возврат;
	КонецЕсли;
	
	// Кэширование для использование в тесте настроек.
	СертификатВК = Base64Значение(Результат.СертификатBase64);
	Отпечаток = Результат.Отпечаток;
	КомуВыданСертификатВК = Результат.ВладелецФИО;
	ИдентификаторХранилища = Результат.ИдентификаторХранилища;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияНастроекИзБанкаВК", ЭтотОбъект, ДополнительныеПараметры,
		"ОбработатьОшибкуПолученияНастроекИзБанкаВК", ЭтотОбъект);
	
	ПодключаемыйМодуль.НачатьВызовНастройкиЭДО(Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДобавитьСертификатВНастройкуОбменаВК(Знач НастройкаОбмена, Знач СертификатBase64, Знач СтруктураСертификата)
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "Организация");
	
	НовыйСертификат = ОбменСБанкамиСлужебный.НайтиСоздатьСертификатВнешнегоМодуля(
		СертификатBase64, Организация, Перечисления.ПрограммыБанка.ОбменЧерезВК, СтруктураСертификата);
		
	Попытка
		НастройкаОбменаОбъект = НастройкаОбмена.ПолучитьОбъект();
		НастройкаОбменаОбъект.Прочитать();
		
		НовСтрока = НастройкаОбменаОбъект.СертификатыПодписейОрганизации.Добавить();
		НовСтрока.СертификатЭП = НовыйСертификат;
	
		НастройкаОбменаОбъект.Записать();
	Исключение
		Операция = НСтр("ru = 'Добавление сертификата в настройку обмена'");
		ШаблонСообщения = НСтр("ru = 'При добавлении сертификата в настройку обмена произошла ошибка.
									|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			Операция, ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);
		Возврат Ложь;
	КонецПопытки;
	
	НастройкаОбменаОбъект.Разблокировать();
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВнешнейКомпоненты(ИмяМодуля)
	
	Возврат ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейКомпоненты(ИмяМодуля);
	
КонецФункции

&НаКлиенте
Процедура ПослеПопыткиПодключенияВнешнейКомпоненты(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Не Подключено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеУстановкиВнешнейКомпоненты", ЭтотОбъект);
		НачатьУстановкуВнешнейКомпоненты(Оповещение, АдресФайлаВнешнегоМодуля);
		Возврат;
	КонецЕсли;
	
	СоздатьОбъектПодключаемогоМодуля();
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьВКССервераБанка()
	
	Задание = ОбменСБанкамиСлужебныйВызовСервера.СкачатьВКНаСервере(УникальныйИдентификатор, URLВК);
	
	АдресХранилища = Задание.АдресХранилища;
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
			СохранитьВКВИБ = СтруктураДанных.СохранитьВИБ;
			АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(СтруктураДанных.ДанныеВК, УникальныйИдентификатор);
			ИмяВнешнегоМодуля = СтруктураДанных.ИмяВнешнегоМодуля;
			ВерсияВК = СтруктураДанных.Версия;
			ПолучитьНастройкиОбменаССервераБанкаЧерезВК();
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Задание.Идентификатор;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияСкачкиВК", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМетоды

&НаСервереБезКонтекста
Функция УчастникиОбменаИзФайла(Знач АдресФайла, Знач Организация)
	
	ЭД = ОбменСБанкамиСлужебный.XDTOДанныеФайлаНастроек(АдресФайла);
	
	Если ЭД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоНастройкиСбербанка = ЭД.Свойства().Получить("Data") = Неопределено;
	
	СтруктураПоискаОрганизации = Новый Структура;
	ИННОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.INN, ЭД.Recipient.inn);
	Если ЗначениеЗаполнено(ИННОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("ИНН", ИННОрганизации);
	КонецЕсли;
	
	КППОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.KPP, ЭД.Recipient.kpp);
	Если КППОрганизации = "000000000" Тогда // Для Сбербанка
		КППОрганизации = "0";
	КонецЕсли;
	Если ЗначениеЗаполнено(КППОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("КПП", КППОрганизации);
	КонецЕсли;
	НаименованиеОрганизации = ?(ЭтоНастройкиСбербанка, ЭД.Customer.Name, ЭД.Recipient.name);
	Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
		СтруктураПоискаОрганизации.Вставить("Наименование", НаименованиеОрганизации);
	КонецЕсли;
	
	Если СтруктураПоискаОрганизации.Количество() > 0 Тогда
		СсылкаНаОрганизацию = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
			"Организации", , СтруктураПоискаОрганизации);
	ИначеЕсли НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru = 'В файле настроек нет информации об организации.
									|Обратитесь в свой банк.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе
		СсылкаНаОрганизацию = Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
		ТекстСообщения = НСтр("ru = 'Файл содержит настройки для неизвестной организации: %1%2%3'");
		Если СтруктураПоискаОрганизации.Свойство("ИНН") Тогда
			ТекстИНН = Символы.ПС + НСтр("ru = 'ИНН: %1'");
			ТекстИНН = СтрШаблон(ТекстИНН, СтруктураПоискаОрганизации.ИНН);
		Иначе
			ТекстИНН = "";
		КонецЕсли;
		Если СтруктураПоискаОрганизации.Свойство("КПП") Тогда
			ТекстКПП = Символы.ПС + НСтр("ru = 'КПП: %1'");
			ТекстКПП = СтрШаблон(ТекстКПП, СтруктураПоискаОрганизации.КПП);
		Иначе
			ТекстКПП = "";
		КонецЕсли;
		Если СтруктураПоискаОрганизации.Свойство("Наименование") Тогда
			ТекстНаименование = Символы.ПС + НСтр("ru = 'Наименование: %1'");
			ТекстНаименование = СтрШаблон(
				ТекстНаименование, СтруктураПоискаОрганизации.Наименование);
		Иначе
			ТекстНаименование = "";
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			ТекстСообщения, ТекстИНН, ТекстКПП, ТекстНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	НаименованиеБанка = "";
	СтруктураПоискаБанка = Новый Структура;
	БИК = ?(ЭтоНастройкиСбербанка, ЭД.Bank.BIC, ЭД.Sender.bic);
	СтруктураПоискаБанка.Вставить("Код", БИК);
	НаименованиеБанка = ?(ЭтоНастройкиСбербанка, ЭД.Bank.Name, ЭД.Sender.name);
	СтруктураПоискаБанка.Вставить("Наименование", НаименованиеБанка);
	
	СсылкаНаБанк = ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"Банки", БИК, СтруктураПоискаБанка);
		
	Если НЕ ЗначениеЗаполнено(СсылкаНаБанк) Тогда
		ТекстСообщения = НСтр("ru = 'Файл содержит настройки для неизвестного банка: %1%2'");
		Если СтруктураПоискаБанка.Свойство("Код") Тогда
			ТекстБИК = Символы.ПС + НСтр("ru = 'БИК: %1'");
			ТекстБИК = СтрШаблон(ТекстБИК, СтруктураПоискаБанка.Код);
		Иначе
			ТекстБИК = "";
		КонецЕсли;
		Если СтруктураПоискаБанка.Свойство("Наименование") Тогда
			ТекстНаименование = Символы.ПС + НСтр("ru = 'Наименование: %1'");
			ТекстНаименование = СтрШаблон(
				ТекстНаименование, СтруктураПоискаБанка.Наименование);
		Иначе
			ТекстНаименование = "";
		КонецЕсли;
		ТекстСообщения = СтрШаблон(
			ТекстСообщения, ТекстБИК, ТекстНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	Возврат Новый Структура("Организация, Банк", СсылкаНаОрганизацию, СсылкаНаБанк);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСсылкуНаСайтБанка(ИнформацияНаСайтеБанка, АдресСайта)

	ИнформацияНаСайтеБанка.Видимость = Истина;
	ИнформацияНаСайтеБанка.Заголовок = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Подробную информацию о порядке и условиях подключения на стороне банка можно получить'"), " ",
		Новый ФорматированнаяСтрока(НСтр("ru = 'здесь.'"), , , , АдресСайта));

КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяНаПредыдущуюСтраницу()
	
	ПредыдущийШаг = ХронологияПереключенияСтраниц[ХронологияПереключенияСтраниц.ВГраница()];
	ХронологияПереключенияСтраниц.Удалить(ХронологияПереключенияСтраниц.ВГраница());
	СменитьСтраницуШаги(ПредыдущийШаг);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияНастроекССервераБанка(Успех)
	
	Если Успех Тогда
		Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Успешно32;
	Иначе
		Элементы.ПолучениеНастроекОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
		Элементы.СтраницыРезультатПодключения.ТекущаяСтраница = Элементы.СтраницаНеПодключено;
		Элементы.ПолучитьНастройки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатСозданияНастройкиОбмена(Успех)
	
	Если Успех Тогда
		ОповеститьОбИзменении(НастройкаОбмена);
		Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Успешно32;
		Элементы.ОткрытьНастройкуОбмена.Видимость = Истина;
		Элементы.Заголовок.Заголовок = Строка(НастройкаОбмена);
	Иначе
		Элементы.СозданиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
		Элементы.СтраницыРезультатПодключения.ТекущаяСтраница = Элементы.СтраницаНеПодключено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрограммыКриптографии(Оповещение)
	
	СменитьСтраницуШаги(Элементы.СтраницаПодождите);
	ДополнительныеПараметры = Новый Структура("Оповещение", Оповещение);
	
	ОповещениеПослеПодключенияРасширенияДляРаботыСКриптографией = Новый ОписаниеОповещения(
		"ПослеПодключенияРасширенияДляРаботыСКриптографией", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(ОповещениеПослеПодключенияРасширенияДляРаботыСКриптографией);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСКриптографией(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		НачатьЗаполнениеПрограммКриптографии(ДополнительныеПараметры.Оповещение);
	Иначе
		ОповещениеПослеУстановкиРасширенияДляРаботыСКриптографией = Новый ОписаниеОповещения(
			"ПослеУстановкиРасширенияДляРаботыСКриптографией", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСКриптографией(ОповещениеПослеУстановкиРасширенияДляРаботыСКриптографией);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСКриптографией(ДополнительныеПараметры) Экспорт
	
	ОповещениеПослеПодключенияРасширенияДляРаботыСКриптографией = Новый ОписаниеОповещения(
		"ПослеПовторногоПодключенияРасширенияДляРаботыСКриптографией", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСКриптографией(ОповещениеПослеПодключенияРасширенияДляРаботыСКриптографией);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПовторногоПодключенияРасширенияДляРаботыСКриптографией(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		НачатьЗаполнениеПрограммКриптографии(ДополнительныеПараметры.Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеПрограммКриптографии(Оповещение)
	
	ПрограммыКриптографии = ПрограммыКриптографии();
		
	МассивПрограмм = Новый Массив;
	МассивПрограмм.Добавить("CryptoPro");
	МассивПрограмм.Добавить("SignalComECGOST");
	МассивПрограмм.Добавить("eToken");
	
	МассивПрограммДляСоздания = Новый Массив;
	
	ПроверитьОчереднуюПрограммуКриптографии(МассивПрограмм, ПрограммыКриптографии, Оповещение, МассивПрограммДляСоздания);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОчереднуюПрограммуКриптографии(МассивПрограмм, ПрограммыКриптографии, Оповещение, МассивПрограммДляСоздания)
	
	Если МассивПрограмм.Количество() = 0 Тогда
		
		Если МассивПрограммДляСоздания.Количество() Тогда
			ЗаписатьПрограммыКриптографии(ПрограммыКриптографии, МассивПрограммДляСоздания);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	ТекПрограмма = МассивПрограмм.Получить(0);
	МассивПрограмм.Удалить(0);
	
	ПараметрыПрограммы = Неопределено;
	Если НЕ ПрограммыКриптографии.Свойство(ТекПрограмма, ПараметрыПрограммы) Тогда
		ПроверитьОчереднуюПрограммуКриптографии(
			МассивПрограмм, ПрограммыКриптографии, Оповещение, МассивПрограммДляСоздания);
		Возврат;
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
	ДополнительныеПараметры.Вставить("МассивПрограмм", МассивПрограмм);
	ДополнительныеПараметры.Вставить("ПрограммыКриптографии", ПрограммыКриптографии);
	ДополнительныеПараметры.Вставить("ТекущаяПрограмма", ТекПрограмма);
	ДополнительныеПараметры.Вставить("МассивПрограммДляСоздания", МассивПрограммДляСоздания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПолученияИнформацииМодуляКриптографии", ЭтотОбъект,
		ДополнительныеПараметры, "ПриОшибкеПолученияИнформацииМодуляКриптографии", ЭтотОбъект);
	
	СредстваКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(
		ОписаниеОповещения, ПараметрыПрограммы.ИмяПрограммы, "", ПараметрыПрограммы.ТипПрограммы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьПрограммыКриптографии(ПрограммыКриптографии, МассивПрограммДляСоздания)
	
	ОписаниеПрограмм = Новый Массив;
	
	Для Каждого ТекПрограмма Из МассивПрограммДляСоздания Цикл
		ПараметрыПрограммы = ПрограммыКриптографии[ТекПрограмма];
		ОписаниеПрограммы = ЭлектроннаяПодпись.НовоеОписаниеПрограммы();
		ЗаполнитьЗначенияСвойств(ОписаниеПрограммы, ПараметрыПрограммы);
		ОписаниеПрограмм.Добавить(ОписаниеПрограммы);
	КонецЦикла;
	
	ЭлектроннаяПодпись.ЗаполнитьСписокПрограмм(ОписаниеПрограмм);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияИнформацииМодуляКриптографии(ИнформацияМодуля, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияМодуля <> Неопределено Тогда
		ДополнительныеПараметры.МассивПрограммДляСоздания.Добавить(ДополнительныеПараметры.ТекущаяПрограмма);
	КонецЕсли;
	ПроверитьОчереднуюПрограммуКриптографии(ДополнительныеПараметры.МассивПрограмм,
		ДополнительныеПараметры.ПрограммыКриптографии, ДополнительныеПараметры.Оповещение,
		ДополнительныеПараметры.МассивПрограммДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОшибкеПолученияИнформацииМодуляКриптографии(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьОчереднуюПрограммуКриптографии(ДополнительныеПараметры.МассивПрограмм,
		ДополнительныеПараметры.ПрограммыКриптографии, ДополнительныеПараметры.Оповещение,
		ДополнительныеПараметры.МассивПрограммДляСоздания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрограммыКриптографии()
	
	НастройкиПрограмм = Справочники.ПрограммыЭлектроннойПодписиИШифрования.ПоставляемыеНастройкиПрограмм();
	
	Настройка = НастройкиПрограмм.Добавить();
	Настройка.Представление       = НСтр("ru = 'КриптоПро eToken CSP'");
	Настройка.ИмяПрограммы        = "eToken Base Cryptographic Provider";
	Настройка.ТипПрограммы        = 1;
	Настройка.АлгоритмПодписи     = "RSA_SIGN";
	Настройка.АлгоритмХеширования = "SHA-1";
	Настройка.АлгоритмШифрования  = "DES";
	Настройка.Идентификатор       = "eToken";
	
	ТипизированнаяТаблица = Новый ТаблицаЗначений;
	КвалификаторСтроки = Новый КвалификаторыСтроки(150);
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ТипизированнаяТаблица.Колонки.Добавить("ИмяПрограммы", ОписаниеТиповСтрока);
	ТипизированнаяТаблица.Колонки.Добавить("ТипПрограммы", ОписаниеТиповЧисло);
	
	Для Каждого Строка Из НастройкиПрограмм Цикл
		НовСтрока = ТипизированнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрограммыКриптографии.ИмяПрограммы,
	|	ПрограммыКриптографии.ТипПрограммы
	|ПОМЕСТИТЬ ПрограммыКриптографии
	|ИЗ
	|	&ПрограммыКриптографии КАК ПрограммыКриптографии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы
	|ИЗ
	|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
	|ГДЕ
	|	(ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы, ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы) В
	|			(ВЫБРАТЬ
	|				ПрограммыКриптографии.ИмяПрограммы,
	|				ПрограммыКриптографии.ТипПрограммы
	|			ИЗ
	|				ПрограммыКриптографии КАК ПрограммыКриптографии)";
	Запрос.УстановитьПараметр("ПрограммыКриптографии", ТипизированнаяТаблица);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаПрограммы = НастройкиПрограмм.Найти(Выборка.ИмяПрограммы, "ИмяПрограммы");
		Если НЕ СтрокаПрограммы = Неопределено Тогда
			НастройкиПрограмм.Удалить(СтрокаПрограммы);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	Для Каждого Строка Из НастройкиПрограмм Цикл
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ИмяПрограммы", Строка.ИмяПрограммы);
		СтруктураЗаписи.Вставить("Представление", Строка.Представление);
		СтруктураЗаписи.Вставить("ТипПрограммы", Строка.ТипПрограммы);
		СтруктураЗаписи.Вставить("АлгоритмПодписи", Строка.АлгоритмПодписи);
		СтруктураЗаписи.Вставить("АлгоритмХеширования", Строка.АлгоритмХеширования);
		СтруктураЗаписи.Вставить("АлгоритмШифрования", Строка.АлгоритмШифрования);
		СтруктураВозврата.Вставить(Строка.Идентификатор, СтруктураЗаписи);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьОрганизациюВСертификате(Сертификат, Организация)
	
	Попытка
		СертификатОбъект = Сертификат.ПолучитьОбъект();
		СертификатОбъект.Организация = Организация;
		СертификатОбъект.Записать();
	Исключение
		Возврат;
		// операция не критичная, исключение не обрабатывается
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСозданияНастройкиОбмена()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Банк", Банк);
	СтруктураПараметров.Вставить("АдресСервера", АдресСервера);
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		СтруктураПараметров.Вставить("АутентификацияПоСертификату", СпособАутентификации = 0);
	КонецЕсли;
	СтруктураПараметров.Вставить("АутентификацияПоСертификату", СпособАутентификации = 0);
	СтруктураПараметров.Вставить("ИмяВнешнегоМодуля", ИмяВнешнегоМодуля);
	СтруктураПараметров.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Если СохранитьЛогин Тогда
		СтруктураПараметров.Вставить("ИмяПользователя", Логин);
	КонецЕсли;
	СтруктураПараметров.Вставить("ИспользуетсяКриптография", ИспользуетсяКриптография);
	СтруктураПараметров.Вставить("ПрограммаБанка", ПрограммаБанка);
	СтруктураПараметров.Вставить("РесурсВходящихДокументов", РесурсИсточник);
	СтруктураПараметров.Вставить("РесурсИсходящихДокументов", РесурсПриемник);
	Если ЭтоАдресВременногоХранилища(АдресФайлаСертификатаСбербанка) Тогда
		СтруктураПараметров.Вставить("СертификатСбербанка", ПолучитьИзВременногоХранилища(АдресФайлаСертификатаСбербанка));
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(АдресФайлаВКСбербанка) Тогда
		СтруктураПараметров.Вставить("ВКСбербанка", ПолучитьИзВременногоХранилища(АдресФайлаВКСбербанка));
	КонецЕсли;
	МассивСертификатов = Новый Массив;
	Для Каждого Элемент Из Сертификаты Цикл
		МассивСертификатов.Добавить(Элемент.Сертификат);
	КонецЦикла;
	СтруктураПараметров.Вставить("Сертификаты", МассивСертификатов);
	СтруктураПараметров.Вставить("СертификатАутентификации", СертификатАутентификации);
	СтруктураПараметров.Вставить("Недействительна", Истина);
	СтруктураПараметров.Вставить("ВерсияВнешнейКомпоненты", ВерсияВКСбербанк);
	СтруктураПараметров.Вставить("ВерсияФормата", ВерсияФормата);

	Возврат СтруктураПараметров;

КонецФункции

&НаКлиенте
Процедура СоздатьНастройкуОбмена()
	
	Если СпособСозданияНастройки = 0 ИЛИ СпособСозданияНастройки = 1 // загрузка из файла
		ИЛИ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК")
		ИЛИ (СпособСозданияНастройки = 2 И НастройкиЗагруженыИзФайла) Тогда //настройки получены пробной операцией
		ЗагрузитьНастройкуОбменаИзФайла();
		Возврат;
	КонецЕсли;
	
	ПараметрыНастройкиОбмена = СтруктураСозданияНастройкиОбмена();
	ЗаданиеВыполнено = Ложь; ЕстьОшибка = Ложь;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗапуститьСозданиеНастройкиОбмена(
		ПараметрыНастройкиОбмена, АдресХранилища, ИдентификаторЗадания, ЗаданиеВыполнено, ЕстьОшибка);
		
	Если ЗаданиеВыполнено Тогда
		Если ЕстьОшибка Тогда
			ОбработатьРезультатСозданияНастройкиОбмена(Ложь);
		Иначе
			ПослеСозданияНастройкиОбмена();
		КонецЕсли;
	ИначеЕсли Не ЗаданиеВыполнено Тогда
		ПараметрыОбработчикаОжидания = Новый Структура();
		ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
		ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
		ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияСозданияНастройкиОбмена", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапуститьСозданиеНастройкиОбмена(Знач СтруктураПараметров, Знач АдресХранилища, ИдентификаторЗадания, ЗаданиеВыполнено, ЕстьОшибка)
	
	НаименованиеЗадания = НСтр("ru = 'Создание настройки прямого обмена с банком'");
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтруктураПараметров);
	ПараметрыВыполнения.Добавить(АдресХранилища);
	
	Задание = ФоновыеЗадания.Выполнить(
			"ОбменСБанкамиСлужебный.СоздатьНастройкуОбмена", ПараметрыВыполнения, , НаименованиеЗадания);
			
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
		МассивСообщений = Задание.ПолучитьСообщенияПользователю();
		Если НЕ МассивСообщений = Неопределено И МассивСообщений.Количество() Тогда
			ЕстьОшибка = Истина;
			Для Каждого Сообщение Из МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияСозданияНастройкиОбмена()

	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		ПослеСозданияНастройкиОбмена();
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияСозданияНастройкиОбмена",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
	КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияНастройкиОбмена()
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	НастройкаОбмена = СтруктураВозврата.НастройкаОбмена;
	
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ОбработатьРезультатСозданияНастройкиОбмена(Ложь);
		Возврат;
	КонецЕсли;
	
	Оповестить("ИзмененаНастройкаОбмена", НастройкаОбмена);
	
	ПрограммаБанка = ПрограммаБанка(НастройкаОбмена);
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		ОбработатьРезультатСозданияНастройкиОбмена(Истина);
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		ПодключитьОбработчикОжидания("ТестНастройкиАсинхронныйОбмен", 0.1, Истина);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ОбработатьРезультатСозданияНастройкиОбмена(Истина);
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		ПодключитьОбработчикОжидания("ТестНастройкиОбменаСбербанк", 0.1, Истина);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		Если СпособСозданияНастройки = 1 Тогда // загрузка из файла
			ПараметрыВК = ПараметрыВК(НастройкаОбмена, УникальныйИдентификатор);
			
			АдресФайлаВнешнегоМодуля = ПараметрыВК.АдресВК;
			ИмяВнешнегоМодуля = ПараметрыВК.ИмяМодуля;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДвоичныеДанныеСертификатовИзФайла", СтруктураВозврата.ДанныеСертификатов);
			
			Оповещение = Новый ОписаниеОповещения(
				"СохранитьСертификатыПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
			
			ОбменСБанкамиСлужебныйКлиент.ПодключитьВнешнююКомпонентуБанка(
				Оповещение, АдресФайлаВнешнегоМодуля, ИмяВнешнегоМодуля);
			
		Иначе //соединение на токене уже установлено
			СохранитьОчереднойСертификатВИнформационнойБазеВК(СтруктураВозврата.ДанныеСертификатов);
		КонецЕсли;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн") Тогда
		ОбработатьРезультатСозданияНастройкиОбмена(Истина);
		ОбработатьРезультатТестаНастройки(Истина);
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ОбработатьРезультатСозданияНастройкиОбмена(Истина);
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		ПодключитьОбработчикОжидания("ТестНастройкиОбменаЧерезДополнительнуюОбработку", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрограммаБанка(НастройкаОбмена)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатТестаНастройки(Успех)
	
	РаботаПомощникаЗавершена = Ложь;
	Если Успех Тогда
		НастройкаВключена = Ложь;
		ВключитьНастройкуОбмена(НастройкаОбмена, НастройкаВключена);
		Если НастройкаВключена Тогда
			ОповеститьОбИзменении(НастройкаОбмена);
			Оповестить("ИзмененаНастройкаОбмена", НастройкаОбмена);
			Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Успешно32;
			Элементы.СтраницыРезультатПодключения.ТекущаяСтраница = Элементы.СтраницаПодключено;
			Элементы.ДекорацияУспешноеПодключение.Видимость = Истина;
			Если Элементы.КомандыНавигации.ТекущаяСтраница = Элементы.Отмена Тогда
				СменитьСтраницуКомандНавигации(Элементы.Готово);
			Иначе
				СменитьСтраницуКомандНавигации(Элементы.НазадГотово);
			КонецЕсли;
			РаботаПомощникаЗавершена = Истина;
		Иначе
			Элементы.СтраницыРезультатПодключения.ТекущаяСтраница = Элементы.СтраницаНеПодключено;
			Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
		КонецЕсли;
	Иначе
		Элементы.ДекорацияНеПодключено.Видимость = Истина;
		Элементы.ТестированиеНастройкиОбменаКартинка.Картинка = БиблиотекаКартинок.Ошибка32;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВключитьНастройкуОбмена(Знач НастройкаОбмена, Успех)
	
	УстановитьПривилегированныйРежим(Истина);
	Объект = НастройкаОбмена.ПолучитьОбъект();
	Объект.Прочитать();
	Попытка
		Объект.Недействительна = Ложь;
		Объект.Записать();
		Успех = Истина;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Включение настройки.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, 1, НастройкаОбмена);
	КонецПопытки
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОшибкуПользователю(ТекстСообщения, ДополнительныеПараметры) Экспорт
	
	ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(ТекстСообщения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииПомощника(Результат, ДополнительныеПараметры) Экспорт
	
	ПриЗакрытииНаСервере(ИдентификаторЗадания);

КонецПроцедуры


#КонецОбласти

#КонецОбласти