
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(ЭтотОбъект.Параметры.ЗначениеКопирования) Тогда // новый
		
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		Объект.ИспользуетсяКриптография = Ложь;
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		Если ЗначениеЗаполнено(Объект.Банк) Тогда
			НастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Объект.Банк);
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				Объект.ПрограммаБанка = НастройкиОбмена.ПрограммаБанка;
				Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
					ИспользуетсяВнешнийМодуль = Истина;
					Элементы.ИспользуетсяВнешнийМодуль.Доступность = Ложь;
					ЗагрузитьВК(НастройкиОбмена.АдресСервера, УникальныйИдентификатор, ИдентификаторЗаданияЗакачкиВК,
						ИмяВнешнегоМодуля, АдресВнешнегоМодуля);
					Если ЗначениеЗаполнено(ИмяВнешнегоМодуля) Тогда
						Объект.ИмяВнешнегоМодуля = ИмяВнешнегоМодуля;
					КонецЕсли;
				Иначе
					Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			Объект.ИспользуетсяКриптография = ИспользуетсяКриптография(Объект.ПрограммаБанка);
			ЗаполнитьВидыЭДДоступнымиЗначениями();
			ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ИсходящиеДокументы);
		КонецЕсли;
		ЗаполнитьНаименование(Объект.Организация, Объект.Банк, Объект.Наименование);
	ИначеЕсли Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Параметры.ЗначениеКопирования) Тогда
			РеквизитыКопируемойНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЭтотОбъект.Параметры.ЗначениеКопирования, "СертификатБанка, ВнешняяКомпонента");
			ДанныеСертификатаСбербанка = РеквизитыКопируемойНастройкиОбмена.СертификатБанка.Получить();
			СправочникОбъект.СертификатБанка = Новый ХранилищеЗначения(ДанныеСертификатаСбербанка);
			ДанныеВнешнейКомпоненты = РеквизитыКопируемойНастройкиОбмена.ВнешняяКомпонента.Получить();
			СправочникОбъект.ВнешняяКомпонента = Новый ХранилищеЗначения(ДанныеВнешнейКомпоненты);
			СохранитьСертификатСбербанка = Истина;
			Если ТипЗнч(ДанныеСертификатаСбербанка) = Тип("ДвоичныеДанные") Тогда
				АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДанныеСертификатаСбербанка, УникальныйИдентификатор);
			КонецЕсли;
			СохранитьВнешнююКомпонентуСбербанка = Истина;
			Если ТипЗнч(ДанныеВнешнейКомпоненты) = Тип("ДвоичныеДанные") Тогда
				АдресВнешнейКомпонентыСбербанка = ПоместитьВоВременноеХранилище(ДанныеВнешнейКомпоненты, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ДвоичныеДанныеСертификата  = СправочникОбъект.СертификатБанка.Получить();
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				СертификатБанка = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
			КонецЕсли;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Операция = НСтр("ru = 'Открытие настройки обмена с сервисом 1С:ДиректБанк.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстСообщения, 1, Объект.Ссылка);
		КонецПопытки;
		ДвоичныеДанныеКомпоненты = СправочникОбъект.ВнешняяКомпонента.Получить();
		Если ТипЗнч(ДвоичныеДанныеКомпоненты) = Тип("ДвоичныеДанные") Тогда
			Элементы.ИнформацияОКомпонентеСбербанка.Заголовок = НСтр("ru = 'Обновить из файла...'");
			ВерсияКомпонентыСбербанк = ?(ЗначениеЗаполнено(Объект.ВерсияВнешнейКомпоненты), Объект.ВерсияВнешнейКомпоненты,
				НСтр("ru = '<Неизвестна>'"));
			НазваниеМодуля = ?(ЗначениеЗаполнено(Объект.ИмяВнешнегоМодуля), Объект.ИмяВнешнегоМодуля,
				НСтр("ru = '<Неизвестно>'"));
			ПредставлениеКомпоненты = НСтр("ru = '%1. Версия %2'");
			Элементы.НазваниеИВерсияКомпонентыСбербанка.Заголовок = СтрШаблон(
				ПредставлениеКомпоненты, НазваниеМодуля, ВерсияКомпонентыСбербанк);
			Элементы.НазваниеИВерсияКомпонентыСбербанка.Видимость = Истина;
		Иначе
			Элементы.НазваниеИВерсияКомпонентыСбербанка.Видимость = Ложь;
			Элементы.ГруппаСертификатыСбербанк.Доступность = Ложь;
			Элементы.ИнформацияОКомпонентеСбербанка.Заголовок = НСтр("ru = 'Не загружен. Загрузить из файла...'");
		КонецЕсли;
		Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Объект.Банк) Тогда
		НастройкиОбменаСБанком = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Объект.Банк);
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком) И НастройкиОбменаСБанком.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			Элементы.ИспользуетсяВнешнийМодуль.Доступность = Ложь;
		ИначеЕсли ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
			Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтраницыВидыБанковскихСистем.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыАсинхронныхНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если Не ЗначениеЗаполнено(Объект.Банк) Тогда
		Объект.Банк = ОбменСБанкамиСлужебныйПовтИсп.ПустаяСсылкаСправочника("Банки");
	КонецЕсли;
	
	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Если НЕ ЭтоПолноправныйПользователь Тогда
		Элементы.ВыгрузитьСертификатВФайл.Видимость = Ложь;
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ЭтоПолноправныйПользователь,
		РазделениеВключено, Объект.Ссылка, Объект.АутентификацияПоСертификату);
	
	ТекущаяОрганизация = Объект.Организация;
	
	ИспользуетсяВнешнийМодуль = Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
		
	Если ИспользуетсяВнешнийМодуль И ЗначениеЗаполнено(Объект.ИмяВнешнегоМодуля) Тогда
		ЗаполнитьИнформациюОВнешнемМодуле();
	КонецЕсли;
	
	Если РазделениеВключено Тогда
		Элементы.ИспользуетсяВнешнийМодуль.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками) Тогда
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Видимость = Ложь;
		Элементы.ИнформацияОКомпонентеСбербанка.Видимость = Ложь;
		Элементы.ЗагрузитьНастройки.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ЭтоПолноправныйПользователь,
		РазделениеВключено, Объект.Ссылка, Объект.АутентификацияПоСертификату);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияЗакачкиВК) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияСкачкиВК", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн")
			ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен"))
		И НЕ ОбменСБанкамиСлужебныйКлиент.ПравильныйФорматАдреса(Объект.АдресСервера) И НЕ Объект.Недействительна Тогда
		ТекстСообщения = НСтр("ru = 'Адрес сервера банка должен начинаться с ""https://"" или ""http://""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресСервера", "Объект", Отказ);
	КонецЕсли;
	
	УдалитьПустыеСтрокиТаблиц();
	
	Если НЕ Объект.ИспользуетсяКриптография Тогда
		Объект.АутентификацияПоСертификату = Ложь;
	КонецЕсли;
	
	Если СохранитьВнешнююКомпонентуСбербанка Тогда
		ОбменСБанкамиСлужебныйКлиент.УдалитьВнешнююКомпонентуИзКэш("VPNKeyTLS");
		ОбменСБанкамиСлужебныйКлиент.ОчиститьДанныеАвторизацииСбербанк();
	КонецЕсли;

	Если СохранитьВнешнийМодуль ИЛИ ТребуетсяИнициализацияВнешнегоМодуля Тогда
		ПараметрыОбменаСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
		Если ПараметрыОбменаСБанками <> Неопределено Тогда
			ВнешниеКомпонентыИзКеша = ПараметрыОбменаСБанками.Получить("ВнешниеКомпоненты");
			Если ВнешниеКомпонентыИзКеша <> Неопределено Тогда
				ВнешниеКомпонентыИзКеша.Удалить(Объект.ИмяВнешнегоМодуля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СохранитьСертификатСбербанка Тогда
		Если ЗначениеЗаполнено(АдресСертификатаСбербанка) Тогда
			ДвоичныеДанныеСертификатаСбербанка = ПолучитьИзВременногоХранилища(АдресСертификатаСбербанка);
		Иначе
			ДвоичныеДанныеСертификатаСбербанка = Неопределено;
		КонецЕсли;
		СтепеньСжатия = Новый СжатиеДанных(9);
		ТекущийОбъект.СертификатБанка = Новый ХранилищеЗначения(ДвоичныеДанныеСертификатаСбербанка, СтепеньСжатия);
	КонецЕсли;
		
	Если СохранитьВнешнююКомпонентуСбербанка Тогда
		Если ЗначениеЗаполнено(АдресВнешнейКомпонентыСбербанка) Тогда
			ДвоичныеДанныеВнешнейКомпонентыСбербанка = ПолучитьИзВременногоХранилища(АдресВнешнейКомпонентыСбербанка);
		Иначе
			ДвоичныеДанныеВнешнейКомпонентыСбербанка = Неопределено;
		КонецЕсли;
		СтепеньСжатия = Новый СжатиеДанных(9);
		ТекущийОбъект.ВнешняяКомпонента = Новый ХранилищеЗначения(ДвоичныеДанныеВнешнейКомпонентыСбербанка, СтепеньСжатия);
	КонецЕсли;
	
	Если СохранитьВнешнийМодуль Тогда
		Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			Информация = ОбменСБанкамиСлужебный.ИнформацияОВКБанка(АдресВнешнегоМодуля);
			ОбменСБанкамиСлужебный.СохранитьВКБанка(АдресВнешнегоМодуля, Информация);
		Иначе
			ОбменСБанкамиСлужебный.СохранитьВнешнююОбработку(
				АдресВнешнегоМодуля, ВерсияВнешнегоМодуля, ИмяВнешнегоМодуля, НаименованиеВнешнегоМодуля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененаНастройкаОбмена", Объект.Ссылка);

	Если НЕ ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Объект.Ссылка);
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоНовый И Объект.ПрограммаБанка <> Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		Менеджер = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
		Менеджер.НастройкаОбмена = Объект.Ссылка;
		Менеджер.Прочитать();
		Если Не Менеджер.Выбран() Тогда
			Менеджер.НастройкаОбмена = Объект.Ссылка;
			Менеджер.ПоследняяДатаПолученияЭД = НачалоДня(ТекущаяДатаСеанса());
			Менеджер.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИспользуютсяЭП И Объект.ИспользуетсяКриптография
		И (Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн
			ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьЭлектронныеПодписи.Установить(Истина);
	КонецЕсли;
	
	Если НЕ Объект.ПометкаУдаления И НЕ Объект.Недействительна Тогда
		ИспользуетсяОбменЭДСБанками = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьОбменСБанками");
		Если НЕ ИспользуетсяОбменЭДСБанками Тогда
			Константы.ИспользоватьОбменСБанками.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаНастройкаОбменСБанками" И Параметр = Объект.Ссылка Тогда
		ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ЭтоПолноправныйПользователь,
			РазделениеВключено, Объект.Ссылка, Объект.АутентификацияПоСертификату);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗагрузитьВнешнийМодульИзФайлаНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаПредупрежденияЗагрузитьВнешнийМодуль", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ПредупреждениеБезопасности", , ЭтотОбъект, , , , Оповещение);

КонецПроцедуры
	
&НаКлиенте
Процедура ИнформацияОКомпонентеСбербанкаНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаПредупрежденияЗагрузитьВнешнийМодульСбербанк", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ПредупреждениеБезопасности", , ЭтотОбъект,
		УникальныйИдентификатор, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.СертификатыПодписейОрганизации.Количество() И Не ТекущаяОрганизация = Объект.Организация
		И Объект.ИспользуетсяКриптография Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияИзмененияОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'После изменения организации список сертификатов будет очищен.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Истина, НСтр("ru = 'Сменить организацию'"));
		Кнопки.Добавить(Ложь, НСтр("ru = 'Отменить изменение'"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , Истина, НСтр("ru = 'Изменение организации'"));
		Возврат;
	ИначеЕсли Не ТекущаяОрганизация = Объект.Организация Тогда
		Объект.СертификатыПодписейОрганизации.Очистить();
	КонецЕсли;
	
	ЗаполнитьНаименование(Объект.Организация, Объект.Банк, Объект.Наименование);
	
	ТекущаяОрганизация = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.СертификатыПодписейОрганизации.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Банк) Тогда
		НастройкиОбменаСБанком = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Объект.Банк);
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
		Объект.ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
	Иначе
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОбменаСБанком)
		И НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		Элементы.ИспользуетсяВнешнийМодуль.Доступность = Ложь;
	ИначеЕсли ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
		Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
	КонецЕсли;
	
	Объект.ИспользуетсяКриптография = ИспользуетсяКриптография(Объект.ПрограммаБанка);
	
	ИспользуетсяВнешнийМодуль = Ложь;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК")
		ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ИспользуетсяВнешнийМодуль = Истина;
	ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		Элементы.ГруппаСертификатыСбербанк.Доступность = Ложь;
		Элементы.ИнформацияОКомпонентеСбербанка.Заголовок = НСтр("ru = 'Не загружен. Загрузить из файла...'");
		Элементы.НазваниеИВерсияКомпонентыСбербанка.Видимость = Ложь;
	КонецЕсли;
	
	Объект.Наименование = Строка(Объект.Организация) + " - " + Строка(Объект.Банк);
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ЭтоПолноправныйПользователь,
		РазделениеВключено, Объект.Ссылка, Объект.АутентификацияПоСертификату);
	
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ИсходящиеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		АдресСертификатаСбербанка = "";
		СохранитьСертификатСбербанка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыполнитьЗагрузкуСертификатаБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаОчистка(Элемент, СтандартнаяОбработка)
	
	АдресСертификатаСбербанка = "";
	СохранитьСертификатСбербанка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантАутентификацииАсинхронныйОбменПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Объект.АутентификацияПоСертификату = Булево(ВариантАутентификации);
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ЭтоПолноправныйПользователь,
		РазделениеВключено, Объект.Ссылка, Объект.АутентификацияПоСертификату);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяКриптографияПриИзменении(Элемент)
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ЭтоПолноправныйПользователь,
		РазделениеВключено, Объект.Ссылка, Объект.АутентификацияПоСертификату);
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ИсходящиеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВнешнийМодульПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ИспользуетсяВнешнийМодуль Тогда
		Объект.ИспользуетсяКриптография = Истина;
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
	Иначе
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	КонецЕсли;
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ЭтоПолноправныйПользователь,
		РазделениеВключено, Объект.Ссылка, Объект.АутентификацияПоСертификату);

	ЗаполнитьВидыЭДДоступнымиЗначениями();
	ОбновитьТабличныеЧасти(Объект.ИспользуетсяКриптография, Объект.ИсходящиеДокументы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЖурналАудита(Команда)

	ПараметрыФормы = Новый Структура("НастройкаОбмена", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ЖурналАудитаОбменСБанками.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификат(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать организацию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК"))
		И НЕ ЗначениеЗаполнено(Объект.ИмяВнешнегоМодуля) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо загрузить внешний модуль'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;

	Если Отказ ИЛИ НЕ НастройкаОбменаЗаписана("ВыполнитьЗагрузкуСертификата") Тогда
		Возврат;
	Иначе
		ВыполнитьЗагрузкуСертификата(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроек(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиТестНастройкиОбмена", ЭтотОбъект);
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Необходимо сохранить текущую настройку обмена. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(Истина, НСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить(Ложь, НСтр("ru = 'Отменить тест'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , Истина, НСтр("ru = 'Тест настроек'"));
	Иначе
		ПровестиТестНастройкиОбмена();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаОбмена", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ПараметрыОбменСБанками.Форма.РедактированиеЗаписи", ПараметрыФормы, ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)

	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Банк", Объект.Банк);
	ПараметрыФормы.Вставить("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
	Если Не Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		ПараметрыФормы.Вставить("НеИспользоватьРучноеЗаполнение", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("НеПоказыватьСтраницуИнформации", Истина);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеЗавершенияРаботыПомощника", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ПомощникСозданияНастройкиОбмена", ПараметрыФормы, , , , ,
		ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСертификатВФайл(Команда)
	
	Если СохранитьСертификатСбербанка Тогда
		АдресФайлаСертификатаСбербанка = АдресСертификатаСбербанка;
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АдресФайлаСертификатаСбербанка = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "СертификатБанка");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресФайлаСертификатаСбербанка) Тогда
		ПолучитьФайл(АдресФайлаСертификатаСбербанка, СертификатБанка + ".cer");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сбербанк

&НаКлиенте
Процедура СохранитьКомпонентуСбербанкаПослеВыбораФайлаВВебКлиенте(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		ПослеЗагрузкиФайлаВнешнейКомпонентыСбербанка(Адрес);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиФайлаВнешнейКомпонентыСбербанка(Адрес)
	
	ОбменСБанкамиСлужебныйКлиент.УдалитьВнешнююКомпонентуИзКэш("VPNKeyTLS");

	ИнформацияОВКБанка = ОбменСБанкамиСлужебныйВызовСервера.ИнформацияОВКБанка(Адрес);
		
	Если ИнформацияОВКБанка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбменСБанкамиКлиентСервер.ПоддерживаетсяВерсияКомпонентыСбербанк(ИнформацияОВКБанка.Версия) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВерсияВнешнейКомпоненты = ИнформацияОВКБанка.Версия;
	Объект.ИмяВнешнегоМодуля = ИнформацияОВКБанка.Название;
	
	АдресВнешнейКомпонентыСбербанка = Адрес;
	
	СохранитьВнешнююКомпонентуСбербанка = Истина;
	Модифицированность = Истина;
	Элементы.ИнформацияОКомпонентеСбербанка.Заголовок = НСтр("ru = 'Обновить из файла...'");
	ПредставлениеКомпоненты = НСтр("ru = '%1. Версия %2'");
	Элементы.НазваниеИВерсияКомпонентыСбербанка.Заголовок = СтрШаблон(
		ПредставлениеКомпоненты, ИнформацияОВКБанка.Название, ИнформацияОВКБанка.Версия);
	Элементы.НазваниеИВерсияКомпонентыСбербанка.Видимость = Истина;
	Элементы.ГруппаСертификатыСбербанк.Доступность = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияВнешнейКомпонентыСбербанк", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьВнешнююКомпонентуБанка(
		Оповещение, АдресВнешнейКомпонентыСбербанка, "VPNKeyTLS");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияВнешнейКомпонентыСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияВерсииКомпонентыСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьВерсиюВнешнейКомпонентыСбербанк(Оповещение, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияВерсииКомпонентыСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") И Результат <> Объект.ВерсияВнешнейКомпоненты Тогда
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru = 'На компьютере уже установлен внешний модуль другой версии.
										|Удалите программу ""VpnKey-TLS для 1С:Предприятия 8"" и перезагрузите компьютер.'");
		#Иначе
			ТекстСообщения = НСтр("ru = 'Отличаются версии используемого и загруженного внешнего модуля.
										|Загрузите новый внешний модуль или перезапустите программу.'");
		#КонецЕсли
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСертификатаНаТокенеСбербанка()
	
	ОО = Новый ОписаниеОповещения("ПолучитьИдентификаторСертификатаСбербанка", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.АутентифицироватьсяНаТокенеСбербанка(ОО, Объект.Ссылка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСертификатаСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСертификата = Результат.Значение;
	
	ДвоичныеДанныеСертификата = ДополнительныеПараметры.СоответствиеСертификатов.Получить(ИдентификаторСертификата);
	
	ОписаниеОшибки = "";
	НовыйСертификат = ОбменСБанкамиСлужебныйВызовСервера.СоздатьСертификатСбербанка(
		ДвоичныеДанныеСертификата, Объект.Организация);
	Если НЕ ЗначениеЗаполнено(НовыйСертификат) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастройки = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаНастройки.СертификатЭП = НовыйСертификат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСертификатаСбербанка(АутентификацияВыполнена, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не АутентификацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ПодключеннаяВнешняяКомпонентаБанка("VPNKeyTLS");

	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСертификатПослеПолученияСпискаСертификатовСТокенаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеСертификатовСТокенаСбербанк(Оповещение, ПодключаемыйМодуль);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатПослеПолученияСпискаСертификатовСТокенаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СоответствиеСертификатов = Результат.СоответствиеСертификатов;
	ДополнительныеПараметры = Новый Структура("СоответствиеСертификатов", СоответствиеСертификатов);

	
	СписокСертификатов = Новый СписокЗначений;
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
			ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(КлючЗначение.Ключ), ДополнительныеПараметры);
			Возврат;
		КонецЦикла
	КонецЕсли;
	
	ВыборкаСертификатов = Новый Соответствие;
	
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = Элемент.Значение;
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураСертификата = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСертификата(ДвоичныеДанныеСертификата);
		
		Если ЗначениеЗаполнено(СтруктураСертификата) Тогда
			ШаблонПредставления = НСтр("ru = '%1, до %2'");
			ДатаСтрокой = Формат(СтруктураСертификата.ДействителенДО, "ДФ=MM.yyyy");
			Представление = СтрШаблон(ШаблонПредставления, СтруктураСертификата.КомуВыдан, ДатаСтрокой);
			ВыборкаСертификатов.Вставить(ИдентификаторСертификата, Представление);
			
		КонецЕсли;
		
	КонецЦикла;

	Если ВыборкаСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из ВыборкаСертификатов Цикл
			ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(КлючЗначение.Ключ), ДополнительныеПараметры);
			Возврат;
		КонецЦикла
	КонецЕсли;
	
	Для Каждого Элемент Из ВыборкаСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	
	ОО = Новый ОписаниеОповещения("ОбработкаВыбораСертификатаСбербанка", ЭтотОбъект, ДополнительныеПараметры);
	
	ЗаголовокФормыВыбора = НСтр("ru = 'Выберите добавляемый сертификат подписи'");

	СписокСертификатов.ПоказатьВыборЭлемента(ОО, ЗаголовокФормыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаПредупрежденияЗагрузитьВнешнийМодульСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйКлиент.УдалитьВнешнююКомпонентуИзКэш("VPNKeyTLS");
	
	#Если ВебКлиент Тогда
		АдресВХранилище = Неопределено;
		Обработчик = Новый ОписаниеОповещения("СохранитьКомпонентуСбербанкаПослеВыбораФайлаВВебКлиенте", ЭтотОбъект);
		НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.zip", Истина, УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = НСтр("ru = 'Файл внешнего модуля'") + "(*.zip)|*.zip";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл внешнего модуля банка'");
		Обработчик = Новый ОписаниеОповещения("СохранитьКомпонентуПослеВыбораФайлаСбербанк", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(Обработчик);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКомпонентуПослеВыбораФайлаСбербанк(МассивФайлов, ДополнительныеПараметры) Экспорт
	
	Если МассивФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = МассивФайлов[0];
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресВнешнейКомпонентыСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
	ПослеЗагрузкиФайлаВнешнейКомпонентыСбербанка(АдресВнешнейКомпонентыСбербанка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезВК

&НаСервереБезКонтекста
Процедура ЗагрузитьВК(Знач АдресСервера, Знач УникальныйИдентификатор, ИдентификаторЗадания, ИмяВнешнегоМодуля, АдресВнешнегоМодуля)
	
	Задание = ОбменСБанкамиСлужебныйВызовСервера.СкачатьВКНаСервере(УникальныйИдентификатор, АдресСервера);
	
	АдресВнешнегоМодуля = Задание.АдресХранилища;
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВнешнегоМодуля);
			Если СтруктураДанных.СохранитьВИБ Тогда
				АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(СтруктураДанных.ДанныеВК, УникальныйИдентификатор);
				ОбменСБанкамиСлужебныйВызовСервера.СохранитьВКБанка(АдресФайлаВнешнегоМодуля);
			КонецЕсли;
			ИмяВнешнегоМодуля = СтруктураДанных.ИмяВнешнегоМодуля;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Задание.Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияСкачкиВК()
	
	Задание = ОбменСБанкамиСлужебныйВызовСервера.ПроверитьВыполнениеФоновогоЗаданияНаСервере(
		ИдентификаторЗаданияЗакачкиВК, УникальныйИдентификатор);
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВнешнегоМодуля);
			Если СтруктураДанных.СохранитьВИБ Тогда
				АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(СтруктураДанных.ДанныеВК, УникальныйИдентификатор);
				ОбменСБанкамиСлужебныйВызовСервера.СохранитьВКБанка(АдресФайлаВнешнегоМодуля);
			КонецЕсли;
			Объект.ИмяВнешнегоМодуля = СтруктураДанных.ИмяВнешнегоМодуля;
		Иначе
			Объект.ИмяВнешнегоМодуля = "";
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияСкачкиВК", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСертификатаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбменСБанкамиСлужебныйКлиент.СообщитьПользователю(Результат, УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НовыйСертификат = НайтиСоздатьСертификатВнешнегоМодуля(
		Результат.СертификатBase64, Объект.Организация, Объект.ПрограммаБанка, Результат);
	
	СтрокаСертификата = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСертификата.СертификатЭП = НовыйСертификат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияВК(ПодключаемыйМодуль, ДополнительныеПараметры) Экспорт
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияСертификатаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыСоединения = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыСоединенияВК(Объект.Ссылка);
	ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеСертификатаСТокенаВК(Оповещение, ПодключаемыйМодуль, ПараметрыСоединения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОВКБанка(Знач АдресВнешнегоМодуля)
	
	Возврат ОбменСБанкамиСлужебный.ИнформацияОВКБанка(АдресВнешнегоМодуля);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСертификатЧерезВК()
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияВК", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(Оповещение, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезДополнительнуюОбработку

&НаКлиенте
Процедура ПродолжитьПолучениеСертификатаПослеВводаPinКода(PINКод, ПараметрыПолучения) Экспорт
	
	ИдентификаторХранилища = ПараметрыПолучения.ИдентификаторХранилища;
	
	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		Объект.ИмяВнешнегоМодуля);
	PINУстановлен = ОбменСБанкамиСлужебныйКлиент.УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, PINКод);
		
	Если Не PINУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыПолучения.ИдентификаторХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСертификатаЧерезДополнительнуюОбработку(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСертификат = НайтиСоздатьСертификатВнешнегоМодуля(
		ДанныеСертификата.СертификатXML, Объект.Организация, Объект.ПрограммаБанка, ДанныеСертификата);
		
	СтрокаСертификата = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСертификата.СертификатЭП = НовыйСертификат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку(ПараметрыОбработки = Неопределено) Экспорт
	
	АдресВК = Неопределено;
	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		Объект.ИмяВнешнегоМодуля, АдресВК);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Если ЗначениеЗаполнено(АдресВК) Тогда
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ТекущаяНастройкаОбменаЧерезДополнительнуюОбработку", Объект.Ссылка);
			ОО = Новый ОписаниеОповещения(
				"НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыОбработки);
			НачатьУстановкуВнешнейКомпоненты(ОО, АдресВК);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Устройства = ОбменСБанкамиСлужебныйКлиент.ПодключенныеХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль);
	Если Устройства=Неопределено ИЛИ Устройства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВыбораТокена = Новый Структура;
	ПараметрыВыбораТокена.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	
	Если Устройства.Количество() = 1 Тогда
		ИдентификаторХранилища = Устройства[0];
		ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку(ИдентификаторХранилища, ПараметрыВыбораТокена);
	Иначе
		ОО = Новый ОписаниеОповещения(
			"ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыВыбораТокена);
		ОбменСБанкамиСлужебныйКлиент.ВыбратьХранилищеЧерезДополнительнуюОбработку(Объект.Ссылка, ОО, ПараметрыВыбораТокена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку(ИдентификаторХранилища, ПараметрыОбработки) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторХранилища) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОбработки.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	
	ВнешнийПодключаемыйМодуль = ПараметрыОбработки.ВнешнийПодключаемыйМодуль;
	
	ТребуетсяУстановкаPINКода = ОбменСБанкамиСлужебныйКлиент.НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
		
	Если ТребуетсяУстановкаPINКода = Неопределено Тогда
		Возврат;
	ИначеЕсли ТребуетсяУстановкаPINКода Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(
			"ПродолжитьПолучениеСертификатаПослеВводаPinКода", ЭтотОбъект, ПараметрыОбработки);
		ОбменСБанкамиСлужебныйКлиент.НачатьУстановкуPINКодаХранилища(
			Объект.Ссылка, ИдентификаторХранилища, ОповещениеОЗакрытии);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыОбработки.ИдентификаторХранилища)
	
КонецПроцедуры

#КонецОбласти

#Область ВнешнийМодуль

&НаКлиенте
Процедура СохранитьВнешнийМодульПослеВыбораФайлаВВебКлиенте(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		АдресВнешнегоМодуля = Адрес;
		ОбработатьВыборФайлаВнешнегоМодуля(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВнешнийМодульПослеВыбораФайла(МассивФайлов, ДополнительныеПараметры) Экспорт
	
	Если МассивФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФайлаВнешнегоМодуля = МассивФайлов[0];
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаВнешнегоМодуля);
	АдресВнешнегоМодуля = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	ОбработатьВыборФайлаВнешнегоМодуля(ИмяФайлаВнешнегоМодуля);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаВнешнегоМодуля(ИмяФайлаВнешнегоМодуля)
	
	РасширениеФайла = ВРег(ОбменСБанкамиСлужебныйКлиент.РасширениеФайла(ИмяФайлаВнешнегоМодуля));

	Если Не РасширениеФайла = "ZIP" И Не РасширениеФайла = "EPF" Тогда
		ТекстСообщения = НСтр("ru = 'Указан неверный файл.
									|Файл внешнего модуля должен иметь расширение ""zip"" или ""epf""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если РасширениеФайла = "ZIP" Тогда // внешняя компонента
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			Объект.СертификатыПодписейОрганизации.Очистить();
		КонецЕсли;
		
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
		ЗаполнитьВидыЭДДоступнымиЗначениями();

		ИнформацияОКомпоненте = ИнформацияОВКБанка(АдресВнешнегоМодуля);
		
		Если ИнформацияОКомпоненте = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Объект.ИмяВнешнегоМодуля = ИнформацияОКомпоненте.ИмяМодуля;
		
		Шаблон = НСтр("ru = '%1. Версия %2.'");
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = СтрШаблон(
			Шаблон, ИнформацияОКомпоненте.Название, ИнформацияОКомпоненте.Версия);
		СохранитьВнешнийМодуль = Истина;
		Модифицированность = Истина;
		
	Иначе // внешняя обработка
		
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
			Объект.СертификатыПодписейОрганизации.Очистить();
		КонецЕсли;
		
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
		ЗаполнитьВидыЭДДоступнымиЗначениями();

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ВремФайл = ПолучитьИмяВременногоФайла("epf");
			ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресВнешнегоМодуля);
			ДвоичныеДанныеОбработки.Записать(ВремФайл);
			ПодключаемыйМодуль = ВнешниеОбработки.ПолучитьФорму(ВремФайл);
			ИмяВнешнегоМодуля = ПодключаемыйМодуль.ЭтотОбъект;
			ПозицияТочки = СтрНайти(ИмяВнешнегоМодуля, ".");
			ИмяВнешнегоМодуля = Сред(ИмяВнешнегоМодуля, ПозицияТочки + 1);
		#Иначе
			
			ИмяВнешнегоМодуля = Неопределено;
			ПодключитьВнешнююОбработку();
			
			Если НЕ ЗначениеЗаполнено(ИмяВнешнегоМодуля) Тогда
				Возврат;
			КонецЕсли;
			
			ИмяФормыОбработки = "ВнешняяОбработка." + ИмяВнешнегоМодуля + ".Форма";
			Попытка
				ПараметрыФормыОбработки = Новый Структура("РежимЭДО", Истина);
				ПодключаемыйМодуль = ПолучитьФорму(ИмяФормыОбработки, ПараметрыФормыОбработки, , УникальныйИдентификатор);
			Исключение
				Операция = НСтр("ru = 'Получение формы внешней обработки.'");
				ТекстСообщения = НСтр("ru = 'Не удалось подключить выбранный внешний модуль'");
				ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстСообщения, 1);
				Возврат;
			КонецПопытки;
		#КонецЕсли
		
		СведенияОВнешнейОбработке = ОбменСБанкамиСлужебныйВызовСервера.СведенияОВнешнейОбработке(ИмяВнешнегоМодуля);
		
		ВерсияВнешнегоМодуля = СведенияОВнешнейОбработке.Версия;
		НаименованиеВнешнегоМодуля = СведенияОВнешнейОбработке.Наименование;
	
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Заголовок = НСтр("ru = 'Обновить из файла...'");
		
		Объект.ИмяВнешнегоМодуля = ИмяВнешнегоМодуля;
		
		Шаблон = НСтр("ru = '%1. Версия %2.'");
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = СтрШаблон(Шаблон, НаименованиеВнешнегоМодуля, ВерсияВнешнегоМодуля);
		СохранитьВнешнийМодуль = Истина;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьВнешнююОбработку()
	
	ОбменСБанкамиСлужебный.ПодключитьВнешнююОбработку(АдресВнешнегоМодуля, ИмяВнешнегоМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОВнешнемМодуле()

	Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
		ДанныеВнешнегоМодуля = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейКомпоненты(Объект.ИмяВнешнегоМодуля);
	Иначе
		ДанныеВнешнегоМодуля = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейОбработки(Объект.ИмяВнешнегоМодуля);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВнешнегоМодуля) Тогда
		Шаблон = НСтр("ru = '%1. Версия %2.'");
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = СтрШаблон(
			Шаблон, ДанныеВнешнегоМодуля.Наименование, ДанныеВнешнегоМодуля.Версия);
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Заголовок = НСтр("ru = 'Обновить из файла...'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаПредупрежденияЗагрузитьВнешнийМодуль(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		АдресВХранилище = Неопределено;
		Обработчик = Новый ОписаниеОповещения("СохранитьВнешнийМодульПослеВыбораФайлаВВебКлиенте", ЭтотОбъект);
		НачатьПомещениеФайла(Обработчик, АдресВХранилище, , , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Внешний модуль(*.zip;*.epf)|*.zip;*.epf'");

		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл внешнего модуля банка'");
		Обработчик = Новый ОписаниеОповещения("СохранитьВнешнийМодульПослеВыбораФайла", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(Обработчик);
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьСертификатВнешнегоМодуля(Знач ДанныеСертификата, Знач Организация, Знач ПрограммаБанка, Знач СвойстваСертификата)
	
	Возврат ОбменСБанкамиСлужебный.НайтиСоздатьСертификатВнешнегоМодуля(
		ДанныеСертификата, Организация, ПрограммаБанка, СвойстваСертификата);
	
КонецФункции

#КонецОбласти

#Область ТестНастройки

&НаКлиенте
Процедура ПровестиТестНастройкиОбмена(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		Записать();
	ИначеЕсли Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбменСБанкамиКлиентСервер.ЗаполненыРеквизитыНастройкиОбмена(Объект, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеТестаНастройкиОбмена", ЭтотОбъект);
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("НастройкаОбмена", Объект.Ссылка);
	ПараметрыОбработки.Вставить("ИдентификаторНазначения", УникальныйИдентификатор);
	ОбменСБанкамиСлужебныйКлиент.ПровестиТестНастройки(Обработчик, ПараметрыОбработки);

КонецПроцедуры

&НаКлиенте
Процедура ПослеТестаНастройкиОбмена(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Тест не завершен.'"));
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
	ИначеЕсли Результат = Истина ИЛИ (ТипЗнч(Результат) = Тип("Структура") И Результат.Успех) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Тестирование выполнено успешно.'"));
	Иначе
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("МассивСообщений") Тогда
			Для Каждого Сообщение Из Результат.МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Тест не пройден.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификаты

&НаСервереБезКонтекста
Процедура ПоместитьВХранилищеСертификат(Знач ДвоичныеДанные, Знач УникальныйИдентификатор, АдресСертификатаСбербанка, ПредставлениеСертификата = Неопределено)
	
	ПредставлениеСертификата = "";
	
	Если ДвоичныеДанные = Неопределено Тогда
		АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Иначе
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
			АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		Исключение
			ВремФайл = ПолучитьИмяВременногоФайла();
			Попытка
				ДвоичныеДанные.Записать(ВремФайл);
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ВремФайл);
				СтрокаBase64 = ТекстовыйДокумент.ПолучитьТекст();
				СтрокаBase64 = СтрЗаменить(СтрокаBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
				СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС + "-----END CERTIFICATE-----","");
				ДвоичныеДанныеСертификата = Base64Значение(СтрокаBase64);
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				
				АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
				
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
				Возврат;
			КонецПопытки;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		КонецПопытки;
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтрокиТаблиц()
	
	СписокСтрокКУдалению = Новый СписокЗначений;
	Для каждого СтрокаСертификата Из Объект.СертификатыПодписейОрганизации Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСертификата.СертификатЭП) Тогда
			СписокСтрокКУдалению.Добавить(СтрокаСертификата.НомерСтроки);
		КонецЕсли;
	КонецЦикла;

	СписокСтрокКУдалению.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого Запись Из СписокСтрокКУдалению Цикл
		Объект.СертификатыПодписейОрганизации.Удалить(Запись.Значение-1);
	КонецЦикла

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСертификата(ИдентификаторХранилища)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект);
	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		Объект.ИмяВнешнегоМодуля);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьСертификатЧерезДополнительнуюОбработку(
		Обработчик, ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСертификата(Результат, Параметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьНастройкуОбмена();
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку();
		ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
			ЗагрузитьСертификатЧерезВК();
		ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			ПолучитьДанныеСертификатаНаТокенеСбербанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСертификатаБанка()
	
	АдресВХранилище = Неопределено;
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыбораФайлаСертификатаБанка", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.cer", Истина, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФайлаСертификатаБанка(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ПоместитьВХранилищеСертификат(ДанныеФайла, УникальныйИдентификатор, АдресСертификатаСбербанка, СертификатБанка);
		СохранитьСертификатСбербанка = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями()
	
	АктуальныеВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.АктуальныеВидыЭД();
	Объект.ИсходящиеДокументы.Очистить();
	
	Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
		Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен
			ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока.ИспользоватьЭП = Объект.ИспользуетсяКриптография;
		ИначеЕсли (Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн
				ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн
				ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку)
			И (ЗначениеПеречисления = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
				ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки) Тогда
			НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
			НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
			НоваяСтрока.Формировать = Истина;
			НоваяСтрока.ИспользоватьЭП = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ИсходящиеДокументы.Сортировать("ИсходящийДокумент");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницы(Форма, Знач ПрограммаБанка, Знач ИспользуетсяКриптография, Знач ДоступнаРольПолныеПрава, Знач РазделениеВключено,  Знач НастройкаОбмена, Знач АутентификацияПоСертификату = Ложь)
	
	ЭтоСбербанк = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн");
	ЭтоОбменЧерезДопОбработку = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
	ЭтоАсинхронныйОбмен = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	ЭтоСинхронныйОбмен = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн");
	ЭтоОбменЧерезВК = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
	
	Если ЭтоСинхронныйОбмен Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаСинхронный;
	ИначеЕсли ЭтоСбербанк Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаСбербанк;
	ИначеЕсли ЭтоАсинхронныйОбмен Тогда
		Форма.ВариантАутентификации = АутентификацияПоСертификату;
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаАсинхронный;
		Если ИспользуетсяКриптография Тогда
			Если АутентификацияПоСертификату Тогда
				Форма.Элементы.СтраницыЛогинАсинхронныйОбмен.ТекущаяСтраница = Форма.Элементы.СтраницаЛогинНеВиден
			Иначе
				Форма.Элементы.СтраницыЛогинАсинхронныйОбмен.ТекущаяСтраница = Форма.Элементы.СтраницаЛогинВиден
			КонецЕсли;
			Форма.Элементы.СтраницыАсинхронныхНастроек.ТекущаяСтраница = Форма.Элементы.АсинхронныйОбменСКриптографией;
		Иначе
			Форма.Элементы.СтраницыАсинхронныхНастроек.ТекущаяСтраница = Форма.Элементы.АсинхронныйОбменБезКриптографии;
		КонецЕсли;
	ИначеЕсли ЭтоОбменЧерезВК ИЛИ ЭтоОбменЧерезДопОбработку Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаВнешнийМодуль;
	КонецЕсли;
	
	Форма.Элементы.ТестНастроек.Видимость = НЕ ЭтоСинхронныйОбмен;
	Форма.Элементы.ЖурналАудита.Видимость = ЭтоСбербанк
		И ОбменСБанкамиСлужебныйВызовСервера.ПараметрыЖурналирования(НастройкаОбмена).ИспользоватьЖурналирование;
	Форма.Элементы.НачальнаяДатаЗапросаДанных.Видимость = ЭтоАсинхронныйОбмен ИЛИ ЭтоСбербанк ИЛИ ЭтоОбменЧерезВК;
	Форма.Элементы.ЗагрузитьНастройки.Видимость = ЭтоАсинхронныйОбмен ИЛИ ЭтоСбербанк ИЛИ ЭтоОбменЧерезВК;
	Форма.Элементы.ЗагрузитьВнешнийМодульИзФайла.Видимость = (ЭтоОбменЧерезВК ИЛИ ЭтоОбменЧерезДопОбработку)
		И НЕ РазделениеВключено;
	Форма.Элементы.ИнформацияОВнешнемМодуле.Видимость = (ЭтоОбменЧерезВК ИЛИ ЭтоОбменЧерезДопОбработку);
	Форма.Элементы.ВерсияФормата.Видимость = ЭтоОбменЧерезВК ИЛИ ЭтоАсинхронныйОбмен;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуОбмена()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	ПередЗаписьюНаСервере(Неопределено, СправочникОбъект, Неопределено);
	СправочникОбъект.Записать();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция НастройкаОбменаЗаписана(Обработчик)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Загружать сертификаты можно только в записанной настройке обмена.
								|Записать?'");
	
	ОП = Новый ОписаниеОповещения(Обработчик, ЭтотОбъект);
	ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТабличныеЧасти(ИспользуетсяКриптография, ИсходящиеДокументы)
	
	Для Каждого Строка Из ИсходящиеДокументы Цикл
		Строка.ИспользоватьЭП = ИспользуетсяКриптография;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияИзмененияОрганизации(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		Объект.СертификатыПодписейОрганизации.Очистить();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ИспользуетсяКриптография(ПрограммаБанка)
	
	Если НЕ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаименование(Организация, Банк, Наименование)
	
	ШаблонНаименования = "%1 - %2";
	Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, Организация, Банк);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияРаботыПомощника(НастройкаОбмена, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОбъектФормы(НастройкаОбмена);
	
	Прочитать();
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, ЭтоПолноправныйПользователь,
		РазделениеВключено, Объект.Ссылка, Объект.АутентификацияПоСертификату);

	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОбъектФормы(НастройкаОбмена)
	
	НастройкаОбменаОбъект = НастройкаОбмена.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(НастройкаОбменаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
 
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Организация.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РесурсПриемник.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РесурсИсточник.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Банк.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресСервера.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СертификатБанка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторОрганизации.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресСервераАсинхронныйБезКриптографии.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторОрганизацииАсинхронныйБезКриптографии.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресСервераАсинхронныйСКриптографией.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторОрганизацииАсинхронныйСКриптографией.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Недействительна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
 
КонецПроцедуры

#КонецОбласти

#КонецОбласти
