#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет версию формата в настройках обмена.
//
// Параметры:
//  Параметры - Структура - структура вида:
//    * ОбработкаЗавершена - Булево - (не заполнять) признак того что обработка заполнения версии формата завершена.
//
Процедура ЗаполнитьВерсиюФормата(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбменСБанками.Ссылка
		|ИЗ
		|	Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
		|ГДЕ
		|	НастройкиОбменСБанками.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.АсинхронныйОбмен)
		|	И НастройкиОбменСБанками.ВерсияФормата = """"";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = '1С:ДиректБанк: Заполнение версии формата.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = '1С:ДиректБанк: При заполнении версии формата произошла ошибка.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, , 1);
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;

КонецПроцедуры

// Загружает внешнюю компоненту с сервера банка.
//
// Параметры:
//  АдресСервера - Строка - адрес, с которого будет загружен файл внешней компоненты.
//  АдресХранилища - Строка - адрес хранилища в который буду помещены данные о ВК.
//
Процедура СкачатьВКССервераБанка(Знач АдресСервера, АдресХранилища = "") Экспорт

	Перем ЗащищенноеСоединение;
	Адрес = "";
	Протокол = "";
	
	ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(АдресСервера, ЗащищенноеСоединение, Адрес, Протокол);
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ПараметрыПолучения = Новый Структура();
	ПараметрыПолучения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	ПараметрыПолучения.Вставить("Таймаут", 60);
	ПараметрыПолучения.Вставить("ПутьДляСохранения", ВремФайл);
	
	СтруктураВозврата = Новый Структура("ДанныеВК, СохранитьВИБ, ИмяВнешнегоМодуля, Версия");
	
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресСервера, ПараметрыПолучения);
	
	Если Результат.Статус Тогда
		ПараметрыВК = ОбменСБанкамиСлужебный.ПараметрыВК(ВремФайл);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		
		ДанныеАктуальнойВК = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейКомпоненты(ПараметрыВК.ИмяМодуля);
		СтруктураВозврата.ИмяВнешнегоМодуля = ПараметрыВК.ИмяМодуля;
		СтруктураВозврата.Версия = ПараметрыВК.Версия;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
			Или (ДанныеАктуальнойВК <> Неопределено И ДанныеАктуальнойВК.Версия = ПараметрыВК.Версия) Тогда
			СтруктураВозврата.ДанныеВК = ДанныеАктуальнойВК.ДвоичныеДанныеМодуля;
			СтруктураВозврата.СохранитьВИБ = Ложь;
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(
				ПараметрыВК.URLВК, ЗащищенноеСоединение, Адрес, Протокол);
			ПараметрыПолучения = Новый Структура();
			ПараметрыПолучения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
			ПараметрыПолучения.Вставить("Таймаут", 120);
			Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ПараметрыВК.URLВК, ПараметрыПолучения);
			Данные = ПолучитьИзВременногоХранилища(Результат.Путь);
			СтруктураВозврата.ДанныеВК = Данные;
			СтруктураВозврата.СохранитьВИБ = Истина;
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресХранилища);
	ИначеЕсли ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.СообщениеОбОшибке);
		ВызватьИсключение "";
	КонецЕсли;
	
КонецПроцедуры

// Загружает настройки обмена с сервера банка.
//
// Параметры:
//  ПараметрыПолученияНастроек - Структура - данные, необходимые для получения настроек;
//  АдресХранилища - Строка - адрес хранилища в который необходимо поместить полученные данные.
//
Процедура ПолучитьНастройкиОбменаССервераБанка(Знач ПараметрыПолученияНастроек, АдресХранилища) Экспорт

	Если НЕ ЗначениеЗаполнено(ПараметрыПолученияНастроек.НомерБанковскогоСчета) Тогда
		ПараметрыПолученияНастроек.НомерБанковскогоСчета = НомерБанковскогоСчета(
			ПараметрыПолученияНастроек.Организация, ПараметрыПолученияНастроек.Банк);
	КонецЕсли;
	
	РеквизитыОрганизации = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(
		ПараметрыПолученияНастроек.Организация);
	ПараметрыПолученияНастроек.Вставить("ИНН", РеквизитыОрганизации.ИНН);
	
		
	НастройкиОбмена = ПолучитьНастройкиОбмена(ПараметрыПолученияНастроек);
		
	ПоместитьВоВременноеХранилище(НастройкиОбмена, АдресХранилища);
	
КонецПроцедуры

// Загружает настройки обмена из файла настроек
//
// Параметры:
//  ДанныеНастроек - Структура - параметры процедуры. Содержит следующие элементы:
//     * ДвоичныеДанныеФайлаНастроек - ДвоичныеДанные - данные файла настроек;
//     * ЗагружатьВК - Булево - признак необходимости загрузки внешней компоненты с сервера поставщика;
//     * Организация - ОпределяемыйТип.Организация - организация, для которой создается настройка обмена;
//  АдресХранилища - Строка - адрес хранилища в который необходимо поместить полученные данные.
//
Процедура ЗагрузитьНастройкиОбменаИзФайла(Знач ДанныеНастроек, АдресХранилища) Экспорт

	АдресФайлаНастроек = ПоместитьВоВременноеХранилище(ДанныеНастроек.ДвоичныеДанныеФайлаНастроек);
	ДанныеСертификатов = Неопределено;
	НоваяНастройкаОбмена = ОбменСБанкамиСлужебный.СоздатьНастройкуОбменаИзФайла(
		АдресФайлаНастроек, ДанныеНастроек.Организация, Истина, ДанныеСертификатов, ДанныеНастроек.ЗагружатьВК);
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("НастройкаОбмена", НоваяНастройкаОбмена);
	ДанныеВозврата.Вставить("ДанныеСертификатов", ДанныеСертификатов);
	ПоместитьВоВременноеХранилище(ДанныеВозврата, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Данные.Организация) И ЗначениеЗаполнено(Данные.Банк) Тогда
		ШаблонПредставления = "%1 - %2";
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления, Данные.Организация, Данные.Банк);
	Иначе
		Представление = НСтр("ru = 'Не заполненная настройка'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Очистить();
	Поля.Добавить("Организация");
	Поля.Добавить("Банк");
	Поля.Добавить("Код");
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Осуществляет получение настроек ЭДО с сервера банка.
// 
// Параметры:
//    ПараметрыПолученияНастроек - Структура - Параметры получения настроек (все обязательно к заполнению), вида:
//     * АдресСервера - Строка - адрес сервера банка, с которого будут получены настройки обмена;
//     * Банк - СправочникСсылка.КлассификаторБанковРФ - банк, для которого будут получены настройки;
//     * НомерСчета - Строка - номер банковского счета;
//     * ДанныеМаркера - ДвоичныеДанные - временный маркер банка;
//     * ИдентификаторОрганизации - Строка - идентификатор организации на сервере банка;
//     * ИНН - Строка - ИНН организации;
//     * ПробнаяОперация - Булево - признак пробного получения настроек без вывода сообщений об ошибках.
//
// Возвращаемое значение:
//    ДвоичныеДанные - данные файла настроек ЭДО.
//
Функция ПолучитьНастройкиОбмена(ПараметрыПолученияНастроек)
	
	ВидОперации = НСтр("ru = 'Получение настроек с сервера банка'");
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/xml; charset=utf-8");
	
	ИдентификаторОрганизации = ПараметрыПолученияНастроек.ИдентификаторОрганизации;
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ИдентификаторОрганизации = "0";
	КонецЕсли;
	Заголовки.Вставить("CustomerID", ИдентификаторОрганизации);
	
	Если ЗначениеЗаполнено(ПараметрыПолученияНастроек.НомерБанковскогоСчета) Тогда
		Заголовки.Вставить("Account", ПараметрыПолученияНастроек.НомерБанковскогоСчета);
	КонецЕсли;
	
	ВерсияФормата = ПараметрыПолученияНастроек.ВерсияФормата;
	Если Не ЗначениеЗаполнено(ВерсияФормата) Тогда
		ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
	КонецЕсли;
	
	Заголовки.Вставить("Inn", ПараметрыПолученияНастроек.ИНН);
	Заголовки.Вставить("Bic", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПолученияНастроек.Банк, "Код"));
	Маркер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(
		ПараметрыПолученияНастроек.ИдентификаторСессии);
	Заголовки.Вставить("SID", Маркер);
	Заголовки.Вставить("APIVersion", ВерсияФормата);
	Заголовки.Вставить("AvailableAPIVersion", ОбменСБанкамиКлиентСервер.АктуальнаяВерсияФорматаАсинхронногоОбмена());
	
	Результат = ЭлектронноеВзаимодействиеСлужебный.ОтправитьЗапросНаСервер(
		ПараметрыПолученияНастроек.АдресСервера, "GetSettings", Заголовки);
	
	Если Не Результат.Статус Тогда
		Если Не ПараметрыПолученияНастроек.ПробнаяОперация Тогда
			Если ЗначениеЗаполнено(Результат.КодСостояния) Тогда
				Шаблон = НСтр("ru = 'Ошибка загрузки настроек с сервера банка.
									|Код ошибки: %1.
									|%2'");
				ТекстОшибки = СтрШаблон(Шаблон, Результат.КодСостояния, Результат.СообщениеОбОшибке);
			Иначе
				ТекстОшибки = Результат.СообщениеОбОшибке;
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки, 1);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаРезультата = ПолучитьИмяВременногоФайла("xml");
	
	Результат.Тело.Записать(ИмяФайлаРезультата);
	
	Чтение = Новый ЧтениеXML;
	Попытка
		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ResultBank = ФабрикаXDTO.ПрочитатьXML(Чтение);
		
		Если ResultBank.Свойства().Получить("formatVersion") = Неопределено Тогда
			ВерсияФормата = ОбменСБанкамиКлиентСервер.БазоваяВерсияФорматаАсинхронногоОбмена();
		Иначе
			ВерсияФормата = ResultBank.formatVersion;
		КонецЕсли;
		
		ПространствоИмен = ОбменСБанкамиСлужебный.ПространствоИменАсинхронногоОбмена(ВерсияФормата);

		Фабрика = ОбменСБанкамиСлужебный.ФабрикаAsyncXDTO(ВерсияФормата);

		Чтение.ОткрытьФайл(ИмяФайлаРезультата);
		ПакетТип = ОбменСБанкамиСлужебный.ТипЗначенияCML(Фабрика, ПространствоИмен, "ResultBank");
		ResultBank = Фабрика.ПрочитатьXML(Чтение, ПакетТип);
		Если НЕ ResultBank.Error = Неопределено Тогда
			ОсновнойТекст = НСтр("ru = 'Произошла ошибка при аутентификации на сервере банка.'");
			Если Не ПараметрыПолученияНастроек.ПробнаяОперация Тогда
				ТекстСообщения = ОбменСБанкамиСлужебный.ТекстСообщенияОбОшибкеОтветаБанка(ResultBank.Error);
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения, ТекстСообщения, 1);
			КонецЕсли;
			Чтение.Закрыть();
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
			
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Если Не ПараметрыПолученияНастроек.ПробнаяОперация Тогда
			ТекстСообщения = НСтр("ru = 'Произошла ошибка при получении настроек из банка'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = НСтр("ru = 'Ошибка чтения ответа банка.
									|Текст ошибки: %1
									|Путь к файлу: %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки, ИмяФайлаРезультата);
			ВидОперации = НСтр("ru = 'Получение настроек обмена из банка'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 1);
		КонецЕсли;
		Чтение.Закрыть();
		Возврат Неопределено
	КонецПопытки;
	
	Чтение.Закрыть();
	ДанныеНастроек = ResultBank.Success.GetSettingsResponse.Data.__content;
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	Возврат ДанныеНастроек;
	
КонецФункции

// Определяет один из банковских счетов организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация;
//   Банк - ОпределяемыеТипы.СправочникБанки - банк.
//
// Возвращаемое значение:
//    Строка - номер банковского счета.
//
Функция НомерБанковскогоСчета(Знач Организация, Знач Банк)
	
	МассивБанковскихСчетов = Новый Массив;
	ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(Организация, Банк, МассивБанковскихСчетов);
	Если МассивБанковскихСчетов.Количество() Тогда
		Возврат МассивБанковскихСчетов[0];
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#КонецЕсли

