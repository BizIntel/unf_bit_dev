
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ИмяЗаданияПредварительногоПросмотра;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ПриСозданииПриЧтенииНаСервере(ТекущийОбъектИзРеквизитаФормы());
	КонецЕсли;
	
	ПериодОтчета = ТекущаяДатаСеанса();
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьИнформациюОПрограмме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СтраницыПредварительныйПросмотр.ТекущаяСтраница = Элементы.СтраницаПустая;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииПриЧтенииНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеЗаполненаОрганизация() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Не заполнена организация.'"),,
		"Организация",
		"Объект",
		Отказ);
		Возврат;
	КонецЕсли;

	Если АдресаПолучателейСодержатОшибки() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Объект.Использование = Не ПараметрыДляОтправкиСодержатОшибки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Получатели.Очистить();
	
	Для Каждого ТекСтрокаПолучатели Из Получатели Цикл
		Если ЗначениеЗаполнено(ТекСтрокаПолучатели.Получатель) Тогда
			ТекСтрокаОбъектПолучатели = ТекущийОбъект.Получатели.Добавить();
			ТекСтрокаОбъектПолучатели.Получатель = ТекСтрокаПолучатели.Получатель;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.Расписание = Новый ХранилищеЗначения(Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СохранениеНастройки" Тогда
		ОбработатьСохранениеНастройки(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "СохранениеНастройкиСекции" Тогда
		ОбработатьСохранениеНастройкиСекции(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеАвтоПодбораАдресаПолучателя(Текст);
	СтандартнаяОбработка = Не ЗначениеЗаполнено(ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	// В веб-клиенте требуется явно взводить флаг при изменении
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторКонтактов") Тогда
		ВыбранноеЗначение = АдресЭПИзКлассификатора(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСекцийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	Если Копирование Тогда
		ПараметрыФормы.Вставить("ЗаголовокСекции", Элемент.ТекущиеДанные.ЗаголовокСекции);
		ПараметрыФормы.Вставить("ТипСекции", Элемент.ТекущиеДанные.ТипСекции);
		
		ПараметрыФормы.Вставить("НастройкиФильтров", Новый Массив);
		Для Каждого ТекСтрокаНастройкиФильтров Из Объект.НастройкиФильтров.НайтиСтроки(Новый Структура("ИдентификаторСекции", Элемент.ТекущиеДанные.ИдентификаторСекции)) Цикл
			НастройкаФильтра = Новый Структура;
			НастройкаФильтра.Вставить("ИмяОбласти", ТекСтрокаНастройкиФильтров.ИмяОбласти);
			НастройкаФильтра.Вставить("ИмяПоля", ТекСтрокаНастройкиФильтров.ИмяПоля);
			НастройкаФильтра.Вставить("Путь", ТекСтрокаНастройкиФильтров.Путь);
			НастройкаФильтра.Вставить("ПредставлениеПоля", ТекСтрокаНастройкиФильтров.ПредставлениеПоля);
			НастройкаФильтра.Вставить("ВидСравнения", ТекСтрокаНастройкиФильтров.ВидСравнения);
			НастройкаФильтра.Вставить("Значение", ТекСтрокаНастройкиФильтров.Значение);
			ПараметрыФормы.НастройкиФильтров.Добавить(НастройкаФильтра);
		КонецЦикла;
		
	КонецЕсли;
	ОткрытьФорму("Справочник.НастройкиРассылкиСостояниеКомпании.Форма.ФормаНастройкиСекции", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСекцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторСекции", Элемент.ТекущиеДанные.ИдентификаторСекции);
	ПараметрыФормы.Вставить("ТипСекции", Элемент.ТекущиеДанные.ТипСекции);
	ПараметрыФормы.Вставить("ЗаголовокСекции", Элемент.ТекущиеДанные.ЗаголовокСекции);
	ПараметрыФормы.Вставить("ВидЦенПродажи", Элемент.ТекущиеДанные.ВидЦенПродажи);
	
	ПараметрыФормы.Вставить("НастройкиФильтров", Новый Массив);
	Для Каждого ТекСтрокаНастройкиФильтров Из Объект.НастройкиФильтров.НайтиСтроки(Новый Структура("ИдентификаторСекции", Элемент.ТекущиеДанные.ИдентификаторСекции)) Цикл
		НастройкаФильтра = Новый Структура;
		НастройкаФильтра.Вставить("ИмяОбласти", ТекСтрокаНастройкиФильтров.ИмяОбласти);
		НастройкаФильтра.Вставить("ИмяПоля", ТекСтрокаНастройкиФильтров.ИмяПоля);
		НастройкаФильтра.Вставить("Путь", ТекСтрокаНастройкиФильтров.Путь);
		НастройкаФильтра.Вставить("ПредставлениеПоля", ТекСтрокаНастройкиФильтров.ПредставлениеПоля);
		НастройкаФильтра.Вставить("ВидСравнения", ТекСтрокаНастройкиФильтров.ВидСравнения);
		НастройкаФильтра.Вставить("Значение", ТекСтрокаНастройкиФильтров.Значение);
		ПараметрыФормы.НастройкиФильтров.Добавить(НастройкаФильтра);
	КонецЦикла;
	
	ОткрытьФорму("Справочник.НастройкиРассылкиСостояниеКомпании.Форма.ФормаНастройкиСекции", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПериодОтчета", ПериодОтчета);
	ПараметрыФормы.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	
	ОткрытьФорму(
	"Справочник.НастройкиРассылкиСостояниеКомпании.Форма.ФормаНастройки",
	ПараметрыФормы,
	ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолучателя(Команда)
	
	ДобавитьПолучателяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ДиалогНастройкиРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДиалогНастройкиРасписания.Показать(Новый ОписаниеОповещения("ОбработатьИзменениеРасписания", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	
	ЗапуститьПредварительныйПросмотр("НаЭкране");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	Если ПараметрыДляОтправкиСодержатОшибки() Тогда
		Возврат;
	КонецЕсли;
	
	Если АдресаПолучателейСодержатОшибки() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПредварительныйПросмотр("ПоЭлектроннойПочте");
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ТекстПисьма = СтрШаблон(
	НСтр("ru = '%1
	|
	|Предлагаю добавить в отчет ""Состояние компании"" следующее:
	|%2'"),
	ИнформацияОПрограмме,
	СвояВозможность);
	
	Получатель = Новый СписокЗначений;
	Получатель.Добавить("sbm@1c.ru", НСтр("ru = 'Фирма 1С'"));
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Получатель", Получатель);
	ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'Хочу эти возможности в будущей версии отчета ""Состояние компании""'"));
	ПараметрыПисьма.Вставить("Текст", ТекстПисьма);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыПисьма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьИнформациюОПрограмме()
	
	СисИнфо = Новый СистемнаяИнформация;
	
	ИнформацияОПрограмме = СтрШаблон(
	НСтр("ru = 'Конфигурация: %1 (%2)
	|Платформа: 1С:Предприятие (%3)
	|Идентификатор базы: %4'"),
	Метаданные.Синоним,
	Метаданные.Версия,
	СисИнфо.ВерсияПриложения,
	СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	
КонецПроцедуры

&НаСервере
Функция ТекущийОбъектИзРеквизитаФормы()
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Результат = Параметры.ЗначениеКопирования.ПолучитьОбъект();
	Иначе
		Результат = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыДляОтправкиСодержатОшибки()
	
	Перем Ошибки;
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
		Ошибки,
		"Объект.УчетнаяЗапись",
		НСтр("ru = 'Не указана учетная запись для отправки почты.'"),
		Неопределено);
	КонецЕсли;
	
	Если Не УказанХотяБыОдинПолучатель() Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
		Ошибки,
		"Получатели[%1].Получатель",
		НСтр("ru = 'Не указан хотя бы один адрес электронной почты получателя.'"),
		Неопределено);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ЗначениеЗаполнено(Ошибки);
	
КонецФункции

&НаКлиенте
Функция АдресаПолучателейСодержатОшибки()
	
	Перем Ошибки;
	
	Для Индекс = 0 По Получатели.Количество() - 1 Цикл
		
		Если Не ЗначениеЗаполнено(Получатели[Индекс].Получатель) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(
			Получатели[Индекс].Получатель) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
		Ошибки,
		"Получатели[%1].Получатель",
		НСтр("ru = 'Адрес электронной почты указан некорректно.'"),
		"Получатели",
		Индекс,
		НСтр("ru = 'Адрес электронной почты в строке %1 указан некорректно.'"),
		Индекс);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Возврат ЗначениеЗаполнено(Ошибки);
	
КонецФункции

&НаКлиенте
Функция УказанХотяБыОдинПолучатель()
	
	Для Каждого ТекСтрокаПолучатели Из Получатели Цикл
		
		Если ЗначениеЗаполнено(ТекСтрокаПолучатели.Получатель) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыПолучатели(ТекущийОбъект)
	
	Получатели.Очистить();
	
	ЭлементыКУдалению = Новый Массив;
	
	Для Каждого ТекЭлемент Из Элементы.Получатели.ПодчиненныеЭлементы Цикл
		
		Если ТекЭлемент = Элементы.Получатель Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыКУдалению.Добавить(ТекЭлемент);
		
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Для Каждого ТекСтрокаОбъектПолучатели Из ТекущийОбъект.Получатели Цикл
		Если ЗначениеЗаполнено(ТекСтрокаОбъектПолучатели.Получатель) Тогда
			ТекСтрокаПолучатели = Получатели.Добавить();
			ТекСтрокаПолучатели.Получатель = ТекСтрокаОбъектПолучатели.Получатель;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Получатели) Тогда
		Получатели.Добавить();
	КонецЕсли;
	
	Для ТекИндекс = 1 По Получатели.Количество() - 1 Цикл
		ДобавитьЭлементПолучатель(ТекИндекс);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Наименование = СостояниеКомпании.АвтоНаименованиеНастройки();
	КонецЕсли;
	
	СоздатьЭлементыПолучатели(ТекущийОбъект);
	
	ПрочитанноеРасписание = ТекущийОбъект.Расписание.Получить();
	Если ТипЗнч(ПрочитанноеРасписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
		Расписание = ПрочитанноеРасписание;
	Иначе
		Расписание = СостояниеКомпании.РасписаниеПоУмолчанию();
	КонецЕсли;
	
	ОбновитьЗаголовокРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателяНаСервере()
	
	СтрокаПолучатель = Получатели.Добавить();
	
	ДобавитьЭлементПолучатель(Получатели.Количество() - 1);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементПолучатель(Знач ИндексЭлемента)
	
	ИмяЭлемента = СтрШаблон("Получатель%1", Формат(ИндексЭлемента, "ЧГ="));
	
	ЭлементПолучатель = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Элементы.Получатели);
	ЭлементПолучатель.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементПолучатель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементПолучатель.ПутьКДанным = СтрШаблон("Получатели[%1].Получатель", Формат(ИндексЭлемента, "ЧГ="));
	ЭлементПолучатель.ПодсказкаВвода = СтрШаблон(Элементы.Получатель.ПодсказкаВвода);
	ЭлементПолучатель.АвтоМаксимальнаяШирина = Элементы.Получатель.АвтоМаксимальнаяШирина;
	ЭлементПолучатель.МаксимальнаяШирина = Элементы.Получатель.МаксимальнаяШирина;
	ЭлементПолучатель.УстановитьДействие("ПриИзменении", "ПолучательПриИзменении");
	ЭлементПолучатель.УстановитьДействие("ОбработкаВыбора", "ПолучательОбработкаВыбора");
	ЭлементПолучатель.УстановитьДействие("АвтоПодбор", "ПолучательАвтоПодбор");
	
	ТекущийЭлемент = ЭлементПолучатель;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРасписания(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		ОбработатьИзменениеРасписанияНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРасписанияНаСервере(Знач НовоеРасписание) Экспорт
	
	Расписание = НовоеРасписание;
	
	Расписание.ДетальныеРасписанияДня = Новый Массив;
	
	Если ЗначениеЗаполнено(Расписание.ПериодПовтораВТечениеДня)
		И Расписание.ПериодПовтораВТечениеДня < 60 * 60 Тогда
		Расписание.ПериодПовтораВТечениеДня = 60 * 60;
	КонецЕсли;
	
	ОбновитьЗаголовокРасписания();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСохранениеНастройки(Знач ДанныеДляСохранения)
	
	ПериодОтчета = ДанныеДляСохранения.ПериодОтчета;
	
	Если Объект.УчетнаяЗапись <> ДанныеДляСохранения.УчетнаяЗапись Тогда
		Модифицированность = Истина;
		Объект.УчетнаяЗапись = ДанныеДляСохранения.УчетнаяЗапись;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСохранениеНастройкиСекции(Знач ДанныеДляСохранения)
	
	Модифицированность = Истина;
	
	НайденныеСтрокиНастройкиСекций = Объект.НастройкиСекций.НайтиСтроки(Новый Структура("ИдентификаторСекции", ДанныеДляСохранения.ИдентификаторСекции));
	Если ЗначениеЗаполнено(НайденныеСтрокиНастройкиСекций) Тогда
		ТекНастройкаСекции = НайденныеСтрокиНастройкиСекций[0];
	Иначе
		ТекНастройкаСекции = Объект.НастройкиСекций.Добавить();
		ТекНастройкаСекции.ИдентификаторСекции = ДанныеДляСохранения.ИдентификаторСекции;
	КонецЕсли;
	
	ТекНастройкаСекции.ЗаголовокСекции = ДанныеДляСохранения.ЗаголовокСекции;
	ТекНастройкаСекции.ТипСекции = ДанныеДляСохранения.ТипСекции;
	ТекНастройкаСекции.ВидЦенПродажи = ДанныеДляСохранения.ВидЦенПродажи;
	
	Для Каждого ТекСтрока Из Объект.НастройкиФильтров.НайтиСтроки(Новый Структура("ИдентификаторСекции", ДанныеДляСохранения.ИдентификаторСекции)) Цикл
		Объект.НастройкиФильтров.Удалить(ТекСтрока);
	КонецЦикла;
	
	Для Каждого ТекФильтр Из ДанныеДляСохранения.НастройкиФильтров Цикл
		ТекСтрокаНастройкиФильтров = Объект.НастройкиФильтров.Добавить();
		ТекСтрокаНастройкиФильтров.ИдентификаторСекции = ДанныеДляСохранения.ИдентификаторСекции;
		ТекСтрокаНастройкиФильтров.ИмяОбласти = ТекФильтр.ИмяОбласти;
		ТекСтрокаНастройкиФильтров.ИмяПоля = ТекФильтр.ИмяПоля;
		ТекСтрокаНастройкиФильтров.Путь = ТекФильтр.Путь;
		ТекСтрокаНастройкиФильтров.ПредставлениеПоля = ТекФильтр.ПредставлениеПоля;
		ТекСтрокаНастройкиФильтров.ВидСравнения = ТекФильтр.ВидСравнения;
		ТекСтрокаНастройкиФильтров.Значение = ТекФильтр.Значение;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПредварительныйПросмотр(ИмяВарианта)
	
	Если НеЗаполненаОрганизация() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Не заполнена организация.'"),,
		"Организация",
		"Объект");
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыПредварительныйПросмотр.ТекущаяСтраница = Элементы.СтраницаОтчетФормируется;
	Элементы.ГруппаПредварительныйПросмотр.Доступность = Ложь;
	ИмяЗаданияПредварительногоПросмотра = СостояниеКомпанииКлиентСервер.ВариантыПредварительногоПросмотра()[ИмяВарианта];
	ПодключитьОбработчикОжидания("ОбработатьПредварительныйПросмотр", 2, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция НеЗаполненаОрганизация()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "Организация", "Видимость") <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредварительныйПросмотр()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.МаксимальныйИнтервал = 5;
	
	ПодготовитьПредварительныйПросмотрНаСервере(ИмяЗаданияПредварительногоПросмотра);
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредварительныйПросмотрНаСервере(ИмяЗадания)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ПериодОтчета", ПериодОтчета);
	ПараметрыЗадания.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	ПараметрыЗадания.Вставить("Организация", Объект.Организация);
	ПараметрыЗадания.Вставить("Получатели", СостояниеКомпании.ПолучателиОтчета(Получатели.Выгрузить()));
	ПараметрыЗадания.Вставить("Секции", СостояниеКомпании.СекцииОтчета(Объект.НастройкиФильтров.Выгрузить(), Объект.НастройкиСекций.Выгрузить()));
	
	Результат = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	ИмяЗадания,
	ПараметрыЗадания);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	АдресХранилища = Результат.АдресХранилища;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	СостояниеЗадания = ПрочитатьСостояниеЗадания(ИдентификаторЗадания);
	
	Если СостояниеЗадания.ПроизошлаОшибка Тогда
		ОтобразитьОшибку(СостояниеЗадания);
		Возврат;
	КонецЕсли;
	
	Если СостояниеЗадания.ЗаданиеВыполнено Тогда
		
		Элементы.ГруппаПредварительныйПросмотр.Доступность = Истина;
		
		Если ИмяЗаданияПредварительногоПросмотра = СостояниеКомпанииКлиентСервер.ВариантыПредварительногоПросмотра().ПоЭлектроннойПочте Тогда
			Элементы.СтраницыПредварительныйПросмотр.ТекущаяСтраница = Элементы.СтраницаОтчетОтправлен;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			
			Элементы.СтраницыПредварительныйПросмотр.ТекущаяСтраница = Элементы.СтраницаПустая;
			ТабличныйДокумент = ТабличныйДокументИзРезультатаВыполненияЗадания();
			
			Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
				ТабличныйДокумент.ТолькоПросмотр = Истина;
				ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
				ТабличныйДокумент.ОтображатьСетку = Ложь;
				ТабличныйДокумент.Показать(НСтр("ru = 'Состояние компании (предварительный просмотр)'"));
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания(
	"Подключаемый_ПроверитьВыполнениеЗадания",
	ПараметрыОбработчикаОжидания.ТекущийИнтервал,
	Истина);
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументИзРезультатаВыполненияЗадания()
	
	РезультатВыполненияЗадания = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполненияЗадания) = Тип("ХранилищеЗначения") Тогда
		Возврат РезультатВыполненияЗадания.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьОшибку(СостояниеЗадания)
	
	Элементы.СтраницыПредварительныйПросмотр.ТекущаяСтраница = Элементы.СтраницаОшибка;
	Элементы.ДекорацияОшибка.Подсказка = СостояниеЗадания.Прогресс.ДополнительныеПараметры.ОписаниеОшибки;
	Элементы.ГруппаПредварительныйПросмотр.Доступность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьСостояниеЗадания(Знач ИдентификаторЗадания)
	
	Результат = Новый Структура;
	Результат.Вставить("Прогресс", ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания));
	Результат.Вставить("ПроизошлаОшибка", ПроизошлаОшибка(Результат.Прогресс));
	Если Не Результат.ПроизошлаОшибка Тогда
		Результат.Вставить("ЗаданиеВыполнено", ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроизошлаОшибка(Знач Прогресс)
	
	Если ТипЗнч(Прогресс) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Прогресс.Свойство("ДополнительныеПараметры") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Прогресс.ДополнительныеПараметры.Свойство("ПроизошлаОшибка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Прогресс.ДополнительныеПараметры.ПроизошлаОшибка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеАвтоПодбораАдресаПолучателя(Знач СтрокаПоиска)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("ПометкаУдаления", Ложь));
	ПараметрыВыбора.Вставить("СтрокаПоиска", СтрокаПоиска);
	
	Возврат Справочники.КлассификаторКонтактов.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресЭПИзКлассификатора(Знач ЭлементКлассификатораКонтактов)
	
	Возврат Справочники.КлассификаторКонтактов.КонтактКакСвязаться(ЭлементКлассификатораКонтактов).КакСвязаться;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокРасписания()
	
	Элементы.НастроитьРасписание.Заголовок = Строка(Расписание);
	
КонецПроцедуры

#КонецОбласти

