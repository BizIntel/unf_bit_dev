
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ПолноеИмяОснования.Видимость		= Не ЗначениеЗаполнено(Объект.ПолноеИмяОснования);
	Элементы.ПредставлениеОснования.Видимость	= ЗначениеЗаполнено(Объект.ПолноеИмяОснования);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПриСозданииПриЧтенииНаСервере();
		
		Объект.Наименование = АвтоматическоеНаименованиеДействия(ЭтотОбъект);
		
	КонецЕсли;
	
	ОбновитьЭлементыНастроекЗаполнения();
	ПривестиЭлементыФормыКОписаниюПолей(ЭтотОбъект, Ложь);
	УстановитьСвойстваЭлементовДляВидовКонтактнойИнформации();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииПриЧтенииНаСервере();
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для Каждого НастройкаЗаполнения Из ТекущийОбъект.НастройкиЗаполнения Цикл
		Отбор.ИмяРеквизита = НастройкаЗаполнения.ИмяРеквизита;
		НайденныеСтроки = ОписаниеПолей.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ВариантЗаполнения	= НастройкаЗаполнения.ВариантЗаполнения;
			НайденныеСтроки[0].Значение				= НастройкаЗаполнения.Значение.Получить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.НастройкиЗаполнения.Очистить();
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		НастройкаЗаполнения = ТекущийОбъект.НастройкиЗаполнения.Добавить();
		НастройкаЗаполнения.ИмяРеквизита		= ОписаниеПоля.ИмяРеквизита;
		НастройкаЗаполнения.ВариантЗаполнения	= ОписаниеПоля.ВариантЗаполнения;
		НастройкаЗаполнения.Значение			= Новый ХранилищеЗначения(ОписаниеПоля.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ДатаНачала = Неопределено;
	ДатаОкончания = Неопределено;
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		
		Если СтрНачинаетсяС(ОписаниеПоля.ИмяРеквизита, "Начало") Тогда
			Если ОписаниеПоля.ВариантЗаполнения = "Смещение" Тогда
				ДатаНачала = Справочники.ДействияРабочегоПроцесса.ДатаСмещения(ТекущаяДата(), ОписаниеПоля.Значение);
			ИначеЕсли ОписаниеПоля.ВариантЗаполнения = "Указанный" Тогда
				ДатаНачала = ОписаниеПоля.Значение;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(ОписаниеПоля.ИмяРеквизита, "Окончание") Тогда
			Если ОписаниеПоля.ВариантЗаполнения = "Смещение" Тогда
				ДатаОкончания = Справочники.ДействияРабочегоПроцесса.ДатаСмещения(ТекущаяДата(), ОписаниеПоля.Значение);
			ИначеЕсли ОписаниеПоля.ВариантЗаполнения = "Указанный" Тогда
				ДатаОкончания = ОписаниеПоля.Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ОписаниеПоля.ОбязательноеЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОписаниеПоля.Значение) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле",
				"Заполнение",
				ОписаниеПоля.Заголовок
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"ОписаниеПолей[" + ОписаниеПолей.Индекс(ОписаниеПоля) + "].Значение",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания)
		И ДатаОкончания < ДатаНачала Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Дата окончания не может быть меньше даты начала.'"),,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПолноеИмяОснованияПриИзменении(Элемент)
	
	ЗаполнитьСписокПолейОснований();
	ПривестиЭлементыФормыКОписаниюПолей(ЭтотОбъект);
	
	Если АвтоформированиеНаименования Тогда
		Объект.Наименование = АвтоматическоеНаименованиеДействия(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДействияПриИзменении(Элемент)
	
	Объект.ШаблонСообщения = Неопределено;
	
	Если АвтоформированиеНаименования Тогда
		Объект.Наименование = АвтоматическоеНаименованиеДействия(ЭтотОбъект);
	КонецЕсли;
	
	ТипДействияПриИзмененииСервер();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	АвтоформированиеНаименования = ПустаяСтрока(Объект.Наименование) Или Объект.Наименование = АвтоматическоеНаименованиеДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВариантЗаполненияПриИзменении(Элемент)
	
	Индекс = Число(Сред(Элемент.Имя, СтрДлина("ВариантЗаполнения_")+1));
	ОписаниеПоля = ОписаниеПолей[Индекс];
	
	ПривестиЭлементФормыКОписаниюПоля(ЭтотОбъект, ОписаниеПоля);
	
	Если ОписаниеПоля.ИмяРеквизита = "Контакт" Тогда
		УстановитьСвойстваЭлементовДляВидовКонтактнойИнформации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеПоляПриИзменении(Элемент)
	
	Индекс = Число(Сред(Элемент.Имя, СтрДлина("ЗначениеПоля_")+1));
	ОписаниеПоля = ОписаниеПолей[Индекс];
	
	Если ОписаниеПоля.ИмяРеквизита = "Контакт" Тогда
		УстановитьСвойстваЭлементовДляВидовКонтактнойИнформации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	ЭтоТипДействияОповещение = Объект.ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействийРабочегоПроцесса.ОтправитьEmail")
		Или Объект.ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействийРабочегоПроцесса.ОтправитьSMS");
	
	Элементы.ШаблонСообщения.Видимость = ЭтоТипДействияОповещение;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	АвтоформированиеНаименования = ПустаяСтрока(Объект.Наименование) Или Объект.Наименование = АвтоматическоеНаименованиеДействия(ЭтотОбъект);
	
	ЗаполнитьДоступныеОснования();
	УстановитьПараметрыВыбораШаблона();
	ЗаполнитьОписаниеПолейПоТипуДействия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОснования()
	
	Элементы.ПолноеИмяОснования.СписокВыбора.Очистить();
	МассивОбъектовМетаданных = Справочники.ПравилаРабочегоПроцесса.ОбъектыМетаданныхОснованийДляПравилРабочегоПроцесса();
	
	Для Каждого ОбъектМетаданных Из МассивОбъектовМетаданных Цикл
		
		Элементы.ПолноеИмяОснования.СписокВыбора.Добавить(
			ОбъектМетаданных.ПолноеИмя(),
			ОбъектМетаданных.Синоним
		);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ПолноеИмяОснования) Тогда
		НайденныйЭлемент = Элементы.ПолноеИмяОснования.СписокВыбора.НайтиПоЗначению(Объект.ПолноеИмяОснования);
		Если НайденныйЭлемент <> Неопределено Тогда
			ПредставлениеОснования = НайденныйЭлемент.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидОснования = "ЗаказНаряд" Тогда
		ПредставлениеОснования = НСтр("ru='Заказ-наряд'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеПолейПоТипуДействия()
	
	ОписаниеПолей.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТипДействия) Тогда
		
		МенеджерОбработчика = Перечисления.ТипыДействийРабочегоПроцесса.СоответствиеДействийМодулямОбработчиков()[Объект.ТипДействия];
		
		ТаблицаОписанияПолей = РеквизитФормыВЗначение("ОписаниеПолей");
		МенеджерОбработчика.СоставПолейЗаполненияДляРабочегоПроцесса(ТаблицаОписанияПолей, Объект.ТипДействия);
		ЗначениеВРеквизитФормы(ТаблицаОписанияПолей, "ОписаниеПолей");
		
		ЗаполнитьСписокПолейОснований();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПолейОснований()
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		ОписаниеПоля.СписокПолейОснования.Очистить();
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.ПолноеИмяОснования) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника	= Метаданные.НайтиПоПолномуИмени(Объект.ПолноеИмяОснования);
	МенеджерИсточника	= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.ПолноеИмяОснования);
	РеквизитыНедоступныеДляИсточника = МенеджерИсточника.РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(Объект.ТипДействия);
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		
		ОписаниеПоля.СписокПолейОснования.Очистить();
		
		Если МетаданныеИсточника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыПоля = ОписаниеПоля.ТипЗначения.Типы();
		
		Для Каждого РеквизитОснования Из МетаданныеИсточника.Реквизиты Цикл
			
			Если РеквизитыНедоступныеДляИсточника.Найти(РеквизитОснования.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ТипПоля Из ТипыПоля Цикл
				Если РеквизитОснования.Тип.СодержитТип(ТипПоля)
					И ОписаниеПоля.СписокПолейОснования.НайтиПоЗначению(РеквизитОснования.Имя) = Неопределено Тогда
					
					ЭлементСписка = ОписаниеПоля.СписокПолейОснования.Добавить(РеквизитОснования.Имя, РеквизитОснования.Синоним);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыНастроекЗаполнения()
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ЭлементФормы Из Элементы.ГруппаРеквизиты.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ЭлементФормы);
	КонецЦикла;
	Для Каждого ЭлементФормы Из Элементы.ГруппаВарианты.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ЭлементФормы);
	КонецЦикла;
	Для Каждого ЭлементФормы Из Элементы.ГруппаЗначения.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ЭлементФормы);
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		
		Индекс = ОписаниеПолей.Индекс(ОписаниеПоля);
		
		ЗаголовокПоля = Элементы.Добавить("ЗаголовокПоля_" + Индекс, Тип("ПолеФормы"), Элементы.ГруппаРеквизиты);
		ЗаголовокПоля.ПутьКДанным			= "ОписаниеПолей[" + Индекс + "].Заголовок";
		ЗаголовокПоля.Вид					= ВидПоляФормы.ПолеНадписи;
		ЗаголовокПоля.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЗаголовокПоля.АвтоМаксимальнаяШирина= Ложь;
		ЗаголовокПоля.МаксимальнаяШирина	= 18;
		
		ВариантЗаполнения = Элементы.Добавить("ВариантЗаполнения_" + Индекс, Тип("ПолеФормы"), Элементы.ГруппаВарианты);
		ВариантЗаполнения.ПутьКДанным		= "ОписаниеПолей[" + Индекс + "].ВариантЗаполнения";
		ВариантЗаполнения.Вид				= ВидПоляФормы.ПолеПереключателя;
		ВариантЗаполнения.Заголовок			= ОписаниеПоля.Заголовок;
		ВариантЗаполнения.ПоложениеЗаголовка= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ВариантЗаполнения.УстановитьДействие("ПриИзменении", "Подключаемый_ВариантЗаполненияПриИзменении");
		Если ОписаниеПоля.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
			ВариантЗаполнения.СписокВыбора.Добавить("Смещение",		НСтр("ru='смещение даты'"));
			ВариантЗаполнения.СписокВыбора.Добавить("Указанный",	НСтр("ru='указанный'"));
		Иначе
			ВариантЗаполнения.СписокВыбора.Добавить("ИзОснования",	НСтр("ru='из основания'"));
			ВариантЗаполнения.СписокВыбора.Добавить("Указанный",	НСтр("ru='указанный'"));
		КонецЕсли;
		
		ЗначениеПоля = Элементы.Добавить("ЗначениеПоля_" + Индекс, Тип("ПолеФормы"), Элементы.ГруппаЗначения);
		ЗначениеПоля.ПутьКДанным				= "ОписаниеПолей[" + Индекс + "].Значение";
		ЗначениеПоля.Вид						= ВидПоляФормы.ПолеВвода;
		ЗначениеПоля.ПоложениеЗаголовка			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЗначениеПоля.АвтоОтметкаНезаполненного	= ОписаниеПоля.ОбязательноеЗаполнение;
		ЗначениеПоля.ВыборГруппИЭлементов		= ГруппыИЭлементы.Элементы;
		ЗначениеПоля.ИсторияВыбораПриВводе		= ИсторияВыбораПриВводе.НеИспользовать;
		ЗначениеПоля.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоляПриИзменении");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПривестиЭлементФормыКОписаниюПоля(Форма, ОписаниеПоля, ОчищатьЗначение = Истина)
	
	ПолеВариант = Форма.Элементы.Найти("ВариантЗаполнения_" + Форма.ОписаниеПолей.Индекс(ОписаниеПоля));
	ПолеВариант.Доступность = Не (ПолеВариант.СписокВыбора.НайтиПоЗначению("ИзОснования") <> Неопределено И ОписаниеПоля.СписокПолейОснования.Количество() = 0);
	
	Если Не ПолеВариант.Доступность Тогда
		ОписаниеПоля.ВариантЗаполнения = "Указанный";
	КонецЕсли;
	
	ПолеЗначение = Форма.Элементы.Найти("ЗначениеПоля_" + Форма.ОписаниеПолей.Индекс(ОписаниеПоля));
	ПолеЗначение.СписокВыбора.Очистить();
	ПолеЗначение.КнопкаВыпадающегоСписка = Неопределено;
	
	Если ОписаниеПоля.ВариантЗаполнения = "ИзОснования" Тогда
		
		ПолеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		Если ОчищатьЗначение Тогда
			ОписаниеПоля.Значение = "";
		Иначе
			ОписаниеПоля.Значение = ПолеЗначение.ОграничениеТипа.ПривестиЗначение(ОписаниеПоля.Значение);
		КонецЕсли;
		ПолеЗначение.РежимВыбораИзСписка	= Истина;
		
		Для Каждого ПолеТипа Из ОписаниеПоля.СписокПолейОснования Цикл
			ЭлементСписка = ПолеЗначение.СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементСписка, ПолеТипа);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ОписаниеПоля.Значение) И ПолеЗначение.СписокВыбора.Количество() > 0 Тогда
			ОписаниеПоля.Значение = ПолеЗначение.СписокВыбора[0].Значение;
		КонецЕсли;
		
	ИначеЕсли ОписаниеПоля.ВариантЗаполнения = "Указанный" Тогда
		
		ПолеЗначение.ОграничениеТипа = ОписаниеПоля.ТипЗначения;
		Если ОчищатьЗначение Тогда
			ОписаниеПоля.Значение = ПолеЗначение.ОграничениеТипа.ПривестиЗначение();
		Иначе
			ОписаниеПоля.Значение = ПолеЗначение.ОграничениеТипа.ПривестиЗначение(ОписаниеПоля.Значение);
		КонецЕсли;
		ПолеЗначение.РежимВыбораИзСписка = Ложь;
		Если ОписаниеПоля.ТипЗначения.Типы().Количество() = 1 И ОписаниеПоля.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			ПолеЗначение.КнопкаВыпадающегоСписка = Ложь;
		КонецЕсли;
		
	ИначеЕсли ОписаниеПоля.ВариантЗаполнения = "Смещение" Тогда
		
		ПолеЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		Если ОчищатьЗначение Тогда
			ОписаниеПоля.Значение = "";
		Иначе
			ОписаниеПоля.Значение = ПолеЗначение.ОграничениеТипа.ПривестиЗначение(ОписаниеПоля.Значение);
		КонецЕсли;
		ПолеЗначение.РежимВыбораИзСписка	= Истина;
		
		ЗаполнитьСписокСтандартныхИнтервалов(ПолеЗначение.СписокВыбора);
		
		Если Не ЗначениеЗаполнено(ОписаниеПоля.Значение) И ПолеЗначение.СписокВыбора.Количество() > 0 Тогда
			ОписаниеПоля.Значение = ПолеЗначение.СписокВыбора[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокСтандартныхИнтервалов(СписокВыбора)
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("Сразу",		НСтр("ru='Дата срабатывания правила'"));
	СписокВыбора.Добавить("ЧерезЧас",	НСтр("ru='Через час'"));
	СписокВыбора.Добавить("ЧерезДень",	НСтр("ru='Через день'"));
	СписокВыбора.Добавить("ЧерезНеделю",НСтр("ru='Через неделю'"));
	СписокВыбора.Добавить("ЧерезМесяц",	НСтр("ru='Через месяц'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПривестиЭлементыФормыКОписаниюПолей(Форма, ОчищатьЗначение = Истина)
	
	Для Каждого ОписаниеПоля Из Форма.ОписаниеПолей Цикл
		ПривестиЭлементФормыКОписаниюПоля(Форма, ОписаниеПоля, ОчищатьЗначение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ТипДействияПриИзмененииСервер()
	
	ЗаполнитьОписаниеПолейПоТипуДействия();
	ОбновитьЭлементыНастроекЗаполнения();
	ПривестиЭлементыФормыКОписаниюПолей(ЭтотОбъект);
	УстановитьПараметрыВыбораШаблона();
	УстановитьСвойстваЭлементовДляВидовКонтактнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораШаблона()
	
	ПараметрыВыбораШаблона = Новый Массив;
	
	Если Объект.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьEmail Тогда
		ПараметрыВыбораШаблона.Добавить(Новый ПараметрВыбора("Отбор.ПредназначенДляЭлектронныхПисем", Истина));
	ИначеЕсли Объект.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьSMS Тогда
		ПараметрыВыбораШаблона.Добавить(Новый ПараметрВыбора("Отбор.ПредназначенДляSMS", Истина));
	КонецЕсли;
	
	Элементы.ШаблонСообщения.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораШаблона);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АвтоматическоеНаименованиеДействия(Форма)
	
	Шаблон = НСтр("ru='%1 по основанию: %2'");
	Возврат СтрШаблон(Шаблон, Форма.Объект.ТипДействия, Форма.ПредставлениеОснования);
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовДляВидовКонтактнойИнформации()
	
	МетаданныеИсточника	= Метаданные.НайтиПоПолномуИмени(Объект.ПолноеИмяОснования);
	РодительКИ = Неопределено;
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		
		Если ОписаниеПоля.ИмяРеквизита <> "Контакт" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеПоля.ВариантЗаполнения = "Указанный" Тогда
			Если ТипЗнч(ОписаниеПоля.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
				РодительКИ = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты;
			ИначеЕсли ТипЗнч(ОписаниеПоля.Значение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
				РодительКИ = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица;
			ИначеЕсли ТипЗнч(ОписаниеПоля.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
				РодительКИ = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
			КонецЕсли;
		ИначеЕсли ОписаниеПоля.ВариантЗаполнения = "ИзОснования" Тогда
			МетаданныеРеквизита = МетаданныеИсточника.Реквизиты.Найти(ОписаниеПоля.Значение);
			Если МетаданныеРеквизита <> Неопределено Тогда
				Если МетаданныеРеквизита.Тип.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
					РодительКИ = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты;
				ИначеЕсли МетаданныеРеквизита.Тип.СодержитТип(Тип("СправочникСсылка.КонтактныеЛица")) Тогда
					РодительКИ = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица;
				ИначеЕсли МетаданныеРеквизита.Тип.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
					РодительКИ = Справочники.ВидыКонтактнойИнформации.СправочникПользователи;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		
		Если Не ОписаниеПоля.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ВидыКонтактнойИнформации")) Тогда
			Продолжить;
		КонецЕсли;
		
		Индекс = ОписаниеПолей.Индекс(ОписаниеПоля);
		Элементы["ЗначениеПоля_" + Индекс].РежимВыбораИзСписка = Истина;
		Элементы["ЗначениеПоля_" + Индекс].КнопкаВыбора = Истина;
		Элементы["ЗначениеПоля_" + Индекс].КнопкаВыпадающегоСписка = Ложь;
		Элементы["ЗначениеПоля_" + Индекс].КнопкаОткрытия = Ложь;
		Элементы["ЗначениеПоля_" + Индекс].СписокВыбора.Очистить();
		
		Если РодительКИ <> Неопределено Тогда
			СписокВыбора = ПолучитьСписокВыбораВидовКонтактнойИнформации(РодительКИ, Объект.ТипДействия);
			ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
				СписокВыбора,
				Элементы["ЗначениеПоля_" + Индекс].СписокВыбора
			);
			Если СписокВыбора.Количество() > 0 Тогда
				ОписаниеПоля.Значение = СписокВыбора[0].Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораВидовКонтактнойИнформации(РодительКИ, ТипДействия)
	
	Результат = Новый СписокЗначений;
	Если ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьEmail Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ИначеЕсли ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьSMS Тогда
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВидыКонтактнойИнформации.Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель = &РодительКИ
		|	И ВидыКонтактнойИнформации.Тип = &ТипКИ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания,
		|	ВидыКонтактнойИнформации.Наименование";
	
	Запрос.УстановитьПараметр("РодительКИ", РодительКИ);
	Запрос.УстановитьПараметр("ТипКИ", ТипКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
