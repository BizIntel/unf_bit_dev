#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура выполняет действия правил рабочего процесса.
// Вызывается из РабочиеПроцессы.ОбработатьПравилаРабочихПроцессов()
//
// Параметры:
//  Действия - Массив	 - массив элементов СправочникСсылка.ДействияРабочегоПроцесса
//  Источник - Ссылка	 - тип ссылки зависит от поддерживаемых источников правил
//  Правило	 - СправочникСсылка.ПравилаРабочегоПроцесса	 - выполняемое правило
//  Автор	 - СправочникСсылка.Пользователи	 - пользователь, от лица которого выполняется правило
//
Процедура ВыполнитьДействияПоИсточнику(Действия, Источник, Правило, Автор) Экспорт
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника	= Источник.Метаданные();
	МенеджерИсточника	= ОбщегоНазначения.МенеджерОбъектаПоСсылке(Источник);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияРабочегоПроцессаНастройкиЗаполнения.Ссылка,
		|	ДействияРабочегоПроцессаНастройкиЗаполнения.ИмяРеквизита,
		|	ДействияРабочегоПроцессаНастройкиЗаполнения.ВариантЗаполнения,
		|	ДействияРабочегоПроцессаНастройкиЗаполнения.Значение
		|ИЗ
		|	Справочник.ДействияРабочегоПроцесса.НастройкиЗаполнения КАК ДействияРабочегоПроцессаНастройкиЗаполнения
		|ГДЕ
		|	ДействияРабочегоПроцессаНастройкиЗаполнения.Ссылка В(&Действия)
		|	И ДействияРабочегоПроцессаНастройкиЗаполнения.ВариантЗаполнения = &ВариантЗаполненияПоОснованию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействияРабочегоПроцесса.Ссылка,
		|	ДействияРабочегоПроцесса.ТипДействия,
		|	ДействияРабочегоПроцесса.ШаблонСообщения,
		|	ДействияРабочегоПроцесса.НастройкиЗаполнения.(
		|		ИмяРеквизита,
		|		ВариантЗаполнения,
		|		Значение
		|	)
		|ИЗ
		|	Справочник.ДействияРабочегоПроцесса КАК ДействияРабочегоПроцесса
		|ГДЕ
		|	ДействияРабочегоПроцесса.Ссылка В(&Действия)";
	
	Запрос.УстановитьПараметр("ВариантЗаполненияПоОснованию", "ИзОснования");
	Запрос.УстановитьПараметр("Действия", Действия);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РеквизитыОснования = Новый Массив; // для получения всех нужных для заполнения значений основания одним запросом
	Выборка = МассивРезультатов[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗначениеНастройки = Выборка.Значение.Получить();
		
		Если МетаданныеИсточника.Реквизиты.Найти(ЗначениеНастройки) <> Неопределено Тогда
			РеквизитыОснования.Добавить(ЗначениеНастройки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РеквизитыОснования.Количество() > 0 Тогда
		ЗначенияРеквизитовИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, РеквизитыОснования);
	КонецЕсли;
	
	ВыборкаДействий = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаДействий.Следующий() Цикл
		
		ВыборкаНастроек = ВыборкаДействий.НастройкиЗаполнения.Выбрать();
		
		ДатаВыполненияДействия = ТекущаяДатаСеанса();
		ДанныеЗаполнения = Источник;
		
		// 1. Определение типа для объекта приемника, и подготовка данных заполнения, специфичных для конкретного типа действия
		Если ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.СоздатьСобытие
			Или ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьEmail
			Или ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьSMS Тогда
			
			МетаданныеПриемника	= Метаданные.Документы.Событие;
			ПриемникОбъект		= Документы.Событие.СоздатьДокумент();
			ДанныеЗаполнения	= Новый Структура;
			ДанныеЗаполнения.Вставить("ОснованиеЗаполнения", Источник);
			
			Если ВыборкаНастроек.НайтиСледующий(Новый Структура("ИмяРеквизита", "ТипСобытия")) Тогда
				
				Значение = ВыборкаНастроек.Значение.Получить();
				Если ВыборкаНастроек.ВариантЗаполнения = "ИзОснования" Тогда
					Значение = ЗначенияРеквизитовИсточника[Значение];
				КонецЕсли;
				
				ДанныеЗаполнения.Вставить("ТипСобытия", Значение);
				ВыборкаНастроек.Сбросить();
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.СоздатьЗаданиеНаРаботу Тогда
			
			МетаданныеПриемника	= Метаданные.Документы.ЗаданиеНаРаботу;
			ПриемникОбъект		= Документы.ЗаданиеНаРаботу.СоздатьДокумент();
			
		ИначеЕсли ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.СоздатьЗаписьКалендаря Тогда
			
			МетаданныеПриемника	= Метаданные.Справочники.ЗаписиКалендаряСотрудника;
			ПриемникОбъект		= Справочники.ЗаписиКалендаряСотрудника.СоздатьЭлемент();
			
		ИначеЕсли ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.СоздатьНапоминание Тогда
			
			МетаданныеПриемника	= Метаданные.РегистрыСведений.НапоминанияПользователя;
			ПриемникОбъект		= РегистрыСведений.НапоминанияПользователя.СоздатьМенеджерЗаписи();
			
		КонецЕсли;
		
		// 2. Заполнение объекта приемника стандартным образом
		ПриемникОбъект.Заполнить(ДанныеЗаполнения);
		
		// 3. Установка специфических свойств от вида приемника
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеПриемника) Тогда
			
			ПриемникОбъект.УстановитьНовыйКод();
			ПриемникОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаРабочегоПроцесса"); // для избежания рекурсии
			
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеПриемника) Тогда
			
			ПриемникОбъект.Дата = ДатаВыполненияДействия;
			ПриемникОбъект.УстановитьНовыйНомер();
			ПриемникОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПравилаРабочегоПроцесса");
			
		КонецЕсли;
		
		Если МетаданныеПриемника.Реквизиты.Найти("Комментарий") <> Неопределено Тогда
			ПриемникОбъект.Комментарий = "#" + НСтр("ru='Создан автоматически согласно правилам рабочего процесса'");
		КонецЕсли;
		
		Если МетаданныеПриемника.Реквизиты.Найти("Автор") <> Неопределено Тогда
			ПриемникОбъект.Автор = Автор;
		КонецЕсли;
		
		РеквизитыНедоступныеДляИсточника = МенеджерИсточника.РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ВыборкаДействий.ТипДействия);
		
		// 4. Заполнение реквизитов объекта приемника, согласно настройкам заполнения из действия рабочего процесса
		Пока ВыборкаНастроек.Следующий() Цикл
			
			Если ОбщегоНазначения.ЭтоРегистр(МетаданныеПриемника) Тогда
				
				Если МетаданныеПриемника.Измерения.Найти(ВыборкаНастроек.ИмяРеквизита) = Неопределено
					И МетаданныеПриемника.Ресурсы.Найти(ВыборкаНастроек.ИмяРеквизита) = Неопределено
					И МетаданныеПриемника.Реквизиты.Найти(ВыборкаНастроек.ИмяРеквизита) = Неопределено
					И Не ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеПриемника.СтандартныеРеквизиты, ВыборкаНастроек.ИмяРеквизита) Тогда
					
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли МетаданныеПриемника.Реквизиты.Найти(ВыборкаНастроек.ИмяРеквизита) = Неопределено
				И Не ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеПриемника.СтандартныеРеквизиты, ВыборкаНастроек.ИмяРеквизита) Тогда
				
				Продолжить;
			КонецЕсли;
			
			ЗначениеНастройки = ВыборкаНастроек.Значение.Получить();
			
			Если ВыборкаНастроек.ВариантЗаполнения = "Указанный" Тогда
				
				ПриемникОбъект[ВыборкаНастроек.ИмяРеквизита] = ЗначениеНастройки;
				
			ИначеЕсли ВыборкаНастроек.ВариантЗаполнения = "ИзОснования" Тогда
				
				Если РеквизитыНедоступныеДляИсточника.Найти(ЗначениеНастройки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПриемникОбъект[ВыборкаНастроек.ИмяРеквизита] = ЗначенияРеквизитовИсточника[ЗначениеНастройки];
				
			ИначеЕсли ВыборкаНастроек.ВариантЗаполнения = "Смещение" Тогда
				
				ПриемникОбъект[ВыборкаНастроек.ИмяРеквизита] = ДатаСмещения(ДатаВыполненияДействия, ЗначениеНастройки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// 5. Заполнение реквизитов объекта приемника, зависящих от специфики выполняемого действия
		ТребуетсяЗаписатьВложения = Ложь;
		Если ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.СоздатьСобытие Тогда
			
			Если ПриемникОбъект.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо И Не ПустаяСтрока(ПриемникОбъект.Содержание) Тогда
				
				ФД = Новый ФорматированныйДокумент;
				ФД.Добавить(ПриемникОбъект.Содержание, Тип("ТекстФорматированногоДокумента"));
				
				ТекстHTML	= "";
				КартинкиТекстаHTML	= Новый Структура;
				ФД.ПолучитьHTML(ТекстHTML, КартинкиТекстаHTML);
				
				ПриемникОбъект.КартинкиHTML		= Новый ХранилищеЗначения(КартинкиТекстаHTML);
				ПриемникОбъект.СодержаниеHTML	= ТекстHTML;
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.СоздатьНапоминание Тогда
			
			ПриемникОбъект.Описание			= ОбщегоНазначения.ПредметСтрокой(Источник);
			ПриемникОбъект.Источник			= Источник;
			ПриемникОбъект.СрокНапоминания	= ПриемникОбъект.ВремяСобытия;
			ПриемникОбъект.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
			
		ИначеЕсли ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьEmail Тогда
			
			Результат = ШаблоныСообщений.СформироватьСообщение(
				ВыборкаДействий.ШаблонСообщения,
				Источник,
				Новый УникальныйИдентификатор,
				Новый Структура("ПреобразовыватьHTMLДляФорматированногоДокумента", Истина)
			);
			ФД = Новый ФорматированныйДокумент;
			ФД.УстановитьHTML(Результат.Текст, Новый Структура);
			
			ПриемникОбъект.Тема				= Результат.Тема;
			ПриемникОбъект.Содержание		= ФД.ПолучитьТекст();
			ПриемникОбъект.СодержаниеHTML	= Результат.Текст;
			ПриемникОбъект.ТипСобытия		= Перечисления.ТипыСобытий.ЭлектронноеПисьмо;
			ПриемникОбъект.Состояние		= Справочники.СостоянияСобытий.Запланировано;
			
			ВложенияПисьма = Новый Соответствие;
			
			Если Результат.Вложения.Количество() > 0 Тогда
				
				ТребуетсяЗаписатьВложения = Истина;
				
				КартинкиФД = Новый Структура;
				Индекс = Результат.Вложения.Количество()-1;
				Пока Индекс >= 0 Цикл
					Вложение = Результат.Вложения[Индекс];
					ВложенияПисьма.Вставить(Вложение.Представление, Вложение.АдресВоВременномХранилище);
					Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
						КартинкиФД.Вставить(
							Вложение.Представление,
							Новый Картинка(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище)));
						Результат.Вложения.Удалить(Вложение);
					КонецЕсли;
					Индекс = Индекс - 1;
				КонецЦикла;
				
				ПриемникОбъект.КартинкиHTML = Новый ХранилищеЗначения(КартинкиФД);
				
			КонецЕсли;
			
			НоваяСтрока = ПриемникОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Источник;
			
			ЗаполнитьУчастниковСобытия(ВыборкаНастроек, ПриемникОбъект, ЗначенияРеквизитовИсточника);
			
			Если Не РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
				
				Попытка
					ПриемникОбъект.ОтправитьЭлектронноеПисьмо(Ложь, ВложенияПисьма);
				Исключение
					ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось автоматически отправить электронное письмо, требуется отправка из События. При выполнении действия рабочего процесса: ""%1"".
						|По причине: %2'"), ВыборкаДействий.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(РабочиеПроцессы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.ПравилаРабочегоПроцесса, Правило, ТекстСообщения);
				КонецПопытки;
				
			Иначе
				ТекстСообщения = НСтр("ru='Автоматическая отправка письма невозможна, т.к. в базе установлена блокировка работы с внешними ресурсами.
					|Для разблокирования перейдите в Еще больше возможностей - Администрирование - Регламентные операции - Разблокировать работу с внешними ресурсами.'");
				ЗаписьЖурналаРегистрации(РабочиеПроцессы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Справочники.ПравилаРабочегоПроцесса, Правило, ТекстСообщения);
			КонецЕсли;
			
		ИначеЕсли ВыборкаДействий.ТипДействия = Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьSMS Тогда
			
			Результат = ШаблоныСообщений.СформироватьСообщение(ВыборкаДействий.ШаблонСообщения, Источник, Новый УникальныйИдентификатор);
			ПриемникОбъект.Содержание	= Результат.Текст;
			ПриемникОбъект.ТипСобытия	= Перечисления.ТипыСобытий.СообщениеSMS;
			ПриемникОбъект.Состояние	= Справочники.СостоянияСобытий.Запланировано;
			ПриемникОбъект.ДокументОснование = Источник;
			
			НоваяСтрока = ПриемникОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Источник;
			
			ЗаполнитьУчастниковСобытия(ВыборкаНастроек, ПриемникОбъект, ЗначенияРеквизитовИсточника);
			
			Если Не РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
				
				Попытка
					ПриемникОбъект.ОтправитьSMS(Ложь);
				Исключение
					ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось автоматически отправить SMS, требуется отправка из События. При выполнении действия рабочего процесса: ""%1"".
						|По причине: %2'"), ВыборкаДействий.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(РабочиеПроцессы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.ПравилаРабочегоПроцесса, Правило, ТекстСообщения);
				КонецПопытки;
				
			Иначе
				ТекстСообщения = НСтр("ru='Автоматическая отправка SMS невозможна, т.к. в базе установлена блокировка работы с внешними ресурсами.
					|Для разблокирования перейдите в Еще больше возможностей - Администрирование - Регламентные операции - Разблокировать работу с внешними ресурсами.'");
				ЗаписьЖурналаРегистрации(РабочиеПроцессы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Справочники.ПравилаРабочегоПроцесса, Правило, ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
		// 6. Проверка согласованности заполненных реквизитов
		// В частности, возможна ситуация, когда в действии рабочего процесса для поля установлен вариант заполнения "ИзОснования",
		// поле является обязательным для заполнения в приемнике, но оказалось не заполненным в основании. В этом случае информация
		// запишется в журнал регистрации.
		Если Не ПриемникОбъект.ПроверитьЗаполнение() Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Не удалось выполнить действие рабочего процесса: ""%1"".
				|Некорретно заполнен создаваемый объект: %2'"), ВыборкаДействий.Ссылка, МетаданныеПриемника.Представление());
			ЗаписьЖурналаРегистрации(РабочиеПроцессы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ПравилаРабочегоПроцесса, Правило, ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		// 7. Запись объекта приемника
		ПриемникОбъект.Записать();
		
		Если ТребуетсяЗаписатьВложения Тогда
			Для Каждого Вложение Из Результат.Вложения Цикл
				
				ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Вложение.Представление);
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", Автор);
				ПараметрыФайла.Вставить("ВладелецФайлов", ПриемникОбъект.Ссылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ПолноеИмяФайла.ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ПолноеИмяФайла.Расширение));
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
				
				ПрисоединенныйФайлСсылка = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, Вложение.АдресВоВременномХранилище);
				Если ЗначениеЗаполнено(Вложение.Идентификатор) Тогда
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Идентификатор;
					ПрисоединенныйФайлОбъект.Записать();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// 8. Запись в журнал регистрации о выполнении действия
		ПредставлениеОбъекта = ?(ОбщегоНазначения.ЭтоСправочник(МетаданныеПриемника) Или ОбщегоНазначения.ЭтоДокумент(МетаданныеПриемника),
			Строка(ПриемникОбъект.Ссылка),
			МетаданныеПриемника.Представление()
		);
		ТекстСообщения = СтрШаблон(НСтр("ru='Действие рабочего процесса ""%1"" выполнено успешно,
			|создан объект: ""%2""'"), ВыборкаДействий.Ссылка, ПредставлениеОбъекта);
		ЗаписьЖурналаРегистрации(РабочиеПроцессы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Примечание,
			Метаданные.Справочники.ПравилаРабочегоПроцесса, Правило, ТекстСообщения);
		
		// 9. Запись в регистр для фиксации истории выполнения правила
		РегистрыСведений.ВыполнениеПравилРабочегоПроцесса.ЗафиксироватьВыполнениеПравила(
			Правило,
			ЗначениеСозданногоОбъекта(МетаданныеПриемника, ПриемникОбъект),
			ВыборкаДействий.Ссылка,
			ДатаВыполненияДействия
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает рассчитаную дату смещения
//
// Параметры:
//  Дата	 - Дата	 - дата, относительно которой выполняется расчет
//  Смещение - Строка	 - вариант смещения
// 
// Возвращаемое значение:
//  Дата - Дата
//
Функция ДатаСмещения(знач Дата, знач Смещение) Экспорт
	
	Результат = '0001-01-01';
	
	Если Смещение = "Сразу" Тогда
		Результат = Дата;
	ИначеЕсли Смещение = "ЧерезЧас" Тогда
		Результат = Дата + 3600;
	ИначеЕсли Смещение = "ЧерезДень" Тогда
		Результат = Дата + 24 * 3600;
	ИначеЕсли Смещение = "ЧерезНеделю" Тогда
		Результат = Дата + 7 * 24 * 3600;
	ИначеЕсли Смещение = "ЧерезМесяц" Тогда
		Результат = ДобавитьМесяц(Дата, 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьУчастниковСобытия(ВыборкаНастроек, СобытиеОбъект, знач ЗначенияРеквизитовИсточника)
	
	ВыборкаНастроек.Сбросить();
	
	Если ВыборкаНастроек.НайтиСледующий(Новый Структура("ИмяРеквизита", "Контакт")) Тогда
		
		ЗначениеКонтакта = ВыборкаНастроек.Значение.Получить();
		Если ВыборкаНастроек.ВариантЗаполнения = "ИзОснования" Тогда
			ЗначениеКонтакта = ЗначенияРеквизитовИсточника[ЗначениеКонтакта];
		КонецЕсли;
		
		НоваяСтрока = СобытиеОбъект.Участники.Добавить();
		НоваяСтрока.Контакт = ЗначениеКонтакта;
		
		ВыборкаНастроек.Сбросить();
		
		Если ВыборкаНастроек.НайтиСледующий(Новый Структура("ИмяРеквизита", "ВидКонтактнойИнформации")) Тогда
			
			ЗначениеНастройки = ВыборкаНастроек.Значение.Получить();
			
			Если ВыборкаНастроек.ВариантЗаполнения = "ИзОснования" Тогда
				ЗначениеНастройки = ЗначенияРеквизитовИсточника[ЗначениеНастройки];
			КонецЕсли;
			
			НоваяСтрока.КакСвязаться = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ЗначениеКонтакта, ЗначениеНастройки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСозданногоОбъекта(МетаданныеПриемника, ПриемникОбъект)
	
	// Ограничение: напоминания не являются ссылочным объектом,
	// поэтому в истории созданный объект сохраняется в виде строки с датой напоминания.
	// Если по одному действию создано несколько напоминаний с одинаковой датой,
	// то в истории выполнения сохранится только одно.
	
	Если МетаданныеПриемника = Метаданные.РегистрыСведений.НапоминанияПользователя Тогда
		Возврат "Напоминание " + Формат(ПриемникОбъект.СрокНапоминания, "HH.mm.ss dd.MM.yyyy");
	КонецЕсли;
	
	Возврат ПриемникОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли