
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Настроить();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсисте.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	КоличествоТоваров = Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		Если Товары[КоличествоТоваров-1].Код > ТекущийОбъект.МаксимальныйКод И ТекущийОбъект.МаксимальныйКод <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В табличной части ""Товары"" найдены строки с кодом, превышающим максимальное допустимое значение: %1. Измените максимальный код или уменьшите количество товаров к выгрузке при помощи отбора.'"), ТекущийОбъект.МаксимальныйКод),,"Товары",,Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеОТоварахПрочитаны Тогда
		ОбновитьСписокТоваровНаСервере();
	КонецЕсли;
	
	ТекущийОбъект.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсисте.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсисте.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ДанныеОТоварахПрочитаны Тогда
		
		Если Товары.Количество() > 0 Тогда
			ПрименитьИзмененияНаСервере(ТекущийОбъект);
		Иначе
			ПодключаемоеОборудованиеOfflineВызовСервера.ОбновитьКодыТоваров(ТекущийОбъект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПравилаОбменаСПодключаемымОборудованиемOffline", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсисте.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсисте.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	ОтборИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключаемогоОборудованияПриИзменении(Элемент)
	
	Настроить();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимальныйКодПриИзменении(Элемент)
	
	// Изменен максимальный код - необходим контроль.
	Состояние(НСтр("ru = 'Выполняется обновление списка товаров...'"));
	ОбновитьСписокТоваровНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксВесовогоТовараПриИзменении(Элемент)
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	Если Объект.ПрефиксВесовогоТовара = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Префикс = 0, обычно, используется для штучного, а не весового товара. Рекомендуется устанавливать префикс > 0.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключаемогоОборудованияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если ТипЗнч(Элемент)=Тип("ТаблицаФормы") и ТипЗнч(Элемент.ТекущийЭлемент)=Тип("ПолеФормы") Тогда
		
		Имя = Элемент.ТекущийЭлемент.Имя;
		
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Имя = "ТоварыКод" Тогда
			
			СтарыйКод = Элементы.Товары.ТекущиеДанные.Код;
			Элементы.ТоварыКод.СписокВыбора.ЗагрузитьЗначения(СвободныеКоды());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтарыйКод = Элементы.Товары.ТекущиеДанные.Код;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.Код = СтарыйКод Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		
		НайденнаяСтрока = НайтиСтрокуТовараСКодом(ТекущиеДанные.Код, ТекущиеДанные.ПолучитьИдентификатор());
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НайденнаяСтрока = Товары.НайтиПоИдентификатору(НайденнаяСтрока);
			
			ОписаниеОшибки = НСтр("ru='Такой код уже назначен для номенклатуры %Номенклатура%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Номенклатура%", """" + НайденнаяСтрока.Номенклатура + """"
			+ ?(ЗначениеЗаполнено(НайденнаяСтрока.Характеристика), " " + НСтр("ru='с характеристикой'") + " """ + НайденнаяСтрока.Характеристика + """", "")
			+ ?(ЗначениеЗаполнено(НайденнаяСтрока.Партия), " " + НСтр("ru='с партией'") + " """ + НайденнаяСтрока.Партия + """", "")
			+ ?(ЗначениеЗаполнено(НайденнаяСтрока.ЕдиницаИзмерения), " " + НСтр("ru='с единицей'") + " """ + НайденнаяСтрока.ЕдиницаИзмерения + """", ""))+НСтр("ru = '. Выполнен обмен местами.'");
			
			ТекущиеДанные.ИзмененаПользователем = Истина;
			НайденнаяСтрока.ИзмененаПользователем = Истина;
			
			ВременнаяСтруктура = СтруктураСтроки(НайденнаяСтрока);
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, ТекущиеДанные,,"Код, ИзмененаПользователем");
			ТекущиеДанные.Код = СтарыйКод;
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВременнаяСтруктура);
			
			Элементы.Товары.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			
			Если ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Тогда
				ПоказатьПредупреждение(, ОписаниеОшибки);
			КонецЕсли;
			
		Иначе
			
			ТекущиеДанные.Новый = Истина;
			ТекущиеДанные.ИзмененаПользователем = Истина;
			ОбработатьИзменениеКодаТовараНаСервере(ТекущиеДанные.Код);
			
		КонецЕсли;
		
	Иначе
		ТекущиеДанные.Код = СтарыйКод;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если НЕ ДоступноРедактированиеКодовТоваров Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ТекущиеДанные = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И ТекущиеДанные.Используется Тогда
			ПоказатьПредупреждение(, (НСтр("ru = 'Номенклатуре, соответствующей заданному отбору, после удаления будут заново назначены коды товаров.'")));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Изменение данных пользователем
	Для каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			// Данные в строке уже очищены
			Продолжить;
		КонецЕсли;
		
		ТекущиеДанные.Номенклатура   = Неопределено;
		ТекущиеДанные.Характеристика = Неопределено;
		ТекущиеДанные.Партия = Неопределено;
		ТекущиеДанные.ЕдиницаИзмерения = Неопределено;
		ТекущиеДанные.Используется   = Неопределено;
		ТекущиеДанные.Наименование   = Неопределено;
		ТекущиеДанные.Весовой        = Неопределено;
		ТекущиеДанные.Штрихкод       = Неопределено;
		ТекущиеДанные.Цена           = Неопределено;
		
		ТекущиеДанные.ИзмененаПользователем = Истина;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле <> Элементы.ТоварыКод Тогда
		
		ВыбраннаяСтрока = Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ВыбраннаяСтрока <> Неопределено Тогда
			ПоказатьЗначение(, ВыбраннаяСтрока.Номенклатура);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбновитьСписокТоваров(Команда)
	
	Состояние(НСтр("ru = 'Выполняется обновление списка товаров...'"));
	ОбновитьСписокТоваровНаСервереПовторноеОткрытие();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокТоваров(Команда)
	
	Состояние(НСтр("ru = 'Выполняется обновление списка товаров...'"));
	ОбновитьСписокТоваровНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	// Изменение данных
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ИндексТекущейСтроки = Товары.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки > 0 Тогда
			
			СтрокаНазначение = Товары[ИндексТекущейСтроки-1];
			
			СтрокаНазначение.ИзмененаПользователем = Истина;
			ТекущиеДанные.ИзмененаПользователем = Истина;
			
			Код = СтрокаНазначение.Код;
			СтрокаНазначение.Код = ТекущиеДанные.Код;
			ТекущиеДанные.Код = Код;
			
			Товары.Сдвинуть(ИндексТекущейСтроки,-1);
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	// Изменение данных пользователем
	Кол = Элементы.Товары.ВыделенныеСтроки.Количество()-1;
	Для НомерСтроки = 0 По Кол Цикл
		
		ТекущиеДанные = Товары.НайтиПоИдентификатору(Элементы.Товары.ВыделенныеСтроки[Кол-НомерСтроки]);
		
		ИндексТекущейСтроки = Товары.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки < Товары.Количество()-1 Тогда
			
			СтрокаНазначение = Товары[ИндексТекущейСтроки+1];
			
			СтрокаНазначение.ИзмененаПользователем = Истина;
			ТекущиеДанные.ИзмененаПользователем = Истина;
			
			Код = СтрокаНазначение.Код;
			СтрокаНазначение.Код = ТекущиеДанные.Код;
			ТекущиеДанные.Код = Код;
			
			Товары.Сдвинуть(ИндексТекущейСтроки,1);
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиОтбораПоУмолчанию(Команда)
	ЗагрузитьНастройкиОтбораПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвободныеКодыТоваровВКонцеСписка(Команда)
	
	Если Товары.Количество() > 0 Тогда
		СтрокаТЧ = Товары[Товары.Количество() - 1];
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			УдалитьСвободныеКодыТоваровНаСервере();
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Нет данных для удаления'"));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Нет данных для удаления'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция СвободныеКоды()
	
	СвободныеКоды = Новый Массив;
	КоличествоТоваров = Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		
		Для Каждого СтрокаТЧ Из Товары.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())) Цикл
			СвободныеКоды.Добавить(СтрокаТЧ.Код);
		КонецЦикла;
		Если ЗначениеЗаполнено(Товары[КоличествоТоваров-1].Номенклатура) Тогда
			СвободныеКоды.Добавить(Товары[КоличествоТоваров-1].Код + 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвободныеКоды;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	Если Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМOffline
	 ИЛИ Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.WebСервисОборудование Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор))
	);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура Настроить()
	
	Если Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМOffline
		ИЛИ Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.WebСервисОборудование Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор))
	);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаОбменаСПодключаемымОборудованиемOffline.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
		|ГДЕ
		|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &ПравилоОбмена");
		
		Запрос.УстановитьПараметр("ПравилоОбмена", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			НастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных.Получить();
			Если ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Элементы.ЕдиницаИзмеренияВеса.Видимость = Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	Элементы.ПрефиксВесовогоТовара.Видимость = Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	
	ДоступноРедактированиеКодовТоваров = РольДоступна("ПолныеПрава") ИЛИ Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	
	Элементы.ТоварыУдалить.Доступность                         = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыПереместитьВниз.Доступность                 = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыПереместитьВверх.Доступность                = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКонтекстноеМенюУдалить.Доступность          = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКонтекстноеМенюПереместитьВверх.Доступность = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКонтекстноеМенюПереместитьВниз.Доступность  = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКод.ТолькоПросмотр                          = Не ДоступноРедактированиеКодовТоваров;
	
	Элементы.ТоварыУдалитьСвободныеКодыТоваровВКонцеСписка.Видимость = РольДоступна("ПолныеПрава");
	
КонецПроцедуры

&НаСервере
Функция АдресКомпоновщикаНастроекВоВременномХранилище()
	
	АдресКомпоновщикаНастроекВоВременномХранилище = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки());
	
	Возврат АдресКомпоновщикаНастроекВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ЗаписатьКодВТаблице(Таблица, Данные, Код, Используется)
	
	СтрокаТЗ = Таблица.Найти(Код, "Код");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Таблица.Добавить();
		СтрокаТЗ.Новый = Истина;
	КонецЕсли;
	
	СтрокаТЗ.ИзмененаАвтоматически = Истина;
	
	ЗаполнитьЗначенияСвойств(СтрокаТЗ, Данные);
	
	СтрокаТЗ.Код             = Код;
	СтрокаТЗ.Используется    = Используется;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаТоваров(Товары, ВидЦен)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваров.Код КАК Код,
	|	КодыТоваров.Новый КАК Новый,
	|	КодыТоваров.ИзмененаПользователем КАК ИзмененаПользователем,
	|	КодыТоваров.ИзмененаАвтоматически КАК ИзмененаАвтоматически,
	|	КодыТоваров.Используется КАК Используется,
	|	КодыТоваров.Номенклатура КАК Номенклатура,
	|	КодыТоваров.Характеристика КАК Характеристика,
	|	КодыТоваров.Партия КАК Партия,
	|	КодыТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ КодыТоваров
	|ИЗ
	|	&ТаблицаЗначений КАК КодыТоваров
	|ИНДЕКСИРОВАТЬ ПО КодыТоваров.Номенклатура, КодыТоваров.Характеристика, КодыТоваров.Партия, КодыТоваров.ЕдиницаИзмерения
	|;
	|
	|ВЫБРАТЬ
	|	КодыТоваров.Новый КАК Новый,
	|	КодыТоваров.ИзмененаПользователем КАК ИзмененаПользователем,
	|	КодыТоваров.ИзмененаАвтоматически КАК ИзмененаАвтоматически,
	|	КодыТоваров.Используется КАК Используется,
	|	КодыТоваров.Код КАК Код,
	|	КодыТоваров.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваров.Номенклатура.Наименование,"""") КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваров.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	КодыТоваров.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваров.Характеристика.Наименование,"""") КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваров.Характеристика.Наименование,"""") КАК ХарактеристикаНаименованиеПолное,
	|	КодыТоваров.Партия КАК Партия,
	|	ЕСТЬNULL(КодыТоваров.Партия.Наименование,"""") КАК ПартияНаименование,
	|	КодыТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(КодыТоваров.ЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	(ЕСТЬNULL(КодыТоваров.ЕдиницаИзмерения.Коэффициент, 1)
	|		/ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ИСТИНА КАК Весовой
	|ИЗ
	|	КодыТоваров КАК КодыТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваров.Партия = ШтрихкодыНоменклатуры.Партия
	|			И КодыТоваров.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения
	|			//ВесыСПечатьюЭтикеток И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваров.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И КодыТоваров.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код");
	
	Если Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"//ВесыСПечатьюЭтикеток","");
		Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(Объект.ПрефиксВесовогоТовара));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидЦен",         ВидЦен);
	Запрос.УстановитьПараметр("ТекущаяДата",     КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТаблицаЗначений", Товары);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",          Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                   Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",          Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",        Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Партия",                Новый ОписаниеТипов("СправочникСсылка.ПартииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",      Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",          Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное",    Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",              Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Цена",                  Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",               Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Новый",                 Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИзмененаПользователем", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИзмененаАвтоматически", Новый ОписаниеТипов("Булево"));
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
				НоваяСтрока.Используется          = Выборка.Используется;
				НоваяСтрока.Код                   = Выборка.Код;
				НоваяСтрока.Номенклатура          = Выборка.Номенклатура;
				НоваяСтрока.Характеристика        = Выборка.Характеристика;
				НоваяСтрока.Партия                = Выборка.Партия;
				НоваяСтрока.ЕдиницаИзмерения              = Выборка.ЕдиницаИзмерения;
				НоваяСтрока.Наименование          = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
						Выборка.НоменклатураНаименование,
						Выборка.ХарактеристикаНаименование)
					+ ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияНаименование),
						", (" + Выборка.ЕдиницаИзмеренияНаименование + ")",
						""
				);
				НоваяСтрока.НаименованиеПолное          =  УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
						Выборка.НоменклатураНаименованиеПолное,
						Выборка.ХарактеристикаНаименованиеПолное)
					+ ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияНаименование),
						", (" + Выборка.ЕдиницаИзмеренияНаименование + ")",
						""
				);
				НоваяСтрока.Цена                  = Выборка.Цена;
				НоваяСтрока.Штрихкод              = СокрЛП(Выборка.Штрихкод);
				НоваяСтрока.Весовой               = Выборка.Весовой;
				НоваяСтрока.Новый                 = Выборка.Новый;
				НоваяСтрока.ИзмененаПользователем = Выборка.ИзмененаПользователем;
				НоваяСтрока.ИзмененаАвтоматически = Выборка.ИзмененаАвтоматически;
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + СокрЛП(Выборка.Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаТоваров.Сортировать("Код");
	Возврат ТаблицаТоваров;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьКодыИзРегистра(ТекущийОбъект)
	
	Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ПолучитьТаблицуТоваровДляПравила(ТекущийОбъект.Ссылка, ТекущийОбъект.СтруктурнаяЕдиница.РозничныйВидЦен);
	
	Если Таблица <> Неопределено Тогда
		Товары.Загрузить(Таблица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТоваров(КодыТоваров, ПравилоОбмена, ВидЦен, АдресНаНастройки)
	
	Если Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ККМOffline
		ИЛИ Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.WebСервисОборудование Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Компоновщик.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНаНастройки));
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Заполнение структуры отчета и выбранных полей.
	Компоновщик.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	ВыбранноеПоле.Использование = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Характеристика");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Партия");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("ЕдиницаИзмерения");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("СоответствуетОтбору");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Код");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Используется");
	ВыбранноеПоле.Использование = Истина;
	
	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Дата");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТекущаяДата();
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦен");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ВидЦен;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПравилоОбмена");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЕдиницаИзмеренияВеса");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Объект.ЕдиницаИзмеренияВеса;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ФорматШтрихкода");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(Объект.ПрефиксВесовогоТовара);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ПравилоОбмена КАК ПравилоОбмена,
	|	КодыТоваров.Код КАК Код,
	|	КодыТоваров.Используется КАК Используется,
	|	КодыТоваров.Номенклатура КАК Номенклатура,
	|	КодыТоваров.Характеристика КАК Характеристика,
	|	КодыТоваров.Партия КАК Партия,
	|	КодыТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ КодыТоваров
	|ИЗ
	|	&ТаблицаЗначений КАК КодыТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Партия,
	|	ЕдиницаИзмерения");
	Запрос.Текст = Запрос.Текст + ";" + СтрЗаменить(МакетКомпоновки.НаборыДанных.НаборДанных.Запрос, "РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline", "КодыТоваров");
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	ТаблицаКодыТоваров = КодыТоваров.Выгрузить();
	ТаблицаКодыТоваров.Индексы.Добавить("Код");
	
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаКодыТоваров);
	
	Если ТаблицаКодыТоваров.Количество() > 0 Тогда
		Код = ТаблицаКодыТоваров[ТаблицаКодыТоваров.Количество() - 1].Код + 1;
	Иначе
		Код = 1;
	КонецЕсли;
	
	СвободныеКоды = Новый ТаблицаЗначений;
	СвободныеКоды.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТЧ Из Товары.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())) Цикл
		НоваяСтрока = СвободныеКоды.Добавить();
		НоваяСтрока.Код = СтрокаТЧ.Код;
	КонецЦикла;
	
	Выборка =  Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СоответствуетОтбору Тогда
			Если Не ЗначениеЗаполнено(Выборка.Код) Тогда
				Если СвободныеКоды.Количество() = 0 Тогда
					ЗаписатьКодВТаблице(ТаблицаКодыТоваров, Выборка, Код, Истина);
					Код = Код + 1;
				Иначе
					ЗаписатьКодВТаблице(ТаблицаКодыТоваров, Выборка, СвободныеКоды[0].Код, Истина);
					СвободныеКоды.Удалить(0);
				КонецЕсли;
			Иначе
				ЗаписатьКодВТаблице(ТаблицаКодыТоваров, Выборка, Выборка.Код, Истина);
			КонецЕсли;
		Иначе
			ЗаписатьКодВТаблице(ТаблицаКодыТоваров, Выборка, Выборка.Код, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	КодыТоваров.Загрузить(ТаблицаТоваров(ТаблицаКодыТоваров, ВидЦен));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровНаСервереПервоеОткрытие()
	
	ПодключаемоеОборудованиеOfflineВызовСервера.ОбновитьКодыТоваров(Объект.Ссылка);
	ЗагрузитьКодыИзРегистра(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровНаСервереПовторноеОткрытие()
	
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Новый, ИзмененаПользователем", Истина, Ложь));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			// Данные в строке уже очищены
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура   = Неопределено;
		СтрокаТЧ.Характеристика = Неопределено;
		СтрокаТЧ.Партия         = Неопределено;
		СтрокаТЧ.ЕдиницаИзмерения = Неопределено;
		СтрокаТЧ.Используется   = Неопределено;
		СтрокаТЧ.Наименование   = Неопределено;
		СтрокаТЧ.Весовой        = Неопределено;
		СтрокаТЧ.Штрихкод       = Неопределено;
		СтрокаТЧ.Цена           = Неопределено;
		
	КонецЦикла;
	
	// Удаление не записанных свободных кодов с конца таблицы.
	ИндексПоследнейСтроки = Товары.Количество() - 1;
	Для НомерСтроки = -ИндексПоследнейСтроки По 0 Цикл
		СтрокаТЧ = Товары[-НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) И СтрокаТЧ.Новый Тогда
			Товары.Удалить(-НомерСтроки);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьТаблицуТоваров(Товары, Объект.Ссылка, Объект.СтруктурнаяЕдиница.РозничныйВидЦен, АдресКомпоновщикаНастроекВоВременномХранилище());
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровНаСервере()
	
	Если Не ДанныеОТоварахПрочитаны Тогда
		// Первое открытие списка товаров
		ОбновитьСписокТоваровНаСервереПервоеОткрытие();
		
		Если ОтборИзменен ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОбновитьСписокТоваровНаСервереПовторноеОткрытие();
		КонецЕсли;
		
		ДанныеОТоварахПрочитаны = Истина;
	Иначе
		ОбновитьСписокТоваровНаСервереПовторноеОткрытие();
	КонецЕсли;
	
	ОтборИзменен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСтроки(Строка)
	
	СтрокаТЧ = Новый Структура;
	СтрокаТЧ.Вставить("Используется");
	СтрокаТЧ.Вставить("Номенклатура");
	СтрокаТЧ.Вставить("Характеристика");
	СтрокаТЧ.Вставить("Партия");
	СтрокаТЧ.Вставить("ЕдиницаИзмерения");
	СтрокаТЧ.Вставить("Наименование");
	СтрокаТЧ.Вставить("Цена");
	СтрокаТЧ.Вставить("Штрихкод");
	СтрокаТЧ.Вставить("Весовой");
	
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
	
	Возврат СтрокаТЧ;
	
КонецФункции

&НаСервере
Процедура ПрименитьИзмененияНаСервере(ТекущийОбъект)
	
	НачатьТранзакцию();
	
	// Запись измененных пользователем кодов товаров
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("ИзмененаПользователем, Новый", Истина, Ложь));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
		МенеджерЗаписи.ПравилоОбмена = ТекущийОбъект.Ссылка;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// Запись автоматически добавленных строк
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("ИзмененаАвтоматически, ИзмененаПользователем, Новый", Истина, Ложь, Ложь));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
		МенеджерЗаписи.ПравилоОбмена = ТекущийОбъект.Ссылка;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// Запись новых кодов товаров
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Новый", Истина));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
		МенеджерЗаписи.ПравилоОбмена = ТекущийОбъект.Ссылка;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ИзмененаПользователем = Ложь;
		СтрокаТЧ.ИзмененаАвтоматически = Ложь;
		СтрокаТЧ.Новый                 = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТовараСКодом(Код, Идентификатор)
	
	ВозвращаемоеЗначение = Неопределено;
	
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Код", Код));
	Если НайденныеСтроки.Количество() > 1 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ПолучитьИдентификатор() <> Идентификатор Тогда
				ВозвращаемоеЗначение = НайденнаяСтрока.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеКодаТовараНаСервере(ТекущийКод)
	
	КоличествоТоваров = Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		
		МаксимальныйКодВТаблице = Товары[КоличествоТоваров-1].Код;
		Если МаксимальныйКодВТаблице = ТекущийКод Тогда
			Если КоличествоТоваров > 1 Тогда
				МаксимальныйКодВТаблице = Товары[КоличествоТоваров-2].Код;
			КонецЕсли;
		КонецЕсли;
		
		Если МаксимальныйКодВТаблице > СтарыйКод Тогда
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Код = СтарыйКод;
			НоваяСтрока.ИзмененаПользователем = Истина;
			
		КонецЕсли;
		
		Разница = ТекущийКод - МаксимальныйКодВТаблице;
		Пока Разница > 1 Цикл
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Новый = Истина;
			НоваяСтрока.ИзмененаПользователем = Истина;
			
			МаксимальныйКодВТаблице = МаксимальныйКодВТаблице + 1;
			НоваяСтрока.Код = МаксимальныйКодВТаблице;
			Разница = Разница - 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Товары.Сортировать("Код");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвободныеКодыТоваровНаСервере()
	
	НачатьТранзакцию();
	
	МассивСтрокДляУдаления = Новый Массив;
	
	// Удаление свободных кодов товаров из конца списка.
	ИндексПоследнейСтроки = Товары.Количество() - 1;
	Для НомерСтроки = -ИндексПоследнейСтроки По 0 Цикл
		СтрокаТЧ = Товары[-НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			
			МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
			МенеджерЗаписи.ПравилоОбмена = Объект.Ссылка;
			МенеджерЗаписи.Удалить();
			
			МассивСтрокДляУдаления.Добавить(СтрокаТЧ);
			
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Для Каждого СтрокаТЧ Из МассивСтрокДляУдаления Цикл
		Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
