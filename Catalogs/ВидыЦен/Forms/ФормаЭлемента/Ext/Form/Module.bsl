
&НаКлиенте
Перем ФормаДлительнойОперации;

#Область СлужебныеОбработчики

&НаКлиенте
// Процедура управляет видимостью элементов.
//
Процедура УстановитьВидимостьЭлементов()
	
	ИмяСтраницы = "СтраницаРасчетРучной";
	Если Объект.ТипВидаЦен = КэшЗначений.ДинамическийПроцент Тогда
		
		ИмяСтраницы = "СтраницаРасчетДинамический";
		
	ИначеЕсли Объект.ТипВидаЦен = КэшЗначений.ДинамическийФормула Тогда
		
		ИмяСтраницы = "СтраницаРасчетФормула";
		
	КонецЕсли;
	
	Элементы.СтраницыРасчетов.ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура получает детальные данные из базовой цены
// используется только если текущий элемент имеет 
// динамический вид
//
Функция ПолучитьДанныеБазовойЦены(БазовыйВидЦен)
	
	Возврат Новый Структура("ВалютаЦены, ЦенаВключаетНДС", 
			?(ЗначениеЗаполнено(БазовыйВидЦен), БазовыйВидЦен.ВалютаЦены, Справочники.Валюты.ПустаяСсылка()), 
			?(ЗначениеЗаполнено(БазовыйВидЦен), БазовыйВидЦен.ЦенаВключаетНДС, Ложь));
	
КонецФункции // ПолучитьДанныеБазовойЦены()

&НаСервере
// Процедура создает новый идентификатор вида цены.
// В последствии данный идентификатор может использоваться в формулах.
//
Процедура СформироватьНовыйИдентификатор()
	
	ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(Объект.ИдентификаторФормул, Объект.Наименование);
	
КонецПроцедуры // СформироватьНовыйИдентификатор()

&НаКлиенте
// Процедура открывает конструктор формулы
//
Процедура ОткрытьКонструкторФормулы()
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормулы = Новый Структура("Ссылка, Формула", Объект.Ссылка, Объект.Формула);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыЦен.Форма.КонструкторФормул", ПараметрыФормулы, Элементы.Формула,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОткрытьКонструкторФормулы()

&НаСервере
Процедура УдалитьЗаписиРегистраЦенПоТекущемуЭлементу(ВидЦен)
	
	ЦеныНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	ЦеныНоменклатуры.Отбор.ВидЦен.Установить(ВидЦен, Истина);
	ЦеныНоменклатуры.Очистить();
	ЦеныНоменклатуры.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетЦенНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ПараметрыОткрытия = Новый Структура("ВидЦен", Объект.Ссылка);
		
		ОткрытьФорму("Обработка.Ценообразование.Форма.РасчетныеЦены", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьПример(ЧисловоеЗначение, ПорядокОкругления, ОкруглятьВБольшуюСторону, ФорматнаяСтрока)
	
	Возврат Формат(УправлениеНебольшойФирмойСервер.ОкруглитьЦену(ЧисловоеЗначение, ПорядокОкругления, ОкруглятьВБольшуюСторону), ФорматнаяСтрока);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтсутствуютЗаписиЦен(ТекущаяСсылка)
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("Выбрать Первые 1 РегистрСведений.ЦеныНоменклатуры.Номенклатура Где РегистрСведений.ЦеныНоменклатуры.ВидЦен = &Сcылка");
	Запрос.УстановитьПараметр("Сcылка", ТекущаяСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания()
	
	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	
	ПоказатьПредупреждение(,Нстр("ru ='Цены номенклатуры.
	|Загрузка данных завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания()
	
	Если ПараметрыДлительнойОперации.ЗаданиеВыполнено = Истина Тогда
		
		ПослеВыполненияФоновогоЗадания();
		
	Иначе
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыДлительнойОперации.ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеВыполнено(Прогресс)
	
	Попытка
		
		ПараметрыДлительнойОперации.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ПараметрыДлительнойОперации.ИдентификаторЗадания);
		
		Если НЕ ПараметрыДлительнойОперации.ЗаданиеВыполнено Тогда
			
			Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ПараметрыДлительнойОперации.ИдентификаторЗадания);
			
		КонецЕсли;
		
	Исключение
		
		ПараметрыДлительнойОперации.ЗаданиеВыполнено = Истина;
		ВызватьИсключение Нстр("ru ='Ошибка'") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Перем Прогресс;
	
	ФоновоеЗаданиеВыполнено(Прогресс);
	
	Если ПараметрыДлительнойОперации.ЗаданиеВыполнено = Истина Тогда
		
		ПослеВыполненияФоновогоЗадания();
		
	Иначе
		
		Если ФормаДлительнойОперации = Неопределено Тогда
			
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ПараметрыДлительнойОперации.ИдентификаторЗадания);
			
		ИначеЕсли ТипЗнч(Прогресс) = Тип("Структура")
			И Прогресс.Свойство("Текст") Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Пожалуйста, подождите...'"));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(Прогресс.Текст);
			
			ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = СтрСоединить(МассивСтрок);
			
		КонецЕсли;
		
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыДлительнойОперации.ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыДлительнойОперации.ПараметрыОбработчика.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.РегистрыСведений.ЦеныНоменклатуры, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
		
		Объект.ВалютаЦены = Константы.НациональнаяВалюта.Получить();
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость", НЕ Объект.ЦеныАктуальны И ЗначениеЗаполнено(Объект.Ссылка));
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("Статический", Перечисления.ТипыВидовЦен.Статический);
	КэшЗначений.Вставить("ДинамическийПроцент", Перечисления.ТипыВидовЦен.ДинамическийПроцент);
	КэшЗначений.Вставить("ДинамическийФормула", Перечисления.ТипыВидовЦен.ДинамическийФормула);
	КэшЗначений.Вставить("РучнаяКорректировкаФлага", Ложь);
	
	Пример = 987654.321;
	Если ПустаяСтрока(Объект.ФорматЦены) Тогда
		
		Объект.ФорматЦены = "ЧЦ='15'; ЧДЦ='2'";
		
	КонецЕсли;
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПрайсЛисты, "ВидЦен", Объект.Ссылка, Истина);
	
	// Если цены не рассчитываются, покажим страницу, что бы пользователь мог обнудлить счетчик ошибок очереди расчета динамических цен
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаВидимостьИдентификатора",	"Пометка",		Объект.КоличествоПопытокСлужебный = 2);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаСлужебные",				"Видимость",	Объект.КоличествоПопытокСлужебный = 2);
	
	ВидимостьКнопкиРасчетаЦен = НЕ Объект.РассчитыватьАвтоматически И (Объект.ТипВидаЦен = КэшЗначений.ДинамическийПроцент ИЛИ Объект.ТипВидаЦен = КэшЗначений.ДинамическийФормула);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРассчитатьЦены",			"Видимость",	ВидимостьКнопкиРасчетаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СпособРасчетаЦены",				"Доступность",	ОтсутствуютЗаписиЦен(Объект.Ссылка));
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	
	ЭтаФорма.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ЗаданиеВыполнено", Неопределено);
	ПараметрыДлительнойОперации.Вставить("ПараметрыОбработчика", Неопределено);
	ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", "");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура обработчик события ПередЗаписьюНаСервере
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Перем Ошибки;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ Склады.Ссылка КАК Склад ИЗ Справочник.СтруктурныеЕдиницы КАК Склады ГДЕ Склады.РозничныйВидЦен = &РозничныйВидЦен");
		Запрос.УстановитьПараметр("РозничныйВидЦен", ТекущийОбъект.Ссылка);
		РезультатВыполненияЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатВыполненияЗапроса.Пустой()
			И НЕ ТекущийОбъект.ВалютаЦены = Константы.НациональнаяВалюта.Получить() Тогда
			
			ТекстСообщения = НСтр("ru = 'Текущий вид цен используется в розничных структурных единицах, по этому для него можно использовать только национальную валюту.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.ВалютаЦены", ТекстСообщения, "");
			
		КонецЕсли;
		
		Если ТекущийОбъект.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
			
			ЦенообразованиеФормулыСервер.ПроверитьФормулу(Ошибки, ТекущийОбъект.Формула);
			
		КонецЕсли;
		
		Если Ошибки <> Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаКлиенте
// Процедура обработчик события ПередЗаписью.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СправочникВидЦенЗапись");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если НЕ Объект.ЦеныАктуальны
		И Объект.ТипВидаЦен = КэшЗначений.Статический Тогда
		
		Объект.ЦеныАктуальны = Истина;
		
	КонецЕсли;
	
КонецПроцедуры //ПередЗаписью()

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура РедактироватьФормулу(Команда)
	
	Объект.ЦеныАктуальны = Ложь;
	
	ОткрытьКонструкторФормулы();
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебныеРеквизиты(Команда)
	
	Элементы.ФормаВидимостьИдентификатора.Пометка = НЕ Элементы.ФормаВидимостьИдентификатора.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаСлужебные", "Видимость", Элементы.ФормаВидимостьИдентификатора.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЦены(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru ='Внимание!
		|Все цены по этой колонке прайс-листа будут удалены. 
		|Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветВопросаПроУдалениеЦен", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстСообщения = НСтр("ru ='Операция имеет смыл только для записанных объектов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветВопросаПроУдалениеЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		УдалитьЗаписиРегистраЦенПоТекущемуЭлементу(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦены(Команда)
	Перем ОписаниеОшибки;
	
	Если Модифицированность = Истина Тогда
		
		ТекстВопроса = НСтр("ru ='Для расчета цен необходимо записать текущий объект.
		|Записать и продолжить?'");
		
		ДополнительныеПараметры = Новый Структура("ОписаниеОшибки", ОписаниеОшибки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОЗаписиВидаЦен", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьРасчетЦенНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОЗаписиВидаЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьРасчетЦенНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматЦеныНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Конструктор = Новый КонструкторФорматнойСтроки(Объект.ФорматЦены);
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Число");
	Конструктор.Показать(Новый ОписаниеОповещения("ФорматированиеЦеныЗавершение",ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматированиеЦеныЗавершение(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ФорматЦены = ?(ПустаяСтрока(Результат), "ЧЦ='15'; ЧДЦ='2'", Результат);
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	Объект.ЦеныАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентПриИзменении(Элемент)
	
	Объект.ЦеныАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаЦены1ПриИзменении(Элемент)
	
	Объект.ЦеныАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СпособРасчетаЦены.
//
Процедура СпособРасчетаЦеныПриИзменении(Элемент)
	
	Объект.РассчитыватьАвтоматически = (Объект.ТипВидаЦен <> КэшЗначений.Статический);
	Объект.ЦеныАктуальны = (Объект.ТипВидаЦен = КэшЗначений.Статический);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Пример.
//
Процедура ПримерПриИзменении(Элемент)
	
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОкругленияПриИзменении(Элемент)
	
	Объект.ЦеныАктуальны = Ложь;
	
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьВБольшуюСторонуПриИзменении(Элемент)
	
	Объект.ЦеныАктуальны = Ложь;
	
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ПриИзменении элемента формы "БазовыйВидЦен"
//
// Имеет смысл только для динамических типов цен, т.к. из базовых берется валюта и 
// значение параметра ЦенаВключаетНДС
//
Процедура БазовыйВидЦенПриИзменении(Элемент)
	
	Объект.ЦеныАктуальны = Ложь;
	
	ДанныеБазовойЦены 		= ПолучитьДанныеБазовойЦены(Объект.БазовыйВидЦен);
	
	Объект.ВалютаЦены 		= ДанныеБазовойЦены.ВалютаЦены;
	Объект.ЦенаВключаетНДС 	= ДанныеБазовойЦены.ЦенаВключаетНДС;
	
КонецПроцедуры // БазовыйВидЦенПриИзменении()

&НаКлиенте
Процедура ФормулаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКонструкторФормулы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Результат = КодВозвратаДиалога.Да Тогда
		
		Результат.Свойство("Формула", Объект.Формула);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьНовыйИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьАвтоматическиПриИзменении(Элемент)
	
	ВидимостьКнопкиРасчетаЦен = НЕ Объект.РассчитыватьАвтоматически И (Объект.ТипВидаЦен <> КэшЗначений.Статический);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРассчитатьЦены", "Видимость", ВидимостьКнопкиРасчетаЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПрайсЛистыСформировать Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ФормированиеПрайсЛистов.Форма", Новый Структура("ПрайсЛист", ВыбраннаяСтрока), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныАктуальныПриИзменении(Элемент)
	
	КэшЗначений.РучнаяКорректировкаФлага = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьЦеныИзВнешнегоИсточника(Команда)
	
	Если Объект.ТипВидаЦен <> КэшЗначений.Статический Тогда
		
		ТекстСообщения = НСтр("ru ='Загрузка предназначена только для статических видов цен.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения, 15, НСтр("ru ='Загрузить цены из внешнего источника'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		НастройкиЗагрузкиДанных.Вставить("ОбщееЗначение", Объект.Ссылка);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ИмяМетода = "РегистрыСведений.ЦеныНоменклатуры.ОбработатьПодготовленныеДанные";
	Описание = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ИмяМетода, ПараметрыВызоваСервера, Описание);
	ЗаполнитьЗначенияСвойств(ПараметрыДлительнойОперации, РезультатФоновогоЗадания);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
