
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьНастройкиФормы();
	
	ДатаГрафика = ТекущаяДата();
	
	РесурсыПоГрафику.Параметры.УстановитьЗначениеПараметра("ВремяНачала", НачалоМесяца(ДатаГрафика));
	РесурсыПоГрафику.Параметры.УстановитьЗначениеПараметра("ВремяОкончания", КонецМесяца(ДатаГрафика));
	РесурсыПоГрафику.Параметры.УстановитьЗначениеПараметра("ГрафикРаботы", Неопределено);
	
	ЦветЗанятогоПериода = ЦветаСтиля.РабочееВремяЗанятоПолностью;
	ЦветСвободногоПериода = ЦветаСтиля.РабочееВремяСвободноДоступно;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеПериода();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("РасписаниеПоГрафикуПериодДеньПометка", Переключатель = "День");
	СтруктураНастроек.Вставить("РасписаниеПоГрафикуПериодГодПометка", Переключатель = "Год");
	
	СтруктураНастроек.Вставить("КратностьДня", КратностьДня);
	
	СохранитьНастройкиФормы(СтруктураНастроек);
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события НачалоВыбора поля ввода ПредставлениеПериод.
//
&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ДатаКалендаря", ДатаГрафика);
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение",ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры // ПредставлениеПериодаНачалоВыбора()

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(Результат,Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДатаГрафика = Результат;
		ЗаполнитьПредставлениеПериода();
		
	КонецЕсли;

КонецПроцедуры // ПредставлениеПериодаНачалоВыбора()

// Процедура - обработчик события Выбор поля ввода РасписаниеПоГрафику.
//
&НаКлиенте
Процедура РасписаниеПоГрафикуВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Переключатель = "День"
	 ИЛИ Область.Лево = 1
	 ИЛИ Область.Низ = 1
	 ИЛИ Область.Низ > 13
	 ИЛИ Область.Лево - 1 > КоличествоДнейВМесяцеНаКлиенте(Область.Низ - 1, Год(ДатаГрафика)) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаГрафика = Дата(Год(ДатаГрафика), Область.Низ - 1, Область.Лево - 1);
	
	Переключатель = "День";
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // РасписаниеПоГрафикуВыбор()

// Процедура - обработчик события ПриАктивизацииСтроки списка Список.
//
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Элементы.ГруппаСтраницы.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаСтраницы.Доступность = Истина;
	КонецЕсли;
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

// Процедура - обработчик события НачалоВыбора поля Представление списка РесурсыРаботающиеПоГрафику.
//
&НаКлиенте
Процедура РесурсыРаботающиеПоГрафикуПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ДатаКалендаря", ДатаГрафика);
	Оповещение = Новый ОписаниеОповещения("РесурсыРаботающиеПоГрафикуПредставлениеПериодаНачалоВыбораЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры // РесурсыРаботающиеПоГрафикуПредставлениеПериодаНачалоВыбора()

&НаКлиенте
Процедура РесурсыРаботающиеПоГрафикуПредставлениеПериодаНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДатаГрафика = Результат;
		ЗаполнитьПредставлениеПериода();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура раскрашивает список.
//
&НаСервере
Процедура РаскраситьСписок()
	
	// Раскраска списка
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ВыборкаГрафикиРаботы = Справочники.ГрафикиРаботы.Выбрать();
	Пока ВыборкаГрафикиРаботы.Следующий() Цикл
		
		ЦветФона = ВыборкаГрафикиРаботы.Цвет.Получить();
		Если ТипЗнч(ЦветФона) <> Тип("Цвет") Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаГрафикиРаботы.Ссылка;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", " ");
		
		ПолеОтбора = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОтбора.Использование = Истина;
		ПолеОтбора.Поле = Новый ПолеКомпоновкиДанных("Маркер");
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = "По состоянию события " + ВыборкаГрафикиРаботы.Наименование;
	
	КонецЦикла;
	
КонецПроцедуры // РаскраситьСписок()

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРесурсыРаботающиеПоГрафику Тогда
		ВывестиРасписаниеПоГрафику(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПриИзменении(Элемент)
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик нажатия кнопки РасписаниеПоГрафикуУвеличитьПериод.
//
&НаКлиенте
Процедура РасписаниеПоГрафикуУвеличитьПериод(Команда)
	
	Если Переключатель = "Год" Тогда
		ДатаГрафика = ДобавитьМесяц(ДатаГрафика, 12);
	ИначеЕсли Переключатель = "День" Тогда
		ДатаГрафика = ДатаГрафика + 86400;
	КонецЕсли;
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // РасписаниеПоГрафикуУвеличитьПериод()

// Процедура - обработчик нажатия кнопки РасписаниеПоГрафикуУменьшитьПериод.
//
&НаКлиенте
Процедура РасписаниеПоГрафикуУменьшитьПериод(Команда)
	
	Если Переключатель = "Год" Тогда
		ДатаГрафика = ДобавитьМесяц(ДатаГрафика, -12);
	ИначеЕсли Переключатель = "День" Тогда
		ДатаГрафика = ДатаГрафика - 86400;
	КонецЕсли;
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // РасписаниеПоГрафикуУменьшитьПериод()

// Процедура - обработчик нажатия кнопки РасписаниеПоГрафикуРедактировать.
//
&НаКлиенте
Процедура РасписаниеПоГрафикуРедактировать(Команда)
	
	ВыделеленнаяОбласть = РасписаниеПоГрафику.ВыделенныеОбласти[0];
	
	Если Переключатель = "День"
	 ИЛИ ВыделеленнаяОбласть.Лево = 1
	 ИЛИ ВыделеленнаяОбласть.Низ = 1
	 ИЛИ ВыделеленнаяОбласть.Низ > 13
	 ИЛИ ВыделеленнаяОбласть.Лево - 1 > КоличествоДнейВМесяцеНаКлиенте(ВыделеленнаяОбласть.Низ - 1, Год(ДатаГрафика)) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаГрафика = Дата(Год(ДатаГрафика), ВыделеленнаяОбласть.Низ - 1, ВыделеленнаяОбласть.Лево - 1);
	
	Переключатель = "День";
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // РасписаниеПоГрафикуРедактировать()

// Процедура - обработчик нажатия кнопки ОтметитьВыбранноеКакРабочее.
//
&НаКлиенте
Процедура ОтметитьВыбранноеКакРабочее(Команда)
	
	УстановитьЦветФонаВыбраннымОбластям(ЦветЗанятогоПериода);
	ЗаписатьГрафикВРегистр();
	
КонецПроцедуры // ОтметитьВыбранноеКакРабочее()

// Процедура - обработчик нажатия кнопки ОтметитьВыбранноеКакНеРабочее.
//
&НаКлиенте
Процедура ОтметитьВыбранноеКакНеРабочее(Команда)
	
	УстановитьЦветФонаВыбраннымОбластям(ЦветСвободногоПериода);
	ЗаписатьГрафикВРегистр();
	
КонецПроцедуры // ОтметитьВыбранноеКакНеРабочее()

// Процедура - обработчик нажатия кнопки РесурсыРаботающиеПоГрафикуУменьшитьПериод.
//
&НаКлиенте
Процедура РесурсыРаботающиеПоГрафикуУменьшитьПериод(Команда)
	
	ДатаГрафика = ДобавитьМесяц(ДатаГрафика, -1);
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // РесурсыРаботающиеПоГрафикуУменьшитьПериод()

// Процедура - обработчик нажатия кнопки РесурсыРаботающиеПоГрафикуУвеличитьПериод.
//
&НаКлиенте
Процедура РесурсыРаботающиеПоГрафикуУвеличитьПериод(Команда)
	
	ДатаГрафика = ДобавитьМесяц(ДатаГрафика, 1);
	
	ЗаполнитьПредставлениеПериода();
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // РесурсыРаботающиеПоГрафикуУвеличитьПериод()

// Процедура - обработчик команды Настройки.
//
&НаКлиенте
Процедура Настройки(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КратностьДня", КратностьДня);
	Оповещение = Новый ОписаниеОповещения("НастройкиЗавершение",ЭтаФорма);
	ОткрытьФорму("Справочник.ГрафикиРаботы.Форма.Настройка", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры // Настройки()

&НаКлиенте
Процедура НастройкиЗавершение(СтруктураВозврата,Параметры) Экспорт

	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") И СтруктураВозврата.БылиВнесеныИзменения Тогда
		КратностьДня = СтруктураВозврата.КратностьДня;
		ВывестиРасписаниеПоГрафику();
	КонецЕсли;

КонецПроцедуры // НастройкиЗавершение()

// Процедура - обработчик команды РесурсыПоГрафикуСоздать.
//
&НаКлиенте
Процедура РесурсыПоГрафикуСоздать(Команда)
	
	ОткрытьФорму("РегистрСведений.ГрафикиРаботыРесурсов.ФормаЗаписи", Новый Структура("ГрафикРаботы", Элементы.Список.ТекущаяСтрока));
	
КонецПроцедуры // РесурсыПоГрафикуСоздать()

// Процедура - обработчик команды РасписаниеПоГрафикуУдалить.
//
&НаКлиенте
Процедура РасписаниеПоГрафикуУдалить(Команда)
	
	ВыделеленнаяОбласть = РасписаниеПоГрафику.ВыделенныеОбласти[0];
	
	Если Переключатель = "День"
	 ИЛИ ВыделеленнаяОбласть.Лево = 1
	 ИЛИ ВыделеленнаяОбласть.Низ = 1
	 ИЛИ ВыделеленнаяОбласть.Низ > 13
	 ИЛИ ВыделеленнаяОбласть.Лево - 1 > КоличествоДнейВМесяцеНаКлиенте(ВыделеленнаяОбласть.Низ - 1, Год(ДатаГрафика)) Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикРаботы = Элементы.Список.ТекущаяСтрока;
	ДеньГрафика = Дата(Год(ДатаГрафика), ВыделеленнаяОбласть.Низ - 1, ВыделеленнаяОбласть.Лево - 1);
	
	ОчиститьДеньГрафикаВРегистре(ГрафикРаботы, ДеньГрафика);
	
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // РасписаниеПоГрафикуУдалить()

// Процедура - обработчик команды ЗаполнитьПоШаблону.
//
&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ВыделеленнаяОбласть = РасписаниеПоГрафику.ВыделенныеОбласти[0];
	График = Элементы.Список.ТекущаяСтрока;
	
	Если Переключатель = "День"
	 ИЛИ ВыделеленнаяОбласть.Лево = 1
	 ИЛИ ВыделеленнаяОбласть.Низ = 1
	 ИЛИ ВыделеленнаяОбласть.Низ > 13
	 ИЛИ ВыделеленнаяОбласть.Лево - 1 > КоличествоДнейВМесяцеНаКлиенте(ВыделеленнаяОбласть.Низ - 1, Год(ДатаГрафика)) Тогда
		ЗаполнитьПоШаблонуНаСервере(График, НачалоГода(ДатаГрафика));
	Иначе
		ДеньГрафика = Дата(Год(ДатаГрафика), ВыделеленнаяОбласть.Низ - 1, ВыделеленнаяОбласть.Лево - 1);
		ЗаполнитьПоШаблонуНаСервере(График, ДеньГрафика);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоШаблону()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция вычисляет количество дней в месяце на сервере.
//
&НаСервере
Функция КоличествоДнейВМесяцеНаСервере(Месяц, Год)
	
	ДатаМесяца = Дата(Год, Месяц, 1);
	ДнейВМесяце = День(КонецМесяца(ДатаМесяца));
	Возврат ДнейВМесяце;
	
КонецФункции // КоличествоДнейВМесяцеНаСервере()

// Функция вычисляет количество дней в месяце на клиенте.
//
&НаКлиенте
Функция КоличествоДнейВМесяцеНаКлиенте(Месяц, Год)
	
	ДатаМесяца = Дата(Год, Месяц, 1);
	ДнейВМесяце = День(КонецМесяца(ДатаМесяца));
	Возврат ДнейВМесяце;
	
КонецФункции // КоличествоДнейВМесяцеНаКлиенте()

// Процедура устанавливает видимость и доступность.
//
&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Если Переключатель = "Год" Тогда
		Элементы.РасписаниеПоГрафикуПанельДень.Видимость = Ложь;
		Элементы.РасписаниеПоГрафикуПанельГод.Видимость = Истина;
	ИначеЕсли Переключатель = "День" Тогда
		Элементы.РасписаниеПоГрафикуПанельДень.Видимость = Истина;
		Элементы.РасписаниеПоГрафикуПанельГод.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия.Получить() Тогда
		Элементы.СтраницаРесурсыРаботающиеПоГрафику.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьИДоступность()

// Процедура выводит распсиние по графику.
//
&НаСервере
Процедура ВывестиРасписаниеПоГрафику(ВывестиТолькоРесурсыПоГрафику = Ложь)
	
	РесурсыПоГрафику.Параметры.УстановитьЗначениеПараметра("ВремяНачала", НачалоМесяца(ДатаГрафика));
	РесурсыПоГрафику.Параметры.УстановитьЗначениеПараметра("ВремяОкончания", КонецМесяца(ДатаГрафика));
	РесурсыПоГрафику.Параметры.УстановитьЗначениеПараметра("ГрафикРаботы", Элементы.Список.ТекущаяСтрока);
	
	Если ВывестиТолькоРесурсыПоГрафику Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
	Если Переключатель = "Год" Тогда
		ВывестиРасписаниеПоГрафикуГод();
	ИначеЕсли Переключатель = "День" Тогда
		ВывестиРасписаниеПоГрафикуДень();
	КонецЕсли;
	
	РаскраситьСписок();
	
КонецПроцедуры // ВывестиРасписаниеПоГрафику()

// Процедура выводит расписание по графику вида Год.
//
&НаСервере
Процедура ВывестиРасписаниеПоГрафикуГод()
	
	РасписаниеПоГрафику.Очистить();
	
	МакетРасписаниеПоГрафику = Справочники.ГрафикиРаботы.ПолучитьМакет("РасписаниеПоГрафикуГод");
	ОбластьМакета = МакетРасписаниеПоГрафику.ПолучитьОбласть("Шапка");
	РасписаниеПоГрафику.Вывести(ОбластьМакета);
	ОбластьМакета = МакетРасписаниеПоГрафику.ПолучитьОбласть("Календарь");
	РасписаниеПоГрафику.Вывести(ОбластьМакета);
	
	График = Элементы.Список.ТекущаяСтрока;
	БазовыйКалендарь = ?(ЗначениеЗаполнено(График), График.Календарь, Неопределено);
	ДанныеКалендаря = УправлениеНебольшойФирмойСервер.ПрочитатьДанныеГрафикаИзРегистра(БазовыйКалендарь, Год(ДатаГрафика));
	
	Для НомерМесяца = 1 По 12 Цикл
		КоличествоДней = КоличествоДнейВМесяцеНаСервере(НомерМесяца, Год(ДатаГрафика));
		Для НомерДня = 1 По 31 Цикл
			Область = РасписаниеПоГрафику.Область("R" + Строка(НомерМесяца + 1) + "C" + Строка(НомерДня + 1));
			Область.Текст = "";
			Если НомерДня > КоличествоДней Тогда
				Область.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			Иначе
				Если ДанныеКалендаря.Количество() = 0 Тогда
					Если ДеньНедели(Дата(Год(ДатаГрафика), НомерМесяца, НомерДня, 0, 0, 0)) = 6
					 ИЛИ ДеньНедели(Дата(Год(ДатаГрафика), НомерМесяца, НомерДня, 0, 0, 0)) = 7 Тогда
						Область.ЦветФона = ЦветаСтиля.НерабочееВремяВыходной;
					Иначе
						Область.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
					КонецЕсли;
				ИначеЕсли ДанныеКалендаря.Найти(Дата(Год(ДатаГрафика), НомерМесяца, НомерДня, 0, 0, 0)) = Неопределено Тогда
					Область.ЦветФона = ЦветаСтиля.НерабочееВремяВыходной;
				Иначе
					Область.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеГрафика = Справочники.ГрафикиРаботы.ПрочитатьДанныеГрафикаИзРегистраНаГод(График, Год(ДатаГрафика));
	
	Пока ДанныеГрафика.Следующий() Цикл
		ГрафикВыведен = Истина;
		Значение = Окр((ДанныеГрафика.ВремяОкончания - ДанныеГрафика.ВремяНачала) / 3600, 1);
		СтрокаТаблицы = Месяц(ДанныеГрафика.ВремяНачала) + 1;
		КолонкаТаблицы = День(ДанныеГрафика.ВремяНачала) + 1;
		Область = РасписаниеПоГрафику.Область("R" + СтрокаТаблицы + "C" + КолонкаТаблицы);
		Область.Текст = Строка(Число(?(ЗначениеЗаполнено(Область.Текст), Область.Текст, 0)) + Значение);
	КонецЦикла;
	
КонецПроцедуры // ВывестиРасписаниеПоГрафикуГод()

// Процедура выводит расписание по графику вида День.
//
&НаСервере
Процедура ВывестиРасписаниеПоГрафикуДень()
	
	РасписаниеПоГрафику.Очистить();
	
	МакетРасписаниеПоГрафику = Справочники.ГрафикиРаботы.ПолучитьМакет("РасписаниеПоГрафикуДень");
	
	ОбластьМакета = МакетРасписаниеПоГрафику.ПолучитьОбласть("Календарь" + Строка(КратностьДня));
	
	РасписаниеПоГрафику.Вывести(ОбластьМакета);
	
	График = Элементы.Список.ТекущаяСтрока;
	
	МакетРасписаниеПоГрафику = Справочники.ГрафикиРаботы.ПолучитьМакет("РасписаниеПоГрафикуДень");
	
	ДанныеГрафика = Справочники.ГрафикиРаботы.ПрочитатьДанныеГрафикаИзРегистраНаДень(График, ДатаГрафика);
	
	Пока ДанныеГрафика.Следующий() Цикл
		Для ТекСтрока = 1 По 4 Цикл
			Для ТекКолонка = 1 по 72 Цикл
				ТекПериодКонец = НачалоДня(ДатаГрафика) + (ТекСтрока - 1) * 72 * 300 + ТекКолонка * 300 - 1;
				ТекПериодНачало = ТекПериодКонец - 299;
				СтрокаТаблицы = ТекСтрока * 2;
				КоэфКолонкаТаблицы = ?(ТекКолонка / 12 - Окр(ТекКолонка / 12) > 0, Окр(ТекКолонка / 12 + 0.5), Окр(ТекКолонка / 12));
				КолонкаТаблицы = ТекКолонка + КоэфКолонкаТаблицы;
				Область = РасписаниеПоГрафику.Область("R" + СтрокаТаблицы + "C" + КолонкаТаблицы);
				Если ТекПериодНачало >= ДанныеГрафика.ВремяНачала
					И ТекПериодКонец <= ДанныеГрафика.ВремяОкончания Тогда
					Область.ЦветФона = ЦветаСтиля.РабочееВремяЗанятоПолностью;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ВывестиРасписаниеПоГрафикуДень()

// Процедура заполняет представление периода.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеПериода()
	
	Если Переключатель = "Год" Тогда
		РасписаниеПоГрафикуПредставлениеПериода = "" + Формат(Год(ДатаГрафика),"ЧГ=") + " год";
	ИначеЕсли Переключатель = "День" Тогда
		ДеньРасписания = Формат(ДатаГрафика, "ДФ=дд");
		МесяцРасписания = Формат(ДатаГрафика, "ДФ=МММ");
		ГодРасписания = Формат(Год(ДатаГрафика), "ЧГ=0");
		ДеньНеделиРасписания = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаГрафика);
		РасписаниеПоГрафикуПредставлениеПериода = ДеньНеделиРасписания + " " + ДеньРасписания + " " + МесяцРасписания + " " + ГодРасписания;
	КонецЕсли;
	
	МесяцРасписания = Формат(ДатаГрафика, "ДФ=МММ");
	ГодРасписания = Формат(Год(ДатаГрафика), "ЧГ=0");
	РесурсыРаботающиеПоГрафикуПредставлениеПериода = МесяцРасписания + " " + ГодРасписания;
	
КонецПроцедуры // ЗаполнитьПредставлениеПериода()

// Процедура записывает график в регистр.
//
&НаСервере
Процедура ЗаписатьГрафикВРегистр()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботы.ГрафикРаботы,
	|	ГрафикиРаботы.Год,
	|	ГрафикиРаботы.ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.ВремяНачала >= &ВремяНачала
	|	И ГрафикиРаботы.ВремяОкончания <= &ВремяОкончания";
	
	ГрафикРаботы = Элементы.Список.ТекущаяСтрока;
	
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Год", Год(ДатаГрафика));
	Запрос.УстановитьПараметр("ВремяНачала", НачалоДня(ДатаГрафика));
	Запрос.УстановитьПараметр("ВремяОкончания", КонецДня(ДатаГрафика));
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботы.СоздатьНаборЗаписей();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаРезультатаЗапроса.ГрафикРаботы);
		НаборЗаписей.Отбор.Год.Установить(ВыборкаРезультатаЗапроса.Год);
		НаборЗаписей.Отбор.ВремяНачала.Установить(ВыборкаРезультатаЗапроса.ВремяНачала);
		НаборЗаписей.Отбор.ВремяОкончания.Установить(ВыборкаРезультатаЗапроса.ВремяОкончания);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботы.СоздатьНаборЗаписей();
	
	ОткрытИнтервал = Ложь;
	
	КоличествоКолонок = 360 / КратностьДня;
	КоличествоСекундВПериоде = КратностьДня * 60;
	КоличествоПериодовВКолонке = 60 / КратностьДня;
	
	Для ТекСтрока = 1 По 4 Цикл
		Для ТекКолонка = 1 По КоличествоКолонок Цикл
			
			ТекПериодНачало = НачалоДня(ДатаГрафика) + (ТекСтрока - 1) * КоличествоКолонок * КоличествоСекундВПериоде + ТекКолонка * КоличествоСекундВПериоде - КоличествоСекундВПериоде;
			СтрокаТаблицы = ТекСтрока * 2;
			КоэфКолонкаТаблицы = ?(ТекКолонка / КоличествоПериодовВКолонке - Окр(ТекКолонка / КоличествоПериодовВКолонке) > 0, Окр(ТекКолонка / КоличествоПериодовВКолонке + 0.5), Окр(ТекКолонка / КоличествоПериодовВКолонке));
			
			КолонкаТаблицы = ТекКолонка + ТекКолонка * (КратностьДня / 5 - 1) - КратностьДня / 5 + 1 + КоэфКолонкаТаблицы;
			Область = РасписаниеПоГрафику.Область("R" + СтрокаТаблицы + "C" + КолонкаТаблицы);
			
			Если Область.ЦветФона = ЦветаСтиля.РабочееВремяЗанятоПолностью Тогда
				Если НЕ ОткрытИнтервал Тогда
					ОткрытИнтервал = Истина;
					НоваяСтрока = НаборЗаписей.Добавить();
					НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
					НоваяСтрока.Год = Год(ДатаГрафика);
					НоваяСтрока.ВремяНачала = ТекПериодНачало;
				КонецЕсли;
			Иначе
				Если ОткрытИнтервал Тогда
					ОткрытИнтервал = Ложь;
					НоваяСтрока.ВремяОкончания = ТекПериодНачало;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекКолонка = КоличествоКолонок И ТекСтрока = 4 И ОткрытИнтервал Тогда
				ОткрытИнтервал = Ложь;
				НоваяСтрока.ВремяОкончания = КонецДня(ДатаГрафика);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры // ЗаписатьГрафикВРегистр()

// Процедура очищает день графика в регистре.
//
&НаСервереБезКонтекста
Процедура ОчиститьДеньГрафикаВРегистре(ГрафикРаботы, День)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботы.ГрафикРаботы,
	|	ГрафикиРаботы.Год,
	|	ГрафикиРаботы.ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания
	|ИЗ
	|	РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.ВремяНачала >= &ВремяНачала
	|	И ГрафикиРаботы.ВремяОкончания <= &ВремяОкончания";
	
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Год", Год(День));
	Запрос.УстановитьПараметр("ВремяНачала", НачалоДня(День));
	Запрос.УстановитьПараметр("ВремяОкончания", КонецДня(День));
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ГрафикиРаботы.СоздатьНаборЗаписей();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаРезультатаЗапроса.ГрафикРаботы);
		НаборЗаписей.Отбор.Год.Установить(ВыборкаРезультатаЗапроса.Год);
		НаборЗаписей.Отбор.ВремяНачала.Установить(ВыборкаРезультатаЗапроса.ВремяНачала);
		НаборЗаписей.Отбор.ВремяОкончания.Установить(ВыборкаРезультатаЗапроса.ВремяОкончания);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьГрафикВРегистр()

// Процедура устанавливает цвет выбранным областям.
//
&НаКлиенте
Процедура УстановитьЦветФонаВыбраннымОбластям(Цвет)
	
	ВыделенныеОбласти = РасписаниеПоГрафику.ВыделенныеОбласти;
	
	Для каждого ТекОбласть Из ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ТекОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ТекСтрока = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			Для ТекКолонка = ТекОбласть.Лево По ТекОбласть.Право Цикл
				Если ПроверитьВозможностьУстановкиЦвета(ТекКолонка, ТекСтрока) Тогда
					Область = РасписаниеПоГрафику.Область("R" + ТекСтрока + "C" + ТекКолонка);
					Область.ЦветФона = Цвет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьЦветФонаВыбраннымОбластям()

// Процедура проверяет возможность установки цвета.
//
&НаКлиенте
Функция ПроверитьВозможностьУстановкиЦвета(ТекКолонка, ТекСтрока)
	
	Если (ТекКолонка >= 2 И ТекКолонка <= 78 И ТекКолонка <> 14 И ТекКолонка <> 27 И ТекКолонка <> 40 И ТекКолонка <> 53 И ТекКолонка <> 66)
		И (ТекСтрока = 2 ИЛИ ТекСтрока = 4 ИЛИ ТекСтрока = 6 ИЛИ ТекСтрока = 8)  Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПроверитьВозможностьУстановкиЦвета()

// Процедура сохраняет настройки формы.
//
&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	ХранилищеНастроекДанныхФорм.Сохранить("ГрафикиРаботы", "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиФормы()

// Процедура загружает настройки формы.
//
&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ГрафикиРаботы", "СтруктураНастроек");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Переключатель = "Год";
		
		Если СтруктураНастроек.Свойство("РасписаниеПоГрафикуПериодДеньПометка")
			И СтруктураНастроек.РасписаниеПоГрафикуПериодДеньПометка Тогда
			Переключатель = "День";
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КратностьДня") Тогда
			КратностьДня = СтруктураНастроек.КратностьДня;
		Иначе
			КратностьДня = 5;
		КонецЕсли;
		
	Иначе
		
		Переключатель = "Год";
		
		КратностьДня = 5;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиФормы()

// Процедура заполняет по график по шаблону на сервере.
//
&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(График, ДатаЗаполнения)
	
	Справочники.ГрафикиРаботы.ЗаписатьДанныеГрафикаВРегистр(График, ДатаЗаполнения);
	ВывестиРасписаниеПоГрафику();
	
КонецПроцедуры // ЗаполнитьПоШаблонуНаСервере()

#КонецОбласти
