
#Область ОписаниеПеременных

&НаКлиенте
Перем ОписаниеДанных, СписокПредставлений, ФормаДлительнойОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если Параметры.Свойство("Контрагент") Тогда
		Контрагент = Параметры.Контрагент;
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД И НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;

	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность") Тогда
		МодульЭлектронныйДокументооборотСКонтролирующимиОрганами = ОбщегоНазначения.ОбщийМодуль("ЭлектронныйДокументооборотСКонтролирующимиОрганами");
		
		СтруктураПараметров = Новый Структура("ОтпечатокСертификатаПодписи, ЭлектроннаяПодписьВМоделиСервиса, КодНО, ТипКриптоПровайдера");
		МодульЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаполнитьПараметрыДляФормыПодключенияКСервисуЭлектронныхДокументов(
			Организация, СтруктураПараметров);
		
		Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
			ЭПВМоделиСервиса = Ложь;
			Если СтруктураПараметров.Свойство("ЭлектроннаяПодписьВМоделиСервиса", ЭПВМоделиСервиса)
				И ЭПВМоделиСервиса <> Истина Тогда
				СтруктураПараметров.Свойство("ОтпечатокСертификатаПодписи", ОтпечатокСертификата);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
				КодНалоговогоОргана = СтруктураПараметров.КодНО;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СпособыОбменаЭД = "";
	Если Параметры.Свойство("СпособыОбменаЭД", СпособыОбменаЭД) И ЗначениеЗаполнено(СпособыОбменаЭД) Тогда
		Если СпособыОбменаЭД.Количество() = 1 Тогда
			СпособОбменаЭД = СпособыОбменаЭД[0];
			Элементы.СпособОбменаЭД.СписокВыбора.Добавить(СпособОбменаЭД);
			Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СТакском;
				ЭтаФорма.Заголовок = Элементы.СтраницаПодключенияК1СТакском.Заголовок;
				
			ИначеЕсли СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
				ЭтаФорма.Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;
				
				Если Параметры.Свойство("ДополнительныеПараметры") И ЗначениеЗаполнено(Параметры.ДополнительныеПараметры)
					И ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
					
					ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДополнительныеПараметры);
					Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФоновая;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КодРегиона) Тогда
					СформироватьАдрес();
				КонецЕсли;
				
				ПодключенныеОператорыЭДО1СЭДО();
				ТипРегистрации = 2;
			КонецЕсли;
		Иначе
			Для каждого Строка Из СпособыОбменаЭД Цикл
				Элементы.СпособОбменаЭД.СписокВыбора.Добавить(Строка);
			КонецЦикла;
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкиПрямогоОбмена;
			ЭтотОбъект.Заголовок = Элементы.СтраницаНастройкиПрямогоОбмена.Заголовок;
			Если ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
				СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту;
			Иначе
				СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог;
				УдаляемыйЭлемент = Элементы.СпособОбменаЭД.СписокВыбора.НайтиПоЗначению(
					Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
				Элементы.СпособОбменаЭД.СписокВыбора.Удалить(УдаляемыйЭлемент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Проверим, возможно логин и пароль уже есть в базе.
	ПараметрыАутентификацииНаСайте = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	
	УстановитьЗначенияПоУмолчанию();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")
		И ЗначениеЗаполнено(Организация) И (Не ЗначениеЗаполнено(КодНалоговогоОргана) 
		ИЛИ НЕ ЗначениеЗаполнено(КодРегиона)) Тогда
			ПодключитьОбработчикОжидания("ЗаполнитьРеквизитыПоИНННаКлиенте", 1, Истина);
	КонецЕсли;
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		СогласенСУсловиями = Истина;
		ОбменСКонтрагентамиКлиентПереопределяемый.ЗапроситьСогласиеСУсловиямиЛицензионногоСоглашения(СогласенСУсловиями);
		Если СогласенСУсловиями <> Истина Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйКлиент.ИспользуетсяИнтернетПоддержкаПользователей() Тогда
		
		Элементы.ГруппаИдентификатораБезИнтернетПоддержки.Видимость = Ложь;
	Иначе
		Элементы.ГруппаИдентификатораСИнтернетПоддержкой.Видимость = Ложь;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
	#КонецЕсли
	
	ОбменСКонтрагентамиСлужебныйКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	
	Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		ТипРегистрации = 2;
		
		Контекст = Новый Структура;
		Контекст.Вставить("Организация", Организация);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПослеПолученияОтпечатковПолучитьМенеджерКриптографии", ЭтотОбъект, Контекст);
		ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПолучитьМенеджерКриптографии(Отпечатки, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(Отпечатки) <> Тип("Соответствие") Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
		ЭтаФорма.Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;
		УправлениеФормой(ЭтаФорма);
		
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Отпечатки Цикл
		Если ОтпечатокСертификата = НРег(СТРЗаменить(Строка(Base64Значение(КлючЗначение.Ключ))," ","")) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПолучитьМенеджерКриптографииПослеПолученияСертификатаКриптографии", ЭтотОбъект, Контекст);
			ЭлектроннаяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОписаниеОповещения, КлючЗначение.Ключ, Истина, Ложь);
			Прервать;
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМенеджерКриптографииПослеПолученияСертификатаКриптографии(Сертификат, Контекст) Экспорт
	
	Если ТипЗнч(Сертификат) <> Тип("СертификатКриптографии") Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСертификатЗавершение = Новый ОписаниеОповещения("СертификатВыгрузитьПродолжить", ЭтотОбъект, Контекст);
	
	Сертификат.НачатьВыгрузку(ВыгрузитьСертификатЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатВыгрузитьПродолжить(ДвоичныеДанныеСертификата, Контекст) Экспорт
	
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПослеПолученияМенеджераКриптографии", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПолучениеСертификатов", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеПолученияМенеджераКриптографии(МенеджерКриптографии, Контекст = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(МенеджерКриптографии) = Тип("МенеджерКриптографии") Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
		ЭтаФорма.Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;
		УправлениеФормой(ЭтаФорма);
		
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНайтиСертификатКриптографииПользователя", ЭтотОбъект, Контекст);
	МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНайтиСертификатКриптографииПользователя(ИнформацияМодуля, Контекст = Неопределено) Экспорт
	
	СертификатКриптографии = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.НайтиСоздатьСертификатЭП(
		Контекст.ДвоичныеДанныеСертификата, Контекст.Организация, ИнформацияМодуля.Имя);
		
	ПолучитьИдентификаторУчастникаОбменаЭДЧерез1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	// Задаем вопрос только в случае досрочного закрытия помощника.
	Если ЗакрытьФорму <> Истина И Не ЗначениеЗаполнено(СсылкаНаПрофильНастроек) Тогда
		ТекстВопроса = НСтр("ru = 'Введенные данные не будут сохранены.
							|Прервать работу помощника?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершить", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД" Тогда
		ИдентификаторОрганизации = СокрЛП(Параметр);
		
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = ИдентификаторОрганизации;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Ложь;
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Истина);
		
		ТестПрофиляНастроекЭДО();
	КонецЕсли;
	
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД1СЭДО" Тогда
		ИдентификаторОрганизации = СокрЛП(Параметр);
		Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.Добавить(ИдентификаторОрганизации);
		
		Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Заголовок = ИдентификаторОрганизации;
		Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Гиперссылка = Ложь;
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Истина);
		
		ТестПрофиляНастроекЭДО();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		ИдентификаторОрганизации = "";
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = НСтр("ru = 'Получить уникальный идентификатор участника обмена ЭД.'");
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Ложь);
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Истина;
		
		ОрганизацияПриИзмененииЗавершить(Неопределено, Неопределено);
	ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		
		ИдентификаторОрганизации = "";
		ИдентификаторОрганизацииСуществующий = "";
		Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.Очистить();
		
		Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Заголовок = НСтр("ru = 'Получить уникальный идентификатор участника обмена ЭД.'");
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Ложь);
		Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Гиперссылка = Истина;
		
		// Очистить адрес организации
		АдресОрганизации = "";
		Индекс           = "";
		Регион           = "";
		Район            = "";
		Город            = "";
		НаселенныйПункт  = "";
		Улица            = "";
		Дом              = "";
		Корпус           = "";
		Квартира         = "";
		КодРегиона       = "";
		КодНалоговогоОргана = "";

		ОрганизацияПриИзмененииЗавершить(Неопределено, Неопределено);
	Иначе
		Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершить", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Была изменена организация. Изменить идентификатор обмена организации?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			ОрганизацияПриИзмененииЗавершить(КодВозвратаДиалога.Да, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьАдресЭлектроннойПочты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорЭДОПодключенныйК1СЭДОПриИзменении(Элемент)
	
	ПодключенныеОператорыЭДО1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРегистрацииПриИзменении(Элемент)
	
	ИдентификаторОрганизацииСуществующий = "";
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбменаЭДПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭППриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СертификатКриптографии) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИспользоватьЭППриИзмененииЗавершить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные по сертификату будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ИспользоватьЭППриИзмененииЗавершить(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатЭПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭлектроннаяПодписьКлиент.СертификатНачалоВыбораСПодтверждением(Элемент,
		СертификатКриптографии, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьИдентификаторУчастникаОбменаЭДНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(СертификатКриптографии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Сертификат ключа электронной подписи'")),
			,
			"СертификатКриптографии");
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("НадписьИдентификаторУчастникаОбменаЭДНажатиеЗавершение", ЭтотОбъект);
	Подключение1СТакскомКлиент.ПолучитьУникальныйИдентификаторАбонента(СертификатКриптографии, Организация, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИдентификаторУчастникаОбменаЭДНажатиеЗавершение(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если РезультатВыполнения <> Неопределено Тогда
		Оповестить("ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД", РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьУчетнуюЗаписьНажатие(Элемент)
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПомощникНастройкиУчетнойЗаписи");
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
#Если НЕ ВебКлиент Тогда
	КаталогОбмена(КаталогВходящихДокументов);
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура FTPКаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КаталогОбмена(FTPКаталогВходящихДокументов);
КонецПроцедуры

&НаКлиенте
Процедура НадписьИдентификаторУчастникаОбменаЭДЧерез1СЭДОНажатие(Элемент)
	
	ОчиститьСообщения();
	ПолучитьИдентификаторУчастникаОбменаЭДЧерез1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторУчастникаОбменаЭДЧерез1СЭДО()
	
	ВозниклиОшибки = Ложь;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Организация"),
			,
			"Организация");
		ВозниклиОшибки = Истина;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СертификатКриптографии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Сертификат ключа электронной подписи'")),
			,
			"СертификатКриптографии");
		ВозниклиОшибки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Код налогового органа'")),
			,
			"КодНалоговогоОргана");
		ВозниклиОшибки = Истина;
	Иначе
		Если СтрДлина(КодНалоговогоОргана) <> 4 Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "КОРРЕКТНОСТЬ", НСтр("ru = 'Код налогового органа'"), , ,
				НСтр("ru = 'Длина поля не равна 4.'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КодНалоговогоОргана");
			
			ВозниклиОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресОрганизации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Юридический адрес'")),
			,
			"АдресОрганизации");
		ВозниклиОшибки = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(КодРегиона) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = '""КодРегиона"" в юридическом адресе'")),
			,
			"АдресОрганизации");
		ВозниклиОшибки = Истина;
	КонецЕсли;
		
	Если Не ВозниклиОшибки Тогда
		Если (ТипЗнч(ПараметрыАутентификацииНаСайте) <> Тип("Структура")
			ИЛИ Не ЗначениеЗаполнено(ПараметрыАутентификацииНаСайте.Пароль))
			И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
			
			ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
				Новый ОписаниеОповещения("НадписьИдентификаторУчастникаОбменаЭДЧерез1СЭДОЗавершение", ЭтотОбъект),
				ЭтотОбъект);
		Иначе
			НадписьИдентификаторУчастникаОбменаЭДЧерез1СЭДОЗавершение(ПараметрыАутентификацииНаСайте, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИдентификаторУчастникаОбменаЭДЧерез1СЭДОЗавершение(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура")
		И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		// Пользователь отказался от ввода логина и пароля.
		ПараметрыАутентификацииНаСайте = Неопределено;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодключенияК1СЭДО;
		ЭтаФорма.Заголовок = Элементы.СтраницаПодключенияК1СЭДО.Заголовок;
		
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификацииНаСайте = ПараметрыАутентификации;
	ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Подготовка данных и открытие формы для ввода адреса
	СтандартнаяОбработка = Ложь;
	ВыбратьАдрес(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьАдрес(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	ТестПрофиляНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьИнструкциюПо1СБухфон();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьАдресЭлектроннойПочты()
	
	ЭлектронныйАдрес = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		
		
		МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		
		МетаданныеТипыКонтактнойИнформации = Метаданные.Перечисления.Найти("ТипыКонтактнойИнформации");
		МетаданныеАдресЭлектроннойПочты = МетаданныеТипыКонтактнойИнформации.ЗначенияПеречисления.Найти("АдресЭлектроннойПочты");
		
		Если Не (МетаданныеТипыКонтактнойИнформации = Неопределено
			Или МетаданныеАдресЭлектроннойПочты = Неопределено) Тогда
			
			ТипыКонтактнойИнформации = Перечисления["ТипыКонтактнойИнформации"];
			АдресЭлектроннойПочты = ТипыКонтактнойИнформации["АдресЭлектроннойПочты"];
			
			ЗначениеПочты = МодульОчередьЗаданий.ЗначенияКонтактнойИнформацииОбъекта(Организация, АдресЭлектроннойПочты);
			
			Для Каждого ТекСтрока Из ЗначениеПочты Цикл
				ЭлектронныйАдрес.Добавить(ТекСтрока.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ЭлектронныйАдрес.Количество() > 0 Тогда
		ЭлектроннаяПочта = ЭлектронныйАдрес[0];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ЗначениеФОИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	Элементы.ГруппаЧерезЭлектроннуюПочтуНастройкаКриптографии.Видимость = ЗначениеФОИспользоватьЭП;
	Элементы.ГруппаЧерезКаталогНастройкаКриптографии.Видимость          = ЗначениеФОИспользоватьЭП;
	Элементы.ГруппаЧерезFTPНастройкаКриптографии.Видимость              = ЗначениеФОИспользоватьЭП;
	
	Элементы.СертификатЭПЧерезЭлектроннуюПочту.Доступность = Форма.ИспользоватьЭП;
	Элементы.СертификатЭПЧерезКаталог.Доступность          = Форма.ИспользоватьЭП;
	Элементы.СертификатЭПЧерезFTP.Доступность              = Форма.ИспользоватьЭП;
	
	Если Форма.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
		Элементы.СтраницыНастройкиУчастника.ТекущаяСтраница = Элементы.СтраницаНастроекУчастникаЧерезЭлектроннуюПочту;
	ИначеЕсли Форма.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
		Элементы.СтраницыНастройкиУчастника.ТекущаяСтраница = Элементы.СтраницаНастроекУчастникаЧерезКаталог;
	ИначеЕсли Форма.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
		Элементы.СтраницыНастройкиУчастника.ТекущаяСтраница = Элементы.СтраницаНастроекУчастникаЧерезFTP;
	ИначеЕсли Форма.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
		Элементы.ИдентификаторОрганизацииЧерез1СЭДО.Доступность = Форма.ТипРегистрации = 1;
		Элементы.НадписьИдентификаторУчастникаОбменаЭДЧерезЭДО.Доступность = Форма.ТипРегистрации = 2;
		Элементы.ГруппаРегистрацииНовойУчетнойЗаписиДанные.Доступность = Форма.ТипРегистрации = 2;
	КонецЕсли;
	
	Элементы.СертификатЭПЧерезОператора.КнопкаСоздания = Ложь;
	Элементы.СертификатЭПЧерезЭлектроннуюПочту.КнопкаСоздания = Ложь;
	Элементы.СертификатЭПЧерезКаталог.КнопкаСоздания = Ложь;
	Элементы.СертификатЭПЧерезFTP.КнопкаСоздания = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	СертификатКриптографии = Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка();
	
	ОрганизацияПоУмолчанию = Неопределено;
	ИспользуетсяНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Если НЕ ИспользуетсяНесколькоОрганизаций Тогда
			Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;

	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
		И ЗначениеЗаполнено(Организация) Тогда
		
		СуществующиеИдентификаторыНаСервисе1СЭДО();
		ТипРегистрации = ?(ЗначениеЗаполнено(ИдентификаторОрганизацииСуществующий), 1, 2);
	КонецЕсли;
	
    Если ЗначениеЗаполнено(Организация)
        И (СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP
            ИЛИ  СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
            ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту) Тогда
            
        УстановитьИдентификатор("Организации", Организация);
	КонецЕсли;
	
	Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту
		И НЕ ЗначениеЗаполнено(ЭлектроннаяПочтаОрганизации) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
		|	И УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения");
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			ЭлектроннаяПочтаОрганизации = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьЭП И ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|ГДЕ
		|	Сертификаты.Организация = &Организация
		|	И НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван";
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			СертификатКриптографии = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбмена(ПутьККаталогу)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ПутьККаталогу", ПутьККаталогу);
	
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогКаталога.Заголовок = НСтр("ru = 'Выберите сетевой каталог для обмена'");
	ДиалогКаталога.Каталог = ПутьККаталогу;
	ОписаниеВыбораКаталога = Новый ОписаниеОповещения("ПослеВыбораКаталога", ЭтотОбъект);
		
	ДиалогКаталога.Показать(ОписаниеВыбораКаталога);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификатор(ИмяСправочника, СсылкаНаИсточникИдентификатора)
	
	Если ИмяСправочника = "Организации" Тогда
		ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
		ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
		
		ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаИсточникИдентификатора,
			ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
		
		СтрокаЗаполнения = Строка(СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]))
			+ "_" + Строка(СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		ИдентификаторОрганизации = СокрЛП(СтрокаЗаполнения);
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
		ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаИсточникИдентификатора,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
		
		СтрокаЗаполнения = Строка(ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента])
			+ "_" + Строка(ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		ИдентификаторКонтрагента = СокрЛП(СтрокаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора адреса в модальном режиме и возвращает
// реквизиты адреса в виде структуры с соответствующими полями.
//
// Параметры:
//  ТолькоДляПросмотра (Булево): Истина - открыть форму выбора адреса только для просмотра.
//
// Возвращаемое значение: Структура с полями - реквизитами адреса;
//						  Неопределено, если на форме адреса при закрытии не была нажата кнопка "ОК".
// 
&НаКлиенте
Процедура ВыбратьАдрес(ТолькоДляПросмотра = Ложь)
	
	ПараметрыФормы = Новый Структура("ТолькоПросмотр", ТолькоДляПросмотра);
	
	Если ТолькоДляПросмотра Тогда
		ОповещениеОЗакрытии = Неопределено;
	Иначе
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПриВыбореАдреса", ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Индекс"    , Индекс);
	ПараметрыФормы.Вставить("Регион"    , Регион);
	ПараметрыФормы.Вставить("Район"     , Район);
	ПараметрыФормы.Вставить("Город"     , Город);
	ПараметрыФормы.Вставить("НасПункт"  , НаселенныйПункт);
	ПараметрыФормы.Вставить("Улица"     , Улица);
	ПараметрыФормы.Вставить("Дом"       , Дом);
	ПараметрыФормы.Вставить("Корпус"    , Корпус);
	ПараметрыФормы.Вставить("Квартира"  , Квартира);
	ПараметрыФормы.Вставить("КодРегиона", КодРегиона);
	
	
	ОткрытьФорму("ОбщаяФорма.АдресУчастникаОбменаЭД",
		ПараметрыФормы,
		,
		,
		,
		,
		ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореАдреса(ПараметрыАдреса, ДопПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыАдреса) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Если адрес изменен, то применение изменений
	Индекс          = ПараметрыАдреса.Индекс;
	Регион          = ПараметрыАдреса.Регион;
	Район           = ПараметрыАдреса.Район;
	Город           = ПараметрыАдреса.Город;
	НаселенныйПункт = ПараметрыАдреса.НаселенныйПункт;
	Улица           = ПараметрыАдреса.Улица;
	Дом             = ПараметрыАдреса.Дом;
	Корпус          = ПараметрыАдреса.Корпус;
	Квартира        = ПараметрыАдреса.Квартира;
	КодРегиона      = ПараметрыАдреса.КодРегиона;
	
	СформироватьАдрес();
	
КонецПроцедуры

// Выполняет формирование строки адреса по реквизитам адреса.
&НаСервере
Процедура СформироватьАдрес()
	
	Адр = "";
	
	ДобавитьПодстроку(Адр, Индекс);
	ДобавитьПодстроку(Адр, Регион);
	ДобавитьПодстроку(Адр, КодРегиона, "регион ");
	ДобавитьПодстроку(Адр, Район);
	ДобавитьПодстроку(Адр, Город);
	ДобавитьПодстроку(Адр, НаселенныйПункт);
	ДобавитьПодстроку(Адр, Улица);
	ДобавитьПодстроку(Адр, Дом     , "д. ");
	ДобавитьПодстроку(Адр, Корпус  , "корп. ");
	ДобавитьПодстроку(Адр, Квартира, "кв. ");
	
	АдресОрганизации = Адр;
	
КонецПроцедуры

// Процедура добавления подстроки к строке
// Параметры:
// - ИсходнаяСтрока - Строка - исходная строка;
// - Подстрока      - Строка - строка, которая должна быть добавлена в конец исходной строки;
// - Префикс        - Строка - строка, которая добавляется перед подстрокой;
// - Разделитель    - строка - строка, которая служит разделителем между строкой и подстрокой.
//
&НаСервере
Процедура ДобавитьПодстроку(ИсходнаяСтрока, Знач Подстрока, Префикс = "", Разделитель = ", ")
	
	Если НЕ ПустаяСтрока(ИсходнаяСтрока) И НЕ ПустаяСтрока(Подстрока) Тогда
		ИсходнаяСтрока = ИсходнаяСтрока + Разделитель;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Подстрока) Тогда
		ИсходнаяСтрока = ИсходнаяСтрока + Префикс + Подстрока;
	КонецЕсли;
	
КонецПроцедуры

// Получение данных по организации из сервиса ВЕБ ИТС(данные ЕГРИП).

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте()
	
	Если (ТипЗнч(ПараметрыАутентификацииНаСайте) <> Тип("Структура")
		ИЛИ Не ЗначениеЗаполнено(ПараметрыАутентификацииНаСайте.Пароль))
		И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда

		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННПродолжить", ЭтотОбъект),
			ЭтотОбъект);
	Иначе
		ЗаполнитьРеквизитыПоИННПродолжить(ПараметрыАутентификацииНаСайте, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННПродолжить(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура") Тогда
		ПараметрыАутентификацииНаСайте = Неопределено;
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификацииНаСайте = ПараметрыАутентификации;
	ЗаполнитьРеквизитыПоИНННаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере()
	
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ЗначениеРеквизитаИННОрганизации = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, ИмяРеквизитаИННОрганизации));
	
	Если Не ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Организация) Тогда
		РеквизитыЮрЛицаПоИНН(ЗначениеРеквизитаИННОрганизации);
	Иначе
		РеквизитыПредпринимателяПоИНН(ЗначениеРеквизитаИННОрганизации);
	КонецЕсли;
	
КонецПроцедуры

// Возвращаются реквизиты юридического лица по данным ЕГРЮЛ (наименование, адрес, коды и т.д.).
//
// Параметры:
//  ИНН  - Строка - ИНН юридического лица, реквизиты которого надо получить.
//
// Возвращаемое значение:
//   Структура   - реквизиты юридического лица. 
//                 Содержание структуры описано в функции НовыеРеквизитыЮрЛица().
//
&НаСервере
Процедура РеквизитыЮрЛицаПоИНН(Знач ИНН)
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getCorporationRequisitesByINN"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ = Прокси.getCorporationRequisitesByINN(ВходныеПараметры);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуСервиса(ОписаниеОшибки, ИНН);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРегистрациюВНалоговомОргане(Ответ.РеквизитыЮрЛица);
	
	ЗаполнитьЮридическийАдрес(Ответ.РеквизитыЮрЛица);
	
КонецПроцедуры

// Возвращаются реквизиты индивидуального предпринимателя по данным ЕГРИП (ФИО, свидетельство о регистрации, коды и т.д.).
//
// Параметры:
//  ИНН  - Строка - ИНН индивидуального предпринимателя, реквизиты которого надо получить.
//
// Возвращаемое значение:
//   Структура   - реквизиты индивидуального предпринимателя. 
//                 Содержание структуры описано в функции НовыеРеквизитыПредпринимателя().
//
&НаСервере
Процедура РеквизитыПредпринимателяПоИНН(Знач ИНН)
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getEntrepreneurRequisitesByINN"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ = Прокси.getEntrepreneurRequisitesByINN(ВходныеПараметры);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуСервиса(ОписаниеОшибки, ИНН);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРегистрациюВНалоговомОргане(Ответ.РеквизитыИП);
	
КонецПроцедуры

&НаСервере
Функция ПроксиСервиса(ОписаниеОшибки)
	
	Прокси = Неопределено;
	
	Если ПараметрыАутентификацииНаСайте = Неопределено Тогда
		// Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = "НеУказаныПараметрыАутентификацииНаПользовательскомСайте";
	Иначе
		Попытка
			ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
			ПараметрыПодключения.АдресWSDL =           "https://api.orgregister.1c.ru/orgregister/v1?wsdl";
			ПараметрыПодключения.URIПространстваИмен = ПространствоИмен();
			ПараметрыПодключения.ИмяСервиса =          "RequisitesWebServiceEndpointImplService";
			ПараметрыПодключения.ИмяТочкиПодключения = "RequisitesWebServiceEndpointImplPort";
			ПараметрыПодключения.ИмяПользователя =     ПараметрыАутентификацииНаСайте.Логин;
			ПараметрыПодключения.Пароль =              ПараметрыАутентификацииНаСайте.Пароль;
			ПараметрыПодключения.Таймаут =             30;
			
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

&НаСервере
Функция ПространствоИмен()

	Возврат "http://ws.orgregister.company1c.com/";

КонецФункции

&НаСервере
Процедура ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO)
	
	Если ОбъектXDTO.СвУчетНО <> Неопределено
		И ОбъектXDTO.СвУчетНО.СвНО <> Неопределено
		И Не ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		
		КодНалоговогоОргана = ОбъектXDTO.СвУчетНО.СвНО.КодНО;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЮридическийАдрес(ОбъектXDTO)
	
	Если ОбъектXDTO.СвАдрес <> Неопределено
		И ОбъектXDTO.СвАдрес.Адрес <> Неопределено
		И ОбъектXDTO.СвАдрес.Адрес.Состав <> Неопределено Тогда
		
		Если ОбъектXDTO.СвАдрес.Адрес.Состав.СубъектРФ <> Неопределено Тогда
			Регион = ОбъектXDTO.СвАдрес.Адрес.Состав.СубъектРФ;
		КонецЕсли;
		Если ОбъектXDTO.СвАдрес.Адрес.Состав.ВнутригРайон <> Неопределено Тогда
			Район = ОбъектXDTO.СвАдрес.Адрес.Состав.ВнутригРайон;
		КонецЕсли;
		Если ОбъектXDTO.СвАдрес.Адрес.Состав.Город <> Неопределено Тогда
			Город = ОбъектXDTO.СвАдрес.Адрес.Состав.Город;
		КонецЕсли;
		Если ОбъектXDTO.СвАдрес.Адрес.Состав.НаселПункт <> Неопределено Тогда
			НаселенныйПункт = ОбъектXDTO.СвАдрес.Адрес.Состав.НаселПункт;
		КонецЕсли;
		Если ОбъектXDTO.СвАдрес.Адрес.Состав.Улица <> Неопределено Тогда
			Улица = ОбъектXDTO.СвАдрес.Адрес.Состав.Улица;
		КонецЕсли;
		
		// Чтение
		Если ОбъектXDTO.СвАдрес.Адрес.Состав.ДопАдрЭл <> Неопределено Тогда
			Для Каждого ДопЭлемент Из ОбъектXDTO.СвАдрес.Адрес.Состав.ДопАдрЭл Цикл
				Если ДопЭлемент.Номер <> Неопределено Тогда
					КодОбъекта = ДопЭлемент.Номер.Тип;
					ТипОбъекта = ТипОбъектаПоКодуСериализации(КодОбъекта);
					Если ТипОбъекта <> Неопределено Тогда
						Вид = ТипОбъекта.Тип;
						Если Вид = 1 Тогда
							Дом = ДопЭлемент.Номер.Значение;
						ИначеЕсли Вид = 2 Тогда
							Корпус = ДопЭлемент.Номер.Значение;
						ИначеЕсли Вид = 3 Тогда
							Квартира = ДопЭлемент.Номер.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ДопЭлемент.ТипАдрЭл = "10100000" Тогда
					Индекс = ДопЭлемент.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СформироватьАдрес();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку с описанием типа по коду части адреса
//  Противоположность функции "КодСериализацииОбъектаАдресации".
//
// Параметры:
//  Код - Строка - код.
//
// Возвращаемое значение:
//  Число - Тип.
//
&НаСервере
Функция ТипОбъектаПоКодуСериализации(Код)
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Код = Код Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Возвращает массив структур с информацией о частях адреса согласно приказу ФНС ММВ-7-1/525 от 31.08.2011.
//
// Возвращаемое значение:
//      Массив - содержит структуры - описания.
//
&НаСервере
Функция ТипыОбъектовАдресацииАдресаРФ()
	
	Результат = Новый Массив;
	
	// Код, Наименование, Тип, Порядок, КодФИАС
	// Тип: 1 - владение, 2 - здание, 3 - помещение.
	
	Результат.Добавить(СтрокаОбъектаАдресации("1010", НСтр("ru = 'Дом'"),          1, 1, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1020", НСтр("ru = 'Владение'"),     1, 2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1030", НСтр("ru = 'Домовладение'"), 1, 3, 3));
	
	Результат.Добавить(СтрокаОбъектаАдресации("1050", НСтр("ru = 'Корпус'"),     2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1060", НСтр("ru = 'Строение'"),   2, 2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1080", НСтр("ru = 'Литера'"),     2, 3, 3));
	Результат.Добавить(СтрокаОбъектаАдресации("1070", НСтр("ru = 'Сооружение'"), 2, 4, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1040", НСтр("ru = 'Участок'"),    2, 5));
	
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru = 'Квартира'"),  3, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru = 'Офис'"),      3, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("2040", НСтр("ru = 'Бокс'"),      3, 3));
	Результат.Добавить(СтрокаОбъектаАдресации("2020", НСтр("ru = 'Помещение'"), 3, 4));
	Результат.Добавить(СтрокаОбъектаАдресации("2050", НСтр("ru = 'Комната'"),   3, 5));
	//  Наши сокращения для поддержки обратной совместимости при парсинге.
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru = 'кв.'"),       3, 6));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru = 'оф.'"),       3, 7));
	
	// Уточняющие объекты
	Результат.Добавить(СтрокаОбъектаАдресации("10100000", НСтр("ru = 'Почтовый индекс'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10200000", НСтр("ru = 'Адресная точка'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10300000", НСтр("ru = 'Садовое товарищество'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10400000", НСтр("ru = 'Элемент улично-дорожной сети, планировочной структуры дополнительного адресного элемента'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10500000", НСтр("ru = 'Промышленная зона'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10600000", НСтр("ru = 'Гаражно-строительный кооператив'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10700000", НСтр("ru = 'Территория'")));
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция СтрокаОбъектаАдресации(Код, Наименование, Тип = 0, Порядок = 0, КодФИАС = 0)
	
	СтруктураАдресации = Новый Структура();
	СтруктураАдресации.Вставить("Код",          Код);
	СтруктураАдресации.Вставить("Наименование", Наименование);
	СтруктураАдресации.Вставить("Тип",          Тип);
	СтруктураАдресации.Вставить("Порядок",      Порядок);
	СтруктураАдресации.Вставить("КодФИАС",      КодФИАС);
	СтруктураАдресации.Вставить("Сокращение",   НРег(Наименование));
	СтруктураАдресации.Вставить("Ключ",         ВРег(Наименование));
	
	Возврат СтруктураАдресации;
	
КонецФункции

&НаСервере
Процедура ОбработатьОшибкуСервиса(ОписаниеОшибки, ИНН)
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации
	
	Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
		ТекстОшибки    = "НеУказаныПараметрыАутентификации"; // Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = НСтр("ru='Не указаны логин и пароль для доступа к интернет-поддержке'");
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, """status"":401") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Неверно указаны логин и пароль для доступа к интернет-поддержке'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-1") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Не указан ИНН юридического лица'");
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-2") > 0 Тогда
		ТекстОшибки  = НСтр("ru='ИНН юридического лица должен состоять из 10 цифр'");
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-3") > 0 Тогда
		ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось найти данные для заполнения реквизитов по ИНН %1'"), ИНН);
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-4") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Не указан ИНН предпринимателя'");
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-5") > 0 Тогда
		ТекстОшибки  = НСтр("ru='ИНН предпринимателя должен состоять из 12 цифр'");
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-6") > 0 Тогда
		ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось найти данные для заполнения реквизитов по ИНН %1'"), ИНН);
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-7") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Превышен лимит количества вызовов сервиса за один день'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-8") > 0 Тогда
		ТекстОшибки  = НСтр("ru='Отсутствует действующий договор ИТС'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	Иначе
		ТекстОшибки  = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ТекстСобытия = НСтр("ru='Ошибка при работе с сервисом'", КодОсновногоЯзыка);
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Сервис данных единых гос_реестров.'", КодОсновногоЯзыка) + " " + ТекстСобытия;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	
КонецПроцедуры

// Методы работы с сервисом 1СЭДО

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияДляЭД()

	Попытка
		Если ФормаДлительнойОперации.Открыта() Тогда
			ОбменССерверомПолучитьОтветЭДО(УникальныйИдентификаторЗаявки1СЭДО);
			Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
				Оповестить("ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД1СЭДО", ИдентификаторОрганизации);
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ОбменССерверомПолучитьОтветЭДО(ИдентификаторЗапросаНаРегистрацию)
	
	ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetInfo", ИдентификаторЗапросаНаРегистрацию);
	ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
	МассивИдентификаторов = ПолучитьИдентификаторАбонента(ДанныеФайла);
	Если ЗначениеЗаполнено(МассивИдентификаторов) Тогда
		ИдентификаторОрганизации = МассивИдентификаторов[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СуществующиеИдентификаторыНаСервисе1СЭДО()
	
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
		
	Если ЗначениеЗаполнено(СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации])) Тогда
		
		ПараметрПоиска = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]);
		Если ЗначениеЗаполнено(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]) Тогда
			ПараметрПоиска = ПараметрПоиска + "_" + СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]);
		КонецЕсли;
		
		ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetInfo", ПараметрПоиска);
		Если ИмяФайлаОтвета <> Неопределено Тогда
			ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
			МассивИдентификаторов = ПолучитьИдентификаторАбонента(ДанныеФайла);
			Если ЗначениеЗаполнено(МассивИдентификаторов) Тогда
				ИдентификаторОрганизацииСуществующий = МассивИдентификаторов[0];
				Элементы.ИдентификаторОрганизацииЧерез1СЭДО.СписокВыбора.ЗагрузитьЗначения(МассивИдентификаторов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодключенныеОператорыЭДО1СЭДО()
	
	ИмяФайлаОтвета = ОбменСКонтрагентамиСлужебный.ПолучитьФайлОтветаОтСервераЭДО("GetOperators");
	Если ИмяФайлаОтвета <> Неопределено Тогда
		ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
		МассивОператоровЭДО = ОператорыЭДОПодключенныеК1СЭДО(ДанныеФайла);
		
		Если ЗначениеЗаполнено(МассивОператоровЭДО) Тогда
			Элементы.ОператорЭДОПодключенныйК1СЭДО.СписокВыбора.ЗагрузитьЗначения(МассивОператоровЭДО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторАбонента(ДанныеФайла)
	
	МассивИдентификаторов = Новый Массив;
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		
		ДеревоXML = ОбменСКонтрагентамиСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			
			УзелАбоненты = ДеревоXML.Строки.Найти("Abonents", "Имя");
			
			Если УзелАбоненты <> Неопределено Тогда
				Для каждого УзелАбонент Из УзелАбоненты.Строки Цикл
					УзелИдентификаторАбонента = УзелАбонент.Строки.Найти("Identifier", "Имя");
					МассивИдентификаторов.Добавить(УзелИдентификаторАбонента.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

&НаСервере
Функция ОператорыЭДОПодключенныеК1СЭДО(ДанныеФайла)
	
	МассивОператоровЭДО = Новый Массив;
	
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		ДеревоXML = ОбменСКонтрагентамиСлужебный.ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		
		Если ДеревоXML <> Неопределено Тогда
			
			УзелОператорыЭДО = ДеревоXML.Строки.Найти("Operators", "Имя");
			Если УзелОператорыЭДО <> Неопределено Тогда
				Для Каждого УзелОператорЭДО Из УзелОператорыЭДО.Строки Цикл
					
					УзелОператорЭДОНаимОрг = УзелОператорЭДО.Строки.Найти("НаимОрг", "Имя");
					МассивОператоровЭДО.Добавить(УзелОператорЭДОНаимОрг.Значение);
					
					Если Не ЗначениеЗаполнено(ОператорЭДО) Тогда
						ОператорЭДО = УзелОператорЭДОНаимОрг.Значение;
					КонецЕсли;
					
					Если УзелОператорЭДОНаимОрг.Значение = ОператорЭДО Тогда
						УзелОператорЭДОИд = УзелОператорЭДО.Строки.Найти("ИдОперЭДО", "Имя");
						ОператорЭДОИд = УзелОператорЭДОИд.Значение;
					
						УзелОператорЭДОИНН = УзелОператорЭДО.Строки.Найти("ИННЮЛ", "Имя");
						ОператорЭДОИНН = УзелОператорЭДОИНН.Значение;
						
						УзелОператорЭДОКПП = УзелОператорЭДО.Строки.Найти("КПП", "Имя");
						ОператорЭДОКПП = УзелОператорЭДОКПП.Значение;
						
						УзелОператорЭДООГРН = УзелОператорЭДО.Строки.Найти("ОГРН", "Имя");
						Если УзелОператорЭДООГРН <> Неопределено Тогда
							ОператорЭДООГРН = УзелОператорЭДООГРН.Значение;
						КонецЕсли;
						
						УзелОператорЭДОСертификат = УзелОператорЭДО.Строки.Найти("Сертификат", "Имя");
						Если УзелОператорЭДОСертификат <> Неопределено Тогда
							ОператорЭДОСертификат = УзелОператорЭДОСертификат.Значение;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивОператоровЭДО;
	
КонецФункции

// Методы создания и отправки рег. пакета 1СЭДО

&НаКлиенте
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНачало()
	
	Контекст = Новый Структура;
	
	РеквизитыПакета = Новый Структура;
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Неопределено;
	
	ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНачалоНаСервере(ДвоичныеДанныеСоглашенияНаПодключениеЭДО, РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО);
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанныеДляОператораЭДО) ИЛИ Не ЗначениеЗаполнено(ДвоичныеДанныеСоглашенияНаПодключениеЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	Контекст.Вставить("РеквизитыПакета", РеквизитыПакета);
	Контекст.Вставить("ДвоичныеДанныеДляОператораЭДО", ДвоичныеДанныеДляОператораЭДО);
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодготовитьДанныеДляРегистрационногоПакета1СЭДОПродолжение2", ЭтотОбъект, Контекст);
	
	
	ОписаниеДанных = Новый Структура;
	
	Операция = НСтр("ru = 'Подписание регистрационных данных на подключение к сервису 1С-ЭДО'");
	ОписаниеДанных.Вставить("Операция",            Операция);
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(СертификатКриптографии);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	
	ОписаниеДанных.Вставить("НаборДанных",         Новый Массив);
	ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДвоичныеДанныеСоглашенияНаПодключениеЭДО));
	ОписаниеДанных.НаборДанных.Добавить(Новый Структура("Данные", ДвоичныеДанныеДляОператораЭДО));
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     "");
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	
	СписокПредставлений = Новый СписокЗначений;
	
	Представление = НСтр("ru = 'Пользовательское соглашение на подключение к сервису 1С-ЭДО'");
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО", ЭтотОбъект, Контекст);
	СписокПредставлений.Добавить(ОписаниеПредставленияЗаявления, Представление);
	
	Представление = НСтр("ru = 'Данные для регистрации учетной записи у оператора ЭДО'");
	ОписаниеПредставленияДанных = Новый ОписаниеОповещения("ОбработатьПредставлениеДанныхДляОператораЭДО", ЭтотОбъект, Контекст);
	СписокПредставлений.Добавить(ОписаниеПредставленияДанных, Представление);
	
	ОписаниеДанных.Вставить("СписокПредставлений", СписокПредставлений);
	ОписаниеДанных.Вставить("ПредставлениеНабора", НСтр("ru = 'Пользовательское соглашение, Данные для регистрации у оператора ЭДО'"));
	
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОНачалоНаСервере(ДвоичныеДанныеСоглашенияНаПодключениеЭДО, РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО)
	
	ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПредставлениеЗаявленияНаПодключениеКЭДО(РезультатВыполнения, Контекст) Экспорт
	
	ПерейтиПоНавигационнойСсылке("https://portal.1c.ru/applications/30/licenseAgreement");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПредставлениеДанныхДляОператораЭДО(РезультатВыполнения, Контекст) Экспорт
	
	ШаблонИмениВременногоФайла = НСтр("ru = 'Данные для регистрации у оператора ЭДО_%1'");
	ИмяВременногоФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениВременногоФайла,
		УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяВременногоФайла, "xml");
	
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(Контекст.ДвоичныеДанныеДляОператораЭДО, УникальныйИдентификатор);
	
	Результат = Новый Структура;
	Результат.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	Результат.Вставить("ОтносительныйПуть",            УникальныйИдентификаторЗаявки1СЭДО + "\");
	Результат.Вставить("ИмяФайла",                     ИмяВременногоФайлаСРасширением);
	Результат.Вставить("Наименование",                 ИмяВременногоФайла);
	Результат.Вставить("Расширение",                   "xml");
	Результат.Вставить("Редактирует",                  "");
	Результат.Вставить("Размер",                       "");
	Результат.Вставить("ДатаМодификацииУниверсальная", ОбщегоНазначенияКлиент.ДатаУниверсальная());
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОПродолжение2(РезультатВыполнения, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		// Оповещение произошло из процедуры БСП
		Если РезультатВыполнения.Свойство("НаборДанных") Тогда
			// Если Успех, необходимо перебрать элементы массива Набор данных
			// в подписанных эд в элементе массива являющимся структурой будет свойство "Свойства подписи"
			// такие ЭД надо добавить в массив "МассивЭД" для обновления их статусов.
			Для Каждого ПодписываемыеДанные Из РезультатВыполнения.НаборДанных Цикл
				Если Не ПодписываемыеДанные.Свойство("СвойстваПодписи") Тогда
					Возврат;
				КонецЕсли;
				
				СтруктураПодписи = ПодписываемыеДанные.СвойстваПодписи;
				Если ЭтоАдресВременногоХранилища(ПодписываемыеДанные.СвойстваПодписи) Тогда
					СтруктураПодписи = ПолучитьИзВременногоХранилища(СтруктураПодписи);
				КонецЕсли;
				Если Контекст.ДвоичныеДанныеСоглашенияНаПодключениеЭДО = ПодписываемыеДанные.Данные Тогда
				
					Контекст.Вставить("ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО", СтруктураПодписи.Подпись);
				КонецЕсли;
				Если Контекст.ДвоичныеДанныеДляОператораЭДО = ПодписываемыеДанные.Данные Тогда
				
					Контекст.Вставить("ПодписанныеДвоичныеДанныеДляОператораЭДО", СтруктураПодписи.Подпись);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Подготовим сертификат оператора ЭДО для шифрования информации
	Если Не ЗначениеЗаполнено(ОператорЭДОСертификат) Тогда
		ПодключенныеОператорыЭДО1СЭДО();
		
		ТекстСообщения = НСтр("ru = 'Ошибка получения сертификата оператора ЭДО.
									|Необходимо повторить получение идентификатора участника ЭДО.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	// Зашифровать
	ОписаниеПодписатьЭД = Новый ОписаниеОповещения("ПодготовитьДанныеДляРегистрационногоПакета1СЭДОЗавершение", ЭтотОбъект, Контекст);
	
	ТекстСертификата = ОператорЭДОСертификат;
	Если СтрНайти(ТекстСертификата, "-----BEGIN CERTIFICATE-----") > 0 Тогда
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----BEGIN CERTIFICATE-----", "");
		ТекстСертификата = СтрЗаменить(ТекстСертификата, "-----END CERTIFICATE-----", "");
	КонецЕсли;
	ДвоичныеДанныеСертификатаОператораЭДО = Base64Значение(ТекстСертификата);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Шифрование данных для регистрации у оператора ЭДО'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(ДвоичныеДанныеСертификатаОператораЭДО);
	ОписаниеДанных.Вставить("НаборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	ОписаниеДанных.Вставить("Данные",              Контекст.ДвоичныеДанныеДляОператораЭДО);
	ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл'"));
	ОписаниеДанных.Вставить("БезПодтверждения",    Ложь);
	
	Представление = Новый Структура;
	Представление.Вставить("Представление", НСтр("ru = 'Данные для регистрации у оператора ЭДО'"));
	ОписаниеПредставленияЗаявления = Новый ОписаниеОповещения("ОбработатьПредставлениеДанныхДляОператораЭДО", ЭтотОбъект, Контекст);
	Представление.Вставить("Значение",      ОписаниеПредставленияЗаявления);
	
	ОписаниеДанных.Вставить("Представление",       Представление);
	
	ЭлектроннаяПодписьКлиент.Зашифровать(ОписаниеДанных, , ОписаниеПодписатьЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляРегистрационногоПакета1СЭДОЗавершение(РезультатВыполнения, Контекст) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если Не РезультатВыполнения.Свойство("ЗашифрованныеДанные") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗашифрованныеДанныеОператораЭДО = РезультатВыполнения.ЗашифрованныеДанные;
	
	ЕстьОшибки = Ложь;
	СформироватьИОтправитьРегистрационныйПакет1СЭДО(Контекст.РеквизитыПакета, ЗашифрованныеДанныеОператораЭДО,
		Контекст.ПодписанныеДвоичныеДанныеДляОператораЭДО, Контекст.ДвоичныеДанныеСоглашенияНаПодключениеЭДО,
		Контекст.ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПараметрыАутентификацииНаСайте, ЕстьОшибки);
		
	Если Не ЕстьОшибки Тогда
		// Запустим обработчик ожидания результата регистрации организации у оператора.
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияДляЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, УникальныйИдентификаторЗаявки1СЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДвоичныеДанныеСоглашенияНаПодключениеЭДО)
	
	// Подготовим данные для соглашения с оператором ЭДО
	ИмяВременногоФайлаСоглашениеЭДО = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
	
	// LicenseCard
	СоглашениеЭДО = Новый ЗаписьXML;
	СоглашениеЭДО.ОткрытьФайл(ИмяВременногоФайлаСоглашениеЭДО, "windows-1251");
	СоглашениеЭДО.ЗаписатьОбъявлениеXML();
	
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("LicenseCard");
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("info");
	СоглашениеЭДО.ЗаписатьАтрибут("EDOAgreed", XMLСтрока(Истина));
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // info
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // LicenseCard
	
	СоглашениеЭДО.Закрыть();
	
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаСоглашениеЭДО);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаСоглашениеЭДО);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ДвоичныеДанныеДляОператораЭДО)
	
	УникальныйИдентификаторЗаявки1СЭДО = ОбменСКонтрагентамиСлужебный.НовыйUUID();
	
	// Подготовим данные для 1СЭДО
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИмяРеквизитаОГРНОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ОГРНОрганизации");
	ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации + ", " + ИмяРеквизитаНаименованиеОрганизации+ ", " + ИмяРеквизитаОГРНОрганизации);

	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СертификатКриптографии);
	
	РеквизитыПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО", УникальныйИдентификаторЗаявки1СЭДО);
	РеквизитыПакета.Вставить("НаименованиеОрганизации", ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации]);
	РеквизитыПакета.Вставить("ИННОрганизации",  СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
	РеквизитыПакета.Вставить("ИдентификаторОрганизации", "");
	РеквизитыПакета.Вставить("КППОрганизации",  СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
	РеквизитыПакета.Вставить("ОператорЭДО",     ОператорЭДО);
	РеквизитыПакета.Вставить("ОператорЭДОИд",   ОператорЭДОИд);
	РеквизитыПакета.Вставить("Сертификат", Новый Массив);
	
	РеквизитыПакета.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	
	Макет = Обработки.ОбменСКонтрагентами.ПолучитьМакет("РегистрационнаяИнформация");
	// Подготовим данные для оператора ЭДО
	ДеревоРегистрационнойИнформации = ЭлектронноеВзаимодействие.ДеревоДокумента(Макет);
	
	// Служебные данные
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ИдФайл",   "registration_" + УникальныйИдентификаторЗаявки1СЭДО);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсПрог", "1С:Предприятие 8");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсФорм", "5.02");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КНД",      "1115109");
	
	// Данные по налоговому органу
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КодНО", КодНалоговогоОргана);
	
	// Данные по оператору ЭДО
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.НаимОрг",   ОператорЭДО);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИдОперЭДО", ОператорЭДОИд);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИННЮЛ",     ОператорЭДОИНН);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.КПП",       ОператорЭДОКПП);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ОГРН",      ОператорЭДООГРН);
	
	// Данные по абоненту
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипЗаявления", "1");
		
	Если Не ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(Организация) Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.НаимОрг", ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации]);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ",   СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.КПП",     СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ОГРН",    СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Индекс",     Индекс);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.КодРегион",  КодРегиона);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Район",      Район);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Город",      Город);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.НаселПункт", НаселенныйПункт);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Улица",      Улица);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Дом",        Дом);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Корпус",     Корпус);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Кварт",      Квартира);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия",  ПараметрыСертификата.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя",      ПараметрыСертификата.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество", ПараметрыСертификата.Отчество);
		
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ИННФЛ",  СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ОГРНИП", СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Индекс",     Индекс);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.КодРегион",  КодРегиона);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Район",      Район);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Город",      Город);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.НаселПункт", НаселенныйПункт);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Улица",      Улица);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Дом",        Дом);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Корпус",     Корпус);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Кварт",      Квартира);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия",  СертификатКриптографии.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Имя",      СертификатКриптографии.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Отчество", СертификатКриптографии.Отчество);
	КонецЕсли;
	
	СертификатыПользователя = Новый ТаблицаЗначений;
	СертификатыПользователя.Колонки.Добавить("ДатаНачСертиф");
	СертификатыПользователя.Колонки.Добавить("ДатаКонСертиф");
	СертификатыПользователя.Колонки.Добавить("ОтпСертиф");
	СертификатыПользователя.Колонки.Добавить("Сертификат");
	СертификатыПользователя.Колонки.Добавить("Фамилия");
	СертификатыПользователя.Колонки.Добавить("Имя");
	СертификатыПользователя.Колонки.Добавить("Отчество");
	
	НоваяСтрока = СертификатыПользователя.Добавить();
	
	ТекущийСертификат = Новый СертификатКриптографии(ПараметрыСертификата.ДвоичныеДанныеСертификата);
	НоваяСтрока.ДатаНачСертиф = ТекущийСертификат.ДатаНачала;
	НоваяСтрока.ДатаКонСертиф = ПараметрыСертификата.ДействителенДо;
	
	Отпечаток = НРег(СТРЗаменить(Строка(Base64Значение(ПараметрыСертификата.Отпечаток))," ",""));
	НоваяСтрока.ОтпСертиф = Отпечаток;
	
	СертификатТекст = Base64Строка(ПараметрыСертификата.ДвоичныеДанныеСертификата);
	НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + символы.пс
							+ СертификатТекст + символы.пс
							+ "-----END CERTIFICATE-----";
	
	РеквизитыПакета.Сертификат.Добавить(СертификатТекст);
	
	НоваяСтрока.Фамилия  = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Фамилия, " ");
	НоваяСтрока.Имя      = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Имя, " ");
	НоваяСтрока.Отчество = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Отчество, " ");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоРегистрационнойИнформации, СертификатыПользователя, "УчастЭДО.СертифДолжн");
	
	// Данные по подписанту
	ДолжностьПоСертификату = 0;
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.Должность",    ДолжностьПоСертификату);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Имя",      ПараметрыСертификата.Имя);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Отчество", ПараметрыСертификата.Отчество);
	
	ДвоичныеДанныеДляОператораЭДО = ОбменСКонтрагентамиВнутренний.РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИОтправитьРегистрационныйПакет1СЭДО(РеквизитыПакета, ЗашифрованныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПараметрыАутентификации, ЕстьОшибки)
	
	ИмяФайлаПакетаДля1СЭДО = ОбменСКонтрагентамиСлужебный.РегистрационныйПакетДляОператораЭДО(РеквизитыПакета,
		ЗашифрованныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО);
		
	// Отправка заявления на сервис 1С-ЭДО
	ТекстЗаголовкаСообщения = НСтр("ru = 'Отправка заявления о регистрации на сервисе 1С-ЭДО'");
	
	ШаблонСообщения = НСтр("ru = 'Выполнение операции: %1
								|Заявление № %2'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстЗаголовкаСообщения,
		УникальныйИдентификаторЗаявки1СЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, 2, УровеньЖурналаРегистрации.Информация);
		
	ОбменСКонтрагентамиСлужебный.ОтправитьРегистрационныйПакет1СЭДО(ИмяФайлаПакетаДля1СЭДО, ПараметрыАутентификации, ЕстьОшибки);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаПакетаДля1СЭДО);
	
КонецПроцедуры

// Профиль настроек ЭДО

&НаКлиенте
Процедура ТестПрофиляНастроекЭДО()
	
	Отказ = Ложь;
	// Тестируем заполненность формы
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", "Организация"),
		,
		"Организация",
		,
		Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации)
		И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Идентификатор организации'")),
			,
			"ИдентификаторОрганизации",
			,
			Отказ);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СпособОбменаЭД) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Способ Обмена ЭД'")),
			,
			"СпособОбменаЭД",
			,
			Отказ);
	КонецЕсли;
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
		Если Не ЗначениеЗаполнено(ЭлектроннаяПочтаОрганизации) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Электронная почта организации'")),
			,
			"ЭлектроннаяПочтаОрганизации",
			,
			Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СертификатКриптографии) И ИспользоватьЭП Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Сертификат ключа электронной подписи'")),
				,
				"СертификатКриптографии",
				,
				Отказ);
		КонецЕсли;

	ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
		Если Не ЗначениеЗаполнено(КаталогВходящихДокументов) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Каталог входящих документов'")),
			,
			"КаталогВходящихДокументов",
			,
			Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СертификатКриптографии) И ИспользоватьЭП Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Сертификат ключа электронной подписи'")),
				,
				"СертификатКриптографии",
				,
				Отказ);
		КонецЕсли;

	ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
		Если Не ЗначениеЗаполнено(АдресСервераFTP) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Адрес сервера'")),
			,
			"АдресСервераFTP",
			,
			Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(FTPКаталогВходящихДокументов) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Каталог входящих документов'")),
			,
			"FTPКаталогВходящихДокументов",
			,
			Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СертификатКриптографии) И ИспользоватьЭП Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Сертификат ключа электронной подписи'")),
				,
				"СертификатКриптографии",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда

		Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
				"ИспользоватьЭлектронныеПодписиЭД") Тогда
		
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы(
				"НАСТРОЙКАКРИПТОГРАФИИ");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СертификатКриптографии) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Сертификат ключа электронной подписи'")),
				,
				"СертификатКриптографии",
				,
				Отказ);
		КонецЕсли;
		
		Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
			
			Если ТипРегистрации = 1 И Не ЗначениеЗаполнено(ИдентификаторОрганизацииСуществующий) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Идентификатор организации'")),
					,
					"ИдентификаторОрганизацииСуществующий",
					,
					Отказ);
					
			ИначеЕсли ТипРегистрации = 2 И Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Необходимо получить уникальный идентификатор участника обмена ЭД.'"), , , , Отказ);
			КонецЕсли;
		ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
			
			Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
				Если ОбменСКонтрагентамиСлужебныйКлиент.ИспользуетсяИнтернетПоддержкаПользователей() Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Необходимо получить уникальный идентификатор участника обмена ЭД.'"), , , , Отказ);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Идентификатор организации'")),
							,
							"ИдентификаторОрганизации",
							,
							Отказ);
				КонецЕсли;
			Иначе
				
				ИдентификаторОрганизации = СокрЛП(ИдентификаторОрганизации);
				ДлинаИдентификатора = СтрДлина(ИдентификаторОрганизации);
				Если ДлинаИдентификатора <> 46 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "КОРРЕКТНОСТЬ", НСтр("ru = 'Идентификатор организации'"), , ,
						НСтр("ru = 'Длина поля не равна 46.'")),
						,
						"ИдентификаторОрганизации",
						,
						Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
		
		Состояние(НСтр("ru = 'Создание профиля настроек ЭДО.'"),
			,
			НСтр("ru = 'Выполняется тестирование связи с оператором. Подождите...'"));
		
		Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО") Тогда
			Если (ТипЗнч(ПараметрыАутентификацииНаСайте) <> Тип("Структура")
				ИЛИ Не ЗначениеЗаполнено(ПараметрыАутентификацииНаСайте.Пароль))
				И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
				
				ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
					Новый ОписаниеОповещения("ТестСвязиСервисаЭДОПродолжить", ЭтотОбъект),
					ЭтотОбъект);
			Иначе
				ТестСвязиСервисаЭДОПродолжить(ПараметрыАутентификацииНаСайте, Неопределено);
			КонецЕсли;
		Иначе
			ТестСвязиСервисаЭДОЗавершение();
		КонецЕсли;
		
	Иначе
		ТестСвязиПройден = Истина;
		
		Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
			
			Состояние(НСтр("ru = 'Создание профиля настроек ЭДО.'"),
				,
				НСтр("ru = 'Выполняется тестирование обмена ЭД через электронную почту. Подождите...'"));
			ПроверитьУчетнуюЗаписьЭлектроннойПочтыИСоздатьНовыйПрофиль(ЭлектроннаяПочтаОрганизации);
			
		Иначе
			Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
				
				Состояние(НСтр("ru = 'Создание профиля настроек ЭДО.'"),
					,
					НСтр("ru = 'Выполняется тестирование обмена ЭД через каталог. Подождите...'"));
				ТестСвязиПрямогоОбменаНаСервере(КаталогВходящихДокументов, ТестСвязиПройден);
				
			ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
				
				Состояние(НСтр("ru = 'Создание профиля настроек ЭДО.'"),
					,
					НСтр("ru = 'Выполняется тестирование обмена ЭД через FTP. Подождите...'"));
				ТестСвязиОбменаЧерезFTPНаСервере(ТестСвязиПройден);
				
			КонецЕсли;
			
			Если ТестСвязиПройден Тогда
				СоздатьНовыйПрофиль();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчетнуюЗаписьЭлектроннойПочтыИСоздатьНовыйПрофиль(ЭлектроннаяПочтаОрганизации)
	
	СообщениеОбОшибке = "";
	ДополнительноеСообщение = "";
	РаботаСПочтовымиСообщениямиВызовСервера.ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(ЭлектроннаяПочтаОрганизации,
		СообщениеОбОшибке, ДополнительноеСообщение);
	
	СоздатьНовыйПрофиль();
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Проверка учетной записи эл. почты'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка параметров учетной записи завершилась с ошибками:
					   |%1'"), СообщениеОбОшибке ));
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Проверка учетной записи эл. почты'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проверка параметров учетной записи завершилась успешно. %1'"),
			ДополнительноеСообщение));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметры(ДанныеСохранены)
	
	НачатьТранзакцию();
	Попытка
		НовыйПрофильНастроек = Справочники.ПрофилиНастроекЭДО.СоздатьЭлемент();
		
		ШаблонНаименование = НСтр("ru = '%1, %2'");
		НовыйПрофильНастроек.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименование,
			Организация, СпособОбменаЭД);
			
		НовыйПрофильНастроек.Организация              = Организация;
		НовыйПрофильНастроек.ИдентификаторОрганизации = СокрЛП(ИдентификаторОрганизации);
		НовыйПрофильНастроек.СпособОбменаЭД           = СпособОбменаЭД;
		
		Если ТипРегистрации = 1 Тогда
			НовыйПрофильНастроек.ЭлектроннаяПочтаДляУведомлений = ЭлектроннаяПочтаСуществующая;
		Иначе
			НовыйПрофильНастроек.ЭлектроннаяПочтаДляУведомлений = ЭлектроннаяПочта;
		КонецЕсли;
		
		// Настройки сертификатов
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД") Тогда
			Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) ИЛИ ИспользоватьЭП Тогда
				
				НоваяСтрока = НовыйПрофильНастроек.СертификатыПодписейОрганизации.Добавить();
				НоваяСтрока.Сертификат = СертификатКриптографии;
			КонецЕсли;
		КонецЕсли;
		
		// Загружаем ТЧ из профиля настроек ЭДО.
		АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
		Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
			Если ЗначениеПеречисления <> Перечисления.ВидыЭД.Подтверждение
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.УведомлениеОбУточнении
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.Ошибка
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.ИзвещениеОПолучении
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.ПредложениеОбАннулировании
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.ТОРГ12Покупатель
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.АктЗаказчик
				И ЗначениеПеречисления <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				
				НоваяСтрока = НовыйПрофильНастроек.ИсходящиеДокументы.Добавить();
				НоваяСтрока.Формировать = Истина;
				НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
				
				Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
					"ИспользоватьЭлектронныеПодписиЭД") Тогда
					Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) ИЛИ ИспользоватьЭП Тогда
						НоваяСтрока.ИспользоватьЭП = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если (ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
					ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
					И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
					
					НоваяСтрока.Формировать = Ложь;
					НоваяСтрока.ИспользоватьЭП = Ложь;
					
				КонецЕсли;
				// Проставим в новые настройки ЭДО версию формата обмена.
				ВерсияФормата = "CML 2.08";
				Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					ВерсияФормата = "";
				ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.АктИсполнитель
					Или ЗначениеПеречисления = Перечисления.ВидыЭД.ТОРГ12Продавец
					Или ЗначениеПеречисления = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
					ВерсияФормата = "ФНС 5.01";
					
				ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.СчетФактура
					ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					ВерсияФормата = "ФНС 5.02";
					
				КонецЕсли;
				НоваяСтрока.ВерсияФормата = ВерсияФормата;
				
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
					НоваяСтрока.Приоритет = 1;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
					НоваяСтрока.Приоритет = 2;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					НоваяСтрока.Приоритет = 3;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
					НоваяСтрока.Приоритет = 4;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
					НоваяСтрока.Приоритет = 5;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					НоваяСтрока.Приоритет = 6;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					НоваяСтрока.Приоритет = 7;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
					НоваяСтрока.Приоритет = 10;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СчетНаОплату Тогда
					НоваяСтрока.Приоритет = 11;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ПрайсЛист Тогда
					НоваяСтрока.Приоритет = 12;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ЗаказТовара Тогда
					НоваяСтрока.Приоритет = 13;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
					НоваяСтрока.Приоритет = 14;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
					НоваяСтрока.Приоритет = 15;
				КонецЕсли;
				Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
					НоваяСтрока.Приоритет = 16;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.ДокументУчета) Тогда
					НоваяСтрока.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(ЗначениеПеречисления);
				КонецЕсли;
				
				НоваяСтрока.ТребуетсяИзвещениеОПолучении = Истина;
			
				Если Не (НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура
					Или НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
					
					НоваяСтрока.ТребуетсяОтветнаяПодпись = НоваяСтрока.ИспользоватьЭП;
					
					Если НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.СчетНаОплату Тогда
						НоваяСтрока.ТребуетсяОтветнаяПодпись = Ложь;
					КонецЕсли;
					
				Иначе
					НоваяСтрока.ТребуетсяОтветнаяПодпись = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		НовыйПрофильНастроек.ИсходящиеДокументы.Сортировать("Приоритет");
		
		// Настройки обмена ЭД
		Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			НовыйПрофильНастроек.РесурсВходящихДокументов = КаталогВходящихДокументов;
			
		ИначеЕсли СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			НовыйПрофильНастроек.РесурсВходящихДокументов = ЭлектроннаяПочтаОрганизации;
		
		ИначеЕсли СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			НовыйПрофильНастроек.АдресСервера             = АдресСервераFTP;
			НовыйПрофильНастроек.Порт                     = ПортFTP;
			НовыйПрофильНастроек.ПассивноеСоединение      = ПассивноеСоединениеFTP;
			НовыйПрофильНастроек.Логин                    = ПользовательFTP;
			НовыйПрофильНастроек.Пароль                   = ПарольFTP;
			НовыйПрофильНастроек.РесурсВходящихДокументов = FTPКаталогВходящихДокументов;
			
		ИначеЕсли СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			Если ТипРегистрации = 1 Тогда
				НовыйПрофильНастроек.ИдентификаторОрганизации = СокрЛП(ИдентификаторОрганизацииСуществующий);
			КонецЕсли;
			
			// Заполним данные по адресу организации
			НовыйПрофильНастроек.Индекс          = Индекс;
			НовыйПрофильНастроек.КодРегиона      = КодРегиона;
			НовыйПрофильНастроек.Регион          = Регион;
			НовыйПрофильНастроек.Район           = Район;
			НовыйПрофильНастроек.Город           = Город;
			НовыйПрофильНастроек.НаселенныйПункт = НаселенныйПункт;
			НовыйПрофильНастроек.Улица           = Улица;
			НовыйПрофильНастроек.Дом             = Дом;
			НовыйПрофильНастроек.Корпус          = Корпус;
			НовыйПрофильНастроек.Квартира        = Квартира;
			
			// Заполним данные код налогового органа организации
			НовыйПрофильНастроек.КодНалоговогоОргана = КодНалоговогоОргана;
			
			// Заполним данные по оператору ЭДО
			НовыйПрофильНастроек.ОператорЭДО     = ОператорЭДО;
			НовыйПрофильНастроек.ОператорЭДОИд   = ОператорЭДОИд;
			НовыйПрофильНастроек.ОператорЭДОИНН  = ОператорЭДОИНН;
			НовыйПрофильНастроек.ОператорЭДОКПП  = ОператорЭДОКПП;
			НовыйПрофильНастроек.ОператорЭДООГРН = ОператорЭДООГРН;
		КонецЕсли;
		
		Если НовыйПрофильНастроек.ПрофильНастроекЭДОУникален() Тогда
			НовыйПрофильНастроек.Записать();
		Иначе
			ОтменитьТранзакцию();
			ДанныеСохранены = Ложь;
			Возврат;
		КонецЕсли;
		СсылкаНаПрофильНастроек = НовыйПрофильНастроек.Ссылка;
		УстановитьДатуСостоянияОбмена(СсылкаНаПрофильНастроек);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ДанныеСохранены = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуСостоянияОбмена(СсылкаНаПрофильНастроек)
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрофильНастроекЭДО.Установить(СсылкаНаПрофильНастроек);
	НаборЗаписей.Прочитать();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ДатаПолученияЭД = НачалоДня(ТекущаяДатаСеанса());
	НоваяЗапись.ПрофильНастроекЭДО = СсылкаНаПрофильНастроек;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обмен через сервис ЭДО

&НаКлиенте
Процедура ТестСвязиСервисаЭДОПродолжить(ПараметрыАутентификации, Контекст) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура")
		И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ПараметрыАутентификацииНаСайте = Неопределено;
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификацииНаСайте = ПараметрыАутентификации;
	ТестСвязиСервисаЭДОЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОЗавершение()
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи", СертификатКриптографии);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", СпособОбменаЭД);
	
	Если ТипРегистрации = 1 Тогда
		
		СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизацииСуществующий);
	Иначе
		СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	КонецЕсли;
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(
		СтруктураПараметровЗапросаМаркера, ПараметрыАутентификацииНаСайте, Истина);
	Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ОбработкаЗавершения = Новый ОписаниеОповещения("ДействияПослеТестаСвязиЭДО", ЭтотОбъект, ДополнительныеПараметры);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Тест аутентификации в сервисе ЭДО'"));
	
	МассивСертификатов = Новый Массив;
	МассивСертификатов.Добавить(СертификатКриптографии);
	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("Данные",              ЗашифрованныеДанные);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеТестаСвязиЭДО(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Если РезультатВыполнения.Успех = Истина Тогда
			
			Если ТипРегистрации = 1 Тогда
				Идентификатор = ИдентификаторОрганизацииСуществующий;
			Иначе
				Идентификатор = ИдентификаторОрганизации;
			КонецЕсли;
			РасшифрованныйМаркер = РезультатВыполнения.РасшифрованныеДанные;
			
			// После того как получили расшифрованные данные необходимо получить зарегистрированный
			// адрес электронной почты.
			НастройкиПодключения = НастройкиОповещения(РасшифрованныйМаркер, Идентификатор);
			
			Если Не НастройкиПодключения = Неопределено Тогда
				ЭлектроннаяПочтаСуществующая = НастройкиПодключения.ЭлектроннаяПочта;
				УведомлятьОСобытиях = НастройкиПодключения.УведомлятьОСобытиях;
			КонецЕсли;
			
			СоздатьНовыйПрофиль();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиОповещения(РасшифрованныйМаркер, Идентификатор)
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	АдресРесурса = "GetSubscriptions/?query=" + Идентификатор;
	ВидОперации = НСтр("ru = 'Получение информации о свойствах подписки ЭДО'");
	
	Настройка = ОбменСКонтрагентамиВнутренний.РезультатОперацииЭДОПолучить(РасшифрованныйМаркер, СпособОбмена, АдресРесурса, ВидОперации);
	
	Если Настройка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиОповещения = Новый Структура;
	НастройкиОповещения.Вставить("ЭлектроннаяПочта", Настройка.Mail);
	НастройкиОповещения.Вставить("УведомлятьОСобытиях",
		ОбменСКонтрагентамиСлужебный.ЗначениеСтатуса(Настройка.Total.Status));

	Возврат НастройкиОповещения;
	
КонецФункции

// Обмен через каталог

&НаСервереБезКонтекста
Процедура ТестСвязиПрямогоОбменаНаСервере(КаталогВходящихДокументов, Отказ)
	
	// Блок проверки доступа к каталогам.
	Попытка
		Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогВходящихДокументов) Тогда
			ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("107");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Отказ = Истина;
		КонецЕсли;
	Исключение
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("107");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Обмен через FTP

&НаСервере
Процедура ТестСвязиОбменаЧерезFTPНаСервере(Отказ)
	
	ИспользоватьПрокси = Ложь;
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ПараметрИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Если НЕ ПараметрИспользоватьПрокси=Неопределено Тогда
			ИспользоватьПрокси = ПараметрИспользоватьПрокси;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") Тогда
			// Системные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси(Истина);
		Иначе
			// Ручные настройки прокси-сервера.
			Прокси = Новый ИнтернетПрокси;
			Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"],
				НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"]);
			Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
			
		КонецЕсли;
	Иначе
		Прокси = Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	Таймаут = 30;
	Попытка
		FTPСоединение = Новый FTPСоединение(АдресСервераFTP,
											ПортFTP,
											ПользовательFTP,
											ПарольFTP,
											Прокси,
											ПассивноеСоединениеFTP,
											Таймаут);
	Исключение
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("121");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Попытка
		ОбменСКонтрагентамиСлужебный.ПодготовитьПутьFTP(FTPКаталогВходящихДокументов);
		FTPСоединение.УстановитьТекущийКаталог(FTPКаталогВходящихДокументов);
	Исключение
		ОбменСКонтрагентамиСлужебный.СоздатьКаталогиFTP(FTPСоединение, FTPКаталогВходящихДокументов, Истина, ТекстОшибки);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроверитьФайл(FTPСоединение, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФайл(FTPСоединение, ТекстОшибки)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТестоваяСтрока = НСтр("ru = 'Тестовая строка 1С: Предприятие'");
	ТекстовыйДокумент.УстановитьТекст(ТестоваяСтрока);
	ТекстовыйДокумент.Записать(ВремФайл);
	ФайлТест = Новый Файл(ВремФайл);
	
	ОбменСКонтрагентамиСлужебный.ЗаписатьФайлНаFTP(FTPСоединение, ВремФайл, ФайлТест.Имя, Истина, ТекстОшибки);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлПолучатель = ПолучитьИмяВременногоФайла();
	
	ОбменСКонтрагентамиСлужебный.ПолучитьФайлСFTP(FTPСоединение, ФайлТест.Имя, ФайлПолучатель, Истина, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПолучатель);
		Возврат;
	КонецЕсли;
		
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПолучатель);
	СтрокаРезультата = ТекстовыйДокумент.ПолучитьТекст();
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлПолучатель);
	Если НЕ СтрокаРезультата = ТестоваяСтрока Тогда
		ШаблонСообщения = НСтр("ru = '%1 %2.'");
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("126");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстСообщения,
			FTPСоединение.ТекущийКаталог());
		Возврат;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебный.УдалитьФайлFTP(FTPСоединение, ФайлТест.Имя, Истина, ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйПрофиль()
	
	ДанныеСохранены = Истина;
	СохранитьПараметры(ДанныеСохранены);
	Если ДанныеСохранены Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			ПараметрыФормы = Новый Структура;
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Контрагент",  Контрагент);
			ЗначенияЗаполнения.Вставить("Организация", Организация);
			ЗначенияЗаполнения.Вставить("ПрофильНастроекЭДО", СсылкаНаПрофильНастроек);
			
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии);
			
		Иначе
			ПоказатьОповещениеПользователя("Создание",
				ПолучитьНавигационнуюСсылку(СсылкаНаПрофильНастроек), СсылкаНаПрофильНастроек);
				
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", СсылкаНаПрофильНастроек);
			ОткрытьФорму("Справочник.ПрофилиНастроекЭДО.Форма.ФормаЭлемента", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии);
		КонецЕсли;
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		Оповестить("ОбновитьСостояниеЭД");
		
		// Оповещение для БП_3.0 - удалить задачу подключения из начальной страницы.
		Оповестить("СозданПрофиль1СЭДО", Организация);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ПередЗакрытиемЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	// При изменении организации адрес электронной почты можно взять из подсистемы КонтактнаяИнформация.
	
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			УстановитьИдентификатор("Организации", Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")
		И ЗначениеЗаполнено(Организация) Тогда
		
		ЗаполнитьРеквизитыПоИНННаКлиенте();
	КонецЕсли;
	
	УстановитьЗначенияПоУмолчанию();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭППриИзмененииЗавершить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			СертификатКриптографии = ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка");
		Иначе
			// Вернем все как было.
			ИспользоватьЭП = Не ИспользоватьЭП;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
		КаталогВходящихДокументов = ВыбранныеФайлы[0];
	ИначеЕсли СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
		FTPКаталогВходящихДокументов = ВыбранныеФайлы[0];
	КонецЕсли;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(ВыбранныеФайлы[0]);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НадписьИдентификаторУчастникаОбменаЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

КонецПроцедуры

#КонецОбласти