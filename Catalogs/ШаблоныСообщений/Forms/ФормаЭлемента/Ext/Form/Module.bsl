#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ = Неопределено Или Параметры.Ключ.Пустая() Тогда
		Если Параметры.ЗначениеКопирования = Справочники.ШаблоныСообщений.ПустаяСсылка() Тогда
			
			Если ЗначениеЗаполнено(Параметры.ПолноеИмяТипаОснования) Тогда
				// Контекстный вызов
				Объект.ПолноеИмяТипаПараметраВводаНаОсновании = Параметры.ПолноеИмяТипаОснования;
				Элементы.ГруппаНазначение.Видимость = Ложь;
				Объект.ПредназначенДляВводаНаОсновании = Истина;
			// УНФ
			ИначеЕсли ЗначениеЗаполнено(Объект.ПолноеИмяТипаПараметраВводаНаОсновании) Тогда
				// Контекстный вызов
				Элементы.ГруппаНазначение.Видимость = Ложь;
				Объект.ПредназначенДляВводаНаОсновании = Истина;
			// УНФ
			Иначе
				Объект.ПредназначенДляВводаНаОсновании = Ложь;
			КонецЕсли;
			
			ИнициализироватьНовыйШаблонСообщений();
		Иначе
			СписокФайлов = Новый Массив;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
				МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлы");
				МодульПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Параметры.ЗначениеКопирования, СписокФайлов);
				Для каждого Вложение Из СписокФайлов Цикл
					Если ПустаяСтрока(Вложение.ИДФайлаЭлектронногоПисьма) Тогда
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Вложение.Расширение);
						МодульПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Вложение).Записать(ИмяВременногоФайла);
						НоваяСтрока = Вложения.Добавить();
						НоваяСтрока.Имя = ИмяВременногоФайла;
						НоваяСтрока.Представление = Вложение.Наименование + "." + Вложение.Расширение;
						НоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайла(Вложение.Расширение);
						НоваяСтрока.Статус = "ВнешнийНовый";
						НоваяСтрока.Идентификатор = Вложение.Описание;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого ПараметрыЗначениеКопирования Из Параметры.ЗначениеКопирования.Параметры Цикл
				Отбор = Новый Структура("ИмяПараметра", ПараметрыЗначениеКопирования.ИмяПараметра);
				НайденныеСтроки = Объект.Параметры.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ОписаниеТипа = ПараметрыЗначениеКопирования.ТипПараметра.Получить();
				КонецЕсли
			КонецЦикла;
			
			УстановитьТекстШаблона(Объект, СписокФайлов);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиШаблоновСообщений = ШаблоныСообщенийСлужебный.ПриОпределенииНастроек();
	Для каждого ПредметШаблона Из НастройкиШаблоновСообщений.ПредметыШаблонов Цикл
		Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.СписокВыбора.Добавить(ПредметШаблона.Имя, ПредметШаблона.Представление);
	КонецЦикла;
	
	ОтображениеЭлементовФормы();
	
	ИнициализироватьФорматыСохранения();
	СформироватьСписокРеквизитовИПечатныхФорм();
	
	ИспользоватьПроизвольныеПараметры = НастройкиШаблоновСообщений.ИспользоватьПроизвольныеПараметры;
	Если НЕ ИспользоватьПроизвольныеПараметры Тогда
		Элементы.ГруппаРеквизитыКоманднаяПанель.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюДобавить.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюИзменить.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюУдалить.Видимость = Ложь;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Объект.Назначение, "Служебный") Тогда
		Элементы.ГруппаНазначение.Видимость = Ложь;
		Элементы.ГруппаДоступ.Видимость = Ложь;
		Элементы.ФормаГруппаСообщениеФормируется.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьТекстШаблона(ТекущийОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Если ВыбранныеФорматыСохранения.Количество() = 0 Тогда
			Для Каждого ФорматСохранения Из МодульУправлениеПечатью.ФорматыСохраненияТабличногоДокумента() Цикл
				ВыбранныеФорматыСохранения.Добавить(ФорматСохранения.ТипФайлаТабличногоДокумента, Строка(ФорматСохранения.Ссылка), Ложь, ФорматСохранения.Картинка);
			КонецЦикла;
		КонецЕсли;

		СписокФорматов = ТекущийОбъект.ФорматВложений.Получить();
		Если СписокФорматов <> Неопределено Тогда
			ВыбранныеФорматыСохранения.ЗаполнитьПометки(Ложь);
			Для Каждого ЭлементСписка Из СписокФорматов Цикл
				НайденноеЗначение = ВыбранныеФорматыСохранения.НайтиПоЗначению(ЭлементСписка.Значение);
				Если НайденноеЗначение <> Неопределено Тогда
					НайденноеЗначение.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ПараметрШаблонаТекущийОбъект Из ТекущийОбъект.Параметры Цикл
		Отбор = Новый Структура("ИмяПараметра", ПараметрШаблонаТекущийОбъект.ИмяПараметра);
		НайденныеСтроки = Объект.Параметры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ОписаниеТипа = ПараметрШаблонаТекущийОбъект.ТипПараметра.Получить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РезультатПроверкиШаблоны = РезультатПроверкиШаблоны();
	Если ЗначениеЗаполнено(РезультатПроверкиШаблоны) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Шаблон сообщения не может быть записан.'") + Символы.ПС
			+ РезультатПроверкиШаблоны);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		ПоместитьНовыеФайлыВоВременноеХранилище(Вложения, УникальныйИдентификатор, Отказ);
	#КонецЕсли
	
	Объект.ТолькоДляАвтора = ?(Доступно = 1, Ложь, Истина);
	Если НЕ Объект.ПредназначенДляВводаНаОсновании Тогда
		Объект.ПолноеИмяТипаПараметраВводаНаОсновании = "";
		Объект.Назначение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПоместитьНовыеФайлыВоВременноеХранилище(Вложения, УникальныйИдентификатор, Отказ);
	
	Если ТекущийОбъект.ПредназначенДляSMS Тогда
		ТекущийОбъект.ТекстШаблонаSMS = ТелоСообщенияОбычныйТекст.ПолучитьТекст();
		ТекущийОбъект.ФорматВложений = Неопределено;
	Иначе
		Если ТекущийОбъект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			ТекстВHTML = "";
			ВложенияВHTML = Новый Структура();
			ТелоПисьмаВHTML.ПолучитьHTML(ТекстВHTML, ВложенияВHTML);
			ТекущийОбъект.ТекстШаблонаПисьмаHTML = ТекстВHTML;
			ТекущийОбъект.ТекстШаблонаПисьма = ТелоПисьмаВHTML.ПолучитьТекст();
		Иначе
			ТекущийОбъект.ТекстШаблонаПисьма = ТелоСообщенияОбычныйТекст.ПолучитьТекст();
			Если ПустаяСтрока(ТекущийОбъект.ТекстШаблонаПисьма) Тогда
				ТекущийОбъект.ТекстШаблонаПисьма = ТелоПисьмаВHTML.ПолучитьТекст();
			КонецЕсли;
			ТекущийОбъект.ТекстШаблонаПисьмаHTML = ТекущийОбъект.ТекстШаблонаПисьма;
		КонецЕсли;
		
		СписокФорматов = Новый СписокЗначений;
		Для каждого ЭлементСписка Из ВыбранныеФорматыСохранения Цикл
			Если ЭлементСписка.Пометка Тогда
				ЗаполнитьЗначенияСвойств(СписокФорматов.Добавить(), ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		ТекущийОбъект.ФорматВложений = Новый ХранилищеЗначения(СписокФорматов);
		
	КонецЕсли;
	
	ТаблицаСоответствийИменВложенийИдентификаторам = Новый СписокЗначений;
	СтруктураВложений = Новый Структура;
	ТелоПисьмаВHTML.ПолучитьHTML(ТекущийОбъект.ТекстШаблонаПисьмаHTML, СтруктураВложений);
	Для каждого Вложение Из СтруктураВложений Цикл
		ТаблицаСоответствийИменВложенийИдентификаторам.Добавить(Вложение.Ключ, Новый УникальныйИдентификатор,, Вложение.Значение);
	КонецЦикла;
	
	ПараметрыЗаписи.Вставить("ВложенияHTML", ТаблицаСоответствийИменВложенийИдентификаторам);
	
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = ШаблоныСообщенийСлужебный.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстШаблонаПисьмаHTML);
			ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML( ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам);
			ТекущийОбъект.ТекстШаблонаПисьмаHTML = ШаблоныСообщенийСлужебный.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
	КонецЕсли;
	
	ТекущийОбъект.ПечатныеФормыИВложения.Очистить();
	Для каждого Вложение Из Вложения Цикл
		Если Вложение.Выбрано = 1 Тогда
			НоваяСтрока = ТекущийОбъект.ПечатныеФормыИВложения.Добавить();
			НоваяСтрока.Идентификатор = Вложение.Идентификатор;
			НоваяСтрока.Имя = Вложение.ИмяПараметра;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.Параметры.Очистить();
	Для каждого ПараметрШаблона Из Объект.Параметры Цикл
		НоваяСтрока = ТекущийОбъект.Параметры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрШаблона);
		НоваяСтрока.ТипПараметра = Новый ХранилищеЗначения(ПараметрШаблона.ОписаниеТипа);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлы");
		СписокФайлов = Новый Массив;
		МодульПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(ТекущийОбъект.Ссылка, СписокФайлов);
		Для каждого Вложение Из СписокФайлов Цикл
			Если ЗначениеЗаполнено(Вложение.ИДФайлаЭлектронногоПисьма) Тогда
				УдалитьПрисоединенныйФайл(Вложение.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СохранитьКартинкиФорматированногоДокументаКакПрисоединенныеФайлы(ТекущийОбъект.Ссылка, 
		ТекущийОбъект.ТипТекстаПисьма, ПараметрыЗаписи.ВложенияHTML, УникальныйИдентификатор);
	
	Индекс = Вложения.Количество() - 1;
	Пока Индекс >= 0 Цикл
		СтрокаТаблицыВложений = Вложения.Получить(Индекс);
		Если СтрокаТаблицыВложений.Статус = "ВнешнийУдаляемый" Тогда
			Если Не СтрокаТаблицыВложений.Ссылка.Пустая() Тогда
				УдалитьПрисоединенныйФайл(СтрокаТаблицыВложений.Ссылка);
			КонецЕсли;
			Если ПустаяСтрока(СтрокаТаблицыВложений.Реквизит) Тогда
				Вложения.Удалить(Индекс)
			Иначе
				СтрокаТаблицыВложений.Статус  = "";
				СтрокаТаблицыВложений.Выбрано = 2;
			КонецЕсли;
		ИначеЕсли СтрокаТаблицыВложений.Статус = "ВнешнийНовый" Тогда
			ИмяФайла = ?(ПустаяСтрока(СтрокаТаблицыВложений.Реквизит), СтрокаТаблицыВложений.Представление, СтрокаТаблицыВложений.Реквизит);
			СсылкаНаФайл = ШаблоныСообщенийСлужебный.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(ТекущийОбъект.Ссылка, СтрокаТаблицыВложений, ИмяФайла, 0);
			СтрокаТаблицыВложений.Ссылка = СсылкаНаФайл;
			СтрокаТаблицыВложений.Статус ="ВнешнийПрисоединенный";
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОтображениеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ПослеЗаписиШаблонаСообщения", Объект.Ссылка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВыборФормата();
	СформироватьПредставлениеВыбранныхФорматов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолноеИмяТипаПараметраВводаНаОснованииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.ПолноеИмяТипаПараметраВводаНаОсновании = ВыбранноеЗначение;
	Представление = Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление;
	Объект.Назначение = Представление;
	СформироватьСписокРеквизитовИПечатныхФорм();

КонецПроцедуры

&НаКлиенте
Процедура ВариантыНазначенияДляВсехПриИзменении(Элемент)
	Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.Доступность = ВариантыНазначения;
	Объект.ПредназначенДляВводаНаОсновании = (ВариантыНазначения = 1);
	СформироватьСписокРеквизитовИПечатныхФорм();
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяОбработкаПриИзменении(Элемент)
	ОтображениеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ФорматВложенийНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РезультатВыбораФорматов = Неопределено;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатьюСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюСлужебныйКлиент");
		Оповещение = Новый ОписаниеОповещения("ФорматВложенийНажатиеЗавершение", ЭтотОбъект);
		МодульУправлениеПечатьюСлужебныйКлиент.ОткрытьФормуВыбораФорматаВложений(ВыбранныеНастройкиФормата(), Оповещение);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматВложенийНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыбораФорматов = Результат;
	Если РезультатВыбораФорматов <> КодВозвратаДиалога.Отмена И РезультатВыбораФорматов <> Неопределено Тогда
		УстановитьВыборФормата(РезультатВыбораФорматов.ФорматыСохранения);
		Объект.УпаковатьВАрхив = РезультатВыбораФорматов.УпаковатьВАрхив;
		СформироватьПредставлениеВыбранныхФорматов();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныеНастройкиФормата()
	
	ФорматыСохранения = Новый Массив;
	
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ВыбранныйФормат.Пометка Тогда
			ФорматыСохранения.Добавить(ВыбранныйФормат.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("УпаковатьВАрхив", Объект.УпаковатьВАрхив);
	Результат.Вставить("ФорматыСохранения", ФорматыСохранения);
	Результат.Вставить("Получатели", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВыборФормата(Знач ФорматыСохранения = Неопределено)
	
	Если Объект.ПредназначенДляSMS Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьВыбранныйФормат = Ложь;
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ФорматыСохранения <> Неопределено Тогда
			ВыбранныйФормат.Пометка = ФорматыСохранения.Найти(ВыбранныйФормат.Значение) <> Неопределено;
		КонецЕсли;
			
		Если ВыбранныйФормат.Пометка Тогда
			ЕстьВыбранныйФормат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьВыбранныйФормат Тогда
		ВыбранныеФорматыСохранения[0].Пометка = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеВыбранныхФорматов()
	
	ФорматПечатныхФорм = "";
	КоличествоФорматов = 0;
	Для Каждого ВыбранныйФормат Из ВыбранныеФорматыСохранения Цикл
		Если ВыбранныйФормат.Пометка Тогда
			Если Не ПустаяСтрока(ФорматПечатныхФорм) Тогда
				ФорматПечатныхФорм = ФорматПечатныхФорм + ", ";
			КонецЕсли;
			ФорматПечатныхФорм = ФорматПечатныхФорм + ВыбранныйФормат.Представление;
			КоличествоФорматов = КоличествоФорматов + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступВсемПользователямПриИзменении(Элемент)
	Доступно = 1;
КонецПроцедуры

&НаКлиенте
Процедура ДоступТолькоАвторуПриИзменении(Элемент)
	Доступно = 0;
КонецПроцедуры

&НаКлиенте
Процедура ТелоПисьмаВHTMLПриИзменении(Элемент)
	ТелоПисьмаВHTML.ПолучитьHTML(Объект.ТекстШаблонаПисьмаHTML, Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура ТелоСообщенияОбычныйТекстПриИзменении(Элемент)
	Объект.ТекстШаблонаПисьма = ТелоСообщенияОбычныйТекст.ПолучитьТекст();
КонецПроцедуры

&НаКлиенте
Процедура ТелоСообщенияОбычныйТекстSMSПриИзменении(Элемент)
	Объект.ТекстШаблонаSMS = ТелоСообщенияОбычныйТекст.ПолучитьТекст();
	ТелоСообщенияОбычныйТекст.УстановитьТекст(Объект.ТекстШаблонаSMS); // Тех. ограничение SMS 1024 символа.
КонецПроцедуры

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.Автор = ПользователиКлиентСервер.АвторизованныйПользователь();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ДобавитьВложениеВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СвойстваВложения(Команда)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИндексВКоллекции = Вложения.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.ШаблоныСообщенийПрисоединенныеФайлы.ПустаяСсылка") Тогда
		ДополнительныеПараметры = Новый Структура("ТекущийИндексВКоллекции", ТекущийИндексВКоллекции);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ВопросОЗаписиФайлаПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Свойства файла доступны только после его записи. Записать?'");
		ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьСвойстваВложения(ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	УдалитьВложениеВыполнить();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Статус = "ПечатнаяФорма" Или ЗначениеЗаполнено(ТекущиеДанные.Реквизит) Тогда
		Элементы.ВложенияКонтекстноеМенюУдалить.Доступность = Ложь;
		Элементы.ВложенияКонтекстноеМенюИзменитьВложение.Доступность = Ложь;
		Элементы.ВложенияКонтекстноеМенюСвойстваВложения.Доступность = Ложь;
		Элементы.ВложенияСвойстваВложения.Доступность = Ложь;
		Элементы.ВложенияУдалить.Доступность = Ложь;
	Иначе
		Элементы.ВложенияКонтекстноеМенюУдалить.Доступность = Истина;
		Элементы.ВложенияКонтекстноеМенюИзменитьВложение.Доступность = Истина;
		Элементы.ВложенияКонтекстноеМенюСвойстваВложения.Доступность = Истина;
		Элементы.ВложенияСвойстваВложения.Доступность = Истина;
		Элементы.ВложенияУдалить.Доступность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВложение(Команда)
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВложениеВыполнить(ТекущиеДанные.Идентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбранПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ТекущиеДанные.Реквизит) Тогда
		Если ТекущиеДанные.Выбрано = 2 Тогда
			ТекущиеДанные.Выбрано = 0;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.Выбрано = 0 Тогда
			ТекущиеДанные.Выбрано = 2;
			ДобавитьВложениеВыполнить(ТекущиеДанные.Идентификатор);
		ИначеЕсли ТекущиеДанные.Выбрано = 2 Тогда
			ТекущиеДанные.Статус = "ВнешнийУдаляемый";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизиты

&НаКлиенте
Процедура РеквизитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если ИспользоватьПроизвольныеПараметры Тогда
		ДополнительныеПараметры = Новый Структура("Добавление", Истина);
		ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыПараметра", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокПараметров, ПолноеИмяТипаПараметраВводаНаОсновании", Объект.Параметры, Объект.ПолноеИмяТипаПараметраВводаНаОсновании);
		ОткрытьФорму("Справочник.ШаблоныСообщений.Форма.ПроизвольныйПараметр", ПараметрыФормы,,,,, ОповещениеОЗакрытие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	ДоступностьФорматированногоВывода = Ложь;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ПроизвольныйПараметр Тогда
			Элементы.РеквизитыКонтекстноеМенюУдалить.Доступность = Истина;
			Элементы.Удалить.Доступность = Истина;
		Иначе
			Элементы.РеквизитыКонтекстноеМенюУдалить.Доступность = Ложь;
			Элементы.Удалить.Доступность = Ложь;
		КонецЕсли;
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрПочта.Доступность = Ложь;
			Элементы.РеквизитыМенюДобавитьПараметрПочта.Доступность = Ложь;
			Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщенияДляSMS.Доступность = Ложь;
			Элементы.РеквизитыМенюДобавитьПараметрВТекстСообщенияSMS.Доступность = Ложь;
		Иначе
			Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрПочта.Доступность = Истина;
			Элементы.РеквизитыМенюДобавитьПараметрПочта.Доступность = Истина;
			Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщенияДляSMS.Доступность = Истина;
			Элементы.РеквизитыМенюДобавитьПараметрВТекстСообщенияSMS.Доступность = Истина;
			Для каждого Тип Из ТекущиеДанные.Тип.Типы() Цикл
				Если Тип = Тип("Дата") Или Тип = Тип("Число") Или Тип = Тип("Булево") Тогда
					ДоступностьФорматированногоВывода = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Элементы.ФорматОтображенияРеквизита.Доступность = ДоступностьФорматированногоВывода;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ИспользоватьПроизвольныеПараметры Тогда
		Реквизит = Реквизиты.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Реквизит.ПроизвольныйПараметр Тогда
			ДополнительныеПараметры = Новый Структура("Добавление, ВыбраннаяСтрока", Ложь, ВыбраннаяСтрока);
			ПараметрыФормы = Новый Структура("ИмяПараметра, ПредставлениеПараметра, ОписаниеТипа", Реквизит.Имя, Реквизит.Представление, Реквизит.Тип);
			ПараметрыФормы.Вставить("СписокПараметров", Объект.Параметры);
			ПараметрыФормы.Вставить("ПолноеИмяТипаПараметраВводаНаОсновании", Объект.ПолноеИмяТипаПараметраВводаНаОсновании);
			
			ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыПараметра", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Справочник.ШаблоныСообщений.Форма.ПроизвольныйПараметр", ПараметрыФормы,,,,, ОповещениеОЗакрытие);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПеретаскиваемыеОбъекты = ПараметрыПеретаскивания.Значение;
	ТекстДляВставки = "";
	Разделитель = "";
	Для каждого ПеретаскиваемыйОбъект Из ПеретаскиваемыеОбъекты Цикл
		ЭлементДерева = Реквизиты.НайтиПоИдентификатору(ПеретаскиваемыйОбъект);
		Если ЭлементДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			ФорматВывода = ?(ПустаяСтрока(ЭлементДерева.Формат), "", "{" + ЭлементДерева.Формат +"}");
			ТекстДляВставки = ТекстДляВставки + Разделитель + "[" + ЭлементДерева.Имя + ФорматВывода + "]";
			Разделитель = " ";
		КонецЕсли;
	КонецЦикла;
	ПараметрыПеретаскивания.Значение = ТекстДляВставки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПередУдалением(Элемент, Отказ)
	Если ИспользоватьПроизвольныеПараметры Тогда
		
		ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено ИЛИ НЕ ТекущиеДанные.ПроизвольныйПараметр Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ТекущиеДанные.Имя, ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()) Тогда
			Отбор = Новый Структура("ИмяПараметра", Сред(ТекущиеДанные.Имя, СтрДлина(ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()) + 2));
		Иначе
			Отбор = Новый Структура("ИмяПараметра", ТекущиеДанные.Имя);
		КонецЕсли;
		НайденныеСтроки = Объект.Параметры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Объект.Параметры.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЭлектронноеПисьмоОбычныйТекст(Команда)
	УстановитьЭлектронноеПисьмоОбычныйТекст(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронноеПисьмоHTML(Команда)
	УстановитьЭлектронноеПисьмоHTML(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШаблон(Команда)
	
	ОчиститьСообщения();
	РезультатПроверкиШаблоны = РезультатПроверкиШаблоны();
	Если ЗначениеЗаполнено(РезультатПроверкиШаблоны) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверкиШаблоны);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Шаблон заполнен корректно'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнейОбработкой(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораДополнительныеОтчетыИОбработки", ЭтотОбъект);
		ИмяВида = "ВидыДополнительныхОтчетовИОбработок.ШаблонСообщения";
		ЗначениеОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление." + ИмяВида));
		ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
		ИмяФормыДополнительныеОтчетыИОбработки = "ДополнительныеОтчетыИОбработки.ФормаВыбора";
		ОткрытьФорму("Справочник." + ИмяФормыДополнительныеОтчетыИОбработки, ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШаблону(Команда)
	
	Элементы.Страницы.ТекущаяСтраница         = Элементы.СообщениеЭлектронноеПисьмоHTML;
	
	Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
	Элементы.ГруппаПараметры.Видимость        = Истина;
	Элементы.ФормаПоШаблону.Пометка           = Истина;
	Элементы.ФормаВнешнейОбработкой.Пометка   = Ложь;
	Элементы.ТемаПисьма.ТолькоПросмотр        = Ложь;
	Объект.ШаблонПоВнешнейОбработке           = Ложь;
	Объект.ВнешняяОбработка                   = Неопределено;
	ОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВывода(Команда)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		Обработчик = Новый ОписаниеОповещения("ПослеВыбораФорматаРеквизита", ЭтотОбъект, ДополнительныеПараметры);
		
		Диалог = Новый КонструкторФорматнойСтроки;
		Диалог.ДоступныеТипы = ТекущиеДанные.Тип;
		Диалог.Текст         = ТекущиеДанные.Формат;
		Диалог.Показать(Обработчик);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФорматаРеквизита(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Реквизит = Реквизиты.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если Реквизит <> Неопределено Тогда
			Реквизит.Формат = Результат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрВТекстСообщения(Команда)
	
	Если Элементы.Реквизиты.ВыделенныеСтроки <> Неопределено Тогда
		Текст = "";
		Для каждого НомерСтроки Из Элементы.Реквизиты.ВыделенныеСтроки Цикл
			НайденнаяСтрока = Реквизиты.НайтиПоИдентификатору(НомерСтроки);
			Если НайденнаяСтрока <> Неопределено Тогда
				ФорматВывода = ?(ПустаяСтрока(НайденнаяСтрока.Формат), "", "{" + НайденнаяСтрока.Формат +"}");
				Текст = Текст + "[" + НайденнаяСтрока.Имя + ФорматВывода + "] ";
			КонецЕсли;
		КонецЦикла;
		Если Объект.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML") Тогда
			Если ПустаяСтрока(Элементы.ТелоПисьмаВHTML.ВыделенныйТекст) Тогда
				ЗакладкаДляВставкиНачало = Неопределено;
				ЗакладкаДляВставкиКонец = Неопределено;
				Элементы.ТелоПисьмаВHTML.ПолучитьГраницыВыделения(ЗакладкаДляВставкиНачало, ЗакладкаДляВставкиКонец);
				ТелоПисьмаВHTML.Вставить(ЗакладкаДляВставкиКонец, Текст);
			Иначе
				Элементы.ТелоПисьмаВHTML.ВыделенныйТекст = Текст;
			КонецЕсли;
		Иначе
			Если Объект.ПредназначенДляSMS Тогда
				Элементы.ТелоСообщенияОбычныйТекстSMS.ВыделенныйТекст = Текст;
			Иначе
				Элементы.ТелоСообщенияОбычныйТекст.ВыделенныйТекст = Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметрВТему(Команда)
	
	ТекущиеДанные = Элементы.Реквизиты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ФорматВывода = ?(ПустаяСтрока(ТекущиеДанные.Формат), "", "{" + ТекущиеДанные.Формат +"}");
		НачалоПараметра = ?(Прав(Объект.ТемаПисьма, 1) = " ", "[", " [");
		Объект.ТемаПисьма = Объект.ТемаПисьма + НачалоПараметра + ТекущиеДанные.Имя + ФорматВывода + "]";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыПараметра(ОписаниеПараметра, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ОписаниеПараметра) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Добавление Тогда
			ДобавитьПроизвольныйПараметр(ОписаниеПараметра);
		Иначе
			Реквизит = Реквизиты.НайтиПоИдентификатору(ДополнительныеПараметры.ВыбраннаяСтрока);
			Если СтрНачинаетсяС(Реквизит.Имя, ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()) Тогда
				Отбор = Новый Структура("ИмяПараметра", Сред(Реквизит.Имя, СтрДлина(ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()) + 2));
			Иначе
				Отбор = Новый Структура("ИмяПараметра", Реквизит.Имя);
			КонецЕсли;
			НайденныеСтроки = Объект.Параметры.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Объект.Параметры.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			ДобавитьПроизвольныйПараметр(ОписаниеПараметра);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроизвольныйПараметр(ОписаниеПараметра)
	НоваяПараметр = Объект.Параметры.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяПараметр, ОписаниеПараметра);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ОписаниеПараметра.ТипПараметра);
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	НоваяПараметр.ОписаниеТипа = ОписаниеТипа;
	
	СформироватьСписокРеквизитовИПечатныхФорм();
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНовыйШаблонСообщений()
	
	Если Параметры.Основание = Неопределено Тогда
		
		Если Параметры.ВидСообщения = "СообщениеSMS" Тогда
			Объект.ПредназначенДляSMS = Истина;
			Объект.ПредназначенДляЭлектронныхПисем = Ложь;
		Иначе
			Объект.ПредназначенДляSMS = Ложь;
			Объект.ПредназначенДляЭлектронныхПисем = Истина;
			Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		КонецЕсли;
		Объект.ТолькоДляАвтора = Истина;
		Объект.Автор = Пользователи.АвторизованныйПользователь();
		Доступно = 0;
	Иначе
		Если Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			СтруктураВложений = Новый Структура;
			ТелоПисьмаВHTML.УстановитьHTML(Объект.ТекстШаблонаПисьмаHTML, СтруктураВложений);
		Иначе
			ТелоСообщенияОбычныйТекст.УстановитьТекст(Объект.ТекстШаблонаПисьма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорматыСохранения()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		Если ВыбранныеФорматыСохранения.Количество() = 0 Тогда
			Для Каждого ФорматСохранения Из МодульУправлениеПечатью.ФорматыСохраненияТабличногоДокумента() Цикл
				ВыбранныеФорматыСохранения.Добавить(ФорматСохранения.ТипФайлаТабличногоДокумента, Строка(ФорматСохранения.Ссылка), Ложь, ФорматСохранения.Картинка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекстШаблона(ТекущийОбъект, СписокФайлов = Неопределено)
	
	Если ТекущийОбъект.ПредназначенДляSMS Тогда
		ТелоСообщенияОбычныйТекст.УстановитьТекст(ТекущийОбъект.ТекстШаблонаSMS);
	Иначе
		Если ТекущийОбъект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			УстановитьHTMLДляФорматированногоДокумента(ТекущийОбъект.ТекстШаблонаПисьмаHTML, ТекущийОбъект.Ссылка, СписокФайлов);
		Иначе
			ТелоСообщенияОбычныйТекст.УстановитьТекст(ТекущийОбъект.ТекстШаблонаПисьма);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтображениеЭлементовФормы()
	
	Если Объект.ПредназначенДляSMS Тогда
		СуффиксЗаголовка = НСтр("ru = 'Шаблон сообщения SMS'");
		Элементы.ФормаВидТекстаЭлектронногоПисьма.Видимость = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СообщениеSMS;
		Элементы.ТемаПисьма.Видимость = Ложь;
		Элементы.СкрытыйЗаголовокПараметры.Видимость = Ложь;
		Элементы.ГруппаВложения.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрПочта.Видимость = Ложь;
		Элементы.РеквизитыМенюДобавитьПараметрПочта.Видимость = Ложь;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщенияДляSMS.Видимость = Истина;
		Элементы.РеквизитыМенюДобавитьПараметрВТекстСообщенияSMS.Видимость = Истина;
		Элементы.СкрытыйЗаголовокСообщениеSMS.Видимость = Истина;
	Иначе
		СуффиксЗаголовка = НСтр("ru = 'Шаблон сообщения электронного письма'");
		Элементы.ГруппаВложения.Видимость = Истина;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрПочта.Видимость = Истина;
		Элементы.РеквизитыМенюДобавитьПараметрПочта.Видимость = Истина;
		Элементы.РеквизитыКонтекстноеМенюДобавитьПараметрВТекстСообщенияДляSMS.Видимость = Ложь;
		Элементы.РеквизитыМенюДобавитьПараметрВТекстСообщенияSMS.Видимость = Ложь;
		Если Объект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			УстановитьЭлектронноеПисьмоHTML();
		Иначе
			УстановитьЭлектронноеПисьмоОбычныйТекст();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = Объект.Наименование + " (" + СуффиксЗаголовка + ")";
	Иначе
		Заголовок = СуффиксЗаголовка + " (" + НСтр("ru = 'создание'")+ ")";
	КонецЕсли;
	
	Если Объект.ШаблонПоВнешнейОбработке Тогда
		Элементы.ГруппаНазначение.Доступность = Ложь;
		Элементы.ТемаПисьма.ТолькоПросмотр = Истина;
		Элементы.ГруппаВнешняяОбработка.Видимость = Истина;
		Элементы.ГруппаПараметры.Видимость = Ложь;
		Элементы.ФормаВнешнейОбработкой.Пометка = Истина;
		Элементы.ФормаПоШаблону.Пометка = Ложь;
		ЗаполнитьШаблонПоВнешнейОбработке();
	Иначе
		Элементы.ГруппаНазначение.Доступность = Истина;
		Элементы.ТемаПисьма.ТолькоПросмотр = Ложь;
		Элементы.ГруппаВнешняяОбработка.Видимость = Ложь;
		Элементы.ГруппаПараметры.Видимость = Истина;
		Элементы.ФормаВнешнейОбработкой.Пометка = Ложь;
		Элементы.ФормаПоШаблону.Пометка = Истина;
	КонецЕсли;
		
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеШаблоновСообщений") Тогда
		Элементы.ГруппаДоступ.Видимость = Истина;
	Иначе
		Элементы.ГруппаДоступ.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки")
		И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
			Элементы.ФормаГруппаСообщениеФормируется.Видимость = Истина;
	Иначе
			Элементы.ФормаГруппаСообщениеФормируется.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		Элементы.ГруппаНастройкиВложений.Видимость = Ложь;
	КонецЕсли;
	
	Доступно = ?(Объект.ТолькоДляАвтора, 0, 1);
	ВариантыНазначения = ?(ЗначениеЗаполнено(Объект.ПолноеИмяТипаПараметраВводаНаОсновании), 1, 0);
	Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.Доступность = (ВариантыНазначения = 1);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьHTMLДляФорматированногоДокумента(ТекстШаблонаПисьмаHTML, СсылкаНаТекущийОбъект, СписокФайлов = Неопределено)
	
	ПараметрШаблона = Новый Структура("Шаблон, УникальныйИдентификатор");
	ПараметрШаблона.Шаблон = СсылкаНаТекущийОбъект;
	ПараметрШаблона.УникальныйИдентификатор = УникальныйИдентификатор;
	Сообщение = ШаблоныСообщенийСлужебный.КонструкторСообщения();
	Сообщение.Текст = ТекстШаблонаПисьмаHTML;
	ШаблоныСообщенийСлужебный.ОбработатьHTMLДляФорматированногоДокумента(ПараметрШаблона, Сообщение, Истина, СписокФайлов);
	СтруктураВложений = Новый Структура();
	Если СписокФайлов <> Неопределено Тогда
		Для каждого Вложение Из СписокФайлов Цикл
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
					Если ЗначениеЗаполнено(Вложение.ИДФайлаЭлектронногоПисьма) Тогда
						МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлы");
						СведенияОФайле = МодульПрисоединенныеФайлы.ПолучитьДанныеФайла(Вложение, УникальныйИдентификатор);
						Изображение = Новый Картинка(ПолучитьИзВременногоХранилища(СведенияОФайле.СсылкаНаДвоичныеДанныеФайла));
						СтруктураВложений.Вставить(СведенияОФайле.Наименование, Изображение);
					КонецЕсли;
				КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого ВложениеВHTML Из Сообщение.Вложения Цикл
			Изображение = Новый Картинка(ПолучитьИзВременногоХранилища(ВложениеВHTML.АдресВоВременномХранилище));
			СтруктураВложений.Вставить(ВложениеВHTML.Представление, Изображение);
		КонецЦикла;
	КонецЕсли;
	ТелоПисьмаВHTML.УстановитьHTML(Сообщение.Текст, СтруктураВложений);
	
КонецПроцедуры

// бизнес-логика

&НаСервере
Процедура СформироватьСписокРеквизитовИПечатныхФорм()
	
	ПараметрыШаблона = ШаблоныСообщенийСлужебный.ПараметрыШаблона(Объект);
	СведенияОШаблоне = ШаблоныСообщенийСлужебный.СведенияОШаблоне(ПараметрыШаблона);
	
	Реквизиты.ПолучитьЭлементы().Очистить();
	СписокРеквизитов = РеквизитФормыВЗначение("Реквизиты");
	ЗаполнитьДеревоРеквизитов(СписокРеквизитов, СведенияОШаблоне.Реквизиты);
	ЗаполнитьДеревоРеквизитов(СписокРеквизитов, СведенияОШаблоне.ОбщиеРеквизиты, Истина);
	ЗначениеВРеквизитФормы(СписокРеквизитов, "Реквизиты");
	
	ВыбранныеПечатныеФормыИВложения = Объект.ПечатныеФормыИВложения.Выгрузить(, "Идентификатор").ВыгрузитьКолонку("Идентификатор");
	
	Отбор = Новый Структура("Статус", "ВнешнийНовый");
	НесохраненныеФайлы = Вложения.НайтиСтроки(Отбор);
	Вложения.Очистить();
	
	Для каждого Вложение Из СведенияОШаблоне.Вложения Цикл
		
		ВнутренниеВложение = Ложь;
		Для каждого ФайлВложение Из НесохраненныеФайлы Цикл
			Если ФайлВложение.Идентификатор = Вложение.Идентификатор Тогда
				ВнутренниеВложение = Истина;
				Расширение = ?(ПустаяСтрока(Вложение.ТипФайла), "mxl", Вложение.ТипФайла);
				ФайлВложение.ИндексКартинки = ПолучитьИндексПиктограммыФайла(Расширение);
				ФайлВложение.Реквизит = Вложение.Реквизит;
				ФайлВложение.Выбрано = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ВнутренниеВложение Тогда
			Продолжить;
		КонецЕсли;
		
		Выбрано = 0;
		Если ЗначениеЗаполнено(Вложение.Реквизит) Тогда
			Выбрано = 2;
		КонецЕсли;
		Если ВыбранныеПечатныеФормыИВложения.Найти(Вложение.Идентификатор) <> Неопределено Тогда
			Выбрано = 1;
		КонецЕсли;
		
		НоваяСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Вложение);
		Расширение = ?(ПустаяСтрока(Вложение.ТипФайла), "mxl", Вложение.ТипФайла);
		НоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайла(Расширение);
		НоваяСтрока.Выбрано = Выбрано;
	КонецЦикла;
	
	ЗаполнитьВложения();
	Для каждого НесохраненныеФайл Из НесохраненныеФайлы Цикл
		НоваяСтрока = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НесохраненныеФайл);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексПиктограммыФайла(Расширение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		МодульФайловыеФункцииСлужебныйКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ФайловыеФункцииСлужебныйКлиентСервер");
		Возврат МодульФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИндексПиктограммыФайлаКлиент(Расширение)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		МодульФайловыеФункцииСлужебныйКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ФайловыеФункцииСлужебныйКлиентСервер");
		Возврат МодульФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоРеквизитов(Приемник, Источник, ЭтоОбщиеИлиПроизвольныеРеквизиты = Неопределено)
	
	Для Каждого СтрокаДерева Из Источник.Строки Цикл
		
		Если ЭтоОбщиеИлиПроизвольныеРеквизиты = Неопределено Тогда
			Если СтрокаДерева.Имя = ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()
				ИЛИ СтрокаДерева.Имя = ШаблоныСообщенийСлужебный.ЗаголовокОбщиеРеквизиты() Тогда
				ОбщиеИлиПроизвольныеРеквизиты = Истина;
			Иначе
				
				ОбщиеИлиПроизвольныеРеквизиты = Ложь;
			КонецЕсли;
		Иначе
			ОбщиеИлиПроизвольныеРеквизиты = ЭтоОбщиеИлиПроизвольныеРеквизиты;
		КонецЕсли;
		
		ИндексКартинкиЭлемент = ?(ОбщиеИлиПроизвольныеРеквизиты, 1, 3);
		ИндексКартинкиУзел = ?(ОбщиеИлиПроизвольныеРеквизиты, 0, 2);
		
		НоваяСтрока = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			НоваяСтрока.ИндексКартинки = ИндексКартинкиУзел;
			ЗаполнитьДеревоРеквизитов(НоваяСтрока, СтрокаДерева, ОбщиеИлиПроизвольныеРеквизиты);
		Иначе
			НоваяСтрока.ИндексКартинки = ИндексКартинкиЭлемент;
		КонецЕсли;
	КонецЦикла;
	Приемник.Строки.Сортировать("Представление", Истина);
	
КонецПроцедуры

&НаСервере
Функция РезультатПроверкиШаблоны()
	
	ПараметрыШаблона = ШаблоныСообщенийСлужебный.ПараметрыШаблона(Объект);
	СведенияОШаблоне = ШаблоныСообщенийСлужебный.СведенияОШаблоне(ПараметрыШаблона);
	
	ОшибочныеРеквизиты = Новый Массив;
	ПараметрыТекстаСообщения = ШаблоныСообщенийСлужебный.ПараметрыИзТекстаСообщения(ПараметрыШаблона);
	ШаблоныСообщенийСлужебный.ОпределитьОшибочныеРеквизиты(ПараметрыТекстаСообщения, ОшибочныеРеквизиты, СведенияОШаблоне);
	
	ТекстОшибки = "";
	Если ОшибочныеРеквизиты.Количество() > 0 Тогда
		ТекстОшибки = ?(ОшибочныеРеквизиты.Количество() = 1,
			НСтр("ru = 'Некорректный реквизит в шаблоне сообщения:'"),
			НСтр("ru = 'Некорректные реквизиты в шаблоне сообщения:'")) + " ";
		Разделитель = "";
		Для каждого ОшибочныйРеквизит Из ОшибочныеРеквизиты Цикл
			ТекстОшибки = ТекстОшибки + Разделитель + СокрЛП(ОшибочныйРеквизит);
			Разделитель = ", ";
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Вынужденная установка свойств на сервере

&НаСервере
Процедура УстановитьЭлектронноеПисьмоHTML(ТребуетсяПереносТекста = Ложь)
	
	Элементы.ФормаВидТекстаЭлектронногоПисьма.Заголовок = "HTML";
	Элементы.СообщениеЭлектронноеПисьмо.Видимость = Ложь;
	Элементы.СообщениеЭлектронноеПисьмоHTML.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СообщениеЭлектронноеПисьмоHTML;
	Элементы.ФормаЭлектронноеПисьмоОбычныйТекст.Пометка = Ложь;
	Элементы.ФормаЭлектронноеПисьмоHTML.Пометка = Истина;
	Объект.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.HTML");
	Если ТребуетсяПереносТекста Тогда
		ВложенияФорматированныйДокумент = Новый Структура;
		ТелоСообщенияОбычныйТекстВHTML = СтрЗаменить(ТелоСообщенияОбычныйТекст.ПолучитьТекст(), Символы.ПС, "<br>");
		ТелоПисьмаВHTML.УстановитьHTML(ТелоСообщенияОбычныйТекстВHTML, ВложенияФорматированныйДокумент);
	КонецЕсли;
	
	Элементы.СкрытыйЗаголовокПараметры.Видимость = Истина;
	Элементы.СтраницыЗаголовокПараметры.ТекущаяСтраница = Элементы.СтраницаЗаголовокПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлектронноеПисьмоОбычныйТекст(ТребуетсяПереносТекста = Ложь)
	Элементы.ФормаВидТекстаЭлектронногоПисьма.Заголовок = НСтр("ru = 'Обычный текст'");
	Элементы.СообщениеЭлектронноеПисьмоHTML.Видимость = Ложь;
	Элементы.СообщениеЭлектронноеПисьмо.Видимость = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СообщениеЭлектронноеПисьмо;
	Элементы.ФормаЭлектронноеПисьмоОбычныйТекст.Пометка = Истина;
	Элементы.ФормаЭлектронноеПисьмоHTML.Пометка = Ложь;
	Объект.ТипТекстаПисьма = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст");
	Если ТребуетсяПереносТекста Тогда
		ТелоСообщенияОбычныйТекст.УстановитьТекст(ТелоПисьмаВHTML.ПолучитьТекст());
	КонецЕсли;
	
	Элементы.СкрытыйЗаголовокПараметры.Видимость = Ложь;
	Элементы.СкрытыйЗаголовокСообщениеSMS.Видимость = Ложь;
	Элементы.СтраницыЗаголовокПараметры.ТекущаяСтраница = Элементы.СтраницаЗаголовокПараметры;
КонецПроцедуры

// Вложения

&НаКлиенте
Процедура ДобавитьВложениеВыполнить(Идентификатор = Неопределено)
	
	#Если Не ВебКлиент Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		ДополнительныеПараметры = Новый Структура("Идентификатор", Идентификатор);
		ОписаниеОповещение = Новый ОписаниеОповещения("ДиалогВыбораФайловПослеВыбора", ЭтотОбъект, ДополнительныеПараметры);
		Диалог.Показать(ОписаниеОповещение);
		
	#Иначе

		Адрес = "";
		ВыбранныйФайл = "";
		ДополнительныеПараметры = Новый Структура("Идентификатор", Идентификатор);
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПомещениеФайлаПриОкончании", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОбработчикОповещенияОЗакрытии, Адрес, ВыбранныйФайл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайловПослеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Идентификатор = Неопределено Тогда
		Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
			НоваяСтрока = Вложения.Добавить();
			НоваяСтрока.Имя = ВыбранныйФайл;
			
			ИмяФайла   = "";
			ПолучитьКаталогИИмяФайла(ВыбранныйФайл, "", ИмяФайла);
			НоваяСтрока.Представление = ИмяФайла;
			НоваяСтрока.Идентификатор = ИмяФайла;
			
			Расширение                      = ПолучитьРасширениеФайла(ИмяФайла);
			НоваяСтрока.ИндексКартинки      = ПолучитьИндексПиктограммыФайлаКлиент(Расширение);
			НоваяСтрока.Статус = "ВнешнийНовый";
			НоваяСтрока.Выбрано = 1;
		КонецЦикла;
		
		Если ВыбранныеФайлы.Количество() > 0 Тогда
			Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Модифицированность = Истина;
		КонецЕсли;
	Иначе
		Отбор = Новый Структура("Идентификатор", ДополнительныеПараметры.Идентификатор);
		НайденныеСтроки = Вложения.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Имя = ВыбранныеФайлы[0];
			НайденныеСтроки[0].Выбрано = 1;
			НайденныеСтроки[0].Статус = "ВнешнийНовый";
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаПриОкончании(РезультатПомещения, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если РезультатПомещения = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Вложения.Добавить();
	НоваяСтрока.Имя = Адрес;
	НоваяСтрока.Представление = ВыбранноеИмяФайла;
	
	Расширение = ПолучитьРасширениеФайла(ВыбранноеИмяФайла);
	НоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайлаКлиент(Расширение);
	НоваяСтрока.Статус = "ВнешнийНовый";
	
	Элементы.Вложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьОтображениеДанных();

КонецПроцедуры

// Получает каталог и имя файла для переданного полного имени файла.
//
// Параметры:
//  ПолноеИмяФайла  - Строка - полное имя файла, из которого будут получены имя каталога и имя файла.
//  ИмяКаталога     - Строка - в данную переменную будет помещено полученное имя каталога.
//  ИмяФайла        - Строка - в данную переменную будет помещено полученное имя файла.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла)
	
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
	Пока Истина Цикл
		
		Позиция = Макс(СтрНайти(ИмяФайла, "\"), СтрНайти(ИмяФайла, "/"));
		Если Позиция = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКаталога = ИмяКаталога + Лев(ИмяФайла, Позиция);
		ИмяФайла = Сред(ИмяФайла, Позиция+1);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает расширение для переданного имени файла.
//
// Параметры:
//  ИмяФайла  - Строка - имя файла, для которого необходимо получить расширение.
//
// Возвращаемое значение:
//   Строка   - расширение, полученное из переданного имени файла.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРасширениеФайла(Знач ИмяФайла)
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	Возврат РасширениеФайла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоместитьНовыеФайлыВоВременноеХранилище(Вложения, УникальныйИдентификатор, Отказ)
	
	Перем Данные, ЗагружаемыйФайл, СтрокаТаблицыВложений;
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		Если СтрокаТаблицыВложений.Статус = "ВнешнийНовый" Тогда
			Попытка
				ЗагружаемыйФайл = Новый Файл(СтрокаТаблицыВложений.Имя);
				Если ЗагружаемыйФайл.Существует() Тогда
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.Имя);
					СтрокаТаблицыВложений.Имя = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,"Вложения",, Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваВложения(ТекущийИндексВКоллекции)
	
	ТекущиеДанные = Вложения.Получить(ТекущийИндексВКоллекции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Вложения.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПрисоединенныеФайлыКлиент");
		МодульПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(ТекущиеДанные.Ссылка);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиФайлаПослеЗакрытия(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьСвойстваВложения(ДополнительныеПараметры.ТекущийИндексВКоллекции);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(ПереданныеПараметры = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлы");
		
		СписокФайлов = Новый Массив;
		МодульПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Объект.Ссылка, СписокФайлов);
		Для Каждого СсылкаНаФайл Из СписокФайлов Цикл
			СведенияОФайле = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайл, "ИДФайлаЭлектронногоПисьма, ИндексКартинки, Наименование, Расширение");
			Если ПустаяСтрока(СведенияОФайле.ИДФайлаЭлектронногоПисьма) Тогда
				Отбор = Новый Структура("Реквизит", СведенияОФайле.Наименование);
				НайденныеСтроки = Вложения.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = Вложения.Добавить();
					НоваяСтрока.Представление = СведенияОФайле.Наименование + "." + СведенияОФайле.Расширение;
					НоваяСтрока.ИндексКартинки = СведенияОФайле.ИндексКартинки;
					НоваяСтрока.Ссылка = СсылкаНаФайл;
					НоваяСтрока.Статус = "ВнешнийПрисоединенный";
				Иначе
					НайденныеСтроки[0].Ссылка = СсылкаНаФайл;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	Вложение = Элементы.Вложения.ТекущиеДанные;
	Если Вложение <> Неопределено Тогда
		Если Вложение.Статус = "ВнешнийПрисоединенный" ИЛИ Вложение.Статус = "ВнешнийНовый" Тогда
			Вложение.Статус = "ВнешнийУдаляемый";
			Вложение.ИндексКартинки = Вложение.ИндексКартинки + 1;
			Модифицированность = Истина;
		ИначеЕсли Вложение.Статус = "ВнешнийУдаляемый" Тогда
			Вложение.ИндексКартинки = Вложение.ИндексКартинки - 1;
			Вложение.Статус = ?(ЗначениеЗаполнено(Вложение.Ссылка), "ВнешнийПрисоединенный", "ВнешнийНовый");
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПрисоединенныйФайл(ПрисоединенныйФайл)
	ОбъектВложение = ПрисоединенныйФайл.ПолучитьОбъект();
	УстановитьПривилегированныйРежим(Истина);
	ОбъектВложение.Удалить();
КонецПроцедуры

&НаСервере
Процедура ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML, ТаблицаСоответствий)
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		НайденнаяСтрока = ТаблицаСоответствий.НайтиПоЗначению(АтрибутИсточникКартинки.ТекстовоеСодержимое);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:" + НайденнаяСтрока.Представление);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет картинки форматированного документа как присоединенные файлы объекта.
//
// Параметры:
//  Ссылка  - ДокументСсылка - ссылка на владельца присоединенных файлов.
//  ТипТекстаПисьма  - Перечисление.СпособыРедактированияЭлектронныхПисем - для определения необходимости выполнения преобразований.
//  ТаблицаСоответствийИменВложенийИдентификаторам  - ТаблицаЗначений - позволяет определить какому вложению соответствует какая картинка.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы из которого выполняется сохранение.
//
&НаСервере
Процедура СохранитьКартинкиФорматированногоДокументаКакПрисоединенныеФайлы(Ссылка, ТипТекстаПисьма,
	                                                                        ТаблицаСоответствийИменВложенийИдентификаторам,
	                                                                        УникальныйИдентификатор)
	
	Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Ссылка, АдресКартинкиВоВременномХранилище,
				"_" + СтрЗаменить(Вложение.Представление, "-", "_"), ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.Представление;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(Письмо, АдресВоВременномХранилище, ИмяФайла,
		Размер, КоличествоПустыхИменВоВложениях = 0)
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлы");
		
		ИмяФайлаДляРазбора = ИмяФайла;
		РасширениеБезТочки = ПолучитьРасширениеФайла(ИмяФайлаДляРазбора);
		ИмяБезРасширения = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаДляРазбора);
		Если ПустаяСтрока(ИмяБезРасширения) Тогда
			
			ИмяФайлаБезРасширения = НСтр("ru = 'Вложение без имени'") 
				+ ?(КоличествоПустыхИменВоВложениях = 0, ""," " + Строка(КоличествоПустыхИменВоВложениях + 1));
			КоличествоПустыхИменВоВложениях = КоличествоПустыхИменВоВложениях + 1;
			
		Иначе
			ИмяБезРасширения = ?(РасширениеБезТочки = "", ИмяБезРасширения,
				Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - СтрДлина(РасширениеБезТочки) - 1));
		КонецЕсли;
			
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов",              Письмо);
		ПараметрыФайла.Вставить("Автор",                       Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
		ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
		Возврат МодульПрисоединенныеФайлы .ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресВоВременномХранилище, "");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВложенияВыбран.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Вложения.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "Внешний";
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Вложения.Реквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВложенияПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВложенияВыбран.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Вложения.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "ВнешнийУдаляемый";

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДополнительныеОтчетыИОбработки(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.ГруппаВнешняяОбработка.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СообщениеВнешняяОбработка;
		Элементы.ГруппаПараметры.Видимость = Ложь;
		Элементы.ФормаПоШаблону.Пометка = Ложь;
		Элементы.ФормаВнешнейОбработкой.Пометка = Истина;
		Объект.ШаблонПоВнешнейОбработке = Истина;
		Объект.ВнешняяОбработка = Результат;
		ОтображениеЭлементовФормы();
	КонецЕсли;
КонецПроцедуры

// Внешняя обработка

&НаСервере
Процедура ЗаполнитьШаблонПоВнешнейОбработке()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		
		ОчиститьШаблон(ЭтотОбъект);
		ВнешнийОбъект = МодульДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(Объект.ВнешняяОбработка);
		Если Объект.ВнешняяОбработка.Вид <> Перечисления["ВидыДополнительныхОтчетовИОбработок"].ШаблонСообщения Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураДанныхВнешнейОбработки = ВнешнийОбъект.СтруктураДанныхДляОтображенияВШаблоне();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(СтруктураДанныхВнешнейОбработки.ПолноеИмяТипаПараметраВводаНаОсновании);
		Если МетаданныеОбъекта = Неопределено Тогда
			ВариантыНазначения = 0;
		Иначе
			ЭлементНазначения = Элементы.ПолноеИмяТипаПараметраВводаНаОсновании.СписокВыбора.НайтиПоЗначению(СтруктураДанныхВнешнейОбработки.ПолноеИмяТипаПараметраВводаНаОсновании);
			Если ЭлементНазначения = Неопределено Тогда
				ВариантыНазначения = 0;
				ВнешняяОбработка = Неопределено;
				ОписаниеОшибки = НСтр("ru = 'Предмет %1 определенный в внешней обработке не найдено. Внешняя обработка не может быть подключена.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, СтруктураДанныхВнешнейОбработки.ПолноеИмяТипаПараметраВводаНаОсновании);
				Возврат
			КонецЕсли;
			ВариантыНазначения = 1;
			Объект.ШаблонПоВнешнейОбработке = Истина;
			Объект.ПолноеИмяТипаПараметраВводаНаОсновании = ЭлементНазначения.Значение;
			Объект.Назначение = ЭлементНазначения.Представление;
			Объект.ПредназначенДляВводаНаОсновании = Истина;
		КонецЕсли;

		// Определить тип html 
		Объект.ТемаПисьма = СтруктураДанныхВнешнейОбработки.ТемаПисьма;
		Если СтруктураДанныхВнешнейОбработки.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			УстановитьЭлектронноеПисьмоHTML(Истина);
			СтруктураВложения = Новый Структура;
			ТелоПисьмаВHTML.УстановитьHTML(СтруктураДанныхВнешнейОбработки.ТекстШаблонаПисьмаHTML, СтруктураВложения);
		Иначе
			УстановитьЭлектронноеПисьмоОбычныйТекст(Истина);
			ТелоСообщенияОбычныйТекст.УстановитьТекст(СтруктураДанныхВнешнейОбработки.ТекстШаблонаПисьмаHTML);
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьШаблон(Форма)
	
	Форма.Объект.Параметры.Очистить();
	Форма.Объект.ПредназначенДляЭлектронныхПисем        = Истина;
	Форма.Объект.ПредназначенДляSMS                     = Ложь;
	Форма.Объект.ПредназначенДляВводаНаОсновании        = Ложь;
	Форма.Объект.ПолноеИмяТипаПараметраВводаНаОсновании = "";
	Форма.Объект.ТемаПисьма                             = "";
	Форма.Объект.ТекстШаблонаSMS                        = "";
	Форма.Объект.ТекстШаблонаПисьма                     = "";
	Форма.Объект.ТекстШаблонаПисьмаHTML                 = "<html></html>";
	Форма.Объект.ТипТекстаПисьма                        = ПредопределенноеЗначение("Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст");
	
КонецПроцедуры

#КонецОбласти

