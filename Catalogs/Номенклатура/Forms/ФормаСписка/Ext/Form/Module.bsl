
#Область ПеременныеФормы

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат; // Возврат при получении формы для анализа.
	КонецЕсли;
	
	Элементы.СписокЗапасы.РежимВыбора			= Параметры.РежимВыбора;
	Элементы.СписокЗапасыВНаличии.РежимВыбора	= Параметры.РежимВыбора;
	Если Параметры.Свойство("МножественныйВыбор") И ЗначениеЗаполнено(Параметры.МножественныйВыбор) Тогда
		ВыборНесколькихЗначений = Параметры.МножественныйВыбор;
	КонецЕсли;
	
	ЕстьДоступКЦенам = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	Если ЕстьДоступКЦенам Тогда
		ПолучитьТекстЗапросаСписокЗапасыСЦенами();
	Иначе	
		ПолучитьТекстЗапросаСписокЗапасыБезЦен();
	КонецЕсли;
	
	УстановитьНастройкиФормыПриСоздании(Параметры);
	УстановитьПараметрыЗапросовСписков(Параметры);
	УстановитьОтборНедействительнаяНоменклатура(ЭтотОбъект);
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(
		ИмяФормы,
		"ВключаяВложенные",
		Ложь
	);
	
	ЗаполнитьДеревоКатегорий();
	ЗаполнитьДеревоИерархии();
	
	Если ЕстьДоступКЦенам Тогда
		УстановитьВидЦенДляСписков(Ложь);
	КонецЕсли;
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ЗаданиеВыполнено", Неопределено);
	ПараметрыДлительнойОперации.Вставить("ПараметрыОбработчика", Неопределено);
	ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания", "");
	
	Параметры.Свойство("ЭтоЗагрузкаИзВнешнегоИсточника", ЭтоЗагрузкаИзВнешнегоИсточника);
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.ПраваяПанель.Видимость = Ложь;
		Элементы.ЕдиницаИзмерения.Видимость = Ложь;
		Элементы.ДокументСчетНаОплатуСоздатьИзНоменклатуры.Видимость = Ложь;
		Элементы.ДокументЗаказНарядСоздатьИзНоменклатуры.Видимость = Ложь;
		Элементы.ДокументАктВыполненныхРаботСоздатьИзНоменклатуры.Видимость = Ложь;
		Элементы.ДокументЗаказПоставщикуСоздатьИзНоменклатуры.Видимость = Ложь;
		Элементы.СписокЗапасыОбработкаНастройкаПрограммыБольшеВозможностейКонтекст.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Справочники.Номенклатура, НастройкиЗагрузкиДанных, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	Если Элементы.Найти("СписокГрупповоеИзменениеОбъектов") <> Неопределено Тогда
		
		МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокГрупповоеИзменениеОбъектов", "Видимость", МожноРедактировать);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если Параметры.РежимВыбора И Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) 
		И ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры
		Тогда
		ГруппаТекущейНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "Родитель");
		Если ЗначениеЗаполнено(ГруппаТекущейНоменклатуры) Тогда
			ИдентификаторСтроки = 0;
			ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Значение", ИдентификаторСтроки, ОтборИерархия.ПолучитьЭлементы(), ГруппаТекущейНоменклатуры, Ложь);
			Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	Если ЭтоЗагрузкаИзВнешнегоИсточника = Истина Тогда
		
		ПодключитьОбработчикОжидания("ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы ИЛИ РазрешитьЗакрытие ИЛИ Корзина.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВопросПеренестиТовары",
		ЭтотОбъект);
		
	ПоказатьВопрос(Оповещение,
		НСтр("ru = 'В корзине остались несохраненные товары. Продолжить закрытие формы?'"),
		РежимДиалогаВопрос.ОКОтмена,
		0,
		КодВозвратаДиалога.ОК,
		НСтр("ru = 'Подбор товаров'")
	);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НоменклатураГруппа" И ЗначениеЗаполнено(Параметр) Тогда
		
		ЗаполнитьДеревоИерархии();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		ПеречитатьЗначенияКонстантОбновитьФорму();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Справочник.КатегорииНоменклатуры.СозданиеКатегорииИзКлассификатора"
		ИЛИ ИмяСобытия = "Справочник.КатегорииНоменклатуры.ЗаписьКатегории" Тогда
		
		ЗаполнитьДеревоКатегорий();
		
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
	   И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Если Параметр[1] = Неопределено Тогда
				Данные = Новый Структура("Штрихкод, Количество", Параметр[0],1); // Достаем штрихкод из основных данных
			Иначе
				Данные = Новый Структура("Штрихкод, Количество", Параметр[1][1],1); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			ПолученШтрихкод(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ТекущийЭлемент = Элементы[ТекущаяСтраницаНоменклатуры];
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоИерархии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если СтрокаИерархии = Неопределено
		Или СтрокаИерархии.Представление = "<Все группы>"
		Или СтрокаИерархии.Представление = "<Нет группы>" Тогда
		
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаИерархии.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив")
		Или ПараметрыПеретаскивания.Значение.Количество() = 0
		Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Группа, в которую переносим
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.Представление = "<Все группы>" Тогда
		Возврат;
	КонецЕсли;
	
	//Строки, которые переносим, в т.ч. это может быть группа из списка иерархии
	спПеренести = Новый Массив;
	Для каждого ВыделеннаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
		
		Если Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасыВНаличии 
			И ТипЗнч(ВыделеннаяСтрока)=Тип("Число") Тогда
			
			ДанныеСтроки = Элементы[ТекущаяСтраницаНоменклатуры].ДанныеСтроки(ВыделеннаяСтрока);
			спПеренести.Добавить(ДанныеСтроки.Ссылка);
		ИначеЕсли Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасы И 
			ТипЗнч(ВыделеннаяСтрока) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			спПеренести.Добавить(ВыделеннаяСтрока);
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЦикла; 
	
	ПеренестиВГруппу(спПеренести, СтрокаИерархии.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтрокаИерархии = ОтборИерархия.НайтиПоИдентификатору(Строка);
	Если СтрокаИерархии = Неопределено Или СтрокаИерархии.Представление = "<Все группы>" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия	= ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Действие			= ДействиеПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	//Категории не перетаскиваем
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы[ТекущаяСтраницаНоменклатуры]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительную(Команда)
	
	Элементы.ПоказыватьНедействительную.Пометка = Не Элементы.ПоказыватьНедействительную.Пометка;
	
	УстановитьОтборНедействительнаяНоменклатура(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияВключаяВложенные(Команда)
	
	Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка = Не Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка;
	УстановитьОтборПоИерархии(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчики

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания()
	
	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	
	Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
	ПоказатьПредупреждение(,Нстр("ru ='Номенклатура.
	|Загрузка данных завершена.'"));
	
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеВыполнено(Прогресс)
	
	Попытка
		
		ПараметрыДлительнойОперации.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ПараметрыДлительнойОперации.ИдентификаторЗадания);
		
		Если НЕ ПараметрыДлительнойОперации.ЗаданиеВыполнено Тогда
			
			Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ПараметрыДлительнойОперации.ИдентификаторЗадания);
			
		КонецЕсли;
		
	Исключение
		
		ПараметрыДлительнойОперации.ЗаданиеВыполнено = Истина;
		ВызватьИсключение Нстр("ru ='Ошибка'") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Перем Прогресс;
	
	ФоновоеЗаданиеВыполнено(Прогресс);
	
	Если ПараметрыДлительнойОперации.ЗаданиеВыполнено = Истина Тогда
		
		ПослеВыполненияФоновогоЗадания();
		
	Иначе
		
		Если ФормаДлительнойОперации = Неопределено Тогда
			
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ПараметрыДлительнойОперации.ИдентификаторЗадания);
			
		ИначеЕсли ТипЗнч(Прогресс) = Тип("Структура")
			И Прогресс.Свойство("Текст") Тогда
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Пожалуйста, подождите...'"));
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(Прогресс.Текст);
			
			ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = СтрСоединить(МассивСтрок);
			
		КонецЕсли;
		
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыДлительнойОперации.ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыДлительнойОперации.ПараметрыОбработчика.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания()
	
	Если ПараметрыДлительнойОперации.ЗаданиеВыполнено = Истина Тогда
		
		ПослеВыполненияФоновогоЗадания();
		
	Иначе
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыДлительнойОперации.ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОтборовСписков

&НаСервере
Процедура УстановитьФиксированныйОтборПоТипамНоменклатуры(ОграничениеТипов)
	
	ВсеТипыНоменклатуры = Новый Соответствие;
	Для каждого ТипНоменклатуры Из Метаданные.Перечисления.ТипыНоменклатуры.ЗначенияПеречисления Цикл
		ВсеТипыНоменклатуры.Вставить(ТипНоменклатуры.Синоним, ТипНоменклатуры.Имя);
	КонецЦикла;
	
	//Установим ограничение по типам на форме
	Если ТипЗнч(ОграничениеТипов) = Тип("Массив") ИЛИ ТипЗнч(ОграничениеТипов) = Тип("ФиксированныйМассив") Тогда
		Для каждого ТипНоменклатуры Из ОграничениеТипов Цикл
			ЭтаФорма["ОтборТип"+ВсеТипыНоменклатуры.Получить(Строка(ТипНоменклатуры))] = Истина;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОграничениеТипов) = Тип("СписокЗначений") Тогда
		ОграничениеТиповМассив = ОграничениеТипов.ВыгрузитьЗначения();
		Для каждого ТипНоменклатуры Из ОграничениеТиповМассив Цикл
			ЭтаФорма["ОтборТип"+ВсеТипыНоменклатуры.Получить(Строка(ТипНоменклатуры))] = Истина;
		КонецЦикла;
	Иначе
		ЭтаФорма["ОтборТип"+ВсеТипыНоменклатуры.Получить(Строка(ОграничениеТипов))] = Истина;
	КонецЕсли; 
	
	УстановитьОтборПоТипуНоменклатуры();
	
	Элементы.ОтборТипЗапас.Доступность    = Ложь;
	Элементы.ОтборТипУслуга.Доступность   = Ложь;
	Элементы.ОтборТипРабота.Доступность   = Ложь;
	Элементы.ОтборТипОперация.Доступность = Ложь;
	Элементы.ОтборТипВидРабот.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИерархии()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Значение,
	|	Номенклатура.Наименование КАК Представление,
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА Номенклатура.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Наименование ИЕРАРХИЯ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СтрокаНетГруппы = Дерево.Строки.Вставить(0);
	СтрокаНетГруппы.Значение	 = Справочники.Номенклатура.ПустаяСсылка();
	СтрокаНетГруппы.Представление= "<Все группы>";
	СтрокаНетГруппы.Картинка = -1;
	
	СтрокаНетГруппы = Дерево.Строки.Добавить();
	СтрокаНетГруппы.Значение	 = Справочники.Номенклатура.ПустаяСсылка();
	СтрокаНетГруппы.Представление= "<Нет группы>";
	СтрокаНетГруппы.Картинка = -1;
	
	ЗначениеВРеквизитФормы(Дерево,"ОтборИерархия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипПриИзменении(Элемент)
	
	УстановитьОтборПоТипуНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныОтборПриИзменении(Элемент)
	
	УстановитьОтборЦенСервер(ЦенаОт, ЦенаДо);

КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуСпискаНоменклатуры(НоваяСтраницаНоменклатуры)
	
	Если НоваяСтраницаНоменклатуры <> ТекущаяСтраницаНоменклатуры Тогда
		ПеренестиНаложенныеОтборы(НоваяСтраницаНоменклатуры);
		
		Если НоваяСтраницаНоменклатуры = "СписокЗапасы" Тогда
			Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасы;
		ИначеЕсли НоваяСтраницаНоменклатуры = "СписокЗапасыВНаличии" Тогда
			Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасыВНаличии;
		КонецЕсли;
		
		ТекущаяСтраницаНоменклатуры = НоваяСтраницаНоменклатуры;

	КонецЕсли;
	
	УстановитьОтборСпискаОстаткиСервер(ЭтаФорма[ТекущаяСтраницаНоменклатуры], ОтборОстатки);

	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЦенСервер(ЦенаОт, ЦенаДо)
	
	// Отбор на список товаров.
	ГруппаОтборПоКоличеству = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭтаФорма[ТекущаяСтраницаНоменклатуры].КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКоличеству,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		ЦенаОт,
		"ЦенаОт",
		ЦенаОт<>0);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоКоличеству,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		ЦенаДо,
		"ЦенаДо",
		ЦенаДо<>0);
	
	Элементы.ЦеныОтбор.Заголовок = НСтр("ru = 'Цены'")+
		?(ЦенаОт<>0, НСтр("ru = ' от '")+ЦенаОт,"")+
		?(ЦенаДо<>0, НСтр("ru = ' до '")+ЦенаДо,"")
		;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТипуНоменклатуры()
	
	ОтборТипНоменклатуры = Новый Массив;
	Если ОтборТипЗапас Тогда
		ОтборТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	КонецЕсли;
	Если ОтборТипУслуга Тогда
		ОтборТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	КонецЕсли; 
	Если ОтборТипРабота Тогда
		ОтборТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	КонецЕсли; 
	Если ОтборТипВидРабот Тогда
		ОтборТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот"));
	КонецЕсли; 
	Если ОтборТипОперация Тогда
		ОтборТипНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция"));
	КонецЕсли;
	
	Использование = НЕ ОтборТипНоменклатуры.Количество()=0;
	
	// Отбор на список номенклатуры
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(ЭтаФорма[ТекущаяСтраницаНоменклатуры], 
		"ТипНоменклатуры", ОтборТипНоменклатуры, Использование, ВидСравненияКомпоновкиДанных.ВСписке);

	УстановитьЗаголовокОтборТипыНоменклатуры(ОтборТипНоменклатуры);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокОтборТипыНоменклатуры(ОтборТипНоменклатуры)
	
	СтрокаТипов = НСтр("ru = 'Тип:'");
	Для каждого стрТип Из ОтборТипНоменклатуры Цикл
		СтрокаТипов = СтрокаТипов + " " + НРег(стрТип)+",";
	КонецЦикла;
	СтрокаТипов = Лев(СтрокаТипов,СтрДлина(СтрокаТипов)-1);

	Элементы.ТипНоменклатурыОтбор.ЗаголовокСвернутогоОтображения = СтрокаТипов;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНаложенныеОтборы(НоваяСтраницаНоменклатуры)

	Если ТекущаяСтраницаНоменклатуры="" Тогда
		Возврат;
	КонецЕсли;
	
	МассивДляУдаления = Новый Массив;
	НаборЭлементовТекущаяСтраницаОтбор	= ЭтаФорма[ТекущаяСтраницаНоменклатуры].КомпоновщикНастроек.Настройки.Отбор;
	НаборЭлементовНоваяСтраницаОтбор	= ЭтаФорма[НоваяСтраницаНоменклатуры].КомпоновщикНастроек.Настройки.Отбор;
	Для каждого элОтбора Из ЭтаФорма[ТекущаяСтраницаНоменклатуры].КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		МассивДляУдаления.Добавить(элОтбора);
		
		Если ТипЗнч(элОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			НовыйЭлОтбораГруппа = НаборЭлементовНоваяСтраницаОтбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлОтбораГруппа, элОтбора);
			Для каждого ПодчиненныйЭлГруппы Из элОтбора.Элементы Цикл
				МассивДляУдаления.Добавить(ПодчиненныйЭлГруппы);
				НовыйЭлОтбора = НовыйЭлОтбораГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлОтбора, ПодчиненныйЭлГруппы);
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		//скопируем элементы из текущего отбора в отбор открываемого динамического списка
		НовыйЭлОтбора = НаборЭлементовНоваяСтраницаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлОтбора, элОтбора);
	КонецЦикла;
	
	Для каждого элОтбораУдалить Из МассивДляУдаления Цикл
		Если элОтбораУдалить.Родитель = Неопределено Тогда
			НаборЭлементовТекущаяСтраницаОтбор.Элементы.Удалить(элОтбораУдалить);
		Иначе
			элОтбораУдалить.Родитель.Элементы.Удалить(элОтбораУдалить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	ВНаличииНаСкладе = ЗначениеЗаполнено(ОтборСклад) И ОтборОстатки=1;
	
	НоваяСтраницаНоменклатуры = ?(ВНаличииНаСкладе, "СписокЗапасыВНаличии",  "СписокЗапасы");
	УстановитьСтраницуСпискаНоменклатуры(НоваяСтраницаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЦенПриИзменении(Элемент)
	
	УстановитьВидЦенДляСписков();
	ОбновитьНадписьПодобраноТоваров();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидЦенДляСписков(ОбновлятьВидимость=Истина)
	
	Если НЕ ЗначениеЗаполнено(ОтборВидЦен) Тогда
		ОтборВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	КонецЕсли;
	
	Если ОтборВидЦен.ВалютаЦены<>ВалютаПодбора Тогда
		ПересчитатьЦеныСуммыКорзиныВВалюту(ОтборВидЦен.ВалютаЦены);
	КонецЕсли; 
	
	ВалютаПодбора = ОтборВидЦен.ВалютаЦены;
	ВалютаПредставление = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ВалютаПодбора);
	СимвольноеПредставление = ?(ЗначениеЗаполнено(ВалютаПредставление), " " + ВалютаПредставление, "");
	ЗаголовокЦен = Строка(ОтборВидЦен) + СимвольноеПредставление;
	Элементы.Цена.Заголовок 					= ЗаголовокЦен;
	Элементы.СписокЗапасыВНаличииЦена.Заголовок = ЗаголовокЦен;
	
	СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ВидЦен", ОтборВидЦен);
	СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("ВидЦен", ОтборВидЦен);
	
	Если ОбновлятьВидимость Тогда
		УстановитьВидимостьИДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныСуммыКорзиныВВалюту(НоваяВалюта)
	
	КурсВалюты = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ВалютаПодбора,НоваяВалюта, ТекущаяДатаСеанса());
	
	Для каждого СтрокаКорзины Из Корзина Цикл
	
		СтрокаКорзины.Цена = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(СтрокаКорзины.Цена, КурсВалюты.КурсНач, КурсВалюты.Курс,	
			КурсВалюты.КратностьНач, КурсВалюты.Кратность);
			
		РаботаСНоменклатуройКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(ЭтотОбъект, СтрокаКорзины, "Корзина");
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОстаткиПриИзменении(Элемент)
	
	ОтборОстаткиПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОтборОстаткиПриИзмененииСервер()
	
	ВНаличииНаСкладе = ЗначениеЗаполнено(ОтборСклад) И ОтборОстатки=1;

	НоваяСтраницаНоменклатуры = ?(ВНаличииНаСкладе, "СписокЗапасыВНаличии",  "СписокЗапасы");
	УстановитьСтраницуСпискаНоменклатуры(НоваяСтраницаНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаОстаткиСервер(СписокДляОтбора, ОтборОстатки)
	
	ВидСравненияОтбора	= ?(ОтборОстатки=2, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ВидСравненияКомпоновкиДанных.Больше);
	ИспользованиеОтбора = ОтборОстатки<>0;
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(ЭтаФорма[ТекущаяСтраницаНоменклатуры], 
		"КоличествоОстаток", 0, ИспользованиеОтбора, ВидСравненияОтбора);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьКоличествоВСписке(Команда)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЦеныВСписке(Команда)
	
	Если ИспользоватьЦеныВСписке Тогда
		УстановитьОтборЦеныНаСервере(ЦенаОт, ЦенаДо);
	Иначе
		УстановитьОтборЦеныНаСервере(0, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	
	СтруктураИменЭлементов = Новый Структура("ФильтрыНастройкиИДопИнфо, ДекорацияРазвернутьОтборы, ПраваяПанель",
	    "ФильтрыНастройкиИДопИнфо","ДекорацияРазвернутьОтборы","ПраваяПанель"
		);
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоИерархии(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтборПоГруппе = ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.Значение);
	
	Элементы.ОтборИерархияКонтекстноеМенюИзменить.Доступность							= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюСкопировать.Доступность						= ЭтоОтборПоГруппе;
	Элементы.ОтборИерархияКонтекстноеМенюУстановитьПометкуУдаленияГруппы.Доступность	= ЭтоОтборПоГруппе;
	
	ПравоеЗначение	= Неопределено;
	Сравнение		= ВидСравненияКомпоновкиДанных.Равно;
	Использование	= Истина;
	
	Если ЭтоОтборПоГруппе Тогда
		
		Если Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка Тогда
			Сравнение = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЕсли;
		ПравоеЗначение = Элементы.ОтборИерархия.ТекущиеДанные.Значение;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.Представление = "<Все группы>" Тогда
		
		Использование = Ложь;
		
	ИначеЕсли Элементы.ОтборИерархия.ТекущиеДанные.Представление = "<Нет группы>" Тогда
		
		ПравоеЗначение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма[Форма.ТекущаяСтраницаНоменклатуры],
		"Родитель",
		ПравоеЗначение,
		Сравнение,
		,
		Использование
	);
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаСервере
// Функция помещает результаты подбора в хранилище
//
// Возвращает структуру:
//	Структура
//		- Адрес в хранилище, куда помещена выбранная номенклатура (корзина);
//		- Уникальный идентификатор формы владельца, необходим для идентификации при обработке результатов подбора;
//
Функция ЗаписатьПодборВХранилище() 
	
	ПодобранныеТовары = Корзина.Выгрузить();
	АдресКорзиныВХранилище = ПоместитьВоВременноеХранилище(ПодобранныеТовары, УникальныйИдентификаторФормыВладельца);
	Возврат Новый Структура("АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца", АдресКорзиныВХранилище, УникальныйИдентификаторФормыВладельца);
	
КонецФункции // ЗаписатьПодборВХранилище()

&НаСервере
Процедура СохранитьНастройки()
	
	СтрокаНастроек = "ИспользоватьЦеныВСписке,ПоказыватьКолонкуОстатки";
	ИмяКлючаОбъекта = "СписокНоменклатура";
	
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек, , Истина, Истина);
	Для каждого Элемент Из МассивНастроек Цикл
		ХранилищеСистемныхНастроек.Сохранить(ИмяКлючаОбъекта,
		ИмяКлючаОбъекта+"_" + Элемент, ЭтаФорма[Элемент]);
	КонецЦикла;
	
	КатегорииНоменклатурыСервер.УстановитьНастройкуВидОтбораНоменклатуры(ОтборКатегорииИерархияПереключатель);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		ИмяФормы,
		"ВключаяВложенные",
		Элементы.ОтборИерархияКонтекстноеМенюИерархияВключаяВложенные.Пометка
	);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	СтрокаНастроек = "ИспользоватьЦеныВСписке,ПоказыватьКолонкуОстатки";
	ИмяКлючаОбъекта = "СписокНоменклатура";
	
	МассивНастроек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНастроек);
	Для каждого Элемент Из МассивНастроек Цикл
		Значение = ХранилищеСистемныхНастроек.Загрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+"_" + Элемент);
		Если Значение=Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ЭтаФорма[Элемент] = Значение;
	КонецЦикла;
	
	ИспользоватьЦеныВСписке = ИспользоватьЦеныВСписке И ЕстьДоступКЦенам;
	
	ОтборКатегорииИерархияПереключатель = КатегорииНоменклатурыСервер.ПолучитьНастройкуВидОтбораНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЦеныНаСервере(ЦенаОт, ЦенаДо)
	
	УстановитьВидимостьИДоступность();

	УстановитьОтборЦенСервер(ЦенаОт, ЦенаДо);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураВыбора()
	
	Возврат 
		Новый Структура(
		"Номенклатура,
		|Характеристика,
		|ХарактеристикиИспользуются,
		|ТипНоменклатуры,
		|ЕдиницаИзмерения,
		|Цена,
		|СтавкаНДС,
		|Количество,
		|СтранаПроисхождения");
		
КонецФункции

&НаКлиенте
Процедура ДобавитьНоменклатуруВКорзину(СтруктураВыбора)
	
	СтруктураПоискаВКорзине = Новый Структура;
	СтруктураПоискаВКорзине.Вставить("Номенклатура", СтруктураВыбора.Номенклатура);
	Если СтруктураВыбора.Характеристика=Неопределено ИЛИ СтруктураВыбора.Характеристика="<Без характеристики>" Тогда
		СтруктураПоискаВКорзине.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	Иначе
		СтруктураПоискаВКорзине.Вставить("Характеристика", СтруктураВыбора.Характеристика);
	КонецЕсли;
	НайденныеСтроки = Корзина.НайтиСтроки(СтруктураПоискаВКорзине);
	Если НайденныеСтроки.Количество()=0 Тогда
		СтрокаКорзины = Корзина.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорзины, СтруктураВыбора);
	Иначе
		СтрокаКорзины = НайденныеСтроки[0];
		СтрокаКорзины.Количество = СтрокаКорзины.Количество + СтруктураВыбора.Количество;
		//Если цена изменилась - перезаполняем новым значением
		СтрокаКорзины.Цена = СтруктураВыбора.Цена;
	КонецЕсли;
	
	Если НЕ ИспользоватьЦеныВСписке Тогда
		СтруктураВыбора.Вставить("ВидЦен",			ОтборВидЦен);
		СтруктураВыбора.Вставить("ВалютаДокумента", ВалютаПодбора);
		СтруктураВыбора.Вставить("Коэффициент",		1);
		Если СтруктураВыбора.Свойство("Характеристика") И СтруктураВыбора.Характеристика=Неопределено Тогда
			СтруктураВыбора.Вставить("Характеристика", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));			
		КонецЕсли;
		СтрокаКорзины.Цена = ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере(СтруктураВыбора);
	КонецЕсли;
	
	РаботаСНоменклатуройКлиентСервер.РассчитатьСуммуВСтрокеТабличнойЧасти(ЭтотОбъект, СтрокаКорзины, "Корзина");
	
	ОбновитьНадписьПодобраноТоваров();

	ПоказатьОповещениеПользователя(НСтр("ru = 'Подбор товаров'")
		,
		,
		НСтр("ru = 'Товар "+СтруктураВыбора.Номенклатура+","+СтруктураВыбора.Характеристика+" добавлен в корзину'"), БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЦенуНоменклатурыПоВидуЦенНаСервере(СтруктураВыбора)
	
	//Текущую дату получаем на сервере, используя ТекущаяДатаСеанса, чтобы учесть разницу часовых поясов
	СтруктураВыбора.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
	
	Возврат УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураВыбора);
	
КонецФункции

&НаКлиенте
Процедура Восстановить(Команда)
	
	СписокОтложенных = ПолучитьСписокОтложенных();
	Для каждого стр Из СписокОтложенных Цикл
		стр.Представление = СтрПолучитьСтроку(стр.Значение,1);
	КонецЦикла;
	
	Если СписокОтложенных.Количество()=0 Тогда
	    ОткрытьКорзинуПродолжить(Неопределено);
	Иначе
		ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ВосстановитьЗавершение",ЭтотОбъект), СписокОтложенных);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьЗавершение(ВыбранныйЭлемент, Параметры) Экспорт

	ПараметрыКорзины=Неопределено;
	Если ВыбранныйЭлемент<>Неопределено И ВыбранныйЭлемент.Значение<>Неопределено Тогда
		ПараметрыКорзины = ВосстановитьНаСервере(ВыбранныйЭлемент.Значение);
		ОткрытьКорзинуПродолжить(ПараметрыКорзины);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНаСервере(КлючНастроек)
	
	СтрокаНастроек = ХранилищеНастроекДанныхФорм.Загрузить("КорзинаНоменклатура", КлючНастроек);
	Корзина.Загрузить(ЗначениеИзСтрокиВнутр(СтрокаНастроек));
	ХранилищеНастроекДанныхФорм.Удалить("КорзинаНоменклатура", КлючНастроек, ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	ЧислоОтложенныхКорзин = ЧислоОтложенныхКорзин - 1;
	Если ЧислоОтложенныхКорзин>0 Тогда
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаОтложена;
	Иначе
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаПустая;
	КонецЕсли;
	
	ПараметрыКорзины = ЗаписатьПодборВХранилище();
	Возврат ПараметрыКорзины;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокОтложенных()
	
	СписокОтложенных = ХранилищеНастроекДанныхФорм.ПолучитьСписок("КорзинаНоменклатура");
	ЧислоОтложенныхКорзин = СписокОтложенных.Количество();
	Возврат СписокОтложенных;
	
КонецФункции

&НаКлиенте
Процедура СписокЗапасыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ВыбратьВСписке(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВСписке(СтандартнаяОбработка)
	
	Если Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.РежимВыбора Тогда
		Если ВыборНесколькихЗначений Тогда
			ОповеститьОВыборе(Элементы[ТекущаяСтраницаНоменклатуры].ВыделенныеСтроки);
		Иначе
			ОповеститьОВыборе(Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Номенклатура);
		КонецЕсли;
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Номенклатура));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеКомандыСпискаНоменклатуры

&НаКлиенте
Процедура СписокЗапасыВНаличииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьВСписке(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыНоменклатура");
	
	Если Элементы.ОтборИерархия.ТекущиеДанные<>Неопределено Тогда
		РодительЗначение = Элементы.ОтборИерархия.ТекущиеДанные.Значение;
	Иначе
		РодительЗначение = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли; 
	ЗначенияЗаполнения = Новый Структура("Родитель", РодительЗначение);
		
	ЗаполнениеТип = Новый Массив;
	Если ОтборТипЗапас Тогда
	    ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	КонецЕсли;
	Если ОтборТипУслуга Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	КонецЕсли;
	Если ОтборТипРабота Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	КонецЕсли;
	Если ОтборТипВидРабот Тогда
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ВидРабот"));
	КонецЕсли;
	Если ОтборТипОперация Тогда		
		ЗаполнениеТип.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция"));
	КонецЕсли;
	Если ЗаполнениеТип.Количество()>0 Тогда
		ЗначенияЗаполнения.Вставить("ТипНоменклатуры", ЗаполнениеТип);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборКатегорииТекущая) Тогда
		ЗначенияЗаполнения.Вставить("КатегорияНоменклатуры", ОтборКатегорииТекущая);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуру()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыНоменклатура");
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГруппу()
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", Новый Структура("Ключ", Элементы.ОтборИерархия.ТекущиеДанные.Значение));
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьГруппу()
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", Новый Структура("ЗначениеКопирования", Элементы.ОтборИерархия.ТекущиеДанные.Значение));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу()
	
	РодительЗначение = ?(Элементы.ОтборИерархия.ТекущиеДанные = Неопределено, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
		Элементы.ОтборИерархия.ТекущиеДанные.Значение);
		
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗначенияЗаполнения",  Новый Структура("Родитель, ЭтоГруппа", РодительЗначение, Истина));
	ПараметрыЗаполнения.Вставить("ЭтоГруппа",  Истина);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", ПараметрыЗаполнения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьНоменклатуру()
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("ЗначениеКопирования", Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеНоменклатуру()
	
	ТекущаяНоменклатура = Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка;
	НовоеЗначениеПометкиУдаления = ИзменитьПометкуУдаленияСервер(ТекущаяНоменклатура);
	
	ПоказатьОповещениеПользователя(
		СтрШаблон(НСтр("ru='Пометка удаления %1'"), ?(НовоеЗначениеПометкиУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'"))),
		ПолучитьНавигационнуюСсылку(ТекущаяНоменклатура),
		ТекущаяНоменклатура,
		БиблиотекаКартинок.Информация32);
		
	Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаленияСервер(Номенклатура)
	
	НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
	НоменклатураОбъект.УстановитьПометкуУдаления(Не НоменклатураОбъект.ПометкаУдаления, Истина);
	
	Возврат НоменклатураОбъект.ПометкаУдаления;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкуУдаленияГруппы(Команда)
	
	Если Элементы.ОтборИерархия.ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(Элементы.ОтборИерархия.ТекущиеДанные.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДерева = ОтборИерархия.НайтиПоИдентификатору(Элементы.ОтборИерархия.ТекущиеДанные.ПолучитьИдентификатор());
	ТекущаяСтрокаДерева.ПометкаУдаления = ИзменитьПометкуУдаленияСервер(ТекущаяСтрокаДерева.Значение);
	ТекущаяСтрокаДерева.Картинка= ?(ТекущаяСтрокаДерева.ПометкаУдаления,1,0);
	РаботаСНоменклатуройКлиентСервер.УстановитьФлагУПодчиненных(ТекущаяСтрокаДерева.ПолучитьЭлементы(), "ПометкаУдаления", ТекущаяСтрокаДерева.ПометкаУдаления);
	РаботаСНоменклатуройКлиентСервер.УстановитьФлагУПодчиненных(ТекущаяСтрокаДерева.ПолучитьЭлементы(), "Картинка", ТекущаяСтрокаДерева.Картинка);
	
	ПоказатьОповещениеПользователя(
		СтрШаблон(НСтр("ru='Пометка удаления %1'"), ?(ТекущаяСтрокаДерева.ПометкаУдаления, НСтр("ru='установлена'"), НСтр("ru='снята'"))),
		ПолучитьНавигационнуюСсылку(ТекущаяСтрокаДерева.Значение),
		ТекущаяСтрокаДерева.Значение,
		БиблиотекаКартинок.Информация32);
		
	Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьВГруппуНаСервере(Результат, ДополнительныеПараметры)

	Об = ДополнительныеПараметры.ТекущийЭлементСписка.ПолучитьОбъект();
	Об.Родитель = Результат;
	Об.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И ДополнительныеПараметры.Свойство("ТекущийЭлементСписка") Тогда
		ПереместитьВГруппуНаСервере(Результат, ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Процедура ПереместитьВГруппу(Команда)
	
	ТекЭлементСписка = Новый Структура("ТекущийЭлементСписка",Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные.Ссылка);
	ОписаниеОповещенияПереместить = Новый ОписаниеОповещения("ПереместитьВГруппуПродолжить", ЭтотОбъект, ТекЭлементСписка);
		
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",,,,,, 
		ОписаниеОповещенияПереместить, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Группа Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	
	Если Не Копирование И Не Группа Тогда
		Отказ = Истина;
		СоздатьНоменклатуру();
	ИначеЕсли Группа Тогда
		Отказ = Истина;
		СоздатьГруппу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапасыПриАктивизацииСтроки(Элемент)

	Элементы.СкопироватьНоменклатуру.Доступность = НЕ Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные=Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапасыВНаличииПриАктивизацииСтроки(Элемент)

	Элементы.СкопироватьНоменклатуру.Доступность = НЕ Элементы[ТекущаяСтраницаНоменклатуры].ТекущиеДанные=Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКорзиной

&НаКлиенте
Процедура ДекорацияКорзинаНажатие(Элемент)
	
	ОткрытьКорзину();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПодобраноТоваров() Экспорт
	
	КоличествоТоваров	= Корзина.Итог("Количество");
	СуммаТоваров		= Корзина.Итог("Сумма");
	
	Если Корзина.Количество()=0 Тогда
		НадписьПодобраноТоваров = НСтр("ru = 'перетащите товары в корзину'");
	Иначе	
		РаботаСНоменклатуройКлиентСервер.ОбновитьИтогиПодобранныхТоваров(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьВКорзину(ПараметрыПеретаскивания.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКорзинаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКорзину()
	
	Если Корзина.Количество()>0 Тогда
		ПараметрыКорзины = ЗаписатьПодборВХранилище();
		ОткрытьКорзинуПродолжить(ПараметрыКорзины);
	Иначе
		Восстановить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКорзинуПродолжить(ПараметрыКорзины)
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("НалогообложениеНДС", НалогообложениеНДС);
	ПередаваемыеПараметры.Вставить("ИспользуетсяНДС", ИспользуетсяНДС);
	ПередаваемыеПараметры.Вставить("АдресКорзиныВХранилище", ?(ЗначениеЗаполнено(ПараметрыКорзины), ПараметрыКорзины.АдресКорзиныВХранилище, Неопределено));
	ПередаваемыеПараметры.Вставить("ОтборВидЦен", ОтборВидЦен);
	ПередаваемыеПараметры.Вставить("ОтборСклад", ОтборСклад);
	ПередаваемыеПараметры.Вставить("ИспользуютсяХарактеристики", ИспользуютсяХарактеристики);
	ПередаваемыеПараметры.Вставить("ЕстьДоступКЦенам", ЕстьДоступКЦенам);
	
	ПередаваемыеПараметры.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификаторФормыВладельца);
	
	ОповещениеКорзинаЗакрытие = Новый ОписаниеОповещения("КорзинаЗакрытие",ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКорзина",ПередаваемыеПараметры, ЭтаФорма,,,,ОповещениеКорзинаЗакрытие,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЗакрытие(ПараметрЗакрытия, Параметры) Экспорт

	Корзина.Очистить();
	
	Если ПараметрЗакрытия = Неопределено Тогда
		//Закрытие без сохранения
	ИначеЕсли ПараметрЗакрытия="КорзинаОтложена" Тогда
		ЧислоОтложенныхКорзин = ЧислоОтложенныхКорзин + 1;
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаОтложена;
	ИначеЕсли ПараметрЗакрытия="ПеренестиВДокумент" Тогда
		//Закрытие без сохранения
	Иначе 
		//Закрытие с сохранением
		Для каждого стр Из ПараметрЗакрытия.Корзина Цикл
			НовСтр = Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, стр);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьНадписьПодобраноТоваров();
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьВКорзину(ВыбранныеСтроки)
	
	Если ТипЗнч(ВыбранныеСтроки) = Тип("Массив") Тогда
		Для каждого ВыделеннаяСтрока Из ВыбранныеСтроки Цикл
			ДобавитьСтрокуВКорзину(ВыделеннаяСтрока);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ВыбранныеСтроки) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДобавитьСтрокуВКорзину(ВыбранныеСтроки);
	КонецЕсли;
	
	ОбновитьНадписьПодобраноТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВКорзину(ВыделеннаяСтрока)

	Если Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасыВНаличии 
		И ТипЗнч(ВыделеннаяСтрока)<>Тип("Число") Тогда
		возврат;
	ИначеЕсли Элементы.СтраницыНоменклатуры.ТекущаяСтраница = Элементы.СтраницаЗапасы И 
		ТипЗнч(ВыделеннаяСтрока) <> Тип("СправочникСсылка.Номенклатура") Тогда
		возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы[ТекущаяСтраницаНоменклатуры].ДанныеСтроки(ВыделеннаяСтрока);
	
	СтруктураВыбора = СтруктураВыбора();
	ЗаполнитьЗначенияСвойств(СтруктураВыбора, ДанныеСтроки);
	
	СтруктураВыбора.Количество = 1;
	ДобавитьНоменклатуруВКорзину(СтруктураВыбора);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыбратьИзСпискаЗавершение(ВыбранныйЭлемент, Параметры) Экспорт

	Если ВыбранныйЭлемент<>Неопределено И ВыбранныйЭлемент.Значение<>Неопределено Тогда
		РазрешитьЗакрытие = 1;
		РаботаСНоменклатуройКлиент.ОформитьДокументСТоварамиИзКорзины(ЭтаФорма, ВыбранныйЭлемент.Значение);
		
		Корзина.Очистить();
		ОбновитьНадписьПодобраноТоваров();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуИзСписка(Команда)
	
	ДобавитьВКорзину(Элементы[ТекущаяСтраницаНоменклатуры].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьКорзинаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДекорацияКорзинаНажатие(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКатегориями

&НаКлиенте
Процедура ОтборКатегорииИерархияПереключательПриИзменении(Элемент)
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
		Элементы.ОтборИерархия.ТекущаяСтрока = 0;
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(ЭтаФорма[ТекущаяСтраницаНоменклатуры], 
			"Родитель", , Ложь, ВидСравненияКомпоновкиДанных.Равно);
		ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
		
	ИначеЕсли ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияГруппыОтбор;
		
		Элементы.ОтборКатегории.ТекущаяСтрока = 0;
		ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПриАктивизацииСтроки(Элемент)
	
	Если ОтборКатегорииИерархияПереключатель <> ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборКатегорииТекущая = Элементы.ОтборКатегории.ТекущиеДанные.Значение Тогда
		Возврат;
	КонецЕсли;
	
	ДоступныКонтекстныеКоманды = ЗначениеЗаполнено(Элементы.ОтборКатегории.ТекущиеДанные.Значение);
	Элементы.ОтборКатегорииКонтекстноеМенюИзменить.Доступность = ДоступныКонтекстныеКоманды;
	
	ПодключитьОбработчикОжидания("ОтборКатегорииПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
	
	ТекущийЭлемент = Элементы.ОтборКатегории;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПриАктивизацииСтрокиНаКлиенте()
	
	Если ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		
		ОтборКатегорииТекущая = ПредопределенноеЗначение("Справочник.КатегорииНоменклатуры.ПустаяСсылка");
		
	ИначеЕсли ОтборКатегорииИерархияПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		
		Если Элементы.ОтборКатегории.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОтборКатегорииТекущая = Элементы.ОтборКатегории.ТекущиеДанные.Значение;
		
	КонецЕсли;
	
	ОтборКатегорииПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтборКатегорииПриАктивизацииСтрокиНаСервере()
	
	КатегорииНоменклатурыСервер.УстановитьОтборПоКатегории(
		ЭтотОбъект,
		ЭтаФорма[ТекущаяСтраницаНоменклатуры], 
		ОтборКатегорииТекущая
	);
	
	КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(
		ЭтотОбъект,
		ЭтаФорма[ТекущаяСтраницаНоменклатуры],
		ОтборКатегорииТекущая,
		"КатегорииОтборСвойства",
		Ложь
	);
	
	Если ТекущаяСтраницаНоменклатуры = "СписокЗапасыВНаличии" И ВНаличииНаСкладе Тогда
		
		КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(
			ЭтотОбъект,
			ЭтаФорма[ТекущаяСтраницаНоменклатуры],
			ОтборКатегорииТекущая,
			"КатегорииОтборСвойства",
			Истина
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	КатегорииНоменклатурыКлиент.ДеревоКатегорийПередНачаломДобавления(Элементы.ОтборКатегории.ТекущиеДанные.Значение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииПередНачаломИзменения(Элемент, Отказ)
	
	КатегорииНоменклатурыКлиент.ДеревоКатегорийПередНачаломИзменения(Элементы.ОтборКатегории.ТекущиеДанные.Значение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораДополнительногоРеквизита(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
		
		ОписаниеСвойства = Новый Структура("Свойство,СписокВыбораЗначенийСсылка", Неопределено, Неопределено);
		ОписаниеСвойства(Элемент.Имя, ОписаниеСвойства);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Свойство", ОписаниеСвойства.Свойство);
		ПараметрыФормы.Вставить("СписокВыбораЗначенийСсылка", ОписаниеСвойства.СписокВыбораЗначенийСсылка);
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораЗначенияСвойства", ПараметрыФормы, Элемент);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораДополнительногоРеквизита(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоСвойству(Элемент.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УстановитьОтборПоСвойству(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКатегорий()
	
	Дерево = КатегорииНоменклатурыСервер.ДеревоКатегорий();
	ЗначениеВРеквизитФормы(Дерево, "ОтборКатегории");
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеСвойства(ЭлементИмя, ОписаниеСвойства)
	
	Строки = СвойстваОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ЭлементИмя));
	Если Строки.Количество() <> 0 Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеСвойства, Строки[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСвойству(ЭлементИмя, Значение = Неопределено)
	
	ОписаниеСвойства = Новый Структура("ДополнительноеЗначение", Неопределено);
	ОписаниеСвойства(ЭлементИмя, ОписаниеСвойства);
	Если ОписаниеСвойства.ДополнительноеЗначение Тогда
		
		ПолеОтбора = КатегорииНоменклатурыСервер.ПолеОтбораДополнительногоРеквизита(ЭтотОбъект, ЭлементИмя, ОтборКатегорииТекущая);
		УстановитьМеткуИОтборСписка(ПолеОтбора, Элементы[ЭлементИмя].Родитель.Имя, Значение);
		
	Иначе
		
		КатегорииНоменклатурыСервер.УстановитьОтборПоДополнительномуРеквизиту(
			ЭтотОбъект,
			ЭтаФорма[ТекущаяСтраницаНоменклатуры],
			ЭлементИмя,
			ОтборКатегорииТекущая);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьТекстЗапросаСписокЗапасыБезЦен()
	
	СписокЗапасы.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ПометкаУдаления,
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.ЭтоГруппа,
	|	СправочникНоменклатура.Код,
	|	СправочникНоменклатура.Наименование,
	|	СправочникНоменклатура.Артикул,
	|	СправочникНоменклатура.ДатаИзменения,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.МетодОценки,
	|	ВЫРАЗИТЬ(СправочникНоменклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
	|	СправочникНоменклатура.НаправлениеДеятельности,
	|	СправочникНоменклатура.КатегорияНоменклатуры,
	|	СправочникНоменклатура.Поставщик,
	|	СправочникНоменклатура.Склад,
	|	СправочникНоменклатура.Спецификация,
	|	СправочникНоменклатура.СпособПополнения,
	|	СправочникНоменклатура.СрокПополнения,
	|	СправочникНоменклатура.СтавкаНДС,
	|	СправочникНоменклатура.СчетУчетаЗапасов,
	|	СправочникНоменклатура.СчетУчетаЗатрат,
	|	СправочникНоменклатура.ТипНоменклатуры,
	|	СправочникНоменклатура.Ячейка,
	|	СправочникНоменклатура.ЦеноваяГруппа,
	|	СправочникНоменклатура.ИспользоватьХарактеристики,
	|	СправочникНоменклатура.ИспользоватьПартии КАК ИспользуетсяРезервирование,
	|	СправочникНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СправочникНоменклатура.Недействителен,
	|	СправочникНоменклатура.СрокИсполненияЗаказа,
	|	СправочникНоменклатура.НормаВремени,
	|	СправочникНоменклатура.ФиксированнаяСтоимость,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ИмпортнаяАлкогольнаяПродукция,
	|	СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции,
	|	СправочникНоменклатура.ОбъемДАЛ,
	|	СправочникНоменклатура.ИспользоватьСерийныеНомера,
	|	СправочникНоменклатура.ГарантийныйСрок,
	|	СправочникНоменклатура.ВыписыватьГарантийныйТалон,
	|	ПОДСТРОКА(СправочникНоменклатура.Комментарий, 1, 1000) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользоватьХарактеристики
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВариантКартинки,
	|	0 КАК Цена,
	|	ЕСТЬNULL(ОстаткиТоваров.Количество, 0) КАК КоличествоОстаток
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|		ПО (&ПоказыватьКоличество)
	|			И (ОстаткиТоваров.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа";

	СписокЗапасыВНаличии.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗапасыНаСкладах.Номенклатура.Ссылка КАК Ссылка,
	|	ЗапасыНаСкладах.Номенклатура.Ссылка КАК Номенклатура,
	|	ЗапасыНаСкладах.Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗапасыНаСкладах.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	ЗапасыНаСкладах.Номенклатура.Код КАК Код,
	|	ЗапасыНаСкладах.Номенклатура.Родитель КАК Родитель,
	|	ЗапасыНаСкладах.Номенклатура.Наименование КАК Наименование,
	|	ЗапасыНаСкладах.Номенклатура.Артикул КАК Артикул,
	|	ЗапасыНаСкладах.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ЗапасыНаСкладах.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
	|	ЗапасыНаСкладах.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ЗапасыНаСкладах.Номенклатура.Поставщик КАК Поставщик,
	|	ЗапасыНаСкладах.Номенклатура.Склад КАК Склад,
	|	ЗапасыНаСкладах.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ЗапасыНаСкладах.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗапасыНаСкладах.Номенклатура.ИспользоватьХарактеристики,
	|	ЗапасыНаСкладах.Номенклатура.ИспользоватьПартии КАК ИспользуетсяРезервирование,
	|	ЗапасыНаСкладах.Номенклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ЗапасыНаСкладах.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЛОЖЬ КАК ИспользоватьХарактеристики,
	|	ЗапасыНаСкладах.Номенклатура.Недействителен КАК Недействителен,
	|	ПОДСТРОКА(ЗапасыНаСкладах.Номенклатура.Комментарий, 1, 1000) КАК Комментарий,
	|	ЗапасыНаСкладах.Номенклатура.ДатаИзменения КАК ДатаИзменения,
	|	ЗапасыНаСкладах.Номенклатура.МетодОценки КАК МетодОценки,
	|	ЗапасыНаСкладах.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗапасыНаСкладах.Номенклатура.Спецификация КАК Спецификация,
	|	ЗапасыНаСкладах.Номенклатура.СпособПополнения КАК СпособПополнения,
	|	ЗапасыНаСкладах.Номенклатура.СрокПополнения КАК СрокПополнения,
	|	ЗапасыНаСкладах.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ЗапасыНаСкладах.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ЗапасыНаСкладах.Номенклатура.Ячейка КАК Ячейка,
	|	ЗапасыНаСкладах.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ЗапасыНаСкладах.Номенклатура.СрокИсполненияЗаказа КАК СрокИсполненияЗаказа,
	|	ЗапасыНаСкладах.Номенклатура.НормаВремени КАК НормаВремени,
	|	ЗапасыНаСкладах.Номенклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	ЗапасыНаСкладах.Номенклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	ЗапасыНаСкладах.Номенклатура.ИмпортнаяАлкогольнаяПродукция КАК ИмпортнаяАлкогольнаяПродукция,
	|	ЗапасыНаСкладах.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	ЗапасыНаСкладах.Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ЗапасыНаСкладах.Номенклатура.ИспользоватьСерийныеНомера,
	|	ЗапасыНаСкладах.Номенклатура.ГарантийныйСрок,
	|	ЗапасыНаСкладах.Номенклатура.ВыписыватьГарантийныйТалон,
	|	0 КАК Цена,
	|	ЗапасыНаСкладах.КоличествоОстаток КАК КоличествоОстаток,
	|	ЗапасыНаСкладах.Характеристика,
	|	ВЫБОР
	|		КОГДА ЗапасыНаСкладах.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ЗапасыНаСкладах.Номенклатура.ИспользоватьХарактеристики
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ЗапасыНаСкладах.Номенклатура.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВариантКартинки
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			,
	|			&ВсеСклады
	|				ИЛИ СтруктурнаяЕдиница = &Склад) КАК ЗапасыНаСкладах";
	 
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаСписокЗапасыСЦенами()
	
	СписокЗапасы.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.ПометкаУдаления,
	|	СправочникНоменклатура.Родитель,
	|	СправочникНоменклатура.ЭтоГруппа,
	|	СправочникНоменклатура.Код,
	|	СправочникНоменклатура.Наименование,
	|	СправочникНоменклатура.Артикул,
	|	СправочникНоменклатура.ДатаИзменения,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения, СправочникНоменклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.МетодОценки,
	|	ВЫРАЗИТЬ(СправочникНоменклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
	|	СправочникНоменклатура.НаправлениеДеятельности,
	|	СправочникНоменклатура.КатегорияНоменклатуры,
	|	СправочникНоменклатура.Поставщик,
	|	СправочникНоменклатура.Склад,
	|	СправочникНоменклатура.Спецификация,
	|	СправочникНоменклатура.СпособПополнения,
	|	СправочникНоменклатура.СрокПополнения,
	|	СправочникНоменклатура.СтавкаНДС,
	|	СправочникНоменклатура.СчетУчетаЗапасов,
	|	СправочникНоменклатура.СчетУчетаЗатрат,
	|	СправочникНоменклатура.ТипНоменклатуры,
	|	СправочникНоменклатура.Ячейка,
	|	СправочникНоменклатура.ЦеноваяГруппа,
	|	СправочникНоменклатура.ИспользоватьХарактеристики,
	|	СправочникНоменклатура.ИспользоватьПартии КАК ИспользуетсяРезервирование,
	|	СправочникНоменклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	СправочникНоменклатура.Недействителен,
	|	СправочникНоменклатура.СрокИсполненияЗаказа,
	|	СправочникНоменклатура.НормаВремени,
	|	СправочникНоменклатура.ФиксированнаяСтоимость,
	|	СправочникНоменклатура.СтранаПроисхождения,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ИмпортнаяАлкогольнаяПродукция,
	|	СправочникНоменклатура.ПроизводительИмпортерАлкогольнойПродукции,
	|	СправочникНоменклатура.ОбъемДАЛ,
	|	СправочникНоменклатура.ИспользоватьСерийныеНомера,
	|	СправочникНоменклатура.ГарантийныйСрок,
	|	СправочникНоменклатура.ВыписыватьГарантийныйТалон,
	|	ПОДСТРОКА(СправочникНоменклатура.Комментарий, 1, 1000) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользоватьХарактеристики
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА СправочникНоменклатура.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВариантКартинки,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА ЕСТЬNULL(ОстаткиТоваров.Количество, 0) / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ ЕСТЬNULL(ОстаткиТоваров.Количество, 0)
	|	КОНЕЦ КАК КоличествоОстаток
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
	|		ПО (&ПоказыватьКоличество)
	|			И (ОстаткиТоваров.Номенклатура = СправочникНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодЦен, Актуальность И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (&ПоказыватьЦены)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка)
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа";
	
	СписокЗапасыВНаличии.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗапасыНаСкладах.Номенклатура.Ссылка КАК Ссылка,
	|	ЗапасыНаСкладах.Номенклатура.Ссылка КАК Номенклатура,
	|	ЗапасыНаСкладах.Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗапасыНаСкладах.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	ЗапасыНаСкладах.Номенклатура.Код КАК Код,
	|	ЗапасыНаСкладах.Номенклатура.Родитель КАК Родитель,
	|	ЗапасыНаСкладах.Номенклатура.Наименование КАК Наименование,
	|	ЗапасыНаСкладах.Номенклатура.Артикул КАК Артикул,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения, ЗапасыНаСкладах.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(ЗапасыНаСкладах.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное,
	|	ЗапасыНаСкладах.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
	|	ЗапасыНаСкладах.Номенклатура.Поставщик КАК Поставщик,
	|	ЗапасыНаСкладах.Номенклатура.Склад КАК Склад,
	|	ЗапасыНаСкладах.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ЗапасыНаСкладах.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗапасыНаСкладах.Номенклатура.ИспользоватьХарактеристики,
	|	ЗапасыНаСкладах.Номенклатура.ИспользоватьПартии КАК ИспользуетсяРезервирование,
	|	ЗапасыНаСкладах.Номенклатура.ИспользоватьПартии КАК ИспользоватьПартии,
	|	ЗапасыНаСкладах.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ЛОЖЬ КАК ИспользоватьХарактеристики,
	|	ЗапасыНаСкладах.Номенклатура.Недействителен КАК Недействителен,
	|	ПОДСТРОКА(ЗапасыНаСкладах.Номенклатура.Комментарий, 1, 1000) КАК Комментарий,
	|	ЗапасыНаСкладах.Номенклатура.ДатаИзменения КАК ДатаИзменения,
	|	ЗапасыНаСкладах.Номенклатура.МетодОценки КАК МетодОценки,
	|	ЗапасыНаСкладах.Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗапасыНаСкладах.Номенклатура.Спецификация КАК Спецификация,
	|	ЗапасыНаСкладах.Номенклатура.СпособПополнения КАК СпособПополнения,
	|	ЗапасыНаСкладах.Номенклатура.СрокПополнения КАК СрокПополнения,
	|	ЗапасыНаСкладах.Номенклатура.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
	|	ЗапасыНаСкладах.Номенклатура.СчетУчетаЗатрат КАК СчетУчетаЗатрат,
	|	ЗапасыНаСкладах.Номенклатура.Ячейка КАК Ячейка,
	|	ЗапасыНаСкладах.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ЗапасыНаСкладах.Номенклатура.СрокИсполненияЗаказа КАК СрокИсполненияЗаказа,
	|	ЗапасыНаСкладах.Номенклатура.НормаВремени КАК НормаВремени,
	|	ЗапасыНаСкладах.Номенклатура.ФиксированнаяСтоимость КАК ФиксированнаяСтоимость,
	|	ЗапасыНаСкладах.Номенклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	ЗапасыНаСкладах.Номенклатура.ИмпортнаяАлкогольнаяПродукция КАК ИмпортнаяАлкогольнаяПродукция,
	|	ЗапасыНаСкладах.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции КАК ПроизводительИмпортерАлкогольнойПродукции,
	|	ЗапасыНаСкладах.Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ЗапасыНаСкладах.Номенклатура.ИспользоватьСерийныеНомера,
	|	ЗапасыНаСкладах.Номенклатура.ГарантийныйСрок,
	|	ЗапасыНаСкладах.Номенклатура.ВыписыватьГарантийныйТалон,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ССЫЛКА Справочник.ЕдиницыИзмерения
	|			ТОГДА ЕСТЬNULL(ЗапасыНаСкладах.КоличествоОстаток, 0) / ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ ЕСТЬNULL(ЗапасыНаСкладах.КоличествоОстаток, 0)
	|	КОНЕЦ КАК КоличествоОстаток,
	|	ЗапасыНаСкладах.Характеристика,
	|	ВЫБОР
	|		КОГДА ЗапасыНаСкладах.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ЗапасыНаСкладах.Номенклатура.ИспользоватьХарактеристики
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ЗапасыНаСкладах.Номенклатура.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВариантКартинки
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|			,
	|			&ВсеСклады
	|				ИЛИ СтруктурнаяЕдиница = &Склад) КАК ЗапасыНаСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ПериодЦен, Актуальность И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (&ПоказыватьЦены)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = ЗапасыНаСкладах.Номенклатура.Ссылка)
	|			И ЗапасыНаСкладах.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика";		
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиФормыПриСоздании(Параметры)
	
	Если Параметры.Свойство("ВидЦен") И ЗначениеЗаполнено(Параметры.ВидЦен) Тогда
		Элементы.ОтборВидЦен.ТолькоПросмотр = Истина;
		ОтборВидЦен = Параметры.ВидЦен;
	Иначе
		ОтборВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	КонецЕсли;
	
	Если Параметры.Свойство("Валюта") И ЗначениеЗаполнено(Параметры.Валюта) Тогда
		ВалютаПодбора = Параметры.Валюта;
	ИначеЕсли ЗначениеЗаполнено(ОтборВидЦен) Тогда
		ВалютаПодбора = ОтборВидЦен.ВалютаЦены;
	Иначе
		ВалютаПодбора = УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета();
	КонецЕсли;
	Если ЗначениеЗаполнено(ВалютаПодбора) Тогда
		ВалютаПредставление = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(ОтборВидЦен.ВалютаЦены);
	КонецЕсли;
	
	ТекущаяСтраницаНоменклатуры = "СписокЗапасы";
	Если Параметры.Свойство("ТипНоменклатуры") И ЗначениеЗаполнено(Параметры.ТипНоменклатуры) Тогда
		УстановитьФиксированныйОтборПоТипамНоменклатуры(Параметры.ТипНоменклатуры);
	ИначеЕсли Параметры.Отбор.Свойство("ТипНоменклатуры") И ЗначениеЗаполнено(Параметры.Отбор.ТипНоменклатуры) Тогда
		УстановитьФиксированныйОтборПоТипамНоменклатуры(Параметры.Отбор.ТипНоменклатуры);
		Параметры.Отбор.Удалить("ТипНоменклатуры");
	КонецЕсли;
	
	Если Параметры.Свойство("СтруктурнаяЕдиница") И ЗначениеЗаполнено(Параметры.СтруктурнаяЕдиница) Тогда
		ОтборСклад = Параметры.СтруктурнаяЕдиница; 
	ИначеЕсли Параметры.Свойство("Склад") И ЗначениеЗаполнено(Параметры.Склад) Тогда
		ОтборСклад = Параметры.Склад;
	КонецЕсли;
	
	// Налогообложение НДС и Сумма для Корзины
	НалогообложениеНДС 		= ?(Параметры.Свойство("НалогообложениеНДС"), Параметры.НалогообложениеНДС, Неопределено);
	Если Параметры.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
	Иначе
		СуммаВключаетНДС = Истина;
	КонецЕсли;
	
	// Установим видимость подменю в зависимости от наличия прав
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		ДоступныЗакупки = РольДоступна("ДобавлениеИзменениеПодсистемыЗакупки");
		ДоступныПродажи = РольДоступна("ДобавлениеИзменениеПодсистемыПродажи");
		
		Элементы.ПодменюКупить.Видимость		= ДоступныЗакупки;
		Элементы.ПодменюКупитьКорзина.Видимость	= ДоступныЗакупки;
		Элементы.ПодменюПродать.Видимость		= ДоступныПродажи;
		Элементы.ПодменюПродатьКорзина.Видимость= ДоступныПродажи;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	УстановитьВидимостьИДоступностьПриСоздании();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьПриСоздании()
	ЧислоДоступныхКоманд = Элементы.ПодменюПродать.ПодчиненныеЭлементы.Количество() + Элементы.ПодменюКупить.ПодчиненныеЭлементы.Количество();
	
	Элементы.Корзина.Видимость        = ЧислоДоступныхКоманд > 0 И НЕ Параметры.РежимВыбора;
	Элементы.ПодменюПродать.Видимость = НЕ Параметры.РежимВыбора;
	Элементы.ПодменюКупить.Видимость  = НЕ Параметры.РежимВыбора;
	Элементы.Выбрать.Видимость        = Параметры.РежимВыбора;
	Элементы.ЦеныОтбор.Видимость      = ЕстьДоступКЦенам;
	ПеречитатьЗначенияКонстантОбновитьФорму();
	
	//Обновить состояние отложенных товаров в корзине
	СписокОтложенныхТоваров = ПолучитьСписокОтложенных();
	Если СписокОтложенныхТоваров.Количество()=0 Тогда
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаПустая;
	Иначе
		Элементы.ДекорацияКорзина.Картинка = БиблиотекаКартинок.ТележкаОтложена;
	КонецЕсли;
	
	НадписьПодобраноТоваров = НСтр("ru = 'перетащите товары в корзину'");
	Элементы.СписокЗапасыКонтекстноеМенюДобавитьВКорзину.Видимость			= НЕ Параметры.РежимВыбора;
	Элементы.СписокЗапасыВНаличииКонтекстноеМенюДобавитьВКорзину.Видимость	= НЕ Параметры.РежимВыбора;
	
	Если ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
	ИначеЕсли ОтборКатегорииИерархияПереключатель = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ИерархияГруппыОтбор;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьЗначенияКонстантОбновитьФорму()

	//Отображение типов номенклатуры от настроек
	Элементы.ОтборТипОперация.Видимость = Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить();
	
	//Отображение колонки Характеристики
	ИспользуютсяХарактеристики 	= Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить();
	Элементы.СписокЗапасыВНаличииХарактеристика.Видимость	= ИспользуютсяХарактеристики;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросовСписков(Параметры)
	
	//Определение вида цен и периода для списков
	Если Параметры.Свойство("Период") И ЗначениеЗаполнено(Параметры.Период) Тогда
		ПараметрПериод = Параметры.Период;
	Иначе
		ПараметрПериод = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЕстьДоступКЦенам Тогда	
		СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ВидЦен", ОтборВидЦен);
		СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ПериодЦен", ПараметрПериод);
		
		СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("ПериодЦен", ПараметрПериод);
		СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("ВидЦен", ОтборВидЦен);
	
		СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ПоказыватьЦены", ИспользоватьЦеныВСписке);
		СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("ПоказыватьЦены", ИспользоватьЦеныВСписке);
		
	КонецЕсли;
	
	СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("ВсеСклады", Истина);
	СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("Склад", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ПоказыватьКоличество", ИспользоватьКоличествоВСписке);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	//Остатки и склад
	ИспользоватьКоличествоВСписке = ?(ОтборОстатки=0 И НЕ ПоказыватьКолонкуОстатки, Ложь, Истина);
	СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("ВсеСклады", НЕ ЗначениеЗаполнено(ОтборСклад));
	СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("Склад", ОтборСклад);
	СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ПоказыватьКоличество", ИспользоватьКоличествоВСписке);
	
	Элементы.ГруппаСтрокаПоискаЗапасы.Видимость			= НЕ ВНаличииНаСкладе;
	Элементы.ГруппаСтрокаПоискаЗапасыВНаличии.Видимость	= ВНаличииНаСкладе;
	Элементы.ОтборСклад.Видимость = (ОтборОстатки=1);
	Элементы.Остаток.Видимость						= ПоказыватьКолонкуОстатки;
	Элементы.СписокЗапасыВНаличииОстаток.Видимость	= ПоказыватьКолонкуОстатки;
	
	//Цены
	Если ЕстьДоступКЦенам Тогда
		СписокЗапасы.Параметры.УстановитьЗначениеПараметра("ПоказыватьЦены", ИспользоватьЦеныВСписке);
		СписокЗапасыВНаличии.Параметры.УстановитьЗначениеПараметра("ПоказыватьЦены", ИспользоватьЦеныВСписке);
	КонецЕсли;
	Элементы.ОтборВидЦен.Доступность			= ИспользоватьЦеныВСписке;
	Элементы.ЦеныДиапазон.Доступность			= ИспользоватьЦеныВСписке;
	Элементы.Цена.Видимость						= ИспользоватьЦеныВСписке;
	Элементы.СписокЗапасыВНаличииЦена.Видимость	= ИспользоватьЦеныВСписке;
	
	// Категории, иерархия
	Если ЗначениеЗаполнено(ОтборКатегорииТекущая) Тогда
		Если ТекущаяСтраницаНоменклатуры = "СписокЗапасыВНаличии" И ВНаличииНаСкладе Тогда
			
			ПоказатьСвойстваХарактеристик = Истина;
			
		Иначе
			
			ПоказатьСвойстваХарактеристик = Ложь;
			
			УдаляемыеМетки = Новый СписокЗначений;
			Для каждого Метка Из ДанныеМеток Цикл
				Если СтрНачинаетсяС(Метка.ИмяПоляОтбора, "Характеристика.") Тогда
					УдаляемыеМетки.Добавить(Метка.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЦикла;
			
			УдалитьМеткиОтбора(УдаляемыеМетки);
			
		КонецЕсли;
		
		КатегорииНоменклатурыСервер.ПоказатьСвойстваКатегории(
			ЭтотОбъект,
			ЭтаФорма[ТекущаяСтраницаНоменклатуры],
			ОтборКатегорииТекущая,
			"КатегорииОтборСвойстваХарактеристики",
			ПоказатьСвойстваХарактеристик);
		
		ОбновитьЭлементыМеток();
		
	КонецЕсли;
	
КонецПроцедуры

//Перед закрытием, если были подобраны товары, предлагает пользователю 
// оформить подобранные товары в документе или продолжить выбор
&НаКлиенте
Процедура ВопросПеренестиТовары(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		РазрешитьЗакрытие = Истина;
	Иначе
		РазрешитьЗакрытие = Ложь;
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// 1. Недействительная номенклатура отображается серым
	НовоеУсловноеОформление = СписокЗапасы.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Недействителен");
	Отбор.ПравоеЗначение 	= Истина;
	
	НовоеУсловноеОформление = СписокЗапасыВНаличии.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Добавить();
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение 		= ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	Оформление.Использование 	= Истина;
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование 	= Истина;
	Отбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Недействителен");
	Отбор.ПравоеЗначение 	= Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборНедействительнаяНоменклатура(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокЗапасы,
		"Недействителен",
		Ложь,
		,
		,
		Не Форма.Элементы.ПоказыватьНедействительную.Пометка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокЗапасыВНаличии,
		"Недействителен",
		Ложь,
		,
		,
		Не Форма.Элементы.ПоказыватьНедействительную.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВГруппу(спПеренести, НоваяГруппа)

	Для каждого элНоменклатура Из спПеренести Цикл
		Если элНоменклатура.Родитель<>НоваяГруппа Тогда
			Об = элНоменклатура.ПолучитьОбъект();
			Об.Родитель = НоваяГруппа;
			Об.Записать();
		КонецЕсли;
	КонецЦикла;
	
	Если спПеренести[0].ЭтоГруппа Тогда
		
		ЗаполнитьДеревоИерархии();
		
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Значение",
			ИдентификаторСтроки,
			ОтборИерархия.ПолучитьЭлементы(),
			спПеренести[0],
			Ложь
		);
		Элементы.ОтборИерархия.ТекущаяСтрока = ИдентификаторСтроки;
		
	Иначе
		
		Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЭтаФорма[ТекущаяСтраницаНоменклатуры], ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ЭтаФорма[ТекущаяСтраницаНоменклатуры], МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткиОтбора(Метки)
	
	РаботаСОтборами.УдалитьМеткиОтбораСервер(ЭтотОбъект, ЭтаФорма[ТекущаяСтраницаНоменклатуры], Метки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыМеток()
	
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемоеОборудование

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученШтрихкод(ДанныеШтрихкода) Экспорт
	
	Штрихкод = ДанныеШтрихкода.Штрихкод;
	
	Номенклатура = ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода);
	Если Номенклатура <> Неопределено Тогда
		
		Элементы[ТекущаяСтраницаНоменклатуры].ТекущаяСтрока = Номенклатура;
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта",Новый Структура("Ключ",Номенклатура),ЭтотОбъект);
		
	Иначе
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", Штрихкод);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ПолученыШтрихкоды()

Функция ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода)

	возврат РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ДанныеШтрихкода);
	
КонецФункции

// Процедура - обработчик команды командной панели табличной части.
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод)), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученШтрихкод(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ОтборВидЦенОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти //ПодключаемоеОборудование

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаКлиенте
Процедура ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	НастройкиЗагрузкиДанных.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайла");
	НастройкиЗагрузкиДанных.Вставить("ОписаниеСтрокиВыбора", Новый Структура("ПолноеИмяОбъектаМетаданных, Тип", "Номенклатура", "ПрикладнаяЗагрузка"));
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточника(Команда)
	
	ПоказатьПомощникЗагрузкиДанныхИзВнешнегоИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
			
		КонецЕсли;
		
	ИначеЕсли РезультатЗагрузки = Неопределено Тогда
		
		Элементы[ТекущаяСтраницаНоменклатуры].Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ИмяМетода = "Справочники.Номенклатура.ОбработатьПодготовленныеДанные";
	Описание = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ИмяМетода, ПараметрыВызоваСервера, Описание);
	ЗаполнитьЗначенияСвойств(ПараметрыДлительнойОперации, РезультатФоновогоЗадания);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

#КонецОбласти
