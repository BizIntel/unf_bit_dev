
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипНоменклатуры = Объект.ТипНоменклатуры;
	
	// Инициализация настроек
	СтавкаНДСПоУмолчанию                 = Справочники.Организации.ОсновнаяОрганизация.СтавкаНДСПоУмолчанию;
	ФОИспользоватьПодсистемуПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
	ФОУчетАлкогольнойПродукции           = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
	// Права доступа
	РазрешеноРедактированиеЦен = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
		"Редактирование",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.РегистрыСведений.ЦеныНоменклатуры)
	);
	РазрешенПросмотрЦен        = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
		"Просмотр",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.РегистрыСведений.ЦеныНоменклатуры)
	);
	РазрешенПросмотрОстатков   = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
		"Просмотр",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.АнализДоступности)
	);
	РазрешенПросмотрПродаж = 
		РольДоступна("ПолныеПрава") 
		ИЛИ (РольДоступна("ИспользованиеОтчетовПродажи") И РольДоступна("ИспользованиеОтчетовЗакупки"))
	;
	ОбъектМетаданных = Объект.Ссылка.Метаданные();
	Элементы.ПереключательСпособРасчетаСтоимости.ТолькоПросмотр = НЕ (
		УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
			"Добавление",
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных)
		)
		ИЛИ УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПравоДоступа(
			"Изменение", 
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных)
		)
	);
	
	Если Объект.ФиксированнаяСтоимость = Истина Тогда
		ПереключательСпособРасчетаСтоимости = "Фиксированная стоимость";
	Иначе
		ПереключательСпособРасчетаСтоимости = "Норма времени";
	КонецЕсли;
	
	// Актуальные цены
	Элементы.АктуальныеЦены.Видимость             = РазрешенПросмотрЦен;
	Элементы.ДекорацияЦеныНеУстановлены.Видимость = РазрешенПросмотрЦен;
	Элементы.СозданиеНовыхЦен.Видимость           = РазрешеноРедактированиеЦен;
	Элементы.ДекорацияОтступ.Видимость            = НЕ РазрешенПросмотрЦен;
	
	// Диаграммы и остатки
	Элементы.ДинамикаПродаж.Видимость = ЗначениеЗаполнено(Объект.Ссылка) И РазрешенПросмотрПродаж;
	Элементы.ДинамикаЦен.Видимость    = ЗначениеЗаполнено(Объект.Ссылка) И РазрешенПросмотрЦен;
	Элементы.ТекущиеОстатки.Видимость = ЗначениеЗаполнено(Объект.Ссылка) И РазрешенПросмотрОстатков;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		КатегорииНоменклатурыСервер.ЗаполнитьСвойстваНоменклатурыПоКатегории(Объект);
		ЗаполнитьСписокТипов();
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.СтавкаНДС = Справочники.Организации.ОсновнаяОрганизация.СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
			
			Объект.СчетУчетаЗатрат = ?(
				Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
					ИЛИ НЕ Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить(),
				ПланыСчетов.Управленческий.КоммерческиеРасходы,
				ПланыСчетов.Управленческий.НезавершенноеПроизводство
			);
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Параметры.ТекстЗаполнения) И ФормироватьНаименованиеПолноеАвтоматически Тогда
			Объект.НаименованиеПолное = Параметры.ТекстЗаполнения;
		КонецЕсли;
		
		Если ФОУчетАлкогольнойПродукции Тогда
			Объект.ИмпортнаяАлкогольнаяПродукция = ЗначениеЗаполнено(Объект.СтранаПроисхождения) 
				И Объект.СтранаПроисхождения <> Справочники.СтраныМира.Россия;
		КонецЕсли;
		
	Иначе
		
		// Получение аналитики
		ДиаграммаЦеныПериод = Неопределено;
		ДиаграммаПродажиПериод = Неопределено;
		ДиаграммаЦеныЗаполнитьКоманднуюПанель();
		ПолучитьДанныеФормы();
		
	КонецЕсли;
	
	ДиаграммаЦеныПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День;
	ОповеститьПодбор = Ложь;
	ЭлементМодифицирован = Ложь;
	
	ДобавитьПросмотрИзображений();
	
	// ФО Использовать подсистемы Производство, Работы.
	УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводствоРаботы();
	
	ОбменСGoogle.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Шаблоны наименований
	// Используется таблица "Свойства_ОписаниеДополнительныхРеквизитов" подсистемы СтандартныеПодсистемы.Свойства
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(
		Объект.Наименование,
		Объект.НаименованиеПолное
	);
	ШаблоныНаименований.ИнициализироватьНастройкиФормированияНаименований(ЭтотОбъект, ШаблоныНаименованийНастройки);
	
	// Вызывается после создания доп. реквизитов. Для длинных заголовков устанавливается двустрочный заголовок.
	Для каждого ЭлГруппа Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		Для каждого Эл Из ЭлГруппа.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Эл) = Тип("ПолеФормы") Тогда
				Эл.ВысотаЗаголовка = 2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.КатегорияНоменклатуры.Видимость = Ложь;
		Элементы.ЕдиницаИзмерения.Видимость = Ложь;
		Элементы.СозданиеДополнительныхРеквизитов.Видимость = Ложь;
		Элементы.СвернутыеГруппы.Видимость = Ложь;
		Элементы.НедействительнаРастяжение.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	// Маркировка
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") <> Истина Тогда
		Элементы.ГруппаМаркировка.Видимость = Ложь;
	КонецЕсли;
	
	// Калькуляция
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка()));
	Элементы.Спецификация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	// Конец Калькуляция
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	НастроитьГруппуМаркировки();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаЦена"
		И Параметр Тогда
		
		ПодключитьОбработчикОжидания("ОбработкаОповещенияЗаписьВРегистреЦенКлиент", 0.5, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
		Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый Тогда
			ДобавитьИзображениеНаСервере(Источник);
		Иначе
			ОбновитьПросмотрИзображений();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменилисьСчетаНоменклатуры" Тогда
		
		Объект.СчетУчетаЗапасов = Параметр.СчетУчетаЗапасов;
		Объект.СчетУчетаЗатрат = Параметр.СчетУчетаЗатрат;
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "Справочник.КатегорииНоменклатуры.СозданиеКатегорииИзКлассификатора" Тогда
		
		Объект.КатегорияНоменклатуры = Параметр;
		КатегорияНоменклатурыПриИзмененииНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ШаблоныНаименований" Тогда // Шаблоны наименований
		
		ШаблоныНаименованийКлиент.ОбработкаОповещенияШаблоныНаименованийПослеЗаписи(ЭтотОбъект);
		
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлКартинки)
		И Изображения.Количество() > 0 Тогда
		
		Объект.ФайлКартинки = Изображения[0].Ссылка;
	КонецЕсли;
	
	// Обработчик механизма "Свойства".
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Модифицированность Тогда
		ЭлементМодифицирован = Истина;	
	КонецЕсли;
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность", Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменСGoogle.УвеличитьЗначениеСчетчикаПодсказок(ЭтаФорма);
	
	// Шаблоны наименований
	ШаблоныНаименований.ЗапомнитьШаблоныДляВидовНаименований(ЭтотОбъект, Объект.КатегорияНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если ЭлементМодифицирован Тогда
		ОповеститьПодбор = Истина;
		ЭлементМодифицирован = Ложь;
	КонецЕсли;
	
	Элементы.СерииГИСМ.Доступность = Истина;
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Код");
	ОбновитьНаименования();
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СправочникНоменклатураЗапись");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры //ПередЗаписью()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ОповеститьПодбор 
		И ТипЗНЧ(ВладелецФормы) = Тип("УправляемаяФорма")
		И ВладелецФормы.ИмяФормы = "ОбщаяФорма.ФормаПодбора" Тогда
		Оповестить("ОбновитьПодбор", Истина);
	// РМК
	ИначеЕсли ОповеститьПодбор 
		И ТипЗНЧ(ВладелецФормы) = Тип("УправляемаяФорма")
		И СтрНайти(ВладелецФормы.ИмяФормы, "ФормаДокумента_РМК") > 0 Тогда
		Оповестить("ДобавленаНоменклатураИзРМК", Объект.Ссылка);
	КонецЕсли;
	// Конец РМК
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		
		Объект.НаименованиеПолное = Объект.Наименование;
		ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
			ЭтотОбъект,
			Объект.НаименованиеПолное,
			ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати")
		);
		
	КонецЕсли;
	
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Наименование");
	
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураРабочее")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	Объект.НаименованиеПолное = СтрЗаменить(Объект.НаименованиеПолное, Символы.ПС, " ");
	ФормироватьНаименованиеПолноеАвтоматически = УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Объект.Наименование, Объект.НаименованиеПолное);
	
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.НаименованиеПолное,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Наименование <> Элементы.Наименование.ТекстРедактирования Тогда
		
		Объект.Наименование = Элементы.Наименование.ТекстРедактирования;
		НаименованиеПриИзменении(Элементы.Наименование);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.НаименованиеПолное <> Элементы.НаименованиеПолное.ТекстРедактирования Тогда
		
		Объект.НаименованиеПолное = Элементы.НаименованиеПолное.ТекстРедактирования;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеПолноеНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)
	
	Объект.СчетУчетаЗапасов = Неопределено;
	Объект.СчетУчетаЗатрат = Неопределено;
	Объект.ТоварнаяНоменклатураВЭД = Неопределено;
	УправлениеФормой();
	
КонецПроцедуры // ТипНоменклатурыПриИзменении()

&НаКлиенте
Процедура СкладОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.Склад.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СкладОткрытие()

&НаКлиенте
Процедура СпецификацияНачалоВыбора(Элемент,  ДанныеВыбора, СтандартнаяОбработка)
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Элемент справочника еще не записан.'");
		Сообщение.Сообщить();
		
	КонецЕсли;

КонецПроцедуры // СпецификацияНачалоВыбора()

&НаКлиенте
Процедура КатегорияНоменклатурыПриИзменении(Элемент)
	
	КатегорияНоменклатурыПриИзмененииНаСервере();
	
	Если Объект.ТипНоменклатуры <> ТипНоменклатуры Тогда
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КатегорияНоменклатурыПриИзмененииНаСервере()
	
	ЗаполнитьРеквизитыАлкогольнойПродукцииПоКатегорииНоменклатуры();
	
	Если ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		ТипНоменклатуры = Объект.ТипНоменклатуры;
		КатегорииНоменклатурыСервер.ЗаполнитьСвойстваНоменклатурыПоКатегории(Объект);
	КонецЕсли;
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияНоменклатурыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПолученияДанных.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	КатегорииНоменклатурыКлиент.КатегорияНоменклатурыАвтоПодбор(Текст, ДанныеВыбора, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КатегорииНоменклатурыКлиент.КатегорияНоменклатурыОбработкаВыбора(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательСпособРасчетаСтоимостиПриИзменении(Элемент)
	
	Если ПереключательСпособРасчетаСтоимости = "Фиксированная стоимость" Тогда
		Объект.ФиксированнаяСтоимость = Истина;
	Иначе
	    Объект.ФиксированнаяСтоимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаПроисхожденияПриИзменении(Элемент)
	
	Если ФОУчетАлкогольнойПродукции Тогда
		Если Объект.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия")
			ИЛИ НЕ ЗначениеЗаполнено(Объект.СтранаПроисхождения) Тогда
			Объект.ИмпортнаяАлкогольнаяПродукция = Ложь;
		Иначе
			Объект.ИмпортнаяАлкогольнаяПродукция = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "СтранаПроисхождения");
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура АртикулПриИзменении(Элемент)
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Артикул");
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Код");
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	// Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Поставщик");
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНовинкаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокДействияФлагаНовинка", "Доступность", Объект.ЭтоНовинка);
	Если НЕ Объект.ЭтоНовинка Тогда
		
		Объект.ЭтоНовинка = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаголовокЗначенияЦенОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВидЦенСсылка = ЦенаПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	Строки = АктуальныеЦены.НайтиСтроки(Новый Структура("ВидЦен", ВидЦенСсылка));
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ЗаголовокЗначенияЦенОбработкаНавигационнойСсылкиНаСервере(ВидЦенСсылка, Строки[0].Период, Строки[0].Цена);
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.Форма.ФормаЗаписи", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокЗначенияЦенОбработкаНавигационнойСсылкиНаСервере(ВидЦен, Период, Цена)
	
	Если НачалоДня(Период) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период",         Период);
		СтруктураПараметров.Вставить("Номенклатура",   Объект.Ссылка);
		СтруктураПараметров.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
		СтруктураПараметров.Вставить("ВидЦен",         ВидЦен);
		Ключ = РегистрыСведений.ЦеныНоменклатуры.ПолучитьКлючЗаписи(СтруктураПараметров);
		КлючЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьКлючЗаписи(Ключ);
		ПараметрыОткрытия = Новый Структура("Ключ", КлючЗаписи);
		
		Возврат ПараметрыОткрытия;
	Иначе
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ВидЦен", ВидЦен);
		
		Возврат ПараметрыОткрытия;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВидМаркировкиПриИзменении(Элемент)
	НастроитьГруппуМаркировки();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВправоНажатие(Элемент)
	
	СдвигИзображения(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрокруткаИзображенийВлевоНажатие(Элемент)
	
	СдвигИзображения(-1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДиаграмм

&НаКлиенте
Процедура ДиаграммаЦеныПериодЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ДиаграммаЦеныПериод;
	Описание = Новый ОписаниеОповещения("ДиаграммаЦеныПериодЗаголовокНажатиеЗавершение", ЭтотОбъект);
	Диалог.Показать(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныПериодЗаголовокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДиаграммаЦеныПериодЗаголовокНажатиеЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныПериодЗаголовокНажатиеЗавершениеНаСервере(Результат)
	
	ДиаграммаЦеныПериод = Результат;
	ПодходящаяПериодичность = ПодходящаяПериодичность(Результат.ДатаНачала, Результат.ДатаОкончания);
	ДиаграммаЦеныУстановитьПериодичность(ПодходящаяПериодичность);
	
	ДиаграммаЦеныУстановитьЗаголовокПериода();
	ПолучитьДанныеФормы("ДиаграммаЦены");
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиПериодЗаголовокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ДиаграммаПродажиПериод;
	Описание = Новый ОписаниеОповещения("ДиаграммаПродажиПериодЗаголовокНажатиеЗавершение", ЭтотОбъект);
	Диалог.Показать(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиПериодЗаголовокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДиаграммаПродажиПериодЗаголовокНажатиеЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаПродажиПериодЗаголовокНажатиеЗавершениеНаСервере(Результат)
	
	ДиаграммаПродажиПериод = Результат;
	ПодходящаяПериодичность = ПодходящаяПериодичность(Результат.ДатаНачала, Результат.ДатаОкончания);
	ДиаграммаПродажиУстановитьПериодичность(ПодходящаяПериодичность);
	ДиаграммаПродажиУстановитьЗаголовокПериода();
	ПолучитьДанныеФормы("ДиаграммаПродажи");
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаНачала = Расшифровка.Период;
	Периодичность = Расшифровка.Периодичность;
	ДиаграммаПродажиОбработкаРасшифровкиНаСервере(ДатаНачала, Периодичность);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаПродажиОбработкаРасшифровкиНаСервере(ДатаНачала, Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Возврат;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		ДатаОкончания = КонецНедели(ДатаНачала);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		ДатаОкончания = КонецМесяца(ДатаНачала);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		ДатаОкончания = КонецКвартала(ДатаНачала);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		ДатаОкончания = КонецГода(ДатаНачала);
	КонецЕсли;
	
	ДиаграммаПродажиПериод = Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
	ДиаграммаПродажиУстановитьЗаголовокПериода();
	ПодходящаяПериодичность = ПодходящаяПериодичность(ДатаНачала, ДатаОкончания);
	ДиаграммаПродажиУстановитьПериодичность(ПодходящаяПериодичность);
	ПолучитьДанныеФормы("ДиаграммаПродажи");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Открывает форму записи новой цены.
//
&НаКлиенте
Процедура СоздатьНовуюЦену(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СозданиеЦеныПоказатьВопрос();
	Иначе
		СозданиеЦеныОткрытьФормуЗаписи();
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму создания доп. реквизита.
//
&НаКлиенте
Процедура СоздатьНовыйДопРеквизит(Команда)
	
	ПараметрыФормы = ПараметрыСозданияДопРеквизита();
	ОткрытьФорму(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
		ПараметрыФормы,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

// Устанавливает основным выбранное изображение (будет показываться первым).
//
&НаКлиенте
Процедура УстановитьИзображениеОсновным(Команда)
	
	Если ТекущееИзображение >= 0 Тогда
		Если Объект.ФайлКартинки <> Изображения[ТекущееИзображение].Ссылка Тогда
			Объект.ФайлКартинки = Изображения[ТекущееИзображение].Ссылка;
		Иначе
			Объект.ФайлКартинки = Неопределено;
		КонецЕсли;
		Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Пометка =
			НЕ Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ДанныеФайлаДляИзменения = ИзменитьИзображениеНаСервере();
	Если ДанныеФайлаДляИзменения = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru='Изображение не доступно для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьИзображениеЗавершение", ЭтотОбъект);
	ПрисоединенныеФайлыСлужебныйКлиент.ВыбратьФайлНаДискеИПоместитьВХранилище(
		ОписаниеОповещения, ДанныеФайлаДляИзменения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры // ПросмотретьИзображение()

&НаКлиенте
Процедура СерииГИСМ(Команда)
	ПараметрыОтбора = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("Справочник.СерийныеНомера.ФормаСписка", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаКлиенте
Процедура УправлениеФормой()
	
	// Изображения
	Элементы.ПереключениеИзображений.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	
	// ГруппаУчетнаяИнформация
	Элементы.ИспользоватьХарактеристики.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
	;
	Элементы.ИспользоватьПартии.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.ИспользоватьСерийныеНомера.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.НаправлениеДеятельности.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
	;
	Элементы.МетодОценки.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.СрокИсполненияЗаказа.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
	;
	Элементы.СтавкаНДС.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
	;
	Элементы.ПереключательСпособРасчетаСтоимости.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
	;
	
	// ГруппаАлкогольнаяПродукция
	Элементы.ВидАлкогольнойПродукции.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.ПроизводительИмпортерАлкогольнойПродукции.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.ОбъемДАЛ.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.Крепость.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	
	// ГруппаЗакупкаПроизводство
	Элементы.СпособПополнения.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.Поставщик.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга")
	;
	Элементы.СтранаПроисхождения.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.Спецификация.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
		ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
	;
	Элементы.СрокПополнения.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.НормаВремени.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция")
	;
	Элементы.ГарантийныйСрок.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.ВыписыватьГарантийныйТалон.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	
	// ГруппаХранение
	Элементы.Склад.Видимость = 
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	Элементы.Ячейка.Видимость =
		Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
	;
	
	// ГруппаПрайсЛист
	ЭтоЗапас = (Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокДействияФлагаНовинка",	"Доступность",	Объект.ЭтоНовинка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НижняяГраницаОстатков",		"Доступность",	ЭтоЗапас);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВерхняяГраницаОстатков",	"Доступность",	ЭтоЗапас);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварнаяНоменклатураВЭД",	"Видимость",	ЭтоЗапас);
	
	// Заполнение значений по умолчанию.
	Если Объект.ТипНоменклатуры <> ТипНоменклатуры Тогда
		
		ТипНоменклатуры = Объект.ТипНоменклатуры;
		
		Объект.СрокПополнения = 0;
		Объект.ИспользоватьХарактеристики = Ложь;
		Объект.ИспользоватьПартии = Ложь;
		Объект.СрокИсполненияЗаказа = 0;
		Объект.НормаВремени = 0;
		
		Если Элементы.МетодОценки.Видимость Тогда
			Объект.МетодОценки = ПредопределенноеЗначение("Перечисление.МетодОценкиЗапасов.ПоСредней");
		КонецЕсли;
		
		Если Элементы.НаправлениеДеятельности.Видимость Тогда
			Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ОсновноеНаправление");
		КонецЕсли;
		
		Если Элементы.Склад.Видимость Тогда
			Объект.Склад = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
		КонецЕсли;
		
		Если Элементы.СпособПополнения.Видимость Тогда
			Объект.СпособПополнения = ПредопределенноеЗначение("Перечисление.СпособыПополненияЗапасов.Закупка");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипНоменклатуры)
			ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
			Объект.СчетУчетаЗапасов = ПредопределенноеЗначение("ПланСчетов.Управленческий.СырьеИМатериалы");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипНоменклатуры)
			ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас")
			ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
			ИЛИ Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Операция") Тогда
			Если ФОИспользоватьПодсистемуПроизводство Тогда
				Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.НезавершенноеПроизводство");
			Иначе
				Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			Объект.СчетУчетаЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.КоммерческиеРасходы");
		КонецЕсли;
		
		Если Элементы.СрокПополнения.Видимость Тогда
			Объект.СрокПополнения = 1;
		КонецЕсли;
		
		Если Элементы.СрокИсполненияЗаказа.Видимость Тогда
			Объект.СрокИсполненияЗаказа = 1;
		КонецЕсли;
		
		Если Элементы.СтавкаНДС.Видимость Тогда
			Объект.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		Если Объект.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас") Тогда
			Объект.ВидАлкогольнойПродукции = Неопределено;
			Объект.ПроизводительИмпортерАлкогольнойПродукции = Неопределено;
			Объект.ОбъемДАЛ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

// Процедура устанавливает видимость реквизитов формы от опций
// Использовать подсистему Производство, Работы.
//
// Параметры:
// Нет.
//
&НаСервере
Процедура УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводствоРаботы()
	
	// Производство.
	Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
		
		// Способ пополнения.
		Элементы.СпособПополнения.СписокВыбора.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
		
		// Склад. Установка способа выбора структурной единицы в зависимости от ФО.
		Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			Элементы.Склад.РежимВыбораИзСписка = Истина;
			Элементы.Склад.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
			Элементы.Склад.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
		КонецЕсли;
		
	Иначе
		
		Если Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
			НовыйМассив.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
			МассивТипыСтруктурныхЕдиниц = Новый ФиксированныйМассив(НовыйМассив);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтруктурнойЕдиницы", МассивТипыСтруктурныхЕдиниц);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.Склад.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			Элементы.Склад.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Переработка.
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.СпособПополнения.СписокВыбора.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОтФОИспользоватьПодсистемуПроизводствоРаботы()

// Процедура заполняет список доступных для выбора типов номенклатуры в зависимости 
// от параметров формы и функциональных опций
//
&НаСервере
Процедура ЗаполнитьСписокТипов()
	
	Список = Элементы.ТипНоменклатуры.СписокВыбора;
	
	ОграничениеТипаНоменклатуры = Неопределено;
	Если НЕ Параметры.ЗначенияЗаполнения.Свойство("ТипНоменклатуры", ОграничениеТипаНоменклатуры) Тогда
		Параметры.ДополнительныеПараметры.Свойство("ОграничениеТипа", ОграничениеТипаНоменклатуры);
	КонецЕсли;
	
	Если НЕ ОграничениеТипаНоменклатуры = Неопределено Тогда
		Если (ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("Массив") Или ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("ФиксированныйМассив")) 
			И ОграничениеТипаНоменклатуры.Количество() > 0 Тогда
			
			Список.Очистить();
			Для каждого Тип Из ОграничениеТипаНоменклатуры Цикл
				Список.Добавить(Тип);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ОграничениеТипаНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
			
			Список.Очистить();
			Список.Добавить(ОграничениеТипаНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Операция);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		НайденнаяОперация = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Работа);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
		НайденнаяОперация = Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.ВидРабот);
		Если НайденнаяОперация <> Неопределено Тогда
			Элементы.ТипНоменклатуры.СписокВыбора.Удалить(НайденнаяОперация);
		КонецЕсли;
		Элементы.ФормаОбработкаНастройкаПрограммыБольшеВозможностейКонтекст.Видимость = Ложь;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	Если Элементы.ТипНоменклатуры.СписокВыбора.НайтиПоЗначению(Объект.ТипНоменклатуры) = Неопределено Тогда
		Объект.ТипНоменклатуры = Список.Получить(0).Значение;
	КонецЕсли;
	
	Если Список.Количество() = 1 Тогда
		Элементы.ТипНоменклатуры.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокТипов()

&НаКлиенте
Функция НастроитьГруппуМаркировки()
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.СерииГИСМ.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.НеМаркируется") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Ложь;
		Элементы.СерииГИСМ.Видимость = Ложь;
		Элементы.ТНВЭДГИСМ.Видимость = ЛОжь;
	ИначеЕсли Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.КонтрольныйИдентификационныйЗнак") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Истина;
		Элементы.СерииГИСМ.Видимость = Истина;
		Элементы.ТНВЭДГИСМ.Видимость = ЛОжь;
	ИначеЕсли Объект.ВидМаркировки = ПредопределенноеЗначение("Перечисление.ВидыМаркировки.МаркируемаяПродукция") Тогда
		Элементы.СворачиваемаяГруппаКиЗ.Видимость = Ложь;
		Элементы.СерииГИСМ.Видимость = Истина;
		Элементы.ТНВЭДГИСМ.Видимость = Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область АктуальныеЦены

&НаКлиенте
Процедура СозданиеЦеныПоказатьВопрос()
	
	ТекстВопроса = НСтр("ru='Перед установлением цены необходимо записать объект. Записать?'");
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СозданиеЦеныОбработатьОтвет", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЦеныОбработатьОтвет(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	СозданиеЦеныОткрытьФормуЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЦеныОткрытьФормуЗаписи()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.Форма.ФормаЗаписи", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуальныеЦеныУдалитьЭлементы()
	
	Итератор = Элементы.АктуальныеЦены.ПодчиненныеЭлементы.Количество() - 1;
	Пока Итератор >= 0 Цикл
		Элементы.Удалить(Элементы.АктуальныеЦены.ПодчиненныеЭлементы[Итератор]);
		Итератор = Итератор - 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АналитикаОбработчикиКомандныхПанелей

&НаСервере
Процедура ДиаграммаПродажиСменаПериодичности(Периодичность)
	
	ДиаграммаПродажиУстановитьПериодичность(Периодичность);
	ПолучитьДанныеФормы("ДиаграммаПродажи");
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоДням(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.День);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоНеделям(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоМесяцам(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоКварталам(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоГодам(Команда)
	
	ДиаграммаПродажиСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Год);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныСменаПериодичности(Периодичность)
	
	ДиаграммаЦеныУстановитьПериодичность(Периодичность);
	ПолучитьДанныеФормы("ДиаграммаЦены");
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоДням(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.День);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоНеделям(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоМесяцам(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоКварталам(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаЦеныСрезПоГодам(Команда)
	
	ДиаграммаЦеныСменаПериодичности(ТипЕдиницыИнтервалаВремениАнализаДанных.Год);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоКоличеству(Команда)
	
	Элементы.ДиаграммаПродажиКоличество.Видимость = Истина;
	Элементы.ДиаграммаПродажи.Видимость = Ложь;
	Элементы.ДиаграммаПродажиСрезПоСумме.Видимость = Истина;
	Элементы.ДиаграммаПродажиСрезПоКоличеству.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаПродажиСрезПоСумме(Команда)
	
	Элементы.ДиаграммаПродажи.Видимость = Истина;
	Элементы.ДиаграммаПродажиКоличество.Видимость = Ложь;
	Элементы.ДиаграммаПродажиСрезПоСумме.Видимость = Ложь;
	Элементы.ДиаграммаПродажиСрезПоКоличеству.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения(Команда)
	
	ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмеренияНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмеренияНаСервере(КомандаИмя)
	
	ДиаграммаЦеныВыбратьЕдиницуИзмерения(КомандаИмя);
	ПолучитьДанныеФормы("ДиаграммаЦены");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДиаграммаЦеныУстановитьОтборПоВалюте(Команда)
	
	ДиаграммаЦеныУстановитьОтборПоВалютеНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныУстановитьОтборПоВалютеНаСервере(КомандаИмя)
	
	ДиаграммаЦеныВыбратьВалюту(КомандаИмя);
	ПолучитьДанныеФормы("ДиаграммаЦены");
	
КонецПроцедуры

#КонецОбласти

#Область Изображение

// Процедура - обработчик события Нажатие поля АдресКартинки.
//
&НаКлиенте
Процедура Подключаемый_АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.АдресКартинки.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	Если ТекущееИзображение >= 0 Тогда
		ПросмотретьПрисоединенныйФайл();
	Иначе
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДобавитьИзображениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // АдресКартинкиНажатие()

&НаКлиенте
Процедура ИзменитьИзображениеЗавершение(ИнформацияОФайле, ДополнительныеПараметры) Экспорт
	
	Если ИнформацияОФайле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Изображение = Изображения[ТекущееИзображение].Ссылка;
	
	ИзменитьИзображениеЗавершениеНаСервере(ИнформацияОФайле);
	ОповеститьОбИзменении(Изображение);
	Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, Изображение);
	
КонецПроцедуры

// Если текущее изображение может быть изменено возвращает его стркутуру данных.
//
&НаСервере
Функция ИзменитьИзображениеНаСервере()
	
	Если Изображения.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		Возврат Неопределено;
		
	КонецЕсли;
	
	Изображение = Изображения[ТекущееИзображение].Ссылка;
	
	Если НЕ РазрешеноИзменениеИзображения(Изображение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(Изображение, УникальныйИдентификатор);
	Возврат ДанныеФайла;
	
КонецФункции

// Перезаписывает текущее изображение выбранным файлом с диска.
//
&НаСервере
Процедура ИзменитьИзображениеЗавершениеНаСервере(ИнформацияОФайле)
	
	Изображение = Изображения[ТекущееИзображение].Ссылка;
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Изображение, ИнформацияОФайле);
	ОбновитьПросмотрИзображений();
	
КонецПроцедуры

// Вызывается при изменении присоединенного файла.
//
&НаСервере
Процедура ОбновитьПросмотрИзображений()
	
	ТекущееИзображениеВрем = ТекущееИзображение;
	ДобавитьПросмотрИзображений();
	ТекущееИзображение = ТекущееИзображениеВрем;
	СдвигИзображения(0);
	
КонецПроцедуры

// Возвращает Истина, если присоединенный файл может быть изменен.
//
&НаСервере
Функция РазрешеноИзменениеИзображения(Изображение)
	
	Если Изображение.Зашифрован
		ИЛИ Изображение.ПодписанЭП
		ИЛИ ЗначениеЗаполнено(Изображение.Редактирует) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выводит на форму картинки из присоединенных файлов.
//
&НаСервере
Процедура ДобавитьПросмотрИзображений()
	
	Изображения.Очистить();
	
	// Присоединенный файл записанный в Объект.ФайлКартинки показываем первым.
	Если НЕ Объект.ФайлКартинки.Пустая() Тогда
		ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(Объект.ФайлКартинки, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			НоваяСтрока = Изображения.Вставить(0);
			НоваяСтрока.Ссылка = Объект.ФайлКартинки;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
	КонецЕсли;
	
	ДопустимыеЛоготипы = Новый Массив;
	ДопустимыеЛоготипы.Добавить("png");
	ДопустимыеЛоготипы.Добавить("jpeg");
	ДопустимыеЛоготипы.Добавить("jpg");
	
	// После присоединенного файла из Объект.ФайлКартинки показываем все остальные подходящие.
	Файлы = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Объект.Ссылка, Файлы);
	Для каждого Файл Из Файлы Цикл
		
		Если Файл.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеЛоготипы.Найти(Файл.Расширение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Файл = Объект.ФайлКартинки Тогда
			Продолжить;
		КонецЕсли;
		
		ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(Файл, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Изображения.Добавить();
		НоваяСтрока.Ссылка = Файл;
		НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
	КонецЦикла;
	
	ТекущееИзображение = ?(Изображения.Количество() <> 0, 0, -1);
	
	Если Изображения.Количество() = 0 Тогда
		ТекущееИзображение = -1;
		Элементы.АдресКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
	Иначе
		ТекущееИзображение =0;
		Элементы.АдресКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	КонецЕсли;
	
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Показывает соседнее с текущим изображение.
// 
// Параметры:
//  Направление - Число - Если = -1 - сдивиг влево; Если = 1 - сдвиг вправо.
//
&НаСервере
Процедура СдвигИзображения(Направление)
	
	НомерЭлемента = ТекущееИзображение + Направление;
	Если НомерЭлемента < 0 ИЛИ НомерЭлемента >= Изображения.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = "Изображения[%НСтроки%].Адрес";
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "%НСтроки%", НомерЭлемента);
	
	КоличествоИзображений = Элементы.Изображение.ПодчиненныеЭлементы.Количество();
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение = Элементы.АдресКартинки;
	Иначе
		ПредыдущееИзображение = Элементы.Изображение.ПодчиненныеЭлементы[КоличествоИзображений - 1];
	КонецЕсли;
	
	Если КоличествоИзображений = 1 Тогда
		НовоеИзображениеНомер = 1;
	Иначе
		НовоеИзображениеНомер = Число(СтрЗаменить(ПредыдущееИзображение.Имя, "АдресКартинки", "")) + 1;
	КонецЕсли;
	НовоеИзображение = Элементы.Добавить("АдресКартинки" + НовоеИзображениеНомер, Тип("ПолеФормы"), Элементы.Изображение);
	НовоеИзображение.Вид = ВидПоляФормы.ПолеКартинки;
	НовоеИзображение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеИзображение.Гиперссылка = Истина;
	НовоеИзображение.РазмерКартинки = РазмерКартинки.Пропорционально;
	НовоеИзображение.РастягиватьПоВертикали = Ложь;
	НовоеИзображение.РастягиватьПоГоризонтали = Истина;
	НовоеИзображение.АвтоМаксимальнаяШирина = Ложь;
	НовоеИзображение.МаксимальнаяШирина = 21;
	НовоеИзображение.Высота = 7;
	НовоеИзображение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	НовоеИзображение.УстановитьДействие("Нажатие", "Подключаемый_АдресКартинкиНажатие");
	НовоеИзображение.ПутьКДанным = ПутьКДанным;
	ТекущееИзображение = НомерЭлемента;
	
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюПросмотретьИзображение"],
	                     НовоеИзображение.КонтекстноеМеню);
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюИзменитьИзображение"],
	                     НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным"],
	                     НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	Элементы.Переместить(ПредыдущееИзображение.КонтекстноеМеню.ПодчиненныеЭлементы["АдресКартинкиКонтекстноеМенюДобавитьИзображение"],
	                     НовоеИзображение.КонтекстноеМеню, НовоеИзображение.КонтекстноеМеню.ПодчиненныеЭлементы[0]);
	
	Если КоличествоИзображений = 1 Тогда
		ПредыдущееИзображение.Видимость = Ложь;
	Иначе
		Элементы.Удалить(ПредыдущееИзображение);
	КонецЕсли;
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Процедура просмотра картинки
//
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	Файл = Изображения[ТекущееИзображение].Ссылка;
	ДанныеФайла = ПолучитьДанныеФайла(Файл, УникальныйИдентификатор);
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры // ПросмотретьПрисоединенныйФайл()

// Процедура добавления изображения для номенклатуры
//
&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ДобавитьИзображениеНаКлиентеФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла, Фильтр;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		+ "|Все файлы(*.*)|*.*"
		+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		+ "|Формат GIF(*.gif*)|*.gif"
		+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		+ "|Формат PNG(*.png*)|*.png"
		+ "|Формат TIFF(*.tif)|*.tif"
		+ "|Формат icon(*.ico)|*.ico"
		+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьИзображениеНаКлиенте()

&НаСервере
Процедура ДобавитьИзображениеНаСервере(ДобавляемыеФайлы)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		Модифицированность = Истина;
		Объект.ФайлКартинки = ?(ТипЗнч(ДобавляемыеФайлы) = Тип("Массив"), ДобавляемыеФайлы[0], ДобавляемыеФайлы);
	КонецЕсли;
	
	Если ТипЗнч(ДобавляемыеФайлы) <> Тип("Массив") Тогда
		ДобавляемыеФайлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДобавляемыеФайлы);
	КонецЕсли;
	
	Сдвиг = Неопределено;
	Для каждого ДобавленныйФайл ИЗ ДобавляемыеФайлы Цикл
		ДвоичныеДанныеКартинки = УправлениеНебольшойФирмойСервер.СсылкаНаДвоичныеДанныеФайла(ДобавленныйФайл, УникальныйИдентификатор);
		Если ДвоичныеДанныеКартинки <> Неопределено Тогда
			НоваяСтрока = Изображения.Добавить();
			НоваяСтрока.Ссылка = ДобавленныйФайл;
			НоваяСтрока.Адрес = ДвоичныеДанныеКартинки;
		КонецЕсли;
		
		Если Сдвиг = Неопределено Тогда
			Сдвиг = Изображения.Количество() - ТекущееИзображение;
		КонецЕсли;
	КонецЦикла;
	
	СдвигИзображения(Сдвиг - 1);
	
	УстановитьПрокруткуИзображения();
	ИзображениеВидимостьКоманднойПанели();
	
КонецПроцедуры

// Устанавливает видимость и доступность кнопок перелистывания изображения.
//
&НаСервере
Процедура УстановитьПрокруткуИзображения()
	
	Если Изображения.Количество() <= 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВлевоОтступ.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправоОтступ.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Видимость = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВлевоОтступ.Видимость = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправоОтступ.Видимость = Ложь;
	КонецЕсли;
	
	Если ТекущееИзображение = 0 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Ложь;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина;
	ИначеЕсли ТекущееИзображение = Изображения.Количество() - 1 Тогда
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПрокруткаИзображенийВлево.Доступность = Истина;
		Элементы.ДекорацияПрокруткаИзображенийВправо.Доступность = Истина
	КонецЕсли;
	
	ЭлементАдресКартинки = Элементы.Найти("АдресКартинки1");
	Если ЭлементАдресКартинки <> Неопределено Тогда
		ТекущийЭлемент = ЭлементАдресКартинки;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость кнопок контекстного меню изображения.
//
&НаСервере
Процедура ИзображениеВидимостьКоманднойПанели()
	
	ЕстьИзображения = Изображения.Количество();
	
	Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Видимость = ЕстьИзображения;
	Элементы.АдресКартинкиКонтекстноеМенюИзменитьИзображение.Видимость = ЕстьИзображения;
	Элементы.АдресКартинкиКонтекстноеМенюПросмотретьИзображение.Видимость = ЕстьИзображения;
	
	ЭтоОсновноеИзображение = Ложь;
	Если ЕстьИзображения Тогда
		ЭтоОсновноеИзображение = (Изображения[ТекущееИзображение].Ссылка = Объект.ФайлКартинки);
	КонецЕсли;
	
	Элементы.АдресКартинкиКонтекстноеМенюУстановитьИзображениеОсновным.Пометка = ЭтоОсновноеИзображение;
	
КонецПроцедуры

#КонецОбласти

#Область Аналитика

// Заполняет данными аналитические области.
// 
// Параметры:
//  Области - Массив       - Заполняет области, перечисленные в массиве
//  Области - Строка       - Заполняет одну область, переданную строкой.
//  Области - Неопределено - Заполняет все области.
//  Доступные области: АктуальныеЦены, ДиаграммаЦены, ДиаграммаПродажи, Остатки.
//
&НаСервере
Процедура ПолучитьДанныеФормы(Области = Неопределено)
	
	ЗапросТекстАктуальныеЦены = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ТекущаяДата,
	|			Номенклатура = &Номенклатура
	|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И Актуальность) КАК ЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Цена УБЫВ";
	ЗапросТекстАктуальныеЦеныНомерВПакете = 1;
	
	Если ЗначениеЗаполнено(ДиаграммаЦеныПериод) ИЛИ ЗначениеЗаполнено(Области) Тогда
		ЗапросТекстДинамикаЦен =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%) КАК Период,
		|	СРЕДНЕЕ(ЦеныНоменклатуры.Цена) КАК Цена,
		|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|ГДЕ
		|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
		|	И ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ЦеныНоменклатуры.Актуальность
		|	И &ДиаграммаЦеныДатаНачала
		|	И &ДиаграммаЦеныДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатуры.ВидЦен,
		|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Период";
		ЗапросТекстДинамикаЦенНомерВПакете = 1;
	Иначе
		ДиаграммаЦеныУстановитьПериодичность(ТипЕдиницыИнтервалаВремениАнализаДанных.День);
		ЗапросТекстДинамикаЦен = 
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%) КАК Период,
		|	СРЕДНЕЕ(ЦеныНоменклатуры.Цена) КАК Цена,
		|	ЦеныНоменклатуры.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ Цены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|ГДЕ
		|	ЦеныНоменклатуры.Номенклатура = &Номенклатура
		|	И ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И ЦеныНоменклатуры.Актуальность
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатуры.ВидЦен,
		|	НАЧАЛОПЕРИОДА(ЦеныНоменклатуры.Период, %ПериодДетализации%)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Цены.Период КАК Период,
		|	Цены.Цена,
		|	Цены.ВидЦен
		|ИЗ
		|	Цены КАК Цены
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Период";
		ЗапросТекстДинамикаЦенНомерВПакете = 2;
	КонецЕсли;
	
	ЗапросПродаж = Истина;
	Если ЗначениеЗаполнено(ДиаграммаПродажиПериод) Тогда
		ЗапросТекстДинамикаПродаж = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	%Период% КАК Период,
		|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
		|	СУММА(ПродажиОбороты.СуммаОборот) КАК Выручка,
		|	СУММА(ПродажиОбороты.СебестоимостьОборот) КАК Себестоимость,
		|	СУММА(ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) - ЕСТЬNULL(ПродажиОбороты.СебестоимостьОборот, 0)) КАК ВаловаяПрибыль
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДиаграммаПродажиДатаНачала, &ДиаграммаПродажиДатаОкончания, Авто, ) КАК ПродажиОбороты
		|ГДЕ
		|	ПродажиОбороты.Номенклатура = &Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	%Период%
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		ЗапросТекстДинамикаПродажНомерВПакете = 1;
	Иначе
		ЗапросПерваяПоследняяПродажа = Новый Запрос;
		ЗапросПерваяПоследняяПродажа.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПродажиОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(, , День, Номенклатура = &Номенклатура) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПродажиОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(, , День, Номенклатура = &Номенклатура) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		ЗапросПерваяПоследняяПродажа.УстановитьПараметр("Номенклатура", Объект.Ссылка);
		
		Результат = ЗапросПерваяПоследняяПродажа.ВыполнитьПакет();
		
		ДатаНачала = Неопределено;
		ДатаОкончания = Неопределено;
		
		ВыборкаПерваяПродажа = Результат[0].Выбрать();
		Пока ВыборкаПерваяПродажа.Следующий() Цикл
			ДатаНачала = ВыборкаПерваяПродажа.Период;
		КонецЦикла;
		
		ВыборкаПоследняяПродажа = Результат[1].Выбрать();
		Пока ВыборкаПоследняяПродажа.Следующий() Цикл
			ДатаОкончания = ВыборкаПоследняяПродажа.Период;
		КонецЦикла;
		
		Если ДатаНачала <> Неопределено И ДатаОкончания <> Неопределено Тогда
			
			ДиаграммаПродажиПериод.ДатаНачала = ДатаНачала;
			ДиаграммаПродажиПериод.ДатаОкончания = ДатаОкончания;
			
			ПодходящаяПериодичность = ПодходящаяПериодичность(ДатаНачала, ДатаОкончания);
			ДиаграммаПродажиУстановитьПериодичность(ПодходящаяПериодичность);
			
			ЗапросТекстДинамикаПродаж = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
			|	%Период% КАК Период,
			|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество,
			|	СУММА(ПродажиОбороты.СуммаОборот) КАК Выручка,
			|	СУММА(ПродажиОбороты.СебестоимостьОборот) КАК Себестоимость,
			|	СУММА(ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) - ЕСТЬNULL(ПродажиОбороты.СебестоимостьОборот, 0)) КАК ВаловаяПрибыль
			|ПОМЕСТИТЬ Продажи
			|ИЗ
			|	РегистрНакопления.Продажи.Обороты(,, Авто, Номенклатура = &Номенклатура) КАК ПродажиОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	%Период%
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Продажи.Период,
			|	Продажи.Количество,
			|	Продажи.Выручка,
			|	Продажи.Себестоимость,
			|	Продажи.ВаловаяПрибыль
			|ИЗ
			|	Продажи КАК Продажи
			|
			|УПОРЯДОЧИТЬ ПО
			|	Продажи.Период";
			ЗапросТекстДинамикаПродажНомерВПакете = 2;
		Иначе
			ЗапросПродаж = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросТекстОстатки = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.КоличествоОстаток КАК Резерв
	|ПОМЕСТИТЬ ВременнаяТаблицаРезервы
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура = &Номенклатура
	|				И ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|				И НЕ ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	ЗапасыОстатки.КоличествоОстаток КАК Остаток,
	|	0 КАК Резерв
	|ПОМЕСТИТЬ ВременнаяТаблицаОстаткиИРезервы
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(, Номенклатура = &Номенклатура) КАК ЗапасыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Резервы.СтруктурнаяЕдиница,
	|	Резервы.Характеристика,
	|	Резервы.Партия,
	|	0,
	|	Резервы.Резерв
	|ИЗ
	|	ВременнаяТаблицаРезервы КАК Резервы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиРезервы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОстаткиРезервы.Характеристика КАК Характеристика,
	|	ОстаткиРезервы.Партия КАК Партия,
	|	СУММА(ОстаткиРезервы.Остаток) КАК Остаток,
	|	СУММА(ОстаткиРезервы.Резерв) КАК Резерв
	|ИЗ
	|	ВременнаяТаблицаОстаткиИРезервы КАК ОстаткиРезервы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРезервы.СтруктурнаяЕдиница,
	|	ОстаткиРезервы.Характеристика,
	|	ОстаткиРезервы.Партия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Характеристика,
	|	СтруктурнаяЕдиница
	|ИТОГИ ПО
	|	Характеристика,
	|	СтруктурнаяЕдиница
	|АВТОУПОРЯДОЧИВАНИЕ";
	ЗапросТекстОстаткиНомерВПакете = 3;
	
	РазделительЗапросов = 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если Области = Неопределено Тогда
		Области = Новый Массив;
		
		Если РазрешенПросмотрЦен Тогда
			Области.Добавить("АктуальныеЦены");
			Области.Добавить("ДиаграммаЦены");
		КонецЕсли;
		Если РазрешенПросмотрПродаж Тогда
			Области.Добавить("ДиаграммаПродажи");
		КонецЕсли;
		Если РазрешенПросмотрОстатков Тогда
			Области.Добавить("Остатки");
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(Области) = Тип("Строка") Тогда
			ОбластиСтрока = Области;
			Области = Новый Массив;
			Области.Добавить(ОбластиСтрока);
		КонецЕсли;
		
		Для каждого Область Из Области Цикл
			
			Если (Область = "АктуальныеЦены" ИЛИ Область = "ДиаграммаЦены")
				И НЕ РазрешенПросмотрЦен Тогда
				Область = Неопределено;
			КонецЕсли;
			
			Если Область = "ДиаграммаПродажи" И НЕ РазрешенПросмотрПродаж Тогда
				Область = Неопределено;
			КонецЕсли;
			
			Если Область = "Остатки" И НЕ РазрешенПросмотрОстатков Тогда
				Область = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	СтекИтоговыхЗапросов = 0;
	Для каждого Область ИЗ Области Цикл
		
		Если Область = "АктуальныеЦены" И РазрешенПросмотрЦен Тогда
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + РазделительЗапросов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ЗапросТекстАктуальныеЦены;
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			СтекИтоговыхЗапросов = СтекИтоговыхЗапросов + ЗапросТекстАктуальныеЦеныНомерВПакете;
			ЗапросТекстАктуальныеЦеныНомерВПакете = СтекИтоговыхЗапросов - 1;
			
		ИначеЕсли Область = "ДиаграммаЦены" И РазрешенПросмотрЦен Тогда
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + РазделительЗапросов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ЗапросТекстДинамикаЦен;
			СтекИтоговыхЗапросов = СтекИтоговыхЗапросов + ЗапросТекстДинамикаЦенНомерВПакете;
			ЗапросТекстДинамикаЦенНомерВПакете = СтекИтоговыхЗапросов - 1;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПериодДетализации%", ДиаграммаЦеныПериодичность);
			Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаНачала) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДиаграммаЦеныДатаНачала", "ЦеныНоменклатуры.Период >= &ДиаграммаЦеныДатаНачала");
				Запрос.УстановитьПараметр("ДиаграммаЦеныДатаНачала", ДиаграммаЦеныПериод.ДатаНачала);
			Иначе
				Запрос.УстановитьПараметр("ДиаграммаЦеныДатаНачала", Истина);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаОкончания) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДиаграммаЦеныДатаОкончания", "ЦеныНоменклатуры.Период <= &ДиаграммаЦеныДатаОкончания");
				Запрос.УстановитьПараметр("ДиаграммаЦеныДатаОкончания", ДиаграммаЦеныПериод.ДатаОкончания);
			Иначе
				Запрос.УстановитьПараметр("ДиаграммаЦеныДатаОкончания", Истина);
			КонецЕсли;
			
		ИначеЕсли Область = "ДиаграммаПродажи" И РазрешенПросмотрПродаж Тогда
			
			Если НЕ ЗапросПродаж Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + РазделительЗапросов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ЗапросТекстДинамикаПродаж;
			СтекИтоговыхЗапросов = СтекИтоговыхЗапросов + ЗапросТекстДинамикаПродажНомерВПакете;
			ЗапросТекстДинамикаПродажНомерВПакете = СтекИтоговыхЗапросов - 1;
			
			Если ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодДень");
			ИначеЕсли ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодНеделя");
			ИначеЕсли ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодМесяц");
			ИначеЕсли ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодКвартал");
			ИначеЕсли ДиаграммаПродажиПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Период%", "ПродажиОбороты.ПериодГод");
			КонецЕсли;
			Запрос.УстановитьПараметр("ДиаграммаПродажиДатаНачала", ДиаграммаПродажиПериод.ДатаНачала);
			Запрос.УстановитьПараметр("ДиаграммаПродажиДатаОкончания", ДиаграммаПродажиПериод.ДатаОкончания);
			
		ИначеЕсли Область = "Остатки" И РазрешенПросмотрОстатков Тогда
			
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + РазделительЗапросов;
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ЗапросТекстОстатки;
			СтекИтоговыхЗапросов = СтекИтоговыхЗапросов + ЗапросТекстОстаткиНомерВПакете;
			ЗапросТекстОстаткиНомерВПакете = СтекИтоговыхЗапросов - 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Области.Найти("АктуальныеЦены") <> Неопределено Тогда
		ИнициализироватьДиаграммуЦены();
		ЗаполнитьАктуальныеЦены(Результат[ЗапросТекстАктуальныеЦеныНомерВПакете]);
	КонецЕсли;
	
	Если Области.Найти("ДиаграммаЦены") <> Неопределено Тогда
		ЗаполнитьДиаграммуЦены(Результат[ЗапросТекстДинамикаЦенНомерВПакете]);
	КонецЕсли;
	
	Если Области.Найти("ДиаграммаПродажи") <> Неопределено Тогда
		Если ЗапросПродаж Тогда
			ЗаполнитьДиаграммуПродажи(Результат[ЗапросТекстДинамикаПродажНомерВПакете]);
		Иначе
			ИнициализироватьДиаграммуПродажиПустую();
		КонецЕсли;
	КонецЕсли;
	
	Если Области.Найти("Остатки") <> Неопределено Тогда
		ЗаполнитьОстатки(Результат[ЗапросТекстОстаткиНомерВПакете]);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДанныеФормы()

// Герерирует надписи со значениями актуальных цен в группе АктуальныеЦены.
//
// Параметры:
//  Данные - РезультатЗапроса - Результат выполнения запроса. Подготавливается в процедуре ПолучитьДанныеФормы().
//
&НаСервере
Процедура ЗаполнитьАктуальныеЦены(Данные)
	
	ДиаграммаЦены.Очистить();
	АктуальныеЦены.Очистить();
	
	Цены = Данные.Выгрузить();
	Если Цены.Количество() = 0 Тогда
		Элементы.ДекорацияЦеныНеУстановлены.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ДекорацияЦеныНеУстановлены.Видимость = Ложь;
	КонецЕсли;
	
	СоставСтроки = Новый Массив;
	ФорматнаяСтрока = "";
	
	Итератор = 0;
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	Цены.Колонки.Добавить("ЦенаВНациональнойВалюте");
	
	Для каждого Цена Из Цены Цикл
		
		Если Цена.ВидЦен.ВалютаЦены <> НациональнаяВалюта Тогда
			Цена.ЦенаВНациональнойВалюте = ПересчитатьПоВыбраннойВалюте(Цена.ВидЦен.ВалютаЦены, ТекущаяДатаСеанса(), Цена.Цена, НациональнаяВалюта);
		Иначе
			Цена.ЦенаВНациональнойВалюте = Цена.Цена;
		КонецЕсли;
		
	КонецЦикла;
	
	Цены.Сортировать("ЦенаВНациональнойВалюте Убыв");
	Итератор = 0;
	Для каждого Цена Из Цены Цикл
		
		НоваяСтрока = АктуальныеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Цена);
		
		Цвет = ЦветВидаЦен(Цена.ВидЦен);
		
		Группа = Элементы.Добавить("ГруппаАктуальныеЦены" + Итератор, Тип("ГруппаФормы"), Элементы.АктуальныеЦены);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		СоставСтроки.Очистить();
		СоставСтроки.Добавить(Новый ФорматированнаяСтрока(" " + Лев(Цена.ВидЦен.Наименование, 1), , Цвет));
		СоставСтроки.Добавить(Новый ФорматированнаяСтрока(Прав(Цена.ВидЦен.Наименование, СтрДлина(Цена.ВидЦен.Наименование) - 1),, Цвет));
		
		НоваяДекорация = Элементы.Добавить("АктуальнаяЦенаВидЦен" + Итератор, Тип("ДекорацияФормы"), Группа);
		НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
		НоваяДекорация.Заголовок = Новый ФорматированнаяСтрока(СоставСтроки, Новый Шрифт(, 10));
		НоваяДекорация.АвтоМаксимальнаяШирина = Ложь;
		НоваяДекорация.МаксимальнаяШирина = 22;
		НоваяДекорация.РастягиватьПоГоризонтали = Истина;
		НоваяДекорация.Высота = 1;
		НоваяДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		
		СоставСтроки.Очистить();
		ФорматированноеЧисло = Формат(Цена.Цена, ФорматнаяСтрока);
		Если РазрешеноРедактированиеЦен Тогда
			СоставСтроки.Добавить(Новый ФорматированнаяСтрока(ФорматированноеЧисло,, ЦветаСтиля.ЦветГиперссылки,, Строка(Цена.ВидЦен.Ссылка.УникальныйИдентификатор())));
		Иначе
			СоставСтроки.Добавить(Новый ФорматированнаяСтрока(ФорматированноеЧисло));
		КонецЕсли;
		
		НоваяДекорация = Элементы.Добавить("АктуальнаяЦенаЗначениеЦены" + Итератор, Тип("ДекорацияФормы"), Группа);
		НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
		
		НоваяДекорация.Заголовок = Новый ФорматированнаяСтрока(СоставСтроки, Новый Шрифт(, 10));
		НоваяДекорация.АвтоМаксимальнаяШирина = Ложь;
		НоваяДекорация.МаксимальнаяШирина = 10;
		НоваяДекорация.РастягиватьПоГоризонтали = Истина;
		НоваяДекорация.Высота = 1;
		НоваяДекорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		НоваяДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		НоваяДекорация.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ЗаголовокЗначенияЦенОбработкаНавигационнойСсылки");
		
		СоставСтроки.Очистить();
		ФорматированноеЧисло = Формат(Цена.Цена, ФорматнаяСтрока);
		СоставСтроки.Добавить(Новый ФорматированнаяСтрока(" " + Цена.ВидЦен.ВалютаЦены.Наименование, ));
		
		НоваяДекорация = Элементы.Добавить("АктуальнаяЦенаВалютаЦены" + Итератор, Тип("ДекорацияФормы"), Группа);
		НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
		НоваяДекорация.Заголовок = Новый ФорматированнаяСтрока(СоставСтроки, Новый Шрифт(, 10));
		НоваяДекорация.АвтоМаксимальнаяШирина = Ложь;
		НоваяДекорация.МаксимальнаяШирина = 6;
		НоваяДекорация.РастягиватьПоГоризонтали = Истина;
		НоваяДекорация.Высота = 1;
		НоваяДекорация.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		НоваяДекорация.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАктуальныеЦены()

// Заполняет данными диаграмму ДиаграммаЦены.
//
// Параметры:
//  Данные - РезультатЗапроса - Результат выполнения запроса. Подготавливается в процедуре ПолучитьДанныеФормы().
//
&НаСервере
Процедура ЗаполнитьДиаграммуЦены(Данные)
	
	ДиаграммаЦены.Обновление = Ложь;
	
	ДиаграммаЦеныФорматДаты = ФорматДатыИзПериодичности(ДиаграммаЦеныПериодичность);
	
	Отбор = Новый Структура("Номенклатура, Характеристика", Объект.Ссылка, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаНачала) Тогда
		НачалоИнтервала = НачалоИнтервала(ДиаграммаЦеныПериод.ДатаНачала, ДиаграммаЦеныПериодичность);
		ЦеныНаНачалоПериода = РегистрыСведений.ЦеныНоменклатуры.СрезПоследних(ДиаграммаЦеныПериод.ДатаНачала, Отбор);
	Иначе
		ЦеныНаНачалоПериода = Неопределено;
	КонецЕсли;
	
	ВыборкаПериод = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПериод.Количество() = 0 И (ЦеныНаНачалоПериода = Неопределено ИЛИ ЦеныНаНачалоПериода.Количество() = 0) Тогда
		
		ИнициализироватьДиаграммуЦеныПустую();
		
	ИначеЕсли ВыборкаПериод.Количество() = 0 И (ЦеныНаНачалоПериода = Неопределено ИЛИ ЦеныНаНачалоПериода.Количество() <> 0) Тогда
		ИнициализироватьДиаграммуЦены();
		
		Для каждого Строка Из ЦеныНаНачалоПериода Цикл
			
			Точка0 = ДиаграммаЦены.УстановитьТочку(ДиаграммаЦеныПериод.ДатаНачала);
			Точка = ДиаграммаЦены.УстановитьТочку(ДиаграммаЦеныПериод.ДатаОкончания);
			
			Точка0.Текст = ПредставлениеДаты(ДиаграммаЦеныПериод.ДатаНачала, ДиаграммаЦеныФорматДаты);
			Точка.Текст = ПредставлениеДаты(ДиаграммаЦеныПериод.ДатаОкончания, ДиаграммаЦеныФорматДаты);
			
			Серия = ДиаграммаЦены.УстановитьСерию(Строка.ВидЦен);
			Серия.Маркер = ТипМаркераДиаграммы.Нет;
			Цвет = ЦветВидаЦен(Строка.ВидЦен);
			Если Цвет <> Неопределено Тогда
				Серия.Цвет = Цвет;
			КонецЕсли;
			
			Значение0 = ПересчитатьПоВыбраннойВалюте(Строка.ВидЦен.ВалютаЦены, ДиаграммаЦеныПериод.ДатаНачала, Строка.Цена);
			Значение = ПересчитатьПоВыбраннойВалюте(Строка.ВидЦен.ВалютаЦены, ДиаграммаЦеныПериод.ДатаОкончания, Строка.Цена);
			
			ДиаграммаЦены.УстановитьЗначение(Точка0, Серия, Значение0);
			ДиаграммаЦены.УстановитьЗначение(Точка, Серия, Значение);
			
		КонецЦикла;
		
	Иначе
		ИнициализироватьДиаграммуЦены();
		
		Если ЗначениеЗаполнено(ДиаграммаЦеныПериод.ДатаНачала) Тогда
			ПосмотретьНачалоПериода = Истина;
		Иначе
			ПосмотретьНачалоПериода = Ложь;
		КонецЕсли;
		
		Пока ВыборкаПериод.Следующий() Цикл
			
			Если ВыборкаПериод.Количество() = 1 Тогда
				
				Точка0 = ДиаграммаЦены.УстановитьТочку(ВыборкаПериод.Период);
				Точка0.Текст = ПредставлениеДаты(ВыборкаПериод.Период, ДиаграммаЦеныФорматДаты);
				
			Иначе
				
				Точка0 = Неопределено;
				
			КонецЕсли;
			
			ВыборкаВидЦен = ВыборкаПериод.Выбрать();
			Пока ВыборкаВидЦен.Следующий() Цикл
				
				Если ПосмотретьНачалоПериода И Точка0 = Неопределено Тогда
					
					Строка = ЦеныНаНачалоПериода.Найти(ВыборкаВидЦен.ВидЦен, "ВидЦен");
					Если Строка <> Неопределено Тогда
						
						Точка = ДиаграммаЦены.УстановитьТочку(НачалоИнтервала);
						Точка.Текст = ПредставлениеДаты(НачалоИнтервала, ДиаграммаЦеныФорматДаты);
						Серия = ДиаграммаЦены.УстановитьСерию(ВыборкаВидЦен.ВидЦен);
						ДиаграммаЦены.УстановитьЗначение(Точка, Серия, Строка.Цена);
						
						ЦеныНаНачалоПериода.Удалить(Строка);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Серия = ДиаграммаЦены.УстановитьСерию(ВыборкаВидЦен.ВидЦен);
				Серия.Маркер = ТипМаркераДиаграммы.Нет;
				Цвет = ЦветВидаЦен(ВыборкаВидЦен.ВидЦен);
				Если Цвет <> Неопределено Тогда
					Серия.Цвет = Цвет;
				КонецЕсли;
				
				Если Точка0 <> Неопределено Тогда
					Точка = ДиаграммаЦены.УстановитьТочку(ВыборкаПериод.Период + 1);
				Иначе
					Точка = ДиаграммаЦены.УстановитьТочку(ВыборкаПериод.Период);
				КонецЕсли;
				
				Точка.Текст = ПредставлениеДаты(ВыборкаПериод.Период, ДиаграммаЦеныФорматДаты);
				
				Если Точка0 <> Неопределено Тогда
					
					Если ЦеныНаНачалоПериода = Неопределено Тогда
						Значение = 0;
					Иначе
						Строка = ЦеныНаНачалоПериода.Найти(ВыборкаВидЦен.ВидЦен, "ВидЦен");
						Если Строка <> Неопределено Тогда
							
							Значение = Строка.Цена;
							
						Иначе
							
							Значение = 0;
							
						КонецЕсли;
					КонецЕсли;
					
					ДиаграммаЦены.УстановитьЗначение(Точка0, Серия, Значение);
				КонецЕсли;
				
				Значение = ПересчитатьПоВыбраннойВалюте(ВыборкаВидЦен.ВидЦен.ВалютаЦены, ВыборкаПериод.Период, ВыборкаВидЦен.Цена);
				ДиаграммаЦены.УстановитьЗначение(Точка, Серия, Значение);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЦеныНаНачалоПериода <> Неопределено И Точка0 = Неопределено Тогда
			Для каждого Строка Из ЦеныНаНачалоПериода Цикл
				
				Если ДиаграммаЦеныПериод.ДатаОкончания = Дата(1,1,1) Тогда
					Продолжить;
				КонецЕсли;
				
				Точка = ДиаграммаЦены.УстановитьТочку(ДиаграммаЦеныПериод.ДатаОкончания);
				
				Точка.Текст = ПредставлениеДаты(ДиаграммаЦеныПериод.ДатаОкончания, ДиаграммаЦеныФорматДаты);
				
				Серия = ДиаграммаЦены.УстановитьСерию(Строка.ВидЦен);
				Серия.Маркер = ТипМаркераДиаграммы.Нет;
				Цвет = ЦветВидаЦен(Строка.ВидЦен);
				Если Цвет <> Неопределено Тогда
					Серия.Цвет = Цвет;
				КонецЕсли;
				
				Значение = ПересчитатьПоВыбраннойВалюте(Строка.ВидЦен.ВалютаЦены, ДиаграммаЦеныПериод.ДатаОкончания, Строка.Цена);
				
				ДиаграммаЦены.УстановитьЗначение(Точка, Серия, Значение);
				
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Серия Из ДиаграммаЦены.Серии Цикл
			
			ПредыдущееЗначение = Неопределено;
			Итератор = 0;
			Пока ПредыдущееЗначение = Неопределено И ДиаграммаЦены.Точки.Количество() > Итератор Цикл
				
				Точка = ДиаграммаЦены.Точки[Итератор];
				ЗначениеДиаграммы = ДиаграммаЦены.ПолучитьЗначение(Точка, Серия).Значение;
				Если ЗначениеЗаполнено(ЗначениеДиаграммы) Тогда
					ПредыдущееЗначение = ЗначениеДиаграммы;
					Прервать;
				КонецЕсли;
				
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
			Пока ДиаграммаЦены.Точки.Количество() > Итератор Цикл
				
				Точка = ДиаграммаЦены.Точки[Итератор];
				ЗначениеДиаграммы = ДиаграммаЦены.ПолучитьЗначение(Точка, Серия).Значение;
				Если ЗначениеЗаполнено(ЗначениеДиаграммы) Тогда
					ПредыдущееЗначение = ЗначениеДиаграммы;
				Иначе
					ДиаграммаЦены.УстановитьЗначение(Точка, Серия, ПредыдущееЗначение);
				КонецЕсли;
				
				Итератор = Итератор + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ДиаграммаЦеныПериод) И ДиаграммаЦены.Точки.Количество() <> 0 Тогда
			ДиаграммаЦеныПериод.ДатаНачала = ДиаграммаЦены.Точки[0].Значение;
			ДиаграммаЦеныПериод.ДатаОкончания = ДиаграммаЦены.Точки[ДиаграммаЦены.Точки.Количество() - 1].Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	ДиаграммаЦеныДоступныеПериоды = ДоступныеПериодичности(ДиаграммаЦеныПериод);
	ДиаграммаЦеныОбновитьКнопкиПериодичности();
	ДиаграммаЦеныУстановитьЗаголовокПериода();
	
	ДиаграммаЦены.Обновление = Истина;
	
КонецПроцедуры // ЗаполнитьДиаграммуЦены()

// Заполняет данными диаграммы ДиаграммаПродажи и ДиаграммаПродажиКоличество.
//
// Параметры:
//  Данные - РезультатЗапроса - Результат выполнения запроса. Подготавливается в процедуре ПолучитьДанныеФормы().
//
&НаСервере
Процедура ЗаполнитьДиаграммуПродажи(Данные)
	
	ДиаграммаПродажи.Обновление = Ложь;
	ДиаграммаПродажиКоличество.Обновление = Ложь;
	
	ДиаграммаПродажиФорматДаты = ФорматДатыИзПериодичности(ДиаграммаПродажиПериодичность);
	
	ЦветаСерий = УправлениеНебольшойФирмойКлиентСервер.ЦветаСерийДиаграмм();
	
	Выборка = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Количество() = 0 Тогда
		ИнициализироватьДиаграммуПродажиПустую();
	Иначе
		ИнициализироватьДиаграммуПродажи();
		
		СерияСебестоимость = Неопределено;
		Если Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			ИЛИ Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			
			СерияСебестоимость = ДиаграммаПродажи.Серии.Добавить("Себестоимость");
			СерияСебестоимость.Цвет = ЦветаСерий[0];
		КонецЕсли;
		
		СерияПрибыль = ДиаграммаПродажи.Серии.Добавить("Валовая прибыль");
		СерияПрибыль.Цвет = ЦветаСерий[1];
		
		СерияУбыток = Неопределено;
		ПоказыватьУбыток = Ложь;
		
		СерияКоличество = ДиаграммаПродажиКоличество.Серии.Добавить("Количество");
		СерияКоличество.Цвет = ЦветаСерий[0];
		
		НачалоПериода = НачалоИнтервала(ДиаграммаПродажиПериод.ДатаНачала, ДиаграммаПродажиПериодичность);
		КонецПериода = НачалоИнтервала(ДиаграммаПродажиПериод.ДатаОкончания, ДиаграммаПродажиПериодичность);
		
		ТекущийПериод = НачалоПериода;
		
		Пока Выборка.Следующий() Цикл
			
			Пока ТекущийПериод < НачалоИнтервала(Выборка.Период, ДиаграммаПродажиПериодичность) Цикл
				НоваяТочка = ДиаграммаПродажи.УстановитьТочку(ТекущийПериод);
				НоваяТочка.Текст = ПредставлениеДаты(ТекущийПериод, ДиаграммаПродажиФорматДаты);
				
				НоваяТочка2 = ДиаграммаПродажиКоличество.УстановитьТочку(ТекущийПериод);
				НоваяТочка2.Текст = ПредставлениеДаты(ТекущийПериод, ДиаграммаПродажиФорматДаты);
				
				ТекущийПериод = СледующийИнтервал(ТекущийПериод, ДиаграммаПродажиПериодичность);
			КонецЦикла;
			
			Если ТекущийПериод = НачалоИнтервала(Выборка.Период, ДиаграммаПродажиПериодичность) Тогда
				ТекущийПериод = СледующийИнтервал(ТекущийПериод, ДиаграммаПродажиПериодичность);
			КонецЕсли;
			
			НоваяТочка = ДиаграммаПродажи.УстановитьТочку(Выборка.Период);
			НоваяТочка.Текст = ПредставлениеДаты(Выборка.Период, ДиаграммаПродажиФорматДаты);
			
			НоваяТочка2 = ДиаграммаПродажиКоличество.УстановитьТочку(Выборка.Период);
			НоваяТочка2.Текст = ПредставлениеДаты(Выборка.Период, ДиаграммаПродажиФорматДаты);
			
			Себестоимость = Выборка.Себестоимость;
			ВаловаяПрибыль = Выборка.ВаловаяПрибыль;
			Количество = Выборка.Количество;
			
			Расшифровка = Неопределено;
			Если ДиаграммаПродажиПериодичность <> ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
				Расшифровка = Новый Структура;
				Расшифровка.Вставить("Период", Выборка.Период);
				Расшифровка.Вставить("Периодичность", ДиаграммаПродажиПериодичность);
			КонецЕсли;
			
			Если СерияСебестоимость <> Неопределено Тогда
				ДиаграммаПродажи.УстановитьЗначение(НоваяТочка, СерияСебестоимость, Себестоимость, Расшифровка);
			КонецЕсли;
			
			Если ВаловаяПрибыль < 0 Тогда
				
				Если НЕ ПоказыватьУбыток Тогда
					
					СерияУбыток = ДиаграммаПродажи.Серии.Добавить("Убыток");
					СерияУбыток.Цвет = ЦветаСерий[2];
					
					ПоказыватьУбыток = Истина;
					
				КонецЕсли;
				
				ДиаграммаПродажи.УстановитьЗначение(НоваяТочка, СерияУбыток, ВаловаяПрибыль, Расшифровка);
				
			Иначе
				
				ДиаграммаПродажи.УстановитьЗначение(НоваяТочка, СерияПрибыль, ВаловаяПрибыль, Расшифровка);
				
			КонецЕсли;
			
			ДиаграммаПродажиКоличество.УстановитьЗначение(НоваяТочка2, СерияКоличество, Количество);
		КонецЦикла;
		
		Пока ТекущийПериод <= КонецПериода Цикл
			НоваяТочка = ДиаграммаПродажи.УстановитьТочку(ТекущийПериод);
			НоваяТочка.Текст = ПредставлениеДаты(ТекущийПериод, ДиаграммаПродажиФорматДаты);
			
			НоваяТочка2 = ДиаграммаПродажи.УстановитьТочку(ТекущийПериод);
			НоваяТочка2.Текст = ПредставлениеДаты(ТекущийПериод, ДиаграммаПродажиФорматДаты);
			
			ТекущийПериод = СледующийИнтервал(ТекущийПериод, ДиаграммаПродажиПериодичность);
		КонецЦикла;
	КонецЕсли;
	
	ДиаграммаПродажи.Обновление = Истина;
	ДиаграммаПродажиКоличество.Обновление = Истина;
	
	ДиаграммаПродажиДоступныеПериоды = ДоступныеПериодичности(ДиаграммаПродажиПериод);
	ДиаграммаПродажиОбновитьКнопкиПериодичности();
	ДиаграммаПродажиУстановитьЗаголовокПериода();
	
КонецПроцедуры // ЗаполнитьДиаграммуПродажи()

// Заполняет данными деревео Остатки.
//
// Параметры:
//  Данные - РезультатЗапроса - Результат выполнения запроса. Подготавливается в процедуре ПолучитьДанныеФормы().
//
&НаСервере
Процедура ЗаполнитьОстатки(Данные)
	
	ВыборкаХарактеристики = Данные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаХарактеристики.Количество() = 0 Тогда
		Элементы.ДекорацияНетОстатков.Видимость = Истина;
		Возврат;
	Иначе
		Элементы.ДекорацияНетОстатков.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Остатки.Видимость = Истина;
	ДеревоХарактеристики = Остатки.ПолучитьЭлементы();
	
	Пока ВыборкаХарактеристики.Следующий() Цикл
		
		ЕстьХарактеристики = Справочники.ХарактеристикиНоменклатуры.Выбрать(, Объект.Ссылка).Следующий()
			ИЛИ Справочники.ХарактеристикиНоменклатуры.Выбрать(, Объект.КатегорияНоменклатуры).Следующий();
		
		Если ЕстьХарактеристики Тогда
			
			ДеревоНоваяСтрокаХарактеристика = ДеревоХарактеристики.Добавить();
			ДеревоНоваяСтрокаХарактеристика.Единица = ВыборкаХарактеристики.Характеристика;
			
			Остаток = "" + ВыборкаХарактеристики.Остаток;
			Резерв = "";
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Резерв) Тогда
				Резерв = " / " + ВыборкаХарактеристики.Резерв;
			КонецЕсли;
			
			ДеревоНоваяСтрокаХарактеристика.Остаток = Остаток + Резерв;
			ДеревоНоваяСтрокаХарактеристика.ЭтоХарактеристика = Истина;
			
			ДеревоСклады = ДеревоНоваяСтрокаХарактеристика.ПолучитьЭлементы();
		Иначе
			ДеревоСклады = Остатки.ПолучитьЭлементы();
		КонецЕсли;
		
		ВыборкаСклады = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклады.Следующий() Цикл
			
			ДеревоНоваяСтрокаСклад = ДеревоСклады.Добавить();
			ДеревоНоваяСтрокаСклад.Единица = ВыборкаСклады.СтруктурнаяЕдиница;
			
			Остаток = "" + ВыборкаСклады.Остаток;
			Резерв = "";
			Если ЗначениеЗаполнено(ВыборкаСклады.Резерв) Тогда
				Резерв = " / " + ВыборкаСклады.Резерв;
			КонецЕсли;
			
			ДеревоНоваяСтрокаСклад.Остаток = Остаток + Резерв;
			ДеревоПартии = ДеревоНоваяСтрокаСклад.ПолучитьЭлементы();
			
			Если Объект.ИспользоватьПартии Тогда
				ВыборкаПартии = ВыборкаСклады.Выбрать();
				Пока ВыборкаПартии.Следующий() Цикл
					
					ДеревоНоваяСтрокаПартия = ДеревоПартии.Добавить();
					ДеревоНоваяСтрокаПартия.Единица = ВыборкаПартии.Партия;
					Остаток = "" + ВыборкаПартии.Остаток;
					Резерв = "";
					Если ЗначениеЗаполнено(ВыборкаПартии.Резерв) Тогда
						Резерв = " / " + ВыборкаПартии.Резерв;
					КонецЕсли;
					
					ДеревоНоваяСтрокаПартия.Остаток = ВыборкаПартии.Остаток;
					ДеревоНоваяСтрокаПартия.ЭтоПартия = Истина;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает возможные значения периодичностей для заданного периода.
//
&НаСервере
Функция ДоступныеПериодичности(Период)
	
	ДоступныеПериоды = Новый СписокЗначений;
	НачалоПериода = Период.ДатаНачала;
	КонецПериода = Период.ДатаОкончания;
	
	ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.День, "дням");
	
	НачалоНедели = НачалоНедели(КонецПериода);
	Если НачалоНедели > НачалоПериода Тогда
		ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя, "неделям");
	КонецЕсли;
	
	НачалоМесяца = НачалоМесяца(КонецПериода);
	Если НачалоМесяца > НачалоПериода Тогда
		ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц, "месяцам");
	КонецЕсли;
	
	НачалоКвартала = НачалоКвартала(КонецПериода);
	Если НачалоКвартала > НачалоПериода Тогда
		ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал, "кварталам");
	КонецЕсли;
	
	НачалоГода = НачалоГода(КонецПериода);
	Если НачалоГода > НачалоПериода Тогда
		ДоступныеПериоды.Добавить(ТипЕдиницыИнтервалаВремениАнализаДанных.Год, "годам");
	КонецЕсли;
	
	Возврат ДоступныеПериоды;
	
КонецФункции

// Определяет подходящую периодичность для заданного периода.
//
&НаСервере
Функция ПодходящаяПериодичность(НачалоПериода, КонецПериода = Неопределено)
	
	Если КонецПериода = Неопределено Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
	Иначе
		ТекущаяДата = КонецПериода;
	КонецЕсли;
	
	НачалоГода = НачалоГода(ТекущаяДата);
	Если НачалоПериода < НачалоГода Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Год;
	КонецЕсли;
	
	НачалоГода = НачалоКвартала(ТекущаяДата);
	Если НачалоПериода < НачалоГода Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал;
	КонецЕсли;
	
	НачалоГода = НачалоМесяца(ТекущаяДата);
	Если НачалоПериода < НачалоГода Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц;
	КонецЕсли;
	
	НачалоГода = НачалоНедели(ТекущаяДата);
	Если НачалоПериода < НачалоГода Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя;
	КонецЕсли;
	
	Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.День;
	
КонецФункции

// Возвращает формат даты для отображения на диаграмме для заданной периодичности.
//
&НаСервере
Функция ФорматДатыИзПериодичности(Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		ФорматДаты = "ДЛФ=D";
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		ФорматДаты = "ДЛФ=D";
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		ФорматДаты = "ДФ=""ММММ гггг""";
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		ФорматДаты = "ДФ=""к""";
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		ФорматДаты = "ДФ=""гггг""";
	КонецЕсли;
	
	Возврат ФорматДаты;
	
КонецФункции

&НаСервере
Функция ПредставлениеДаты(Дата, Формат)
	
	Если Формат = "ДФ=""к""" Тогда
		Возврат Формат(Дата, Формат) + " квартал " + Формат(Дата, "ДФ=""гггг""");
	Иначе
		Возврат Формат(Дата, Формат);
	КонецЕсли;
	
КонецФункции

// Возвращает для указанной даты начало интервала периодичности.
//
&НаСервере
Функция НачалоИнтервала(Период, Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Возврат НачалоГода(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Возврат НачалоКвартала(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Возврат НачалоМесяца(Период);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Возврат НачалоНедели(Период);
	Иначе
		Возврат Период;
	КонецЕсли;
	
КонецФункции

// Возвращает для указанной даты начало следующего интервала периодичности.
//
&НаСервере
Функция СледующийИнтервал(Период, Периодичность)
	
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Возврат ДобавитьМесяц(Период, 12);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Возврат ДобавитьМесяц(Период, 3);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Возврат ДобавитьМесяц(Период, 1);
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Возврат Период + 86400*7;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Возврат Период + 86400;
	КонецЕсли;
	
КонецФункции

// Возвращает значение суммы на заданную дату в заданной валюте.
//
&НаСервере
Функция ПересчитатьПоВыбраннойВалюте(ИсходнаяВалюта, Дата, Значение, НоваяВалюта = Неопределено)
	
	Если НоваяВалюта = Неопределено Тогда
		НоваяВалюта = ДиаграммаЦеныВалюта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда
		НоваяВалюта = ИсходнаяВалюта;
	КонецЕсли;
	
	ПараметрыНовогоКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", НоваяВалюта));
	ПараметрыНовогоКурса.Вставить("Валюта", НоваяВалюта);
	ПараметрыСтарогоКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ИсходнаяВалюта));
	ПараметрыСтарогоКурса.Вставить("Валюта", ИсходнаяВалюта);
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Значение, ПараметрыСтарогоКурса, ПараметрыНовогоКурса);
	
КонецФункции

// Возвращает представление периода.
//
&НаСервере
Функция ЗаголовокПериода(Период)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПредставлениеПериода(Период.ДатаНачала, ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания));
	
КонецФункции

&НаСервере
Процедура ДиаграммаЦеныУстановитьЗаголовокПериода()
	
	ДиаграммаЦеныПериодЗаголовок = ЗаголовокПериода(ДиаграммаЦеныПериод);
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаПродажиУстановитьЗаголовокПериода()
	
	ДиаграммаПродажиПериодЗаголовок = ЗаголовокПериода(ДиаграммаПродажиПериод);
	
КонецПроцедуры

// Показывает пустую диаграмму цен при отсутствии данных для отображения.
//
&НаСервере
Процедура ИнициализироватьДиаграммуЦеныПустую()
	
	Элементы.ДиаграммаЦены.Доступность = Ложь;
	
	Элементы.ДинамикаЦенКоманднаяПанель.Видимость = Ложь;
	
	ДиаграммаЦены.Обновление = Ложь;
	ДиаграммаЦены.Очистить();
	
	Если ЗначениеЗаполнено(ДиаграммаЦеныПериодЗаголовок) Тогда
		ДиаграммаЗаголовок = НСтр("ru='Нет данных за выбранный период.'");
	Иначе
		ДиаграммаЗаголовок = НСтр("ru='Цены не установлены.'");
	КонецЕсли;
	
	ДиаграммаЦены.ОбластьЗаголовка.Текст = ДиаграммаЗаголовок;
	ДиаграммаЦены.ОтображатьЗаголовок = Истина;
	ДиаграммаЦены.ОбластьПостроения.ОтображатьШкалу = Ложь;
	ДиаграммаЦены.ОтображатьЛегенду = Ложь;
	
	ДиаграммаЦены.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	ТекДатаСеанса = ТекущаяДатаСеанса();
	Точка1 = ДиаграммаЦены.Точки.Добавить(ТекДатаСеанса);
	Точка2 = ДиаграммаЦены.Точки.Добавить(ТекДатаСеанса - 86400);
	Точка3 = ДиаграммаЦены.Точки.Добавить(ТекДатаСеанса - 86400*2);
	Точка4 = ДиаграммаЦены.Точки.Добавить(ТекДатаСеанса - 86400*3);
	
	Серия1 = ДиаграммаЦены.Серии.Добавить("Цена1");
	Серия1.Цвет = Новый Цвет(192, 192, 192);
	Серия1.Маркер = ТипМаркераДиаграммы.Нет;
	Серия2 = ДиаграммаЦены.Серии.Добавить("Цена2");
	Серия2.Цвет = Новый Цвет(220, 220, 220);
	Серия2.Маркер = ТипМаркераДиаграммы.Нет;
	Серия3 = ДиаграммаЦены.Серии.Добавить("Цена3");
	Серия3.Цвет = Новый Цвет(127, 127, 127);
	Серия3.Маркер = ТипМаркераДиаграммы.Нет;
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ДиаграммаЦены.УстановитьЗначение(Точка1, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка1, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка1, Серия3, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаЦены.УстановитьЗначение(Точка2, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка2, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка2, Серия3, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаЦены.УстановитьЗначение(Точка3, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка3, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка3, Серия3, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаЦены.УстановитьЗначение(Точка4, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка4, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаЦены.УстановитьЗначение(Точка4, Серия3, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаЦены.Обновление = Истина;
	
КонецПроцедуры

// Показывает пустую диаграмму продаж при отсутствии данных для отображения.
//
&НаСервере
Процедура ИнициализироватьДиаграммуПродажиПустую()
	
	Элементы.ДиаграммаПродажи.Доступность = Ложь;
	
	Элементы.ДинамикаПродажКоманднаяПанель.Видимость = Ложь;
	
	ДиаграммаПродажи.Обновление = Ложь;
	ДиаграммаПродажиКоличество.Обновление = Ложь;
	ДиаграммаПродажи.Очистить();
	ДиаграммаПродажиКоличество.Очистить();
	
	Если ЗначениеЗаполнено(ДиаграммаПродажиПериодЗаголовок) Тогда
		ДиаграммаЗаголовок = НСтр("ru='Нет данных за выбранный период.'");
	Иначе
		ДиаграммаЗаголовок = НСтр("ru='Отсутствуют данные по продажам.'");
	КонецЕсли;
	
	ДиаграммаПродажи.ОбластьЗаголовка.Текст = ДиаграммаЗаголовок;
	ДиаграммаПродажи.ОтображатьЗаголовок = Истина;
	ДиаграммаПродажи.ОбластьПостроения.ОтображатьШкалу = Ложь;
	ДиаграммаПродажи.ОтображатьЛегенду = Ложь;
	
	ДиаграммаПродажиКоличество.ОбластьЗаголовка.Текст = ДиаграммаЗаголовок;
	ДиаграммаПродажиКоличество.ОтображатьЗаголовок = Истина;
	ДиаграммаПродажиКоличество.ОбластьПостроения.ОтображатьШкалу = Ложь;
	ДиаграммаПродажиКоличество.ОтображатьЛегенду = Ложь;
	
	ДиаграммаПродажи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	ДиаграммаПродажиКоличество.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	ТекДатаСеанса = ТекущаяДатаСеанса();
	Точка1 = ДиаграммаПродажи.Точки.Добавить(ТекДатаСеанса);
	Точка2 = ДиаграммаПродажи.Точки.Добавить(ТекДатаСеанса - 86400);
	Точка3 = ДиаграммаПродажи.Точки.Добавить(ТекДатаСеанса - 86400*2);
	Точка4 = ДиаграммаПродажи.Точки.Добавить(ТекДатаСеанса - 86400*3);
	
	Серия1 = ДиаграммаПродажи.Серии.Добавить("Себестоимость");
	Серия1.Цвет = Новый Цвет(192, 192, 192);
	Серия2 = ДиаграммаПродажи.Серии.Добавить("Прибыль");
	Серия2.Цвет = Новый Цвет(220, 220, 220);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	ДиаграммаПродажи.УстановитьЗначение(Точка1, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажи.УстановитьЗначение(Точка1, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаПродажи.УстановитьЗначение(Точка2, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажи.УстановитьЗначение(Точка2, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаПродажи.УстановитьЗначение(Точка3, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажи.УстановитьЗначение(Точка3, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаПродажи.УстановитьЗначение(Точка4, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажи.УстановитьЗначение(Точка4, Серия2, ГСЧ.СлучайноеЧисло(),, " ");
	
	ТекДатаСеанса = ТекущаяДатаСеанса();
	Точка1 = ДиаграммаПродажиКоличество.Точки.Добавить(ТекДатаСеанса);
	Точка2 = ДиаграммаПродажиКоличество.Точки.Добавить(ТекДатаСеанса - 86400);
	Точка3 = ДиаграммаПродажиКоличество.Точки.Добавить(ТекДатаСеанса - 86400*2);
	Точка4 = ДиаграммаПродажиКоличество.Точки.Добавить(ТекДатаСеанса - 86400*3);
	
	Серия1 = ДиаграммаПродажиКоличество.Серии.Добавить("Количество");
	Серия1.Цвет = Новый Цвет(192, 192, 192);
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	ДиаграммаПродажиКоличество.УстановитьЗначение(Точка1, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажиКоличество.УстановитьЗначение(Точка2, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажиКоличество.УстановитьЗначение(Точка3, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	ДиаграммаПродажиКоличество.УстановитьЗначение(Точка4, Серия1, ГСЧ.СлучайноеЧисло(),, " ");
	
	ДиаграммаПродажи.Обновление = Истина;
	ДиаграммаПродажиКоличество.Обновление = Истина;
	
КонецПроцедуры

// Устанавливает необходимые свойства диаграммы цены для отображения данных.
//
&НаСервере
Процедура ИнициализироватьДиаграммуЦены()
	
	Элементы.ДиаграммаЦены.Доступность = Истина;
	
	Элементы.ДинамикаЦенКоманднаяПанель.Видимость = Истина;
	
	ДиаграммаЦены.Очистить();
	
	ДиаграммаЦены.ОтображатьЗаголовок = Ложь;
	ДиаграммаЦены.ОбластьПостроения.ОтображатьШкалу = Истина;
	ДиаграммаЦены.ОтображатьЛегенду = Истина;
	
	ДиаграммаЦены.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
КонецПроцедуры

// Устанавливает необходимые свойства диаграммы продажи для отображения данных.
//
&НаСервере
Процедура ИнициализироватьДиаграммуПродажи()
	
	Элементы.ДиаграммаПродажи.Доступность = Истина;
	
	Элементы.ДинамикаПродажКоманднаяПанель.Видимость = Истина;
	
	ДиаграммаПродажи.Очистить();
	ДиаграммаПродажиКоличество.Очистить();
	
	ДиаграммаПродажи.ОтображатьЗаголовок = Ложь;
	ДиаграммаПродажи.ОбластьПостроения.ОтображатьШкалу = Истина;
	ДиаграммаПродажи.ОтображатьЛегенду = Истина;
	
	ДиаграммаПродажиКоличество.ОтображатьЗаголовок = Ложь;
	ДиаграммаПродажиКоличество.ОбластьПостроения.ОтображатьШкалу = Истина;
	ДиаграммаПродажиКоличество.ОтображатьЛегенду = Истина;
	
	ДиаграммаПродажи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	ДиаграммаПродажиКоличество.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
КонецПроцедуры

&НаСервере
Функция ЦенаПоНавигационнойСсылке(НавигационнаяСсылка)
	
	Возврат Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(НавигационнаяСсылка));
	
КонецФункции

&НаСервере
Функция ЦветВидаЦен(ВидЦен)
	
	Строки = ЦветаВидовЦен.НайтиСтроки(Новый Структура("ВидЦен", ВидЦен));
	Если Строки.Количество() <> 0 Тогда
		Возврат Строки[0].Цвет;
	КонецЕсли;
	
	КоличествоСтрок = ЦветаВидовЦен.Количество();
	НоваяСтрока = ЦветаВидовЦен.Добавить();
	НоваяСтрока.ВидЦен = ВидЦен;
	Если КоличествоСтрок < 10 Тогда
		ЦветаСерий = УправлениеНебольшойФирмойКлиентСервер.ЦветаСерийДиаграмм();
		НоваяСтрока.Цвет = ЦветаСерий[КоличествоСтрок];
	Иначе
		НоваяСтрока.Цвет = Неопределено;
	КонецЕсли;
	
	Возврат НоваяСтрока.Цвет;
	
КонецФункции

// Устанавливает видимость кнопок периодичности для диаграммы цен.
//
&НаСервере
Процедура ДиаграммаЦеныОбновитьКнопкиПериодичности()
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.День) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоДням.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоДням.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоНеделям.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоНеделям.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоМесяцам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоМесяцам.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоКварталам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоКварталам.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаЦеныДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Год) <> Неопределено Тогда
		Элементы.ДиаграммаЦеныСрезПоГодам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаЦеныСрезПоГодам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость кнопок периодичности для диаграммы продаж.
//
&НаСервере
Процедура ДиаграммаПродажиОбновитьКнопкиПериодичности()
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.День) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоДням.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоДням.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоНеделям.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоНеделям.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоМесяцам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоМесяцам.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоКварталам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоКварталам.Видимость = Ложь;
	КонецЕсли;
	
	Если ДиаграммаПродажиДоступныеПериоды.НайтиПоЗначению(ТипЕдиницыИнтервалаВремениАнализаДанных.Год) <> Неопределено Тогда
		Элементы.ДиаграммаПродажиСрезПоГодам.Видимость = Истина;
	Иначе
		Элементы.ДиаграммаПродажиСрезПоГодам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныЗаполнитьКоманднуюПанель()
	
	ДиаграммаЦеныКоманднаяПанельСоздатьКнопкиВыбораВалюты();
	ДиаграммаЦеныКоманднаяПанельСоздатьКнопкиВыбораЕдиницыИзмерения();
	
	Если Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения.ПодчиненныеЭлементы.Количество() = 0
		И Элементы.ДинамикаЦенКоманднаяПанельВалюты.ПодчиненныеЭлементы.Количество() = 0 Тогда
		
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоДням,      Элементы.ДинамикаЦенКоманднаяПанельПодменю);
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоНеделям,   Элементы.ДинамикаЦенКоманднаяПанельПодменю);
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоМесяцам,   Элементы.ДинамикаЦенКоманднаяПанельПодменю);
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоКварталам, Элементы.ДинамикаЦенКоманднаяПанельПодменю);
		Элементы.Переместить(Элементы.ДиаграммаЦеныСрезПоГодам,     Элементы.ДинамикаЦенКоманднаяПанельПодменю);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныКоманднаяПанельСоздатьКнопкиВыбораВалюты()
	
	ДиаграммаЦеныВалюта = Константы.НациональнаяВалюта.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка,
	|	Валюты.Наименование
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления";
	
	ВыборкаВалюты = Запрос.Выполнить().Выбрать();
	Если ВыборкаВалюты.Количество() > 1 Тогда
		
		Итератор = 0;
		
		Пока ВыборкаВалюты.Следующий() Цикл
			
			НоваяСтрока = ДиаграммаЦеныВалюты.Вставить(Итератор);
			НоваяСтрока.Ссылка = ВыборкаВалюты.Ссылка;
			
			НоваяКоманда = Команды.Добавить("ДиаграммаЦеныУстановитьОтборПоВалюте_" + Итератор);
			НоваяКоманда.Действие = "Подключаемый_ДиаграммаЦеныУстановитьОтборПоВалюте";
			
			КнопкаФормы = Элементы.Добавить("ДиаграммаЦеныУстановитьОтборПоВалюте_" + Итератор, Тип("КнопкаФормы"), Элементы.ДинамикаЦенКоманднаяПанельВалюты);
			КнопкаФормы.ИмяКоманды = "ДиаграммаЦеныУстановитьОтборПоВалюте_" + Итератор;
			КнопкаФормы.Заголовок = ВыборкаВалюты.Наименование;
			
			Если ВыборкаВалюты.Ссылка = ДиаграммаЦеныВалюта Тогда
				ДиаграммаЦеныВыбратьВалюту(НоваяКоманда.Имя);
			КонецЕсли;
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДиаграммаЦеныКоманднаяПанельСоздатьКнопкиВыбораЕдиницыИзмерения()
	
	ДиаграммаЦеныЕдиницаИзмерения = Объект.ЕдиницаИзмерения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.Наименование
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	НЕ ЕдиницыИзмерения.ПометкаУдаления
	|	И ЕдиницыИзмерения.Владелец = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ВыборкаЕдиницыИзмерения = Запрос.Выполнить().Выбрать();
	Если ВыборкаЕдиницыИзмерения.Количество() <> 0 Тогда
		
		Итератор = 0;
		
		НоваяСтрока = ДиаграммаЦеныЕдиницыИзмерения.Вставить(Итератор);
		НоваяСтрока.Ссылка = Объект.ЕдиницаИзмерения;

		НоваяКоманда = Команды.Добавить("ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор);
		НоваяКоманда.Действие = "Подключаемый_ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения";
		
		КнопкаФормы = Элементы.Добавить("ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор, Тип("КнопкаФормы"), Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения);
		КнопкаФормы.ИмяКоманды = "ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор;
		КнопкаФормы.Заголовок = Объект.ЕдиницаИзмерения.Наименование;
		
		Итератор = Итератор + 1;
		Пока ВыборкаЕдиницыИзмерения.Следующий() Цикл
			
			НоваяСтрока = ДиаграммаЦеныЕдиницыИзмерения.Вставить(Итератор);
			НоваяСтрока.Ссылка = ВыборкаЕдиницыИзмерения.Ссылка;
			
			НоваяКоманда = Команды.Добавить("ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор);
			НоваяКоманда.Действие = "Подключаемый_ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения";
			
			КнопкаФормы = Элементы.Добавить("ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор, Тип("КнопкаФормы"), Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения);
			КнопкаФормы.ИмяКоманды = "ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_" + Итератор;
			КнопкаФормы.Заголовок = ВыборкаЕдиницыИзмерения.Наименование;
			
			Если ВыборкаЕдиницыИзмерения.Ссылка = ДиаграммаЦеныЕдиницаИзмерения Тогда
				ДиаграммаЦеныВыбратьЕдиницуИзмерения(НоваяКоманда.Имя);
			КонецЕсли;
			
			Итератор = Итератор + 1;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает картинку текущего состояния для кнопки с выбранной периодичностью.
//
&НаСервере
Процедура ДиаграммаЦеныУстановитьПериодичность(Периодичность)
	
	Если ЗначениеЗаполнено(ДиаграммаЦеныПериодичность) Тогда
		
		ТекущаяПериодичность = ДиаграммаЦеныПериодичность;
		Если ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
			Элементы.ДиаграммаЦеныСрезПоДням.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
			Элементы.ДиаграммаЦеныСрезПоНеделям.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
			Элементы.ДиаграммаЦеныСрезПоМесяцам.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
			Элементы.ДиаграммаЦеныСрезПоКварталам.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
			Элементы.ДиаграммаЦеныСрезПоГодам.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДиаграммаЦеныПериодичность = Периодичность;
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Элементы.ДиаграммаЦеныСрезПоДням.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Элементы.ДиаграммаЦеныСрезПоНеделям.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Элементы.ДиаграммаЦеныСрезПоМесяцам.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Элементы.ДиаграммаЦеныСрезПоКварталам.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Элементы.ДиаграммаЦеныСрезПоГодам.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает картинку текущего состояния для кнопки с выбранной периодчностью.
//
&НаСервере
Процедура ДиаграммаПродажиУстановитьПериодичность(Периодичность)
	
	Если ЗначениеЗаполнено(ДиаграммаПродажиПериодичность) Тогда
		
		ТекущаяПериодичность = ДиаграммаПродажиПериодичность;
		Если ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
			Элементы.ДиаграммаПродажиСрезПоДням.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
			Элементы.ДиаграммаПродажиСрезПоНеделям.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
			Элементы.ДиаграммаПродажиСрезПоМесяцам.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
			Элементы.ДиаграммаПродажиСрезПоКварталам.Пометка = Ложь;
		ИначеЕсли ТекущаяПериодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
			Элементы.ДиаграммаПродажиСрезПоГодам.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДиаграммаПродажиПериодичность = Периодичность;
	Если Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День Тогда
		Элементы.ДиаграммаПродажиСрезПоДням.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя Тогда
		Элементы.ДиаграммаПродажиСрезПоНеделям.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц Тогда
		Элементы.ДиаграммаПродажиСрезПоМесяцам.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал Тогда
		Элементы.ДиаграммаПродажиСрезПоКварталам.Пометка = Истина;
	ИначеЕсли Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год Тогда
		Элементы.ДиаграммаПродажиСрезПоГодам.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает картинку текущего состояния для кнопки с выбранной единицей измерения.
//
&НаСервере
Процедура ДиаграммаЦеныВыбратьЕдиницуИзмерения(КомандаИмя)
	
	Для каждого Элемент Из Элементы.ДинамикаЦенКоманднаяПанельЕдиницыИзмерения.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = Ложь;
	КонецЦикла;
	
	НСтроки = Число(СтрЗаменить(КомандаИмя, "ДиаграммаЦеныУстановитьОтборПоЕдиницеИзмерения_", ""));
	ДиаграммаЦеныЕдиницаИзмерения = ДиаграммаЦеныЕдиницыИзмерения[НСтроки].Ссылка;
	Элементы[КомандаИмя].Пометка = Истина;
	
КонецПроцедуры

// Устанавливает картинку текущего состояния для кнопки с выбранной валютой.
//
&НаСервере
Процедура ДиаграммаЦеныВыбратьВалюту(КомандаИмя)
	
	Для каждого Элемент Из Элементы.ДинамикаЦенКоманднаяПанельВалюты.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = Ложь;
	КонецЦикла;
	
	НСтроки = Число(СтрЗаменить(КомандаИмя, "ДиаграммаЦеныУстановитьОтборПоВалюте_", ""));
	ДиаграммаЦеныВалюта = ДиаграммаЦеныВалюты[НСтроки].Ссылка;
	Элементы[КомандаИмя].Пометка = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменСGoogle

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_ОбработкаВыбора(
	ЭтотОбъект,
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОбменСGoogleКлиент.Подключаемый_АвтоПодбор(
	ЭтотОбъект,
	Элемент,
	Текст,
	ДанныеВыбора,
	Параметры,
	Ожидание,
	СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныНаименований

&НаКлиенте
Процедура Подключаемый_НаименованиеНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.Наименование
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеПолноеНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеПолноеОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.НаименованиеПолное
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		Объект.КатегорияНоменклатуры,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураРабочее")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеПолноеОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		Объект.КатегорияНоменклатуры,
		Объект.НаименованиеПолное,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименования()
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(
		ЭтотОбъект,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураРабочее")
	);
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(
		ЭтотОбъект,
		Объект.НаименованиеПолное,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати")
	);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление)
	
	Возврат ШаблоныНаименований.ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление);
	
КонецФункции

&НаСервере
Процедура СформироватьНаименования()
	
	ШаблоныНаименований.СформироватьНаименования(ЭтотОбъект, Объект.КатегорияНоменклатуры);
	
КонецПроцедуры

// Присваивает соответствующее значение переменной ФормироватьНаименованиеПолноеАвтоматически.
//
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Наименование, НаименованиеПолное)
	
	Возврат (Наименование = НаименованиеПолное ИЛИ ПустаяСтрока(НаименованиеПолное));
	
КонецФункции // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает данные файла
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции // ПолучитьДанныеФайла()

&НаСервере
Процедура ЗаполнитьРеквизитыАлкогольнойПродукцииПоКатегорииНоменклатуры()

	Если Не ФОУчетАлкогольнойПродукции
		ИЛИ Объект.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Запас Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		Объект.ВидАлкогольнойПродукции = Неопределено;
		Объект.СтранаПроисхождения = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидАлкогольнойПродукции <> Объект.КатегорияНоменклатуры.ВидАлкогольнойПродукции Тогда
		Объект.ВидАлкогольнойПродукции = Объект.КатегорияНоменклатуры.ВидАлкогольнойПродукции;
	КонецЕсли;
	
	Объект.ИмпортнаяАлкогольнаяПродукция = Объект.КатегорияНоменклатуры.ИмпортнаяАлкогольнаяПродукция;
	Если Не Объект.ИмпортнаяАлкогольнаяПродукция Тогда
		Объект.СтранаПроисхождения = Неопределено;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыАлкогольнойПродукцииПоНоменклатурнойГруппе()

// Обновляет данные о ценах при возникновении оповещения об изменении цены.
//
&НаСервере
Процедура ОбработкаОповещенияЗаписьВРегистреЦен()
	
	АктуальныеЦеныУдалитьЭлементы();
	
	ДиаграммаЦеныПериод = Неопределено;
	ДиаграммаЦеныУстановитьЗаголовокПериода();
	
	Области = Новый Массив;
	Области.Добавить("АктуальныеЦены");
	Области.Добавить("ДиаграммаЦены");
	ПолучитьДанныеФормы(Области);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияДопРеквизита()
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
		ТекущийНаборСвойств = Объект.КатегорияНоменклатуры.НаборСвойств;
	Иначе
		ТекущийНаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
	КонецЕсли;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНаборСвойств);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименований.ЗаполнитьСписокСвойствОбъекта(ЭтотОбъект);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииДопРеквизита(ЭтотОбъект, Элемент);
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗаписьВРегистреЦенКлиент()
	
	ОбработкаОповещенияЗаписьВРегистреЦен();
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
