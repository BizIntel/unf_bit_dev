#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Группы
		И Не Параметры.Отбор.Свойство("Недействителен") Тогда
		
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ТипНоменклатуры");
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("ТипНоменклатуры");
	РедактируемыеРеквизиты.Добавить("МетодОценки");
	РедактируемыеРеквизиты.Добавить("СтавкаНДС");
	РедактируемыеРеквизиты.Добавить("НаправлениеДеятельности");
	РедактируемыеРеквизиты.Добавить("Склад");
	РедактируемыеРеквизиты.Добавить("Ячейка");
	РедактируемыеРеквизиты.Добавить("СчетУчетаЗапасов");
	РедактируемыеРеквизиты.Добавить("СчетУчетаЗатрат");
	РедактируемыеРеквизиты.Добавить("КатегорияНоменклатуры");
	РедактируемыеРеквизиты.Добавить("ЦеноваяГруппа");
	РедактируемыеРеквизиты.Добавить("СтранаПроисхождения");
	РедактируемыеРеквизиты.Добавить("СпособПополнения");
	РедактируемыеРеквизиты.Добавить("СрокПополнения");
	РедактируемыеРеквизиты.Добавить("Поставщик");
	РедактируемыеРеквизиты.Добавить("Недействителен");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Возвращает основную цену продажи для указанной номенклатуры, по указанному виду цен.
//
// Номенклатура (Справочник.Номенклатура) - номенклатура по которой необходимо вычислить цену (обязательна к заполнению);
// ВидЦен (Справочник.ВидыЦен или Неопределено) - если Неопределено, вычисляем основный вид цен 
//		методом Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
//
Функция ПолучитьОсновнуюЦенуПродажи(ВидЦен, Номенклатура, ЕдиницаИзмерения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) 
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатуры) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК ОсновнаяЦенаПродажи
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ВидЦен = &ВидЦен
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И Актуальность
	|				И &ПараметрЕдиницаИзмерения) КАК ЦеныНоменклатурыСрезПоследних");
	
	Запрос.УстановитьПараметр("ВидЦен", 
		?(ЗначениеЗаполнено(ВидЦен), ВидЦен, Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи())
		);
	
	Запрос.УстановитьПараметр("Номенклатура", 
		Номенклатура
		);
		
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрЕдиницаИзмерения", "ЕдиницаИзмерения = &ЕдиницаИзмерения");
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрЕдиницаИзмерения", "ИСТИНА");
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ОсновнаяЦенаПродажи, 0);
	
КонецФункции //ПолучитьОсновнуюЦенуПродажи()

Функция ЕстьХарактеристики(Номенклатура) Экспорт
	
	Характеристики = Справочники.ХарактеристикиНоменклатуры.Выбрать(, Номенклатура);
	Если Характеристики.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПриОпределенииЗначенияПоУмолчанию(СправочникСсылка, ИмяРеквизита, ВходящиеДанные, СтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию)
	
	Если СтрокаСопоставлена 
		И НЕ ЗначениеЗаполнено(ВходящиеДанные) Тогда
		
		ЗначениеПоУмолчанию = СправочникСсылка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока19 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(19));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповСтрока0000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0));
	ОписаниеТиповЧисло10_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло10_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Родитель", "Группа", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, , , , );
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Код", 		"Код", 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", 	"Штрихкод", 	ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", 	"Артикул", 		ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование","Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 4, Истина, Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ТипНоменклатуры", "Тип номенклатуры", ОписаниеТиповСтрока11, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки", "Способ списания", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности", "Направление бизнеса", ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию("УчетПоНесколькимНаправлениямДеятельности"));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", "Категория номенклатуры", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ПродукцияЕГАИС", "Код по ЕГАИС", ОписаниеТиповСтрока19, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Поставщик", "Поставщик (ИНН или наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИспользоватьСерийныеНомера", "Использовать серийные номера", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СерийныйНомер", "Серийный номер", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Склад", "Склад (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения", "Способ пополнения", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокПополнения", "Срок пополнения", ОписаниеТиповСтрока25, ОписаниеТиповЧисло10_0);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", "Ставка НДС", ОписаниеТиповСтрока11, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоНовинка", "Флаг ""Новинка""", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокДействияФлагаНовинка", "Дата (срок ""Новинки"")", ОписаниеТиповСтрока25, ОписаниеТиповДата);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИсключитьИзПрайсЛистов", "Флаг ""Исключить из прайс-листов""", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НижняяГраницаОстатков", "Нижняя граница остатков", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВерхняяГраницаОстатков", "Верхняя граница остатков", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", "Счет учета запасов", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", "Счет учета затрат", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Ячейки");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Ячейка", "Ячейка (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЦеноваяГруппа", "Ценовая группа (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИспользоватьХарактеристики", "Использовать характеристики", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИспользоватьПартии", "Использовать партии", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Комментарий", "Описание", ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокИсполненияЗаказа", "Срок исполнения заказа", ОписаниеТиповСтрока11, ОписаниеТиповЧисло10_0);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НормаВремени", "Норма времени", ОписаниеТиповСтрока25, ОписаниеТиповЧисло10_3);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ФиксированнаяСтоимость", "Фикс. стоимость (для работ)", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтраныМира");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтранаПроисхождения", "Страна происхождения (код или наименование)", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	// ДополнительныеРеквизиты
	ЗагрузкаДанныхИзВнешнегоИсточника.ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	Если НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
		
		ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, "Дополнительные реквизиты", ОписаниеТиповСтрока150, ОписаниеТиповСтрока11, , , , , , Истина, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ОбновлятьДанные = НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.Штрихкод, СтрокаТаблицыФормы.Артикул, СтрокаТаблицыФормы.НоменклатураНаименование, СтрокаТаблицыФормы.НоменклатураНаименованиеПолное, СтрокаТаблицыФормы.Код);
		ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
		
		// Родитель по наименованию
		ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Родитель", СтрокаТаблицыФормы.Родитель_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителя("Номенклатура", СтрокаТаблицыФормы.Родитель, СтрокаТаблицыФормы.Родитель_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Тип номенклатуры (реквизиты, закрытые для редактирования не правим)
		Если ЭтаСтрокаСопоставлена Тогда
			
			СтрокаТаблицыФормы.ТипНоменклатуры = СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры;
			
		Иначе
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьТипНоменклатуры(СтрокаТаблицыФормы.ТипНоменклатуры, СтрокаТаблицыФормы.ТипНоменклатуры_ВходящиеДанные, Перечисления.ТипыНоменклатуры.Запас);
			
		КонецЕсли;
		
		// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
		ЗначениеПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.шт;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "ЕдиницаИзмерения", СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// МетодОценки
		ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "МетодОценки", СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// НаправлениеДеятельности по наименованию
		ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "НаправлениеДеятельности", СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// КатегорияНоменклатуры по наименованию
		ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.БезКатегории;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "КатегорияНоменклатуры", СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКатегориюНоменклатуры(СтрокаТаблицыФормы.КатегорияНоменклатуры, СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// ПродукцияЕГАИС по коду
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПродукциюПоЕГАИС(СтрокаТаблицыФормы.ПродукцияЕГАИС, СтрокаТаблицыФормы.ПродукцияЕГАИС_ВходящиеДанные);
			
		КонецЕсли;
		
		// Поставщик по ИНН, Наименованию
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПоставщика(СтрокаТаблицыФормы.Поставщик, СтрокаТаблицыФормы.Поставщик_ВходящиеДанные);
		
		// Серийные номера
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ИспользоватьСерийныеНомера, СтрокаТаблицыФормы.ИспользоватьСерийныеНомера_ВходящиеДанные);
			СтрокаТаблицыФормы.ИспользоватьСерийныеНомера = НЕ Пустаястрока(СтрокаТаблицыФормы.СерийныйНомер_ВходящиеДанные);
			
			Если ЭтаСтрокаСопоставлена
				И СтрокаТаблицыФормы.ИспользоватьСерийныеНомера Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСерийныйНомер(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.СерийныйНомер, СтрокаТаблицыФормы.СерийныйНомер_ВходящиеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Склад по наименованию
		ЗначениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Склад", СтрокаТаблицыФормы.Склад_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.Склад, СтрокаТаблицыФормы.Склад_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// СпособПополнения по наименованию
		ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СпособПополнения", СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// СрокПополнения
		ЗначениеПоУмолчанию = 1;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СрокПополнения", СтрокаТаблицыФормы.СрокПополнения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СрокПополнения, СтрокаТаблицыФормы.СрокПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// СтавкаНДС по наименованию
		ЗначениеПоУмолчанию = Справочники.Организации.ОсновнаяОрганизация.СтавкаНДСПоУмолчанию;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СтавкаНДС", СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		//Прайс-лист
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ЭтоНовинка, СтрокаТаблицыФормы.ЭтоНовинка_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ИсключитьИзПрайсЛистов, СтрокаТаблицыФормы.ИсключитьИзПрайсЛистов_ВходящиеДанные);
		
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.СрокДействияФлагаНовинка, СтрокаТаблицыФормы.СрокДействияФлагаНовинка_ВходящиеДанные);
		
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.НижняяГраницаОстатков, СтрокаТаблицыФормы.НижняяГраницаОстатков_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ВерхняяГраницаОстатков, СтрокаТаблицыФормы.ВерхняяГраницаОстатков_ВходящиеДанные);
		
		// СчетУчетаЗапасов по коду, наименованию
		ЗначениеПоУмолчанию = ПланыСчетов.Управленческий.СырьеИМатериалы;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СчетУчетаЗапасов", СтрокаТаблицыФормы.СчетУчетаЗапасов_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаЗапасов(СтрокаТаблицыФормы.СчетУчетаЗапасов, СтрокаТаблицыФормы.СчетУчетаЗапасов_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// СчетУчетаЗатрат по коду, наименованию
		ЗначениеПоУмолчанию = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СчетУчетаЗатрат", СтрокаТаблицыФормы.СчетУчетаЗатрат_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаЗатрат(СтрокаТаблицыФормы.СчетУчетаЗатрат, СтрокаТаблицыФормы.СчетУчетаЗатрат_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
			
			// Ячейка по наименованию
			ЗначениеПоУмолчанию = Справочники.Ячейки.ПустаяСсылка();
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Ячейка", СтрокаТаблицыФормы.Ячейка_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЯчейку(СтрокаТаблицыФормы.Ячейка, СтрокаТаблицыФормы.Ячейка_ВходящиеДанные, ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
		// ЦеноваяГруппа по наименованию
		ЗначениеПоУмолчанию = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "ЦеноваяГруппа", СтрокаТаблицыФормы.ЦеноваяГруппа_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЦеновуюГруппу(СтрокаТаблицыФормы.ЦеноваяГруппа, СтрокаТаблицыФормы.ЦеноваяГруппа_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// ИспользоватьХарактеристики
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ИспользоватьХарактеристики, СтрокаТаблицыФормы.ИспользоватьХарактеристики_ВходящиеДанные);
			
		КонецЕсли;
		
		// ИспользоватьПартии
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ИспользоватьПартии, СтрокаТаблицыФормы.ИспользоватьПартии_ВходящиеДанные);
			
		КонецЕсли;
		
		// Комментарий как строка
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Комментарий, СтрокаТаблицыФормы.Комментарий_ВходящиеДанные);
		
		// СрокИсполненияЗаказа
		ЗначениеПоУмолчанию = 1;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СрокИсполненияЗаказа", СтрокаТаблицыФормы.СрокИсполненияЗаказа_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СрокИсполненияЗаказа, СтрокаТаблицыФормы.СрокИсполненияЗаказа_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// НормаВремени
		ЗначениеПоУмолчанию = 0;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "НормаВремени", СтрокаТаблицыФормы.НормаВремени_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.НормаВремени, СтрокаТаблицыФормы.НормаВремени_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// ФиксированнаяСтоимость
		Если ПустаяСтрока(СтрокаТаблицыФормы.ФиксированнаяСтоимость_ВходящиеДанные) Тогда
			
			СтрокаТаблицыФормы.ФиксированнаяСтоимость = Истина;
			
		Иначе
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ФиксированнаяСтоимость, СтрокаТаблицыФормы.ФиксированнаяСтоимость_ВходящиеДанные);
			
		КонецЕсли;
		
		// СтранаПроисхождения по коду
		ЗначениеПоУмолчанию = Справочники.СтраныМира.ПустаяСсылка();
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СтранаПроисхождения", СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтрануПроисхождения(СтрокаТаблицыФормы.СтранаПроисхождения, СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Дополнительные реквизиты
		Если НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДополнительныеРеквизиты(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	СтрокаТаблицыФормы._СтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = СтрокаТаблицыФормы._СтрокаСопоставлена
											ИЛИ (НЕ СтрокаТаблицыФормы._СтрокаСопоставлена И НЕ ПустаяСтрока(СтрокаТаблицыФормы.НоменклатураНаименование));
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	ФОИспользоватьСерийныеНомера	= ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера");
	НастройкиОбновленияСвойств		= СтруктураДанных.НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств;
	ОбновлятьСуществующие			= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьЕслиНеСопоставлено		= СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ТаблицаСопоставленияДанных		= СтруктураДанных.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных				= ТаблицаСопоставленияДанных.Количество();
	КоличествоЗаписейТранзакции		= 0;
	ТранзакцияОткрыта				= Ложь;
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта 
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьЕслиНеСопоставлено);
				
			Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
				
				СоздатьСоответствиеЕГАИС	= Ложь;
				КоличествоЗаписейТранзакции = КоличествоЗаписейТранзакции + 1;
				
				Если СтрокаТаблицы._СтрокаСопоставлена Тогда
					
					ЭлементСправочника = СтрокаТаблицы.Номенклатура.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, НастройкиОбновленияСвойств.ИменаПолейОбновляемые, НастройкиОбновленияСвойств.ИменаПолейНеподлежащихОбновлению);
					
				Иначе
					
					ЭлементСправочника = Справочники.Номенклатура.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, , ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СтандартныеИменаПолейНеподлежащихОбновлению(СтруктураДанных.НастройкиЗагрузкиДанных));
					
					ЭлементСправочника.Родитель = СтрокаТаблицы.Родитель;
					
				КонецЕсли;
				
				ЭлементСправочника.Наименование = СтрокаТаблицы.НоменклатураНаименование;
				ЭлементСправочника.НаименованиеПолное = ?(ПустаяСтрока(СтрокаТаблицы.НоменклатураНаименованиеПолное), СтрокаТаблицы.НоменклатураНаименование, СтрокаТаблицы.НоменклатураНаименованиеПолное);
				
				Если НЕ ЭлементСправочника.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
					
					ЭлементСправочника.НижняяГраницаОстатков = 0;
					ЭлементСправочника.ВерхняяГраницаОстатков = 0;
					
				КонецЕсли;
				
				Если СтруктураДанных.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточника.ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, СтрокаТаблицы._СтрокаСопоставлена, СтрокаТаблицы, СтруктураДанных.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
					
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции")
					И ЗначениеЗаполнено(СтрокаТаблицы.ПродукцияЕГАИС) Тогда
					
					ПродукцияЕГАИС = СтрокаТаблицы.ПродукцияЕГАИС;
					
					ЭлементСправочника.ОбъемДАЛ = ПродукцияЕГАИС.Объем/100;
					ЭлементСправочника.Крепость = ПродукцияЕГАИС.Крепость;
					ЭлементСправочника.ВидАлкогольнойПродукции = ПродукцияЕГАИС.ВидПродукции;
					
					ЭлементСправочника.ИмпортнаяАлкогольнаяПродукция = ЗначениеЗаполнено(ПродукцияЕГАИС.Производитель) И ЗначениеЗаполнено(ПродукцияЕГАИС.Импортер);
					
					СопоставленныеДанные = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПолучитьКонтрагентовПоСоответствиюЕГАИС(ПродукцияЕГАИС.Производитель, ПродукцияЕГАИС.Импортер);
					Если ЭлементСправочника.ИмпортнаяАлкогольнаяПродукция Тогда
						
						ЭлементСправочника.Производитель = СопоставленныеДанные.Производитель;
						ЭлементСправочника.ПроизводительИмпортерАлкогольнойПродукции = СопоставленныеДанные.Импортер;
						
					Иначе
						
						ЭлементСправочника.ПроизводительИмпортерАлкогольнойПродукции = СопоставленныеДанные.Производитель;
						
					КонецЕсли;
					
					СоздатьСоответствиеЕГАИС = Истина;
					
				КонецЕсли;
				
				ЭлементСправочника.Записать();
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.ШтрихКод) Тогда
					
					ШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
					ШК.Период = ТекущаяДата();
					ШК.Штрихкод = СтрокаТаблицы.ШтрихКод;
					ШК.Номенклатура = ЭлементСправочника.Ссылка;
					ШК.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения), СтрокаТаблицы.ЕдиницаИзмерения, ЭлементСправочника.ЕдиницаИзмерения);
					
					ШК.Записать(Истина);
					
				КонецЕсли;
				
				Если СоздатьСоответствиеЕГАИС Тогда
					
					СоответствиеНоменклатурыЕГАИС = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
					СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = СтрокаТаблицы.ПродукцияЕГАИС;
					СоответствиеНоменклатурыЕГАИС.Номенклатура = ЭлементСправочника.Ссылка;
					СоответствиеНоменклатурыЕГАИС.Период = ТекущаяДата();
					
					СоответствиеНоменклатурыЕГАИС.Записать(Истина);
					
				КонецЕсли;
				
				Если ФОИспользоватьСерийныеНомера Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СерийныйНомер)
						И НЕ ПустаяСтрока(СтрокаТаблицы.СерийныйНомер_ВходящиеДанные) Тогда
						
						СерийныйНомерСправочник = Справочники.СерийныеНомера.СоздатьЭлемент();
						СерийныйНомерСправочник.Владелец = ЭлементСправочника.Ссылка;
						СерийныйНомерСправочник.Наименование = СтрокаТаблицы.СерийныйНомер_ВходящиеДанные;
						
						СерийныйНомерСправочник.Записать();
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИндексТекущейстроки	= ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
			ТекстПрогресса		= СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейстроки, РазмерТаблицыДанных);
			
			ДлительныеОперации.СообщитьПрогресс(ИндексТекущейстроки * 100 / РазмерТаблицыДанных, ТекстПрогресса);
			
			Если ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
				
				ЗафиксироватьТранзакцию();
				ТранзакцияОткрыта = Ложь;
				КоличествоЗаписейТранзакции = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТранзакцияОткрыта 
			И КоличествоЗаписейТранзакции > 0 Тогда
			
			ЗафиксироватьТранзакцию();
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли