
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если Параметры.ОшибкиЗаполнения Тогда
		ПроверкаДанныхКлиентСервер.ВывестиСообщенияОбОшибкахЗаполнения("Объект", Параметры.ПереченьОшибок);
	КонецЕсли;
	
	ОтобразитьИзменениеФизЛица();
	ОтобразитьИзменениеКадровойИнформации();
	
	ОпределитьИмущественныйВычет();
	ОпределитьЛичныйВычет();
	ОпределитьВычетНаДетей();
	
	УстановитьЗаголовокКадровыхДанных(ЭтотОбъект);
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
	
	Если ЭтотОбъект.ТолькоПросмотр Тогда
		Элементы.ГруппаРабота.Видимость = Ложь;
		Элементы.ГруппаДокумент.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата") Тогда
		Элементы.ГруппаРабота.Видимость = Истина;
	Иначе
		Элементы.ГруппаРабота.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилисьСчетаСотрудники" Тогда
		Объект.СчетРасчетовСПерсоналом = Параметр.СчетРасчетовСПерсоналом;
		Объект.СчетРасчетовСПодотчетниками = Параметр.СчетРасчетовСПодотчетниками;
		Объект.СчетРасчетовПоПерерасходу = Параметр.СчетРасчетовПоПерерасходу;
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" И Параметр = Объект.Физлицо Тогда
		ОтобразитьИзменениеФизЛица();
	ИначеЕсли ИмяСобытия = "ИзменилсяДокументФизЛиц" Тогда
		ОтобразитьИзменениеФизЛица();
	ИначеЕсли  ИмяСобытия = "ИзменениеПоКадровомуУчету" Тогда
		ОтобразитьИзменениеКадровойИнформации();
		УстановитьЗаголовокКадровыхДанных(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Запись"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Физлицо) ИЛИ СоздатьФизЛицоАвтоматически Тогда
		ЗаписатьДанныеПоФизЛицу(Отказ);
		ТекущийОбъект.ФизЛицо = Объект.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОтобразитьИзменениеФизЛица();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_<ИмяСправочникаСотрудники>", Объект.Ссылка);
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец УНФ.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаписатьДанныеПоФизЛицу(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Физлицо) Тогда
		ФизическоеЛицо.Наименование = Объект.Наименование;
	КонецЕсли;
	
	ФизЛицо = РеквизитФормыВЗначение("ФизическоеЛицо", Тип("СправочникОбъект.ФизическиеЛица"));
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ФизЛицо);
	// Конец УНФ.КонтактнаяИнформация
	
	ФизЛицо.Записать();
	
	Если Не ЗначениеЗаполнено(КлючДокументФизЛица.Физлицо) Тогда
		КлючДокументФизЛица.Физлицо = ФизЛицо.Ссылка;
		КлючДокументФизЛица.Период = Дата('20000101');
		КлючДокументФизЛица.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		КлючДокументФизЛица.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	КонецЕсли;
	
	ЗаписьДокументаФизЛиц = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьДокументаФизЛиц,  КлючДокументФизЛица);
	ЗаписьДокументаФизЛиц.Записать();
	
	Объект.Физлицо = ФизЛицо.Ссылка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьАктуальныйДокументФизЛица(ФизЛицо, КлючЗаписиДокумента)
	ЗаполнитьЗначенияСвойств(КлючЗаписиДокумента, РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи());
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛиц.Период,
	|	ДокументыФизическихЛиц.Физлицо,
	|	ДокументыФизическихЛиц.ВидДокумента,
	|	ДокументыФизическихЛиц.Серия,
	|	ДокументыФизическихЛиц.Номер,
	|	ДокументыФизическихЛиц.ДатаВыдачи,
	|	ДокументыФизическихЛиц.СрокДействия,
	|	ДокументыФизическихЛиц.КемВыдан,
	|	ДокументыФизическихЛиц.КодПодразделения,
	|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛиц.Представление,
	|	ДокументыФизическихЛиц.УдалитьВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
	|			ДокументыФизическихЛиц.Физлицо КАК Физлицо
	|		ИЗ
	|			РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ГДЕ
	|			ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
	|			И ДокументыФизическихЛиц.Физлицо = &Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументыФизическихЛиц.Физлицо) КАК ДокументыСрез
	|		ПО ДокументыФизическихЛиц.Период = ДокументыСрез.Период
	|			И ДокументыФизическихЛиц.Физлицо = ДокументыСрез.Физлицо
	|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)";
	
	Запрос.УстановитьПараметр("Физлицо", ФизЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(КлючЗаписиДокумента, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАктуальнуюКадровуюИнформациюОСотруднике(Сотрудник, КлючТекущаяКадроваяИнформация)
	
	ЗаполнитьЗначенияСвойств(КлючТекущаяКадроваяИнформация, РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьМенеджерЗаписи());
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудников.Организация,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ТекущиеКадровыеДанныеСотрудников.СтруктурнаяЕдиница,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяТарифнаяСтавка,
	|	ТекущиеКадровыеДанныеСотрудников.ВалютаТарифнойСтавки
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(КлючТекущаяКадроваяИнформация, Выборка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьСловоПодЧисло(Число, СловоДляОдин, СловоДляДва, СловоДляПять)
	
	Если Число > 4 И Число < 21 Тогда
		
		Возврат СловоДляПять;
		
	ИначеЕсли (Число % 10) = 1 Тогда
		
		Возврат СловоДляОдин;
		
	ИначеЕсли (Число % 10) <= 5 Тогда
		
		Возврат СловоДляДва;
		
	Иначе
		
		Возврат СловоДляПять;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтобразитьИзменениеФизЛица()
	
	Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
		ЗначениеВРеквизитФормы(Объект.Физлицо.ПолучитьОбъект(), "ФизическоеЛицо");
		Элементы.СоздатьФизЛицоАвтоматически.Видимость = Ложь;
		Элементы.Физлицо.Доступность = Истина;
		ПолучитьАктуальныйДокументФизЛица(Объект.Физлицо, КлючДокументФизЛица);
	Иначе
		ЗначениеВРеквизитФормы(Справочники.ФизическиеЛица.СоздатьЭлемент(), "ФизическоеЛицо");
		ЗаполнитьЗначенияСвойств(КлючДокументФизЛица, РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи());
		Элементы.СоздатьФизЛицоАвтоматически.Видимость = Истина;
		СоздатьФизЛицоАвтоматически = Истина;
		Элементы.Физлицо.Доступность = Ложь;
	КонецЕсли;
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект, ФизическоеЛицо);
	// Конец УНФ.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИзменениеКадровойИнформации()
	ПолучитьАктуальнуюКадровуюИнформациюОСотруднике(Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников);
	
	Если Не ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема)
		ИЛИ (ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема) И ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения)) Тогда
		// Есть возможность принять сотрудника
		Элементы.ОформитьПриемНаРаботу.Видимость = Истина;
		Элементы.ОформитьУвольнение.Видимость = Ложь;
		Элементы.ИзменитьДолжность.Видимость = Ложь;
		Элементы.ИзменитьОклад.Видимость = Ложь;
	Иначе
		Элементы.ОформитьПриемНаРаботу.Видимость = Ложь;
		Элементы.ОформитьУвольнение.Видимость = Истина;
		Элементы.ИзменитьДолжность.Видимость = Истина;
		Элементы.ИзменитьОклад.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСотрудникаНаНовый()
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,НСТр("ru='Доступно после записи данного сотрудника'"));
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОпределитьИмущественныйВычет()
	
	Если Объект.Ссылка.Пустая() Тогда
		ИмущественныйВычет = "<<Заполнить имущественные вычеты сотрудника>>";
		Элементы.ИмущественныйВычет.Подсказка = ИмущественныйВычет;
		Возврат;
	КонецЕсли;
	ЗапросПоИмущественномуВычету = Новый Запрос;
	ЗапросПоИмущественномуВычету.Текст =
	"ВЫБРАТЬ
	|	НДФЛИмущественныйВычетСрезПоследних.Представление
	|ИЗ
	|	РегистрСведений.НДФЛИмущественныйВычет.СрезПоследних КАК НДФЛИмущественныйВычетСрезПоследних
	|ГДЕ
	|	НДФЛИмущественныйВычетСрезПоследних.Сотрудник = &Сотрудник";
	ЗапросПоИмущественномуВычету.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = ЗапросПоИмущественномуВычету.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.Представление) Тогда
		ИмущественныйВычет = Выборка.Представление;
	Иначе
		ИмущественныйВычет ="<<Заполнить имущественные вычеты сотрудника>>";
	КонецЕсли;
	Элементы.ИмущественныйВычет.Подсказка = ИмущественныйВычет;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияИмущественного(Результат,Параметры) Экспорт
	ОпределитьИмущественныйВычет();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры


&НаСервере
Процедура ОпределитьЛичныйВычет()
	
	Если Объект.Ссылка.Пустая() Тогда
		СтандартныйЛичныйВычет = "<<Заполнить стандартные личные вычеты сотрудника>>";
		Элементы.СтандартныйЛичныйВычет.Подсказка = СтандартныйЛичныйВычет;
		Возврат;
	КонецЕсли;
	ЗапросПоЛичномуВычету = Новый Запрос;
	ЗапросПоЛичномуВычету.Текст =
	"ВЫБРАТЬ
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Представление
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеЛичныеВычеты.СрезПоследних КАК НДФЛСтандартныеЛичныеВычетыСрезПоследних
	|ГДЕ
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Сотрудник = &Сотрудник";
	ЗапросПоЛичномуВычету.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = ЗапросПоЛичномуВычету.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.Представление) Тогда
		СтандартныйЛичныйВычет = Выборка.Представление;
	Иначе
		СтандартныйЛичныйВычет = "<<Заполнить стандартные личные вычеты сотрудника>>";
	КонецЕсли;
	Элементы.СтандартныйЛичныйВычет.Подсказка = СтандартныйЛичныйВычет;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияЛичного(Результат,Параметры) Экспорт
	ОпределитьЛичныйВычет();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОпределитьВычетНаДетей()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВычетыПоНДФЛНаДетей ="<<Доступно после записи>>";
		Элементы.ВычетыПоНДФЛНаДетей.Подсказка = ВычетыПоНДФЛНаДетей;
		Возврат;
	КонецЕсли;
	ЗапросПоВычетуНаДетей = Новый Запрос;
	ЗапросПоВычетуНаДетей.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник) КАК КоличествоДетей,
	|	СУММА(РазмерВычетов.Размер) КАК СуммаВычета
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей.СрезПоследних КАК НДФЛСтандартныеВычетыНаДетейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов.СрезПоследних КАК РазмерВычетов
	|		ПО (РазмерВычетов.КодВычета = НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета)
	|ГДЕ
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник = &Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник";
	ЗапросПоВычетуНаДетей.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = ЗапросПоВычетуНаДетей.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоДетей > 0 Тогда
		ВычетыПоНДФЛНаДетей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2, вычетов на сумму %3 руб.'"),
			Выборка.КоличествоДетей,
			ПодобратьСловоПодЧисло(
				Выборка.КоличествоДетей,
				НСтр("ru='ребенок'"),
				НСтр("ru='ребенка'"),
				НСтр("ru='детей'")),
			Формат(Выборка.СуммаВычета,"ЧЦ=10; ЧДЦ=0; ЧРГ=' '; ЧН=0"));
	Иначе
		ВычетыПоНДФЛНаДетей ="<<Заполнить вычеты на детей>>";
	КонецЕсли;
	Элементы.ВычетыПоНДФЛНаДетей.Подсказка = ВычетыПоНДФЛНаДетей;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияВычетаНаДетей(Результат,Параметры) Экспорт
	ОпределитьВычетНаДетей();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКадровыхДанных(Форма)
	
	КлючТекущиеКадровыеДанныеСотрудников = Форма.КлючТекущиеКадровыеДанныеСотрудников;
	ДинамическиеПараметры = Новый Массив;
	Если Не ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='не трудоустроен'"));
	ИначеЕсли ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения) Тогда
		// Уволен
		ДинамическиеПараметры.Добавить(НСтр("ru='уволен. Дата увольнения'")+ " " + Формат(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, "ДФ=dd.MM.yyyy")+ НСтр("ru=' г.'"));
	Иначе
		// Принят
		ДинамическиеПараметры.Добавить(НСтр("ru='принят на работу'")+  " " + Формат(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема, "ДФ=dd.MM.yyyy")+ НСтр("ru=' г.'"));
		ДинамическиеПараметры.Добавить(НСтр("ru='должность'")+ " " + КлючТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность);
		ДинамическиеПараметры.Добавить(НСтр("ru='оклад'")+ " " + КлючТекущиеКадровыеДанныеСотрудников.ТекущаяТарифнаяСтавка + " " + КлючТекущиеКадровыеДанныеСотрудников.ВалютаТарифнойСтавки);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаРабота", ДинамическиеПараметры);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокВычетовНДФЛ(Форма)
	
	КлючТекущиеКадровыеДанныеСотрудников = Форма.КлючТекущиеКадровыеДанныеСотрудников;
	ДинамическиеПараметры = Новый Массив;
	Если Форма.ВычетыПоНДФЛНаДетей <> "<<Доступно после записи>>" И Форма.ВычетыПоНДФЛНаДетей <> "<<Заполнить вычеты на детей>>" Тогда
		ДинамическиеПараметры.Добавить(Форма.ВычетыПоНДФЛНаДетей + "..");
	ИначеЕсли Форма.ИмущественныйВычет <> "<<Заполнить имущественные вычеты сотрудника>>" Тогда
		ДинамическиеПараметры.Добавить(Форма.ИмущественныйВычет + "..");
	ИначеЕсли Форма.СтандартныйЛичныйВычет <> "<<Заполнить стандартные личные вычеты сотрудника>>" Тогда
		ДинамическиеПараметры.Добавить(Форма.СтандартныйЛичныйВычет + "..");
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='отсутствуют.'"));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаВычетыНДФЛ", ДинамическиеПараметры);
КонецПроцедуры

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	ДанныеПоФизЛицуДоступныКРедактированию = ЗначениеЗаполнено(Объект.Физлицо) Или СоздатьФизЛицоАвтоматически;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИсторияИмущественныхВычетов(Команда)
	
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		ОткрытьФорму("РегистрСведений.НДФЛИмущественныйВычет.ФормаСписка",
			Новый Структура("Отбор", Новый Структура("Сотрудник", Объект.Ссылка)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЛичныхВычетов(Команда)
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеЛичныеВычеты.ФормаСписка",
			Новый Структура("Отбор", Новый Структура("Сотрудник", Объект.Ссылка)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычетыПоНДФЛНаДетейНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияВычетаНаДетей", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеВычетыНаДетей.Форма.ФормаЗаполненияСтандартныхВычетовДляДетей",
			Новый Структура("Сотрудник", Объект.Ссылка), ЭтотОбъект,,,,оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмущественныйВычетНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияИмущественного", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛИмущественныйВычет.Форма.ФормаЗаполненияИмущественныхВычетов",Новый Структура("Сотрудник", Объект.Ссылка),,,,,оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйЛичныйВычетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияЛичного", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеЛичныеВычеты.Форма.ФормаЗаполненияСтандартныхЛичныхВычетов",Новый Структура("Сотрудник", Объект.Ссылка),,,,,оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПриемНаРаботу(Команда)
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",Новый Структура("Сотрудник, ПринятьНаРаботу", Объект.Ссылка, Истина),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьУвольнение(Команда)
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",Новый Структура("Сотрудник, Организация, ОформитьУвольнение", Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников.Организация,  Истина),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДолжность(Команда)
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",Новый Структура("Сотрудник, Организация, ИзменитьДолжность", Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников.Организация, Истина),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОклад(Команда)
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",Новый Структура("Сотрудник, Организация, ИзменитьОклад", Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников.Организация, Истина),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоПриИзменении(Элемент)
	ОтобразитьИзменениеФизЛица();
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФизЛицоАвтоматическиПриИзменении(Элемент)
	Элементы.Физлицо.Доступность = Не СоздатьФизЛицоАвтоматически;
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	НаименованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	ФизическоеЛицо.Наименование = Объект.Наименование;
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти
