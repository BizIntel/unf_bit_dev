
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СчетУчетаРасчетовСПокупателем	= Параметры.СчетУчетаРасчетовСПокупателем;
	СчетУчетаАвансовПокупателя		= Параметры.СчетУчетаАвансовПокупателя;
	СчетУчетаРасчетовСПоставщиком	= Параметры.СчетУчетаРасчетовСПоставщиком;
	СчетУчетаАвансовПоставщику		= Параметры.СчетУчетаАвансовПоставщику;
	Ссылка							= Параметры.Ссылка;
	
	Если ОтказИзменитьСчетУчетаСПокупателем(Ссылка) Тогда
		Элементы.ЗапретРедактированияПокупатель.Видимость = Истина;
		Элементы.СчетУчетаРасчетовСПокупателем.Доступность = Ложь;
		Элементы.СчетУчетаАвансовПокупателя.Доступность = Ложь;
	КонецЕсли;
		
	Если ОтказИзменитьСчетУчетаСПоставщиком(Ссылка) Тогда
		Элементы.ЗапретРедактированияПоставщик.Видимость = Истина;
		Элементы.СчетУчетаРасчетовСПоставщиком.Доступность = Ложь;
		Элементы.СчетУчетаАвансовПоставщику.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ПоУмолчанию.Видимость = Элементы.СчетУчетаРасчетовСПокупателем.Доступность
		Или Элементы.СчетУчетаРасчетовСПоставщиком.Доступность;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетУчетаРасчетовСПокупателемПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСПокупателем) Тогда
		СчетУчетаРасчетовСПокупателем = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПокупателями");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаАвансовПокупателяПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаАвансовПокупателя) Тогда
		СчетУчетаАвансовПокупателя = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамПолученным");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаРасчетовСПоставщикомПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСПоставщиком) Тогда
		СчетУчетаРасчетовСПоставщиком = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПоставщиками");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаАвансовПоставщикуПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаАвансовПоставщику) Тогда
		СчетУчетаАвансовПоставщику = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамВыданным");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоУмолчанию(Команда)
	
	Если Элементы.СчетУчетаРасчетовСПокупателем.Доступность Тогда
		СчетУчетаРасчетовСПокупателем = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПокупателями");
		СчетУчетаАвансовПокупателя = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамПолученным");
	КонецЕсли;
	
	Если Элементы.СчетУчетаРасчетовСПоставщиком.Доступность Тогда
		СчетУчетаРасчетовСПоставщиком = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыСПоставщиками");
		СчетУчетаАвансовПоставщику = ПредопределенноеЗначение("ПланСчетов.Управленческий.РасчетыПоАвансамВыданным");
	КонецЕсли;
	
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОтказИзменитьСчетУчетаСПокупателем(Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПокупателями.Период,
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.НомерСтроки,
	|	РасчетыСПокупателями.Активность,
	|	РасчетыСПокупателями.ВидДвижения,
	|	РасчетыСПокупателями.Организация,
	|	РасчетыСПокупателями.ТипРасчетов,
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Сумма,
	|	РасчетыСПокупателями.СуммаВал,
	|	РасчетыСПокупателями.СодержаниеПроводки
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Контрагент = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(Ссылка), Ссылка, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервере
Функция ОтказИзменитьСчетУчетаСПоставщиком(Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПоставщиками.Период,
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.НомерСтроки,
	|	РасчетыСПоставщиками.Активность,
	|	РасчетыСПоставщиками.ВидДвижения,
	|	РасчетыСПоставщиками.Организация,
	|	РасчетыСПоставщиками.ТипРасчетов,
	|	РасчетыСПоставщиками.Контрагент,
	|	РасчетыСПоставщиками.Договор,
	|	РасчетыСПоставщиками.Документ,
	|	РасчетыСПоставщиками.Заказ,
	|	РасчетыСПоставщиками.Сумма,
	|	РасчетыСПоставщиками.СуммаВал,
	|	РасчетыСПоставщиками.СодержаниеПроводки
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Контрагент = &Контрагент");
	
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(Ссылка), Ссылка, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииСчетовРасчетов()
	
	СтруктураПараметры = Новый Структура(
		"СчетУчетаРасчетовСПокупателем, СчетУчетаАвансовПокупателя, СчетУчетаРасчетовСПоставщиком, СчетУчетаАвансовПоставщику",
		СчетУчетаРасчетовСПокупателем, СчетУчетаАвансовПокупателя, СчетУчетаРасчетовСПоставщиком, СчетУчетаАвансовПоставщику
	);
	
	Оповестить("ИзменилисьСчетаРасчетов", СтруктураПараметры);
	
КонецПроцедуры

#КонецОбласти
