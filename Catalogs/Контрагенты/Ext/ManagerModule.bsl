#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// При положительном значении реквизита формы ПоддержкаGoogle.ЗагружатьКонтактыИзGoogle
// логика данного обработчика переопределяется вызовом "ОбменСGoogleВызовСервера.СписокАвтоПодбораКонтакта()"
// См. также описание "ОбменСGoogleКлиент.Подключаемый_АвтоПодбор"
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Группы Тогда
		
		Если Не Параметры.Отбор.Свойство("Недействителен") Тогда
			Параметры.Отбор.Вставить("Недействителен", Ложь);
		КонецЕсли;
		
	Иначе
		
		Для Каждого КлючИЗначение Из Параметры.Отбор Цикл
			НайденныйРеквизит = Метаданные.Справочники.Контрагенты.Реквизиты.Найти(КлючИЗначение.Ключ);
			Если НайденныйРеквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НайденныйРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Параметры.Отбор.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текст запроса для печати прайс-листа (ценовая группа)
//
Функция ПолучитьТекстЗапросаДляПечатиПрайсЛистаЦеноваяГруппа()
	
	Возврат 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ВыводитьКод = ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.Код
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.Артикул
	|	КОНЕЦ КАК АртикулКод,
	|	ВЫБОР
	|		КОГДА &ВыводитьПолноеНаменование = ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование
	|	КОНЕЦ КАК ПредставлениеНоменклатуры,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Актуальность
	|				И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование,
	|	Характеристика,
	|	АртикулКод
	|ИТОГИ ПО
	|	ЦеноваяГруппа";
	
КонецФункции // ПолучитьТекстЗапросаДляПечатиПрайсЛиста()

// Возвращает текст запроса для печати прайс-листа (иерархия номенклатуры)
//
Функция ПолучитьТекстЗапросаДляПечатиПрайсЛистаИерархияНоменклатуры()
	
	Возврат 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ВыводитьКод = ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|			ТОГДА СправочникНоменклатура.Код
	|		ИНАЧЕ СправочникНоменклатура.Артикул
	|	КОНЕЦ КАК АртикулКод,
	|	ВЫБОР
	|		КОГДА &ВыводитьПолноеНаменование = ЗНАЧЕНИЕ(Перечисление.ДаНет.Да)
	|			ТОГДА СправочникНоменклатура.НаименованиеПолное
	|		ИНАЧЕ СправочникНоменклатура.Наименование
	|	КОНЕЦ КАК ПредставлениеНоменклатуры,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Актуальность
	|					И ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникНоменклатура.Ссылка ИЕРАРХИЯ,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование,
	|	Характеристика,
	|	АртикулКод";
	
КонецФункции // ПолучитьТекстЗапросаДляПечатиПрайсЛиста()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("ГруппаДоступа");
	РедактируемыеРеквизиты.Добавить("ДатаСоздания");
	РедактируемыеРеквизиты.Добавить("Недействителен");
	РедактируемыеРеквизиты.Добавить("Покупатель");
	РедактируемыеРеквизиты.Добавить("Поставщик");
	РедактируемыеРеквизиты.Добавить("ПрочиеОтношения");
	РедактируемыеРеквизиты.Добавить("СтранаРегистрации");
	РедактируемыеРеквизиты.Добавить("Ответственный");
	РедактируемыеРеквизиты.Добавить("ИсточникПривлеченияПокупателя");
	РедактируемыеРеквизиты.Добавить("СчетУчетаРасчетовСПокупателем");
	РедактируемыеРеквизиты.Добавить("СчетУчетаАвансовПокупателя");
	РедактируемыеРеквизиты.Добавить("СчетУчетаРасчетовСПоставщиком");
	РедактируемыеРеквизиты.Добавить("СчетУчетаАвансовПоставщику");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Функция получает основной вид цен продажи из пользовательский настроек.
//
Функция ПолучитьОсновнойВидЦенПродажи() Экспорт
	
	ВидЦенПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойВидЦенПродажи");
	
	Возврат ?(ЗначениеЗаполнено(ВидЦенПродажи), ВидЦенПродажи, Справочники.ВидыЦен.Оптовая);
	
КонецФункции// ЗаполнитьВидЦен()

// Функция получает вид цен продажи по умолчанию для указанного контрагента.
//
// Принцип получения цены:
//	1. Контрагент -> Основной договор -> Вид цен;
//	2. Настройки пользователя -> Основной вид цен продажи;
//	3. Предопределенный вид цен: Оптовая цена;
//	
Функция ПолучитьВидЦенПоУмолчанию(Контрагент) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) 
		И ЗначениеЗаполнено(Контрагент.ДоговорПоУмолчанию)
		И ЗначениеЗаполнено(Контрагент.ДоговорПоУмолчанию.ВидЦен) Тогда
		
		Возврат Контрагент.ДоговорПоУмолчанию.ВидЦен;
		
	Иначе
		
		Возврат ПолучитьОсновнойВидЦенПродажи();
		
	КонецЕсли;
	
КонецФункции

// Функция получает организацию для указанного контрагента.
//
// Принцип получения организации:
//	1. Контрагент -> Основной договор -> Организация; (если вкл. синхронизация данных)
//	2. Настройки пользователя -> Основная организация;
//	3. Предопределенный элемент: Основная организация;
//
Функция ПолучитьОрганизациюПоУмолчанию(Контрагент)
	
	// ВНИМАНИЕ! Не путать с "УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию"
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных")
		И ЗначениеЗаполнено(Контрагент) 
		И ЗначениеЗаполнено(Контрагент.ДоговорПоУмолчанию)
		И ЗначениеЗаполнено(Контрагент.ДоговорПоУмолчанию.Организация) Тогда
		
		Возврат Контрагент.ДоговорПоУмолчанию.Организация;
		
	Иначе
		
		ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
		
		Возврат ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
		
	КонецЕсли;

	
КонецФункции //ПолучитьОрганизациюПоУмолчанию()

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

#КонецОбласти

#Область ПроверкаДублей

//Функция определяет наличие дублей у контрагента.
// ИНН - ИНН проверяемого контрагента, Тип - Строка(12)
// КПП - КПП проверяемого контрагента, Тип - Строка(9)
// Ссылка - Сам проверяемый контрагент, Тип - СправочникСсылка.Контрагенты
Функция ПроверитьДублиСправочникаКонтрагентыПоИННКПП(Знач ИНН, Знач КПП, ИсключаяСсылку = Неопределено, ПроверкаПриЗаписи = Ложь) Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	//Если записываем элемент, то сначала проверим наличие дублей
	//в регистре. Операция выполняется только при событии объекта ПередЗаписью
	//В интерактивной проверке дублей не применяется, 
	//т.к. на регистр устанавливаются исключительные блокировки.
	Если ПроверкаПриЗаписи Тогда
		Дубли = ЕстьЗаписиВРегистреДублей(ИНН, КПП, ИсключаяСсылку);
	КонецЕсли;
	
	//Если при записи элемента ничего не нашлось в регистре дублей, 
	//или при интерактивной проверке выполним поиск дублей по справочнику Контрагенты
	Если Дубли.Количество() = 0 Тогда
		
		Запрос.Текст = 	"ВЫБРАТЬ
		               	|	Контрагенты.Ссылка
		               	|ИЗ
		               	|	Справочник.Контрагенты КАК Контрагенты
		               	|ГДЕ
		               	|	НЕ Контрагенты.ЭтоГруппа
		               	|	И НЕ Контрагенты.Ссылка = &Ссылка
		               	|	И Контрагенты.ИНН = &ИНН
		               	|	И Контрагенты.КПП = &КПП";
		
		Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
		Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
		Запрос.УстановитьПараметр("Ссылка", ИсключаяСсылку);
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДублей = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока ВыборкаДублей.Следующий() Цикл
			Дубли.Добавить(ВыборкаДублей.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Дубли;
	
КонецФункции

// Процедура возвращает массив дублей по записям в регистре Наличие дублей контрагентов
//На вход получает ИНН, КПП и ссылку на контрагента
Функция ЕстьЗаписиВРегистреДублей(ИНН, КПП, ИсключаяСсылку = Неопределено) Экспорт
	
	Дубли = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ИсключаяСсылку);
	Запрос.УстановитьПараметр("ИНН", СокрЛП(ИНН));
	Запрос.УстановитьПараметр("КПП", СокрЛП(КПП));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаличиеДублейУКонтрагентов.Контрагент КАК Ссылка
	|ИЗ
	|	РегистрСведений.НаличиеДублейУКонтрагентов КАК НаличиеДублейУКонтрагентов
	|ГДЕ
	|	НЕ НаличиеДублейУКонтрагентов.Контрагент = &Ссылка
	|	И НаличиеДублейУКонтрагентов.КПП = &КПП
	|	И НаличиеДублейУКонтрагентов.ИНН = &ИНН";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДублей = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДублей.Следующий() Цикл
		Дубли.Добавить(ВыборкаДублей.Ссылка);
	КонецЦикла;
	
	Возврат Дубли;
	
КонецФункции

// Процедура делает движения в регистре дублей
// Ссылка - ссылка на эелемнт справочника Контрагенты
// ИНН - ИНН записываемого контрагента
// КПП - КПП записываемого контрагента
// НужноУдалить:
//				Истина - удалить запись по переданному контрагенту
//				Ложь   - сделать запись по переданному контрагенту
Процедура ВыполнитьДвиженияПоРегиструДублей(Ссылка, ИНН = "", КПП = "", НужноУдалить) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НаличиеДублейУКонтрагентов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Контрагент = Ссылка;
	МенеджерЗаписи.ИНН        = ИНН;
	МенеджерЗаписи.КПП        = КПП;
	
	МенеджерЗаписи.Прочитать();
	
	ЗаписьСуществует = МенеджерЗаписи.Выбран();
	
	Если НужноУдалить И ЗаписьСуществует Тогда
		МенеджерЗаписи.Удалить();
	ИначеЕсли Не НужноУдалить И НЕ ЗаписьСуществует Тогда
		
		МенеджерЗаписи.Контрагент = Ссылка;
		МенеджерЗаписи.ИНН        = ИНН;
		МенеджерЗаписи.КПП        = КПП;
		
		МенеджерЗаписи.Активность = Истина;
		МенеджерЗаписи.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ДобавитьКИ(ЭлементСправочника, ПредставлениеКИ, ВидКИ)
	
	XMLПредставление = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ПредставлениеКИ, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЭлементСправочника, XMLПредставление, ВидКИ, ВидКИ.Тип);
	
КонецПроцедуры

Процедура ПриОпределенииЗначенияПоУмолчанию(СправочникСсылка, ИмяРеквизита, ВходящиеДанные, СтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию)
	
	Если СтрокаСопоставлена 
		И НЕ ЗначениеЗаполнено(ВходящиеДанные) Тогда
		
		ЗначениеПоУмолчанию = СправочникСсылка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
КонецПроцедуры

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока10 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(10));
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповЧисло10_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло10_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Родитель", "Группа", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИНН_КПП", 				"ИНН/КПП или ИНН", 				ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Контрагент", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КонтрагентНаименование",	"Контрагент (наименование)",	ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Контрагент", 3, Истина, Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РасчетныйСчет",			"Контрагент (расчетный счет)",	ОписаниеТиповСтрока50, ОписаниеТиповКолонка, "Контрагент", 4, , Истина);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КодПоОКПО", "Код по ОКПО", ОписаниеТиповСтрока10, ОписаниеТиповСтрока10);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаКонтрагентов") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ГруппыДоступаКонтрагентов");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ГруппаДоступа", "Группа доступа контрагента", ОписаниеТиповСтрока200, ОписаниеТиповКолонка, , , Истина);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаРасчетовСПокупателем", 	"Счет учета (расчеты с покупателем)",	ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаАвансовПокупателя", 		"Счет учета (авансы покупателя)",		ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаРасчетовСПоставщиком", 	"Счет учета (расчеты с поставщиком)",	ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаАвансовПоставщику", 		"Счет учета (авансы поставщика)",		ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Комментарий", "Комментарий", ОписаниеТиповСтрока200, ОписаниеТиповСтрока200);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВестиРасчетыПоДоговорам",		"Вести расчеты по договорам",	ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВестиРасчетыПоДокументам",	"Вести расчеты по документам",	ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВестиРасчетыПоЗаказам",		"Вести расчеты по заказам",		ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВестиУчетОплатыПоСчетам",		"Вести расчеты по счетам",		ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресЮр", "Юр. адрес", ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресФакт", "Факт. адрес", ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Телефон", "Телефон", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "АдресЭП", "E-mail", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКонтрагентов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВидКонтрагента", "Вид контрагента", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Покупатель",		"Покупатель",		ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Поставщик",		"Поставщик",		ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ПрочиеОтношения",	"ПрочиеОтношения",	ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ФИО",	"ФИО", ОписаниеТиповСтрока100, ОписаниеТиповСтрока100);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.ПолФизическогоЛица");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Пол",	"Пол физ. лица", ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДатаРождения", "Дата рождения физ. лица", ОписаниеТиповСтрока25, ОписаниеТиповДата);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДокументУдостоверяющийЛичность",	"Документ физ. лица", ОписаниеТиповСтрока200, ОписаниеТиповСтрока200);
	
	// ДополнительныеРеквизиты
	ЗагрузкаДанныхИзВнешнегоИсточника.ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты);
	Если НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
		
		ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, "Дополнительные реквизиты", ОписаниеТиповСтрока150, ОписаниеТиповСтрока11, , , , , , Истина, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, НастройкиЗагрузкиДанных) Экспорт
	
	ОбновлятьДанные = НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		// Контрагент по ИНН, КПП, Наименованию, Расчетному счету
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКонтрагента(СтрокаТаблицыФормы.Контрагент, СтрокаТаблицыФормы.ИНН_КПП, СтрокаТаблицыФормы.КонтрагентНаименование, СтрокаТаблицыФормы.РасчетныйСчет);
		ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Контрагент);
		
		// Родитель по наименованию
		ЗначениеПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Контрагент, "Родитель", СтрокаТаблицыФормы.Родитель_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителя("Контрагенты", СтрокаТаблицыФормы.Родитель, СтрокаТаблицыФормы.Родитель_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// КодПоОКПО
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.КодПоОКПО, СтрокаТаблицыФормы.КодПоОКПО_ВходящиеДанные);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаКонтрагентов") Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьГруппуДоступа(СтрокаТаблицыФормы.ГруппаДоступа, СтрокаТаблицыФормы.ГруппаДоступа_ВходящиеДанные);
			
		КонецЕсли;
		
		// СчетУчетаРасчетовСПокупателем по коду, наименованию
		ЗначениеПоУмолчанию = ПланыСчетов.Управленческий.РасчетыСПокупателями;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Контрагент, "СчетУчетаРасчетовСПокупателем", СтрокаТаблицыФормы.СчетУчетаРасчетовСПокупателем_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаРасчетовСПокупателем(СтрокаТаблицыФормы.СчетУчетаРасчетовСПокупателем, СтрокаТаблицыФормы.СчетУчетаРасчетовСПокупателем_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// СчетУчетаАвансовПокупателя по коду, наименованию
		ЗначениеПоУмолчанию = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Контрагент, "СчетУчетаАвансовПокупателя", СтрокаТаблицыФормы.СчетУчетаАвансовПокупателя_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаАвансовПокупателя(СтрокаТаблицыФормы.СчетУчетаАвансовПокупателя, СтрокаТаблицыФормы.СчетУчетаАвансовПокупателя_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// СчетУчетаРасчетовСПокупателем по коду, наименованию
		ЗначениеПоУмолчанию = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Контрагент, "СчетУчетаРасчетовСПоставщиком", СтрокаТаблицыФормы.СчетУчетаРасчетовСПоставщиком_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаРасчетовСПоставщиком(СтрокаТаблицыФормы.СчетУчетаРасчетовСПоставщиком, СтрокаТаблицыФормы.СчетУчетаРасчетовСПоставщиком_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// СчетУчетаАвансовПоставщику по коду, наименованию
		ЗначениеПоУмолчанию = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Контрагент, "СчетУчетаАвансовПоставщику", СтрокаТаблицыФормы.СчетУчетаАвансовПоставщику_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаАвансовПоставщику(СтрокаТаблицыФормы.СчетУчетаАвансовПоставщику, СтрокаТаблицыФормы.СчетУчетаАвансовПоставщику_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Комментарий
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Комментарий, СтрокаТаблицыФормы.Комментарий_ВходящиеДанные);
		
		// ВестиРасчетыПоДоговорам
		СтрокаКСопоставлению = ?(ПустаяСтрока(СтрокаТаблицыФормы.ВестиРасчетыПоДоговорам_ВходящиеДанные), "ИСТИНА", СтрокаТаблицыФормы.ВестиРасчетыПоДоговорам_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ВестиРасчетыПоДоговорам, СтрокаКСопоставлению);
		
		// ВестиРасчетыПоДокументам
		СтрокаКСопоставлению = ?(ПустаяСтрока(СтрокаТаблицыФормы.ВестиРасчетыПоДокументам_ВходящиеДанные), "ИСТИНА", СтрокаТаблицыФормы.ВестиРасчетыПоДокументам_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ВестиРасчетыПоДокументам, СтрокаКСопоставлению);
		
		// ВестиРасчетыПоЗаказам
		СтрокаКСопоставлению = ?(ПустаяСтрока(СтрокаТаблицыФормы.ВестиРасчетыПоЗаказам_ВходящиеДанные), "ИСТИНА", СтрокаТаблицыФормы.ВестиРасчетыПоЗаказам_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ВестиРасчетыПоЗаказам, СтрокаКСопоставлению);
		
		// ВестиУчетОплатыПоСчетам
		СтрокаКСопоставлению = ?(ПустаяСтрока(СтрокаТаблицыФормы.ВестиУчетОплатыПоСчетам_ВходящиеДанные), "ИСТИНА", СтрокаТаблицыФормы.ВестиУчетОплатыПоСчетам_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ВестиУчетОплатыПоСчетам, СтрокаКСопоставлению);
		
		// КИ (Юр. адрес, факт. адрес, адрес ЭП, телефон)
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресЮр, СтрокаТаблицыФормы.АдресЮр_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресФакт, СтрокаТаблицыФормы.АдресФакт_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.АдресЭП, СтрокаТаблицыФормы.АдресЭП_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Телефон, СтрокаТаблицыФормы.Телефон_ВходящиеДанные);
		
		// ВидыКонтрагентов
		ЗначениеПоУмолчанию = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьВидыКонтрагентов(СтрокаТаблицыФормы.ВидКонтрагента, СтрокаТаблицыФормы.ВидКонтрагента_ВходящиеДанные, ЗначениеПоУмолчанию);
		
		// Покупатель, Поставщик, ПрочиеОтношения
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.Покупатель, СтрокаТаблицыФормы.Покупатель_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.Поставщик, СтрокаТаблицыФормы.Поставщик_ВходящиеДанные);
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ПрочиеОтношения, СтрокаТаблицыФормы.ПрочиеОтношения_ВходящиеДанные);
		
		Если НЕ СтрокаТаблицыФормы.Покупатель
			И НЕ СтрокаТаблицыФормы.Поставщик
			И НЕ СтрокаТаблицыФормы.ПрочиеОтношения Тогда
			
			СтрокаТаблицыФормы.Покупатель = Истина;
			СтрокаТаблицыФормы.Поставщик = Истина;
			СтрокаТаблицыФормы.ПрочиеОтношения = Истина;
			
		КонецЕсли;
		
		// ФИО
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.ФИО, СтрокаТаблицыФормы.ФИО_ВходящиеДанные);
		
		// Пол
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПолФизическогоЛица(СтрокаТаблицыФормы.Пол, СтрокаТаблицыФормы.Пол_ВходящиеДанные);
		
		// ДатаРождения
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.ДатаРождения, СтрокаТаблицыФормы.ДатаРождения_ВходящиеДанные);
		
		// ДокументУдостоверяющийЛичность
		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.ДокументУдостоверяющийЛичность, СтрокаТаблицыФормы.ДокументУдостоверяющийЛичность_ВходящиеДанные);
		
		// Доп. реквизиты
		Если НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДополнительныеРеквизиты(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
			
		КонецЕсли;
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	СтрокаТаблицыФормы._СтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Контрагент);
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = СтрокаТаблицыФормы._СтрокаСопоставлена
											ИЛИ (НЕ СтрокаТаблицыФормы._СтрокаСопоставлена И НЕ ПустаяСтрока(СтрокаТаблицыФормы.КонтрагентНаименование));
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	НастройкиОбновленияСвойств	= СтруктураДанных.НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств;
	ОбновлятьСуществующие		= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьЕслиНеСопоставлено = СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ТаблицаСопоставленияДанных	= СтруктураДанных.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	КоличествоЗаписейТранзакции	= 0;
	ТранзакцияОткрыта			= Ложь;
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта 
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			СогласованноеСостояниеСтроки = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьЕслиНеСопоставлено);
			
			Если ЗагрузкаВПриложениеВозможна И СогласованноеСостояниеСтроки Тогда
				
				КоличествоЗаписейТранзакции = КоличествоЗаписейТранзакции + 1;
				
				Если СтрокаТаблицы._СтрокаСопоставлена Тогда
					
					ЭлементСправочника = СтрокаТаблицы.Контрагент.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, НастройкиОбновленияСвойств.ИменаПолейОбновляемые, НастройкиОбновленияСвойств.ИменаПолейНеподлежащихОбновлению);
					
				Иначе
					
					ЭлементСправочника = Справочники.Контрагенты.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, , ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СтандартныеИменаПолейНеподлежащихОбновлению(СтруктураДанных.НастройкиЗагрузкиДанных));
					
					ЭлементСправочника.Родитель = СтрокаТаблицы.Родитель;
					ЭлементСправочника.СтранаРегистрации = Справочники.СтраныМира.Россия;
					
				КонецЕсли;
				
				ЭлементСправочника.Наименование = СтрокаТаблицы.КонтрагентНаименование;
				ЭлементСправочника.НаименованиеПолное = СтрокаТаблицы.КонтрагентНаименование;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.ИНН_КПП) Тогда
					
					Разделители = Новый Массив;
					Разделители.Добавить("/");
					Разделители.Добавить("\");
					Разделители.Добавить("-");
					Разделители.Добавить("|");
					
					ИНН = "";
					КПП = "";
					
					Для каждого ЗначениеРазделителя Из Разделители Цикл
						
						ПозицияРазделителя = Найти(СтрокаТаблицы.ИНН_КПП, ЗначениеРазделителя);
						Если ПозицияРазделителя = 0 Тогда 
							
							Продолжить;
							
						КонецЕсли;
						
						ИНН = Лев(СтрокаТаблицы.ИНН_КПП, ПозицияРазделителя - 1);
						КПП = Сред(СтрокаТаблицы.ИНН_КПП, ПозицияРазделителя + 1);
						
					КонецЦикла;
					
					Если ПустаяСтрока(ИНН) И ПустаяСтрока(КПП) Тогда
						
						ИНН = СтрокаТаблицы.ИНН_КПП;
						
					КонецЕсли;
					
					ЭлементСправочника.ИНН = ИНН;
					ЭлементСправочника.КПП = КПП;
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЮр) Тогда
					
					ДобавитьКИ(ЭлементСправочника, СтрокаТаблицы.АдресЮр, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресФакт) Тогда
					
					ДобавитьКИ(ЭлементСправочника, СтрокаТаблицы.АдресФакт, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Телефон) Тогда
					
					ДобавитьКИ(ЭлементСправочника, СтрокаТаблицы.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.АдресЭП) Тогда
					
					ДобавитьКИ(ЭлементСправочника, СтрокаТаблицы.АдресЭП, Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
					
				КонецЕсли;
				
				Если СтруктураДанных.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточника.ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, СтрокаТаблицы._СтрокаСопоставлена, СтрокаТаблицы, СтруктураДанных.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
					
				КонецЕсли;
				
				ЭлементСправочника.Записать();
				
			КонецЕсли;
			
			ИндексТекущейстроки	= ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
			ТекстПрогресса		= СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейстроки, РазмерТаблицыДанных);
			
			ДлительныеОперации.СообщитьПрогресс(ИндексТекущейстроки * 100 / РазмерТаблицыДанных, ТекстПрогресса);
			
			Если ТранзакцияОткрыта
				И КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
				
				ЗафиксироватьТранзакцию();
				ТранзакцияОткрыта = Ложь;
				КоличествоЗаписейТранзакции = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТранзакцияОткрыта 
			И КоличествоЗаписейТранзакции > 0 Тогда
			
			ЗафиксироватьТранзакцию();
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсПечати

Процедура ЗаполнитьПараметрыОбласти(ИмяОбласти, ЗначенияПараметров, СтруктураПечати, ВыводитьЛоготип = Ложь)
	
	Перем ОбластьНоменклатура, ОбластьХарактеристика, ОбластьЦена;
	
	СтруктураПечати.СтруктураОбластей.Свойство("Область" + ИмяОбласти + "Номенклатура",		ОбластьНоменклатура);
	СтруктураПечати.СтруктураОбластей.Свойство("Область" + ИмяОбласти + "Характеристика",	ОбластьХарактеристика);
	СтруктураПечати.СтруктураОбластей.Свойство("Область" + ИмяОбласти + "Цена",				ОбластьЦена);
	
	ОбластьНоменклатура.Параметры.Заполнить(ЗначенияПараметров);
	
	Если ВыводитьЛоготип Тогда
		
		ОбластьНоменклатура.Рисунки.Логотип.Картинка = ЗначенияПараметров.Картинка;
		
	КонецЕсли;
	
	СтруктураПечати.ТабличныйДокумент.Вывести(ОбластьНоменклатура);
	
	Если СтруктураПечати.ИспользоватьХарактеристики Тогда
		
		ОбластьХарактеристика.Параметры.Заполнить(ЗначенияПараметров);
		СтруктураПечати.ТабличныйДокумент.Присоединить(ОбластьХарактеристика);
		
	КонецЕсли;
	
	ОбластьЦена.Параметры.Заполнить(ЗначенияПараметров);
	СтруктураПечати.ТабличныйДокумент.Присоединить(ОбластьЦена);
	
КонецПроцедуры

Процедура ЗаполнитьЗаголовокПрайсЛиста(ИмяОбласти, СтруктураПечати)
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("Заголовок", "Прайс-лист");
	
	ЗаполнитьПараметрыОбласти(ИмяОбласти, ЗначенияПараметров, СтруктураПечати);
	
КонецПроцедуры

Процедура ЗаполнитьОтправителяПрайсЛиста(СтруктураПечати)
	
	ОрганизацияПоУмолчанию = ПолучитьОрганизациюПоУмолчанию(СтруктураПечати.Контрагент);
	
	СведенияООтправителе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(ОрганизацияПоУмолчанию, ТекущаяДатаСеанса());
	
	ЗначенияПараметров = 
		Новый Структура("Отправитель, ОтправительАдрес, ОтправительТелефон, ОтправительФакс, ОтправительEmail",
			СведенияООтправителе.Представление,
			СведенияООтправителе.ФактическийАдрес,
			СведенияООтправителе.Телефоны,
			СведенияООтправителе.Факс,
			СведенияООтправителе.ЭлектроннаяПочта
			);
			
	ВыводитьЛоготип = Ложь;
	ИмяОбласти 		= "ОтправительБезЛоготипа";
	
	Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию.ФайлЛоготип) Тогда
		
		ДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ОрганизацияПоУмолчанию.ФайлЛоготип);
		Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
			
			ВыводитьЛоготип = Истина;
			ИмяОбласти		= "ОтправительСЛоготипом";
			ЗначенияПараметров.Вставить("Картинка", Новый Картинка(ДанныеКартинки));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПараметрыОбласти(ИмяОбласти, ЗначенияПараметров, СтруктураПечати, ВыводитьЛоготип);
	
КонецПроцедуры

Процедура ЗаполнитьСформированоПрайсЛиста(ИмяОбласти, СтруктураПечати)
	
	ЗначенияПараметров = 
		Новый Структура("Сформировано",
			"Сформировано " + Формат(ТекущаяДатаСеанса(),"ДФ=dd.MM.yyyy")
			);
	
	ЗаполнитьПараметрыОбласти(ИмяОбласти, ЗначенияПараметров, СтруктураПечати);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПрайсЛиста(ИмяОбласти, СтруктураПечати)
	
	ВидЦен = ПолучитьВидЦенПоУмолчанию(СтруктураПечати.Контрагент);
	
	ЗначенияПараметров = 
		Новый Структура("АртикулКод, ВидЦен, Цена",
			?(Константы.ПрайсЛистВыводитьКод.Получить() = Перечисления.ДаНет.Да, "Код", "Артикул"),
			ВидЦен,
			"Цена (" + ВидЦен.ВалютаЦены + ")"
			);
	
	ЗаполнитьПараметрыОбласти(ИмяОбласти, ЗначенияПараметров, СтруктураПечати);
	
КонецПроцедуры

Процедура ЗаполнитьДеталиПрайсЛистаЦеноваяГруппа(СтруктураПечати)
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаДляПечатиПрайсЛистаЦеноваяГруппа());
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидЦен", ПолучитьВидЦенПоУмолчанию(СтруктураПечати.Контрагент));
	Запрос.УстановитьПараметр("ВыводитьКод", Константы.ПрайсЛистВыводитьКод.Получить());
	Запрос.УстановитьПараметр("ВыводитьПолноеНаменование", Константы.ПрайсЛистВыводитьПолноеНаименование.Получить());
	
	ЗначенияПараметров = 
		Новый Структура("ЦеноваяГруппа, АртикулКод, ПредставлениеНоменклатуры, Номенклатура, Характеристика, ЕдиницаИзмерения, Цена");
	
	ВыборкаЦеновыеГруппы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаЦеновыеГруппы.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЗначенияПараметров, ВыборкаЦеновыеГруппы);
		ЗаполнитьПараметрыОбласти("ЦеноваяГруппа", ЗначенияПараметров, СтруктураПечати);
		
		ВыборкаДетали = ВыборкаЦеновыеГруппы.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ЗначенияПараметров, ВыборкаДетали);
			ЗаполнитьПараметрыОбласти("Детали", ЗначенияПараметров, СтруктураПечати);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДеталиПрайсЛистаИерархияНоменклатуры(СтруктураПечати, Выборка, ВывестиНоменклатуруБезРодителя = Ложь)
	
	ЗначенияПараметров = 
		Новый Структура("ЦеноваяГруппа, АртикулКод, ПредставлениеНоменклатуры, Номенклатура, Характеристика, ЕдиницаИзмерения, Цена");
	
	Если ВывестиНоменклатуруБезРодителя Тогда
		
		ЗначенияПараметров.ЦеноваяГруппа = НСтр("ru = '<...>'");
		ЗаполнитьПараметрыОбласти("ЦеноваяГруппа", ЗначенияПараметров, СтруктураПечати);
		ВывестиПустойРодитель = Ложь;
		СтруктураПечати.ТабличныйДокумент.НачатьГруппуСтрок();
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		// Сложные условия в операторе "Если" необходимы, для того, что бы номенклатура без родителя выводилась первой в прайс-листе
		Если Выборка.ЭтоГруппа 
			И НЕ ВывестиНоменклатуруБезРодителя Тогда
			
			ЗначенияПараметров.ЦеноваяГруппа = Выборка.Номенклатура;
			ЗаполнитьПараметрыОбласти("ЦеноваяГруппа", ЗначенияПараметров, СтруктураПечати);
			
			СтруктураПечати.ТабличныйДокумент.НачатьГруппуСтрок();
			ЗаполнитьДеталиПрайсЛистаИерархияНоменклатуры(СтруктураПечати, Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией));
			СтруктураПечати.ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
		ИначеЕсли НЕ Выборка.ЭтоГруппа 
			И (ВывестиНоменклатуруБезРодителя 
				ИЛИ ЗначениеЗаполнено(Выборка.Родитель)) Тогда
			
			ЗаполнитьЗначенияСвойств(ЗначенияПараметров, Выборка);
			ЗаполнитьПараметрыОбласти("Детали", ЗначенияПараметров, СтруктураПечати);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВывестиНоменклатуруБезРодителя Тогда
		
		СтруктураПечати.ТабличныйДокумент.ЗакончитьГруппуСтрок();
		Выборка.Сбросить();
		ЗаполнитьДеталиПрайсЛистаИерархияНоменклатуры(СтруктураПечати, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьДанныеПрайсЛистаИерархияНоменклатуры(СтруктураПечати)
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросаДляПечатиПрайсЛистаИерархияНоменклатуры());
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидЦен", ПолучитьВидЦенПоУмолчанию(СтруктураПечати.Контрагент));
	Запрос.УстановитьПараметр("ВыводитьКод", Константы.ПрайсЛистВыводитьКод.Получить());
	Запрос.УстановитьПараметр("ВыводитьПолноеНаменование", Константы.ПрайсЛистВыводитьПолноеНаименование.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ЗаполнитьДеталиПрайсЛистаИерархияНоменклатуры(СтруктураПечати, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру областей макета для формирования прайс-листа
//
Функция ЗаполнитьСтрутуруОбластейМакета(Макет)
	
	СтруктураОбластей = Новый Структура;
	
	СтруктураОбластей.Вставить("ОбластьОтступНоменклатура",			Макет.ПолучитьОбласть("Отступ|Номенклатура"));
	СтруктураОбластей.Вставить("ОбластьОтступХарактеристика",		Макет.ПолучитьОбласть("Отступ|Характеристика"));
	СтруктураОбластей.Вставить("ОбластьОтступЦена",					Макет.ПолучитьОбласть("Отступ|Цена"));
	
	СтруктураОбластей.Вставить("ОбластьЗаголовокНоменклатура",		Макет.ПолучитьОбласть("Заголовок|Номенклатура"));
	СтруктураОбластей.Вставить("ОбластьЗаголовокХарактеристика",	Макет.ПолучитьОбласть("Заголовок|Характеристика"));
	СтруктураОбластей.Вставить("ОбластьЗаголовокЦена",				Макет.ПолучитьОбласть("Заголовок|Цена"));
	
	СтруктураОбластей.Вставить("ОбластьОтправительБезЛоготипаНоменклатура",		Макет.ПолучитьОбласть("ОтправительБезЛоготипа|Номенклатура"));
	СтруктураОбластей.Вставить("ОбластьОтправительБезЛоготипаХарактеристика",	Макет.ПолучитьОбласть("ОтправительБезЛоготипа|Характеристика"));
	СтруктураОбластей.Вставить("ОбластьОтправительБезЛоготипаЦена",				Макет.ПолучитьОбласть("ОтправительБезЛоготипа|Цена"));
	
	СтруктураОбластей.Вставить("ОбластьОтправительСЛоготипомНоменклатура",		Макет.ПолучитьОбласть("ОтправительСЛоготипом|Номенклатура"));
	СтруктураОбластей.Вставить("ОбластьОтправительСЛоготипомХарактеристика",	Макет.ПолучитьОбласть("ОтправительСЛоготипом|Характеристика"));
	СтруктураОбластей.Вставить("ОбластьОтправительСЛоготипомЦена",				Макет.ПолучитьОбласть("ОтправительСЛоготипом|Цена"));
	
	СтруктураОбластей.Вставить("ОбластьСформированоНоменклатура",	Макет.ПолучитьОбласть("Сформировано|Номенклатура"));
	СтруктураОбластей.Вставить("ОбластьСформированоХарактеристика",	Макет.ПолучитьОбласть("Сформировано|Характеристика"));
	СтруктураОбластей.Вставить("ОбластьСформированоЦена",			Макет.ПолучитьОбласть("Сформировано|Цена"));
	
	СтруктураОбластей.Вставить("ОбластьШапкаТаблицыНоменклатура",	Макет.ПолучитьОбласть("ШапкаТаблицы|Номенклатура"));
	СтруктураОбластей.Вставить("ОбластьШапкаТаблицыХарактеристика",	Макет.ПолучитьОбласть("ШапкаТаблицы|Характеристика"));
	СтруктураОбластей.Вставить("ОбластьШапкаТаблицыЦена",			Макет.ПолучитьОбласть("ШапкаТаблицы|Цена"));
	
	СтруктураОбластей.Вставить("ОбластьЦеноваяГруппаНоменклатура",	Макет.ПолучитьОбласть("ЦеноваяГруппа|Номенклатура"));
	СтруктураОбластей.Вставить("ОбластьЦеноваяГруппаХарактеристика",Макет.ПолучитьОбласть("ЦеноваяГруппа|Характеристика"));
	СтруктураОбластей.Вставить("ОбластьЦеноваяГруппаЦена",			Макет.ПолучитьОбласть("ЦеноваяГруппа|Цена"));
	
	СтруктураОбластей.Вставить("ОбластьДеталиНоменклатура",			Макет.ПолучитьОбласть("Детали|Номенклатура"));
	СтруктураОбластей.Вставить("ОбластьДеталиХарактеристика",		Макет.ПолучитьОбласть("Детали|Характеристика"));
	СтруктураОбластей.Вставить("ОбластьДеталиЦена",					Макет.ПолучитьОбласть("Детали|Цена"));
	
	Возврат СтруктураОбластей;
	
КонецФункции //ЗаполнитьСтрутуруОбластейМакета()

// Процедура формирования прайс-листа
//
Функция СформироватьПрайсЛист(МассивОбъектов, ОбъектыПечати)
	
	ИспользоватьИерархиюНоменклатуры = Константы.ПрайсЛистИспользоватьИерархиюНоменклатуры.Получить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПрайсЛист";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПрайсЛист";
	
	СтруктураОбластей = ЗаполнитьСтрутуруОбластейМакета(УправлениеПечатью.МакетПечатнойФормы("Справочник.Контрагенты.ПФ_MXL_ПрайсЛист"));
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	
	СтруктураПечати =
		Новый Структура("ТабличныйДокумент, СтруктураОбластей, Контрагент, ИспользоватьХарактеристики",
			ТабличныйДокумент,
			СтруктураОбластей,
			МассивОбъектов,
			ИспользоватьХарактеристики);
			
	ИмяСекцииОтправителя = ?(ЗначениеЗаполнено(ПолучитьОрганизациюПоУмолчанию(СтруктураПечати.Контрагент).ФайлЛоготип), "ОтправительСЛоготипом", "ОтправительБезЛоготипа");
			
	//Заполним прайс-лист по секционно
	ЗаполнитьЗаголовокПрайсЛиста("Заголовок", СтруктураПечати);
	ЗаполнитьОтправителяПрайсЛиста(СтруктураПечати); // секция определяется динамически
	ЗаполнитьСформированоПрайсЛиста("Сформировано", СтруктураПечати);
	ЗаполнитьШапкуПрайсЛиста("ШапкаТаблицы", СтруктураПечати);
	
	Если ИспользоватьИерархиюНоменклатуры Тогда
		
		ВыбратьДанныеПрайсЛистаИерархияНоменклатуры(СтруктураПечати); // Вывод областей "Группа номенклатуры" и "Детали"
		
	Иначе
		
		ЗаполнитьДеталиПрайсЛистаЦеноваяГруппа(СтруктураПечати); // Вывод областей "ЦеноваяГруппа" и "Детали"
		
	КонецЕсли;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, МассивОбъектов.Ссылка);
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПрайсЛист()

// Функция вызывает процедуру печати прайс-листа для контрагента
// 
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати)
	
	Возврат СформироватьПрайсЛист(МассивОбъектов[0], ОбъектыПечати);
	
КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//	ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//	МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//	ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//	КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//	ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПрайсЛист") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПрайсЛист", "Прайс-лист", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	// Заполним получателей прайс-листа
	Получатели = Новый СписокЗначений;
	Получатели.Добавить(МассивОбъектов[0]);
	
	МассивПолучателей = Новый Массив;
	МассивПолучателей.Добавить(МассивОбъектов[0]);
	
	ПараметрыВывода.ПараметрыОтправки.Получатель = Получатели;
	ПараметрыВывода.ПараметрыОтправки.Тема = "Прайс-лист """ + ПолучитьОрганизациюПоУмолчанию(МассивОбъектов[0]).Наименование + """ от " + ТекущаяДатаСеанса() + ". Сформировал " + ПользователиКлиентСервер.АвторизованныйПользователь() + ".";
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивПолучателей, КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать()

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КонтактнаяИнформация";
	КомандаПечати.Представление = НСтр("ru = 'Контактная информация'");
	КомандаПечати.Порядок = 1;
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьКонтактнойИнформации";
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли