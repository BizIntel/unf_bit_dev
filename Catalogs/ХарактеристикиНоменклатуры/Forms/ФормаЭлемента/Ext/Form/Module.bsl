
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// 1. Проверка.
	Если ЗначениеЗаполнено(Объект.Владелец)
		И ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура")
		И НЕ Объект.Владелец.ИспользоватьХарактеристики Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Для номенклатуры не ведется учет по характеристикам!
							|Установите флаг ""Использовать характеристики"" в карточке номенклатуры'");
		Сообщение.Сообщить();
		Отказ = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Владелец)
		И ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры")
		И НЕ Объект.Владелец.ИспользоватьХарактеристики Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Для категории не ведется учет по характеристикам!
							|Установите флаг ""Использовать характеристики"" в карточке категории'");
		Сообщение.Сообщить();
		Отказ = Истина;
		
	// 2. Открытие.
	ИначеЕсли ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если ТипЗнч(Параметры.Ключ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
			КатегорияНоменклатуры = Параметры.Ключ.Владелец.КатегорияНоменклатуры;
			Номенклатура = Параметры.Ключ.Владелец;
			
		ИначеЕсли ТипЗнч(Параметры.Ключ.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			
			КатегорияНоменклатуры = Параметры.Ключ.Владелец;
			Номенклатура = Неопределено;
			
		КонецЕсли;
		
	// 3. Копирование объекта.
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования")
		И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Если ТипЗнч(Параметры.ЗначениеКопирования.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Номенклатура = Параметры.ЗначениеКопирования.Владелец;
			КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры;
			
		ИначеЕсли ТипЗнч(Параметры.ЗначениеКопирования.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
			
			КатегорияНоменклатуры = Параметры.ЗначениеКопирования.Владелец;
			Номенклатура = Неопределено;
			
		КонецЕсли;
		
	// 4. Заполнение.
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Владелец") Тогда
			
			Если ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				
				Номенклатура = Параметры.ЗначенияЗаполнения.Владелец;
				КатегорияНоменклатуры = Номенклатура.КатегорияНоменклатуры;
				
			ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
				
				КатегорияНоменклатуры = Параметры.ЗначенияЗаполнения.Владелец;
				Номенклатура = Неопределено;
				
			ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СписокЗначений") Тогда
				
				Для каждого ЭлСписка Из Параметры.ЗначенияЗаполнения.Владелец Цикл
					
					Если ТипЗнч(ЭлСписка.Значение) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
						
						Объект.Владелец = ЭлСписка.Значение;
						КатегорияНоменклатуры = ЭлСписка.Значение;
						
					Иначе
						
						Номенклатура = ЭлСписка.Значение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Элемент создается из формы выбора; заполним значения дополнительных реквизитов значениями отбора.
		Если Параметры.ЗначенияЗаполнения.Свойство("ЗначенияДополнительныхРеквизитов") Тогда
			
			Для каждого Эл Из Параметры.ЗначенияЗаполнения.ЗначенияДополнительныхРеквизитов Цикл
				
				НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
				НоваяСтрока.Свойство = Эл.Ключ;
				НоваяСтрока.Значение = Эл.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		КатегорияНоменклатуры = Неопределено;
		Номенклатура = Неопределено;
		
	КонецЕсли;
	
	ФормироватьНаименованиеДляПечатиАвтоматически = УстановитьФлагФормироватьНаименованиеДляПечатиАвтоматически(
		Объект.Наименование,
		Объект.НаименованиеДляПечати
	);
	
	Если Не Отказ Тогда
		ЗаполнитьСписокВыбораВладельца();
	КонецЕсли;
	
	ВидимостьКопированияЦен = НЕ ЗначениеЗаполнено(Объект.Ссылка) И (ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПрименитьЦеныНоменклатуры", "Видимость", ВидимостьКопированияЦен);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиПереопределяемый.ТаблицаСвойствПриСозданииНаСервере(ЭтотОбъект);
	
	// Шаблоны наименований
	ШаблоныНаименований.ИнициализироватьНастройкиФормированияНаименований(ЭтотОбъект, ШаблоныНаименованийНастройки);
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.Наименование) И Объект.ДополнительныеРеквизиты.Количество() <> 0 Тогда
		// Создается новая номенклатура с передачей значений дополнительных реквизитов.
		СформироватьНаименования();
	КонецЕсли;
	// Конец Шаблоны наименований
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	//+ ГИСМ
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидМаркировкиВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ВидМаркировки");
		Если  ВидМаркировкиВладельца =  Перечисления.ВидыМаркировки.МаркируемаяПродукция
			ИЛИ ВидМаркировкиВладельца = Перечисления.ВидыМаркировки.КонтрольныйИдентификационныйЗнак Тогда
			
			Элементы.КиЗГИСМGTIN.Видимость = Истина;
		Иначе
			Элементы.КиЗГИСМGTIN.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//-
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Шаблоны наименований
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.Наименование) И Объект.ДополнительныеРеквизиты.Количество() <> 0 Тогда
		// Создается новая номенклатура с передачей значений дополнительных реквизитов.
		ОбновитьНаименования();
	КонецЕсли;
	// Конец Шаблоны наименований
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Объект);
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиПереопределяемый.ТаблицаСвойствОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиПереопределяемый.ТаблицаСвойствПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПрименитьЦеныНоменклатуры Тогда
		
		ДеталиЗаписи = Новый Структура; 
		ДеталиЗаписи.Вставить("Период", ТекущаяДата());
		ДеталиЗаписи.Вставить("Номенклатура", Объект.Владелец);
		ДеталиЗаписи.Вставить("Характеристика", Объект.Ссылка);
		ДеталиЗаписи.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		
		УправлениеНебольшойФирмойСервер.КопироватьЦеныНоменклатурыВНовуюХарактеристику(ДеталиЗаписи);
		
	КонецЕсли;
	
	// Шаблоны наименований
	ШаблоныНаименований.ЗапомнитьШаблоныДляВидовНаименований(ЭтотОбъект, КатегорияНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПрименитьЦеныНоменклатуры Тогда
		
		Оповестить("ОбновитьСписокЦенНоменклатуры");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Шаблоны наименований
	Если ИмяСобытия = "Запись_ШаблоныНаименований" Тогда
		
		ШаблоныНаименованийКлиент.ОбработкаОповещенияШаблоныНаименованийПослеЗаписи(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		КатегорияНоменклатуры = ПолучитьНоменклатурнуюГруппуВладельца(Объект.Владелец);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПрименитьЦеныНоменклатуры", "Видимость", Истина);
		
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.КатегорииНоменклатуры") Тогда
		
		КатегорияНоменклатуры = Объект.Владелец;
		
	Иначе
		
		КатегорияНоменклатуры = Неопределено;
		
	КонецЕсли;
	
	// УНФ СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры // ВладелецПриИзменении()

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеДляПечатиАвтоматически Тогда
		
		Объект.НаименованиеДляПечати = Объект.Наименование;
		ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
			ЭтотОбъект,
			Объект.НаименованиеДляПечати,
			ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаДляПечати")
		);
		
	КонецЕсли;
	
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииСтандартногоРеквизита(ЭтотОбъект, "Наименование");
	
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаРабочее")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиПриИзменении(Элемент)
	
	Объект.НаименованиеДляПечати = СтрЗаменить(Объект.НаименованиеДляПечати, Символы.ПС, " ");
	ФормироватьНаименованиеДляПечатиАвтоматически = УстановитьФлагФормироватьНаименованиеДляПечатиАвтоматически(Объект.Наименование, Объект.НаименованиеДляПечати);
	
	ШаблоныНаименованийКлиент.НаименованиеПриИзменении(
		ЭтотОбъект,
		Объект.НаименованиеДляПечати,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.НоменклатураДляПечати")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Наименование <> Элементы.Наименование.ТекстРедактирования Тогда
		
		Объект.Наименование = Элементы.Наименование.ТекстРедактирования;
		НаименованиеПриИзменении(Элементы.Наименование);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеДляПечатиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.НаименованиеДляПечати <> Элементы.НаименованиеДляПечати.ТекстРедактирования Тогда
		
		Объект.НаименованиеДляПечати = Элементы.НаименованиеДляПечати.ТекстРедактирования;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НаименованиеДляПечатиНачалоВыбора", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Функция возвращает номенклутарную группу владельца.
//
Функция ПолучитьНоменклатурнуюГруппуВладельца(НоменклатураВладелец)
	
	Возврат НоменклатураВладелец.КатегорияНоменклатуры;
	
КонецФункции // ПолучитьНоменклатурнуюГруппуВладельца()

&НаСервере
// Процедура - заполняет список выбора для реквизита Владелец.
//
Процедура ЗаполнитьСписокВыбораВладельца()
	
	Элементы.Владелец.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(КатегорияНоменклатуры) Тогда
		Элементы.Владелец.СписокВыбора.Добавить(КатегорияНоменклатуры);
	КонецЕсли;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Владелец.СписокВыбора.Добавить(Номенклатура);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокВыбораВладельца()

// Присваивает соответствующее значение переменной ФормироватьНаименованиеДляПечатиАвтоматически.
//
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьФлагФормироватьНаименованиеДляПечатиАвтоматически(Наименование, НаименованиеДляПечати)
	
	Возврат (Наименование = НаименованиеДляПечати ИЛИ ПустаяСтрока(НаименованиеДляПечати));
	
КонецФункции // УстановитьФлагФормироватьНаименованиеДляПечатиАвтоматически()

#КонецОбласти

#Область ШаблоныНаименований

&НаКлиенте
Процедура Подключаемый_НаименованиеНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.Наименование
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеДляПечатиНачалоВыбора()
	
	Если ШаблоныНаименованийНастройки.ТребуетсяОбновитьНаименования Тогда
		СформироватьНаименования();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НаименованиеДляПечатиОбработкаВыбора", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныНаименованийНастройки.СформированныеНаименования,
		Элементы.НаименованиеДляПечати
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		КатегорияНоменклатуры,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаРабочее")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НаименованиеДляПечатиОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = ОбработатьРезультатВыбора(Результат.Значение, Результат.Представление);
	ШаблоныНаименованийКлиент.НаименованиеОбработкаВыбора(
		ЭтотОбъект,
		ВыбранноеЗначение,
		КатегорияНоменклатуры,
		Объект.НаименованиеДляПечати,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаДляПечати")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименования()
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(
		ЭтотОбъект,
		Объект.Наименование,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаРабочее")
	);
	
	ШаблоныНаименованийКлиент.ОбновитьНаименование(
		ЭтотОбъект,
		Объект.НаименованиеДляПечати,
		ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ХарактеристикаДляПечати")
	);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление)
	
	Возврат ШаблоныНаименований.ОбработатьРезультатВыбора(РезультатЗначение, РезультатПредставление);
	
КонецФункции

&НаСервере
Процедура СформироватьНаименования()
	
	ШаблоныНаименований.СформироватьНаименования(ЭтотОбъект, КатегорияНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// УНФ СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Объект);
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииТаблицыДопРеквизитов(ЭтотОбъект, Свойства_ТаблицаСвойстваИЗначения);
	ОбновитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствПередНачаломДобавления(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ТаблицаСвойстваИЗначенияПередУдалением(Элемент, Отказ)
	
	Модифицированность = Истина;
	
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствПередУдалением(Элемент, Отказ, Модифицированность);
	
	УправлениеСвойствамиКлиентПереопределяемыйУНФ.ТаблицаСвойствОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Объект);
	
	// УНФ. Шаблоны наименований
	ШаблоныНаименованийКлиент.ОбновитьСписокСвойствОбъектаПриИзмененииТаблицыДопРеквизитов(ЭтотОбъект, Свойства_ТаблицаСвойстваИЗначения);
	ОбновитьНаименования();
	
КонецПроцедуры
// Конец УНФ СтандартныеПодсистемы.Свойства

#КонецОбласти

