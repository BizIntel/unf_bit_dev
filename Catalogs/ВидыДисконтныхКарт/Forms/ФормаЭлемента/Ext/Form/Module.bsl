#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Возвращает текстовое представление интервала.
//
Функция ПолучитьПредставлениеИнтервала(ТабличнаяЧасть, ТекущаяСтрока)

	МаксНижняяГраница = Неопределено;
	СледующаяСтрока = Неопределено;
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если (МаксНижняяГраница = Неопределено Или МаксНижняяГраница >= СтрокаТЧ.НижняяГраница)
		   И ТекущаяСтрока.НижняяГраница <= СтрокаТЧ.НижняяГраница
		   И СтрокаТЧ <> ТекущаяСтрока Тогда
			СледующаяСтрока = СтрокаТЧ;
			МаксНижняяГраница = СтрокаТЧ.НижняяГраница;
		КонецЕсли;
	КонецЦикла;

	Если СледующаяСтрока = Неопределено Тогда
		ПредставлениеИнтервала = "От " + СокрЛП(ТекущаяСтрока.НижняяГраница) + " " + ВалютаУчета;
	ИначеЕсли ТекущаяСтрока.НижняяГраница = СледующаяСтрока.НижняяГраница Тогда
		ПредставлениеИнтервала = "ОШИБКА: такая нижняя граница уже есть!";
	Иначе
		ПредставлениеИнтервала = "От " + СокрЛП(ТекущаяСтрока.НижняяГраница) + " до " + СокрЛП(СледующаяСтрока.НижняяГраница) + " " + ВалютаУчета;
	КонецЕсли;

	Возврат ПредставлениеИнтервала;

КонецФункции // ПолучитьПредставлениеИнтервала()

// Процедура обновляет значение в колонке ПредставлениеИнтервала табличной части ПорогиНакопительныхСкидок.
//
&НаКлиенте
Процедура ОбновитьПредставлениеВсехСтрок()

	Для каждого ТекСтр Из Объект.ПорогиНакопительныхСкидок Цикл
		ТекСтр.ПредставлениеИнтервала = ПолучитьПредставлениеИнтервала(Объект.ПорогиНакопительныхСкидок, ТекСтр);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ВидСкидкиВДисконтныхКартах) Тогда
		Объект.ВидСкидкиВДисконтныхКартах = ПредопределенноеЗначение("Перечисление.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ТипКарты) Тогда
		Объект.ТипКарты = Перечисления.ТипыКарт.Штриховая;
	КонецЕсли;	
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	
	ЭтаФорма.ТолькоПросмотр = НЕ РазрешеноРедактированиеЦенДокументов;
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
	УправлениеВидимостьюНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеВидимостьюНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеВсехСтрок();
	
КонецПроцедуры

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПредставлениеВсехСтрок();
	Оповестить("ПослеЗаписи_ВидыДисконтныхКарт", Объект.Комментарий, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события ПриИзменении элемента ТипКарты.
//
&НаКлиенте
Процедура ТипКартыПриИзменении(Элемент)
	
	Элементы.ШаблонДисконтнойКарты.Видимость = (Объект.ТипКарты <> ПредопределенноеЗначение("Перечисление.ТипыКарт.Штриховая"));
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Комментарий.
//
&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
	
КонецПроцедуры // КомментарийПриИзменении()

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.ГруппаДополнительно, Объект.Комментарий);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВидСкидкиВДисконтныхКартах.
//
&НаКлиенте
Процедура ВидСкидкиВДисконтныхКартахПриИзменении(Элемент)
	
	УправлениеВидимостьюНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВидПериода.
//
&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	ВидПериодаПриИзмененииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ВидПериода (серверная часть).
//
&НаСервере
Процедура ВидПериодаПриИзмененииНаСервере()
	
	Элементы.Периодичность.Видимость = (Объект.ВидПериода <> ПредопределенноеЗначение("Перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод"));
	Если Не ЗначениеЗаполнено(Объект.Периодичность) И Элементы.Периодичность.Видимость Тогда
		Объект.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийТабличнойЧасти

// Процедура - обработчик события "ПриОкончанииРедактирования" строки в ТЧ "ПорогиНакопительныхСкидок".
//
&НаКлиенте
Процедура ПорогиНакопительныхСкидокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// После ввода строки отсортируем ТЧ по возрастанию нижней границы.
	Объект.ПорогиНакопительныхСкидок.Сортировать("НижняяГраница");
	ОбновитьПредставлениеВсехСтрок();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" для колонки "НижняяГраница" строки в ТЧ "ПорогиНакопительныхСкидок".
//
&НаКлиенте
Процедура ПорогиНакопительныхСкидокНижняяГраницаПриИзменении(Элемент)
	
	ТекСтрЭлемент = Элементы.ПорогиНакопительныхСкидок.ТекущиеДанные;
	ТекСтрЭлемент.ПредставлениеИнтервала = ПолучитьПредставлениеИнтервала(Объект.ПорогиНакопительныхСкидок, ТекСтрЭлемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" ТЧ "ПорогиНакопительныхСкидок".
//
&НаКлиенте
Процедура ПорогиНакопительныхСкидокПослеУдаления(Элемент)
	
	ОбновитьПредставлениеВсехСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура отвечает за видимость элементов формы в зависимости от вида и типа дисконтной карты.
&НаСервере
Процедура УправлениеВидимостьюНаСервере()

	Если Объект.ВидСкидкиВДисконтныхКартах = ПредопределенноеЗначение("Перечисление.ВидыСкидокВДисконтныхКартах.НакопительнаяСкидка") И
		Объект.ВидПериода.Пустая() Тогда
		Объект.ВидПериода = ПредопределенноеЗначение("Перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод");
	КонецЕсли;
	
	Элементы.Скидка.Видимость = (Объект.ВидСкидкиВДисконтныхКартах = ПредопределенноеЗначение("Перечисление.ВидыСкидокВДисконтныхКартах.ФиксированнаяСкидка"));
	ЭтоНакопительныеСкидки = (Объект.ВидСкидкиВДисконтныхКартах = ПредопределенноеЗначение("Перечисление.ВидыСкидокВДисконтныхКартах.НакопительнаяСкидка"));
	Элементы.ПорогиНакопительныхСкидок.Видимость = ЭтоНакопительныеСкидки;
	Элементы.ВидПериода.Видимость = ЭтоНакопительныеСкидки;
	Элементы.Периодичность.Видимость = (Объект.ВидПериода <> ПредопределенноеЗначение("Перечисление.ВидыПериодовДляНакопительныхСкидок.ВесьПериод")) И ЭтоНакопительныеСкидки;
	Элементы.ШаблонДисконтнойКарты.Видимость = (Объект.ТипКарты <> ПредопределенноеЗначение("Перечисление.ТипыКарт.Штриховая"));
	
КонецПроцедуры

#КонецОбласти