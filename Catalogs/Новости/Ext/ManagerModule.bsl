#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает ХТМЛ текста новостей для 1С.
// 
// Параметры:
//  лкНовости            - СправочникОбъект.Новость, Структура, Массив - данные новости или списка новостей;
//  ПараметрыОтображения - Структура или Неопределено, в которой передаются параметры для отображения новости. Список возможных параметров:
//    * ОтображатьЗаголовок - Булево.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьХТМЛТекстНовостей(лкНовости, ПараметрыОтображения = Неопределено) Экспорт

	Перем ОтображатьЗаголовок;

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(лкНовости) = ТипМассив Тогда
		МассивНовостей = лкНовости;
	Иначе
		МассивНовостей = Новый Массив;
		МассивНовостей.Добавить(лкНовости);
	КонецЕсли;

	Если ТипЗнч(ПараметрыОтображения) = ТипСтруктура Тогда
		ПараметрыОтображения.Свойство("ОтображатьЗаголовок", ОтображатьЗаголовок);
	Иначе
		ОтображатьЗаголовок = Ложь;
	КонецЕсли;

	ШаблонТекстХТМЛ = "
		|<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">
		|<html>
		|	<head>
		|		<style type=""text/css"">
		|			/* Основные параметры текста */
		|			body {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-size: 10pt; /* Размер основного шрифта в пунктах */
		|			}
		|
		|			/* Блок заголовка 1 уровня */
		|			h1 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 150%; /* Размер основного шрифта в процентах */
		|				margin-left: 0em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 2 уровня */
		|			h2 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 140%; /* Размер основного шрифта в процентах */
		|				margin-left: 0.5em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 3 уровня */
		|			h3 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 130%; /* Размер основного шрифта в процентах */
		|				margin-left: 2em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 4 уровня */
		|			h4 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 120%; /* Размер основного шрифта в процентах */
		|				margin-left: 2.5em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 5 уровня */
		|			h5 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 120%; /* Размер основного шрифта в процентах */
		|				margin-left: 3em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 6 уровня */
		|			h6 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 120%; /* Размер основного шрифта в процентах */
		|				margin-left: 3.5em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок Длинная цитата */
		|			blockquote {
		|				font-family: monospace; /* Семейство шрифтов */
		|				font-style: normal;
		|				color: #808080;
		|				background-color: #F0F0DA;
		|			}
		|
		|			/* Блок Короткая цитата */
		|			q {
		|				font-family: monospace; /* Семейство шрифтов */
		|				font-style: normal;
		|				color: #808080;
		|				background-color: #F0F0DA;
		|			}
		|
		|			/* Блок Источник цитаты */
		|			cite {
		|				font-family: monospace; /* Семейство шрифтов */
		|				font-style: normal;
		|				color: #808080;
		|				background-color: #F0F0DA;
		|			}
		|
		|			/* Блок Ввод с клавиатуры */
		|			kbd {
		|				font-family: monospace; /* Семейство шрифтов */
		|				background-color: #E6E6E6;
		|				border-width:thin;
		|				border-style: outset;
		|				border-color: #FFFBF0;
		|				padding-left: 2px;
		|				padding-right: 4px; 
		|			}
		|
		|			/* Блок Программный код */
		|			code {
		|				font-family: monospace; /* Семейство шрифтов */
		|				color: #3366FF;
		|				background-color: #FFFFD5;
		|			}
		|
		|			/* Блок Акцентированный текст */
		|			em {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bolder;
		|			}
		|
		|			/* Блок Акцентированный текст, приоритет */
		|			em.priority {
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: red;
		|			}
		|
		|			/* Блок Акцентированный текст, иконка приоритета */
		|			em.priority_icon {
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: red;
		|			}
		|
		|			/* Блок Параграф */
		|			p {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-style: normal;
		|				font-weight: normal;
		|				margin-bottom: 0.25em;
		|			}
		|
		|			/* Блок список маркированный */
		|			ul {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-style: normal;
		|				font-weight: normal;
		|				margin-bottom: 0.25em;
		|			}
		|
		|			/* Блок список нумерованный */
		|			ol {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-style: normal;
		|				font-weight: normal;
		|				margin-bottom: 0.25em;
		|			}
		|
		|			/* Блок элемент списка */
		|			li {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-style: normal;
		|				font-weight: normal;
		|			}
		|
		|			/* Цвет неактуальной новости */
		|			div.outofdate{
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: grey;
		|			}
		|
		|			/* Цвет актуальной новости */
		|			div.actual{
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: black;
		|			}
		|
		|			/* Блок информации о важности или актуальности */
		|			div#importanceData{
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 8pt; /* Размер основного шрифта в пунктах */
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок информации Весь текст новости */
		|			div#newsData{
		|				font-family: Arial; /* Семейство шрифтов */
		|			}
		|
		|			/* Блок информации Заголовок */
		|			div#newsHeader{
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок информации Только текст новости */
		|			div#newsText{
		|				font-family: Arial; /* Семейство шрифтов */
		|			}
		|
		|			/* Блок информации о категориях */
		|			div#newsCategories{
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: grey;
		|				font-style: italic;
		|				font-size: 8pt; /* Размер основного шрифта в пунктах */
		|				margin-top: 1em;
		|			}
		|
		|			/* Блок информации о простых категориях */
		|			div#newsCategoriesSimple{
		|			}
		|
		|			/* Блок информации о категориях интервалы версий */
		|			div#newsCategoriesVersions{
		|			}
		|
		|			/* Блок информации ссылка на полный текст новости */
		|			div#newsHyperlink{
		|				font-family: Arial; /* Семейство шрифтов */
		|				margin-top: 2em;
		|			}
		|
		|			/* Гиперссылка, не посещенная */
		|			a:link {
		|			}
		|
		|			/* Гиперссылка, посещенная */
		|			a:visited {
		|			}
		|
		|			/* Гиперссылка при наведении курсора мыши */
		|			a:hover {
		|				background: #B8D7EB;
		|			}
		|
		|			/* Класс для всех горизонтальных линий */
		|			hr {
		|				color: #C8C8C8;
		|			}
		|
		|			/* Класс для скрытия блоков текста */
		|			.hidden {
		|				display: none;
		|			}
		|
		|			/* Здесь можно вставить свои стили */
		|
		|		</style>
		|	</head>
		|	<body>
		|		%Новости%
		|	</body>
		|</html>";

	ШаблонНовостиХТМЛ = "
		|
		|		<div id=""newsEntry"" news_id=""%ИдентификаторНовости%"">
		|			<h1 id=""newsHeader"">
		|				%Заголовок%
		|			</h1>
		|			<div id=""importanceData"">
		|				<a id=""publishDate"">%ДатаПубликации%</a>
		|				&nbsp;
		|				<a id=""importanceCaption"">%ИнформацияОВажности%</a>
		|			</div>
		|			<div id=""newsData"" class=""%КлассАктуальности%"">
		|				<div id=""newsText"">
		|					%ТекстНовостиДля1С%
		|				</div>
		|				<div id=""newsHyperlink"">
		|					%СсылкаНаПолныйТекстНовости%
		|				</div>
		|			</div>
		|		</div>
		|
		|";

	ТекстВсехНовостейХТМЛ = "";

	С = 0;
	Для Каждого ТекущаяНовость Из МассивНовостей Цикл

		ТекстТекущейНовостиХТМЛ = ШаблонНовостиХТМЛ;

		ТекстТекущейНовостиХТМЛ = СтрЗаменить(
			ТекстТекущейНовостиХТМЛ,
			"%ИдентификаторНовости%",
			ТекущаяНовость.УИННовости);

		// Новость еще актуальна?
		Если (ТекущаяНовость.ДатаЗавершения = '00010101')
				ИЛИ (ТекущаяНовость.ДатаЗавершения > ТекущаяУниверсальнаяДата()) Тогда
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				"%КлассАктуальности%",
				"actual");
			// Информация о важности.
			// Проверять только основное свойство важности, не включая важности для объектов метаданных.
			// Важность зависит от реквизита ДатаСбросаВажности.
			Если (ТекущаяНовость.ДатаСбросаВажности <> '00010101')
					И (ТекущаяНовость.ДатаСбросаВажности <= ТекущаяУниверсальнаяДата()) Тогда
				ВажностьСброшена = Истина;
			Иначе
				ВажностьСброшена = Ложь;
			КонецЕсли;

			Если ТекущаяНовость.Важность = 0 Тогда // Обычная новость
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%ИнформацияОВажности%",
					"");
			ИначеЕсли ТекущаяНовость.Важность = 1 Тогда
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%ИнформацияОВажности%",
					?(ВажностьСброшена = Истина,
						"<em class=""priority"">Была очень важной до "
							+ Формат(МестноеВремя(ТекущаяНовость.ДатаСбросаВажности, ЧасовойПояс()), "ДФ='dd.MM.yyyy HH:mm'") + "</em>",
						"<em class=""priority_icon"">!!! </em>
							|<em class=""priority"">Очень важно</em>"));
			ИначеЕсли ТекущаяНовость.Важность = 2 Тогда
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%ИнформацияОВажности%",
					?(ВажностьСброшена = Истина,
						"<em class=""priority"">Была важной до "
							+ Формат(МестноеВремя(ТекущаяНовость.ДатаСбросаВажности, ЧасовойПояс()), "ДФ='dd.MM.yyyy HH:mm'") + "</em>",
						"<em class=""priority_icon"">! </em>
							|<em class=""priority"">Важно</em>"));
			КонецЕсли;
		Иначе
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				"%КлассАктуальности%",
				"outofdate");
			// Для неактуальной новости не выводить информацию о важности - она уже НЕважная в любом случае.
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				"%ИнформацияОВажности%",
				"<em>Новость неактуальна с " + Формат(МестноеВремя(ТекущаяНовость.ДатаЗавершения, ЧасовойПояс()), "ДФ='dd.MM.yyyy HH:mm'") + "</em>");
		КонецЕсли;

		ТекстТекущейНовостиХТМЛ = СтрЗаменить(
			ТекстТекущейНовостиХТМЛ,
			"%Заголовок%",
			?(ОтображатьЗаголовок = Истина, СокрЛП(ТекущаяНовость.Наименование), ""));

		ТекстТекущейНовостиХТМЛ = СтрЗаменить(
			ТекстТекущейНовостиХТМЛ,
			"%ДатаПубликации%",
			Формат(МестноеВремя(ТекущаяНовость.ДатаПубликации, ЧасовойПояс()), "ДФ='dd.MM.yyyy HH:mm'"));

		// ДатаПубликации хранится в часовом поясе GMT+0, надо привести к текущему часовому поясу.

		лкТекстНовости = ТекущаяНовость.ТекстНовости;
		лкТекстНовости = ОбработкаНовостейКлиентСервер.ЗаменитьСпециальныеСимволыВHTML(лкТекстНовости);

		ТекстТекущейНовостиХТМЛ = СтрЗаменить(
			ТекстТекущейНовостиХТМЛ,
			"%ТекстНовостиДля1С%",
			лкТекстНовости);

		Если ПустаяСтрока(ТекущаяНовость.СсылкаНаПолныйТекстНовости) Тогда
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(ТекстТекущейНовостиХТМЛ, "%СсылкаНаПолныйТекстНовости%", "");
		Иначе
			// Если ссылка является специальной ссылкой (начинается с "1C:" английскими буквами),
			//  то не выводить ее значение, а просто написать "здесь".
			Если Найти(ВРег(ТекущаяНовость.СсылкаНаПолныйТекстНовости), ВРег("1C:")) = 1 Тогда
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%СсылкаНаПолныйТекстНовости%",
					"Полный текст новости <a href=""" + СокрЛП(ТекущаяНовость.СсылкаНаПолныйТекстНовости) + """>здесь</a>");
			Иначе
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%СсылкаНаПолныйТекстНовости%",
					"Полный текст новости: <a href=""" + СокрЛП(ТекущаяНовость.СсылкаНаПолныйТекстНовости) + """>"
						+ СокрЛП(ТекущаяНовость.СсылкаНаПолныйТекстНовости) + "</a>");
			КонецЕсли;
		КонецЕсли;

		// Специальные теги:
		// Если в предопределенной новости Debug с id=8f9c7dca-3641-4ce1-88cb-5ea1ad021dfd
		//  есть тег <a id="ClientDebugInformation" />, то это специальная отладочная новость,
		//  в которой необходимо дополнительно указать:
		//  - настроенные административные отборы по этой ленте новостей;
		//  - настроенные пользовательские отборы по этой ленте новостей.
		ТегКлиентскойИнформации = "<a id=""ClientDebugInformation"" />";
		Если Найти(ТекстТекущейНовостиХТМЛ, ТегКлиентскойИнформации) > 0 Тогда
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				ТегКлиентскойИнформации,
				ПолучитьХТМЛПредставлениеКлиентскихНастроекВлияющихНаОтображениеНовостей(ТекущаяНовость, ПараметрыОтображения));
		КонецЕсли;

		// Если в новости есть такой тег "<div id=""IPPConfigUpdate"" />",
		//  значит эта новость содержит информацию об обновлении этой конфигурации
		//  и для пользователя с административными правами надо вывести вместо этого тега
		//  гиперссылку на запуск процедуры обновления конфигурации.
		#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			ТегСсылкиНаПроцедуруОбновления = "<div id=""IPPConfigUpdate"" />";
			Если Найти(ТекстТекущейНовостиХТМЛ, ТегСсылкиНаПроцедуруОбновления) > 0 Тогда
				Если ОбработкаНовостейПовтИсп.ЭтоАдминистратор() Тогда
					ТекстТекущейНовостиХТМЛ = СтрЗаменить(
						ТекстТекущейНовостиХТМЛ,
						ТегСсылкиНаПроцедуруОбновления,
						"Нажмите <a href=""1C:IPPConfigUpdate"" title=""Нажмите для обновления конфигурации"">здесь</a> для обновления конфигурации");
				КонецЕсли;
			КонецЕсли;
		#КонецЕсли

		// В новости с id=6588f3f9-d569-478f-a370-7cd75d833966 сообщается о том, что по ленте новостей
		//  давно не были получены новости из-за технических ошибок.
		// Новость должна создаваться самой конфигурацией, но возможны ситуации, что сервер сам предупреждает, что он будет отключен.
		// Если в тексте новости есть текст "<!-- Текст для администраторов -->", то необходимо
		//  заменить его на гиперссылку открытия элемента ленты новостей для исправления автозагрузки новостей на ручное обновление.
		Если СокрЛП(ВРег(ТекущаяНовость.УИННовости)) = ВРег("6588f3f9-d569-478f-a370-7cd75d833966") Тогда
			Если ОбработкаНовостейПовтИсп.ЭтоАдминистратор() Тогда
				Если Найти(ТекстТекущейНовостиХТМЛ, "<!-- Текст для администраторов -->") > 0 Тогда
					ТекстДляАдминистраторов = "
						|<br/>
						|<div id=""AdminBlock"">Возможные дальнейшие действия:<br>
						|	<ul>
						|		<li>Если у ленты новостей изменился адрес (URL), то нажмите <a href=""%СсылкаНаЛентуНовостей%"" title=""Нажмите для редактирования ленты новостей"">здесь</a> для открытия элемента справочника <b>Ленты новостей</b> и поправьте значение поля <b>Сайт</b> или <b>Имя файла</b> на закладке <b>Настройки загрузки новостей</b></li>
						|		<li>Если возникли временные трудности с работой сервера новостей, то можно отключить автообновление ленты новостей. Для этого нажмите <a href=""%СсылкаНаЛентуНовостей%"" title=""Нажмите для редактирования ленты новостей"">здесь</a> для открытия элемента справочника <b>Ленты новостей</b>, перейдите на закладку <b>Частота обновления</b> и выберите пункт <b>Обновлять только вручную</b>.</li>
						|		<li>Если лента новостей более недоступна, то можно просто установить ей пометку удаления в <a href=""%СсылкаНаСписокЛентНовостей%"" title=""Нажмите для открытия списка лент новостей"">форме списка</a>.</li>
						|		<li>Если лента новостей пустая по причине, что поставщик новостей ее долго не наполняет новостями, а технических трудностей с доступом к этой ленте нет, то просто игнорируйте это сообщение.</li>
						|	</ul>
						|</div>
						|";
					ТекстДляАдминистраторов = СтрЗаменить(
						ТекстДляАдминистраторов,
						"%СсылкаНаЛентуНовостей%",
						ПолучитьНавигационнуюСсылку(ТекущаяНовость.ЛентаНовостей));
					ТекстДляАдминистраторов = СтрЗаменить(
						ТекстДляАдминистраторов,
						"%СсылкаНаСписокЛентНовостей%",
						"e1cib/list/Справочник.ЛентыНовостей");
					ТекстТекущейНовостиХТМЛ = СтрЗаменить(
						ТекстТекущейНовостиХТМЛ,
						"<!-- Текст для администраторов -->",
						ТекстДляАдминистраторов);
				КонецЕсли;
			Иначе
				Если Найти(ТекстТекущейНовостиХТМЛ, "<!-- Текст для администраторов -->") > 0 Тогда
					ТекстТекущейНовостиХТМЛ = СтрЗаменить(
						ТекстТекущейНовостиХТМЛ,
						"<!-- Текст для администраторов -->",
						НСтр("ru='Обратитесь к администратору'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Показать / скрыть блоки текста, ограниченные специальными комментариями.
		НастройкиПоказаСкрытияБлоковТекста = ОбработкаНовостейВызовСервера.ПолучитьНастройкиПоказаСкрытияБлоковТекста();
		Для Каждого ТекущаяНастройка Из НастройкиПоказаСкрытияБлоковТекста Цикл
			Если ТекущаяНастройка.Скрыть = Истина Тогда
				БлокНайден = Истина;
				Пока БлокНайден = Истина Цикл
					БлокНайден = Ложь;
					ГдеНачалоБлока = СтрНайти(ТекстТекущейНовостиХТМЛ, ТекущаяНастройка.ТэгНачалаБлока);
					Если ГдеНачалоБлока > 0 Тогда
						ГдеКонецБлока = СтрНайти(ТекстТекущейНовостиХТМЛ, ТекущаяНастройка.ТэгКонцаБлока, , ГдеНачалоБлока);
						Если ГдеКонецБлока > 0 Тогда
							// Обнаружены начало и конец блока текста, который надо скрыть.
							БлокНайден = Истина;
							ТекстТекущейНовостиХТМЛ =
								Лев(ТекстТекущейНовостиХТМЛ, ГдеНачалоБлока - 1)
								+ Прав(ТекстТекущейНовостиХТМЛ, СтрДлина(ТекстТекущейНовостиХТМЛ) - ГдеКонецБлока - СтрДлина(ТекущаяНастройка.ТэгКонцаБлока) + 1)
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		// Текст новости может быть динамически изменен - возможно, будут подставлены какие-то тексты вместо идентификаторов,
		//  удалены блоки текста и т.п.
		ОбработкаНовостейВызовСервера.ДополнительноОбработатьТекстНовостиПередПоказом(ТекущаяНовость, ТекстТекущейНовостиХТМЛ);

		ТекстВсехНовостейХТМЛ = ТекстВсехНовостейХТМЛ + ТекстТекущейНовостиХТМЛ;

		// После каждой новости кроме последней вывести горизонтальную линию
		Если С < (МассивНовостей.Количество()-1) Тогда
			ТекстВсехНовостейХТМЛ = ТекстВсехНовостейХТМЛ + Символы.ПС + "<hr/>" + Символы.ПС;
		КонецЕсли;

		С = С + 1;
	КонецЦикла;

	ТекстХТМЛ = ШаблонТекстХТМЛ;
	ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%Новости%", ТекстВсехНовостейХТМЛ);

	// Текст всех новостей может быть динамически изменен - возможно, будут подставлены какие-то тексты вместо идентификаторов,
	//  добавлены / изменены стили, удалены блоки текста и т.п.
	ОбработкаНовостейВызовСервера.ДополнительноОбработатьТекстСпискаНовостейПередПоказом(ТекстХТМЛ);

	Возврат ТекстХТМЛ;

КонецФункции

// Функция возвращает ХТМЛ текст новости для внешних источников (RSS-агрегаторов).
// 
// Параметры:
//  лкНовости            - СправочникОбъект.Новость, Структура, Массив - данные новости или списка новостей;
//  ПараметрыОтображения - Структура или Неопределено, в которой передаются параметры для отображения новости.
//                         Список возможных параметров:
//                          * ОтображатьЗаголовок - Булево.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьХТМЛТекстНовостейДляВнешнихИсточников(лкНовости, ПараметрыОтображения = Неопределено) Экспорт

	Перем ОтображатьЗаголовок;

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(лкНовости) = ТипМассив Тогда
		МассивНовостей = лкНовости;
	Иначе
		МассивНовостей = Новый Массив;
		МассивНовостей.Добавить(лкНовости);
	КонецЕсли;

	Если ТипЗнч(ПараметрыОтображения) = ТипСтруктура Тогда
		ПараметрыОтображения.Свойство("ОтображатьЗаголовок", ОтображатьЗаголовок);
	Иначе
		ОтображатьЗаголовок = Ложь;
	КонецЕсли;

	// ДатаПубликации хранится в часовом поясе GMT+0, надо привести к текущему часовому поясу.

	ШаблонТекстХТМЛ = "
		|<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">
		|<html>
		|	<head>
		|		<style type=""text/css"">
		|			/* Основные параметры текста */
		|			body {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-size: 10pt; /* Размер основного шрифта в пунктах */
		|			}
		|		</style>
		|	</head>
		|	<body>
		|		%Новости%
		|	</body>
		|</html>";

	ТекстВсехНовостейХТМЛ = "";

	С = 0;
	Для Каждого ТекущаяНовость Из МассивНовостей Цикл

		// В новостном центре ДатаПубликации не хранится в объекте новости, а проставляется в регистре накопления
		//  при публикации в каждый канал, поэтому взять текущую дату.

		ТекстТекущейНовостиХТМЛ = ТекущаяНовость.ТекстНовостиДляВнешнихИсточников;
		ТекстТекущейНовостиХТМЛ = ОбработкаНовостейКлиентСервер.ЗаменитьСпециальныеСимволыВHTML(ТекстТекущейНовостиХТМЛ);

		// Специальные теги:
		// Вставить список настроенных фильтров.
		ТегКлиентскойИнформации = "<a id=""ClientDebugInformation"" />";
		Если Найти(ТекстТекущейНовостиХТМЛ, ТегКлиентскойИнформации) > 0 Тогда
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				ТегКлиентскойИнформации,
				ПолучитьХТМЛПредставлениеКлиентскихНастроекВлияющихНаОтображениеНовостей(ТекущаяНовость, ПараметрыОтображения));
		КонецЕсли;

		// После каждой новости кроме последней вывести горизонтальную линию.
		Если С < (МассивНовостей.Количество()-1) Тогда
			ТекстВсехНовостейХТМЛ = ТекстВсехНовостейХТМЛ + ТекстТекущейНовостиХТМЛ + Символы.ПС + "<hr/>" + Символы.ПС;
		Иначе
			ТекстВсехНовостейХТМЛ = ТекстВсехНовостейХТМЛ + ТекстТекущейНовостиХТМЛ;
		КонецЕсли;

		С = С + 1;
	КонецЦикла;

	ТекстХТМЛ = ШаблонТекстХТМЛ;
	ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%Новости%", ТекстВсехНовостейХТМЛ);

	Возврат ТекстХТМЛ;

КонецФункции

// Получить список новостей.
//
// Параметры:
//  ТаблицаНовостей       - ДанныеФормыКоллекция, ТаблицаЗначений - эту таблицу необходимо заполнить;
//  Пользователь          - СправочникСсылка.Пользователи - текущий пользователь;
//  ПараметрыПолученияНовостей - Структура с ключами:
//   * ВариантОтбора - значение варианта отбора:
//     - 0 - все новости (без учета корзины);
//     - 1 - по ленте новостей (без учета корзины), должен быть ключ ЛентаНовостей. Если ключа "ЛентаНовостей" нет, или он пустой,
//           или неправильного типа, то будут отобраны все новости (без учета корзины).
//           Также можно передать ключ "КоличествоНовостей", который будет подставлен в запрос
//             как ПЕРВЫЕ... (приоритет этого ключа выше, чем у настройки "НастройкиПоказаНовостей");
//     - 2 - результат поиска. Также должен быть передан ключ "СписокНайденныхНовостей" типа СписокЗначений;
//     - 3 - контекстные новости (новости по объекту метаданных / форме). Также должны быть переданы структура с ключами "Метаданные"
//           и "Форма". Если значение ключа Форма = Неопределено, то будут получены новости по всем формам для этого объекта метаданных;
//     - 4 - Помеченные новости (без учета корзины). Также должен быть передан ключ "Тег" типа Строка.
//           Избранные новости отбираются этим же вариантом отбора, только тег = "Пометка1";
//     - 5 - Важные новости (без учета корзины), у которых важность = "важно" или "очень важно";
//     - 6 - Популярная тема. Также должен быть передан ключ "ИмяТемы" типа Строка.;
//     - 7 - Пользовательский отбор. Также должен быть передан ключ "ИмяОтбора" типа Строка
//           (это имя фильтра из ХранилищаНастроек.НастройкиНовостей);
//     - 8 - Корзина;
//   * ЛентаНовостей - только для ВариантОтбора = 1 - отбирать по этой ленте новостей;
//   * КоличествоНовостей - только для ВариантОтбора = 1 - будет подставлен в запрос
//                     как "ПЕРВЫЕ ..." (приоритет этого ключа выше, чем у настройки "НастройкиПоказаНовостей");
//   * СписокНайденныхНовостей - СписокЗначений - только для ВариантОтбора = 2 - отбирать по списку новостей;
//   * Метаданные        - Строка - только для ВариантОтбора = 3 - отбирать контекстные новости;
//   * Форма             - Строка - только для ВариантОтбора = 3 - отбирать контекстные новости;
//   * Тег               - Строка - только для ВариантОтбора = 4 - отбирать помеченные новости;
//   * ПорядокСортировки - Строка - если передан, то будет подставлен в запрос "как есть";
//  ИнтерактивныеДействия - Массив - сюда вернется список интерактивных действий, которые необходимо выполнить на клиенте
//           после получения новостей.
//           Смысл таков, что на сервере нельзя, например, вывести какие-то окна и т.п.,
//             поэтому на сервере будет готовиться список интерактивных действий, а потом на клиенте обрабатываться.
//           Пример - оповещения пользователю (о важных новостях).
//           Интерактивные действия будут обрабатываться ОбработкаНовостейКлиент.ВыполнитьИнтерактивныеДействия.
//           Интерактивные действия заполняются в ОбработкаНовостейПереопределяемый.ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей.
//
Процедура ПолучитьСписокНовостей(
			ТаблицаНовостей,
			Пользователь = Неопределено,
			ПараметрыПолученияНовостей,
			ИнтерактивныеДействия) Экспорт

	// Переменные - значения отборов.
	Перем лкЛентаНовостей, лкСписокНайденныхНовостей, лкТег, лкИмяТемы, лкИмяОтбора, лкКоличествоНовостей;
	Перем лкМассивКонтекстныхНовостей, лкТаблицаКонтекстныхНовостей, лкМетаданные, лкФорма;

	ТипСтруктура            = Тип("Структура");
	ТипСписокЗначений       = Тип("СписокЗначений");
	ТипТаблицаЗначений      = Тип("ТаблицаЗначений");
	ТипДанныеФормыКоллекция = Тип("ДанныеФормыКоллекция");
	ТипЧисло                = Тип("Число");
	ТипСтрока               = Тип("Строка");

	// Правильно ли передан отбор?
	лкВариантОтбора = 0;
	Если ТипЗнч(ПараметрыПолученияНовостей) = ТипСтруктура Тогда
		ПараметрыПолученияНовостей.Свойство("ВариантОтбора", лкВариантОтбора);
		Если ТипЗнч(лкВариантОтбора) <> ТипЧисло Тогда
			лкВариантОтбора = 0;
		Иначе
			Если (лкВариантОтбора < 0) ИЛИ (лкВариантОтбора > 8) Тогда
				лкВариантОтбора = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если лкВариантОтбора = 0 Тогда // Все
	ИначеЕсли лкВариантОтбора = 1 Тогда // По ленте новостей, должен быть ключ "ЛентаНовостей".
		ПараметрыПолученияНовостей.Свойство("ЛентаНовостей", лкЛентаНовостей);
		ПараметрыПолученияНовостей.Свойство("КоличествоНовостей", лкКоличествоНовостей);
		Если ТипЗнч(лкЛентаНовостей) = Тип("СправочникСсылка.ЛентыНовостей") Тогда
			Если лкЛентаНовостей.Пустая() Тогда
				лкВариантОтбора = 0;
			КонецЕсли;
		Иначе
			лкВариантОтбора = 0;
		КонецЕсли;
		Если (ТипЗнч(лкКоличествоНовостей) <> ТипЧисло) ИЛИ (лкКоличествоНовостей < 0) Тогда
			лкКоличествоНовостей = 0;
		КонецЕсли;
	ИначеЕсли лкВариантОтбора = 2 Тогда // Результат поиска, должен быть передан ключ "СписокНайденныхНовостей".
		ПараметрыПолученияНовостей.Свойство("СписокНайденныхНовостей", лкСписокНайденныхНовостей);
		Если ТипЗнч(лкСписокНайденныхНовостей) = ТипСписокЗначений Тогда
			Если лкСписокНайденныхНовостей.Количество() = 0 Тогда
				лкВариантОтбора = 0;
			КонецЕсли;
		Иначе
			лкВариантОтбора = 0;
		КонецЕсли;
	ИначеЕсли лкВариантОтбора = 3 Тогда // Контекстные новости, должен быть передан отбор в виде ключей "Метаданные" и "Форма".
		лкМассивКонтекстныхНовостей = Новый Массив;
		ПараметрыПолученияНовостей.Свойство("Метаданные", лкМетаданные);
		ПараметрыПолученияНовостей.Свойство("Форма", лкФорма);
		Если (ТипЗнч(лкМетаданные) = ТипСтрока)
				И (НЕ ПустаяСтрока(лкМетаданные)) Тогда
			// Здесь список лент новостей для получения контекстных новостей дополнительно никак
			//  не обрабатывается - показываются контекстные новости по всем лентам новостей.
			СписокЛентНовостей = Неопределено; // По всем лентам новостей
			//// ОбработкаНовостейПереопределяемый.ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей(СписокЛентНовостей).
			лкТаблицаКонтекстныхНовостей = ОбработкаНовостейВызовСервера.ПолучитьТаблицуКонтекстныхНовостей(
				СписокЛентНовостей,
				лкМетаданные,
				лкФорма,
				Неопределено,
				"Для форм, простой"); // Идентификатор.
			// Здесь таблица контекстных новостей дополнительно никак не обрабатывается - показываются все контекстные новости.
			// //// ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТаблицуКонтекстныхНовостей(...).
			лкМассивКонтекстныхНовостей = лкТаблицаКонтекстныхНовостей.ВыгрузитьКолонку("Новость");
		КонецЕсли;
	ИначеЕсли лкВариантОтбора = 4 Тогда // Помеченные новости, должен быть передан ключ "Тег".
		ПараметрыПолученияНовостей.Свойство("Тег", лкТег);
		Если ТипЗнч(лкТег) = ТипСтрока Тогда
			Если ПустаяСтрока(лкТег) Тогда
				лкВариантОтбора = 0;
			КонецЕсли;
		Иначе
			лкВариантОтбора = 0;
		КонецЕсли;
	ИначеЕсли лкВариантОтбора = 5 Тогда // Важные новости
	ИначеЕсли лкВариантОтбора = 6 Тогда // Популярная тема, должен быть передан ключ "ИмяТемы".
		ПараметрыПолученияНовостей.Свойство("ИмяТемы", лкИмяТемы);
		Если ТипЗнч(лкИмяТемы) = ТипСтрока Тогда
			Если ПустаяСтрока(лкИмяТемы) Тогда
				лкВариантОтбора = 0;
			КонецЕсли;
		Иначе
			лкВариантОтбора = 0;
		КонецЕсли;
	ИначеЕсли лкВариантОтбора = 7 Тогда // Пользовательский отбор, должен быть передан ключ "ИмяОтбора".
		ПараметрыПолученияНовостей.Свойство("ИмяОтбора", лкИмяОтбора);
		Если ТипЗнч(лкИмяОтбора) = ТипСтрока Тогда
			Если ПустаяСтрока(лкИмяОтбора) Тогда
				лкВариантОтбора = 0;
			КонецЕсли;
		Иначе
			лкВариантОтбора = 0;
		КонецЕсли;
	ИначеЕсли лкВариантОтбора = 8 Тогда // Корзина.
	КонецЕсли;

	МассивОтключенныхЛентНовостейИзНастроек = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"ОтключенныеЛентыНовостей", // КлючОбъекта.
		ПараметрыПолученияНовостей); // КлючНастроек, пока не обрабатывается.

	МассивОтключенныхЛентНовостей = Новый Массив;
	Если лкВариантОтбора = 0 Тогда // Все
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли лкВариантОтбора = 1 Тогда // По ленте новостей, должен быть ключ "ЛентаНовостей".
		// Все ленты новостей отключенные, кроме выбранной.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка КАК ЛентаНовостей
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|ГДЕ
			|	Спр.Ссылка <> &ВыбраннаяЛентаНовостей
			|";
		Запрос.УстановитьПараметр("ВыбраннаяЛентаНовостей", лкЛентаНовостей);
		Результат = Запрос.Выполнить(); // ПолучитьСписокНовостей(), получить список лент новостей кроме выбранной
		Если НЕ Результат.Пустой() Тогда
			МассивОтключенныхЛентНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("ЛентаНовостей");
		КонецЕсли;

	ИначеЕсли лкВариантОтбора = 2 Тогда // Результат поиска, должен быть передан ключ "СписокНайденныхНовостей".
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли лкВариантОтбора = 3 Тогда // Контекстные новости.
		МассивОтключенныхЛентНовостей = Новый Массив;

	ИначеЕсли лкВариантОтбора = 4 Тогда // Помеченные новости, должен быть передан ключ "Тег".
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли лкВариантОтбора = 5 Тогда // Важные новости.
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли лкВариантОтбора = 6 Тогда // Популярная тема, должен быть передан ключ "ИмяТемы".
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли лкВариантОтбора = 7 Тогда // Пользовательский отбор, должен быть передан ключ "ИмяОтбора".
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли лкВариантОтбора = 8 Тогда // Корзина.
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	КонецЕсли;

	СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостей", // КлючОбъекта
		""); // КлючНастроек. Настройки показа новостей - единые для пользователя.

	// В общих настройках хранится:
	// - Вариант показа новостей (ОтображаемыеНовости_Вариант = "Количество", "Период");
	// - Количество новостей (ОтображаемыеНовости_Количество для ОтображаемыеНовости_Вариант = "Количество");
	// - Возраст новостей (ОтображаемыеНовости_ПериодЧасов для ОтображаемыеНовости_Вариант = "Период");
	// - Показывать ли только активные новости (ОтборНовостей_ТолькоАктивные);
	// - Интервал обновления списка новостей (для запроса этот параметр не нужен).

	// На будущее: в каждом отборе (Отбор) будет хранится:
	// - Список исключенных из показа лент новостей (т.е. при добавлении ленты новостей на сервере она будет видна,
	//       пока пользователь ее явно не отключит);
	//   - за исключением отборов "Все", "Пометка" и по конкретной ленте новостей;
	// - Отборы по категориям по каждой ленте новостей;
	// Пока нет именованных фильтров, только один фильтр, т.е. пока не обрабатывается.

	ОтображаемыеНовости_Вариант     = "Все";
	ОтображаемыеНовости_Количество  = 10;
	ОтображаемыеНовости_ПериодЧасов = 720;
	ОтборНовостей_ТолькоАктивные    = Истина;

	// Общие настройки.
	Если ТипЗнч(СтруктураНастроекПоказаНовостей) = ТипСтруктура Тогда
		СтруктураНастроекПоказаНовостей.Свойство("ОтображаемыеНовости_Вариант", ОтображаемыеНовости_Вариант);
		СтруктураНастроекПоказаНовостей.Свойство("ОтображаемыеНовости_Количество", ОтображаемыеНовости_Количество);
		СтруктураНастроекПоказаНовостей.Свойство("ОтображаемыеНовости_ПериодЧасов", ОтображаемыеНовости_ПериодЧасов);
		СтруктураНастроекПоказаНовостей.Свойство("ОтборНовостей_ТолькоАктивные", ОтборНовостей_ТолькоАктивные);
	Иначе
		// Настройки по-умолчанию.
	КонецЕсли;

	// Дополнительные проверки настроек показа новостей.
	Если (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Все"))
			И (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Количество"))
			И (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Период")) Тогда
		ОтображаемыеНовости_Вариант = "Все";
	КонецЕсли;

	Если (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Количество")) Тогда
		Если ОтображаемыеНовости_Количество <= 0 Тогда
			ОтображаемыеНовости_Количество = 10;
		КонецЕсли;
	ИначеЕсли (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Период")) Тогда
		Если ТипЗнч(ОтображаемыеНовости_ПериодЧасов) <> ТипЧисло Тогда
			ОтображаемыеНовости_ПериодЧасов = 720;
		КонецЕсли;
	КонецЕсли;

	// Для лкВариантОтбора = 1 (по ленте новостей) могли передать параметр КоличествоНовостей.
	Если лкВариантОтбора = 1 Тогда
		Если лкКоличествоНовостей > 0 Тогда
			ОтображаемыеНовости_Количество = лкКоличествоНовостей;
		КонецЕсли;
	КонецЕсли;

	Если ОтборНовостей_ТолькоАктивные <> Истина Тогда
		ОтборНовостей_ТолькоАктивные = Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	ТекстОтборов = "
		|// {Блок запроса новостей-исключений. Начало
		|// Временная таблица с новостями-исключениями, которые не проходят по отборам
		|// Фильтр по редко меняющимся отборам (версия платформы, версия продукта, продукт, ...)
		|ВЫБРАТЬ
		|	Рег.Новость КАК Новость
		|ПОМЕСТИТЬ ВТ_НовостиИсключения
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_РедкоМеняющиеся КАК Рег
		|ГДЕ
		|	Рег.РезультатОтбора = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список
		|
		|// Фильтр по общим отборам
		|ВЫБРАТЬ
		|	Рег.Новость
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_Общие КАК Рег
		|//ГДЕ // В регистре и так хранятся только исключения
		|//	Рег.РезультатОтбора = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ // Можно не реализовывать уникальность через ОБЪЕДИНИТЬ, т.к. проверяется вхождение новости в этот список
		|
		|// Фильтр по пользовательским отборам
		|ВЫБРАТЬ
		|	Рег.Новость
		|ИЗ
		|	РегистрСведений.РассчитанныеОтборыПоНовостям_Пользовательские КАК Рег
		|ГДЕ
		|	Рег.Пользователь = &ТекущийПользователь
		|	// И Рег.РезультатОтбора = ЛОЖЬ // В регистре и так хранятся только исключения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Новость
		|
		|// Блок запроса новостей-исключений. Конец}
		|;
		|
		|";

	// Выбор из справочника Новостей
	ШаблонТекстаЗапроса = "
		|ВЫБРАТЬ #ОтображаемыеНовости_Количество#
		|	Спр.Ссылка                                      КАК Ссылка,
		|	ВЫБОР
		|		КОГДА (Спр.ДатаЗавершения МЕЖДУ &ПерваяНепустаяДата И &ТекущаяУниверсальнаяДата) ТОГДА
		|			0 // Обычная важность, новость уже не актуальна
		|		КОГДА (Спр.ДатаСбросаВажности = &ПустаяДата)
		|				ИЛИ (Спр.ДатаСбросаВажности > &ТекущаяУниверсальнаяДата) ТОГДА
		|			Спр.Важность // Новость актуальна и дата сброса важности не наступила или не введена
		|		ИНАЧЕ
		|			0 // Обычная важность
		|	КОНЕЦ                                           КАК Важность, // 0, 1, 2
		|	ЕСТЬNULL(Рег.Пометка, 0)                        КАК Пометка, // 0..9
		|	ЕСТЬNULL(Рег.Прочтена, ЛОЖЬ)                    КАК Прочтена,
		|	ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ)     КАК УдаленаИзСпискаНовостей,
		|	ЕСТЬNULL(Рег.ОповещениеВключено, ИСТИНА)        КАК ОповещениеВключено,
		|	ЕСТЬNULL(Рег.ДатаНачалаОповещения, &ПустаяДата) КАК ДатаНачалаОповещения,
		|	ВЫБОР
		|		КОГДА (Спр.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
		|				ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата) // Актуальна
		|				И ( // Очень важная и непрочтенная
		|					(Спр.Ссылка.Важность = 1)
		|					И (ЕСТЬNULL(Рег.Прочтена, ЛОЖЬ)) = ЛОЖЬ
		|					И (
		|						(Спр.ДатаСбросаВажности = &ПустаяДата)
		|						ИЛИ (Спр.ДатаСбросаВажности > &ТекущаяУниверсальнаяДата)
		|					)
		|				) ТОГДА
		|			1
		|		ИНАЧЕ
		|			2
		|	КОНЕЦ                                           КАК Порядок
		|ПОМЕСТИТЬ
		|	#ВТ#
		|ИЗ
		|	Справочник.Новости КАК Спр
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СостоянияНовостей КАК Рег
		|	ПО
		|		Рег.Пользователь = &ТекущийПользователь
		|		И Рег.Новость = Спр.Ссылка
		|		И Рег.Новость.ЛентаНовостей = #ЛентаНовостей#
		|
		|ГДЕ
		|	// Не помеченные на удаление
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|
		|	// {Фильтры по категориям, версиям}
		|	И НЕ Спр.Ссылка В (
		|		ВЫБРАТЬ
		|			ВТ_НовостиИсключения.Новость
		|		ИЗ
		|			ВТ_НовостиИсключения
		|	)
		|
		|	И Спр.ЛентаНовостей = #ЛентаНовостей#
		|
		|	// Не скрытые в основном списке
		|	И Спр.СкрыватьВОбщемСпискеНовостей = ЛОЖЬ
		|
		|	// Отбор за последние ХХХ часов
		|	И Спр.ДатаПубликации >= &ДатаНачалаПросмотраНовостей
		|
		|	// Отбор по неактуальным (если ДатаЗавершения указана и <= текущей дате, то новость уже неактуальна)
		|	И (
		|		Спр.ДатаЗавершения > &ТекущаяУниверсальнаяДата
		|		ИЛИ Спр.ДатаЗавершения = &ПустаяДата
		|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
		|	)
		|
		|	// Отбор по списку новостей (для полнотекстового поиска и отбора по контекстным новостям)
		|	#УсловияОтбораПоСпискуНовостей#
		|
		|	// Отбор по пометке (0..9)
		|	#УсловияПометки#
		|
		|	// Отбор по важности (важные и очень важные)
		|	#УсловияВажности#
		|
		|	// Отбор по пометке удаления из списка новостей
		|	#УсловияУдаленияИзСпискаНовостей#
		|
		|;
		|";

	Если лкВариантОтбора = 0 // Все
			ИЛИ лкВариантОтбора = 1 Тогда // По ленте новостей, должен быть ключ "ЛентаНовостей".
		// Отбор по количеству порции.
		Если ВРег(ОтображаемыеНовости_Вариант) = ВРег("Количество") Тогда // По количеству
			ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", " ПЕРВЫЕ " + Формат(ОтображаемыеНовости_Количество, "ЧН=0; ЧГ=0"));
		Иначе // Период, Все
			ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", "");
		КонецЕсли;
		// Отбор по списку новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияОтбораПоСпискуНовостей#", "");
		// Отбор по тегу (пометке).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "");
		// Отбор по важности (важные и очень важные).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияВажности#", "");
		// Отбор по пометке удаления из списка новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияУдаленияИзСпискаНовостей#", "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ");
	ИначеЕсли лкВариантОтбора = 2 Тогда // Результат поиска, должен быть передан ключ "СписокНайденныхНовостей".
		// Отбор по количеству порции.
		// Для других отборов не надо фильтровать первые ХХХ новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", "");
		// Отбор по списку новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияОтбораПоСпискуНовостей#", "И Спр.Ссылка В (&СписокНовостей)");
		Запрос.УстановитьПараметр("СписокНовостей", лкСписокНайденныхНовостей);
		// Отбор по тегу (пометке).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "");
		// Отбор по важности (важные и очень важные).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияВажности#", "");
		// Отбор по пометке удаления из списка новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияУдаленияИзСпискаНовостей#", "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ");
	ИначеЕсли лкВариантОтбора = 3 Тогда // Контекстные новости, должен быть передан отбор в виде ключей "Метаданные" и "Форма".
		// Отбор по количеству порции.
		// Для других отборов не надо фильтровать первые ХХХ новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", "");
		// Отбор по списку новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияОтбораПоСпискуНовостей#", "И Спр.Ссылка В (&СписокНовостей)");
		Запрос.УстановитьПараметр("СписокНовостей", лкМассивКонтекстныхНовостей);
		// Отбор по тегу (пометке).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "");
		// Отбор по важности (важные и очень важные).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияВажности#", "");
		// Отбор по пометке удаления из списка новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияУдаленияИзСпискаНовостей#", "");
	ИначеЕсли лкВариантОтбора = 4 Тогда // Помеченные новости, должен быть передан ключ "Тег".
		// лкТег = Неопределено;
		// Отбор по количеству порции.
		// Для других отборов не надо фильтровать первые ХХХ новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", "");
		// Отбор по списку новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияОтбораПоСпискуНовостей#", "");
		// Отбор по тегу (пометке).
		Если Найти(ВРег(лкТег), ВРег("Пометка")) = 1
				И (СтрДлина(лкТег) = 8)Тогда
			ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "И ЕСТЬNULL(Рег.Пометка, 0) = " + Прав(лкТег, 1));
		Иначе
			ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "");
		КонецЕсли;
		// Отбор по важности (важные и очень важные).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияВажности#", "");
		// Отбор по пометке удаления из списка новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияУдаленияИзСпискаНовостей#", "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ");
	ИначеЕсли лкВариантОтбора = 5 Тогда // Важные новости
		// Отбор по количеству порции.
		// Для других отборов не надо фильтровать первые ХХХ новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", "");
		// Отбор по списку новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияОтбораПоСпискуНовостей#", "");
		// Отбор по тегу (пометке).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "");
		// Отбор по важности (важные и очень важные).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияВажности#", "И (Важность В (1, 2))");
		// Отбор по пометке удаления из списка новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияУдаленияИзСпискаНовостей#", "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ");
	ИначеЕсли лкВариантОтбора = 6 Тогда // Популярная тема, должен быть передан ключ "ИмяТемы".
		// Отбор по количеству порции.
		// Для других отборов не надо фильтровать первые ХХХ новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", "");
		// Отбор по списку новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияОтбораПоСпискуНовостей#", "");
		// Отбор по тегу (пометке).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "");
		// Отбор по важности (важные и очень важные).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияВажности#", "");
		// Отбор по пометке удаления из списка новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияУдаленияИзСпискаНовостей#", "");
	ИначеЕсли лкВариантОтбора = 7 Тогда // Пользовательский отбор, должен быть передан ключ "ИмяОтбора".
		// Отбор по количеству порции.
		// Для других отборов не надо фильтровать первые ХХХ новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", "");
		// Отбор по списку новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияОтбораПоСпискуНовостей#", "");
		// Отбор по тегу (пометке).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "");
		// Отбор по важности (важные и очень важные).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияВажности#", "");
		// Отбор по пометке удаления из списка новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияУдаленияИзСпискаНовостей#", "");
	ИначеЕсли лкВариантОтбора = 8 Тогда // Корзина
		// Отбор по количеству порции.
		Если ВРег(ОтображаемыеНовости_Вариант) = ВРег("Количество") Тогда // По количеству
			ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", " ПЕРВЫЕ " + Формат(ОтображаемыеНовости_Количество, "ЧН=0; ЧГ=0"));
		Иначе // Период, Все.
			ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#ОтображаемыеНовости_Количество#", "");
		КонецЕсли;
		// Отбор по списку новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияОтбораПоСпискуНовостей#", "");
		// Отбор по тегу (пометке).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияПометки#", "");
		// Отбор по важности (важные и очень важные).
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияВажности#", "");
		// Отбор по пометке удаления из списка новостей.
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "#УсловияУдаленияИзСпискаНовостей#", "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ИСТИНА");
	КонецЕсли;

	ТекстВременныхТаблиц = "";
	С = 1;
	Выборка = Справочники.ЛентыНовостей.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если МассивОтключенныхЛентНовостей.Найти(Выборка.Ссылка) = Неопределено Тогда
			ИмяПараметра = "ЛентаНовостей" + Формат(С, "ЧН=0; ЧГ=0");
			ШаблонТекстаЗапросаВрем = ШаблонТекстаЗапроса;
			ШаблонТекстаЗапросаВрем = СтрЗаменить(ШаблонТекстаЗапросаВрем, "#ЛентаНовостей#", "&" + ИмяПараметра);
			ШаблонТекстаЗапросаВрем = СтрЗаменить(ШаблонТекстаЗапросаВрем, "#ВТ#", "ВТ_" + ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, Выборка.Ссылка);
			ТекстВременныхТаблиц = ТекстВременныхТаблиц + ШаблонТекстаЗапросаВрем;
			С = С + 1;
		КонецЕсли;
	КонецЦикла;
	ВсегоЛентНовостей = С - 1;

	Если СтрДлина(ТекстВременныхТаблиц) > 0 Тогда
		// Ко всем временным таблицам добавить запрос-объединение.
		ШаблонТекстаЗапросаОбъединения = 
			"{Объединение}ВЫБРАТЬ
			|	ИСТИНА                                  КАК Видимость,
			|	Спр.Ссылка                              КАК Ссылка,
			|	Спр.Ссылка.Наименование                 КАК Наименование,
			|	Спр.Ссылка.Наименование                 КАК Заголовок,
			|	Спр.Ссылка.Подзаголовок                 КАК Подзаголовок,
			|	Спр.Ссылка.УИННовости                   КАК УИННовости,
			|	Спр.Ссылка.ДатаПубликации               КАК ДатаПубликации,
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(Спр.Ссылка.ДатаПубликации, ДЕНЬ) = &НачалоДняТекущаяУниверсальнаяДата
			|			ТОГДА ""Сегодня""
			|		КОГДА НАЧАЛОПЕРИОДА(Спр.Ссылка.ДатаПубликации, ДЕНЬ) = &ВчерашняяУниверсальнаяДата
			|			ТОГДА ""Вчера""
			|		КОГДА Спр.Ссылка.ДатаПубликации >= &НачалоГодаТекущаяУниверсальнаяДата
			|				И Спр.Ссылка.ДатаПубликации <= &КонецГодаТекущаяУниверсальнаяДата
			|			ТОГДА ""Этот год""
			|		ИНАЧЕ ""Полная дата""
			|	КОНЕЦ                                   КАК ПредставлениеДатыПубликации,
			|	Спр.Ссылка.ДатаЗавершения               КАК ДатаЗавершения,
			|	Спр.Ссылка.ЛентаНовостей                КАК ЛентаНовостей,
			|	Спр.Ссылка.ТекстНовости                 КАК ТекстНовости,
			|	Спр.Ссылка.СсылкаНаПолныйТекстНовости   КАК СсылкаНаПолныйТекстНовости,
			|	Спр.Важность                            КАК Важность,
			|	ВЫБОР
			|		КОГДА (Спр.Ссылка.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
			|				ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата)
			|				И (Спр.Ссылка.Важность = 1) ТОГДА // Только ОЧЕНЬ важные
			|			ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ                                   КАК Отображение_Срочная, // Только для сортировки в отчете
			|	ВЫБОР
			|		КОГДА Спр.Ссылка.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
			|				ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ                                   КАК Актуальность,
			|	Спр.Пометка                             КАК Пометка,
			|	Спр.Прочтена                            КАК Прочтена,
			|	Спр.УдаленаИзСпискаНовостей             КАК УдаленаИзСпискаНовостей,
			|	Спр.ОповещениеВключено                  КАК ОповещениеВключено,
			|	Спр.ДатаНачалаОповещения                КАК ДатаНачалаОповещения,
			|	Спр.Порядок                             КАК Порядок,
			|	Спр.Ссылка.Действия.(
			|		УИНДействия,
			|		Действие
			|	)                                       КАК Действия,
			|	Спр.Ссылка.ПараметрыДействий.(
			|		УИНДействия,
			|		Параметр,
			|		ЗначениеПараметра
			|	)                                       КАК ПараметрыДействия
			|
			|ИЗ
			|	#ВТ# КАК Спр
			|
			|{Объединение}";

		ТекстОбъединения = "";
		Для С=1 По ВсегоЛентНовостей Цикл
			ИмяПараметра = "ЛентаНовостей" + Формат(С, "ЧН=0; ЧГ=0");
			ШаблонТекстаЗапросаОбъединенияВрем = ШаблонТекстаЗапросаОбъединения;
			ШаблонТекстаЗапросаОбъединенияВрем = СтрЗаменить(ШаблонТекстаЗапросаОбъединенияВрем, "#ВТ#", "ВТ_" + ИмяПараметра);
			ТекстОбъединения = ТекстОбъединения + ШаблонТекстаЗапросаОбъединенияВрем;
		КонецЦикла;
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "{Объединение}{Объединение}", "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|");
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "{Объединение}", "");

		лкПорядокСортировки = "";
		Если ПараметрыПолученияНовостей.Свойство("ПорядокСортировки") Тогда
			лкПорядокСортировки = ПараметрыПолученияНовостей.ПорядокСортировки;
			Если ТипЗнч(лкПорядокСортировки) <> ТипСтрока Тогда
				лкПорядокСортировки = "";
			КонецЕсли;
		КонецЕсли;
		Если ПустаяСтрока(лкПорядокСортировки) Тогда
			ТекстОбъединения = ТекстОбъединения + "
				|УПОРЯДОЧИТЬ ПО
				|	Спр.Порядок,
				|	ДатаПубликации УБЫВ
				|";
		Иначе
			ТекстОбъединения = ТекстОбъединения + "
				|УПОРЯДОЧИТЬ ПО
				|" + лкПорядокСортировки;
		КонецЕсли;

		ТекстЗапроса =
			ТекстОтборов
			+ ТекстВременныхТаблиц
			+ ТекстОбъединения;

		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = ТекстЗапроса;

		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если (ОбщегоНазначенияПовтИсп.РазделениеВключено())
				// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
				И (ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()) Тогда
			Запрос.УстановитьПараметр("ТекущийПользователь", Справочники.Пользователи.ПустаяСсылка());
		Иначе
			Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
		КонецЕсли;

		Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
		Запрос.УстановитьПараметр("ПерваяНепустаяДата", '00010101000001'); // ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)
		Запрос.УстановитьПараметр("НачалоГодаТекущаяУниверсальнаяДата", НачалоГода(ТекущаяУниверсальнаяДата()));
		Запрос.УстановитьПараметр("КонецГодаТекущаяУниверсальнаяДата", КонецГода(ТекущаяУниверсальнаяДата()));
		Запрос.УстановитьПараметр("НачалоДняТекущаяУниверсальнаяДата", НачалоДня(ТекущаяУниверсальнаяДата()));
		Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
		Запрос.УстановитьПараметр("ВчерашняяУниверсальнаяДата", НачалоДня(ТекущаяУниверсальнаяДата()-24*60*60));
		Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные", ОтборНовостей_ТолькоАктивные);
		ДатаНачалаПросмотраНовостей = '00010101';
		Если лкВариантОтбора = 0 // Все
				ИЛИ лкВариантОтбора = 1 Тогда // По ленте новостей, должен быть ключ "ЛентаНовостей"
			Если (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Период")) Тогда
				Если ОтображаемыеНовости_ПериодЧасов > 0 Тогда
					ДатаНачалаПросмотраНовостей = НачалоЧаса(ТекущаяУниверсальнаяДата() - ОтображаемыеНовости_ПериодЧасов*60*60);
				КонецЕсли;
			КонецЕсли;
			Запрос.УстановитьПараметр("ДатаНачалаПросмотраНовостей", ДатаНачалаПросмотраНовостей);
		Иначе
			// Для других отборов не надо фильтровать новости по времени.
			Запрос.УстановитьПараметр("ДатаНачалаПросмотраНовостей", '00010101');
		КонецЕсли;

		Запрос.УстановитьПараметр("МассивОтключенныхЛентНовостей", МассивОтключенныхЛентНовостей);

	Иначе
		Возврат;
	КонецЕсли;

	Результат = Запрос.Выполнить(); // ПолучитьСписокНовостей().
	Если ТипЗнч(ТаблицаНовостей) = ТипДанныеФормыКоллекция Тогда
		ТаблицаНовостей.Очистить();
		Если НЕ Результат.Пустой() Тогда
			ТаблицаНовостей.Загрузить(Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой));
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТаблицаНовостей) = ТипТаблицаЗначений Тогда
		ТаблицаНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли;

	ОбработкаНовостейПереопределяемый.ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей(ТаблицаНовостей, Пользователь, ПараметрыПолученияНовостей, ИнтерактивныеДействия);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура загружает стандартные значения из макета с именем "СтандартныеЗначения".
// Имеет смысл заполнять значения из макета:
//  - при обновлении конфигурации (когда подключение к интернету может занять много времени);
//  - при первоначальном заполнении пустой базы, когда не заполнены параметры, логины и пароли для доступа к веб-сервисам обновлений.
// Процедуры должны иметь похожий код:
//  Справочник.Новости.ЗагрузитьСтандартныеЗначения();
//  ОбработкаНовостей.ПолучитьИОбработатьНовостиПоЛентамНовостей();
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьСтандартныеЗначения() Экспорт

	ТипСоответствие = Тип("Соответствие");
	ТипСтрока = Тип("Строка");

	ЕстьЛентыНовостей = Истина;
	ЛогШаговВыполнения = Новый Массив;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем с разделением (с входом в область данных).
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			ТекстСообщения = НСтр("ru='ПолучитьИОбработатьНовостиПоЛентамНовостей, при работе в модели сервиса запускать получение новостей вручную можно только при отключенных разделителях.
				|Строка подключения: %СтрокаСоединенияИнформационнойБазы()%
				|ТекущийРежимЗапуска: %ТекущийРежимЗапуска()%
				|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация()%
				|Разделение включено: %РазделениеВключено()%
				|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных()%
				|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей()%
				|Функциональная опция Разрешена работа с новостями: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%
				|Функциональная опция Разрешена работа с новостями через интернет: %ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%
				|Текущий пользователь ИБ:
				|	Имя: %ТекущийПользователь().Имя%
				|	УИН: %ТекущийПользователь().УникальныйИдентификатор%
				|	Разделение данных:
				|		%ТекущийПользователь().РазделениеДанных%
				|Пользователь: %ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%
				|'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы()%", СтрокаСоединенияИнформационнойБазы());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска()%", ТекущийРежимЗапуска());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация()%", ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено()%", ОбщегоНазначенияПовтИсп.РазделениеВключено());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных()%", ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей()%", ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет()%", ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиЧерезИнтернет());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь().РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ()%", ОбработкаНовостейПовтИсп.ПолучитьИмяПользователяИБ());
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. Новости. Ошибка'") , // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ОбъектМетаданных = Справочники.Новости; // Переопределение
	ИмяСвойства = "Новости"; // Переопределение

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ИдентификаторШага = НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. %ИмяСвойства%. Начало'");
	ИдентификаторШага = СтрЗаменить(ИдентификаторШага, "%ИмяСвойства%", ИмяСвойства);
	ТекстСообщения = НСтр("ru='Начало загрузки стандартных значений
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		ИдентификаторШага, // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		ОбъектМетаданных, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если ПравоДоступа("Изменение", Метаданные.Справочники.Новости) = Истина
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейПростые) = Истина)
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейПростыеНеобработанные) = Истина)
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсий) = Истина)
			И (ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные) = Истина) Тогда

		// Структура таблицы ЛентыНовостей (см. Обработки.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера):
		//  - Пометка                - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить;
		//  - ОбязательныйКанал      - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить ВНЕ ЗАВИСИМОСТИ от галочки Пометка;
		//  - ЛентаНовостей          - СправочникСсылки.ЛентаНовостей - Ссылка на элемент справочника для подстановки в элемент Справочник.Новости;
		//  - Сайт                   - Строка - ;
		//  - ИмяФайла               - Строка - ;
		//  - Протокол               - Строка - возможные значения http, https, file;
		//  - ВариантЛогинаПароля    - ПеречислениеСсылка.ВариантЛогинаПароляДляЛентыНовостей - БезЛогинаПароля, ВручнуюОдинаковыйДляВсех, ВручнуюРазныйДляВсех, ВебИТС;
		//  - Логин                  - Строка - ;
		//  - Пароль                 - Строка - ;
		//  - ЛокальнаяЛентаНовостей - Булево - лента новостей не обновляется из файла или из интернета, а заполняется напрямую в справочник Новости;
		//  - ЧастотаОбновления      - Число(1,0) - Частота обновления;
		//  - АдресВХранилище        - Строка - Адрес загруженного файла во временном хранилище.

		// 1. Получить список лент новостей, которые необходимо обновить.
		// 1.1. Получить список лент новостей с параметрами.
		// Чтобы лента новостей автоматически не обновлялась - надо поставить ЧастотаОбновления=0, или установить пометку удаления.

		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЛОЖЬ                            КАК Пометка, // Загружать только если есть макет
			|	Спр.Код                         КАК Идентификатор,
			|	Спр.Ссылка                      КАК ЛентаНовостей,
			|	ЛОЖЬ                            КАК ОбязательныйКанал, // Чтобы исключить загрузку лент новостей, по которым нет макета
			|	Спр.Сайт                        КАК Сайт,
			|	Спр.ИмяФайла                    КАК ИмяФайла,
			|	Спр.Протокол                    КАК Протокол,
			|	Спр.ВариантЛогинаПароля         КАК ВариантЛогинаПароля,
			|	Спр.Логин                       КАК Логин,
			|	Спр.Пароль                      КАК Пароль,
			|	Спр.ЛокальнаяЛентаНовостей      КАК ЛокальнаяЛентаНовостей,
			|	Спр.ЧастотаОбновления           КАК ЧастотаОбновления,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(1000)) КАК АдресВХранилище // Заполнится потом
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|ГДЕ
			|	Спр.ПометкаУдаления = ЛОЖЬ
			|";

		Результат = Запрос.Выполнить(); // ЗагрузитьСтандартныеЗначения()
		Если НЕ Результат.Пустой() Тогда
			ЛентыНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		Иначе
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
				НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. Новости. Нет лент новостей'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				НСтр("ru='Ошибка загрузки стандартных значений новостей из макетов. Справочник лент новостей пустой.'"), // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			ЕстьЛентыНовостей = Ложь;
		КонецЕсли;

		Если ЕстьЛентыНовостей = Истина Тогда

			// 1.2. Список лент новостей должен формироваться из макетов справочника Новости, например:
			//   Справочники.Новости.Макеты.СтандартныеЗначения_Urgent;
			//   Справочники.Новости.Макеты.СтандартныеЗначения_Developers;
			// означает что есть два макета для загрузки в ленты новостей с кодами "Urgent" и "Developers".
			// Имя макета должно начинаться со слова "СтандартныеЗначения_", после чего идет код ленты новостей (состоит из английских букв).
			Для каждого ТекущийМакет Из Метаданные.Справочники.Новости.Макеты Цикл
				Если Найти(ВРег(ТекущийМакет.Имя), ВРег("СтандартныеЗначения_")) = 1 Тогда
					НайденныеСтроки = ЛентыНовостей.НайтиСтроки(Новый Структура("Идентификатор", Прав(ТекущийМакет.Имя, СтрДлина(ТекущийМакет.Имя)-20)));
					Если НайденныеСтроки.Количество() >= 1 Тогда
						НайденныеСтроки[0].Пометка  = Истина;
						НайденныеСтроки[0].Протокол = "file";
						НайденныеСтроки[0].ИмяФайла = "Метаданные.Справочники.Новости.Макеты." + ТекущийМакет.Имя;
					Иначе
						ТекстСообщения = НСтр("ru='Ошибка загрузки стандартных значений новостей из макета %ТекущийМакет.Имя%.
							|Не найдена лента новостей с таким идентификатором.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийМакет.Имя%", ТекущийМакет.Имя);
						ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
							НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
							НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. Новости. Неопределенная лента новостей'"), // ИдентификаторШага
							УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
							Метаданные.Справочники.Новости, // ОбъектМетаданных
							, // Данные
							ТекстСообщения, // Комментарий
							ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// 1.3. Также данные могут загружаться из произвольной строки (которая в свою очередь может быть как жестко закодирована,
			//  так и храниться в других макетах объектов метаданных или константе).
			//  Переопределение реализуется в ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей.
			ДополнительныеЛентыНовостей = ЛентыНовостей.СкопироватьКолонки();
			Для Каждого ТекущаяЛентаНовостей Из ЛентыНовостей Цикл
				ПоставляемыеДанныеОбъекта = Новый Соответствие;
				ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей(ТекущаяЛентаНовостей.ЛентаНовостей, ПоставляемыеДанныеОбъекта);
				Если ТипЗнч(ПоставляемыеДанныеОбъекта) = ТипСоответствие Тогда
					Для Каждого СтрокаСтандартныхЗначений Из ПоставляемыеДанныеОбъекта Цикл
						Если (ТипЗнч(СтрокаСтандартныхЗначений.Значение) = ТипСтрока)
								И (НЕ ПустаяСтрока(СтрокаСтандартныхЗначений.Значение)) Тогда
							ЕстьОшибки = Истина;
							Попытка
								ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
								ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8, Символы.ПС, Ложь, Символы.ПС);
								ЗаписьТекста.Записать(СтрокаСтандартныхЗначений.Значение);
								ЗаписьТекста.Закрыть();
								НоваяСтрока = ДополнительныеЛентыНовостей.Добавить();
								ЗаполнитьЗначенияСвойств(
									НоваяСтрока,
									ТекущаяЛентаНовостей,
									"Пометка, Идентификатор, ЛентаНовостей, ОбязательныйКанал,
										|ВариантЛогинаПароля, Логин, Пароль, ЛокальнаяЛентаНовостей, ЧастотаОбновления");
								НоваяСтрока.Протокол        = "file";
								НоваяСтрока.Сайт            = ИмяВременногоФайла;
								НоваяСтрока.ИмяФайла        = ИмяВременногоФайла;
								НоваяСтрока.АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
								УдалитьФайлы(ИмяВременногоФайла);
								ЕстьОшибки = Ложь;
							Исключение
								ИнформацияОбОшибке = ИнформацияОбОшибке();
								ТекстСообщения = СтрШаблон(
									НСтр("ru='Ошибка загрузки дополнительных стандартных значений новостей по причине:
										|%1
										|Первые 2000 символов дополнительного содержимого:
										|%2'"),
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
									Лев(СтрокаСтандартныхЗначений.Значение, 2000));
								ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
									НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
									НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. Новости. Ошибки записи из дополнительных источников'"), // ИдентификаторШага
									УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
									Метаданные.Справочники.Новости, // ОбъектМетаданных
									, // Данные
									ТекстСообщения, // Комментарий
									ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
								ЕстьОшибки = Истина;
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если ДополнительныеЛентыНовостей.Количество() > 0 Тогда
				Для Каждого ТекущаяДополнительнаяЛентаНовостей Из ДополнительныеЛентыНовостей Цикл
					НоваяСтрока = ЛентыНовостей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяДополнительнаяЛентаНовостей);
				КонецЦикла;
			КонецЕсли;

			// 2. Для выбранных лент новостей запустить получение новостей.
			// Следующие строки должны запуститься последовательно на одном сервере, поэтому значения адресов
			//  временного хранилища (отдельная колонка в таблице ЛентыНовостей) не должны пропасть.
			Обработки.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера(ЛентыНовостей, ЛогШаговВыполнения);
			Обработки.УправлениеНовостями.ПарсингХМЛФайловНовостей(ЛентыНовостей, ЛогШаговВыполнения);

		КонецЕсли;

	Иначе
		// ПараметрыСеанса.ТекущийПользователь нельзя использовать в модели сервиса в сеансе без указания разделителей.
		ТекстСообщения = НСтр("ru='Ошибка загрузки стандартных значений новостей из макетов.
			|У текущего пользователя (имя ИБ: %ТекущийПользователь%) нет прав на изменение справочника новостей.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь%", ""
			+ ПользователиИнформационнойБазы.ТекущийПользователь().Имя + ", "
			+ Строка(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор));
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. Новости. Нарушение прав доступа'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			Метаданные.Справочники.Новости, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

	// Запись в журнал регистрации
	РезультатПоШагам = "";
	РезультатШага = "";
	ШаблонРезультатаШага = НСтр("ru='Шаг: %Шаг%
		|	Время начала (мс): %ТНачало%
		|	Время окончания (мс): %ТКонец%
		|	Длительность (мс): %ТДлительность%
		|'");
	Для Каждого ТекущийШаг Из ЛогШаговВыполнения Цикл
		РезультатШага = ШаблонРезультатаШага;
		РезультатШага = СтрЗаменить(РезультатШага, "%Шаг%", ТекущийШаг.Шаг);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТНачало%", ТекущийШаг.ВремяНачала);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТКонец%", ТекущийШаг.ВремяОкончания);
		РезультатШага = СтрЗаменить(РезультатШага, "%ТДлительность%", (ТекущийШаг.ВремяОкончания - ТекущийШаг.ВремяНачала));
		РезультатПоШагам = РезультатПоШагам
			+ РезультатШага + Символы.ПС;
	КонецЦикла;
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ИдентификаторШага = НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. %ИмяСвойства%. Конец'");
	ИдентификаторШага = СтрЗаменить(ИдентификаторШага, "%ИмяСвойства%", ИмяСвойства);
	ТекстСообщения = НСтр("ru='Окончание загрузки стандартных значений
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|
		|По шагам:
		|%РезультатПоШагам%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатПоШагам%", РезультатПоШагам);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		ИдентификаторШага, // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		ОбъектМетаданных, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Функция возвращает текст в формате html (с тегами форматирования), описывающий клиентские настройки,
//  влияющие на отображение новостей, например, настроенные фильтры.
//
//  ОбъектНовости        - СправочникОбъект.Новость или Структура - данные новости;
//  ПараметрыОтображения - Структура или Неопределено, в которой передаются параметры для отображения новости.
//                         Список возможных параметров см. в Функция ПолучитьХТМЛТекстНовостей().
//
// Возвращаемое значение:
//   Строка - текст в формате html для отображения в форме новости.
//
Функция ПолучитьХТМЛПредставлениеКлиентскихНастроекВлияющихНаОтображениеНовостей(ОбъектНовости, ПараметрыОтображения = Неопределено)

	Результат = "";

	// ////? Вставить информацию о настроенных фильтрах.

	Возврат Результат;

КонецФункции

// Возвращает реквизиты справочника, которые образуют естественный ключ для элементов справочника.
// Используется для сопоставления элементов механизмом "Выгрузка/загрузка областей данных".
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт

	Результат = Новый Массив;

	Результат.Добавить("ЛентаНовостей");
	Результат.Добавить("УИННовости");

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли