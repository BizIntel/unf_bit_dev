#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция формирует структуру таблицы доступных правил
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//  	1. Имя							- является идентификатором правила,
//  	2. КлючДинамическогоПравила		- дополнительный идентификатор для правил формируемых динамически (например Дополнительные реквизиты, виды контактной информации),
//  	3. ЭтоГруппа					- признак того, что данное правило не используется в настройках,
//  	4. Представление				- пользовательское представление правила,
//  	5. МножественноеИспользование	- признак возможности задания нескольких значений,
//  	6. ДоступныеВидыСравнения		- список значений типа "ВидСравненияКомпоновкиДанных" - виды сравнения использующиеся для правила,
//  	7. ВидСравнения					- вид сравнения по умолчанию,
//  	8. СвойстваЗначения				- свойства элемента поля формы (колонки таблицы), связанного с данными значения сравнения.
Функция ОписаниеПравил() Экспорт
	
	Правила = Новый ДеревоЗначений;
	Правила.Колонки.Добавить("Имя",							Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	Правила.Колонки.Добавить("КлючДинамическогоПравила",	Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения,СправочникСсылка.ВидыКонтактнойИнформации"));
	Правила.Колонки.Добавить("Представление",				Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	Правила.Колонки.Добавить("ЭтоГруппа",					Новый ОписаниеТипов("Булево"));
	Правила.Колонки.Добавить("МножественноеИспользование",	Новый ОписаниеТипов("Булево"));
	Правила.Колонки.Добавить("ДоступныеВидыСравнения",		Новый ОписаниеТипов("СписокЗначений"));
	Правила.Колонки.Добавить("ВидСравнения",				Новый ОписаниеТипов("ВидСравненияКомпоновкиДанных"));
	Правила.Колонки.Добавить("СвойстваЗначения",			Новый ОписаниеТипов("Структура"));
	
	Возврат Правила;
	
КонецФункции

// Функция - Получить доступные правила отбора
// Возвращаемое значение:
//  ТаблицаЗначений - Описание полей таблицы см. в комментарии к функции ОписаниеПравил()
Функция ПолучитьДоступныеПравилаОтбора() Экспорт
	
	Правила = ОписаниеПравил();
	
	ОписаниеТипаСтрока				= Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	ОписаниеДенежногоТипа			= Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписаниеТипаСтандартнаяДата		= Новый ОписаниеТипов("СтандартнаяДатаНачала");
	ОписаниеТипаСтандартныйПериод	= Новый ОписаниеТипов("СтандартныйПериод");
	
	#Область РеквизитыКонтрагента
	
	ГруппаСвойстваКонтрагента = Правила.Строки.Добавить();
	ГруппаСвойстваКонтрагента.Имя = "РеквизитыКонтрагента";
	ГруппаСвойстваКонтрагента.Представление = НСтр("ru = 'Реквизиты (основные, дополнительные)'");
	ГруппаСвойстваКонтрагента.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "Тег";
	НовоеПравило.Представление = НСтр("ru = 'Тег'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.Теги"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВСписке,НеВСписке");
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "ВидКонтрагента";
	НовоеПравило.Представление = НСтр("ru = 'Вид контрагента'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКонтрагентов"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно");
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "Покупатель";
	НовоеПравило.Представление = НСтр("ru = 'Покупатель'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("Булево"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно");
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "Поставщик";
	НовоеПравило.Представление = НСтр("ru = 'Поставщик'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("Булево"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно");
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "ПрочиеОтношения";
	НовоеПравило.Представление = НСтр("ru = 'Прочие отношения'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("Булево"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно");
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "Группа";
	НовоеПравило.Представление = Метаданные.Справочники.Контрагенты.СтандартныеРеквизиты.Родитель.Синоним;
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Группы);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВИерархии,НеВИерархии,ВСписке,НеВСписке", 3);
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "ДатаСоздания";
	НовоеПравило.Представление = Метаданные.Справочники.Контрагенты.Реквизиты.ДатаСоздания;
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартнаяДата);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 4);
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "Комментарий";
	НовоеПравило.Представление = Метаданные.Справочники.Контрагенты.Реквизиты.Комментарий;
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтрока);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "НачинаетсяС,НеНачинаетсяС,Содержит,НеСодержит", 3);
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "Ответственный";
	НовоеПравило.Представление = Метаданные.Справочники.Контрагенты.Реквизиты.Ответственный.Синоним;
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВСписке,НеВСписке,ВГруппе,НеВГруппе,Заполнено,НеЗаполнено");
	
	НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
	НовоеПравило.Имя = "ИсточникПривлеченияПокупателя";
	НовоеПравило.Представление = Метаданные.Справочники.Контрагенты.Реквизиты.ИсточникПривлеченияПокупателя.Синоним;
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.ИсточникиПривлеченияПокупателей"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВСписке,НеВСписке,Заполнено,НеЗаполнено");
	
	#КонецОбласти
	
	#Область ДополнительныеРеквизиты
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеРеквизитыИСведения.Ссылка,
			|	ДополнительныеРеквизитыИСведения.Заголовок,
			|	ДополнительныеРеквизитыИСведения.ТипЗначения,
			|	ДополнительныеРеквизитыИСведения.ФорматСвойства
			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|ГДЕ
			|	ДополнительныеРеквизитыИСведения.ПометкаУдаления = ЛОЖЬ
			|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ
			|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДополнительныеРеквизитыИСведения.Заголовок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НовоеПравило = ГруппаСвойстваКонтрагента.Строки.Добавить();
			НовоеПравило.Имя = "ДопРеквизит";
			НовоеПравило.КлючДинамическогоПравила = Выборка.Ссылка;
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.МножественноеИспользование = Ложь;
			НовоеПравило.Представление = Выборка.Заголовок;
			НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Выборка.ТипЗначения);
			НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Элементы);
			НовоеПравило.СвойстваЗначения.Вставить("Формат", Выборка.ФорматСвойства);
			ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно");
			Если Выборка.ТипЗначения.СодержитТип(Тип("Число")) Или Выборка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				ДобавитьВидыСравнений(НовоеПравило, "Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно");
				НовоеПравило.МножественноеИспользование = Истина;
			КонецЕсли;
			Если Выборка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				ДобавитьВидыСравнений(НовоеПравило, "НачинаетсяС,НеНачинаетсяС,Содержит,НеСодержит");
			КонецЕсли;
			Для Каждого ТипЗначения Из Выборка.ТипЗначения.Типы() Цикл
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
					ДобавитьВидыСравнений(НовоеПравило, "ВСписке,НеВСписке,Заполнено,НеЗаполнено");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КонтактнаяИнформация
	
	ГруппаКонтактнаяИнформация = Правила.Строки.Добавить();
	ГруппаКонтактнаяИнформация.Имя = "КонтактнаяИнформацияКонтрагента";
	ГруппаКонтактнаяИнформация.Представление = НСтр("ru = 'Адреса (география)'");
	ГруппаКонтактнаяИнформация.ЭтоГруппа = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			ПравилоАдрес = ГруппаКонтактнаяИнформация.Строки.Добавить();
			ПравилоАдрес.Имя = "ВидКонтактнойИнформацииПредставление";
			ПравилоАдрес.КлючДинамическогоПравила = Выборка.Ссылка;
			ПравилоАдрес.ЭтоГруппа = Ложь;
			ПравилоАдрес.МножественноеИспользование = Ложь;
			ПравилоАдрес.Представление = Выборка.Наименование;
			ПравилоАдрес.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтрока);
			ПравилоАдрес.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
			ДобавитьВидыСравнений(ПравилоАдрес, "НачинаетсяС,НеНачинаетсяС,Содержит,НеСодержит", 3);
			
			НовоеПравило = ПравилоАдрес.Строки.Добавить();
			НовоеПравило.Имя = "ВидКонтактнойИнформацииСтрана";
			НовоеПравило.КлючДинамическогоПравила = Выборка.Ссылка;
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.МножественноеИспользование = Ложь;
			НовоеПравило.Представление = НСтр("ru = 'Страна'") + " (" + НРег(ПравилоАдрес.Представление) + ")";
			НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтрока);
			НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
			ДобавитьВидыСравнений(НовоеПравило, "НачинаетсяС,НеНачинаетсяС,Содержит,НеСодержит", 3);
			
			НовоеПравило = ПравилоАдрес.Строки.Добавить();
			НовоеПравило.Имя = "ВидКонтактнойИнформацииРегион";
			НовоеПравило.КлючДинамическогоПравила = Выборка.Ссылка;
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.МножественноеИспользование = Ложь;
			НовоеПравило.Представление = НСтр("ru = 'Регион'") + " (" + НРег(ПравилоАдрес.Представление) + ")";
			НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтрока);
			НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
			ДобавитьВидыСравнений(НовоеПравило, "НачинаетсяС,НеНачинаетсяС,Содержит,НеСодержит", 3);
			
			НовоеПравило = ПравилоАдрес.Строки.Добавить();
			НовоеПравило.Имя = "ВидКонтактнойИнформацииГород";
			НовоеПравило.КлючДинамическогоПравила = Выборка.Ссылка;
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.МножественноеИспользование = Ложь;
			НовоеПравило.Представление = НСтр("ru = 'Город'") + " (" + НРег(ПравилоАдрес.Представление) + ")";
			НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтрока);
			НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
			ДобавитьВидыСравнений(НовоеПравило, "НачинаетсяС,НеНачинаетсяС,Содержит,НеСодержит", 3);
			
		Иначе
			
			НовоеПравило = ГруппаКонтактнаяИнформация.Строки.Добавить();
			НовоеПравило.Имя = "ВидКонтактнойИнформацииПредставление";
			НовоеПравило.КлючДинамическогоПравила = Выборка.Ссылка;
			НовоеПравило.ЭтоГруппа = Ложь;
			НовоеПравило.МножественноеИспользование = Ложь;
			НовоеПравило.Представление = Выборка.Наименование;
			НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтрока);
			НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
			ДобавитьВидыСравнений(НовоеПравило, "НачинаетсяС,НеНачинаетсяС,Содержит,НеСодержит", 3);
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область События
	
	ГруппаСобытия = Правила.Строки.Добавить();
	ГруппаСобытия.Имя = "События";
	ГруппаСобытия.Представление = НСтр("ru = 'События (давность, количество)'");
	ГруппаСобытия.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаСобытия.Строки.Добавить();
	НовоеПравило.Имя = "СобытияДатаПоследнего";
	НовоеПравило.Представление = НСтр("ru = 'Дата последнего события'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартнаяДата);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 5);
	
	ПравилоКоличествоСобытий = ГруппаСобытия.Строки.Добавить();
	ПравилоКоличествоСобытий.Имя = "СобытияКоличество";
	ПравилоКоличествоСобытий.Представление = НСтр("ru = 'Количество событий'");
	ПравилоКоличествоСобытий.ЭтоГруппа = Ложь;
	ПравилоКоличествоСобытий.МножественноеИспользование = Истина;
	ПравилоКоличествоСобытий.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("Число"));
	ПравилоКоличествоСобытий.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(ПравилоКоличествоСобытий, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 3);
	
	НовоеПравило = ПравилоКоличествоСобытий.Строки.Добавить();
	НовоеПравило.Имя = "СобытияКоличествоПериод";
	НовоеПравило.Представление = НСтр("ru = 'За период'") + " (" + НРег(ПравилоКоличествоСобытий.Представление) + ")";
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартныйПериод);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно");
	
	ГруппаДополнительно = ГруппаСобытия.Строки.Добавить();
	ГруппаДополнительно.Имя = "СобытияДополнительно";
	ГруппаДополнительно.Представление = НСтр("ru = 'Уточнения событий'");
	ГруппаДополнительно.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаДополнительно.Строки.Добавить();
	НовоеПравило.Имя = "СобытияСостояние";
	НовоеПравило.Представление = НСтр("ru = 'Состояние событий'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.СостоянияСобытий"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВСписке,НеВСписке");
	
	НовоеПравило = ГруппаДополнительно.Строки.Добавить();
	НовоеПравило.Имя = "СобытияТипСобытия";
	НовоеПравило.Представление = НСтр("ru = 'Тип событий'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСобытий"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВСписке,НеВСписке");
	
	#КонецОбласти
	
	#Область ЗаказыПокупателей
	
	ГруппаЗаказы = Правила.Строки.Добавить();
	ГруппаЗаказы.Имя = "ЗаказыПокупателей";
	ГруппаЗаказы.Представление = НСтр("ru = 'Заказы покупателей (давность, количество)'");
	ГруппаЗаказы.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаЗаказы.Строки.Добавить();
	НовоеПравило.Имя = "ЗаказыПокупателейДатаПоследнего";
	НовоеПравило.Представление = НСтр("ru = 'Дата последнего заказа'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартнаяДата);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 5);
	
	ПравилоКоличествоЗаказов = ГруппаЗаказы.Строки.Добавить();
	ПравилоКоличествоЗаказов.Имя = "ЗаказыПокупателейКоличество";
	ПравилоКоличествоЗаказов.Представление = НСтр("ru = 'Количество заказов'");
	ПравилоКоличествоЗаказов.ЭтоГруппа = Ложь;
	ПравилоКоличествоЗаказов.МножественноеИспользование = Истина;
	ПравилоКоличествоЗаказов.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("Число"));
	ПравилоКоличествоЗаказов.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(ПравилоКоличествоЗаказов, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 3);
	
	НовоеПравило = ПравилоКоличествоЗаказов.Строки.Добавить();
	НовоеПравило.Имя = "ЗаказыПокупателейКоличествоПериод";
	НовоеПравило.Представление = НСтр("ru = 'За период'") + " (" + НРег(ПравилоКоличествоЗаказов.Представление) + ")";
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартныйПериод);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно");
	
	ГруппаДополнительно = ГруппаЗаказы.Строки.Добавить();
	ГруппаДополнительно.Имя = "ЗаказыПокупателейДополнительно";
	ГруппаДополнительно.Представление = НСтр("ru = 'Уточнения заказов покупателей'");
	ГруппаДополнительно.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаДополнительно.Строки.Добавить();
	НовоеПравило.Имя = "ЗаказыПокупателейСостояниеЗаказа";
	НовоеПравило.Представление = НСтр("ru = 'Состояние заказов покупателя'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.СостоянияЗаказовПокупателей"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВСписке,НеВСписке");
	
	#КонецОбласти
	
	#Область СчетаНаОплату
	
	ГруппаСчета = Правила.Строки.Добавить();
	ГруппаСчета.Имя = "СчетаНаОплату";
	ГруппаСчета.Представление = НСтр("ru = 'Счета на оплату (давность, количество)'");
	ГруппаСчета.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаСчета.Строки.Добавить();
	НовоеПравило.Имя = "СчетаНаОплатуДатаПоследнего";
	НовоеПравило.Представление = НСтр("ru = 'Дата последнего счета'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартнаяДата);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 5);
	
	ПравилоКоличествоСчетов = ГруппаСчета.Строки.Добавить();
	ПравилоКоличествоСчетов.Имя = "СчетаНаОплатуКоличество";
	ПравилоКоличествоСчетов.Представление = НСтр("ru = 'Количество счетов'");
	ПравилоКоличествоСчетов.ЭтоГруппа = Ложь;
	ПравилоКоличествоСчетов.МножественноеИспользование = Истина;
	ПравилоКоличествоСчетов.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("Число"));
	ПравилоКоличествоСчетов.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(ПравилоКоличествоСчетов, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 3);
	
	НовоеПравило = ПравилоКоличествоСчетов.Строки.Добавить();
	НовоеПравило.Имя = "СчетаНаОплатуКоличествоПериод";
	НовоеПравило.Представление = НСтр("ru = 'За период'") + " (" + НРег(ПравилоКоличествоСчетов.Представление) + ")";
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартныйПериод);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно");
	
	#КонецОбласти
	
	#Область ПродажиНоменклатура
	
	ГруппаПродажиНоменклатура = Правила.Строки.Добавить();
	ГруппаПродажиНоменклатура.Имя = "ПродажиНоменклатура";
	ГруппаПродажиНоменклатура.Представление = НСтр("ru = 'Продажи (номенклатура)'");
	ГруппаПродажиНоменклатура.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаПродажиНоменклатура.Строки.Добавить();
	НовоеПравило.Имя = "ПродажиНоменклатураНоменклатура";
	НовоеПравило.Представление = НСтр("ru = 'Номенклатура'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Элементы);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВСписке,НеВСписке");
	
	НовоеПравило = ГруппаПродажиНоменклатура.Строки.Добавить();
	НовоеПравило.Имя = "ПродажиНоменклатураГруппаНоменклатуры";
	НовоеПравило.Представление = НСтр("ru = 'Группа номенклатуры'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Группы);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВИерархии,НеВИерархии,ВСписке,НеВСписке");
	
	НовоеПравило = ГруппаПродажиНоменклатура.Строки.Добавить();
	НовоеПравило.Имя = "ПродажиНоменклатураКатегорияНоменклатуры";
	НовоеПравило.Представление = НСтр("ru = 'Категория номенклатуры'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Элементы);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,ВИерархии,НеВИерархии,ВСписке,НеВСписке");
	
	ГруппаДополнительно = ГруппаПродажиНоменклатура.Строки.Добавить();
	ГруппаДополнительно.Имя = "ПродажиНоменклатураДополнительно";
	ГруппаДополнительно.Представление = НСтр("ru = 'Уточнения продаж по номенклатуре'");
	ГруппаДополнительно.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаДополнительно.Строки.Добавить();
	НовоеПравило.Имя = "ПродажиНоменклатураПериод";
	НовоеПравило.Представление = НСтр("ru = 'За период (продажи по номенклатуре)'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартныйПериод);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно");
	
	#КонецОбласти
	
	#Область ПродажиВыручка
	
	ГруппаПродажиВыручка = Правила.Строки.Добавить();
	ГруппаПродажиВыручка.Имя = "ПродажиВыручка";
	ГруппаПродажиВыручка.Представление = НСтр("ru = 'Продажи (выручка, прибыль)'");
	ГруппаПродажиВыручка.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаПродажиВыручка.Строки.Добавить();
	НовоеПравило.Имя = "ПродажиВыручкаВыручка";
	НовоеПравило.Представление = НСтр("ru = 'Выручка (упр. валюта)'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеДенежногоТипа);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 4);
	
	НовоеПравило = ГруппаПродажиВыручка.Строки.Добавить();
	НовоеПравило.Имя = "ПродажиВыручкаВаловаяПрибыль";
	НовоеПравило.Представление = НСтр("ru = 'Валовая прибыль (упр. валюта)'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеДенежногоТипа);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 4);
	
	ГруппаДополнительно = ГруппаПродажиВыручка.Строки.Добавить();
	ГруппаДополнительно.Имя = "ПродажиВыручкаДополнительно";
	ГруппаДополнительно.Представление = НСтр("ru = 'Уточнения выручки от продаж'");
	ГруппаДополнительно.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаДополнительно.Строки.Добавить();
	НовоеПравило.Имя = "ПродажиВыручкаПериод";
	НовоеПравило.Представление = НСтр("ru = 'За период (выручка от продаж)'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Ложь;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеТипаСтандартныйПериод);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно");
	
	#КонецОбласти
	
	#Область Задолженность
	
	ГруппаЗадолженность = Правила.Строки.Добавить();
	ГруппаЗадолженность.Имя = "Задолженность";
	ГруппаЗадолженность.Представление = НСтр("ru = 'Задолженность (долг, просрочка)'");
	ГруппаЗадолженность.ЭтоГруппа = Истина;
	
	НовоеПравило = ГруппаЗадолженность.Строки.Добавить();
	НовоеПравило.Имя = "ЗадолженностьПокупателяСумма";
	НовоеПравило.Представление = НСтр("ru = 'Сумма долга покупателя (упр. валюта)'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеДенежногоТипа);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 4);
	
	НовоеПравило = ГруппаЗадолженность.Строки.Добавить();
	НовоеПравило.Имя = "ЗадолженностьПокупателяСрок";
	НовоеПравило.Представление = НСтр("ru = 'Срок просрочки покупателя (дней)'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("Число"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно");
	
	НовоеПравило = ГруппаЗадолженность.Строки.Добавить();
	НовоеПравило.Имя = "ЗадолженностьПоставщикуСумма";
	НовоеПравило.Представление = НСтр("ru = 'Сумма долга поставщику (упр. валюта)'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", ОписаниеДенежногоТипа);
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно", 4);
	
	НовоеПравило = ГруппаЗадолженность.Строки.Добавить();
	НовоеПравило.Имя = "ЗадолженностьПоставщикуСрок";
	НовоеПравило.Представление = НСтр("ru = 'Срок просрочки поставщику (дней)'");
	НовоеПравило.ЭтоГруппа = Ложь;
	НовоеПравило.МножественноеИспользование = Истина;
	НовоеПравило.СвойстваЗначения.Вставить("ОграничениеТипа", Новый ОписаниеТипов("Число"));
	НовоеПравило.СвойстваЗначения.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Авто);
	ДобавитьВидыСравнений(НовоеПравило, "Равно,НеРавно,Больше,БольшеИлиРавно,Меньше,МеньшеИлиРавно");
	
	#КонецОбласти
	
	Возврат Правила;
	
КонецФункции

// Функция возвращает состав сегмента
//
// Параметры:
//  Сегмент	 - СправочникСсылка.Сегмент	 - сегмент для которого необходимо получить состав
// Возвращаемое значение:
//  Массив - массив контрагентов, входящих в сегмент
Функция ПолучитьСоставСегмента(Сегмент) Экспорт
	
	Запрос = СформироватьЗапросПоПравилам(Сегмент);
	МассивКонтрагентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивКонтрагентов;
	
КонецФункции

// Функция - Сформировать запрос по правилам
//
// Параметры:
//  Сегмент	 - СправочникСсылка.Сегмент	 - сегмент, для которого необходимо получить запрос
// Возвращаемое значение:
//  Запрос - запрос с установленным текстом и параметрами
Функция СформироватьЗапросПоПравилам(Сегмент) Экспорт
	
	ИспользуютсяДопРеквизиты = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СегментыИспользуемыеПравила.Имя,
		|	СегментыИспользуемыеПравила.Настройка,
		|	СегментыИспользуемыеПравила.КлючДинамическогоПравила
		|ИЗ
		|	Справочник.Сегменты.ИспользуемыеПравила КАК СегментыИспользуемыеПравила
		|ГДЕ
		|	СегментыИспользуемыеПравила.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СегментыИспользуемыеПравила.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Сегмент);
	ВыборкаПравил = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ЭтоГруппа = ЛОЖЬ
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагенты.Наименование");
	
	ДоступнаяТаблицаКонтрагенты = СхемаЗапроса.ПакетЗапросов[0].ДоступныеТаблицы.Найти("Справочник.Контрагенты");
	Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОтборЗапроса = Оператор.Отбор;
	
	НомерПравила = 0;
	
	Пока ВыборкаПравил.Следующий() Цикл
		
		НомерПравила = НомерПравила + 1;
		НастройкаПравила = ВыборкаПравил.Настройка.Получить();
		
		Если ВыборкаПравил.Имя = "Тег" Тогда
			
			НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "КонтрагентыТеги");
			НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
				|ВЫБРАТЬ
				|	КонтрагентыТеги.Ссылка,
				|	КонтрагентыТеги.Тег
				|ИЗ
				|	Справочник.Контрагенты.Теги КАК КонтрагентыТеги");
			
			НовыйИсточник.Соединения.Очистить();
			Оператор.Источники[0].Соединения.Добавить("КонтрагентыТеги", "Контрагенты.Ссылка = КонтрагентыТеги.Ссылка");
			
			ОтборВложенногоЗапроса = НовыйИсточник.Источник.Запрос.Операторы[0].Отбор;
			
			Если НастройкаПравила.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
				ОтборВложенногоЗапроса.Добавить("КонтрагентыТеги.Тег = &Тег");
				
			ИначеЕсли НастройкаПравила.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				ОтборВложенногоЗапроса.Добавить("КонтрагентыТеги.Тег = &Тег");
				ОтборЗапроса.Добавить("КонтрагентыТеги.Ссылка ЕСТЬ NULL");
				
			ИначеЕсли НастройкаПравила.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
				ОтборВложенногоЗапроса.Добавить("КонтрагентыТеги.Тег В (&Тег)");
				
			ИначеЕсли НастройкаПравила.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				ОтборВложенногоЗапроса.Добавить("КонтрагентыТеги.Тег В (&Тег)");
				ОтборЗапроса.Добавить("КонтрагентыТеги.Ссылка ЕСТЬ NULL");
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Тег", НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "ВидКонтрагента" Тогда
			
			ОтборЗапроса.Добавить("Контрагенты.ВидКонтрагента = &ВидКонтрагента");
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "Покупатель" Тогда
			
			ОтборЗапроса.Добавить(УсловиеСравнения("Контрагенты.Покупатель", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "Поставщик" Тогда
			
			ОтборЗапроса.Добавить(УсловиеСравнения("Контрагенты.Поставщик", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "ПрочиеОтношения" Тогда
			
			ОтборЗапроса.Добавить(УсловиеСравнения("Контрагенты.ПрочиеОтношения", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "Группа" Тогда
			
			ОтборЗапроса.Добавить(УсловиеСравнения("Контрагенты.Родитель", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "ДатаСоздания" Тогда
			
			ОтборЗапроса.Добавить(УсловиеСравнения("Контрагенты.ДатаСоздания", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение.Дата);
			
		ИначеЕсли ВыборкаПравил.Имя = "Комментарий" Тогда
			
			ОтборЗапроса.Добавить(УсловиеСравнения("Контрагенты.Комментарий", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя, ШаблонОператораПодобно(НастройкаПравила.ВидСравнения, НастройкаПравила.Значение));
			
		ИначеЕсли ВыборкаПравил.Имя = "Ответственный" Тогда
			
			ОтборЗапроса.Добавить(УсловиеСравнения("Контрагенты.Ответственный", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "ИсточникПривлеченияПокупателя" Тогда
			
			ОтборЗапроса.Добавить(УсловиеСравнения("Контрагенты.ИсточникПривлеченияПокупателя", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "ДопРеквизит" И ИспользуютсяДопРеквизиты И ЗначениеЗаполнено(ВыборкаПравил.КлючДинамическогоПравила) Тогда
			
			Если УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "КонтрагентыДополнительныеРеквизиты") = Неопределено Тогда
				ДоступнаяТаблицаДопРеквизитов = УправлениеНебольшойФирмойСервер.НайтиПолеДоступнойТаблицыСхемыЗапроса(ДоступнаяТаблицаКонтрагенты, "ДополнительныеРеквизиты", Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса"));
				НовыйИсточник = Оператор.Источники.Добавить(ДоступнаяТаблицаДопРеквизитов, "КонтрагентыДополнительныеРеквизиты");
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("КонтрагентыДополнительныеРеквизиты", "Контрагенты.Ссылка = КонтрагентыДополнительныеРеквизиты.Ссылка");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
			КонецЕсли;
			
			ОтборЗапроса.Добавить("КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство" + НомерПравила);
			Запрос.УстановитьПараметр("Свойство" + НомерПравила, ВыборкаПравил.КлючДинамическогоПравила);
			ОтборЗапроса.Добавить(УсловиеСравнения("КонтрагентыДополнительныеРеквизиты.Значение", НастройкаПравила.ВидСравнения, "ЗначениеДопРеквизит" + НомерПравила));
			Если ТипЗнч(НастройкаПравила.Значение) = Тип("Строка") И
				(НастройкаПравила.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Или НастройкаПравила.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС
				Или НастройкаПравила.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Или НастройкаПравила.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит) Тогда
					Запрос.УстановитьПараметр("ЗначениеДопРеквизит" + НомерПравила, ШаблонОператораПодобно(НастройкаПравила.ВидСравнения, НастройкаПравила.Значение));
			Иначе
				Запрос.УстановитьПараметр("ЗначениеДопРеквизит" + НомерПравила, НастройкаПравила.Значение);
			КонецЕсли;
			
		ИначеЕсли Лев(ВыборкаПравил.Имя, 23) = "ВидКонтактнойИнформации" И ЗначениеЗаполнено(ВыборкаПравил.КлючДинамическогоПравила) Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "КонтрагентыКонтактнаяИнформация");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "КонтрагентыКонтактнаяИнформация");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ
					|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
					|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
					|	КонтрагентыКонтактнаяИнформация.Регион КАК Регион,
					|	КонтрагентыКонтактнаяИнформация.Страна КАК Страна,
					|	КонтрагентыКонтактнаяИнформация.Город КАК Город
					|ИЗ
					|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация");
				
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("КонтрагентыКонтактнаяИнформация", "Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация.Ссылка");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ОтборВложенногоЗапроса = НовыйИсточник.Источник.Запрос.Операторы[0].Отбор;
			ОтборВложенногоЗапроса.Добавить("КонтрагентыКонтактнаяИнформация.Вид = &ВидКИ" + НомерПравила);
			Запрос.УстановитьПараметр("ВидКИ" + НомерПравила, ВыборкаПравил.КлючДинамическогоПравила);
			
			ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(КонтрагентыКонтактнаяИнформация." + Сред(ВыборкаПравил.Имя, 24) + ","""")", НастройкаПравила.ВидСравнения, "ЗначениеКИ" + НомерПравила));
			Запрос.УстановитьПараметр("ЗначениеКИ" + НомерПравила, ШаблонОператораПодобно(НастройкаПравила.ВидСравнения, НастройкаПравила.Значение));
			
		ИначеЕсли Лев(ВыборкаПравил.Имя, 7) = "События" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "СобытияЗаПериод");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "СобытияЗаПериод");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СобытиеУчастники.Контакт КАК Контрагент,
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СобытиеУчастники.Ссылка) КАК КоличествоСобытий,
					|	МАКСИМУМ(СобытиеУчастники.Ссылка.Дата) КАК ДатаПоследнегоСобытия
					|ИЗ
					|	Документ.Событие.Участники КАК СобытиеУчастники
					|ГДЕ
					|	СобытиеУчастники.Ссылка.ПометкаУдаления = ЛОЖЬ
					|	И СобытиеУчастники.Контакт ССЫЛКА Справочник.Контрагенты
					|
					|СГРУППИРОВАТЬ ПО
					|	СобытиеУчастники.Контакт");
				
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("СобытияЗаПериод", "Контрагенты.Ссылка = СобытияЗаПериод.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ОтборВложенногоЗапроса = НовыйИсточник.Источник.Запрос.Операторы[0].Отбор;
			
			Если ВыборкаПравил.Имя = "СобытияДатаПоследнего" Тогда
				ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(СобытияЗаПериод.ДатаПоследнегоСобытия, ДАТАВРЕМЯ(0001,01,01))", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение.Дата);
			ИначеЕсли ВыборкаПравил.Имя = "СобытияКоличество" Тогда
				ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(СобытияЗаПериод.КоличествоСобытий, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "СобытияКоличествоПериод" Тогда
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаНачала) Тогда
					ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("СобытиеУчастники.Ссылка.Дата", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ВыборкаПравил.Имя + "Начало"));
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Начало", НастройкаПравила.Значение.ДатаНачала);
				КонецЕсли;
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаОкончания) Тогда
					ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("СобытиеУчастники.Ссылка.Дата", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ВыборкаПравил.Имя + "Конец"));
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Конец",  НастройкаПравила.Значение.ДатаОкончания);
				КонецЕсли;
			ИначеЕсли ВыборкаПравил.Имя = "СобытияСостояние" Тогда
				ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("СобытиеУчастники.Ссылка.Состояние", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "СобытияТипСобытия" Тогда
				ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("СобытиеУчастники.Ссылка.ТипСобытия", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			КонецЕсли;
			
		ИначеЕсли Лев(ВыборкаПравил.Имя, 17) = "ЗаказыПокупателей" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "ЗаказыЗаПериод");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ЗаказыЗаПериод");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ЗаказПокупателя.Контрагент,
					|	КОЛИЧЕСТВО(ЗаказПокупателя.Ссылка) КАК КоличествоЗаказов,
					|	МАКСИМУМ(ЗаказПокупателя.Дата) КАК ДатаПоследнегоЗаказа
					|ИЗ
					|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
					|ГДЕ
					|	ЗаказПокупателя.Проведен = ИСТИНА
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗаказПокупателя.Контрагент");
				
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("ЗаказыЗаПериод", "Контрагенты.Ссылка = ЗаказыЗаПериод.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ОтборВложенногоЗапроса = НовыйИсточник.Источник.Запрос.Операторы[0].Отбор;
			
			Если ВыборкаПравил.Имя = "ЗаказыПокупателейДатаПоследнего" Тогда
				ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(ЗаказыЗаПериод.ДатаПоследнегоЗаказа, ДАТАВРЕМЯ(0001,01,01))", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение.Дата);
			ИначеЕсли ВыборкаПравил.Имя = "ЗаказыПокупателейКоличество" Тогда
				ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(ЗаказыЗаПериод.КоличествоЗаказов, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "ЗаказыПокупателейКоличествоПериод" Тогда
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаНачала) Тогда
					ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("ЗаказПокупателя.Дата", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ВыборкаПравил.Имя + "Начало"));
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Начало", НастройкаПравила.Значение.ДатаНачала);
				КонецЕсли;
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаОкончания) Тогда
					ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("ЗаказПокупателя.Дата", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ВыборкаПравил.Имя + "Конец"));
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Конец",  НастройкаПравила.Значение.ДатаОкончания);
				КонецЕсли;
			ИначеЕсли ВыборкаПравил.Имя = "ЗаказыПокупателейСостояниеЗаказа" Тогда
				ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("ЗаказПокупателя.СостояниеЗаказа", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			КонецЕсли;
			
		ИначеЕсли Лев(ВыборкаПравил.Имя, 13) = "СчетаНаОплату" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "СчетаЗаПериод");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "СчетаЗаПериод");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	СчетНаОплату.Контрагент,
					|	КОЛИЧЕСТВО(СчетНаОплату.Ссылка) КАК КоличествоСчетов,
					|	МАКСИМУМ(СчетНаОплату.Дата) КАК ДатаПоследнегоСчета
					|ИЗ
					|	Документ.СчетНаОплату КАК СчетНаОплату
					|ГДЕ
					|	СчетНаОплату.Проведен = ИСТИНА
					|
					|СГРУППИРОВАТЬ ПО
					|	СчетНаОплату.Контрагент");
				
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("СчетаЗаПериод", "Контрагенты.Ссылка = СчетаЗаПериод.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ОтборВложенногоЗапроса = НовыйИсточник.Источник.Запрос.Операторы[0].Отбор;
			
			Если ВыборкаПравил.Имя = "СчетаНаОплатуДатаПоследнего" Тогда
				ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(СчетаЗаПериод.ДатаПоследнегоСчета, ДАТАВРЕМЯ(0001,01,01))", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение.Дата);
			ИначеЕсли ВыборкаПравил.Имя = "СчетаНаОплатуКоличество" Тогда
				ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(СчетаЗаПериод.КоличествоСчетов, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "СчетаНаОплатуКоличествоПериод" Тогда
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаНачала) Тогда
					ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("СчетНаОплату.Дата", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ВыборкаПравил.Имя + "Начало"));
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Начало", НастройкаПравила.Значение.ДатаНачала);
				КонецЕсли;
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаОкончания) Тогда
					ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("СчетНаОплату.Дата", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ВыборкаПравил.Имя + "Конец"));
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Конец",  НастройкаПравила.Значение.ДатаОкончания);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Лев(ВыборкаПравил.Имя, 19) = "ПродажиНоменклатура" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "ПродажиНоменклатура");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ПродажиНоменклатура");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ВЫБОР
					|		КОГДА Продажи.Документ ССЫЛКА Документ.АктВыполненныхРабот
					|			ТОГДА ВЫРАЗИТЬ(Продажи.Документ КАК Документ.АктВыполненныхРабот).Контрагент
					|		КОГДА Продажи.Документ ССЫЛКА Документ.ЗаказПокупателя
					|			ТОГДА ВЫРАЗИТЬ(Продажи.Документ КАК Документ.ЗаказПокупателя).Контрагент
					|		КОГДА Продажи.Документ ССЫЛКА Документ.ОтчетКомиссионера
					|			ТОГДА ВЫРАЗИТЬ(Продажи.Документ КАК Документ.ОтчетКомиссионера).Контрагент
					|		КОГДА Продажи.Документ ССЫЛКА Документ.ОтчетКомитенту
					|			ТОГДА ВЫРАЗИТЬ(Продажи.Документ КАК Документ.ОтчетКомитенту).Контрагент
					|		КОГДА Продажи.Документ ССЫЛКА Документ.ОтчетОПереработке
					|			ТОГДА ВЫРАЗИТЬ(Продажи.Документ КАК Документ.ОтчетОПереработке).Контрагент
					|		КОГДА Продажи.Документ ССЫЛКА Документ.ПриходнаяНакладная
					|			ТОГДА ВЫРАЗИТЬ(Продажи.Документ КАК Документ.ПриходнаяНакладная).Контрагент
					|		КОГДА Продажи.Документ ССЫЛКА Документ.РасходнаяНакладная
					|			ТОГДА ВЫРАЗИТЬ(Продажи.Документ КАК Документ.РасходнаяНакладная).Контрагент
					|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
					|	КОНЕЦ КАК Контрагент,
					|	Продажи.Номенклатура КАК Номенклатура,
					|	Продажи.Номенклатура.КатегорияНоменклатуры КАК КатегорияНоменклатуры
					|ИЗ
					|	РегистрНакопления.Продажи КАК Продажи");
					
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("ПродажиНоменклатура", "Контрагенты.Ссылка = ПродажиНоменклатура.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
				
			КонецЕсли;
			
			ОтборЗапроса.Добавить("НЕ ПродажиНоменклатура.Контрагент ЕСТЬ NULL");
			ОтборВложенногоЗапроса = НовыйИсточник.Источник.Запрос.Операторы[0].Отбор;
			
			Если ВыборкаПравил.Имя = "ПродажиНоменклатураНоменклатура" Тогда
				ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("Продажи.Номенклатура", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "ПродажиНоменклатураГруппаНоменклатуры" Тогда
				ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("Продажи.Номенклатура.Родитель", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "ПродажиНоменклатураКатегорияНоменклатуры" Тогда
				ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("Продажи.Номенклатура.КатегорияНоменклатуры", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "ПродажиНоменклатураПериод" Тогда
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаНачала) Тогда
					ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("Продажи.Период", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ВыборкаПравил.Имя + "Начало"));
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Начало", НастройкаПравила.Значение.ДатаНачала);
				КонецЕсли;
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаОкончания) Тогда
					ОтборВложенногоЗапроса.Добавить(УсловиеСравнения("Продажи.Период", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ВыборкаПравил.Имя + "Конец"));
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Конец",  НастройкаПравила.Значение.ДатаОкончания);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Лев(ВыборкаПравил.Имя, 14) = "ПродажиВыручка" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "ПродажиВыручка");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ПродажиВыручка");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ВЫБОР
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.АктВыполненныхРабот
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.АктВыполненныхРабот).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ЗаказПокупателя
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ЗаказПокупателя).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетКомиссионера
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ОтчетКомиссионера).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетКомитенту
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ОтчетКомитенту).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетОПереработке
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ОтчетОПереработке).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ПриходнаяНакладная
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ПриходнаяНакладная).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.РасходнаяНакладная
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.РасходнаяНакладная).Контрагент
					|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
					|	КОНЕЦ КАК Контрагент,
					|	СУММА(ПродажиОбороты.СуммаОборот) КАК Выручка,
					|	СУММА(ПродажиОбороты.СуммаОборот - ПродажиОбороты.СебестоимостьОборот) КАК ВаловаяПрибыль
					|ИЗ
					|	РегистрНакопления.Продажи.Обороты(, , , ) КАК ПродажиОбороты
					|
					|СГРУППИРОВАТЬ ПО
					|	ВЫБОР
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.АктВыполненныхРабот
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.АктВыполненныхРабот).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ЗаказПокупателя
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ЗаказПокупателя).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетКомиссионера
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ОтчетКомиссионера).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетКомитенту
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ОтчетКомитенту).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ОтчетОПереработке
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ОтчетОПереработке).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.ПриходнаяНакладная
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.ПриходнаяНакладная).Контрагент
					|		КОГДА ПродажиОбороты.Документ ССЫЛКА Документ.РасходнаяНакладная
					|			ТОГДА ВЫРАЗИТЬ(ПродажиОбороты.Документ КАК Документ.РасходнаяНакладная).Контрагент
					|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
					|	КОНЕЦ");
				
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("ПродажиВыручка", "Контрагенты.Ссылка = ПродажиВыручка.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ПараметрыВиртуальнойТаблицыПродажи = НовыйИсточник.Источник.Запрос.Операторы[0].Источники[0].Источник.Параметры;
			
			Если ВыборкаПравил.Имя = "ПродажиВыручкаВыручка" Тогда
				ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(ПродажиВыручка.Выручка, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "ПродажиВыручкаВаловаяПрибыль" Тогда
				ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(ПродажиВыручка.ВаловаяПрибыль, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
				Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			ИначеЕсли ВыборкаПравил.Имя = "ПродажиВыручкаПериод" Тогда
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаНачала) Тогда
					ПараметрыВиртуальнойТаблицыПродажи[0].Выражение = Новый ВыражениеСхемыЗапроса("&" + ВыборкаПравил.Имя + "Начало");
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Начало", НастройкаПравила.Значение.ДатаНачала);
				КонецЕсли;
				Если ЗначениеЗаполнено(НастройкаПравила.Значение.ДатаОкончания) Тогда
					ПараметрыВиртуальнойТаблицыПродажи[1].Выражение = Новый ВыражениеСхемыЗапроса("&" + ВыборкаПравил.Имя + "Конец");
					Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "Конец",  НастройкаПравила.Значение.ДатаОкончания);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВыборкаПравил.Имя = "ЗадолженностьПокупателяСумма" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "ЗадолженностьПокупателя");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ЗадолженностьПокупателяСумма");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	РасчетыСПокупателямиОстатки.Контрагент,
					|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаДолга
					|ИЗ
					|	РегистрНакопления.РасчетыСПокупателями.Остатки(, ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПокупателямиОстатки
					|ГДЕ
					|	РасчетыСПокупателямиОстатки.СуммаОстаток > 0");
				
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("ЗадолженностьПокупателяСумма", "Контрагенты.Ссылка = ЗадолженностьПокупателяСумма.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(ЗадолженностьПокупателяСумма.СуммаДолга, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "ЗадолженностьПокупателяСрок" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "ЗадолженностьПокупателяСрок");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ЗадолженностьПокупателяСрок");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ВложенныйЗапрос.Контрагент КАК Контрагент,
					|	МАКСИМУМ(ВЫБОР
					|			КОГДА ВложенныйЗапрос.СрокОплатыОтПокупателя > 0
					|					И РАЗНОСТЬДАТ(ВложенныйЗапрос.ДатаРасчетногоДокумента, &ТекущаяДата, ДЕНЬ) > ВложенныйЗапрос.СрокОплатыОтПокупателя
					|				ТОГДА РАЗНОСТЬДАТ(ВложенныйЗапрос.ДатаРасчетногоДокумента, &ТекущаяДата, ДЕНЬ) - ВложенныйЗапрос.СрокОплатыОтПокупателя
					|			ИНАЧЕ 0
					|		КОНЕЦ) КАК СрокПросрочки
					|ИЗ
					|	(ВЫБРАТЬ
					|		РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
					|		ВЫБОР
					|			КОГДА РасчетыСПокупателямиОстатки.Договор.СрокОплатыПокупателя > 0
					|				ТОГДА РасчетыСПокупателямиОстатки.Договор.СрокОплатыПокупателя
					|			КОГДА СрокОплатыПокупателя.Значение > 0
					|				ТОГДА СрокОплатыПокупателя.Значение
					|			ИНАЧЕ 0
					|		КОНЕЦ КАК СрокОплатыОтПокупателя,
					|		РасчетыСПокупателямиОстатки.Документ.Дата КАК ДатаРасчетногоДокумента
					|	ИЗ
					|		РегистрНакопления.РасчетыСПокупателями.Остатки КАК РасчетыСПокупателямиОстатки,
					|		Константа.СрокОплатыПокупателя КАК СрокОплатыПокупателя
					|	ГДЕ
					|		РасчетыСПокупателямиОстатки.Документ <> НЕОПРЕДЕЛЕНО
					|		И РасчетыСПокупателямиОстатки.СуммаОстаток > 0
					|		И РасчетыСПокупателямиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
					|		И РАЗНОСТЬДАТ(РасчетыСПокупателямиОстатки.Документ.Дата, &ТекущаяДата, ДЕНЬ) >= 0) КАК ВложенныйЗапрос
					|
					|СГРУППИРОВАТЬ ПО
					|	ВложенныйЗапрос.Контрагент");
					
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("ЗадолженностьПокупателяСрок", "Контрагенты.Ссылка = ЗадолженностьПокупателяСрок.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(ЗадолженностьПокупателяСрок.СрокПросрочки, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
			
		ИначеЕсли Лев(ВыборкаПравил.Имя, 23) = "ЗадолженностьПоставщикуСумма" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "ЗадолженностьПоставщикуСумма");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ЗадолженностьПоставщикуСумма");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	РасчетыСПоставщикамиОстатки.Контрагент,
					|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК СуммаДолга
					|ИЗ
					|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)) КАК РасчетыСПоставщикамиОстатки");
				
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("ЗадолженностьПоставщикуСумма", "Контрагенты.Ссылка = ЗадолженностьПоставщикуСумма.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(ЗадолженностьПоставщикуСумма.СуммаДолга, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			
		ИначеЕсли ВыборкаПравил.Имя = "ЗадолженностьПоставщикуСрок" Тогда
			
			НовыйИсточник = УправлениеНебольшойФирмойСервер.НайтиИсточникСхемыЗапроса(Оператор.Источники, "ЗадолженностьПоставщикуСрок");
			
			Если НовыйИсточник = Неопределено Тогда
				
				НовыйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ЗадолженностьПоставщикуСрок");
				НовыйИсточник.Источник.Запрос.УстановитьТекстЗапроса("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ВложенныйЗапрос.Контрагент КАК Контрагент,
					|	МАКСИМУМ(ВЫБОР
					|			КОГДА ВложенныйЗапрос.СрокОплатыПоставщику > 0
					|					И РАЗНОСТЬДАТ(ВложенныйЗапрос.ДатаРасчетногоДокумента, &ТекущаяДата, ДЕНЬ) > ВложенныйЗапрос.СрокОплатыПоставщику
					|				ТОГДА РАЗНОСТЬДАТ(ВложенныйЗапрос.ДатаРасчетногоДокумента, &ТекущаяДата, ДЕНЬ) - ВложенныйЗапрос.СрокОплатыПоставщику
					|			ИНАЧЕ 0
					|		КОНЕЦ) КАК СрокПросрочки
					|ИЗ
					|	(ВЫБРАТЬ
					|		РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
					|		ВЫБОР
					|			КОГДА РасчетыСПоставщикамиОстатки.Договор.СрокОплатыПоставщику > 0
					|				ТОГДА РасчетыСПоставщикамиОстатки.Договор.СрокОплатыПоставщику
					|			КОГДА СрокОплатыПоставщику.Значение > 0
					|				ТОГДА СрокОплатыПоставщику.Значение
					|			ИНАЧЕ 0
					|		КОНЕЦ КАК СрокОплатыПоставщику,
					|		РасчетыСПоставщикамиОстатки.Документ.Дата КАК ДатаРасчетногоДокумента
					|	ИЗ
					|		РегистрНакопления.РасчетыСПоставщиками.Остатки(, ) КАК РасчетыСПоставщикамиОстатки,
					|		Константа.СрокОплатыПоставщику КАК СрокОплатыПоставщику
					|	ГДЕ
					|		РасчетыСПоставщикамиОстатки.Документ <> НЕОПРЕДЕЛЕНО
					|		И РасчетыСПоставщикамиОстатки.СуммаОстаток > 0
					|		И РасчетыСПоставщикамиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
					|		И РАЗНОСТЬДАТ(РасчетыСПоставщикамиОстатки.Документ.Дата, &ТекущаяДата, ДЕНЬ) >= 0) КАК ВложенныйЗапрос
					|
					|СГРУППИРОВАТЬ ПО
					|	ВложенныйЗапрос.Контрагент");
				
				НовыйИсточник.Соединения.Очистить();
				Оператор.Источники[0].Соединения.Добавить("ЗадолженностьПоставщикуСрок", "Контрагенты.Ссылка = ЗадолженностьПоставщикуСрок.Контрагент");
				Оператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
				
			КонецЕсли;
			
			ОтборЗапроса.Добавить(УсловиеСравнения("ЕСТЬNULL(ЗадолженностьПоставщикуСрок.СрокПросрочки, 0)", НастройкаПравила.ВидСравнения, ВыборкаПравил.Имя + "_" + НомерПравила));
			Запрос.УстановитьПараметр(ВыборкаПравил.Имя + "_" + НомерПравила, НастройкаПравила.Значение);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет виды сравнения в правило
//
// Параметры:
//  Правило					 - СтрокаТаблицыЗначений - заполняемое правило
//  ДобавляемыеВидыСравнений - Строка - виды сравнения строкой, разделитель ","
//  НомерВидаПоУмолчанию	 - Число - номер вида сравнения правила, являющейся видом сравнения по умолчанию
Процедура ДобавитьВидыСравнений(Правило, ДобавляемыеВидыСравнений, НомерВидаПоУмолчанию = 1)
	
	МассивВидов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДобавляемыеВидыСравнений, ",");
	
	Для Каждого ВидСтрокой Из МассивВидов Цикл
		Если ВидСтрокой = "Равно" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно,			 НСтр("ru = 'Равно'"));
		ИначеЕсли ВидСтрокой = "НеРавно" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеРавно,		 НСтр("ru = 'Не равно'"));
		ИначеЕсли ВидСтрокой = "Больше" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Больше,		 НСтр("ru = 'Больше'"));
		ИначеЕсли ВидСтрокой = "БольшеИлиРавно" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НСтр("ru = 'Больше или равно'"));
		ИначеЕсли ВидСтрокой = "Меньше" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Меньше,		 НСтр("ru = 'Меньше'"));
		ИначеЕсли ВидСтрокой = "МеньшеИлиРавно" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, НСтр("ru = 'Меньше или равно'"));
		ИначеЕсли ВидСтрокой = "ВСписке" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке,		 НСтр("ru = 'В списке'"));
		ИначеЕсли ВидСтрокой = "НеВСписке" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке,		 НСтр("ru = 'Не в списке'"));
		ИначеЕсли ВидСтрокой = "ВИерархии" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии,		 НСтр("ru = 'В группе'"));
		ИначеЕсли ВидСтрокой = "НеВИерархии" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВИерархии,	 НСтр("ru = 'Не в группе'"));
		ИначеЕсли ВидСтрокой = "Заполнено" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Заполнено,		 НСтр("ru = 'Заполнено'"));
		ИначеЕсли ВидСтрокой = "НеЗаполнено" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено,	 НСтр("ru = 'Не заполнено'"));
		ИначеЕсли ВидСтрокой = "НачинаетсяС" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС,	 НСтр("ru = 'Начинается с'"));
		ИначеЕсли ВидСтрокой = "НеНачинаетсяС" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС,	 НСтр("ru = 'Не начинается с'"));
		ИначеЕсли ВидСтрокой = "Содержит" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Содержит,		 НСтр("ru = 'Содержит'"));
		ИначеЕсли ВидСтрокой = "НеСодержит" Тогда
			Правило.ДоступныеВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит,	 НСтр("ru = 'Не содержит'"));
		КонецЕсли;
	КонецЦикла;
	
	Правило.ВидСравнения = Правило.ДоступныеВидыСравнения[НомерВидаПоУмолчанию-1].Значение;
	
КонецПроцедуры

// Функция формирует шаблон для логического оператора запроса "Подобно"
//
// Параметры:
//  ВидСравненияПравила	 - ВидСравненияКомпоновкиДанных	 - имеет смысл для строковых значений
//  СтрокаШаблона		 - Строка	 - исходное значение
// Возвращаемое значение:
//  Строка - шаблон для использования в запросе
Функция ШаблонОператораПодобно(ВидСравненияПравила, знач СтрокаШаблона)
	
	// Заменим служебные символы из исходной строки
	ЗаменяемыеСимволы = "%_[]";
	Для НомерСимвола = 1 По СтрДлина(СтрокаШаблона) Цикл
		Символ = Сред(ЗаменяемыеСимволы, НомерСимвола, 1);
		СтрокаШаблона = СтрЗаменить(СтрокаШаблона, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), "§" + Символ);
	КонецЦикла;
	
	Если ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		СтрокаШаблона = СтрокаШаблона + "%";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		СтрокаШаблона = СтрокаШаблона + "%";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.Содержит Тогда
		СтрокаШаблона = "%" + СтрокаШаблона + "%";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		СтрокаШаблона = "%" + СтрокаШаблона + "%";
	КонецЕсли;
	
	Возврат СтрокаШаблона;
	
КонецФункции

// Функция формирует условие для помещения в отбор запроса
//
// Параметры:
//  Поле				 - Строка	 - поле запроса на которое накладывается условие
//  ВидСравненияПравила	 - ВидСравненияКомпоновкиДанных	 - вид сравнения
//  ИмяПараметра		 - Строка	 - имя устанавливаемого параметра
// Возвращаемое значение:
//  Строка - условие отбора запроса
Функция УсловиеСравнения(Поле, ВидСравненияПравила, ИмяПараметра)
	
	Если ВидСравненияПравила = ВидСравненияКомпоновкиДанных.Равно Тогда
		УсловиеСравнения = Поле + " = " + "&" + ИмяПараметра;
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		УсловиеСравнения = Поле + " <> " + "&" + ИмяПараметра;
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.Больше Тогда
		УсловиеСравнения = Поле + " > " + "&" + ИмяПараметра;
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		УсловиеСравнения = Поле + " >= " + "&" + ИмяПараметра;
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.Меньше Тогда
		УсловиеСравнения = Поле + " < " + "&" + ИмяПараметра;
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		УсловиеСравнения = Поле + " <= " + "&" + ИмяПараметра;
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		УсловиеСравнения = Поле + " В " + "(&" + ИмяПараметра + ")";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		УсловиеСравнения = "НЕ " + Поле + " В " + "(&" + ИмяПараметра + ")";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		УсловиеСравнения = Поле + " В ИЕРАРХИИ " + "(&" + ИмяПараметра + ")";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		УсловиеСравнения = "НЕ " + Поле + " В ИЕРАРХИИ " + "(&" + ИмяПараметра + ")";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		УсловиеСравнения = Поле + " <> " + "&" + ИмяПараметра;
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		УсловиеСравнения = Поле + " = " + "&" + ИмяПараметра;
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
		УсловиеСравнения = Поле + " ПОДОБНО " + "&" + ИмяПараметра + " СПЕЦСИМВОЛ ""§""";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		УсловиеСравнения = "НЕ " + Поле + " ПОДОБНО " + "&" + ИмяПараметра + " СПЕЦСИМВОЛ ""§""";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.Содержит Тогда
		УсловиеСравнения = Поле + " ПОДОБНО " + "&" + ИмяПараметра + " СПЕЦСИМВОЛ ""§""";
	ИначеЕсли ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		УсловиеСравнения = "НЕ " + Поле + " ПОДОБНО " + "&" + ИмяПараметра + " СПЕЦСИМВОЛ ""§""";
	КонецЕсли;
	
	Возврат УсловиеСравнения;
	
КонецФункции

// Процедура заполняет справочник сегментов по умолчанию
//
Процедура ЗаполнитьПоставляемыеСегменты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сегменты.Ссылка
		|ИЗ
		|	Справочник.Сегменты КАК Сегменты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Новые контрагенты
	Сегмент = Справочники.Сегменты.СоздатьЭлемент();
	Сегмент.УстановитьНовыйКод();
	Сегмент.Наименование = НСтр("ru='Новые за неделю'");
	Сегмент.Комментарий = НСтр("ru='# Сегмент создан автоматически'");
	
	НастройкаПравила = Новый Структура;
	НастройкаПравила.Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	НастройкаПравила.Вставить("Значение",		Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлойНедели));
	
	Правило = Сегмент.ИспользуемыеПравила.Добавить();
	Правило.Имя = "ДатаСоздания";
	Правило.Настройка = Новый ХранилищеЗначения(НастройкаПравила);
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Сегмент);
	
	// 2. Давно не связывались
	Сегмент = Справочники.Сегменты.СоздатьЭлемент();
	Сегмент.УстановитьНовыйКод();
	Сегмент.Наименование = НСтр("ru='Не связывались больше месяца'");
	Сегмент.Комментарий = НСтр("ru='# Сегмент создан автоматически'");
	
	НастройкаПравила = Новый Структура;
	НастройкаПравила.Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Меньше);
	НастройкаПравила.Вставить("Значение",		Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлогоМесяца));
	
	Правило = Сегмент.ИспользуемыеПравила.Добавить();
	Правило.Имя = "СобытияДатаПоследнего";
	Правило.Настройка = Новый ХранилищеЗначения(НастройкаПравила);
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Сегмент);
	
	// 3. Есть заказы за последний месяц
	Сегмент = Справочники.Сегменты.СоздатьЭлемент();
	Сегмент.УстановитьНовыйКод();
	Сегмент.Наименование = НСтр("ru='Есть заказы за последний месяц'");
	Сегмент.Комментарий = НСтр("ru='# Сегмент создан автоматически'");
	
	НастройкаПравила = Новый Структура;
	НастройкаПравила.Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	НастройкаПравила.Вставить("Значение",		1);
	
	Правило = Сегмент.ИспользуемыеПравила.Добавить();
	Правило.Имя = "ЗаказыПокупателейКоличество";
	Правило.Настройка = Новый ХранилищеЗначения(НастройкаПравила);
	
	НастройкаПравила = Новый Структура;
	НастройкаПравила.Вставить("ВидСравнения",	ВидСравненияКомпоновкиДанных.Равно);
	НастройкаПравила.Вставить("Значение",		Новый СтандартныйПериод(ВариантСтандартногоПериода.Месяц));
	
	Правило = Сегмент.ИспользуемыеПравила.Добавить();
	Правило.Имя = "ЗаказыПокупателейКоличествоПериод";
	Правило.Настройка = Новый ХранилищеЗначения(НастройкаПравила);
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Сегмент);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли