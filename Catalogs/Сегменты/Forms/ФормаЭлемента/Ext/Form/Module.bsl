
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьДоступныеПравила();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			Для Каждого Правило Из Параметры.ЗначениеКопирования.ИспользуемыеПравила Цикл
				ДоступноеПравило = НайтиСтрокуДерева(ДоступныеПравила.ПолучитьЭлементы(), Правило.Имя, Правило.КлючДинамическогоПравила);
				Если ДоступноеПравило <> Неопределено Тогда
					НастройкаПравила = Правило.Настройка.Получить();
					НовоеПравило = ИспользуемыеПравила.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеПравило, ДоступноеПравило);
					НовоеПравило.ВидСравнения = НастройкаПравила.ВидСравнения;
					НовоеПравило.Значение = НастройкаПравила.Значение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДоступныеПравила();
	
	ИспользуемыеПравила.Очистить();
	
	Для Каждого Правило Из ТекущийОбъект.ИспользуемыеПравила Цикл
		ДоступноеПравило = НайтиСтрокуДерева(ДоступныеПравила.ПолучитьЭлементы(), Правило.Имя, Правило.КлючДинамическогоПравила);
		Если ДоступноеПравило <> Неопределено Тогда
			НастройкаПравила = Правило.Настройка.Получить();
			НовоеПравило = ИспользуемыеПравила.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПравило, ДоступноеПравило);
			НовоеПравило.ВидСравнения = НастройкаПравила.ВидСравнения;
			НовоеПравило.Значение = НастройкаПравила.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ИспользуемыеПравила.Очистить();
	
	Для Каждого Правило Из ИспользуемыеПравила Цикл
		НовоеПравило = ТекущийОбъект.ИспользуемыеПравила.Добавить();
		НовоеПравило.Имя = Правило.Имя;
		НовоеПравило.КлючДинамическогоПравила = Правило.КлючДинамическогоПравила;
		НовоеПравило.Настройка = Новый ХранилищеЗначения(
			Новый Структура("ВидСравнения, Значение", Правило.ВидСравнения, Правило.Значение));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Сегмент", Объект.Ссылка);
	ПараметрОповещения.Вставить("Наименование", Объект.Наименование);
	
	Оповестить("Сегмент_ПослеЗаписи", ПараметрОповещения, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПравилаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДоступноеПравило = ДоступныеПравила.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДоступноеПравило.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	НайденныеПравила = ИспользуемыеПравила.НайтиСтроки(Новый Структура("Имя, КлючДинамическогоПравила", ДоступноеПравило.Имя, ДоступноеПравило.КлючДинамическогоПравила));
	Если ДоступноеПравило.МножественноеИспользование Или НайденныеПравила.Количество() = 0 Тогда
		НовоеПравило = ИспользуемыеПравила.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеПравило, ДоступноеПравило);
		Элементы.ИспользуемыеПравила.ТекущаяСтрока = НовоеПравило.ПолучитьИдентификатор();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеПравилаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИспользуемыеПравилаПредставление" Тогда
		Правило = ИспользуемыеПравила.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ИспользуемыеПравила.Удалить(Правило);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеПравилаПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ИспользуемыеПравила.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемоеПравило = ИспользуемыеПравила.НайтиПоИдентификатору(Элементы.ИспользуемыеПравила.ТекущаяСтрока);
	ДоступноеПравило = НайтиСтрокуДерева(ДоступныеПравила.ПолучитьЭлементы(), ИспользуемоеПравило.Имя, ИспользуемоеПравило.КлючДинамическогоПравила);
	Если ДоступноеПравило = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеНебольшойФирмойКлиентСервер.ЗаполнитьСписокИзСписка(ДоступноеПравило.ДоступныеВидыСравнения, Элементы.ИспользуемыеПравилаВидСравнения.СписокВыбора);
	Элементы.ИспользуемыеПравилаВидСравнения.ТолькоПросмотр = ДоступноеПравило.ДоступныеВидыСравнения.Количество() <= 1;
	
	ЗаполнитьЗначенияСвойств(Элементы.ИспользуемыеПравилаЗначение, ДоступноеПравило.СвойстваЗначения);
	Если ТипСравненияСписком(ИспользуемоеПравило.ВидСравнения) Тогда
		Элементы.ИспользуемыеПравилаЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Если ТипЗнч(ИспользуемоеПравило.Значение) <> Тип("СписокЗначений") Тогда
			ИспользуемоеПравило.Значение = Новый СписокЗначений;
			ИспользуемоеПравило.Значение.ТипЗначения = ДоступноеПравило.СвойстваЗначения.ОграничениеТипа;
		КонецЕсли;
	Иначе
		ИспользуемоеПравило.Значение = ДоступноеПравило.СвойстваЗначения.ОграничениеТипа.ПривестиЗначение(ИспользуемоеПравило.Значение);
	КонецЕсли;
	Элементы.ИспользуемыеПравилаЗначение.ТолькоПросмотр = ИспользуемоеПравило.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Или ИспользуемоеПравило.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеПравилаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтандартнаяОбработка = Ложь;
		Для Каждого ДоступноеПравило Из ПараметрыПеретаскивания.Значение Цикл
			Если ДоступноеПравило.ЭтоГруппа Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеПравилаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Или ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Имя, КлючДинамическогоПравила");
	Для Каждого ДоступноеПравило Из ПараметрыПеретаскивания.Значение Цикл
		Если ДоступноеПравило.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		Отбор.Имя = ДоступноеПравило.Имя;
		Отбор.КлючДинамическогоПравила = ДоступноеПравило.КлючДинамическогоПравила;
		НайденныеПравила = ИспользуемыеПравила.НайтиСтроки(Отбор);
		Если ДоступноеПравило.МножественноеИспользование Или НайденныеПравила.Количество() = 0 Тогда
			НовоеПравило = ИспользуемыеПравила.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПравило, ДоступноеПравило);
		КонецЕсли;
	КонецЦикла;
	
	Если НовоеПравило <> Неопределено Тогда
		Элементы.ИспользуемыеПравила.ТекущаяСтрока = НовоеПравило.ПолучитьИдентификатор();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеПравилаВидСравненияПриИзменении(Элемент)
	
	Если Элементы.ИспользуемыеПравила.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемоеПравило = ИспользуемыеПравила.НайтиПоИдентификатору(Элементы.ИспользуемыеПравила.ТекущаяСтрока);
	ДоступноеПравило = НайтиСтрокуДерева(ДоступныеПравила.ПолучитьЭлементы(), ИспользуемоеПравило.Имя, ИспользуемоеПравило.КлючДинамическогоПравила);
	Если ДоступноеПравило = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Значение = ИспользуемоеПравило.Значение;
	
	Если ТипСравненияСписком(ИспользуемоеПравило.ВидСравнения) Тогда
		ОписаниеТипаСписок = Новый ОписаниеТипов("СписокЗначений");
		ИспользуемоеПравило.Значение = ОписаниеТипаСписок.ПривестиЗначение(Значение);
		ИспользуемоеПравило.Значение.ТипЗначения = ДоступноеПравило.СвойстваЗначения.ОграничениеТипа;
		Элементы.ИспользуемыеПравилаЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		Элементы.ИспользуемыеПравилаЗначение.ТолькоПросмотр = Ложь;
	ИначеЕсли ИспользуемоеПравило.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Или ИспользуемоеПравило.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		ИспользуемоеПравило.Значение = ДоступноеПравило.ТипЗначенияОтбора.ПривестиЗначение();
		Элементы.ИспользуемыеПравилаЗначение.ТолькоПросмотр = Истина;
	Иначе
		ИспользуемоеПравило.Значение = ДоступноеПравило.СвойстваЗначения.ОграничениеТипа.ПривестиЗначение(Значение);
		Элементы.ИспользуемыеПравилаЗначение.ОграничениеТипа = ДоступноеПравило.СвойстваЗначения.ОграничениеТипа;
		Элементы.ИспользуемыеПравилаЗначение.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура ЗаполнитьДоступныеПравила()
	
	ЭлементыДерева = ДоступныеПравила.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Правила = Справочники.Сегменты.ПолучитьДоступныеПравилаОтбора();
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(ЭлементыДерева, Правила);
	
	ЗаполнитьИндексКартинки(ЭлементыДерева);
	
	СвязиПараметровВыбора = Новый Массив;
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.ИспользуемыеПравила.ТекущиеДанные.КлючДинамическогоПравила"));
	Элементы.ИспользуемыеПравилаЗначение.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьИндексКартинки(ЭлементыДерева)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЭлементДерева.ИндексКартинки = ?(ЭлементДерева.ЭтоГруппа, 2, 5);
		ПодчиненныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		Если ПодчиненныеЭлементы.Количество() > 0 Тогда
			ЗаполнитьИндексКартинки(ПодчиненныеЭлементы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипСравненияСписком(ВидСравненияПравила)
	
	Если ВидСравненияПравила = ВидСравненияКомпоновкиДанных.ВСписке
		Или ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеВСписке
		Или ВидСравненияПравила = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		Или ВидСравненияПравила = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуДерева(КоллекцияЭлементовДерева, Имя, КлючДинамическогоПравила)
	
	Для Каждого ЭлементДерева Из КоллекцияЭлементовДерева Цикл
		Если ЭлементДерева.Имя = Имя И ЭлементДерева.КлючДинамическогоПравила = КлючДинамическогоПравила Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
		ЭлементыСтроки = ЭлементДерева.ПолучитьЭлементы();
		Если ЭлементыСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайтиСтрокуДерева(ЭлементыСтроки, Имя, КлючДинамическогоПравила);
			Если НайденнаяСтрока <> Неопределено Тогда
				Возврат НайденнаяСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
