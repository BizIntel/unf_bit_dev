&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем ПоддерживаетсяРасширенияРаботыСФайлами;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ШрифтТемы = ШрифтыСтиля.КрупныйШрифтТекста;
	
	Если Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		СкопироватьВложения(Параметры.ЗначениеКопирования, Объект.Ссылка);	
	КонецЕсли;
	
	ЗаполнитьВложения();
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	УстановитьОтборВТаблицеВложений();
	
	Если ТипЗнч(Объект.Отправитель) = Тип("СправочникСсылка.Организации") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "Отправитель");
		Элементы.ЗаголовокОтправитель.Видимость = Не РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	КонецЕсли;
	
	УстановитьОграниченияТипов(ЭтаФорма);
	
	КонтекстЭДО = КонтекстЭДОСервер();
	Элементы.КнопкаОтправить.Видимость = КонтекстЭДО <> Неопределено;
	
	СтатусОтправки = КонтекстЭДО.ПолучитьСтатусОтправкиОбъекта(Объект.Ссылка);	
	ПисьмоОтправлено = ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
	
	Если Не ЗначениеЗаполнено(Объект.Тип) Тогда
		УстановитьТипПолучателя(Объект.Получатель, Объект.Тип);
	КонецЕсли;

	УправлениеФормой(ЭтаФорма);

	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если ПисьмоОтправлено Тогда
		ТекущийЭлемент = Элементы.ГруппаПанельОтправки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборВТаблицеВложений();
	ЗаполнитьВложения();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПерепискаСКонтролирующимиОрганами", , Объект.Ссылка);
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправительПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ПолучательНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", Объект.Получатель);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ВыборКонтролирующегоОргана",
		ПараметрыФормы, Элемент,,,, ОповещениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Получатель = Результат;
		УстановитьТипПолучателя(Объект.Получатель, Объект.Тип);
		
		Модифицированность = Истина;
		
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаВложений

&НаКлиенте
Процедура ТаблицаВложенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ДобавитьВложения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОтправитьЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДО = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДО", КонтекстЭДО);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС") Тогда
		КонтекстЭДО.ОтправкаНеформализованногоДокументаВФНС(Объект.Ссылка, Объект.Организация, ОписаниеОповещения);
	ИначеЕсли Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР") Тогда
		КонтекстЭДО.ОтправкаНеформализованногоДокументаВПФР(Объект.Ссылка, Объект.Организация, ОписаниеОповещения);
	ИначеЕсли Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФСГС") Тогда
		КонтекстЭДО.ОтправкаНеформализованногоДокументаВФСГС(Объект.Ссылка, Объект.Организация, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДО = ДополнительныеПараметры.КонтекстЭДО;
	КонтекстЭДО.ПредупредитьЕслиСтатусОтправкиВКонверте(Объект.Ссылка, "письмо");
	
	// Перерисовка статуса отправки в форме Отчетность
	ПараметрыОповещения = Новый Структура(); 
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	Оповестить("Завершение отправки в контролирующий орган", ПараметрыОповещения, Объект.Ссылка);
	
	СтатусОтправки = КонтекстЭДО.ПолучитьСтатусОтправкиОбъекта(Объект.Ссылка);	
	ПисьмоОтправлено = ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> ПредопределенноеЗначение("Перечисление.СтатусыОтправки.ВКонверте");
	
	Если Открыта() И ПисьмоОтправлено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяФайла = НавигационнаяСсылкаФорматированнойСтроки;

	Если КонтекстЭДОКлиент = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("ИмяФайла", ИмяФайла);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		ОткрытьВложение(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияОбработкаНавигационнойСсылкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ОткрытьВложение(ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПечатнаяФормаПисьма = ТабличныйДокументПисьма(Объект.Ссылка);
	КонтекстЭДОКлиент.НапечататьДокумент(ПечатнаяФормаПисьма, Объект.Наименование);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ТабличныйДокументПисьма(Письмо)
	
	Возврат Справочники.ПерепискаСКонтролирующимиОрганами.ПечатнаяФорма(Письмо);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	ПрорисоватьСтатус(Форма);
	
	Элементы.КнопкаЗаписать.Видимость = Не Форма.ПисьмоОтправлено;
	Элементы.КнопкаОтправить.Видимость = Не Форма.ПисьмоОтправлено;
	
	Элементы.ГруппаВложения.Видимость = Не Форма.ПисьмоОтправлено;
	Элементы.НадписьВнимание.Видимость = Не Форма.ПисьмоОтправлено И (Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС"));
	Элементы.Вложения.Видимость = Форма.ПисьмоОтправлено И Форма.СписокВложений.Количество() > 0;
	Элементы.ЗаголовокВложения.Видимость = Форма.ПисьмоОтправлено И Форма.СписокВложений.Количество() > 0;
	
	Если Форма.ПисьмоОтправлено Тогда
		Элементы.Отправитель.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Получатель.Вид = ВидПоляФормы.ПолеНадписи;
		
		Элементы.Наименование.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ЗаголовокНаименование.Видимость = Ложь;
		Элементы.Наименование.Шрифт = Форма.ШрифтТемы;
		
		Элементы.ЗаголовокСодержание.Видимость = Ложь;
		Элементы.Содержание.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВТаблицеВложений()
	
	Вложения.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	ЭлементОтбора = Вложения.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("НеформализованныйДокумент");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Вложения.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложения()
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеТребованийКИзображениямЗавершение", ЭтотОбъект);
	Если Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС")
	И ТребованияКИзображениямБольшеНеПоказывать() <> Истина Тогда
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ТребованияКИзображениям",,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеТребованийКИзображениямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПоддерживаетсяРасширениеРаботыСФайламиЗавершение", ЭтотОбъект);
	ТекстСообщения = НСтр("ru = 'Для работы подсистемы документооборота с контролирующими органами необходимо установить расширение работы с файлами.'");
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПоддерживаетсяРасширениеРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// В начале ветки сохраняем значение в локальной переменной - дальше вместо второго вызова метода используем ее
	ПоддерживаетсяРасширенияРаботыСФайлами = Результат;
	
	МассивНеподходящихФайлов = Новый Массив;
	
	ФайлыБылиВыбраны = Ложь;
	Если ПоддерживаетсяРасширенияРаботыСФайлами Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Истина;
		Диалог.ПредварительныйПросмотр = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьВложенияCРасширениемРаботыСФайлами", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		Диалог.Показать(ОписаниеОповещения);
		
	Иначе
		
		АдресДанных = "";
		ДополнительныеПараметры = Новый Структура("МассивНеподходящихФайлов", МассивНеподходящихФайлов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияБезРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресДанных, , Истина, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияБезРасширенияРаботыСФайлами(ФайлыБылиВыбраны, АдресДанных, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	МассивНеподходящихФайлов = ДополнительныеПараметры.МассивНеподходящихФайлов;
	
	Если ФайлыБылиВыбраны Тогда
		
		// составляем массив с объектами Файл
		МассивФайлов = Новый Массив;

		Файл = КонтекстЭДОКлиент.СвойстваФайла(АдресДанных, ВыбранноеИмяФайла);
		Если СтрДлина(Файл.Имя) > 100 Тогда
			МассивНеподходящихФайлов.Добавить(Файл.Имя);
		Иначе
			
			СвойстваФайлов = Новый Структура();
			СвойстваФайлов.Вставить("Имя",         Файл.Имя);
			СвойстваФайлов.Вставить("ПолноеИмя",   Файл.ПолноеИмя);
			СвойстваФайлов.Вставить("Расширение",  Файл.Расширение);
			СвойстваФайлов.Вставить("Размер",      Файл.Размер);
			СвойстваФайлов.Вставить("АдресДанных", Файл.АдресДанных);

			МассивФайлов.Добавить(СвойстваФайлов);
			
		КонецЕсли;
		
		СпроситьПроСуществующиеВложения(МассивФайлов, МассивНеподходящихФайлов, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьВложенияCРасширениемРаботыСФайлами(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивНеподходящихФайлов = Новый Массив;
	
	// составляем массив с объектами Файл
	МассивФайлов = Новый Массив;

	Для Каждого ЭлФайл Из ВыбранныеФайлы Цикл
		
		Файл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ЭлФайл);
		КороткоеИмяФайла = Файл.Имя;
		
		Если СтрДлина(КороткоеИмяФайла) > 100 Тогда
			МассивНеподходящихФайлов.Добавить(КороткоеИмяФайла);
		Иначе
			МассивФайлов.Добавить(Новый Структура("Имя, ПолноеИмя, Расширение, АдресДанных", КороткоеИмяФайла, Файл.ПолноеИмя, Файл.Расширение));
		КонецЕсли;
		
	КонецЦикла;
	
	СпроситьПроСуществующиеВложения(МассивФайлов, МассивНеподходящихФайлов, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроСуществующиеВложения(МассивФайлов, МассивНеподходящихФайлов, ДополнительныеПараметры)
	
	ДополнительныеПараметры = Новый Структура;					
	ДополнительныеПараметры.Вставить("МассивФайлов", 				МассивФайлов);
	ДополнительныеПараметры.Вставить("МассивНеподходящихФайлов", 	МассивНеподходящихФайлов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияВопросИменаПересекаютсяВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	// проверяем на пересечение имен с уже имеющимися
	Если ВложенияСПодобнымиИменамиУжеИмеются(Объект.Ссылка, МассивФайлов) Тогда
		
		ТекстВопроса = НСтр("ru = 'Среди выбранных файлов присутствуют такие, имена которых пересекаются с уже имеющимися вложениями.
							|Продолжить действие с заменой имеющихся вложений на выбранные с аналогичными именами?'");
							
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	Иначе
		ДобавитьВложенияВопросИменаПересекаютсяВопросЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияВопросИменаПересекаютсяВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	МассивНеподходящихФайлов = ДополнительныеПараметры.МассивНеподходящихФайлов;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменой(МассивФайлов, МассивНеподходящихФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменой(МассивФайлов, МассивНеподходящихФайлов) Экспорт
	
	// проверяем на длину имен, превышающую 100 символов
	Если МассивНеподходящихФайлов.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Среди выбранных файлов присутствовали такие, имена которых превышали 100 символов.
							|Формат не допускает такой длины имени файлов вложений, поэтому следующие файлы не были добавлены:'");
		Для каждого ЗначениеМассива Из МассивНеподходящихФайлов Цикл
			ТекстСообщения = ТекстСообщения + "
			|" + ЗначениеМассива;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если МассивФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("МассивФайлов, МассивНеподходящихФайлов", МассивФайлов, МассивНеподходящихФайлов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменойЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	Иначе
		ДобавитьВложенияСЗаменойСуществующих(МассивФайлов, МассивНеподходящихФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеВопросаИменаПересекаютсяПродолжитьСЗаменойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	МассивФайлов = ДополнительныеПараметры.МассивФайлов;
	МассивНеподходящихФайлов = ДополнительныеПараметры.МассивНеподходящихФайлов;
	ДобавитьВложенияСЗаменойСуществующих(МассивФайлов, МассивНеподходящихФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияСЗаменойСуществующих(МассивФайлов, МассивНеподходящихФайлов)
	
	Если ПоддерживаетсяРасширенияРаботыСФайлами Тогда
		
		ПомещаемыеФайлы = Новый Массив;
		Для Каждого ЭлФайл Из МассивФайлов Цикл 
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ЭлФайл.ПолноеИмя); 
			ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		КонецЦикла;
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("МассивФайлов", 	МассивФайлов);
		ДополнительныеПараметры.Вставить("ПомещаемыеФайлы", ПомещаемыеФайлы);
		ДополнительныеПараметры.Вставить("ПоддерживаетсяРасширенияРаботыСФайлами", ПоддерживаетсяРасширенияРаботыСФайлами);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьВложенияПослеПомещенияФайлов", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
			
		НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("МассивФайлов", МассивФайлов);
		ДополнительныеПараметры.Вставить("ПоддерживаетсяРасширенияРаботыСФайлами", ПоддерживаетсяРасширенияРаботыСФайлами);
		
		ДобавитьВложенияПослеПомещенияФайлов(МассивФайлов, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенияПослеПомещенияФайлов(ПомещенныеФайлы, ВходящийКонтекст) Экспорт
	
	Если ПоддерживаетсяРасширенияРаботыСФайлами Тогда
		Если ПомещенныеФайлы = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивФайлов = ВходящийКонтекст.МассивФайлов;
	
	Если ВходящийКонтекст.ПоддерживаетсяРасширенияРаботыСФайлами Тогда
		
		Для каждого ЭлФайл Из МассивФайлов Цикл
			Для каждого ОписаниеПереданногоФайла Из ПомещенныеФайлы Цикл
				Если ОписаниеПереданногоФайла.Имя = ЭлФайл.ПолноеИмя Тогда
					ЭлФайл.АдресДанных = ОписаниеПереданногоФайла.Хранение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла; 
			
	КонецЕсли;
	
	// последовательно загружаем в ИБ
	Для Каждого ЭлФайл Из МассивФайлов Цикл
		Состояние("Загрузка вложения из файла """ + ЭлФайл.ПолноеИмя + """ ...");
		РезультатЗагрузки = ЗагрузитьВложение(Объект.Ссылка, ЭлФайл);
		ОбновитьСписокВложений(РезультатЗагрузки);
	КонецЦикла;
	ОбновитьУсловноеОформлениеВложений(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВложений(РезультатЗагрузки, УдалитьВложение = Ложь)
	
	Для Каждого Вложение Из СписокВложений Цикл
		Если Вложение.Значение.ИмяФайла = РезультатЗагрузки.ИмяФайла Тогда
			СписокВложений.Удалить(Вложение);
			Если Не УдалитьВложение Тогда
				СписокВложений.Добавить(РезультатЗагрузки);
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СписокВложений.Добавить(РезультатЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение(ИмяФайла)

	РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	Если НРег(РасширениеФайла) = "txt" Тогда
		Результат = ПолучитьТекстовоеВложение(Объект.Ссылка, ИмяФайла);
		Если Результат = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вложение с именем 
				|%1
				|не обнаружено.'"), ИмяФайла));
		Иначе
			ПоказатьЗначение(, Результат);
		КонецЕсли;
	Иначе
		Результат = ПолучитьВложениеНаСервере(Объект.Ссылка, ИмяФайла, УникальныйИдентификатор);
		Если Результат = Неопределено Тогда
			ПоказатьПредупреждение(,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вложение с именем 
				|%1
				|не обнаружено.'"), ИмяФайла));
		Иначе
			ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(Результат, ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьВложение(Ссылка, ЭлФайл)
	
	МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НеформализованныйДокумент = Ссылка;
	МенеджерЗаписи.ИмяФайла = ЭлФайл.Имя;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭлФайл.АдресДанных);
	Размер = ДвоичныеДанные.Размер();
	
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ДвоичныеДанные);
	МенеджерЗаписи.Тип = ОпределитьТипФайлаВложения(ЭлФайл);
	МенеджерЗаписи.Размер = Размер;
	МенеджерЗаписи.Записать(Истина);

	Возврат Новый Структура("ИмяФайла, Размер", ЭлФайл.Имя, Размер);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВложенияСПодобнымиИменамиУжеИмеются(Ссылка, МассивФайлов)
	
	МассивИменФайлов = Новый Массив;
	Для Каждого ЭлФайл Из МассивФайлов Цикл
		МассивИменФайлов.Добавить(ЭлФайл.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ВложенияНеформализованныхДокументов.ИмяФайла КАК ИмяФайла
						  |ИЗ
						  |	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
						  |ГДЕ
						  |	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент
						  |	И ВложенияНеформализованныхДокументов.ИмяФайла В(&ИмяФайла)");
	Запрос.УстановитьПараметр("НеформализованныйДокумент", Ссылка);
	Запрос.УстановитьПараметр("ИмяФайла", МассивИменФайлов);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьТипФайлаВложения(ОбъектФайл)
	
	РасширениеФайла = ОбъектФайл.Расширение;
	
	Если РасширениеФайла = ".txt" Тогда
		ТипФайлаВложения = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ТекстовыйДокумент;
	ИначеЕсли РасширениеФайла = ".doc" Тогда
		ТипФайлаВложения = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ДокументMicrosoftWord;
	ИначеЕсли РасширениеФайла = ".xls" Тогда
		ТипФайлаВложения = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ДокументMicrosoftExcel;
	Иначе
		ТипФайлаВложения = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТипФайлаВложения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Если Не Форма.Параметры.Ключ.Пустая() Тогда
		Форма.Заголовок = Форма.Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТиповОрганизация()
	
	ТипОрганизация = Тип("СправочникСсылка.Организации");
	ТипыОрганизация = Новый Массив;
	ТипыОрганизация.Добавить(ТипОрганизация);
	
	Возврат Новый ОписаниеТипов(ТипыОрганизация);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста	
Процедура УстановитьОграниченияТипов(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПолучитьОписаниеТиповОрганизация();
	
	Элементы.Отправитель.ОграничениеТипа = ПолучитьОписаниеТиповОрганизация();
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Отправитель) Тогда
			Объект.Отправитель = Элементы.Отправитель.ОграничениеТипа.ПривестиЗначение(Объект.Отправитель)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтекстЭДОСервер(ТекстСоощения = "")
	
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	Если КонтекстЭДОСервер = Неопределено Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось получить текст вложения с именем
                                                                                                      |%1.'"), ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КонтекстЭДОСервер;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрорисоватьСтатус(Форма)
	
	ВидКонтролирующегоОргана = ИмяТекущегоТипаПолучателя(Форма.Объект.Тип);
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Форма.Объект.Ссылка, Форма.Объект.Организация, ВидКонтролирующегоОргана);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовкиПанелиОтправки);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения()
	
	СписокВложений.ЗагрузитьЗначения(ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьСписокВложений(Объект.Ссылка));
	
	Элементы.Вложения.Заголовок = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ФорматированноеПредставлениеСпискаВложений(СписокВложений.ВыгрузитьЗначения());
	
	ОбновитьУсловноеОформлениеВложений(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформлениеВложений(Форма)
	
	Форма.Вложения.УсловноеОформление.Элементы.Очистить();
	Для Каждого Вложение Из Форма.СписокВложений Цикл
		ЭлементУсловногоОформления = Форма.Вложения.УсловноеОформление.Элементы.Добавить();	
		
		ПредставлениеФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (%2)'"), 
			Вложение.Значение.ИмяФайла, 
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТекстовоеПредставлениеРазмераФайла(Вложение.Значение.Размер));
			
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ПредставлениеФайла);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИмяФайла");
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяФайла");
		ЭлементОтбора.ПравоеЗначение = Вложение.Значение.ИмяФайла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстовоеВложение(Ссылка, ИмяФайла)
	
	Возврат Справочники.ПерепискаСКонтролирующимиОрганами.ПолучитьТекстовоеВложение(Ссылка, ИмяФайла);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВложениеНаСервере(Ссылка, ИмяФайла, УникальныйИдентификатор)
	
	Возврат Справочники.ПерепискаСКонтролирующимиОрганами.ПолучитьВложениеНаСервере(Ссылка, ИмяФайла, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура СкопироватьВложения(Источник, Приемник)
	
	КонтекстЭДО = КонтекстЭДОСервер();
	ВложенияОснования = КонтекстЭДО.ПолучитьВложенияНеформализованногоДокумента(Источник, , Истина);
	
	Если ВложенияОснования.Количество() > 0 Тогда
		Записать();
		
		// копируем вложения основания
		Для Каждого ВложениеОснования Из ВложенияОснования Цикл
			КонтекстЭДО.ДобавитьВложенияПисьма(Приемник, ВложениеОснования.ИмяФайла, ВложениеОснования.Данные, ВложениеОснования.Тип, ВложениеОснования.Размер);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипПолучателя(Получатель, Тип)
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС");
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ОрганыПФР") Тогда
		Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР");
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ОрганыФСГС") Тогда
		Тип = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФСГС");
	Иначе
		Тип = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущегоТипаПолучателя(ТипПолучателя)
	
	Если ЗначениеЗаполнено(ТипПолучателя) Тогда
		Если ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС") Тогда
			ВидКонтролирующегоОргана = "ФНС";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР") Тогда
			ВидКонтролирующегоОргана = "ПФР";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФСГС") Тогда
			ВидКонтролирующегоОргана = "ФСГС";
		КонецЕсли;
	Иначе
		Возврат "ФНС";
	КонецЕсли;
	
	Возврат ВидКонтролирующегоОргана;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребованияКИзображениямБольшеНеПоказывать()
	
	Возврат ХранилищеОбщихНастроек.Загрузить("ДокументооборотСКонтролирующимиОрганами_ТребованияКИзображениямБольшеНеПоказывать");
	
КонецФункции


&НаКлиенте
Процедура ТаблицаВложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаВложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьВложение(ТекущиеДанные.ИмяФайла);
	 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВложенийПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокВложений(Новый Структура("ИмяФайла,Размер", ТекущиеДанные.ИмяФайла, ТекущиеДанные.Размер), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВниманиеНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("СкрытыеКнопки", Истина);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ТребованияКИзображениям", ПараметрыФормы);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(ЭтаФорма.Объект.Тип));
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(ЭтаФорма.Объект.Тип));
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(ЭтаФорма.Объект.Тип));
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(ЭтаФорма.Объект.Тип));
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(ЭтаФорма.Объект.Тип));
КонецПроцедуры

#КонецОбласти

#КонецОбласти
