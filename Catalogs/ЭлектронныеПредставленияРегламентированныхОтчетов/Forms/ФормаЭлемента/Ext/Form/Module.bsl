&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаСервере
Перем КонтекстЭДОСервер;

&НаКлиенте
Перем ОповеститьПослеЗакрытия;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыДляИмпорта = Неопределено;
	Если Параметры.Свойство("ФайлыДляИмпорта") Тогда
		ФайлыДляИмпорта = Параметры.ФайлыДляИмпорта;
	КонецЕсли;
	
	ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках 	= Параметры.ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках;
	ВыполнитьРазделениеФайла 							= Параметры.ВыполнитьРазделениеФайла;
	ВыполнятьПроверкуКомплектаУведомлений 				= Параметры.ВыполнятьПроверкуКомплектаУведомлений;
	
	ПериодичностьПолугодиеДоступна = Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Найти("Полугодие") <> Неопределено;
		
	ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыОтправляемыхДокументов");
	Элементы.ВидОтчета.ОграничениеТипа = ОписаниеТипа;
	Объект.ВидОтчета = ОписаниеТипа.ПривестиЗначение(Объект.ВидОтчета);
	
	ЗапросНаИмпорт = Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если ЗапросНаИмпорт Тогда
		Если ФайлыДляИмпорта = Неопределено 
			ИЛИ НЕ ИмпортироватьФайлыНаСервере(ФайлыДляИмпорта, ВыполнитьРазделениеФайла, ВыполнятьПроверкуКомплектаУведомлений) Тогда
			Отказ = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИсточникИзвлеченияФайлов = ?(Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования), Объект.Ссылка, Параметры.ЗначениеКопирования);
	ИзвлеченныеФайлы = КонтекстЭДОСервер().ИзвлечьЭлектронныеПредставленияВХранилище(ИсточникИзвлеченияФайлов, УникальныйИдентификатор);
	Если ИзвлеченныеФайлы <> Неопределено Тогда 
		Для Каждого СвойстваФайла Из ИзвлеченныеФайлы Цикл
			ОпределитьНовыйФайлВТаблицеСвойствФайлов(СвойстваФайла.ИмяФайла, СвойстваФайла.ТипФайлаОтчетности, СвойстваФайла.Данные);
		КонецЦикла;
	КонецЕсли;

	Элементы.Организация.Видимость = Не РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	Элементы.ОтступФайлДополнительный.Видимость = Не Элементы.Организация.Видимость;
	
	ТипДокумента = Объект.ВидОтчета.ТипДокумента;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		Заголовок = Объект.Наименование;
		ОбновитьПредставленияФайловПриложений();
	КонецЕсли;
	
	ПрорисоватьСтатус(ЭтаФорма);
	ПрорисоватьФайлы();
	УправлениеФормой(ЭтаФорма);
	ПронумероватьСтрокиТаблицы(ФайлыКомплекта);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
	// Обход ошибки платформы с выпадающим списком в веб-клиенте
	#Если ВебКлиент Тогда
		ТекущийЭлемент = Элементы.ПредставлениеТекст;	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
		
	Если ЗапросНаИмпорт Тогда 
		ИмпортироватьФайлыЗавершение(Истина);
	Иначе
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Объект.Версия = ВидДокумента * НомерКорректировки;
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		И РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если СвойстваФайлов <> Неопределено Тогда
		КонтекстЭДОСервер = КонтекстЭДОСервер();
			
		Если КонтекстЭДОСервер = Неопределено Тогда 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Электронное представление не записано:%1.'"),
																						Символы.ПС + ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		КонтекстЭДОСервер.ОчиститьЭлектронныеПредставленияВХранилище(ТекущийОбъект.Ссылка);
	
		Для Каждого Стр Из СвойстваФайлов Цикл
			Если ЗначениеЗаполнено(Стр.АдресДанных) Тогда
				ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Стр.АдресДанных);
				КонтекстЭДОСервер.ДобавитьЭлектронноеПредставлениеВХранилище(ТекущийОбъект.Ссылка, Стр.ИмяФайла, Новый ХранилищеЗначения(ДвоичныеДанныеФайла), Стр.ТипФайлаОтчетности);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	ПрорисоватьСтатус(ЭтаФорма);
	
	ЭтоУведомление = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЭтотВидЭлектронногоПредставленияОтноситсяКРазделуУведомления(Объект.ВидОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Заголовок = Объект.Наименование;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	ПараметрыОповещения.Вставить("Ссылка", 		Объект.Ссылка);
	
	Оповестить("Запись_ЭлектронныеПредставленияРегламентированныхОтчетов", ПараметрыОповещения, Объект.Ссылка);
	
	ОповеститьПослеЗакрытия = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ОповеститьПослеЗакрытия = Истина Тогда
		
		ПараметрыОповещения = Новый Структура("ЭтоУведомление", ЭтоУведомление);
		Оповестить("ПриЗакрытии_ЭлектронныеПредставленияРегламентированныхОтчетов", ПараметрыОповещения, Объект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ВидОтчетаПриИзмененииНаСервере();
	Объект.Наименование = ПолучитьНаименование(Объект.ВидОтчета, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьПолучателяИзСвойствОрганизации();
	
	Объект.Наименование = ПолучитьНаименование(Объект.ВидОтчета, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Организация);
	ПрорисоватьСтатус(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода, Периодичность", 
		Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Периодичность);
		
	ОткрытьФорму("Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов.Форма.ВыборПериода",
		ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ДатаНачала = Результат.НачалоПериода;
		Объект.ДатаОкончания = Результат.КонецПериода;
		Объект.Периодичность = Результат.Периодичность;
		
		Объект.ПредставлениеПериода = ПолучитьПредставлениеПериода(Объект.ДатаНачала, Объект.ДатаОкончания);
		Объект.Наименование = ПолучитьНаименование(Объект.ВидОтчета, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Организация);	
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	Если ВидДокумента = 1 Тогда
		НомерКорректировки = 1;
	Иначе
		НомерКорректировки = 0;
	КонецЕсли;
	
	Объект.Версия = ВидДокумента * НомерКорректировки;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	Объект.Версия = ВидДокумента * НомерКорректировки;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПояснительнойЗапискиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ФайлПояснительнойЗаписки) Тогда
		УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ПояснительнаяЗаписка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПояснительнойЗапискиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлПриложенияОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ПояснительнаяЗаписка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПояснительнойЗапискиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ПояснительнаяЗаписка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлАудиторскогоЗаключенияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ФайлАудиторскогоЗаключения) Тогда
		УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.АудиторскоеЗаключение"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлАудиторскогоЗаключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлПриложенияОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.АудиторскоеЗаключение"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлАудиторскогоЗаключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.АудиторскоеЗаключение"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗаявленияРевизионногоСоюзаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ФайлЗаявленияРевизионногоСоюза) Тогда
		УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗаявленияРевизионногоСоюзаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайлПриложенияОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗаявленияРевизионногоСоюзаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПриложениеКБухгалтерскойОтчетности(ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыКомплектаПФР

&НаКлиенте
Процедура ФайлыКомплектаПФРПриИзменении(Элемент)
	
	ПронумероватьСтрокиТаблицы(ФайлыКомплекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПФРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ФайлыКомплектаСсылкаПоказать" Тогда	
		ОткрытьФайл(Элемент);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПФРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ФайлыКомплектаПередНачаломДобавления(Отказ, Копирование, Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПФРПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПФРПослеУдаления(Элемент)
	
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыКомлектаУведомлений

&НаКлиенте
Процедура ФайлыКомплектаУведомленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ФайлыКомплектаУведомленийСсылкаПоказать" Тогда	
		ОткрытьФайл(Элемент);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаУведомленийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ФайлыКомплектаПередНачаломДобавления(Отказ, Копирование, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаУведомленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаУведомленийПослеУдаления(Элемент)
	
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если Модифицированность И Не Записать()	ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПроверитьВИнтернетеНачало(
		Объект.Ссылка, Объект.Наименование, Не ЭтоУведомление, Объект.Организация, Объект.ТипПолучателя, КонтекстЭДОКлиент)
		
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если Модифицированность И НЕ Записать()	ИЛИ НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	Если СвойстваФайлов.Количество() > 0 Тогда
		Если Объект.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НДС") Тогда
			Для Каждого СвойстваФайла Из СвойстваФайлов Цикл
				Если СтрНайти(СвойстваФайла.ИмяФайла, "NO_NDS_") Тогда
					АдресДанных = СвойстваФайла.АдресДанных;
					ИмяФайла = СвойстваФайла.ИмяФайла;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			АдресДанных = СвойстваФайлов[0].АдресДанных;
			ИмяФайла = СвойстваФайлов[0].ИмяФайла;
		КонецЕсли;
		КонтекстЭДОКлиент.ПечатьЭлектронногоПредставления(Объект.Ссылка, АдресДанных, , ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Модифицированность И НЕ Записать()	ИЛИ НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	КонтекстЭДОКлиент.ВыгрузкаЭлектронногоПредставления(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, ИмяТекущегоТипаПолучателя(Объект.ТипПолучателя));
	
	ПрорисоватьСтатус(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИмпортироватьФайлыЗавершение(Результат)
	
	Если Результат Тогда
		ПрорисоватьСтатус(ЭтаФорма);
		ПрорисоватьФайлы();
		Модифицированность = Истина;
		ПронумероватьСтрокиТаблицы(ФайлыКомплекта);
		
		УправлениеФормой(ЭтаФорма);
	Иначе
		ПрорисоватьСтатус(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидОтчетаПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = Объект.ВидОтчета.ТипДокумента;
	Объект.ТипПолучателя = Объект.ВидОтчета.ТипПолучателя;
	
	ПривестиПолучателяКТипуНаСервере();
	
	ЗаполнитьПолучателяИзСвойствОрганизации();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПривестиПолучателяКТипуНаСервере()
	
	ТипФНС 	= Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ТипПФР 	= Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ТипФСС 	= Перечисления.ТипыКонтролирующихОрганов.ФСС;
	ТипФСГС = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
	ТипФСРАР = Перечисления.ТипыКонтролирующихОрганов.ФСРАР;
	ТипРПН = Перечисления.ТипыКонтролирующихОрганов.РПН;
	ТипФТС = Перечисления.ТипыКонтролирующихОрганов.ФТС;
	
	ТипПолучателя = Объект.ТипПолучателя;
	
	Если ЗначениеЗаполнено(ТипПолучателя) Тогда
		
		МассивТипов = Новый Массив;
		
		Если ТипПолучателя = ТипФНС Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.НалоговыеОрганы"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипПФР Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.ОрганыПФР"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипФСС Тогда
			МассивТипов.Добавить(Тип("Строка"));
			ПараметрыСтроки = Новый КвалификаторыСтроки(4);
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
		ИначеЕсли ТипПолучателя = ТипФСГС Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.ОрганыФСГС"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипФСРАР Тогда
			МассивТипов.Добавить(Тип("Неопределено"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипРПН Тогда
			МассивТипов.Добавить(Тип("Неопределено"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипФТС Тогда
			МассивТипов.Добавить(Тип("Неопределено"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		
		Элементы.Получатель.ОграничениеТипа = ДопустимыйТип;
		Объект.Получатель = ДопустимыйТип.ПривестиЗначение(Объект.Получатель);
		
		Элементы.Получатель.КнопкаВыбора  = 
			ТипПолучателя <> ТипФСС И ТипПолучателя <> ТипФСРАР И ТипПолучателя <> ТипРПН И ТипПолучателя <> ТипФТС;
	Иначе
		Элементы.Получатель.ОграничениеТипа = Новый ОписаниеТипов();
		Объект.Получатель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателяИзСвойствОрганизации()
	
	Организация   = Объект.Организация;
	ТипПолучателя = Объект.ТипПолучателя;
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(ТипПолучателя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО");
		Если ЗначениеЗаполнено(СведенияОбОрганизации) И ЗначениеЗаполнено(СведенияОбОрганизации.КодНО) Тогда
			ИФНС = Справочники.НалоговыеОрганы.НайтиПоКоду(СокрЛП(СведенияОбОрганизации.КодНО));
			Если НЕ ИФНС.Пустая() Тогда
				Объект.Получатель = ИФНС;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодОрганаПФР");
		Если ЗначениеЗаполнено(СведенияОбОрганизации) И ЗначениеЗаполнено(СведенияОбОрганизации.КодОрганаПФР) Тогда
			ОрганПФР = Справочники.ОрганыПФР.НайтиПоКоду(СокрЛП(СведенияОбОрганизации.КодОрганаПФР));
			Если НЕ ОрганПФР.Пустая() Тогда
				Объект.Получатель = ОрганПФР;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодПодчиненностиФСС");
		Если ЗначениеЗаполнено(СведенияОбОрганизации) И ЗначениеЗаполнено(СведенияОбОрганизации.КодПодчиненностиФСС) Тогда
			Объект.Получатель = Лев(СокрЛП(СведенияОбОрганизации.КодПодчиненностиФСС), 4);
		КонецЕсли;
	ИначеЕсли ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодОрганаФСГС");
		Если ЗначениеЗаполнено(СведенияОбОрганизации) И ЗначениеЗаполнено(СведенияОбОрганизации.КодОрганаФСГС) Тогда
			ОрганФСГС = Справочники.ОрганыФСГС.НайтиПоКоду(СокрЛП(СведенияОбОрганизации.КодОрганаФСГС));
			Если НЕ ОрганФСГС.Пустая() Тогда
				Объект.Получатель = ОрганФСГС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеКБухгалтерскойОтчетности(ТипФайлаБухгалтерскойОтчетности)
	
	// Получаем нужное приложение
	АдресДанных = "";
	ИмяФайлаПриложения = "";
	Для каждого Стр Из СвойстваФайлов Цикл
		Если Стр.ТипФайлаОтчетности = ТипФайлаБухгалтерскойОтчетности Тогда
			АдресДанных = Стр.АдресДанных;
			ИмяФайлаПриложения = Стр.ИмяФайла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(АдресДанных, ИмяФайлаПриложения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПриложениеКБухгалтерскойОтчетностиИзТаблицыСвойствФайлов(ТипФайлаОтчетности)
	
	Для каждого Стр Из СвойстваФайлов Цикл
		Если Стр.ТипФайлаОтчетности = ТипФайлаОтчетности Тогда
			СвойстваФайлов.Удалить(Стр);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлПриложенияОтчетности(ТипФайлаОтчетности)
	
	АдресДанных = "";
	
	ДополнительныеПараметры = Новый Структура("ТипФайлаОтчетности", ТипФайлаОтчетности);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлПриложенияОтчетностиЗавершениеПослеПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресДанных,, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлПриложенияОтчетностиЗавершениеПослеПомещенияФайла(
		ФайлыБылиВыбраны,
		АдресДанных,
		ВыбранноеИмяФайла,
		ДополнительныеПараметры) Экспорт
	
	Если ФайлыБылиВыбраны Тогда
		
		Файл = КонтекстЭДОКлиент.СвойстваФайла(АдресДанных, ВыбранноеИмяФайла);
		
		СвойстваФайла = Новый Структура();
		СвойстваФайла.Вставить("Имя",         Файл.Имя);
		СвойстваФайла.Вставить("ПолноеИмя",   Файл.ПолноеИмя);
		СвойстваФайла.Вставить("Расширение",  Файл.Расширение);
		СвойстваФайла.Вставить("АдресДанных", Файл.АдресДанных);
		
		ОпределитьФайлВТаблицеСвойствФайлов(
			СвойстваФайла.Имя,
			ДополнительныеПараметры.ТипФайлаОтчетности,
			СвойстваФайла.АдресДанных);
		
		УправлениеФормой(ЭтаФорма);
		
		ОбновитьПредставленияФайловПриложений();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьПредставленияФайловПриложений()
	
	ФайлПояснительнойЗаписки 		= ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка);
	ФайлАудиторскогоЗаключения 		= ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение);
	ФайлЗаявленияРевизионногоСоюза 	= ИмяФайлаПриложения(Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущегоТипаПолучателя(ТипПолучателя)
	
	Если ЗначениеЗаполнено(ТипПолучателя) Тогда
		Если ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			Возврат "ФНС";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			Возврат "ПФР";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			Возврат "ФСС";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда
			Возврат "ФСГС";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
			Возврат "ФСРАР";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
			Возврат "РПН";
		ИначеЕсли ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС") Тогда
			Возврат "ФТС";
		КонецЕсли;
	Иначе
		Возврат "ФНС";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КонтекстЭДОСервер()
	
	Если КонтекстЭДОСервер = Неопределено Тогда
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонецЕсли;
	
	Возврат КонтекстЭДОСервер;
	
КонецФункции

//параметр МассивФайлов - массив структур "Имя, ПолноеИмя, Расширение, АдресДанных"
&НаСервере
Функция ИмпортироватьФайлыНаСервере(ВыбранныеФайлы, ВыполнитьРазделениеФайла, ВыполнятьПроверкуКомплектаУведомлений)
	
	ВыбранныеФайлы = ВыбранныеФайлыСНужнымРасширением(ВыбранныеФайлы);
	Если ВыбранныеФайлы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Среди выбранных файлов не удалось обнаружить ни одного файла с расширением ""xml"" или ""txt""!");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВыбранныеФайлыРазбитыПриНеобходимости(ВыбранныеФайлы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсновнойФайл = ОсновнойИзВыбранныхФайлов(ВыбранныеФайлы);
	
	РезультатАнализа = ПроанализироватьФайлВыгрузки(ОсновнойФайл.АдресДанных, ОсновнойФайл.Имя);
	
	Если НЕ РезультатАнализа Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ЗагрузитьЭлектронныеПредставления(ВыбранныеФайлы);
	
	ДоопределитьСвойства();
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПривестиПолучателяКТипу(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТипФНС = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС");
	ТипПФР = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР");
	ТипФСС = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
	ТипФСГС = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС");
	ТипФСРАР = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР");
	ТипРПН = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН");
	ТипФТС = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС");
	
	ТипПолучателя = Объект.ТипПолучателя;
	
	Если ЗначениеЗаполнено(ТипПолучателя) Тогда
		
		МассивТипов = Новый Массив;
		
		Если ТипПолучателя = ТипФНС Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.НалоговыеОрганы"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипПФР Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.ОрганыПФР"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипФСС Тогда
			МассивТипов.Добавить(Тип("Строка"));
			ПараметрыСтроки = Новый КвалификаторыСтроки(4);
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);
		ИначеЕсли ТипПолучателя = ТипФСГС Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.ОрганыФСГС"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипФСРАР Тогда
			МассивТипов.Добавить(Тип("Неопределено"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипРПН Тогда
			МассивТипов.Добавить(Тип("Неопределено"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		ИначеЕсли ТипПолучателя = ТипФТС Тогда
			МассивТипов.Добавить(Тип("Неопределено"));
			ДопустимыйТип = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		
		Элементы.Получатель.ОграничениеТипа = ДопустимыйТип;
		Получатель = ДопустимыйТип.ПривестиЗначение(Получатель);
		
		Элементы.Получатель.КнопкаВыбора 	= НЕ ТипПолучателя = ТипФСС И НЕ ТипПолучателя = ТипФСРАР И НЕ ТипПолучателя = ТипРПН И НЕ ТипПолучателя = ТипФТС;
		Элементы.Получатель.КнопкаОчистки 	= НЕ ТипПолучателя = ТипФСС И НЕ ТипПолучателя = ТипФСРАР И НЕ ТипПолучателя = ТипРПН И НЕ ТипПолучателя = ТипФТС;
		
	Иначе
		Элементы.Получатель.ОграничениеТипа = Новый ОписаниеТипов();
		Получатель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьФайлыВыгрузкиУведомленияОКонтролируемыхСделках(ФайлыОтчетов)
	
	ТаблицаСИнформациейОФайлахОтчетов = Новый ТаблицаЗначений;
	ТаблицаСИнформациейОФайлахОтчетов.Колонки.Добавить("ПолныйПуть");
	ТаблицаСИнформациейОФайлахОтчетов.Колонки.Добавить("ИмяФайла");
	ТаблицаСИнформациейОФайлахОтчетов.Колонки.Добавить("ИдФайлИсх");
	ТаблицаСИнформациейОФайлахОтчетов.Колонки.Добавить("ИдФайлПерв");
	ТаблицаСИнформациейОФайлахОтчетов.Колонки.Добавить("КолФайл");
	ТаблицаСИнформациейОФайлахОтчетов.Колонки.Добавить("НомФайл");
	ТаблицаСИнформациейОФайлахОтчетов.Колонки.Добавить("ВерсФорм");
	
	КонтекстЭДОСервер = КонтекстЭДОСервер();
	Для каждого ФайлОтчета Из ФайлыОтчетов Цикл
		
		МаксимальныйРазмер = КонтекстЭДОСервер.МаксимальныйРазмерФайлаУведомленияОКонтролируемыхСделках();
		
		ВремФайл = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ФайлОтчета.АдресДанных);
		ДвоичныеДанныеФайла.Записать(ВремФайл);
		
		Если РазмерФайла(ВремФайл) > МаксимальныйРазмер Тогда
			МаксимальныйРазмерВМб = МаксимальныйРазмер / 1024 / 1024;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Размер файла %2 превышает максимально допустимый (%1 Мб). Загрузка файлов будет прервана'"), 
				Строка(МаксимальныйРазмерВМб),  ВремФайл);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		НоваяСтрокаТаблицы = ТаблицаСИнформациейОФайлахОтчетов.Добавить();
		НоваяСтрокаТаблицы.ПолныйПуть = ВремФайл;
		НоваяСтрокаТаблицы.ИмяФайла = КороткоеИмяФайлаПоПолному(ВремФайл);
		
		ИдФайлИсхНайден 	= Ложь;
		ИдФайлПервНайден 	= Ложь;
		КолФайлНайден 		= Ложь;
		НомФайлНайден 		= Ложь;
		ВерсФормНайден 		= Ложь;
		
		// определяем номер файла в комплекте на основе XML тэга
		ФайлXML = Новый ЧтениеXML;
		ФайлXML.ОткрытьФайл(ВремФайл);
		НомерФайла = 0;
		Пока ФайлXML.Прочитать() Цикл
			Пока ФайлXML.ПрочитатьАтрибут() Цикл
				Если ФайлXML.Имя = "ИдФайлИсх" Тогда
					НоваяСтрокаТаблицы.ИдФайлИсх = XMLЗначение(Тип("Строка"), ФайлXML.Значение);
					ИдФайлИсхНайден = Истина;
				КонецЕсли;
				Если ФайлXML.Имя = "ИдФайлПерв" Тогда
					НоваяСтрокаТаблицы.ИдФайлПерв = XMLЗначение(Тип("Строка"), ФайлXML.Значение);
					ИдФайлПервНайден = Истина;
				КонецЕсли;
				Если ФайлXML.Имя = "КолФайл" Тогда
					НоваяСтрокаТаблицы.КолФайл = XMLЗначение(Тип("Число"), ФайлXML.Значение);
					КолФайлНайден = Истина;
				КонецЕсли;
				Если ФайлXML.Имя = "НомФайл" Тогда
					НоваяСтрокаТаблицы.НомФайл = XMLЗначение(Тип("Число"), ФайлXML.Значение);
					НомФайлНайден = Истина;
				КонецЕсли;
				Если ФайлXML.Имя = "ВерсФорм" Тогда
					НоваяСтрокаТаблицы.ВерсФорм = XMLЗначение(Тип("Строка"), ФайлXML.Значение);
					
					// проверка на формат файла
					Если НоваяСтрокаТаблицы.ВерсФорм <> "5.02" И ФайлыОтчетов.Количество() > 1 Тогда
						// если файл имеет формат 5.01 и файлов несколько, то это неверно
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файлы с версией, отличной от 5.02, не могут быть загружены комплектом'"));
						Возврат Ложь;
					ИначеЕсли НоваяСтрокаТаблицы.ВерсФорм = "5.01" И ФайлыОтчетов.Количество() = 1 Тогда
						// если файл имеет формат 5.01 и файл всего один, то дальше его не проверяем
						Возврат Истина;
					КонецЕсли;
					ВерсФормНайден = Истина;
				КонецЕсли;
			КонецЦикла; 
			Если ИдФайлИсхНайден И ИдФайлПервНайден И КолФайлНайден И НомФайлНайден И ВерсФормНайден Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		ФайлXML.Закрыть();
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ВремФайл);
		
	КонецЦикла;
	
	// проверка поля ИдФайлИсх и ИдФайлПерв
	ТаблицаПроверкиИдФайлИсх = ТаблицаСИнформациейОФайлахОтчетов.Скопировать();
	ТаблицаПроверкиИдФайлИсх.Свернуть("ИдФайлИсх, ИдФайлПерв");
	Если ТаблицаПроверкиИдФайлИсх.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В файлах различаются значения в полях ИдФайлИсх, ИдФайлПерв. Загрузка файлов будет прервана'"));
		Возврат Ложь;
	КонецЕсли;
	
	// проверка поля КолФайл
	ТаблицаПроверкиКолФайл = ТаблицаСИнформациейОФайлахОтчетов.Скопировать();
	ТаблицаПроверкиКолФайл.Свернуть("КолФайл");
	КоличествоВыбранныхФайлов = ФайлыОтчетов.Количество();
	КоличествоИзТэгаКолФайл = ТаблицаПроверкиКолФайл[0].КолФайл;
	КоличествоИзТэгаКолФайл = ?(КоличествоИзТэгаКолФайл = Неопределено, 1, КоличествоИзТэгаКолФайл);
	Если КоличествоИзТэгаКолФайл <> КоличествоВыбранныхФайлов Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В описании к файлам число файлов комплекта не соответствует числу выбранных файлов. Загрузка файлов будет прервана'"));
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаПроверкиКолФайл.Свернуть("КолФайл");
	Если ТаблицаПроверкиКолФайл.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В файлах различается значение в поле КолФайл. Загрузка файлов будет прервана'"));
		Возврат Ложь;
	КонецЕсли;
	
	// проверка полей НомФайл
	ТаблицаСИнформациейОФайлахОтчетов.Сортировать("НомФайл");
	КоличествоФайлов =  ТаблицаСИнформациейОФайлахОтчетов.Количество();
	Для сч = 0 По КоличествоФайлов - 1 Цикл
		
		НомерТекущегоФайла = ТаблицаСИнформациейОФайлахОтчетов[сч].НомФайл;
		НомерТекущегоФайла = ?(НомерТекущегоФайла = Неопределено, 1, НомерТекущегоФайла);
		
		Если НомерТекущегоФайла <> сч + 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не все файлы комплекта выбраны. Загрузка файлов будет прервана'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция КороткоеИмяФайлаПоПолному(ПолноеИмяФайла)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	Возврат ОбъектФайл.Имя;
	
КонецФункции

&НаСервере
Функция РазмерФайла(ПолноеИмяФайла)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	Возврат ОбъектФайл.Размер();
	
КонецФункции

&НаСервере
Процедура ОпределитьФайлВТаблицеСвойствФайлов(КороткоеИмяФайла, ТипФайлаОтчетности, АдресДанных, ЗамещатьПоТипу = Истина)
	
	Если ЗамещатьПоТипу Тогда
		РезультатПоиска = СвойстваФайлов.НайтиСтроки(Новый Структура("ТипФайлаОтчетности", ТипФайлаОтчетности));
		Для Каждого Стр Из РезультатПоиска Цикл
			СвойстваФайлов.Удалить(Стр);
		КонецЦикла;
	КонецЕсли;
	
	ОпределитьНовыйФайлВТаблицеСвойствФайлов(КороткоеИмяФайла, ТипФайлаОтчетности, АдресДанных);
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеВидаДокумента(Вид) Экспорт
	
	Если Вид = 0 Тогда
		Возврат "П";
	ИначеЕсли Вид = Неопределено Тогда
		Возврат "-";
	Иначе
		Возврат "К/" + Вид;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОпределитьНовыйФайлВТаблицеСвойствФайлов(ИмяФайла, ТипФайла, АдресДанных)
	
	НовСтр = СвойстваФайлов.Добавить();
	НовСтр.ИмяФайла = ИмяФайла;
	НовСтр.ТипФайлаОтчетности = ТипФайла;
	НовСтр.АдресДанных = АдресДанных;
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаПриложения(ТипПриложения)
	
	Если СвойстваФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// пробуем найти основной файл бух. отчетности
	Для каждого Стр Из СвойстваФайлов Цикл
		Если Стр.ТипФайлаОтчетности = ТипПриложения Тогда
			Возврат Стр.ИмяФайла;
		КонецЕсли;
	КонецЦикла;

	Возврат ""

КонецФункции

&НаСервере
Процедура ЗагрузитьЭлектронныеПредставления(МассивФайлов)
	
	// очищаем таблицу свойств файлов
	СвойстваФайлов.Очистить();
	
	// загружаем файлы последовательно
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		ЗагрузитьЭлектронноеПредставление(ВыбранныйФайл);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЭлектронноеПредставление(ВыбранныйФайл)
	
	ПолноеИмяФайла = КаталогВременныхФайлов() + ВыбранныйФайл.Имя;
	
	ПолучитьИзВременногоХранилища(ВыбранныйФайл.АдресДанных).Записать(ПолноеИмяФайла);
	
	Если КонтекстЭДОСервер.ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках(ВыбранныйФайл.Имя) Тогда
		ОпределитьФайлВТаблицеСвойствФайлов(ВыбранныйФайл.Имя, Неопределено, ВыбранныйФайл.АдресДанных, Ложь);
	Иначе
		ОпределитьФайлВТаблицеСвойствФайлов(ВыбранныйФайл.Имя, ОпределитьТипФайлаПФРилиБО(ПолноеИмяФайла), ВыбранныйФайл.АдресДанных, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТипФайлаПФРилиБО(ПолноеИмяФайла)
	
	// пытаемся определить, является ли файл частью БО и если Да, то какой именно
	ТипФайлаБО = ОпределитьТипФайлаБО(ПолноеИмяФайла);
	Если ТипФайлаБО <> Неопределено Тогда
		Возврат ТипФайлаБО;
	КонецЕсли;
	
	// пытаемся определить, является ли файл отчетом НДС и если Да, то каким
	ТипФайлаОтчетностиНДС = ОпределитьТипФайлаНДС(ПолноеИмяФайла);
	Если ТипФайлаОтчетностиНДС <> Неопределено Тогда
		Возврат ТипФайлаОтчетностиНДС;
	КонецЕсли;
	
	// пытаемся определить, является ли файл отчетом ПФР и если Да, то каким
	ТипФайлаОтчетностиПФР = ОпределитьТипФайлаПФР(ПолноеИмяФайла);
	Если ТипФайлаОтчетностиПФР <> Неопределено Тогда
		Возврат ТипФайлаОтчетностиПФР;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТипФайлаНДС(ПолноеИмяФайла)
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла).ИмяБезРасширения;
	Если СтрНайти(ИмяФайла, "NO_NDS_") = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности");
	ИначеЕсли СтрНайти(ИмяФайла, "NO_NDS.") = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыСодержимогоТранспортногоКонтейнера.Приложение");
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьТипФайлаПФР(ПолноеИмяФайла)
	
	// 
	ДеревоXML = ДеревоXMLИзФайла(ПолноеИмяФайла);
	Если ДеревоXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	Если ВРЕГ(Лев(КороткоеИмяФайла, 4)) = "ПФР_" Тогда
		УзелПачкаВходящихДокументов = ДеревоXML;
		
	Иначе
		Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	КонецЕсли;
	
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Если СвойстваУзла.Получить("АНКЕТА_ЗЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_ОБ_ОБМЕНЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДУБЛИКАТЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		
		УзелСведения = УзелПачкаВходящихДокументов.СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ;
		Если ТипЗнч(УзелСведения) = Тип("ОбъектXDTO") Тогда
			УзелСведенияОсновной = УзелСведения;
		Иначе
			Если УзелСведения.Количество() > 0 Тогда
				УзелСведенияОсновной = УзелСведения.Получить(0);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если УзелСведенияОсновной.Свойства().Получить("ВидФормы") <> Неопределено
		И СокрЛП(УзелСведенияОсновной.ВидФормы) = "СПВ-1" Тогда
			Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
		Иначе
			Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
		КонецЕсли;
		
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СТРАХОВОМ_СТАЖЕ_ЗЛ_ДЛЯ_УСТАНОВЛЕНИЯ_ПЕНСИИ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
	ИначеЕсли СвойстваУзла.Получить("ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_ВОЗНАГРАЖДЕНИЙ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("КОНВЕРТАЦИЯ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2012_ГОДА") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2013_ГОДА") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2014") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2015") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_ПО_ПАЧКЕ_ДОКУМЕНТОВ_РАЗДЕЛА_6") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_НЕ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ГЛАВАМИ_КФХ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РСВ-2") <> Неопределено ИЛИ СвойстваУзла.Получить("РСВ_2") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_ВЗНОСАМ_НА_ДОПОЛНИТЕЛЬНОЕ_СОЦИАЛЬНОЕ_ОБЕСПЕЧЕНИЕ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("РВ-3") <> Неопределено ИЛИ СвойстваУзла.Получить("РВ_3") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДОБРОВОЛЬНОМ_ВСТУПЛЕНИИ_В_ПРАВООТНОШЕНИЯ_В_ЦЕЛЯХ_УПЛАТЫ_ДСВ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаДСВ;
	ИначеЕсли СвойстваУзла.Получить("РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.РеестрДСВ;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ВЕДОМОСТЬ_УПЛАТЫ") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
	ИначеЕсли СвойстваУзла.Получить("ИС_СЗВ-4-1") <> Неопределено ИЛИ СвойстваУзла.Получить("ИС_СЗВ_4_1") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("ИС_СЗВ-4-2") <> Неопределено ИЛИ СвойстваУзла.Получить("ИС_СЗВ_4_2") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ-1") <> Неопределено ИЛИ СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ_1") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ-3") <> Неопределено ИЛИ СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ_3") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	ИначеЕсли СвойстваУзла.Получить("СЗВ-М") <> Неопределено ИЛИ СвойстваУзла.Получить("СЗВ_М") <> Неопределено Тогда
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
	Иначе
		Возврат Перечисления.ТипыФайловОтчетностиПФР.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДеревоXMLИзФайла(ПутьКФайлу)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
		Фабрика = Новый ФабрикаXDTO;
		ДеревоXML = Фабрика.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		Возврат ДеревоXML;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ОпределитьТипФайлаБО(ПолноеИмяФайла)
	
	// формируем вспомогательное соответствие
	СоответствиеПрефиксаТипуФайлаБухОтчетности = Новый Соответствие;
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHOTCH_", Перечисления.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHPZ_", Перечисления.ТипыФайловБухОтчетности.ЗаявлениеСоюзаСельхозПроизводителей);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHAZ_", Перечисления.ТипыФайловБухОтчетности.ПояснительнаяЗаписка);
	СоответствиеПрефиксаТипуФайлаБухОтчетности.Вставить("NO_BUHZSHP_", Перечисления.ТипыФайловБухОтчетности.АудиторскоеЗаключение);
	
	// определяем короткое имя файла
	КороткоеИмяФайла = ВРЕГ(КороткоеИмяФайлаПоПолному(ПолноеИмяФайла));
	
	// подбираем префиксы
	Для Каждого Эл Из СоответствиеПрефиксаТипуФайлаБухОтчетности Цикл
		Если Лев(КороткоеИмяФайла, СтрДлина(Эл.Ключ)) = Эл.Ключ Тогда
			Возврат Эл.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузки(Адрес, КороткоеИмяФайла)

	Если НЕ ЭтоАдресВременногоХранилища(Адрес) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось открыть файл выгрузки!");
		Возврат Ложь;
	КонецЕсли;
	ПолноеИмяФайла = КаталогВременныхФайлов() + КороткоеИмяФайла;
	
	ПолучитьИзВременногоХранилища(Адрес).Записать(ПолноеИмяФайла);
	
	РезультатАнализа = Истина;
	Если ЭтоФайлВыгрузкиПФР(ПолноеИмяФайла) Тогда
		Объект.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиПФР(ПолноеИмяФайла);
	ИначеЕсли ЭтоФайлВыгрузкиФСС(ПолноеИмяФайла) Тогда
		Объект.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиФСС(ПолноеИмяФайла);
	ИначеЕсли ЭтоФайлВыгрузкиФНС(ПолноеИмяФайла) Тогда
		Объект.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиФНС(ПолноеИмяФайла);
	ИначеЕсли ЭтоФайлВыгрузкиФСГС(ПолноеИмяФайла) Тогда
		Объект.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиФСГС(ПолноеИмяФайла);
	ИначеЕсли ЭтоФайлВыгрузкиФСРАР(ПолноеИмяФайла) Тогда
		ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСРАР;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиФСРАР(ПолноеИмяФайла);
	ИначеЕсли ЭтоФайлВыгрузкиРПН(ПолноеИмяФайла) Тогда
		ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.РПН;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиРПН(ПолноеИмяФайла);
	ИначеЕсли ЭтоФайлВыгрузкиФТС(ПолноеИмяФайла) Тогда
		ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФТС;
		РезультатАнализа = ПроанализироватьФайлВыгрузкиФТС(ПолноеИмяФайла);
	КонецЕсли;
	
	Возврат РезультатАнализа;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиФСРАР(ОсновнойФайл)
	
	// структура-результат
	ПараметрыИмпорта = Новый Структура;
	
	// служебное соответствие
	СоответствиеПрефиксовВидамОтправляемыхДокументов = Новый Соответствие;
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("D1_", Справочники.ВидыОтправляемыхДокументов.ПроизводствоИОборотЭтиловогоСпирта);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("D2_", Справочники.ВидыОтправляемыхДокументов.ИспользованиеЭтиловогоСпирта);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("D3_", Справочники.ВидыОтправляемыхДокументов.ПроизводствоИОборотАлкогольнойИСпиртосодержащейПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("D4_", Справочники.ВидыОтправляемыхДокументов.ИспользованиеАлкогольнойИСпиртосодержащейПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("D5_", Справочники.ВидыОтправляемыхДокументов.ОборотЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("D6_", Справочники.ВидыОтправляемыхДокументов.ПоставкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("D7_", Справочники.ВидыОтправляемыхДокументов.ЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("N1_", Справочники.ВидыОтправляемыхДокументов.ОбъемПеревозкиЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("N2_", Справочники.ВидыОтправляемыхДокументов.ПеревозкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("N3_", Справочники.ВидыОтправляемыхДокументов.ИспользованиеМощностейПоПроизводствуЭтиловогоСпиртаИАлкогольнойПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("R1_", Справочники.ВидыОтправляемыхДокументов.РозничнаяПродажаАлкогольнойИСпиртосодержащейПродукции);
	СоответствиеПрефиксовВидамОтправляемыхДокументов.Вставить("R2_", Справочники.ВидыОтправляемыхДокументов.РозничнаяПродажаПиваИПивныхНапитков);
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	
	// загружаем XML в дерево
	ДеревоXML = ДеревоXMLИзФайла(ОсновнойФайл);
	
	// определяем вид отправляемого документа
	Префикс = ВРЕГ(Лев(КороткоеИмяФайла, 3));
	ВидОтправляемогоДокумента = СоответствиеПрефиксовВидамОтправляемыхДокументов[Префикс];
	Если ВидОтправляемогоДокумента = Неопределено Тогда
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке(НСтр("ru='Не удалось определить тип файла выгрузки!'"), Ложь);
		Возврат Ложь;
	КонецЕсли;
	ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтправляемогоДокумента);
	
	// пытаемся определить организацию
	РезультатОпределения = ОпределитьОрганизациюФСРАР(ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("Организация", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить период
	РезультатОпределения = ОпределитьПериодФСРАР(ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		Если РезультатОпределения.Свойство("ДатаНачалаПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаНачалаПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", РезультатОпределения.ДатаНачалаПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("ДатаОкончанияПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаОкончанияПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", РезультатОпределения.ДатаОкончанияПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Периодичность") И ЗначениеЗаполнено(РезультатОпределения.Периодичность) Тогда
			ПараметрыИмпорта.Вставить("Периодичность", РезультатОпределения.Периодичность);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Год") И ЗначениеЗаполнено(РезультатОпределения.Год) Тогда
			ПараметрыИмпорта.Вставить("Год", РезультатОпределения.Год);
		КонецЕсли;
	КонецЕсли;
	
	// пытаемся определить версию
	РезультатОпределения = ОпределитьНомерКорректировкиФСРАР(ДеревоXML);
	Если РезультатОпределения <> Неопределено Тогда
		ПараметрыИмпорта.Вставить("ВидДокумента", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить тип получателя
	Если НЕ ЗначениеЗаполнено(Объект.ТипПолучателя) И НЕ ПараметрыИмпорта.Свойство("ТипПолучателя") Тогда
		Если ЗначениеЗаполнено(Объект.ВидОтчета) И ЗначениеЗаполнено(Объект.ВидОтчета.ТипПолучателя) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", Объект.ВидОтчета.ТипПолучателя);
		ИначеЕсли ЗначениеЗаполнено(Объект.Получатель) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ТипПолучателяПоТипуЗначенияПолучатель(Объект.Получатель));
		Иначе
			ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСРАР);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		Объект.Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		Объект.ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Объект.Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Если ПараметрыИмпорта.Свойство("Год") И ЗначениеЗаполнено(ПараметрыИмпорта.Год) Тогда
			ДатаНачала = Дата(ПараметрыИмпорта.Год, 1, 1);
			ДатаОкончания = Дата(ПараметрыИмпорта.Год, 12, 31);
			Периодичность = Перечисления.Периодичность.Год;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипПолучателя) Тогда
		Объект.ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	КонецЕсли;
	Объект.Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	
	Объект.ДатаИмпорта = ТекущаяДатаСеанса();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрИмпорта(ПараметрыИмпорта, ИмяПараметра)
	
	Результат = Неопределено;
	ПараметрыИмпорта.Свойство(ИмяПараметра, Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипПолучателяПоТипуЗначенияПолучатель(Получатель)
	
	ТипЗначенияПолучатель = ТипЗнч(Получатель);
	Если ТипЗначенияПолучатель = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		Возврат Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ИначеЕсли ТипЗначенияПолучатель = Тип("СправочникСсылка.ОрганыПФР") Тогда
		Возврат Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ИначеЕсли ТипЗначенияПолучатель = Тип("СправочникСсылка.ОрганыФСГС") Тогда
		Возврат Перечисления.ТипыКонтролирующихОрганов.ФСГС;
	ИначеЕсли ТипЗначенияПолучатель = Тип("Строка") Тогда
		Возврат Перечисления.ТипыКонтролирующихОрганов.ФСС;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьОрганизациюФСРАР(ДеревоXML)
	
	Если ДеревоXML.Свойства().Получить("Документ") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелДокумент = ДеревоXML.Документ;
	
	Если УзелДокумент.Свойства().Получить("Организация") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелОрганизация = УзелДокумент.Организация;
	
	Если УзелОрганизация.Свойства().Получить("Реквизиты") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелРеквизиты = УзелОрганизация.Реквизиты;
	
	_ИНН = "";
	_КПП = "";
	Если УзелРеквизиты.Свойства().Получить("ИННЮЛ") <> Неопределено И УзелРеквизиты.Свойства().Получить("КППЮЛ") <> Неопределено Тогда
		_ИНН = СокрЛП(УзелРеквизиты.ИННЮЛ);
		_КПП = СокрЛП(УзелРеквизиты.КППЮЛ);
	ИначеЕсли УзелРеквизиты.Свойства().Получить("ЮЛ") <> Неопределено Тогда
		УзелЮЛ = УзелРеквизиты.ЮЛ;
		Если УзелЮЛ.Свойства().Получить("ИННЮЛ") <> Неопределено Тогда
			_ИНН = СокрЛП(УзелЮЛ.ИННЮЛ);
		КонецЕсли;
		Если УзелЮЛ.Свойства().Получить("КППЮЛ") <> Неопределено Тогда
			_КПП = СокрЛП(УзелЮЛ.КППЮЛ);
		КонецЕсли;
	ИначеЕсли УзелРеквизиты.Свойства().Получить("ФЛ") <> Неопределено Тогда
		УзелФЛ = УзелРеквизиты.ФЛ;
		Если УзелФЛ.Свойства().Получить("ИННФЛ") <> Неопределено Тогда
			_ИНН = СокрЛП(УзелФЛ.ИННФЛ);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОпределитьОрганизациюПоИННиКПП(_ИНН, _КПП);
	
КонецФункции

&НаСервере
Функция ОпределитьОрганизациюПоИННиКПП(ИНН, КПП)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
	
КонецФункции

&НаСервере
Функция ОпределитьНомерКорректировкиФСРАР(ДеревоXML);
	
	Если ДеревоXML.Свойства().Получить("ФормаОтч") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелФормаОтч = ДеревоXML.ФормаОтч;
	
	Если УзелФормаОтч.Свойства().Получить("Первичная") <> Неопределено Тогда
		Возврат 0;
	ИначеЕсли УзелФормаОтч.Свойства().Получить("Корректирующая") <> Неопределено Тогда
		УзелКорректирующая = УзелФормаОтч.Корректирующая;
		Если УзелКорректирующая.Свойства().Получить("НомерКорр") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Число(УзелКорректирующая.НомерКорр);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьПериодФСРАР(ДеревоXML)
	
	Результат = Новый Структура;
	
	Если ДеревоXML.Свойства().Получить("ФормаОтч") = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	УзелФормаОтч = ДеревоXML.ФормаОтч;
	
	Если УзелФормаОтч.Свойства().Получить("ГодПериодОтч") = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ОтчетныйГод = Число(СокрЛП(УзелФормаОтч.ГодПериодОтч));
	
	Если УзелФормаОтч.Свойства().Получить("ПризПериодОтч") = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ПризПериодОтч = СокрЛП(УзелФормаОтч.ПризПериодОтч);
	
	Если ПризПериодОтч = "3" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 1, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 3, 31));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	ИначеЕсли ПризПериодОтч = "6" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 4, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 6, 30));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	ИначеЕсли ПризПериодОтч = "9" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 7, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 9, 30));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	ИначеЕсли ПризПериодОтч = "0" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 10, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 12, 31));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	КонецЕсли;
	Результат.Вставить("Год", ОтчетныйГод);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоФайлВыгрузкиФСРАР(ОсновнойФайл)
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	Расширение = нрег(РасширениеФайла(ОсновнойФайл));
	Если Расширение <> "xml" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВозможныеПрефиксы = Новый Массив;
	ВозможныеПрефиксы.Добавить("D1_");
	ВозможныеПрефиксы.Добавить("D2_");
	ВозможныеПрефиксы.Добавить("D3_");
	ВозможныеПрефиксы.Добавить("D4_");
	ВозможныеПрефиксы.Добавить("D5_");
	ВозможныеПрефиксы.Добавить("D6_");
	ВозможныеПрефиксы.Добавить("D7_");
	ВозможныеПрефиксы.Добавить("N1_");
	ВозможныеПрефиксы.Добавить("N2_");
	ВозможныеПрефиксы.Добавить("N3_");
	ВозможныеПрефиксы.Добавить("R1_");
	ВозможныеПрефиксы.Добавить("R2_");
	
	Префикс = ВРЕГ(Лев(КороткоеИмяФайла, 3));
	Если ВозможныеПрефиксы.Найти(Префикс) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиРПН(ОсновнойФайл)
	
	// структура-результат
	ПараметрыИмпорта = Новый Структура;
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	
	// загружаем XML в дерево
	ДеревоXML = ДеревоXMLИзФайла(ОсновнойФайл);
	
	// определяем вид отправляемого документа
	Префикс = нрег(Лев(КороткоеИмяФайла, 15));
	Если СтрНайти(Префикс, "рсч_") > 0 ИЛИ СтрНайти(Префикс, "онв_") > 0 Тогда
		ВидОтправляемогоДокумента = Справочники.ВидыОтправляемыхДокументов.РасчетПлатыОкрСреда;
	ИначеЕсли СтрНайти(Префикс, "мсп_") > 0 Тогда
		ВидОтправляемогоДокумента = Справочники.ВидыОтправляемыхДокументов.ОтходыСубъектовМСП;
	ИначеЕсли СтрНайти(Префикс, "2тпо_") > 0 Тогда
		ВидОтправляемогоДокумента = Справочники.ВидыОтправляемыхДокументов.Форма2ТПОтходы;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось определить тип файла выгрузки!'"));
		Возврат Ложь;
	КонецЕсли;
	ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтправляемогоДокумента);
	
	// Если в отчете несколько разных организаций, то загрузку запрещаем.
	// Если несколько подразделений одной организации - то разрешаем
	Если Тип(ДеревоXML.ORG_INFO) = Тип("СписокXDTO") Тогда
		СписокУзловORG_INFO = ДеревоXML.ORG_INFO;
		
		ИННВПервомУзел = "";
		Для каждого УзелORG_INFO Из СписокУзловORG_INFO Цикл
			
			ИННВТекущемУзле = "";
			Если УзелORG_INFO.Свойства().Получить("INN") <> Неопределено Тогда
				ИННВТекущемУзле = СокрЛП(УзелORG_INFO.INN);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИННВТекущемУзле) Тогда
				Если НЕ ЗначениеЗаполнено(ИННВПервомУзел) Тогда
					ИННВПервомУзел = ИННВТекущемУзле;
				ИначеЕсли ИННВПервомУзел <> ИННВТекущемУзле Тогда
					// Значит в файле несколько разных организаций
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Отправка файлов, содержащих отчетность по нескольким организациям, не поддерживается'"));
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	// пытаемся определить организацию
	РезультатОпределения = ОпределитьОрганизациюРПН(ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("Организация", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить период
	РезультатОпределения = ОпределитьПериодРПН(ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		Если РезультатОпределения.Свойство("ДатаНачалаПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаНачалаПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", РезультатОпределения.ДатаНачалаПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("ДатаОкончанияПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаОкончанияПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", РезультатОпределения.ДатаОкончанияПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Периодичность") И ЗначениеЗаполнено(РезультатОпределения.Периодичность) Тогда
			ПараметрыИмпорта.Вставить("Периодичность", РезультатОпределения.Периодичность);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Год") И ЗначениеЗаполнено(РезультатОпределения.Год) Тогда
			ПараметрыИмпорта.Вставить("Год", РезультатОпределения.Год);
		КонецЕсли;
	КонецЕсли;
	
	// пытаемся определить версию
	РезультатОпределения = ОпределитьНомерКорректировкиРПН(ДеревоXML);
	Если РезультатОпределения <> Неопределено Тогда
		ПараметрыИмпорта.Вставить("ВидДокумента", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить тип получателя
	Если НЕ ЗначениеЗаполнено(Объект.ТипПолучателя) И НЕ ПараметрыИмпорта.Свойство("ТипПолучателя") Тогда
		Если ЗначениеЗаполнено(Объект.ВидОтчета) И ЗначениеЗаполнено(Объект.ВидОтчета.ТипПолучателя) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", Объект.ВидОтчета.ТипПолучателя);
		ИначеЕсли ЗначениеЗаполнено(Объект.Получатель) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ТипПолучателяПоТипуЗначенияПолучатель(Объект.Получатель));
		Иначе
			ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.РПН);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем текст на форме
	ЧтениеТекста = Новый ЧтениеТекста(ОсновнойФайл, "UTF-8");
	ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Объект.Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	Объект.ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	Объект.ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	Объект.ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	Объект.Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	Объект.Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	Объект.ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	
	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	Объект.ДатаИмпорта = ТекущаяДатаСеанса();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиФТС(ОсновнойФайл)
	
	// структура-результат
	ПараметрыИмпорта = Новый Структура;
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	
	// загружаем XML в дерево
	ДеревоXML = ДеревоXMLИзФайла(ОсновнойФайл);
	
	// определяем вид отправляемого документа
	ВидОтправляемогоДокумента = Справочники.ВидыОтправляемыхДокументов.СтатистикаФормаУчетаПеремещенияТоваровТС;
	ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтправляемогоДокумента);
	
	// пытаемся определить организацию
	РезультатОпределения = ОпределитьОрганизациюФТС(ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("Организация", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить период
	РезультатОпределения = ОпределитьПериодФТС(ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		Если РезультатОпределения.Свойство("ДатаНачалаПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаНачалаПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", РезультатОпределения.ДатаНачалаПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("ДатаОкончанияПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаОкончанияПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", РезультатОпределения.ДатаОкончанияПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Периодичность") И ЗначениеЗаполнено(РезультатОпределения.Периодичность) Тогда
			ПараметрыИмпорта.Вставить("Периодичность", РезультатОпределения.Периодичность);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Год") И ЗначениеЗаполнено(РезультатОпределения.Год) Тогда
			ПараметрыИмпорта.Вставить("Год", РезультатОпределения.Год);
		КонецЕсли;
	КонецЕсли;
	
	// пытаемся определить версию
	РезультатОпределения = ОпределитьНомерКорректировкиФТС(ДеревоXML);
	Если РезультатОпределения <> Неопределено Тогда
		ПараметрыИмпорта.Вставить("ВидДокумента", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить тип получателя
	Если НЕ ЗначениеЗаполнено(Объект.ТипПолучателя) И НЕ ПараметрыИмпорта.Свойство("ТипПолучателя") Тогда
		Если ЗначениеЗаполнено(Объект.ВидОтчета) И ЗначениеЗаполнено(Объект.ВидОтчета.ТипПолучателя) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", Объект.ВидОтчета.ТипПолучателя);
		ИначеЕсли ЗначениеЗаполнено(Объект.Получатель) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ТипПолучателяПоТипуЗначенияПолучатель(Объект.Получатель));
		Иначе
			ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФТС);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем текст на форме
	ЧтениеТекста = Новый ЧтениеТекста(ОсновнойФайл, "UTF-8");
	ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Объект.Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	Объект.ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	Объект.ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	Объект.ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	Объект.Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	Объект.Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	Объект.ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	
	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	Объект.ДатаИмпорта = ТекущаяДатаСеанса();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОпределитьПериодРПН(ДеревоXML)
	
	Результат = Новый Структура;
	
	Если ДеревоXML.Свойства().Получить("YEAR") = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ОтчетныйГод = СокрЛП(ДеревоXML.YEAR);
	
	Если ДеревоXML.Свойства().Получить("RPT_PERIOD") = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ПериодОтч = СокрЛП(ДеревоXML.RPT_PERIOD);
	
	Если ПериодОтч = "1" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 1, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 3, 31));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	ИначеЕсли ПериодОтч = "2" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 4, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 6, 30));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	ИначеЕсли ПериодОтч = "3" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 7, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 9, 30));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	ИначеЕсли ПериодОтч = "4" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 10, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 12, 31));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
	ИначеЕсли ПериодОтч = "0" ИЛИ ПериодОтч = "5" Тогда
		Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 1, 1));
		Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 12, 31));
		Результат.Вставить("Периодичность", Перечисления.Периодичность.Год);
	КонецЕсли;
	Результат.Вставить("Год", ОтчетныйГод);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОпределитьПериодФТС(ДеревоXML)
	
	Результат = Новый Структура;
	
	Если ДеревоXML.Свойства().Получить("ReportingDate") = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ОтчетныйГодИМесяц = СокрЛП(ДеревоXML.ReportingDate);
	
	ОтчетныйГод = Лев(ОтчетныйГодИМесяц, 4);
	ОтчетныйМесяц = Сред(ОтчетныйГодИМесяц, 6, 2);
	
	Результат.Вставить("ДатаНачалаПериода", НачалоМесяца(Дата(ОтчетныйГод, ОтчетныйМесяц, 1)));
	Результат.Вставить("ДатаОкончанияПериода", КонецМесяца(Дата(ОтчетныйГод, ОтчетныйМесяц, 1)));
	Результат.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
	Результат.Вставить("Год", ОтчетныйГод);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОпределитьНомерКорректировкиРПН(ДеревоXML)
	
	Если ДеревоXML.Свойства().Получить("CALC_TYPE") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДеревоXML.CALC_TYPE <> "2" Тогда
		Возврат 0;
	ИначеЕсли ДеревоXML.Свойства().Получить("NUMB_COR_RPT") <> Неопределено И ЗначениеЗаполнено(ДеревоXML.NUMB_COR_RPT) Тогда
		Возврат Число(ДеревоXML.NUMB_COR_RPT);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьНомерКорректировкиФТС(ДеревоXML)
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ОпределитьОрганизациюРПН(ДеревоXML)
	
	Если ДеревоXML.Свойства().Получить("ORG_INFO") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелОрганизация = ДеревоXML.ORG_INFO;
	
	_ИНН = "";
	_КПП = "";
	
	Если Тип(ДеревоXML.ORG_INFO) = Тип("СписокXDTO") Тогда
		Для каждого УзелОрганизация Из ДеревоXML.ORG_INFO Цикл
			Если УзелОрганизация.Свойства().Получить("INN") <> Неопределено И УзелОрганизация.Свойства().Получить("KPP") <> Неопределено Тогда
				_ИНН = СокрЛП(УзелОрганизация.INN);
				Если СтрДлина(_ИНН) = 12 И Лев(_ИНН, 2) = "00" Тогда
					_ИНН = Сред(_ИНН, 3);
				КонецЕсли;
				_КПП = СокрЛП(УзелОрганизация.KPP);
				Если ЗначениеЗаполнено(_ИНН) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Если УзелОрганизация.Свойства().Получить("INN") <> Неопределено И УзелОрганизация.Свойства().Получить("KPP") <> Неопределено Тогда
			_ИНН = СокрЛП(УзелОрганизация.INN);
			Если СтрДлина(_ИНН) = 12 И Лев(_ИНН, 2) = "00" Тогда
				_ИНН = Сред(_ИНН, 3);
			КонецЕсли;
			_КПП = СокрЛП(УзелОрганизация.KPP);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_ИНН) Тогда
		Возврат ОпределитьОрганизациюПоИННиКПП(_ИНН, _КПП);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьОрганизациюФТС(ДеревоXML)
	
	Если ДеревоXML.Свойства().Получить("Consignee") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелГрузополучатель = ДеревоXML.Consignee;
	
	Если УзелГрузополучатель.Свойства().Получить("RFOrganizationFeatures") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелПараметрыОрганизацииРФ = УзелГрузополучатель.RFOrganizationFeatures;
	
	_ИНН = "";
	_КПП = "";
	
	Если УзелПараметрыОрганизацииРФ.Свойства().Получить("INN") <> Неопределено Тогда
		_ИНН = УзелПараметрыОрганизацииРФ.INN;
	КонецЕсли;
	Если УзелПараметрыОрганизацииРФ.Свойства().Получить("KPP") <> Неопределено Тогда
		_КПП = УзелПараметрыОрганизацииРФ.KPP;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(_ИНН) Тогда
		Возврат ОпределитьОрганизациюПоИННиКПП(_ИНН, _КПП);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоФайлВыгрузкиРПН(ОсновнойФайл)
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	Расширение = нрег(РасширениеФайла(ОсновнойФайл));
	Если Расширение <> "xml" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Префикс = нрег(Лев(КороткоеИмяФайла, 15));
	Возврат (СтрНайти(Префикс, "рсч_") > 0
		 ИЛИ СтрНайти(Префикс, "онв_") > 0
		 ИЛИ СтрНайти(Префикс, "мсп_") > 0
		 ИЛИ СтрНайти(Префикс, "2тпо_") > 0);
	
КонецФункции

&НаСервере
Функция ЭтоФайлВыгрузкиФТС(ОсновнойФайл)
	
	ФайлВыгрузки = Новый ЧтениеТекста(ОсновнойФайл, "windows-1251");
	ТекстВыгрузки = ФайлВыгрузки.Прочитать();
	Возврат СтрНайти(ТекстВыгрузки, "<StaticForm ") > 0;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиФНС(ПолноеИмяФайла)
	
	// инициализируем контекст ЭДО - модуль обработки
	Если КонтекстЭДОСервер = Неопределено Тогда 
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	СдвигВМесяцахПоПериодичности = ПолучитьСдвигВМесяцахПоПериодичности();
	СоответствиеПериодОтчМесяцуОкончания = ПолучитьСоответствиеПериодОтчМесяцуОкончания();
	СоответствиеПериодОтчПериодичности = ПолучитьСоответствиеПериодОтчПериодичности();
	ПеридичностьПоПризПериодОтч = ПолучитьПеридичностьПоПризПериодОтч();
	
	// восстанавливаем из макета соответствия КНД виду отчета и признаку сдачи нарастающим итогом
	СоответствиеКНДВидуОтправляемогоДокумента = Новый Соответствие;
	СоответствиеКНДПризнакуНарастающегоИтога = Новый Соответствие;
	МакетКНД = КонтекстЭДОСервер.ПолучитьМакет("ОписаниеФормДляИмпорта");
	Для Инд = 1 По МакетКНД.ВысотаТаблицы Цикл
		_КНД = СокрЛП(МакетКНД.Область(Инд, 1, Инд, 1).Текст);
		_ИмяПредопределенного = СокрЛП(МакетКНД.Область(Инд, 2, Инд, 2).Текст);
		_НарастающимИтогом = ?(СокрЛП(МакетКНД.Область(Инд, 3, Инд, 3).Текст) = "X", Ложь, Истина);
		СоответствиеКНДВидуОтправляемогоДокумента.Вставить(_КНД, _ИмяПредопределенного);
		СоответствиеКНДПризнакуНарастающегоИтога.Вставить(_КНД, _НарастающимИтогом);
	КонецЦикла;
	
	// инициализиуем структуру с результатами анализа
	ПараметрыИмпорта = Новый Структура;
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ПолноеИмяФайла);
	Расширение = нрег(РасширениеФайла(ПолноеИмяФайла));
	Если Расширение = "xml" Тогда
		
		ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках = КонтекстЭДОСервер.ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках(КороткоеИмяФайла);
		ЭтоФайлВыгрузкиУведомленияОРозничныхЦенахНаТабак = КонтекстЭДОСервер.ЭтоФайлВыгрузкиУведомленияОРозничныхЦенахНаТабак(КороткоеИмяФайла);
		
		// считываем показатели файла
		ОбъектЧтениеXML = Новый ЧтениеXML;
		Попытка
			ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
			ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
			ПоказателиВыгрузки = Новый Соответствие;
			Пока ОбъектЧтениеXML.Прочитать() Цикл
				Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
					Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках И ОбъектЧтениеXML.Имя = "УвКонтрСд" Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ОбъектЧтениеXML.Закрыть();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл ""%1"" не является файлом выгрузки в формате XML.'"), КороткоеИмяФайла);
					 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;
		
		// определение вида отчета
		КНД = ПоказателиВыгрузки["КНД"];
		
		Если КонтекстЭДОСервер.ЭтоФайлВыгрузкиРеестраНДС(КороткоеИмяФайла) Тогда
			КНД = КонтекстЭДОСервер.КНДРеестраФНСПоПрефиксуФайла(КороткоеИмяФайла);
		КонецЕсли;
		
		Если КНД <> Неопределено И КНД <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтправляемогоДокументаПоИмениПредопределенного(СоответствиеКНДВидуОтправляемогоДокумента[КНД]);
			Если ВидОтчетаВыгрузки <> Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение организации
		Если ПоказателиВыгрузки["ИННФЛ"] <> Неопределено Тогда
			ИНН = ПоказателиВыгрузки["ИННФЛ"];
			КПП = "";
		Иначе
			ИНН = ?(ПоказателиВыгрузки["ИННЮЛ"] = Неопределено, "", ПоказателиВыгрузки["ИННЮЛ"]);
			КПП = ?(ПоказателиВыгрузки["КПП"] = Неопределено, "", ПоказателиВыгрузки["КПП"]);
		КонецЕсли;
		Если ИНН <> "" ИЛИ КПП <> "" Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
			Если ОрганизацияВыгрузки = Справочники.Организации.ПустаяСсылка() И ПоказателиВыгрузки["ИННФЛ"] <> Неопределено
				И (ПоказателиВыгрузки["ИННЮЛ"] <> Неопределено ИЛИ ПоказателиВыгрузки["КПП"] <> Неопределено) Тогда
				ИНН = ?(ПоказателиВыгрузки["ИННЮЛ"] = Неопределено, "", ПоказателиВыгрузки["ИННЮЛ"]);
				КПП = ?(ПоказателиВыгрузки["КПП"] = Неопределено, "", ПоказателиВыгрузки["КПП"]);
				ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
			КонецЕсли;
			Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение вида документа
		ВидДок = ПоказателиВыгрузки["ВидДок"];
		НомКорр = ПоказателиВыгрузки["НомКорр"];
		Если ЗначениеЗаполнено(ВидДок) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВидДок) Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", Число(ВидДок));
		ИначеЕсли ЗначениеЗаполнено(НомКорр) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомКорр) Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", Число(НомКорр));
		КонецЕсли;
		
		// определение налогового органа
		ОшибкаОпределенияНО = Ложь;
		ИдФайл = ПоказателиВыгрузки["ИдФайл"];
		Если ИдФайл <> Неопределено Тогда
			Вхождение_1 = СтрНайти(ИдФайл, "_");
			Если Вхождение_1 = 0 Тогда
				ОшибкаОпределенияНО = Истина;
			Иначе
				_ИдФайл = Сред(ИдФайл, Вхождение_1 + 1);
				Вхождение_2 = СтрНайти(_ИдФайл, "_");
				Если Вхождение_2 = 0 Тогда
					ОшибкаОпределенияНО = Истина;
				Иначе
					КодИФНС = Сред(_ИдФайл, Вхождение_2 + 1, 4);
					Если СтрДлина(КодИФНС) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодИФНС) Тогда
						ОшибкаОпределенияНО = Истина;
					Иначе
						НОВыгрузки = Справочники.НалоговыеОрганы.НайтиПоКоду(КодИФНС);
						Если НОВыгрузки <> Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
							ПараметрыИмпорта.Вставить("Получатель", НОВыгрузки);
						Иначе
							ОшибкаОпределенияНО = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОшибкаОпределенияНО = Истина;
		КонецЕсли;
		
		// определение периода
		ОшибкаОпределенияПериода = Ложь;
		
		Если ЭтоФайлВыгрузкиУведомленияОРозничныхЦенахНаТабак Тогда
			
			ПериодичностьВыгрузки = Перечисления.Периодичность.Месяц;
			ДатаНачЦенСтрока = ПоказателиВыгрузки["ДатаНачЦен"];
			ДатаНачЦен = Дата(Число(Сред(ДатаНачЦенСтрока, 7)), Число(Сред(ДатаНачЦенСтрока, 4, 2)), Число(Сред(ДатаНачЦенСтрока, 1, 2)));
			ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(ДатаНачЦен);
			ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(ДатаНачЦен);

		Иначе 
			ГодПериодОтч = ПоказателиВыгрузки["ГодПериодОтч"];
			Если ГодПериодОтч = Неопределено Тогда
				ГодПериодОтч = ПоказателиВыгрузки["ОтчетГод"];
				Если ГодПериодОтч = Неопределено Тогда
					ГодПериодОтч = ПоказателиВыгрузки["ГодУмНал"];
				КонецЕсли;
			КонецЕсли;
			ПериодОтч = ПоказателиВыгрузки["ПериодОтч"];
			Если ПериодОтч = Неопределено Тогда
				ПериодОтч = ПоказателиВыгрузки["Период"];
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ГодПериодОтч) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодПериодОтч) ИЛИ (ПериодОтч <> Неопределено И НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПериодОтч)) Тогда
				ОшибкаОпределенияПериода = Истина;
			Иначе
				Если ПериодОтч = Неопределено Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
					ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(Число(ГодПериодОтч), 1, 1));
					ДатаОкончанияПериодаОтчетаВыгрузки = КонецГода(ДатаНачалаПериодаОтчетаВыгрузки);
				Иначе
					ПериодичностьВыгрузки = СоответствиеПериодОтчПериодичности[ПериодОтч];
					НомерМесяцаПо = СоответствиеПериодОтчМесяцуОкончания[ПериодОтч];
					НарастающимИтогом = СоответствиеКНДПризнакуНарастающегоИтога[КНД];
					Если НомерМесяцаПо = Неопределено ИЛИ НарастающимИтогом = Неопределено ИЛИ ПериодичностьВыгрузки = Неопределено Тогда
						ОшибкаОпределенияПериода = Истина;
					Иначе
						Если НарастающимИтогом Тогда
							НомерМесяцаС = 1;
						Иначе
							СдвигМесяцев = СдвигВМесяцахПоПериодичности[ПериодичностьВыгрузки];
							Если СдвигМесяцев = Неопределено Тогда
								ОшибкаОпределенияПериода = Ложь;
							Иначе
								НомерМесяцаС = НомерМесяцаПо - СдвигМесяцев + 1;
							КонецЕсли;
						КонецЕсли;
						ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(Дата(Число(ГодПериодОтч), НомерМесяцаС, 1));
						ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(Число(ГодПериодОтч), НомерМесяцаПо, 1));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;
		
		ФайлВыгрузки = Новый Файл(ПолноеИмяФайла);
		Если ФайлВыгрузки.Размер() < МаксимальноДопустимыйРазмерОтображаемогоТекста() Тогда
			// инициализируем текст на форме
			ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "windows-1251");
			ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
			ЧтениеТекста.Закрыть();
		Иначе
			ПараметрыИмпорта.Вставить("Текст", "");
		КонецЕсли;
		
	ИначеЕсли Расширение = "txt" Тогда
		
		// считываем текст и закрываем файл
		ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "cp866");
		Текст = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		// проверка количества документов
		ЧислоДокументов = СтрЧислоВхождений(Текст, Символы.ПС + "@@@" + Символы.ПС) - 1;
		Если ЧислоДокументов < 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл выгрузки должен содержать выгрузку хотя бы одного отчета!");
			Возврат Ложь;
		ИначеЕсли ЧислоДокументов > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл выгрузки должен содержать выгрузку только одного отчета!");
			Возврат Ложь;
		КонецЕсли;
		ПоказателиВыгрузки = Новый Соответствие;
		Для Инд = 1 По СтрЧислоСтрок(Текст) Цикл
			ТекСтрока = СтрПолучитьСтроку(Текст, Инд);
			ВхождениеДвоеточия = СтрНайти(ТекСтрока, ":");
			Если ВхождениеДвоеточия <> 0 Тогда
				ПоказателиВыгрузки.Вставить(СокрЛП(Лев(ТекСтрока, ВхождениеДвоеточия - 1)), СокрЛП(Сред(ТекСтрока, ВхождениеДвоеточия + 1)));
			КонецЕсли;
		КонецЦикла;
		
		ТипИнф					= ПоказателиВыгрузки["ТипИнф"];
		ВерсФорм				= ПоказателиВыгрузки["ВерсФорм"];
		ЭтоАлко201				= (ВерсФорм <> Неопределено И ТипИнф <> Неопределено И ВерсФорм = "2.01" И Лев(ТипИнф, 5) = "11520");
		
		// определение организации
		КПП = "";
		КППИном					= ПоказателиВыгрузки["КППИном"];
		КППОП					= ПоказателиВыгрузки["КППОП"];
		КППЮЛ					= ПоказателиВыгрузки["КППЮЛ"];
		КППОПСРП				= ПоказателиВыгрузки["КППОПСРП"];
		Если КППИном <> Неопределено И КППИном <> "" Тогда
			КПП = КППИном;
		ИначеЕсли КППОП <> Неопределено И КППОП <> "" Тогда
			КПП = КППОП;
		ИначеЕсли КППОПСРП <> Неопределено И КППОПСРП <> "" Тогда
			КПП = КППОПСРП;
		ИначеЕсли КППЮЛ <> Неопределено Тогда
			КПП = КППЮЛ;
		КонецЕсли;
		
		ИНН = "";
		ИННИО					= ПоказателиВыгрузки["ИННИО"];
		ИННФЛ					= ПоказателиВыгрузки["ИННФЛ"];
		ИННЮЛ					= ПоказателиВыгрузки["ИННЮЛ"];
		Если ИННИО <> Неопределено И ИННИО <> "" Тогда
			ИНН = ИННИО;
		ИначеЕсли ИННФЛ <> Неопределено И ИННИО <> "" Тогда
			ИНН = ИННФЛ;
		ИначеЕсли ИННЮЛ <> Неопределено И ИННЮЛ <> "" Тогда
			ИНН = ИННЮЛ;
		КонецЕсли;
		
		Если ИНН <> "" ИЛИ КПП <> "" Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
			Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение налогового органа
		ИдПол = ПоказателиВыгрузки["ИдПол"];
		Если ИдПол <> Неопределено Тогда
			КодНО = СокрЛП(Лев(ИдПол, 4));
			НОВыгрузки = Справочники.НалоговыеОрганы.НайтиПоКоду(КодНО);
			Если НОВыгрузки <> Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Получатель", НОВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение вида отчета
		КНД = ПоказателиВыгрузки["КНД"];
		Если КНД <> Неопределено И КНД <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтправляемогоДокументаПоИмениПредопределенного(СоответствиеКНДВидуОтправляемогоДокумента[КНД]);
			Если ВидОтчетаВыгрузки <> Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		ИначеЕсли ТипИнф <> Неопределено И ТипИнф <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтправляемогоДокументаПоИмениПредопределенного(СоответствиеКНДВидуОтправляемогоДокумента[ТипИнф]);
			Если ВидОтчетаВыгрузки <> Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение периода
		ГодПериодОтч			= ПоказателиВыгрузки["ГодПериодОтч"];
		_ПризПериодОтч			= ПоказателиВыгрузки["ПризПериодОтч"];
		_ПризПеридОтч			= ПоказателиВыгрузки["ПризПеридОтч"];
		ПризПериодОтч			= ?(_ПризПериодОтч = Неопределено, _ПризПеридОтч, _ПризПериодОтч);
		НомерПериодОтч			= ПоказателиВыгрузки["НомерПериодОтч"];
		НачПериодОтч			= ПоказателиВыгрузки["НачПериодОтч"];
		КонПериодОтч			= ПоказателиВыгрузки["КонПериодОтч"];
		
		ОшибкаОпределенияПериода = Ложь;
		Если ЭтоАлко201 Тогда
			ОшибкаОпределенияПериода = Истина; // пока не обрабатываем
		ИначеЕсли НачПериодОтч <> Неопределено И КонПериодОтч <> Неопределено Тогда // это 2.01
			Если ПризПериодОтч <> "2" И ПризПериодОтч <> "3" Тогда // таких не знаем
				ОшибкаОпределенияПериода = Истина;
			Иначе
				Если ПризПериодОтч = "2" Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Квартал;
				ИначеЕсли ПризПериодОтч = "3" Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
				КонецЕсли;
				ДатаНачалаПериодаОтчетаВыгрузки = НачалоДня(Дата(Число(Сред(НачПериодОтч, 7)), Число(Сред(НачПериодОтч, 4, 2)), Число(Сред(НачПериодОтч, 1, 2))));
				ДатаОкончанияПериодаОтчетаВыгрузки = КонецДня(Дата(Число(Сред(КонПериодОтч, 7)), Число(Сред(КонПериодОтч, 4, 2)), Число(Сред(КонПериодОтч, 1, 2))));
			КонецЕсли;
		ИначеЕсли ГодПериодОтч <> Неопределено Тогда // это 3.00
			ГодВыгрузки = Число(ГодПериодОтч);
			ПериодичностьВыгрузки = ПеридичностьПоПризПериодОтч[ПризПериодОтч];
			Если ПериодичностьВыгрузки = Неопределено Тогда
				ОшибкаОпределенияПериода = Истина;
			Иначе
				Если ПризПериодОтч = Неопределено ИЛИ ПризПериодОтч = "" ИЛИ ПризПериодОтч = "0"  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПризПериодОтч) Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
					ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(ГодПериодОтч, 1, 1));
					ДатаОкончанияПериодаОтчетаВыгрузки = КонецГода(ДатаНачалаПериодаОтчетаВыгрузки);
				Иначе 
					ПризПериодОтчЧисло = ?(СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПризПериодОтч), Число(ПризПериодОтч), 1);
					Если НомерПериодОтч = Неопределено ИЛИ НомерПериодОтч = ""
						ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерПериодОтч) ИЛИ ПризПериодОтчЧисло > 3 Тогда
						НомерПериодОтчЧисло = 1;
					Иначе
						НомерПериодОтчЧисло = Число(НомерПериодОтч);
					КонецЕсли;
					НомерМесяцаПо = НомерПериодОтчЧисло * ПризПериодОтчЧисло;
					НарастающимИтогом = СоответствиеКНДПризнакуНарастающегоИтога[КНД];
					Если НарастающимИтогом = Неопределено Тогда
						ОшибкаОпределенияПериода = Истина;
					ИначеЕсли НарастающимИтогом = Истина Тогда
						НомерМесяцаС = 1;
					ИначеЕсли НарастающимИтогом = Ложь Тогда
						СдвигМесяцев = СдвигВМесяцахПоПериодичности[ПериодичностьВыгрузки];
						Если СдвигМесяцев = Неопределено Тогда
							ОшибкаОпределенияПериода = Ложь;
						Иначе
							НомерМесяцаС = НомерМесяцаПо - СдвигМесяцев + 1;
						КонецЕсли;
					КонецЕсли;
					Если НЕ ОшибкаОпределенияПериода Тогда
						ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(Дата(ГодВыгрузки, НомерМесяцаС, 1));
						ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(ГодВыгрузки, НомерМесяцаПо, 1));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОшибкаОпределенияПериода = Истина;
		КонецЕсли;
		
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;
		
		// определение вида документа
		ПризнакВидаДокумента	= ПоказателиВыгрузки["ПризВидДок"];
		_НомерКорректировки		= ПоказателиВыгрузки["НомерКорр"];
		ВариантОтчета			= ПоказателиВыгрузки["ВарФОтч"];
		ИдДок					= ПоказателиВыгрузки["ИдДок"];
		ОшибкаОпределенияВерсии = Ложь;
		Если ЭтоАлко201 Тогда
			Если ИдДок <> Неопределено Тогда
				НомерОтчета = Прав(ИдДок, 2);
				Если ЗначениеЗаполнено(НомерОтчета) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерОтчета) Тогда
					ПараметрыИмпорта.Вставить("ВидДокумента", Число(НомерОтчета) - 1);
				Иначе
					ОшибкаОпределенияВерсии = Ложь;
				КонецЕсли;
			Иначе
				ОшибкаОпределенияВерсии = Ложь;
			КонецЕсли;
		ИначеЕсли ВариантОтчета <> Неопределено Тогда // это формы бух. отчетности 2.01
			ПараметрыИмпорта.Вставить("ВидДокумента", ?(ВариантОтчета <> "999" ИЛИ НЕ (ЗначениеЗаполнено(ВариантОтчета) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ВариантОтчета)), 0, Число(ВариантОтчета) - 1));
		ИначеЕсли _НомерКорректировки <> Неопределено Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", ?(ЗначениеЗаполнено(_НомерКорректировки) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(_НомерКорректировки), Число(_НомерКорректировки), 0));
		КонецЕсли;
		
		// инициализируем текст на форме
		ПараметрыИмпорта.Вставить("Текст", Текст);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// 
	Если НЕ ЗначениеЗаполнено(Объект.ТипПолучателя) И НЕ ПараметрыИмпорта.Свойство("ТипПолучателя") Тогда
		Если ЗначениеЗаполнено(Объект.ВидОтчета) И ЗначениеЗаполнено(Объект.ВидОтчета.ТипПолучателя) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", Объект.ВидОтчета.ТипПолучателя);
		ИначеЕсли ЗначениеЗаполнено(Объект.Получатель) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ТипПолучателяПоТипуЗначенияПолучатель(Объект.Получатель));
		Иначе
			ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФНС);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		Объект.Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		Объект.ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Объект.Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ТипПолучателя) Тогда
		Объект.ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	КонецЕсли;
	Объект.Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	
	Если ТипЗнч(Объект.ВидОтчета) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов") Тогда
		ТипДокумента = Объект.ВидОтчета.ТипДокумента;
	Иначе
		ТипДокумента = Неопределено;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС Тогда
		Объект.ДатаИмпорта = ТекущаяДатаСеанса();
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
			Объект.ДатаНачала = Объект.ДатаИмпорта;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			Объект.ДатаОкончания = Объект.ДатаИмпорта;
		КонецЕсли;
			
	КонецЕсли;
	
	Если СтрНайти(ПолноеИмяФайла, "NO_NDS") Тогда
		// декларация НДС 2015
		Объект.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.НДС;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиФСС(ПолноеИмяФайла)
	
	// инициализируем переменные, содержащие двоичные данные и имя файла
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	ЭтоРеестрСведенийОПособиях = (Лев(КороткоеИмяФайла,1) = "E");
	
	Если ЭтоРеестрСведенийОПособиях Тогда  
		РезультатАнализа = ПроанализироватьФайлВыгрузкиРеестраСведенийФСС(ПолноеИмяФайла);
	ИначеЕсли ЭтоФайлВыгрузкиОтчета4аФСС(КороткоеИмяФайла) Тогда
		РезультатАнализа = ПроанализироватьФайлВыгрузкиОтчет4аФСС(ПолноеИмяФайла);
	Иначе	
		РезультатАнализа = ПроанализироватьФайлВыгрузкиОтчет4ФСС(ПолноеИмяФайла);
	КонецЕсли;	
	
	Возврат РезультатАнализа;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиОтчет4ФСС(ПолноеИмяФайла)
	
	// инициализируем переменные, содержащие двоичные данные и имя файла
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	// считываем показатели файла
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		ПоказателиВыгрузки = Новый Соответствие;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
						ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл """ + КороткоеИмяФайла + """ не является файлом выгрузки в формате XML!");
		Возврат Ложь;
	КонецПопытки;
	
	ПараметрыИмпорта = Новый Структура;
	
	// определение вида отчета
	ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСС);
	
	// определение вида отчета
	ПараметрыИмпорта.Вставить("ВидОтчета", Справочники.ВидыОтправляемыхДокументов.Отчет4ФСС);
	
	// определение организации
	ОрганизацияВыгрузки = Неопределено;
	РегНомФСС = ?(ПоказателиВыгрузки["REG_NUM"] = Неопределено, "", ПоказателиВыгрузки["REG_NUM"]);
	Если ЗначениеЗаполнено(РегНомФСС) Тогда
		ОрганизацияВыгрузки = ОпределитьОрганизациюПоКодуФСС(РегНомФСС);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияВыгрузки) Тогда
		ИНН = ?(ПоказателиВыгрузки["INN"] = Неопределено, "", ПоказателиВыгрузки["INN"]);
		КПП = ?(ПоказателиВыгрузки["KPP"] = Неопределено, "", ПоказателиВыгрузки["KPP"]);
		Если ИНН <> "" ИЛИ КПП <> "" Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
		КонецЕсли;
	КонецЕсли;
	
	Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
		ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
	КонецЕсли;
	
	// определение вида документа
	НомКорр = ПоказателиВыгрузки["NumCorr"];
	Если ЗначениеЗаполнено(НомКорр) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомКорр) Тогда
		ПараметрыИмпорта.Вставить("ВидДокумента", Число(НомКорр));
	КонецЕсли;
	
	// определение органа ФСС
	КодПодчиненности = ПоказателиВыгрузки["KPS_NUM"];
	Если КодПодчиненности <> Неопределено Тогда
		ПараметрыИмпорта.Вставить("Получатель", Лев(КодПодчиненности,4));
	КонецЕсли;
	
	// определение периода
	ОшибкаОпределенияПериода = Ложь;
	ГодПериодОтч 	= ПоказателиВыгрузки["YEAR_NUM"];
	ПериодОтч 		= ПоказателиВыгрузки["QUART_NUM"];
	
	Если НЕ ЗначениеЗаполнено(ГодПериодОтч) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодПериодОтч) 
	 ИЛИ НЕ ЗначениеЗаполнено(ПериодОтч) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПериодОтч) ИЛИ Число(ПериодОтч) = 0 Тогда
		ОшибкаОпределенияПериода = Истина;
	Иначе
		ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(Число(ГодПериодОтч), 1, 1));
		
		Если ПериодОтч = "03" ИЛИ ПериодОтч = "06" ИЛИ ПериодОтч = "09" ИЛИ ПериодОтч = "12" Тогда
			ПериодичностьВыгрузки = Перечисления.Периодичность.Квартал;
		Иначе
			ПериодичностьВыгрузки = Перечисления.Периодичность.Месяц;
		КонецЕсли;
		
		ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(Число(ГодПериодОтч), Число(ПериодОтч), 1));
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем текст на форме
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "windows-1251");
	ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Объект.Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	Объект.ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	Объект.ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	Объект.ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	Объект.Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	Объект.Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	Объект.ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");

	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиРеестраСведенийФСС(ПолноеИмяФайла)
	
	// инициализируем переменные, содержащие двоичные данные и имя файла
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	ДанныеЗагружаемыхРеестров = Новый ТаблицаЗначений;
	ДанныеЗагружаемыхРеестров.Колонки.Добавить("РегистрационныйНомер");
	ДанныеЗагружаемыхРеестров.Колонки.Добавить("ИНН");
	ДанныеЗагружаемыхРеестров.Колонки.Добавить("КПП");
	ДанныеЗагружаемыхРеестров.Колонки.Добавить("Организация");
	ДанныеЗагружаемыхРеестров.Колонки.Добавить("КодПолучателя");
	
	НоваяСтрокаДанных = Неопределено;
	
	// считываем показатели файла
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		ПоказателиВыгрузки = Новый Соответствие;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			ИмяУзла = "";
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				
				Если ИмяУзла = "ROW" Тогда
					НоваяСтрокаДанных = ДанныеЗагружаемыхРеестров.Добавить();
				КонецЕсли;	
				
				ОбъектЧтениеXML.Прочитать();
				Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
					
					ЗначениеУзла = ОбъектЧтениеXML.Значение;
					
					// заполняем структуру с данными
					Если ПоказателиВыгрузки[ИмяУзла] = Неопределено Тогда
						ПоказателиВыгрузки.Вставить(ИмяУзла, ЗначениеУзла);
					КонецЕсли;
					
					// заполняем таблицу с данными
					Если НоваяСтрокаДанных <> Неопределено Тогда
						Если ИмяУзла = "EMPL_REG_NO" Тогда
							НоваяСтрокаДанных.РегистрационныйНомер = ЗначениеУзла;
						ИначеЕсли ИмяУзла = "EMPL_KPP" Тогда
							НоваяСтрокаДанных.КПП = ЗначениеУзла;	
						ИначеЕсли ИмяУзла = "EMPL_INN" Тогда
							НоваяСтрокаДанных.ИНН = ЗначениеУзла;
						ИначеЕсли ИмяУзла = "EMPL_PARENT_NO" Тогда
							НоваяСтрокаДанных.КодПолучателя = Лев(ЗначениеУзла,4);	
						КонецЕсли;	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл """ + КороткоеИмяФайла + """ не является файлом выгрузки в формате XML!");
		Возврат Ложь;
	КонецПопытки;
	
	ПараметрыИмпорта = Новый Структура;
	
	// определение вида отчета
	ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСС);
	
	// определение вида отчета
	ПараметрыИмпорта.Вставить("ВидОтчета", Справочники.ВидыОтправляемыхДокументов.РеестрСведенийВФСС);
	
	// определение организации для каждой строки загружаемого файла
	Для Каждого СтрокаДанныхЗагружаемыхРеестров ИЗ ДанныеЗагружаемыхРеестров Цикл
		
		ОрганизацияВыгрузки = Неопределено;
		РегНомФСС = СтрокаДанныхЗагружаемыхРеестров.РегистрационныйНомер;
		Если ЗначениеЗаполнено(РегНомФСС) Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоКодуФСС(РегНомФСС);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОрганизацияВыгрузки) Тогда
			ИНН = СтрокаДанныхЗагружаемыхРеестров.ИНН;
			КПП = СтрокаДанныхЗагружаемыхРеестров.КПП;
			Если ИНН <> "" ИЛИ КПП <> "" Тогда
				ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДанныхЗагружаемыхРеестров.Организация = ОрганизацияВыгрузки;
		
	КонецЦикла;
	
	// если в файле больше, чем одна организация, такой файл считается некорректным
	ТаблицаОрганизаций = ДанныеЗагружаемыхРеестров.Скопировать(, "Организация");
	ТаблицаОрганизаций.Свернуть("Организация");
	МассивОрганизаций = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	
	Если МассивОрганизаций.Количество() = 1 Тогда
		ПараметрыИмпорта.Вставить("Организация", МассивОрганизаций[0]);
	ИначеЕсли МассивОрганизаций.Количество() > 1 Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл """ + КороткоеИмяФайла + """ не может быть загружен, поскольку содержит информацию по нескольким организациям!");
		Возврат Ложь;
	КонецЕсли;
	
	// определение налогового органа
	Если ДанныеЗагружаемыхРеестров.Количество() > 0 Тогда
		КодПолучателя = ДанныеЗагружаемыхРеестров[0].КодПолучателя;
		Если КодПолучателя <> Неопределено Тогда
			ПараметрыИмпорта.Вставить("Получатель", КодПолучателя);			
		КонецЕсли;	
	КонецЕсли;
	
	// инициализируем контекст ЭДО - модуль обработки
	Если КонтекстЭДОСервер = Неопределено Тогда 
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

	// инициализируем текст на форме
    Текст = КонтекстЭДОСервер.ПрочитатьТекстИзФайла(ПолноеИмяФайла, ,Истина);
	ПараметрыИмпорта.Вставить("Текст", Текст);
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Объект.Получатель 		= ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	Объект.ВидОтчета 		= ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	Объект.ДатаНачала 		= ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	Объект.ДатаОкончания 	= ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	Объект.Версия 			= ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	Объект.Периодичность 	= ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	Объект.ТипПолучателя 	= ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	
	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Объект.ДатаИмпорта 		= ТекущаяДата;
	Объект.ДатаНачала 		= ТекущаяДата;
	Объект.ДатаОкончания 	= ТекущаяДата;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиФСГС(ПолноеИмяФайла)
	
	// инициализируем контекст ЭДО - модуль обработки
	Если КонтекстЭДОСервер = Неопределено Тогда
		ТекстСообщения = "";
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
		Если КонтекстЭДОСервер = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	СдвигВМесяцахПоПериодичности = ПолучитьСдвигВМесяцахПоПериодичности();
	СоответствиеКодуИзШаблонаПериодичности = ПолучитьСоответствиеКодуИзШаблонаПериодичности();
	
	ПараметрыИмпорта = Новый Структура;
	
	// считываем показатели файла
	ПоказателиВыгрузки = Новый Соответствие;
	СчетчикСекций = 0;
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			ИмяАтрибутаЗаголовка = "";
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ОбъектЧтениеXML.Имя = "section" Тогда
					СчетчикСекций = СчетчикСекций + 1;
				КонецЕсли;
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ОбъектЧтениеXML.Имя = "name" Тогда
						ИмяАтрибутаЗаголовка = ОбъектЧтениеXML.Значение;
						Продолжить;
					КонецЕсли;
					Если ОбъектЧтениеXML.Имя = "value" Тогда
						Если ЗначениеЗаполнено(ИмяАтрибутаЗаголовка) И ПоказателиВыгрузки[ИмяАтрибутаЗаголовка] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ИмяАтрибутаЗаголовка, ОбъектЧтениеXML.Значение);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
						ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ОбъектЧтениеXML.Закрыть();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ПоказателиВыгрузки["code"]) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// основные показатели из файла
	КодОтчета = СокрЛП(ПоказателиВыгрузки["code"]);
	КодПоОКУД = Прав("0000000" + Лев(КодОтчета, СтрДлина(КодОтчета) - 6), 7);
	ГодОтчета = СокрЛП(ПоказателиВыгрузки["year"]);
	ПериодОтчета = СокрЛП(ПоказателиВыгрузки["period"]);
	КодПериодичности  = Прав(КодОтчета, 3);
	НарастающимИтогом = Ложь;
	
	// проверка количества секций, если 0 - отчет пустой
	Если СчетчикСекций = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// заполнение таблицы соответствий кода по ОКУД, код XML-шаблона виду отчета и другим параметрам
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("КодПоОКУД");
	ТаблицаСоответствий.Колонки.Добавить("КодОтчета");
	ТаблицаСоответствий.Колонки.Добавить("ИсточникОтчета");
	ТаблицаСоответствий.Колонки.Добавить("КодПериодичности");
	ТаблицаСоответствий.Колонки.Добавить("НарастающимИтогом");
	
	МакетФормСтатистики = КонтекстЭДОСервер.ПолучитьМакет("ОписаниеФормДляИмпортаФСГС");
	Для Инд = 2 По МакетФормСтатистики.ВысотаТаблицы Цикл
		СтрКодПоОКУД         = СокрЛП(МакетФормСтатистики.Область(Инд, 1, Инд, 1).Текст);
		СтрКодОтчета         = СокрЛП(МакетФормСтатистики.Область(Инд, 2, Инд, 2).Текст);
		СтрИсточникОтчета    = СокрЛП(МакетФормСтатистики.Область(Инд, 3, Инд, 3).Текст);
		СтрКодПериодичности  = СокрЛП(МакетФормСтатистики.Область(Инд, 4, Инд, 4).Текст);
		СтрНарастающимИтогом = ?(СокрЛП(МакетФормСтатистики.Область(Инд, 5, Инд, 5).Текст) = "", Ложь, Истина);
		Если СтрКодПоОКУД = "" Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаСоответствий.Добавить();
		НоваяСтрока.КодПоОКУД         = Прав("0000000" + СтрКодПоОКУД, 7);
		НоваяСтрока.КодОтчета         = СтрКодОтчета;
		НоваяСтрока.ИсточникОтчета    = СтрИсточникОтчета;
		НоваяСтрока.КодПериодичности  = СтрКодПериодичности;
		НоваяСтрока.НарастающимИтогом = СтрНарастающимИтогом;
	КонецЦикла;
	
	// определение вида отчета, периодичности и признака "НарастающимИтогом"
	НайденыеСтроки = ТаблицаСоответствий.НайтиСтроки(Новый Структура("КодОтчета", КодОтчета));
	Если НайденыеСтроки.Количество() = 0 Тогда
		НайденыеСтроки = ТаблицаСоответствий.НайтиСтроки(Новый Структура("КодПоОКУД", КодПоОКУД));
	КонецЕсли;
	
	ВидОтчетаВыгрузки = Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
	Если НайденыеСтроки.Количество() > 0 Тогда
		ИсточникОтчета = НайденыеСтроки[0].ИсточникОтчета;
		ВидОтчетаВыгрузки = Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ИсточникОтчета);
		Если ВидОтчетаВыгрузки = Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
			Попытка
				ВидОтчетаВыгрузки = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов." + ИсточникОтчета);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если ЗначениеЗаполнено(НайденыеСтроки[0].КодПериодичности) Тогда
			КодПериодичности = Прав("000" + НайденыеСтроки[0].КодПериодичности, 3);
		КонецЕсли;
		НарастающимИтогом = НайденыеСтроки[0].НарастающимИтогом;
	КонецЕсли;
	
	Если ВидОтчетаВыгрузки <> Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка() Тогда
		ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
	КонецЕсли;
	
	// определение организации и органа ФСГС
	КодПоОКПО = ?(ПоказателиВыгрузки["okpo"] = Неопределено, "", СокрЛП(ПоказателиВыгрузки["okpo"]));
	
	ПараметрыИмпорта.Вставить("Получатель", Справочники.ОрганыФСГС.ПустаяСсылка());
	Если КодПоОКПО <> "" Тогда
		ОрганизацияВыгрузки = ОпределитьОрганизациюПоОКПО(КодПоОКПО);
		Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
			
			ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
			
			ОрганФСГСОрганизации = КонтекстЭДОСервер.ОпределитьОрганФСГСОрганизации(ОрганизацияВыгрузки);
			Если ОрганФСГСОрганизации <> Неопределено И ОрганФСГСОрганизации <> Справочники.ОрганыФСГС.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Получатель", ОрганФСГСОрганизации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСГС);
	
	// установка вида документа по умолчанию
	ПараметрыИмпорта.Вставить("ВидДокумента", 0);
	
	// определение периода
	ОшибкаОпределенияПериода = Ложь;
	
	Если (НЕ ЗначениеЗаполнено(ГодОтчета) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодОтчета))
		ИЛИ (НЕ ЗначениеЗаполнено(ПериодОтчета) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПериодОтчета))
		ИЛИ (КодПериодичности = "" ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодПериодичности)) Тогда
		ОшибкаОпределенияПериода = Истина;
	Иначе
		ПериодичностьВыгрузки = СоответствиеКодуИзШаблонаПериодичности[КодПериодичности];
		
		Если НарастающимИтогом = Неопределено ИЛИ ПериодичностьВыгрузки = Неопределено Тогда
			ОшибкаОпределенияПериода = Истина;
		Иначе
			СдвигМесяцев = СдвигВМесяцахПоПериодичности[ПериодичностьВыгрузки];
			Если СдвигМесяцев = Неопределено Тогда
				ОшибкаОпределенияПериода = Истина;
			Иначе
				НомерПериодаОтчета = Число(ПериодОтчета);
				Если НомерПериодаОтчета = 17 Тогда  // Год
					НомерМесяцаПо = 12;
				Иначе
					Если НомерПериодаОтчета * СдвигМесяцев > 12 Тогда
						НомерМесяцаПо = Мин(НомерПериодаОтчета, 12);
					Иначе
						НомерМесяцаПо = НомерПериодаОтчета * СдвигМесяцев;
					КонецЕсли;
				КонецЕсли;
				Если НарастающимИтогом Тогда
					НомерМесяцаС = 1;
				Иначе
					НомерМесяцаС = Макс(НомерМесяцаПо - СдвигМесяцев, 0) + 1;
				КонецЕсли;
				ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(Дата(Число(ГодОтчета), НомерМесяцаС, 1));
				ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(Число(ГодОтчета), НомерМесяцаПо, 1));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОшибкаОпределенияПериода Тогда
		ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
		ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
		ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
	КонецЕсли;
	
	// инициализируем текст на форме
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "UTF-8");
	ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();
	
	// инициализируем переменные, содержащие двоичные данные и имя файла
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Объект.Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	Объект.ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	Объект.ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	Объект.ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	Объект.Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
	Объект.Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	Объект.ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	
	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиПФР(ПолноеИмяФайла)
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ПолноеИмяФайла);
	// структура-результат
	ПараметрыИмпорта = Новый Структура;
	
	// загружаем XML в дерево
	ДеревоXML = ДеревоXMLИзФайла(ПолноеИмяФайла);
	
	// пытаемся определить вид отчета
	ВидКомплектовОтправляемыхДокументов = Неопределено;
	РезультатОпределения = ОпределитьВидОтчетаПФР(ДеревоXML, ВидКомплектовОтправляемыхДокументов, КороткоеИмяФайла);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("ВидОтчета", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить организацию
	РезультатОпределения = ОпределитьОрганизациюПФР(КороткоеИмяФайла, ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("Организация", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить свойства периода
	РезультатОпределения = ОпределитьПериодПФР(КороткоеИмяФайла, ДеревоXML);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		Если РезультатОпределения.Свойство("ДатаНачалаПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаНачалаПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", РезультатОпределения.ДатаНачалаПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("ДатаОкончанияПериода") И ЗначениеЗаполнено(РезультатОпределения.ДатаОкончанияПериода) Тогда
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", РезультатОпределения.ДатаОкончанияПериода);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Периодичность") И ЗначениеЗаполнено(РезультатОпределения.Периодичность) Тогда
			ПараметрыИмпорта.Вставить("Периодичность", РезультатОпределения.Периодичность);
		КонецЕсли;
		Если РезультатОпределения.Свойство("Год") И ЗначениеЗаполнено(РезультатОпределения.Год) Тогда
			ПараметрыИмпорта.Вставить("Год", РезультатОпределения.Год);
		КонецЕсли;
	КонецЕсли;
	
	// пытаемся определить версию
	РезультатОпределения = ОпределитьНомерКорректировкиПФР(ДеревоXML, КороткоеИмяФайла);
	Если ЗначениеЗаполнено(РезультатОпределения) Тогда
		ПараметрыИмпорта.Вставить("ВидДокумента", РезультатОпределения);
	КонецЕсли;
	
	// пытаемся определить тип получателя
	Если НЕ ЗначениеЗаполнено(Объект.ТипПолучателя) И НЕ ПараметрыИмпорта.Свойство("ТипПолучателя") Тогда
		Если ЗначениеЗаполнено(Объект.ВидОтчета) И ЗначениеЗаполнено(Объект.ВидОтчета.ТипПолучателя) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", Объект.ВидОтчета.ТипПолучателя);
		ИначеЕсли ЗначениеЗаполнено(Объект.Получатель) Тогда
			ПараметрыИмпорта.Вставить("ТипПолучателя", ТипПолучателяПоТипуЗначенияПолучатель(Объект.Получатель));
		Иначе
			ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ПФР);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		Объект.Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	КонецЕсли;
	Если ВидКомплектовОтправляемыхДокументов <> Неопределено Тогда
		Объект.ВидОтчета = ВидКомплектовОтправляемыхДокументов;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		Объект.ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Объект.Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Если ПараметрыИмпорта.Свойство("Год") И ЗначениеЗаполнено(ПараметрыИмпорта.Год) Тогда
			Объект.ДатаНачала = Дата(ПараметрыИмпорта.Год, 1, 1);
			Объект.ДатаОкончания = Дата(ПараметрыИмпорта.Год, 12, 31);
			Объект.Периодичность = Перечисления.Периодичность.Год;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипПолучателя) Тогда
		Объект.ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	КонецЕсли;
	Объект.Версия = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидДокумента");
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОпределитьВидОтчетаПФР(ДеревоXML, ВидКомплектовОтправляемыхДокументов = Неопределено, КороткоеИмяФайла = "")
	
	Если ВРЕГ(Лев(КороткоеИмяФайла, 4)) = "ПФР_" Тогда
		УзелПачкаВходящихДокументов = ДеревоXML;
		
	Иначе
		Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	КонецЕсли;
	
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Если СвойстваУзла.Получить("АНКЕТА_ЗЛ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.АнкетаЗастрахованногоЛица;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_ОБ_ОБМЕНЕ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДУБЛИКАТЕ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		
		УзелСведения = УзелПачкаВходящихДокументов.СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ;
		Если ТипЗнч(УзелСведения) = Тип("ОбъектXDTO") Тогда
			УзелСведенияОсновной = УзелСведения;
		Иначе
			Если УзелСведения.Количество() > 0 Тогда
				УзелСведенияОсновной = УзелСведения.Получить(0);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если УзелСведенияОсновной.Свойства().Получить("ВидФормы") <> Неопределено
		И СокрЛП(УзелСведенияОсновной.ВидФормы) = "СПВ-1" Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1;
		Иначе
			Возврат Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
		КонецЕсли;
	
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СТРАХОВОМ_СТАЖЕ_ЗЛ_ДЛЯ_УСТАНОВЛЕНИЯ_ПЕНСИИ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.СведенияСПВ2;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_ВОЗНАГРАЖДЕНИЙ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.СведенияОНачисленномЗаработкеСЗВ63;
	ИначеЕсли СвойстваУзла.Получить("ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
	ИначеЕсли СвойстваУзла.Получить("КОНВЕРТАЦИЯ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ1;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2012_ГОДА") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ1;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_СВ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_НАЧИНАЯ_С_2013_ГОДА") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ1;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2014") <> Неопределено Тогда
		ВидКомплектовОтправляемыхДокументов = Справочники.ВидыОтправляемыхДокументов.КомплектыРСВ1;
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ1;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ_2015") <> Неопределено Тогда
		ВидКомплектовОтправляемыхДокументов = Справочники.ВидыОтправляемыхДокументов.КомплектыРСВ1;
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ1;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_ПО_ПАЧКЕ_ДОКУМЕНТОВ_РАЗДЕЛА_6") <> Неопределено Тогда
		ВидКомплектовОтправляемыхДокументов = Справочники.ВидыОтправляемыхДокументов.КомплектыРСВ1;
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ1;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		ВидКомплектовОтправляемыхДокументов = Справочники.ВидыОтправляемыхДокументов.КомплектыРСВ1;
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ1;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ПЛАТЕЛЬЩИКАМИ_НЕ_ПРОИЗВОДЯЩИМИ_ВЫПЛАТЫ_ФЛ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ2;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_СТРАХОВЫМ_ВЗНОСАМ_НА_ОПС_И_ОМС_ГЛАВАМИ_КФХ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ2;
	ИначеЕсли СвойстваУзла.Получить("РСВ-2") <> Неопределено ИЛИ СвойстваУзла.Получить("РСВ_2") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РСВ2;
	ИначеЕсли СвойстваУзла.Получить("РАСЧЕТ_ПО_ВЗНОСАМ_НА_ДОПОЛНИТЕЛЬНОЕ_СОЦИАЛЬНОЕ_ОБЕСПЕЧЕНИЕ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РВ3;
	ИначеЕсли СвойстваУзла.Получить("РВ-3") <> Неопределено ИЛИ СвойстваУзла.Получить("РВ_3") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РВ3;
	ИначеЕсли СвойстваУзла.Получить("ЗАЯВЛЕНИЕ_О_ДОБРОВОЛЬНОМ_ВСТУПЛЕНИИ_В_ПРАВООТНОШЕНИЯ_В_ЦЕЛЯХ_УПЛАТЫ_ДСВ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеДСВ1;
	ИначеЕсли СвойстваУзла.Получить("РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.РеестрДСВ3;
	ИначеЕсли СвойстваУзла.Получить("СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.СведенияСЗВ64;
	ИначеЕсли СвойстваУзла.Получить("ВЕДОМОСТЬ_УПЛАТЫ") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.ПередачаСЗВ4вПФР;
	ИначеЕсли СвойстваУзла.Получить("ИС_СЗВ-4-1") <> Неопределено ИЛИ СвойстваУзла.Получить("ИС_СЗВ_4_1") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
	ИначеЕсли СвойстваУзла.Получить("ИС_СЗВ-4-2") <> Неопределено ИЛИ СвойстваУзла.Получить("ИС_СЗВ_4_2") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
	ИначеЕсли СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ-1") <> Неопределено ИЛИ СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ_1") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
	ИначеЕсли СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ-3") <> Неопределено ИЛИ СвойстваУзла.Получить("СТАРЫЕ_ИС_СЗВ_3") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсучета;
	ИначеЕсли СвойстваУзла.Получить("СЗВ-М") <> Неопределено ИЛИ СвойстваУзла.Получить("СЗВ_М") <> Неопределено Тогда
		Возврат Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьОрганизациюПФР(КороткоеИмяФайла, ДеревоXML)
	
	Если ВРЕГ(Лев(КороткоеИмяФайла, 4)) = "ПФР_" Тогда
		УзелПачкаВходящихДокументов = ДеревоXML;
		
	Иначе
		УзелПачкаВходящихДокументов = Неопределено;
		СтрКлюч = "ORG-";
		ДлинаРегистрационногоНомераПФР = 14;
		ВхождениеКлюча = СтрНайти(ВРЕГ(КороткоеИмяФайла), СтрКлюч);
		РегистрационныйНомерПФР = СокрЛП(Сред(КороткоеИмяФайла, ВхождениеКлюча + СтрДлина(СтрКлюч), ДлинаРегистрационногоНомераПФР));
		Если СтрДлина(РегистрационныйНомерПФР) <> ДлинаРегистрационногоНомераПФР Тогда
			
			Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
			
		КонецЕсли;
	КонецЕсли;
	
	Если УзелПачкаВходящихДокументов <> Неопределено Тогда
		
		// ищем регистрационный номер в файле
		РегистрационныйНомерПФР = Неопределено;
		
		СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
		Для Каждого СвойствоУзла Из СвойстваУзла Цикл
			
			ТекУзел = УзелПачкаВходящихДокументов[СвойствоУзла.Имя];
			Если ТипЗнч(ТекУзел) <> Тип("ОбъектXDTO") Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваТекущегоУзла = ТекУзел.Свойства();
			Если СвойстваТекущегоУзла.Получить("РегистрационныйНомерПФР") <> Неопределено Тогда
				РегистрационныйНомерПФР = СокрЛП(ТекУзел.РегистрационныйНомерПФР);
			ИначеЕсли СвойстваТекущегоУзла.Получить("РегистрационныйНомер") <> Неопределено Тогда
				РегистрационныйНомерПФР = СокрЛП(ТекУзел.РегистрационныйНомер);
			ИначеЕсли СвойстваТекущегоУзла.Получить("РегНомерПФР") <> Неопределено Тогда
				РегистрационныйНомерПФР = СокрЛП(ТекУзел.РегНомерПФР);
			ИначеЕсли СвойстваТекущегоУзла.Получить("Страхователь") <> Неопределено
				И ТекУзел.Страхователь.Свойства().Получить("РегНомер") <> Неопределено Тогда
				РегистрационныйНомерПФР = СокрЛП(ТекУзел.Страхователь.РегНомер);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ищем организацию по регистрационному номеру
	Если ЗначениеЗаполнено(РегистрационныйНомерПФР) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                      |	Организации.Ссылка
		                      |ИЗ
		                      |	Справочник.Организации КАК Организации
		                      |ГДЕ
		                      |	Организации.РегистрационныйНомерПФР = &РегистрационныйНомерПФР");
		Запрос.УстановитьПараметр("РегистрационныйНомерПФР", РегистрационныйНомерПФР);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОпределитьПериодПФР(КороткоеИмяФайла, ДеревоXML)
	
	Результат = Новый Структура;
	
	// определяем год по имени файла
	КлючВИмениФайла = "-Y-";
	ВхождениеКлюча = СтрНайти(КороткоеИмяФайла, КлючВИмениФайла);
	Если ВхождениеКлюча <> 0 Тогда
		СтрНомерГода = Сред(КороткоеИмяФайла, ВхождениеКлюча + СтрДлина(КлючВИмениФайла), 4);
		Если ЗначениеЗаполнено(СтрНомерГода) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрНомерГода) Тогда
			Результат.Вставить("Год", Число(СтрНомерГода));
		КонецЕсли;
	КонецЕсли;
	
	Если ВРЕГ(Лев(КороткоеИмяФайла, 4)) = "ПФР_" Тогда
		УзелПачкаВходящихДокументов = ДеревоXML;
		
	Иначе
		Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	КонецЕсли;
	
	НомерКорректировки = Неопределено;
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Для Каждого СвойствоУзла Из СвойстваУзла Цикл
		
		ТекУзел = УзелПачкаВходящихДокументов[СвойствоУзла.Имя];
		Если ТипЗнч(ТекУзел) <> Тип("ОбъектXDTO") Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваТекущегоУзла = ТекУзел.Свойства();
		Если СвойстваТекущегоУзла.Получить("ОтчетныйГод") <> Неопределено Тогда
			
			СтрОтчетныйГод = СокрЛП(ТекУзел.ОтчетныйГод);
			Если ЗначениеЗаполнено(СтрОтчетныйГод) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрОтчетныйГод) Тогда
				ОтчетныйГод = Число(СтрОтчетныйГод);
			Иначе
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить("ДатаНачалаПериода", Дата(ОтчетныйГод, 1, 1));
			Результат.Вставить("ДатаОкончанияПериода", Дата(ОтчетныйГод, 12, 31));
			Результат.Вставить("Периодичность", Перечисления.Периодичность.Год);
		КонецЕсли;
		
		Если СвойстваТекущегоУзла.Получить("КалендарныйГод") <> Неопределено Тогда
			
			СтрКалендарныйГод = СокрЛП(ТекУзел.КалендарныйГод);
			Если ЗначениеЗаполнено(СтрКалендарныйГод) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрКалендарныйГод) Тогда
				КалендарныйГод = Число(СтрКалендарныйГод);
			Иначе
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить("ДатаНачалаПериода", Дата(КалендарныйГод, 1, 1));
			Результат.Вставить("ДатаОкончанияПериода", Дата(КалендарныйГод, 12, 31));
			Результат.Вставить("Периодичность", Перечисления.Периодичность.Год);
			
		КонецЕсли;
		
		Если СвойстваТекущегоУзла.Получить("ОтчетныйПериод") <> Неопределено Тогда
			
			УзелОтчетныйПериод = ТекУзел.ОтчетныйПериод;
			СвойстваУзлаОтчетныйПериод = УзелОтчетныйПериод.Свойства();
			Если СвойстваУзлаОтчетныйПериод.Получить("Квартал") <> Неопределено
			И СвойстваУзлаОтчетныйПериод.Получить("Год") <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(УзелОтчетныйПериод.Квартал) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(УзелОтчетныйПериод.Квартал)
				И ЗначениеЗаполнено(УзелОтчетныйПериод.Год) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(УзелОтчетныйПериод.Год) Тогда
				
				
					НомерГода = Число(УзелОтчетныйПериод.Год);
					НомерКвартала = Число(УзелОтчетныйПериод.Квартал);
					
					Если СвойстваУзла.Получить("СВЕДЕНИЯ_ПО_ПАЧКЕ_ДОКУМЕНТОВ_РАЗДЕЛА_6") <> Неопределено Тогда
						Если НомерКвартала = 3 ИЛИ НомерКвартала = 6 ИЛИ НомерКвартала = 9 Тогда
							НомерКвартала = НомерКвартала / 3;
						ИначеЕсли НомерКвартала = 0 Тогда
							НомерКвартала = 4;
						Иначе
							НомерКвартала = 0;
						КонецЕсли;
					КонецЕсли;
					
					Если НомерГода <> 0 И НомерКвартала <> 0 И НомерКвартала*3 <= 12 Тогда
						
						ДатаНачалаКвартала = НачалоКвартала(Дата(НомерГода, НомерКвартала*3, 1));
						ДатаОкончанияКвартала = КонецКвартала(ДатаНачалаКвартала);
						
						Результат.Вставить("ДатаНачалаПериода", ДатаНачалаКвартала);
						Результат.Вставить("ДатаОкончанияПериода", ДатаОкончанияКвартала);
						Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли СвойстваУзлаОтчетныйПериод.Получить("Месяц") <> Неопределено
				И СвойстваУзлаОтчетныйПериод.Получить("КалендарныйГод") <> Неопределено Тогда
					
					НомерГода = Число(УзелОтчетныйПериод.КалендарныйГод);
					НомерМесяца = Число(УзелОтчетныйПериод.Месяц);
					
					Если НомерГода <> 0 И НомерМесяца >= 1 И НомерМесяца <= 12 Тогда
						
						ДатаНачалаМесяца = НачалоМесяца(Дата(НомерГода, НомерМесяца, 1));
						ДатаОкончанияМесяца = КонецМесяца(ДатаНачалаМесяца);
						
						Результат.Вставить("ДатаНачалаПериода", ДатаНачалаМесяца);
						Результат.Вставить("ДатаОкончанияПериода", ДатаОкончанияМесяца);
						Результат.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
						
					КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
		Если СвойстваТекущегоУзла.Получить("КодОтчетногоПериода") <> Неопределено Тогда
			
			СтрОтчетныйПериод = СокрЛП(ТекУзел.КодОтчетногоПериода);
			Если ЗначениеЗаполнено(СтрОтчетныйПериод) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрОтчетныйПериод) Тогда
				ОтчетныйПериод = Число(СтрОтчетныйПериод);
				Если ОтчетныйПериод < 1 ИЛИ ОтчетныйПериод > 12 Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ГодОтчетногоПериода = ?(Результат.Свойство("ДатаНачалаПериода"), Год(Результат.ДатаНачалаПериода), 1);
			
			Результат.Вставить("ДатаНачалаПериода", Дата(ГодОтчетногоПериода, 1, 1));
			Результат.Вставить("ДатаОкончанияПериода", КонецМесяца(Дата(ГодОтчетногоПериода, ОтчетныйПериод, 1)));
			Результат.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОпределитьНомерКорректировкиПФР(ДеревоXML, КороткоеИмяФайла = "")
	
	Если ВРЕГ(Лев(КороткоеИмяФайла, 4)) = "ПФР_" Тогда
		УзелПачкаВходящихДокументов = ДеревоXML;
		
	Иначе
		Если ДеревоXML.Свойства().Получить("ПачкаВходящихДокументов") = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		УзелПачкаВходящихДокументов = ДеревоXML.ПачкаВходящихДокументов;
	КонецЕсли;
	
	НомерКорректировки = Неопределено;
	СвойстваУзла = УзелПачкаВходящихДокументов.Свойства();
	Для Каждого СвойствоУзла Из СвойстваУзла Цикл
		
		ТекУзел = УзелПачкаВходящихДокументов[СвойствоУзла.Имя];
		Если ТипЗнч(ТекУзел) <> Тип("ОбъектXDTO") Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваТекущегоУзла = ТекУзел.Свойства();
		Если СвойстваТекущегоУзла.Получить("НомерКорректировки") <> Неопределено Тогда
			НомерКорректировки = СокрЛП(ТекУзел.НомерКорректировки);
		ИначеЕсли СвойстваТекущегоУзла.Получить("НомерУточнения") <> Неопределено Тогда
			НомерКорректировки = СокрЛП(ТекУзел.НомерУточнения);
		ИначеЕсли СвойстваТекущегоУзла.Получить("ТипСведений") <> Неопределено
		И ВРег(ТекУзел.ТипСведений) = "КОРРЕКТИРУЮЩАЯ" И НЕ ЗначениеЗаполнено(НомерКорректировки) Тогда
			НомерКорректировки = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НомерКорректировки;
	
КонецФункции

&НаСервере
Функция ЭтоФайлВыгрузкиПФР(ОсновнойФайл)
	
	ПрефиксИмениФайлаПФР = "PFR-";
	ПрефиксИмениФайлаПФР2016 = "ПФР_";
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	Расширение = нрег(РасширениеФайла(ОсновнойФайл));
	
	Если (ВРЕГ(Лев(КороткоеИмяФайла, СтрДлина(ПрефиксИмениФайлаПФР))) = ПрефиксИмениФайлаПФР
	ИЛИ ВРЕГ(Лев(КороткоеИмяФайла, СтрДлина(ПрефиксИмениФайлаПФР2016))) = ПрефиксИмениФайлаПФР2016)
	И Расширение = "xml" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоФайлВыгрузкиФНС(ОсновнойФайл)
	
	КонтекстЭДОСервер = КонтекстЭДОСервер();
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	Расширение = нрег(РасширениеФайла(ОсновнойФайл));
	
	Если ВРЕГ(Лев(КороткоеИмяФайла, 1)) = "O" И Расширение = "txt"
	ИЛИ ВРег(Лев(КороткоеИмяФайла, 3)) = "NO_" И Расширение = "xml"
	ИЛИ ВРег(Лев(КороткоеИмяФайла, 3)) = "ON_" И Расширение = "xml" 
	ИЛИ ВРег(Лев(КороткоеИмяФайла, 3)) = "UT_" И Расширение = "xml"
	ИЛИ ВРег(Лев(КороткоеИмяФайла, 3)) = "SR_" И Расширение = "xml"
	ИЛИ ВРег(Лев(КороткоеИмяФайла, 7)) = "1115104" И Расширение = "xml"
	ИЛИ КонтекстЭДОСервер.ЭтоФайлВыгрузкиРеестраНДС(КороткоеИмяФайла)
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоФайлВыгрузкиФСГС(ПолноеИмяФайла)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	// если точек в имени файла больше одной, то файл некорректный
	Если СтрЧислоВхождений(КороткоеИмяФайла, ".") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// определяем имя файла без расширения
	ВхождениеТочки = СтрНайти(КороткоеИмяФайла, ".");
	Окончание = Сред(КороткоеИмяФайла, ВхождениеТочки);
	ИмяБезРасширения = Лев(КороткоеИмяФайла, ВхождениеТочки - 1);
	Если ИмяБезРасширения = "" ИЛИ СтрДлина(Окончание) < 4 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Файл выгрузки в Росстат, только *.xml
	Если НРег(Окончание) = ".xml" Тогда
		
		// считываем ключевые атрибута из файла
		ОбъектЧтениеXML = Новый ЧтениеXML;
		
		Попытка
			ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
			ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
			ПоказателиВыгрузки = Новый Соответствие;
			Пока ОбъектЧтениеXML.Прочитать() Цикл
				Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					Если ОбъектЧтениеXML.Имя = "title" ИЛИ ОбъектЧтениеXML.Имя = "sections" Тогда
						Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, "");
						КонецЕсли;
					КонецЕсли;
					Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
			ОбъектЧтениеXML.Закрыть();
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		Если ПоказателиВыгрузки["code"]     = Неопределено
		 ИЛИ ПоказателиВыгрузки["form"]     = Неопределено
		 ИЛИ ПоказателиВыгрузки["shifr"]    = Неопределено
		 ИЛИ ПоказателиВыгрузки["period"]   = Неопределено
		 ИЛИ ПоказателиВыгрузки["title"]    = Неопределено
		 ИЛИ ПоказателиВыгрузки["sections"] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПоказателиВыгрузки["year"] = Неопределено ИЛИ ПустаяСтрока(ПоказателиВыгрузки["year"]) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	Конецесли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЭтоФайлВыгрузкиФСС(ОсновнойФайл)
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	Расширение = нрег(РасширениеФайла(ОсновнойФайл));
	
	Для Инд = 0 По 8 Цикл
		КороткоеИмяФайла = СтрЗаменить(КороткоеИмяФайла, Строка(Инд), "9");
	КонецЦикла;
	
	Если нрег(КороткоеИмяФайла) = "9999999999_9999.xml"				// 4аФСС
		ИЛИ Лев(КороткоеИмяФайла, 16) = "9999999999_9999_" 			// 4ФСС
		ИЛИ Лев(КороткоеИмяФайла, 18) = "E_9999999999_9999_" Тогда 	// реестр больничных листов
		
		ЭтоИмяФСС = Истина;
		
	Иначе
		
		ЭтоИмяФСС = Ложь;
		
	КонецЕсли;
	
	
	Возврат Расширение = "xml" И ЭтоИмяФСС;
	                                                       
КонецФункции

&НаСервере
Функция ОпределитьОрганизациюПоКодуФСС(РегНомФСС)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.РегистрационныйНомерФСС = &РегНомФСС");
						  
	Запрос.УстановитьПараметр("РегНомФСС", РегНомФСС);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ОпределитьОрганизациюПоОКПО(КодПоОКПО)
	
	ИмяРеквКодПоОКПО = "КодПоОКПО";
	Если Метаданные.Справочники.Организации.Реквизиты.Найти("КодОКПО") <> Неопределено Тогда
		ИмяРеквКодПоОКПО = "КодОКПО";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации." + ИмяРеквКодПоОКПО + " = &КодПоОКПО");
	Запрос.УстановитьПараметр("КодПоОКПО", КодПоОКПО);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ЭтоФайлВыгрузкиОтчета4аФСС(ОсновнойФайл)
	
	КороткоеИмяФайла = КороткоеИмяФайлаПоПолному(ОсновнойФайл);
	
	Для Инд = 0 По 8 Цикл
		КороткоеИмяФайла = СтрЗаменить(КороткоеИмяФайла, Строка(Инд), "9");
	КонецЦикла;
	
	Возврат нрег(КороткоеИмяФайла) = "9999999999_9999.xml";
	
КонецФункции

&НаСервере
Функция ПроанализироватьФайлВыгрузкиОтчет4аФСС(ПолноеИмяФайла)
	
	// инициализируем переменные, содержащие двоичные данные и имя файла
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	// считываем показатели файла
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		ПоказателиВыгрузки = Новый Соответствие;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
						ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл """ + КороткоеИмяФайла + """ не является файлом выгрузки в формате XML!");
		Возврат Ложь;
	КонецПопытки;
	
	ПараметрыИмпорта = Новый Структура;
	
	// определение вида отчета
	ПараметрыИмпорта.Вставить("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСС);
	
	// определение вида отчета
	ПараметрыИмпорта.Вставить("ВидОтчета", Справочники.ВидыОтправляемыхДокументов.Отчет4аФСС);
	
	// определение организации
	ОрганизацияВыгрузки = Неопределено;
	РегНомФСС = ?(ПоказателиВыгрузки["REG_NUM"] = Неопределено, "", ПоказателиВыгрузки["REG_NUM"]);
	Если ЗначениеЗаполнено(РегНомФСС) Тогда
		ОрганизацияВыгрузки = ОпределитьОрганизациюПоКодуФСС(РегНомФСС);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияВыгрузки) Тогда
		ИНН = ?(ПоказателиВыгрузки["INN"] = Неопределено, "", ПоказателиВыгрузки["INN"]);
		Если ИНН <> "" Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, "");
		КонецЕсли;
	КонецЕсли;
	
	Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
		ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
	КонецЕсли;
	
	// определение органа ФСС
	КодПодчиненности = ПоказателиВыгрузки["KPS_NUM"];
	Если КодПодчиненности <> Неопределено Тогда
		ПараметрыИмпорта.Вставить("Получатель", Лев(КодПодчиненности,4));
	КонецЕсли;
	
	// определение периода
	ОшибкаОпределенияПериода = Ложь;
	ГодПериодОтч 	= ПоказателиВыгрузки["YEAR_NUM"];
	
	Если НЕ ЗначениеЗаполнено(ГодПериодОтч) ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодПериодОтч) Тогда
		ОшибкаОпределенияПериода = Истина;
	Иначе
		ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(Число(ГодПериодОтч), 1, 1));
		
		ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
		
		ДатаОкончанияПериодаОтчетаВыгрузки = КонецГода(Дата(Число(ГодПериодОтч), 1, 1));
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем текст на форме
	ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, "windows-1251");
	ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
	ЧтениеТекста.Закрыть();
	
	// инициализируем реквизиты элемента
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Организация");
	КонецЕсли;
	Объект.Получатель = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Получатель");
	Объект.ВидОтчета = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ВидОтчета");
	Объект.ДатаНачала = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаНачалаПериода");
	Объект.ДатаОкончания = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ДатаОкончанияПериода");
	Объект.Периодичность = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "Периодичность");
	Объект.ТипПолучателя = ПолучитьПараметрИмпорта(ПараметрыИмпорта, "ТипПолучателя");
	
	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ВидОтправляемогоДокументаПоИмениПредопределенного(ИмяПредопределенного)
	
	Если ИмяПредопределенного <> Неопределено Тогда
		Попытка
			Возврат Справочники.ВидыОтправляемыхДокументов[ИмяПредопределенного];
		Исключение
			Возврат Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
		КонецПопытки;
	Иначе
		Возврат Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСдвигВМесяцахПоПериодичности()
	
	СдвигВМесяцахПоПериодичности = Новый Соответствие;
	СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Месяц, 1);
	СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Квартал, 3);
	Если ПериодичностьПолугодиеДоступна Тогда
		СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Полугодие, 6);
	КонецЕсли;
	СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Год, 12);
	Возврат СдвигВМесяцахПоПериодичности;
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеКодуИзШаблонаПериодичности()
	СоответствиеКодуИзШаблонаПериодичности = Новый Соответствие;
	СоответствиеКодуИзШаблонаПериодичности.Вставить("001", Перечисления.Периодичность.Год);
	Если ПериодичностьПолугодиеДоступна Тогда
		СоответствиеКодуИзШаблонаПериодичности.Вставить("002", Перечисления.Периодичность.Полугодие);
	КонецЕсли;
	СоответствиеКодуИзШаблонаПериодичности.Вставить("004", Перечисления.Периодичность.Квартал);
	СоответствиеКодуИзШаблонаПериодичности.Вставить("012", Перечисления.Периодичность.Месяц);
	СоответствиеКодуИзШаблонаПериодичности.Вставить("036", Перечисления.Периодичность.Декада);
	СоответствиеКодуИзШаблонаПериодичности.Вставить("056", Перечисления.Периодичность.Неделя);
	
	Возврат СоответствиеКодуИзШаблонаПериодичности;
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеПериодОтчПериодичности()
	
	СоответствиеПериодОтчПериодичности = Новый Соответствие;
	СоответствиеПериодОтчПериодичности.Вставить("01", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("02", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("03", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("04", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("05", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("06", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("07", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("08", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("09", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("10", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("11", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("12", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("17", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("18", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("21", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("22", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("23", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("24", Перечисления.Периодичность.Квартал);
	Если ПериодичностьПолугодиеДоступна Тогда
		СоответствиеПериодОтчПериодичности.Вставить("31", Перечисления.Периодичность.Полугодие);
		СоответствиеПериодОтчПериодичности.Вставить("32", Перечисления.Периодичность.Полугодие);
	КонецЕсли;
	СоответствиеПериодОтчПериодичности.Вставить("33", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("34", Перечисления.Периодичность.Год);
	СоответствиеПериодОтчПериодичности.Вставить("35", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("36", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("37", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("38", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("39", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("40", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("41", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("42", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("43", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("44", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("45", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("46", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("47", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("48", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("51", Перечисления.Периодичность.Квартал);
	Если ПериодичностьПолугодиеДоступна Тогда
		СоответствиеПериодОтчПериодичности.Вставить("52", Перечисления.Периодичность.Полугодие);
	КонецЕсли;
	СоответствиеПериодОтчПериодичности.Вставить("53", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("54", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("55", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("56", Перечисления.Периодичность.Квартал);
	СоответствиеПериодОтчПериодичности.Вставить("71", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("72", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("73", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("74", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("75", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("76", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("77", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("78", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("79", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("80", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("81", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("82", Перечисления.Периодичность.Месяц);
	СоответствиеПериодОтчПериодичности.Вставить("90", Перечисления.Периодичность.Год);
	Возврат СоответствиеПериодОтчПериодичности;
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеПериодОтчМесяцуОкончания()
	СоответствиеПериодОтчМесяцуОкончания = Новый Соответствие;
	СоответствиеПериодОтчМесяцуОкончания.Вставить("01", 1);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("02", 2);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("03", 3);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("04", 4);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("05", 5);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("06", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("07", 7);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("08", 8);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("09", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("10", 10);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("11", 11);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("12", 12);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("17", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("18", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("21", 3);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("22", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("23", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("24", 12);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("31", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("32", 12);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("33", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("34", 12);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("35", 1);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("36", 2);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("37", 3);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("38", 4);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("39", 5);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("40", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("41", 7);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("42", 8);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("43", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("44", 10);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("45", 11);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("46", 12);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("47", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("48", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("51", 3);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("52", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("53", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("54", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("55", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("56", 12);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("71", 1);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("72", 2);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("73", 3);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("74", 4);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("75", 5);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("76", 6);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("77", 7);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("78", 8);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("79", 9);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("80", 10);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("81", 11);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("82", 12);
	СоответствиеПериодОтчМесяцуОкончания.Вставить("90", 12);
	Возврат СоответствиеПериодОтчМесяцуОкончания;
КонецФункции

Функция ПолучитьПеридичностьПоПризПериодОтч()
	
	ПеридичностьПоПризПериодОтч = Новый Соответствие;
	ПеридичностьПоПризПериодОтч.Вставить("0", Перечисления.Периодичность.Год);
	ПеридичностьПоПризПериодОтч.Вставить("1", Перечисления.Периодичность.Месяц);
	ПеридичностьПоПризПериодОтч.Вставить("3", Перечисления.Периодичность.Квартал);
	ПеридичностьПоПризПериодОтч.Вставить("6", Перечисления.Периодичность.Квартал);
	ПеридичностьПоПризПериодОтч.Вставить("9", Перечисления.Периодичность.Квартал);
	Возврат ПеридичностьПоПризПериодОтч;
	
КонецФункции

&НаСервере
Функция РасширениеФайла(стрИмяФайла)
	
	СтрДлинаИмяФайла = СтрДлина(стрИмяФайла);
	Для Инд = 1 По СтрДлинаИмяФайла Цикл
		ТекущийИндекс = СтрДлинаИмяФайла - Инд + 1;
		Если Сред(стрИмяФайла, ТекущийИндекс, 1) = "." Тогда
			Возврат Сред(стрИмяФайла, ТекущийИндекс + 1);
		КонецЕсли;
	КонецЦикла;
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаксимальноДопустимыйРазмерОтображаемогоТекста()
	
	Возврат 1024 * 1024 * 30; // 30 МБ
	
КонецФункции

&НаСервере
Процедура ПрорисоватьФайлы()
	
	// определяем, какой файл следует прорисовать
	Если СвойстваФайлов.Количество() = 0 Тогда
		ПредставлениеТекст = "<не удалось извлечь электронное представление из хранилища>";
		ФайлыКомплекта.Очистить();
	Иначе
		
		//////////////////////////////////////////////////////////////////////////////
		// Прорисовка одиночного электронного представления
		
		Если СвойстваФайлов.Количество() = 1 Тогда
			ОсновнойФайл = СвойстваФайлов[0];
		Иначе
			ОсновнойФайл = ПолучитьОсновнойФайл();
		КонецЕсли;
		
		КонтекстЭДОСервер = КонтекстЭДОСервер(); 
		
		// записываем данные основного файла во временный каталог
		Если НЕ (КонтекстЭДОСервер.ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках(ОсновнойФайл.ИмяФайла) И СвойстваФайлов.Количество() > 1) Тогда
			Если ОсновнойФайл <> Неопределено Тогда
				ЭтоВыгрузкаВXML = (нрег(РасширениеФайла(ОсновнойФайл.ИмяФайла)) = "xml");
				
				ДанныеФайла = ПолучитьИзВременногоХранилища(ОсновнойФайл.АдресДанных);
				
				ФайлОсновногоПредставления = ПолучитьИмяВременногоФайла("xml");
				ДанныеФайла.Записать(ФайлОсновногоПредставления);
				АдресДанныхФайлаОсновногоПредставления = ОсновнойФайл.АдресДанных;
				
				Если ЭтоВыгрузкаВXML Тогда
					Если Объект.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС") Тогда
						ПредставлениеТекст = КонтекстЭДОСервер.ПрочитатьТекстИзФайла(ФайлОсновногоПредставления, "UTF-8");
					Иначе
						ПредставлениеТекст = КонтекстЭДОСервер.ПрочитатьТекстИзФайла(ФайлОсновногоПредставления, ,Истина);
					КонецЕсли;
				Иначе
					Если ЭтоФайлВыгрузкиФСГС(ФайлОсновногоПредставления) Тогда
						КодировкаФайла = "UTF-8";
					ИначеЕсли ЭтоВыгрузкаВXML Тогда
						КодировкаФайла = "windows-1251";
					Иначе
						КодировкаФайла = "cp866";
					КонецЕсли;
					ОбъектЧтениеТекста =  Новый ЧтениеТекста(ФайлОсновногоПредставления, КодировкаФайла);
					ПредставлениеТекст = ОбъектЧтениеТекста.Прочитать();
					ОбъектЧтениеТекста.Закрыть();
				КонецЕсли;	
										
				УдалитьФайлы(ФайлОсновногоПредставления);
				
				Если ЭтоВыгрузкаВXML Тогда
					Элементы.ПредставлениеТекст.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
				Иначе
					Элементы.ПредставлениеТекст.Вид = ВидПоляФормы.ПолеВвода;
				КонецЕсли;
				
			Иначе
				АдресДанныхФайлаОсновногоПредставления = "";
				Элементы.ПредставлениеТекст.Вид = ВидПоляФормы.ПолеВвода;
				ПредставлениеТекст = "<не удалось извлечь электронное представление из хранилища>";
			КонецЕсли;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// Прорисовка комплекта
		
		ФайлыКомплекта.Очистить();
		Для Каждого Стр Из СвойстваФайлов Цикл
			Если Стр.ТипФайлаОтчетности <> Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР Тогда
				НовСтр = ФайлыКомплекта.Добавить();
				НовСтр.Имя = Стр.ИмяФайла;
				НовСтр.Тип = Стр.ТипФайлаОтчетности;
				НовСтр.АдресДанных = Стр.АдресДанных;
				НовСтр.СсылкаПоказать = НСтр("ru = 'Открыть'");
			Иначе
				НовСтр = ДополнительныеФайлы.Добавить();
				НовСтр.Имя = Стр.ИмяФайла;
				НовСтр.АдресДанных = Стр.АдресДанных;
				ДополнительныеФайлыПФРДобавитьНаСервере(ДополнительныеФайлы.Количество(), Стр.ИмяФайла);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновнойФайл()
	
	// пробуем найти основной файл бух. отчетности
	Для каждого Стр Из СвойстваФайлов Цикл
		Если Стр.ТипФайлаОтчетности = Перечисления.ТипыФайловБухОтчетности.ОсновнойФайлОтчетности Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
	// находим первый файл с расширением xml или txt
	ОсновнойФайл = Неопределено;
	Для Каждого Стр Из СвойстваФайлов Цикл
		нрегРасширениеФайла = нрег(РасширениеФайла(стр.ИмяФайла));
		Если нрегРасширениеФайла = "txt" ИЛИ нрегРасширениеФайла = "xml" Тогда
			ОсновнойФайл = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОсновнойФайл;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрорисоватьСтатус(Форма)
	
	Тип = Форма.Объект.ТипПолучателя;
	Если ЗначениеЗаполнено(Тип) Тогда
		ТипКонтролирующегоОргана = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ИмяПеречисления(Тип);
	Иначе
		ТипКонтролирующегоОргана = Неопределено;
	КонецЕсли;
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Форма.Объект.Ссылка, Форма.Объект.Организация, ТипКонтролирующегоОргана);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовкиПанелиОтправки);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция БольшеНеПоказыватьПредупреждениеОБольшомРазмереФайла() Экспорт

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныеПредставленияРегламентированныхОтчетов",
		"БольшеНеПоказыватьПредупреждениеОБольшомРазмереФайла",
		,,
		ПользователиИнформационнойБазы.ТекущийПользователь()	
	);

КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(Элемент)
	
	ИмяФайла = Элемент.ТекущиеДанные.Имя;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.ТекущиеДанные.АдресДанных);
	
	ДополнительныеПараметры = Новый Структура("ДвоичныеДанныеФайла, ИмяФайла", ДвоичныеДанныеФайла, ИмяФайла);
	
	#Если ВебКлиент Тогда
	#Иначе
		РазмерФайла = ДвоичныеДанныеФайла.Размер();
		
		Если РазмерФайла > МаксимальноДопустимыйРазмерОтображаемогоТекста() Тогда
			Если БольшеНеПоказыватьПредупреждениеОБольшомРазмереФайла() <> Истина Тогда
				
				СтруктураПараметров = Новый Структура("МаксимальноДопустимыйРазмерОтображаемогоТекста", МаксимальноДопустимыйРазмерОтображаемогоТекста());
				
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлПослеОтветаНаВопросОБольшомРазмереФайла", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПредупреждениеОБольшомРазмереФайла", СтруктураПараметров,,,,, ОписаниеОповещения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	ОткрытьФайлПослеОтветаНаВопросОБольшомРазмереФайла(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеОтветаНаВопросОБольшомРазмереФайла(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ДвоичныеДанныеФайла = ДополнительныеПараметры.ДвоичныеДанныеФайла;	
	Если Результат = Истина Тогда
		СтруктураПараметров = Новый Структура("ИмяФайла, Содержимое", ИмяФайла, ДвоичныеДанныеФайла);
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПросмотрТекст", СтруктураПараметров,, СтруктураПараметров.ИмяФайла);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыКомплектаНаСервере(МассивФайлов, ЭтоДополнительныеФайлы = Ложь)
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		ПолноеИмяФайла = КаталогВременныхФайлов() + ВыбранныйФайл.Имя;
		ПолучитьИзВременногоХранилища(ВыбранныйФайл.АдресДанных).Записать(ПолноеИмяФайла);
		
		Если НЕ ЭтоДополнительныеФайлы Тогда
			Если Объект.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НДС")
				ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраНДС(Объект.ВидОтчета) Тогда
				
				Если ОпределитьТипФайлаНДС(ВыбранныйФайл.Имя) = Неопределено
					И НЕ КонтекстЭДОСервер().ЭтоФайлВыгрузкиРеестраНДС(ВыбранныйФайл.Имя) Тогда
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Файл ""%1"" не может быть отправлен в составе реестра НДС.'"),
						ВыбранныйФайл.Имя);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовСтр = ФайлыКомплекта.Добавить();
			НовСтр.Имя = ВыбранныйФайл.Имя;
			НовСтр.Тип = ОпределитьТипФайлаПФРилиБО(ПолноеИмяФайла);
			НовСтр.СсылкаПоказать = НСтр("ru = 'Открыть'");
			НовСтр.АдресДанных = ВыбранныйФайл.АдресДанных;
		Иначе
			НовСтр = ДополнительныеФайлы.Добавить();
			НовСтр.Имя = ВыбранныйФайл.Имя;
			НовСтр.АдресДанных = ВыбранныйФайл.АдресДанных;
			ДополнительныеФайлыПФРДобавитьНаСервере(ДополнительныеФайлы.Количество(), ВыбранныйФайл.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКомплектВСвойствахФайлов()
	
	СвойстваФайлов.Очистить();
	Для Каждого СтрокаТаблицы Из ФайлыКомплекта Цикл
		ОпределитьНовыйФайлВТаблицеСвойствФайлов(СтрокаТаблицы.Имя, СтрокаТаблицы.Тип, СтрокаТаблицы.АдресДанных);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ДополнительныеФайлы Цикл
		ОпределитьНовыйФайлВТаблицеСвойствФайлов(СтрокаТаблицы.Имя, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР, СтрокаТаблицы.АдресДанных);
	КонецЦикла;
	ПронумероватьСтрокиТаблицы(ФайлыКомплекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПередНачаломДобавления(Отказ, Копирование, ЭтоДополнительныеФайлы)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Копирование запрещено!'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоДополнительныеФайлы", 	ЭтоДополнительныеФайлы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлыКомплектаПередНачаломДобавленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоДополнительныеФайлы", 	ЭтоДополнительныеФайлы);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ОписаниеОповещения);	
	
	КонтекстЭДОКлиент.ПолучениеФайловДляИмпортаНачало(УникальныйИдентификатор, , ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКомплектаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДобавитьФайлыКомплектаНаСервере(Результат.ФайлыДляИмпорта, ДополнительныеПараметры.ЭтоДополнительныеФайлы);
	СохранитьКомплектВСвойствахФайлов();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	ЗагружаетсяНесколькоФайлов = 
		Форма.СвойстваФайлов.Количество() > 1 
		ИЛИ Объект.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НДС")
		ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраНДС(Объект.ВидОтчета);
	
	Если Объект.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.НДС")
		ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраНДС(Объект.ВидОтчета) Тогда
		
		ИндексФайла = Форма.СвойстваФайлов.Количество() - 1;
		Пока ИндексФайла >= 0 Цикл
			СвойстваФайла = Форма.СвойстваФайлов[ИндексФайла];
			Если ОпределитьТипФайлаНДС(СвойстваФайла.ИмяФайла) = Неопределено
				И НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайлВыгрузкиРеестраНДС(СвойстваФайла.ИмяФайла) Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Файл ""%1"" не может быть отправлен в составе реестра НДС.'"),
					СвойстваФайла.ИмяФайла);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				Форма.СвойстваФайлов.Удалить(ИндексФайла);
			КонецЕсли;
			
			ИндексФайла = ИндексФайла - 1;
		КонецЦикла;
		
	ИначеЕсли Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС") Тогда
		ИндексФайла = Форма.СвойстваФайлов.Количество() - 1;
		Пока ИндексФайла >= 1 Цикл
			СвойстваФайла = Форма.СвойстваФайлов[ИндексФайла];
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Файл ""%1"" не может быть отправлен в составе комплекта.'"),
				СвойстваФайла.ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЗагружаетсяНесколькоФайлов = Ложь;
			Форма.СвойстваФайлов.Удалить(ИндексФайла);
			ИндексФайла = ИндексФайла - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ЗаявлениеОВвозеТоваров")
		ИЛИ (Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ПрочаяОтчетностьПФР")
			И Объект.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК")
			И Объект.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1")
			И Объект.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СведенияОНачисленномЗаработкеСЗВ63")
			И Объект.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПачкаДокументовСЗВ61")
			И Объект.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрСЗВ62")
			И Объект.ВидОтчета <> ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.СведенияСЗВ64"))
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ОтчетФСГС")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.РеестрСведенийФСС")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.Отчет4аФСС")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС")
		ИЛИ Объект.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика") Тогда
		Элементы.ГруппаКорректировка.Видимость = Ложь; 
	Иначе
		Элементы.ГруппаКорректировка.Видимость = Истина; 
	КонецЕсли;	
	
	Если Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.БухгалтерскаяОтчетность") Тогда 
		Элементы.ФайлПояснительнойЗаписки.Видимость = Истина;
		Элементы.ФайлАудиторскогоЗаключения.Видимость = Истина;
		Элементы.ФайлЗаявленияРевизионногоСоюза.Видимость = Истина;
		Элементы.ОтступФайл.Видимость = Истина;
	Иначе
		Элементы.ФайлПояснительнойЗаписки.Видимость = Ложь;
		Элементы.ФайлАудиторскогоЗаключения.Видимость = Ложь;
		Элементы.ФайлЗаявленияРевизионногоСоюза.Видимость = Ложь;
		Элементы.ОтступФайл.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.КомплектОтчетностиПФР") Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКомплектПФР;
		
	ИначеЕсли ЗагружаетсяНесколькоФайлов
		И (Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.УведомлениеОКонтролируемыхСделках")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ПрочаяОтчетностьФНС")
		ИЛИ ДокументооборотСКОКлиентСервер.ЭтоВидОтправляемогоДокументаРеестраНДС(Объект.ВидОтчета)) Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаКомлектаУведомлений;
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПрочаяОтчетность;
		
	КонецЕсли;
	
	
	Если Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.РеестрСведенийФСС")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС")
		ИЛИ Объект.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика") Тогда
		Элементы.ПредставлениеПериода.Видимость = Ложь;
	Иначе
		Элементы.ПредставлениеПериода.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ВыгрузитьПакет.Видимость = 
		Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ОтчетФСРАРОпт")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ОтчетФСРАРРозница")
		ИЛИ Форма.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ОтчетРПН");
		
	Элементы.Получатель.Видимость = 
		Объект.ТипПолучателя <> ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР")
		И Объект.ТипПолучателя <> ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН")
		И Объект.ТипПолучателя <> ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС");
		
	Если Объект.Версия = 0 Тогда
		Форма.ВидДокумента = 0;
		Форма.НомерКорректировки = 0;
	Иначе
		Форма.ВидДокумента = 1;
		Форма.НомерКорректировки = Объект.Версия;
	КонецЕсли;
		
	Элементы.НомерКорректировки.Доступность = Форма.ВидДокумента = 1;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНаименование(ВидОтчета, НачалоПериода, КонецПериода, Организация) Экспорт
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.РеестрСведенийФСС")
		ИЛИ ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС")
		ИЛИ ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика") Тогда
		ШаблонНаименования = НСтр("ru = '%1 (%2)'");
	Иначе
		ШаблонНаименования = НСтр("ru = '%1 за %3 (%2)'");
	КонецЕсли;
		
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонНаименования, ВидОтчета, Организация,
				ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода));
			
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода) Экспорт
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.РеестрСведенийФСС")
		ИЛИ ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыОтправляемыхДокументов.ИсходящееУведомлениеФНС")
		ИЛИ Объект.ВидОтчета = ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика") Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат ПредставлениеПериода(НачалоПериода, КонецДня(КонецПериода), "ФП=Истина");
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(Объект.ТипПолучателя));
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(Объект.ТипПолучателя));
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(Объект.ТипПолучателя));
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(Объект.ТипПолучателя));
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, ИмяТекущегоТипаПолучателя(Объект.ТипПолучателя));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПронумероватьСтрокиТаблицы(ФайлыКомплекта)

	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ФайлыКомплекта Цикл
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеФайлыПФРДобавитьНаСервере(Номер, ИмяФайла)
	
	СтрокаНомера = Формат(Номер, "ЧН=0; ЧГ=");
	
	ГруппаДополнительныйФайлПФР = Элементы.Добавить("ГруппаДополнительныйФайлПФР" + СтрокаНомера, Тип("ГруппаФормы"), Элементы.СтраницаКомплектПФР);
	ГруппаДополнительныйФайлПФР.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДополнительныйФайлПФР.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаДополнительныйФайлПФР.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДополнительныйФайлПФР.ОтображатьЗаголовок = Ложь;
	
	ДополнительныйФайлПФР = Элементы.Добавить("ДополнительныйФайлПФР" + СтрокаНомера, Тип("ДекорацияФормы"), ГруппаДополнительныйФайлПФР);
	ДополнительныйФайлПФР.Заголовок = ИмяФайла;
	ДополнительныйФайлПФР.Гиперссылка = Истина;
	ДополнительныйФайлПФР.УстановитьДействие("Нажатие", "ДополнительныйФайлНажатие");
	
	КомандаДополнительныйФайлПФРУдалить = Команды.Добавить("ДополнительныйФайлПФРУдалить" + СтрокаНомера);
	КомандаДополнительныйФайлПФРУдалить.Действие = "ДополнительныйФайлПФРУдалить";
	
	ДополнительныйФайлПФРУдалить = Элементы.Добавить("ДополнительныйФайлПФРУдалить" + СтрокаНомера, Тип("КнопкаФормы"), ГруппаДополнительныйФайлПФР);
	ДополнительныйФайлПФРУдалить.Заголовок = НСтр("ru = 'Удалить'");
	ДополнительныйФайлПФРУдалить.Картинка = БиблиотекаКартинок.Удалить;
	ДополнительныйФайлПФРУдалить.Отображение = ОтображениеКнопки.Картинка;
	ДополнительныйФайлПФРУдалить.ИмяКоманды = "ДополнительныйФайлПФРУдалить" + СтрокаНомера;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеФайлыПФРУдалитьНаСервере(Номер)
	
	КоличествоФайлов = ДополнительныеФайлы.Количество();
	Для НомерФайла = Номер + 1 По КоличествоФайлов Цикл
		СтрокаНомера = Формат(НомерФайла, "ЧН=0; ЧГ=");
		СтрокаПредыдущийНомера = Формат(НомерФайла - 1, "ЧН=0; ЧГ=");
		
		Элементы.Найти("ДополнительныйФайлПФР" + СтрокаПредыдущийНомера).Заголовок = Элементы.Найти("ДополнительныйФайлПФР" + СтрокаНомера).Заголовок;
	КонецЦикла;
	
	СтрокаПоследнегоНомера = Формат(КоличествоФайлов, "ЧН=0; ЧГ=");
	ДополнительныйФайлПФР = Элементы.Найти("ДополнительныйФайлПФР" + СтрокаПоследнегоНомера);
	Элементы.Удалить(ДополнительныйФайлПФР);
	ДополнительныйФайлПФРУдалить = Элементы.Найти("ДополнительныйФайлПФРУдалить" + СтрокаПоследнегоНомера);
	Элементы.Удалить(ДополнительныйФайлПФРУдалить);
	КомандаДополнительныйФайлПФРУдалить = Команды.Найти("ДополнительныйФайлПФРУдалить" + СтрокаПоследнегоНомера);
	Команды.Удалить(КомандаДополнительныйФайлПФРУдалить);
	ГруппаДополнительныйФайлПФР = Элементы.Найти("ГруппаДополнительныйФайлПФР" + СтрокаПоследнегоНомера);
	Элементы.Удалить(ГруппаДополнительныйФайлПФР);
	
	ДополнительныеФайлы.Удалить(Номер - 1);
	СохранитьКомплектВСвойствахФайлов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыДополнительныеФайлыПФР

&НаКлиенте
Процедура ДополнительныеФайлыПФРДобавить(Команда)
	
	Отказ = Ложь;
	ФайлыКомплектаПередНачаломДобавления(Отказ, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайлПФРУдалить(Команда)
	
	НомерФайла = 0;
	ПрефиксИмениКоманды = "ДополнительныйФайлПФРУдалить";
	ДлинаПрефиксаИмениКоманды = СтрДлина(ПрефиксИмениКоманды);
	Если Лев(Команда.Имя, ДлинаПрефиксаИмениКоманды) = ПрефиксИмениКоманды Тогда
		СтрокаНомераФайла = Сред(Команда.Имя, ДлинаПрефиксаИмениКоманды + 1);
		НомерФайла = Число(СтрокаНомераФайла);
	КонецЕсли;
	
	Если НомерФайла > 0 Тогда
		ДополнительныеФайлыПФРУдалитьНаСервере(НомерФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйФайлНажатие(Элемент)
	
	НомерФайла = 0;
	ПрефиксИмениДекорации = "ДополнительныйФайлПФР";
	ДлинаПрефиксаИмениДекорации = СтрДлина(ПрефиксИмениДекорации);
	Если Лев(Элемент.Имя, ДлинаПрефиксаИмениДекорации) = ПрефиксИмениДекорации Тогда
		СтрокаНомераФайла = Сред(Элемент.Имя, ДлинаПрефиксаИмениДекорации + 1);
		НомерФайла = Число(СтрокаНомераФайла);
	КонецЕсли;
	
	Если НомерФайла > 0 Тогда
		ДополнительныйФайл = ДополнительныеФайлы[НомерФайла - 1];
		ПолучитьФайл(ДополнительныйФайл.АдресДанных, ДополнительныйФайл.Имя, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)
	
	Если Модифицированность И Не Записать()	ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВФСРАР(ЭтаФорма,ОписаниеОповещения);
		
	ИначеЕсли Объект.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВРПН(ЭтаФорма, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайлаПакета = Результат.РезультатВыгрузки;
	Если ЗначениеЗаполнено(ИмяВременногоФайлаПакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.СохранитьФайлНаКлиенте(ИмяВременногоФайлаПакета, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при выгрузке пакета'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоопределитьСвойства()
	
	Объект.ДатаИмпорта = ТекущаяДатаСеанса();
	
	ВидОтчетаПриИзмененииНаСервере();
	
	Объект.ПредставлениеПериода = Справочники.ЭлектронныеПредставленияРегламентированныхОтчетов.ПолучитьПредставлениеПериода(
		Объект.ВидОтчета, Объект.ДатаНачала, Объект.ДатаОкончания);
		
	// приводим реквизит "Получатель" к новому типу получателя
	Если Объект.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР")
		И НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		ЗаполнитьПолучателяИзСвойствОрганизации();
	КонецЕсли;
	
	ПривестиПолучателяКТипу(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ОсновнойИзВыбранныхФайлов(ВыбранныеФайлы)
	
	КонтекстЭДОСервер = КонтекстЭДОСервер();
	
	ОсновнойФайл = ВыбранныеФайлы[0];
	
	Для Каждого ФайлОтчета Из ВыбранныеФайлы Цикл
		
		КороткоеИмя = КороткоеИмяФайлаПоПолному(ФайлОтчета.Имя);
		Если КонтекстЭДОСервер.ЭтоФайлВыгрузкиДекларацияНДС(КороткоеИмя) Тогда
			
			ОсновнойФайл = ФайлОтчета;
			Прервать;
			
		ИначеЕсли КонтекстЭДОСервер.ЭтоФайлВыгрузкиРеестраНДС(КороткоеИмя)
			И Найти(КороткоеИмя, ".2_") = 0 Тогда
			
			ОсновнойФайл = ФайлОтчета;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОсновнойФайл;
	
КонецФункции

&НаСервере
Функция ВыбранныеФайлыРазбитыПриНеобходимости(ВыбранныеФайлы)
	
	РезультатДоопределения = Истина;
	
	// Параметры берем из ПриСозданииНаСервере
	ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках 	= Параметры.ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках;
	ВыполнитьРазделениеФайла 							= Параметры.ВыполнитьРазделениеФайла;
	ВыполнятьПроверкуКомплектаУведомлений 				= Параметры.ВыполнятьПроверкуКомплектаУведомлений;

	// проверяем файл электронного представления уведомления
	Если ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках 
		И ВыполнятьПроверкуКомплектаУведомлений Тогда
		
		РезультатДоопределения = ПроверитьФайлыВыгрузкиУведомленияОКонтролируемыхСделках(ВыбранныеФайлы);
		Если РезультатДоопределения = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() = 1 
		И ВыполнитьРазделениеФайла
		И ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках Тогда
		
		ОсновнойФайл = ВыбранныеФайлы[0];
		
		ВыбранныеФайлы 	= КонтекстЭДОСервер().РазбитьБольшойФайлУведомленияНаНесколькоМаленьких(
			ОсновнойФайл, 
			ЭтаФорма.УникальныйИдентификатор);
			
		РезультатДоопределения = ВыбранныеФайлы.Количество() > 0;
			
	КонецЕсли;
	
	Возврат РезультатДоопределения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыбранныеФайлыСНужнымРасширением(ВыбранныеФайлы)
	
	ФайлыОтчетов = Новый Массив;

	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		РасширениеВыбранногоФайла = Нрег(ВыбранныйФайл.Расширение);
		
		Если РасширениеВыбранногоФайла = ".txt"
			ИЛИ РасширениеВыбранногоФайла = ".xml" Тогда
			
			ФайлыОтчетов.Добавить(ВыбранныйФайл);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФайлыОтчетов;
	
КонецФункции

#КонецОбласти