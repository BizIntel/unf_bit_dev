
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипСтруктурнойЕдиницыРозница = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	ТипСтруктурнойЕдиницыРозницаСуммовойУчет = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет;
	ТипСтруктурнойЕдиницыСклад = Перечисления.ТипыСтруктурныхЕдиниц.Склад;
	
	Элементы.ОрдерныйСклад.Доступность = Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад;
	Элементы.РозничныйВидЦен.Видимость = (
		Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница
		ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад
		ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозницаСуммовойУчет
	);
	УчетРозничныхПродаж = ПолучитьФункциональнуюОпцию("УчетРозничныхПродаж");
	Элементы.ОбработкаМенеджерПодсказокТиповыеСхемыУчета_Розница.Видимость = Элементы.РозничныйВидЦен.Видимость И УчетРозничныхПродаж;
	Элементы.ТипСтруктурнойЕдиницы.ОтображениеПодсказки = ?(Элементы.РозничныйВидЦен.Видимость И УчетРозничныхПродаж, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
	
	Если Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить()
	 ИЛИ Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Склад Тогда
		Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Склад);
		Если Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить() 
			ИЛИ Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница 
			ИЛИ Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
			Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Розница);
			Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет);
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		ИЛИ Объект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение Тогда
		Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Добавить(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		  И Элементы.ТипСтруктурнойЕдиницы.СписокВыбора.Количество() = 1 Тогда
		Объект.ТипСтруктурнойЕдиницы = Элементы.ТипСтруктурнойЕдиницы.СписокВыбора[0].Значение;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.РозничныйВидЦен.Доступность = НЕ Объект.ОрдерныйСклад;
	Элементы.РозничныйВидЦен.АвтоОтметкаНезаполненного = (
		Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница
		ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозницаСуммовойУчет
	);
	
	Если Параметры.Ключ.Пустая() Тогда
		// УНФ.КонтактнаяИнформация
		КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
		// Конец УНФ.КонтактнаяИнформация
	КонецЕсли;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЦветТекстаНекорректногоЗаполнения = ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента;
	РежимИсправленияОшибок = Параметры.ОшибкиЗаполнения;
	Если РежимИсправленияОшибок Тогда
		ПроверкаДанныхКлиентСервер.ВывестиСообщенияОбОшибкахЗаполнения("Объект", Параметры.ПереченьОшибок);
		ОтметитьОшибки(Параметры.ПереченьОшибок);
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилисьСчетаСтруктурныеЕдиницы" Тогда
		Объект.СчетУчетаВРознице = Параметр.СчетУчетаВРознице;
		Объект.СчетУчетаНаценки = Параметр.СчетУчетаНаценки;
		Модифицированность = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", ТекущийОбъект.ЭтоНовый());
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец УНФ.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый Тогда
		УправлениеНебольшойФирмойСервер.ПроверитьУстановитьФОУчетПоНесколькимСкладамПодразделениям(Объект.ТипСтруктурнойЕдиницы);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписиНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТипСтруктурнойЕдиницыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТипСтруктурнойЕдиницы) Тогда
		
		Если Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад Тогда
			Элементы.ОрдерныйСклад.Доступность = Истина;
		Иначе
			Элементы.ОрдерныйСклад.Доступность = Ложь;
			Объект.ОрдерныйСклад = Ложь;
		КонецЕсли;
		
		Элементы.РозничныйВидЦен.Видимость = (
			Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница
			ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыСклад
			ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозницаСуммовойУчет
		);
		Элементы.ОбработкаМенеджерПодсказокТиповыеСхемыУчета_Розница.Видимость = Элементы.РозничныйВидЦен.Видимость И УчетРозничныхПродаж;
		Элементы.ТипСтруктурнойЕдиницы.ОтображениеПодсказки = ?(Элементы.РозничныйВидЦен.Видимость И УчетРозничныхПродаж, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
		
		Элементы.РозничныйВидЦен.ОтметкаНезаполненного = (
			Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозница
			ИЛИ Объект.ТипСтруктурнойЕдиницы = ТипСтруктурнойЕдиницыРозницаСуммовойУчет
		);
		
	Иначе
		
		Элементы.ОрдерныйСклад.Доступность = Ложь;
		Объект.ОрдерныйСклад = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ТипСтруктурнойЕдиницыПриИзменении()

&НаКлиенте
Процедура АвтоперемещениеЗапасовНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникПеремещения", Объект.ИсточникПеремещения);
	СтруктураПараметров.Вставить("ПолучательПеремещения", Объект.ПолучательПеремещения);
	СтруктураПараметров.Вставить("ПолучательОтходов", Объект.ПолучательОтходов);
	СтруктураПараметров.Вставить("ИсточникСписанияНаРасходы", Объект.ИсточникСписанияНаРасходы);
	СтруктураПараметров.Вставить("ПолучательСписанияНаРасходы", Объект.ПолучательСписанияНаРасходы);
	СтруктураПараметров.Вставить("ИсточникПередачиВЭксплуатацию", Объект.ИсточникПередачиВЭксплуатацию);
	СтруктураПараметров.Вставить("ПолучательПередачиВЭксплуатацию", Объект.ПолучательПередачиВЭксплуатацию);
	СтруктураПараметров.Вставить("ИсточникВозвратаИзЭксплуатации", Объект.ИсточникВозвратаИзЭксплуатации);
	СтруктураПараметров.Вставить("ПолучательВозвратаИзЭксплуатации", Объект.ПолучательВозвратаИзЭксплуатации);
	
	СтруктураПараметров.Вставить("ЯчейкаИсточникаПеремещения", Объект.ЯчейкаИсточникаПеремещения);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяПеремещения", Объект.ЯчейкаПолучателяПеремещения);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяОтходов", Объект.ЯчейкаПолучателяОтходов);
	СтруктураПараметров.Вставить("ЯчейкаИсточникаСписанияНаРасходы", Объект.ЯчейкаИсточникаСписанияНаРасходы);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяСписанияНаРасходы", Объект.ЯчейкаПолучателяСписанияНаРасходы);
	СтруктураПараметров.Вставить("ЯчейкаИсточникаПередачиВЭксплуатацию", Объект.ЯчейкаИсточникаПередачиВЭксплуатацию);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяПередачиВЭксплуатацию", Объект.ЯчейкаПолучателяПередачиВЭксплуатацию);
	СтруктураПараметров.Вставить("ЯчейкаИсточникаВозвратаИзЭксплуатации", Объект.ЯчейкаИсточникаВозвратаИзЭксплуатации);
	СтруктураПараметров.Вставить("ЯчейкаПолучателяВозвратаИзЭксплуатации", Объект.ЯчейкаПолучателяВозвратаИзЭксплуатации);
	
	СтруктураПараметров.Вставить("ТипСтруктурнойЕдиницы", Объект.ТипСтруктурнойЕдиницы);
	
	Оповещение = Новый ОписаниеОповещения("АвтоперемещениеЗапасовНажатиеЗавершение",ЭтотОбъект);
	ОткрытьФорму("Справочник.СтруктурныеЕдиницы.Форма.ФормаАвтоперемещенияЗапасов", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры // АвтоперемещениеЗапасовНажатие()

&НаКлиенте
Процедура РозничныйВидЦенПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.РозничныйВидЦен) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьДанныеРозничногоВидаЦен(Объект.РозничныйВидЦен);
	
	Если НЕ СтруктураДанных.ВалютаЦены = СтруктураДанных.НациональнаяВалюта Тогда
		
		ТекстСообщения = НСтр("ru = 'У вида цен ""%ВидЦен%"", для розничной структурной единицы, должна быть задана национальная валюта (%НацВалюта%).'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦен%", СтруктураДанных.НаименованиеВидаЦен);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НацВалюта%", СтруктураДанных.НациональнаяВалюта);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.РозничныйВидЦен");
		
		Объект.РозничныйВидЦен = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры //РозничныйВидЦенПриИзменении()

&НаКлиенте
Процедура ОрдерныйСкладПриИзменении(Элемент)
	
	Элементы.РозничныйВидЦен.Доступность = НЕ Объект.ОрдерныйСклад;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру данных по полученному виду цен
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеРозничногоВидаЦен(РозничныйВидЦен)
	
	СтруктураДанных	 = Новый Структура;
	
	СтруктураДанных.Вставить("НаименованиеВидаЦен",	РозничныйВидЦен.Наименование);
	СтруктураДанных.Вставить("НациональнаяВалюта",	Константы.НациональнаяВалюта.Получить());
	СтруктураДанных.Вставить("ВалютаЦены", 			РозничныйВидЦен.ВалютаЦены);
	
	Возврат СтруктураДанных;
	
КонецФункции //ПолучитьДанныеРозничногоВидаЦен()

&НаСервере
Процедура ОтметитьОшибки(ПереченьОшибок)
	
	ЦветПодсветки = ЦветТекстаНекорректногоЗаполнения;
	
	Если ПереченьОшибок.Получить("ПредставлениеКИ_1")<> Неопределено Тогда
		НайденныеСтроки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Попытка
				Элементы.ВидКИ_1.ЦветТекста = ЦветПодсветки;
			Исключение
			КонецПопытки;
		КонецЕсли;
		СтрокаОписанияОшибки = ОшибкиЗаполнения.Добавить();
		СтрокаОписанияОшибки.ИмяПоля =   "ВидКИ_1";
		СтрокаОписанияОшибки.ИмяГруппы = "КонтактнаяИнформация";
		Элементы.КонтактнаяИнформация.ЦветТекстаЗаголовка = ЦветПодсветки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЭлемента(ИмяЭлемента)
	Если РежимИсправленияОшибок Тогда
		ПроверитьЗаполнениеЭлементаНаСервере(ИмяЭлемента);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеЭлементаНаСервере(ИмяЭлемента)
	
	СтрокиОшибкиЗаполнения = ОшибкиЗаполнения.НайтиСтроки(Новый Структура("ИмяПоля",ИмяЭлемента));
	Если СтрокиОшибкиЗаполнения.Количество() > 0 Тогда
		Строка = СтрокиОшибкиЗаполнения[0];
		ПроверкаВыполненаУспешно = Ложь;
		Если ИмяЭлемента = "ВидКИ_1" Тогда
			Строки = ЭтаФорма.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы));
			Если Строки.Количество() > 0 И НЕ ПустаяСтрока(Строки[0].Представление) Тогда
				ПроверкаВыполненаУспешно = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаВыполненаУспешно Тогда
			Если СтрНайти(ИмяЭлемента, "ВидКИ") > 0 Тогда
				Элементы[ИмяЭлемента].ЦветТекста = ЦветТекста;
			Иначе
				Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = ЦветТекста;
			КонецЕсли;
			Строка.ЗаполненоКорректно = Истина;
			Если Не ПустаяСтрока(Строка.ИмяГруппы) Тогда
				СтрокиГруппы = ОшибкиЗаполнения.НайтиСтроки(Новый Структура("ИмяГруппы, ЗаполненоКорректно",Строка.ИмяГруппы, Ложь));
				Если СтрокиГруппы.Количество() = 0 Тогда
					Элементы[Строка.ИмяГруппы].ЦветТекстаЗаголовка = Новый Цвет;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СтрНайти(ИмяЭлемента, "ВидКИ") > 0 Тогда
				Элементы[ИмяЭлемента].ЦветТекста = ЦветТекстаНекорректногоЗаполнения;
			Иначе
				Элементы[ИмяЭлемента].ЦветТекстаЗаголовка = ЦветТекстаНекорректногоЗаполнения;
			КонецЕсли;
			Строка.ЗаполненоКорректно = Ложь;
			Если Не ПустаяСтрока(Строка.ИмяГруппы) Тогда
				Элементы[Строка.ИмяГруппы].ЦветТекстаЗаголовка = ЦветТекстаНекорректногоЗаполнения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоперемещениеЗапасовНажатиеЗавершение(ПараметрыЗаполнения,Параметры) Экспорт
	
	Если ТипЗнч(ПараметрыЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ПараметрыЗаполнения);
		
		Если НЕ Модифицированность 
			И ПараметрыЗаполнения.Модифицированность Тогда
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияУНФ


&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	ПроверитьЗаполнениеЭлемента("ВидКИ_" + Прав(Элемент.Имя, 1));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ИмяЭлемента", "ВидКИ_" + Прав(Элемент.Имя, 1));
	ОповещениеОЗакрытииДиалога = Новый ОписаниеОповещения("ДополнительныеДействияПриЗакрытииДиалога", ЭтотОбъект, ДополнительныеПараметры);
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ОповещениеОЗакрытииДиалога);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДействияПриЗакрытииДиалога(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверитьЗаполнениеЭлемента(ДополнительныеПараметры.ИмяЭлемента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
		УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ОбработкаЗаписиНовогоНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаписиНовогоНаСервере()
	//Вставить содержимое обработчика
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


