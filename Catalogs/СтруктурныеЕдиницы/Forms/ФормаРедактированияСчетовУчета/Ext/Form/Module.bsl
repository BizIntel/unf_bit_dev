
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СчетУчетаВРознице = Параметры.СчетУчетаВРознице;
	СчетУчетаНаценки = Параметры.СчетУчетаНаценки;
	Ссылка = Параметры.Ссылка;
	
	Если ОтказИзменитьСчетУчета(Ссылка) Тогда
		Элементы.ГруппаСчетовУчета.Подсказка = НСтр("ru = 'В базе есть движения по этой розничной точке! Изменение счета учета запрещено!'");
		Элементы.ГруппаСчетовУчета.Доступность = Ложь;
		Элементы.ПоУмолчанию.Видимость = Ложь;
	КонецЕсли;
	
	ЭтоРозницаСуммовойУчет = Ссылка.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЭтоРозницаСуммовойУчет Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru='Счета учетов редактируются только для розницы с суммовым учетом!'"));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетУчетаВРозницеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаВРознице) Тогда
		СчетУчетаВРознице = ПредопределенноеЗначение("ПланСчетов.Управленческий.ТоварыПродукция");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаНаценкиПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаНаценки) Тогда
		СчетУчетаНаценки = ПредопределенноеЗначение("ПланСчетов.Управленческий.ТорговаяНаценка");
	КонецЕсли;
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоУмолчанию(Команда)
	
	СчетУчетаВРознице = ПредопределенноеЗначение("ПланСчетов.Управленческий.ТоварыПродукция");
	СчетУчетаНаценки = ПредопределенноеЗначение("ПланСчетов.Управленческий.ТорговаяНаценка");
	ОповеститьОбИзмененииСчетовРасчетов();
	
КонецПроцедуры // ПоУмолчанию()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет возможность изменения счета.
//
&НаСервере
Функция ОтказИзменитьСчетУчета(Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СуммовойУчетВРознице.Период,
	|	СуммовойУчетВРознице.Регистратор,
	|	СуммовойУчетВРознице.НомерСтроки,
	|	СуммовойУчетВРознице.Активность,
	|	СуммовойУчетВРознице.ВидДвижения,
	|	СуммовойУчетВРознице.Организация,
	|	СуммовойУчетВРознице.СтруктурнаяЕдиница,
	|	СуммовойУчетВРознице.Валюта,
	|	СуммовойУчетВРознице.Сумма,
	|	СуммовойУчетВРознице.СуммаВал,
	|	СуммовойУчетВРознице.Себестоимость,
	|	СуммовойУчетВРознице.СодержаниеПроводки,
	|	СуммовойУчетВРознице.ДокументПродажи
	|ИЗ
	|	РегистрНакопления.СуммовойУчетВРознице КАК СуммовойУчетВРознице
	|ГДЕ
	|	СуммовойУчетВРознице.СтруктурнаяЕдиница = &СтруктурнаяЕдиница");
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ?(ЗначениеЗаполнено(Ссылка), Ссылка, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ОтказИзменитьСчетУчета()

&НаКлиенте
Процедура ОповеститьОбИзмененииСчетовРасчетов()
	
	СтруктураПараметры = Новый Структура(
		"СчетУчетаВРознице, СчетУчетаНаценки",
		СчетУчетаВРознице, СчетУчетаНаценки
	);
	
	Оповестить("ИзменилисьСчетаСтруктурныеЕдиницы", СтруктураПараметры);
	
КонецПроцедуры

#КонецОбласти
