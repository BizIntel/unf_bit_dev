&НаКлиенте
Перем ДанныеСчитывателя; // Кэш данных считывателя магнитной карты

#Область ПроцедурыИФункцииОбщегоНазначения

// Обрабатывает событие активизации строки списка элементов справочника.
//
&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	ПараметрыИнфПанели = Новый Структура("РеквизитКИ, ДисконтнаяКарта, ПроцентСкидкиПоДисконтнойКарте, Контрагент, КонтактноеЛицо", "ВладелецКарты", Элементы.Список.ТекущаяСтрока);
	УправлениеНебольшойФирмойКлиент.ДисконтныеКартыИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(ЭтаФорма, ПараметрыИнфПанели);
	
КонецПроцедуры // ОбработатьАктивизациюСтрокиСписка()

#КонецОбласти

#Область ОбработчикиСобытийДинамическогоСписка

// Процедура - обработчик события ПриАктивизацииСтроки динамического списка Список.
//
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Комментарий = "";
		Иначе
			Комментарий = СтрЗаменить(Элемент.ТекущиеДанные.Комментарий, Символы.ПС, " ");
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитов

// Процедура - обработчик события ПриИзменении элемента ОтборВидКарты.
//
&НаКлиенте
Процедура ОтборВидКартыПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СписокДисконтныхКартОтборВидКарты");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Владелец", ОтборВидКарты, ЗначениеЗаполнено(ОтборВидКарты));

КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ОтборТолькоИменные.
//
&НаКлиенте
Процедура ОтборТолькоИменныеПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СписокДисконтныхКартОтборВидКарты");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если ОтборТолькоИменные Тогда
		Список.Отбор.Элементы.Очистить();
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ВладелецКарты", Параметры.Контрагент, Истина);
	Иначе
		Список.Отбор.Элементы.Очистить();
		СЗ = Новый СписокЗначений;
		СЗ.Добавить(Параметры.Контрагент);
		СЗ.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		
		// Если контрагент не выбран, то показываем только обезличенные карты!!!
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ВладелецКарты", СЗ, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ОтборШтрихКод.
//
&НаКлиенте
Процедура ОтборШтрихКодПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СписокДисконтныхКартОтборШтрихКод");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КодКартыШтрихкод", ОтборШтрихКод, ЗначениеЗаполнено(ОтборШтрихКод), ВидСравненияКомпоновкиДанных.Содержит);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении элемента ОтборМагнитныйкод.
//
&НаКлиенте
Процедура ОтборМагнитныйкодПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СписокДисконтныхКартОтборМагнитныйкод");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КодКартыМагнитный", ОтборМагнитныйкод, ЗначениеЗаполнено(ОтборМагнитныйкод), ВидСравненияКомпоновкиДанных.Содержит);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку ОтправитьEmailКонтрагенту.
//
&НаКлиенте
Процедура ОтправитьEmailКонтрагенту(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если СписокТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Получатели = Новый Массив;
	Если ЗначениеЗаполнено(ИнформацияКонтрагентЭП) Тогда
		СтруктураПолучателя = Новый Структура;
		СтруктураПолучателя.Вставить("Представление", СписокТекущиеДанные.Ссылка);
		СтруктураПолучателя.Вставить("Адрес", ИнформацияКонтрагентЭП);
		Получатели.Добавить(СтруктураПолучателя);
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Получатель", Получатели);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
КонецПроцедуры // ОтправитьEmailКонтрагенту()

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформацияУпрВалюта = Константы.ВалютаУчета.Получить();
	
	Если ЗначениеЗаполнено(Параметры.Контрагент) Тогда
		Элементы.НадписьКонтрагент.Заголовок = СокрЛП(Параметры.Контрагент.Наименование);
	Иначе
		Элементы.НадписьКонтрагент.Заголовок = "<Контрагент не выбран>";
		Элементы.ОтборТолькоИменные.Видимость = Ложь;
	КонецЕсли;
	
	// ОтборПоКонтрагенту
	Список.Отбор.Элементы.Очистить();
	
	// Если контрагент не выбран, то показываем только обезличенные карты!!!
	Если Параметры.Свойство("ОтборПоКонтрагенту") И Параметры.ОтборПоКонтрагенту Тогда
		
		СЗ = Новый СписокЗначений;
		Если Не Параметры.Контрагент.Пустая() Тогда
			СЗ.Добавить(Параметры.Контрагент);
		КонецЕсли;
		СЗ.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ВладелецКарты", СЗ, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	// Конец ОтборПоКонтрагенту
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование	

КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// Процедура - обработчик события ПриЗагрузкеДанныхИзНастроекНаСервере.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Владелец", ОтборВидКарты, ЗначениеЗаполнено(ОтборВидКарты));
	Если ОтборТолькоИменные Тогда
		Список.Отбор.Элементы.Очистить();
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ВладелецКарты", Параметры.Контрагент, Истина);
	Иначе
		// Эта ветка всегда выполняется в процедуре "ПриСозданииНаСервере()", которая вызывается перед этой процедурой.
	КонецЕсли;
	// Отбор по штрихкоду и магнитному коду не сохраняем.
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КодКартыШтрихкод", ОтборШтрихКод, ЗначениеЗаполнено(ОтборШтрихКод), ВидСравненияКомпоновкиДанных.Содержит);
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КодКартыМагнитный", ОтборМагнитныйкод, ЗначениеЗаполнено(ОтборМагнитныйкод), ВидСравненияКомпоновкиДанных.Содержит);
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода,СчитывательМагнитныхКарт");
	// Конец ПодключаемоеОборудование

КонецПроцедуры

// Процедура - обработчик события ПередЗакрытием.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод");
			ОбработатьШтрихкоды(ДисконтныеКартыКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
			ТекущийЭлемент = Элементы.ОтборШтрихКод;
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			// Обработка ситуации, когда считыватель магнитных карт имитирует нажатие клавиши "Enter" после считывания магнитной карты.
			ТекДата = ТекущаяДата();
			
			ТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод");
			ОбработатьДанныеСчитывателяМагнитныхКарт(Параметр);
			ТекущийЭлемент = Элементы.ОтборМагнитныйкод;
			
			// Обработка ситуации, когда считыватель магнитных карт имитирует нажатие клавиши "Enter" после считывания магнитной карты.
			// Символ перевода строки можно обрезать с помощью настроек подключаемаого оборудования для считывателя магнитных карт.
			Пока (ТекущаяДата() - ТекДата) < 1 Цикл КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПослеЗаписи_ДисконтнаяКарта" Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Ссылка = Источник Тогда
			Комментарий = СтрЗаменить(Параметр, Символы.ПС, " ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПродажиПоДисконтнойКарте(Команда)
	
	Если Не ЗначениеЗаполнено(Элементы.Список.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "ПродажиПоДисконтнойКарте");
	ПараметрыФормы.Вставить("Отбор", Новый Структура("СтПериод,ДисконтнаяКарта", Новый СтандартныйПериод, Элементы.Список.ТекущаяСтрока));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ПродажиПоДисконтнымКартам.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

// Процедура обрабатывает данные штрихкода, которые передаются из обработки оповещения формы.
//
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ОбработатьПолученныйКодНаКлиенте(МассивШтрихкодов[0].Штрихкод, ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод"), Ложь);
	
КонецПроцедуры

// Процедура обрабатывает данные со считывателя магнитных карт, которые передаются из обработки оповещения формы.
//
&НаКлиенте
Процедура ОбработатьДанныеСчитывателяМагнитныхКарт(Данные)
	
	ДанныеСчитывателя = Данные;
	ОбработатьПолученныйКодНаКлиенте(ДанныеСчитывателя, ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод"), Истина);
	
КонецПроцедуры

// Функция проверяет магнитный код на соответствие шаблону и возвращает список ДК, магнитный код или штрикод.
//
&НаСервере
Функция ОбработатьПолученныйКодНаСервере(Данные, ТипКодаКарты, Предобработка, ЕстьНайденныеКарты = Ложь, ЕстьШаблон = Ложь)
	
	ЕстьНайденныеКарты = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипКода = ТипКодаКарты;
	Если ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
		// При вызове функции параметр "Предобработка" будем устанавливать в значение Ложь, чтобы не использовались шаблоны магнитных карт.
		// В качестве кода карты будет использоваться строка, полученная конкатенацией строк со всех магнитных дорожек.
		// В большинстве дисконтных карт используется только одна дорожка, на которой записан только номер карты в формате ";КодКарты?".
		Если Предобработка Тогда
			ТекКодКарты = Данные[0]; // Данные 3х дорожек магнитной карты. На данный момент не используется. Можно использовать если карта не найдена.
			ДисконтныеКартыСтруктура = ДисконтныеКартыВызовСервера.НайтиВидыДисконтныхКартПоДаннымСоСчитывателяМагнитныхКарт(Данные, ТипКода, Справочники.ВидыДисконтныхКарт.ПустаяСсылка());
			
			Возврат ДисконтныеКартыСтруктура;
		Иначе
			Если ТипЗнч(Данные) = Тип("Массив") Тогда
				ТекКодКарты = Данные[0];
			Иначе
				ТекКодКарты = Данные;
			КонецЕсли;
			ДисконтныеКартыВызовСервера.ПодготовитьКодКартыПоНастройкамПоУмолчанию(ТекКодКарты);
			
			Возврат ТекКодКарты;
		КонецЕсли;
	Иначе
		Возврат Данные;
	КонецЕсли;
	
КонецФункции

// Функция проверяет магнитный код на соответствие шаблону и устанавливает магнитный код или штрикод элемента справочника.
// Если ДК несколько, то пользователь выбирает нужный код из списка.
//
&НаКлиенте
Процедура ОбработатьПолученныйКодНаКлиенте(Данные, ПолученныйТипКода, Предобработка)
	
	Перем ЕстьНайденныеКарты, ЕстьШаблон;
	
	Результат = ОбработатьПолученныйКодНаСервере(Данные, ПолученныйТипКода, Предобработка, ЕстьНайденныеКарты, ЕстьШаблон);
	Если ПолученныйТипКода = ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод") Тогда
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
			ОтборМагнитныйкод = Результат;
			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КодКартыМагнитный", ОтборМагнитныйкод, ЗначениеЗаполнено(ОтборМагнитныйкод), ВидСравненияКомпоновкиДанных.Содержит);
		Иначе
			Если Результат.Количество() = 1 Тогда
				ОтборМагнитныйкод = Результат.Получить(0).Значение;
				УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КодКартыМагнитный", ОтборМагнитныйкод, ЗначениеЗаполнено(ОтборМагнитныйкод), ВидСравненияКомпоновкиДанных.Содержит);
			ИначеЕсли Результат.Количество() = 0 Тогда
				УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтотОбъект, "Код карты не соответствует ни одному из шаблонов магнитных карт.");
			Иначе
				Оповещение = Новый ОписаниеОповещения("ОбработатьПолученныйКодНаКлиентеЗавершение", ЭтаФорма);
				Результат.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор кода магнитной карты'"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОтборШтрихКод = Результат;
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КодКартыШтрихкод", ОтборШтрихКод, ЗначениеЗаполнено(ОтборШтрихКод), ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;

КонецПроцедуры

// Обработка выбора кода магнитной карты из списка, если найдено несколько дисконтных карт.
//
&НаКлиенте
Процедура ОбработатьПолученныйКодНаКлиентеЗавершение(ВыбЭлемент, Параметры) Экспорт
    Если ВыбЭлемент <> Неопределено Тогда
        ОтборМагнитныйкод = ВыбЭлемент.Значение;
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КодКартыМагнитный", ОтборМагнитныйкод, ЗначениеЗаполнено(ОтборМагнитныйкод), ВидСравненияКомпоновкиДанных.Содержит);
    КонецЕсли;
КонецПроцедуры

#КонецОбласти
