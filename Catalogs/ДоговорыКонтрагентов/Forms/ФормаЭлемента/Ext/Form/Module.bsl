
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Наименование = Объект.Наименование;
	
	УстановитьУсловноеОформлениеФормы();
	УстановитьВсеЗаголовкиСвернутогоОтображения(ЭтотОбъект);
	
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ЗаполнитьВидЦен(Истина);
		ЗаполнитьВидЦенКонтрагента();
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			
			ОрганизацияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
			Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
				Объект.Организация = ОрганизацияПоУмолчанию;
			Иначе
				Объект.Организация = Справочники.Организации.ОсновнаяОрганизация;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
		Объект.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
		
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаРасчетов) Тогда
			Объект.ВалютаРасчетов = НациональнаяВалюта;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Параметры.ТекстЗаполнения) Тогда
			Объект.НомерДоговора = Параметры.ТекстЗаполнения;
			Объект.Наименование = СформироватьНаименование(Объект.НомерДоговора, Объект.ДатаДоговора, Объект.ВалютаРасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВалютаРасчетов = НациональнаяВалюта Тогда
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Ложь;
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
	Иначе
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Истина;
	КонецЕсли;
	
	ИспользоватьОбменДанными = Истина;
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() Тогда
		
		Элементы.Организация.Видимость	= Ложь;
		Элементы.ВидДоговора.Видимость	= Ложь;
		ИспользоватьОбменДанными 		= Ложь;
		
	КонецЕсли;
	
	УстановитьСписокВыбораВидовДоговора();
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Документ") Тогда 
		ЭтаФорма.ДокументОткрытия = Параметры.Документ;
	Иначе
		ЭтаФорма.ДокументОткрытия = Неопределено;
	КонецЕсли;
	
	ПолучитьПараметрыБланка();
	ЭтаФорма.ПоказатьНачалоДокумента = Истина;
	ЭтаФорма.ДокументСформирован = Ложь;
	СформироватьИПоказатьДоговор();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// Эквайринг
	ВалютаРасчетов = Объект.ВалютаРасчетов;
	// Конец Эквайринг
	
	// Биллинг
	БиллингНастроитьВидимостьЭлементов();
	ЗаполнитьПолучателейРассылки();
	// Конец Биллинг
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ГруппаПодменюПечать);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДоговорОбслуживанияДатаОкончания = Объект.ДоговорОбслуживанияДатаОкончания;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВосстановлениеПредопределенногоШаблона" Тогда 
		Если Параметр = Объект.БланкДоговора Тогда 
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("СсылкаБланка", Объект.БланкДоговора);
			МассивПараметров = Объект.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
			Для Каждого Строка Из МассивПараметров Цикл 
				Строка.Значение = "";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеИЗаписьБланкаДоговораНаСервере" Тогда 
		Если Параметр = Объект.БланкДоговора Тогда 
			ЭтаФорма.ДокументСформирован = Ложь;
			ПолучитьПараметрыБланка();
			СформироватьИПоказатьДоговор();
			ЭтаФорма.Модифицированность = Истина;
			ЭтаФорма.ПоказатьНачалоДокумента = Истина;
			ЭтаФорма.ТекущийНажатыйПараметр = "";
		КонецЕсли;
	КонецЕсли; 
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		// Биллинг
		Если Объект.ЭтоДоговорОбслуживания Тогда
			ЗаполнитьПолучателейРассылки();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Эквайринг
	Если Не Объект.Ссылка.Пустая() Тогда
		ПроверитьВозможностьИзменений(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец Эквайринг
	
	// Биллинг
	Если Объект.ЭтоДоговорОбслуживания И НЕ Объект.ПометкаУдаления Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ВТНоменклатураИЦены
		|ИЗ
		|	Справочник.ТарифныеПланыДоговоровОбслуживания.УчетНоменклатуры КАК ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЗаключенияДоговора, ВидЦен = &ВидЦен) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|ГДЕ
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Ссылка = &ТарифныйПлан
		|	И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ФормированиеЦены = ЗНАЧЕНИЕ(Перечисление.БиллингФормированиеЦеныНоменклатуры.ПоВидуЦенДоговора)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНоменклатураИЦены.Номенклатура,
		|	ВТНоменклатураИЦены.Характеристика,
		|	ВТНоменклатураИЦены.Цена
		|ИЗ
		|	ВТНоменклатураИЦены КАК ВТНоменклатураИЦены
		|ГДЕ
		|	ВТНоменклатураИЦены.Цена = 0";
		
		Запрос.УстановитьПараметр("ДатаЗаключенияДоговора", Объект.ДоговорОбслуживанияДатаНачала);
		Запрос.УстановитьПараметр("ВидЦен", Объект.ВидЦен);
		Запрос.УстановитьПараметр("ТарифныйПлан", Объект.ДоговорОбслуживанияТарифныйПлан);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Для номенклатуры ""%1"" не установлена цена по виду цен ""%2"" на дату начала действия договора (%3)!'"),
					УправлениеНебольшойФирмойСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика),
					Объект.ВидЦен,
					Формат(Объект.ДоговорОбслуживанияДатаНачала, "ДЛФ=Д")
				),
				Выборка.Номенклатура,
				,,
				Отказ
			);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучателиРассылкиПерезаполнить Тогда
		ТекущийОбъект.ДоговорОбслуживанияПолучателиРассылки.Очистить();
		Для каждого Стр Из ПолучателиРассылки Цикл
			
			Если НЕ Стр.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТекущийОбъект.ДоговорОбслуживанияПолучателиРассылки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			
		КонецЦикла;
	КонецЕсли;
	// Конец Биллинг
	
	// Обработчик механизма "Свойства".
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Биллинг
	Если ТекущийОбъект.Наименование <> Наименование
		И ЗначениеЗаполнено(Объект.ДоговорОбслуживанияНаправлениеДеятельности) Тогда
		
		ИзмененоНаправлениеДеятельности = 
		Справочники.ДоговорыКонтрагентов.ПереименоватьНаправлениеДеятельностиДляДоговораОбслуживания(
			Объект.ДоговорОбслуживанияНаправлениеДеятельности,
			Объект.Владелец,
			Объект.Наименование,
			Наименование
		);
		
		Наименование = ТекущийОбъект.Наименование;
		
	КонецЕсли;
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Биллинг
	Если ИзмененоНаправлениеДеятельности Тогда
		ОповеститьОбИзменении(Объект.ДоговорОбслуживанияНаправлениеДеятельности);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НомерДоговораПриИзменении(Элемент)
	
	Объект.Наименование = СформироватьНаименование(Объект.НомерДоговора, Объект.ДатаДоговора, Объект.ВалютаРасчетов);
	
КонецПроцедуры // НомерДоговораПриИзменении()

&НаКлиенте
Процедура ДатаДоговораПриИзменении(Элемент)
	
	Объект.Наименование = СформироватьНаименование(Объект.НомерДоговора, Объект.ДатаДоговора, Объект.ВалютаРасчетов);
	ЗаполнитьДатуНачалаДоговораОбслуживания();
	
КонецПроцедуры // ДатаДоговораПриИзменении()

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	// Биллинг
	Если Объект.ЭтоДоговорОбслуживания Тогда
		ЗаполнитьПолучателейРассылки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРасчетовПриИзменении(Элемент)
	
	Объект.Наименование = СформироватьНаименование(Объект.НомерДоговора, Объект.ДатаДоговора, Объект.ВалютаРасчетов);
	УправлениеФормой();
	
КонецПроцедуры // ВалютаРасчетовПриИзменении()

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	УстановитьЗаголовокЦенообразование(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиНаценкиПриИзменении(Элемент)
	
	УстановитьЗаголовокЦенообразование(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиНаценкиОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоДоговорОбслуживанияПриИзменении(Элемент)
	
	БиллингНастроитьВидимостьЭлементов();
	
	ЗаполнитьДатуНачалаДоговораОбслуживания();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорОбслуживанияПериодичность) Тогда
		Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбслуживанияДатаНачалаПриИзменении(Элемент)
	
	ПроверитьКорректностьДатыОкончанияДоговора();
	
	УправлениеФормой();
	ОпределитьДатуВыставленияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбслуживанияДатаОкончанияПриИзменении(Элемент)
	
	ПроверитьКорректностьДатыОкончанияДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьДатыОкончанияДоговора()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорОбслуживанияДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДоговорОбслуживанияДатаОкончания < Объект.ДоговорОбслуживанияДатаНачала Тогда
		
		Объект.ДоговорОбслуживанияДатаОкончания = ДоговорОбслуживанияДатаОкончания;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Поле = "Объект.ДоговорОбслуживанияДатаОкончания";
		Сообщение.Текст = НСтр("ru='Дата окончания действия договора обслуживания не может быть раньше даты начала.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	ДоговорОбслуживанияДатаОкончания = Объект.ДоговорОбслуживанияДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбслуживанияПериодичностьПриИзменении(Элемент)
	
	УправлениеФормой();
	ОпределитьДатуВыставленияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбслуживанияТарифныйПланПриИзменении(Элемент)
	
	УстановитьЗаголовокБиллинг(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоМесяцамДеньРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Направление > 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 31
		ИЛИ Направление < 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоКварталамДеньРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Направление > 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 31
		ИЛИ Направление < 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоПолугодиямДеньРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Направление > 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 31
		ИЛИ Направление < 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоГодамДеньРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Направление > 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 31
		ИЛИ Направление < 0 И Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоМесяцамДеньПриИзменении(Элемент)
	
	Если Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 1 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 1;
	ИначеЕсли Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 31 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 31;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоКварталамДеньПриИзменении(Элемент)
	
	Если Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 1 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 1;
	ИначеЕсли Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 31 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 31;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоПолугодиямДеньПриИзменении(Элемент)
	
	Если Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 1 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 1;
	ИначеЕсли Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 31 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 31;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыставлениеДокументовПоГодамДеньПриИзменении(Элемент)
	
	Если Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов < 1 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 1;
	ИначеЕсли Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов > 31 Тогда
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = 31;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиРассылкиПриИзменении(Элемент)
	
	ПолучателиРассылкиПерезаполнить = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьЗаголовокОбменДанными(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	УстановитьЗаголовокОбменДанными(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Элементы.БланкДоговора.АвтоОтметкаНезаполненного = Ложь;
	Если ЭтаФорма.Модифицированность Тогда
		ЭтаФорма.ДокументСформирован = Ложь;
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТекстДоговора
		И НЕ ЭтаФорма.ДокументСформирован Тогда 
		
		СформироватьИПоказатьДоговор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БланкДоговораПриИзменении(Элемент)
	
	Если Элемент.ТекстРедактирования = "" Тогда
		ЭтаФорма.ДокументСформирован = Ложь;
		СформироватьИПоказатьДоговор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БланкДоговораОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.БланкДоговора) Тогда
		ЭтаФорма.ПоказатьНачалоДокумента = Истина;
	Иначе
		ЭтаФорма.ПоказатьНачалоДокумента = Ложь;
	КонецЕсли;
	Если Объект.БланкДоговора = ВыбранноеЗначение Тогда
		ЭтаФорма.ДокументСформирован = Истина;
		ЭтаФорма.ПоказатьНачалоДокумента = Ложь;
		Возврат;
	КонецЕсли;
	ЭтаФорма.ТекущийНажатыйПараметр = "";
	Объект.БланкДоговора = ВыбранноеЗначение;
	ПолучитьПараметрыБланка();
	ЭтаФорма.ДокументСформирован = Ложь;
	СформироватьИПоказатьДоговор();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыеПараметрыПриАктивизацииЯчейки(Элемент)
	
	Если ЗначениеЗаполнено(Объект.БланкДоговора) Тогда
		Если Элемент.ТекущиеДанные <> Неопределено Тогда
			Если НЕ ЭтаФорма.ПоказатьНачалоДокумента Тогда
				ВыделитьПараметр(Элемент.ТекущиеДанные.Идентификатор);
			КонецЕсли;
			ЭтаФорма.ПоказатьНачалоДокумента = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыеПараметрыЗначениеПриИзменении(Элемент)
	
	ЗначениеПараметра = Элемент.ТекстРедактирования;
	УстановитьИЗаписатьЗначениеПараметра(ЗначениеПараметра, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
Процедура СоздатьНаправлениеДеятельности(Команда)
	СоздатьНаправлениеДеятельностиВопрос();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет вид цен контагента в зависимости от вида договора.
//
// ВидДоговора - ПеречислениеСсылка.ВидыДоговоров
// Контрагент - Справочник.Контрагенты
//
&НаСервере
Процедура ЗаполнитьВидЦенКонтрагента()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("Выбрать Разрешенные * Из Справочник.ВидыЦенКонтрагентов КАК ЦеныКонтрагента ГДЕ ЦеныКонтрагента.Владелец = &Владелец И НЕ ЦеныКонтрагента.ПометкаУдаления");
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Объект.ВидЦенКонтрагента = Выборка.Ссылка;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПолучитьПараметрыЭлементаПоВидуДоговора()

// Процедура заполняет вид цен контагента в зависимости от вида договора.
//
// ВидДоговора - ПеречислениеСсылка.ВидыДоговоров
// Контрагент - Справочник.Контрагенты
//
&НаСервере
Процедура ЗаполнитьВидЦен(ЭтоНовый = Ложь)
	
	Если ЭтоНовый Тогда
		
		ВидЦенПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойВидЦенПродажи");
		
		Если ЗначениеЗаполнено(ВидЦенПродажи) Тогда
			
			Объект.ВидЦен = ВидЦенПродажи;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидЦен()

// Процедура составляет наименование договора из номера и даты договора.
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНаименование(НомерДоговора, ДатаДоговора, ВалютаРасчетов)
	
	ТекстНаименования = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора% (%ВалютаРасчетов%)'");
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%НомерДоговора%", СокрЛП(НомерДоговора));
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ДатаДоговора%", ?(ЗначениеЗаполнено(ДатаДоговора), СокрЛП(Строка(Формат(ДатаДоговора, "ДФ=dd.MM.yyyy"))), ""));
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ВалютаРасчетов%", СокрЛП(Строка(ВалютаРасчетов)));
	
	Возврат ТекстНаименования;
	
КонецФункции // СформироватьНаименование()

// Процедура устанавливает доступность элементов формы.
//
&НаКлиенте
Процедура УправлениеФормой()
	
	Если Объект.ВалютаРасчетов = НациональнаяВалюта Тогда
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Ложь;
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
	Иначе
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Истина;
	КонецЕсли;
	
	// Биллинг
	Элементы.ВыставлениеДокументовПоНеделямДень.Видимость     = Ложь;
	Элементы.ВыставлениеДокументовПоМесяцамДень.Видимость     = Ложь;
	Элементы.ВыставлениеДокументовПоКварталамДень.Видимость   = Ложь;
	Элементы.ВыставлениеДокументовПоКварталамМесяц.Видимость  = Ложь;
	Элементы.ВыставлениеДокументовПоПолугодиямДень.Видимость  = Ложь;
	Элементы.ВыставлениеДокументовПоПолугодиямМесяц.Видимость = Ложь;
	Элементы.ВыставлениеДокументовПоГодамДень.Видимость       = Ложь;
	Элементы.ВыставлениеДокументовПоГодамМесяц.Видимость      = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДоговорОбслуживанияДатаНачала) И ЗначениеЗаполнено(Объект.ДоговорОбслуживанияПериодичность) Тогда
		Если Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Неделя") Тогда
			Элементы.ВыставлениеДокументовПоНеделямДень.Видимость     = Истина;
		ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц") Тогда
			Элементы.ВыставлениеДокументовПоМесяцамДень.Видимость     = Истина;
		ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Квартал") Тогда
			Элементы.ВыставлениеДокументовПоКварталамДень.Видимость   = Истина;
			Элементы.ВыставлениеДокументовПоКварталамМесяц.Видимость  = Истина;
		ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Полгода") Тогда
			Элементы.ВыставлениеДокументовПоПолугодиямДень.Видимость  = Истина;
			Элементы.ВыставлениеДокументовПоПолугодиямМесяц.Видимость = Истина;
		ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Год") Тогда
			Элементы.ВыставлениеДокументовПоГодамДень.Видимость       = Истина;
			Элементы.ВыставлениеДокументовПоГодамМесяц.Видимость      = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

// Процедура формирует соответствие видов договора.
//
&НаСервере
Процедура УстановитьСписокВыбораВидовДоговора()
	
	Если Константы.ФункциональнаяОпцияПередачаТоваровНаКомиссию.Получить() Тогда
		Элементы.ВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияПриемТоваровНаКомиссию.Получить() Тогда
		Элементы.ВидДоговора.СписокВыбора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
	КонецЕсли;	
	
КонецПроцедуры // УстановитьСписокВыбораВидовДоговора()

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Печать договора. Если параметр незаполнен — отображать его заголовок в подсказке ввода.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РедактируемыеПараметрыЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РедактируемыеПараметры.ЗначениеЗаполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("РедактируемыеПараметры.Представление"));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаголовкиСвернутогоОтображенияГрупп

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВсеЗаголовкиСвернутогоОтображения(Форма)
	
	УстановитьЗаголовокЦенообразование(Форма);
	УстановитьЗаголовокБиллинг(Форма);
	УстановитьЗаголовокОбменДанными(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокЦенообразование(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ВидЦен) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Вид цен '") + Строка(Объект.ВидЦен));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Вид скидки, наценки '") + Строка(Объект.ВидСкидкиНаценки));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаЦенообразование", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокБиллинг(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если Объект.ЭтоДоговорОбслуживания И ЗначениеЗаполнено(Объект.ДоговорОбслуживанияТарифныйПлан) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='Тарифный план '") + Строка(Объект.ДоговорОбслуживанияТарифныйПлан));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаБиллинг", ДинамическиеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокОбменДанными(Форма)
	
	Объект = Форма.Объект;
	ДинамическиеПараметры = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДинамическиеПараметры.Добавить(Строка(Объект.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДоговора) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='договор '") + Строка(Объект.ВидДоговора));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаОбменДанными", ДинамическиеПараметры);
	
КонецПроцедуры

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьДоговора

// Процедура запрашивает и устанавливает HTML текст сформированного текста договора
// и записывает в таблицу значений редактируемые параметры.
//
&НаСервере
Процедура СформироватьИПоказатьДоговор()
	
	Если НЕ ЭтаФорма.ДокументСформирован Тогда
		
		ЭтаФорма.РедактируемыеПараметры.Очистить();
		ПараметрыОтбора = Новый Структура("СсылкаБланка", Объект.БланкДоговора);
		МассивПараметрыИнфобазы = Объект.ПараметрыИнфобазы.НайтиСтроки(ПараметрыОтбора);
		Для каждого Параметр Из МассивПараметрыИнфобазы Цикл
			НоваяСтрока = ЭтаФорма.РедактируемыеПараметры.Добавить();
			НоваяСтрока.Представление = Параметр.Представление;
			НоваяСтрока.Значение = Параметр.Значение;
			НоваяСтрока.Идентификатор = Параметр.Идентификатор;
			НоваяСтрока.Параметр = Параметр.Параметр;
			НоваяСтрока.НомерСтроки = Параметр.НомерСтроки;
		КонецЦикла;
		
		МассивРедактируемыеПараметры = Объект.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
		Для каждого Параметр Из МассивРедактируемыеПараметры Цикл
			НоваяСтрока = ЭтаФорма.РедактируемыеПараметры.Добавить();
			НоваяСтрока.Представление = Параметр.Представление;
			НоваяСтрока.Значение = Параметр.Значение;
			НоваяСтрока.Идентификатор = Параметр.Идентификатор;
			НоваяСтрока.НомерСтроки = Параметр.НомерСтроки;
		КонецЦикла;
		
		СформированныйДокумент = УправлениеНебольшойФирмойФормированиеПечатнойФормыДоговора.ПолучитьHTMLСформированногоДоговора(Объект, ЭтаФорма.ДокументОткрытия, ЭтаФорма.РедактируемыеПараметры);
		Если ЭтаФорма.ДоговорHTMLДокумент = СформированныйДокумент Тогда
			ЭтаФорма.ДокументСформирован = Истина;
		КонецЕсли;
		ЭтаФорма.ДоговорHTMLДокумент = СформированныйДокумент;
		
		ПараметрыОтбора = Новый Структура("Параметр", ПредопределенноеЗначение("Перечисление.ПараметрыБланковДоговоровСКонтрагентами.Факсимиле"));
		Строки = ЭтаФорма.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
		Для каждого Строка Из Строки Цикл
			Идентификатор = Строка.ПолучитьИдентификатор();
			ЭтаФорма.РедактируемыеПараметры.Удалить(РедактируемыеПараметры.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
		
		ПараметрыОтбора.Параметр = ПредопределенноеЗначение("Перечисление.ПараметрыБланковДоговоровСКонтрагентами.Логотип");
		Строки = ЭтаФорма.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
		Для каждого Строка Из Строки Цикл
			Идентификатор = Строка.ПолучитьИдентификатор();
			ЭтаФорма.РедактируемыеПараметры.Удалить(РедактируемыеПараметры.НайтиПоИдентификатору(Идентификатор))
		КонецЦикла;
		
		Для каждого Строка Из ЭтаФорма.РедактируемыеПараметры Цикл
			Если ЗначениеЗаполнено(Строка.Значение) Тогда
				Строка.ЗначениеЗаполнено = Истина;
			Иначе
				Строка.ЗначениеЗаполнено = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыБланка()
	
	ПараметрыОтбора = Новый Структура("СсылкаБланка", Объект.БланкДоговора);
	ОбъектРедактируемыеПараметры = Объект.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
	ОбъектПараметрыИнфобазы = Объект.ПараметрыИнфобазы.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого Параметр Из ОбъектРедактируемыеПараметры Цикл
		ПараметрыОтбора = Новый Структура("Идентификатор", Параметр.Идентификатор);
		Если Объект.БланкДоговора.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора).Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыОтбора.Вставить("СсылкаБланка", Объект.БланкДоговора);
		Строки = Объект.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
		Если Строки.Количество() > 0 Тогда 
			Объект.РедактируемыеПараметры.Удалить(Строки[0]);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Параметр Из Объект.БланкДоговора.РедактируемыеПараметры Цикл
		ПараметрыОтбора = Новый Структура("СсылкаБланка, Идентификатор", Объект.БланкДоговора, Параметр.Идентификатор);
		Если Объект.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.РедактируемыеПараметры.Добавить();
		НоваяСтрока.СсылкаБланка = Объект.БланкДоговора;
		НоваяСтрока.Представление = Параметр.Представление;
		НоваяСтрока.Идентификатор = Параметр.Идентификатор;
	КонецЦикла;
	
	Для каждого Параметр Из ОбъектПараметрыИнфобазы Цикл
		ПараметрыОтбора = Новый Структура("Идентификатор", Параметр.Идентификатор);
		Строки = Объект.БланкДоговора.ПараметрыИнфобазы.НайтиСтроки(ПараметрыОтбора);
		Если Строки.Количество() <> 0 Тогда
			Параметр.Представление = Строки[0].Представление;
			Продолжить;
		КонецЕсли;
		ПараметрыОтбора.Вставить("СсылкаБланка", Объект.БланкДоговора);
		Строки = Объект.ПараметрыИнфобазы.НайтиСтроки(ПараметрыОтбора);
		Если Строки.Количество() > 0 Тогда 
			Объект.ПараметрыИнфобазы.Удалить(Строки[0]);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Параметр Из Объект.БланкДоговора.ПараметрыИнфобазы Цикл 
		ПараметрыОтбора = Новый Структура("СсылкаБланка, Идентификатор", Объект.БланкДоговора, Параметр.Идентификатор);
		Если Объект.ПараметрыИнфобазы.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ПараметрыИнфобазы.Добавить();
		НоваяСтрока.СсылкаБланка = Объект.БланкДоговора;
		НоваяСтрока.Представление = Параметр.Представление;
		НоваяСтрока.Идентификатор = Параметр.Идентификатор;
		НоваяСтрока.Параметр = Параметр.Параметр;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПараметр(Параметр)
	
	Если НЕ ЭтаФорма.ДокументСформирован Тогда
		Возврат;
	КонецЕсли;
	
	document = Элементы.ДоговорHTMLДокумент.Документ;
	
	Если ЗначениеЗаполнено(ЭтаФорма.ТекущийНажатыйПараметр) Тогда
		lastParameter = document.getElementById(ЭтаФорма.ТекущийНажатыйПараметр);
		Если lastParameter.className = "Filled" Тогда 
			lastParameter.style.backgroundColor = "#FFFFFF";
		ИначеЕсли lastParameter.className = "Empty" Тогда 
			lastParameter.style.backgroundColor = "#DCDCDC";
		КонецЕсли;
	КонецЕсли;
	
	chosenParameter = document.getElementById(Параметр);
	Если chosenParameter <> Неопределено Тогда
		chosenParameter.style.backgroundColor = "#CCFFCC";
		chosenParameter.scrollIntoView();
		
		ЭтаФорма.ТекущийНажатыйПараметр = Параметр;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорHTMLДокументДокументСформирован(Элемент)
	
	document = Элементы.ДоговорHTMLДокумент.Документ;
	РедактируемыеПараметрыНаСтранице = document.getElementsByName("parameter");
	
	Итератор = 0;
	Для каждого Параметр из РедактируемыеПараметрыНаСтранице Цикл 
		ПараметрыОтбора = Новый Структура("Идентификатор", Параметр.id);
		Строка = РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
		Если Строка.Количество() > 0 Тогда 
			ИндексСтроки = РедактируемыеПараметры.Индекс(Строка[0]);
			Сдвиг = Итератор - ИндексСтроки;
			Если Сдвиг <> 0 Тогда 
				РедактируемыеПараметры.Сдвинуть(ИндексСтроки, Сдвиг);
			КонецЕсли;
		КонецЕсли;
		Итератор = Итератор + 1;
	КонецЦикла;
	
	ЭтаФорма.ДокументСформирован = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЭтоПараметрИнфобазы(Параметр)
	
	Возврат ?(ТипЗнч(Параметр) = Тип("ПеречислениеСсылка.ПараметрыБланковДоговоровСКонтрагентами"), Истина, Ложь);
	
КонецФункции

&НаСервере
Функция ЭтоДополнительныйРеквизит(Параметр)
	
	Возврат ?(ТипЗнч(Параметр) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), Истина, Ложь);
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПараметра(Параметр, Представление, Идентификатор)
	
	Если ЭтоПараметрИнфобазы(Параметр) Тогда
		Возврат УправлениеНебольшойФирмойФормированиеПечатнойФормыДоговора.ПолучитьЗначениеПараметра(Объект, ДокументОткрытия, Параметр, Представление);
	ИначеЕсли ЭтоДополнительныйРеквизит(Параметр) Тогда
		Возврат УправлениеНебольшойФирмойФормированиеПечатнойФормыДоговора.ПолучитьЗначениеДополнительногоРеквизита(Объект, ДокументОткрытия, Параметр);
	Иначе
		Возврат УправлениеНебольшойФирмойФормированиеПечатнойФормыДоговора.ПолучитьЗначениеЗаполняемогоПоляПриФормированииПечатнойФормы(Объект, Идентификатор);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РедактируемыеПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ТекущийНажатыйПараметр) Тогда
		ВыделитьПараметр(Элемент.ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
	Строки = РедактируемыеПараметры.НайтиСтроки(Новый Структура("Идентификатор", ЭтаФорма.ТекущийНажатыйПараметр));
	Если Строки.Количество() > 0 Тогда
		Строки[0].ЗначениеЗаполнено = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыеПараметрыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Строки = РедактируемыеПараметры.НайтиСтроки(Новый Структура("Идентификатор", ЭтаФорма.ТекущийНажатыйПараметр));
	Если Строки.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(Строки[0].Значение) Тогда
			Строки[0].ЗначениеЗаполнено = Истина;
		Иначе
			Строки[0].ЗначениеЗаполнено = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыеПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Параметр = Элементы.РедактируемыеПараметры.ТекущиеДанные;
	ЗначениеПараметра = ПолучитьЗначениеПараметра(Параметр.Параметр, Параметр.Представление, Параметр.Идентификатор);
	Элементы.РедактируемыеПараметры.ТекущиеДанные.Значение = ЗначениеПараметра;
	
	УстановитьИЗаписатьЗначениеПараметра(ЗначениеПараметра, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИЗаписатьЗначениеПараметра(ЗначениеПараметра, ЗаписатьЗначение)
	
	document = Элементы.ДоговорHTMLДокумент.Документ;
	chosenParameter = document.getElementById(ЭтаФорма.ТекущийНажатыйПараметр);
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		chosenParameter.innerText = ЗначениеПараметра;
		chosenParameter.className = "Filled";
		Элементы.РедактируемыеПараметры.ТекущиеДанные.ЗначениеЗаполнено = Истина;
	Иначе
		chosenParameter.innerText = "__________";
		chosenParameter.className = "Empty";
		Элементы.РедактируемыеПараметры.ТекущиеДанные.ЗначениеЗаполнено = Ложь;
	КонецЕсли;
	
	РабочаяТаблица = Неопределено;
	Параметр = Элементы.РедактируемыеПараметры.ТекущиеДанные;
	Если ЭтоПараметрИнфобазы(Параметр.Параметр) ИЛИ ЭтоДополнительныйРеквизит(Параметр.Параметр) Тогда
		РабочаяТаблица = Объект.ПараметрыИнфобазы;
		Если ЗаписатьЗначение Тогда
			ЗначениеПараметраВИнфобазе = ПолучитьЗначениеПараметра(Параметр.Параметр, Параметр.Представление, Параметр.Идентификатор);
			Если ЗначениеПараметра = ЗначениеПараметраВИнфобазе Тогда
				ЗаписатьЗначение = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РабочаяТаблица = Объект.РедактируемыеПараметры;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Идентификатор", ЭтаФорма.ТекущийНажатыйПараметр);
	Строки = ЭтаФорма.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
	Если Строки.Количество() > 0 Тогда 
		ИндексПараметра = Строки[0].НомерСтроки - 1;
	Иначе
		ИндексПараметра = Неопределено;
	КонецЕсли;
	
	Если ИндексПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаписатьЗначение Тогда
		РабочаяТаблица[ИндексПараметра].Значение = ЗначениеПараметра;
	Иначе
		РабочаяТаблица[ИндексПараметра].Значение = "";
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Эквайринг

&НаСервере
Процедура ПроверитьВозможностьИзменений(Отказ)
	
	Если ВалютаРасчетов = Объект.ВалютаРасчетов Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Договор
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Договор = &Договор";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекстСообщения = НСтр("ru = 'В базе присутствуют эквайринговые терминалы, в которых выбран текущий договор. Изменение валюты расчетов запрещено.'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "Объект.ВалютаРасчетов", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Биллинг

&НаКлиенте
Процедура СоздатьНаправлениеДеятельностиВопрос()
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Перед созданием направления действия необходимо записать объект. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьНаправлениеДеятельностиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СоздатьНаправлениеДеятельностиДляДоговораОбслуживания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаправлениеДеятельностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;
	
	СоздатьНаправлениеДеятельностиДляДоговораОбслуживания();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНаправлениеДеятельностиДляДоговораОбслуживания()
	
	Объект.ДоговорОбслуживанияНаправлениеДеятельности = 
		Справочники.ДоговорыКонтрагентов.СоздатьНаправлениеДеятельностиДляДоговораОбслуживания(Объект.Владелец, Объект.Ссылка);
	Записать();
	
	БиллингНастроитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура БиллингНастроитьВидимостьЭлементов()
	
	Если Объект.ЭтоДоговорОбслуживания Тогда
		Элементы.ГруппаБиллингНастройки.Видимость = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ГруппаБиллингНастройки.Видимость = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		Возврат;
	КонецЕсли;
	
	ИспользоватьНаправленияДеятельности = Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Получить();
	
	Если НЕ ИспользоватьНаправленияДеятельности Тогда
		Элементы.ДоговорОбслуживанияНаправлениеДеятельности.Видимость = Ложь;
		Элементы.ГруппаСоздатьНаправлениеДеятельности.Видимость = Ложь;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
			ИЛИ ЗначениеЗаполнено(Объект.Ссылка) И НЕ Объект.Ссылка.ЭтоДоговорОбслуживания Тогда
			// Это новый объект или существующий, который становится договором обслуживания.
			// Направление деятельности создается автоматически.
			Элементы.ДоговорОбслуживанияНаправлениеДеятельности.Видимость = Истина;
			Элементы.ГруппаСоздатьНаправлениеДеятельности.Видимость = Ложь;
		Иначе
			// Это существующий договор обслуживания.
			// Направление деятельности создается вручную, если не было создано ранее.
			Элементы.ДоговорОбслуживанияНаправлениеДеятельности.Видимость = ЗначениеЗаполнено(Объект.ДоговорОбслуживанияНаправлениеДеятельности);
			Элементы.ГруппаСоздатьНаправлениеДеятельности.Видимость = НЕ ЗначениеЗаполнено(Объект.ДоговорОбслуживанияНаправлениеДеятельности);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателейРассылки()
	
	ПолучателиРассылки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ДоговорыКонтрагентовДоговорОбслуживанияПолучателиРассылки.Контакт КАК Контакт,
	|	ДоговорыКонтрагентовДоговорОбслуживанияПолучателиРассылки.АдресЭП КАК АдресЭП
	|ПОМЕСТИТЬ ВТВыбранныеПолучатели
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.ДоговорОбслуживанияПолучателиРассылки КАК ДоговорыКонтрагентовДоговорОбслуживанияПолучателиРассылки
	|ГДЕ
	|	ДоговорыКонтрагентовДоговорОбслуживанияПолучателиРассылки.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК Пометка,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контакт,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК АдресЭП
	|ПОМЕСТИТЬ ВТВсеПолучатели
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
	|	И КонтрагентыКонтактнаяИнформация.Тип = &ТипКИ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Контрагент
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип = &ТипКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыбранныеПолучатели.Пометка,
	|	ВТВыбранныеПолучатели.Контакт,
	|	ВТВыбранныеПолучатели.АдресЭП
	|ИЗ
	|	ВТВыбранныеПолучатели КАК ВТВыбранныеПолучатели
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТВсеПолучатели.Пометка,
	|	ВТВсеПолучатели.Контакт,
	|	ВТВсеПолучатели.АдресЭП
	|ИЗ
	|	ВТВсеПолучатели КАК ВТВсеПолучатели
	|ГДЕ
	|	НЕ ВТВсеПолучатели.АдресЭП В
	|				(ВЫБРАТЬ
	|					ВТВыбранныеПолучатели.АдресЭП
	|				ИЗ
	|					ВТВыбранныеПолучатели КАК ВТВыбранныеПолучатели)";
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Владелец);
	Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьАдресаты = Выборка.Количество() <> 0;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПолучателиРассылки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуНачалаДоговораОбслуживания()
	
	Если Объект.ЭтоДоговорОбслуживания
		И НЕ ЗначениеЗаполнено(Объект.ДоговорОбслуживанияДатаНачала)
		И ЗначениеЗаполнено(Объект.ДатаДоговора) Тогда
		
		Объект.ДоговорОбслуживанияДатаНачала = Объект.ДатаДоговора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДатуВыставленияДокументов()
	
	Если Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Неделя") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = ДеньНедели(Объект.ДоговорОбслуживанияДатаНачала);
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = 0;
		
	ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(Объект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(Объект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = 0;
		
	ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Квартал") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(Объект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(Объект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = Месяц(Объект.ДоговорОбслуживанияДатаНачала) - Месяц(НачалоКвартала(Объект.ДоговорОбслуживанияДатаНачала)) + 1;
		
	ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Полгода") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(Объект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(Объект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = ?(Месяц(Объект.ДоговорОбслуживанияДатаНачала) > 6, Месяц(Объект.ДоговорОбслуживанияДатаНачала) - 6, Месяц(Объект.ДоговорОбслуживанияДатаНачала));
		
	ИначеЕсли Объект.ДоговорОбслуживанияПериодичность = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Год") Тогда
		
		Объект.ДоговорОбслуживанияДнейДоВыставленияДокументов = (НачалоДня(Объект.ДоговорОбслуживанияДатаНачала) - НачалоМесяца(Объект.ДоговорОбслуживанияДатаНачала)) / 86400 + 1;
		Объект.ДоговорОбслуживанияМесяцевДоВыставленияДокументов = Месяц(Объект.ДоговорОбслуживанияДатаНачала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры // Подключаемый_РедактироватьСоставСвойств()

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
