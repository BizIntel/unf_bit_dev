#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("ВалютаРасчетов");
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустую ссылку.
//
// Параметры
//  Контрагент	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  Организация	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоров> 
//							Нужные виды договора
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный договор или пустая ссылка
//
Функция ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговора = Неопределено) Экспорт
	
	ОсновнойДоговорКонтрагента = Контрагент.ДоговорПоУмолчанию;
	
	Если Не УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() Тогда
		
		Возврат ОсновнойДоговорКонтрагента;
	КонецЕсли;
	
	Если СписокВидовДоговора = Неопределено
		ИЛИ (СписокВидовДоговора.НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора) <> Неопределено
		И ОсновнойДоговорКонтрагента.Организация = Организация) Тогда
		
		Возврат ОсновнойДоговорКонтрагента;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ПометкаУдаления = Ложь"
	+?(СписокВидовДоговора <> Неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	Возврат Выборка.Ссылка;

КонецФункции // ПолучитьДоговорКонтрагента()

// Проверяет договор контрагента на соответствие переданным параметрам.
//
// Параметры
//	ТекстСообщения - <Строка> - текст сообщения об ошибках
//	Договор	–	<СправочникСсылка.ДоговорыКонтрагентов> - проверяемый договор
//	Организация	–	<СправочникСсылка.Организации> - организация документа
//	Контрагент	–	<СправочникСсылка.Контрагенты> - контрагент документа
//	СписокВидовДоговора	–	<СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоров>. 
//							Нужные виды договора.
//
// Возвращаемое значение:
//	<Булево> – Истина, если проверка пройдена успешно.
//
Функция ДоговорСоответствуетУсловиямДокумента(ТекстСообщения, Договор, Организация, Контрагент, СписокВидовДоговора) Экспорт
	
	ТекстСообщения = "";
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Истина;
	КонецЕсли;
	
	НеСоответствуетОрганизация = Ложь;
	НеСоответствуетВидДоговора = Ложь;
	
	Если Договор.Организация <> Организация Тогда
		НеСоответствуетОрганизация = Истина;
	КонецЕсли;
		
	Если СписокВидовДоговора.НайтиПоЗначению(Договор.ВидДоговора) = Неопределено Тогда
		НеСоответствуетВидДоговора = Истина;
	КонецЕсли;
	
	Если (НеСоответствуетОрганизация ИЛИ НеСоответствуетВидДоговора) = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Реквизиты договора не соответствуют условиям документа:'");
	
	Если НеСоответствуетОрганизация Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = '
		| - Не совпадает организация'");
	КонецЕсли;
	
	Если НеСоответствуетВидДоговора Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = '
		| - Не совпадает вид договора'");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ДоговорСоответствуетУсловиямДокумента()

// Возвращает список доступных видов договора для документа.
//
// Параметры
//	Документ  - любой документ, предусматривающий договор контрагента
//	ВидОперации  - вид операции документа.
//
// Возвращаемое значение:
//	<СписокЗначений>   - список видов договора, доступных для документа.
//
Функция ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации = Неопределено, ИмяТабличнойЧасти = "") Экспорт
	
	СписокВидовДоговора = Новый СписокЗначений;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
		
		Если ИмяТабличнойЧасти = "ЗапасыПереданные" Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			Иначе
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
			Иначе
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			КонецЕсли;
			
		ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПоставщиками" Тогда
			
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
			
		ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
			
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		
		Если ИмяТабличнойЧасти = "Дебитор" Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		ИначеЕсли ИмяТабличнойЧасти = "Кредитор" Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		Иначе
			Если ВидОперации = Перечисления.ВидыОперацийВзаимозачет.ПереуступкаДолгаПокупателя Тогда
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			Иначе
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
				СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.Доверенность") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ДополнительныеРасходы") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриемИПередачаВРемонт") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОтчетПереработчика") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеВКассу") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		// Прочие расчеты и Эквайринг
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ВозвратЗаймаСотрудником
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВозвратЗаймаСотрудником
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		// Конец Прочие расчеты и Эквайринг
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтКомиссионера Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		Иначе 
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходИзКассы") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.РасходСоСчета") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		// Прочие расчеты и Эквайринг
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		// Конец Прочие расчеты и Эквайринг
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратКомитенту Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ВозвратПоставщику Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходыПриИмпорте") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплату") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактура") Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		Иначе
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
			СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	// Эквайринг
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		
	// Конец Эквайринг
	// Прочие расчеты
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПрочиеРасходы") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		
	// Конец Прочие расчеты
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.Прочее);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомиссионером);
		
	КонецЕсли;
	
	Возврат СписокВидовДоговора;
	
КонецФункции // ПолучитьСписокВидовДоговораДляДокумента()

// Проверяет, имеются ли в базе договоры обслуживания.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЕстьДоговорыОбслуживания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ЭтоДоговорОбслуживания";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Проверяет, имеются ли в базе договоры обслуживания с заполненным направлением деятельности.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЕстьДоговорыОбслуживанияСУникальнымиНаправлениямиДеятельности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ЭтоДоговорОбслуживания
	|	И ДоговорыКонтрагентов.ДоговорОбслуживанияНаправлениеДеятельности <> ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Создает связанное с договором обслуживания направление деятельности.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Владелец договора.
//  Договор    - Строка, СправочникСсылка.ДоговорыКонтрагентов - Договор контрагента.
// 
// Возвращаемое значение:
//   - СправочникСсылка.НаправленияДеятельности
//
Функция СоздатьНаправлениеДеятельностиДляДоговораОбслуживания(Контрагент, Договор) Экспорт
	
	Наименование = "" + Контрагент + ": " + Договор;
	НаправлениеДеятельности = Справочники.НаправленияДеятельности.СоздатьЭлемент();
	НаправлениеДеятельности.Заполнить(Неопределено);
	НаправлениеДеятельности.Наименование = Наименование;
	НаправлениеДеятельности.Родитель = Константы.БиллингГоловноеНаправлениеДеятельности.Получить();
	НаправлениеДеятельности.Записать();
	
	Возврат НаправлениеДеятельности.Ссылка;
	
КонецФункции

// Переименовывает направление деятельности, созданное для договора обслуживания (вызывается при переименовании договора контрагента).
//
Функция ПереименоватьНаправлениеДеятельностиДляДоговораОбслуживания(НаправлениеДеятельности, Контрагент, ДоговорНаименование, ДоговорСтароеНаименование) Экспорт
	
	СтароеНаименование = "" + Контрагент + ": " + ДоговорСтароеНаименование;
	НовоеНаименование = "" + Контрагент + ": " + ДоговорНаименование;
	
	Если СтароеНаименование = НовоеНаименование Тогда
		// Название не изменилось.
		Возврат Ложь;
	КонецЕсли;
	
	Если Лев(НаправлениеДеятельности.Наименование, 50) <> Лев(СтароеНаименование, 50) Тогда
		// Название изменено пользователем.
		Возврат Ложь;
	КонецЕсли;
	
	НаправлениеДеятельностиОбъект = НаправлениеДеятельности.ПолучитьОбъект();
	НаправлениеДеятельностиОбъект.Наименование = НовоеНаименование;
	НаправлениеДеятельностиОбъект.Записать();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати Заказа покупателя
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Договор
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьДоговорКонтрагента";
	КомандаПечати.Идентификатор = "БланкДоговора";
	КомандаПечати.Представление = НСтр("ru = 'Форма договора'");
	КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСписка,ФормаВыбора,ФормаВыбораСКонтрагентом";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДоговорКонтрагента_HTML";
	КомандаПечати.Представление = НСтр("ru = 'Форма договора (HTML)'");
	КомандаПечати.СписокФорм = "";
	КомандаПечати.ФункциональныеОпции = "ДоговорыКонтрагентовТехническиеКомандыПечати";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ДоговорКонтрагента_DOC";
	КомандаПечати.Представление = НСтр("ru = 'Форма договора (Microsoft word)'");
	КомандаПечати.СписокФорм = "";
	КомандаПечати.ФункциональныеОпции = "ДоговорыКонтрагентовТехническиеКомандыПечати";
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТарифныйПланДоговораОбслуживания";
	КомандаПечати.Представление = НСтр("ru='Тарифный план'");
	КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСписка,ФормаВыбора,ФормаВыбораСКонтрагентом";
	КомандаПечати.ФункциональныеОпции = "ИспользоватьБиллинг";
	КомандаПечати.Порядок = 2;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ЗаполнитьПараметрыЭлектроннойПочты = Истина;
	
	ДополнительныеПараметрыПечати = Неопределено;
	Если ПараметрыПечати.Свойство("УНФДополнительныеПараметрыПечати") Тогда
		ДополнительныеПараметрыПечати = ПараметрыПечати.УНФДополнительныеПараметрыПечати;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорКонтрагента_HTML") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДоговорКонтрагента_HTML",
			"Договор контрагента (HTML)",
			ПечатьДоговораHTML(МассивОбъектов, ОбъектыПечати, ДополнительныеПараметрыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорКонтрагента_DOC") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДоговорКонтрагента_DOC",
			"Договор контрагента (DOC)",
			ПечатьДоговораDOC(МассивОбъектов, ОбъектыПечати, ДополнительныеПараметрыПечати)
		);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТарифныйПланДоговораОбслуживания") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТарифныйПланДоговораОбслуживания",
			"Тарифный план",
			ПечатьТарифныйПланДоговораОбслуживания(МассивОбъектов, ОбъектыПечати, "ТарифныйПланДоговораОбслуживания")
		);
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	Если ЗаполнитьПараметрыЭлектроннойПочты Тогда
		
		УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьДоговораDOC(МассивОбъектов, ОбъектыПечати, ДополнительныеПараметрыПечати = Неопределено) Экспорт
	
	ДокументОткрытия = Неопределено;
	Если ДополнительныеПараметрыПечати <> Неопределено
		И ТипЗнч(ДополнительныеПараметрыПечати) = Тип("Структура") Тогда
		
		ДополнительныеПараметрыПечати.Свойство("ДокументОткрытия", ДокументОткрытия);
	КонецЕсли;
	
	Для каждого ОбъектПечати Из МассивОбъектов Цикл
		
		Если ТипЗнч(ОбъектПечати.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Договор = ОбъектПечати.Ссылка;
		Иначе
			Договор = ОбъектПечати.Договор;
		КонецЕсли;
		
		ПечатнаяФормаДоговора = УправлениеНебольшойФирмойФормированиеПечатнойФормыДоговора.ПолучитьHTMLСформированногоДоговора(
			Договор,
			ДокументОткрытия,,
			Истина,
			"doc"
		);
		
		ПечатнаяФормаДоговораСтруктура = Новый Структура;
		ПечатнаяФормаДоговораСтруктура.Вставить("HTMLДокумент", ПечатнаяФормаДоговора);
		
		ПечатнаяФормаДоговораСтруктура.Вставить("КоличествоЭкземпляров", 1);
		ПечатнаяФормаДоговораСтруктура.Вставить("РасширениеФайла", "doc");
		
	КонецЦикла;
	
	Возврат ПечатнаяФормаДоговораСтруктура;
	
КонецФункции

Функция ПечатьДоговораHTML(МассивОбъектов, ОбъектыПечати, ДополнительныеПараметрыПечати = Неопределено) Экспорт
	
	ДокументОткрытия = Неопределено;
	Если ДополнительныеПараметрыПечати <> Неопределено
		И ТипЗнч(ДополнительныеПараметрыПечати) = Тип("Структура") Тогда
		
		ДополнительныеПараметрыПечати.Свойство("ДокументОткрытия", ДокументОткрытия);
	КонецЕсли;
	
	Для каждого ОбъектПечати Из МассивОбъектов Цикл
		
		Если ТипЗнч(ОбъектПечати.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Договор = ОбъектПечати.Ссылка;
		Иначе
			Договор = ОбъектПечати.Договор;
		КонецЕсли;
		
		ПечатнаяФормаДоговора = УправлениеНебольшойФирмойФормированиеПечатнойФормыДоговора.ПолучитьHTMLСформированногоДоговора(
			Договор,
			ДокументОткрытия,,
			Истина,
			"html"
		);
		
		ПечатнаяФормаДоговораСтруктура = Новый Структура;
		ПечатнаяФормаДоговораСтруктура.Вставить("HTMLДокумент", ПечатнаяФормаДоговора);
		
		ПечатнаяФормаДоговораСтруктура.Вставить("КоличествоЭкземпляров", 1);
		ПечатнаяФормаДоговораСтруктура.Вставить("РасширениеФайла", "html");
		
	КонецЦикла;
	
	Возврат ПечатнаяФормаДоговораСтруктура;
	
КонецФункции

Функция ПечатьТарифныйПланДоговораОбслуживания(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЗапросТекст = "";
	ЗапросОбъединение = "
	|
	|ОБЪЕДИНИТЬ
	|";
	
	Для каждого Эл Из МассивОбъектов Цикл
		
		Если Эл.ЭтоДоговорОбслуживания Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru ='Договор %1 не является договором обслуживания!'"),
			Эл.Ссылка
		);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	КонецЦикла;
	
	Для Итератор = 0 По МассивОбъектов.Количество() - 1 Цикл
		
		Если ЗначениеЗаполнено(ЗапросТекст) Тогда
			ЗапросТекст = ЗапросТекст + ЗапросОбъединение;
		КонецЕсли;
		
		ЗапросТекст = ЗапросТекст + "
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
		|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
		|	ДоговорыКонтрагентов.ДоговорОбслуживанияТарифныйПлан КАК ТарифныйПлан,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.НомерСтроки КАК НомерСтроки,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика КАК Характеристика,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Количество КАК Количество,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Цена КАК Цена
		|ИЗ
		|	Справочник.ТарифныеПланыДоговоровОбслуживания.УчетНоменклатуры КАК ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры,
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Ссылка = &ТарифныйПлан%1
		|	И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ФормированиеЦены = ЗНАЧЕНИЕ(Перечисление.БиллингФормированиеЦеныНоменклатуры.ФиксированноеЗначение)
		|	И ДоговорыКонтрагентов.Ссылка = &ДоговорКонтрагента%1
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
		|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
		|	ДоговорыКонтрагентов.ДоговорОбслуживанияТарифныйПлан,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.НомерСтроки,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ЕдиницаИзмерения,
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Количество,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ИЗ
		|	Справочник.ТарифныеПланыДоговоровОбслуживания.УчетНоменклатуры КАК ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЗаключенияДоговора%1, ВидЦен = &ВидЦен%1) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика,
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.Ссылка = &ТарифныйПлан%1
		|	И ТарифныеПланыДоговоровОбслуживанияУчетНоменклатуры.ФормированиеЦены = ЗНАЧЕНИЕ(Перечисление.БиллингФормированиеЦеныНоменклатуры.ПоВидуЦенДоговора)
		|	И ДоговорыКонтрагентов.Ссылка = &ДоговорКонтрагента%1";
		
		ЗапросТекст = СтрШаблон(ЗапросТекст, Итератор);
		
	КонецЦикла;
	
	ЗапросТекст = ЗапросТекст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.ДоговорОбслуживанияТарифныйПлан,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Договор";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ЗапросТекст;
	
	Для Итератор = 0 По МассивОбъектов.Количество() - 1 Цикл
		
		Параметр = "ТарифныйПлан" + Итератор;
		Запрос.УстановитьПараметр(Параметр, МассивОбъектов[Итератор].ДоговорОбслуживанияТарифныйПлан);
		
		Параметр = "ДатаЗаключенияДоговора" + Итератор;
		Запрос.УстановитьПараметр(Параметр, МассивОбъектов[Итератор].ДоговорОбслуживанияДатаНачала);
		
		Параметр = "ВидЦен" + Итератор;
		Запрос.УстановитьПараметр(Параметр, МассивОбъектов[Итератор].ВидЦен);
		
		Параметр = "ДоговорКонтрагента" + Итератор;
		Запрос.УстановитьПараметр(Параметр, МассивОбъектов[Итератор].Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИмяМакета + "_" + ИмяМакета;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыКонтрагентов.ПФ_MXL_" + ИмяМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = "к договору № "
												+ Выборка.НомерДоговора
												+ " от "
												+ Формат(Выборка.ДатаДоговора, "ДЛФ=DD");
												
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Макет.Области.Найти("ТарифныйПлан") <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ТарифныйПлан");
			
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаСтрокТарифногоПлана = Выборка.Выбрать();
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		Сумма = 0;
		Количество = 0;
		
		Пока ВыборкаСтрокТарифногоПлана.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТарифногоПлана);
			ОбластьМакета.Параметры.Номенклатура = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
				ВыборкаСтрокТарифногоПлана.Номенклатура,
				ВыборкаСтрокТарифногоПлана.Характеристика
			);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма = Сумма + ВыборкаСтрокТарифногоПлана.Количество * ВыборкаСтрокТарифногоПлана.Цена;
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Сумма = УправлениеНебольшойФирмойСервер.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.ТарифныйПлан);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьТарифныйПланДоговораОбслуживания()

#КонецОбласти

#КонецЕсли