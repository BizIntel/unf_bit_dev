
#Region СлужебныеПроцедурыИФункции

// Процедура создания оповещение формы владельца о изменении счета
//
&НаКлиенте
Процедура ОповеститьОбИзмененииСчетов()
	
	СтруктураПараметры = Новый Структура("СчетЗатрат", СчетЗатрат);
	Оповестить("ИзменилисьСчетаВидыНачисленийИУдержаний", СтруктураПараметры);
	
КонецПроцедуры // ОповеститьОбИзмененииСчетов()

// Функция проверяет возможность изменения счета учета.
//
&НаСервере
Функция ОтказИзменитьСчетЗатрат(ВидНачисленияУдержания)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачисленияИУдержания.Период,
	|	НачисленияИУдержания.Регистратор,
	|	НачисленияИУдержания.НомерСтроки,
	|	НачисленияИУдержания.Активность,
	|	НачисленияИУдержания.Организация,
	|	НачисленияИУдержания.СтруктурнаяЕдиница,
	|	НачисленияИУдержания.Сотрудник,
	|	НачисленияИУдержания.ПериодРегистрации,
	|	НачисленияИУдержания.Валюта,
	|	НачисленияИУдержания.ВидНачисленияУдержания,
	|	НачисленияИУдержания.Сумма,
	|	НачисленияИУдержания.СуммаВал,
	|	НачисленияИУдержания.ДатаНачала,
	|	НачисленияИУдержания.ДатаОкончания,
	|	НачисленияИУдержания.ОтработаноДней,
	|	НачисленияИУдержания.ОтработаноЧасов,
	|	НачисленияИУдержания.Размер
	|ИЗ
	|	РегистрНакопления.НачисленияИУдержания КАК НачисленияИУдержания
	|ГДЕ
	|	НачисленияИУдержания.ВидНачисленияУдержания = &ВидНачисленияУдержания");
	
	Запрос.УстановитьПараметр("ВидНачисленияУдержания", ?(ЗначениеЗаполнено(ВидНачисленияУдержания), ВидНачисленияУдержания, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ОтказИзменитьСчетЗатрат()

// Процедура заполняет структуру данных для выбора счета расчета
//
&НаСервере
Процедура ПолучитьДанныеДляВыбораСчетаРасчетов(СтруктураДанных)
	
	ДоступныеТипыСчетовУчета = Новый Массив;
	ВидНачисленияУдержания = СтруктураДанных.ВидНачисленияУдержания;
	Если НЕ ЗначениеЗаполнено(ВидНачисленияУдержания) Тогда
		
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.НезавершенноеПроизводство);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.КосвенныеЗатраты);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.Расходы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеДоходы);
		
	ИначеЕсли ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Начисление Тогда
		
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.НезавершенноеПроизводство);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.КосвенныеЗатраты);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.Расходы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеВнеоборотныеАктивы);
		
	ИначеЕсли ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Удержание Тогда
		
		ДоступныеТипыСчетовУчета.Добавить(Перечисления.ТипыСчетов.ПрочиеДоходы);
		
	КонецЕсли;
	
	СтруктураДанных.Вставить("ДоступныеТипыСчетовУчета", ДоступныеТипыСчетовУчета);
	
КонецПроцедуры // ПолучитьДанныеДляВыбораСчетаРасчетов()

// Процедура устанавливает связь параметров выбора для реквизита Счет затрат
//
&НаСервере
Процедура УстановитьСвязьПараметровВыбораНаСервере()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВидНачисленияУдержания", ВидНачисленияУдержания);
		
	ПолучитьДанныеДляВыбораСчетаРасчетов(СтруктураДанных);
	
	НовыйМассив = Новый Массив;
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(СтруктураДанных.ДоступныеТипыСчетовУчета));
	НовыйМассив.Добавить(НовыйПараметр);
	Элементы.СчетЗатрат.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
КонецПроцедуры // УстановитьСвязьПараметровВыбораНаСервере()

#EndRegion

#Region ОбработчикиСобытийФормы

// Процедура - обработчик события формы ПриСозданииНаСервере
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СчетЗатрат				= Параметры.СчетЗатрат;
	ВидНачисленияУдержания	= Параметры.Ссылка;
	ЭтоНалог				= (ВидНачисленияУдержания.Тип = Перечисления.ТипыНачисленийИУдержаний.Налог);
	
	УстановитьСвязьПараметровВыбораНаСервере();
	
	Если ОтказИзменитьСчетЗатрат(ВидНачисленияУдержания) Тогда
		
		Элементы.ГруппаСчетовУчета.Подсказка	= НСтр("ru = 'В базе есть движения по этому виду начисления (удержания)! Изменение счета учета запрещено!'");
		Элементы.ГруппаСчетовУчета.Доступность	= Ложь;
		Элементы.ПоУмолчанию.Видимость			= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события формы ПриСозданииНаСервере
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоНалог Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Для типа вида начисления Налог счета учета не редактируются!'"));
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#EndRegion

#Region ОбработчикиКомандФормы

// Процедура - обработчик команды По-умолчанию.
//
&НаКлиенте
Процедура ПоУмолчанию(Команда)
	
	СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.УправленческиеРасходы");
	ОповеститьОбИзмененииСчетов();
	
КонецПроцедуры // ПоУмолчанию()

#EndRegion

#Region ОбработчикиСобытийРеквизитовФормы

// Обработчик события ПриИзменении реквизита СчетЗатрат
//
&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		
		СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.УправленческиеРасходы");
		
	КонецЕсли;
	
	ОповеститьОбИзмененииСчетов();
	
КонецПроцедуры // СчетЗатратПриИзменении()

#EndRegion