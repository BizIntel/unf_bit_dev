
#Region СлужебныеПроцедурыИФункции

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступность()
	
	Если Объект.Тип = Налог Тогда
		
		Объект.СчетЗатрат = Неопределено;
		
		Элементы.ГруппаФормула.Видимость = Ложь;
		Объект.Формула = "";
		Элементы.ГруппаКоды.Видимость = Ложь;
		Элементы.ВидНалога.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаКоды.Видимость = НЕ (Объект.Тип = Удержание);
		Элементы.ГруппаФормула.Видимость = Истина;
		
		Элементы.ВидНалога.Видимость = Ложь;
		Объект.ВидНалога = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значения в зависимости от выбранного типа
//
&НаСервере
Процедура ПриИзмененииТипаВидаНачисленияНаСервере(ТипВидаНачисления)
	
	Если ТипВидаНачисления = Перечисления.ТипыНачисленийИУдержаний.Удержание Тогда
		
		Объект.СчетЗатрат = ПланыСчетов.Управленческий.ПрочиеДоходы;
		
	Иначе
		
		Объект.СчетЗатрат = ПланыСчетов.Управленческий.УправленческиеРасходы;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииТипаВидаНачисленияНаСервере()

#EndRegion

#Region ОбработчикиСобытийФормы

// Процедура обработчик события ПриСозданииНаСервере
// Осуществляет первоначальное заполнение реквизитов формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Налог = Перечисления.ТипыНачисленийИУдержаний.Налог;
	Удержание = Перечисления.ТипыНачисленийИУдержаний.Удержание;
	
	УчетНалогов = ПолучитьФункциональнуюОпцию("ВестиУчетНалогаНаДоходыИВзносов");
	Если Не УчетНалогов Тогда
		
		ЭлементСписка = Элементы.Тип.СписокВыбора.НайтиПоЗначению(Перечисления.ТипыНачисленийИУдержаний.Налог);
		Если ЭлементСписка <> Неопределено Тогда
			
			Элементы.Тип.СписокВыбора.Удалить(ЭлементСписка);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ЭтоНалог = (Объект.Тип = Налог);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВидНалога", "Видимость", ЭтоНалог);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФормула", "Видимость", НЕ ЭтоНалог);
	
	ПриИзмененииТипаВидаНачисленияНаСервере(Объект.Тип);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура обработчик события ПослеЗаписиНаСервере
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
КонецПроцедуры // ПослеЗаписиНаСервере()

// Процедура обработчик события ОбработкаОповещения
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменилисьСчетаВидыНачисленийИУдержаний" Тогда
		
		Объект.СчетЗатрат = Параметр.СчетЗатрат;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьИДоступность();
КонецПроцедуры

#EndRegion

#Region ОбработчикиКомандФормы

// Процедура вызывается при нажатии кнопки "Редактировать формулу расчета". 
//
&НаКлиенте
Процедура КомандаРедактироватьФормулуРасчета(Команда)
	
	СтруктураПараметров = Новый Структура("ТекстФормулы", Объект.Формула);
	Оповещение = Новый ОписаниеОповещения("КомандаРедактироватьФормулуРасчетаЗавершение",ЭтаФорма);
	ОткрытьФорму("Справочник.ВидыНачисленийИУдержаний.Форма.ФормаРедактированияФормулыРасчета", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры // КомандаРедактироватьФормулуРасчетаВыполнить()

&НаКлиенте
Процедура КомандаРедактироватьФормулуРасчетаЗавершение(ТекстФормулы,Параметры) Экспорт

	Если ТипЗнч(ТекстФормулы) = Тип("Строка") Тогда
		Объект.Формула = ТекстФормулы;
	КонецЕсли;

КонецПроцедуры

#EndRegion

#Region ОбработчикиРеквизитовФормы

// Процедура обработчик события ПриИзменении поля ввода ЮрФизЛицо.
//
&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	ПриИзмененииТипаВидаНачисленияНаСервере(Объект.Тип);
	
КонецПроцедуры // ЮрФизЛицоПриИзменении()

#EndRegion

#Region ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()


// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

#EndRegion