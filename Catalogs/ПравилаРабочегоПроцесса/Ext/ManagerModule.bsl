#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует массив метаданных объектов, для которых определены наборы данных, используемые в рабочих процессах.
// Для указанных объектов должен быть определен макет СКД с именем "СКД_КритерииПравилаРабочегоПроцесса",
// принимающий параметр "Основание" - ссылку с типом соответствующего объекта
//
// Возвращаемое значение:
//   Массив   - сформированный массив
//
Функция ОбъектыМетаданныхОснованийДляПравилРабочегоПроцесса() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Метаданные.Документы.ЗаказПокупателя);
	Результат.Добавить(Метаданные.Документы.ЗаказПоставщику);
	Результат.Добавить(Метаданные.Документы.ЗаказНаПроизводство);
	Результат.Добавить(Метаданные.Документы.Событие);
	Результат.Добавить(Метаданные.Документы.ЗаданиеНаРаботу);
	Результат.Добавить(Метаданные.Документы.ПриемИПередачаВРемонт);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСхемуКритериевОтбора(ОписаниеОбъектаМетаданных, ИмяМакетаШаблона = "СКД_КритерииПравилаРабочегоПроцесса") Экспорт
	
	ТипОписанияОбъектаМетаданных = ТипЗнч(ОписаниеОбъектаМетаданных);
	
	Если ТипОписанияОбъектаМетаданных = Тип("Тип") Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
	ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("Строка") Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъектаМетаданных);
	Иначе
		МетаданныеОбъекта = ОписаниеОбъектаМетаданных;
	КонецЕсли;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный объект метаданных для правила рабочего процесса'");
	КонецЕсли;
	
	Если МетаданныеОбъекта.Макеты.Найти(ИмяМакетаШаблона) = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не найдена схема компоновки данных для правила рабочего процесса'");
	КонецЕсли;
	
	Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя()).ПолучитьМакет(ИмяМакетаШаблона);
	
КонецФункции

Функция ПолучитьСхемуКритериевОтбораПоСобытию(СобытиеРабочегоПроцесса) Экспорт
	
	МетаданныеОснования = Перечисления.СобытияРабочегоПроцесса.СоответствиеСобытияМетаданнымОснования()[СобытиеРабочегоПроцесса];
	
	Если СобытиеРабочегоПроцесса = Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказНаряда Тогда
		Возврат ПолучитьСхемуКритериевОтбора(МетаданныеОснования, "СКД_КритерииПравилаРабочегоПроцессаЗаказНаряд");
	КонецЕсли;
	
	Возврат ПолучитьСхемуКритериевОтбора(МетаданныеОснования);
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Процедура заполняет справочник правил элементами по умолчанию
//
Процедура ЗаполнитьПоставляемыеПравила() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаРабочегоПроцесса.Ссылка
		|ИЗ
		|	Справочник.ПравилаРабочегоПроцесса КАК ПравилаРабочегоПроцесса
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДействияРабочегоПроцесса.Ссылка
		|ИЗ
		|	Справочник.ДействияРабочегоПроцесса КАК ДействияРабочегоПроцесса";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Действие "Напоминание"
		Действие = Справочники.ДействияРабочегоПроцесса.СоздатьЭлемент();
		Действие.Наименование		= НСтр("ru='Создать напоминание по основанию: Заказ покупателя'");
		Действие.ТипДействия		= Перечисления.ТипыДействийРабочегоПроцесса.СоздатьНапоминание;
		Действие.ПолноеИмяОснования	= Метаданные.Документы.ЗаказПокупателя.ПолноеИмя();
		
		НастройкаЗаполнения = Действие.НастройкиЗаполнения.Добавить();
		НастройкаЗаполнения.ИмяРеквизита		= "Пользователь";
		НастройкаЗаполнения.ВариантЗаполнения	= "ИзОснования";
		НастройкаЗаполнения.Значение			= Новый ХранилищеЗначения(Метаданные.Документы.ЗаказПокупателя.Реквизиты.Автор.Имя);
		
		НастройкаЗаполнения = Действие.НастройкиЗаполнения.Добавить();
		НастройкаЗаполнения.ИмяРеквизита		= "ВремяСобытия";
		НастройкаЗаполнения.ВариантЗаполнения	= "Смещение";
		НастройкаЗаполнения.Значение			= Новый ХранилищеЗначения("Сразу");
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Действие);
		
		// 1. Правило "Оповещение автора заказа"
		Правило = Справочники.ПравилаРабочегоПроцесса.СоздатьЭлемент();
		Правило.Наименование	= НСтр("ru='Оповещать автора заказа покупателя об изменении состояния'");
		Правило.Автор			= Пользователи.СсылкаНеуказанногоПользователя(Истина);
		Правило.Включено		= Ложь;
		Правило.Комментарий		= НСтр("ru='#Создано автоматически для быстрого старта'");
		Правило.СписокДействий	= Действие.Наименование;
		Правило.УсловиеСтарта	= Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказаПокупателя;
		
		СтрокаДействий = Правило.Действия.Добавить();
		СтрокаДействий.Действие = Действие.Ссылка;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Правило);
		
		// Шаблон "Уведомление покупателя об изменении состояния заказа"
		ТекстШаблона = НСтр("ru='[ЗаказПокупателя.Обращение] [ЗаказПокупателя.Покупатель]!
			|
			|Состояние вашего заказа №[ЗаказПокупателя.Номер] от [ЗаказПокупателя.Дата] изменилось на ""[ЗаказПокупателя.СостояниеЗаказа]"".
			|
			|С уважением, [ЗаказПокупателя.Ответственный].'");
		
		ФД = Новый ФорматированныйДокумент;
		ФД.Добавить(ТекстШаблона, Тип("ТекстФорматированногоДокумента"));
		
		ТекстШаблонаHTML	= "";
		КартинкиТекстаHTML	= Новый Структура;
		ФД.ПолучитьHTML(ТекстШаблонаHTML, КартинкиТекстаHTML);
		
		Шаблон = Справочники.ШаблоныСообщений.СоздатьЭлемент();
		Шаблон.УстановитьНовыйКод();
		Шаблон.Наименование			= НСтр("ru='Уведомление покупателя об изменении состояния заказа'");
		Шаблон.Автор = Пользователи.СсылкаНеуказанногоПользователя();
		Шаблон.Назначение = Метаданные.Документы.ЗаказПокупателя.Представление();
		Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании = Метаданные.Документы.ЗаказПокупателя.ПолноеИмя();
		Шаблон.ПредназначенДляSMS = Ложь;
		Шаблон.ПредназначенДляВводаНаОсновании = Истина;
		Шаблон.ПредназначенДляЭлектронныхПисем = Истина;
		Шаблон.ТекстШаблонаПисьма = ФД.ПолучитьТекст();
		Шаблон.ТекстШаблонаПисьмаHTML = ТекстШаблонаHTML;
		Шаблон.ТемаПисьма = НСтр("ru='Уведомление о вашем заказе №[ЗаказПокупателя.Номер]'");
		Шаблон.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		Шаблон.ТолькоДляАвтора = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Шаблон);
		
		// Действие "Отправить E-mail покупателю"
		Действие = Справочники.ДействияРабочегоПроцесса.СоздатьЭлемент();
		Действие.Наименование		= НСтр("ru='Отправить E-mail по основанию: Заказ покупателя'");
		Действие.ТипДействия		= Перечисления.ТипыДействийРабочегоПроцесса.ОтправитьEmail;
		Действие.ПолноеИмяОснования	= Метаданные.Документы.ЗаказПокупателя.ПолноеИмя();
		Действие.ШаблонСообщения	= Шаблон.Ссылка;
		
		НастройкаЗаполнения = Действие.НастройкиЗаполнения.Добавить();
		НастройкаЗаполнения.ИмяРеквизита		= "Контакт";
		НастройкаЗаполнения.ВариантЗаполнения	= "ИзОснования";
		НастройкаЗаполнения.Значение			= Новый ХранилищеЗначения(Метаданные.Документы.ЗаказПокупателя.Реквизиты.Контрагент.Имя);
		
		НастройкаЗаполнения = Действие.НастройкиЗаполнения.Добавить();
		НастройкаЗаполнения.ИмяРеквизита		= "ВидКонтактнойИнформации";
		НастройкаЗаполнения.ВариантЗаполнения	= "Указанный";
		НастройкаЗаполнения.Значение			= Новый ХранилищеЗначения(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		
		НастройкаЗаполнения = Действие.НастройкиЗаполнения.Добавить();
		НастройкаЗаполнения.ИмяРеквизита		= "УчетнаяЗапись";
		НастройкаЗаполнения.ВариантЗаполнения	= "Указанный";
		НастройкаЗаполнения.Значение			= Новый ХранилищеЗначения(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
		
		НастройкаЗаполнения = Действие.НастройкиЗаполнения.Добавить();
		НастройкаЗаполнения.ИмяРеквизита		= "Ответственный";
		НастройкаЗаполнения.ВариантЗаполнения	= "ИзОснования";
		НастройкаЗаполнения.Значение			= Новый ХранилищеЗначения(Метаданные.Документы.ЗаказПокупателя.Реквизиты.Ответственный.Имя);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Действие);
		
		// 2. Правило "Оповещение покупателя об изменении заказа"
		Правило = Справочники.ПравилаРабочегоПроцесса.СоздатьЭлемент();
		Правило.Наименование	= НСтр("ru='Оповещать покупателя об изменении состояния заказа'");
		Правило.Автор			= Пользователи.СсылкаНеуказанногоПользователя(Истина);
		Правило.Включено		= Ложь;
		Правило.Комментарий		= НСтр("ru='#Создано автоматически для быстрого старта'");
		Правило.СписокДействий	= Действие.Наименование;
		Правило.УсловиеСтарта	= Перечисления.СобытияРабочегоПроцесса.ИзменениеСостоянияЗаказаПокупателя;
		
		СтрокаДействий = Правило.Действия.Добавить();
		СтрокаДействий.Действие = Действие.Ссылка;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Правило);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось заполнить справочник ""Правила рабочего процесса"" по умолчанию по причине:
				|%1'"), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ПравилаРабочегоПроцесса, , ТекстСообщения);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли