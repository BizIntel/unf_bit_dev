&НаКлиенте
Перем КонтекстЭДОКлиент;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СохраненныеПараметры = ЗагрузитьСохраненныеПараметры();
	Если СохраненныеПараметры<> Неопределено Тогда
		Каталог = СохраненныеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииПослеПолученияКонтекста", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогСоун1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогСоун1НачалоВыбораЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресСоун1, ВыбранноеИмяФайлаСоун1, Истина, УникальныйИдентификатор); 
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСоунВНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогСоунВНачалоВыбораЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресСоунВ, ВыбранноеИмяФайлаСоунВ, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Импортировать(Команда)
	
	ИмпортироватьСправочники();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОткрытииПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Импортировать.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиИмпортировать()
	
	Если ЗначениеЗаполнено(АдресСоун1) и ЗначениеЗаполнено(АдресСоунВ) Тогда
		Элементы.Импортировать.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьСправочники()

	ПараметрыИмпорта = Новый Структура("Соун1, СоунВ");
	ПараметрыИмпорта.Соун1 = АдресСоун1;
	ПараметрыИмпорта.СоунВ = АдресСоунВ;
	
	ТекстСообщения = "";
	ИмпортироватьСправочникиСервер(ПараметрыИмпорта, ТекстСообщения);
	
	Если ТекстСообщения = "" Тогда
		СохранитьПараметрыЗагрузки(Каталог);
		ПоказатьПредупреждение(, "Классификатор успешно импортирован.");
		Закрыть();
	Иначе
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИмпортироватьСправочникиСервер(ПараметрыИмпорта, ТекстСообщения)
	
	Каталог = КаталогВременныхФайлов();
	
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог);
	
	ПолучитьИзВременногоХранилища(ПараметрыИмпорта.Соун1).Записать(Каталог + "SOUN1.DBF");
	ПолучитьИзВременногоХранилища(ПараметрыИмпорта.СоунВ).Записать(Каталог + "SOUN_V.DBF");
	
	// инициализируем объекты для работы с таблицами классификатора
	Соун1 = Новый XBase(Каталог + "SOUN1.DBF", , Истина);
	СоунВ = Новый XBase(Каталог + "SOUN_V.DBF", , Истина);
	
	// удаленные (помеченные как удаленные) записи таблиц учитывать не будем
	Соун1.ОтображатьУдаленные = Ложь;
	СоунВ.ОтображатьУдаленные = Ложь;
	
	Если Не Соун1.Открыта() Или Не СоунВ.Открыта() Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось открыть дбф файлы! Загрузка классификаторов отменена! '");
		Возврат;
	КонецЕсли;
	
	// определяем кодировку классификатора, инициализируем соответствующие свойства объектов
	КодировкаСОУН = ОпределитьКодировкуКлассификатора(СоунВ, Каталог);
	Соун1.Кодировка = КодировкаСОУН;
	СоунВ.Кодировка = КодировкаСОУН;
	
	НачатьТранзакцию();
	
	/////////////////////////////////////////////////////////////////////
	// ИМПОРТ СПРАВОЧНИКА "ВИДЫ НАЛОГОВЫХ ОРГАНОВ"
	
	// формируем соответствие "Код вида НО - Ссылка на вид НО"
	СоответствиеВидовНО = Новый Соответствие;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ВидыНалоговыхОрганов.Код,
						  |	ВидыНалоговыхОрганов.Ссылка
						  |ИЗ
						  |	Справочник.ВидыНалоговыхОрганов КАК ВидыНалоговыхОрганов");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодВидаНО = СокрЛП(Выборка.Код);
		Если КодВидаНО <> "" Тогда
			СоответствиеВидовНО.Вставить(КодВидаНО, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// прорисовываем форму прогресса
	ВсегоЗаписей = СоунВ.КоличествоЗаписей();
	
	// перебираем записи таблицы видов налоговых органов
	ПризнакНаличияЗаписи = СоунВ.Первая();
	Пока ПризнакНаличияЗаписи Цикл
		
		// считываем данные текущей записи таблицы
		КодВидаНО = СокрЛП(СоунВ.KOD);
		НаименованиеВидаНО = СокрЛП(СоунВ.NAIM);
		
		// находим вид налогового органа по коду вида в справочнике
		ЗаписьДляОбновленияСсылка = СоответствиеВидовНО[КодВидаНО];
		
		// если не нашли, то создаем новый элемент
		Если ЗаписьДляОбновленияСсылка = Неопределено Тогда
			ЗаписьДляОбновления = Справочники.ВидыНалоговыхОрганов.СоздатьЭлемент();
			ЗаписьДляОбновления.Код = КодВидаНО;
		Иначе
			ЗаписьДляОбновления = ЗаписьДляОбновленияСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		// инициализируем наименование вида налогового органа
		ЗаписьДляОбновления.Наименование = НаименованиеВидаНО;
		Попытка
			ЗаписьДляОбновления.Записать();
			СоответствиеВидовНО.Вставить(КодВидаНО, ЗаписьДляОбновления.Ссылка);
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при импорте справочника ""Виды налоговых органов"":
                     |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Импорт прерван.'"));
			Возврат;
		КонецПопытки;
		
		// позиционируемся на следующую запись в таблице
		ПризнакНаличияЗаписи = СоунВ.Следующая();
		
	КонецЦикла;
	
	// закрываем таблицу видов налоговых органов
	СоунВ.ЗакрытьФайл();
	
	/////////////////////////////////////////////////////////////////////
	// ИМПОРТ СПРАВОЧНИКА "НАЛОГОВЫЕ ОРГАНЫ"
	
	// считываем из базы и формируем соответствие "Код НО - Ссылка на НО"
	СоответствиеНО = Новый Соответствие;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	НалоговыеОрганы.Ссылка,
						  |	НалоговыеОрганы.Код
						  |ИЗ
						  |	Справочник.НалоговыеОрганы КАК НалоговыеОрганы");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодНО = СокрЛП(Выборка.Код);
		Если КодНО <> "" Тогда
			СоответствиеНО.Вставить(КодНО, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// прорисовываем форму прогресса
	КоличествоЗаписей = Соун1.КоличествоЗаписей();
	
	/////////////////////////////////////////////////////////////////////
	// Загружаем основную таблицу классификатора
	
	УжеНесуществующиеНО = Новый Массив;
	СсылкиНового = Новый Соответствие;
	СуществующиеНОКоды = Новый Массив;
	// Создаем временную таблицу для загрузки актуальных данных из СОУН
	ТаблицаНалоговыеОрганы = Новый ТаблицаЗначений;
	ТаблицаНалоговыеОрганы.Колонки.Добавить("Код");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("Адрес");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("АдресСайта");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("ИНН");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("КПП");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("Наименование");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("ПолноеНаименование");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("ПриемНалоговойОтчетности");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("Телефон");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("УчетНалогоплательщиков");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("Вид");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("АдресЭлектроннойПочты");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("Комментарий");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("Родитель");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("ДатаОкончания");
	ТаблицаНалоговыеОрганы.Колонки.Добавить("Правопреемник");
	СоответствиеКодСтрока = Новый Соответствие;
	НомерЗаписи = 1;
	ПризнакНаличияЗаписи = Соун1.Первая();
	Пока ПризнакНаличияЗаписи Цикл
		КодНО = СокрЛП(Соун1.KOD);
		СтрокаТаблицы = СоответствиеКодСтрока.Получить(КодНО);
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = ТаблицаНалоговыеОрганы.Добавить();
			СоответствиеКодСтрока.Вставить(КодНО, СтрокаТаблицы);
		Иначе
			// Если текущая запись в таблице - актуальная, 
			// или Запись из дбф более ранняя, чем в таблице, 
			// то читаем из файла дбф следующую запись
			ДатаОкончанияИзТаблицы = СтрокаТаблицы.ДатаОкончания;
			ДатаОкончанияИзДБФ = Соун1.DATAK;
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияИзТаблицы) 
				Или ( ЗначениеЗаполнено(ДатаОкончанияИзДБФ) 
				И СтрокаВДату(ДатаОкончанияИзТаблицы) > СтрокаВДату(ДатаОкончанияИзДБФ)) Тогда
				// переходим к следующей записи
				ПризнакНаличияЗаписи = Соун1.Следующая();
				НомерЗаписи          = НомерЗаписи + 1;
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.Код                      = КодНО;
		СтрокаТаблицы.Адрес                    = СокрЛП(Соун1.ADRES);
		СтрокаТаблицы.АдресСайта               = СокрЛП(Соун1.CITE);
		СтрокаТаблицы.ИНН                      = СокрЛП(Соун1.INN);
		СтрокаТаблицы.КПП                      = СокрЛП(Соун1.KPP);
		СтрокаТаблицы.Наименование             = СокрЛП(Соун1.NAIMK);
		СтрокаТаблицы.ПолноеНаименование       = СокрЛП(Соун1.NAIM); 
		СтрокаТаблицы.ПриемНалоговойОтчетности = (СокрЛП(Соун1.POTCHDOK) = "1");
		СтрокаТаблицы.Телефон                  = СокрЛП(Соун1.TEL);
		СтрокаТаблицы.УчетНалогоплательщиков   = (СокрЛП(Соун1.PUCH) = "1");
		СтрокаТаблицы.Вид                      = СоответствиеВидовНО[СокрЛП(Соун1.VID)];
		СтрокаТаблицы.АдресЭлектроннойПочты    = СокрЛП(Соун1.EMAIL);
		СтрокаТаблицы.Комментарий              = СокрЛП(Соун1.COMENT);
		СтрокаТаблицы.ДатаОкончания            = СокрЛП(Соун1.DATAK);
		Если ЗначениеЗаполнено(Соун1.KODP) Тогда
			KODP = СокрЛП(Соун1.KODP);
			Если СтрДлина(KODP)=4 Тогда
				СтрокаТаблицы.Родитель = KODP;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
				СтрокаТаблицы.Родитель = Прав(KODP,4);
			КонецЕсли;
			СтрокаТаблицы.Правопреемник = Истина;
		Иначе
			СтрокаТаблицы.Родитель = СокрЛП(Соун1.KODV);
			СтрокаТаблицы.Правопреемник = Ложь;
		КонецЕсли;
		
		// переходим к следующей записи
		ПризнакНаличияЗаписи				= Соун1.Следующая();
		НомерЗаписи							= НомерЗаписи + 1;
		
	КонецЦикла;
	
	// закрываем основную таблицу классификатора
	Соун1.ЗакрытьФайл();
	
	// Загружаем из временной таблицы в справочник
	Для Каждого СтрокаТаблицы Из ТаблицаНалоговыеОрганы Цикл
		
		КодНО = СокрЛП(СтрокаТаблицы.Код);
		
		// определяемся с объектом, в которую будем писать
		ТекНОСсылка = СоответствиеНО[КодНО];
		Если ТекНОСсылка = Неопределено Тогда
			
			ТекНООбъект = Справочники.НалоговыеОрганы.СоздатьЭлемент();
			ТекНООбъект.Код = КодНО;
			
			СсылкаНового = СсылкиНового[ТекНООбъект.Код];
			Если СсылкаНового <> Неопределено Тогда
				ТекНООбъект.УстановитьСсылкуНового(СсылкаНового);
			КонецЕсли;
			
		Иначе
			ТекНООбъект = ТекНОСсылка.ПолучитьОбъект();
			ТекНООбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		// инициализируем свойства записи
		ТекНООбъект.Код                      = СтрокаТаблицы.Код;
		ТекНООбъект.Адрес                    = СтрокаТаблицы.Адрес;
		ТекНООбъект.АдресСайта               = СтрокаТаблицы.АдресСайта;
		ТекНООбъект.ИНН                      = СтрокаТаблицы.ИНН;
		ТекНООбъект.КПП                      = СтрокаТаблицы.КПП;
		ТекНООбъект.Наименование             = СтрокаТаблицы.Наименование;
		ТекНООбъект.ПолноеНаименование       = СтрокаТаблицы.ПолноеНаименование;
		ТекНООбъект.ПриемНалоговойОтчетности = СтрокаТаблицы.ПриемНалоговойОтчетности;
		ТекНООбъект.Телефон                  = СтрокаТаблицы.Телефон;
		ТекНООбъект.УчетНалогоплательщиков   = СтрокаТаблицы.УчетНалогоплательщиков;
		ТекНООбъект.Вид                      = СтрокаТаблицы.Вид;
		ТекНООбъект.АдресЭлектроннойПочты    = СтрокаТаблицы.АдресЭлектроннойПочты;
		ТекНООбъект.Комментарий              = СтрокаТаблицы.Комментарий;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда
			
			// если запись недействующая
			ТекНООбъект.ПометкаУдаления = Истина;
			
		КонецЕсли;
		
		// определяем родителя
		КодРодителя = СтрокаТаблицы.Родитель;
		Если ЗначениеЗаполнено(КодРодителя) Тогда
			
			ТекРодитель = СоответствиеНО[КодРодителя];
			Если ТекРодитель = Неопределено Тогда
				
				СсылкаНовогоРодителя = СсылкиНового[КодРодителя];
				Если СсылкаНовогоРодителя = Неопределено Тогда
					СсылкаНовогоРодителя = Справочники.НалоговыеОрганы.ПолучитьСсылку();
					СсылкиНового.Вставить(КодРодителя, СсылкаНовогоРодителя);
				КонецЕсли;
				ТекНООбъект.Родитель = СсылкаНовогоРодителя;
				
			Иначе
				ТекНООбъект.Родитель = ТекРодитель;
			КонецЕсли;
			
		Иначе
			ТекНООбъект.Родитель = Справочники.НалоговыеОрганы.ПустаяСсылка();
		КонецЕсли;
		
		// пишем в базу
		ТекНООбъект.Записать();
		// дополняем соответствие кодов НО ссылкам
		СоответствиеНО.Вставить(ТекНООбъект.Код, ТекНООбъект.Ссылка);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьКодировкуКлассификатора(ДБФ , Каталог, ЭтоТекстовыйФайл = Ложь)
	
	// Исключение из стандарта 456.
	ая = "абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	
	ПопаданияАНСИ = 0;
	ПопаданияОЕМ = 0;
	
	Инд = 1;
	ДБФ.Кодировка = КодировкаXBase.ANSI;
	ДБФ.Первая();
	Пока ДБФ.Следующая() Цикл
		Если Инд = 11 Тогда
			Прервать;
		КонецЕсли;
		ТекНаименование = СокрЛП(ДБФ.NAIM);
		ДлинаСтроки = СтрДлина(ТекНаименование);
		Для ИндСимв = 1 По ДлинаСтроки Цикл
			ТекСимв = Сред(ТекНаименование, ИндСимв, 1);
			ПопаданияАНСИ = ПопаданияАНСИ + Число(СтрНайти(ая, ТекСимв) <> 0);
		КонецЦикла;
		Инд = Инд + 1;
	КонецЦикла;
	
	Инд = 1;
	ДБФ.Кодировка = КодировкаXBase.OEM;
	ДБФ.Первая();
	Пока ДБФ.Следующая() Цикл
		Если Инд = 11 Тогда
			Прервать;
		КонецЕсли;
		ТекНаименование = СокрЛП(ДБФ.NAIM);
		ДлинаСтроки = СтрДлина(ТекНаименование);
		Для ИндСимв = 1 По ДлинаСтроки Цикл
			ТекСимв = Сред(ТекНаименование, ИндСимв, 1);
			ПопаданияОЕМ = ПопаданияОЕМ + Число(СтрНайти(ая, ТекСимв) <> 0);
		КонецЦикла;
		Инд = Инд + 1;
	КонецЦикла;
	Возврат ?(ПопаданияАНСИ > ПопаданияОЕМ, КодировкаXBase.ANSI, КодировкаXBase.OEM);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьПараметрыЗагрузки(Каталог)
	
	ХранилищеОбщихНастроек.Сохранить("ПараметрыЗагрузкиНалоговыхОрганов", "Каталог", Каталог);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьСохраненныеПараметры()
	
	Возврат ХранилищеОбщихНастроек.Загрузить("ПараметрыЗагрузкиНалоговыхОрганов", "Каталог");
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаВДату(Строка)
	
	Строка =СокрЛП(Строка);
	Если СтрДлина(Строка) = 10 Тогда
		Возврат Дата(Число(СокрЛП(Сред(Строка, 7, 4))),
		Число(СокрЛП(Сред(Строка, 4, 2))),
		Число(СокрЛП(Сред(Строка, 1, 2))));
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура КаталогСоун1НачалоВыбораЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранноеИмяФайлаСоун1 = ВыбранноеИмяФайла;
	АдресСоун1 = Адрес;
	
	Если НЕ КонтекстЭДОКлиент.ВыбранКорректныйФайл(ВыбранноеИмяФайлаСоун1, "SOUN1.DBF") Тогда
		ВыбранноеИмяФайлаСоун1 = "";
		АдресСоун1 = "";
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный файл не является файлом Soun1.dbf'"));
	КонецЕсли;
	
	УстановитьДоступностьКнопкиИмпортировать();

КонецПроцедуры

&НаКлиенте
Процедура КаталогСоунВНачалоВыбораЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	ВыбранноеИмяФайлаСоунВ = ВыбранноеИмяФайла;
	АдресСоунВ = Адрес;
	
	Если Не КонтекстЭДОКлиент.ВыбранКорректныйФайл(ВыбранноеИмяФайлаСоунВ, "SOUN_V.DBF") Тогда
		ВыбранноеИмяФайлаСоунВ = "";
		АдресСоунВ = "";
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный файл не является файлом Soun_v.dbf'"));
	КонецЕсли;
	УстановитьДоступностьКнопкиИмпортировать();

КонецПроцедуры

#КонецОбласти

