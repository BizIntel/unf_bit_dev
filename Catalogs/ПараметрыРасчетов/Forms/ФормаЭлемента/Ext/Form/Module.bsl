
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УправлениеСвойствомТолькоПросмотр()
	
	// Разделенным пользователям нельзя редактировать запрос
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запрос", "ТолькоПросмотр",				НЕ ДоступныПроизвольныеЗапросы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПараметрыЗапроса", "ТолькоПросмотр",	НЕ ДоступныПроизвольныеЗапросы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроизвольныйЗапрос", "ТолькоПросмотр",	НЕ ДоступныПроизвольныеЗапросы);
	
КонецПроцедуры

&НаСервере
// Процедура управляет значениями видимости и доступности элементов формы
//
//
Процедура УправлениеСвойствомДоступность()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Источник", "Доступность", ДоступныПроизвольныеЗапросы И НЕ Объект.ПроизвольныйЗапрос);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроизвольныйЗапрос", "Доступность",	ДоступныПроизвольныеЗапросы И ПустаяСтрока(Объект.ИмяИсточника));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РедактироватьЗапрос", "Доступность", Объект.ПроизвольныйЗапрос);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонструкторЗапроса", "Доступность", Объект.ПроизвольныйЗапрос И Элементы.РедактироватьЗапрос.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Запрос", "Доступность", Объект.ПроизвольныйЗапрос И Элементы.РедактироватьЗапрос.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПараметрыЗапроса", "Доступность", Объект.ПроизвольныйЗапрос И Элементы.РедактироватьЗапрос.Пометка);
	
	ПараметрПоИсточнику = НЕ ПустаяСтрока(Объект.ИмяИсточника);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПериодыОтбораДанных", "Доступность", 						ПараметрПоИсточнику);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Показатели", "Доступность", 								ПараметрПоИсточнику);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборДанныхНастройкиОтбор", "Доступность", 					ПараметрПоИсточнику);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборДанныхНастройкиОтборКоманднаяПанель", "Доступность",	ПараметрПоИсточнику);
	
КонецПроцедуры // УправлениеСвойствомДоступность()

&НаКлиенте
// Процедура отвечает за установку текущих страниц управления видимостью
// в зависимости от значения реквизита элемента справочника "ЗадаватьЗначениеПриРасчетеЗП"
//
Процедура УстановитьТекущуюСтраницуВидимостиНаКлиенте()
	
	Элементы.УправлениеВидимостью.ТекущаяСтраница = 
		?(Объект.ЗадаватьЗначениеПриРасчетеЗП, Элементы.ВидимостьВыключена, Элементы.ВидимостьВключена);
	
КонецПроцедуры // УстановитьТекущуюСтраницуВидимостиНаКлиенте()

&НаКлиенте
// Процедура добавляет строку в таблицу параметров запроса
// Используется при заполнении элементов по шаблону
//
Процедура ДобавитьСтрокуВТаблицуПараметровЗапроса(ИмяПараметра, ПредставлениеПараметра)
	
	НовыйПараметрЗапроса 				 = Объект.ПараметрыЗапроса.Добавить();
	НовыйПараметрЗапроса.Имя 			 = ИмяПараметра;
	НовыйПараметрЗапроса.Представление 	 = ПредставлениеПараметра;
	
КонецПроцедуры //ДобавитьСтрокуВТаблицуПараметровЗапроса()

&НаКлиенте
// Процедура заполняет реквизиты по шаблону.
//
Процедура ЗаполнитьПоШаблону(ДополнительныеПараметры)
	
	ИмяШаблона = ДополнительныеПараметры.ИмяШаблона;
	
	// Очистка
	Объект.ИмяИсточника = "";
	Объект.ПредставлениеИсточника = "";
	Объект.Запрос = "";
	Объект.ПериодыОтбораДанных.Очистить();
	Объект.Показатели.Очистить();
	Объект.ПараметрыЗапроса.Очистить();
	
	// Заполнение
	Если ИмяШаблона = "ФиксированнаяСумма" Тогда
		
		// Фиксированная сумма
		Объект.Наименование 			= "Фиксированная сумма";
		Объект.Идентификатор 			= "ФиксированнаяСумма";
		Объект.ПроизвольныйЗапрос		= Ложь;
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		
	ИначеЕсли ИмяШаблона = "НормаДней" Тогда

		// Норма дней
		Объект.Наименование 			= "Норма дней";
		Объект.Идентификатор 			= "НормаДней";
		Объект.ПроизвольныйЗапрос		= Истина;
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		ДобавитьСтрокуВТаблицуПараметровЗапроса("Организация", "Организация");
		ДобавитьСтрокуВТаблицуПараметровЗапроса("ПериодРегистрации", "Период регистрации");
		
		Объект.Запрос = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК НормаДней
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		
	ИначеЕсли ИмяШаблона = "НормаЧасов" Тогда

		// Норма часов
		Объект.Наименование				= "Норма часов";
		Объект.Идентификатор 			= "НормаЧасов";
		Объект.ПроизвольныйЗапрос		= Истина;
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		ДобавитьСтрокуВТаблицуПараметровЗапроса("Организация", "Организация");
		ДобавитьСтрокуВТаблицуПараметровЗапроса("ПериодРегистрации", "Период регистрации");
		
		Объект.Запрос 			 = 
		"ВЫБРАТЬ
		|	СУММА(8) КАК НормаЧасов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО КалендарныеГрафики.Календарь = Организации.ПроизводственныйКалендарь
		|			И (Организации.Ссылка = &Организация)
		|ГДЕ
		|	КалендарныеГрафики.Год = ГОД(&ПериодРегистрации)
		|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И КалендарныеГрафики.ДеньВключенВГрафик";
		
	ИначеЕсли ИмяШаблона = "ОтработаноДней" Тогда

		// Отработано дней
		Объект.Наименование 		= "Отработано дней";
		Объект.Идентификатор		= "ОтработаноДней";
		Объект.ПроизвольныйЗапрос	= Ложь;
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		
	ИначеЕсли ИмяШаблона = "ОтработаноЧасов" Тогда

		// Отработано часов
		Объект.Наименование 		= "Отработано часов";
		Объект.Идентификатор 		= "ОтработаноЧасов";
		Объект.ПроизвольныйЗапрос	= Ложь;
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		
	ИначеЕсли ИмяШаблона = "ТарифнаяСтавка" Тогда

		// Тарифная ставка
		Объект.Наименование 		= "Тарифная ставка";
		Объект.Идентификатор 		= "ТарифнаяСтавка";
		Объект.ПроизвольныйЗапрос	= Ложь;
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		
	ИначеЕсли ИмяШаблона = "ОтработаноЧасовПоЗаданиям" Тогда

		// Отработано по заданиям
		Объект.Наименование			= "Отработано часов по заданиям";
		Объект.Идентификатор 		= "ОтработаноЧасовПоЗаданиям";
		Объект.ПроизвольныйЗапрос	= Истина;
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		ДобавитьСтрокуВТаблицуПараметровЗапроса("НачалоПериода", "Начало периода");
		ДобавитьСтрокуВТаблицуПараметровЗапроса("КонецПериода", "Конец периода");
		ДобавитьСтрокуВТаблицуПараметровЗапроса("Сотрудник", "Сотрудник");
		ДобавитьСтрокуВТаблицуПараметровЗапроса("Организация", "Организация");
		ДобавитьСтрокуВТаблицуПараметровЗапроса("Подразделение", "Подразделение");
		
		Объект.Запрос =
		"ВЫБРАТЬ
		|	Источник.ЗагрузкаФактОборот
		|ИЗ
		|	РегистрНакопления.ЗаданияНаРаботу.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК Источник
		|ГДЕ
		|	Источник.Сотрудник = &Сотрудник
		|	И Источник.СтруктурнаяЕдиница = &Подразделение
		|	И Источник.Организация = &Организация";
		
	ИначеЕсли ИмяШаблона = "СуммуПродажПоОтветственному" Тогда
		
		
		Объект.Наименование 				= "Сумму продаж по ответственному";
		Объект.Идентификатор 				= "СуммуПродажПоОтветственному"; 
		Объект.ПроизвольныйЗапрос 			= Истина;
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "ВалютаУчетаКурс";
		НовыйПараметрЗапроса.Представление 	= "ВалютаУчетаКурс";
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "ВалютаДокументаКратность";
		НовыйПараметрЗапроса.Представление 	= "ВалютаДокументаКратность";
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "ВалютаДокументаКурс";
		НовыйПараметрЗапроса.Представление 	= "ВалютаДокументаКурс";
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "ВалютаУчетаКратность";
		НовыйПараметрЗапроса.Представление 	= "ВалютаУчетаКратность";
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "НачалоПериода";
		НовыйПараметрЗапроса.Представление 	= "НачалоПериода";
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "КонецПериода";
		НовыйПараметрЗапроса.Представление 	= "КонецПериода";
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "Организация";
		НовыйПараметрЗапроса.Представление 	= "Организация";
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "Подразделение";
		НовыйПараметрЗапроса.Представление 	= "Подразделение";
		
		НовыйПараметрЗапроса 				= Объект.ПараметрыЗапроса.Добавить();
		НовыйПараметрЗапроса.Имя 			= "Сотрудник";
		НовыйПараметрЗапроса.Представление 	= "Сотрудник";
		
		Объект.Запрос = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(Продажи.Сумма * &ВалютаУчетаКурс * &ВалютаДокументаКратность / (&ВалютаДокументаКурс * &ВалютаУчетаКратность), 0)) КАК СуммаПродаж
		|ИЗ
		|	РегистрНакопления.Продажи КАК Продажи
		|ГДЕ
		|	Продажи.Сумма >= 0
		|	И Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Продажи.Организация = &Организация
		|	И Продажи.Подразделение = &Подразделение
		|	И Продажи.Ответственный = &Сотрудник
		|	И (ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.АктВыполненныхРабот) ССЫЛКА Документ.АктВыполненныхРабот
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказПокупателя) ССЫЛКА Документ.ЗаказПокупателя
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОПереработке) ССЫЛКА Документ.ОтчетОПереработке
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ОтчетОРозничныхПродажах) ССЫЛКА Документ.ОтчетОРозничныхПродажах
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РасходнаяНакладная) ССЫЛКА Документ.РасходнаяНакладная
		|			ИЛИ ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЧекККМ) ССЫЛКА Документ.ЧекККМ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Продажи.Ответственный";
		
	КонецЕсли;
	
	УправлениеСвойствомДоступность();
	
	УстановитьТекущуюСтраницуВидимостиНаКлиенте();
	
КонецПроцедуры //ЗаполнитьПоШаблону()

&НаСервере
// Функция составляет строку условия для запроса
//
Функция ПолучитьВидСравнения(ИмяПоля, ВидСравненияОтбора)

    Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно  Тогда
		Возврат "Источник." + ИмяПоля + " = &" + СтрЗаменить(ИмяПоля, ".", "");

	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат "Источник." + ИмяПоля + " > &" + СтрЗаменить(ИмяПоля, ".", "");
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно  Тогда
		Возврат "Источник." + ИмяПоля + " >= &" + СтрЗаменить(ИмяПоля, ".", "");
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии 
		ИЛИ  ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Возврат "Источник." + ИмяПоля + " В ИЕРАРХИИ (&" + СтрЗаменить(ИмяПоля, ".", "") + ")";
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке  Тогда
		Возврат "Источник." + ИмяПоля + " В (&" + СтрЗаменить(ИмяПоля, ".", "") + ")";
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Меньше  Тогда
		Возврат "Источник." + ИмяПоля + " < &" + СтрЗаменить(ИмяПоля, ".", "");
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно  Тогда         
		Возврат "Источник." + ИмяПоля + " <= &" + СтрЗаменить(ИмяПоля, ".", "");
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке  Тогда
		Возврат "НЕ Источник." + ИмяПоля + " В (&" + СтрЗаменить(ИмяПоля, ".", "") + ")";
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии 
		ИЛИ ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат "НЕ Источник." + ИмяПоля + " В ИЕРАРХИИ (&" + СтрЗаменить(ИмяПоля, ".", "") + ")";
	
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно  Тогда
		Возврат "Источник." + ИмяПоля + " <> &" + СтрЗаменить(ИмяПоля, ".", "");
	
	КонецЕсли; 

КонецФункции // ()

&НаСервере
// Процедура открывает конструктор запроса.
//
Процедура СформироватьЗапросЗаполнитьПараметры()

	СписокПолей = "";
	Для каждого Поле Из Объект.Показатели Цикл
		Если Поле.Использование Тогда
			СписокПолей = СписокПолей + ?(СписокПолей = "", "", ",
 																	|     ") + "СУММА(Источник." + Поле.Имя + ")";
		КонецЕсли; 
	КонецЦикла; 

    СписокУсловий = "";
	Для каждого ЭлементОтбора Из ОтборДанных.Настройки.Отбор.Элементы Цикл
		СписокУсловий = СписокУсловий + ?(СписокУсловий = "", "", "
																	|	И ") + ПолучитьВидСравнения(ЭлементОтбора.ЛевоеЗначение, ЭлементОтбора.ВидСравнения);
	КонецЦикла;

    ТекстЗапроса = "ВЫБРАТЬ 
					|	"+ СписокПолей + "
					|ИЗ 
					|	"+ Объект.ИмяИсточника + " КАК Источник" + ?(СписокУсловий = "", "", "
					|ГДЕ 
					|	"+ СписокУсловий);
    
	Объект.Запрос = ТекстЗапроса;

	Объект.ПараметрыЗапроса.Очистить();

	Для каждого СтрокаТЧ Из Объект.ПериодыОтбораДанных Цикл
		Если Объект.ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", СтрокаТЧ.ИмяДатаГраницы)).Количество() = 0 Тогда
			НоваяСтрока = Объект.ПараметрыЗапроса.Добавить();
			НоваяСтрока.Имя = СтрокаТЧ.ИмяДатаГраницы;
			НоваяСтрока.Представление = СтрокаТЧ.ИмяДатаГраницы;
			НоваяСтрока.Значение = СтрокаТЧ.Период;
		КонецЕсли; 
	КонецЦикла;
		 
	Для каждого ЭлементОтбора Из ОтборДанных.Настройки.Отбор.Элементы Цикл
		Если Объект.ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", Строка(ЭлементОтбора.ЛевоеЗначение))).Количество() = 0 Тогда
			НоваяСтрока = Объект.ПараметрыЗапроса.Добавить();
			НоваяСтрока.Имя = ЭлементОтбора.ЛевоеЗначение;
			НоваяСтрока.Представление = ЭлементОтбора.ЛевоеЗначение;
			НоваяСтрока.ВидСравнения = ЭлементОтбора.ВидСравнения;
			НоваяСтрока.Значение = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли; 
	КонецЦикла;
                                                                  
КонецПроцедуры

&НаСервере
// Функция заполняет список параметров по тексту запроса
//
Процедура ЗаполнитьПараметрыПоЗапросу()
	
	Объект.ПараметрыЗапроса.Очистить();
	ЗапросСтрока = Объект.Запрос;
	Энтер = Символ(10);
	НомерПодстроки = СтрНайти(ЗапросСтрока, "&");
	Пока НомерПодстроки > 0 Цикл
		
		ЗапросСтрока = Прав(ЗапросСтрока, (СтрДлина(ЗапросСтрока)-НомерПодстроки));
		
		НомерЗапятой = СтрНайти(ЗапросСтрока, ",");
		НомерПробела = СтрНайти(ЗапросСтрока, " ");
		НомерЭнтер	 = СтрНайти(ЗапросСтрока, Энтер);
		НомерСкобки	 = СтрНайти(ЗапросСтрока, ")");
		Если НомерЗапятой = 0 И НомерПробела = 0 И НомерЭнтер = 0 И НомерСкобки = 0 Тогда
			ИмяПараметра = ЗапросСтрока;
		Иначе
			Если НомерЗапятой = 0 Тогда
				НомерЗапятой = 9000000;
			КонецЕсли; 
			Если НомерПробела = 0 Тогда
				НомерПробела = 9000000;
			КонецЕсли;
			Если НомерЭнтер = 0 Тогда
				НомерЭнтер = 9000000;
			КонецЕсли;
			Если НомерСкобки = 0 Тогда
				НомерСкобки = 9000000;
			КонецЕсли;
			КонецПараметра = МИН(НомерЗапятой, НомерПробела, НомерЭнтер, НомерСкобки);
			ИмяПараметра = Лев(ЗапросСтрока, КонецПараметра - 1);
		КонецЕсли;
		
		Если Объект.ПараметрыЗапроса.НайтиСтроки(Новый Структура("Имя", ИмяПараметра)).Количество() = 0 Тогда
			НоваяСтрока = Объект.ПараметрыЗапроса.Добавить();
			НоваяСтрока.Имя = ИмяПараметра;
			НоваяСтрока.Представление = ИмяПараметра;
		КонецЕсли;
		
		НомерПодстроки = СтрНайти(ЗапросСтрока, "&");
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрыПоЗапросу()

&НаСервере
// Функция проверяет корректность запроса.
//
Функция ЗапросКорректный()
	
	Если ПустаяСтрока(Объект.Запрос) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Попытка
		
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст = Объект.Запрос;
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		Если ПостроительЗапроса.Измерения.Количество() > 0 Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Запрос не должен содержать итоги!'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли; 
		
		Если ПостроительЗапроса.ВыбранныеПоля.Количество() > 1 Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Запрос должен содержать не более одного показателя!'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции // ПроверкаЗапроса()

&НаКлиенте
// Процедра формирует идентификатор параметра расчетов.
//    
Процедура ПолучитьИдентификатор(СтрНаименование)
     
	Разделители     =  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	 
	Объект.Идентификатор = "";
	БылСпецСимвол = Ложь;
	Для НомСимвола = 1 По СтрДлина(СтрНаименование) Цикл
	  	Символ = Сред(СтрНаименование,НомСимвола,1);
		Если СтрНайти(Разделители, Символ) <> 0 Тогда
		   БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
		   БылСпецСимвол = Ложь;
		   Объект.Идентификатор = Объект.Идентификатор + ВРег(Символ);
		Иначе
		   Объект.Идентификатор = Объект.Идентификатор + Символ;          
		КонецЕсли;

	КонецЦикла;
          
КонецПроцедуры //ПолучитьИдентификатор

&НаСервере
// Функция проверяет дублирование идентификатора показателя в ИБ.
//     
Функция ПроверкаНаДублированиеИдентификатора(Отказ)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|     ПараметрыРасчетов.Идентификатор
	|ИЗ
	|     Справочник.ПараметрыРасчетов КАК ПараметрыРасчетов
	|ГДЕ
	|     ПараметрыРасчетов.Идентификатор = &Идентификатор
	|     И ПараметрыРасчетов.Ссылка <> &Ссылка");
	 
	Запрос.УстановитьПараметр("Идентификатор", Объект.Идентификатор);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	 
	Выборка = Запрос.Выполнить().Выбрать();
	Отказ = Выборка.Количество() > 0;
	 
	Если Отказ Тогда
	
		ТекстОшибки = НСтр("ru = 'Параметр расчета с таким наименованием уже существует!
			|Измените наименование параметра'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Наименование");
		
	КонецЕсли;
	 
	Возврат Отказ;
     
КонецФункции // ПроверкаНаДублированиеИдентификатора()

&НаСервере
// Функция проверяет, выбран ли показатель.
//
Функция ПроверкаНаВыборПоказателя()

	Для каждого СтрокаТЧ Из Объект.Показатели Цикл
		Если СтрокаТЧ.Использование Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 
	 
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = НСтр("ru = 'Не выбран показатель!'");
	Сообщение.Сообщить();

	Возврат Истина;
     
КонецФункции // ПроверкаНаВыборПоказателя()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаСервере
// Процедура заполняет показатели и периоды отбора данных регистра.
//
Процедура ЗаполнитьПоказателиИПериодыОтбораДанныхИсточника()

	ВидИсточникаПоМетаданным = Лев(Объект.ИмяИсточника, СтрНайти(Объект.ИмяИсточника,".")-1);

	ТаблицаИсточника = СтрЗаменить(Объект.ИмяИсточника, ВидИсточникаПоМетаданным + "." , "");
	
    Периодический = Истина;
	Сч = СтрНайти(ТаблицаИсточника,".");
	
	Если Сч > 0 Тогда	
		ИмяИсточникаПоМетаданным = Лев(ТаблицаИсточника, Сч - 1);

	ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника, "движения:") > 0 Тогда
		ИмяИсточникаПоМетаданным = ТаблицаИсточника;

	Иначе
		ИмяИсточникаПоМетаданным = ТаблицаИсточника;
		Периодический = Ложь;  
			
	КонецЕсли;

    МетаданныеИсточник = Метаданные[СтрЗаменить(ВидИсточникаПоМетаданным, "Регистр", "Регистры")][ИмяИсточникаПоМетаданным];

    Для каждого Ресурс Из МетаданныеИсточник.Ресурсы Цикл

		// 1. Регистр накопления.
		Если СтрНайти(Объект.ИмяИсточника, "РегистрНакопления")>0 Тогда

			Если СтрНайти(Объект.ПредставлениеИсточника,": обороты")  Тогда

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление 	= Ресурс.Синоним + ": оборот";
				НовыйПоказатель.Имя 			= Ресурс.Имя + "Оборот";
				НовыйПоказатель.Использование 	= Ложь;

			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника, ": остатки и обороты") > 0 Тогда

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление 	= Ресурс.Синоним + ": начальный остаток";
				НовыйПоказатель.Имя 			= Ресурс.Имя + "НачальныйОстаток";
				НовыйПоказатель.Использование 	= Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление 	= Ресурс.Синоним + ": приход";
				НовыйПоказатель.Имя 			= Ресурс.Имя + "Приход";
				НовыйПоказатель.Использование 	= Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление 	= Ресурс.Синоним + ": оборот";
				НовыйПоказатель.Имя 			= Ресурс.Имя + "Оборот";
				НовыйПоказатель.Использование 	= Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление 	= Ресурс.Синоним + ": расход";
				НовыйПоказатель.Имя				= Ресурс.Имя + "Расход";
				НовыйПоказатель.Использование	= Ложь;
                 
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление	= Ресурс.Синоним + ": конечный остаток";
				НовыйПоказатель.Имя				= Ресурс.Имя + "КонечныйОстаток";
				НовыйПоказатель.Использование	= Ложь;

			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника, ": остатки") > 0 Тогда

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление	= Ресурс.Синоним + ": остаток";
				НовыйПоказатель.Имя				= Ресурс.Имя + "Остаток";
				НовыйПоказатель.Использование	= Ложь;
				
			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника, "движения: приход") > 0 Тогда
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление	= Ресурс.Синоним + ": приход";
				НовыйПоказатель.Имя				= Ресурс.Имя;
				НовыйПоказатель.Использование	= Ложь;
				
			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника, "движения: расход") > 0 Тогда
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление 	= Ресурс.Синоним + ": расход";
				НовыйПоказатель.Имя				= Ресурс.Имя;
				НовыйПоказатель.Использование	= Ложь;
				
			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника, "движения: оборот") > 0 Тогда
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление 	= Ресурс.Синоним + ": оборот";
				НовыйПоказатель.Имя				= Ресурс.Имя;
				НовыйПоказатель.Использование	= Ложь;
							
			КонецЕсли;

		// 2. Регистр сведений.
		ИначеЕсли СтрНайти(Объект.ИмяИсточника, "РегистрСведений") > 0 Тогда

			ТипыРесурса = Ресурс.Тип.Типы();

			Если ТипыРесурса.Количество() = 1 И ТипыРесурса[0] = Тип("Число") Тогда

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление	= Ресурс.Синоним;
				НовыйПоказатель.Имя				= Ресурс.Имя;
				НовыйПоказатель.Использование	= Ложь;

			КонецЕсли;

		// 3. Регистр бухгалтерии.	
        ИначеЕсли СтрНайти(Объект.ИмяИсточника,"РегистрБухгалтерии") > 0 Тогда

			Если СтрНайти(Объект.ПредставлениеИсточника,": обороты с корреспонденцией") > 0  Тогда
											
				Если НЕ Ресурс.ПризнакУчета = Неопределено Тогда
					
					НовыйПоказатель = Объект.Показатели.Добавить();
					НовыйПоказатель.Представление = Ресурс.Имя + ": оборот Дт";
					НовыйПоказатель.Имя = Ресурс.Имя + "ОборотДт";
					НовыйПоказатель.Использование = Ложь;
					
					НовыйПоказатель = Объект.Показатели.Добавить();
					НовыйПоказатель.Представление = Ресурс.Имя + ": оборот Кт";
					НовыйПоказатель.Имя = Ресурс.Имя + "ОборотКт";
					НовыйПоказатель.Использование = Ложь;
					
				Иначе
					
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": оборот";
				НовыйПоказатель.Имя = Ресурс.Имя + "Оборот";
				НовыйПоказатель.Использование = Ложь;
		
				КонецЕсли;

			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника,": остатки и обороты") > 0 Тогда

                НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": конечный остаток";
				НовыйПоказатель.Имя = Ресурс.Имя + "КонечныйОстаток";
				НовыйПоказатель.Использование = Ложь;

                НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": конечный остаток Дт";
				НовыйПоказатель.Имя = Ресурс.Имя + "КонечныйОстатокДт";
				НовыйПоказатель.Использование = Ложь;

                НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": конечный остаток Кт";
				НовыйПоказатель.Имя = Ресурс.Имя + "КонечныйОстатокКт";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": конечный развернутый остаток Дт";
				НовыйПоказатель.Имя = Ресурс.Имя + "КонечныйРазвернутыйОстатокДт";
				НовыйПоказатель.Использование = Ложь;

                НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": конечный развернутый остаток Кт";
				НовыйПоказатель.Имя = Ресурс.Имя + "КонечныйРазвернутыйОстатокКт";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": начальный остаток";
				НовыйПоказатель.Имя = Ресурс.Имя + "НачальныйОстаток";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": начальный остаток Дт";
				НовыйПоказатель.Имя = Ресурс.Имя + "НачальныйОстатокДт";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": начальный остаток Кт";
				НовыйПоказатель.Имя = Ресурс.Имя + "НачальныйОстатокКт";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя+": начальный развернутый остаток Дт";
				НовыйПоказатель.Имя = Ресурс.Имя + "НачальныйРазвернутыйОстатокДт";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": начальный развернутый остаток Кт";
				НовыйПоказатель.Имя = Ресурс.Имя + "НачальныйРазвернутыйОстатокКт";
				НовыйПоказатель.Использование = Ложь;
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": оборот";
				НовыйПоказатель.Имя = Ресурс.Имя + "Оборот";
				НовыйПоказатель.Использование = Ложь;
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": оборот Дт";
				НовыйПоказатель.Имя = Ресурс.Имя + "ОборотДт";
				НовыйПоказатель.Использование = Ложь;
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": оборот Кт";
				НовыйПоказатель.Имя = Ресурс.Имя + "ОборотКт";
				НовыйПоказатель.Использование = Ложь;
                            			
			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника,": остатки") > 0 Тогда

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": остаток";
				НовыйПоказатель.Имя = Ресурс.Имя+"Остаток";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": остаток Дт";
				НовыйПоказатель.Имя = Ресурс.Имя + "ОстатокДт";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": остаток Кт";
				НовыйПоказатель.Имя = Ресурс.Имя + "ОстатокКт";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": развернутый остаток Дт";
				НовыйПоказатель.Имя = Ресурс.Имя + "РазвернутыйОстатокДт";
				НовыйПоказатель.Использование = Ложь;

				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": развернутый остаток Кт";
				НовыйПоказатель.Имя = Ресурс.Имя + "РазвернутыйОстатокКт";
				НовыйПоказатель.Использование = Ложь;
				
			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника,": обороты") > 0 Тогда
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": оборот";
				НовыйПоказатель.Имя = Ресурс.Имя + "Оборот";
				НовыйПоказатель.Использование = Ложь;
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": оборот Дт";
				НовыйПоказатель.Имя = Ресурс.Имя + "ОборотДт";
				НовыйПоказатель.Использование = Ложь;
				
				НовыйПоказатель = Объект.Показатели.Добавить();
				НовыйПоказатель.Представление = Ресурс.Имя + ": оборот Кт";
				НовыйПоказатель.Имя = Ресурс.Имя + "ОборотКт";
				НовыйПоказатель.Использование = Ложь;
				
			ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника,": движения с субконто") > 0 Тогда
				
				Если НЕ Ресурс.ПризнакУчета = Неопределено Тогда
					
					НовыйПоказатель = Объект.Показатели.Добавить();
					НовыйПоказатель.Представление = Ресурс.Имя + ": Дт";
					НовыйПоказатель.Имя = Ресурс.Имя + "Дт";
					НовыйПоказатель.Использование = Ложь;
					
					НовыйПоказатель = Объект.Показатели.Добавить();
					НовыйПоказатель.Представление = Ресурс.Имя + ": Кт";
					НовыйПоказатель.Имя = Ресурс.Имя + "Кт";
					НовыйПоказатель.Использование = Ложь;
					
				Иначе
					
					НовыйПоказатель = Объект.Показатели.Добавить();
					НовыйПоказатель.Представление = Ресурс.Имя;
					НовыйПоказатель.Имя = Ресурс.Имя;
					НовыйПоказатель.Использование = Ложь;
		
				КонецЕсли;
				
			КонецЕсли;
        			
      	КонецЕсли;
        
	КонецЦикла;

	Если Объект.Показатели.Количество() > 0 Тогда
		Объект.Показатели[0].Использование = Истина;
	КонецЕсли; 

    // 4. Периоды отбора данных.
	Если Периодический Тогда

		Если СтрНайти(Объект.ПредставлениеИсточника, "обороты") > 0 ИЛИ СтрНайти(Объект.ПредставлениеИсточника, "движения:") > 0 Тогда

			НоваяГраницаОтбора = Объект.ПериодыОтбораДанных.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы			= "НачалоПериода";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы	= "Дата начала отбора данных";
			НоваяГраницаОтбора.ТипГраницыПериода		= Перечисления.ТипыГраницПериода.НачалоПериода;

			НоваяГраницаОтбора = Объект.ПериодыОтбораДанных.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы			= "КонецПериода";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы = "Дата конца отбора данных";
			НоваяГраницаОтбора.ТипГраницыПериода		= Перечисления.ТипыГраницПериода.КонецПериода;

		Иначе

			НоваяГраницаОтбора = Объект.ПериодыОтбораДанных.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы 			= "МоментВремени";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы	= "Дата значения";
			НоваяГраницаОтбора.ТипГраницыПериода		= Перечисления.ТипыГраницПериода.НачалоПериода;

		КонецЕсли;

	КонецЕсли;
    	
	// 5. Отбор.
	ИнициализироватьОтбор(МетаданныеИсточник);
  	 
КонецПроцедуры // ЗаполнитьПоказателиИПериодыОтбораДанныхИсточника()

&НаСервере
// Процедура инициализирует отбор источника данных.
//
Процедура ИнициализироватьОтбор(МетаданныеИсточник)

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();		
		
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник1";
	Источник.СтрокаСоединения="";
	Источник.ТипИсточникаДанных = "local";
	
	ТекстЗапроса = "ВЫБРАТЬ";
	ЗнчФлаг = Ложь;
	Для каждого Измерение Из МетаданныеИсточник.Измерения Цикл

		Если ЗнчФлаг Тогда

			ТекстЗапроса = 	ТекстЗапроса + ",
							| " + Измерение.Имя;

		Иначе
	
			ТекстЗапроса = 	ТекстЗапроса + "
							| " + Измерение.Имя;

		КонецЕсли;
	
		ЗнчФлаг = Истина;	
	
	КонецЦикла;

	ТекстЗапроса = 	ТекстЗапроса + " 
					|ИЗ " + Объект.ИмяИсточника;
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "Запрос";
	НаборДанных.ИсточникДанных = "Источник1";
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилища);	
	ОтборДанных.Инициализировать(ИсточникНастроек);

КонецПроцедуры // ИнициализироватьОтбор()

// Процедура устанавливает отбор.
//
Процедура УстановитьОтбор()

	Если Не Объект.ПроизвольныйЗапрос Тогда

		ОтборДанных.Настройки.Отбор.Элементы.Очистить();

		// Заполняем отбор.
		Для каждого СтрокаПараметров Из Объект.ПараметрыЗапроса Цикл

			Если СтрокаПараметров.Имя <> "МоментВремени"
				И СтрокаПараметров.Имя <> "НачалоПериода"
				И СтрокаПараметров.Имя <> "КонецПериода" Тогда

				ЭлементОтбора = ОтборДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаПараметров.Имя);
				Если СтрокаПараметров.ВидСравнения = "" Тогда
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Иначе
				    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить(СтрокаПараметров.ВидСравнения," ","")];
				КонецЕсли; 
				ЭлементОтбора.ПравоеЗначение = СтрокаПараметров.Значение;

			КонецЕсли;

		КонецЦикла;			
	
	КонецЕсли;

КонецПроцедуры // УстановитьОтбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.ЗадаватьЗначениеПриРасчетеЗП = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ИмяИсточника) Тогда
		
		ВидИсточникаПоМетаданным = Лев(Объект.ИмяИсточника, СтрНайти(Объект.ИмяИсточника,".")-1);
		
		ТаблицаИсточника = СтрЗаменить(Объект.ИмяИсточника, ВидИсточникаПоМетаданным + "." , "");
		
		Периодический = Истина;
		Сч = СтрНайти(ТаблицаИсточника,".");
		
		Если Сч > 0 Тогда	
			ИмяИсточникаПоМетаданным = Лев(ТаблицаИсточника, Сч - 1);
			
		ИначеЕсли СтрНайти(Объект.ПредставлениеИсточника, "движения:") > 0 Тогда
			ИмяИсточникаПоМетаданным = ТаблицаИсточника;
			
		Иначе
			ИмяИсточникаПоМетаданным = ТаблицаИсточника;
			Периодический = Ложь;  
			
		КонецЕсли;
		
		МетаданныеИсточник = Метаданные[СтрЗаменить(ВидИсточникаПоМетаданным, "Регистр", "Регистры")][ИмяИсточникаПоМетаданным];
		
		ИнициализироватьОтбор(МетаданныеИсточник);
		
		УстановитьОтбор();
		
	КонецЕсли;
	
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	ДоступныПроизвольныеЗапросы = НЕ РежимРаботы.МодельСервиса;
	
	УправлениеСвойствомТолькоПросмотр();
	УправлениеСвойствомДоступность();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьТекущуюСтраницуВидимостиНаКлиенте();
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПередЗаписьюНаСервере формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверкаНаДублированиеИдентификатора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    Если НЕ Объект.ЗадаватьЗначениеПриРасчетеЗП И НЕ Объект.ПроизвольныйЗапрос Тогда

        Отказ = ПроверкаНаВыборПоказателя();
 		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		СформироватьЗапросЗаполнитьПараметры();

	ИначеЕсли НЕ Объект.ЗадаватьЗначениеПриРасчетеЗП И Объект.ПроизвольныйЗапрос Тогда

        Отказ = НЕ ЗапросКорректный();

	КонецЕсли;   
	
КонецПроцедуры // ПередЗаписьюНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события НачалоВыбора поля Источник.
//
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ИсточникНачалоВыбораЗавершение",ЭтаФорма);
	ОткрытьФорму("Справочник.ПараметрыРасчетов.Форма.ФормаВыбораИсточника",,,,,,Оповещение);
	
КонецПроцедуры // ИсточникНачалоВыбора()

&НаКлиенте
Процедура ИсточникНачалоВыбораЗавершение(СтуркутраВыбора,Параметры) Экспорт
	
	Если СтуркутраВыбора = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ПроизвольныйЗапрос		= Ложь;
	Объект.ИмяИсточника				= СтуркутраВыбора.Источник;
	Объект.ПредставлениеИсточника	= СтуркутраВыбора.ПредставлениеПоля;
	
	Объект.Показатели.Очистить();
	Объект.ПериодыОтбораДанных.Очистить();
	Объект.ПараметрыЗапроса.Очистить();
	
	Объект.Запрос = "";
	
	ЗаполнитьПоказателиИПериодыОтбораДанныхИсточника();
	СформироватьЗапросЗаполнитьПараметры();
	
	УправлениеСвойствомДоступность();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик нажатия на кнопку КонструкторЗапроса.
//
Процедура КонструкторЗапроса(Команда)
	
	КонструкторЗапроса = Новый КонструкторЗапроса;
	
	Если Объект.Запрос <> "" Тогда
		
		КонструкторЗапроса.Текст = Объект.Запрос;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияЗапросаКонструктором", ЭтотОбъект);
	КонструкторЗапроса.Показать(ОписаниеОповещения);	
	
КонецПроцедуры // КонструкторЗапроса()

&НаКлиенте
Процедура ПослеРедактированияЗапросаКонструктором(ТекстЗапросаИзКонструктора, ДополнительныеПараметры) Экспорт
	
	Если ТекстЗапросаИзКонструктора <> Неопределено
		И НЕ ПустаяСтрока(ТекстЗапросаИзКонструктора) Тогда
		
		Объект.Запрос = ТекстЗапросаИзКонструктора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Выполнить поля РедактироватьЗапрос.
//
Процедура РедактироватьЗапрос(Команда)
	
	Если Элементы.РедактироватьЗапрос.Пометка Тогда
		
		ЗапросКорректный = ЗапросКорректный();
		Если ЗапросКорректный Тогда
			
			ЗаполнитьПараметрыПоЗапросу();
			
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Запрос содержит ошибку! 
				|Очистить запрос и вернуться к исходному?'");
				
			ПоказатьВопрос(Новый ОписаниеОповещения("ВернутьсяКИсходномуЗапросу", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса = Объект.Запрос; // запомним текст запроса перед редактированием
		
	КонецЕсли;
	
	Элементы.РедактироватьЗапрос.Пометка = НЕ Элементы.РедактироватьЗапрос.Пометка;
	УправлениеСвойствомДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКИсходномуЗапросу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.Запрос = ТекстЗапроса;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)
     
    ПолучитьИдентификатор(Объект.Наименование);

КонецПроцедуры // НаименованиеПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ЗадаватьЗначениеПриРасчетеЗПП.
//
Процедура ЗадаватьЗначениеПриРасчетеЗППриИзменении(Элемент)
	
	Если Объект.ЗадаватьЗначениеПриРасчетеЗП Тогда
	
		ТекстСообщения = НСтр("ru = 'После установки флага все реквизиты будут очищены! Продолжить?'");
		РезультатВопроса = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗадаватьЗначениеПриРасчетеЗППриИзмененииЗавершение", ЭтотОбъект), ТекстСообщения, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ЗадаватьЗначениеПриРасчетеЗППриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗадаватьЗначениеПриРасчетеЗППриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатВопроса = Результат;
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Объект.ЗадаватьЗначениеПриРасчетеЗП = Ложь;
        Возврат;
    КонецЕсли;
    
    Объект.ИмяИсточника = "";
    Объект.ПредставлениеИсточника = "";
    Объект.Запрос = "";
    Объект.ПроизвольныйЗапрос = Ложь;
    Объект.ПериодыОтбораДанных.Очистить();
    Объект.Показатели.Очистить();
    Объект.ПараметрыЗапроса.Очистить();
    
    
    ЗадаватьЗначениеПриРасчетеЗППриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗадаватьЗначениеПриРасчетеЗППриИзмененииФрагмент()
    
    УстановитьТекущуюСтраницуВидимостиНаКлиенте();

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ПроизвольныйЗапрос.
//
Процедура ПроизвольныйЗапросПриИзменении(Элемент)

	Если Объект.ПроизвольныйЗапрос Тогда
		
		Объект.ИмяИсточника				= "";
		Объект.ПредставлениеИсточника	= "";
		
		Объект.ПериодыОтбораДанных.Очистить();
		Объект.Показатели.Очистить();
		ОтборДанных.Настройки.Отбор.Элементы.Очистить();
		
	Иначе
		
		Объект.Запрос					= "";
		Объект.ПараметрыЗапроса.Очистить();
		
	КонецЕсли; 
	
	УправлениеСвойствомДоступность();
	
КонецПроцедуры // ПроизвольныйЗапросПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ПроизвольныйЗапрос.
//
Процедура ПоказателиИспользованиеПриИзменении(Элемент)
	                                      
	Если Элементы.Показатели.ТекущиеДанные.Использование Тогда
		Для каждого СтрокаТЧ Из Объект.Показатели Цикл
            Если СтрокаТЧ <> Элементы.Показатели.ТекущиеДанные Тогда
				СтрокаТЧ.Использование = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры // ИспользованиеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
// Процедура - обработчик события ПриОкончанииРедактирования таблицы Отбор.
//
Процедура ОтборДанныхНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Объект.ПроизвольныйЗапрос Тогда
		СформироватьЗапросЗаполнитьПараметры();
	КонецЕсли;

КонецПроцедуры // ОтборПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события ПриОкончанииРедактирования таблицы Показатели.
//
Процедура ПоказателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Объект.ПроизвольныйЗапрос Тогда
		СформироватьЗапросЗаполнитьПараметры();
	КонецЕсли;

КонецПроцедуры // ПоказателиПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события ПослеУдаления таблицы Отбор.
//
Процедура ОтборДанныхНастройкиОтборПослеУдаления(Элемент)
	
	Если НЕ Объект.ПроизвольныйЗапрос Тогда
		СформироватьЗапросЗаполнитьПараметры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка поля Источник.
//
Процедура ИсточникОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ИмяИсточника 			= "";
	Объект.ПредставлениеИсточника	= "";
	Объект.Запрос					= "";
	
	Объект.ПериодыОтбораДанных.Очистить();
	Объект.Показатели.Очистить();	
	Объект.ПараметрыЗапроса.Очистить();
	
	УправлениеСвойствомДоступность();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередНачаломДобавления таблицы Показатели.
//
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередНачаломДобавления таблицы ПериодыОтбораДанных.
//
Процедура ПериодыОтбораДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;	
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередНачаломДобавления таблицы ПараметрыЗапроса.
//
Процедура ПараметрыЗапросаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ЗАПОЛНЕНИЕ ПО ШАБЛОНАМ

&НаКлиенте
Процедура ШаблонФиксированнаяСумма(Команда)
	
	ИнициализироватьЗаполнениеПоШаблону("ФиксированнаяСумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНормаДней(Команда)
	
	ИнициализироватьЗаполнениеПоШаблону("НормаДней");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНормаЧасов(Команда)
	
	ИнициализироватьЗаполнениеПоШаблону("НормаЧасов");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОтработаноДней(Команда)
	
	ИнициализироватьЗаполнениеПоШаблону("ОтработаноДней");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОтработаноЧасов(Команда)
	
	ИнициализироватьЗаполнениеПоШаблону("ОтработаноЧасов");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонТарифнаяСтавка(Команда)
	
	ИнициализироватьЗаполнениеПоШаблону("ТарифнаяСтавка");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОтработаноЧасовПоЗаданиям(Команда)
	
	ИнициализироватьЗаполнениеПоШаблону("ОтработаноЧасовПоЗаданиям");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСуммуПродажПоОтветственному(Команда)
	
	ИнициализироватьЗаполнениеПоШаблону("СуммуПродажПоОтветственному");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьЗаполнениеПоШаблону(ИмяШаблона)
	
	ДополнительныеПараметры = Новый Структура("ИмяШаблона", ИмяШаблона);
	ТекстВопроса = НСтр("ru = 'Параметр расчета будет полностью перезаполнен! Продолжить выполнение операции?'");
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПоШаблону(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти