
#Область ПеременныеФормы

&НаКлиенте
Перем УстановкаОсновногоСчетаВыполнена; // Признак успешной установки основного банковского счета из формы контрагента/организации

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат; // Возврат при получении формы для анализа.
	КонецЕсли;
	
	Параметры.Отбор.Свойство("Владелец", ВладелецСчетов);
	
	Если ЗначениеЗаполнено(ВладелецСчетов) Тогда
		// Контекстное открытие формы с отбором по контрагенту/организации
		
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru='Банковские счета '") + " """ + ВладелецСчетов + """";
		
		ЭтоКонтрагент = ТипЗнч(ВладелецСчетов) = Тип("СправочникСсылка.Контрагенты");
		
		Элементы.ИспользоватьКакОсновной.Видимость = ПравоДоступа("Редактирование",
			?(ЭтоКонтрагент, Метаданные.Справочники.Контрагенты, Метаданные.Справочники.Организации));
		Элементы.ПрямойОбмен.Видимость = Не ЭтоКонтрагент И ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
		
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнойСчетВладельца",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецСчетов, "БанковскийСчетПоУмолчанию"));
			
		Если Элементы.Найти("ФормаОбработкаКлиентБанкОткрытьКлиентБанк") <> Неопределено Тогда
			Элементы.ФормаОбработкаКлиентБанкОткрытьКлиентБанк.Видимость = НЕ ЭтоКонтрагент;
		КонецЕсли;
		
	Иначе
		// Открытие в общем режиме
	
		Элементы.Владелец.Видимость = Истина;
		Элементы.ИспользоватьКакОсновной.Видимость = ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты)
			И ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
		Элементы.ПрямойОбмен.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменСБанками");
		
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнойСчетВладельца", Неопределено);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоСчетаВыполнена" Тогда
		УстановкаОсновногоСчетаВыполнена = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
		И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		
		Элементы.ИспользоватьКакОсновной.Доступность = Не Элементы.Список.ТекущиеДанные.ЭтоОсновнойСчет;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьКакОсновной(Команда)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или Элементы.Список.ТекущиеДанные = Неопределено
		Или Элементы.Список.ТекущиеДанные.ЭтоОсновнойСчет Тогда
		
		Возврат;
	КонецЕсли;
	
	НовыйОсновнойСчет = Элементы.Список.ТекущиеДанные.Ссылка;
	
	// Если открыта форма контрагента/организации, то изменение основного счета выполняем в ней
	УстановкаОсновногоСчетаВыполнена = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец", Элементы.Список.ТекущиеДанные.Владелец);
	СтруктураПараметров.Вставить("НовыйОсновнойСчет", НовыйОсновнойСчет);
	
	Оповестить("УстановкаОсновногоСчета", СтруктураПараметров, ЭтотОбъект);
	
	// Если форма контрагента/организации закрыта, то запишем основной счет контрагента/организации самостоятельно
	Если Не УстановкаОсновногоСчетаВыполнена Тогда
		ЗаписатьОсновнойСчет(СтруктураПараметров);
	КонецЕсли;
	
	// Обновим динамический список
	Если ЗначениеЗаполнено(ВладелецСчетов) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнойСчетВладельца", НовыйОсновнойСчет);
	Иначе
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормы" + РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОсновнойСчет(СтруктураПараметров)
	
	ВладелецОбъект = СтруктураПараметров.Владелец.ПолучитьОбъект();
	ВладелецУспешноЗаблокирован = Истина;
	
	Попытка
		ВладелецОбъект.Заблокировать();
	Исключение
		
		ВладелецУспешноЗаблокирован = Ложь;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось заблокировать %1: %2, для изменения основного банковского счета, по причине:
				|%3'", Метаданные.ОсновнойЯзык.КодЯзыка), 
				СтруктураПараметров.Владелец.Метаданные.ПредставлениеОбъекта, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение,, ВладелецОбъект, ОписаниеОшибки());
		
	КонецПопытки;
	
	// Если удалось заблокировать, изменим банковский счет по умолчанию у контрагента/организации
	Если ВладелецУспешноЗаблокирован Тогда
		ВладелецОбъект.БанковскийСчетПоУмолчанию = СтруктураПараметров.НовыйОсновнойСчет;
		ВладелецОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
