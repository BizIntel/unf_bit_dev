
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДатаКурса = НачалоДня(ТекущаяДатаСеанса());
	Список.Параметры.УстановитьЗначениеПараметра ("КонецПериода", ДатаКурса);
	
	Элементы.Валюты.РежимВыбора = Параметры.РежимВыбора;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеКурсовВалют") Тогда
		// Элементы.ФормаПодборИзОКВ.Видимость = Ложь; // УНФ
		Элементы.ФормаЗагрузитьКурсыВалют.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(РезультатВыбора) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Валюты.Обновить();
	Элементы.Валюты.ТекущаяСтрока = РезультатВыбора[РезультатВыбора.ВГраница()].Валюта;
	
	ПодключитьОбработчикОжидания("ЗагрузитьКурсыВалютВФоне", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_КурсыВалют"
		Или ИмяСобытия = "Запись_ЗагрузкаКурсовВалют" Тогда
		Элементы.Валюты.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВалюты

&НаКлиенте
Процедура ВалютыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ОткрытьФорму("Справочник.Валюты.Форма.ПодборВалютИзКлассификатора", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборИзОКВ(Команда)
	
	ОткрытьФорму("Справочник.Валюты.Форма.ПодборВалютИзКлассификатора",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКурсыВалют(Команда)
	ПараметрыФормы = Новый Структура("ОткрытиеИзСписка");
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВалюту(Команда)
	
	Элементы.Валюты.ДобавитьСтроку();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьКурсыВалютВФоне()
	
	Если Семафор Тогда
		ПодключитьОбработчикОжидания("ЗагрузитьКурсыВалютВФоне", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКурсыВалютВФонеНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПараметрыОбработчикаОжидания.МаксимальныйИнтервал = 3;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	Семафор = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКурсыВалютВФонеНаСервере()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсыВалют.Валюта
	|ПОМЕСТИТЬ ВТ_Курсы
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период >= &НачалоПериодаЗагрузки
	|	И КурсыВалют.Валюта.ЗагружаетсяИзИнтернета
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалют.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Валюты.Код КАК КодВалюты,
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Курсы КАК ВТ_Курсы
	|		ПО (ВТ_Курсы.Валюта = Валюты.Ссылка)
	|ГДЕ
	|	Валюты.ЗагружаетсяИзИнтернета
	|	И ВТ_Курсы.Валюта ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("НачалоПериодаЗагрузки", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), -3));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("СписокВалют", РезультатЗапроса.Выгрузить());
	ПараметрыЗагрузки.Вставить("НачалоПериода", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), -3));
	ПараметрыЗагрузки.Вставить("КонецПериода", КонецДня(ТекущаяДатаСеанса()) + 1);
	
	Результат = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	"РаботаСКурсамиВалют.ЗагрузитьАктуальныйКурс",
	ПараметрыЗагрузки,,,
	Ложь);
	
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		Элементы.Валюты.Обновить();
		Семафор = Ложь;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти