
#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеВидовИТипов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("РежимОткрытияОкна") Тогда
		ЭтотОбъект.РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	СоответствиеВидовИТипов = Новый Соответствие;
	
	// Подготовка соответствия для выбора типов входящих документов.
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьМодифицированностьФормы = Истина;
		
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
		Объект.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Наименование = Строка(Объект.Контрагент);
		КонецЕсли;
		
		Если Параметры.Свойство("Организация") Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		
		// Заполнение по умолчанию профиля настроек ЭДО.
		Если Не ЗначениеЗаполнено(Объект.ПрофильНастроекЭДО) Тогда
			УстановитьЗначенияПоУмолчанию();
		КонецЕсли;
		
		// При создании из профиля настроек ЭДО, он передается в настройку.
		Если ЗначениеЗаполнено(Объект.ПрофильНастроекЭДО) Тогда
			ПрофильНастроекЭДОПриИзмененииНаСервере();
		КонецЕсли;
		
		ЗаполнитьПоШаблонуНаСервере("Автоматически", СоответствиеВидовИТипов);
		
		ПодготовитьФорму();
	Иначе
		ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов);
	КонецЕсли;
	
	АдресСоответствияВидовИТипов  = ПоместитьВоВременноеХранилище(СоответствиеВидовИТипов,УникальныйИдентификатор);
	
	ОбновитьСтатусПодключения();
	
	СкрытьПодменюЭДО();
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Если объект - является соглашением-Интеркампани, то ничего
	// не выполняем на сервере и при переходе процедуру при открытии, откроем нужную форму.
	Если Объект.ЭтоИнтеркампани Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// При заполнении настройки ЭДО на сервере взведем модифицированность вручную.
	Если УстановитьМодифицированностьФормы Тогда
		ЭтотОбъект.Модифицированность = истина;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.КаталогВходящихДокументов.КнопкаВыбора = Ложь;
		Элементы.КаталогИсходящихДокументов.КнопкаВыбора = Ложь;
	#КонецЕсли
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствияВидовИТипов) Тогда
		СоответствиеВидовИТипов = ПолучитьИзВременногоХранилища(АдресСоответствияВидовИТипов);
	КонецЕсли;
	
	ВывестиПредставленияТиповДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Прочитать();
		
		ОбновитьСтатусПодключения();
		ЭтаФорма.ОбновитьОтображениеДанных();
		ВывестиПредставленияТиповДокументов();
		
		ЗаполнитьПредставлениеНастроек(Объект);
		
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("ОбновитьИсходящиеЭД") Тогда
		
		Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Объект.ПрофильНастроекЭДО = Параметр Тогда
			Возврат;
		КонецЕсли;
		
		ОпределитьИспользованиеКаталога(Истина);
		
	ИначеЕсли ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
		И ВРег(Источник) = ВРег("ИспользоватьЭлектронныеПодписи") Тогда
		
		ЗаполнитьПредставлениеНастроек(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ИспользованиеИдентификатораКонтрагентаУникально(Отказ);
	
КонецПроцедуры

// Сохранение сертификатов в объекте из хранилища
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого ДанныеСтроки Из Объект.СертификатыПодписейКонтрагента Цикл
		Если НЕ ПустаяСтрока(ДанныеСтроки.АдресФайлаВХранилище) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресФайлаВХранилище);
			ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
			ТекущийОбъект.СертификатыПодписейКонтрагента[ДанныеСтроки.НомерСтроки - 1].Сертификат = ХранилищеЗначения;
		КонецЕсли;
	КонецЦикла; 
	
	// Помещение нового сертификата шифрования из временного хранилища
	Если Не ПустаяСтрока(АдресСертификатаКонтрагентаДляШифрования) И НЕ ПустаяСтрока(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресСертификатаКонтрагентаДляШифрования);
		ХранилищеЗначения = Новый ХранилищеЗначения(ДвоичныеДанные);
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = ХранилищеЗначения;
	ИначеЕсли ПустаяСтрока(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда 
		ТекущийОбъект.СертификатКонтрагентаДляШифрования = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВывестиПредставленияТиповДокументов();
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура СостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийЭД.Закрыто")
		ИЛИ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СостоянияСоглашенийЭД.ОжидаетсяСогласование") Тогда
		
		Если ЧерезОператораЭДО Тогда
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru = 'При отмене действия соглашения необходимо отклонить приглашение.
									|Отклонить?'");
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеСостояния", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Отсоединен");
			ОбновитьСтатусПодключения(Истина);
		КонецЕсли;
	Иначе
		Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
		ОбновитьСтатусПодключения(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Объект.ИдентификаторКонтрагента) Тогда 
		
		Оповещение = Новый ОписаниеОповещения("КонтрагентПриИзмененииОтветНаВопрос", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Идентификатор получателя заполнен, при изменении контрагента он будет изменен.
	                        |Изменить идентификатор получателя?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	МенятьИдентификатор = РезультатВопроса = КодВозвратаДиалога.Да;
	КонтрагентПриИзмененииНаСервере(МенятьИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильНастроекЭДОПриИзменении(Элемент)
	
	ПрофильНастроекЭДОПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Объект.Наименование = Строка(Объект.Контрагент) + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		", " + Строка(Объект.ДоговорКонтрагента), "");
	
КонецПроцедуры

// Настройки обмена через оператора

&НаКлиенте
Процедура ИдентификаторКонтрагентаПриИзменении(Элемент)
	
	Объект.ИдентификаторКонтрагента = СокрЛП(Объект.ИдентификаторКонтрагента);
	ОпределитьИспользуемыеСпособыОбменаЭД(Неопределено, Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

// Настройки прямого обмена
&НаКлиенте
Процедура КаталогВходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент.ТекстРедактирования, Объект.КаталогВходящихДокументов);
	
	ОбновитьВходящийКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВходящихДокументовПриИзменении(Элемент)
	
	ОбновитьВходящийКаталога(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент.ТекстРедактирования, Объект.КаталогИсходящихДокументов);
	
	ОбновитьИсходящийКаталог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходящихДокументовПриИзменении(Элемент)
	
	ОбновитьИсходящийКаталог(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШифроватьДанныеПакетаЭДПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеШифрованияДанных", ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки)
		ИЛИ ЗначениеЗаполнено(ЭтотОбъект.ПредставлениеСертификатаКонтрагентаДляШифрования) Тогда
		ТекстВопроса = НСтр("ru = 'Настройки шифрования будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСертификатыПодписейПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьИзменениеПроверкиСертификатов", ЭтотОбъект);
	Если Объект.СертификатыПодписейКонтрагента.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Настройки проверка сертификатов подписи контрагентов будут очищены. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ПоместитьВХранилищеСертификат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатКонтрагентаДляШифрованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьВыборФайлаСертификатаШифрования", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, , , Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура;
	ИмяФормыВыбора = ИмяФормыВыбораДоговора(ПараметрыОткрытия);
	
	Попытка
		СтандартнаяОбработка = Ложь;
		ОбработкаПродолжения = Новый ОписаниеОповещения("ДоговорКонтрагентаПродолжениеВыбора", ЭтотОбъект);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия,,,,,
			ОбработкаПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		СтандартнаяОбработка = Истина;
		ВидОперации = НСтр("ru = 'Открытие формы выбора договора'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка открытия формы выбора договора'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения, 2);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийКомандФормы

&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашение(Команда)
	
	ДопПараметры = Новый Структура("Действие", "Принять");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект, ДопПараметры);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашение(Команда)
	
	ДопПараметры = Новый Структура("Действие", "Отклонить");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОбработкуПриглашений", ЭтотОбъект, ДопПараметры);
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроек(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ТестНастроекПродолжить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'В текущую настройку ЭДО внесены изменения. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Выполнить", НСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить("Отменить", НСтр("ru = 'Отменить тест'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , "Выполнить", НСтр("ru = 'Тест настроек'"));
	Иначе
		ТестНастроекПродолжить("Выполнить", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРасширенныйРежимНастройкиСоглашения(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьВключениеРасширенногоРежимаНастройки", ЭтотОбъект);
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		ТекстВопроса = НСтр("ru = 'Изменения расширенного режима будут очищены.
			|Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Объект.РасширенныйРежимНастройкиСоглашения = Не Объект.РасширенныйРежимНастройкиСоглашения;
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьРасширенныйРежимНастройкиСоглашенияНаСервере()
	
	ИсходящиеДокументыПрофиляНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПрофильНастроекЭДО,
		"ИсходящиеДокументы");
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПрофильНастроекЭДО,
		"ИсходящиеДокументы, ИспользоватьУПД, ИспользоватьУКД");
	
	Объект.ИспользоватьУПД             = ПараметрыПрофиляНастроек.ИспользоватьУПД;
	Объект.ИспользоватьУКД             = ПараметрыПрофиляНастроек.ИспользоватьУКД;
	
	// Загружаем ТЧ из профиля настроек ЭДО.
	Объект.ИсходящиеДокументы.Очистить();
	Если ЗначениеЗаполнено(ПараметрыПрофиляНастроек.ИсходящиеДокументы) Тогда
		Объект.ИсходящиеДокументы.Загрузить(ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить());
		Объект.ИсходящиеДокументы.Сортировать("Приоритет");
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользуемыеСпособыОбменаЭД(Объект.ПрофильНастроекЭДО, Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	ИсходящиеДокументыПередНачаломИзмененияНаСервере(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ИсходящиеДокументыПередНачаломИзмененияНаСервере(Отказ)
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения Тогда
		ТекстСообщения = НСтр("ru = 'Изменение табличной части ""Электронные документы"" возможно:
		|""групповое"" - в Профиле настроек ЭДО;
		|""индивидуальное"" - в расширенном режиме настроек.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыФормировать" Тогда
		ЗначениеЭлемента = Элемент.ТекущиеДанные.Формировать;
		Если Не ЗначениеЭлемента Тогда
			Элемент.ТекущиеДанные.ИспользоватьЭП = ЗначениеЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИспользоватьЭП И НЕ Элемент.ТекущиеДанные.Формировать Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭП" Тогда
			Элемент.ТекущиеДанные.Формировать = Истина;
		Иначе
			Элемент.ТекущиеДанные.ИспользоватьЭП = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД")
		ИЛИ Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Элемент.ТекущиеДанные.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ИсходящиеДокументыИспользоватьЭП" И НЕ Элемент.ТекущиеДанные.ИспользоватьЭП Тогда
			ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только с использованием электронной подписи.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Элемент.ТекущиеДанные.ИсходящийДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ИспользоватьЭП = Элемент.ТекущиеДанные.Формировать;
	ИначеЕсли Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КаталогТоваров") Тогда
		
		ИспользуетсяКаталогВСоглашении = Элемент.ТекущиеДанные.Формировать;
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура"))
		И ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Элемент.ТекущиеДанные.СпособОбменаЭД) Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		Элемент.ТекущиеДанные.ИспользоватьЭП = Ложь;
		
		ШаблонСообщения = НСтр("ru='Отправка документа %1 возможна только через оператора ЭДО.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель")
		ИЛИ Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец"))
		И Объект.ИспользоватьУПД Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru='Данные документ %1 передаются в составе счет-фактуры(универсального передаточного документа).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель")
		И Объект.ИспользоватьУКД Тогда
		
		Элемент.ТекущиеДанные.Формировать = Ложь;
		
		ШаблонСообщения = НСтр("ru='Данные документ %1 передаются в составе корректировочного счет-фактуры(универсального корректировочного документа).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Элемент.ТекущиеДанные.ИсходящийДокумент);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура")
		И Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУПД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура")
		И Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		
		Если Элемент.ТекущиеДанные.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
			Объект.ИспользоватьУКД = Истина;
			ИзменитьФлагУПДУКД();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	
	ИсходящийДокумент = Элементы.ИсходящиеДокументы.ТекущиеДанные.ИсходящийДокумент;
	СпособОбменаЭД = Элементы.ИсходящиеДокументы.ТекущиеДанные.СпособОбменаЭД;
	Если ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") Тогда
		Если Не Объект.ИспользоватьУПД Тогда
			СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.02'"), НСтр("ru = 'ФНС 5.02'"));
			СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура)'"), НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура)'"));
		КонецЕсли;
		СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.01 (УПД:Счет-фактура и первичный документ)'"));
	ИначеЕсли ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.КорректировочныйСчетФактура") Тогда
		Если Не Объект.ИспользоватьУКД Тогда
			СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.02'"), НСтр("ru = 'ФНС 5.02'"));
			СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура)'"), НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура)'"));
		КонецЕсли;
		СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)'"), НСтр("ru = 'ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)'"));
	ИначеЕсли ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктНаПередачуПрав") Тогда
		СписокВыбора.Добавить(НСтр("ru = 'CML 2.08'"), НСтр("ru = 'CML 2.08'"));
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
			СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (УПД:Первичный документ)'"), НСтр("ru = 'ФНС 5.01 (УПД:Первичный документ)'"));
		КонецЕсли;

	ИначеЕсли ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель") Тогда
		СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01'"), НСтр("ru = 'ФНС 5.01 (до 01.07.2017г.)'"));
		СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (с 2016г.)'"), НСтр("ru = 'ФНС 5.01 (с 10.01.2016г.)'"));
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
			СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (УПД:Первичный документ)'"), НСтр("ru = 'ФНС 5.01 (УПД:Первичный документ)'"));
		КонецЕсли;

	ИначеЕсли ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец") Тогда
		СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01'"), НСтр("ru = 'ФНС 5.01 (до 01.07.2017г.)'"));
		СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (с 2016г.)'"), НСтр("ru = 'ФНС 5.01 (с 10.01.2016г.)'"));
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
			СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (УПД:Первичный документ)'"), НСтр("ru = 'ФНС 5.01 (УПД:Первичный документ)'"));
		КонецЕсли;

	ИначеЕсли ИсходящийДокумент = ПредопределенноеЗначение("Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель") Тогда
		СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01'"), НСтр("ru = 'ФНС 5.01'"));
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(СпособОбменаЭД) Тогда
			СписокВыбора.Добавить(НСтр("ru = 'ФНС 5.01 (УКД:Первичный документ)'"), НСтр("ru = 'ФНС 5.01 (УКД:Первичный документ)'"));
		КонецЕсли;
	Иначе
		СписокВыбора.Добавить(НСтр("ru = 'CML 2.08'"), НСтр("ru = 'CML 2.08'"));
		СписокВыбора.Добавить(НСтр("ru = 'CML 4.02'"), НСтр("ru = 'CML 4.02'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУПДПриИзменении(Элемент)
	ИзменитьФлагУПДУКД();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУКДПриИзменении(Элемент)
	ИзменитьФлагУПДУКД();
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВерсияФорматаПриИзменении(Элемент)
	
	// Изменение представления регламента ЭДО при изменении формата документа Акт об оказании услуг.
	
	ТекущиеДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРегламентЭДОАкта(ТекущиеДанные.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИсходящиеДокументыДополнительныеНастройки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеСтроки = Элемент.ТекущиеДанные;
		
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеСтроки.Формировать Тогда
			Возврат;
		КонецЕсли;
		
		СвойстваФормы = ОбменСКонтрагентамиСлужебныйКлиент.СвойстваДокументооборотаЭД();
		ЗаполнитьЗначенияСвойств(СвойстваФормы, ДанныеСтроки);
		
		НастройкиРегламентаЭДО = ОбменСКонтрагентамиСлужебныйКлиент.НастройкиРегламентаЭДО(ДанныеСтроки.ИсходящийДокумент, ДанныеСтроки.ВерсияФормата, ДанныеСтроки.СпособОбменаЭД);
		
		СвойстваФормы.Вставить("НастройкиРегламентаЭДО", НастройкиРегламентаЭДО);
		СвойстваФормы.Вставить("Организация", Объект.Организация);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаДокументооборотаПродолжить", ЭтотОбъект, СвойстваФормы);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.НастройкаРегламентаЭДО", СвойстваФормы
			,Элемент
			,
			,
			,
			,ОписаниеОповещения
			, РежимОткрытияОкна);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыСертификатыПодписей

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
		ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Обработчик = Новый ОписаниеОповещения("ФайлОбработкаВыбора", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, , , Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПодписейКонтрагентаПредставлениеСертификатаКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
	ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФорму()
	
	ОпределитьИспользуемыеСпособыОбменаЭД();
	
	Если ЧерезКаталог ИЛИ ЧерезЭлектроннуюПочту ИЛИ ЧерезFTP Тогда
		Если ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьЭлектронныеПодписиЭД") Тогда
			
			Если Объект.ШифроватьДанныеПакетаЭД Тогда
				
				ДокументОбъект = РеквизитФормыВЗначение("Объект");
				ДвоичныеДанныеСертификата  = ДокументОбъект.СертификатКонтрагентаДляШифрования.Получить();
				Если ДвоичныеДанныеСертификата <> Неопределено Тогда
					СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
					ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
					ПредставлениеСертификатаКонтрагентаДляШифрования = ПредставлениеСертификата;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	КонецЕсли;
	
	ИспользуетсяДополнительнаяАналитикаПартнеры = ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры();
	Если ИспользуетсяДополнительнаяАналитикаПартнеры И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ИмяРеквизитаПартнераКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаПартнераКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользованиеКаталога();
	
	Если Объект.СпособОбменаЭД  = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		ПараметрыАутентификацииНаСайте = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользованиеКаталога(ОбновитьДоступностьВидимостьКоманды = Ложь)
	
	АктуальныеЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	Если Не АктуальныеЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		
		ИспользуетсяКаталогВПрограмме = Истина;
		ПараметрыОтбора = Новый Структура("ИсходящийДокумент, Формировать", Перечисления.ВидыЭД.КаталогТоваров, Истина);
		Если Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			ИспользуетсяКаталогВСоглашении = Истина;
		Иначе
			ИспользуетсяКаталогВСоглашении = Ложь;
		КонецЕсли;
	Иначе
		ИспользуетсяКаталогВПрограмме = Ложь;
	КонецЕсли;
	
	Если ОбновитьДоступностьВидимостьКоманды Тогда
		 УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(ЭтотОбъект)
	КонецЕсли;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.Партнер.Видимость = Ложь;
	Если Форма.ИспользуетсяДополнительнаяАналитикаПартнеры
		И ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьПартнеровИКонтрагентов") Тогда
		
		Элементы.Партнер.Видимость = Истина;
	КонецЕсли;
	
	Если Форма.ЧерезКаталог Тогда
		
		ОбновитьПутиКаталоговОбмена(Форма);
		
	КонецЕсли;
	
	Элементы.ОтправитьПриглашение.Видимость                              = Форма.ЧерезОператораЭДО
		И (Объект.СтатусПодключения  = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить")
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Отсоединен")
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Ошибка"));
	Элементы.ПринятьПриглашение.Видимость                                = Форма.ЧерезОператораЭДО
		И Объект.СтатусПодключения   = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие");
	Элементы.ОтклонитьПриглашение.Видимость                              = Форма.ЧерезОператораЭДО
		И Объект.СтатусПодключения   = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие");
	
	// Прямой обмен
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезКаталог.Видимость          = Форма.ЧерезКаталог;
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезЭлектроннуюПочту.Видимость = Форма.ЧерезЭлектроннуюПочту;
	Элементы.ГруппаНастройкиПрямогоОбменаЧерезFTP.Видимость              = Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбмена.Видимость                      = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбменаШифрование.Видимость            = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	Элементы.ГруппаНастройкиПрямогоОбменаДоверенныеСертификаты.Видимость = Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP;
	
	// РасширенныйРежимНастройкиСоглашения
	Элементы.ФормаВключитьРасширенныйРежимНастройкиСоглашения.Заголовок = НСтр("ru = 'Включить расширенный режим настроек ЭДО'");
	Если Объект.РасширенныйРежимНастройкиСоглашения Тогда
		Элементы.ФормаВключитьРасширенныйРежимНастройкиСоглашения.Заголовок = НСтр("ru = 'Выключить расширенный режим настроек ЭДО'");
	КонецЕсли;
	
	Элементы.ПрофильНастроекЭДО.Видимость                         = Не Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИдентификаторОрганизации.Видимость                   = Не Объект.РасширенныйРежимНастройкиСоглашения;
	Элементы.ИдентификаторКонтрагента.Видимость                   = Не Объект.РасширенныйРежимНастройкиСоглашения;
	
	Элементы.ДекорацияСтатусПодключения.Ширина = ?(Объект.РасширенныйРежимНастройкиСоглашения, 14, 17);
	
	Элементы.ИсходящиеДокументыДополнительныеНастройки.Видимость = Объект.РасширенныйРежимНастройкиСоглашения;
	
	// Использование ЭП
	Элементы.ГруппаНастройкиПрямогоОбменаШифрование.Видимость = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	Элементы.ГруппаШифрованиеДанныхПакетаЭД.Видимость                          = Объект.ШифроватьДанныеПакетаЭД;
	Элементы.ГруппаНастройкиПрямогоОбменаДоверенныеСертификатыСписок.Видимость = Объект.ПроверятьСертификатыПодписей;
	
	// Доступные состояния соглашения.
	Элементы.Состояние.Доступность = Не Форма.ЧерезОператораЭДО
		ИЛИ Объект.СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен");
		
	// Использование УПД и УКД
	Элементы.ИспользоватьУПД.Видимость = Объект.РасширенныйРежимНастройкиСоглашения
		И НЕ (Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP);
	Элементы.ИспользоватьУКД.Видимость = Объект.РасширенныйРежимНастройкиСоглашения
		И НЕ (Форма.ЧерезКаталог ИЛИ Форма.ЧерезЭлектроннуюПочту ИЛИ Форма.ЧерезFTP);
	
	УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступностьОтправкиКомандыОтправкиКаталога(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению") <> Неопределено Тогда
		Элементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Видимость = Форма.ИспользуетсяКаталогВПрограмме;
		Элементы.ФормаСправочникСоглашенияОбИспользованииЭДОтправитьКаталогПоСоглашению.Доступность = Форма.ИспользуетсяКаталогВСоглашении;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//
	УсловноеОформление.Элементы.Очистить();

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОрганизацияОтправитель.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторОрганизации.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторКонтрагента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлектроннаяПочтаКонтрагента.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.FTPКаталогИсходящихДокументов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.FTPКаталогВходящихДокументов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КаталогВходящихДокументов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КаталогИсходящихДокументов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СостояниеСоглашения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыВерсияФормата.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.NotGroup;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИсходящийДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СчетФактура);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СпособОбменаЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	СписокЗначений.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыВерсияФормата.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ВерсияФормата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'ФНС 5.01'");


	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИсходящийДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'ФНС 5.01 (до 01.07.2017)'"));

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыВерсияФормата.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ВерсияФормата");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'ФНС 5.01 (с 2016г.)'");


	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИсходящийДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'ФНС 5.01 (с 10.01.2016)'"));

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыДополнительныеНастройки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ДополнительныеНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыДополнительныеНастройки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ДополнительныеНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПутиКаталоговОбмена(Форма)
	
	ОбновитьВходящийКаталога(Форма);
	ОбновитьИсходящийКаталог(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВходящийКаталога(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ШаблонЗаголовка = НСтр("ru = 'Полный путь: %1'");
	
	КаталогВходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			Форма.ПутьКРодительскомуКаталогуПрофильНастроекЭДО, Объект.КаталогВходящихДокументов);
		
	Элементы.ПояснениеКаталогаВходящихДокументов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, КаталогВходящихДокументов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсходящийКаталог(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ШаблонЗаголовка = НСтр("ru = 'Полный путь: %1'");
	
	КаталогИсходящихДокументов = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			Форма.ПутьКРодительскомуКаталогуПрофильНастроекЭДО, Объект.КаталогИсходящихДокументов);
			
	Элементы.ПояснениеКаталогаИсходящихДокументов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, КаталогИсходящихДокументов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	&Организация";
	
	ТекстЗапросаОрганизация = "ИСТИНА";
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстЗапросаОрганизация = "ПрофилиНастроекЭДО.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Организация", ТекстЗапросаОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Объект.ПрофильНастроекЭДО = Выборка.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(МенятьИдентификаторКонтрагента = Истина)
	
	Объект.Наименование = Строка(Объект.Контрагент) + ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		", " + Строка(Объект.ДоговорКонтрагента), "");
		
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(Объект.СпособОбменаЭД) Тогда
		Объект.ИдентификаторКонтрагента = "";
		Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
		ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
	ИначеЕсли МенятьИдентификаторКонтрагента Тогда 
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	ОпределитьИспользуемыеСпособыОбменаЭД(Неопределено, Объект.ИдентификаторКонтрагента);
	
	Если ИспользуетсяДополнительнаяАналитикаПартнеры И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ИмяРеквизитаПартнераКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ПартнерКонтрагента");
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаПартнераКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрофильНастроекЭДОПриИзмененииНаСервере()
	
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПрофильНастроекЭДО,
		"Организация, ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений, ИсходящиеДокументы, ИспользоватьУПД, ИспользоватьУКД");
		
	Объект.Организация                 = ПараметрыПрофиляНастроек.Организация;
	Объект.СпособОбменаЭД              = ПараметрыПрофиляНастроек.СпособОбменаЭД;
	Объект.ИдентификаторОрганизации    = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
	
	Объект.ИспользоватьУПД             = ПараметрыПрофиляНастроек.ИспользоватьУПД;
	Объект.ИспользоватьУКД             = ПараметрыПрофиляНастроек.ИспользоватьУКД;
	
	// Загружаем ТЧ из профиля настроек ЭДО.
	Объект.ИсходящиеДокументы.Очистить();
	Если ЗначениеЗаполнено(ПараметрыПрофиляНастроек.ИсходящиеДокументы) Тогда
		Объект.ИсходящиеДокументы.Загрузить(ПараметрыПрофиляНастроек.ИсходящиеДокументы.Выгрузить());
		Объект.ИсходящиеДокументы.Сортировать("Приоритет");
	КонецЕсли;
	
	Объект.СтатусПодключения = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЭтоПрямойОбмен(ПараметрыПрофиляНастроек.СпособОбменаЭД) Тогда
		Объект.ИдентификаторКонтрагента = "";
		Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
		Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
	Иначе
		Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, Объект.ИдентификаторКонтрагента);
	КонецЕсли;
	ОпределитьИспользуемыеСпособыОбменаЭД(Объект.ПрофильНастроекЭДО, Объект.ИдентификаторКонтрагента);
	
	ОбновитьСтатусПодключения();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИсходящиеДокументыПрофильНастроекЭДОПриИзмененииНаСервере(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеСтроки.ПрофильНастроекЭДО,
		"ИдентификаторОрганизации, СпособОбменаЭД, ШаблонТекстаПриглашений");
		
	ДанныеСтроки.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
	ДанныеСтроки.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
	ДанныеСтроки.ИдентификаторКонтрагента = "";
	
	Если ПараметрыПрофиляНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		Если ЧерезОператораЭДО Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
			НайденныеСтроки = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторКонтрагента) Тогда
					ДанныеСтроки.ИдентификаторКонтрагента = Строка.ИдентификаторКонтрагента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	ИначеЕсли ПараметрыПрофиляНастроек.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
		Если ЧерезОператораЭДО Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
			НайденныеСтроки = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(Строка.ИдентификаторКонтрагента) Тогда
					ДанныеСтроки.ИдентификаторКонтрагента = Строка.ИдентификаторКонтрагента;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Объект.ТекстПриглашения    = ПараметрыПрофиляНастроек.ШаблонТекстаПриглашений;
			Объект.СтатусПодключения   = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
			Объект.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
			ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
		КонецЕсли;
	Иначе
		УстановитьИдентификатор("Контрагенты", Объект.Контрагент, ДанныеСтроки.ИдентификаторКонтрагента);
	КонецЕсли;
	
	ОпределитьИспользуемыеСпособыОбменаЭД();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользуемыеСпособыОбменаЭД(ПрофильНастроекЭДО = Неопределено, ИдентификаторКонтрагента = Неопределено)
	
	ЧерезОператораЭДО     = Ложь;
	ЧерезКаталог          = Ложь;
	ЧерезЭлектроннуюПочту = Ложь;
	ЧерезFTP              = Ложь;
	
	// При изменении Профиля настроек ЭДО в шапке Настроек.
	Если ПрофильНастроекЭДО <> Неопределено Тогда
		ПараметрыПрофиляНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
			"Организация, ИдентификаторОрганизации, СпособОбменаЭД");
	КонецЕсли;
	
	// Получим электронную почту контрагента для дальнейшего использования.
	ЭлектроннаяПочтаКонтрагента = ОбменСКонтрагентамиПереопределяемый.АдресЭлектроннойПочтыКонтрагента(Объект.Контрагент);
	
	Для каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
		
		Если ПрофильНастроекЭДО <> Неопределено Тогда
			СтрокаТаблицы.ПрофильНастроекЭДО       = ПрофильНастроекЭДО;
			СтрокаТаблицы.СпособОбменаЭД           = ПараметрыПрофиляНастроек.СпособОбменаЭД;
			СтрокаТаблицы.ИдентификаторОрганизации = ПараметрыПрофиляНастроек.ИдентификаторОрганизации;
		КонецЕсли;
			
		Если ИдентификаторКонтрагента <> Неопределено Тогда
			СтрокаТаблицы.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском")
			ИЛИ СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО")Тогда
			ЧерезОператораЭДО = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаДляПриглашения) Тогда
				Объект.ЭлектроннаяПочтаДляПриглашения = ЭлектроннаяПочтаКонтрагента;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
			ЧерезЭлектроннуюПочту = Истина;
			
			Если Не ЗначениеЗаполнено(Объект.ЭлектроннаяПочтаКонтрагента) Тогда
				Объект.ЭлектроннаяПочтаКонтрагента = ЭлектроннаяПочтаКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда
			ЧерезКаталог = Истина;
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.ПрофильНастроекЭДО, "РесурсВходящихДокументов");
			
			ШаблонНаименование = НСтр("ru = '%1_%2'");
			ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагента");
			НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаНаименованиеКонтрагента);
			
			ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеОрганизации");
			НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, ИмяРеквизитаНаименованиеОрганизации);
			
			Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
				Если Не ЗначениеЗаполнено(Объект.КаталогВходящихДокументов)  Тогда
					Объект.КаталогВходящихДокументов = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонНаименование,
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""),
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""))," ", "");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.КаталогИсходящихДокументов) Тогда
					Объект.КаталогИсходящихДокументов = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонНаименование,
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""),
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""))," ", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
			ЧерезFTP = Истина;
			
			ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.ПрофильНастроекЭДО, "РесурсВходящихДокументов");
			
			ШаблонНаименование = НСтр("ru = '%1_%2'");
			ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеКонтрагента");
			НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, ИмяРеквизитаНаименованиеКонтрагента);
			
			ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"НаименованиеОрганизации");
			НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, ИмяРеквизитаНаименованиеОрганизации);
			
			Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
				Если Не ЗначениеЗаполнено(Объект.КаталогВходящихДокументовFTP) Тогда
					Объект.КаталогВходящихДокументовFTP = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонНаименование,
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""),
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""))," ", "");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.КаталогИсходящихДокументовFTP) Тогда
					Объект.КаталогИсходящихДокументовFTP = СтрЗаменить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонНаименование,
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеОрганизации, ""),
						ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеКонтрагента, ""))," ", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.ИсходящийДокумент = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
			ИспользуетсяКаталогВПрограмме = Истина;
			Если СтрокаТаблицы.Формировать Тогда
				ИспользуетсяКаталогВСоглашении = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКаталога(ПутьККаталогу, КаталогДокументов)
	
#Если НЕ ВебКлиент Тогда
		
	ДиалогКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогКаталога.Заголовок = НСтр("ru = 'Укажите каталог для обмена ЭД'");
	
	КаталогОбмена = ПутьКРодительскомуКаталогуПрофильНастроекЭДО;
	Если ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			ПутьККаталогу);
		
		КаталогНаДиске  = Новый Файл(ПутьОбмена);
		Если КаталогНаДиске.Существует() Тогда
			КаталогОбмена = ПутьОбмена;
		КонецЕсли;
	КонецЕсли;
	ДиалогКаталога.Каталог = КаталогОбмена;
	
	Если ДиалогКаталога.Выбрать() Тогда
		СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДиалогКаталога.Каталог, Истина);
		Модифицированность = Не КаталогДокументов = СтруктураФайла.Имя;
		КаталогДокументов = СтруктураФайла.Имя;
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеПоТабЧасти(ВыбранноеЗначение, АдресВХранилище = Неопределено)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отпечаток = "";
	ДвоичныеДанные = Неопределено;
	ПредставлениеСертификата = "";
	
	Если АдресВХранилище <> Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
	КонецЕсли;
	
	ДанныеСтроки = Объект.СертификатыПодписейКонтрагента.НайтиПоИдентификатору(ВыбранноеЗначение);
	ДанныеСтроки.Отпечаток  = Отпечаток;
	ДанныеСтроки.ПредставлениеСертификатаКонтрагента = ПредставлениеСертификата;

	ДанныеСтроки.АдресФайлаВХранилище = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВХранилищеСертификат(АдресВХранилище = Неопределено)
	
	ПредставлениеСертификата = "";
	
	Если АдресВХранилище <> Неопределено Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		Исключение
			ТекстСообщения = НСтр("ru = 'Файл сертификата должен быть в формате DER X.509, операция прервана.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
		
		ПредставлениеСертификата = ЭлектроннаяПодписьКлиентСервер.ПредставлениеСубъекта(СертификатКриптографии);
		
	КонецЕсли;
	
	ПредставлениеСертификатаКонтрагентаДляШифрования = ПредставлениеСертификата;
	
	АдресСертификатаКонтрагентаДляШифрования = АдресВХранилище;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификатор(ИмяСправочника, СсылкаНаИсточникИдентификатора, ИскомыйИдентификатор)
	
	Если ИмяСправочника = "Контрагенты" Тогда
		ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
		ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаИсточникИдентификатора,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
		
		СтрокаЗаполнения = Строка(ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента])
			+ "_" + Строка(ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
		Если Прав(СтрокаЗаполнения, 1) = "_" Тогда
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "_", "");
		КонецЕсли;
		ИскомыйИдентификатор = СокрЛП(СтрокаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользованиеИдентификатораКонтрагентаУникально(Отказ)
	
	// Проверка на уникальное использование настройки ЭДО по реквизитам: ИдентификаторКонтрагента.
	Отбор = Новый Структура;
	Отбор.Вставить("Формировать", Истина);
	Таблица = Объект.ИсходящиеДокументы.Выгрузить(Отбор);
	
	МассивИдКонтрагентов = Таблица.ВыгрузитьКолонку("ИдентификаторКонтрагента");
	
	ЗапросПоИД = Новый Запрос;
	ЗапросПоИД.УстановитьПараметр("ТекущаяНастройка",     Объект.Ссылка);
	ЗапросПоИД.УстановитьПараметр("Организация",          Объект.Организация);
	ЗапросПоИД.УстановитьПараметр("ПрофильНастроекЭДО",   Объект.ПрофильНастроекЭДО);
	ЗапросПоИД.УстановитьПараметр("Контрагент",           Объект.Контрагент);
	ЗапросПоИД.УстановитьПараметр("МассивИдКонтрагентов", МассивИдКонтрагентов);
	ЗапросПоИД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация КАК Организация,
	|	НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	НЕ НастройкиЭДОИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка <> &ТекущаяНастройка
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.Организация = &Организация
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.ПрофильНастроекЭДО = &ПрофильНастроекЭДО
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|	И НастройкиЭДОИсходящиеДокументы.Формировать
	|	И НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента В (&МассивИдКонтрагентов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация,
	|	НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента";
	
	Результат = ЗапросПоИД.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ШаблонСообщения = НСтр("ru = 'Идентификатор контрагента %1
			|уже используется в настройке ЭДО между контрагентом %2 и организацией %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ИдентификаторКонтрагента,
			Выборка.Контрагент, Выборка.Организация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусПодключения(ОбновитьДатуИзмененияСтатуса = Ложь)
	
	Если ОбновитьДатуИзмененияСтатуса Тогда
		ОбменСКонтрагентамиВнутренний.ОбновитьДатуИзмененияСтатуса(Объект);
	КонецЕсли;
	
	СтатусПодключения = "" + Объект.СтатусПодключения;
	Если ЗначениеЗаполнено(Объект.ДатаИзмененияСтатуса) Тогда
		СтатусПодключения = СтатусПодключения + " "+ "("+ Формат(Объект.ДатаИзмененияСтатуса ,"ДЛФ=D")+")";
	КонецЕсли;
	
	Элементы.ОписаниеОшибки.Видимость = ЗначениеЗаполнено(Объект.ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПодменюЭДО()
	
	ВидыЭД = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(ВидыЭД);
	Если ВидыЭД.Найти(Перечисления.ВидыЭД.КаталогТоваров) = Неопределено Тогда
		Элементы.КомандыЭДО.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Тестирование настроек ЭДО
&НаСервере
Функция ПараметрыПрофиляНастроекЭДО(ПрофильНастроекЭДО)
	
	ПараметрыПрофиляНастроекЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрофильНастроекЭДО,
		"РесурсВходящихДокументов, СертификатыПодписейОрганизации");
	ВыборкаСертификатов = ПараметрыПрофиляНастроекЭДО.СертификатыПодписейОрганизации.Выбрать();
	СоотвСертификатовИИхСтруктур = Новый Соответствие;
	Если ВыборкаСертификатов.Количество() > 0 Тогда
		Пока ВыборкаСертификатов.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСертификатов.Сертификат.Пользователь)
				ИЛИ ВыборкаСертификатов.Сертификат.Пользователь = Пользователи.ТекущийПользователь() Тогда
				Сертификат = ВыборкаСертификатов.Сертификат;
				ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(Сертификат);
				ПараметрыСертификата.Вставить("СертификатПодписи", Сертификат);
				СоотвСертификатовИИхСтруктур.Вставить(Сертификат, ПараметрыСертификата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыПрофиляНастроекЭДО.Вставить("СертификатыПодписейОрганизации", СоотвСертификатовИИхСтруктур);
	
	Возврат ПараметрыПрофиляНастроекЭДО;
	
КонецФункции

&НаСервере
Процедура ТестСвязиПрямогоОбменаНаСервере(КаталогВходящихДокументов, КаталогИсходящихДокументов, ПрофильНастроекЭДО)
	
	// Блок проверки доступа к каталогам.
	ШаблонСообщения = НСтр("ru = 'Проверка доступа к каталогам обмена.
		|%1'");
	Попытка
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогВходящихДокументов)
			И ОбменСКонтрагентамиСлужебныйВызовСервера.ПроверитьДоступностьКаталогаДляПрямогоОбмена(КаталогИсходящихДокументов) Тогда
			РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Иначе
			РезультатТеста = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("107");
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("107");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1.'") + " " + ТекстСообщения;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильНастроекЭДО);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ТестСвязиОбменаЧерезFTPНаСервере(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов)
	
	ОбменСКонтрагентамиСлужебный.ТестСвязиОбменаЧерезFTP(ПрофильНастроекЭДО, КаталогВходящихДокументов, КаталогИсходящихДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФлагУПДУКД()
	
	Для каждого Строка Из Объект.ИсходящиеДокументы Цикл
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			Строка.Формировать = Не Объект.ИспользоватьУПД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			Строка.Формировать = Не Объект.ИспользоватьУКД;
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если Объект.ИспользоватьУПД Тогда
				ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)";
				Строка.ТребуетсяОтветнаяПодпись = Истина;
			Иначе
				ВерсияФормата = "ФНС 5.02";
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			ЗаполнитьПредставлениеРегламентаЭДО(Строка);
		КонецЕсли;
		
		Если Строка.ИсходящийДокумент = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			
			Если Объект.ИспользоватьУКД Тогда
				ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)";
				Строка.ТребуетсяОтветнаяПодпись = Истина;
			Иначе
				ВерсияФормата = "ФНС 5.02";
				Строка.ТребуетсяОтветнаяПодпись = Ложь;
			КонецЕсли;
			Строка.ВерсияФормата = ВерсияФормата;
			
			ЗаполнитьПредставлениеРегламентаЭДО(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставлениеНастроек(Объект)
	
	Если Не Объект.РасширенныйРежимНастройкиСоглашения Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.ИсходящиеДокументы Цикл
		
		ЗаполнитьПредставлениеРегламентаЭДО(ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРегламентЭДОАкта(Идентификатор)
	
	// Установка флагов "Подписывать, Извещения, Ответная подпись"
	// и обновление заголовка гиперссылки.
	
	СтрокаДляРедактирования = Объект.ИсходящиеДокументы.НайтиПоИдентификатору(Идентификатор);
	Если Не СтрокаДляРедактирования.ИсходящийДокумент = Перечисления.ВидыЭД.АктИсполнитель Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(СтрокаДляРедактирования.ВерсияФормата) = ВРег("ФНС 5.01 (С 2016Г.)") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДляРедактирования.ТребуетсяОтветнаяПодпись = Истина;
	СтрокаДляРедактирования.ТребуетсяИзвещениеОПолучении = Истина;
	
	ЗаполнитьПредставлениеРегламентаЭДО(СтрокаДляРедактирования);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьПредставлениеРегламентаЭДО(ТекСтрока)

	Профиль = ""+ТекСтрока.ПрофильНастроекЭДО;
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	Если ТекСтрока.ИспользоватьЭП И ИспользоватьЭП Тогда
		Подпись = НСтр("ru = 'подпись'");
	Иначе
		Подпись = НСтр("ru = 'без подписи'");
	КонецЕсли;
	
	ОтветнаяПодпись = "";
	Если ТекСтрока.ТребуетсяОтветнаяПодпись И ИспользоватьЭП Тогда
		ОтветнаяПодпись = НСтр("ru = 'ответная подпись'");
	КонецЕсли;
	
	ИзвещениеОПолучении = "";
	Если ТекСтрока.ТребуетсяИзвещениеОПолучении Тогда
		ИзвещениеОПолучении = НСтр("ru = 'извещение о получении'");
	КонецЕсли;
	
	ДополнительныеНастройки = "";
	ДополнительныеНастройки = ДополнительныеНастройки
		+ Профиль
		+ ","+ " "
		+ Подпись
		+ ?(Не ИзвещениеОПолучении = "",","+ " ", "")
		+ ИзвещениеОПолучении
		+ ?(Не ОтветнаяПодпись = "",","+ " ", "")
		+ ОтветнаяПодпись;
		
	ТекСтрока.ДополнительныеНастройки = ДополнительныеНастройки;
		
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// Служебные обработчики асинхронных диалогов

&НаКлиенте
Процедура ЗакончитьИзменениеШифрованияДанных(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			ПустаяСсылка = ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка");
			Объект.СертификатОрганизацииДляРасшифровки = ПустаяСсылка;
			
			// Очистка сертификата контрагента
			ПоместитьВХранилищеСертификат();
		Иначе
			Объект.ШифроватьДанныеПакетаЭД = Не Объект.ШифроватьДанныеПакетаЭД;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьИзменениеПроверкиСертификатов(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			Объект.СертификатыПодписейКонтрагента.Очистить();
		Иначе
			Объект.ПроверятьСертификатыПодписей = Не Объект.ПроверятьСертификатыПодписей;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОбработкуПриглашений(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО",               Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
	Действие = "";
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Действие", Действие) Тогда
		Если Действие = "Принять" Тогда
			ПараметрыФормы.Вставить("Принять", Истина);
		ИначеЕсли Действие = "Отклонить" Тогда
			ПараметрыФормы.Вставить("Отклонить", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроекПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = "Отменить" Тогда
			Возврат;
		ИначеЕсли Модифицированность Тогда
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	СертификатыКПроверке = Новый Структура;
	СертификатыКПроверке.Вставить("СертификатыПодписейОрганизации", Новый Соответствие);
	
	Если ЧерезОператораЭДО Тогда
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через сервис ЭДО. Подождите...'"));
	КонецЕсли;
	
	ТестСвязиСервисаЭДОТакском();
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОТакском()
	
	Отбор = Новый Структура;
	Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском"));
	СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
	
	Контекст = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ТестСвязиСервиса1СЭДО", ЭтотОбъект, Контекст);
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицыИсходящихДокументов) Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПрофильНастроекЭДО", СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
	Контекст.Вставить("ОповещениеПослеВыполнения", Оповещение);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервиса1СЭДО(РезультатВыполнения = Неопределено, Контекст = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
	СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
	
	Оповещение = Новый ОписаниеОповещения("ТестНастроекПрямогоЭДО", ЭтотОбъект);
	Если Не ЗначениеЗаполнено(СтрокаТаблицыИсходящихДокументов) Тогда
		
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПрофильНастроекЭДО", СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
	Контекст.Вставить("ОповещениеПослеВыполнения", Оповещение);

	Если (ТипЗнч(ПараметрыАутентификацииНаСайте) <> Тип("Структура")
		ИЛИ Не ЗначениеЗаполнено(ПараметрыАутентификацииНаСайте.Пароль))
		И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Новый ОписаниеОповещения("ТестСвязиСервисаЭДОАвторизация", ЭтотОбъект, Контекст),
			ЭтотОбъект);
	Иначе
		ТестСвязиСервисаЭДОАвторизация(ПараметрыАутентификацииНаСайте, Контекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестСвязиСервисаЭДОАвторизация(ПараметрыАутентификации, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыАутентификации) <> Тип("Структура")
		И ИнтернетПоддержкаПользователейКлиентСервер.ДоступноПодключениеИнтернетПоддержки() Тогда
			
		ПараметрыАутентификацииНаСайте = Неопределено;
		// Пользователь отказался от ввода логина и пароля.
		Возврат;
	КонецЕсли;
	
	ПараметрыАутентификацииНаСайте = ПараметрыАутентификации;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковПроверитьСвязьЭДО", ЭтотОбъект, Контекст);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроекПрямогоЭДО(РезультатВыполнения = Неопределено, Контекст = Неопределено) Экспорт
	
	Если ЧерезЭлектроннуюПочту Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);

		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через электронную почту. Подождите...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		РаботаСПочтовымиСообщениямиКлиент.ПроверитьУчетнуюЗапись(ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов);
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если ЧерезКаталог Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Состояние(НСтр("ru = 'Тест настроек.'"),
		,
		НСтр("ru = 'Выполняется тестирование обмена ЭД через каталог. Подождите...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов;
		
		ТестСвязиПрямогоОбменаНаСервере(
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогВходящихДокументов),
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогИсходящихДокументов),
			СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
	Если ЧерезFTP Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СпособОбменаЭД", ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP"));
		СтрокаТаблицыИсходящихДокументов = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		
		Состояние(НСтр("ru = 'Тест настроек.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена ЭД через FTP. Подождите...'"));
		ПараметрыПрофиляНастроекЭДО = ПараметрыПрофиляНастроекЭДО(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО);
		
		ПутьКРодительскомуКаталогуПрофильНастроекЭДО = ПараметрыПрофиляНастроекЭДО.РесурсВходящихДокументов;
		
		ТестСвязиОбменаЧерезFTPНаСервере(СтрокаТаблицыИсходящихДокументов[0].ПрофильНастроекЭДО,
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогВходящихДокументовFTP),
			ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьКРодительскомуКаталогуПрофильНастроекЭДО,
			Объект.КаталогИсходящихДокументовFTP));
		Отбор.Вставить("Формировать", Истина);
		Отбор.Вставить("ИспользоватьЭП", Истина);
		ПрофилиСЭП = Объект.ИсходящиеДокументы.НайтиСтроки(Отбор);
		Если ПрофилиСЭП.Количество() > 0 Тогда
			ВыполнитьПроверкуСертификата(ПрофилиСЭП[0].ПрофильНастроекЭДО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковПроверитьСвязьЭДО(Отпечатки, Контекст = Неопределено) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
												МассивОтпечатковСертификатов, Контекст.ПрофильНастроекЭДО);
	
	МассивСертификатов = Новый Массив;
	Для Каждого КлючЗначение Из Соответствие Цикл
		МассивСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(МассивСертификатов) Тогда
		ШаблонСообщения = НСтр("ru = 'Тест обмена по профилю: %1.
									|В профиле нет доступных сертификатов. Тест не выполнен.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контекст.ПрофильНастроекЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		Возврат;
	КонецЕсли;
	
	ОбработкаПолученияМаркера = Новый ОписаниеОповещения("ПолучениеМаркераДляВыбранногоСертификата", ЭтотОбъект, Контекст);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ДействияПослеТестаСвязиЭДО", ЭтотОбъект, Контекст);
	
	ОписаниеДанных = Новый Структура;
	
	ШаблонОперация = НСтр("ru = 'Тест аутентификации: %1'");
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОперация, Контекст.ПрофильНастроекЭДО);
	ОписаниеДанных.Вставить("Операция",            Операция);

	ОписаниеДанных.Вставить("ОтборСертификатов",   МассивСертификатов);
	ОписаниеДанных.Вставить("ИзменятьНабор",       Ложь);
	
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	ОписаниеДанных.Вставить("ЭтоАутентификация",   Истина);
	ОписаниеДанных.Вставить("Данные",              ОбработкаПолученияМаркера);
	
	ЭлектроннаяПодписьКлиент.Расшифровать(ОписаниеДанных, , ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеМаркераДляВыбранногоСертификата(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И Не РезультатВыполнения.ОписаниеДанных.Свойство("ВыбранныйСертификат") Тогда
		
		Возврат;
	КонецЕсли;
	РеквизитыПрофиляНастроекЭДО = ОбменСКонтрагентамиСлужебныйВызовСервера.РеквизитыПрофиляНастроекЭДО(Контекст.ПрофильНастроекЭДО);
	
	СтруктураПараметровЗапросаМаркера = Новый Структура;
	СтруктураПараметровЗапросаМаркера.Вставить("СертификатПодписи",        РезультатВыполнения.ОписаниеДанных.ВыбранныйСертификат.Ссылка);
	СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД",           РеквизитыПрофиляНастроекЭДО.СпособОбменаЭД);
	СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации);
	
	ЗашифрованныеДанные = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера,
		ПараметрыАутентификацииНаСайте);
	Если Не ЗначениеЗаполнено(ЗашифрованныеДанные) Тогда
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения.ОписаниеДанных.Данные = ЗашифрованныеДанные;
	ВыполнитьОбработкуОповещения(РезультатВыполнения.Оповещение, РезультатВыполнения.ОписаниеДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеТестаСвязиЭДО(РезультатВыполнения, Контекст = Неопределено) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Если РезультатВыполнения.Успех = Истина Тогда
			ШаблонСообщения = НСтр("ru = 'Тест обмена по профилю: %1
										|Пройден успешно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контекст.ПрофильНастроекЭДО);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПослеВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуСертификата(ПрофильЭДО, ДляАвторизации = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПрофильЭДО", ПрофильЭДО);
	ДополнительныеПараметры.Вставить("ДляАвторизации", ДляАвторизации);
	Оповещение = Новый ОписаниеОповещения(
		"ПослеПолученияОтпечатковВыполнитьПроверкуСертификатов", ЭтотОбъект, ДополнительныеПараметры);
		
	ВыдаватьОшибку = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, ВыдаватьОшибку);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковВыполнитьПроверкуСертификатов(Отпечатки, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Отпечатки) = Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковСертификатов = Новый Массив;
	
	Для Каждого КлючЗначение Из Отпечатки Цикл
		МассивОтпечатковСертификатов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ПрофильЭДО = ДополнительныеПараметры.ПрофильЭДО;
	ДляАвторизации = ДополнительныеПараметры.ДляАвторизации;
	
	Соответствие = ОбменСКонтрагентамиСлужебныйВызовСервера.СоответствиеДоступныхСертификатовИПараметров(
		МассивОтпечатковСертификатов, ПрофильЭДО);
	
	Сертификат = Неопределено;
	ПараметрыСертификата = Неопределено;
	ПарольПолучен = Ложь;
	Для Каждого КлючЗначение Из Соответствие Цикл
		ТекСертификат = КлючЗначение.Ключ;
		Если Сертификат = Неопределено Тогда
			// Если в соответствии нет сертификатов с сохраненным паролем, то для теста возьмем первый из списка сертификат.
			Сертификат = ТекСертификат;
			ПараметрыСертификата = КлючЗначение.Значение;
		КонецЕсли;
		Если КлючЗначение.Значение.Свойство("ПарольПолучен", ПарольПолучен) И ПарольПолучен = Истина Тогда
			Сертификат = ТекСертификат;
			ПараметрыСертификата = КлючЗначение.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Сертификат = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Тест обмена по профилю %1. В профиле нет доступных сертификатов.
			|Тест не выполнен.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПрофильЭДО);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ОбменСКонтрагентамиСлужебныйКлиент.ТестНастроекСПроверкойСертификата(Сертификат, ЭтаФорма, ДляАвторизации, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВключениеРасширенногоРежимаНастройки(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВключитьРасширенныйРежимНастройкиСоглашенияНаСервере();
		Объект.РасширенныйРежимНастройкиСоглашения = Не Объект.РасширенныйРежимНастройкиСоглашения;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	ЗаполнитьПредставлениеНастроек(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбработкаВыбора(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	// Для обновления представления сертификата на форме
	Если Результат = Истина Тогда
		ВыбраннаяСтрока = Элементы.СертификатыПодписейКонтрагента.ТекущаяСтрока;
		ДобавитьДанныеПоТабЧасти(ВыбраннаяСтрока, Адрес);
		
		ДанныеСтроки = Объект.СертификатыПодписейКонтрагента.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Элементы.СертификатыПодписейКонтрагента.ТекущиеДанные.ПредставлениеСертификатаКонтрагента = ДанныеСтроки.ПредставлениеСертификатаКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьИзменениеСостояния(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НастройкаЭДО",     Объект.Ссылка);
		ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Истина);
		ПараметрыФормы.Вставить("Отклонить",                  Истина);
		
		ОткрытьФорму("Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаСертификатаШифрования(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ПоместитьВХранилищеСертификат(Адрес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОрганизацииДляРасшифровкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатОрганизацииДляРасшифровкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьСертификатВТЧ(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСертификатВТЧ(ВыбранноеЗначение)
	
	Объект.СертификатОрганизацииДляРасшифровки = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтаФорма.ЧерезКаталог ИЛИ ЭтаФорма.ЧерезЭлектроннуюПочту ИЛИ ЭтаФорма.ЧерезFTP Тогда
		
		Если (ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки) И Не ЗначениеЗаполнено(ПредставлениеСертификатаКонтрагентаДляШифрования))
			ИЛИ (Не ЗначениеЗаполнено(Объект.СертификатОрганизацииДляРасшифровки) И ЗначениеЗаполнено(ПредставлениеСертификатаКонтрагентаДляШифрования)) Тогда
		
			ТекстСообщения = НСтр("ru = 'Для корректной работы шифрования необходимо
										|одновременно указывать сертификаты шифрования для организации и контрагента.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяФормыВыбораДоговора(ПараметрыОткрытия)
	
	ДоговорКонтрагентМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(Объект.ДоговорКонтрагента));
	КонтрагентМетаданные = Метаданные.НайтиПоТипу(ТипЗнч(Объект.Контрагент));
	ЭлементОтбора = Неопределено;
	Если Не (ДоговорКонтрагентМетаданные = Неопределено И КонтрагентМетаданные = Неопределено) Тогда 
		Если ДоговорКонтрагентМетаданные.Владельцы.Содержит(КонтрагентМетаданные) Тогда
			ЭлементОтбора = "Владелец";
		ИначеЕсли ДоговорКонтрагентМетаданные.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			ЭлементОтбора = "Контрагент";
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьОтборПоОрганизации = Ложь;
	Если Объект.ДоговорКонтрагента.Метаданные().Реквизиты.Найти("Организация") <> Неопределено
		И ТипЗнч(Объект.ДоговорКонтрагента.Организация) = ТипЗнч(Объект.Организация) Тогда
			ИспользоватьОтборПоОрганизации = Истина;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЭлементОтбора <> Неопределено Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(ЭлементОтбора, Объект.Контрагент);
		Если ИспользоватьОтборПоОрганизации Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Организация);
		КонецЕсли;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ИмяФормыВыбора = "Справочник."
		+ Объект.ДоговорКонтрагента.Метаданные().Имя + "."
		+ Объект.ДоговорКонтрагента.Метаданные().ОсновнаяФормаДляВыбора.Имя;
	
	Возврат ИмяФормыВыбора;
	
КонецФункции

&НаКлиенте
Процедура ДоговорКонтрагентаПродолжениеВыбора(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ДоговорКонтрагента = Результат;
		ДоговорКонтрагентаПриИзменении(Неопределено);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыПредставлениеСпособаОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ВходящиеДокументы.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
				
		СтандартнаяОбработка = Ложь;
				
		ОписаниеОповещения = Новый ОписаниеОповещения("ВходящиеДокументыТипДокументаПредставлениеНачалоВыбораЗавершить",ЭтотОбъект,ТекСтрока);
		ЭтаФорма.ПоказатьВыборИзСписка(ОписаниеОповещения, СоответствиеВидовИТипов.Получить(ТекСтрока.ВходящийДокумент),
			Элементы.ВходящиеДокументыПредставлениеСпособаОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДокументыТипДокументаПредставлениеНачалоВыбораЗавершить(ВыбранныйЭлемент, ТекСтрока) Экспорт 
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда
		ТекСтрока.СпособОбработки = ВыбранныйЭлемент.Значение;
		ТекСтрока.ПредставлениеСпособаОбработки = ВыбранныйЭлемент.Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредставленияТиповДокументов()
	
	Для Каждого СтрокаВидаЭД Из Объект.ВходящиеДокументы Цикл
		СписокВыбора = СоответствиеВидовИТипов.Получить(СтрокаВидаЭД.ВходящийДокумент);
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(СтрокаВидаЭД.СпособОбработки);
		Если ЭлементСписка <> Неопределено Тогда
			СтрокаВидаЭД.ПредставлениеСпособаОбработки = ЭлементСписка.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ЗаполнитьПоШаблонуНаСервере(Сред(Команда.Имя,10), СоответствиеВидовИТипов);
	ВывестиПредставленияТиповДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Знач ИмяШаблона, СоответствиеВидовИТипов)

	Объект.ВходящиеДокументы.Загрузить(ОбменСКонтрагентамиСлужебный.ТаблицаПредопределенногоПрофиля(ИмяШаблона));
	ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеВидовИТипов(СоответствиеВидовИТипов)

	СоответствиеВидовИТипов.Очистить();
	Для Каждого СтрокаВидаЭД Из Объект.ВходящиеДокументы Цикл
		СписокВыбора = ОбменСКонтрагентамиСлужебный.СписокОперацийВидаЭД(СтрокаВидаЭД.ВходящийДокумент, Истина, "Автоматически - ");
		СоответствиеВидовИТипов.Вставить(СтрокаВидаЭД.ВходящийДокумент, СписокВыбора);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДокументооборотаПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	
	ОбработатьИзменениеПрофиля = Ложь;
	Если Не ДанныеСтроки.ПрофильНастроекЭДО = Результат.ПрофильНастроекЭДО Тогда
		ОбработатьИзменениеПрофиля = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Результат, ,"ИсходящийДокумент");
	
	Модифицированность = Макс(Модифицированность, Результат.Модифицированность); 
	
	ЗаполнитьПредставлениеНастроек(Объект);
	
	Если ОбработатьИзменениеПрофиля Тогда
		ИсходящиеДокументыПрофильНастроекЭДОПриИзмененииНаСервере(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

