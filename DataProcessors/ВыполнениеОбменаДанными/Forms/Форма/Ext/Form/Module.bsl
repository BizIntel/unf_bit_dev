
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	АдресДляВосстановленияПароляУчетнойЗаписи = Параметры.АдресДляВосстановленияПароляУчетнойЗаписи;
	ЗакрытьПриУспешнойСинхронизации           = Параметры.ЗакрытьПриУспешнойСинхронизации;
	УзелИнформационнойБазы                    = Параметры.УзелИнформационнойБазы;
	ЗавершениеРаботыСистемы                   = Параметры.ЗавершениеРаботыСистемы;
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		
		Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			УзелИнформационнойБазы = ОбменДаннымиСервер.ГлавныйУзел();
		Иначе
			ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Не заданы параметры формы. Форма не может быть открыта.'"), Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьОшибки = ((ОбменДаннымиСервер.ГлавныйУзел() = УзелИнформационнойБазы) И КонфигурацияИзменена());
	
	// Устанавливаем заголовок формы.
	ШаблонЗаголовка = НСтр("ru = 'Синхронизация данных с ""%1""'");
	УстановитьПривилегированныйРежим(Истина);
	Заголовок       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, Строка(УзелИнформационнойБазы));
	УстановитьПривилегированныйРежим(Ложь);
	
	// Инициализируем роли пользователя
	РольДоступнаДобавлениеИзменениеОбменовДанными = ОбменДаннымиСервер.ЕстьПраваНаАдминистрированиеОбменов();
	РольДоступнаПолныеПрава                       = Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.ПанельТребуетсяОбновление.ТекущаяСтраница = ?(РольДоступнаПолныеПрава, 
		Элементы.ТребуетсяОбновлениеПолныеПрава, Элементы.ТребуетсяОбновлениеОграниченныеПрава);
		
	Элементы.ТекстТребуетсяОбновлениеПолныеПрава.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.ТекстТребуетсяОбновлениеПолныеПрава.Заголовок, УзелИнформационнойБазы);
		
	Элементы.ТекстТребуетсяОбновлениеОграниченныеПрава.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.ТекстТребуетсяОбновлениеОграниченныеПрава.Заголовок, УзелИнформационнойБазы);
	
	Элементы.ЗабылиПароль.Видимость = Не ПустаяСтрока(АдресДляВосстановленияПароляУчетнойЗаписи);
	
	СинхронизацияДанныхОтключена = Ложь;
	ВыполнитьОтправкуДанных      = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса")
		И ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		
		МодульАвтономнаяРабота = ОбщегоНазначения.ОбщийМодуль("АвтономнаяРабота");
		НеНапоминатьОДолгойСинхронизации = Не МодульАвтономнаяРабота.ФлагНастройкиВопросаОДолгойСинхронизации();
		
	Иначе
		НеНапоминатьОДолгойСинхронизации = Истина;
	КонецЕсли;
	
	ВидТранспортаСообщений = РегистрыСведений.НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелИнформационнойБазы);
	
	// При обмене в распределенной информационной базе через веб-сервис всегда переопределяем параметры аутентификации
	// (пользователь и пароль), сохраненные в информационной базе.
	// При обмене через веб-сервис для не-РИБ обменов параметры аутентификации (пароль) переопределяем (запрашиваем)
	// только, если пароль не сохранен в информационной базе.
	ИспользоватьТекущегоПользователяДляАутентификации = Ложь;
	ИспользоватьСохраненныеПараметрыАутентификации    = Ложь;
	ПарольСинхронизацииЗадан                          = Ложь;
	ПарольСинхронизацииСохранен                       = Ложь; // Пароль сохранен в безопасном хранилище (доступен в фоновом задании)
	WSПароль                                          = "";
	
	Если ВидТранспортаСообщений = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		
		Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы) Тогда
			// Это РИБ и обмен по WS, используем текущего пользователя и пароль из сессии.
			ИспользоватьТекущегоПользователяДляАутентификации = Истина;
			ПарольСинхронизацииЗадан = ОбменДаннымиСервер.ПарольСинхронизацииДанныхЗадан(УзелИнформационнойБазы);
			Если ПарольСинхронизацииЗадан Тогда
				WSПароль = ОбменДаннымиСервер.ПарольСинхронизацииДанных(УзелИнформационнойБазы);
			КонецЕсли;
			
		Иначе
			// Это не РИБ, читаем данные из настроек транспорта.
			НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(УзелИнформационнойБазы);
			ПарольСинхронизацииЗадан = НастройкиТранспорта.WSЗапомнитьПароль;
			Если ПарольСинхронизацииЗадан Тогда
				ПарольСинхронизацииСохранен = Истина;
				ИспользоватьСохраненныеПараметрыАутентификации = Истина;
				WSПароль = НастройкиТранспорта.WSПароль;
			Иначе
				// Используем данные из сессии, только если их нет в регистре.
				ПарольСинхронизацииЗадан = ОбменДаннымиСервер.ПарольСинхронизацииДанныхЗадан(УзелИнформационнойБазы);
				Если ПарольСинхронизацииЗадан Тогда
					ИспользоватьСохраненныеПараметрыАутентификации = Истина;
					WSПароль = ОбменДаннымиСервер.ПарольСинхронизацииДанных(УзелИнформационнойБазы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// Инициализируем текущий сценарий работы обмена.
	Если ЕстьОшибки Тогда
		
		СценарийКогдаЕстьОшибкиПриНачалеРаботы();
		
	ИначеЕсли ВидТранспортаСообщений <> Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		
		// Вид транспорта - обычные каналы связи или подключения по COM.
		ФоновоеЗаданиеИспользоватьПрогресс = Истина;
		СценарийОбменаОбычный();
		
	Иначе
		
		// Вид транспорта - подключение через интернет.
		ФоновоеЗаданиеИспользоватьПрогресс = Ложь;
		
		ВыполнитьОтправкуДанных = РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ВыполнитьОтправкуДанных(УзелИнформационнойБазы);
		
		Элементы.ГруппаПредупрежденияДолгойСинхронизации.Видимость = Не НеНапоминатьОДолгойСинхронизации;
		Элементы.ГруппаЗапросаПароля.Видимость                     = Не ПарольСинхронизацииЗадан;
		
		Если ПарольСинхронизацииЗадан И НеНапоминатьОДолгойСинхронизации Тогда
			
			// Сразу на выполнение обмена.
			Если ВыполнитьОтправкуДанных Тогда
				СценарийОбменаЧерезВебСервис_ОтправкаПолучениеОтправка();
			Иначе
				СценарийОбменаЧерезВебСервис();
			КонецЕсли;
			
		Иначе
			
			Если ВыполнитьОтправкуДанных Тогда
				СценарийОбменаЧерезВебСервисСЗапросомПароля_ОтправкаПолучениеОтправка();
			Иначе
				СценарийОбменаЧерезВебСервисСЗапросомПароля();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		ПроверятьРасхождениеВерсий = Истина;
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = ?(ПарольСинхронизацииЗадан И НеНапоминатьОДолгойСинхронизации,
		"ПарольСинхронизацииЗадан", "") + "/" + ?(НеНапоминатьОДолгойСинхронизации, "НеНапоминатьОДолгойСинхронизации", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация Тогда
		ЗавершитьВыполнениеДлительнойОперации(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПовторногоОткрытияФормы)
		И ПараметрыПовторногоОткрытияФормы.Свойство("НоваяНастройкаСинхронизацииДанных") Тогда
		
		НоваяНастройкаСинхронизацииДанных = ПараметрыПовторногоОткрытияФормы.НоваяНастройкаСинхронизацииДанных;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УзелИнформационнойБазы",                    НоваяНастройкаСинхронизацииДанных);
		ПараметрыФормы.Вставить("АдресДляВосстановленияПароляУчетнойЗаписи", АдресДляВосстановленияПароляУчетнойЗаписи);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		ОбменДаннымиКлиент.ОткрытьФормуПослеЗакрытияТекущей(ЭтотОбъект,
			"Обработка.ВыполнениеОбменаДанными.Форма.Форма", ПараметрыФормы, ПараметрыОткрытия);
		
	Иначе
		СохранитьФлагВопросаОДолгойСинхронизации();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиВЖурналРегистрации(Команда)
	
	ПараметрыФормы = ДанныеОтбораЖурналаРегистрации(УзелИнформационнойБазы);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбновление(Команда)
	
	Закрыть();
	ОбменДаннымиКлиент.УстановитьОбновлениеКонфигурации(ЗавершениеРаботыСистемы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗабылиПароль(Команда)
	
	ОбменДаннымиКлиент.ПриОткрытииИнструкцииКакИзменитьПарольСинхронизацииДанных(АдресДляВосстановленияПароляУчетнойЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ВыполнитьПереходДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСинхронизацию(Команда)
	
	ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПОСТАВЛЯЕМАЯ ЧАСТЬ
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПереходДалее()
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ВыполнениеОбменаДанными.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				РезультатВычисления = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				РезультатВычисления = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			Если ОшибкаРасхожденияВерсийПриПолученииДанных <> Неопределено И ОшибкаРасхожденияВерсийПриПолученииДанных.ЕстьОшибка Тогда
				
				ОбработатьОшибкуРасхожденияВерсий();
				Возврат;
				
			КонецЕсли;
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов.
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу
//  перехода.
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему
//  номеру перехода.
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы
//  помощника.
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию -
//  Ложь.
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(
									ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяОбработчикаПриОткрытии = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = "";
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = "";
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов с переходом далее.
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу
//  перехода.
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему
//  номеру перехода.
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы
//  помощника.
//  ИмяОбработчикаПриПереходеДалее (необязательный) - Строка. Имя функции-обработчика события перехода на следующую
//  страницу помощника.
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию -
//           Ложь.
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрокаПереходДалее(
									ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = Ложь;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = "";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМАЯ ЧАСТЬ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ЗапуститьПереходДалее()
	
	ПерейтиДалее      = Истина;
	ВыполнитьПереходДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуРасхожденияВерсий()
	
	Элементы.ВыполнениеОбменаДанными.ТекущаяСтраница = Элементы.ЗавершениеОбмена;
	Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = Элементы.ОшибкаРасхожденияВерсий;
	Элементы.ПанельДействий.ТекущаяСтраница = Элементы.ДействияПродолжитьОтмена;
	Элементы.ПродолжитьСинхронизацию.КнопкаПоУмолчанию = Истина;
	Элементы.ДекорацияОшибкаРасхожденияВерсий.Заголовок = ОшибкаРасхожденияВерсийПриПолученииДанных.ТекстОшибки;
	ПроверятьРасхождениеВерсий = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФлагВопросаОДолгойСинхронизации()
	
	Настройки = Неопределено;
	Если СохранитьФлагВопросаОДолгойСинхронизацииСервер(Не НеНапоминатьОДолгойСинхронизации, Настройки) Тогда
		ИзмененныеНастройки = Новый Массив;
		ИзмененныеНастройки.Добавить(Настройки);
		Оповестить("ИзмененыНастройкиПользователя", ИзмененныеНастройки, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПеременныеОбработки()
	
	// Инициализация переменных обработки
	ПроцентВыполнения                   = 0;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации     = "";
	ДопИнформацияВыполнение             = "";
	ДлительнаяОперация                  = Ложь;
	ДлительнаяОперацияЗавершена         = Ложь;
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	ЕстьОшибкаРасхожденияВерсий         = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаНеобходимостиПереходаНаНовыйОбмен()
	
	МассивСообщений = ПолучитьСообщенияПользователю(Истина);
	
	Если МассивСообщений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Количество = МассивСообщений.Количество();
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение      = МассивСообщений[Количество-1];
	ТекстСообщения = Сообщение.Текст;
	
	// При необходимости из сообщения удаляется идентификатор подсистемы.
	Если СтрНачинаетсяС(ТекстСообщения, "{ВыполненПереходНаНовыйОбмен}") Тогда
		
		ДанныеСообщения = ОбщегоНазначения.ЗначениеИзСтрокиXML(ТекстСообщения);
		
		Если ДанныеСообщения <> Неопределено
			И ТипЗнч(ДанныеСообщения) = Тип("Структура") Тогда
			
			ИмяПланаОбмена                    = ДанныеСообщения.ИмяПланаОбменаДляПереходаНаНовыйОбмен;
			КодУзлаПланаОбмена                = ДанныеСообщения.Код;
			НоваяНастройкаСинхронизацииДанных = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзлаПланаОбмена);
			
			ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата.Вставить("ПараметрыПовторногоОткрытияФормы",
				Новый Структура("НоваяНастройкаСинхронизацииДанных", НоваяНастройкаСинхронизацииДанных));
				
			ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата.Вставить("ЗакрытьФормуБезусловно", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыАутентификации = ?(ИспользоватьСохраненныеПараметрыАутентификации,
		Неопределено,
		Новый Структура("ИспользоватьТекущегоПользователя, Пароль",
			ИспользоватьТекущегоПользователяДляАутентификации, ?(ПарольСинхронизацииЗадан, Неопределено, WSПароль)));
	
	ПараметрыПодключения = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(УзелИнформационнойБазы, ПараметрыАутентификации);
	
	СинхронизацияДанныхОтключена = Ложь;
	СообщениеОбОшибкеПользователю = "";
	Если Не ОбменДаннымиСервер.ЕстьПодключениеККорреспонденту(УзелИнформационнойБазы, ПараметрыПодключения, СообщениеОбОшибкеПользователю) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось подключиться к приложению в Интернете, по причине ""%1"".
			|Убедитесь, что:
			|- введен правильный пароль;
			|- приложение доступно по указанному в настройках адресу.
			|Повторите попытку синхронизации.'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, СообщениеОбОшибкеПользователю);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		СинхронизацияДанныхОтключена = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьЗавершениеОбменаСОшибкой()
	
	ОбменДаннымиВызовСервера.ЗафиксироватьЗавершениеОбменаСОшибкой(
		УзелИнформационнойБазы,
		?(ФоновоеЗаданиеВыполняемоеДействие = 1, "ЗагрузкаДанных", "ВыгрузкаДанных"),
		ДатаНачалаОперации,
		СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОтбораЖурналаРегистрации(УзелИнформационнойБазы)
	
	ОтбираемыеСобытия = Новый Массив;
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных));
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	
	СостоянияОбменовДаннымиЗагрузка = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СостоянияОбменовДаннымиВыгрузка = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	Результат = Новый Структура;
	Результат.Вставить("СобытиеЖурналаРегистрации", ОтбираемыеСобытия);
	Результат.Вставить("ДатаНачала",    Мин(СостоянияОбменовДаннымиЗагрузка.ДатаНачала, СостоянияОбменовДаннымиВыгрузка.ДатаНачала));
	Результат.Вставить("ДатаОкончания", Макс(СостоянияОбменовДаннымиЗагрузка.ДатаОкончания, СостоянияОбменовДаннымиВыгрузка.ДатаОкончания));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьФлагВопросаОДолгойСинхронизацииСервер(Знач Флаг, Настройки = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса")
		И ОбменДаннымиПовтИсп.ЭтоАвтономноеРабочееМесто() Тогда
		
		МодульАвтономнаяРабота = ОбщегоНазначения.ОбщийМодуль("АвтономнаяРабота");
		НадоСохранять = Флаг <> МодульАвтономнаяРабота.ФлагНастройкиВопросаОДолгойСинхронизации();
		
		Если НадоСохранять Тогда
			МодульАвтономнаяРабота.ФлагНастройкиВопросаОДолгойСинхронизации(Флаг, Настройки);
		КонецЕсли;
		
	Иначе
		НадоСохранять = Ложь;
	КонецЕсли;
	
	Возврат НадоСохранять;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗавершитьВыполнениеДлительнойОперации(ИдентификаторЗадания)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОБРАБОТЧИКОВ СОБЫТИЙ ПЕРЕХОДОВ

////////////////////////////////////////////////////////////////////////////////
// Общие страницы обмена

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	ИнициализироватьПеременныеОбработки();
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее                      = Ложь;
	ФоновоеЗаданиеВыполняемоеДействие = 1;
	
	Если Не СинхронизацияДанныхОтключена Тогда
		ФоновоеЗаданиеЗапуститьНаКлиенте(ФоновоеЗаданиеВыполняемоеДействие,
			"Обработки.ВыполнениеОбменаДанными.ВыполнитьЗапускОбменаДанными",
			Отказ);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗагрузкаДанных_ОбработкаДлительнойОперации_Окончание(Отказ, ПерейтиДалее)
	
	Если ЕстьОшибки Или ДлительнаяОперацияЗавершенаСОшибкой Тогда
		ЗафиксироватьЗавершениеОбменаСОшибкой();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	ИнициализироватьПеременныеОбработки();
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее                      = Ложь;
	ФоновоеЗаданиеВыполняемоеДействие = 2;
	
	ФоновоеЗаданиеЗапуститьНаКлиенте(ФоновоеЗаданиеВыполняемоеДействие,
		"Обработки.ВыполнениеОбменаДанными.ВыполнитьЗапускОбменаДанными",
		Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ВыгрузкаДанных_ОбработкаДлительнойОперации_Окончание(Отказ, ПерейтиДалее)
	
	Если ЕстьОшибки Или ДлительнаяОперацияЗавершенаСОшибкой Тогда
		ЗафиксироватьЗавершениеОбменаСОшибкой();
	Иначе
		Если ДлительнаяОперацияЗавершена Тогда
			ОбменДаннымиВызовСервера.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(
				УзелИнформационнойБазы,
				ДатаНачалаОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗавершениеОбмена_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ПанельДействий.ТекущаяСтраница = Элементы.ДействияЗакрыть;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
	
	СтраницаОбменЗавершенСОшибкой = ?(РольДоступнаДобавлениеИзменениеОбменовДанными,
				Элементы.ОбменЗавершенСОшибкойДляАдминистратора,
				Элементы.ОбменЗавершенСОшибкой);
	
	Если СинхронизацияДанныхОтключена Тогда
		
		Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = Элементы.ОбменЗавершенСОшибкойПодключения;
		
	ИначеЕсли ЕстьОшибки Тогда
		
		Если ТребуетсяОбновление Или ОбменДаннымиВызовСервера.ТребуетсяУстановкаОбновления() Тогда
			Если РольДоступнаПолныеПрава Тогда 
				Элементы.ПанельДействий.ТекущаяСтраница = Элементы.ДействияУстановитьЗакрыть;
				Элементы.УстановитьОбновление.КнопкаПоУмолчанию = Истина;
			КонецЕсли;
			Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = Элементы.ТребуетсяОбновление;
		Иначе
			Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = СтраницаОбменЗавершенСОшибкой;
		КонецЕсли;
		
	Иначе
		
		Элементы.СтатусЗавершенияОбмена.ТекущаяСтраница = Элементы.ОбменЗавершенУспешно;
		
	КонецЕсли;
	
	// Обновляем все открытые динамические списки.
	ОбменДаннымиКлиент.ОбновитьВсеОткрытыеДинамическиеСписки();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗавершениеОбмена_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	Оповестить("ВыполненОбменДанными");
	
	Если ЗакрытьПриУспешнойСинхронизации
		И Не СинхронизацияДанныхОтключена
		И Не ЕстьОшибки Тогда
		
		Закрыть();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Страницы обмена через Веб-сервис

&НаКлиенте
Функция Подключаемый_ЗапросПароляПользователя_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ВыполнитьОбмен.КнопкаПоУмолчанию = Истина;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ЗапросПароляПользователя_ПриПереходеДалее(Отказ)
	
	Если ПустаяСтрока(WSПароль) Тогда
		НСтрока = НСтр("ru = 'Не указан пароль.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "WSПароль",, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	СохранитьФлагВопросаОДолгойСинхронизации();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПроверитьПодключение();
	Если СинхронизацияДанныхОтключена Тогда
		Отказ = Истина;
	КонецЕсли;
	ПерейтиДалее = НЕ Отказ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОБРАБОТКИ ФОНОВЫХ ЗАДАНИЙ

&НаКлиенте
Процедура ФоновоеЗаданиеЗапуститьНаКлиенте(Действие, ИмяЗадания, Отказ)
	
	// Т.к. в фоновом задании параметры сеанса не доступны, то если пароль не сохранен в базе, его надо передать с формы.
	ПараметрыАутентификации = ?(ИспользоватьСохраненныеПараметрыАутентификации,
		Неопределено,
		Новый Структура("ИспользоватьТекущегоПользователя, Пароль",
			ИспользоватьТекущегоПользователяДляАутентификации, ?(ПарольСинхронизацииСохранен, Неопределено, WSПароль)));
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяЗадания",                          ИмяЗадания);
	ПараметрыЗадания.Вставить("Отказ",                               Отказ);
	ПараметрыЗадания.Вставить("УзелИнформационнойБазы",              УзелИнформационнойБазы);
	ПараметрыЗадания.Вставить("ВыполнятьЗагрузку",                   ФоновоеЗаданиеВыполняемоеДействие = 1);
	ПараметрыЗадания.Вставить("ВыполнятьВыгрузку",                   ФоновоеЗаданиеВыполняемоеДействие = 2);
	ПараметрыЗадания.Вставить("ВидТранспортаСообщенийОбмена",        ВидТранспортаСообщений);
	ПараметрыЗадания.Вставить("ДлительнаяОперация",                  ДлительнаяОперация);
	ПараметрыЗадания.Вставить("ИдентификаторДлительнойОперации",     ИдентификаторДлительнойОперации);
	ПараметрыЗадания.Вставить("ИдентификаторФайлаСообщенияВСервисе", ИдентификаторФайлаСообщенияВСервисе);
	ПараметрыЗадания.Вставить("ПараметрыАутентификации",             ПараметрыАутентификации);
	
	Результат = ФоновоеЗаданиеЗапуститьНаСервере(ПараметрыЗадания, ОшибкаРасхожденияВерсийПриПолученииДанных, ПроверятьРасхождениеВерсий);
	
	Если Результат = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания  = Ложь;
		ПараметрыОжидания.ВыводитьСообщения     = Истина;
		
		Если ФоновоеЗаданиеИспользоватьПрогресс Тогда
			ПараметрыОжидания.ВыводитьПрогрессВыполнения     = Истина;
			ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполненияФоновогоЗадания", ЭтотОбъект);
			ПараметрыОжидания.Интервал                       = 1;
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеФоновогоЗадания", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		ФоновоеЗаданиеРезультатВыполнения = Результат;
		ПодключитьОбработчикОжидания("РезультатВыполненияФоновогоЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	ФоновоеЗаданиеРезультатВыполнения = Результат;
	РезультатВыполненияФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессВыполненияФоновогоЗадания(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Прогресс.Прогресс <> Неопределено Тогда
		СтруктураПрогресса      = Прогресс.Прогресс;
		ПроцентВыполнения       = СтруктураПрогресса.Процент;
		ДопИнформацияВыполнение = СтруктураПрогресса.Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияФоновогоЗадания()
	
	ФоновоеЗаданиеПолучитьРезультатНаСервере();
	
	// Если обмен данных выполняется с приложением в интернете, то надо дождаться окончания выполнения синхронизации
	// на стороне корреспондента.
	Если ДлительнаяОперация Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ЗавершениеДлительнойОперации", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	ДлительнаяОперацияЗавершенаСОшибкой = Ложь;
	СообщениеОбОшибке                   = "";
	
	ПараметрыАутентификации = ?(ИспользоватьСохраненныеПараметрыАутентификации,
		Неопределено,
		Новый Структура("ИспользоватьТекущегоПользователя, Пароль",
			ИспользоватьТекущегоПользователяДляАутентификации, ?(ПарольСинхронизацииЗадан, Неопределено, WSПароль)));
	
	СостояниеОперации = ОбменДаннымиВызовСервера.СостояниеДлительнойОперацииДляУзлаИнформационнойБазы(
		ИдентификаторДлительнойОперации,
		УзелИнформационнойБазы,
		ПараметрыАутентификации,
		СообщениеОбОшибке);
	
	Если СостояниеОперации = "Active" Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
	Иначе
		
		Если СостояниеОперации <> "Completed" Тогда
			ДлительнаяОперацияЗавершенаСОшибкой = Истина;
			ЕстьОшибки                          = Истина;
		КонецЕсли;
		
		ДлительнаяОперация              = Ложь;
		ДлительнаяОперацияЗавершена     = Истина;
		ИдентификаторДлительнойОперации = "";
		
		ПодключитьОбработчикОжидания("ЗавершениеДлительнойОперации", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеДлительнойОперации()
	
	Если ФоновоеЗаданиеИспользоватьПрогресс Тогда
		ПроцентВыполнения       = 100;
		ДопИнформацияВыполнение = "";
	КонецЕсли;
	
	Если ДлительнаяОперацияЗавершенаСОшибкой Тогда
		ИдентификаторФайлаСообщенияВСервисе = "";
	Иначе
		
		// Если выполнялось длительное получение данных из приложения в интернете,
		// то необходимо загрузить полученный файл с данными в базу.
		Если ФоновоеЗаданиеВыполняемоеДействие = 1 
			И ЗначениеЗаполнено(ИдентификаторФайлаСообщенияВСервисе) Тогда
				
			ФоновоеЗаданиеЗапуститьНаКлиенте(ФоновоеЗаданиеВыполняемоеДействие,
				"Обработки.ВыполнениеОбменаДанными.ВыполнитьЗагрузкуПолученногоИзИнтернетаФайла",
				Ложь);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторФайлаСообщенияВСервисе) Тогда
		ПослеВыполненияФоновогоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания()
	
	// Выполнен переход на новый обмен. Необходимо закрыть форму и открыть ее заново с другими параметрами.
	Если ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата.Свойство("ЗакрытьФормуБезусловно") 
		И ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата.ЗакрытьФормуБезусловно Тогда
		ПараметрыПовторногоОткрытияФормы = ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата.ПараметрыПовторногоОткрытияФормы;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
	// Переход дальше с задержкой на 1 секунду, чтобы отобразить прогресс бар 100%.
	ПодключитьОбработчикОжидания("ЗапуститьПереходДалее", 1, Истина);
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапуститьНаСервере(ПараметрыЗадания, ОшибкаРасхожденияВерсийПриПолученииДанных, ПроверятьРасхождениеВерсий)
	
	Если ПараметрыЗадания.ВыполнятьЗагрузку Тогда
		
		Если ПроверятьРасхождениеВерсий Тогда
			ОбменДаннымиСервер.ИнициализироватьПараметрыПроверкиРасхожденияВерсий(ПроверятьРасхождениеВерсий);
		КонецЕсли;
		
		ШаблонНаименования = НСтр("ru = 'Выполняется загрузка данных из %1'");
		
	Иначе
		ШаблонНаименования = НСтр("ru = 'Выполняется выгрузка данных в %1'");
	КонецЕсли;
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонНаименования, ПараметрыЗадания.УзелИнформационнойБазы);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	ПараметрыЗадания.Вставить("ДатаНачалаОперации", ДатаНачалаОперации);
	
	// Запуск фонового задания
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		ПараметрыЗадания.ИмяЗадания,
		ПараметрыЗадания,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеИдентификатор  = Результат.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = Результат.АдресРезультата;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеПолучитьРезультатНаСервере()
	
	ФоновоеЗаданиеРезультатВыполнения.Вставить("ДополнительныеДанныеРезультата", Новый Структура());
	
	СообщениеОбОшибке = "";
	
	ТиповоеПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось выполнить %1. Подробности см. в журнале регистрации'"),
		?(ФоновоеЗаданиеВыполняемоеДействие = 1, НСтр("ru = 'получение данных'"), НСтр("ru = 'отправку данных'")));
	
	Если ФоновоеЗаданиеРезультатВыполнения.Статус = "Ошибка" Тогда
		СообщениеОбОшибке = ФоновоеЗаданиеРезультатВыполнения.ПодробноеПредставлениеОшибки;
	Иначе
		
		РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		
		Если РезультатВыполненияВФоне = Неопределено Тогда
			СообщениеОбОшибке = ТиповоеПредставлениеОшибки;
		Иначе
			
			Если РезультатВыполненияВФоне.ВыполнятьЗагрузку Тогда
				
				// Данные по расхождению версий правил обмена.
				ОшибкаРасхожденияВерсийПриПолученииДанных = ОбменДаннымиСервер.ОшибкаРасхожденияВерсийПриПолученииДанных();
				
				Если ОшибкаРасхожденияВерсийПриПолученииДанных <> Неопределено
					И ОшибкаРасхожденияВерсийПриПолученииДанных.ЕстьОшибка = Истина Тогда
					СообщениеОбОшибке = ОшибкаРасхожденияВерсийПриПолученииДанных.ТекстОшибки;
				КонецЕсли;
				
				// Проверка перехода на новый обмен данными.
				ПроверкаНеобходимостиПереходаНаНовыйОбмен();
				
				Если ФоновоеЗаданиеРезультатВыполнения.ДополнительныеДанныеРезультата.Свойство("ПараметрыПовторногоОткрытияФормы") Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если РезультатВыполненияВФоне.Отказ И Не ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
				СообщениеОбОшибке = ТиповоеПредставлениеОшибки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ЭтотОбъект,
				РезультатВыполненияВФоне,
				"ДлительнаяОперация, ИдентификаторДлительнойОперации, ИдентификаторФайлаСообщенияВСервисе");
			
			УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
			
		КонецЕсли;
		
		ФоновоеЗаданиеАдресХранилища = Неопределено;
		ФоновоеЗаданиеИдентификатор  = Неопределено;
		
	КонецЕсли;
	
	// Проверим наличие возможных ошибок при выполнении фонового задания.
	ЕстьОшибки = ЗначениеЗаполнено(СообщениеОбОшибке);
	
	// Если в процессе синхронизации данных возникли ошибки, зафиксируем их.
	Если ЕстьОшибки Тогда
		
		// Если в базе-корреспонденте была запущена длительная операция, ее надо завершить.
		Если Не ДлительнаяОперацияЗавершена Тогда
			ЗавершитьВыполнениеДлительнойОперации(ИдентификаторДлительнойОперации);
		КонецЕсли;
		
		ДлительнаяОперацияЗавершена         = Истина;
		ДлительнаяОперацияЗавершенаСОшибкой = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ИНИЦИАЛИЗАЦИИ ПЕРЕХОДОВ

&НаСервере
Процедура СценарийОбменаОбычный()
	
	ТаблицаПереходов.Очистить();
	ТаблицаПереходовНоваяСтрока(1, "ОжиданиеСинхронизацииДанныхПрогрессБарЗагрузка", "ЗагрузкаДанных_ПриОткрытии", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанныхПрогрессБарЗагрузка", , Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанныхПрогрессБарВыгрузка", "ВыгрузкаДанных_ПриОткрытии", Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанныхПрогрессБарВыгрузка", , Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	ТаблицаПереходовНоваяСтрока(5, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ОжиданиеСинхронизацииДанных",, Истина, "ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанных", "ЗагрузкаДанных_ПриОткрытии", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанных", "ВыгрузкаДанных_ПриОткрытии", Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	ТаблицаПереходовНоваяСтрока(6, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервис_ОтправкаПолучениеОтправка()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ОжиданиеСинхронизацииДанных", , Истина, "ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации");
	// Отправка
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанных", "ВыгрузкаДанных_ПриОткрытии", Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанных", , Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	// Получение
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанных", "ЗагрузкаДанных_ПриОткрытии", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеСинхронизацииДанных", , Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	// Отправка
	ТаблицаПереходовНоваяСтрока(6,  "ОжиданиеСинхронизацииДанных", "ВыгрузкаДанных_ПриОткрытии", Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "ОжиданиеСинхронизацииДанных", , Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	// Завершение
	ТаблицаПереходовНоваяСтрока(8, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервисСЗапросомПароля()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрокаПереходДалее(1, "ЗапросПароляПользователя", "ЗапросПароляПользователя_ПриОткрытии", "ЗапросПароляПользователя_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанных",, Истина, "ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанных", "ЗагрузкаДанных_ПриОткрытии", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеСинхронизацииДанных", "ВыгрузкаДанных_ПриОткрытии", Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	ТаблицаПереходовНоваяСтрока(7, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийОбменаЧерезВебСервисСЗапросомПароля_ОтправкаПолучениеОтправка()
	
	ТаблицаПереходов.Очистить();
	ТаблицаПереходовНоваяСтрокаПереходДалее(1, "ЗапросПароляПользователя", "ЗапросПароляПользователя_ПриОткрытии", "ЗапросПароляПользователя_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеСинхронизацииДанных",, Истина, "ОжиданиеПроверкиПодключения_ОбработкаДлительнойОперации");
	// Отправка
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеСинхронизацииДанных", "ВыгрузкаДанных_ПриОткрытии", Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	// Получение
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеСинхронизацииДанных", "ЗагрузкаДанных_ПриОткрытии", Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6, "ОжиданиеСинхронизацииДанных",, Истина, "ЗагрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	// Отправка
	ТаблицаПереходовНоваяСтрока(7, "ОжиданиеСинхронизацииДанных", "ВыгрузкаДанных_ПриОткрытии", Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "ОжиданиеСинхронизацииДанных",, Истина, "ВыгрузкаДанных_ОбработкаДлительнойОперации_Окончание");
	// Завершение
	ТаблицаПереходовНоваяСтрока(9, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии", Истина, "ЗавершениеОбмена_ОбработкаДлительнойОперации");
	
КонецПроцедуры

&НаСервере
Процедура СценарийКогдаЕстьОшибкиПриНачалеРаботы()
	
	ТаблицаПереходов.Очистить();
	ТаблицаПереходовНоваяСтрока(1, "ЗавершениеОбмена", "ЗавершениеОбмена_ПриОткрытии");
	
КонецПроцедуры

#КонецОбласти
