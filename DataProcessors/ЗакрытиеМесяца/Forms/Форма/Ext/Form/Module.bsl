
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем ПрерватьЕслиНеВыполнено;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура, в зависимости от вида ИБ, инициализирует закрытие месяца.
//
&НаКлиенте
Процедура ИнициализироватьЗакрытиеМесяца()
	
	Выполнено = Ложь;
	ВыполнитьЗакрытиеМесяцаНаСервере();
	
	Если Выполнено Тогда
		
		АктуализироватьДатуЗапретаРедактирования();
		
	Иначе
		
		ПрерватьЕслиНеВыполнено = Ложь;
		Элементы["Страницы" + Строка(ТекМесяц)].ТекущаяСтраница = Элементы["ДлительнаяОперация" + Строка(ТекМесяц)];
		Элементы.ВыполнитьЗакрытиеМесяца.Доступность = Ложь;
		Элементы.ОтменитьЗакрытиеМесяца.Доступность = Ложь;
		ПодключитьОбработчикОжидания("ПроверитьВыполнение", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьЗакрытиеМесяца()

// Процедура управляет актуализацией даты запрета редактирования в приложении
// 
&НаКлиенте
Процедура АктуализироватьДатуЗапретаРедактирования()
	
	Если ИспользоватьДатыЗапретаЗагрузкиДанных
		И НЕ ЗначениеЗаполнено(ПереноситьДатуЗапретаРедактирования) Тогда
		Ответ = Неопределено;
		ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.ПереноситьДатуЗапретаРедактирования",,,,,, Новый ОписаниеОповещения("АктуализироватьДатуЗапретаРедактированияЗавершение", ЭтотОбъект));
		Возврат;
	ИначеЕсли ИспользоватьДатыЗапретаЗагрузкиДанных
		И ПереноситьДатуЗапретаРедактирования = ПредопределенноеЗначение("Перечисление.ДаНет.Да") Тогда
		ВыполнитьПереносДатыЗапретаРедактирования(КонецМесяца(Дата(ТекГод, Текмесяц, 1)));
	КонецЕсли;
	
	АктуализироватьДатуЗапретаРедактированияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДатуЗапретаРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если ЗначениеЗаполнено(Ответ) И Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьПереносДатыЗапретаРедактирования(КонецМесяца(Дата(ТекГод, Текмесяц, 1)));
	КонецЕсли;
	
	АктуализироватьДатуЗапретаРедактированияФрагмент();
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьДатуЗапретаРедактированияФрагмент()
	
	Элементы.СформироватьОтчет.Доступность = СписокЗакрытийМесяцев[ТекМесяц - 1].Значение;
	ПереноситьДатуЗапретаРедактирования = Константы.ПереноситьДатуЗапретаРедактирования.Получить();
	
КонецПроцедуры // АктуализироватьДатуЗапретаРедактирования()

// Функция считывает и возвращает значение реквизита формы для указанного месяца
// 
&НаСервереБезКонтекста
Функция ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, ИмяФлага, ТекМесяц)
	
	Возврат ЭтаФорма[ИмяФлага + Строка(ТекМесяц)];
	
КонецФункции // ЗначениеРеквизитаФормыПоЗначениюМесяца()

// Функция формирует структуру параметров из значений реквизитов формы
//
&НаСервере
Функция ПолучитьСтруктуруПараметровНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ТекМесяц", ТекМесяц);
	СтруктураПараметров.Вставить("ТекГод", ТекГод);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	
	ВыполнитьРасчетАмортизации = ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, "НачислениеАмортизации", ТекМесяц);
	СтруктураПараметров.Вставить("ВыполнитьРасчетАмортизации", ВыполнитьРасчетАмортизации);
	
	// Заполним массив операций, по которым необходимо выполнить закрытие месяца
	МассивОпераций = Новый Массив;
	
	Если ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, "РасчетПрямыхЗатрат", ТекМесяц) Тогда
		
		МассивОпераций.Добавить("РасчетПрямыхЗатрат");
		
	КонецЕсли;
	
	Если ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, "РаспределениеЗатрат", ТекМесяц) Тогда
		
		МассивОпераций.Добавить("РаспределениеЗатрат");
		
	КонецЕсли;
	
	Если ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, "РасчетФактическойСебестоимости", ТекМесяц) Тогда
		
		МассивОпераций.Добавить("РасчетФактическойСебестоимости");
		
	КонецЕсли;
	
	Если ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, "РасчетСебестоимостиВРознице", ТекМесяц) Тогда
		
		МассивОпераций.Добавить("РасчетСебестоимостиВРозницеСуммовойУчет");
		
	КонецЕсли;
	
	Если ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, "РасчетКурсовыхРазниц", ТекМесяц) Тогда
		
		МассивОпераций.Добавить("РасчетКурсовыхРазниц");
		
	КонецЕсли;
	
	Если ЗначениеРеквизитаФормыПоЗначениюМесяца(ЭтаФорма, "РасчетФинансовогоРезультата", ТекМесяц) Тогда
		
		МассивОпераций.Добавить("РасчетФинансовогоРезультата");
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("МассивОпераций", МассивОпераций);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровНаСервере()

// Процедура выполняет закрытие месяца
//
&НаСервере
Процедура ВыполнитьЗакрытиеМесяцаНаСервере()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровНаСервере();
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Обработки.ЗакрытиеМесяца.ВыполнитьЗакрытиеМесяца(СтруктураПараметров);
		Выполнено = Истина;
		
		ПолучитьИнформациюПоЗакрытиюПериодов();
		
	Иначе
		
		ВыполнитьЗакрытиеМесяцаВДлительнойОперации(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗакрытиеМесяцаНаСервере()

// Процедура отмены закрытия месяца.
// Выполняет распроведение документов закрытия месяца и обновляет состояние формы
//
&НаСервере
Процедура ОтменитьЗакрытиеМесяцаНаСервере()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровНаСервере();
	Обработки.ЗакрытиеМесяца.ОтменитьЗакрытиеМесяца(СтруктураПараметров);
	ПолучитьИнформациюПоЗакрытиюПериодов();
	
КонецПроцедуры // ОтменитьЗакрытиеМесяцаНаСервере()

// ДлительныеОперации

// Процедура проверяет состояние выполнения закрытия месяца
//
&НаКлиенте
Процедура ПроверитьВыполнение()
	
	РезультатПроверки = ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища, ПрерватьЕслиНеВыполнено);
	
	Если РезультатПроверки.ЗаданиеВыполнено Тогда
		
		ПолучитьИнформациюПоЗакрытиюПериодов();
		
		Элементы["Страницы" + Строка(ТекМесяц)].ТекущаяСтраница = Элементы["Операции" + Строка(ТекМесяц)];
		Элементы.ВыполнитьЗакрытиеМесяца.Доступность = Истина;
		Элементы.ОтменитьЗакрытиеМесяца.Доступность = Истина;
		
		АктуализироватьДатуЗапретаРедактирования();
		
	ИначеЕсли ПрерватьЕслиНеВыполнено Тогда
		
		ОтключитьОбработчикОжидания("ПроверитьВыполнение");
		
		ПолучитьИнформациюПоЗакрытиюПериодов();
		
		Элементы["Страницы" + Строка(ТекМесяц)].ТекущаяСтраница = Элементы["Операции" + Строка(ТекМесяц)];
		Элементы.ВыполнитьЗакрытиеМесяца.Доступность = Истина;
		Элементы.ОтменитьЗакрытиеМесяца.Доступность = Истина;
		
		АктуализироватьДатуЗапретаРедактирования();
		
	Иначе
		
		Если ФоновоеЗаданиеИнтервалПроверки < 15 Тогда
			
			ФоновоеЗаданиеИнтервалПроверки = ФоновоеЗаданиеИнтервалПроверки + 0.7;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ПроверитьВыполнение", ФоновоеЗаданиеИнтервалПроверки, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВыполнение()

// Процедура выполняет закрытие месяца в длительной операции (в фоне)
//
&НаСервере
Процедура ВыполнитьЗакрытиеМесяцаВДлительнойОперации(СтруктураПараметровФоновогоЗадания)
	
	ЗаданиеРезультат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	УникальныйИдентификатор,
	"Обработки.ЗакрытиеМесяца.ВыполнитьЗакрытиеМесяца",
	СтруктураПараметровФоновогоЗадания,
	НСтр("ru = 'Выполняется закрытие месяца'")
	);
	
	Выполнено = ЗаданиеРезультат.ЗаданиеВыполнено;
	
	Если Выполнено Тогда
		
		ПолучитьИнформациюПоЗакрытиюПериодов();
		
	Иначе
		
		ФоновоеЗаданиеИдентификатор  = ЗаданиеРезультат.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = ЗаданиеРезультат.АдресХранилища;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьТабличныйДокументВДлительнойОперации()

// Процедура проверяет окончание заполнения табличного документа на сервере
//
&НаСервере
Функция ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища, ПрерватьЕслиНеВыполнено)
	
	РезультатПроверки = Новый Структура("ЗаданиеВыполнено, Значение", Ложь, Неопределено);
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		
		Выполнено							= Истина;
		РезультатПроверки.ЗаданиеВыполнено	= Истина;
		РезультатПроверки.Значение			= ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		
	ИначеЕсли ПрерватьЕслиНеВыполнено Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции // ПроверитьВыполнениеНаСервере()

// Функция проверяет состояние фонового задания по значению переменных формы
//
&НаСервереБезКонтекста
Функция ВыполняетсяФоновоеЗадание(ФоновоеЗаданиеИдентификатор)
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗаданиеИдентификатор);
	
	Возврат (Задание <> Неопределено) И (Задание.Состояние = СостояниеФоновогоЗадания.Активно);
	
КонецФункции // ВыполняетсяФоновоеЗадание()

// Процедура предупреждает пользователя о невозможности выполнения действия
//
// Используется при закрытии формы, отмене результатов закрытия месяца
//
&НаКлиенте
Процедура ПредупредитьОАктивномФоновомЗадании(Отказ = Истина)
	
	Отказ = Истина;
	ТекстПредупреждения = НСтр("ru = 'Дождитесь окончания рабочего процесса (рекомендуется) либо прервите его самостоятельно.'");
	ПоказатьПредупреждение(Неопределено,ТекстПредупреждения, 10, "Невозможно закрыть форму.");
	
КонецПроцедуры // ПредупредитьОАктивномФоновомЗадании()

// Конец ДлительныеОперации


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = Справочники.Организации.ОсновнаяОрганизация;
	
	ТекДата = ТекущаяДата();
	ТекГод = Год(ТекДата);
	ТекМесяц = Месяц(ТекДата);
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		Объект.Организация = Константы.Компания.Получить();
		Элементы.Организация.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьТекстНадписей();
	
	ПолучитьИнформациюПоЗакрытиюПериодов();
	
	УчетИмущества = Константы.ФункциональнаяОпцияУчетВнеоборотныхАктивов.Получить();
	УчетРозничныхПродаж = Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить();
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	
	Для Сч = 1 По 12 Цикл
		Элементы.Найти("ГруппаНачислениеАмортизации" + Сч).Видимость = УчетИмущества;
		Элементы.Найти("ГруппаРасчетСебестоимостиВРознице" + Сч).Видимость = УчетРозничныхПродаж;
		Элементы.Найти("ГруппаРасчетКурсовыхРазниц" + Сч).Видимость = УчетВалютныхОпераций;
	КонецЦикла;
	
	СвойстваРазделов = ДатыЗапретаИзмененияСлужебный.СвойстваРазделов();
	ИспользоватьДатыЗапретаЗагрузкиДанных = СвойстваРазделов.ДатыЗапретаЗагрузкиВнедрены;
	ПереноситьДатуЗапретаРедактирования = Константы.ПереноситьДатуЗапретаРедактирования.Получить();
	
	ДатаЗапрета = ПолучитьДатуЗапретаРедактирования();
	
	Если ЗначениеЗаполнено(ДатаЗапрета) Тогда
		ДатаЗапретаРедактирования = ДатаЗапрета;
	Иначе
		Элементы.ДатаЗапретаРедактирования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПометкуТекМесяц();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеИдентификатор <> Новый УникальныйИдентификатор
		И НЕ Выполнено
		И ВыполняетсяФоновоеЗадание(ФоновоеЗаданиеИдентификатор) Тогда // Проверка на случай, если задание было прервано
		
		ПредупредитьОАктивномФоновомЗадании(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаСервере
Функция ПолучитьДатуЗапретаРедактирования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыЗапретаИзменения.Раздел,
	|	ДатыЗапретаИзменения.Объект,
	|	ДатыЗапретаИзменения.Пользователь,
	|	ДатыЗапретаИзменения.ДатаЗапрета,
	|	ДатыЗапретаИзменения.ОписаниеДатыЗапрета,
	|	ДатыЗапретаИзменения.Комментарий
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Пользователь = &Пользователь
	|	И ДатыЗапретаИзменения.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Пользователь",  Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
	Запрос.УстановитьПараметр("Объект", ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаЗапрета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстНадписей()
	
	Элементы.ГодНазад.Заголовок = СтрШаблон("%1 <<", Формат(ТекГод - 1, "ЧГ="));
	Элементы.ГодВперед.Заголовок = СтрШаблон(">> %1", Формат(ТекГод + 1, "ЧГ="));
	Элементы.ГодВперед.Доступность = НЕ (ТекГод + 1 > Год(ТекущаяДата()));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуТекМесяц()
	
	Элементы.Месяцы.ТекущаяСтраница = Элементы.Найти("М" + ТекМесяц);
	Элементы.СформироватьОтчет.Доступность = СписокЗакрытийМесяцев[ТекМесяц - 1].Значение;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПереносДатыЗапретаРедактирования(Дата)
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Пользователь = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
	НоваяСтрока.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
	НоваяСтрока.ДатаЗапрета = Дата;
	НоваяСтрока.Комментарий = "(По умолчанию)";
	
	НаборЗаписей.Записать(Истина);
	
	ДатаЗапретаРедактирования = Дата;
	Элементы.ДатаЗапретаРедактирования.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюПоЗакрытиюПериодов()
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	// Раскраска закладок и операций.
	ТаблицаМесяцы = Новый ТаблицаЗначений;
	
	ТаблицаМесяцы.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ТаблицаМесяцы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Число"));
	
	Для Сч = 1 По 12 Цикл
		НоваяСтрока = ТаблицаМесяцы.Добавить();
		НоваяСтрока.Год = ТекГод;
		НоваяСтрока.Месяц = Сч;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаМесяцы.Год КАК Год,
	|	ТаблицаМесяцы.Месяц КАК Месяц
	|ПОМЕСТИТЬ ТаблицаМесяцы
	|ИЗ
	|	&ТаблицаМесяцы КАК ТаблицаМесяцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(АмортизацияВА.Ссылка) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачислениеАмортизации,
	|	ГОД(АмортизацияВА.Дата) КАК Год,
	|	МЕСЯЦ(АмортизацияВА.Дата) КАК Месяц
	|ПОМЕСТИТЬ ВложенныйЗапросАмортизация
	|ИЗ
	|	Документ.АмортизацияВА КАК АмортизацияВА
	|ГДЕ
	|	АмортизацияВА.Проведен = ИСТИНА
	|	И ГОД(АмортизацияВА.Дата) = &Год
	|	И ВЫБОР
	|			КОГДА &НуженОтборПоОрганизации
	|				ТОГДА АмортизацияВА.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(АмортизацияВА.Дата),
	|	МЕСЯЦ(АмортизацияВА.Дата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЗакрытиеМесяца.Ссылка) КАК КоличествоСсылка,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗакрытиеМесяца.РасчетПрямыхЗатрат, ЛОЖЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасчетПрямыхЗатрат,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗакрытиеМесяца.РаспределениеЗатрат, ЛОЖЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РаспределениеЗатрат,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗакрытиеМесяца.РасчетФактическойСебестоимости, ЛОЖЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасчетФактическойСебестоимости,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗакрытиеМесяца.РасчетФинансовогоРезультата, ЛОЖЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасчетФинансовогоРезультата,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗакрытиеМесяца.РасчетКурсовыхРазниц, ЛОЖЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасчетКурсовыхРазниц,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗакрытиеМесяца.РасчетСебестоимостиВРозницеСуммовойУчет, ЛОЖЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РасчетСебестоимостиВРозницеСуммовойУчет,
	|	ГОД(ЗакрытиеМесяца.Дата) КАК Год,
	|	МЕСЯЦ(ЗакрытиеМесяца.Дата) КАК Месяц
	|ПОМЕСТИТЬ ВложенныйЗапрос
	|ИЗ
	|	Документ.ЗакрытиеМесяца КАК ЗакрытиеМесяца
	|ГДЕ
	|	ЗакрытиеМесяца.Проведен = ИСТИНА
	|	И ГОД(ЗакрытиеМесяца.Дата) = &Год
	|	И ВЫБОР
	|			КОГДА &НуженОтборПоОрганизации
	|				ТОГДА ЗакрытиеМесяца.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(ЗакрытиеМесяца.Дата),
	|	МЕСЯЦ(ЗакрытиеМесяца.Дата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМесяцы.Месяц КАК Месяц,
	|	ТаблицаМесяцы.Год КАК Год,
	|	ВЫБОР
	|		КОГДА СУММА(ЗапасыОбороты.СуммаОборот) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноЗакрытиеМесяца,
	|	ВЫБОР
	|		КОГДА СУММА(ЗапасыОбороты.СуммаОборот) <> 0
	|					И (ЕСТЬNULL(ВложенныйЗапрос.РасчетПрямыхЗатрат, 0) = 0
	|						ИЛИ ЕСТЬNULL(ВложенныйЗапрос.РаспределениеЗатрат, 0) = 0
	|						ИЛИ ЕСТЬNULL(ВложенныйЗапрос.РасчетФактическойСебестоимости, 0) = 0
	|						ИЛИ ЕСТЬNULL(ВложенныйЗапрос.РасчетФинансовогоРезультата, 0) = 0)
	|				ИЛИ КОЛИЧЕСТВО(СуммовойУчетВРознице.Регистратор) > 0
	|					И ЕСТЬNULL(ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчет, 0) = 0
	|				ИЛИ КОЛИЧЕСТВО(КурсыВалют.Валюта) > 0
	|					И ЕСТЬNULL(ВложенныйЗапрос.РасчетКурсовыхРазниц, 0) = 0
	|				ИЛИ КОЛИЧЕСТВО(ВнеоборотныеАктивы.ВнеоборотныйАктив) > 0
	|					И ЕСТЬNULL(ВложенныйЗапросАмортизация.НачислениеАмортизации, 0) = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьНужныеНепроизведенныеРасчеты,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(СуммовойУчетВРознице.Регистратор) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноРасчетСебестоимостиВРознице,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(КурсыВалют.Валюта) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноРасчетКурсовыхРазниц,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ВнеоборотныеАктивы.ВнеоборотныйАктив) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НужноНачислениеАмортизации,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоСсылка > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗакрытиеМесяцаПроизводилось,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РасчетПрямыхЗатрат = 0
	|				ИЛИ ВложенныйЗапрос.РаспределениеЗатрат = 0
	|				ИЛИ ВложенныйЗапрос.РасчетФактическойСебестоимости = 0
	|				ИЛИ ВложенныйЗапрос.РасчетФинансовогоРезультата = 0
	|				ИЛИ ВложенныйЗапрос.РасчетКурсовыхРазниц = 0
	|				ИЛИ ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчет = 0
	|				ИЛИ ВложенныйЗапросАмортизация.НачислениеАмортизации = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьНепроизведенныеРасчеты,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РасчетПрямыхЗатрат > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетПрямыхЗатрат,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РаспределениеЗатрат > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РаспределениеЗатрат,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РасчетФактическойСебестоимости > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетФактическойСебестоимости,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РасчетФинансовогоРезультата > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетФинансовогоРезультата,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РасчетКурсовыхРазниц > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетКурсовыхРазниц,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчет > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетСебестоимостиВРозницеСуммовойУчет,
	|	ВЫБОР
	|		КОГДА ОшибкиЗакрытияМесяца.ОписаниеОшибки > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибки,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапросАмортизация.НачислениеАмортизации > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачислениеАмортизации
	|ИЗ
	|	ТаблицаМесяцы КАК ТаблицаМесяцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Обороты(, , Месяц, ) КАК ЗапасыОбороты
	|		ПО (ТаблицаМесяцы.Месяц = МЕСЯЦ(ЗапасыОбороты.Период))
	|			И (ТаблицаМесяцы.Год = ГОД(ЗапасыОбороты.Период))
	|			И (ЗапасыОбороты.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО (ТаблицаМесяцы.Месяц = МЕСЯЦ(КурсыВалют.Период))
	|			И (ТаблицаМесяцы.Год = ГОД(КурсыВалют.Период))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СуммовойУчетВРознице КАК СуммовойУчетВРознице
	|		ПО (ТаблицаМесяцы.Месяц = МЕСЯЦ(СуммовойУчетВРознице.Период))
	|			И (ТаблицаМесяцы.Год = ГОД(СуммовойУчетВРознице.Период))
	|			И (СуммовойУчетВРознице.Активность = ИСТИНА)
	|			И (СуммовойУчетВРознице.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнеоборотныеАктивы.ОстаткиИОбороты(, , Месяц, , ) КАК ВнеоборотныеАктивы
	|		ПО (ТаблицаМесяцы.Месяц = МЕСЯЦ(ВнеоборотныеАктивы.Период))
	|			И (ТаблицаМесяцы.Год = ГОД(ВнеоборотныеАктивы.Период))
	|			И (ВнеоборотныеАктивы.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныйЗапросАмортизация КАК ВложенныйЗапросАмортизация
	|		ПО ТаблицаМесяцы.Год = ВложенныйЗапросАмортизация.Год
	|			И ТаблицаМесяцы.Месяц = ВложенныйЗапросАмортизация.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныйЗапрос КАК ВложенныйЗапрос
	|		ПО ТаблицаМесяцы.Год = ВложенныйЗапрос.Год
	|			И ТаблицаМесяцы.Месяц = ВложенныйЗапрос.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗакрытияМесяца КАК ОшибкиЗакрытияМесяца
	|		ПО (ТаблицаМесяцы.Год = ГОД(ОшибкиЗакрытияМесяца.Период))
	|			И (ТаблицаМесяцы.Месяц = МЕСЯЦ(ОшибкиЗакрытияМесяца.Период))
	|			И (ВЫБОР
	|				КОГДА &НуженОтборПоОрганизации
	|					ТОГДА ОшибкиЗакрытияМесяца.Регистратор.Организация = &Организация
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаМесяцы.Месяц,
	|	ТаблицаМесяцы.Год,
	|	ВЫБОР
	|		КОГДА ОшибкиЗакрытияМесяца.ОписаниеОшибки > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнеоборотныеАктивы.СтоимостьКонечныйОстаток, 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапросАмортизация.НачислениеАмортизации > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВложенныйЗапрос.РасчетПрямыхЗатрат,
	|	ВложенныйЗапрос.РаспределениеЗатрат,
	|	ВложенныйЗапрос.РасчетФактическойСебестоимости,
	|	ВложенныйЗапрос.РасчетФинансовогоРезультата,
	|	ВложенныйЗапрос.РасчетСебестоимостиВРозницеСуммовойУчет,
	|	ВложенныйЗапросАмортизация.НачислениеАмортизации,
	|	ВложенныйЗапрос.РасчетКурсовыхРазниц,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КоличествоСсылка > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год,
	|	Месяц";
	
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("НуженОтборПоОрганизации", НЕ Константы.УчетПоКомпании.Получить());
	Запрос.УстановитьПараметр("ТаблицаМесяцы", ТаблицаМесяцы);
	Запрос.УстановитьПараметр("Год", ТекГод);
	
	ТекущийМесяц = Месяц(ТекущаяДата());
	ТекущийГод = Год(ТекущаяДата());
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Элементы["М" + Выборка.Месяц].Доступность = Истина;
		
		// Закладки.
		Если Выборка.Год = ТекущийГод
			И Выборка.Месяц = ТекущийМесяц
			И НЕ Выборка.ЗакрытиеМесяцаПроизводилось
			И НЕ Выборка.НачислениеАмортизации Тогда
			Элементы["М" + Выборка.Месяц].Картинка = Элементы.Серый.Картинка;
		ИначеЕсли (Выборка.Месяц > ТекущийМесяц И Выборка.Год = ТекущийГод)
			ИЛИ Выборка.Год > ТекущийГод Тогда
			Элементы["М" + Выборка.Месяц].Картинка = Элементы.Серый.Картинка;
			Элементы["М" + Выборка.Месяц].Доступность = Ложь;
		ИначеЕсли (Выборка.НужноЗакрытиеМесяца
			И НЕ Выборка.ЗакрытиеМесяцаПроизводилось)
			ИЛИ (Выборка.НужноРасчетСебестоимостиВРознице
			И НЕ Выборка.РасчетСебестоимостиВРозницеСуммовойУчет)
			ИЛИ (Выборка.НужноРасчетКурсовыхРазниц
			И НЕ Выборка.РасчетКурсовыхРазниц)
			ИЛИ (Выборка.НужноНачислениеАмортизации
			И НЕ Выборка.НачислениеАмортизации) Тогда
			Элементы["М" + Выборка.Месяц].Картинка = Элементы.Желтый.Картинка;
		ИначеЕсли (Выборка.НужноЗакрытиеМесяца
			И Выборка.ЗакрытиеМесяцаПроизводилось
			И Выборка.ЕстьНужныеНепроизведенныеРасчеты)
			ИЛИ Выборка.ЕстьОшибки Тогда
			Элементы["М" + Выборка.Месяц].Картинка = Элементы.Желтый.Картинка;
		Иначе
			Элементы["М" + Выборка.Месяц].Картинка = Элементы.Зеленый.Картинка;
		КонецЕсли;
		
		// Операции.
		ЭтаФорма["РаспределениеЗатрат" + Выборка.Месяц] = Выборка.РаспределениеЗатрат;
		ЭтаФорма["РасчетКурсовыхРазниц" + Выборка.Месяц] = Выборка.РасчетКурсовыхРазниц;
		ЭтаФорма["РасчетПрямыхЗатрат" + Выборка.Месяц] = Выборка.РасчетПрямыхЗатрат;
		ЭтаФорма["РасчетСебестоимостиВРознице" + Выборка.Месяц] = Выборка.РасчетСебестоимостиВРозницеСуммовойУчет;
		ЭтаФорма["РасчетФактическойСебестоимости" + Выборка.Месяц] = Выборка.РасчетФактическойСебестоимости;
		ЭтаФорма["РасчетФинансовогоРезультата" + Выборка.Месяц] = Выборка.РасчетФинансовогоРезультата;
		ЭтаФорма["НачислениеАмортизации" + Выборка.Месяц] = Выборка.НачислениеАмортизации;
		
		Если Выборка.НужноЗакрытиеМесяца Тогда
			Элементы.Найти("РаспределениеЗатратКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["РаспределениеЗатрат" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.Красный.Картинка);
			Элементы.Найти("РасчетПрямыхЗатратКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["РасчетПрямыхЗатрат" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.Красный.Картинка);
			Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["РасчетФактическойСебестоимости" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.Красный.Картинка);
			Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["РасчетФинансовогоРезультата" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.Красный.Картинка);
		ИначеЕсли Выборка.Месяц > ТекущийМесяц
			ИЛИ Выборка.Год > ТекущийГод Тогда
			Элементы.Найти("РаспределениеЗатратКартинка" + Выборка.Месяц).Картинка = Элементы.Серый.Картинка;
			Элементы.Найти("РасчетПрямыхЗатратКартинка" + Выборка.Месяц).Картинка = Элементы.Серый.Картинка;
			Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + Выборка.Месяц).Картинка = Элементы.Серый.Картинка;
			Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + Выборка.Месяц).Картинка = Элементы.Серый.Картинка;
		Иначе
			Элементы.Найти("РаспределениеЗатратКартинка" + Выборка.Месяц).Картинка = Элементы.ЗеленыйНеТребуется.Картинка;
			Элементы.Найти("РасчетПрямыхЗатратКартинка" + Выборка.Месяц).Картинка = Элементы.ЗеленыйНеТребуется.Картинка;
			Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + Выборка.Месяц).Картинка = Элементы.ЗеленыйНеТребуется.Картинка;
			Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + Выборка.Месяц).Картинка = Элементы.ЗеленыйНеТребуется.Картинка;
		КонецЕсли;
		
		Если Выборка.НужноРасчетКурсовыхРазниц Тогда
			Элементы.Найти("РасчетКурсовыхРазницКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["РасчетКурсовыхРазниц" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.Красный.Картинка);
		Иначе
			Элементы.Найти("РасчетКурсовыхРазницКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["РасчетКурсовыхРазниц" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.ЗеленыйНеТребуется.Картинка);
		КонецЕсли;
		
		Если Выборка.НужноРасчетСебестоимостиВРознице Тогда
			Элементы.Найти("РасчетСебестоимостиВРозницеКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["РасчетСебестоимостиВРознице" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.Красный.Картинка);
		Иначе
			Элементы.Найти("РасчетСебестоимостиВРозницеКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["РасчетСебестоимостиВРознице" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.ЗеленыйНеТребуется.Картинка);
		КонецЕсли;
		
		Если Выборка.НужноНачислениеАмортизации Тогда
			Элементы.Найти("НачислениеАмортизацииКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["НачислениеАмортизации" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.Красный.Картинка);
		Иначе
			Элементы.Найти("НачислениеАмортизацииКартинка" + Выборка.Месяц).Картинка = ?(ЭтаФорма["НачислениеАмортизации" + Выборка.Месяц], Элементы.Зеленый.Картинка, Элементы.ЗеленыйНеТребуется.Картинка);
		КонецЕсли;
		
		ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + Выборка.Месяц] = "";
		ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + Выборка.Месяц] = "";
		ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + Выборка.Месяц] = "";
		ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + Выборка.Месяц] = "";
		ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + Выборка.Месяц] = "";
		ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + Выборка.Месяц] = "";
		ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + Выборка.Месяц] = "";
		
	КонецЦикла;
	
	// Ошибки.
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МЕСЯЦ(ОшибкиЗакрытияМесяца.Период) КАК Месяц,
	|	ОшибкиЗакрытияМесяца.ВидОперации,
	|	ОшибкиЗакрытияМесяца.ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.ОшибкиЗакрытияМесяца КАК ОшибкиЗакрытияМесяца
	|ГДЕ
	|	ОшибкиЗакрытияМесяца.Активность = ИСТИНА
	|	И ГОД(ОшибкиЗакрытияМесяца.Период) = &Год
	|	И ВЫБОР
	|			КОГДА &НуженОтборПоОрганизации
	|				ТОГДА ОшибкиЗакрытияМесяца.Регистратор.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц";
	
	Запрос.УстановитьПараметр("НуженОтборПоОрганизации", НЕ Константы.УчетПоКомпании.Получить());
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Год", ТекГод);
	
	ВыборкаОшибок = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОшибок.Следующий() Цикл
		
		Если СокрЛП(ВыборкаОшибок.ВидОперации) = "РаспределениеЗатрат" Тогда
			Элементы.Найти("РаспределениеЗатратКартинка" + ВыборкаОшибок.Месяц).Картинка = Элементы.Желтый.Картинка;
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + ВыборкаОшибок.Месяц]) Тогда
				ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + ВыборкаОшибок.Месяц] = 
				"При распределении затрат произошли ошибки. Подробнее см. в отчете о закрытии месяца.";
			КонецЕсли;
		ИначеЕсли СокрЛП(ВыборкаОшибок.ВидОперации) = "РасчетКурсовыхРазниц" Тогда
			Элементы.Найти("РасчетКурсовыхРазницКартинка" + ВыборкаОшибок.Месяц).Картинка = Элементы.Желтый.Картинка;
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + ВыборкаОшибок.Месяц]) Тогда
				ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + ВыборкаОшибок.Месяц] = 
				"При расчете курсовых разниц произошли ошибки. Подробнее см. в отчете о закрытии месяца.";
			КонецЕсли;
		ИначеЕсли СокрЛП(ВыборкаОшибок.ВидОперации) = "РасчетПрямыхЗатрат" Тогда
			Элементы.Найти("РасчетПрямыхЗатратКартинка" + ВыборкаОшибок.Месяц).Картинка = Элементы.Желтый.Картинка;
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + ВыборкаОшибок.Месяц]) Тогда
				ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + ВыборкаОшибок.Месяц] = 
				"При расчете прямых затрат произошли ошибки. Подробнее см. в отчете о закрытии месяца.";
			КонецЕсли;
		ИначеЕсли СокрЛП(ВыборкаОшибок.ВидОперации) = "РасчетСебестоимостиВРознице" Тогда
			Элементы.Найти("РасчетСебестоимостиВРозницеКартинка" + ВыборкаОшибок.Месяц).Картинка = Элементы.Желтый.Картинка;
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + ВыборкаОшибок.Месяц]) Тогда
				ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + ВыборкаОшибок.Месяц] = 
				"При расчете себестоимости в рознице произошли ошибки. Подробнее см. в отчете о закрытии месяца.";
			КонецЕсли;
		ИначеЕсли СокрЛП(ВыборкаОшибок.ВидОперации) = "РасчетФактическойСебестоимости" Тогда
			Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + ВыборкаОшибок.Месяц).Картинка = Элементы.Желтый.Картинка;
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + ВыборкаОшибок.Месяц]) Тогда
				ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + ВыборкаОшибок.Месяц] = 
				"При расчете фактической себестоимости произошли ошибки. Подробнее см. в отчете о закрытии месяца.";
			КонецЕсли;
		ИначеЕсли СокрЛП(ВыборкаОшибок.ВидОперации) = "РасчетФинансовогоРезультата" Тогда
			Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + ВыборкаОшибок.Месяц).Картинка = Элементы.Желтый.Картинка;
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + ВыборкаОшибок.Месяц]) Тогда
				ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + ВыборкаОшибок.Месяц] = 
				"При расчете финансового результата произошли ошибки. Подробнее см. в отчете о закрытии месяца";
			КонецЕсли;
		ИначеЕсли СокрЛП(ВыборкаОшибок.ВидОперации) = "НачислениеАмортизации" Тогда
			Элементы.Найти("НачислениеАмортизацииКартинка" + ВыборкаОшибок.Месяц).Картинка = Элементы.Желтый.Картинка;
			Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + ВыборкаОшибок.Месяц]) Тогда
				ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + ВыборкаОшибок.Месяц] = 
				"При начислении амортизации произошли ошибки. Подробнее см. в отчете о закрытии месяца.";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СписокЗакрытийМесяцев.Очистить();
	
	Для Сч = 1 По 12 Цикл
		
		МесяцЗакрыт = Ложь; // признак закрытия месяца
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + Сч]) Тогда
			Если Элементы.Найти("РаспределениеЗатратКартинка" + Сч).Картинка = Элементы.Зеленый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + Сч] = НСтр("ru='Распределение затрат выполнено успешно!'");
				МесяцЗакрыт = Истина; // месяц закрыт, если распределение выполнено успешно
			ИначеЕсли Элементы.Найти("РаспределениеЗатратКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + Сч] = НСтр("ru='Распределение затрат не требуется.'");
			ИначеЕсли Элементы.Найти("РаспределениеЗатратКартинка" + Сч).Картинка = Элементы.Серый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + Сч] = НСтр("ru='Распределение затрат не производилось.'");
			ИначеЕсли Элементы.Найти("РаспределениеЗатратКартинка" + Сч).Картинка = Элементы.Красный.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + Сч] = НСтр("ru='Требуется выполнить распределение затрат.'");
			КонецЕсли;
		Иначе
			МесяцЗакрыт = Истина; // месяц закрыт, если есть ошибки
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + Сч]) Тогда
			Если Элементы.Найти("РасчетПрямыхЗатратКартинка" + Сч).Картинка = Элементы.Зеленый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + Сч] = НСтр("ru='Расчет прямых затрат выполнен успешно!'");
				МесяцЗакрыт = Истина; // месяц закрыт, если распределение выполнено успешно
			ИначеЕсли Элементы.Найти("РасчетПрямыхЗатратКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + Сч] = НСтр("ru='Расчет прямых затрат не требуется.'");
			ИначеЕсли Элементы.Найти("РасчетПрямыхЗатратКартинка" + Сч).Картинка = Элементы.Серый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + Сч] = НСтр("ru='Расчет прямых затрат не производился.'");
			ИначеЕсли Элементы.Найти("РасчетПрямыхЗатратКартинка" + Сч).Картинка = Элементы.Красный.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + Сч] = НСтр("ru='Требуется выполнить расчет прямых затрат.'");
			КонецЕсли;
		Иначе
			МесяцЗакрыт = Истина; // месяц закрыт, если есть ошибки
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + Сч]) Тогда
			Если Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + Сч).Картинка = Элементы.Зеленый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + Сч] = НСтр("ru='Расчет фактической себестоимости выполнен успешно!'");
				МесяцЗакрыт = Истина; // месяц закрыт, если распределение выполнено успешно
			ИначеЕсли Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + Сч] = НСтр("ru='Расчет фактической себестоимости не требуется.'");
			ИначеЕсли Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + Сч).Картинка = Элементы.Серый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + Сч] = НСтр("ru='Расчет фактической себестоимости не производился.'");
			ИначеЕсли Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + Сч).Картинка = Элементы.Красный.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + Сч] = НСтр("ru='Требуется выполнить расчет фактической себестоимости.'");
			КонецЕсли;
		Иначе
			МесяцЗакрыт = Истина; // месяц закрыт, если есть ошибки
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + Сч]) Тогда
			Если Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + Сч).Картинка = Элементы.Зеленый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + Сч] = НСтр("ru='Расчет финансового результата выполнен успешно!'");
				МесяцЗакрыт = Истина; // месяц закрыт, если распределение выполнено успешно
			ИначеЕсли Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + Сч] = НСтр("ru='Расчет финансового результата не требуется.'");
			ИначеЕсли Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + Сч).Картинка = Элементы.Серый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + Сч] = НСтр("ru='Расчет финансового результата не производился.'");
			ИначеЕсли Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + Сч).Картинка = Элементы.Красный.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + Сч] = НСтр("ru='Требуется выполнить расчет финансового результата.'");
			КонецЕсли;
		Иначе
			МесяцЗакрыт = Истина; // месяц закрыт, если есть ошибки
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + Сч]) Тогда
			Если Элементы.Найти("РасчетКурсовыхРазницКартинка" + Сч).Картинка = Элементы.Зеленый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + Сч] = НСтр("ru='Расчет курсовых разниц выполнен успешно!'");
				МесяцЗакрыт = Истина; // месяц закрыт, если распределение выполнено успешно
			ИначеЕсли Элементы.Найти("РасчетКурсовыхРазницКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + Сч] = НСтр("ru='Расчет курсовых разниц не требуется.'");
			ИначеЕсли Элементы.Найти("РасчетКурсовыхРазницКартинка" + Сч).Картинка = Элементы.Серый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + Сч] = НСтр("ru='Расчет курсовых разниц не производился.'");
			ИначеЕсли Элементы.Найти("РасчетКурсовыхРазницКартинка" + Сч).Картинка = Элементы.Красный.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + Сч] = НСтр("ru='Требуется выполнить расчет курсовых разниц.'");
			КонецЕсли;
		Иначе
			МесяцЗакрыт = Истина; // месяц закрыт, если есть ошибки
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + Сч]) Тогда
			Если Элементы.Найти("РасчетСебестоимостиВРозницеКартинка" + Сч).Картинка = Элементы.Зеленый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + Сч] = НСтр("ru='Расчет себестоимости в рознице (суммовой учет) выполнен успешно!'");
				МесяцЗакрыт = Истина; // месяц закрыт, если распределение выполнено успешно
			ИначеЕсли Элементы.Найти("РасчетСебестоимостиВРозницеКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + Сч] = НСтр("ru='Расчет себестоимости в рознице (суммовой учет) не требуется.'");
			ИначеЕсли Элементы.Найти("РасчетСебестоимостиВРозницеКартинка" + Сч).Картинка = Элементы.Серый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + Сч] = НСтр("ru='Расчет себестоимости в рознице (суммовой учет) не производился.'");
			ИначеЕсли Элементы.Найти("РасчетСебестоимостиВРозницеКартинка" + Сч).Картинка = Элементы.Красный.Картинка Тогда
				ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + Сч] = НСтр("ru='Требуется выполнить расчет себестоимости в рознице (суммовой учет).'");
			КонецЕсли;
		Иначе
			МесяцЗакрыт = Истина; // месяц закрыт, если есть ошибки
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + Сч]) Тогда
			Если Элементы.Найти("НачислениеАмортизацииКартинка" + Сч).Картинка = Элементы.Зеленый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + Сч] = НСтр("ru='Начисление амортизации выполнено успешно!'");
				МесяцЗакрыт = Истина; // месяц закрыт, если распределение выполнено успешно
			ИначеЕсли Элементы.Найти("НачислениеАмортизацииКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка Тогда
				ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + Сч] = НСтр("ru='Начисление амортизации не требуется.'");
			ИначеЕсли Элементы.Найти("НачислениеАмортизацииКартинка" + Сч).Картинка = Элементы.Серый.Картинка Тогда
				ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + Сч] = НСтр("ru='Начисление амортизации не производилось.'");
			ИначеЕсли Элементы.Найти("НачислениеАмортизацииКартинка" + Сч).Картинка = Элементы.Красный.Картинка Тогда
				ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + Сч] = НСтр("ru='Требуется выполнить начисление амортизации.'");
			КонецЕсли;
		Иначе
			МесяцЗакрыт = Истина; // месяц закрыт, если есть ошибки
		КонецЕсли;
		
		Если Элементы.Найти("РаспределениеЗатратКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка
			И Элементы.Найти("РасчетПрямыхЗатратКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка
			И Элементы.Найти("РасчетФактическойСебестоимостиКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка
			И Элементы.Найти("РасчетФинансовогоРезультатаКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка
			И Элементы.Найти("РасчетКурсовыхРазницКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка
			И Элементы.Найти("РасчетСебестоимостиВРозницеКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка
			И Элементы.Найти("НачислениеАмортизацииКартинка" + Сч).Картинка = Элементы.ЗеленыйНеТребуется.Картинка Тогда
			Элементы.Найти("ДекорацияВыполнятьЗакрытиеНеТребуется" + Сч).Заголовок = НСтр("ru='Закрытие месяца не требуется, т.к. нет данных для расчета.'");
		Иначе
			Элементы.Найти("ДекорацияВыполнятьЗакрытиеНеТребуется" + Сч).Заголовок = "";
		КонецЕсли;
		
		СписокЗакрытийМесяцев.Добавить(МесяцЗакрыт);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НачислениеАмортизацииКартинкаНажатие(Элемент)
	
	ПоказатьПредупреждение(Неопределено,ЭтаФорма["ТекстОшибкаНачислениеАмортизации" + ТекМесяц]);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетПрямыхЗатратКартинкаНажатие(Элемент)
	
	ПоказатьПредупреждение(Неопределено,ЭтаФорма["ТекстОшибкаРасчетПрямыхЗатрат" + ТекМесяц]);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЗатратКартинкаНажатие(Элемент)
	
	ПоказатьПредупреждение(Неопределено,ЭтаФорма["ТекстОшибкаРаспределениеЗатрат" + ТекМесяц]);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетФактическойСебестоимостиКартинкаНажатие(Элемент)
	
	ПоказатьПредупреждение(Неопределено,ЭтаФорма["ТекстОшибкаРасчетФактическойСебестоимости" + ТекМесяц]);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСебестоимостиВРозницеКартинкаНажатие(Элемент)
	
	ПоказатьПредупреждение(Неопределено,ЭтаФорма["ТекстОшибкаРасчетСебестоимостиВРознице" + ТекМесяц]);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетКурсовыхРазницКартинкаНажатие(Элемент)
	
	ПоказатьПредупреждение(Неопределено,ЭтаФорма["ТекстОшибкаРасчетКурсовыхРазниц" + ТекМесяц]);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетФинансовогоРезультатаКартинкаНажатие(Элемент)
	
	ПоказатьПредупреждение(Неопределено,ЭтаФорма["ТекстОшибкаРасчетФинансовогоРезультата" + ТекМесяц]);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если НЕ Выполнено 
		И ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Элементы.Месяцы.ТекущаяСтраница = Элементы.М1 Тогда
		ТекМесяц = 1;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М2 Тогда
		ТекМесяц = 2;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М3 Тогда
		ТекМесяц = 3;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М4 Тогда
		ТекМесяц = 4;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М5 Тогда
		ТекМесяц = 5;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М6 Тогда
		ТекМесяц = 6;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М7 Тогда
		ТекМесяц = 7;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М8 Тогда
		ТекМесяц = 8;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М9 Тогда
		ТекМесяц = 9;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М10 Тогда
		ТекМесяц = 10;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М11 Тогда
		ТекМесяц = 11;
	ИначеЕсли Элементы.Месяцы.ТекущаяСтраница = Элементы.М12 Тогда
		ТекМесяц = 12;
	КонецЕсли;
	
	Элементы.СформироватьОтчет.Доступность = СписокЗакрытийМесяцев[ТекМесяц - 1].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Элементы.Месяцы.Доступность = Истина;
		ПолучитьИнформациюПоЗакрытиюПериодов();
	Иначе
		Элементы.Месяцы.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.СформироватьОтчет.Доступность = СписокЗакрытийМесяцев[ТекМесяц - 1].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗапретаРедактированияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.ДатыЗапретаИзменения", ПараметрыФормы);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Процедура обработчик команды ВыполнитьЗакрытиеМесяца
//
&НаКлиенте
Процедура ВыполнитьЗакрытиеМесяца(Команда)
	
	Если КонецМесяца(Дата(ТекГод, ТекМесяц, 1)) <= КонецДня(ДатаЗапретаРедактирования) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Нельзя закрыть месяц, т.к. он относится к запрещенному для редактирования периоду!'"));
		Возврат;
	КонецЕсли;
	ИнициализироватьЗакрытиеМесяца();
	
КонецПроцедуры // ВыполнитьЗакрытиеМесяца()

&НаКлиенте
Процедура ГодВперед(Команда)
	
	ТекГод = ТекГод + 1;
	УстановитьТекстНадписей();
	ПолучитьИнформациюПоЗакрытиюПериодов();
	Элементы.СформироватьОтчет.Доступность = СписокЗакрытийМесяцев[ТекМесяц - 1].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ГодНазад(Команда)
	
	ТекГод = ?(ТекГод = 1, ТекГод, ТекГод - 1);
	УстановитьТекстНадписей();
	ПолучитьИнформациюПоЗакрытиюПериодов();
	Элементы.СформироватьОтчет.Доступность = СписокЗакрытийМесяцев[ТекМесяц - 1].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗакрытиеМесяца(Команда)
	
	Если ФоновоеЗаданиеИдентификатор <> Новый УникальныйИдентификатор
		И НЕ Выполнено
		И ВыполняетсяФоновоеЗадание(ФоновоеЗаданиеИдентификатор) Тогда // Проверка на случай, если задание было прервано
		
		ПредупредитьОАктивномФоновомЗадании();
		
	Иначе
		
		ОтменитьЗакрытиеМесяцаНаСервере();
		Элементы.СформироватьОтчет.Доступность = СписокЗакрытийМесяцев[ТекМесяц - 1].Значение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ПараметрыФормы = Новый Структура(
	"НачалоПериода, КонецПериода, Организация, ДатаФормирования",
	НачалоМесяца(Дата(ТекГод, ТекМесяц, 1)), КонецМесяца(Дата(ТекГод, ТекМесяц, 1)), Объект.Организация, ТекущаяДата());
	ОткрытьФорму("Отчет.ЗакрытиеМесяца.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// ДлительныеОперации

// Процедура обработчик команды Прервать закрытие месяца в длит. операции
//
&НаКлиенте
Процедура ПрерватьЗакрытиеМесяцаВДлительнойОперации(Команда)
	
	ПрерватьЕслиНеВыполнено = Истина;
	ПроверитьВыполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДатыЗапретаИзмененияПриЗакрытии" Тогда
		
		ДатаЗапрета = ПолучитьДатуЗапретаРедактирования();
		
		Если ЗначениеЗаполнено(ДатаЗапрета) Тогда
			ДатаЗапретаРедактирования = ДатаЗапрета;
		Иначе
			Элементы.ДатаЗапретаРедактирования.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьПредварительныйАнализ(Команда)
	
	ПараметрыФормы = Новый Структура(
	"НачалоПериода, КонецПериода, Организация, КонтекстЗакрытияМесяца",
	НачалоМесяца(Дата(ТекГод, ТекМесяц, 1)), КонецМесяца(Дата(ТекГод, ТекМесяц, 1)), Объект.Организация, Истина);
	
	ОткрытьФорму("Обработка.КонтрольПравильностиУчета.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры
