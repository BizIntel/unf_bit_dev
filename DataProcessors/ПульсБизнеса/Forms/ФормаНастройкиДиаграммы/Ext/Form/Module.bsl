
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СимволРеглВалюты = УправлениеНебольшойФирмойПовтИсп.ПолучитьСимвольноеПредставлениеВалюты(
	УправлениеНебольшойФирмойПовтИсп.ПолучитьВалютуУчета());
	
	Параметры.Свойство("Диаграмма", Диаграмма);
	
	Параметры.Свойство("Серия", Серия);
	Параметры.Свойство("Точка", Точка);
	Параметры.Свойство("Представление", Представление);
	Параметры.Свойство("Период", Период);
	Параметры.Свойство("ПериодСравнения", ПериодСравнения);
	Параметры.Свойство("Фильтры", Фильтры);
	Если Фильтры=Неопределено Тогда
		Фильтры = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли; 
	Параметры.Свойство("Настройки", Настройки);
	Если Настройки=Неопределено Тогда
		Настройки = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли; 
	
	Если Параметры.Свойство("ИдентификаторСтроки") Тогда
		ИдентификаторСтроки = Параметры.ИдентификаторСтроки;
		Заголовок = НСтр("ru = 'Настройка диаграммы'");
	Иначе
		ИдентификаторСтроки = -1;
		Заголовок = НСтр("ru = 'Добавление диаграммы'");
	КонецЕсли; 
	
	Если Параметры.Свойство("АдресНастроекДиаграмм") И ЭтоАдресВременногоХранилища(Параметры.АдресНастроекДиаграмм) Тогда
		НастройкиДиаграмм.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресНастроекДиаграмм));
	КонецЕсли; 
	
	Таб = НастройкиДиаграмм.Выгрузить(, "Диаграмма, Представление");
	Таб.Свернуть("Диаграмма, Представление");
	Элементы.Диаграмма.СписокВыбора.Очистить();
	Для каждого Стр Из Таб Цикл
		Элементы.Диаграмма.СписокВыбора.Добавить(Стр.Диаграмма, Стр.Представление);
	КонецЦикла;
	
	УстановитьВидимостьНастроек();
	Если ЗначениеЗаполнено(Диаграмма) Тогда
		ОбновитьПараметрыКомпоновщика();
	КонецЕсли; 
	УстановитьСвостваПолейПериодов();
	
	Если НЕ ИдентификаторСтроки=-1 Тогда
		ОбновитьОтображениеОтметокФильтров();
		ОбновитьОтображениеНастроек();
		ТекущийЭлемент = Элементы.Серия;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Диаграмма) Тогда
		ЗаполнитьСписокВыбораСерииТочки();
	КонецЕсли;
	// Обновление значений после заполнения списка выбора;
	Серия = Серия;
	Точка = Точка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Событие="ДобавлениеОтбора" Тогда
		ОбъединитьФильтрыСервер(ВыбранноеЗначение);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДиаграммаПриИзменении(Элемент)
	
	ЗаполнитьСписокВыбораСерииТочки();
	Если Элементы.Серия.СписокВыбора.Количество()>0 Тогда
		Серия = Элементы.Серия.СписокВыбора[0].Значение;
	Иначе
		Серия = "";
	КонецЕсли;
	Если Элементы.Точка.СписокВыбора.Количество()>0 Тогда
		Точка = Элементы.Точка.СписокВыбора[0].Значение;
	Иначе
		Точка = "";
	КонецЕсли;
	ПриИзмененииДиаграммыСервер();
	СформироватьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	
	ОбновитьСписокВыбораТочки();
	ПриИзмененииСерииСервер();
	СформироватьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаПриИзменении(Элемент)
	
	ПриИзмененииТочкиСервер();
	СформироватьПредставление()
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборПериодаНачало(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСравненияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборПериодаНачало(Элемент);
	
КонецПроцедуры

#Область ОтметкиФильтров

&НаКлиенте
Процедура Подключаемый_УдалитьФильтрНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяКнопки = Элемент.Имя;
	Стр = СтрокаНаложенногоФильтра(ИмяКнопки);
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УдалитьФильтр(Стр);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФильтр(СтрНаложенногоФильтра)
	
	МассивКУдалению = Новый Массив;
	МассивФильтров = Новый Массив(Фильтры);
	Для каждого Фильтр Из МассивФильтров Цикл
		Если НЕ СтрНаложенногоФильтра.Поле=Фильтр.Поле Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Фильтр.Значение)=Тип("СписокЗначений") Тогда
			Элемент = Фильтр.Значение.НайтиПоЗначению(СтрНаложенногоФильтра.Значение);
			Если НЕ Элемент=Неопределено Тогда
				Фильтр.Значение.Удалить(Элемент);
			КонецЕсли; 
			Если Фильтр.Значение.Количество()=0 Тогда
				МассивКУдалению.Добавить(Фильтр);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Фильтр.Значение)=Тип("Дата") Тогда
			Если Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ЗначениеСравнения = Новый СтандартныйПериод('0001-01-01', Фильтр.Значение);
			ИначеЕсли Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ЗначениеСравнения = Новый СтандартныйПериод(Фильтр.Значение, '0001-01-01');
			КонецЕсли;
			Если СтрНаложенногоФильтра.Значение=ЗначениеСравнения Тогда
				МассивКУдалению.Добавить(Фильтр);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Фильтр.Значение)=Тип("Число") Тогда
			Если (Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше 
				ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно)
				И СтрНаложенногоФильтра.Значение.ЗначениеДо=Фильтр.Значение Тогда
				МассивКУдалению.Добавить(Фильтр);
			ИначеЕсли (Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше 
				ИЛИ Фильтр.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно)
				И СтрНаложенногоФильтра.Значение.ЗначениеОт=Фильтр.Значение  Тогда
				МассивКУдалению.Добавить(Фильтр);
			КонецЕсли;
		ИначеЕсли Фильтр.Значение=СтрНаложенногоФильтра.Значение Тогда 
			МассивКУдалению.Добавить(Фильтр);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого Фильтр Из МассивКУдалению Цикл
		МассивФильтров.Удалить(МассивФильтров.Найти(Фильтр));
	КонецЦикла; 
	
	Фильтры = Новый ФиксированныйМассив(МассивФильтров);
	
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	Если ПустаяСтрока(СокрЛП(Представление)) 
		ИЛИ НЕ ЗначениеЗаполнено(Диаграмма) 
		ИЛИ НЕ ЗначениеЗаполнено(Серия)
		ИЛИ НЕ ЗначениеЗаполнено(Точка) Тогда
		Возврат;
	КонецЕсли; 
	
	// Связь по идентификатору с таблицей вариантов диаграм
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
	Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
	СтрНастроек = Строки[0];
	ОписаниеСерий = СтрНастроек.Серии[Серия];
	ОписаниеТочек = СтрНастроек.Точки[Точка];
	
	Результат = Новый Структура;
	Результат.Вставить("Событие", "НастройкаДиаграммы");
	Если ИдентификаторСтроки>=0 Тогда
		Результат.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	КонецЕсли;
	Результат.Вставить("Диаграмма", Диаграмма);
	Результат.Вставить("Серия", Серия);
	Результат.Вставить("Точка", Точка);
	Результат.Вставить("Период", Период);
	Результат.Вставить("ПериодСравнения", ПериодСравнения);
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("РежимОстатка", РежимОстатка);
	МассивФильтров = Новый Массив(Фильтры);
	Если ЗначениеЗаполнено(ОписаниеСерий.ОбязательныеФильтры) Тогда
		Отказ = Ложь;
		Для каждого ОписаниеФильтра Из ОписаниеСерий.ОбязательныеФильтры Цикл
			ЗначениеФильтра = ЭтотОбъект["НастройкаДиаграммы_"+ОписаниеФильтра.Ключ];
			ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеФильтра.Ключ));
			Если НЕ ЗначениеЗаполнено(ЗначениеФильтра) Тогда
				Состояние(НСтр("ru = 'Не задан обязательный фильтр: '")+?(ДоступноеПоле=Неопределено, ОписаниеФильтра.Ключ, ДоступноеПоле.Заголовок));
				Отказ = Истина;
			КонецЕсли;
			СтруктураФильтра = Новый Структура;
			СтруктураФильтра.Вставить("Поле", ОписаниеФильтра.Ключ);
			СтруктураФильтра.Вставить("Значение", ЗначениеФильтра);
			СтруктураФильтра.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
			СтруктураФильтра.Вставить("Представление", ДоступноеПоле.Заголовок);
			МассивФильтров.Вставить(0, СтруктураФильтра);
		КонецЦикла;
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	Фильтры = Новый ФиксированныйМассив(МассивФильтров);
	Результат.Вставить("Фильтры", Фильтры);
	Если ТипЗнч(Настройки)=Тип("ФиксированныйМассив") Тогда
		Для каждого Элемент Из Настройки Цикл
			Элемент.Значение = ЭтаФорма[Элемент.Имя];
		КонецЦикла; 
	КонецЕсли; 
	Результат.Вставить("Настройки", Настройки);
	ОповеститьОВыборе(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНастройку(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФильтр(Команда)
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("АдресСхемы", АдресСхемы);
	СтруктураОткрытия.Вставить("Фильтры", Фильтры);
	ОткрытьФорму("Обработка.ПульсБизнеса.Форма.ФормаДобавленияФильтра", СтруктураОткрытия, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьНастроек()
	
	Элементы.Диаграмма.Доступность = ИдентификаторСтроки<0;
	Элементы.Серия.Видимость = ЗначениеЗаполнено(Диаграмма);
	Элементы.Точка.Видимость = ЗначениеЗаполнено(Диаграмма);
	ЗаполненыНастройки = ЗначениеЗаполнено(Диаграмма) И ЗначениеЗаполнено(Серия) И ЗначениеЗаполнено(Точка);
	Элементы.ПериодПредставление.Видимость = ЗаполненыНастройки;
	Элементы.ПериодСравненияПредставление.Видимость = ЗаполненыНастройки;
	Элементы.ДобавитьФильтр.Видимость = ЗаполненыНастройки;
	Если ЗначениеЗаполнено(Диаграмма) Тогда
		ОбновитьПараметрыКомпоновщика();
		УстановитьСвостваПолейПериодов();
	КонецЕсли;
	Если ЗначениеЗаполнено(Диаграмма) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
		СтрокиНастроек = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
		СтрНастройки = СтрокиНастроек[0];
		Если СтрНастройки.ЗапретитьСравнение Тогда
			Элементы.ПериодСравненияПредставление.Видимость = Ложь;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Серия) Тогда
			НастройкиСерии = СтрНастройки.Серии[Серия];
			Если НастройкиСерии.ТипДиаграммы=ТипДиаграммы.Круговая 
				ИЛИ НастройкиСерии.ТипДиаграммы=ТипДиаграммы.КруговаяОбъемная Тогда
				Элементы.Серия.Заголовок = НСтр("ru = 'Показатель'");
				Элементы.Точка.Заголовок = НСтр("ru = 'Значения'");
				Элементы.ПериодСравненияПредставление.Видимость = Ложь;
			ИначеЕсли НастройкиСерии.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплением 
				ИЛИ НастройкиСерии.ТипДиаграммы=ТипДиаграммы.ГистограммаСНакоплениемОбъемная Тогда
				Элементы.Серия.Заголовок = НСтр("ru = 'Вертикально'");
				Элементы.Точка.Заголовок = НСтр("ru = 'Горизонтально'");
				Элементы.ПериодСравненияПредставление.Видимость = Ложь;
			Иначе
				Элементы.Серия.Заголовок = НСтр("ru = 'Вертикально'");
				Элементы.Точка.Заголовок = НСтр("ru = 'Горизонтально'");
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеОтметокФильтров()
	
	ЗаполнитьТаблицуНаложенныхФильтров();
	
	МассивКУдалению = Новый Массив;
	Группа = Элементы.ГруппаОтметокФильтров;
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		МассивКУдалению.Добавить(Элемент);
	КонецЦикла; 
	
	Для каждого Элемент Из МассивКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	ОписаниеСерии = Неопределено;
	Если НЕ ПустаяСтрока(Диаграмма) И НЕ ПустаяСтрока(Серия) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
		Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество()>0 Тогда
			СтрНастроек = Строки[0];
			ОписаниеСерии = СтрНастроек.Серии[Серия];
		КонецЕсли; 
	КонецЕсли; 
	
	Для каждого Стр Из НаложенныеФильтры Цикл
		
		Если НЕ ОписаниеСерии=Неопределено И НЕ ОписаниеСерии.ОбязательныеФильтры=Неопределено Тогда
			Пропустить = Ложь;
			Для каждого ОбязательныйФильтр Из ОписаниеСерии.ОбязательныеФильтры Цикл
				Если Стр.Поле=ОбязательныйФильтр.Ключ Тогда
					Пропустить = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			Если Пропустить Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		ЭлементОтметка = Элементы.Добавить(Стр.ИмяКнопки, Тип("ДекорацияФормы"), Группа);
		
		ЭлементыЗаголовка = Новый Массив;
		Если СтрДлина(Стр.Заголовок)>60 Тогда
			ЭлементыЗаголовка.Добавить(Лев(Стр.Заголовок, 58)+"...");
			ЭлементОтметка.Подсказка = Стр.Заголовок;
		Иначе
			ЭлементыЗаголовка.Добавить(Стр.Заголовок);
		КонецЕсли; 
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, Стр.ИмяКнопки));
		
		ЭлементОтметка.Вид = ВидДекорацииФормы.Надпись;
		ЭлементОтметка.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		ЭлементОтметка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		Если Стр.ПризнакИсключения Тогда
			ЭлементОтметка.ЦветРамки = WebЦвета.Красный;
		КонецЕсли; 
		ЭлементОтметка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтметка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ЭлементОтметка.Высота = 1;
		ЭлементОтметка.РастягиватьПоГоризонтали = Истина;
		ЭлементОтметка.АвтоМаксимальнаяШирина = Ложь;
		ЭлементОтметка.МаксимальнаяШирина = 50;
		ЭлементОтметка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалитьФильтрНажатие");
		
	КонецЦикла;  
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеНастроек()
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивКУдалению = Новый Массив;
	Для каждого Элемент Из Элементы.ГруппаНастройки.ПодчиненныеЭлементы Цикл
		МассивКУдалению.Добавить(Элемент);
		Если НЕ ТипЗнч(Элемент)=Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли; 
		МассивУдаляемыхРеквизитов.Добавить(Элемент.ПутьКДанным);
	КонецЦикла;
	Для каждого Элемент Из МассивКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла; 
	Для каждого Элемент Из Настройки Цикл
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Элемент.Имя, Новый ОписаниеТипов("Булево"),, Элемент.Заголовок));
	КонецЦикла;
	ОписаниеСерии = Неопределено;
	Если НЕ ПустаяСтрока(Диаграмма) И НЕ ПустаяСтрока(Серия) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
		Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество()>0 Тогда
			СтрНастроек = Строки[0];
			ОписаниеСерии = СтрНастроек.Серии[Серия];
			Если ЗначениеЗаполнено(ОписаниеСерии.ОбязательныеФильтры) Тогда
				МассивРеквизитов = Новый Массив;
				Для каждого ОписаниеФильтра Из ОписаниеСерии.ОбязательныеФильтры Цикл
					Поле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеФильтра.Ключ));
					ИмяРеквизита = "НастройкаДиаграммы_"+ОписаниеФильтра.Ключ;
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Поле.ТипЗначения,, Поле.Заголовок));
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	Для каждого Элемент Из Настройки Цикл
		Группа = Элементы.ГруппаНастройки;
		ЭлементФормы = Элементы.Добавить(Элемент.Имя, Тип("ПолеФормы"), Группа);
		ЭлементФормы.ПутьКДанным = Элемент.Имя;
		ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
		ЭтаФорма[Элемент.Имя] = Элемент.Значение;
	КонецЦикла; 
	
	Если НЕ ОписаниеСерии=Неопределено И ЗначениеЗаполнено(ОписаниеСерии.ОбязательныеФильтры) Тогда
		МассивФильтров = Новый Массив(Фильтры);
		Для каждого ОписаниеФильтра Из ОписаниеСерии.ОбязательныеФильтры Цикл
			ИмяРеквизита = "НастройкаДиаграммы_"+ОписаниеФильтра.Ключ;
			Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаНастройки);
			Элемент.ПутьКДанным = ИмяРеквизита;
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.КнопкаОткрытия = Ложь;
			Элемент.АвтоОтметкаНезаполненного = Истина;
			Для каждого СтруктураФильтра Из МассивФильтров Цикл
				Если СтруктураФильтра.Поле=ОписаниеФильтра.Ключ И НЕ ТипЗнч(СтруктураФильтра.Значение)=Тип("Массив") Тогда
					ЭтотОбъект[ИмяРеквизита] = СтруктураФильтра.Значение;
					МассивФильтров.Удалить(МассивФильтров.Найти(СтруктураФильтра));
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			МассивПараметров = Новый Массив;
			Если ТипЗнч(ОписаниеФильтра.Значение)=Тип("Соответствие") Тогда
				Для каждого ОписаниеПараметраВыбора Из ОписаниеФильтра.Значение Цикл
					Если ОписаниеПараметраВыбора.Ключ="ПараметрыПоля" Тогда
						Для каждого ОписаниеСвойства Из ОписаниеПараметраВыбора.Значение Цикл
							Элемент[ОписаниеСвойства.Ключ] = ОписаниеСвойства.Значение;
						КонецЦикла; 
					Иначе
						ПараметрВыбора = Новый ПараметрВыбора(
						ОписаниеПараметраВыбора.Ключ, 
						?(ТипЗнч(ОписаниеПараметраВыбора.Значение)=Тип("Массив"), Новый ФиксированныйМассив(ОписаниеПараметраВыбора.Значение), ОписаниеПараметраВыбора.Значение));
						МассивПараметров.Добавить(ПараметрВыбора);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		КонецЦикла;
		Фильтры = Новый ФиксированныйМассив(МассивФильтров);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыКомпоновщика()
	
	Если ПустаяСтрока(Диаграмма) Тогда
		Возврат;
	КонецЕсли;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
	СтрокиДиаграмм = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
	Если СтрокиДиаграмм.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ИмяМакета = СтрокиДиаграмм[0].ИмяМакета;
	Если НЕ ПустаяСтрока(Серия) Тогда
		РежимОстатка = СтрокиДиаграмм[0].Остаток;
	Иначе
		РежимОстатка = Ложь;
	КонецЕсли; 
	
	Если Метаданные.Обработки.ПульсБизнеса.Макеты.Найти(ИмяМакета)=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СхемаКомпоновкиДанных = Обработки.ПульсБизнеса.ПолучитьМакет(ИмяМакета);
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	МассивНастроек = Новый Массив(Настройки);
	МассивНастроек.Очистить();
	// Возможность добавления дополнительных настроек диаграмм
	Настройки = Новый ФиксированныйМассив(МассивНастроек);
	
КонецПроцедуры
 
&НаКлиенте
Процедура СформироватьПредставление()
	
	Представление = "";
	Если ПустаяСтрока(Диаграмма) ИЛИ ПустаяСтрока(Серия) Тогда
		Возврат;
	КонецЕсли;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
	Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		Представление = Стр.Представление;
		ОписаниеСерии = Стр.Серии[Серия];
		Если ОписаниеСерии.Валютная Тогда
			Представление = Представление+", "+СимволРеглВалюты;
		КонецЕсли;  
	КонецЦикла; 
	
	Если РежимОстатка Тогда
		Если ЗначениеЗаполнено(Период) И НЕ Период.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоДня Тогда
			Представление = Представление+" ("+ПредставлениеСтандартнойДатыНачала(Период)+")";
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Период) Тогда
			Представление = Представление+" ("+ПредставлениеСтандартногоПериода(Период)+")";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСерииТочки()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
	Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
	Элементы.Серия.СписокВыбора.Очистить();
	Элементы.Точка.СписокВыбора.Очистить();
	Для каждого Стр Из Строки Цикл
		Для каждого Элемент Из Стр.Серии Цикл
			Если Элемент.Значение.Представления.Количество()>1 Тогда
				ПредставлениеСерии = Элемент.Значение.Заголовок;
			Иначе
				ПредставлениеСерии = Элемент.Значение.Представления[0];
			КонецЕсли; 
			Элементы.Серия.СписокВыбора.Добавить(Элемент.Ключ, ПредставлениеСерии);
		КонецЦикла; 
		Для каждого Элемент Из Стр.Точки Цикл
			Элементы.Точка.СписокВыбора.Добавить(Элемент.Ключ, Элемент.Значение.Представления[0]);
		КонецЦикла; 
	КонецЦикла;
	Элементы.Серия.Доступность = Элементы.Серия.СписокВыбора.Количество()>1;
	Элементы.Точка.Доступность = Элементы.Точка.СписокВыбора.Количество()>1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораТочки()
	
	Если ПустаяСтрока(Диаграмма) Или ПустаяСтрока(Серия) Тогда
		Возврат;
	КонецЕсли; 
	Элементы.Точка.СписокВыбора.Очистить();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
	Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		ЭлементСерия = Стр.Серии[Серия];
		Если ПустаяСтрока(ЭлементСерия.ДоступныеТочкиСерии) Тогда
			Для каждого Элемент Из Стр.Точки Цикл
				Элементы.Точка.СписокВыбора.Добавить(Элемент.Ключ, Элемент.Значение.Представления[0]);
			КонецЦикла; 
		Иначе
			МассивТочек = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементСерия.ДоступныеТочкиСерии);
			Для каждого ИмяТочки Из МассивТочек Цикл
				ЭлементТочки = Стр.Точки[ИмяТочки];
				Элементы.Точка.СписокВыбора.Добавить(ИмяТочки, ЭлементТочки.Представления[0]);
			КонецЦикла; 
		КонецЕсли;
		Если Элементы.Точка.СписокВыбора.Количество()=0 Тогда
			Точка = "";
			Продолжить;
		КонецЕсли; 
		Если Элементы.Точка.СписокВыбора.НайтиПоЗначению(Точка)=Неопределено Тогда
			Точка = Элементы.Точка.СписокВыбора[0].Значение;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДиаграммыСервер()
	
	ПриИзмененииДиаграммыСерииТочкиСервер();
	
КонецПроцедуры
 
&НаСервере
Процедура ПриИзмененииСерииСервер()
	
	ПриИзмененииДиаграммыСерииТочкиСервер();
	
КонецПроцедуры
 
&НаСервере
Процедура ПриИзмененииТочкиСервер()
	
	ПриИзмененииДиаграммыСерииТочкиСервер();
	
КонецПроцедуры
 
&НаСервере
Процедура ПриИзмененииДиаграммыСерииТочкиСервер()
	
	Фильтры = Новый ФиксированныйМассив(Новый Массив);
	Настройки = Новый ФиксированныйМассив(Новый Массив);
	ОбновитьОтображениеОтметокФильтров();
	ОбновитьОтображениеНастроек();
	
	УстановитьВидимостьНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ОбъединитьФильтрыСервер(ВыбранноеЗначение)
	
	МассивФильтров = Новый Массив(Фильтры);
	ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ВыбранноеЗначение.Поле));
	
	Обработки.ПульсБизнеса.ОбъединитьФильтры(МассивФильтров, 
	ВыбранноеЗначение.Поле, 
	ВыбранноеЗначение.ВидСравнения, 
	ВыбранноеЗначение.Значение, 
	?(ДоступноеПоле=Неопределено, "", ДоступноеПоле.Заголовок));
	
	Фильтры = Новый ФиксированныйМассив(МассивФильтров);
	ОбновитьОтображениеОтметокФильтров();
	
КонецПроцедуры 

#Область Периоды

&НаСервере
Процедура УстановитьСвостваПолейПериодов()
	
	Если РежимОстатка И НЕ ТипЗнч(Период)=Тип("СтандартнаяДатаНачала") Тогда
		Период = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.ПроизвольнаяДата);
		ПериодСравнения = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.ПроизвольнаяДата);
	ИначеЕсли НЕ РежимОстатка И НЕ ТипЗнч(Период)=Тип("СтандартныйПериод") И НЕ ТипЗнч(Период)=Тип("Структура") Тогда
		Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ПроизвольныйПериод);
		ПериодСравнения = Новый СтандартныйПериод(ВариантСтандартногоПериода.ПроизвольныйПериод);
	КонецЕсли; 
	Если РежимОстатка Тогда
		Если НЕ ЗначениеЗаполнено(Период) Тогда
			Период = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
		КонецЕсли; 
		Элементы.ПериодПредставление.Заголовок = НСтр("ru = 'На дату'");
		ПериодПредставление = ПредставлениеСтандартнойДатыНачала(Период);
		ПериодСравненияПредставление = ПредставлениеСтандартнойДатыНачала(ПериодСравнения);
	Иначе
		Если НЕ ЗначениеЗаполнено(Период) Тогда
			Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
		КонецЕсли; 
		Элементы.ПериодПредставление.Заголовок = НСтр("ru = 'Период'");
		ПериодПредставление = ПредставлениеСтандартногоПериода(Период);
		ПериодСравненияПредставление = ПредставлениеСтандартногоПериода(ПериодСравнения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаНачало(Элемент)
	
	ДанныеВыбора = Новый СписокЗначений;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Элемент", Элемент);
	Если РежимОстатка Тогда
		Если Элемент=Элементы.ПериодПредставление Тогда
			// Дата среза
			ПериодРасчета = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
			ДанныеВыбора.Добавить(ПериодРасчета, ПредставлениеСтандартнойДатыНачала(ПериодРасчета));
			ПериодРасчета = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
			ДанныеВыбора.Добавить(ПериодРасчета, ПредставлениеСтандартнойДатыНачала(ПериодРасчета));
			ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели));
			ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца));
			ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоКвартала));
			ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоПолугодия));
			ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоГода));
			ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.ПроизвольнаяДата), НСтр("ru = 'Произвольная дата'"));
			СтруктураПараметров.Вставить("Значение", Период);
		ИначеЕсли Элемент=Элементы.ПериодСравненияПредставление Тогда
			// Дата сравнения
			ДанныеВыбора.Добавить(Неопределено, НСтр("ru = 'Не сравнивать'"));
			Если Период=Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня) Тогда
				ПериодРасчета = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
				ДанныеВыбора.Добавить(Период, ПредставлениеСтандартнойДатыНачала(ПериодРасчета));
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлогоДня));
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели));
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца));
			ИначеЕсли Период=Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня) Тогда
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлогоДня));
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели));
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца));
			ИначеЕсли Период=Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели) Тогда
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлойНедели));
			ИначеЕсли Период=Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца) Тогда
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлогоМесяца));
			ИначеЕсли Период=Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоКвартала) Тогда
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлогоКвартала));
			ИначеЕсли Период=Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоПолугодия) Тогда
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоПрошлогоПолугодия));
			ИначеЕсли Период=Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоГода) Тогда
				ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоГода));
			КонецЕсли;
			ДатаРасчета = ?(Период.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоДня, КонецДня(ТекущаяДата()), НачалоДня(Период.Дата));
			ПериодРасчета = ДатаРасчета-7*86400;
			СтруктураПериода = Новый Структура("Вариант, Дата", "ТакойЖеДеньНаПрошлойНеделе", ПериодРасчета);
			ДанныеВыбора.Добавить(СтруктураПериода, ПредставлениеСтандартнойДатыНачала(СтруктураПериода));
			ПериодРасчета = ДобавитьМесяц(ДатаРасчета, -1);
			СтруктураПериода = Новый Структура("Вариант, Дата", "ТакойЖеДеньВПрошломМесяце", ПериодРасчета);
			ДанныеВыбора.Добавить(СтруктураПериода, ПредставлениеСтандартнойДатыНачала(СтруктураПериода));
			ПериодРасчета = Дата(Год(ДатаРасчета)-1, Месяц(ДатаРасчета), День(ДатаРасчета), Час(ДатаРасчета), Минута(ДатаРасчета), Секунда(ДатаРасчета));
			СтруктураПериода = Новый Структура("Вариант, Дата", "ТакойЖеДеньВПрошломГоду", ПериодРасчета);
			ДанныеВыбора.Добавить(СтруктураПериода, ПредставлениеСтандартнойДатыНачала(СтруктураПериода));
			ДанныеВыбора.Добавить(Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.ПроизвольнаяДата), НСтр("ru = 'Произвольная дата'"));
			СтруктураПараметров.Вставить("Значение", ПериодСравнения);
		КонецЕсли; 
	Иначе
		Если Элемент=Элементы.ПериодПредставление Тогда
			// Период
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня));
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.СНачалаЭтойНедели));
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.СНачалаЭтогоМесяца));
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.СНачалаЭтогоКвартала));
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.СНачалаЭтогоПолугодия));
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.СНачалаЭтогоГода));
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.Последние7Дней));
			ДанныеВыбора.Добавить(Новый Структура("Вариант", "Последние7ДнейНеСчитаяТекущего"), НСтр("ru = 'Последние 7 дней, не считая текущего'"));
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ПроизвольныйПериод), НСтр("ru = 'Произвольный период'"));
			СтруктураПараметров.Вставить("Значение", Период);
		ИначеЕсли Элемент=Элементы.ПериодСравненияПредставление Тогда
			// Период сравнения
			ДанныеВыбора.Добавить(Неопределено, НСтр("ru = 'Не сравнивать'"));
			Если ТипЗнч(Период)=Тип("Структура") ИЛИ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
				ПериодРасчета = ПредыдущийПлавающийПериод(Период);
				СтруктураПериода = Новый Структура("Вариант, Период", "ПредыдущийПлавающийПериод", ПериодРасчета);
				ДанныеВыбора.Добавить(СтруктураПериода, ПредставлениеСтандартногоПериода(СтруктураПериода));
				ПериодРасчета = АналогичныйПериодПрошлогоГода(Период);
				Если НЕ ПериодРасчета=Неопределено Тогда
					СтруктураПериода = Новый Структура("Вариант, Период", "ЗаПрошлыйГод", ПериодРасчета);
					ДанныеВыбора.Добавить(СтруктураПериода, ПредставлениеСтандартногоПериода(СтруктураПериода));
				КонецЕсли; 
			КонецЕсли; 
			ДанныеВыбора.Добавить(Новый СтандартныйПериод(ВариантСтандартногоПериода.ПроизвольныйПериод), НСтр("ru = 'Произвольный период'"));
			СтруктураПараметров.Вставить("Значение", ПериодСравнения);
		КонецЕсли; 
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, СтруктураПараметров);
	ПоказатьВыборИзМеню(Оповещение, ДанныеВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(ВыбранноеЗначение, СтруктураПараметров) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодРасчета = ВыбранноеЗначение.Значение;
	Если РежимОстатка Тогда
		Если НЕ ЗначениеЗаполнено(ПериодРасчета) И НЕ ПериодРасчета=Неопределено Тогда
			ТекущееЗначение = ?(ТипЗнч(СтруктураПараметров.Значение)=Тип("СтандартнаяДатаНачала"), СтруктураПараметров.Значение, Новый СтандартнаяДатаНачала);
			Оповещение = Новый ОписаниеОповещения("ВыборПроизвольногоПериода", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВводДаты(Оповещение, ТекущееЗначение.Дата, НСтр("ru = 'Укажите дату'"), ЧастиДаты.Дата); 
		ИначеЕсли СтруктураПараметров.Элемент=Элементы.ПериодПредставление Тогда
			Период = ПериодРасчета;
			ПериодПредставление = ПредставлениеСтандартнойДатыНачала(ПериодРасчета);
			СформироватьПредставление();
		Иначе
			ПериодСравнения = ПериодРасчета;
			ПериодСравненияПредставление = ПредставлениеСтандартнойДатыНачала(ПериодРасчета);
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(ПериодРасчета) И НЕ ПериодРасчета=Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("ВыборПроизвольногоПериода", ЭтотОбъект, СтруктураПараметров);
			Диалог = Новый ДиалогРедактированияСтандартногоПериода;
			Диалог.Период = ?(ТипЗнч(СтруктураПараметров.Значение)=Тип("СтандартныйПериод"), СтруктураПараметров.Значение, Новый СтандартныйПериод);
			Диалог.Показать(Оповещение);
		ИначеЕсли СтруктураПараметров.Элемент=Элементы.ПериодПредставление Тогда
			Период = ПериодРасчета;
			ПериодПредставление = ПредставлениеСтандартногоПериода(ПериодРасчета);
			СформироватьПредставление();
		Иначе
			ПериодСравнения = ПериодРасчета;
			ПериодСравненияПредставление = ПредставлениеСтандартногоПериода(ПериодРасчета);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроизвольногоПериода(ВыбранноеЗначение, СтруктураПараметров) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимОстатка Тогда
		Если СтруктураПараметров.Элемент=Элементы.ПериодПредставление Тогда
			Период = Новый СтандартнаяДатаНачала(ВыбранноеЗначение);
			ПериодПредставление = ПредставлениеСтандартнойДатыНачала(Период);
			СформироватьПредставление();
		Иначе
			ПериодСравнения = Новый СтандартнаяДатаНачала(ВыбранноеЗначение);
			ПериодСравненияПредставление = ПредставлениеСтандартнойДатыНачала(ПериодСравнения);
		КонецЕсли;
	Иначе
		Если СтруктураПараметров.Элемент=Элементы.ПериодПредставление Тогда
			Период = ВыбранноеЗначение;
			ПериодПредставление = ПредставлениеСтандартногоПериода(Период);
			СформироватьПредставление();
		Иначе
			ПериодСравнения = ВыбранноеЗначение;
			ПериодСравненияПредставление = ПредставлениеСтандартногоПериода(ПериодСравнения);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Функция ПредыдущийПлавающийПериод(Период)
	
	Если ТипЗнч(Период)=Тип("Структура") И Период.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());
		Возврат Новый СтандартныйПериод(ДатаНачала-14*86400, ДатаНачала-7*86400-1); 
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.Сегодня Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера);
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели);
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты);
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты);
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты);
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты);
	Иначе
		ПродолжительностьСекунд = (КонецДня(Период.ДатаОкончания)-Период.ДатаНачала+1);
		Возврат Новый СтандартныйПериод(Период.ДатаНачала-ПродолжительностьСекунд, Период.ДатаНачала-1); 
	КонецЕсли; 
	
КонецФункции
 
&НаКлиенте
Функция АналогичныйПериодПрошлогоГода(Период)
	
	Если ТипЗнч(Период)=Тип("Структура") И Период.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		ДатаНачала = НачалоДня(ТекущаяДата())-7*86400;
		ДатаОкончания = НачалоДня(ТекущаяДата())-1;
	Иначе
		ДатаНачала = Период.ДатаНачала;
		ДатаОкончания = Период.ДатаОкончания;
	КонецЕсли;
	
	Год = Год(ДатаНачала);
	Месяц = Месяц(ДатаНачала);
	День = День(ДатаНачала);
	Если Год%4=0 И Месяц=2 И День=29 Тогда
		// Этот год высокосный
		День = 28;
	ИначеЕсли (Год-1)%4=0 И Месяц=2 И День=28 Тогда
		// Прошлый год высокосный
		День = 29;
	КонецЕсли; 
	ГодКонца = Год(ДатаОкончания);
	МесяцКонца = Месяц(ДатаОкончания);
	ДеньКонца = День(ДатаОкончания);
	Если ГодКонца%4>0 И МесяцКонца=2 И ДеньКонца=29 Тогда
		// Этот год высокосный
		ДеньКонца = 28;
	ИначеЕсли (ГодКонца-1)%4=0 И МесяцКонца=2 И ДеньКонца=28 Тогда
		// Прошлый год высокосный
		ДеньКонца = 29;
	КонецЕсли; 
	
	Если Период.Вариант=ВариантСтандартногоПериода.Сегодня Тогда
		Дата = Дата(Год-1, Месяц, День);
		Возврат Новый СтандартныйПериод(НачалоДня(Дата), КонецДня(Дата));
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		ПродолжительностьСекунд = НачалоДня(ДатаОкончания)-НачалоНедели(ДатаОкончания);
		Неделя = НеделяГода(ДатаНачала);
		ДеньНедели = ДеньНедели(Дата(Год-1, 1, 1));
		НомерДня = 7*(Неделя-1)-ДеньНедели+1;
		Дата = Дата(Год-1, 1, 1)+НомерДня*86400;
		Возврат Новый СтандартныйПериод(НачалоНедели(Дата), КонецДня(Дата+ПродолжительностьСекунд));
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Возврат Новый СтандартныйПериод(Дата(Год-1, Месяц, 1), КонецДня(Дата(ГодКонца-1, МесяцКонца, ДеньКонца)));
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Дата = ДобавитьМесяц(Дата(Год-1, 1, 1), Месяц-1);
		Возврат Новый СтандартныйПериод(НачалоКвартала(Дата), КонецДня(Дата(ГодКонца-1, МесяцКонца, ДеньКонца)));
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Если Месяц<7 Тогда
			Возврат Новый СтандартныйПериод(Дата(Год-1, 1, 1), КонецДня(Дата(ГодКонца-1, МесяцКонца, ДеньКонца)));
		Иначе
			Возврат Новый СтандартныйПериод(ДобавитьМесяц(Дата(Год-1, 1, 1), 6), КонецДня(Дата(ГодКонца-1, МесяцКонца, ДеньКонца)));
		КонецЕсли; 
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый СтандартныйПериод(Дата(Год-1, Месяц, День), КонецДня(Дата(ГодКонца-1, МесяцКонца, ДеньКонца)));
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтандартногоПериода(Период)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат НСтр("ru = 'Не выбран'");
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
			Возврат НСтр("ru = 'до '")+Формат(Период.ДатаОкончания, "ДЛФ=D");
		ИначеЕсли НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			Возврат НСтр("ru = 'от '")+Формат(Период.ДатаНачала, "ДЛФ=D");
		Иначе
			Возврат ПредставлениеПериода(НачалоДня(Период.ДатаНачала), ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания));
		КонецЕсли; 
	ИначеЕсли Период.Вариант="ПредыдущийПлавающийПериод" Тогда
		Возврат НСтр("ru = 'Предыдущий период ('")+ПредставлениеПериода(НачалоДня(Период.Период.ДатаНачала), КонецДня(Период.Период.ДатаОкончания))+")";
	ИначеЕсли Период.Вариант="ЗаПрошлыйГод" Тогда
		Возврат НСтр("ru = 'За прошлый год ('")+ПредставлениеПериода(НачалоДня(Период.Период.ДатаНачала), КонецДня(Период.Период.ДатаОкончания))+")";
	ИначеЕсли Период.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		Возврат НСтр("ru = 'Последние 7 дней, не считая текущего'");
	Иначе
		Возврат Строка(Период);
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтандартнойДатыНачала(Период)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат НСтр("ru = 'Не выбрана'");
	ИначеЕсли Период.Вариант=ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
		Возврат Формат(Период.Дата, "ДФ=dd.MM.yyyy");
	ИначеЕсли Период.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтогоДня Тогда
		Возврат НСтр("ru = 'Сегодня, на начало дня'");
	ИначеЕсли Период.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоДня Тогда
		Возврат НСтр("ru = 'Всегда актуально'");
	ИначеЕсли Период.Вариант="ТакойЖеДеньНаПрошлойНеделе" Тогда
		Возврат НСтр("ru = 'Такой же день на прошлой неделе ('")+Формат(Период.Дата, "ДФ='dd.MM.yyyy, ддд'")+")";
	ИначеЕсли Период.Вариант="ТакойЖеДеньВПрошломМесяце" Тогда
		Возврат НСтр("ru = 'Такой же день прошлого месяца ('")+Формат(Период.Дата, "ДФ='dd.MM.yyyy, ддд'")+")";
	ИначеЕсли Период.Вариант="ТакойЖеДеньВПрошломГоду" Тогда
		Возврат НСтр("ru = 'Такой же день в прошлом году ('")+Формат(Период.Дата, "ДФ='dd.MM.yyyy'")+")";
	Иначе
		Возврат Строка(Период);
	КонецЕсли; 
	
КонецФункции

#КонецОбласти 

#Область НаложеныеФильтры

&НаСервере
Процедура ЗаполнитьТаблицуНаложенныхФильтров(ЭтоДиаграмма = Ложь)
	
	НаложенныеФильтры.Очистить();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Диаграмма", Диаграмма);
	Строки = НастройкиДиаграмм.НайтиСтроки(СтруктураОтбора);
	
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ИмяМакета = Строки[0].ИмяМакета;
	Если Метаданные.Обработки.ПульсБизнеса.Макеты.Найти(ИмяМакета)=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СхемаКД = Обработки.ПульсБизнеса.ПолучитьМакет(ИмяМакета);
	
	Для каждого ЭлементОтбор Из Фильтры Цикл
		
		Если НЕ ЭлементОтбор.Свойство("Представление") Тогда
			ЭлементОтбор.Вставить("Представление", "");
		КонецЕсли; 
		Если НЕ ЭлементОтбор.Свойство("ВидСравнения") Тогда
			ЭлементОтбор.Вставить("ВидСравнения", Неопределено);
		КонецЕсли; 
		
		ИмяПоля = ЭлементОтбор.Поле;
		ДоступноеПоле = Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
		
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
				ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше
				ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
				ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Поле", ИмяПоля);
			СтрокиФильтров = НаложенныеФильтры.НайтиСтроки(СтруктураОтбора);
			Если СтрокиФильтров.Количество()=0 Тогда
				Стр = НаложенныеФильтры.Добавить();
				Если ДоступноеПоле.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
					Стр.Значение = Новый СтандартныйПериод;
				Иначе
					Стр.Значение = Новый Структура("ЗначениеОт,ЗначениеДо",0,0);
				КонецЕсли; 
			Иначе
				Стр = СтрокиФильтров[0];
			КонецЕсли;
		Иначе
			Стр = НаложенныеФильтры.Добавить();
		КонецЕсли; 
		
		Стр.Поле = ИмяПоля;
		Стр.Заголовок = ?(ПустаяСтрока(ЭлементОтбор.Представление), ДоступноеПоле.Заголовок, ЭлементОтбор.Представление);
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеРавно ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ 
			ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			Стр.ПризнакИсключения = Истина;
		КонецЕсли; 
		
		Если ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.БольшеИлиРавно 
				ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Больше Тогда
			Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
				Стр.Значение.ДатаНачала = НачалоДня(ЭлементОтбор.Значение);
			Иначе
				Стр.Значение.ЗначениеОт = Макс(ЭлементОтбор.Значение, Стр.Значение.ЗначениеОт);
			КонецЕсли; 
		ИначеЕсли ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.МеньшеИлиРавно 
				ИЛИ ЭлементОтбор.ВидСравнения=ВидСравненияКомпоновкиДанных.Меньше Тогда
			Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
				Стр.Значение.ДатаОкончания = ?(НЕ ЗначениеЗаполнено(ЭлементОтбор.Значение), ЭлементОтбор.Значение, КонецДня(ЭлементОтбор.Значение));
			Иначе
				Стр.Значение.ЗначениеДо = ?(Стр.Значение.ЗначениеДо=0, ЭлементОтбор.Значение, Мин(ЭлементОтбор.Значение, Стр.Значение.ЗначениеДо));
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ЭлементОтбор.Значение)=Тип("СписокЗначений") Тогда
		    Для каждого ЭлементСписка Из ЭлементОтбор.Значение Цикл
				Если ЗначениеЗаполнено(Стр.Значение) Тогда
					НоваяСтрока = НаложенныеФильтры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
					НоваяСтрока.Значение = ЭлементСписка.Значение;
					Стр = НоваяСтрока;
				Иначе
					Стр.Значение = ЭлементСписка.Значение;
				КонецЕсли; 
			КонецЦикла; 
		Иначе
		    Стр.Значение = ЭлементОтбор.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Стр Из НаложенныеФильтры Цикл
		
		Если ПустаяСтрока(Стр.ИмяКнопки) Тогда
			Стр.ИмяКнопки = "ОтметкаФильтра"+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.Значение) ИЛИ ПустаяСтрока(Стр.Поле) Тогда
			Продолжить;
		КонецЕсли; 
		ЗаголовокФильтра = Стр.Заголовок;
		Префикс = "";
		Если ТипЗнч(Стр.Значение)=Тип("СтандартныйПериод") Тогда
			ПредставлениеЗначения = ПредставлениеПериода(Стр.Значение.ДатаНачала, Стр.Значение.ДатаОкончания);
			Префикс = ПоследняяЧастьЗаголовка(ЗаголовокФильтра);
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Структура") Тогда
			ПредставлениеЗначения = Формат(Стр.Значение.ЗначениеОт, "ЧН='0'")+" - "+Формат(Стр.Значение.ЗначениеДо, "ЧН='...'");
			Префикс = ПоследняяЧастьЗаголовка(ЗаголовокФильтра);
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Стр.Значение)) Тогда
			ПредставлениеЗначения = Строка(Стр.Значение);
		ИначеЕсли ТипЗнч(Стр.Значение)=Тип("Булево") Тогда
			ПолеСхемы = ПолеСхемы(СхемаКД, Стр.Поле);
			Параметр = ПолеСхемы.ПараметрыРедактирования.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ФорматРедактирования"));
			Если НЕ Параметр=Неопределено И Параметр.Использование И ЗначениеЗаполнено(Параметр.Значение) Тогда
				ПредставлениеЗначения = Формат(Стр.Значение, Параметр.Значение);
				Префикс = "";
			Иначе
				ПредставлениеЗначения = Строка(Стр.Значение);
				Префикс = ПоследняяЧастьЗаголовка(ЗаголовокФильтра);
			КонецЕсли; 
		Иначе
			ПредставлениеЗначения = Строка(Стр.Значение);
			Префикс = ПоследняяЧастьЗаголовка(ЗаголовокФильтра);
		КонецЕсли;
		Стр.Заголовок = ?(ПустаяСтрока(Префикс), "", Префикс+": ")+ПредставлениеЗначения;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаНаложенногоФильтра(ИмяКнопки)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКнопки", ИмяКнопки);
	Строки = НаложенныеФильтры.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество()=0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолеСхемы(Схема, Поле)
	
	ИмяПоля = Строка(Поле);
	Для каждого Набор Из Схема.НаборыДанных Цикл
		ПолеСхемы = Набор.Поля.Найти(ИмяПоля);
		Если НЕ ПолеСхемы=Неопределено Тогда
			Возврат ПолеСхемы;
		КонецЕсли;  
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоследняяЧастьЗаголовка(Заголовок)
	
	Результат = Заголовок;
	Позиция = Найти(Результат, ".");
	Пока Позиция>0 Цикл
		Результат = Сред(Результат, Позиция+1);
		Позиция = Найти(Результат, ".");
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецОбласти
 