#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы.
	СоставНабораКонстантФормы    = СоставНабораКонстантФормы(НаборКонстант);
	ВнешниеРодительскиеКонстанты = ВнешниеРодительскиеКонстанты(СоставНабораКонстантФормы);
	РежимРаботы                  = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьЭлектронныеПодписи");
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьОбменБизнесСеть");
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	РежимРаботы.Вставить("БазоваяВерсия"               ,
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("БазоваяВерсия"));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	// Настройки видимости при запуске.
	Элементы.ГруппаИспользоватьОбменМеждуОрганизациями.Видимость = НЕ РежимРаботы.БазоваяВерсия
		И ИспользуетсяНесколькоОрганизацийЭД;
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
		
	Элементы.ГруппаНастройкиОбменаСКонтрагентами.Видимость = ЕстьОбменСКонтрагентами;
	Элементы.ГруппаНастройкиБизнесСетьСтарая.Видимость = ЕстьОбменСКонтрагентами
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть");
	Элементы.ГруппаНастройкиБизнесСеть.Видимость = ЕстьОбменСКонтрагентами
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть")
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения");
	Элементы.ГруппаНастройкиОбменаСБанками.Видимость = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ОбменСБанками");
	Элементы.ГруппаНастройкиИнтеграцияСЯндексКассой.Видимость = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
		
	// Настройки регламентных заданий.
	УстановитьНастройкиЗаданий();
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
	// Добавление элементов управления.
	ДобавитьКомандыСозданияШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ОбновитьИнтерфейсПрограммы();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//  ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//  Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//  Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
		ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
			И ПолучитьОбщиеКлючиСтруктурЭД(Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		
		ЭтотОбъект.Прочитать();
		УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьОбменЭДПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронныеПодписиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭДМеждуОрганизациямиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭДСБанкамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьНемедленнуюОтправкуЭДПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОбменаСБанками(Команда)
	
	ФормаСписка = "Справочник.НастройкиОбменСБанками.Форма.ФормаСписка";
	ОткрытьФорму(ФормаСписка, , ЭтотОбъект);

КонецПроцедуры

// ИнтеграцияСЯндексКассой
&НаКлиенте
Процедура ИспользоватьИнтеграциюСЯндексКассойПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзменении(Элемент)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияСЯндексКассойСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
		"ИнтеграцияСЯндексКассойСлужебныйКлиент");
	
	ЗначениеКонстанты = НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы;
	
	Если ЗначениеКонстанты Тогда
			
		Команда = "ВключитьИспользованиеРегламентныхЗаданий";
		ВключитьИспользованиеРегламентныхЗаданийПродолжение = Новый ОписаниеОповещения(
			"ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзмененииПродолжение", ЭтотОбъект);
		ВключитьИспользованиеРегламентныхЗаданийОтказ = Новый ОписаниеОповещения(
			"ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзмененииОтказ", ЭтотОбъект);
			
		ПараметрыКоманды = Новый Структура();
		ПараметрыКоманды.Вставить("ВключитьИспользованиеРегламентныхЗаданийПродолжение", ВключитьИспользованиеРегламентныхЗаданийПродолжение);
		ПараметрыКоманды.Вставить("ОповещениеОбОтказе", ВключитьИспользованиеРегламентныхЗаданийОтказ);
		
		МодульИнтеграцияСЯндексКассойСлужебныйКлиент.ВыполнитьКомандуСПроверкойПодключенияИПП("ВключитьИспользованиеРегламентныхЗаданий", ПараметрыКоманды);
	Иначе
		ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзмененииПродолжение(Неопределено, Неопределено);	
	КонецЕсли;
	
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзмененииПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗначениеКонстанты = НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы;

	ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзмененииСервер(ЗначениеКонстанты);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПолучениеУведомленийОтЯндексКассы", "Доступность", ЗначениеКонстанты);
			
	Подключаемый_ПриИзмененииРеквизита(Элементы.ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзмененииОтказ(Результат, ДополнительныеПараметры) Экспорт 
	
	НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзмененииСервер(Использование)
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ИзменитьИспользованиеЗадания("ПолучениеУведомленийОтЯндексКассы", Использование);
		
	КонецЕсли;
	
	
КонецПроцедуры

// СоздатьШаблонСообщения
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьШаблон(Команда)
	Кнопка                  = Элементы.Найти(Команда.Имя);
	ИмяДокумента            = СтрЗаменить(Команда.Имя, "СоздатьШаблон", "");
	ПредставлениеДокумента  = СокрЛП(СтрЗаменить(СтрЗаменить(Кнопка.Заголовок, НСтр("ru = 'Шаблон для'"), ""), """", ""));
	НаименованиеШаблона     = СтрШаблон(НСтр("ru = 'Счет на оплату через Яндекс.Кассу (%1)'"), ПредставлениеДокумента);
	
	СоздатьШаблон(Новый Структура("ПолноеИмяТипаПараметраВводаНаОсновании, Наименование", 
		"Документ." + ИмяДокумента, НаименованиеШаблона));
	
КонецПроцедуры
// Конец СоздатьШаблонСообщения

// Конец ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура ЕстьИдеяНажатие(Элемент)
	
	МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиСлужебныйКлиент");
	МодульОбработки.ОткрытьСтраницуОпроса();
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройкиПрофилейЭДО(Команда)
	
	ФормаСписка = "Справочник.ПрофилиНастроекЭДО.Форма.ФормаСписка";
	ОткрытьФорму(ФормаСписка, , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоглашенияОбИспользованииЭД(Команда)
	
	ФормаСписка = "Справочник.СоглашенияОбИспользованииЭД.Форма.ФормаСписка";
	ОткрытьФорму(ФормаСписка, , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПодключенияКПорталу1СЭДО(Команда)
	
	МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
	МодульОбработки.ПомощникПодключенияКСервису1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПодключенияКСервису1СТакском(Команда)
	
	МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
	МодульОбработки.ПомощникПодключенияКСервису1СТакском();
	
КонецПроцедуры

// СтандартныеПодсистемы.ЭлектроннаяПодпись.
&НаКлиенте
Процедура НастройкиЭлектроннойПодписиИШифрования(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования");
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись.

&НаКлиенте
Процедура НастроитьОтправкуЭД(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОтправкиЭД", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОтправкиЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолучениеЭД(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеПолученияЭД", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеПолученияЭД);

КонецПроцедуры

&НаКлиенте
Процедура ОповещатьОСобытияхЭДОПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	ИзменитьИспользованиеЗадания("НаличиеНовыхЭД", ОповещатьОСобытияхЭДО);
	
	Элементы.НаличиеНовыхЭД.Доступность = ОповещатьОСобытияхЭДО;
	
	ИзменитьОповещениеЭДО(ОповещатьОСобытияхЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОповещенияЭДО(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОповещенийЭДО", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеНовыхЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПодключенияКСервисуБизнесСеть(Команда)
	
	ФормаПомощникаБизнесСети = "Обработка.БизнесСеть.Форма.ПодключениеУчастников";
	ОткрытьФорму(ФормаПомощникаБизнесСети, , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСервисныеКомандыБизнесСеть(Команда)
	
	ОчиститьСообщения();
	ФормаПодключения = "Обработка.БизнесСеть.Форма.НастройкаПодключения";
	ОткрытьФорму(ФормаПодключения);
	
КонецПроцедуры

// ИнтеграцияСЯндексКассой
&НаКлиенте
Процедура НастроитьПолучениеУведомленийОтЯндексКассы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеПолученияУведомленийОтЯндексКассы", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеПолученияУведомленийОтЯндексКассы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЯндексКассы(Команда)
	
	ФормаСписка = "Справочник.НастройкиЯндексКассы.Форма.ФормаСписка";
	ОткрытьФорму(ФормаСписка, , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВШаблоныСообщений(Команда)
	
	ОтборФормы = Новый Структура();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ОтборФормы);
	
	Форма = "Справочник.ШаблоныСообщений.ФормаСписка";
	
	ОткрытьФорму(Форма, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры
// Конец ИнтеграцияСЯндексКассой

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ИзменитьОповещениеЭДО(ВключитьОповещенияЭДО = Ложь)
	
	Если ВключитьОповещенияЭДО Тогда
		Если ОповещатьОСобытияхЭДО() Тогда
			
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
				МодульОбменаСКонтрагентами = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
				МодульОбменаСКонтрагентами.ИзменитьОповещенияЭДО(Истина);
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
			МодульОбменаСКонтрагентами = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
			МодульОбменаСКонтрагентами.ИзменитьОповещенияЭДО();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОповещатьОСобытияхЭДО()
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОповещатьОСобытияхЭДО();
	
КонецФункции

&НаКлиенте
// Описание оповещения обработчика команды формы "НастроитьОповещенияЭДО".
//
Процедура ИзменитьРасписаниеОповещенийЭДО(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеНовыхЭД = РасписаниеЗадания;
		
	ИзменитьРасписаниеЗадания("НаличиеНовыхЭД", РасписаниеНовыхЭД);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Оповестить(Результат.ОповещениеФорм.ИмяСобытия, Результат.ОповещениеФорм.Параметр, Результат.ОповещениеФорм.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

// Константы

&НаКлиенте
// Возвращает структуру, содержащую ключи, имеющиеся в обеих исходных структурах.
//
Функция ПолучитьОбщиеКлючиСтруктурЭД(Структура1, Структура2)
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение Из Структура1 Цикл
		Если Структура2.Свойство(КлючИЗначение.Ключ) Тогда
			Результат.Вставить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если ЕстьПодчиненныеКонстантыЭД(КонстантаИмя, КонстантаЗначение) Тогда
			УстановитьЗначенияЗависимыхКонстант(КонстантаИмя);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
		
		ОповещениеФорм = Новый Структура(
			"ИмяСобытия, Параметр, Источник",
			"Запись_НаборКонстант", ПодчиненныеКонстантыЭД(КонстантаИмя), КонстантаИмя);
		Результат.Вставить("ОповещениеФорм", ОповещениеФорм);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьЭлектронныеПодписи = Константы.ИспользоватьЭлектронныеПодписи.Получить();
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	ЕстьОбменБизнесСеть = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть");
	
	Если ЕстьОбменСКонтрагентами
		И (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьОбменЭД" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьОбменЭД;
		ВключеныЭДИЭП = ЗначениеКонстанты И ИспользоватьЭлектронныеПодписи;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьТиповыеСоглашенияОбИспользованииЭД", "Доступность", ЗначениеКонстанты);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьСоглашенияОбИспользованииЭД", "Доступность", ЗначениеКонстанты);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ИспользоватьОбменЭДМеждуОрганизациями", "Доступность", ВключеныЭДИЭП);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьПомощникПодключенияКСервису1СТакском", "Доступность", ВключеныЭДИЭП);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьПомощникПодключенияКСервису1СЭДО", "Доступность", ВключеныЭДИЭП);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьАрхивЭДО", "Доступность", ЗначениеКонстанты);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ИспользоватьАвтоматическуюОтправкуЭД", "Доступность", ЕстьОбменСКонтрагентами);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ИспользоватьАвтоматическоеПолучениеЭД", "Доступность", ЕстьОбменСКонтрагентами);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОповещатьОСобытияхЭДО", "Доступность", ЗначениеКонстанты);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов", "Доступность", ЗначениеКонстанты);
		ДоступноАдминистрирование = Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНастройкиРегламентногоЗадания", "Доступность", ЗначениеКонстанты И ДоступноАдминистрирование);
			
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ИспользоватьЭлектронныеПодписи", "Доступность", ЭтоПолноправныйПользователь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "НастройкиЭлектроннойПодписиИШифрования", "Доступность", ИспользоватьЭлектронныеПодписи);
	КонецЕсли;
	
	ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");
	
	Если ЕстьОбменСБанками
		И (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьОбменСБанками" ИЛИ РеквизитПутьКДанным = "") Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьОбменСБанками;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьПомощникПодключенияКОбменуСБанками", "Доступность", ЗначениеКонстанты);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьНастройкиОбмена", "Доступность", ЗначениеКонстанты);
	КонецЕсли;
		
	Если ЕстьОбменБизнесСеть
		И (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьОбменБизнесСеть" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьОбменБизнесСеть;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНастройкиБизнесСетьТорговыеПредложенияПубликация", "Доступность", ЗначениеКонстанты);
	КонецЕсли;
		
	
	// ИнтеграцияСЯндексКассой
	ЕстьИнтеграцияСЯндексКассой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
	
	Если ЕстьИнтеграцияСЯндексКассой
		И (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьИнтеграциюСЯндексКассой" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьИнтеграциюСЯндексКассой;
	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьНастройкиЯндексКассы", "Доступность", ЗначениеКонстанты);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаПолучениеУведомлений", "Доступность", ЗначениеКонстанты);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНастройкаШаблонов", "Доступность", ЗначениеКонстанты);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНастройкаШаблонов", "Видимость", 
			ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Метаданные.НайтиПоПолномуИмени("Справочник.ШаблоныСообщений")));
			
	КонецЕсли;
	
	Если ЕстьИнтеграцияСЯндексКассой
		И (РеквизитПутьКДанным = "НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		ЗначениеКонстанты = НаборКонстант.АвтоматическиПолучатьУведомленияОтЯндексКассы;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПолучениеУведомленийОтЯндексКассы", "Доступность", ЗначениеКонстанты);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ОткрытьНастройкиШаблоновПисем", "Видимость", 
			Не ОбщегоНазначенияПовтИсп.РазделениеВключено()); // В модели сервиса расписание настраивать запрещено
		
	КонецЕсли;
	// Конец ИнтеграцияСЯндексКассой
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияЗависимыхКонстант(ИмяРодительскойКонстанты)
	
	СтруктуруПодчиненныхКонстант = ПодчиненныеКонстантыЭД(ИмяРодительскойКонстанты);
	Для Каждого ИмяКонстанты Из СтруктуруПодчиненныхКонстант Цикл
		Константы[ИмяКонстанты.Ключ].Установить(НаборКонстант[ИмяРодительскойКонстанты]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Возвращает состав набор констант.
//
// Параметры:
//  Набор - КонстантыНабор.
//
// Возвращаемое значение:
//  Структура
//  Ключ - имя константы из набора.
//
Функция СоставНабораКонстантФормы(Набор)
	
	Результат = Новый Структура;
	
	Для Каждого МетаКонстанта Из Метаданные.Константы Цикл
		Если ЕстьРеквизитОбъекта(Набор, МетаКонстанта.Имя) Тогда
			Результат.Вставить(МетаКонстанта.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	КлючУникальностиЭД   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальностиЭД);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальностиЭД;
	
КонецФункции

&НаСервере
// Возвращает структуру, описывающую "подчиненные" константы для указанной "родительской" константы.
//
// Параметры:
//  ИмяРодительскойКонстанты - Структура - имя родительской константы.
//
// Возвращаемое значение:
//  Структура- Ключ - имя подчиненной константы.
//
Функция ПодчиненныеКонстантыЭД(ИмяРодительскойКонстанты)
	
	Результат       = Новый Структура;
	ТаблицаКонстант = ЗависимостьКонстантЭДО();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура("ИмяРодительскойКонстанты", ИмяРодительскойКонстанты));
	
	Для Каждого СтрокаПодчиненного Из ПодчиненныеКонстанты Цикл
		
		Если Результат.Свойство(СтрокаПодчиненного.ИмяПодчиненнойКонстанты) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(СтрокаПодчиненного.ИмяПодчиненнойКонстанты);
		
		ПодчиненныеПодчиненных = ПодчиненныеКонстантыЭД(СтрокаПодчиненного.ИмяПодчиненнойКонстанты);
		
		Для Каждого ПодчиненныйПодчиненного Из ПодчиненныеПодчиненных Цикл
			Результат.Вставить(ПодчиненныйПодчиненного.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Возвращает структуру, описывающую "родительские" константы для указанных "подчиненных" констант.
//
// Параметры:
//  СтруктураПодчиненныхКонстант - Структура - имена подчиненных констант.
//
// Возвращаемое значение:
//  Структура - Ключ - имя родительской константы.
//
Функция ВнешниеРодительскиеКонстанты(СтруктураПодчиненныхКонстант)
	
	Результат       = Новый Структура;
	ТаблицаКонстант = ЗависимостьКонстантЭДО();
	
	Для Каждого ИскомаяКонстанта Из СтруктураПодчиненныхКонстант Цикл
		
		РодительскиеКонстанты = ТаблицаКонстант.НайтиСтроки(
			Новый Структура("ИмяПодчиненнойКонстанты", ИскомаяКонстанта.Ключ));
		
		Для Каждого СтрокаРодителя Из РодительскиеКонстанты Цикл
			
			Если Результат.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты)
			 ИЛИ СтруктураПодчиненныхКонстант.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(СтрокаРодителя.ИмяРодительскойКонстанты);
			
			РодителиРодителя = ВнешниеРодительскиеКонстанты(Новый Структура(СтрокаРодителя.ИмяРодительскойКонстанты));
			
			Для Каждого РодительРодителя Из РодителиРодителя Цикл
				Результат.Вставить(РодительРодителя.Ключ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Возвращает таблицу, описывающую зависимость констант в конфигурации.
// Каждая строка таблицы означает:
// для родительской константы со значением Х допустимо только значение Y для подчиненной константы.
//
// Возвращаемое значение:
// ТаблицаЗначений с колонками.
//		- ИмяРодительскойКонстанты
//		- ИмяПодчиненнойКонстанты
//		- ЗначениеРодительскойКонстанты
//		- ЗначениеПодчиненнойКонстанты.
//
Функция ЗависимостьКонстантЭДО()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеРодительскойКонстанты");
	Результат.Колонки.Добавить("ЗначениеПодчиненнойКонстанты");
	
	Результат.Индексы.Добавить("ИмяРодительскойКонстанты");
	Результат.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");

	Если ЕстьОбменСКонтрагентами Тогда
		
		ДобавитьСтрокуТаблицыЗависимостиКонстантЭД(
			Результат, "ИспользоватьОбменЭД", Ложь, "ИспользоватьОбменЭДМеждуОрганизациями", Ложь);
	
		ДобавитьСтрокуТаблицыЗависимостиКонстантЭД(
			Результат, "ИспользоватьЭлектронныеПодписи", Ложь, "ИспользоватьОбменЭДМеждуОрганизациями", Ложь);
			
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуТаблицыЗависимостиКонстантЭД(ТаблицаКонстант,
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты)
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты      = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты       = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты  = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры

&НаСервере
// Возвращает признак наличия у константы "подчиненных" констант.
//
// Параметры:
//  ИмяРодительскойКонстанты      - Строка - имя константы как оно задано в конфигураторе.
//  ЗначениеРодительскойКонстанты - Произвольный - значение константы.
//
// Возвращаемое значение:
//  Булево - если Истина, то у константы есть "подчиненные" ей константы.
//
Функция ЕстьПодчиненныеКонстантыЭД(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты)
	
	ТаблицаКонстант = ЗависимостьКонстантЭДО();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Возврат ПодчиненныеКонстанты.Количество() > 0;
	
КонецФункции

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания .Вставить("Использование", Использование);
	
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Метаданные.РегламентныеЗадания[ИмяЗадания]);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(Элемент, ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ИдентификаторЗадания = Метаданные.РегламентныеЗадания[ИмяЗадания];
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ИдентификаторЗадания, РасписаниеРегламентногоЗадания);
	
	Элемент = Элементы[ИмяЗадания];
	
	УстановитьТекстНадписиРегламентнойНастройки(Элемент, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
// Описание оповещения обработчика команды формы "НастроитьОтправкуЭД".
//
Процедура ИзменитьРасписаниеОтправкиЭД(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОтправкиЭД = РасписаниеЗадания;

	ИзменитьРасписаниеЗадания("ОтправкаОформленныхЭД", РасписаниеЗадания);
	
КонецПроцедуры

&НаКлиенте
// Описание оповещения обработчика команды формы "НастроитьПолучениеЭД".
//
Процедура ИзменитьРасписаниеПолученияЭД(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеПолученияЭД = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("ПолучениеНовыхЭД", РасписаниеЗадания);
	
КонецПроцедуры

// ИнтеграцияСЯндексКассой
&НаКлиенте
Процедура ИзменитьРасписаниеПолученияУведомленийОтЯндексКассы(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОтправкиЭД = РасписаниеЗадания;

	ИзменитьРасписаниеЗадания("ПолучениеУведомленийОтЯндексКассы", РасписаниеЗадания);
	
КонецПроцедуры
// Конец ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеЭДПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания("ПолучениеНовыхЭД", ИспользоватьАвтоматическоеПолучениеЭД);
	
	Элементы.ПолучениеНовыхЭД.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюОтправкуЭДПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания("ОтправкаОформленныхЭД", ИспользоватьАвтоматическуюОтправкуЭД);
	
	Элементы.ОтправкаОформленныхЭД.Доступность = ИспользоватьАвтоматическуюОтправкуЭД;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(ТекстРасписания, ИдентификаторЗадания)
	
	Использование = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(ИдентификаторЗадания);
	
	Если Использование Тогда
		ПрефиксРасписания = НСтр("ru = 'Расписание:%1%2'");
		
	Иначе
		ПрефиксРасписания = НСтр("ru = 'Расписание (НЕ АКТИВНО):%1%2'");
	КонецЕсли;
	
	Расписание = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(ИдентификаторЗадания);
	ПредставлениеРасписания = Строка(Расписание);
	ТекстРасписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПрефиксРасписания,
		СимволПробел(), ПредставлениеРасписания);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
		ЕстьТорговыеПредложения = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения");
		Если ЕстьОбменСКонтрагентами Тогда
			
			// Устанавливаем флаг "ИспользоватьАвтоматическуюОтправкуЭД"
			ЗаданиеОтправкаЭД = Метаданные.РегламентныеЗадания.Найти("ОтправкаОформленныхЭД");
			ИспользоватьАвтоматическуюОтправкуЭД = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(ЗаданиеОтправкаЭД);
			РасписаниеОтправкиЭД = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(ЗаданиеОтправкаЭД);
			Элементы.ОтправкаОформленныхЭД.Доступность = ИспользоватьАвтоматическуюОтправкуЭД;
			УстановитьТекстНадписиРегламентнойНастройки(Элементы.ОтправкаОформленныхЭД, ЗаданиеОтправкаЭД);
			
			// Устанавливаем флаг "ИспользоватьАвтоматическоеПолучениеЭД"
			ЗаданиеПолучениеЭД = Метаданные.РегламентныеЗадания.Найти("ПолучениеНовыхЭД");
			ИспользоватьАвтоматическоеПолучениеЭД = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(ЗаданиеПолучениеЭД);
			РасписаниеПолученияЭД = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(ЗаданиеПолучениеЭД);
			Элементы.ПолучениеНовыхЭД.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
			УстановитьТекстНадписиРегламентнойНастройки(Элементы.ПолучениеНовыхЭД, ЗаданиеПолучениеЭД);
			
			Если ЕстьТорговыеПредложения Тогда
				// Устанавливаем флаг "ИспользоватьАвтоматическуюПубликациюТорговыхПредложений"
				ЗаданиеСинхронизацииТП = Метаданные.РегламентныеЗадания.Найти("СинхронизацияТорговыхПредложений");
				ИспользоватьАвтоматическуюПубликациюТорговыхПредложений = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(ЗаданиеСинхронизацииТП);
				РасписаниеПубликацииТорговыхПредложений = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(ЗаданиеСинхронизацииТП);
				Элементы.СинхронизацияТорговыхПредложений.Доступность = ИспользоватьАвтоматическуюПубликациюТорговыхПредложений;
				УстановитьТекстНадписиРегламентнойНастройки(Элементы.СинхронизацияТорговыхПредложений, ЗаданиеСинхронизацииТП);
			КонецЕсли;
			
			// Устанавливаем флаг "Оповещать о событиях ЭДО"
			УстановитьНастройкиЗаданиеНовыеЭД();
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		// ИнтеграцияСЯндексКассой
		ЕстьИнтеграцияСЯндексКассой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
		Если ЕстьИнтеграцияСЯндексКассой Тогда
			
			// Устанавливаем флаг "ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассы"
			ЗаданиеПолучениеУведомленийОтЯндексКассы = РегламентныеЗадания.НайтиПредопределенное(
			Метаданные.РегламентныеЗадания.Найти("ПолучениеУведомленийОтЯндексКассы"));
			РасписаниеПолученияУведомленийОтЯндексКассы = ЗаданиеПолучениеУведомленийОтЯндексКассы.Расписание;
			Элементы.ПолучениеУведомленийОтЯндексКассы.Доступность = ЗаданиеПолучениеУведомленийОтЯндексКассы.Использование;
			УстановитьТекстНадписиРегламентнойНастройки(Элементы.ПолучениеУведомленийОтЯндексКассы, ЗаданиеПолучениеУведомленийОтЯндексКассы);
			
		КонецЕсли;
		// Конец ИнтеграцияСЯндексКассой
		
	Иначе
		Элементы.ГруппаНастройкиРегламентногоЗадания.Видимость = Ложь;
		Элементы.ГруппаНастройкиБизнесСетьСтарая.Видимость = Ложь;
		Элементы.ГруппаНастройкиБизнесСеть.Видимость = Ложь;
		Элементы.ГруппаОткрытьПомощникПодключенияКСервису1СЭДО.Видимость = Ложь;
		Элементы.ГруппаОповещенияЭДО.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданиеНовыеЭД()
	
	ЗаданиеНаличиеНовыхЭД = Метаданные.РегламентныеЗадания.Найти("НаличиеНовыхЭД");
	ОповещатьОСобытияхЭДО = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(ЗаданиеНаличиеНовыхЭД);
	РасписаниеНовыхЭД = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(ЗаданиеНаличиеНовыхЭД);
	
	Элементы.НаличиеНовыхЭД.Доступность = ОповещатьОСобытияхЭДО;
	УстановитьТекстНадписиРегламентнойНастройки(Элементы.НаличиеНовыхЭД, ЗаданиеНаличиеНовыхЭД);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Элемент, ИдентификаторЗадания)
	
	ТекстРасписания = "";
	
	ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(ТекстРасписания, ИдентификаторЗадания);
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменБизнесСетьПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеПубликацииТорговыхПредложений(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеПубликацияТорговыхПредложений", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеПубликацииТорговыхПредложений);

КонецПроцедуры

// Описание оповещения обработчика команды формы "НастроитьРасписаниеПубликацииТорговыхПредложений".
//
&НаКлиенте
Процедура ИзменитьРасписаниеПубликацияТорговыхПредложений(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеПубликацииТорговыхПредложений = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("СинхронизацияТорговыхПредложений", РасписаниеЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюПубликациюТорговыхПредложенийПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания("СинхронизацияТорговыхПредложений", ИспользоватьАвтоматическуюПубликациюТорговыхПредложений);
	
	Элементы.СинхронизацияТорговыхПредложений.Доступность = ИспользоватьАвтоматическуюПубликациюТорговыхПредложений;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеНоменклатуры(Команда)
	
	ОчиститьСообщения();
	Форма = "Обработка.ТорговыеПредложения.Форма.СопоставлениеНоменклатуры";
	ОткрытьФорму(Форма,, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТорговыеПредложения(Команда)
	
	ОчиститьСообщения();
	Форма = "Обработка.ТорговыеПредложения.Форма.ФормаСписка";
	ОткрытьФорму(Форма,, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СимволПробел()
	Возврат " ";
КонецФункции

// ИнтеграцияСЯндексКассой
#Область ШаблоныСообщений

&НаСервере
Процедура ДобавитьКомандыСозданияШаблона()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		Возврат;
	КонецЕсли;
	
	ТипыИсключения = Новый Массив;
	
	МодульИнтеграцияСЯндексКассойПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассойПереопределяемый");
	МодульИнтеграцияСЯндексКассой = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
	
	МодульИнтеграцияСЯндексКассойПереопределяемый.ИсключенияИзТипаОснованиеПлатежаЧерезЯндексКассу(ТипыИсключения);

	ТипыОснованияПлатежа = МодульИнтеграцияСЯндексКассой.ТипыОснованияПлатежаЧерезЯндексКассу();
	
	КомандыДобавлены = Ложь;
	Для Каждого ТипОснованияПлатежа Из ТипыОснованияПлатежа Цикл
		
		Если Не ТипыИсключения.Найти(ТипОснованияПлатежа) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОснованияПлатежа);
		ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
		Если Менеджер = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не УправлениеДоступом.ЕстьПраво("Чтение", Менеджер.ПустаяСсылка()) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеОбъектаМетаданных 	= ?(ПустаяСтрока(ОбъектМетаданных.ПредставлениеОбъекта), ОбъектМетаданных.Представление(), ОбъектМетаданных.ПредставлениеОбъекта);
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных,".");
		ИмяКоманды     = МассивПодстрок[1];

		ПредставлениеКоманды = СтрШаблон(НСтр("ru = 'Шаблон для ""%1""'"), ПредставлениеОбъектаМетаданных);
		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ИмяКоманды"	, ИмяКоманды);
		ОписаниеКоманды.Вставить("Представление", ПредставлениеКоманды);
		
		
		ДобавитьКомандуСозданияШаблона(ОписаниеКоманды);
		КомандыДобавлены = Истина;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаКнопокСоздать",
		"Видимость",
		КомандыДобавлены);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуСозданияШаблона(ОписаниеКоманды)

	ИмяКоманды = "СоздатьШаблон" + ОписаниеКоманды.ИмяКоманды;
	
	Если ЭтотОбъект.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуСоздатьШаблон";
		КомандаФормы.Заголовок = ОписаниеКоманды.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	МестоРазмещения = Элементы.ГруппаКнопокСоздатьШаблон;
	
	Если ЭтотОбъект.Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		НовыйЭлемент = ЭтотОбъект.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещения);
		НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		НовыйЭлемент.Заголовок  = ОписаниеКоманды.Представление;
		НовыйЭлемент.Видимость  = Истина;
		НовыйЭлемент.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблон(ПараметрыСозданияШаблона)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияСЯндексКассойСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСЯндексКассойСлужебныйКлиент");
	
	СпособРедактированияЭлектронныхПисемHTML = "Перечисление.СпособыРедактированияЭлектронныхПисем.HTML";
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Наименование",            ПараметрыСозданияШаблона.Наименование);
	ДанныеЗаполнения.Вставить("ПолноеИмяТипаНазначения", ПараметрыСозданияШаблона.ПолноеИмяТипаПараметраВводаНаОсновании);
	ДанныеЗаполнения.Вставить("ТипШаблона",              "Письмо");
	ДанныеЗаполнения.Вставить("ФорматПисьма",            ПредопределенноеЗначение(СпособРедактированияЭлектронныхПисемHTML));
	ДанныеЗаполнения.Вставить("Тема",                    НСтр("ru = 'Вам выставлен счет'"));
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыСозданияШаблона.ПолноеИмяТипаПараметраВводаНаОсновании,".");
	ИмяДокумента   = МассивПодстрок[1];
	ДанныеЗаполнения.Вставить("Текст", СтрЗаменить(ТекстМакета(),"ИмяДокумента", ИмяДокумента));
	
	
	МодульИнтеграцияСЯндексКассойСлужебныйКлиент.ПолучитьДанныеЗаполненияПредопределенногоШаблона(ДанныеЗаполнения);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("ПолноеИмяТипаОснования", ДанныеЗаполнения.ПолноеИмяТипаНазначения);
	
	Форма = "Справочник.ШаблоныСообщений.ФормаОбъекта";
	
	ОткрытьФорму(Форма, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстМакета()
	
	НастройкиЯндексКассы = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.НастройкиЯндексКассы");
	Возврат НастройкиЯндексКассы.ПолучитьМакет("Макет").ПолучитьТекст();
	
КонецФункции

#КонецОбласти

// Конец ИнтеграцияСЯндексКассой

#КонецОбласти