
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТолькоЗакупки") Тогда
		ТолькоЗакупки = Параметры.ТолькоЗакупки;
	КонецЕсли;
	
	ОкончаниеПериода = ТекущаяДатаСеанса() + 7 * 86400;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ВосстановитьНастройки();
	
	Если НЕ ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		ОкончаниеПериода = ТекущаяДатаСеанса() + 7 * 86400;
	КонецЕсли;
	
	АдресЗапасы = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Запасы"), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьПериодПотребности();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("ДатаКалендаря", ОкончаниеПериода);
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение",ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(ДатаКалендаряОкончание,Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ДатаКалендаряОкончание) Тогда
		
		ОкончаниеПериода = КонецДня(ДатаКалендаряОкончание);
		Если НачалоДня(ТекущаяДата()) > НачалоДня(ОкончаниеПериода) Тогда
			ОкончаниеПериода = КонецДня(ТекущаяДата());
		КонецЕсли;
		
		СформироватьПериодПотребности();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпособПополненияПриИзменении(Элемент)
	
	Если ОтборСпособПополнения = "Производство" Тогда
		Элементы.Контрагент.Видимость = Ложь;
		Контрагент = Неопределено;
	Иначе
		Элементы.Контрагент.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапасы

&НаКлиенте
Процедура ЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(Элемент.ТекущиеДанные.Номенклатура) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Номенклатура));
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Номенклатура) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			ОткрытьФорму("Документ.ЗаказПоставщику.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Номенклатура));
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Номенклатура) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Номенклатура));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРекомендации

&НаКлиенте
Процедура РекомендацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено 
		ИЛИ НЕ Элемент.ТекущиеДанные.РедактированиеРазрешено 
		И НЕ (Элемент.ТекущийЭлемент <> Неопределено И Элемент.ТекущийЭлемент.Имя = "РекомендацииВыбран")Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииВыбранПриИзменении(Элемент)
	
	ОбеспеченноеКоличество = 0;
	Выбран = Ложь;
	
	РодительТекущихДанных = Элементы.Рекомендации.ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительТекущихДанных = Неопределено Тогда
		
		ТекущиеДанныеРодителя = Элементы.Рекомендации.ТекущиеДанные.ПолучитьЭлементы();
		ВыбранРодитель = Элементы.Рекомендации.ТекущиеДанные.Выбран;
		Основной = Истина;
		Для каждого СтрокаДерева Из ТекущиеДанныеРодителя Цикл
			
			Если ВыбранРодитель Тогда
				СтрокаДерева.Выбран = Основной;
			Иначе
				СтрокаДерева.Выбран = Ложь;
			КонецЕсли;
			
			Основной = Ложь;
			
			Если СтрокаДерева.Выбран Тогда
			
				Выбран = Истина;
				ОбеспеченноеКоличество = ОбеспеченноеКоличество + СтрокаДерева.Количество;
			
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.Рекомендации.ТекущиеДанные.Выбран = Выбран;
		Элементы.Рекомендации.ТекущиеДанные.ПотребностьОбеспечена = (ОбеспеченноеКоличество >= Элементы.Рекомендации.ТекущиеДанные.Количество);
		
	Иначе	
		
		Для каждого СтрокаДерева из РодительТекущихДанных.ПолучитьЭлементы() Цикл
		
			Если СтрокаДерева.Выбран Тогда
				
				Выбран = Истина;
				ОбеспеченноеКоличество = ОбеспеченноеКоличество + СтрокаДерева.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РодительТекущихДанных.Выбран = Выбран;
		РодительТекущихДанных.ПотребностьОбеспечена = (ОбеспеченноеКоличество >= РодительТекущихДанных.Количество);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииКоличествоПриИзменении(Элемент)
	
	Элемент.Родитель.ТекущиеДанные.Выбран = Истина;
	Элемент.Родитель.ТекущиеДанные.Сумма = Элемент.Родитель.ТекущиеДанные.Количество * Элемент.Родитель.ТекущиеДанные.Цена;
	
	РекомендацииВыбранПриИзменении(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаказы

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено,Элемент.ДанныеСтроки(ВыбраннаяСтрока).Заказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не выбрана организация!'");
		Сообщение.Поле = "Организация";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("ОтборКомпоновщикНастроек", КомпоновщикНастроек);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.РасчетПотребностей.Форма.ФормаНастройка", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(СтруктураВозврата, Параметры) Экспорт
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВозврата.КомпоновщикНастроек.Настройки);
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СтруктураВозврата.КомпоновщикНастроек.ПользовательскиеНастройки);
		КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(СтруктураВозврата.КомпоновщикНастроек.ФиксированныеНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказы(Команда)
	
	СформироватьЗаказыНаСервере();
	
	Если Заказы.Количество() > 0 Тогда
		Элементы.Заказы.ТекущаяСтрока = Заказы[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПровести(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыПроведения = ЗаказыПровестиНаСервере(МассивЗаказов);
	
	Для каждого РезультатПроведения из РезультатыПроведения Цикл
		
		Заказы.Получить(РезультатПроведения).СтандартнаяКартинка = 1;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОтменаПроведения(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыОтменыПроведения = ЗаказыОтменаПроведенияНаСервере(МассивЗаказов);
	
	Для каждого РезультатОтменыПроведения из РезультатыОтменыПроведения Цикл
		
		Заказы.Получить(РезультатОтменыПроведения).СтандартнаяКартинка = 0;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПометитьНаУдаление(Команда)
	
	МассивЗаказов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока из Элементы.Заказы.ВыделенныеСтроки Цикл
		
		МассивЗаказов.Добавить(Новый Структура("Индекс, Ссылка", ВыделеннаяСтрока, Заказы.Получить(ВыделеннаяСтрока).Заказ));
		
	КонецЦикла;
	
	РезультатыПометкиНаУдаление = ЗаказыПометитьНаУдалениеНаСервере(МассивЗаказов);
	
	Для каждого РезультатПометкиНаУдаление из РезультатыПометкиНаУдаление Цикл
		
		Если Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 2 Тогда
			
			Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 0;
			
		Иначе
			
			Заказы.Получить(РезультатПометкиНаУдаление).СтандартнаяКартинка = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказПоставщику"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	
КонецПроцедуры

&НаКлиенте
Процедура Перечитать(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		
		СтрВопроса = НСтр("ru = 'Данные изменены. Перечитать данные?'");
		Оповещение = Новый ОписаниеОповещения("ПеречитатьЗавершение",ЭтаФорма);
		ПоказатьВопрос(Оповещение,СтрВопроса,РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОбновитьРекомендацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьЗавершение(Результат,Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьРекомендацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыОткрытьНоменклатуру(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Пока Истина Цикл
			
			Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", Новый Структура("Ключ", СтрокаТабличнойЧасти.Номенклатура));
				Прервать;
			Иначе
				СтрокаТабличнойЧасти = СтрокаТабличнойЧасти.ПолучитьРодителя();
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииВыбратьВсе(Команда)
	
	РекомендацииСнятьВсеВыбран();
	
	КорневыеЭлементы = Рекомендации.ПолучитьЭлементы();
	Для Каждого КорневойЭлемент Из КорневыеЭлементы Цикл
		КорневойЭлемент.Выбран = Истина;
		ЭлементыВторогоУровня = КорневойЭлемент.ПолучитьЭлементы();
		Если ЭлементыВторогоУровня.Количество() > 0 Тогда
			ЭлементыВторогоУровня[0].Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииСнятьВсе(Команда)
	
	РекомендацииСнятьВсеВыбран();
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииСвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из Рекомендации.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.Рекомендации.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииРазвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из Рекомендации.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.Рекомендации.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииОткрытьНоменклатуру(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Рекомендации.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Пока Истина Цикл
			
			Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", Новый Структура("Ключ", СтрокаТабличнойЧасти.Номенклатура));
				Прервать;
			Иначе
				СтрокаТабличнойЧасти = СтрокаТабличнойЧасти.ПолучитьРодителя();
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ОкончаниеПериода = КонецДня(ОкончаниеПериода - 60 * 60 * 24);
	Если НачалоДня(ТекущаяДата()) > НачалоДня(ОкончаниеПериода) Тогда
		ОкончаниеПериода = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	СформироватьПериодПотребности();
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ОкончаниеПериода = КонецДня(ОкончаниеПериода + 60 * 60 * 24);
	СформироватьПериодПотребности();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказы(Команда)
	
	ОбновитьСостояниеЗаказовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСортироватьПоВозрастанию(Команда)
	
	СортироватьНаСервере("ВОЗР");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСортироватьПоУбыванию(Команда)
	
	СортироватьНаСервере("УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из Запасы.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.Запасы.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого СтрокаПервыйУровень Из Запасы.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = СтрокаПервыйУровень.ПолучитьИдентификатор();
		Элементы.Запасы.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Перем ЗначениеНастроек;
	Перем ПользовательскиеНастройки;
	
	Если ТолькоЗакупки Тогда
		ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Обработка.РасчетПотребностей", "НастройкиЗакупки");
	Иначе
		ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("Обработка.РасчетПотребностей", "НастройкиПроизводство");
	КонецЕсли;
	
	МассивСпособовПополнения = Элементы.ОтборСпособПополнения.СписокВыбора.ВыгрузитьЗначения();
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗначениеНастроек.Свойство("ОкончаниеПериода", ОкончаниеПериода);
		ЗначениеНастроек.Свойство("Контрагент", Контрагент);
		ЗначениеНастроек.Свойство("Организация", Организация);
		ЗначениеНастроек.Свойство("ТолькоДефицит", ТолькоДефицит);
		ЗначениеНастроек.Свойство("ПользовательскиеНастройки", ПользовательскиеНастройки);
		
		Если МассивСпособовПополнения.Количество() = 1 Тогда
			
			ОтборСпособПополнения = МассивСпособовПополнения[0];
			
		Иначе
			
			ЗначениеНастроек.Свойство("ОтборСпособПополнения", ОтборСпособПополнения);
			
		КонецЕсли;
		
	Иначе
		
		ТолькоДефицит = Истина;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		
	КонецЕсли;
	
	ОбновитьСписокВыбораСпособПополнения();
	
	Если ОкончаниеПериода <= ТекущаяДатаСеанса() Тогда
		ОкончаниеПериода = ТекущаяДатаСеанса() + 7 * 86400;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Перем Настройки;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	Настройки.Вставить("Контрагент", Контрагент);
	Настройки.Вставить("Организация", Организация);
	Настройки.Вставить("ТолькоДефицит", ТолькоДефицит);
	Настройки.Вставить("ОтборСпособПополнения", ОтборСпособПополнения);
	Настройки.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Если ТолькоЗакупки Тогда
		ХранилищеОбщихНастроек.Сохранить("Обработка.РасчетПотребностей", "НастройкиЗакупки", Настройки);
	Иначе
		ХранилищеОбщихНастроек.Сохранить("Обработка.РасчетПотребностей", "НастройкиПроизводство", Настройки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораСпособПополнения()
	
	ДоступныЗакупки = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыЗакупки");
	ДоступноПроизводство = (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеПодсистемыПроизводство"))
		И ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство");
	
	Если ДоступныЗакупки Тогда
		Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") И ПравоДоступа("ИнтерактивноеПроведение", Метаданные.Документы.ОтчетПереработчика) Тогда
			Элементы.ОтборСпособПополнения.СписокВыбора.Добавить("Закупка и переработка", "Закупка и переработка");
		Иначе
			Элементы.ОтборСпособПополнения.СписокВыбора.Добавить("Закупка", "Закупка");
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступноПроизводство Тогда
		Элементы.ОтборСпособПополнения.СписокВыбора.Добавить("Производство", "Производство");
		Если ДоступныЗакупки Тогда
			Элементы.ОтборСпособПополнения.СписокВыбора.Добавить("Все", "Все");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОтборСпособПополнения.Видимость = ДоступныЗакупки И ДоступноПроизводство;
	ТолькоЗакупки = ДоступныЗакупки И НЕ ДоступноПроизводство;
	
	ОбновитьСпособПополнения();
	
	Если ОтборСпособПополнения = "Производство" Тогда
		Элементы.Контрагент.Видимость = Ложь;
	Иначе
		Элементы.Контрагент.Видимость = Истина;
	КонецЕсли;
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		Элементы.Организация.ТолькоПросмотр = Истина;
		Организация = Константы.Компания.Получить();
	ИначеЕсли НЕ ЗначениеЗаполнено(Организация) Тогда
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Организация = ЗначениеНастройки;
		Иначе
			Организация = Справочники.Организации.ОсновнаяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпособПополнения()
	
	Если Элементы.ОтборСпособПополнения.СписокВыбора.НайтиПоЗначению(ОтборСпособПополнения) = Неопределено Тогда
		
		Если ТолькоЗакупки Тогда
			Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") И РольДоступна("ДобавлениеИзменениеПодсистемыПереработка") Тогда
				ОтборСпособПополнения = "Закупка и переработка";
			Иначе
				ОтборСпособПополнения = "Закупка";
			КонецЕсли;
		Иначе
			ОтборСпособПополнения = "Производство";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	СохранитьНастройки();
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки());
	
	МакетКомпоновкиДанных.ЗначенияПараметров.ДатаНачала.Значение = НачалоДня(ТекущаяДатаСеанса());
	МакетКомпоновкиДанных.ЗначенияПараметров.ДатаОкончания.Значение = КонецДня(?(ОкончаниеПериода < ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), ОкончаниеПериода));
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.ГрафикПотребностейЗапасов.Запрос);

	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетКомпоновкиДанных.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить());
	Запрос.УстановитьПараметр("ДатаОстатки", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ВидыЦенКонтрагентов = ПолучитьАктуальныеВидЦенКонтрагента();
		Запрос.УстановитьПараметр("ВидыЦенКонтрагентов", ВидыЦенКонтрагентов);
	Иначе
		Запрос.УстановитьПараметр("ВидыЦенКонтрагентов", Новый СписокЗначений());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	СпособПополнения.Очистить();
	Если ОтборСпособПополнения = "Закупка и переработка" ИЛИ ОтборСпособПополнения = "Закупка" Тогда
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Закупка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
	ИначеЕсли ОтборСпособПополнения = "Производство" Тогда
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
	Иначе
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Закупка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Переработка);
		СпособПополнения.Добавить(Перечисления.СпособыПополненияЗапасов.Производство);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СпособПополнения", СпособПополнения);
	
	ОбновитьКолонки(Запрос.Параметры.ДатаНачала, Запрос.Параметры.ДатаОкончания);
	ОбновитьДанные(Запрос.Выполнить(), Запрос.Параметры.ДатаНачала, Запрос.Параметры.ДатаОкончания);
	
	АдресЗапасы = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Запасы"), УникальныйИдентификатор);
	ТекущееОкончаниеПериода = Запрос.Параметры.ДатаОкончания;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонки(ДатаНачала, ДатаОкончания)
	
	// Удаление ранее добавленных элементов.
	Для каждого ДобавленныйЭлемент из ДобавленныеЭлементы Цикл
		
		Элементы.Удалить(Элементы[ДобавленныйЭлемент.Значение]);
		
	КонецЦикла;
	
	МассивДобавляемыеРеквизиты = Новый Массив;
	
	// Реквизиты "Период".
	ТекущийПериод = ДатаНачала;
	
	Пока НачалоДня(ТекущийПериод) <= НачалоДня(ДатаОкончания) Цикл
		
		НовыйРеквизит = Новый РеквизитФормы("Период" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)), "Запасы", Формат(ТекущийПериод, "ДЛФ=D"));
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы("ВариантОформленияПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"),  Новый ОписаниеТипов(Новый КвалификаторыЧисла(1, 0)), "Запасы");
		МассивДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		ТекущийПериод = ТекущийПериод + 86400;
		
	КонецЦикла;
	
	// Удаление ранее добавленных реквизитов и добавление новых реквизитов.
	ИзменитьРеквизиты(МассивДобавляемыеРеквизиты, ДобавленныеРеквизиты.ВыгрузитьЗначения());
	
	// Обновление добавленных реквизитов.
	ДобавленныеРеквизиты.Очистить();
	
	Для каждого ДобавляемыйРеквизит из МассивДобавляемыеРеквизиты Цикл
		
		ДобавленныеРеквизиты.Добавить(ДобавляемыйРеквизит.Путь + "." + ДобавляемыйРеквизит.Имя);
		
	КонецЦикла;
	
	// Добавление новых элементов.
	ДобавленныеЭлементы.Очистить();
	
	Для каждого Реквизит из МассивДобавляемыеРеквизиты Цикл
		
		Если ПустаяСтрока(Реквизит.Заголовок) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Элемент = Элементы.Добавить(Реквизит.Путь + Реквизит.Имя, Тип("ПолеФормы"), Элементы[Реквизит.Путь]);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Реквизит.Путь + "." + Реквизит.Имя;
		Элемент.Заголовок = Реквизит.Заголовок;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Ширина = 10;
		
		ДобавленныеЭлементы.Добавить(Реквизит.Путь + Реквизит.Имя);
		
	КонецЦикла;
	
	// Установка условного оформления.
	УстановитьУсловноеОформление(ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные(РезультатЗапроса, ДатаНачала, ДатаОкончания)
	
	// Сформировать итоговую таблицу графика потребностей.
	ТаблицаРезультатЗапроса = РезультатЗапроса.Выгрузить();
	РассчитатьГрафикДвиженияЗапасов(ТаблицаРезультатЗапроса);
	
	// Заказ - расшифровка.
	ТаблицаГрафикПотребностей = ТаблицаРезультатЗапроса.СкопироватьКолонки();
	ДобавитьРасшифровкуПоЗаказу(ТаблицаРезультатЗапроса, ТаблицаГрафикПотребностей);
	
	// Очистка результата перед обновлением.
	НоменклатураЭлементы = Запасы.ПолучитьЭлементы();
	НоменклатураЭлементы.Очистить();
	
	// Предыдущие значения полей выборки.
	ПредыдущаяЗапись = Новый Структура("Номенклатура, Характеристика");
	
	// Элемент дерева, содержащий текущую номенклатуру.
	ТекущаяНоменклатура = Неопределено;
	
	// Расшифровка.
	СтруктураРасшифровка = Неопределено;
	
	// Структура, содержащая данные текущей номенклатуры и характеристики.
	СтруктураДетализация = Неопределено;
	
	// Предыдущая колонка для который выполнялся расчет показателей.
	ПредыдущаяКолонка = Неопределено;
	
	// Обход выборки.
	НомерЗаписи = 0;
	КоличествоЗаписейВВыборке = ТаблицаГрафикПотребностей.Количество();
	Для каждого Выборка Из ТаблицаГрафикПотребностей Цикл
		
		НомерЗаписи = НомерЗаписи + 1;
		
		// Первая запись в выборке или изменились номенклатура, характеристика.
		Если НомерЗаписи = 1 ИЛИ Выборка.Номенклатура <> ПредыдущаяЗапись.Номенклатура ИЛИ Выборка.Характеристика <> ПредыдущаяЗапись.Характеристика Тогда
			
			// Добавление предыдущей номенклатуры.
			ДобавитьНоменклатуруХарактеристику(ТекущаяНоменклатура, СтруктураДетализация, СтруктураРасшифровка, ДатаНачала, ДатаОкончания);
			
			// Удаление текущей номенклатуры, если не содержит данных.
			Если ТекущаяНоменклатура <> Неопределено И ТекущаяНоменклатура.ПолучитьЭлементы().Количество() = 0 Тогда
				
				НоменклатураЭлементы.Удалить(ТекущаяНоменклатура);
				
			КонецЕсли;
			
			// Добавление Номенклатуры.
			ТекущаяНоменклатура = НоменклатураЭлементы.Добавить();
			ТекущаяНоменклатура.Номенклатура = Выборка.Номенклатура;
			
			// Добавление предыдущей номенклатуры.
			ДобавитьНоменклатуруХарактеристику(ТекущаяНоменклатура, СтруктураДетализация, СтруктураРасшифровка, ДатаНачала, ДатаОкончания);
			
			МассивЗаказы = Новый Массив;
			СтруктураРасшифровка = Новый Структура("Расшифровка", МассивЗаказы);
			
			// Добавление номенклатуры и характеристики.
			СтруктураДетализация = Новый Структура("Номенклатура, Характеристика, МинимальныйЗапас, МаксимальныйЗапас, Дефицит, Просрочено", Выборка.Номенклатура, Выборка.Характеристика, Выборка.МинимальныйЗапас, Выборка.МаксимальныйЗапас);
			
			// Просрочено.
			СтруктураДетализация.Просрочено = Новый Структура("ЗначениеПоказателя, Просрочено, Детализация", 0, Ложь);
			СтруктураДетализация.Просрочено.Детализация = Новый Структура("НачальныйОстаток, Поступление, Потребность, МинимальныйЗапас, МаксимальныйЗапас, КонечныйОстаток", 0, 0, 0, 0, 0, 0);
			
			// Дефицит.
			СтруктураДетализация.Дефицит = Новый Структура("ЗначениеПоказателя, Просрочено, Детализация", 0, Ложь);
			СтруктураДетализация.Дефицит.Детализация = Новый Структура("НачальныйОстаток, Поступление, Потребность, МинимальныйЗапас, МаксимальныйЗапас, КонечныйОстаток", 0, 0, 0, 0, 0, 0);
			
			// Сохранение текущей колонки, для которой выполнен расчет.
			ПредыдущаяКолонка = СтруктураДетализация.Просрочено;
			
		КонецЕсли;
		
		СтруктураРасшифровка.Расшифровка.Добавить(Выборка.ЗаказРасшифровка);
		
		// Запись с периодом равным началу периода содержит просрочено.
		Если Выборка.Период = ДатаНачала Тогда
			
			// Установка значений показателей просрочено.
			СтруктураДетализация.Просрочено.Детализация.Вставить("НачальныйОстаток", Выборка.СвободныйОстаток);
			СтруктураДетализация.Просрочено.Детализация.Вставить("Поступление", Выборка.ПоступлениеПросрочено);
			СтруктураДетализация.Просрочено.Детализация.Вставить("Потребность", Выборка.ПотребностьПросрочено);
			СтруктураДетализация.Просрочено.Детализация.Вставить("МинимальныйЗапас", Выборка.МинимальныйЗапас);
			СтруктураДетализация.Просрочено.Детализация.Вставить("МаксимальныйЗапас", ?(Выборка.МаксимальныйЗапас = 0, Выборка.МинимальныйЗапас, Выборка.МаксимальныйЗапас));
			СтруктураДетализация.Просрочено.Детализация.Вставить("КонечныйОстаток", СтруктураДетализация.Просрочено.Детализация.НачальныйОстаток + СтруктураДетализация.Просрочено.Детализация.Поступление - СтруктураДетализация.Просрочено.Детализация.Потребность);
			
			// Расчет просроченного дефицита.
			ЕстьПросроченныйДефицит = СтруктураДетализация.Просрочено.Детализация.МинимальныйЗапас >= СтруктураДетализация.Просрочено.Детализация.КонечныйОстаток;
			
			Если ЕстьПросроченныйДефицит Тогда
				
				СтруктураДетализация.Просрочено.ЗначениеПоказателя = СтруктураДетализация.Просрочено.Детализация.МаксимальныйЗапас - СтруктураДетализация.Просрочено.Детализация.КонечныйОстаток;
				СтруктураДетализация.Просрочено.Просрочено = Истина;
				
			КонецЕсли;
			
			// Установка значений показателей дефицита.
			ЗаполнитьЗначенияСвойств(СтруктураДетализация.Дефицит.Детализация, СтруктураДетализация.Просрочено.Детализация);
			
			// Расчет общего дефицита.
			ЕстьОбщийДефицит = СтруктураДетализация.Дефицит.Детализация.МинимальныйЗапас >= СтруктураДетализация.Дефицит.Детализация.КонечныйОстаток;
			
			Если ЕстьОбщийДефицит Тогда
				
				СтруктураДетализация.Дефицит.ЗначениеПоказателя = СтруктураДетализация.Дефицит.Детализация.МаксимальныйЗапас - СтруктураДетализация.Дефицит.Детализация.КонечныйОстаток;
				
			КонецЕсли;
			
			// Сохранение текущей колонки, для которой выполнен расчет.
			ПредыдущаяКолонка = СтруктураДетализация.Просрочено;
			
		КонецЕсли;
		
		// Запись планового периода.
		Если Выборка.Период >= ДатаНачала Тогда
			
			ИмяКолонки = "Период" + Формат(Выборка.Период, "ДФ=yyyyMMdd");
			
			СтруктураДетализация.Вставить(ИмяКолонки, Новый Структура("ЗначениеПоказателя, Просрочено, Детализация", 0, Ложь));
			СтруктураДетализация[ИмяКолонки].Детализация = Новый Структура("НачальныйОстаток, Поступление, Потребность, МинимальныйЗапас, МаксимальныйЗапас, КонечныйОстаток", 0, 0, 0, 0, 0, 0);
			
			// Установка значений показателей в плановом периоде.
			СтруктураДетализация[ИмяКолонки].Детализация.НачальныйОстаток = ПредыдущаяКолонка.ЗначениеПоказателя + ПредыдущаяКолонка.Детализация.КонечныйОстаток;
			СтруктураДетализация[ИмяКолонки].Детализация.Поступление = Выборка.Поступление;
			СтруктураДетализация[ИмяКолонки].Детализация.Потребность = Выборка.Потребность;
			СтруктураДетализация[ИмяКолонки].Детализация.МинимальныйЗапас = ПредыдущаяКолонка.Детализация.МинимальныйЗапас;
			СтруктураДетализация[ИмяКолонки].Детализация.МаксимальныйЗапас = ?(ПредыдущаяКолонка.Детализация.МаксимальныйЗапас = 0, ПредыдущаяКолонка.Детализация.МинимальныйЗапас, ПредыдущаяКолонка.Детализация.МаксимальныйЗапас);
			СтруктураДетализация[ИмяКолонки].Детализация.КонечныйОстаток = СтруктураДетализация[ИмяКолонки].Детализация.НачальныйОстаток + СтруктураДетализация[ИмяКолонки].Детализация.Поступление - СтруктураДетализация[ИмяКолонки].Детализация.Потребность;
			
			// Установка значений показателей дефицита.
			СтруктураДетализация.Дефицит.Детализация.Поступление = СтруктураДетализация.Дефицит.Детализация.Поступление + СтруктураДетализация[ИмяКолонки].Детализация.Поступление;
			СтруктураДетализация.Дефицит.Детализация.Потребность = СтруктураДетализация.Дефицит.Детализация.Потребность + СтруктураДетализация[ИмяКолонки].Детализация.Потребность;
			СтруктураДетализация.Дефицит.Детализация.КонечныйОстаток = СтруктураДетализация.Дефицит.Детализация.НачальныйОстаток + СтруктураДетализация.Дефицит.Детализация.Поступление - СтруктураДетализация.Дефицит.Детализация.Потребность;
			
			// Расчет дефицита по периоду.
			ЕстьДефицитПоПериоду = СтруктураДетализация[ИмяКолонки].Детализация.МинимальныйЗапас >= СтруктураДетализация[ИмяКолонки].Детализация.КонечныйОстаток;
			
			Если ЕстьДефицитПоПериоду Тогда
			
				СтруктураДетализация[ИмяКолонки].ЗначениеПоказателя = СтруктураДетализация[ИмяКолонки].Детализация.МаксимальныйЗапас - СтруктураДетализация[ИмяКолонки].Детализация.КонечныйОстаток;
				СтруктураДетализация[ИмяКолонки].Просрочено = Выборка.Просрочено;
				
			Иначе
				
				СтруктураДетализация[ИмяКолонки].ЗначениеПоказателя = 0;
				СтруктураДетализация[ИмяКолонки].Просрочено = Выборка.Просрочено;
				
			КонецЕсли;
			
			// Расчет общего дефицита.
			ЕстьОбщийДефицит = СтруктураДетализация.Дефицит.Детализация.МинимальныйЗапас >= СтруктураДетализация.Дефицит.Детализация.КонечныйОстаток;
			
			Если ЕстьОбщийДефицит Тогда
				
				СтруктураДетализация.Дефицит.ЗначениеПоказателя = СтруктураДетализация.Дефицит.Детализация.МаксимальныйЗапас - СтруктураДетализация.Дефицит.Детализация.КонечныйОстаток;
				
			Иначе
				
				СтруктураДетализация.Дефицит.ЗначениеПоказателя = 0;
				
			КонецЕсли;
			
			// Сохранение текущей колонки, для которой выполнен расчет.
			ПредыдущаяКолонка = СтруктураДетализация[ИмяКолонки];
				
		КонецЕсли;
		
		// Сохранение текущих значений полей выборки.
		ЗаполнитьЗначенияСвойств(ПредыдущаяЗапись, Выборка);
		
		// Последняя запись в выборке.
		Если НомерЗаписи = КоличествоЗаписейВВыборке Тогда
			
			// Добавление текущей номенклатуры.
			ДобавитьНоменклатуруХарактеристику(ТекущаяНоменклатура, СтруктураДетализация, СтруктураРасшифровка, ДатаНачала, ДатаОкончания);
			
			// Удаление текущей номенклатуры, если не содержит данных.
			Если ТекущаяНоменклатура <> Неопределено И ТекущаяНоменклатура.ПолучитьЭлементы().Количество() = 0 Тогда
				
				НоменклатураЭлементы.Удалить(ТекущаяНоменклатура);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктуальныеВидЦенКонтрагента()
	
	СписоВидовЦен = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента КАК ВидЦенКонтрагента
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаНачала, ВидЦенКонтрагента.Владелец = &Контрагент) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписоВидовЦен.Добавить(Выборка.ВидЦенКонтрагента);
	КонецЦикла;
	
	Возврат СписоВидовЦен;
	
КонецФункции

&НаСервере
Процедура ДобавитьНоменклатуруХарактеристику(ТекущаяНоменклатура, СтруктураДетализация, СтруктураРасшифровка, ДатаНачала, ДатаОкончания)
	
	Если СтруктураДетализация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоДефицит И СтруктураДетализация.Дефицит.ЗначениеПоказателя > 0 
		ИЛИ НЕ ТолькоДефицит И ПоказателиЗаполнены(СтруктураДетализация) Тогда
		
		НоменклатураЭлементы = ТекущаяНоменклатура.ПолучитьЭлементы();
		
		// Добавление значений показателей.
		НачальныйОстаток = НоменклатураЭлементы.Добавить();
		НачальныйОстаток.Номенклатура = НСтр("ru = 'Начальный остаток'");
		
		Поступление = НоменклатураЭлементы.Добавить();
		Поступление.Номенклатура = НСтр("ru = 'Поступление'");
		
		Потребность = НоменклатураЭлементы.Добавить();
		Потребность.Номенклатура = НСтр("ru = 'Потребность'");
		
		Если СтруктураДетализация.МинимальныйЗапас = 0 И СтруктураДетализация.МаксимальныйЗапас = 0 Тогда
			
			НормативныйЗапас = Неопределено;
			МаксимальныйЗапас = Неопределено;
			
		Иначе
			
			МинимальныйЗапас = НоменклатураЭлементы.Добавить();
			МинимальныйЗапас.Номенклатура = НСтр("ru = 'Минимальный запас'");
			
			МаксимальныйЗапас = НоменклатураЭлементы.Добавить();
			МаксимальныйЗапас.Номенклатура = НСтр("ru = 'Максимальный запас'");
			
		КонецЕсли;
		
		КонечныйОстаток = НоменклатураЭлементы.Добавить();
		КонечныйОстаток.Номенклатура = НСтр("ru = 'Конечный остаток'");
		
		ЭлементыПоступление = Поступление.ПолучитьЭлементы();
		ЭлементыПотребность = Потребность.ПолучитьЭлементы();
		
		МассивЗаказовПоступление = Новый Массив();
		МассивЗаказовПотребность = Новый Массив();
		Для каждого СтрокаРасшифровка Из СтруктураРасшифровка.Расшифровка Цикл
			Для каждого СтрокаЗаказа Из СтрокаРасшифровка Цикл
				
				Если (СтрокаЗаказа.Значение.Поступление <> 0 ИЛИ СтрокаЗаказа.Значение.ПоступлениеПросрочено <> 0) И МассивЗаказовПоступление.Найти(СтрокаЗаказа.Ключ) = Неопределено Тогда
					
					ЗаказРасшифровка = ЭлементыПоступление.Добавить();
					ЗаказРасшифровка.Номенклатура = СтрокаЗаказа.Ключ;
					МассивЗаказовПоступление.Добавить(СтрокаЗаказа.Ключ);
					
				КонецЕсли;
				
				ЭлементыПоступлениеПросрочено = Поступление.ПолучитьЭлементы();
				Для каждого СтрокаПоступлениеПросрочено Из ЭлементыПоступлениеПросрочено Цикл
					
					Если СтрокаПоступлениеПросрочено.Номенклатура = СтрокаЗаказа.Ключ Тогда
						
						Если СтрокаЗаказа.Значение.ПоступлениеПросрочено <> 0 Тогда
							
							СтрокаПоступлениеПросрочено.Просрочено = СтрокаПоступлениеПросрочено.Просрочено + СтрокаЗаказа.Значение.ПоступлениеПросрочено;
							
						КонецЕсли;
						
						Если СтрокаЗаказа.Значение.Поступление <> 0 Тогда
							
							СтрокаПоступлениеПросрочено[СтрокаЗаказа.Значение.Период] = СтрокаПоступлениеПросрочено[СтрокаЗаказа.Значение.Период] + СтрокаЗаказа.Значение.Поступление;
							
						КонецЕсли;
						
						Если СтруктураДетализация.Дефицит.ЗначениеПоказателя <> 0 Тогда
							
							СтрокаПоступлениеПросрочено.Дефицит = СтрокаПоступлениеПросрочено.Дефицит + СтрокаЗаказа.Значение.ПоступлениеПросрочено + СтрокаЗаказа.Значение.Поступление;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если (СтрокаЗаказа.Значение.Потребность <> 0 ИЛИ СтрокаЗаказа.Значение.ПотребностьПросрочено <> 0) И МассивЗаказовПотребность.Найти(СтрокаЗаказа.Ключ) = Неопределено Тогда
					
					ЗаказРасшифровка = ЭлементыПотребность.Добавить();
					ЗаказРасшифровка.Номенклатура = СтрокаЗаказа.Ключ;
					МассивЗаказовПотребность.Добавить(СтрокаЗаказа.Ключ);
					
				КонецЕсли;
				
				ЭлементыПотребностьПросрочено = Потребность.ПолучитьЭлементы();
				Для каждого СтрокаПотребностьПросрочено Из ЭлементыПотребностьПросрочено Цикл
						
					Если СтрокаПотребностьПросрочено.Номенклатура = СтрокаЗаказа.Ключ Тогда
						
						Если СтрокаЗаказа.Значение.ПотребностьПросрочено <> 0 Тогда
							
							СтрокаПотребностьПросрочено.Просрочено = СтрокаПотребностьПросрочено.Просрочено + СтрокаЗаказа.Значение.ПотребностьПросрочено;
							
						КонецЕсли;
						
						Если СтрокаЗаказа.Значение.Потребность <> 0 Тогда
							
							СтрокаПотребностьПросрочено[СтрокаЗаказа.Значение.Период] = СтрокаПотребностьПросрочено[СтрокаЗаказа.Значение.Период] + СтрокаЗаказа.Значение.Потребность;
							
						КонецЕсли;
						
						Если СтруктураДетализация.Дефицит.ЗначениеПоказателя <> 0 Тогда
							
							СтрокаПотребностьПросрочено.Дефицит = СтрокаПотребностьПросрочено.Дефицит + СтрокаЗаказа.Значение.ПотребностьПросрочено + СтрокаЗаказа.Значение.Потребность;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
		Для каждого Колонка из СтруктураДетализация Цикл
			
			Если ТипЗнч(Колонка.Значение) = Тип("Структура") Тогда
				
				Если Колонка.Ключ = "Просрочено" Тогда
					
					НачальныйОстаток[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0 ИЛИ Колонка.Значение.Детализация.Поступление > 0 ИЛИ Колонка.Значение.Детализация.Потребность > 0, Колонка.Значение.Детализация.НачальныйОстаток, 0);
					
					Поступление[Колонка.Ключ] = Колонка.Значение.Детализация.Поступление;
					Потребность[Колонка.Ключ] = Колонка.Значение.Детализация.Потребность;
					
					Если МинимальныйЗапас <> Неопределено Тогда
						
						МинимальныйЗапас[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0, Колонка.Значение.Детализация.МинимальныйЗапас, 0);
						
					КонецЕсли;
					
					Если МаксимальныйЗапас <> Неопределено Тогда
						
						МаксимальныйЗапас[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0, Колонка.Значение.Детализация.МаксимальныйЗапас, 0);
						
					КонецЕсли;
					
					КонечныйОстаток[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0 ИЛИ Колонка.Значение.Детализация.Поступление > 0 ИЛИ Колонка.Значение.Детализация.Потребность > 0, Колонка.Значение.Детализация.КонечныйОстаток, 0);
					
				ИначеЕсли Колонка.Ключ = "Дефицит" Тогда
					
					НачальныйОстаток[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0, Колонка.Значение.Детализация.НачальныйОстаток, 0);
					Поступление[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0, Колонка.Значение.Детализация.Поступление, 0);
					Потребность[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0, Колонка.Значение.Детализация.Потребность, 0);
					
					Если МинимальныйЗапас <> Неопределено Тогда
						
						МинимальныйЗапас[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0, Колонка.Значение.Детализация.МинимальныйЗапас, 0);
						
					КонецЕсли;
					
					Если МаксимальныйЗапас <> Неопределено Тогда
						
						МаксимальныйЗапас[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0, Колонка.Значение.Детализация.МаксимальныйЗапас, 0);
						
					КонецЕсли;
					
					КонечныйОстаток[Колонка.Ключ] = ?(Колонка.Значение.ЗначениеПоказателя > 0, Колонка.Значение.Детализация.КонечныйОстаток, 0);
					
				Иначе
					
					НачальныйОстаток[Колонка.Ключ] = Колонка.Значение.Детализация.НачальныйОстаток;
					Поступление[Колонка.Ключ] = Колонка.Значение.Детализация.Поступление;
					Потребность[Колонка.Ключ] = Колонка.Значение.Детализация.Потребность;
					
					Если МинимальныйЗапас <> Неопределено Тогда
						
						МинимальныйЗапас[Колонка.Ключ] = Колонка.Значение.Детализация.МинимальныйЗапас;
						
					КонецЕсли;
					
					Если МаксимальныйЗапас <> Неопределено Тогда
						
						МаксимальныйЗапас[Колонка.Ключ] = Колонка.Значение.Детализация.МаксимальныйЗапас;
						
					КонецЕсли;
					
					КонечныйОстаток[Колонка.Ключ] = Колонка.Значение.Детализация.КонечныйОстаток;
					
				КонецЕсли;
				
				ТекущаяНоменклатура[Колонка.Ключ] = Колонка.Значение.ЗначениеПоказателя;
				
				// Установка варианта оформления.
				ТекущаяНоменклатура["ВариантОформления" + Колонка.Ключ] = ?(СтруктураДетализация[Колонка.Ключ].ЗначениеПоказателя > 0, ?(СтруктураДетализация[Колонка.Ключ].Просрочено, 2, 1), 0);
				ТекущаяНоменклатура.ВариантОформленияНоменклатураХарактеристика = Макс(ТекущаяНоменклатура.ВариантОформленияНоменклатураХарактеристика, ТекущаяНоменклатура["ВариантОформления" + Колонка.Ключ]);
				
			Иначе
				
				ТекущаяНоменклатура[Колонка.Ключ] = Колонка.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураДетализация = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ПоказателиЗаполнены(НовыйНоменклатураХарактеристика)
	
	ПоказателиЗаполнены = Ложь;
	
	Для каждого Колонка из НовыйНоменклатураХарактеристика Цикл
		
		Если ТипЗнч(Колонка.Значение) = Тип("Структура") Тогда
			
			Если Колонка.Значение.Детализация.НачальныйОстаток <> 0
				ИЛИ Колонка.Значение.Детализация.Поступление <> 0
				ИЛИ Колонка.Значение.Детализация.Потребность <> 0
				ИЛИ Колонка.Значение.Детализация.МинимальныйЗапас <> 0
				ИЛИ Колонка.Значение.Детализация.МаксимальныйЗапас <> 0
				ИЛИ Колонка.Значение.Детализация.КонечныйОстаток <> 0 Тогда
				
				ПоказателиЗаполнены = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоказателиЗаполнены;
	
КонецФункции

&НаСервере
Процедура РассчитатьГрафикДвиженияЗапасов(ТаблицаРезультатЗапроса)
	
	Для каждого СтрокаРезультатЗапрос Из ТаблицаРезультатЗапроса Цикл
		
		Если СтрокаРезультатЗапрос.ЗаказОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоЗаказОстаток 			= СтрокаРезультатЗапрос.ЗаказОстаток;
		КоличествоОстатокПоступление 	= СтрокаРезультатЗапрос.ЗаказОстаток;
		КоличествоОстатокПотребность 	= СтрокаРезультатЗапрос.ЗаказОстаток;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура", СтрокаРезультатЗапрос.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаРезультатЗапрос.Характеристика);
		СтруктураПоиска.Вставить("Заказ", СтрокаРезультатЗапрос.Заказ);
		
		РезультатЗаказы = ТаблицаРезультатЗапроса.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЗаказы Из РезультатЗаказы Цикл
			
			// Просрочено поступление.
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Поступление Тогда
				
				КоличествоОстатокПоступление = КоличествоОстатокПоступление - СтрокаЗаказы.Поступление;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.Поступление <> 0 Тогда
	
				// Поступление.
				Поступление = МИН(КоличествоЗаказОстаток, СтрокаЗаказы.Поступление);
				КоличествоЗаказОстаток = КоличествоЗаказОстаток - СтрокаЗаказы.Поступление;
				СтрокаЗаказы.Поступление = Поступление;
				
			КонецЕсли;
			
			// Просрочена потребность.
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Отгрузка Тогда
				
				КоличествоОстатокПотребность = КоличествоОстатокПотребность - СтрокаЗаказы.Потребность;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.Потребность <> 0 Тогда
				
				// Потребность.
				Потребность = МИН(КоличествоЗаказОстаток, СтрокаЗаказы.Потребность);
				КоличествоЗаказОстаток = КоличествоЗаказОстаток - СтрокаЗаказы.Потребность;
				СтрокаЗаказы.Потребность = Потребность;
				
			КонецЕсли;
			
			СтрокаЗаказы.ЗаказОстаток = 0;
			
		КонецЦикла;
		
		Для каждого СтрокаЗаказы Из РезультатЗаказы Цикл
			
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Поступление Тогда
				
				Если КоличествоОстатокПоступление > 0 Тогда
					СтрокаЗаказы.ПоступлениеПросрочено = КоличествоОстатокПоступление;
					КоличествоОстатокПоступление = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаЗаказы.ТипДвижения = Перечисления.ТипыДвиженийЗапасов.Отгрузка Тогда
				
				Если КоличествоОстатокПотребность > 0 Тогда
					СтрокаЗаказы.ПотребностьПросрочено = КоличествоОстатокПотребность;
					КоличествоОстатокПотребность = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРасшифровкуПоЗаказу(ТаблицаРезультатЗапроса, ТаблицаГрафикПотребностей)
	
	ТаблицаГрафикПотребностей.Колонки.Добавить("ЗаказРасшифровка");
	
	НоваяСтрока = Неопределено;
	ПредыдущаяЗаписьПериод = Неопределено;
	ПредыдущаяЗаписьНоменклатура = Неопределено;
	ПредыдущаяЗаписьХарактеристика = Неопределено;
	Для каждого СтрокаРезультатЗапроса Из ТаблицаРезультатЗапроса Цикл
		
		Если СтрокаРезультатЗапроса.Период = ПредыдущаяЗаписьПериод
			И СтрокаРезультатЗапроса.Номенклатура = ПредыдущаяЗаписьНоменклатура 
			И СтрокаРезультатЗапроса.Характеристика = ПредыдущаяЗаписьХарактеристика Тогда
			
			СтруктураПоказателей = Новый Структура;
			СтруктураПоказателей.Вставить("Период", "Период" + Формат(СтрокаРезультатЗапроса.Период, "ДФ=yyyyMMdd"));
			СтруктураПоказателей.Вставить("Поступление", СтрокаРезультатЗапроса.Поступление);
			СтруктураПоказателей.Вставить("ПоступлениеПросрочено", СтрокаРезультатЗапроса.ПоступлениеПросрочено);
			СтруктураПоказателей.Вставить("Потребность", СтрокаРезультатЗапроса.Потребность);
			СтруктураПоказателей.Вставить("ПотребностьПросрочено", СтрокаРезультатЗапроса.ПотребностьПросрочено);
			
			СоответствиеНоваяСтрока = НоваяСтрока.ЗаказРасшифровка;
			СоответствиеНоваяСтрока.Вставить(СтрокаРезультатЗапроса.Заказ, СтруктураПоказателей);
			НоваяСтрока.ЗаказРасшифровка = СоответствиеНоваяСтрока; 
			
			НоваяСтрока.Поступление = НоваяСтрока.Поступление + СтрокаРезультатЗапроса.Поступление;
			НоваяСтрока.ПоступлениеПросрочено = НоваяСтрока.ПоступлениеПросрочено + СтрокаРезультатЗапроса.ПоступлениеПросрочено;
			
			НоваяСтрока.Потребность = НоваяСтрока.Потребность + СтрокаРезультатЗапроса.Потребность;
			НоваяСтрока.ПотребностьПросрочено = НоваяСтрока.ПотребностьПросрочено + СтрокаРезультатЗапроса.ПотребностьПросрочено;
			
		Иначе
			
			НоваяСтрока = ТаблицаГрафикПотребностей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультатЗапроса);
			
			СтруктураПоказателей = Новый Структура;
			СтруктураПоказателей.Вставить("Период", "Период" + Формат(СтрокаРезультатЗапроса.Период, "ДФ=yyyyMMdd"));
			СтруктураПоказателей.Вставить("Поступление", СтрокаРезультатЗапроса.Поступление);
			СтруктураПоказателей.Вставить("ПоступлениеПросрочено", СтрокаРезультатЗапроса.ПоступлениеПросрочено);
			СтруктураПоказателей.Вставить("Потребность", СтрокаРезультатЗапроса.Потребность);
			СтруктураПоказателей.Вставить("ПотребностьПросрочено", СтрокаРезультатЗапроса.ПотребностьПросрочено);
			
			СоответствиеЗаказРасшифровка = Новый Соответствие;
			СоответствиеЗаказРасшифровка.Вставить(СтрокаРезультатЗапроса.Заказ, СтруктураПоказателей); 
			
			НоваяСтрока.ЗаказРасшифровка = СоответствиеЗаказРасшифровка;
			
			ПредыдущаяЗаписьПериод = СтрокаРезультатЗапроса.Период;
			ПредыдущаяЗаписьНоменклатура = СтрокаРезультатЗапроса.Номенклатура;
			ПредыдущаяЗаписьХарактеристика = СтрокаРезультатЗапроса.Характеристика;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРезультатЗапроса = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРекомендацииНаСервере()
	
	СохранитьНастройки();
	
	// Очистка результата перед обновлением.
	РекомендацииЭлементы = Рекомендации.ПолучитьЭлементы();
	РекомендацииЭлементы.Очистить();
	
	ТЧЗапасы = ПолучитьИзВременногоХранилища(АдресЗапасы);
	
	ИсточникДанных = Новый ТаблицаЗначений;
	ИсточникДанных.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ИсточникДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ИсточникДанных.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ИсточникДанных.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ИсточникДанных.Колонки.Добавить("СпособПополнения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов"));
	ИсточникДанных.Колонки.Добавить("СрокПополнения", Новый ОписаниеТипов("Число"));
	ИсточникДанных.Колонки.Добавить("ПорядокСпособаПополнения", Новый ОписаниеТипов("Число"));
	ИсточникДанных.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ИсточникДанных.Колонки.Добавить("ДатаПоступления", Новый ОписаниеТипов("Дата"));
	
	ИндексСтроки = 0;
	
	Для каждого Номенклатура Из ТЧЗапасы.Строки Цикл
		
		Если Номенклатура.Дефицит > 0 Тогда
			
			ТекущийПериод = НачалоДня(ТекущаяДатаСеанса());
		
			Пока НачалоДня(ТекущийПериод) <= НачалоДня(ОкончаниеПериода) Цикл
				
				ИмяКолонки = "Период" + Формат(ТекущийПериод, "ДФ=yyyyMMdd");
				
				Если Номенклатура[ИмяКолонки] > 0 ИЛИ Номенклатура.Просрочено > 0 И ТекущийПериод = НачалоДня(ТекущаяДатаСеанса()) Тогда
					
					НоваяСтрока = ИсточникДанных.Добавить();
					НоваяСтрока.ИндексСтроки = ИндексСтроки;
					НоваяСтрока.Номенклатура = Номенклатура.Номенклатура;
					НоваяСтрока.Характеристика = Номенклатура.Характеристика;
					НоваяСтрока.Поставщик = Номенклатура.Номенклатура.Поставщик;
					НоваяСтрока.СпособПополнения = Номенклатура.Номенклатура.СпособПополнения;
					НоваяСтрока.СрокПополнения = Номенклатура.Номенклатура.СрокПополнения;
					НоваяСтрока.ПорядокСпособаПополнения = 1;
					
					Если ТекущийПериод = НачалоДня(ТекущаяДатаСеанса()) Тогда
						
						НоваяСтрока.Количество = Номенклатура[ИмяКолонки] + Номенклатура.Просрочено;
						
					Иначе
						
						НоваяСтрока.Количество = Номенклатура[ИмяКолонки];
						
					КонецЕсли;
					
					НоваяСтрока.ДатаПоступления = ТекущийПериод;
					
					Если НоваяСтрока.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка Тогда
						
						Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
							
							НовыйСпособПополнения = ИсточникДанных.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйСпособПополнения, НоваяСтрока);
							НовыйСпособПополнения.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Производство;
							НовыйСпособПополнения.ПорядокСпособаПополнения = 2;
							
						КонецЕсли;
						
						Если Константы.ФункциональнаяОпцияПередачаСырьяВПереработку.Получить() Тогда
						
							НовыйСпособПополнения = ИсточникДанных.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйСпособПополнения, НоваяСтрока);
							НовыйСпособПополнения.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Переработка;
							НовыйСпособПополнения.ПорядокСпособаПополнения = 3;
							
						КонецЕсли;
						
					ИначеЕсли НоваяСтрока.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Производство Тогда	
						
						НовыйСпособПополнения = ИсточникДанных.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйСпособПополнения, НоваяСтрока);
						НовыйСпособПополнения.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
						НовыйСпособПополнения.ПорядокСпособаПополнения = 2;
						
						Если Константы.ФункциональнаяОпцияПередачаСырьяВПереработку.Получить() Тогда
						
							НовыйСпособПополнения = ИсточникДанных.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйСпособПополнения, НоваяСтрока);
							НовыйСпособПополнения.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Переработка;
							НовыйСпособПополнения.ПорядокСпособаПополнения = 3;
							
						КонецЕсли;
						
					Иначе
						
						НовыйСпособПополнения = ИсточникДанных.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйСпособПополнения, НоваяСтрока);
						НовыйСпособПополнения.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка;
						НовыйСпособПополнения.ПорядокСпособаПополнения = 2;
						
						Если Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
						
							НовыйСпособПополнения = ИсточникДанных.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйСпособПополнения, НоваяСтрока);
							НовыйСпособПополнения.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Производство;
							НовыйСпособПополнения.ПорядокСпособаПополнения = 3;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИндексСтроки = ИндексСтроки + 1;
					
				КонецЕсли;
				
				ТекущийПериод = ТекущийПериод + 86400;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсточникДанных.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсточникДанных.ИндексСтроки КАК ИндексСтроки,
	|	ИсточникДанных.ПорядокСпособаПополнения КАК ПорядокСпособаПополнения,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Поставщик КАК Поставщик,
	|	ИсточникДанных.СпособПополнения КАК СпособПополнения,
	|	ИсточникДанных.СрокПополнения КАК СрокПополнения,
	|	ИсточникДанных.Количество КАК Количество,
	|	ИсточникДанных.ДатаПоступления КАК ДатаПоступления
	|ПОМЕСТИТЬ ИсточникДанных
	|ИЗ
	|	&ИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЦеныКонтрагентов.Номенклатура КАК Номенклатура,
	|	ТаблицаЦеныКонтрагентов.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента КАК ВидЦен,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.Владелец КАК Поставщик,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента.ВалютаЦены КАК ВалютаЦены,
	|	ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена / ЕСТЬNULL(ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения.Коэффициент, 1), 0) КАК Цена
	|ПОМЕСТИТЬ ИсточникДанныхЦеныКонтрагентов
	|ИЗ
	|	ИсточникДанных КАК ТаблицаЦеныКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|				&ДатаОбработки,
	|				(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ИсточникДанных.Номенклатура КАК Номенклатура,
	|						ИсточникДанных.Характеристика КАК Характеристика
	|					ИЗ
	|						ИсточникДанных КАК ИсточникДанных)) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ПО ТаблицаЦеныКонтрагентов.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|			И ТаблицаЦеныКонтрагентов.Характеристика = ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика
	|ГДЕ
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ИсточникДанных.ИндексСтроки КАК ИндексСтроки,
	|	ИсточникДанных.ПорядокСпособаПополнения КАК ПорядокСпособаПополнения,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Поставщик КАК Поставщик,
	|	ИсточникДанных.СпособПополнения КАК СпособПополнения,
	|	ИсточникДанных.СрокПополнения КАК СрокПополнения,
	|	ИсточникДанных.Количество КАК Количество,
	|	ИсточникДанных.ДатаПоступления КАК ДатаПоступления,
	|	ИсточникДанныхЦеныКонтрагентов.ВидЦен КАК ВидЦен,
	|	ИсточникДанныхЦеныКонтрагентов.ВалютаЦены КАК ВалютаЦены,
	|	ЕСТЬNULL(ИсточникДанныхЦеныКонтрагентов.Цена, 0) КАК Цена
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникДанныхЦеныКонтрагентов КАК ИсточникДанныхЦеныКонтрагентов
	|		ПО ИсточникДанных.Поставщик = ИсточникДанныхЦеныКонтрагентов.Поставщик
	|			И ИсточникДанных.Номенклатура = ИсточникДанныхЦеныКонтрагентов.Номенклатура
	|			И ИсточникДанных.Характеристика = ИсточникДанныхЦеныКонтрагентов.Характеристика
	|			И (ИсточникДанных.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ИсточникДанных.ИндексСтроки,
	|	ИсточникДанных.ПорядокСпособаПополнения,
	|	ИсточникДанных.Номенклатура,
	|	ИсточникДанных.Характеристика,
	|	ИсточникДанныхЦеныКонтрагентов.Поставщик,
	|	ИсточникДанных.СпособПополнения,
	|	ИсточникДанных.СрокПополнения,
	|	ИсточникДанных.Количество,
	|	ИсточникДанных.ДатаПоступления,
	|	ИсточникДанныхЦеныКонтрагентов.ВидЦен,
	|	ИсточникДанныхЦеныКонтрагентов.ВалютаЦены,
	|	ЕСТЬNULL(ИсточникДанныхЦеныКонтрагентов.Цена, 0)
	|ИЗ
	|	ИсточникДанных КАК ИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникДанныхЦеныКонтрагентов КАК ИсточникДанныхЦеныКонтрагентов
	|		ПО ИсточникДанных.Поставщик <> ИсточникДанныхЦеныКонтрагентов.Поставщик
	|			И ИсточникДанных.Номенклатура = ИсточникДанныхЦеныКонтрагентов.Номенклатура
	|			И ИсточникДанных.Характеристика = ИсточникДанныхЦеныКонтрагентов.Характеристика
	|			И (ИсточникДанных.СпособПополнения = ЗНАЧЕНИЕ(Перечисление.СпособыПополненияЗапасов.Закупка))
	|ГДЕ
	|	ЕСТЬNULL(ИсточникДанныхЦеныКонтрагентов.Цена, 0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексСтроки,
	|	ПорядокСпособаПополнения,
	|	Порядок,
	|	ВидЦен");
	
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	Запрос.УстановитьПараметр("ДатаОбработки", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НоменклатураЭлементы = Рекомендации.ПолучитьЭлементы();
	
	ТекущийИндексСтроки = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		// 1. Добавление номенклатуры.
		Если ТекущийИндексСтроки <> Выборка.ИндексСтроки Тогда
			
			ТекущийИндексСтроки = Выборка.ИндексСтроки;
			
			НоваяНоменклатура = НоменклатураЭлементы.Добавить();
			НоваяНоменклатура.Номенклатура = Выборка.Номенклатура;
			НоваяНоменклатура.ХарактеристикаИсточникПополненияЗапаса = Выборка.Характеристика;
			НоваяНоменклатура.Количество = Выборка.Количество;
			НоваяНоменклатура.ДатаПоступления = Выборка.ДатаПоступления;
			НоваяНоменклатура.ДатаПоступленияПросрочена = Истина;
			
			НоваяНоменклатура.РедактированиеРазрешено = Ложь;
			
		КонецЕсли;
		
		// 2. Добавление способа пополнения и цены.
		СпособПополненияЭлементы = НоваяНоменклатура.ПолучитьЭлементы();
		НоваяСпособПополнения = СпособПополненияЭлементы.Добавить();
		
		Если Выборка.ПорядокСпособаПополнения = 1 Тогда
			НоваяСпособПополнения.Номенклатура = Строка(Выборка.СпособПополнения) + " " + "(основной)";
		Иначе
			НоваяСпособПополнения.Номенклатура = Строка(Выборка.СпособПополнения);
		КонецЕсли;
		
		НоваяСпособПополнения.СпособПополнения = Выборка.СпособПополнения;
		
		НоваяСпособПополнения.Количество = Выборка.Количество;
		НоваяСпособПополнения.ДатаПоступления =  Макс(НачалоДня(ТекущаяДатаСеанса()) + Выборка.СрокПополнения * 86400, Выборка.ДатаПоступления);
		НоваяСпособПополнения.ДатаПоступленияПросрочена = НоваяСпособПополнения.ДатаПоступления > Выборка.ДатаПоступления;
		НоваяСпособПополнения.РедактированиеРазрешено = Истина;
		
		Если Выборка.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка Тогда
			
			НоваяСпособПополнения.ХарактеристикаИсточникПополненияЗапаса = Выборка.Поставщик;
			НоваяСпособПополнения.Цена = Выборка.Цена;
			НоваяСпособПополнения.Сумма = Выборка.Цена * Выборка.Количество;
			НоваяСпособПополнения.Валюта = Выборка.ВалютаЦены;
			НоваяСпособПополнения.ВидЦен = Выборка.ВидЦен;
			
		КонецЕсли;
		
		// 3. Параметры оформления.
		Если НЕ НоваяСпособПополнения.ДатаПоступленияПросрочена Тогда
			
			НоваяНоменклатура.ДатаПоступленияПросрочена = Ложь;
			НоваяНоменклатура.ПотребностьОбеспечена = Истина;
			
			Если НЕ НоваяНоменклатура.Выбран Тогда
				
				НоваяСпособПополнения.Выбран = Истина;
				НоваяНоменклатура.Выбран = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИсточникДанных = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаказыНаСервере()
	
	СохранитьНастройки();
	
	ТаблицаЗаказы = Новый ТаблицаЗначений;
	ТаблицаЗаказы.Колонки.Добавить("СпособПополнения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов"));
	ТаблицаЗаказы.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаЗаказы.Колонки.Добавить("ВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦенКонтрагентов"));
	ТаблицаЗаказы.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаЗаказы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗаказы.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗаказы.Колонки.Добавить("ДатаПоступления", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаказы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаЗаказы.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаЗаказы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаЗаказы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументОбъект.ЗаказНаПроизводство, ДокументОбъект.ЗаказПоставщику"));
	
	РекомендацииНоменклатура = Рекомендации.ПолучитьЭлементы();
	Для каждого СтрокаРекомендации из РекомендацииНоменклатура Цикл
		
		РекомендацииЭлементы = СтрокаРекомендации.ПолучитьЭлементы();
		
		Для каждого СтрокаНоменклатура из РекомендацииЭлементы Цикл
			
			Если СтрокаНоменклатура.Выбран Тогда
				
				НоваяСтрока = ТаблицаЗаказы.Добавить();
				НоваяСтрока.СпособПополнения = СтрокаНоменклатура.СпособПополнения;
				НоваяСтрока.Контрагент = СтрокаНоменклатура.ХарактеристикаИсточникПополненияЗапаса;
				НоваяСтрока.ВидЦен = СтрокаНоменклатура.ВидЦен;
				НоваяСтрока.Валюта = СтрокаНоменклатура.Валюта;
				НоваяСтрока.Номенклатура = СтрокаРекомендации.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаРекомендации.ХарактеристикаИсточникПополненияЗапаса;
				НоваяСтрока.ДатаПоступления = СтрокаНоменклатура.ДатаПоступления;
				НоваяСтрока.Количество = СтрокаНоменклатура.Количество;
				НоваяСтрока.Цена = СтрокаНоменклатура.Цена;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДатаПоступленияВШакпе = УправлениеНебольшойФирмойПовтИсп.РеквизитВШапке("ПоложениеДатыПоступленияВЗаказеПоставщику");
	
	ВалютаДокументаПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	ДанныеВалюта = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(ВалютаДокументаПоУмолчанию);
	КурсДокументаПоУмолчанию = ДанныеВалюта.Курс;
	КратностьДокументаПоУмолчанию = ДанныеВалюта.Кратность;
	
	Для каждого ПараметрыЗаказа из ТаблицаЗаказы Цикл
		
		// Сформируем заказы поставщикам.
		Если ПараметрыЗаказа.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка
			ИЛИ ПараметрыЗаказа.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Переработка Тогда
			
			СтруктураПоиска = Новый Структура("СпособПополнения, Контрагент, Валюта, Заказ", ПараметрыЗаказа.СпособПополнения, ПараметрыЗаказа.Контрагент, ПараметрыЗаказа.Валюта, Неопределено);
			
			Если ДатаПоступленияВШакпе Тогда
				СтруктураПоиска.Вставить("ДатаПоступления", ПараметрыЗаказа.ДатаПоступления);
			КонецЕсли;
			
			РезультатПоиска = ТаблицаЗаказы.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
			ТекущийЗаказ.Дата = ТекущаяДатаСеанса();
			
			ТекущийЗаказ.Заполнить(Неопределено);
			
			Если ПараметрыЗаказа.СпособПополнения = Перечисления.СпособыПополненияЗапасов.Закупка Тогда
				ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
			Иначе
				ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку;
			КонецЕсли;
			
			ТекущийЗаказ.Организация = Организация;
			ТекущийЗаказ.ВалютаДокумента = ВалютаДокументаПоУмолчанию;
			ТекущийЗаказ.Курс = КурсДокументаПоУмолчанию;
			ТекущийЗаказ.Кратность = КратностьДокументаПоУмолчанию;
			
			ТекущийЗаказ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			ТекущийЗаказ.СуммаВключаетНДС = Истина;
			
			ТекущийЗаказ.Контрагент = ПараметрыЗаказа.Контрагент;
			ДоговорПоУмолчанию = ТекущийЗаказ.Контрагент.ДоговорПоУмолчанию;
			
			Если Не ЗначениеЗаполнено(ПараметрыЗаказа.Валюта) Тогда
				
				ТекущийЗаказ.Договор = ДоговорПоУмолчанию;
				
			Иначе
				
				Если ПараметрыЗаказа.Валюта = ДоговорПоУмолчанию.ВалютаРасчетов Тогда
					
					ТекущийЗаказ.Договор = ДоговорПоУмолчанию;
					
				Иначе
					
					ТекущийЗаказ.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					
					ТекущийЗаказ.ВалютаДокумента = ПараметрыЗаказа.Валюта;
					ДанныеВалюта = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(ТекущийЗаказ.ВалютаДокумента);
					ТекущийЗаказ.Курс = ДанныеВалюта.Курс;
					ТекущийЗаказ.Кратность = ДанныеВалюта.Кратность;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущийЗаказ.ВидЦенКонтрагента = ТекущийЗаказ.Договор.ВидЦенКонтрагента;
			
			Если ЗначениеЗаполнено(ТекущийЗаказ.Договор) И НЕ ТекущийЗаказ.Договор.ВалютаРасчетов = ТекущийЗаказ.ВалютаДокумента Тогда
				
				ТекущийЗаказ.ВалютаДокумента = ТекущийЗаказ.Договор.ВалютаРасчетов;
				ДанныеВалюта = РаботаСКурсамиВалют.ЗаполнитьДанныеКурсаДляВалюты(ТекущийЗаказ.ВалютаДокумента);
				ТекущийЗаказ.Курс = ДанныеВалюта.Курс;
				ТекущийЗаказ.Кратность = ДанныеВалюта.Кратность;
				
			КонецЕсли;
			
			Если ДатаПоступленияВШакпе Тогда
				ТекущийЗаказ.ДатаПоступления = ПараметрыЗаказа.ДатаПоступления;
			КонецЕсли;
			
			Для каждого СтрокаРезультат из РезультатПоиска Цикл
				
				НоваяСтрока = ТекущийЗаказ.Запасы.Добавить();
				НоваяСтрока.Номенклатура = СтрокаРезультат.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаРезультат.Характеристика;
				НоваяСтрока.Количество = СтрокаРезультат.Количество;
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
					НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
				Иначе
					НоваяСтрока.СтавкаНДС = Организация.СтавкаНДСПоУмолчанию;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПараметрыЗаказа.ВидЦен) Тогда
					
					НоваяСтрока.Цена = СтрокаРезультат.Цена;
					
					СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
					Если НЕ СтрокаРезультат.ВидЦен.ЦенаВключаетНДС Тогда
						НоваяСтрока.Цена = (НоваяСтрока.Цена * (100 + СтавкаНДС)) / 100;
					КонецЕсли;
					
					НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
					НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100);
					НоваяСтрока.Всего = НоваяСтрока.Сумма;
					
				КонецЕсли;
				
				НоваяСтрока.ДатаПоступления = СтрокаРезультат.ДатаПоступления;
				
				СтрокаРезультат.Заказ = ТекущийЗаказ;
				
			КонецЦикла;
			
		Иначе // Сформируем заказы на производство.
			
			СтруктураПоиска = Новый Структура("СпособПополнения, Заказ", ПараметрыЗаказа.СпособПополнения, Неопределено);
			
			РезультатПоиска = ТаблицаЗаказы.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийЗаказ = Документы.ЗаказНаПроизводство.СоздатьДокумент();
			ТекущийЗаказ.Дата = ТекущаяДатаСеанса();
			
			ТекущийЗаказ.Заполнить(Неопределено);
			
			ТекущийЗаказ.ВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка;
			
			ТекущийЗаказ.Организация = Организация;
			ТекущийЗаказ.Старт = ПараметрыЗаказа.ДатаПоступления - 86400 * ПараметрыЗаказа.Номенклатура.СрокПополнения;
			ТекущийЗаказ.Финиш = ПараметрыЗаказа.ДатаПоступления;
			
			Для каждого СтрокаРезультат из РезультатПоиска Цикл
				
				НоваяСтрока = ТекущийЗаказ.Продукция.Добавить();
				НоваяСтрока.Номенклатура = СтрокаРезультат.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаРезультат.Характеристика;
				НоваяСтрока.Количество = СтрокаРезультат.Количество;
				НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
				НоваяСтрока.Спецификация = УправлениеНебольшойФирмойСервер.ПолучитьПоУмолчаниюСпецификацию(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика);
				
				СтрокаРезультат.Заказ = ТекущийЗаказ;
				
			КонецЦикла;
			
			ДанныеЗаполнения = Новый Структура("РасчетПотребностей", Истина);
			ТекущийЗаказ.Заполнить(ДанныеЗаполнения);
			
		КонецЕсли;
		
		ТекущийЗаказ.Комментарий = НСтр("ru = 'Сформирован автоматически сервисом ""Расчет потребностей в запасах"".'");
		
		ТекущийЗаказ.Записать();
		СформированныйЗаказ = Заказы.Добавить();
		СформированныйЗаказ.Заказ = ТекущийЗаказ.Ссылка;
		СформированныйЗаказ.СтандартнаяКартинка = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказыПровестиНаСервере(ЗаказыДляПроведения)
	
	РезультатыПроведения = Новый Массив;
	
	Для каждого ЗаказДляПроведения из ЗаказыДляПроведения Цикл
	
		ЗаказОбъект = ЗаказДляПроведения.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗаказОбъект.ПометкаУдаления Тогда
			
			Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
			
				Попытка
					
					ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
					РезультатыПроведения.Добавить(ЗаказДляПроведения.Индекс);
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроведения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаказыОтменаПроведенияНаСервере(ЗаказыДляОтменыПроведения)
	
	РезультатыОтменыПроведения = Новый Массив;
	
	Для каждого ЗаказДляОтменыПроведения из ЗаказыДляОтменыПроведения Цикл
	
		ЗаказОбъект = ЗаказДляОтменыПроведения.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗаказОбъект.ПометкаУдаления Тогда
			
			Попытка
				
				ЗаказОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				РезультатыОтменыПроведения.Добавить(ЗаказДляОтменыПроведения.Индекс);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыОтменыПроведения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаказыПометитьНаУдалениеНаСервере(ЗаказыДляПометкиНаУдаление)
	
	РезультатыПометкиНаУдаление = Новый Массив;
	
	Для каждого ЗаказДляПометкиНаУдаление из ЗаказыДляПометкиНаУдаление Цикл
	
		ЗаказОбъект = ЗаказДляПометкиНаУдаление.Ссылка.ПолучитьОбъект();
		
		Попытка
			
			ЗаказОбъект.УстановитьПометкуУдаления(НЕ ЗаказОбъект.ПометкаУдаления);
			РезультатыПометкиНаУдаление.Добавить(ЗаказДляПометкиНаУдаление.Индекс);
			
		Исключение
		КонецПопытки;
			
	КонецЦикла;
	
	Возврат РезультатыПометкиНаУдаление;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление(НачалоПериода, ОкончаниеПериода)
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	// Номенклатура и характеристика оформляются жирным шрифтом.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыНоменклатура");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыХарактеристика");
	
	ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияНоменклатураХарактеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияНоменклатураХарактеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 4;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	// Дефицит оформляется жирным шрифтом.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыДефицит");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияДефицит");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	// Отрицательное в дефиците выделяется цветом.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыДефицит");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Дефицит");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	// Просрочено оформляется жирным шрифтом.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПросрочено");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияПросрочено");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	// Отрицательное просрочено выделяется цветом.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПросрочено");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Просрочено");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	
	// Номенклатура и характеристика оформляются жирным шрифтом и цветом.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыНоменклатура");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыХарактеристика");
	
	ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияНоменклатураХарактеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияНоменклатураХарактеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 5;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	// Дефицит оформляется жирным шрифтом и цветом.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыДефицит");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияДефицит");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	// Просрочено оформляется жирным шрифтом и цветом.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПросрочено");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияПросрочено");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	// Расшифровка просрочено оформляется цветом фона.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПросрочено");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Просрочено");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = НСтр("ru = 'Поступление'");
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = НСтр("ru = 'Потребность'");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	
	ТекущийПериод = НачалоПериода;
	
	Пока НачалоДня(ТекущийПериод) <= НачалоДня(ОкончаниеПериода) Цикл
		
		// Период оформляется жирным шрифтом.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		
		ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 1;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 4;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
		
		// Отрицательное в периоде выделяется цветом.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Период" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.ПравоеЗначение = 0;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
		
		// Период оформляется жирным шрифтом и цветом.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		
		ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 2;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = 5;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
		
		// Выходные дни оформляются цветом фона.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.ВариантОформленияПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ПравоеЗначение = 2;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ШелковыйОттенок);
		
		// Расшифровка периода оформляется цветом фона.
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЗапасыПериод" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Период" + Формат(ТекущийПериод, "ДФ=yyyyMMdd"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ПравоеЗначение = 0;
		
		ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = НСтр("ru = 'Поступление'");
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Запасы.Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = НСтр("ru = 'Потребность'");
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
		
		ТекущийПериод = ТекущийПериод + 86400;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПериодПотребности()
	
	ДатаКалендаряНачало = НачалоДня(НачалоДня(ТекущаяДата()));
	ДатаКалендаряОкончание = КонецДня(ОкончаниеПериода);
	
	Если Месяц(ДатаКалендаряНачало) = Месяц(ДатаКалендаряОкончание) Тогда
		
		ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
		ДеньНеделиРасписанияНачало = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
		ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
		ДеньНеделиРасписанияОкончание = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
		
		МесяцРасписания = Формат(ДатаКалендаряНачало, "ДФ=МММ");
		ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
		
		ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписания + ", " + ГодРасписания;
		
	Иначе
		
		ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
		ДеньНеделиРасписанияНачало = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
		МесяцРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=МММ");
		ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
		ДеньНеделиРасписанияОкончание = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряОкончание);
		МесяцРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=МММ");
		
		Если Год(ДатаКалендаряНачало) = Год(ДатаКалендаряОкончание) Тогда
			ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
			ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + ", " + ГодРасписания;
		Иначе
			ГодРасписанияНачало = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
			ГодРасписанияОкончание = Формат(Год(ДатаКалендаряОкончание), "ЧГ=0");
			ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " " + ГодРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + " " + ГодРасписанияОкончание;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЗаказовНаСервере()
	
	Для каждого СтрокаЗаказ Из Заказы Цикл
		
		ТекущийЗаказ = СтрокаЗаказ.Заказ;
		
		Если ТекущийЗаказ.Проведен Тогда
			СтрокаЗаказ.СтандартнаяКартинка = 1;
		ИначеЕсли ТекущийЗаказ.ПометкаУдаления Тогда
			СтрокаЗаказ.СтандартнаяКартинка = 2;
		Иначе
			СтрокаЗаказ.СтандартнаяКартинка = 0;
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура РекомендацииСнятьВсеВыбран()
	
	КорневыеЭлементы = Рекомендации.ПолучитьЭлементы();
	Для Каждого КорневойЭлемент Из КорневыеЭлементы Цикл
		КорневойЭлемент.Выбран = Ложь;
		ЭлементыВторогоУровня = КорневойЭлемент.ПолучитьЭлементы();
		Для Каждого ЭлементВторогоУровня Из ЭлементыВторогоУровня Цикл
			ЭлементВторогоУровня.Выбран = Ложь;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьНаСервере(Направление)
	
	ЗапасыДерево = РеквизитФормыВЗначение("Запасы", Тип("ДеревоЗначений"));
	
	Если Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыДефицит Тогда
		СтрокаСортировки = "Дефицит " + Направление + ",Номенклатура " + Направление + ",Характеристика " + Направление;
	ИначеЕсли Элементы.Запасы.ТекущийЭлемент = Элементы.ЗапасыПросрочено Тогда
		СтрокаСортировки = "Просрочено " + Направление + ",Номенклатура " + Направление + ",Характеристика " + Направление;
	Иначе
		СтрокаСортировки = "Номенклатура " + Направление + ",Характеристика " + Направление;
	КонецЕсли;
	
	ЗапасыДерево.Строки.Сортировать(СтрокаСортировки, Ложь);
	ЗначениеВРеквизитФормы(ЗапасыДерево, "Запасы");
	
	АдресЗапасы = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Запасы"), УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти
