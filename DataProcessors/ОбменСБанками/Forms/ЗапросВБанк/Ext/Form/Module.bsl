
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Параметры.НастройкаОбмена;
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбмена, "Организация, Банк, ПрограммаБанка, ИдентификаторОрганизации, ИмяВнешнегоМодуля");
	
	ПрограммаБанка = РеквизитыНастройкиОбмена.ПрограммаБанка;
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыНастройкиОбмена.Банк, "Код");
	ИмяВнешнегоМодуля = РеквизитыНастройкиОбмена.ИмяВнешнегоМодуля;
	
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		ИЛИ ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
	
		МассивБанковскихСчетов = Новый Массив;
		Если ЗначениеЗаполнено(Параметры.НомерСчета) Тогда
			МассивБанковскихСчетов.Добавить(Параметры.НомерСчета);
		Иначе
			ОбменСБанкамиПереопределяемый.ПолучитьНомераБанковскихСчетов(
				РеквизитыНастройкиОбмена.Организация, РеквизитыНастройкиОбмена.Банк, МассивБанковскихСчетов);
		КонецЕсли;
		
		МассивБанковскихСчетовСсылка = ПоместитьВоВременноеХранилище(МассивБанковскихСчетов, УникальныйИдентификатор);
	КонецЕсли;
	
	СообщениеОбмена = Параметры.СообщениеОбмена;
	
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ВидЭД");
		Если ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда
			Заголовок = НСтр("ru = 'Получение состояния электронного документа'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
			// не меняем предопределенный
		Иначе
			Заголовок = НСтр("ru = 'Тестирование обмена данными'");
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ПринудительноеПолучениеВыписки Тогда
		ДатаЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "Дата");
	КонецЕсли;
	
	Пользователь = Параметры.Пользователь;
	Пароль = Параметры.Пароль;
	ИдентификаторСессииБанка = Параметры.ИдентификаторСессииБанка;
	ДатаОкончания = Параметры.ДатаОкончания;
	ДатаНачала = Параметры.ДатаНачала;
	ГотовыеВыпискиСсылка =  ПоместитьВоВременноеХранилище(Параметры.ГотовыеВыписки, УникальныйИдентификатор);
	ДанныеСертификатаСсылка = ПоместитьВоВременноеХранилище(Параметры.ДанныеСертификата, УникальныйИдентификатор);
	МассивСообщенийОбменаСсылка = ПоместитьВоВременноеХранилище(Параметры.МассивСообщенийОбмена, УникальныйИдентификатор);

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перем ЗапросОтправлен, ВыпискаБанка;
	
	Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		
		ОбменСБанкамиСлужебныйКлиент.ПроцессПрерван(НастройкаОбмена);
		
		Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
			ПолучитьСостояниеЭДЧерезВК();
		Иначе
			ПолучитьВыпискуЧерезВК();
		КонецЕсли;
		ФормаОткрыта = Истина;
		Возврат;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ПолучитьВыпискуЧерезДополнительнуюОбработку();
		ФормаОткрыта = Истина;
		Возврат;
	ИначеЕсли ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		ГотовыеВыписки = ПолучитьИзВременногоХранилища(ГотовыеВыпискиСсылка);
		Если ГотовыеВыписки.Количество() Тогда
			ОповеститьОВыборе(ГотовыеВыписки);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СообщениеОбмена) Тогда // передан массив запросов выписки
		
		НачатьОтправкуЗапросаВыпискиВБанк();
		
	Иначе
		
		Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД") Тогда
			НачатьОтправкуЗапросаСтатусаЭД();
		ИначеЕсли ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭДОбменСБанками.ЗапросВыписки") Тогда
			
			Оповещение = Новый ОписаниеОповещения("ПослеОтправкиЗапросаВыпискиСбербанк", ЭтотОбъект);
			
			ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросВыпискиСбербанк(Оповещение, НастройкаОбмена, СообщениеОбмена);
			
		Иначе
			НачатьОтправкуЗапросаЗонда();
		КонецЕсли
		
	КонецЕсли;
	
	Если ЗакрытьФорму Тогда
		Отказ = Истина;
	Иначе
		ФормаОткрыта = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПроизошлаОшибка Тогда
		Отказ = Истина;
		ПроизошлаОшибка = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Ошибка;
		Элементы.ФормаОтмена.Заголовок = "Закрыть";
		
		Если ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ПолучитьНовыеДокументыСбербанк");
		КонецЕсли;
	КонецЕсли;
	
	ОбменСБанкамиСлужебныйКлиент.ПрерватьПроцессыНаКлиенте(НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере(ИдентификаторЗадания);
	КонецЕсли;
	
	ФормаОткрыта = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачатьОтправкуЗапросаВыпискиВБанк()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", ИдентификаторСессииБанка);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыЗапроса.Вставить("Пользователь", Пользователь);
	ПараметрыЗапроса.Вставить("Пароль", Пароль);
	
	ОперацияВыполнена = ОтправитьЗапросВыпискиНаСервере(
		МассивСообщенийОбменаСсылка, ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаВыписки();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);

	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросаСтатусаЭД()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", ИдентификаторСессииБанка);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	ОперацияВыполнена = ОтправитьЗапросСостоянияЭДНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ПроизошлаОшибка);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаСостоянияЭД();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуЗапросаЗонда()
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСессииБанка", ИдентификаторСессииБанка);
	ПараметрыЗапроса.Вставить("СообщениеОбмена", СообщениеОбмена);
	ПараметрыЗапроса.Вставить("НастройкаОбмена", НастройкаОбмена);
	
	МассивСообщений = Новый Массив;
	ОперацияВыполнена = ОбменСБанкамиСлужебныйВызовСервера.ОтправитьЗапросЗондНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, МассивСообщений);
		
	Если МассивСообщений.Количество() Тогда //Произошла ошибка
		СтруктураВозврата = Новый Структура("Успех, МассивСообщений", Ложь, МассивСообщений);
		Если ФормаОткрыта Тогда
			Закрыть(СтруктураВозврата);
		Иначе
			Если Не ОписаниеОповещенияОЗакрытии = Неопределено Тогда
				ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, СтруктураВозврата);
			КонецЕсли;
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатЗапросаЗонда();
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда", 1, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьЗапросВыпискиНаСервере(Знач МассивЗапросовСсылка, Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ПараметрыЗапроса.Вставить("МассивСообщенийОбмена", ПолучитьИзВременногоХранилища(МассивЗапросовСсылка));
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Отправка запроса выписки в банк'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросВыпискиВБанк", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьЗапросСостоянияЭДНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ЕстьОшибка)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Отправка запроса состояния ЭД в банк'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбменСБанкамиСлужебный.ОтправитьЗапросСостоянияЭДВБанк", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(Знач ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаСостоянияЭД();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияЗапросаСостоянияЭД", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаЗонда();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияОтправкиЗапросаЗонда", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатЗапросаВыписки();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗаданияЗапросаВыписки", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаВыписки()

	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);
	
	Если МассивСообщений.Количество() Тогда
		
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ПроизошлаОшибка = Истина;
		Если НЕ ФормаОткрыта Тогда
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть();
		КонецЕсли;
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Возврат;
	КонецЕсли;

	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
	
	ТекстОповещения = НСтр("ru = 'Отправлено документов: (1)'");
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Если Не ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
		ОповеститьОВыборе(СтруктураВозврата.ВыпискаБанка);
	ИначеЕсли НЕ ПроизошлаОшибка Тогда
		
		ПараметрыОжиданияПолученияВыписки = Новый Структура();
		ПараметрыОжиданияПолученияВыписки.Вставить("МинимальныйИнтервал", 1);
		ПараметрыОжиданияПолученияВыписки.Вставить("МаксимальныйИнтервал", 15);
		ПараметрыОжиданияПолученияВыписки.Вставить("ТекущийИнтервал", 1);
		ПараметрыОжиданияПолученияВыписки.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", 1, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьВыпискуАсинхронныйОбмен()
	
	ОперацияВыполнена = ПолучитьВыпискуАсинхронноНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ПроизошлаОшибка);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияВыписки();
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияВыписки", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаСостоянияЭД()

	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);

	Если МассивСообщений.Количество() Тогда
		
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ПроизошлаОшибка = Истина;
		Если НЕ ФормаОткрыта Тогда
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть();
		КонецЕсли;
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Возврат;
	КонецЕсли;
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);

	ПараметрыЗапроса.Вставить("СообщениеОбмена", СтруктураВозврата.СообщениеОбменаЗапросСостояния);
	
	ОперацияВыполнена = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(
			ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
		Возврат;
	КонецЕсли;

	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаЗонда()

	КолОтправленных = 0;
	КолПолученных = 0;
	
	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);
	
	Если МассивСообщений.Количество() Тогда
		СтруктураВозврата = Новый Структура("Успех, МассивСообщений", Ложь, МассивСообщений);
		Если Не ФормаОткрыта Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, СтруктураВозврата);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть(СтруктураВозврата);
		КонецЕсли;
		Возврат
	КонецЕсли;
	
	ОперацияВыполнена = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии", 1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВыпискуАсинхронноНаСервере(Знач ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания, ЕстьОшибка)
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЗаданиеВыполнено = Ложь;
		
	НаименованиеЗадания = НСтр("ru = 'Получение выписки из банка'");
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыЗапроса);
	ПараметрыВыполнения.Добавить(АдресХранилища);
		
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(
		"ОбменСБанкамиСлужебный.ПолучитьВыпискуБанкаАсинхронно", ПараметрыВыполнения, , НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;

	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПолученияВыписки()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатПолученияВыписки();
			Возврат; // задание выполнили, выходим
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеПолученияВыписки", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
			Возврат;
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии",
											ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПолученияВыписки()
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОбменСБанкамиСлужебныйКлиент.ВызватьОповещения(СтруктураВозврата);
	Оповестить("ОбновитьСостояниеОбменСБанками", СтруктураВозврата.ПараметрОповещения);
	
	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПолученныхПодписейВыписки", ЭтотОбъект);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЭП", СтруктураВозврата.ДанныеЭП);
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
		ДополнительныеПараметры.Вставить("ОповещениеПослеСохраненияПодписей", Оповещение);
		
		СохранитьОчереднуюПодпись(ДополнительныеПараметры);
		
		Возврат;
		
	КонецЕсли;
	
	ПослеСохраненияПолученныхПодписейВыписки(Ложь, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОчереднуюПодпись(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ДанныеЭП.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеСохраненияПодписей, ДополнительныеПараметры.ЕстьОшибка);
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДополнительныеПараметры.ДанныеЭП Цикл
		Прервать;
	КонецЦикла;
	
	ДополнительныеПараметры.ДанныеЭП.Удалить(КлючЗначение.Ключ);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПодписейСообщенияОбмена", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ДобавитьПодписиИОпределитьСтатусы(Оповещение, КлючЗначение.Ключ, КлючЗначение.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПодписейСообщенияОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Истина);
	КонецЕсли;
	
	СохранитьОчереднуюПодпись(ДополнительныеПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПолученныхПодписейВыписки(ЕстьОшибка, ДополнительныеПараметры) Экспорт
	
	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);
	Если МассивСообщений.Количество() Тогда
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ПроизошлаОшибка = Истина;
		Если НЕ ФормаОткрыта Тогда
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		ПроизошлаОшибка = Истина;
		Если НЕ ФормаОткрыта Тогда
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураВозврата.ТребуетсяПовторнаяАутентификация Тогда
		ПроизошлаОшибка = Ложь;
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("НастройкаОбмена", НастройкаОбмена);
		ПараметрыОбработки.Вставить("ПроцедураОбработчик", "ПродолжитьПолучениеВыпискиПослеПолученияМаркераБанка");
		ПараметрыАвторизации = Новый Структура;
		Если ОбменСБанкамиСлужебныйКлиент.ПолученыДанныеАвторизации(НастройкаОбмена, ПараметрыАвторизации) Тогда
			ОбработатьПолучениеДанныхАутентификации(ПараметрыАвторизации, ПараметрыОбработки);
		Иначе
			ОООЗ = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(НастройкаОбмена, ОООЗ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВыпискиБанка = ВыпискиПоЗапросам(МассивСообщенийОбменаСсылка);
	
	Если ВыпискиБанка = Неопределено Тогда // Произошла ошибка
		ПроизошлаОшибка = Истина;
		ОповеститьОВыборе(Неопределено);
	ИначеЕсли ВыпискиБанка.Количество() Тогда
		ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
		ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
		ТекстОповещения = СтрШаблон(ТекстОповещения, ВыпискиБанка.Количество());
		Оповестить("ОбновитьСостояниеОбменСБанками");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		ОповеститьОВыборе(ВыпискиБанка);
	Иначе
		ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал = ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал
			* ПараметрыОжиданияПолученияВыписки.КоэффициентУвеличенияИнтервала;
		Если ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал > ПараметрыОжиданияПолученияВыписки.МаксимальныйИнтервал Тогда
			ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал = ПараметрыОжиданияПолученияВыписки.МаксимальныйИнтервал;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыпискиПоЗапросам(Знач МассивЗапросовСсылка)
	
	МассивЗапросов = ПолучитьИзВременногоХранилища(МассивЗапросовСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщениеОбменСБанками.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	               |ГДЕ
	               |	СообщениеОбменСБанками.СообщениеРодитель В(&МассивЗапросов)
	               |	И СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)";
	Запрос.УстановитьПараметр("МассивЗапросов", МассивЗапросов);

	МассивВозврата = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() >= МассивЗапросов.Количество() Тогда
		Пока Выборка.Следующий() Цикл
			МассивВозврата.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе
		ЗапросОшибки = Новый Запрос;
		ЗапросОшибки.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СообщениеОбменСБанками.Ссылка,
			|	СообщениеОбменСБанками.ПричинаОтклонения
			|ИЗ
			|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
			|ГДЕ
			|	СообщениеОбменСБанками.Ссылка В(&МассивЗапросов)
			|	И СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.ОтклоненБанком)";
		ЗапросОшибки.УстановитьПараметр("МассивЗапросов", МассивЗапросов);
		Результат = ЗапросОшибки.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();

			ТекстСообщения = НСтр("ru = 'Запрос отклонен.
										|Причина отклонения: %1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.ПричинаОтклонения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатПолученияИзвещенияОСостоянииЭД()
		
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ОбменСБанкамиСлужебныйКлиент.ВызватьОповещения(СтруктураВозврата);

	Если СтруктураВозврата.Свойство("ДанныеЭП") И СтруктураВозврата.ДанныеЭП.Количество() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияПолученныхПодписейИзвещения", ЭтотОбъект);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеЭП", СтруктураВозврата.ДанныеЭП);
		ДополнительныеПараметры.Вставить("ЕстьОшибка", Ложь);
		ДополнительныеПараметры.Вставить("ОповещениеПослеСохраненияПодписей", Оповещение);
		
		СохранитьОчереднуюПодпись(ДополнительныеПараметры);
		
		Возврат;

	КонецЕсли;
	
	ПослеСохраненияПолученныхПодписейИзвещения(Ложь, Неопределено)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияПолученныхПодписейИзвещения(ЕстьОшибка, ДополнительныеПараметры) Экспорт
	
	Если ЕстьОшибка Тогда
		ПроизошлаОшибка = Истина;
		Если НЕ ФормаОткрыта Тогда
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(АдресХранилища);

	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
	ТекстОповещения = НСтр("ru = 'Отправлено документов: (1).
								|Получено документов: (%1).'");
	ТекстОповещения = СтрШаблон(ТекстОповещения, СтруктураВозврата.КолПолученныхПакетов);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
		
	МассивСообщений = ОбменСБанкамиСлужебныйВызовСервера.СообщенияОбОшибкахФоновогоЗадания(ИдентификаторЗадания);

	Если МассивСообщений.Количество() Тогда
		Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
		ПроизошлаОшибка = Истина;
		Если НЕ ФормаОткрыта Тогда
			ПриЗакрытииНаСервере(ИдентификаторЗадания);
			ЗакрытьФорму = Истина;
		Иначе
			Закрыть();
		КонецЕсли;
		Оповестить("ОбновитьСостояниеОбменСБанками");
		Возврат;
	КонецЕсли;
	
	Если СтруктураВозврата.ТребуетсяПовторнаяАутентификация Тогда
		ПроизошлаОшибка = Ложь;
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("НастройкаОбмена", НастройкаОбмена);
		ПараметрыОбработки.Вставить("ПроцедураОбработчик", "ПродолжитьПолучениеИзвещенияПослеПолученияМаркераБанка");
		ПараметрыАвторизации = Новый Структура;
		Если ОбменСБанкамиСлужебныйКлиент.ПолученыДанныеАвторизации(НастройкаОбмена, ПараметрыАвторизации) Тогда
			ОбработатьПолучениеДанныхАутентификации(ПараметрыАвторизации, ПараметрыОбработки);
		Иначе
			ОООЗ = Новый ОписаниеОповещения("ОбработатьПолучениеДанныхАутентификации", ЭтотОбъект, ПараметрыОбработки);
			ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеАутентификации(НастройкаОбмена, ОООЗ);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Оповестить("ОбновитьСостояниеОбменСБанками");
	
	ПараметрыВозврата = Новый Структура("Успех", Истина);
		
	Если НЕ ФормаОткрыта Тогда
		Если НЕ ОписаниеОповещенияОЗакрытии = Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, ПараметрыВозврата);
		КонецЕсли;
		ЗакрытьФорму = Истина;
	Иначе
		Закрыть(ПараметрыВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВыпискуЧерезДополнительнуюОбработку()
	
	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		ИмяВнешнегоМодуля);
	ДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСертификатаСсылка);
	
	ПараметрыВыписки = Новый Структура;
	ДатаНачалаСтрокой = Формат(ДатаНачала,    "ДЛФ=D");
	ДатаОкончанияСтрокой = Формат(ДатаОкончания, "ДЛФ=D");
	НазваниеЭД = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	НазваниеЭД = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НазваниеЭД, ДатаНачалаСтрокой, ДатаОкончанияСтрокой);
	КолПолученных = 0;
	
	МассивНомеровБанковскихСчетов = ПолучитьИзВременногоХранилища(МассивБанковскихСчетовСсылка);
	СообщенияОбменаДляПроверки = Новый Массив;
	
	Для Каждого НомерСчета Из МассивНомеровБанковскихСчетов Цикл
		ПараметрыВыписки.Вставить("НомерСчета",        НомерСчета);
		ПараметрыВыписки.Вставить("БИК",               БИК);
		ПараметрыВыписки.Вставить("ДатаНачала"   ,     Формат(ДатаНачала,    "ДЛФ=D"));
		ПараметрыВыписки.Вставить("ДатаОкончания",     Формат(ДатаОкончания, "ДЛФ=D"));
		ПараметрыВыписки.Вставить("ВерсияСхемыДанных", ОбменСБанкамиКлиентСервер.ВерсияФорматаСинхронногоОбмена());
		ДанныеВыписки = ОбменСБанкамиСлужебныйКлиент.ОтправитьЗапросЧерезДополнительнуюОбработку(
			ВнешнийПодключаемыйМодуль, ДанныеСертификата.ДвоичныеДанныеСертификата, 2, ПараметрыВыписки);
		Если ДанныеВыписки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Подпись Из ДанныеВыписки.Подписи Цикл
			
			ДанныеСертификатаПодписи = ОбменСБанкамиСлужебныйКлиент.ДанныеСертификатаЧерезДополнительнуюОбработку(
				ВнешнийПодключаемыйМодуль, Подпись.Сертификат);
			Если ДанныеСертификатаПодписи = Неопределено Тогда
				ПроизошлаОшибка = Истина;
				Возврат;
			КонецЕсли;
			Подпись.Вставить("ДанныеСертификата", ДанныеСертификатаПодписи);
			
		КонецЦикла;
		
		СообщениеОбменаВыписка = СохранитьВыписку(ДанныеВыписки, НастройкаОбмена, НазваниеЭД);
		СообщенияОбменаДляПроверки.Добавить(СообщениеОбменаВыписка);
		ОбменСБанкамиСлужебныйВызовСервера.ОпределитьИсполненныеПлатежныеПоручения(СообщениеОбменаВыписка);
		КолПолученных = КолПолученных + 1;
	КонецЦикла;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить(
		"МассивСообщенийОбменаДляПроверкиЧерезДополнительнуюОбработку", СообщенияОбменаДляПроверки);
	ПараметрыПроверки.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	ПараметрыПроверки.Вставить("ТекущийИндексПроверкиПодписейЧерезДополнительнуюОбработку", 0);
	ПараметрыПроверки.Вставить("НастройкаОбмена", НастройкаОбмена);
	ОбменСБанкамиСлужебныйКлиент.НачатьПроверкуСтатусовПодписейЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ПараметрыПроверки);
	
	ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
			
	Если КолПолученных = 0 Тогда
		ТекстОповещения = НСтр("ru = 'Полученных документов нет.'");
	Иначе
		ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, КолПолученных);
	КонецЕсли;
		
	Оповестить("ОбновитьСостояниеОбменСБанками");
		
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ОповеститьОВыборе(СообщениеОбменаВыписка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьВыписку(Знач ДанныеВыписки, Знач НастройкаОбмена, Знач НазваниеЭД)
	
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, "Организация, Банк");
	
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеВыписки.Выписка);
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Представление", НазваниеЭД);
	ПараметрыСообщения.Вставить("АдресФайлаВоВременномХранилище", АдресФайла);
	ПараметрыСообщения.Вставить("НастройкаОбмена", НастройкаОбмена);
	ПараметрыСообщения.Вставить("ВидЭД", Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка);
	ПараметрыСообщения.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);
	ПараметрыСообщения.Вставить("Статус", Перечисления.СтатусыОбменСБанками.Получен);
	ПараметрыСообщения.Вставить("СсылкаНаОбъект", НастройкаОбмена);
	
	НовоеСообщение = Неопределено;
	ОбменСБанкамиСлужебный.СохранитьСообщениеОбмена(ПараметрыСообщения, НовоеСообщение);
	
	Для Каждого Подпись Из ДанныеВыписки.Подписи Цикл
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток", Подпись.ДанныеСертификата.Отпечаток);
		СтруктураСертификата.Вставить("КомуВыдан", Подпись.ДанныеСертификата.ВладелецФИО);
		СтруктураСертификата.Вставить("ДвоичныеДанные", Подпись.Сертификат);
		ОбменСБанкамиСлужебныйВызовСервера.ДобавитьПодпись(НовоеСообщение, Подпись.Подпись, СтруктураСертификата);
	КонецЦикла;
	
	Возврат НовоеСообщение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолучениеДанныхАутентификации(ДанныеАутентификации, ПараметрыОбработки) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		ПроизошлаОшибка = Ложь;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РеквизитыНастройкиОбмена = Новый Структура("АдресСервера, ИдентификаторОрганизации, ВерсияФормата");
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовНастройкиОбмена(НастройкаОбмена, РеквизитыНастройкиОбмена);
	
	Обработчик = Новый ОписаниеОповещения(ПараметрыОбработки.ПроцедураОбработчик, ЭтотОбъект, ПараметрыОбработки);
	ДанныеАутентификации.Вставить("Пароль", ДанныеАутентификации.ПарольПользователя);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьМаркерБанкаПоЛогинуИПаролю(Обработчик, РеквизитыНастройкиОбмена.АдресСервера,
		РеквизитыНастройкиОбмена.ИдентификаторОрганизации, ДанныеАутентификации, РеквизитыНастройкиОбмена.ВерсияФормата,
		НастройкаОбмена);

КонецПроцедуры
	
&НаКлиенте
Процедура ПродолжитьПолучениеВыпискиПослеПолученияМаркераБанка(Маркер, ПараметрыОбработки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ПроизошлаОшибка = Ложь;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.ИдентификаторСессииБанка = Маркер;
	
	ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал = ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал
		* ПараметрыОжиданияПолученияВыписки.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал > ПараметрыОжиданияПолученияВыписки.МаксимальныйИнтервал Тогда
		ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал = ПараметрыОжиданияПолученияВыписки.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПолучитьВыпискуАсинхронныйОбмен", ПараметрыОжиданияПолученияВыписки.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеИзвещенияПослеПолученияМаркераБанка(Маркер, ПараметрыОбработки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		ПроизошлаОшибка = Ложь;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.ИдентификаторСессииБанка = Маркер;
	ОперацияВыполнена = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьИзвещениеОСостоянииЭДАсинхронноНаСервере(
		ПараметрыЗапроса, АдресХранилища, УникальныйИдентификатор, ИдентификаторЗадания);
	
	Если ОперацияВыполнена Тогда
		ОбработатьРезультатПолученияИзвещенияОСостоянииЭД();
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПолученияИзвещенияОСостоянии", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьНовыеДокументыСбербанк()
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНовыеДокументыПослеУстановкиКаналаСбербанк", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.УстановитьВиртуальныйКаналСоСбербанком(Оповещение, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеДокументыПослеУстановкиКаналаСбербанк(Успех, ДополнительныеПараметры) Экспорт
	
	Если Не Успех Тогда
		ПроизошлаОшибка = Истина;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНовыеДокументыПослеОпределенияСертификата", ЭтотОбъект);
	
	ОбменСБанкамиСлужебныйКлиент.ОпределитьСертификатПодписиСбербанк(Оповещение, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеДокументыПослеОпределенияСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПроизошлаОшибка = Истина;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработки = Новый Структура;
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовСбербанк", ЭтотОбъект, ПараметрыОбработки);
	ПараметрыОбработки.Вставить("ОповещениеПослеПолученияНовыхДокументов", Обработчик);
	ПараметрыОбработки.Вставить("ПолучитьРезультатыОбработкиПлатежныхПоручений");
	ПараметрыОбработки.Вставить("ПолучитьРезультатыОбработкиЗапросовВыписки");
	ПараметрыОбработки.Вставить("ПолучитьРезультатыОбработкиВыпискиБанка");
	ПараметрыОбработки.Вставить("ПолучитьРезультатыОбработкиЗапросовНочнойВыписки");
	ПараметрыОбработки.Вставить("ОтправитьЗапросНаПолучениеГотовыхВыписокСбербанк");
	ПараметрыОбработки.Вставить("ПринудительноеПолучениеНовыхДокументов", ЭтоПервыйЗапрос);

	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОбработки, Результат, Истина);
	
	ОбменСБанкамиСлужебныйКлиент.ВыполнитьСинхронизациюСбербанк(НастройкаОбмена, ПараметрыОбработки);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиЗапросаВыпискиСбербанк(ЗапросОтправлен, Параметры) Экспорт
	
	ЭтоПервыйЗапрос = Истина;

	Если Не ЗапросОтправлен Тогда
		ПроизошлаОшибка = Истина;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания = Новый Структура();
	ПараметрыОбработчикаОжидания.Вставить("МинимальныйИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("МаксимальныйИнтервал", 15);
	ПараметрыОбработчикаОжидания.Вставить("ТекущийИнтервал", 1);
	ПараметрыОбработчикаОжидания.Вставить("КоэффициентУвеличенияИнтервала", 1.4);
		
	ПодключитьОбработчикОжидания("Подключаемый_ПолучитьНовыеДокументыСбербанк", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНовыхДокументовСбербанк(ДокументыПолучены, ПараметрыОбработки) Экспорт
	
	ЭтоПервыйЗапрос = Ложь;

	Если Не ФормаОткрыта Тогда
		ЗакрытьФорму = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ДокументыПолучены ИЛИ ЗапросОтклонен(СообщениеОбмена) Тогда
		
		Если Не ФормаОткрыта Тогда
			ЗакрытьФорму = Истина;
			Возврат;
		КонецЕсли;

		ПроизошлаОшибка = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	МассивБанковскихСчетов = ПолучитьИзВременногоХранилища(МассивБанковскихСчетовСсылка);
	
	Если ЗначениеЗаполнено(ДатаЗапроса) Тогда
		ГотовыеВыписки = ОбменСБанкамиСлужебныйВызовСервера.ГотовыеВыпискиСбербанка(
			НастройкаОбмена, МассивБанковскихСчетов, ДатаНачала, ДатаОкончания, ДатаЗапроса);
	Иначе
		ГотовыеВыписки = ОбменСБанкамиСлужебныйВызовСервера.ГотовыеВыпискиСбербанка(
			НастройкаОбмена, МассивБанковскихСчетов, ДатаНачала, ДатаОкончания);
	КонецЕсли;
	Если ГотовыеВыписки.Количество() Тогда
		ОповеститьОВыборе(ГотовыеВыписки);
		Возврат;
	КонецЕсли;
	
	ГотовыеВыпискиСсылка = ПоместитьВоВременноеХранилище(ГотовыеВыписки, УникальныйИдентификатор);
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
													* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПолучитьНовыеДокументыСбербанк", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапросОтклонен(Знач СообщениеОбменаЗапрос)
	
	РеквизитыСообщенияОбмена =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СообщениеОбменаЗапрос, "ПричинаОтклонения, Статус");
	Если ЗначениеЗаполнено(РеквизитыСообщенияОбмена.ПричинаОтклонения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РеквизитыСообщенияОбмена.ПричинаОтклонения);
		Возврат Истина;
	ИначеЕсли РеквизитыСообщенияОбмена.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком
		ИЛИ РеквизитыСообщенияОбмена.Статус = Перечисления.СтатусыОбменСБанками.Отклонен Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запрос не выполнен'"));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВыпискуЧерезВК()
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьНовыеДокументыПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(Оповещение, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНовыеДокументыПослеПодключенияВК(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
		ПроизошлаОшибка = Истина;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	ИначеЕсли Результат = Неопределено Тогда
		ПроизошлаОшибка = Истина;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = Результат;
	
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", Результат);
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияНовыхДокументовЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПолучитьНовыеДокументыВК(Оповещение, Результат, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСостояниеЭДЧерезВК()
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьНовыеДокументыПослеПодключенияВК", ЭтотОбъект, ДополнительныеПараметры);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(Оповещение, НастройкаОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияНовыхДокументовЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат.Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Результат);
		ПроизошлаОшибка = Истина;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Результат.Результат = Неопределено ИЛИ Результат.Результат = Ложь Тогда
		ПроизошлаОшибка = Истина;
		Если ФормаОткрыта Тогда
			Закрыть();
		Иначе
			ЗакрытьФорму = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ОбменСБанкамиСлужебныйКлиент.ПроцессПрерван(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		Извещение = Неопределено;
		ИзвещениеПолучено = ОбменСБанкамиСлужебныйВызовСервера.ПолученоИзвещениеПоЗапросу(СообщениеОбмена, ПроизошлаОшибка);
		
		Если ПроизошлаОшибка ИЛИ ИзвещениеПолучено Тогда
			Если ФормаОткрыта Тогда
				Закрыть();
			Иначе
				ЗакрытьФорму = Истина;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ПолучитьНовыеДокументыПослеПодключенияВК(ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры);
		
	Иначе
	
		ВыпискиБанка = ВыпискиПоЗапросам(МассивСообщенийОбменаСсылка);
	
		Если ВыпискиБанка = Неопределено Тогда // Произошла ошибка
			ПроизошлаОшибка = Истина;
			Если ФормаОткрыта Тогда
				Закрыть();
			Иначе
				ЗакрытьФорму = Истина;
			КонецЕсли;
		ИначеЕсли ВыпискиБанка.Количество() Тогда
			ЗаголовокОповещения = НСтр("ru = '1С:ДиректБанк'");
			ТекстОповещения = НСтр("ru = 'Получено документов: (%1).'");
			ТекстОповещения = СтрШаблон(ТекстОповещения, ВыпискиБанка.Количество());
			Оповестить("ОбновитьСостояниеОбменСБанками");
			ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
			ОповеститьОВыборе(ВыпискиБанка);
		Иначе
			ПолучитьНовыеДокументыПослеПодключенияВК(ДополнительныеПараметры.ПодключаемыйМодуль, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

