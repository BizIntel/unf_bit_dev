#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостями() Тогда
		Отказ = Истина;
		СтандартнаяОбработка= Ложь;
		Возврат;
	КонецЕсли;

	ЭтотОбъект.ЛентыНовостей.Параметры.УстановитьЗначениеПараметра("Надпись_ОтключеноОбновлениеЧерезИнтернет", НСтр("ru='(отключено обновление через интернет)'"));
	ЭтотОбъект.ЛентыНовостей.Параметры.УстановитьЗначениеПараметра("Надпись_СоздаютсяНапрямуюВСправочнике", НСтр("ru='Создаются напрямую в справочнике'"));
	ЭтотОбъект.ЛентыНовостей.Параметры.УстановитьЗначениеПараметра("Надпись_ЗагружаютсяИзФайла", НСтр("ru='Загружаются из файла'"));
	ЭтотОбъект.ЛентыНовостей.Параметры.УстановитьЗначениеПараметра("Надпись_ЗагружаютсяЧерезИнтернетПоПротоколу", НСтр("ru='Загружаются через интернет по протоколу'"));

	ЭтотОбъект.СписокОбновляемыхДанных.Параметры.УстановитьЗначениеПараметра("Надпись_СписокЗначенийКлассификатора", НСтр("ru='Список значений классификатора'"));
	ЭтотОбъект.СписокОбновляемыхДанных.Параметры.УстановитьЗначениеПараметра("Надпись_ТребуетсяОбновление", НСтр("ru='Требуется обновление'"));
	ЭтотОбъект.СписокОбновляемыхДанных.Параметры.УстановитьЗначениеПараметра("Надпись_ДанныеОтсутствуют", НСтр("ru='Данные не требуют обновления'"));
	ЭтотОбъект.СписокОбновляемыхДанных.Параметры.УстановитьЗначениеПараметра("Надпись_ДанныеАктуальны", НСтр("ru='Данные актуальны'"));
	ЭтотОбъект.СписокОбновляемыхДанных.Параметры.УстановитьЗначениеПараметра("ДатаОтсутствующихДанных", '00010102');

	// Если работаем в модели сервиса и зашли с разделением, то запретить работать с этой формой.
	// Если работаем в модели сервиса и зашли без разделения, то разрешать работать с этой формой только пользователя
	//    с ролями АдминистраторСистемы и ПолныеПрава.

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Зашли в конфигурацию под пользователем без разделения (и не вошли в область данных).
		Если ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
			Если РольДоступна(Метаданные.Роли.АдминистраторСистемы)
					И РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
				// Только (АдминистраторСистемы + ПолныеПрава) может работать в неразделенном режиме.
			Иначе
				ЭтотОбъект.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			ЭтотОбъект.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;

	// Форма может открываться на определенной закладке.
	ТекущаяСтраница = Параметры.ТекущаяСтраница;
	НайденнаяСтраница = Элементы.Найти(ТекущаяСтраница);
	Если (НайденнаяСтраница <> Неопределено)
			И (ТипЗнч(НайденнаяСтраница) = Тип("ГруппаФормы")) Тогда
		Если НайденнаяСтраница.Видимость = Ложь Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ЭтотОбъект.ТекущийЭлемент = НайденнаяСтраница;
	КонецЕсли;

	// Заголовок формы можно заменить с помощью передаваемых параметров.
	Если НЕ ПустаяСтрока(Параметры.ЗаголовокФормы) Тогда
		ЭтотОбъект.Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;

	// Загрузить все административные настройки.
	// Пользовательские настройки здесь не настраиваются (НастройкиПоказаНовостей, ОтборыПоЛентамНовостейПользовательские).
	НастройкиПоказаНовостейНастроенныеАдминистратором = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостейНастроенныеАдминистратором");
	ЭтотОбъект.СписокНовостей_ИнтервалАвтообновления = НастройкиПоказаНовостейНастроенныеАдминистратором.СписокНовостей_ИнтервалАвтообновления;

	НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПолученияНовостей",
		,
		,
		""); // Для всех пользователей
	ЭтотОбъект.ВебСервисыТаймаутСоединенияСекунд             = НастройкиПолученияНовостей.ВебСервисыТаймаутСоединенияСекунд;
	ЭтотОбъект.ВебСервисыКоличествоПопытокСоединения         = НастройкиПолученияНовостей.ВебСервисыКоличествоПопытокСоединения;
	ЭтотОбъект.HTTPСоединениеТаймаутСоединенияСекунд         = НастройкиПолученияНовостей.HTTPСоединениеТаймаутСоединенияСекунд;
	ЭтотОбъект.HTTPСоединениеКоличествоПопытокСоединения     = НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокСоединения;
	ЭтотОбъект.HTTPСоединениеКоличествоПопытокПолученияФайла = НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла;

	НастройкиАвтоудаленияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиАвтоудаленияНовостей",
		,
		,
		""); // Для всех пользователей
	ЭтотОбъект.АвтоудалениеНовостей_Актуальные_Месяцев        = НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Актуальные_Месяцев;
	ЭтотОбъект.АвтоудалениеНовостей_Неактуальные_Дней         = НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_Неактуальные_Дней;
	ЭтотОбъект.АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней = НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней;
	ЭтотОбъект.АвтоудалениеНовостей_СтараяВерсия_Дней         = НастройкиАвтоудаленияНовостей.АвтоудалениеНовостей_СтараяВерсия_Дней;
	Если ЭтотОбъект.АвтоудалениеНовостей_Актуальные_Месяцев <= 0 Тогда
		ЭтотОбъект.АвтоудалениеНовостей_Актуальные_Включить = Ложь;
	Иначе
		ЭтотОбъект.АвтоудалениеНовостей_Актуальные_Включить = Истина;
	КонецЕсли;

	НастройкиЖурналаРегистрации = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиЖурналаРегистрации",
		,
		,
		""); // Для всех пользователей
	ЭтотОбъект.ЖурналРегистрации_ПодробнаяЗапись = НастройкиЖурналаРегистрации.ЖурналРегистрации_ПодробнаяЗапись;

	// Справочник Пользователи используется независимо по областям данных, поэтому невозможно настроить пользователям
	//  настройки в модели сервиса в НЕразделенном режиме.
	//  Поэтому, чтобы не делать разные формы, настройки пользователей в модели сервиса НЕ настраиваются.

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда

		Элементы.СтраницаНастройкаПользователей.Видимость = Ложь;

	Иначе

		Элементы.СтраницаНастройкаПользователей.Видимость = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка                                    КАК Пользователь,
			|	Спр.ИдентификаторПользователяИБ               КАК ИдентификаторПользователяИБ,
			|	ЛОЖЬ                                          КАК НайденВ_ИБ,
			|	ЕСТЬNULL(Рег.РазрешенаНастройкаОтборов, ЛОЖЬ) КАК РазрешенаНастройкаОтборов
			|ИЗ
			|	Справочник.Пользователи КАК Спр
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.НастройкиПользователейБИП КАК Рег
			|	ПО
			|		Рег.Пользователь = Спр.Ссылка
			|ГДЕ
			|	Спр.Недействителен    = ЛОЖЬ
			|	И Спр.Служебный       = ЛОЖЬ
			|	И Спр.ПометкаУдаления = ЛОЖЬ
			|";

		Результат = Запрос.Выполнить(); // УправлениеНовостями.ФормаНастроекНовостей.ПриСозданииНаСервере()
		Если НЕ Результат.Пустой() Тогда
			ЭтотОбъект.НастройкиОтборовПользователями.Загрузить(Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой));
			// В справочнике Пользователей могут быть элементы, не привязанные к пользователям, настроенным в конфигураторе.
			// Поэтому необходимо провести дополнительную проверку на наличие такого пользователя в списке пользователей (из конфигуратора).
			УстановитьПривилегированныйРежим(Истина);
				Для Каждого ТекущийПользователь Из ЭтотОбъект.НастройкиОтборовПользователями Цикл
					НайденныйПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
					ТекущийПользователь.НайденВ_ИБ = (НайденныйПользователь <> Неопределено);
				КонецЦикла;
				БылиУдаления = Истина;
				Пока БылиУдаления = Истина Цикл
					БылиУдаления = Ложь;
					Для Каждого ТекущийПользователь Из ЭтотОбъект.НастройкиОтборовПользователями Цикл
						Если ТекущийПользователь.НайденВ_ИБ = Ложь Тогда
							ЭтотОбъект.НастройкиОтборовПользователями.Удалить(ТекущийПользователь);
							БылиУдаления = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;

	КонецЕсли;

	// Журнал регистрации
	ЭтотОбъект.ВозможенЭкспортЖурналаРегистрации = Ложь;
	УстановитьПривилегированныйРежим(Истина);
		МассивУровнейИспользованияЖурналаРегистрации = ПолучитьИспользованиеЖурналаРегистрации();
		Если (МассивУровнейИспользованияЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Ошибка) <> Неопределено)
				И (МассивУровнейИспользованияЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Предупреждение) <> Неопределено)
				И (МассивУровнейИспользованияЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Информация) <> Неопределено)
				И (МассивУровнейИспользованияЖурналаРегистрации.Найти(УровеньЖурналаРегистрации.Примечание) <> Неопределено) Тогда
			ЭтотОбъект.ВозможенЭкспортЖурналаРегистрации = Истина;
		КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);

	ЭтотОбъект.РазрешенаРаботаСНовостями = Константы.РазрешенаРаботаСНовостями.Получить();
	ЭтотОбъект.РазрешенаРаботаСНовостямиЧерезИнтернет = Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Получить();

	ЭтотОбъект.ЦветИнформацияОшибочна = ЦветаСтиля.ЦветИнформацияОшибочна;
	ЭтотОбъект.ЦветМикротекста        = ЦветаСтиля.ЦветМикротекста;

	Если РольДоступна(Метаданные.Роли.АдминистраторСистемы)
			ИЛИ РольДоступна(Метаданные.Роли.ПолныеПрава)Тогда
		Элементы.ЛентыНовостейКонтекстноеМенюКомандаОткрытьФормуСпискаЛентНовостей.Видимость = Истина;
	Иначе
		Элементы.ЛентыНовостейКонтекстноеМенюКомандаОткрытьФормуСпискаЛентНовостей.Видимость = Ложь;
	КонецЕсли;

	УстановитьУсловноеОформление();

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы = Истина Тогда
		// Запрещены серверные вызовы и открытие форм.
		Если ЭтотОбъект.Модифицированность Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Данные не сохранены.
				|Нажмите кнопку [Записать и закрыть]
				|или закройте окно вручную, до выхода из программы.'");
		КонецЕсли;
	Иначе
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы = Истина Тогда
		// Запрещены серверные вызовы и открытие форм.
		// В таком исключительном случае, когда выходят из программы,
		//  можно проигнорировать установку признака прочтенности у новостей.
	Иначе
		Если ЭтотОбъект.Модифицированность Тогда
			ЗаписатьВсеНастройкиСервер();
			// Переподключить обработчики обновления новостей.
			ОбработкаНовостейКлиент.ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Новости. Очищена дата последней загрузки новостей" Тогда
		Элементы.ЛентыНовостей.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" Тогда // Из обработки ПанельАдминистрированияБИП
		Если Источник = "РазрешенаРаботаСНовостями" Тогда
			// Вне зависимости от текущего значения константы, просто закрыть форму.
			ЭтотОбъект.Модифицированность = Ложь;
			ЭтотОбъект.Закрыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокНовостей_ИнтервалАвтообновленияПриИзменении(Элемент)

	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВебСервисыТаймаутСоединенияСекундПриИзменении(Элемент)

	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВебСервисыКоличествоПопытокСоединенияПриИзменении(Элемент)

	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура HTTPСоединениеТаймаутСоединенияСекундПриИзменении(Элемент)

	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура HTTPСоединениеКоличествоПопытокСоединенияПриИзменении(Элемент)

	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура HTTPСоединениеКоличествоПопытокПолученияФайлаПриИзменении(Элемент)

	ЭтотОбъект.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЖурналРегистрации_ПодробнаяЗаписьПриИзменении(Элемент)

	ЭтотОбъект.Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура РазрешенаРаботаСНовостямиЧерезИнтернетПриИзменении(Элемент)

	ЭтотОбъект.Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУдалитьНовостиОбработкаНавигационнойСсылки(Элемент, лкНавигационнаяСсылка, СтандартнаяОбработка)

	Если ВРег(лкНавигационнаяСсылка) = ВРег("DeleteNow") Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеОтветаУдалениеНовостей", ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещенияОЗакрытии,
			НСтр("ru='Удалить устаревшие новости?'"),
			РежимДиалогаВопрос.ДаНет,
			0,
			КодВозвратаДиалога.Нет,
			НСтр("ru='Удаление устаревших новостей вручную'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвтоудалениеНовостей_Актуальные_ВключитьПриИзменении(Элемент)

	Если ЭтотОбъект.АвтоудалениеНовостей_Актуальные_Включить = Ложь Тогда
		ЭтотОбъект.АвтоудалениеНовостей_Актуальные_Месяцев = 0;
	КонецЕсли;

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокОбновляемыхКатегорий

&НаКлиенте
Процедура СписокОбновляемыхКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	// В форме записи можно нажать кнопку "Скопировать" и начать редактировать запись.
	// Чтобы поле было только "для чтения" - запретить открывать форму записи.
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.СписокОбновляемыхДанных.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ВРег(ТекущиеДанные.Список) = ВРег("Список лент новостей") Тогда // Идентификатор.
			// Перейти на закладку лент новостей.
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройкиЛентНовостей;
		ИначеЕсли ВРег(ТекущиеДанные.Список) = ВРег("Список категорий новостей") Тогда // Идентификатор.
			// Открыть форму списка категорий.
			ОткрытьФорму(
				"ПланВидовХарактеристик.КатегорииНовостей.ФормаСписка",
				Новый Структура("ОткрытаИзОбработки_УправлениеНовостями", Истина),
				ЭтотОбъект,
				"");
		ИначеЕсли ВРег(ТекущиеДанные.ТипСписка) = ВРег("Список значений классификатора") Тогда // Идентификатор.
			// Открыть форму объекта категории.
			ОткрытьФорму(
				"ПланВидовХарактеристик.КатегорииНовостей.ФормаОбъекта",
				Новый Структура("Ключ, ОткрытаИзОбработки_УправлениеНовостями",
					ТекущиеДанные.Список,
					Истина),
				ЭтотОбъект,
				"");
		Иначе
			// Ничего не делать.
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЛентыНовостей

&НаКлиенте
Процедура ЛентыНовостейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если НЕ Элемент.ТекущиеДанные.Ссылка.Пустая() Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(
				"Справочник.ЛентыНовостей.ФормаОбъекта",
				Новый Структура("Ключ, ОткрытаИзОбработки_УправлениеНовостями",
					Элемент.ТекущиеДанные.Ссылка,
					Истина),
				ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_НастройкиОтборовПользователями

&НаКлиенте
Процедура НастройкиОтборовПользователямиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "НастройкиОтборовПользователямиПользователь" Тогда
		КомандаНастройкиПользователя(Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНастройкиПрокси(Команда)

	// Открыть форму БСП.
	ОткрытьФорму(
		"ОбщаяФорма.ПараметрыПроксиСервера",
		Новый Структура("НастройкаПроксиНаКлиенте",
			Ложь), // Хранить параметры прокси на сервере, т.к. ими будут пользоваться регламентные задания
		ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьНовости(Команда)

	ФормаСостоянияОперации = ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма.ФормаСостоянияОперации",
		Новый Структура("Заголовок, СостояниеОперации", 
			НСтр("ru='Загрузка новостей'"),
			НСтр("ru='Происходит загрузка новостей
				|Это может занять некоторое время...'")),
		ЭтотОбъект,
		"Загрузка новостей");
	ИдентификаторФормыСостоянияОперации = ФормаСостоянияОперации.УникальныйИдентификатор;

	МассивВыделенныхЛентНовостей = Новый Массив;
	Если Команда.Имя = "КомандаЗагрузитьНовостиПоВсемЛентамНовостей" Тогда
	ИначеЕсли Команда.Имя = "КомандаЗагрузитьНовостиПоВыделеннымЛентамНовостей" Тогда
		Для каждого ТекущаяСтрока Из Элементы.ЛентыНовостей.ВыделенныеСтроки Цикл
			МассивВыделенныхЛентНовостей.Добавить(Элементы.ЛентыНовостей.ДанныеСтроки(ТекущаяСтрока).Ссылка);
		КонецЦикла;
	КонецЕсли;

	Если ЭтотОбъект.Модифицированность Тогда
		ЗаписатьВсеНастройкиСервер(); // Это необходимо, если была изменена пометка разрешения получения новостей через интернет.
	КонецЕсли;

	ОбработкаНовостейВызовСервера.ПолучитьИОбработатьНовостиПоЛентамНовостей(МассивВыделенныхЛентНовостей);
	Элементы.ЛентыНовостей.Обновить();

	Оповестить(
		"Новости. Операция завершена",
		,
		ИдентификаторФормыСостоянияОперации);

	Оповестить(
		"Новости. Загружены новости",
		,
		ЭтотОбъект.УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьСтандартныеСписки(Команда)

	// Открыть форму состояния операции.
	ФормаСостоянияОперации = ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма.ФормаСостоянияОперации",
		Новый Структура("Заголовок, СостояниеОперации", 
			НСтр("ru='Обновление классификаторов с сервера'"),
			НСтр("ru='Происходит обновление классификаторов с сервера
				|Это может занять некоторое время...'")),
		ЭтотОбъект,
		"Загрузка стандартных классификаторов");
	ИдентификаторФормыСостоянияОперации = ФормаСостоянияОперации.УникальныйИдентификатор;

	// 1. Если администратор вручную решил загрузить стандартные списки, значит надо обновить даты актуальности с сервера.
	// При получении новостей срабатывает стандартное получение дат актуальности и обновление списков.
	Оповестить(
		"Новости. Изменился статус операции",
		НСтр("ru='Происходит обновление классификаторов с сервера
			|Это может занять некоторое время...
			|
			|Обновление дат актуальности классификаторов'"),
		ИдентификаторФормыСостоянияОперации);
	ОбновитьДатыАктуальностиСтандартныхСписков();

	// 2. Эта форма сама определяет, какие Справочники необходимо обновить - по регистру сведений, заполненному на шаге 1.
	Оповестить(
		"Новости. Изменился статус операции",
		НСтр("ru='Происходит обновление классификаторов с сервера
			|Это может занять некоторое время...
			|
			|Обновление классификаторов'"),
		ИдентификаторФормыСостоянияОперации);
	Результат = ОбновитьВсеСтандартныеСпискиССервераСервер();

	// 3. Перерисовать списки - классификаторы и ленты новостей.
	Оповестить(
		"Новости. Изменился статус операции",
		НСтр("ru='Происходит обновление классификаторов с сервера
			|Это может занять некоторое время...
			|
			|Данные получены.
			|Обновление классификаторов на клиенте...'"),
		ИдентификаторФормыСостоянияОперации);
	Элементы.СписокОбновляемыхДанных.Обновить();
	Оповестить(
		"Новости. Изменился статус операции",
		НСтр("ru='Происходит обновление классификаторов с сервера
			|Это может занять некоторое время...
			|
			|Данные получены.
			|Обновление лент новостей на клиенте...'"),
		ИдентификаторФормыСостоянияОперации);
	Элементы.ЛентыНовостей.Обновить();

	// Закрыть форму состояния операции.
	Оповестить(
		"Новости. Операция завершена",
		,
		ИдентификаторФормыСостоянияОперации);

КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаОтборовПользователями(Команда)

	Для каждого ТекущаяСтрока Из ЭтотОбъект.НастройкиОтборовПользователями Цикл
		Если Команда.Имя = "КомандаНастройкаОтборовПользователями_ВключитьВсе" Тогда
			ТекущаяСтрока.РазрешенаНастройкаОтборов = Истина;
		ИначеЕсли Команда.Имя = "КомандаНастройкаОтборовПользователями_ВыключитьВсе" Тогда
			ТекущаяСтрока.РазрешенаНастройкаОтборов = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиПользователя(Команда)

	Если Элементы.НастройкиОтборовПользователями.ТекущиеДанные <> Неопределено Тогда
		Если ЭтотОбъект.Модифицированность Тогда
			ЗаписатьВсеНастройкиСервер(); // Это необходимо, если была изменена пометка разрешения настройки отборов у пользователя.
		КонецЕсли;
		ОткрытьФорму(
			"ХранилищеНастроек.НастройкиНовостей.Форма.ФормаНастройкиПоказаНовостей",
			Новый Структура("ТекущийПользователь, ОткрытаИзОбработки_УправлениеНовостями",
				Элементы.НастройкиОтборовПользователями.ТекущиеДанные.Пользователь,
				Истина),
			ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьДатуЗагрузкиКлассификатора(Команда)

	ТекущиеДанные = Элементы.СписокОбновляемыхДанных.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		МассивВыделенныхКлассификаторов = Новый Массив;
		Для Каждого ТекущаяВыделеннаяСтрока Из Элементы.СписокОбновляемыхДанных.ВыделенныеСтроки Цикл
			МассивВыделенныхКлассификаторов.Добавить(Элементы.СписокОбновляемыхДанных.ДанныеСтроки(ТекущаяВыделеннаяСтрока).Список);
		КонецЦикла;

		ОбработкаНовостейВызовСервера.СбросДатыПоследнейУспешнойЗагрузкиКлассификатора(МассивВыделенныхКлассификаторов);

		// Обновлять формы элементов, только если выделена одна строка.
		Если МассивВыделенныхКлассификаторов.Количество() = 1 Тогда
			Оповестить(
				"Новости. Очищена дата последней загрузки классификатора",
				,
				ТекущиеДанные.Список);
		КонецЕсли;
		Элементы.СписокОбновляемыхДанных.Обновить();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьДатуЗагрузкиНовостей(Команда)

	ТекущиеДанные = Элементы.ЛентыНовостей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		Если Команда.Имя = "КомандаСброситьДатуЗагрузкиНовостей"
				ИЛИ Команда.Имя = "КомандаСброситьДатуЗагрузкиНовостейИУдалитьНовости" Тогда

			МассивВыделенныхЛентНовостей = Новый Массив;
			Для Каждого ТекущаяВыделеннаяСтрока Из Элементы.ЛентыНовостей.ВыделенныеСтроки Цикл
				МассивВыделенныхЛентНовостей.Добавить(ТекущаяВыделеннаяСтрока);
			КонецЦикла;

			Если Команда.Имя = "КомандаСброситьДатуЗагрузкиНовостей" Тогда
				ОбработкаНовостейВызовСервера.СбросДатыПоследнейУспешнойЗагрузкиНовостей(МассивВыделенныхЛентНовостей, Ложь);
			ИначеЕсли Команда.Имя = "КомандаСброситьДатуЗагрузкиНовостейИУдалитьНовости" Тогда
				ОбработкаНовостейВызовСервера.СбросДатыПоследнейУспешнойЗагрузкиНовостей(МассивВыделенныхЛентНовостей, Истина);
			КонецЕсли;

			// Обновлять формы элементов, только если выделена одна строка.
			Если МассивВыделенныхЛентНовостей.Количество() = 1 Тогда
				Оповестить(
					"Новости. Очищена дата последней загрузки новостей",
					,
					ТекущиеДанные.Ссылка);
			Иначе
				Элементы.ЛентыНовостей.Обновить();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуСпискаЛентНовостей(Команда)

	ОткрытьФорму(
		"Справочник.ЛентыНовостей.ФормаСписка",
		Новый Структура("ОткрытаИзОбработки_УправлениеНовостями", Истина),
		ЭтотОбъект,
		"",
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)

	Если ЭтотОбъект.Модифицированность Тогда
		ЗаписатьВсеНастройкиСервер();
		// Переподключить обработчики обновления новостей.
		ОбработкаНовостейКлиент.ПодключитьОбработчикОповещенияОВажныхИОченьВажныхНовостях();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЭкспортироватьЖурналРегистрации(Команда)

	ПараметрыОткрытия = Новый Структура;
	ОткрытьФорму(
		"Обработка.УправлениеНовостями.Форма.ФормаЭкспортаЖурналаРегистрации",
		ПараметрыОткрытия,
		ЭтотОбъект,
		"",
		ВариантОткрытияОкна.ОтдельноеОкно,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьОтладочнуюИнформациюОНовости(Команда)

	Если НЕ ПустаяСтрока(ЭтотОбъект.УИННовости) Тогда

		ИнформацияОНовости = ОбработкаНовостейВызовСервера.ПолучитьИнформациюОНовости(ЭтотОбъект.УИННовости);

		#Если ВебКлиент Тогда

			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ИнформацияОНовости);
			ТекстовыйДокумент.Показать(НСтр("ru='Отладочная информация о новости'"));

		#Иначе

			// Если задать имя файла сразу, то пользователю будет удобнее сохранять.
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.УстановитьТекст(ИнформацияОНовости);
			ТекстовыйДокумент.Показать(НСтр("ru='Отладочная информация о новости'"), ИмяВременногоФайла);

		#КонецЕсли

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаДиагностикаПолученияНовостей(Команда)

	СписокШагов = Новый СписокЗначений;
	СписокШагов.Добавить(1, "Настройки программы: значения констант", Истина); // Идентификатор.
	СписокШагов.Добавить(2, "Настройки программы: значения предопределенных категорий", Истина); // Идентификатор.
	СписокШагов.Добавить(3, "Настройки программы: заполненность объектов метаданных", Истина); // Идентификатор.
	СписокШагов.Добавить(4, "Настройки программы: фильтры", Истина); // Идентификатор.
	СписокШагов.Добавить(5, "Настройки программы: правильность внедрения подсистемы", Истина); // Идентификатор.
	СписокШагов.Добавить(6, "Настройки программы: параметры сеанса", Истина); // Идентификатор.
	СписокШагов.Добавить(7, "Настройки программы: данные о конфигурации из метаданных", Истина); // Идентификатор.
	СписокШагов.Добавить(8, "Настройки программы: список важных и очень важных новостей", Истина); // Идентификатор.
	СписокШагов.Добавить(9, "Проверка подключения: доступ к HTTP соединению", Истина); // Идентификатор.
	СписокШагов.Добавить(10, "Проверка окружения: размер свободного места во временном каталоге", Истина); // Идентификатор.
	СписокШагов.Добавить(11, "Проверка открытых форм: контекстные новости и настройки", Ложь); // Идентификатор.

	// MarkdownPad:
	// # - заголовок первого уровня;
	// ## - заголовок второго уровня;
	// ###### - заголовок шестого уровня;
	// *Текст* - текст курсивом;
	// **Текст** - текст жирный;
	// строка, начинающаяся с Tab - равноширинный текст, код;
	// ---------- - горизонтальный разделитель.

	РезультатДиагностикиПолученияНовостей = СтрШаблон(
		НСтр("ru='
			|# ПРОВЕРКА ПОЛУЧЕНИЯ НОВОСТЕЙ
			|
			|Дата отчета: **%1**
			|
			|'"),
		Формат(ОбщегоНазначенияКлиент.ДатаУниверсальная(), "ДЛФ=DT") + " (GMT)");

	Для Каждого ТекущийШаг Из СписокШагов Цикл
		Состояние(
			НСтр("ru='Выполнение проверки'"),
			ТекущийШаг.Значение / СписокШагов.Количество() * 100,
			ТекущийШаг.Представление);
		Если ТекущийШаг.Пометка = Истина Тогда // На сервере
			РезультатПроверкиШага = ВыполнитьШагПроверкиНаСервере(ТекущийШаг.Значение);
		Иначе // Проверка на клиенте
			РезультатПроверкиШага = ВыполнитьШагПроверкиНаКлиенте(ТекущийШаг.Значение);
		КонецЕсли;
		РезультатДиагностикиПолученияНовостей = РезультатДиагностикиПолученияНовостей + СтрШаблон(
			НСтр("ru='----------
				|## %1
				|%2
				|
				|'"),
			ВРег(ТекущийШаг.Представление),
			РезультатПроверкиШага);
	КонецЦикла;

	#Если ВебКлиент Тогда

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(РезультатДиагностикиПолученияНовостей);
		ТекстовыйДокумент.Показать(НСтр("ru='Результат диагностики получения новостей'"));

	#Иначе

		// Если задать имя файла сразу, то пользователю будет удобнее сохранять.
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(РезультатДиагностикиПолученияНовостей);
		ТекстовыйДокумент.Показать(НСтр("ru='Результат диагностики получения новостей'"), ИмяВременногоФайла);

	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Управляет видимостью и доступностью элементов управления.
//
// Параметры:
//  Форма  - Управляемая форма - форма, в которой необходимо установить видимость / доступность.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	лкРазрешенаРаботаСНовостямиЧерезИнтернет = Форма.РазрешенаРаботаСНовостямиЧерезИнтернет;

	Элементы.ГруппаНастройкиПрокси.Доступность                                    = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ГруппаОбновлениеОбщихСписков.Доступность                             = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ГруппаПолучениеНовостей.Доступность                                  = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.КомандаЗагрузитьСтандартныеСписки.Доступность                        = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.КонтекстноеМенюКомандаСброситьДатуЗагрузкиКлассификатора.Доступность = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейГруппаПолучитьНовости.Видимость                         = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКонтекстноеМенюПолучитьНовости.Видимость                = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКонтекстноеМенюГруппаСбросДаты.Видимость                = лкРазрешенаРаботаСНовостямиЧерезИнтернет;

	Элементы.ЛентыНовостейКонтекстноеМенюКомандаЗагрузитьНовостиПоВсемЛентамНовостей.Видимость       = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКомандаЗагрузитьНовостиПоВсемЛентамНовостей.Видимость                      = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКонтекстноеМенюКомандаЗагрузитьНовостиПоВыделеннымЛентамНовостей.Видимость = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ЛентыНовостейКомандаЗагрузитьНовостиПоВыделеннымЛентамНовостей.Видимость                = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.КомандаЗагрузитьСтандартныеСписки.Видимость                                             = лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.КонтекстноеМенюКомандаСброситьДатуЗагрузкиКлассификатора.Видимость                      = лкРазрешенаРаботаСНовостямиЧерезИнтернет;

	Элементы.ДекорацияРежимРаботыСНовостямиЧерезИнтернет_ОбновлениеКлассификаторов.Видимость = НЕ лкРазрешенаРаботаСНовостямиЧерезИнтернет;
	Элементы.ДекорацияРежимРаботыСНовостямиЧерезИнтернет_ЛентыНовостей.Видимость             = НЕ лкРазрешенаРаботаСНовостямиЧерезИнтернет;

	Элементы.АвтоудалениеНовостей_Актуальные_Месяцев.Доступность          = Форма.АвтоудалениеНовостей_Актуальные_Включить;
	Элементы.ДекорацияАвтоудалениеНовостей_Актуальные_Месяцев.Доступность = Форма.АвтоудалениеНовостей_Актуальные_Включить;

	Если Форма.АвтоудалениеНовостей_Актуальные_Включить = Истина Тогда
		Элементы.ДекорацияАвтоудалениеНовостей_Актуальные_Включить.ЦветТекста = Форма.ЦветИнформацияОшибочна;
	Иначе
		Элементы.ДекорацияАвтоудалениеНовостей_Актуальные_Включить.ЦветТекста = Форма.ЦветМикротекста;
	КонецЕсли;

	Элементы.КомандаЭкспортироватьЖурналРегистрации.Доступность = Форма.ВозможенЭкспортЖурналаРегистрации И Форма.ЖурналРегистрации_ПодробнаяЗапись;
	Если Элементы.КомандаЭкспортироватьЖурналРегистрации.Доступность Тогда
		Элементы.КомандаЭкспортироватьЖурналРегистрации.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы.КомандаЭкспортироватьЖурналРегистрации.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
// Процедура заполняет данными из веб-сервиса регистр сведений ДатыОбновленияСтандартныхСписковНовостей.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьДатыАктуальностиСтандартныхСписков()

	Обработки.УправлениеНовостями.ОбновитьСписокСправочниковИВерсииССервера();

КонецПроцедуры

&НаСервереБезКонтекста
// Функция обновляет все стандартные списки с сервера. Возвращает Истина, если данные были успешно обновлены.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Булево.
//
Функция ОбновитьВсеСтандартныеСпискиССервераСервер()

	Результат = Обработки.УправлениеНовостями.ОбновитьВсеСтандартныеСпискиССервера();

	// Записать в регистр сведений ВсеОбновленияНовостей дату последней успешной загрузки.
	// Если ручная попытка получения классификаторов была не успешна, то не сдвигать время в регистре сведений ВсеОбновленияНовостей.
	Если Результат = Истина Тогда // Успешно
		ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();
		// Сохранить дату последнего выполнения / обновления.
		Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
		Запись.ВидОбновления = "Обновление классификаторов";
		Запись.ЛентаНовостей = Справочники.ЛентыНовостей.ПустаяСсылка();
		Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
		Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 24*60*60;
		Запись.Записать(Истина);
	Иначе // Неудача
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
// Процедура сохраняет все настройки.
//
// Параметры:
//  Нет.
//
Процедура ЗаписатьВсеНастройкиСервер()

	НастройкиПоказаНовостейНастроенныеАдминистратором = Новый Структура("СписокНовостей_ИнтервалАвтообновления");
	ЗаполнитьЗначенияСвойств(НастройкиПоказаНовостейНастроенныеАдминистратором, ЭтотОбъект);
	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиПоказаНовостейНастроенныеАдминистратором",
		,
		НастройкиПоказаНовостейНастроенныеАдминистратором,
		,
		""); // Для всех пользователей

	НастройкиПолученияНовостей = Новый Структура("ВебСервисыТаймаутСоединенияСекунд, ВебСервисыКоличествоПопытокСоединения,
			|HTTPСоединениеТаймаутСоединенияСекунд, HTTPСоединениеКоличествоПопытокСоединения, HTTPСоединениеКоличествоПопытокПолученияФайла");
	ЗаполнитьЗначенияСвойств(НастройкиПолученияНовостей, ЭтотОбъект);
	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиПолученияНовостей",
		,
		НастройкиПолученияНовостей,
		,
		""); // Для всех пользователей

	НастройкиАвтоудаленияНовостей = Новый Структура("АвтоудалениеНовостей_Актуальные_Месяцев, АвтоудалениеНовостей_Неактуальные_Дней,
			|АвтоудалениеНовостей_ПомеченныеНаУдаление_Дней, АвтоудалениеНовостей_СтараяВерсия_Дней");
	ЗаполнитьЗначенияСвойств(НастройкиАвтоудаленияНовостей, ЭтотОбъект);
	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиАвтоудаленияНовостей",
		,
		НастройкиАвтоудаленияНовостей,
		,
		""); // Для всех пользователей

	НастройкиЖурналаРегистрации = Новый Структура("ЖурналРегистрации_ПодробнаяЗапись");
	ЗаполнитьЗначенияСвойств(НастройкиЖурналаРегистрации, ЭтотОбъект);
	ХранилищаНастроек.НастройкиНовостей.Сохранить(
		"НастройкиЖурналаРегистрации",
		,
		НастройкиЖурналаРегистрации,
		,
		""); // Для всех пользователей

	Для каждого ТекущаяСтрока Из ЭтотОбъект.НастройкиОтборовПользователями Цикл
		Запись = РегистрыСведений.НастройкиПользователейБИП.СоздатьМенеджерЗаписи();
		Запись.Пользователь              = ТекущаяСтрока.Пользователь;
		Запись.Прочитать(); // Запись будет ниже. // Чтобы не сбросить другие настройки
		Запись.Пользователь              = ТекущаяСтрока.Пользователь;
		Запись.РазрешенаНастройкаОтборов = ТекущаяСтрока.РазрешенаНастройкаОтборов;
		Запись.Записать(Истина);
	КонецЦикла;

	Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(ЭтотОбъект.РазрешенаРаботаСНовостямиЧерезИнтернет);
	ОбновитьПовторноИспользуемыеЗначения();

	ЭтотОбъект.Модифицированность = Ложь;

КонецПроцедуры

// Процедура устанавливает условное оформление в форме.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// 1. Частота обновления = 0 (обновлять вручную), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Обновлять только вручную'"));

		// Использование
		Элемент.Использование = Истина;

	// 2. Частота обновления = 1 (Ежедневно), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 1;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Ежедневно'"));

		// Использование
		Элемент.Использование = Истина;

	// 3. Частота обновления = 2 (Ежечасно), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 2;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Ежечасно'"));

		// Использование
		Элемент.Использование = Истина;

	// 4. Частота обновления = 3 (Каждые 15 минут), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 3;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Каждые 15 минут'"));

		// Использование
		Элемент.Использование = Истина;

	// 5. Частота обновления = 4 (Каждую минуту), и это НЕ локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЧастотаОбновления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 4;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Каждую минуту'"));

		// Использование
		Элемент.Использование = Истина;

	// 6. Частота обновления = не требуется, т.к. это локальная лента новостей.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейЧастотаОбновления.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется'"));

		// Использование
		Элемент.Использование = Истина;

	// 7. Дата последнего обновления = пустая, то вывести текст "никогда не обновлялся".
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбновляемыхДанныхТекущаяВерсияНаКлиенте.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбновляемыхДанных.ТекущаяВерсияНаКлиенте");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = '00010101';

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='никогда не обновлялся'"));

		// Использование
		Элемент.Использование = Истина;

	// 8. Запрещена работа через интернет - выделить красным НЕлокальные ленты новостей с протоколом http*.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейИмяФайла.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейПротокол.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейСайт.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейНаименование.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенаРаботаСНовостямиЧерезИнтернет");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.Протокол");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = "file";

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.ЛентыНовостей.Шрифт, , , Истина)); // Жирный

		// Использование
		Элемент.Использование = Истина;

	// 9. Убрать колонку "ЛентыНовостейОбновлениеОтключено" если лента локальная, или включено обновление через интернет, или протокол file.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейОбновлениеОтключено.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазрешенаРаботаСНовостямиЧерезИнтернет");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.Протокол");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "file";

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

		// Использование
		Элемент.Использование = Истина;

	// 10. Убрать колонку "СписокОбновляемыхДанныхТипСписка" если не заполнен СписокОбновляемыхДанных.ТипСписка.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбновляемыхДанныхТипСписка.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбновляемыхДанных.ТипСписка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

		// Использование
		Элемент.Использование = Истина;

	// 11. Убрать колонки "ЛентыНовостейПротокол", "ЛентыНовостейСайт", "ЛентыНовостейИмяФайла" если лента новостей - локальная.
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейИмяФайла.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейПротокол.Имя);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЛентыНовостейСайт.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛентыНовостей.ЛокальнаяЛентаНовостей");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

		// Использование
		Элемент.Использование = Истина;

	// 12. "Требуется обновление" - красным, "Данные актуальны", "Данные не требуют обновления" - серым;
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбновляемыхДанныхТребуетсяОбновление.Имя);

		// Отбор
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяОбновление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = НСтр("ru='Данные актуальны'");

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяОбновление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = НСтр("ru='Данные не требуют обновления'");

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветМикротекста);

		// Использование
		Элемент.Использование = Истина;

	// 13. "Требуется обновление" - красным, "Данные актуальны", "Данные не требуют обновления" - серым;
		Элемент = УсловноеОформление.Элементы.Добавить();

		// Оформляемые поля
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбновляемыхДанныхТребуетсяОбновление.Имя);

		// Отбор
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТребуетсяОбновление");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = НСтр("ru='Требуется обновление'");

		// Оформление
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);

		// Использование
		Элемент.Использование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаУдалениеНовостей(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РезультатВыполнения = "";
		ОбработкаНовостейВызовСервера.УдалитьНовости_Ежедневно(РезультатВыполнения);
		ТекстСообщения = НСтр("ru='Результат выполнения:
			|%РезультатВыполнения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатВыполнения%", РезультатВыполнения);
		Элементы.ДекорацияУдалитьНовости_РезультатВыполнения.Заголовок = ТекстСообщения;
	КонецЕсли;

КонецПроцедуры

#Область ДиагностикаПолученияНовостей

&НаКлиенте
Функция ВыполнитьШагПроверкиНаКлиенте(Шаг)

	Результат = "";

	Если Шаг = 11 Тогда
		Результат = ВыполнитьШагПроверки_НастройкиОткрытыхФорм();
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверкиНаСервере(Шаг)

	Результат = "";

	Если Шаг = 1 Тогда
		Результат = ВыполнитьШагПроверки_ЗначенияКонстант();
	ИначеЕсли Шаг = 2 Тогда
		Результат = ВыполнитьШагПроверки_ЗначенияПредопределенныхКатегорий();
	ИначеЕсли Шаг = 3 Тогда
		Результат = ВыполнитьШагПроверки_ЗаполненностьОбъектовМетаданных();
	ИначеЕсли Шаг = 4 Тогда
		Результат = ВыполнитьШагПроверки_НастроенныеОтборы();
	ИначеЕсли Шаг = 5 Тогда
		Результат = ОбработкаНовостей.ПроверитьПравильностьВнедренияПодсистемы();
		Если ПустаяСтрока(Результат) Тогда
			Результат = Символы.Таб + НСтр("ru='Подсистема Новости внедрена правильно
				|'");
		КонецЕсли;
	ИначеЕсли Шаг = 6 Тогда
		Результат = ВыполнитьШагПроверки_ПараметрыСеанса();
	ИначеЕсли Шаг = 7 Тогда
		Результат = ВыполнитьШагПроверки_ДанныеОКонфигурацииИзМетаданных();
	ИначеЕсли Шаг = 8 Тогда
		Результат = ВыполнитьШагПроверки_СписокВажныхИОченьВажныхНовостей();
	ИначеЕсли Шаг = 9 Тогда
		Результат = ВыполнитьШагПроверки_ПроверкаХТТПСоединения();
	ИначеЕсли Шаг = 10 Тогда
		Результат = ВыполнитьШагПроверки_ПроверкаСвободногоМестаВоВременномКаталоге();
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_ЗначенияКонстант()

	ТипСтруктура = Тип("Структура");

	Результат = "";

	НастройкиНовостей = Константы.НастройкиНовостей.Получить().Получить();
	Если ТипЗнч(НастройкиНовостей) = ТипСтруктура Тогда
		ПредставлениеНастройкиНовостей = ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(НастройкиНовостей, "=", Символы.ПС);
	Иначе
		ПредставлениеНастройкиНовостей = СтрШаблон(НСтр("ru='Настройки новостей необрабатываемого типа %1'"), ТипЗнч(НастройкиНовостей));
	КонецЕсли;

	Результат = СтрШаблон(
		НСтр("ru='Константа.НастройкиНовостей:
			|%1
			|РазрешенаРаботаСНовостями: %2
			|РазрешенаРаботаСНовостямиЧерезИнтернет: %3'"),
		ПредставлениеНастройкиНовостей,
		Константы.РазрешенаРаботаСНовостями.Получить(),
		Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Получить());

	Результат = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Результат, Символы.Таб, Истина, Ложь);

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_ЗначенияПредопределенныхКатегорий()

	Результат = СтрШаблон(
		НСтр("ru='PlatformVersion = %1
			|ProductVersion = %2
			|Product = %3
			|ВерсияПлатформы = %4
			|ВерсияПродукта = %5
			|ProductName = %6
			|ЭтотПродукт = %7
			|МетаданныеИмя = %8
			|МетаданныеВерсия = %9
			|'"),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("PlatformVersion"), Символы.ПС),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductVersion"), Символы.ПС),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(
			ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("Product"), Символы.ПС),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПродукта"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ProductName"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ЭтотПродукт"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"),
		ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"));

	Результат = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Результат, Символы.Таб, Истина, Ложь);

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_ЗаполненностьОбъектовМетаданных()

	Результат = "";

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	ПВХ.Код,
		|	ПВХ.Наименование
		|ИЗ
		|	ПланВидовХарактеристик.КатегорииНовостей КАК ПВХ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Спр.Код,
		|	Спр.Наименование
		|ИЗ
		|	Справочник.ЗначенияКатегорийНовостей КАК Спр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Спр.Код,
		|	Спр.Наименование,
		|	Спр.Ссылка,
		|	Спр.Протокол,
		|	Спр.Сайт,
		|	Спр.ИмяФайла
		|ИЗ
		|	Справочник.ЛентыНовостей КАК Спр
		|";

	РезультатЗапроса = Запрос.ВыполнитьПакет();

	Результат = Результат
		+ "  " + НСтр("ru='Категории новостей (первые 20 значений):
		|'");
	Если НЕ РезультатЗапроса[0].Пустой() Тогда
		Выборка = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат = Результат + "    " + Выборка.Код + ", " + Выборка.Наименование + Символы.ПС;
		КонецЦикла;
	Иначе
		Результат = Результат
			+ "    " + НСтр("ru='Нет данных
			|'");
	КонецЕсли;

	Результат = Результат + Символы.ПС;

	Результат = Результат + "  " + НСтр("ru='Значения категорий новостей (первые 20 значений):
		|'");
	Если НЕ РезультатЗапроса[1].Пустой() Тогда
		Выборка = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат = Результат + "    " + Выборка.Код + ", " + Выборка.Наименование + Символы.ПС;
		КонецЦикла;
	Иначе
		Результат = Результат + "    " + НСтр("ru='Нет данных
			|'");
	КонецЕсли;

	Результат = Результат + Символы.ПС;

	Результат = Результат + "  " + НСтр("ru='Ленты новостей (первые 20 значений):
		|'");
	Если НЕ РезультатЗапроса[2].Пустой() Тогда
		Выборка = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Результат = Результат + "    "
				+ Выборка.Код + ", " + Выборка.Наименование + ", "
				+ СформироватьПолныйАдресЛентыНовостей(Выборка.Ссылка, Выборка.Протокол, Выборка.Сайт, Выборка.ИмяФайла)
				+ Символы.ПС;
		КонецЦикла;
	Иначе
		Результат = Результат + "    " + НСтр("ru='Нет данных
			|'");
	КонецЕсли;

	Результат = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Результат, Символы.Таб, Истина, Ложь);

	Результат = Результат + Символы.ПС;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_НастроенныеОтборы()

	Результат = "";

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 40
		|	Рег.ЛентаНовостей             КАК ЛентаНовостей,
		|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
		|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛентаНовостей,
		|	КатегорияНовостей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 40
		|	Рег.Пользователь              КАК Пользователь,
		|	Рег.ЛентаНовостей             КАК ЛентаНовостей,
		|	Рег.КатегорияНовостей         КАК КатегорияНовостей,
		|	Рег.ЗначениеКатегорииНовостей КАК ЗначениеКатегорииНовостей
		|ИЗ
		|	РегистрСведений.ОтборыПоЛентамНовостейПользовательские КАК Рег
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь,
		|	ЛентаНовостей,
		|	КатегорияНовостей,
		|	ЗначениеКатегорииНовостей
		|";

	РезультатЗапроса = Запрос.ВыполнитьПакет();

#Область АдминистративныеОтборы

	Список = "";
	Если НЕ РезультатЗапроса[0].Пустой() Тогда
		Выборка = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
			Список = Список + "    " + Выборка.ЛентаНовостей + ":";
			Пока Выборка.Следующий() Цикл
				Список = Список + "      " + Выборка.КатегорияНовостей + " = " + Выборка.ЗначениеКатегорииНовостей;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Список = Список
			+ "    " + НСтр("ru='Нет данных
			|'");
	КонецЕсли;

	Список = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Список, Символы.Таб, Истина, Ложь);

	Результат = Результат
		+ "###" + НСтр("ru='Отборы, настроенные администратором (первые 40 значений):
		|'")
		+ Список
		+ Символы.ПС;

#КонецОбласти

#Область ПользовательскиеОтборы

	Список = "";
	Если НЕ РезультатЗапроса[1].Пустой() Тогда
		Выборка = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.СледующийПоЗначениюПоля("Пользователь") Цикл
			Список = Список + "    " + Выборка.Пользователь + ":";
			Пока Выборка.СледующийПоЗначениюПоля("ЛентаНовостей") Цикл
				Список = Список + "      " + Выборка.ЛентаНовостей + ":";
				Пока Выборка.Следующий() Цикл
					Список = Список
						+ "        " + Выборка.КатегорияНовостей + " = " + Выборка.ЗначениеКатегорииНовостей;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Список = Список
			+ "    " + НСтр("ru='Нет данных
			|'");
	КонецЕсли;

	Список = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Список, Символы.Таб, Истина, Ложь);

	Результат = Результат
		+ "###" + НСтр("ru='Отборы, настроенные пользователями (первые 40 значений):
		|'")
		+ Список
		+ Символы.ПС;

#КонецОбласти

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_ПараметрыСеанса()

	ТипСтруктура = Тип("Структура");

	ПараметрыОкруженияБИП_Новости = ПараметрыСеанса.ПараметрыОкруженияБИП_Новости.Получить();
	Если ТипЗнч(ПараметрыОкруженияБИП_Новости) = ТипСтруктура Тогда
		ПредставлениеПараметрыОкруженияБИП_Новости = ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПараметрыОкруженияБИП_Новости, "=", Символы.ПС);
	Иначе
		ПредставлениеПараметрыОкруженияБИП_Новости = СтрШаблон(НСтр("ru='Параметры окружения подсистемы новостей необрабатываемого типа %1'"), ТипЗнч(ПараметрыОкруженияБИП_Новости));
	КонецЕсли;

	Результат = СтрШаблон(
		НСтр("ru='Параметры окружения подсистемы новостей:
			|%1'"),
		ПредставлениеПараметрыОкруженияБИП_Новости);

	Результат = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Результат, Символы.Таб, Истина, Ложь);

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_ДанныеОКонфигурацииИзМетаданных()

	СистемнаяИнформация = Новый СистемнаяИнформация;

	Результат = СтрШаблон(
		НСтр("ru='Имя конфигурации: %1
			|Версия конфигурации: %2
			|Версия подсистемы БИП: %3
			|Версия платформы: %4
			|Операционная система: %5
			|Программа просмотра: %6
			|Данные компьютера: %7'"),
		Метаданные.Имя,
		Метаданные.Версия,
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки(),
		СистемнаяИнформация.ВерсияПриложения,
		СокрЛП(СистемнаяИнформация.ТипПлатформы) + ", " + СокрЛП(СистемнаяИнформация.ВерсияОС),
		СистемнаяИнформация.ИнформацияПрограммыПросмотра,
		СокрЛП(СистемнаяИнформация.Процессор) + ", " + СистемнаяИнформация.ОперативнаяПамять);

	Результат = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Результат, Символы.Таб, Истина, Ложь);

	Возврат Результат;

КонецФункции

// Взято из Справочник.ЛентыНовостей.ФормаЭлемента.
// Функция возвращает URL для получения новостей.
// Все параметры (в поле ИмяФайла они заключены в квадратные скобки) будут заменены на конкретные значения.
// Возвращаемый результат можно вставить в браузер и он отобразит новости.
// Процедура формирует текстовое представление для URL.
//
// Параметры:
//  лкСсылка;
//  лкПротокол;
//  лкСайт;
//  лкИмяФайла.
//
// Возвращаемое значение:
//   Строка - URL получения новостей, готовый для вставки в браузер.
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПолныйАдресЛентыНовостей(лкСсылка, лкПротокол, лкСайт, лкИмяФайла)

	Если Найти(ВРег(лкПротокол), ВРег("http")) = 1 Тогда // http, https
		Если ПустаяСтрока(лкСайт) Тогда
			Результат = НСтр("ru='Не заполнено поле Сайт'");
		ИначеЕсли ПустаяСтрока(лкИмяФайла) Тогда
			Результат = НСтр("ru='Не заполнено поле Имя файла'");
		Иначе // Все поля заполнены
			ОписательЛентыНовостей = Новый Структура;
			ОписательЛентыНовостей.Вставить("Ссылка", лкСсылка);
			ОписательЛентыНовостей.Вставить("Протокол", лкПротокол);
			ОписательЛентыНовостей.Вставить("Сайт", лкСайт);
			ОписательЛентыНовостей.Вставить("ИмяФайла", лкИмяФайла);
			Результат = ОбработкаНовостейВызовСервера.ПолучитьАдресДляПолученияНовостей(
				ОписательЛентыНовостей,
				Неопределено,
				Неопределено);
		КонецЕсли;
	Иначе
		Результат = НСтр("ru='Адрес ленты новостей можно получить только для протоколов http и https'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_СписокВажныхИОченьВажныхНовостей()

	Перем ОченьВажныеНовостиСВключеннымиНапоминаниями, ВажныеНовостиСВключеннымиНапоминаниями;

	Результат = "";

	ТипМассив = Тип("Массив");

	ОбработкаНовостей.ПолучитьНовостиСНапоминаниями(
		ОченьВажныеНовостиСВключеннымиНапоминаниями,
		ВажныеНовостиСВключеннымиНапоминаниями);

#Область ОченьВажныеНовости

	Список = "";
	Если (ТипЗнч(ОченьВажныеНовостиСВключеннымиНапоминаниями) = ТипМассив)
			И (ОченьВажныеНовостиСВключеннымиНапоминаниями.Количество() > 0) Тогда
		Для Каждого ТекущаяНовость Из ОченьВажныеНовостиСВключеннымиНапоминаниями Цикл
			Список = Список
				+ "  "
				+ ТекущаяНовость.УИННовости + "|"
				+ ТекущаяНовость.НовостьНаименование
				+ Символы.ПС;
		КонецЦикла;
	Иначе
		Список = НСтр("ru='Пустой.
			|'");
	КонецЕсли;

	Список = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Список, Символы.Таб, Истина, Ложь);

	Результат = Результат
		+ "###" + НСтр("ru='Список очень важных новостей:
		|'")
		+ Список;

#КонецОбласти

#Область ВажныеНовости

	Список = "";
	Если (ТипЗнч(ВажныеНовостиСВключеннымиНапоминаниями) = ТипМассив)
			И (ВажныеНовостиСВключеннымиНапоминаниями.Количество() > 0) Тогда
		Для Каждого ТекущаяНовость Из ВажныеНовостиСВключеннымиНапоминаниями Цикл
			Список = Список
				+ "  "
				+ ТекущаяНовость.УИННовости + "|"
				+ ТекущаяНовость.НовостьНаименование
				+ Символы.ПС;
		КонецЦикла;
	Иначе
		Список = НСтр("ru='Пустой.
			|'");
	КонецЕсли;

	Список = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Список, Символы.Таб, Истина, Ложь);

	Результат = Результат
		+ "###" + НСтр("ru='Список важных новостей:
		|'")
		+ Список;

#КонецОбласти

	Результат = Результат + Символы.ПС;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_ПроверкаХТТПСоединения()

	Результат = "";

	// Значения предопределенных категорий
	УстановитьПривилегированныйРежим(Истина);
		ЭтотПродукт      = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ЭтотПродукт"); // Имя продукта и полная версия платформы
		ВерсияПлатформы  = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы
		ВерсияБиблиотеки = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
		МетаданныеВерсия = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"); // Версия конфигурации, из метаданных
		МетаданныеИмя    = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"); // Имя конфигурации, из метаданных
		МетаданныеИмя    = КодироватьСтроку(МетаданныеИмя, СпособКодированияСтроки.КодировкаURL, "UTF8");
		Попытка
			ЭтоРазделеннаяКонфигурация               = ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация();
			ЭтоРазделеннаяКонфигурация_Представление = ?(ЭтоРазделеннаяКонфигурация = Истина, "true", "false");
		Исключение
			ЭтоРазделеннаяКонфигурация_Представление = "unknown";
		КонецПопытки;
		Попытка
			РежимРаботыПрограммы               = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы(); // Файловый, КлиентСерверный
			РежимРаботыПрограммы_Представление = ?(РежимРаботыПрограммы.Файловый = Истина, "File", "ClientServer");
		Исключение
			РежимРаботыПрограммы_Представление = "unknown";
		КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	Спр.Код,
		|	Спр.Наименование,
		|	Спр.Ссылка,
		|	Спр.Протокол,
		|	Спр.Сайт,
		|	Спр.ИмяФайла
		|ИЗ
		|	Справочник.ЛентыНовостей КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|	И Спр.Протокол ПОДОБНО ""http%""
		|	И Спр.ЗагруженоССервера = ИСТИНА
		|";

	РезультатЗапроса = Запрос.Выполнить();

	Результат = Результат
		+ НСтр("ru='Получение новостей по первым нескольким лентам новостей:
		|'") ;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			РезультатШага = "";

			Попытка

				// Прокси - брать из БСП.
				// Настройки прокси в БСП хранятся как для сервера (в виде соответствия в константе НастройкаПроксиСервера),
				//  так и для клиента (хранятся в хранилище настроек для каждого пользователя).
				Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("http://");

				ИмяСервера_Сервер = "";
				ИмяСервера_Порт = "";
				// В имени сервера через двоеточие может идти порт (например, news1c.ru:8081), выделить его.
				ГдеДвоеточие = Найти(Выборка.Сайт, ":");
				Если ГдеДвоеточие > 0 Тогда
					ИмяСервера_Сервер = СокрЛП(Лев(Выборка.Сайт, ГдеДвоеточие - 1));
					ИмяСервера_Порт = Число(Прав(Выборка.Сайт, СтрДлина(Выборка.Сайт) - ГдеДвоеточие));
				Иначе
					ИмяСервера_Сервер = СокрЛП(Выборка.Сайт);
					ИмяСервера_Порт   = Неопределено;
				КонецЕсли;

				ХттпСоединение = Неопределено;

				ХттпСоединение = Новый HTTPСоединение(
					ИмяСервера_Сервер, // Сервер
					ИмяСервера_Порт, // Порт
					"", // Логин,
					"", // Пароль,
					Прокси,
					15, // НастройкиПолученияНовостей.HTTPСоединениеТаймаутСоединенияСекунд, // Таймаут.
					?(ВРег(Выборка.Протокол) = ВРег("https"), Новый ЗащищенноеСоединениеOpenSSL, Неопределено)); // ЗащищенноеСоединение

				лкИмяФайлаНаСервере = Выборка.ИмяФайла;
				лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[from]", "last=1");
				лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[config]", "config=" + ЭтотПродукт);
				лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[platformVersion]", "platformVersion=" + ВерсияПлатформы);
				лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[filter]", "");

				РезультатШага = РезультатШага + "    URL = " + Выборка.Протокол + "://" + Выборка.Сайт + "/" + лкИмяФайлаНаСервере + Символы.ПС;

				// Непосредственно загрузка файла, начало
				лкЗаголовки = Новый Соответствие;
				лкЗаголовки.Вставить(
					"user-agent",
					"1C;config=" + ЭтотПродукт
						+ ";platformVersion=" + ВерсияПлатформы
						+ ";ISLVersion=" + ВерсияБиблиотеки
						+ ";IBMode=" + РежимРаботыПрограммы_Представление
						+ ";DataSplitted=" + ЭтоРазделеннаяКонфигурация_Представление
						+ ";metaVersion=" + МетаданныеВерсия
						+ ";metaName=" + МетаданныеИмя
						+ ";testMode=true");
				ХттпЗапрос = Новый HTTPЗапрос(лкИмяФайлаНаСервере, лкЗаголовки);
				ХттпОтвет = ХттпСоединение.Получить(ХттпЗапрос, ИмяВременногоФайла);

				сЗаголовки = "";
				Для каждого ТекущийЗаголовок Из ХттпОтвет.Заголовки Цикл
					сЗаголовки = сЗаголовки + "      " + ТекущийЗаголовок.Ключ + ":" + ТекущийЗаголовок.Значение + Символы.ПС;
				КонецЦикла;

				ВременныйФайл = Новый Файл(ИмяВременногоФайла);
				Если ВременныйФайл.Существует() Тогда
					ПервыеСтрокиФайла = ИнтернетПоддержкаПользователейКлиентСервер.СодержимоеТекстовогоФайла(ВременныйФайл.ПолноеИмя, 100);
					ПервыеСтрокиФайла = СтрЗаменить(ПервыеСтрокиФайла, "  ", " ");
					РезультатШага = РезультатШага
						+ СтрШаблон(
							НСтр("ru='%1Успешное получение файла новостей.
								|%1Код HTTP ответа: %2
								|%1Заголовки HTTP ответа:
								|%3
								|%1Имя временного файла: %4
								|%1Размер файла (байт): %5
								|%1Первые строки файла:
								|%6
								|
								|
								|'"),
							"    ",
							ХттпОтвет.КодСостояния,
							сЗаголовки,
							ИмяВременногоФайла,
							Формат(ВременныйФайл.Размер(), "ЧЦ=15; ЧДЦ=; ЧРГ=' '; ЧГ=3,0"),
							ПервыеСтрокиФайла);
				Иначе
					РезультатШага = РезультатШага
						+ СтрШаблон(
							НСтр("ru='%1Неудачная попытка получения файла новостей.
								|%1Код HTTP ответа: %2
								|%1Заголовки HTTP ответа:
								|%3
								|%1Имя временного файла: %4
								|'"),
							"    ",
							ХттпОтвет.КодСостояния,
							сЗаголовки,
							ИмяВременногоФайла);

				КонецЕсли;

			Исключение
				РезультатШага = РезультатШага
					+ "    "
					+ СтрШаблон(
						НСтр("ru='ОШИБКА при получении новостей:
							|%1
							|'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;

			РезультатШага = "###" + Выборка.Код + ", " + Выборка.Наименование + ":" + Символы.ПС
				+ ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(РезультатШага, Символы.Таб, Истина, Ложь);

			Результат = Результат
				+ РезультатШага
				+ Символы.ПС
				+ Символы.ПС;

		КонецЦикла;
	Иначе
		Результат = Результат + "    " + НСтр("ru='Нет подходящих лент новостей
			|'");
	КонецЕсли;

	Результат = Результат + Символы.ПС;

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьШагПроверки_ПроверкаСвободногоМестаВоВременномКаталоге()

	Результат = "";

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

	Результат = Результат
		+ СтрШаблон(
			НСтр("ru='Автоматическая проверка НЕ реализована.
					|необходимо вручную проверить, достаточно ли места для хранения файлов по следующему пути:
					|%1
					|Также необходимо помнить, что в случае использования кластера серверов, получение новостей может осуществляться
					| на любом из серверов, поэтому проверять свободное место необходимо на всех серверах.'"),
			ИмяВременногоФайла);

	Результат = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Результат, Символы.Таб, Истина, Ложь);

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ВыполнитьШагПроверки_НастройкиОткрытыхФорм()

	ТипСтрока    = Тип("Строка");
	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");

	Результат = "";

	// 2. Данные с клиента.
	// До обработки - очистить реквизит.
	ЭтотОбъект.ИнформацияОбОткрытыхОкнах.Очистить();

	// Оповестить все открытые формы. И если в них встроена подсистема показа контекстных новостей,
	//  то вывести информацию о настройках новостей (идентификаторы формы и т.п.).
	Оповестить("Новости. Собрать информацию об открытых окнах", , ЭтотОбъект); // Идентификатор.

	// Обработать список значений. Могут передать как реквизит "Новости", так и текст ошибки.
	Для Каждого ТекущаяИнформация Из ЭтотОбъект.ИнформацияОбОткрытыхОкнах Цикл
		Если ТипЗнч(ТекущаяИнформация.Значение) = ТипСтрока Тогда // Ошибка
			Результат = Результат
				+ СтрШаблон(
					НСтр("ru='Имя формы: %1
						|Ошибка получения данных реквизита Новости:
						|%2
						|'"),
					ТекущаяИнформация.Представление,
					ТекущаяИнформация.Значение);
		ИначеЕсли ТипЗнч(ТекущаяИнформация.Значение) = ТипСтруктура Тогда // Новости
			СписокПервыхНовостей = "";
			Если ТекущаяИнформация.Значение.Свойство("Новости") Тогда
				Если ТипЗнч(ТекущаяИнформация.Значение.Новости)= ТипМассив Тогда
					Если ТекущаяИнформация.Значение.Новости.Количество() > 0 Тогда
						С = 0;
						Для Каждого ТекущаяНовость Из ТекущаяИнформация.Значение.Новости Цикл
							// В реквизите формы Новости.Новости хранится массив структур,
							//  ключи которых описаны в ОбработкаНовостей.ПолучитьТаблицуКонтекстныхНовостей.
							// Нам необходимы поля:
							//  - НовостьНаименование;
							//  - УИННовости;
							//  - Важность;
							//  - ДатаПубликации;
							//  - Прочтена.
							СписокПервыхНовостей = СписокПервыхНовостей
								+ ТекущаяНовость.НовостьНаименование + "; "
								+ ТекущаяНовость.УИННовости + "; "
								+ ТекущаяНовость.Важность + "; "
								+ ТекущаяНовость.ДатаПубликации + "; "
								+ ?(ТекущаяНовость.Прочтена, НСтр("ru='Прочтена'"), НСтр("ru='НЕ прочтена'")) + "; "
								+ Символы.ПС;
							С = С + 1;
							Если С >= 5 Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						СписокПервыхНовостей = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
							СписокПервыхНовостей, Символы.Таб + Символы.Таб, Истина, Ложь);
					Иначе
						СписокПервыхНовостей = НСтр("ru='Пустой список контекстных новостей.'");
					КонецЕсли;
				Иначе
					СписокПервыхНовостей = СтрШаблон(
						НСтр("ru='В реквизите Новости ключ массива контекстных новостей Новостей неправильного типа: %1.'"),
						ТипЗнч(ТекущаяИнформация.Значение.Новости));
				КонецЕсли;
			Иначе
				СписокПервыхНовостей = НСтр("ru='В реквизите Новости отсутствует ключ массива контекстных новостей Новостей.'");
			КонецЕсли;
			Результат = Результат
				+ СтрШаблон(
					НСтр("ru='Имя формы: %1
						|	Метаданные: %2
						|	Форма: %3
						|	ЗаголовокФормыКонтекстныхНовостей: %4
						|	Всего контекстных новостей: %5
						|	Несколько случайных контекстных новостей:
						|%6
						|	ПолучатьНовостиНаСервере: %7
						|	ХранитьМассивНовостейТолькоНаСервере: %8
						|
						|'"),
					ТекущаяИнформация.Представление,
					ТекущаяИнформация.Значение.Метаданные,
					ТекущаяИнформация.Значение.Форма,
					ТекущаяИнформация.Значение.ЗаголовокФормыКонтекстныхНовостей,
					ТекущаяИнформация.Значение.Новости.Количество(),
					ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(
						СписокПервыхНовостей,
						Символы.Таб + Символы.Таб,
						Истина,
						Ложь),
					ТекущаяИнформация.Значение.ПолучатьНовостиНаСервере,
					ТекущаяИнформация.Значение.ХранитьМассивНовостейТолькоНаСервере);
		Иначе // Неизвестные данные
			Результат = Результат
				+ СтрШаблон(
					НСтр("ru='Имя формы: %1
						|Ошибка получения данных реквизита Новости. Неправильный тип данных: %2
						|'"),
					ТекущаяИнформация.Представление,
					ТипЗнч(ТекущаяИнформация.Значение));
		КонецЕсли;
	КонецЦикла;

	// После обработки - очистить реквизит.
	ЭтотОбъект.ИнформацияОбОткрытыхОкнах.Очистить();

	Результат = ИнтернетПоддержкаПользователейКлиентСервер.ВставитьОтступВМногострочнуюСтроку(Результат, Символы.Таб, Истина, Ложь);

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
