#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Загрузка файлов новостей по HTTP / HTTPS соединению или из файла во временные хранилища.
// Если установлен режим работы только с локальными новостями, то в обработку уже должны быть переданы
//  только необходимые ленты новостей (только с протоколом file).
//
// Параметры:
//  ЛентыНовостей - ТаблицаЗначений - таблица лент новостей со следующими колонками:
//   * Пометка                - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить;
//   * ОбязательныйКанал      - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить ВНЕ ЗАВИСИМОСТИ от галочки Пометка;
//   * ЛентаНовостей          - СправочникСсылки.ЛентаНовостей - Ссылка на элемент справочника для подстановки в элемент Справочник.Новости;
//   * Сайт                   - Строка -;
//   * ИмяФайла               - Строка -;
//   * Протокол               - Строка - возможные значения http, https, file;
//   * ВариантЛогинаПароля    - ПеречислениеСсылка.ВариантЛогинаПароляДляЛентыНовостей - БезЛогинаПароля, ВручнуюОдинаковыйДляВсех, ВручнуюРазныйДляВсех, ВебИТС;
//   * Логин                  - Строка -;
//   * Пароль                 - Строка -;
//   * ЛокальнаяЛентаНовостей - Булево - лента новостей не обновляется из файла или из интернета, а заполняется напрямую в справочник Новости;
//   * ЧастотаОбновления      - Число(1,0) - Частота обновления;
//   * АдресВХранилище        - Строка - Адрес загруженного файла во временном хранилище.
//  ЛогШаговВыполнения - Массив, Неопределено - в этот массив будет передана информация о шагах выполнения (массив структур) с ключами:
//   * Шаг            - Строка - произвольное описание шага;
//   * ВремяНачала    - Число - универсальное время начала шага в миллисекундах;
//   * ВремяОкончания - Число - универсальное время окончания шага в миллисекундах.
//
Процедура ЗагрузитьФайлыНовостейССервера(ЛентыНовостей, ЛогШаговВыполнения = Неопределено) Экспорт

	Перем ХттпСоединение, ХттпОтвет;

	ТипМассив           = Тип("Массив");
	ТипОбъектМетаданных = Тип("ОбъектМетаданных");

	Если ТипЗнч(ЛогШаговВыполнения) <> ТипМассив Тогда
		ЛогШаговВыполнения = Новый Массив;
	КонецЕсли;

	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало загрузки файлов новостей
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();

	// Таймаут и количество попыток получения файла - брать из настроек.
	НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПолученияНовостей",
		,
		,
		""); // Для всех пользователей

	ТаблицаХТТПСоединений = ЛентыНовостей.Скопировать(, "Сайт, Протокол, ВариантЛогинаПароля, Логин, Пароль");
	ТаблицаХТТПСоединений.Свернуть("Сайт, Протокол, ВариантЛогинаПароля, Логин, Пароль");

	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Загрузка: Получение настроек, формирование списка лент новостей'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

	// Значения предопределенных категорий.
	УстановитьПривилегированныйРежим(Истина);
		ЭтотПродукт      = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ЭтотПродукт"); // Имя продукта и полная версия платформы
		ВерсияПлатформы  = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы
		ВерсияБиблиотеки = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
		МетаданныеВерсия = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"); // Версия конфигурации, из метаданных
		МетаданныеИмя    = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"); // Имя конфигурации, из метаданных
		МетаданныеИмя    = КодироватьСтроку(МетаданныеИмя, СпособКодированияСтроки.КодировкаURL, "UTF8");
		Попытка
			ЭтоРазделеннаяКонфигурация               = ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация();
			ЭтоРазделеннаяКонфигурация_Представление = ?(ЭтоРазделеннаяКонфигурация = Истина, "true", "false");
		Исключение
			ЭтоРазделеннаяКонфигурация_Представление = "unknown";
		КонецПопытки;
		Попытка
			РежимРаботыПрограммы               = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы(); // Файловый, КлиентСерверный
			РежимРаботыПрограммы_Представление = ?(РежимРаботыПрограммы.Файловый = Истина, "File", "ClientServer");
		Исключение
			РежимРаботыПрограммы_Представление = "unknown";
		КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

	// Для одинаковых параметров (Сайт, Протокол, ВариантЛогинаПароля, Логин, Пароль) создавать
	//  одно ХТТП соединение для оптимизации быстродействия.
	Для каждого ТекущееХТТПСоединение Из ТаблицаХТТПСоединений Цикл

		Если ВРег(ТекущееХТТПСоединение.Протокол) = ВРег("file") Тогда

			ОписательУсловияПоиска = Новый Структура;
			ОписательУсловияПоиска.Вставить("Сайт",                ТекущееХТТПСоединение.Сайт); // Должно быть пустое
			ОписательУсловияПоиска.Вставить("Протокол",            ТекущееХТТПСоединение.Протокол);
			ОписательУсловияПоиска.Вставить("ВариантЛогинаПароля", ТекущееХТТПСоединение.ВариантЛогинаПароля); // Должно быть = БезЛогинаПароля
			ОписательУсловияПоиска.Вставить("Логин",               ТекущееХТТПСоединение.Логин); // Должно быть пустое
			ОписательУсловияПоиска.Вставить("Пароль",              ТекущееХТТПСоединение.Пароль); // Должно быть пустое
			МассивОбрабатываемыхЛентНовостей = ЛентыНовостей.НайтиСтроки(ОписательУсловияПоиска);

			Для каждого ТекущаяЛентаНовостей Из МассивОбрабатываемыхЛентНовостей Цикл

				ТШагЛентаНовостей = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ЕстьОшибки = Ложь;

				// Получить файл
				Попытка
					// В имени файла может быть указан макет из метаданных. Если так, то получить данные из макета.
					Если (Найти(ВРег(СокрЛП(ТекущаяЛентаНовостей.ИмяФайла)), ВРег("Метаданные.")) = 1)
							И (Найти(ВРег(СокрЛП(ТекущаяЛентаНовостей.ИмяФайла)), ВРег(".Макеты.")) > 0) Тогда

						// Например, Метаданные.Справочники.ЛентыНовостей.Макеты.СтандартныеЗначения
						МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СокрЛП(ТекущаяЛентаНовостей.ИмяФайла), ".");
						Если МассивСлов.Количество() = 5 Тогда
							Попытка
								ОбъектМетаданныхМакет = Метаданные[МассивСлов[1]][МассивСлов[2]].Макеты[МассивСлов[4]];
							Исключение
								ОбъектМетаданныхМакет = Неопределено;
								ТекстСообщения = НСтр("ru='Ошибка получения новостей из метаданных %ИмяФайла% для ленты новостей %ЛентаНовостей% по причине
									|%ИнформацияОбОшибке%'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								// Запись в журнал регистрации
								ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
									НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
									НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка получения файла из метаданных'"), // ИдентификаторШага
									УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
									, // ОбъектМетаданных
									, // Данные
									ТекстСообщения, // Комментарий
									ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
								// Пропустить ленту новостей
								ЕстьОшибки = Истина;
							КонецПопытки;
							Если ЕстьОшибки = Ложь Тогда
								Попытка
									Если ТипЗнч(ОбъектМетаданныхМакет) = ТипОбъектМетаданных Тогда
										Если ВРег(МассивСлов[1]) = ВРег("Справочники") Тогда
											Макет = Справочники[МассивСлов[2]].ПолучитьМакет(ОбъектМетаданныхМакет);
										ИначеЕсли ВРег(МассивСлов[1]) = ВРег("Документы") Тогда
											Макет = Документы[МассивСлов[2]].ПолучитьМакет(ОбъектМетаданныхМакет);
										ИначеЕсли ВРег(МассивСлов[1]) = ВРег("Отчеты") Тогда
											Макет = Отчеты[МассивСлов[2]].ПолучитьМакет(ОбъектМетаданныхМакет);
										ИначеЕсли ВРег(МассивСлов[1]) = ВРег("Обработки") Тогда
											Макет = Обработки[МассивСлов[2]].ПолучитьМакет(ОбъектМетаданныхМакет);
										Иначе
											Макет = Неопределено;
											ТекстСообщения = НСтр("ru='Ошибка получения новостей из макета %ИмяФайла% для ленты новостей %ЛентаНовостей% - эти метаданные не обрабатываются'");
											ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
											ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
											// Запись в журнал регистрации
											ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
												НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
												НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка получения файла из метаданных'"), // ИдентификаторШага
												УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
												, // ОбъектМетаданных
												, // Данные
												ТекстСообщения, // Комментарий
												ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
											// Пропустить ленту новостей
											ЕстьОшибки = Истина;
										КонецЕсли;
									КонецЕсли;
									Если ЕстьОшибки = Ложь Тогда
										Если Макет <> Неопределено Тогда
											Если ОбъектМетаданныхМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ТекстовыйДокумент Тогда
												ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
												Макет.Записать(ИмяВременногоФайла, "UTF-8");
												ТекущаяЛентаНовостей.АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
												Попытка
													УдалитьФайлы(ИмяВременногоФайла);
												Исключение
													ИнформацияОбОшибке = ИнформацияОбОшибке();
													ТекстСообщения = НСтр("ru='ЗагрузитьФайлыНовостейССервера (получено из макета): Не удалось удалить временный файл %ИмяВременногоФайла% для ленты новостей %ЛентаНовостей% по причине:
														|%ИнформацияОбОшибке%
														|
														|Рекомендуется вручную удалить этот временный файл.'");
													ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяВременногоФайла%", СокрЛП(ИмяВременногоФайла));
													ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
													ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
													// Запись в журнал регистрации
													ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
														НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
														НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка удаления временного файла'"), // ИдентификаторШага
														УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
														, // ОбъектМетаданных
														, // Данные
														ТекстСообщения, // Комментарий
														ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
												КонецПопытки;
											Иначе
												ТекстСообщения = НСтр("ru='Ошибка получения новостей из макета %ИмяФайла% для ленты новостей %ЛентаНовостей%: возможна загрузка только из текстового макета'");
												ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
												ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
												// Запись в журнал регистрации
												ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
													НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
													НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка получения файла из метаданных'"), // ИдентификаторШага
													УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
													, // ОбъектМетаданных
													, // Данные
													ТекстСообщения, // Комментарий
													ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
												// Пропустить ленту новостей
												ЕстьОшибки = Истина;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								Исключение
									ТекстСообщения = НСтр("ru='Ошибка получения новостей из макета %ИмяФайла% для ленты новостей %ЛентаНовостей% по причине %ИнформацияОбОшибке%'");
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									// Запись в журнал регистрации
									ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
										НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
										НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка получения файла из метаданных'"), // ИдентификаторШага
										УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
										, // ОбъектМетаданных
										, // Данные
										ТекстСообщения, // Комментарий
										ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
									// Пропустить ленту новостей
									ЕстьОшибки = Истина;
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если ПустаяСтрока(ТекущаяЛентаНовостей.АдресВХранилище) Тогда
							Если НЕ ПустаяСтрока(ТекущаяЛентаНовостей.ИмяФайла) Тогда
								ТекущаяЛентаНовостей.АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ТекущаяЛентаНовостей.ИмяФайла));
							КонецЕсли;
						Иначе
							// В переопределяемых модулях могли подготовить текст XML-содержимого ленты новостей и поместить во временное хранилище.
							// Например, текст может подготовиться в ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей,
							//  и потом в модуле менеджера справочника Новости поместиться напрямую в параметр ЛентыНовостей.
						КонецЕсли;
					КонецЕсли;
				Исключение
					ТекстСообщения = НСтр("ru='Ошибка получения файла %ИмяФайла% для ленты новостей %ЛентаНовостей% по причине %ИнформацияОбОшибке%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					// Запись в журнал регистрации
					ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
						НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка получения файла'"), // ИдентификаторШага
						УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
						, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
					// Пропустить ленту новостей
					ЕстьОшибки = Истина;
				КонецПопытки;

				Если ЕстьОшибки = Ложь Тогда
					ДополнительноеВремя = 0;
				Иначе
					// Настроить так, чтобы следующая проверка была через 30 минут +-10 минут.
					// Разброс необходим, чтобы все клиенты не попали на одно и то же время, а были более-менее равномерно распределены.
					ГенераторСЧ = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяУниверсальнаяДата()));
					СлучайноеЧислоСекунд = ГенераторСЧ.СлучайноеЧисло(0, 30*60) - 10*60; // В секундах, -10..+20 минут
					ДополнительноеВремя = 30*60 + СлучайноеЧислоСекунд; // +30 минут +- 10..20 минут
				КонецЕсли;
				// Сохранить дату последнего выполнения / обновления
				Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = "Получение новостей"; // Идентификатор.
				Запись.ЛентаНовостей = ТекущаяЛентаНовостей.ЛентаНовостей;
				Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
				Если ТекущаяЛентаНовостей.ЧастотаОбновления = 1 Тогда // Ежедневно
					Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 24*60*60 + ДополнительноеВремя;
				ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 2 Тогда // Ежечасно
					Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60*60 + ДополнительноеВремя;
				ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 3 Тогда // Каждые 15 минут
					Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 15*60 + ДополнительноеВремя;
				ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 4 Тогда // Ежеминутно
					Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60 + ДополнительноеВремя;
				Иначе // Без автообновления или другое значение
					Запись.ДатаСледующегоОбновления = '00010101';
				КонецЕсли;
				Запись.Записать(Истина);

				ТекстШага = НСтр("ru='Загрузка: загрузка файла новостей из ленты новостей %ЛентаНовостей% (протокол %Протокол%, сайт %Сайт%, имя файла %ИмяФайла%).
					|Успешно? %Успешно%'");
				ТекстШага = СтрЗаменить(ТекстШага, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
				ТекстШага = СтрЗаменить(ТекстШага, "%Протокол%", ТекущаяЛентаНовостей.Протокол);
				ТекстШага = СтрЗаменить(ТекстШага, "%Сайт%", ТекущаяЛентаНовостей.Сайт);
				ТекстШага = СтрЗаменить(ТекстШага, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
				ТекстШага = СтрЗаменить(ТекстШага, "%Успешно%", (ЕстьОшибки = Ложь));
				ЛогШаговВыполнения.Добавить(
					Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
						ТекстШага,
						ТШагЛентаНовостей,
						ТекущаяУниверсальнаяДатаВМиллисекундах()));

			КонецЦикла;

		ИначеЕсли (ВРег(ТекущееХТТПСоединение.Протокол) = ВРег("http"))
				ИЛИ (ВРег(ТекущееХТТПСоединение.Протокол) = ВРег("https")) Тогда // http, https

			ЕстьОшибки = Ложь;

			// Шаг 1 / 2, Соединение с сервером.
			// Логин / пароль должны быть уже заполнены.
			ТШагЛентаНовостей = ТекущаяУниверсальнаяДатаВМиллисекундах();

			ХттпСоединение = Неопределено;
			Если НЕ ОбработкаНовостейВызовСервера.СоединитьсяССерверомНовостей(
						ТекущееХТТПСоединение.Сайт,
						?(ВРег(ТекущееХТТПСоединение.Протокол) = ВРег("https") , "https", "http"),
						ТекущееХТТПСоединение.Логин,
						ТекущееХТТПСоединение.Пароль,
						ХттпСоединение) Тогда
				// Если была ошибка, то подробности запишутся в журнал регистрации в ОбработкаНовостейПереопределяемый.СоединитьсяССерверомНовостей.
				ЕстьОшибки = Истина;
			КонецЕсли;

			ТекстШага = НСтр("ru='Загрузка: установка http/https соединения (протокол %Протокол%).
				|Успешно? %СоединениеУстановлено%'");
			ТекстШага = СтрЗаменить(ТекстШага, "%Протокол%", ТекущееХТТПСоединение.Протокол);
			ТекстШага = СтрЗаменить(ТекстШага, "%СоединениеУстановлено%", (ЕстьОшибки = Ложь));
			ЛогШаговВыполнения.Добавить(
				Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
					ТекстШага,
					ТШагЛентаНовостей,
					ТекущаяУниверсальнаяДатаВМиллисекундах()));

			Если ЕстьОшибки = Ложь Тогда

				ОписательУсловияПоиска = Новый Структура;
				ОписательУсловияПоиска.Вставить("Сайт",                ТекущееХТТПСоединение.Сайт);
				ОписательУсловияПоиска.Вставить("Протокол",            ТекущееХТТПСоединение.Протокол);
				ОписательУсловияПоиска.Вставить("ВариантЛогинаПароля", ТекущееХТТПСоединение.ВариантЛогинаПароля);
				ОписательУсловияПоиска.Вставить("Логин",               ТекущееХТТПСоединение.Логин);
				ОписательУсловияПоиска.Вставить("Пароль",              ТекущееХТТПСоединение.Пароль);
				МассивОбрабатываемыхЛентНовостей = ЛентыНовостей.НайтиСтроки(ОписательУсловияПоиска);

				Для каждого ТекущаяЛентаНовостей Из МассивОбрабатываемыхЛентНовостей Цикл

					лкИмяФайлаНаСервере = "";
					ТШагЛентаНовостей = ТекущаяУниверсальнаяДатаВМиллисекундах();
					ЕстьОшибки = Ложь;

					// Шаг 2 / 2, получение файла.
					ФайлПолучен = Ложь;
					ПопыткаПолученияФайла = 0;
					Пока (ФайлПолучен <> Истина) И (ПопыткаПолученияФайла < НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла) Цикл
						Попытка
							Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
							Запись.ЛентаНовостей = ТекущаяЛентаНовостей.ЛентаНовостей;
							Запись.Прочитать(); // Запись будет ниже.
							Если Запись.Выбран() Тогда
								ДатаЗагрузкиПоследнихНовостейНаКлиенте          = Запись.ДатаЗагрузкиПоследнихНовостей;
								лкКоличествоНеудачныхПопытокПриЗагрузкеНовостей = Запись.КоличествоНеудачПриЗагрузкеНовостей + 1;
								Если Запись.КоличествоНеудачПриЗагрузкеНовостей = 0 Тогда
									лкДатаПоследнейПопыткиЗагрузкиНовостей = Запись.ДатаПоследнейПопыткиЗагрузкиНовостей;
								Иначе
									лкДатаПоследнейПопыткиЗагрузкиНовостей = '00010101';
								КонецЕсли;
							Иначе
								ДатаЗагрузкиПоследнихНовостейНаКлиенте          = '00010101';
								лкКоличествоНеудачныхПопытокПриЗагрузкеНовостей = 0;
								лкДатаПоследнейПопыткиЗагрузкиНовостей          = '00010101';
							КонецЕсли;
							// Сразу увеличить счетчик неудачных загрузок на +1.
							// Этот счетчик может быть сброшен в нескольких случаях:
							//  - лента новостей успешно загрузилась;
							//  - в ленте новостей нет новых новостей (т.е. сам процесс соединения и загрузки новостей запустился, данные получены, но обновлять нечего).
							Запись.ЛентаНовостей                        = ТекущаяЛентаНовостей.ЛентаНовостей;
							Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейНаКлиенте;
							Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
							Запись.КоличествоНеудачПриЗагрузкеНовостей  = ?(лкКоличествоНеудачныхПопытокПриЗагрузкеНовостей <= 99999, лкКоличествоНеудачныхПопытокПриЗагрузкеНовостей, 99999); // При успешной загрузке сбросить счетчик неудачных загрузок. Если счетчик > 99999, то оставить значение 99999 и не увеличивать его
							Запись.Записать(Истина);

							// Для оптимизации работы кэша на сервере Новостного центра, дату начала загрузки рассчитываем так:
							//  - если дата начала загрузки находится в этом месяце, то округляем до начала дня;
							//  - если дата начала загрузки находится раньше этого месяца, то округляем до начала месяца.
							Если НачалоМесяца(ДатаЗагрузкиПоследнихНовостейНаКлиенте) >= НачалоМесяца(ТекущаяДатаДляРегистров) Тогда
								// Если новость опубликовали в 23:59:59, то есть вероятность, что она из-за длительных перемещений
								//  между серверами НЕ успеет попасть в отбор from=00:00:00,
								//  поэтому новости первого часа ночи будем получать с запасом в 1 сутки вниз.
								Если Час(ДатаЗагрузкиПоследнихНовостейНаКлиенте) = 0 Тогда
									лкОкругленноеВремяНачалаЗагрузкиНовостей = НачалоДня(ДатаЗагрузкиПоследнихНовостейНаКлиенте - 1*24*60*60);
								Иначе
									лкОкругленноеВремяНачалаЗагрузкиНовостей = НачалоДня(ДатаЗагрузкиПоследнихНовостейНаКлиенте);
								КонецЕсли;
							Иначе
								лкОкругленноеВремяНачалаЗагрузкиНовостей = НачалоМесяца(ДатаЗагрузкиПоследнихНовостейНаКлиенте);
							КонецЕсли;

							ПопыткаПолученияФайла = ПопыткаПолученияФайла + 1;
							ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
							// {Замена параметров для URL ленты новостей}.
							// Заменить значения параметров в имени файла:
							//  [from] - дата последнего получения новостей, округленная до начала суток или месяца вниз;
							//  [config] - имя (на английском) + "," + версия конфигурации (99.99.999.9999);
							//  [platformVersion] - версия платформы 99.99.999.9999;
							//  [filter] - список всех серверных фильтров;
							// Разделитель параметров в URL всегда символ "&", он должен проставляться вручную в шаблоне имени файла в настройках ленты новостей.
							лкИмяФайлаНаСервере = СокрЛП(ТекущаяЛентаНовостей.ИмяФайла);
							Если Найти(лкИмяФайлаНаСервере, "[from]") > 0 Тогда
								Если (ДатаЗагрузкиПоследнихНовостейНаКлиенте > '00010101') Тогда // Какая-то запись в регистре сведений есть.
									лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[from]", "from=" + XMLСтрока(лкОкругленноеВремяНачалаЗагрузкиНовостей) + "Z"); // Дата хранится в часовом поясе +0
								Иначе
									// Получить все-все новости, с начала времен.
									лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[from]", "from=0001-01-01T00:00:00Z");
								КонецЕсли;
							КонецЕсли;

							лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[config]", "config=" + ЭтотПродукт);
							лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[platformVersion]", "platformVersion=" + ВерсияПлатформы);
							лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[filter]", Справочники.ЛентыНовостей.СформироватьТекстУсловияДляСервераНовостей(ТекущаяЛентаНовостей.ЛентаНовостей));

							// Непосредственно загрузка файла, начало.

								лкЗагрузкаФайлов_ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

								ТекстСообщения = НСтр("ru='Начало попытки %ПопыткаПолученияФайла% / %HTTPСоединениеКоличествоПопытокПолученияФайла% получения файла %ИмяФайла% с сервера %Сайт% для ленты новостей %ЛентаНовостей% во временный файл %ИмяВременногоФайла%.
									|(URL %URL%).'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПопыткаПолученияФайла%", ПопыткаПолученияФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%HTTPСоединениеКоличествоПопытокПолученияФайла%", НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сайт%", ТекущаяЛентаНовостей.Сайт);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяВременногоФайла%", ИмяВременногоФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%URL%", ТекущееХТТПСоединение.Протокол + "://" + ТекущаяЛентаНовостей.Сайт + "/" + лкИмяФайлаНаСервере);
								// Запись в журнал регистрации
								ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
									НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
									НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Получение файлов с сервера новостей. Начало загрузки'"), // ИдентификаторШага
									УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
									, // ОбъектМетаданных
									, // Данные
									ТекстСообщения, // Комментарий
									ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

								лкЗаголовки = Новый Соответствие;
								лкЗаголовки.Вставить(
									"user-agent",
									"1C;config=" + ЭтотПродукт
										+ ";platformVersion=" + ВерсияПлатформы
										+ ";ISLVersion=" + ВерсияБиблиотеки
										+ ";IBMode=" + РежимРаботыПрограммы_Представление
										+ ";DataSplitted=" + ЭтоРазделеннаяКонфигурация_Представление
										+ ";metaVersion=" + МетаданныеВерсия
										+ ";metaName=" + МетаданныеИмя);
								ХттпЗапрос = Новый HTTPЗапрос(лкИмяФайлаНаСервере, лкЗаголовки);
								ХттпОтвет = ХттпСоединение.Получить(ХттпЗапрос, ИмяВременногоФайла);

								лкЗагрузкаФайлов_ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();

								сЗаголовки = "";
								Для каждого ТекущийЗаголовок Из ХттпОтвет.Заголовки Цикл
									сЗаголовки = сЗаголовки + ТекущийЗаголовок.Ключ + ":" + ТекущийЗаголовок.Значение + Символы.ПС;
								КонецЦикла;
								ТекстСообщения = НСтр("ru='При попытке %ПопыткаПолученияФайла% / %HTTPСоединениеКоличествоПопытокПолученияФайла% получения файла %ИмяФайла% с сервера %Сайт% для ленты новостей %ЛентаНовостей% во временный файл получен ответ сервера с кодом %КодОтвета%, заголовки:
									|%Заголовки%
									|
									|(URL %URL%)
									|Время загрузки (сек): %ВремяЗагрузки%'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПопыткаПолученияФайла%", ПопыткаПолученияФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%HTTPСоединениеКоличествоПопытокПолученияФайла%", НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сайт%", ТекущаяЛентаНовостей.Сайт);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОтвета%", ХттпОтвет.КодСостояния);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заголовки%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ХттпОтвет.Заголовки, "=", Символы.ПС));
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%URL%", ТекущееХТТПСоединение.Протокол + "://" + ТекущаяЛентаНовостей.Сайт + "/" + лкИмяФайлаНаСервере);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяЗагрузки%", Формат((лкЗагрузкаФайлов_ВремяКонца - лкЗагрузкаФайлов_ВремяНачала) / 1000,"ЧДЦ=3; ЧРД=,; ЧРГ=' '; ЧГ=3,0"));
								// Запись в журнал регистрации
								ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
									НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
									НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Получение файлов с сервера новостей. Конец загрузки'"), // ИдентификаторШага
									УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
									, // ОбъектМетаданных
									, // Данные
									ТекстСообщения, // Комментарий
									ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

								ВременныйФайл = Новый Файл(ИмяВременногоФайла);
								Если ВременныйФайл.Существует() Тогда
									ТекстСообщения = НСтр("ru='Успешное завершение попытки %ПопыткаПолученияФайла% / %HTTPСоединениеКоличествоПопытокПолученияФайла% получения файла %ИмяФайла% с сервера %Сайт% для ленты новостей %ЛентаНовостей% во временный файл %ИмяВременногоФайла%.
										|Получен файл размером %РазмерФайла% байт.
										|(URL %URL%)
										|
										|Первые строки файла:
										|%ПервыеСтрокиФайла%'");
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПопыткаПолученияФайла%", ПопыткаПолученияФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%HTTPСоединениеКоличествоПопытокПолученияФайла%", НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сайт%", ТекущаяЛентаНовостей.Сайт);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяВременногоФайла%", ИмяВременногоФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазмерФайла%", Формат(ВременныйФайл.Размер(), "ЧЦ=15; ЧДЦ=; ЧРГ=' '; ЧГ=3,0"));
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%URL%", ТекущееХТТПСоединение.Протокол + "://" + ТекущаяЛентаНовостей.Сайт + "/" + лкИмяФайлаНаСервере);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПервыеСтрокиФайла%", ИнтернетПоддержкаПользователейКлиентСервер.СодержимоеТекстовогоФайла(ВременныйФайл.ПолноеИмя, 10));
									// Запись в журнал регистрации
									ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
										НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
										НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Получение файлов с сервера новостей. Успешная проверка чтения временного файла после загрузки'"), // ИдентификаторШага
										УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
										, // ОбъектМетаданных
										, // Данные
										ТекстСообщения, // Комментарий
										ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

									ТекущаяЛентаНовостей.АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
									ФайлПолучен = Истина;

									Попытка
										УдалитьФайлы(ИмяВременногоФайла);
									Исключение
										ИнформацияОбОшибке = ИнформацияОбОшибке();
										ТекстСообщения = НСтр("ru='ЗагрузитьФайлыНовостейССервера (получено из интернет): Не удалось удалить временный файл %ИмяВременногоФайла% для ленты новостей %ЛентаНовостей% по причине:
											|%ИнформацияОбОшибке%
											|
											|Рекомендуется вручную удалить этот временный файл.'");
										ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяВременногоФайла%", СокрЛП(ИмяВременногоФайла));
										ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
										ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
										// Запись в журнал регистрации
										ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
											НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
											НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка удаления временного файла'"), // ИдентификаторШага
											УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
											, // ОбъектМетаданных
											, // Данные
											ТекстСообщения, // Комментарий
											ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
									КонецПопытки;

								Иначе
									ТекстСообщения = НСтр("ru='Неудачное завершение попытки %ПопыткаПолученияФайла% / %HTTPСоединениеКоличествоПопытокПолученияФайла% получения файла %ИмяФайла% с сервера %Сайт% для ленты новостей %ЛентаНовостей% во временный файл %ИмяВременногоФайла% - после попытки загрузки, файла все еще не существует.
										|(URL %URL%).'");
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПопыткаПолученияФайла%", ПопыткаПолученияФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%HTTPСоединениеКоличествоПопытокПолученияФайла%", НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сайт%", ТекущаяЛентаНовостей.Сайт);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяВременногоФайла%", ИмяВременногоФайла);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%URL%", ТекущееХТТПСоединение.Протокол + "://" + ТекущаяЛентаНовостей.Сайт + "/" + лкИмяФайлаНаСервере);
									// Запись в журнал регистрации
									ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
										НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
										НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Получение файлов с сервера новостей. Ошибка чтения временного файла после загрузки'"), // ИдентификаторШага
										УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
										, // ОбъектМетаданных
										, // Данные
										ТекстСообщения, // Комментарий
										ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
								КонецЕсли;

							// Непосредственно загрузка файла, конец.

						Исключение
							// ////? В случае ошибки HTTP 301 или HTTP 302 пытаться получить файл по новому адресу
							ТекстСообщения = НСтр("ru='Попытка %ПопыткаПолученияФайла% / %HTTPСоединениеКоличествоПопытокПолученияФайла%. Ошибка получения файла %ИмяФайла% с сервера %Сайт% для ленты новостей %ЛентаНовостей% во временный файл по причине: %ИнформацияОбОшибке%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПопыткаПолученияФайла%", ПопыткаПолученияФайла);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%HTTPСоединениеКоличествоПопытокПолученияФайла%", НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сайт%", ТекущаяЛентаНовостей.Сайт);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							// Запись в журнал регистрации
							ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
								НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
								НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Получение файлов с сервера новостей. Ошибка загрузки'"), // ИдентификаторШага
								УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
								, // ОбъектМетаданных
								, // Данные
								ТекстСообщения, // Комментарий
								ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
							// Пропустить ленту новостей.
							ЕстьОшибки = Истина;
						КонецПопытки;
					КонецЦикла;

					Если ЕстьОшибки = Ложь Тогда
						ДополнительноеВремя = 0;
					Иначе
						// Настроить так, чтобы следующая проверка была через 30 минут +-10 минут.
						// Разброс необходим, чтобы все клиенты не попали на одно и то же время, а были более-менее равномерно распределены.
						ГенераторСЧ = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяУниверсальнаяДата()));
						СлучайноеЧислоСекунд = ГенераторСЧ.СлучайноеЧисло(0, 30*60) - 10*60; // В секундах, -10..+20 минут
						ДополнительноеВремя = 30*60 + СлучайноеЧислоСекунд; // +30 минут +- 10..20 минут
					КонецЕсли;
					// Сохранить дату последнего выполнения / обновления.
					Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
					Запись.ВидОбновления = "Получение новостей"; // Идентификатор.
					Запись.ЛентаНовостей = ТекущаяЛентаНовостей.ЛентаНовостей;
					Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
					Если ТекущаяЛентаНовостей.ЧастотаОбновления = 1 Тогда // Ежедневно
						Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 24*60*60 + ДополнительноеВремя;
					ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 2 Тогда // Ежечасно
						Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60*60 + ДополнительноеВремя;
					ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 3 Тогда // Каждые 15 минут
						Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 15*60 + ДополнительноеВремя;
					ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 4 Тогда // Ежеминутно
						Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60 + ДополнительноеВремя;
					Иначе // Без автообновления или другое значение.
						Запись.ДатаСледующегоОбновления = '00010101';
					КонецЕсли;
					Запись.Записать(Истина);

					ТекстШага = НСтр("ru='Загрузка: загрузка файла новостей из ленты новостей %ЛентаНовостей% (протокол %Протокол%, сайт %Сайт%, имя файла %ИмяФайла%, имя файла на сервере %лкИмяФайлаНаСервере%).
						|Успешно? %Успешно%'");
					ТекстШага = СтрЗаменить(ТекстШага, "%ЛентаНовостей%", ТекущаяЛентаНовостей.ЛентаНовостей);
					ТекстШага = СтрЗаменить(ТекстШага, "%Протокол%", ТекущаяЛентаНовостей.Протокол);
					ТекстШага = СтрЗаменить(ТекстШага, "%Сайт%", ТекущаяЛентаНовостей.Сайт);
					ТекстШага = СтрЗаменить(ТекстШага, "%ИмяФайла%", ТекущаяЛентаНовостей.ИмяФайла);
					ТекстШага = СтрЗаменить(ТекстШага, "%лкИмяФайлаНаСервере%", лкИмяФайлаНаСервере);
					ТекстШага = СтрЗаменить(ТекстШага, "%Успешно%", (ЕстьОшибки = Ложь));
					ЛогШаговВыполнения.Добавить(
						Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
							ТекстШага,
							ТШагЛентаНовостей,
							ТекущаяУниверсальнаяДатаВМиллисекундах()));

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Загрузка: помещение ссылок на хранилища в таблицу лент новостей'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();

	// После загрузки файлов дополнительно проанализировать регистр сведений ДатыЗагрузкиПоследнихНовостей.
	ОбработкаНовостей.НайтиИОбработатьНеактивныеЛентыНовостей();

	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Загрузка: обработка неактивных лент новостей'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Завершение загрузки файлов новостей
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Первый проход по загруженным файлам новостей, определение формата файла (rss, atom),
//  запуск парсинга для каждого файла в отдельности.
//
// Параметры:
//  ЛентыНовостей - ТаблицаЗначений - таблица лент новостей со следующими колонками:
//   * Пометка                - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить;
//   * ОбязательныйКанал      - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить ВНЕ ЗАВИСИМОСТИ от галочки Пометка;
//   * ЛентаНовостей          - СправочникСсылки.ЛентаНовостей - Ссылка на элемент справочника для подстановки в элемент Справочник.Новости;
//   * АдресВХранилище        - Строка - Адрес загруженного файла во временном хранилище.
//  ЛогШаговВыполнения - Массив, Неопределено - в этот массив будет передана информация о шагах выполнения (массив структур) с ключами:
//   * Шаг            - Строка - произвольное описание шага;
//   * ВремяНачала    - Число - универсальное время начала шага в миллисекундах;
//   * ВремяОкончания - Число - универсальное время окончания шага в миллисекундах.
//
Процедура ПарсингХМЛФайловНовостей(ЛентыНовостей, ЛогШаговВыполнения = Неопределено) Экспорт

	Перем ЧтениеХМЛ, Файл;

	ТипМассив         = Тип("Массив");
	ТипДвоичныеДанные = Тип("ДвоичныеДанные");

	Если ТипЗнч(ЛогШаговВыполнения) <> ТипМассив Тогда
		ЛогШаговВыполнения = Новый Массив;
	КонецЕсли;

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало парсинга файлов новостей
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	// Перед обработками необходимо сохранить даты последних загрузок новостей из регистра сведений ДатыЗагрузкиПоследнихНовостей.
	НаборЗаписей = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); // Только чтение, без последующей записи.
	ТаблицаДатЗагрузокНовостейПередПолучением = НаборЗаписей.Выгрузить();

	// Прочитать файлы
	Для каждого ТекущаяСтрока Из ЛентыНовостей Цикл

		ТШагЛентаНовостей = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ЕстьОшибки = Ложь;
		СтатусОбработки = НСтр("ru='Начало обработки'");

		Если (ТекущаяСтрока.Пометка) ИЛИ (ТекущаяСтрока.ОбязательныйКанал) Тогда
			СтатусОбработки = СтатусОбработки + ", " + НСтр("ru='Помечена для обработки'");
			Если НЕ ПустаяСтрока(ТекущаяСтрока.АдресВХранилище) Тогда
				// Непосредственно загрузка из файла.
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекущаяСтрока.АдресВХранилище);
				Если ТипЗнч(ДвоичныеДанные) = ТипДвоичныеДанные Тогда
					ДвоичныеДанные.Записать(ИмяВременногоФайла);
				КонецЕсли;
				Файл = Новый Файл(СокрЛП(ИмяВременногоФайла));
				Если Файл.Существует() Тогда
					// Объект лкЧтениеТекста нужен для целей отладки - в случае, если файл не удастся прочесть как xml, то необходимо вывести первые 2000 символов в лог.
					лкЧтениеТекста = Новый ЧтениеТекста(СокрЛП(ИмяВременногоФайла));
					ЧтениеХМЛ = Новый ЧтениеXML;
					ЧтениеХМЛ.ОткрытьФайл(
						СокрЛП(ИмяВременногоФайла),
						Новый ПараметрыЧтенияXML(
							, // Версия,
							, // Язык
							, // ПробельныеСимволы
							, // ТипПроверкиПравильности
							, // ИгнорироватьОбъявлениеXML
							, // ИгнорироватьТипДокумента
							, // ИгнорироватьИнструкцииОбработки
							, // ИгнорироватьКомментарии
							, // ИгнорироватьПробельныеСимволы
							Истина)); // СекцииCDATAКакТекст
							// ИспользоватьИгнорируемыеПробельныеСимволы

					Попытка
						ХМЛТип = ПолучитьXMLТип(ЧтениеХМЛ);
					Исключение
						// Возможно, что в файле не xml, а код 301 ошибки или что-то другое.
						// В таком случае пропустить обработку этой ленты новостей и записать сообщение в лог.
						ИнформацияОбОшибке = ИнформацияОбОшибке();

						// Попытаться прочитать первые 2000 символов файла.
						лкНачалоФайла = лкЧтениеТекста.Прочитать(2000);

						ТекстСообщения = НСтр("ru='В загруженном файле для ленты новостей %ЛентаНовостей% находится текст не в формате xml. Лента новостей будет пропущена.
							|
							|Подробно:
							|%ИнформацияОбОшибке%
							|
							|Первые строки файла:
							|%ПервыеСтрокиФайла%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПервыеСтрокиФайла%", лкНачалоФайла);
						// Запись в журнал регистрации
						ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
							НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
							НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Ошибка формата файла'"), // ИдентификаторШага
							УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
							, // ОбъектМетаданных
							, // Данные
							ТекстСообщения, // Комментарий
							ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
						СтатусОбработки = СтатусОбработки + ", " + НСтр("ru='Формат файла не xml, или неправильно сформированный xml'");
						// Пропустить ленту новостей
						ЕстьОшибки = Истина;
					КонецПопытки;

					Если ЕстьОшибки = Ложь Тогда

						Если (НРег(ХМЛТип.ИмяТипа) = "feed") Тогда // И (ВРег(ХМЛТип.URIПространстваИмен)=ВРег("http://www.w3.org/2005/Atom")).
							// Прочитать БЕЗ типизации - каждый сайт оформляет atom ленты по своему, без указания пространств имен, с произвольной сортировкой полей и т.п.
							ОбъектХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
						ИначеЕсли (НРег(ХМЛТип.ИмяТипа) = "rss") Тогда // И (ВРег(ХМЛТип.URIПространстваИмен)=ВРег("http://www.w3.org/2005/RSS_2_0")).
							// Прочитать БЕЗ типизации - каждый сайт оформляет rss ленты по своему, без указания пространств имен, с произвольной сортировкой полей и т.п.
							ОбъектХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
							Если (ОбъектХДТО.Свойства().Получить("version") = Неопределено) Тогда
								ТекстСообщения = НСтр("ru='Невозможно определить версию rss в ленте новостей %ЛентаНовостей% - отсутствует свойство version. Необходимы данные в формате версии 2.0.'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
								// Запись в журнал регистрации
								ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
									НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
									НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Ошибка версии rss'"), // ИдентификаторШага
									УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
									, // ОбъектМетаданных
									, // Данные
									ТекстСообщения, // Комментарий
									ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
								СтатусОбработки = СтатусОбработки + ", " + НСтр("ru='Неправильно сформированный xml: отсутствует свойство version для rss'");
								// Пропустить ленту новостей
								ЕстьОшибки = Истина;
							Иначе
								лкВерсия = ОбъектХДТО.Получить("version");
								Если (Число(лкВерсия) <> 2.0) Тогда
									ТекстСообщения = НСтр("ru='Неподдерживаемая версия новостей RSS %version% в ленте новостей %ЛентаНовостей%'");
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%version%", ОбъектХДТО.version);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
									// Запись в журнал регистрации
									ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
										НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
										НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Ошибка версии rss'"), // ИдентификаторШага
										УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
										, // ОбъектМетаданных
										, // Данные
										ТекстСообщения, // Комментарий
										ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
									СтатусОбработки = СтатусОбработки + ", " + НСтр("ru='Неправильно сформированный xml: свойство version для rss не равно 2.0'");
									// Пропустить ленту новостей
									ЕстьОшибки = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							// Попытаться прочитать первые 2000 символов файла.
							лкНачалоФайла = лкЧтениеТекста.Прочитать(2000);

							ТекстСообщения = НСтр("ru='Неподдерживаемый тип новостей %ТипНовостей% в файле %ИмяФайла% для ленты новостей %ЛентаНовостей%
								|
								|Первые строки файла:
								|%ПервыеСтрокиФайла%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипНовостей%", ХМЛТип.URIПространстваИмен + ", " + ХМЛТип.ИмяТипа);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", СокрЛП(ИмяВременногоФайла));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПервыеСтрокиФайла%", лкНачалоФайла);
							// Запись в журнал регистрации
							ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
								НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
								НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Ошибка формата файла'"), // ИдентификаторШага
								УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
								, // ОбъектМетаданных
								, // Данные
								ТекстСообщения, // Комментарий
								ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
							СтатусОбработки = СтатусОбработки + ", " + НСтр("ru='Неправильно сформированный xml: ожидаются данные в формате rss (rss.channel) или atom (feed)'");
							// Пропустить ленту новостей.
							ЕстьОшибки = Истина;
						КонецЕсли;

						Если ЕстьОшибки = Ложь Тогда
							// Обработка файла новостей.
							ПарсингХМЛФайлаНовостей(ОбъектХДТО, НРег(ХМЛТип.ИмяТипа), ТекущаяСтрока.ЛентаНовостей);
						КонецЕсли;

					КонецЕсли;

					Попытка
						лкЧтениеТекста.Закрыть();
						ЧтениеХМЛ.Закрыть();
						УдалитьФайлы(ИмяВременногоФайла);
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстСообщения = НСтр("ru='ПарсингХМЛФайловНовостей: Не удалось удалить временный файл %ИмяВременногоФайла% для ленты новостей %ЛентаНовостей% по причине:
							|%ИнформацияОбОшибке%
							|
							|Рекомендуется вручную удалить этот временный файл.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяВременногоФайла%", СокрЛП(ИмяВременногоФайла));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						// Запись в журнал регистрации
						ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
							НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
							НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Ошибка удаления временного файла'"), // ИдентификаторШага
							УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
							, // ОбъектМетаданных
							, // Данные
							ТекстСообщения, // Комментарий
							ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
					КонецПопытки;

				Иначе
					ТекстСообщения = НСтр("ru='Отсутствует загруженный файл %ИмяФайла% для ленты новостей %ЛентаНовостей%. Возможно, недостаточно места на диске, нет прав для записи в этот каталог или произошла какая-то другая ошибка.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", СокрЛП(ИмяВременногоФайла));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
					// Запись в журнал регистрации
					ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
						НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Ошибка чтения файла'"), // ИдентификаторШага
						УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
						, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
					СтатусОбработки = СтатусОбработки + ", " + НСтр("ru='Не удалось сохранить файл из временного хранилища'");
					// Пропустить ленту новостей.
					ЕстьОшибки = Истина;
				КонецЕсли;

			Иначе
				ТекстСообщения = НСтр("ru='Не загружен файл новостей для ленты новостей %ЛентаНовостей% (пустой адрес в хранилище после загрузки файла [%ЛентаНовостей.ИмяФайла%] с сайта [%ЛентаНовостей.Сайт%] по протоколу [%ЛентаНовостей.Протокол%]). Лента новостей не обработана.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей.Протокол%", ТекущаяСтрока.Протокол);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей.Сайт%",     ТекущаяСтрока.Сайт);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей.ИмяФайла%", ТекущаяСтрока.ИмяФайла);
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Ошибка чтения файла из временного хранилища'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.ЛентыНовостей, // ОбъектМетаданных
					ТекущаяСтрока.ЛентаНовостей, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				СтатусОбработки = СтатусОбработки + ", " + НСтр("ru='Отсутствует файл для обработки (пустой адрес в хранилище)'");
			КонецЕсли;

		Иначе
			СтатусОбработки = СтатусОбработки + ", " + НСтр("ru='Не помечена для обработки'");
		КонецЕсли;

		ТекстШага = НСтр("ru='Парсинг: лента новостей %ЛентаНовостей%.
			|Статус обработки: %СтатусОбработки%.
			|Успешно? %Успешно%'");
		ТекстШага = СтрЗаменить(ТекстШага, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
		ТекстШага = СтрЗаменить(ТекстШага, "%СтатусОбработки%", СтатусОбработки);
		ТекстШага = СтрЗаменить(ТекстШага, "%Успешно%", (ЕстьОшибки = Ложь));
		ЛогШаговВыполнения.Добавить(
			Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
				ТекстШага,
				ТШагЛентаНовостей,
				ТекущаяУниверсальнаяДатаВМиллисекундах()));

	КонецЦикла;

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Завершение парсинга файлов новостей
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	// Вспомогательные обработки после парсинга файлов новостей.
#Область ВспомогательныеОбработкиОсновные

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало вспомогательных мероприятий после парсинга файлов новостей
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Вспомогательные мероприятия после парсинга файлов новостей. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

#Область ВспомогательныеОбработкиОсновные_КатегорииНовостейПростыеНеобработанные

	// После загрузки новостей обработать регистр сведений "КатегорииНовостейПростыеНеобработанные".
	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбработкаНовостейВызовСервера.ПересчитатьНеобработанныеКатегорииНовостей();
	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Парсинг: вспомогательные мероприятия, ПересчитатьНеобработанныеКатегорииНовостей'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ОптимизацияОтборовПоНовостям

	// Доступные категории лент новостей уже обновлены в "ПарсингХМЛФайлаНовостей".
	// Удалить неправильные отборы, которые могут помешать проверке общих и пользовательских отборов.
	// Может работать в модели сервиса.
	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбработкаНовостейВызовСервера.ОптимизироватьОтборыПоНовостям();
	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Парсинг: вспомогательные мероприятия, ОптимизироватьОтборыПоНовостям'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ПересчитатьОтборыПоНовостям_РедкоМеняющиеся

	// Возможно, дозагрузились значения стандартных списков и заполнились категории новостей,
	//  а значит можно проверять новости на соответствие отборам:

	// Рассчитать заново регистр "РассчитанныеОтборыПоНовостям_РедкоМеняющиеся" для отборов
	//  по новостям по редко меняющимся категориям (версия конфигурации, платформы, продукт).
	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбработкаНовостейВызовСервера.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся();
	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Парсинг: вспомогательные мероприятия, ПересчитатьОтборыПоНовостям_РедкоМеняющиеся'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ПересчитатьОтборыПоНовостям_Общие

	// Рассчитать заново регистр "РассчитанныеОтборыПоНовостям_Общие" для отборов
	//  по новостям, настроенных администратором.
	// Здесь же пересчитаются отборы по всем пользователям - регистр "РассчитанныеОтборыПоНовостям_Пользовательские" для отборов
	//  по новостям, настроенных пользователем.
	// Может работать в модели сервиса.
	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбработкаНовостейВызовСервера.ПересчитатьОтборыПоНовостям_Общие();
	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Парсинг: вспомогательные мероприятия, ПересчитатьОтборыПоНовостям_Общие'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ОбновлениеПериодическихСвойствНовостей

	// Пересчитать регистр "ПериодическиеСвойстваНовостей" - возможно, поменялась важность / актуальность
	//  и другие периодические свойства новостей. Также надо добавить записи для новых новостей.
	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбработкаНовостейВызовСервера.ОбновлениеПериодическихСвойствНовостей();
	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Парсинг: вспомогательные мероприятия, ОбновлениеПериодическихСвойствНовостей'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ОбновлениеПривязокКМетаданным

	// Пересчитать регистр "ПривязкаНовостейКМетаданным" - возможно, поменялась важность
	//  и другие периодические свойства новостей. Также надо добавить записи для новых новостей.
	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбработкаНовостейВызовСервера.ОбновлениеПривязокКМетаданным();
	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Парсинг: вспомогательные мероприятия, ОбновлениеПривязокКМетаданным'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

#КонецОбласти

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Завершение вспомогательных мероприятий после парсинга файлов новостей
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Вспомогательные мероприятия после парсинга файлов новостей. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

#КонецОбласти

	// Определенные разработчиком (переопределяемые) обработки после парсинга файлов новостей.
#Область ВспомогательныеОбработкиПереопределяемые

	// Запись в журнал регистрации
	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало настроенных разработчиками мероприятий после парсинга файлов новостей
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Настроенные разработчиками мероприятия после парсинга файлов новостей. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	// После загрузки новостей их можно дополнительно обработать.
	// Может работать в модели сервиса.
	ТШаг = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостиПослеПолучения(ТаблицаДатЗагрузокНовостейПередПолучением);
	ЛогШаговВыполнения.Добавить(
		Новый Структура("Шаг, ВремяНачала, ВремяОкончания",
			НСтр("ru='Парсинг: вспомогательные мероприятия (переопределяемые), ДополнительноОбработатьНовостиПослеПолучения'"),
			ТШаг,
			ТекущаяУниверсальнаяДатаВМиллисекундах()));

	// Запись в журнал регистрации
	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Завершение настроенных разработчиками мероприятий после парсинга файлов новостей
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Настроенные разработчиками мероприятия после парсинга файлов новостей. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

#КонецОбласти

КонецПроцедуры

// Функция возвращает таблицу всех стандартных списков, требующих обновления.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьСтандартныеСпискиТребующиеОбновления() Экспорт

	ТаблицаОбновляемыхДанных = Новый ТаблицаЗначений;

	// Возможна ситуация, когда регистр сведений пустой.
	// Некоторые записи необходимо добавить вручную:
	// - "Список лент новостей".
	Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
	ПроверяемыйСписок = "Список лент новостей"; // Идентификатор.
	Запись.Список = ПроверяемыйСписок;
	Запись.Прочитать(); // Запись будет ниже.
	Если НЕ Запись.Выбран() Тогда
		Запись.Список = ПроверяемыйСписок;
		Запись.ТекущаяВерсияНаКлиенте = '00010101';
		Запись.ТекущаяВерсияНаСервере = '00010102'; // Дата больше, чтобы инициировать обмен
		Запись.Записать(Истина);
	КонецЕсли;
	// - "Список категорий новостей"
	Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
	ПроверяемыйСписок = "Список категорий новостей"; // Идентификатор.
	Запись.Список = ПроверяемыйСписок;
	Запись.Прочитать(); // Запись будет ниже.
	Если НЕ Запись.Выбран() Тогда
		Запись.Список = ПроверяемыйСписок;
		Запись.ТекущаяВерсияНаКлиенте = '00010101';
		Запись.ТекущаяВерсияНаСервере = '00010102'; // Дата больше, чтобы инициировать обмен
		Запись.Записать(Истина);
	КонецЕсли;
	// - Категории новостей (по значению).
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПВХ.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.КатегорииНовостей КАК ПВХ
		|ГДЕ
		|	ПВХ.Код <> """"
		|	И ПВХ.ОбновляетсяССервера = ИСТИНА
		|	И ПВХ.ЗаполняетсяАвтоматически = ЛОЖЬ
		|";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
			ПроверяемыйСписок = Выборка.Ссылка;
			Запись.Список = ПроверяемыйСписок;
			Запись.Прочитать(); // Запись будет ниже.
			Если НЕ Запись.Выбран() Тогда
				Запись.Список = ПроверяемыйСписок;
				Запись.ТекущаяВерсияНаКлиенте = '00010101';
				Запись.ТекущаяВерсияНаСервере = '00010102'; // Дата больше, чтобы инициировать обмен
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// - Категории новостей (по тексту "Значение категории новостей:").
	// Эти значения не надо добавлять в регистр.

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.Список                      КАК Список,
		|	ВЫБОР
		|		// Списки категорий новостей ни от кого не зависят - загружать их в самом начале
		|		КОГДА (ТипЗначения(Рег.Список) = Тип(Строка)) И (Рег.Список = ""Список категорий новостей"") ТОГДА
		|			1
		|		// Значения списков категорий новостей зависят только от списков категорий
		|		КОГДА (ТипЗначения(Рег.Список) = Тип(Строка)) И (Рег.Список ПОДОБНО ""Значения категории новостей:%"") ТОГДА
		|			2
		|		КОГДА Рег.Список ССЫЛКА ПланВидовХарактеристик.КатегорииНовостей ТОГДА
		|			2
		|		// В лентах новостей могут быть ссылки как на списки категорий, так и на значения списков категорий
		|		КОГДА (ТипЗначения(Рег.Список) = Тип(Строка)) И (Рег.Список = ""Список лент новостей"") ТОГДА
		|			3
		|	КОНЕЦ                           КАК Порядок,
		|	Рег.ТекущаяВерсияНаКлиенте      КАК ТекущаяВерсияНаКлиенте,
		|	Рег.ТекущаяВерсияНаСервере      КАК ТекущаяВерсияНаСервере,
		|	ВЫРАЗИТЬ("" "" КАК Строка(200)) КАК ПредставлениеДляЗагрузки
		|ИЗ
		|	РегистрСведений.ДатыОбновленияСтандартныхСписковНовостей КАК Рег
		|ГДЕ
		|	Рег.ТекущаяВерсияНаКлиенте < Рег.ТекущаяВерсияНаСервере
		|";
	Результат = Запрос.Выполнить(); // ПолучитьСтандартныеСпискиТребующиеОбновления().
	Если НЕ Результат.Пустой() Тогда
		ТаблицаОбновляемыхДанных = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ТаблицаОбновляемыхДанных.Сортировать("Порядок");
		Для каждого ТекущаяСтрока Из ТаблицаОбновляемыхДанных Цикл
			Если ТипЗнч(ТекущаяСтрока.Список) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
				ТекстСообщения = НСтр("ru='Загрузка значений категории %Выборка.Список% (%Выборка.Список.Код%)'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выборка.Список%", ТекущаяСтрока.Список);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выборка.Список.Код%", СокрЛП(ТекущаяСтрока.Список.Код));
				ТекущаяСтрока.ПредставлениеДляЗагрузки = ТекстСообщения;
			Иначе
				Если ТекущаяСтрока.Список = "Список лент новостей" Тогда // Идентификатор.
					ТекстСообщения = НСтр("ru='Загрузка списка лент новостей'");
					ТекущаяСтрока.ПредставлениеДляЗагрузки = ТекстСообщения;
				ИначеЕсли ТекущаяСтрока.Список = "Список категорий новостей" Тогда // Идентификатор.
					ТекстСообщения = НСтр("ru='Загрузка списка категорий новостей'");
					ТекущаяСтрока.ПредставлениеДляЗагрузки = ТекстСообщения;
				ИначеЕсли Найти(ВРег(ТекущаяСтрока.Список), ВРег("Значения категории новостей:")) = 1 Тогда // Идентификатор.
					ТекстСообщения = НСтр("ru='Загрузка значений категории с кодом %Выборка.Список%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Выборка.Список%", Прав(ТекущаяСтрока.Список, СтрДлина(ТекущаяСтрока.Список) - 28));
					ТекущаяСтрока.ПредставлениеДляЗагрузки = ТекстСообщения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТаблицаОбновляемыхДанныхХДТО = СериализаторXDTO.ЗаписатьXDTO(ТаблицаОбновляемыхДанных);
	ТекстСообщения = НСтр("ru='УправлениеНовостями.ПолучитьСтандартныеСпискиТребующиеОбновления, Таблица обновляемых данных:
		|%ТаблицаОбновляемыхДанных%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаОбновляемыхДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(ТаблицаОбновляемыхДанныхХДТО));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Новости. Сервис и регламент. ИнформацияОбОбновлении'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Возврат ТаблицаОбновляемыхДанных;

КонецФункции

// Функция загружает список с сервера.
//
// Параметры:
//  Список                 - Строка, ПланВидовХарактеристикСсылка.КатегорииНовостей;
//  ТекущаяВерсияНаКлиенте - Дата - для определения, какие данные надо загружать;
//  Прокси                 - WSПрокси - прокси веб-сервиса. Если не передан, то создается в функции.
//
// Возвращаемое значение:
//  Булево - ИСТИНА (был загружен) или ЛОЖЬ (таймаут или другая ошибка).
//
Функция ОбновитьСтандартныйСписокССервера(Список, ТекущаяВерсияНаКлиенте, Прокси = Неопределено) Экспорт

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");
	ТипWSПрокси     = Тип("WSПрокси");

	// Непосредственно загрузка данных с помощью веб-сервисов.
	БылиОшибки = Ложь;

	Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
		Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков();
	КонецЕсли;

	Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
		БылиОшибки = Истина;
		Возврат НЕ БылиОшибки; // Истина = Все ОК, Ложь = список не загрузился.
	КонецЕсли;

	// Возможно, имя конфигурации из метаданных было заменено на какой-то синоним - взять синоним.
	configName    = СокрЛП(Метаданные.Имя);
	configVersion = СокрЛП(Метаданные.Версия);
	Продукты = ОбработкаНовостейВызовСервера.ПолучитьЗначениеПредопределеннойКатегории("Product");
	Если Продукты.Количество() > 0 Тогда
		Продукт = Продукты[Продукты.Количество()-1];
		ГдеРазделитель = Найти(Продукт, ",");
		Если ГдеРазделитель > 0 Тогда
			configName    = Лев(Продукт, ГдеРазделитель-1);
			configVersion = Прав(Продукт, СтрДлина(Продукт) - ГдеРазделитель);
		КонецЕсли;
	КонецЕсли;

	lastSynchronizationDateTime = ТекущаяВерсияНаКлиенте;
	errCode                     = "";
	errDescription              = "";

	Если ТипЗнч(Список) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
		Если НЕ ПустаяСтрока(СокрЛП(Список.Код)) Тогда
			СписокОбновленныхДанных = Неопределено;
			Попытка
				СписокОбновленныхДанных = Прокси.getUpdatedCategoryValuesByCode(
					configName,
					configVersion,
					СокрЛП(Список.Код),
					lastSynchronizationDateTime,
					errCode,
					errDescription);
			Исключение
				// ////? Проанализировать текст ошибки - может не те параметры передали, а не таймаут?
				// Записать в журнал регистрации.
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = НСтр("ru='Ошибка обновления списка значений категории новостей (Прокси.getUpdatedCategoryValuesByCode):
					|sCategoryCode = %СокрЛП(Список.Код)%
					|errCode = %errCode%
					|errDescription = %errDescription%
					|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СокрЛП(Список.Код)%", СокрЛП(Список.Код));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка классификаторов. Список значений категории. Ошибка'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				БылиОшибки = Истина;
			КонецПопытки;

			Если ТипЗнч(СписокОбновленныхДанных) = ТипОбъектXDTO Тогда

				ТекстСообщения = НСтр("ru='Информация об обновлении значений категорий новостей (Прокси.getUpdatedCategoryValuesByCode):
					|configName = %configName%
					|configVersion = %configVersion%
					|Код категории: %КодКатегории%
					|lastSynchronizationDateTime = %lastSynchronizationDateTime%
					|errCode = %errCode%
					|errDescription = %errDescription%
					|Полученные данные:
					|%Данные%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configName%", configName);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configVersion%", configVersion);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%lastSynchronizationDateTime%", lastSynchronizationDateTime);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодКатегории%", СокрЛП(Список.Код));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Данные%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(СписокОбновленныхДанных, Прокси.ФабрикаXDTO));
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка классификаторов. Список значений категории. Информация'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				Если (СписокОбновленныхДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
					И (СписокОбновленныхДанных.Тип().Имя = "categoryValueListType") Тогда
					// Непосредственно загрузка.
					ДатаСамогоНовогоЭлемента = '00010101';
					Если ТипЗнч(СписокОбновленныхДанных.categoryValue) = ТипСписокXDTO Тогда // Даже если передали один элемент, то передастся как "СписокXDTO", т.к. так прописано в схеме ХДТО.

						Для каждого ТекущаяСтрокаХДТО Из СписокОбновленныхДанных.categoryValue Цикл
							ДатаСамогоНовогоЭлемента = Макс(ДатаСамогоНовогоЭлемента, УниверсальноеВремя(ТекущаяСтрокаХДТО.updated, ЧасовойПоясСеанса()));

							// Загрузить значение.
							Режим = "";
							лкОбъект = ЗаполнитьОбъектЗначениеКатегорииНовостей(Список, ТекущаяСтрокаХДТО, Режим);

							// Если объект еще не был записан в базе, и пришел уже с пометкой удаления, то не записывать его.
							Если лкОбъект.Ссылка.Пустая()
									И (лкОбъект.ПометкаУдаления = Истина) Тогда
								// Пришел помеченный на удаление объект - не создавать его.
							Иначе
								Попытка
									лкОбъект.Записать();
									// После записи классификатора можно провести дополнительные обработки.
									ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(лкОбъект.Ссылка);
								Исключение
									ИнформацияОбОшибке = ИнформацияОбОшибке();
									ТекстСообщения = НСтр("ru='Ошибка записи элемента (%Режим%) с уникальным идентификатором %ТекущаяСтрокаХДТО.guid%:
										|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Режим%", Режим);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрокаХДТО.guid%", ТекущаяСтрокаХДТО.guid);
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
									ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
										НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
										НСтр("ru='Новости. Загрузка классификаторов. Список значений категории. Ошибка'"), // ИдентификаторШага
										УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
										, // ОбъектМетаданных
										, // Данные
										ТекстСообщения, // Комментарий
										ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
								КонецПопытки;
							КонецЕсли;

						КонецЦикла;

						// Обновить данные в регистре сведений "ДатыОбновленияСтандартныхСписковНовостей".
						Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
						Запись.Список = Список;
						Запись.Прочитать(); // Запись будет ниже.
						Если Запись.Выбран() Тогда
							Если Запись.ТекущаяВерсияНаКлиенте < ДатаСамогоНовогоЭлемента Тогда
								Запись.Список = Список;
								Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
								Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
								Запись.Записать(Истина);
							КонецЕсли;
						Иначе
							Запись.Список = Список;
							Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
							Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
							Запись.Записать(Истина);
						КонецЕсли;

					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Список = "Список лент новостей" Тогда // Идентификатор.
		// Обновление списка лент новостей проходит в два этапа:
		// На первом этапе происходит загрузка измененных / добавленных данных;
		// На втором этапе сравнивается список всех лент новостей в ИБ и всех лент новостей на сервере 1С,
		//  далее ленты новостей, отключенные на сервере 1С, помечаются на удаление.

		// Этап 1. Изменение / добавление лент новостей.
		СписокОбновленныхДанных = Неопределено;
		Попытка
			СписокОбновленныхДанных = Прокси.getUpdatedChannels(
				configName,
				configVersion,
				lastSynchronizationDateTime,
				errCode,
				errDescription);
		Исключение
			// ////? Проанализировать текст ошибки - может не те параметры передали, а не таймаут?
			// Записать в журнал регистрации.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru='Ошибка обновления списка лент новостей (Прокси.getUpdatedChannels):
				|errCode = %errCode%
				|errDescription = %errDescription%
				|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка классификаторов. Список лент новостей. Ошибка'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			БылиОшибки = Истина;
		КонецПопытки;

		Если ТипЗнч(СписокОбновленныхДанных) = ТипОбъектXDTO Тогда

			ТекстСообщения = НСтр("ru='Информация об обновлении списка лент новостей (Прокси.getUpdatedChannels):
				|configName = %configName%
				|configVersion = %configVersion%
				|lastSynchronizationDateTime = %lastSynchronizationDateTime%
				|errCode = %errCode%
				|errDescription = %errDescription%
				|Полученные данные:
				|%Данные%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configName%", configName);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configVersion%", configVersion);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%lastSynchronizationDateTime%", lastSynchronizationDateTime);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Данные%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(СписокОбновленныхДанных, Прокси.ФабрикаXDTO));
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка классификаторов. Список лент новостей. Информация'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			Если (СписокОбновленныхДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
				И (СписокОбновленныхДанных.Тип().Имя = "channelListType") Тогда
				// Непосредственно загрузка
				ДатаСамогоНовогоЭлемента = '00010101';
				Если ТипЗнч(СписокОбновленныхДанных.channel) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

					Для каждого ТекущаяСтрокаХДТО Из СписокОбновленныхДанных.channel Цикл
						ДатаСамогоНовогоЭлемента = Макс(ДатаСамогоНовогоЭлемента, УниверсальноеВремя(ТекущаяСтрокаХДТО.updated, ЧасовойПоясСеанса()));

						// Загрузить значение.
						Режим = "";
						лкОбъект = ЗаполнитьОбъектЛентаНовостей(ТекущаяСтрокаХДТО, Режим);

						// Если объект еще не был записан в базе, и пришел уже с пометкой удаления, то не записывать его.
						Если лкОбъект.Ссылка.Пустая()
								И (лкОбъект.ПометкаУдаления = Истина) Тогда
							// Пришел помеченный на удаление объект - не создавать его.
						Иначе
							Попытка
								лкОбъект.Записать();
								// После записи классификатора можно провести дополнительные обработки.
								ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(лкОбъект.Ссылка);
							Исключение
								ИнформацияОбОшибке = ИнформацияОбОшибке();
								ТекстСообщения = НСтр("ru='Ошибка записи элемента (%Режим%) с уникальным идентификатором %ТекущаяСтрокаХДТО.guid%:
									|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Режим%", Режим);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрокаХДТО.guid%", ТекущаяСтрокаХДТО.guid);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
									НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
									НСтр("ru='Новости. Загрузка классификаторов. Список лент новостей. Ошибка'"), // ИдентификаторШага
									УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
									, // ОбъектМетаданных
									, // Данные
									ТекстСообщения, // Комментарий
									ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
							КонецПопытки;
						КонецЕсли;

					КонецЦикла;

					// Обновить данные в регистре сведений "ДатыОбновленияСтандартныхСписковНовостей".
					Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
					Запись.Список = "Список лент новостей"; // Идентификатор.
					Запись.Прочитать(); // Запись будет ниже.
					Если Запись.Выбран() Тогда
						Если Запись.ТекущаяВерсияНаКлиенте < ДатаСамогоНовогоЭлемента Тогда
							Запись.Список = "Список лент новостей"; // Идентификатор.
							Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
							Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
							Запись.Записать(Истина);
						КонецЕсли;
					Иначе
						Запись.Список = "Список лент новостей"; // Идентификатор.
						Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
						Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
						Запись.Записать(Истина);
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Этап 2. Отключение лент новостей, отключенных от этой конфигурации (или помеченных на удаление) на сервере 1С.
		СписокВсехДанных = Неопределено;
		Попытка
			СписокВсехДанных = Прокси.getAllChannels(
				configName,
				configVersion,
				errCode,
				errDescription);
		Исключение
			// ////? Проанализировать текст ошибки - может не те параметры передали, а не таймаут?
			// Записать в журнал регистрации.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru='Ошибка обновления списка лент новостей (Прокси.getAllChannels):
				|errCode = %errCode%
				|errDescription = %errDescription%
				|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка классификаторов. Список лент новостей. Ошибка'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			БылиОшибки = Истина;
		КонецПопытки;

		Если ТипЗнч(СписокВсехДанных) = ТипОбъектXDTO Тогда

			ТекстСообщения = НСтр("ru='Информация об обновлении списка лент новостей (Прокси.getAllChannels):
				|configName = %configName%
				|configVersion = %configVersion%
				|errCode = %errCode%
				|errDescription = %errDescription%
				|Полученные данные:
				|%Данные%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configName%", configName);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configVersion%", configVersion);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Данные%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(СписокВсехДанных, Прокси.ФабрикаXDTO));
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия.
				НСтр("ru='Новости. Загрузка классификаторов. Список лент новостей. Информация'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			Если (СписокВсехДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
				И (СписокВсехДанных.Тип().Имя = "channelListType") Тогда
				// Непосредственно проверка
				Если ТипЗнч(СписокВсехДанных.channel) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

					// В Новостном центре могли отключить какую-то ленту новостей, поэтому если lastSynchronizationDateTime - пустая,
					//  то подготовить текущий список лент новостей и пометить на удаление те, которых нет в списке, пришедшим с сервера.
					СписокВсехЗагруженныхСерверныхЛентНовостей = Новый СписокЗначений;
					Запрос = Новый Запрос;
					Запрос.Текст = "
						|ВЫБРАТЬ
						|	Спр.Ссылка КАК ЛентаНовостей
						|ИЗ
						|	Справочник.ЛентыНовостей КАК Спр
						|ГДЕ
						|	Спр.ЗагруженоССервера = ИСТИНА // Загруженные с сервера 1С
						|	И Спр.ПометкаУдаления = ЛОЖЬ // Ранее не удаленные
						|";
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ РезультатЗапроса.Пустой() Тогда
						СписокВсехЗагруженныхСерверныхЛентНовостей.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЛентаНовостей"));
						Для Каждого ТекущийЭлементСписка Из СписокВсехЗагруженныхСерверныхЛентНовостей Цикл
							ТекущийЭлементСписка.Пометка = Ложь;
						КонецЦикла;
					КонецЕсли;

					Для каждого ТекущаяСтрокаХДТО Из СписокВсехДанных.channel Цикл
						ЛентаНовостейСсылка = Справочники.ЛентыНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекущаяСтрокаХДТО.guid));
						Если НЕ ПустаяСтрока(ЛентаНовостейСсылка.ВерсияДанных) Тогда // Объект существует в ИБ.
							// Найти эту ленту новостей в списке и отметить, что она присутствует на сервере 1С.
							НайденнаяЛентаНовостей = СписокВсехЗагруженныхСерверныхЛентНовостей.НайтиПоЗначению(ЛентаНовостейСсылка);
							Если НайденнаяЛентаНовостей <> Неопределено Тогда
								НайденнаяЛентаНовостей.Пометка = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

					// Если на сервере 1С отключили какую-то ленту новостей. то пометить ее на удаление.
					Для Каждого ТекущийЭлементСписка Из СписокВсехЗагруженныхСерверныхЛентНовостей Цикл
						Если ТекущийЭлементСписка.Пометка = Ложь Тогда
							ЛентаНовостейОбъект = ТекущийЭлементСписка.Значение.ПолучитьОбъект();
							ЛентаНовостейОбъект.ДополнительныеСвойства.Вставить("УдалениеЛентыНовостейЗагруженнойССервера", Истина);
							ЛентаНовостейОбъект.УстановитьПометкуУдаления(Истина); // ////? Установить период автообновления = Вручную ?
							ТекстСообщения = НСтр("ru='Лента новостей %ЛентаНовостейНаименование% помечена на удаление, т.к. она была отключена на сервере 1С'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостейНаименование%", ЛентаНовостейОбъект.Наименование);
							// Запись в журнал регистрации
							ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
								НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
								НСтр("ru='Новости. Все обновления новостей. Обновление классификаторов. Отключение ленты новостей'"), // ИдентификаторШага
								УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
								, // ОбъектМетаданных
								, // Данные
								ТекстСообщения, // Комментарий
								ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
						КонецЕсли;
					КонецЦикла;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Список = "Список категорий новостей" Тогда // Идентификатор.
		СписокОбновленныхДанных = Неопределено;
		Попытка
			СписокОбновленныхДанных = Прокси.getUpdatedCategories(
				configName,
				configVersion,
				lastSynchronizationDateTime,
				errCode,
				errDescription);
		Исключение
			// ////? Проанализировать текст ошибки - может не те параметры передали, а не таймаут?
			// Записать в журнал регистрации.
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru='Ошибка обновления списка категорий новостей (Прокси.getUpdatedCategories):
				|errCode = %errCode%
				|errDescription = %errDescription%
				|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка классификаторов. Список категорий. Ошибка'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			БылиОшибки = Истина;
		КонецПопытки;

		Если ТипЗнч(СписокОбновленныхДанных) = ТипОбъектXDTO Тогда

			ТекстСообщения = НСтр("ru='Информация об обновлении списка категорий новостей (Прокси.getUpdatedCategories):
				|configName = %configName%
				|configVersion = %configVersion%
				|lastSynchronizationDateTime = %lastSynchronizationDateTime%
				|errCode = %errCode%
				|errDescription = %errDescription%
				|Полученные данные:
				|%Данные%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configName%", configName);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configVersion%", configVersion);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%lastSynchronizationDateTime%", lastSynchronizationDateTime);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Данные%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(СписокОбновленныхДанных, Прокси.ФабрикаXDTO));
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка классификаторов. Список лент новостей. Информация'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			Если (СписокОбновленныхДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
				И (СписокОбновленныхДанных.Тип().Имя = "categoriesListType") Тогда
				// Непосредственно загрузка
				ДатаСамогоНовогоЭлемента = '00010101';
				Если ТипЗнч(СписокОбновленныхДанных.category) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

					Для каждого ТекущаяСтрокаХДТО Из СписокОбновленныхДанных.category Цикл
						ДатаСамогоНовогоЭлемента = Макс(ДатаСамогоНовогоЭлемента, УниверсальноеВремя(ТекущаяСтрокаХДТО.updated, ЧасовойПоясСеанса()));

						// Загрузить значение
						Режим = "";
						лкОбъект = ЗаполнитьОбъектКатегорияНовостей(ТекущаяСтрокаХДТО, Режим);

						// Если объект еще не был записан в базе, и пришел уже с пометкой удаления, то не записывать его.
						Если лкОбъект.Ссылка.Пустая()
								И (лкОбъект.ПометкаУдаления = Истина) Тогда
							// Пришел помеченный на удаление объект - не создавать его.
						Иначе
							Попытка
								лкОбъект.Записать();
								// После записи классификатора можно провести дополнительные обработки.
								ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(лкОбъект.Ссылка);
							Исключение
								ИнформацияОбОшибке = ИнформацияОбОшибке();
								ТекстСообщения = НСтр("ru='Ошибка записи элемента (%Режим%) с уникальным идентификатором %ТекущаяСтрокаХДТО.guid%:
									|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Режим%", Режим);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрокаХДТО.guid%", ТекущаяСтрокаХДТО.guid);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
									НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
									НСтр("ru='Новости. Загрузка классификаторов. Список категорий. Ошибка'"), // ИдентификаторШага
									УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
									, // ОбъектМетаданных
									, // Данные
									ТекстСообщения, // Комментарий
									ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
							КонецПопытки;
						КонецЕсли;

					КонецЦикла;

					// Обновить данные в регистре сведений "ДатыОбновленияСтандартныхСписковНовостей".
					Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
					Запись.Список = "Список категорий новостей"; // Идентификатор.
					Запись.Прочитать(); // Запись будет ниже.
					Если Запись.Выбран() Тогда
						Если Запись.ТекущаяВерсияНаКлиенте < ДатаСамогоНовогоЭлемента Тогда
							Запись.Список = "Список категорий новостей"; // Идентификатор.
							Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
							Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
							Запись.Записать(Истина);
						КонецЕсли;
					Иначе
						Запись.Список = "Список категорий новостей"; // Идентификатор.
						Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
						Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
						Запись.Записать(Истина);
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(ВРег(Список), ВРег("Значения категории новостей:")) = 1 Тогда // Идентификатор.
		// Загружаются значения справочника ЗначенияКатегорийНовостей, которые ранее не были загружены,
		//  т.к. не было владельца - элемента плана видов характеристик КатегорииНовостей.
		// 1. Определить уникальный идентификатор.
		СписокУИН = Прав(Список, СтрДлина(Список) - 28); // только уникальный идентификатор
		Если НЕ ПустаяСтрока(СписокУИН) Тогда
			// Проверить - есть ли такой элемент плана видов характеристик.
			// Если нет такого элемента, тогда невозможно загрузить значения:
			//   Справочника ЗначенияКатегорийНовостей - нечего будет подставить как Владельца.
			Владелец = ПланыВидовХарактеристик.КатегорииНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(СписокУИН));
			Если НЕ ПустаяСтрока(Владелец.ВерсияДанных) Тогда
				СписокОбновленныхДанных = Неопределено;
				Попытка
					СписокОбновленныхДанных = Прокси.getUpdatedCategoryValuesByGuid(
						configName,
						configVersion,
						СокрЛП(СписокУИН),
						lastSynchronizationDateTime,
						errCode,
						errDescription);
				Исключение
					// ////? Проанализировать текст ошибки - может не те параметры передали, а не таймаут?
					// Записать в журнал регистрации.
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстСообщения = "Ошибка обновления списка значений категории новостей (Прокси.getUpdatedCategoryValuesByGuid):
						|sCategoryGuid = %СокрЛП(СписокУИН)%
						|errCode = %errCode%
						|errDescription = %errDescription%
						|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%";
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СокрЛП(СписокУИН)%", СокрЛП(СписокУИН));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
						НСтр("ru='Новости. Загрузка классификаторов. Список значений категории (по УИН). Ошибка'"), // ИдентификаторШага
						УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
						, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
					БылиОшибки = Истина;
				КонецПопытки;

				Если ТипЗнч(СписокОбновленныхДанных) = ТипОбъектXDTO Тогда

					ТекстСообщения = НСтр("ru='Информация об обновлении значений категорий новостей (Прокси.getUpdatedCategoryValuesByGuid):
						|configName = %configName%
						|configVersion = %configVersion%
						|УИН категории: %СписокУИН%
						|lastSynchronizationDateTime = %lastSynchronizationDateTime%
						|errCode = %errCode%
						|errDescription = %errDescription%
						|Полученные данные:
						|%Данные%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configName%", configName);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configVersion%", configVersion);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%lastSynchronizationDateTime%", lastSynchronizationDateTime);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокУИН%", СокрЛП(СписокУИН));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Данные%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(СписокОбновленныхДанных, Прокси.ФабрикаXDTO));
					ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
						НСтр("ru='Новости. Загрузка классификаторов. Список значений категории (по УИН). Информация'"), // ИдентификаторШага
						УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
						, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

					Если (СписокОбновленныхДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
						И (СписокОбновленныхДанных.Тип().Имя = "categoryValueListType") Тогда
						// Непосредственно загрузка.
						ДатаСамогоНовогоЭлемента = '00010101';
						Если ТипЗнч(СписокОбновленныхДанных.categoryValue) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

							Для каждого ТекущаяСтрокаХДТО Из СписокОбновленныхДанных.categoryValue Цикл
								ДатаСамогоНовогоЭлемента = Макс(ДатаСамогоНовогоЭлемента, УниверсальноеВремя(ТекущаяСтрокаХДТО.updated, ЧасовойПоясСеанса()));

								// Загрузить значение.
								Режим = "";
								лкОбъект = ЗаполнитьОбъектЗначениеКатегорииНовостей(Владелец, ТекущаяСтрокаХДТО, Режим);

								// Если объект еще не был записан в базе, и пришел уже с пометкой удаления, то не записывать его.
								Если лкОбъект.Ссылка.Пустая()
										И (лкОбъект.ПометкаУдаления = Истина) Тогда
									// Пришел помеченный на удаление объект - не создавать его.
								Иначе
									Попытка
										лкОбъект.Записать();
										// После записи классификатора можно провести дополнительные обработки.
										ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(лкОбъект.Ссылка);
									Исключение
										ИнформацияОбОшибке = ИнформацияОбОшибке();
										ТекстСообщения = НСтр("ru='Ошибка записи элемента (%Режим%) с уникальным идентификатором %ТекущаяСтрокаХДТО.guid%:
											|%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
										ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Режим%", Режим);
										ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущаяСтрокаХДТО.guid%", ТекущаяСтрокаХДТО.guid);
										ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
										ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
											НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
											НСтр("ru='Новости. Загрузка классификаторов. Список значений категории (по УИН). Ошибка'"), // ИдентификаторШага
											УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
											, // ОбъектМетаданных
											, // Данные
											ТекстСообщения, // Комментарий
											ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
									КонецПопытки;
								КонецЕсли;

							КонецЦикла;

							// Обновить данные в регистре сведений "ДатыОбновленияСтандартныхСписковНовостей".
							// Причем данные со строковым представлением владельца - удалить,
							//  а данные со ссылкой на ПВХ.КатегорииНовостей - добавить.
							// Добавить запись с явной ссылкой на владельца.
							Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
							Запись.Список = Владелец;
							Запись.Прочитать(); // Запись будет ниже.
							Если Запись.Выбран() Тогда
								Если Запись.ТекущаяВерсияНаКлиенте < ДатаСамогоНовогоЭлемента Тогда
									Запись.Список = Владелец;
									Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
									Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
									Запись.Записать(Истина);
								КонецЕсли;
							Иначе
								Запись.Список = Владелец;
								Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
								Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
								Запись.Записать(Истина);
							КонецЕсли;
							// Удалить запись со строковым представлением владельца.
							Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
							Запись.Список = Список;
							Запись.Удалить();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат НЕ БылиОшибки;

КонецФункции

// Функция загружает все списки с сервера за одно подключение.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Булево - ИСТИНА (были загружены все списки) или ЛОЖЬ (таймаут или другая ошибка).
//
Функция ОбновитьВсеСтандартныеСпискиССервера() Экспорт

	ТипWSПрокси = Тип("WSПрокси");

	// Обновление лент новостей - обновлять всегда
	БылоОбновлениеЛентНовостей = Ложь;

	// Непосредственно загрузка данных с помощью веб-сервисов.
	БылиОшибки = Ложь;

	Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков();

	Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаОбновляемыхДанных = ПолучитьСтандартныеСпискиТребующиеОбновления();

	Для каждого ТекущийОбновляемыйСписок Из ТаблицаОбновляемыхДанных Цикл
		Если ТекущийОбновляемыйСписок = "Список лент новостей" Тогда // Идентификатор.
			БылоОбновлениеЛентНовостей = Истина;
		КонецЕсли;
		БылаОшибка = НЕ ОбновитьСтандартныйСписокССервера(
			ТекущийОбновляемыйСписок.Список,
			ТекущийОбновляемыйСписок.ТекущаяВерсияНаКлиенте,
			Прокси);
		Если БылаОшибка = Истина Тогда
			БылиОшибки = Истина;
		КонецЕсли;
	КонецЦикла;

	// Ленты новостей обновлять всегда, вне зависимости от того, были ли они обновлены на сервере,
	//  т.к. отключение ленты новостей на сервере не влечет за собой увеличение "ТекущаяДатаНаСервере".
	Если БылоОбновлениеЛентНовостей <> Истина Тогда
		БылаОшибка = НЕ ОбновитьСтандартныйСписокССервера(
			"Список лент новостей", // Идентификатор.
			'00010101',
			Прокси);
		Если БылаОшибка = Истина Тогда
			БылиОшибки = Истина;
		КонецЕсли;
	КонецЕсли;

	// После обновления лент новостей могли измениться наборы доступных для отбора категорий.
	// Удалить неправильные отборы, которые могут помешать проверке общих и пользовательских отборов.
	ОбработкаНовостейВызовСервера.ОптимизироватьОтборыПоНовостям();

	Возврат НЕ БылиОшибки;

КонецФункции

// Процедура обновляет список обновляемых справочников и их версии с сервера 1С.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьСписокСправочниковИВерсииССервера() Экспорт

	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");
	ТипWSПрокси     = Тип("WSПрокси");

	// Имя и версия текущей конфигурации из метаданных (по-умолчанию).
	configName    = СокрЛП(Метаданные.Имя);
	configVersion = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(СокрЛП(Метаданные.Версия));
	// Возможно, имя конфигурации из метаданных было заменено на какой-то синоним - взять синоним.
	Продукты = ОбработкаНовостейВызовСервера.ПолучитьЗначениеПредопределеннойКатегории("Product");
	Если Продукты.Количество() > 0 Тогда
		Продукт = Продукты[Продукты.Количество()-1];
		ГдеРазделитель = Найти(Продукт, ",");
		Если ГдеРазделитель > 0 Тогда
			configName    = Лев(Продукт, ГдеРазделитель-1);
			configVersion = Прав(Продукт, СтрДлина(Продукт) - ГдеРазделитель);
		КонецЕсли;
	КонецЕсли;

	ТекстСообщения = НСтр("ru='Получение списка последних обновлений, начало
		|configName = %configName%
		|configVersion = %configVersion%
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configName%", configName);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configVersion%", configVersion);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка классификаторов. Список обновлений классификаторов. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков();

	Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
		Возврат;
	КонецЕсли;

	errCode               = 0;
	errDescription        = "";
	ДатыОбновленияСписков = Прокси.getLastUpdatesList(configName, configVersion, errCode, errDescription);

	ТекстСообщения = "Получение списка последних обновлений, в процессе
		|configName = %configName%
		|configVersion = %configVersion%
		|errCode = %errCode%
		|errDescription = %errDescription%
		|Результат:
		|%ДатыОбновленияСписков%";
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configName%", configName);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%configVersion%", configVersion);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errCode%", errCode);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%errDescription%", errDescription);
	Если ТипЗнч(ДатыОбновленияСписков) = ТипОбъектXDTO Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатыОбновленияСписков%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеОбъектаХДТО(ДатыОбновленияСписков, Прокси.ФабрикаXDTO));
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатыОбновленияСписков%", НСтр("ru='Получено значение с типом значения, отличным от ОбъектXDTO'"));
	КонецЕсли;
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка классификаторов. Список обновлений классификаторов. Выполнение'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Если (errCode = Неопределено) ИЛИ (errCode = 0) Тогда
		Если ТипЗнч(ДатыОбновленияСписков) = ТипОбъектXDTO Тогда
			Если ТипЗнч(ДатыОбновленияСписков.updatesItem) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.
				Для каждого ТекущаяЗапись Из ДатыОбновленияСписков.updatesItem Цикл
					Если (ТекущаяЗапись.listName = "Список категорий новостей") // Идентификатор.
							ИЛИ (ТекущаяЗапись.listName = "Список лент новостей") Тогда // Идентификатор.
						Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
						Запись.Список = ТекущаяЗапись.listName;
						Запись.Прочитать(); // Запись будет ниже.
						Если Запись.Выбран() Тогда // Обновить
							Запись.Список = ТекущаяЗапись.listName;
							// Запись.ТекущаяВерсияНаКлиенте = // не трогать
							// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
							// При записи в регистр, надо опять преобразовать в GMT.
							Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
						Иначе // Создать
							Запись.Список = ТекущаяЗапись.listName;
							// Запись.ТекущаяВерсияНаКлиенте = // не трогать
							// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
							// При записи в регистр, надо опять преобразовать в GMT.
							Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
						КонецЕсли;
						Запись.Записать(Истина);
					ИначеЕсли ТекущаяЗапись.listName = "Значения категории новостей" Тогда // Идентификатор.
						// Если вообще есть такое свойство и оно не пустое.
						Если ТекущаяЗапись.Свойства().Получить("categoryGuid") <> Неопределено Тогда
							Если НЕ ПустаяСтрока(ТекущаяЗапись.categoryGuid) Тогда
								КатегорияСсылка = ПланыВидовХарактеристик.КатегорииНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекущаяЗапись.categoryGuid)); ////?
								Если НЕ ПустаяСтрока(КатегорияСсылка.ВерсияДанных) Тогда // Не новый объект
									Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
									Запись.Список = КатегорияСсылка;
									Запись.Прочитать(); // Запись будет ниже.
									Если Запись.Выбран() Тогда // Обновить
										Запись.Список = КатегорияСсылка;
										// Запись.ТекущаяВерсияНаКлиенте = // не трогать
										// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
										// При записи в регистр, надо опять преобразовать в GMT.
										Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
									Иначе // Создать
										Запись.Список = КатегорияСсылка;
										// Запись.ТекущаяВерсияНаКлиенте = // не трогать
										// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
										// При записи в регистр, надо опять преобразовать в GMT.
										Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
									КонецЕсли;
									Запись.Записать(Истина);
									// Возможно, в регистре сведений остались устаревшие данные (когда список категорий еще не был обновлен).
									// Необходимо найти такие данные и удалить.
									Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
									Запись.Список = "Значения категории новостей:" + ТекущаяЗапись.categoryGuid; // Идентификатор.
									Запись.Удалить(); // Предварительно не будем искать - удалим сразу.
								Иначе
									// Нет такого элемента плана видов характеристик, а значит и не были загружены значения.
									// Сохранить в регистре как строку.
									// В регистре будет сохранено как "Значения категории новостей:categoryGuid".
									Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
									Запись.Список = "Значения категории новостей:" + ТекущаяЗапись.categoryGuid; // Идентификатор.
									Запись.Прочитать(); // Запись будет ниже.
									Если Запись.Выбран() Тогда // Обновить
										Запись.Список = "Значения категории новостей:" + ТекущаяЗапись.categoryGuid; // Идентификатор.
										// Запись.ТекущаяВерсияНаКлиенте = // не трогать
										// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
										// При записи в регистр, надо опять преобразовать в GMT.
										Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
									Иначе // Создать
										Запись.Список = "Значения категории новостей:" + ТекущаяЗапись.categoryGuid; // Идентификатор.
										// Запись.ТекущаяВерсияНаКлиенте = // не трогать
										// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
										// При записи в регистр, надо опять преобразовать в GMT.
										Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
									КонецЕсли;
									Запись.Записать(Истина);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				// В регистре сведений "ДатыОбновленияСтандартныхСписковНовостей" могут создаваться фиктивные записи
				//  с ТекущаяВерсияНаСервере = '00010102' для того, чтобы инициализировать обмен с сервером.
				//  После явного заполнения списка обновленных данных с сервера, удалять такие фиктивные записи,
				//  т.к. возможно на сервере нет нужных данных (например, нет категорий новостей, т.к. все ленты - без категорий).
				// Также удалять записи с пустым значением "Список".
				Выборка = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.Выбрать();
				Пока Выборка.Следующий() Цикл
					ТребуетсяУдаление = Ложь;
					Если Выборка.ТекущаяВерсияНаСервере = '00010102' Тогда
						ТребуетсяУдаление = Истина;
					ИначеЕсли Выборка.Список = Неопределено Тогда
						ТребуетсяУдаление = Истина;
					ИначеЕсли ПустаяСтрока(Выборка.Список) Тогда
						ТребуетсяУдаление = Истина;
					КонецЕсли;
					Если ТребуетсяУдаление = Истина Тогда
						Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
							Запись.Список = Выборка.Список;
						Запись.Удалить();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли errCode = 10001 Тогда // Нет данных. Это не ошибка, а предупреждение.
		// Очистить регистр сведений.
		НаборЗаписей = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьНаборЗаписей();
		НаборЗаписей.Записать(Истина);
	КонецЕсли;

	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Получение списка последних обновлений, завершение
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка классификаторов. Список обновлений классификаторов. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.РегламентныеЗадания.ВсеОбновленияНовостей, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Преобразования

// Форматы rss и atom по-разному представляют даты - в форматах Rfc822 (rss) или
// xs:dateTime (atom), причем иногда в rss-лентах можно встретить ошибочный формат xs:dateTime.
// И так как автоматизировать получение даты невозможно, то парсинг будет производиться вручную.
//
Функция ПреобразоватьВДату(Знач СтрокаДата)

	Результат = ТекущаяУниверсальнаяДата();

	ТипДата = Тип("Дата");

	Если СтрокаДата = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;

	Если СтрДлина(СтрокаДата) >= 11 Тогда
		Если ВРег(Сред(СтрокаДата, 11, 1)) = "T" Тогда // Похоже на xs:dateTime
			Попытка
				Результат = XMLЗначение(ТипДата, СтрокаДата);
				// ////? 1С всегда преобразует дату в текущий часовой пояс, а нам надо сохранять в GMT
				Результат = УниверсальноеВремя(Результат, ЧасовойПоясСеанса());
			Исключение
				Результат = ТекущаяУниверсальнаяДата();
			КонецПопытки;
		Иначе // Rfc822?
			// Tue, 27 May 2012 15:30:00 +0300
			Если Сред(СтрокаДата, 4, 1) = "," Тогда // Похоже на Rfc822
				СтрокаДата = СтрЗаменить(СтрокаДата, " ", Символы.ПС);
				Если СтрЧислоСтрок(СтрокаДата) >= 5 Тогда
					СтрДень  = СтрПолучитьСтроку(СтрокаДата, 2);
					СтрМесяц = СтрПолучитьСтроку(СтрокаДата, 3);
					СтрГод   = СтрПолучитьСтроку(СтрокаДата, 4);
					СтрВремя = СтрПолучитьСтроку(СтрокаДата, 5);
					СтрВремя = СтрЗаменить(СтрВремя, ":", Символы.ПС);
					Если СтрЧислоСтрок(СтрВремя)=3 Тогда
						СтрЧасы    = СтрПолучитьСтроку(СтрВремя, 1);
						СтрМинуты  = СтрПолучитьСтроку(СтрВремя, 2);
						СтрСекунды = СтрПолучитьСтроку(СтрВремя, 3);
					КонецЕсли;

					// http://www.w3.org/Protocols/rfc822/#z28
					СтрЧасовойПояс = СокрЛП(СтрПолучитьСтроку(СтрокаДата, 6));
					Если (ВРег(СтрЧасовойПояс) = "GMT") ИЛИ (ВРег(СтрЧасовойПояс) = "UT") Тогда
						ЧасовойПояс = 0;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "EST") ИЛИ (ВРег(СтрЧасовойПояс) = "EDT") Тогда
						ЧасовойПояс = -5;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "CST") ИЛИ (ВРег(СтрЧасовойПояс) = "CDT") Тогда
						ЧасовойПояс = -6;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "MST") ИЛИ (ВРег(СтрЧасовойПояс) = "MDT") Тогда
						ЧасовойПояс = -7;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "PST") ИЛИ (ВРег(СтрЧасовойПояс) = "PDT") Тогда
						ЧасовойПояс = -8;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "Z") Тогда ЧасовойПояс = 0;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "A") Тогда ЧасовойПояс = -1;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "B") Тогда ЧасовойПояс = -2;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "C") Тогда ЧасовойПояс = -2;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "D") Тогда ЧасовойПояс = -3;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "E") Тогда ЧасовойПояс = -4;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "F") Тогда ЧасовойПояс = -5;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "G") Тогда ЧасовойПояс = -6;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "H") Тогда ЧасовойПояс = -7;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "I") Тогда ЧасовойПояс = -8;
					// ИначеЕсли (ВРег(СтрЧасовойПояс) = "J") Тогда // J not used
					//  ЧасовойПояс = -9; // Можно это значение не устанавливать, т.к. часовой пояс J не используется.
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "K") Тогда ЧасовойПояс = -10;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "L") Тогда ЧасовойПояс = -11;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "M") Тогда ЧасовойПояс = -12;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "N") Тогда ЧасовойПояс = +1;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "O") Тогда ЧасовойПояс = +2;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "P") Тогда ЧасовойПояс = +2;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "Q") Тогда ЧасовойПояс = +3;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "R") Тогда ЧасовойПояс = +4;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "S") Тогда ЧасовойПояс = +5;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "T") Тогда ЧасовойПояс = +6;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "U") Тогда ЧасовойПояс = +7;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "V") Тогда ЧасовойПояс = +8;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "W") Тогда ЧасовойПояс = +9;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "X") Тогда ЧасовойПояс = +10;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "Y") Тогда ЧасовойПояс = +11;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "Z") Тогда ЧасовойПояс = +12;
					Иначе
						// Возможные значения: +0100, -0330, ...
						Если СтрДлина(СокрЛП(СтрЧасовойПояс)) = 5 Тогда
							Попытка
								Если Лев(СтрЧасовойПояс, 1) = "+" Тогда
									ЧасовойПояс = +1 * (Число(Сред(СтрЧасовойПояс, 2, 2)) * 60 * 60 + Число(Сред(СтрЧасовойПояс, 4, 2)) * 60);
								ИначеЕсли Лев(СтрЧасовойПояс, 1) = "-" Тогда
									ЧасовойПояс = -1 * (Число(Сред(СтрЧасовойПояс, 2, 2)) * 60 * 60 + Число(Сред(СтрЧасовойПояс, 4, 2)) * 60);
								Иначе
									ЧасовойПояс = 0;
								КонецЕсли;
							Исключение
								ЧасовойПояс = 0;
							КонецПопытки;
						Иначе
							ЧасовойПояс = 0;
						КонецЕсли;
					КонецЕсли;

					Месяц = 1;
					Если ВРег(СтрМесяц) = ВРег("Jan") Тогда
						Месяц = 1;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Feb") Тогда
						Месяц = 2;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Mar") Тогда
						Месяц = 3;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Apr") Тогда
						Месяц = 4;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("May") Тогда
						Месяц = 5;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Jun") Тогда
						Месяц = 6;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Jul") Тогда
						Месяц = 7;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Aug") Тогда
						Месяц = 8;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Sep") Тогда
						Месяц = 9;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Oct") Тогда
						Месяц = 10;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Nov") Тогда
						Месяц = 11;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Dec") Тогда
						Месяц = 12;
					КонецЕсли;

					Попытка
						День    = Число(СтрДень);
						Год     = Число(СтрГод);
						Часы    = Число(СтрЧасы);
						Минуты  = Число(СтрМинуты);
						Секунды = Число(СтрСекунды);
						Результат = Дата(Год, Месяц, День, Часы, Минуты, Секунды) + ЧасовойПояс;
					Исключение
						Результат = ТекущаяУниверсальнаяДата();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Некоторые БД вместо 01.01.0001 возвращают 03.01.0001.
	// Чтобы исключить эту ошибку, будем считать, что все даты < 2000 года - это пустая дата.
	Если Результат < Дата(2000,1,1) Тогда
		Результат = '00010101';
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получение значения из Объекта XDTO (через точку).
// В отличие от использования XPath (ОбъектХДТО.Получить("categories/category")
//  или ОбъектХДТО.Получить("categories/category.0")) эта функция в случае ошибок выдает значение по умолчанию.
//
Функция ПолучитьЗначениеХДТО(ОбъектХДТО, ИмяСвойства)

	// В случае всех непредвиденных ситуаций возвратится Неопределено.
	Результат = Неопределено;

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(ОбъектХДТО) = ТипОбъектXDTO Тогда
		// Разделить свойство на лексемы - через точку. Вначале получить первое свойство, потом второе и т.п.
		Если НЕ ПустаяСтрока(ИмяСвойства) Тогда
			ГдеРазделитель = Найти(ИмяСвойства, ".");
			Если ГдеРазделитель > 0 Тогда
				ТекущееИмяСвойства = Лев(ИмяСвойства, ГдеРазделитель-1);
				ОставшиесяИмена    = Прав(ИмяСвойства, СтрДлина(ИмяСвойства) - ГдеРазделитель);
			Иначе
				ТекущееИмяСвойства = ИмяСвойства;
				ОставшиесяИмена    = "";
			КонецЕсли;
			СвойствоХДТО = ОбъектХДТО.Свойства().Получить(ТекущееИмяСвойства);
			Если ТипЗнч(СвойствоХДТО) = ТипСвойствоXDTO Тогда
				// В некоторых случаях (например, при чтении http://*.livejournal.com/data/rss) возможно появление нескольких
				//  свойств. Например:
				//   <title>...</title>
				//   <media:title type="plain">...</media:title>
				// Поэтому, надо проверять, что свойство - не списковое. Если списковое, то брать значение первого элемента.
				Если СвойствоХДТО.ВерхняяГраница = -1 Тогда
					ТекущийСписок = ОбъектХДТО.ПолучитьСписок(ТекущееИмяСвойства);
					ТекущееЗначение = "";
					Если ТипЗнч(ТекущийСписок) = ТипСписокXDTO Тогда
						Если ТекущийСписок.Количество() > 0 Тогда
							ТекущееЗначение = ТекущийСписок.Получить(0);
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекущееЗначение = ОбъектХДТО.Получить(ТекущееИмяСвойства);
				КонецЕсли;
				// Если объект ХДТО пустой (<description></description>), то вместо "ОбъектXDTO" лучше сохранять "".
				Если ТипЗнч(ТекущееЗначение) = ТипОбъектXDTO
						И ТекущееЗначение.Свойства().Количество() = 0 Тогда
					ТекущееЗначение = "";
				КонецЕсли;
				Если ПустаяСтрока(ОставшиесяИмена) Тогда
					Результат = ТекущееЗначение;
				Иначе
					Результат = ПолучитьЗначениеХДТО(ОбъектХДТО.ПолучитьXDTO(ТекущееИмяСвойства), ОставшиесяИмена);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Если у тегов (особенно при нетипизированном чтении) будут атрибуты, то содержимое тегов.
	//  нельзя будет просто прочитать - вернется ОбъектХДТО.
	// Обработать эту ситуацию.
	Если ТипЗнч(Результат) = ТипОбъектXDTO Тогда
		Если Результат.Последовательность().Количество() > 0 Тогда
			Результат = Результат.Последовательность().ПолучитьТекст(0);
		Иначе
			Результат = "";
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей

// Непосредственно парсинг файла новостей, заполнение категорий,
// заполнение дополнительных действий 1С (обработчиков гиперссылок).
//
Процедура ПарсингХМЛФайлаНовостей(ОбъектХДТО, ФорматНовостей, ЛентаНовостей)

	Т0Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = НСтр("ru='Начало парсинга файла новостей для ленты новостей %ЛентаНовостей%
		|Время начала (мс): %ТНачало%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	// Запись в журнал регистрации
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");

	// Возможно, сразу надо будет обновить категории, ленты новостей и т.п.
	Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков();

	// Получить дату последнего обновления канала.
	// Если в полученном файле дата обновления такая же (updated для Atom, lastBuildDate для RSS), то не загружать его вообще.
	Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
	Запись.ЛентаНовостей = ЛентаНовостей;
	Запись.Прочитать(); // Только чтение, без последующей записи.
	Если Запись.Выбран() Тогда
		ДатаЗагрузкиПоследнихНовостейНаКлиенте = Запись.ДатаЗагрузкиПоследнихНовостей;
	Иначе
		ДатаЗагрузкиПоследнихНовостейНаКлиенте = '00010101';
	КонецЕсли;

	РезультатЗагрузкиНовостей = "";

	Если НРег(ФорматНовостей) = "rss" Тогда

		ТекстСообщения = НСтр("ru='Парсинг файла новостей для ленты новостей %ЛентаНовостей%
			|Определен формат ленты новостей: %ФорматНовостей%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", НРег(ФорматНовостей));
		// Запись в журнал регистрации
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Выполнение'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		Если ТипЗнч(ОбъектХДТО.Свойства().Получить("channel")) = ТипСвойствоXDTO
				И ТипЗнч(ОбъектХДТО.Получить("channel")) = ТипОбъектXDTO Тогда

			// {Обновление стандартных списков (RSS).Начало
			// Загрузить дополнительные параметры - даты обновления стандартных справочников и т.п.
			СвойствоБлокОбновленийСписков = ОбъектХДТО.channel.Свойства().Получить("lastUpdatesList");
			Если ТипЗнч(СвойствоБлокОбновленийСписков) = ТипСвойствоXDTO Тогда
				ОбъектБлокОбновленийСписков = ОбъектХДТО.channel.Получить(СвойствоБлокОбновленийСписков);
				Если ТипЗнч(ОбъектБлокОбновленийСписков) = ТипОбъектXDTO Тогда
					// Загрузить даты последних обновлений в регистр сведений.
					СвойствоОбновленияСписков = ОбъектБлокОбновленийСписков.Свойства().Получить("updatesItem");
					Если ТипЗнч(СвойствоОбновленияСписков) = ТипСвойствоXDTO Тогда
						// Это может быть как одно значение, так и список.
						Если (СвойствоОбновленияСписков.ВерхняяГраница = -1 ИЛИ СвойствоОбновленияСписков.ВерхняяГраница > 1) Тогда // Список
							СписокОбновлений = ОбъектБлокОбновленийСписков.ПолучитьСписок(СвойствоОбновленияСписков);
							Для каждого ТекущееОбновление Из СписокОбновлений Цикл
								ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(ТекущееОбновление);
							КонецЦикла;
						Иначе // Одно значение
							ТекущееОбновление = ОбъектБлокОбновленийСписков.Получить(СвойствоОбновленияСписков);
							ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(ТекущееОбновление);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Если даты изменились - сразу запустить обработку по обновлению данных с серверов 1С.
			// Обновление справочников необходимо сделать ДО загрузки новостей для корректной работы парсера категорий.
			ТаблицаОбновляемыхДанных = ПолучитьСтандартныеСпискиТребующиеОбновления();
			Для каждого ТекущиеОбновляемыеДанные Из ТаблицаОбновляемыхДанных Цикл
				Результат = ОбновитьСтандартныйСписокССервера(
					ТекущиеОбновляемыеДанные.Список,
					ТекущиеОбновляемыеДанные.ТекущаяВерсияНаКлиенте,
					Прокси);
			КонецЦикла;
			// Обновление стандартных списков (RSS).Конец}

			// В файле новостей может передаваться ДатаПоследнегоОбновления (lastBuildDate для rss, updated для atom atom1C),
			//  которая сохраняется в регистре сведений ДатыЗагрузкиПоследнихНовостей.ДатаЗагрузкиПоследнихНовостей.
			// Если файл повторно пришел с такой же датой ДатаПоследнегоОбновления (т.е. нет новых новостей), то обрабатывать файл не нужно.
			// Возможны ситуации, когда в случае системных ошибок приходят незначимые новости о системных ошибках.
			//  В таком случае в регистр сведений писать ничего не нужно.
			Если ОбъектХДТО.Свойства().Получить("channel") <> Неопределено Тогда
				Если ОбъектХДТО.channel.Свойства().Получить("lastBuildDate") <> Неопределено Тогда
					// Если дата обновления канала такая же как и была, то не обновлять канал вообще.
					ДатаЗагрузкиПоследнихНовостейВФайле = ПреобразоватьВДату(ОбъектХДТО.channel.lastBuildDate);
					Если ДатаЗагрузкиПоследнихНовостейНаКлиенте >= ДатаЗагрузкиПоследнихНовостейВФайле Тогда
						// Соединение с сервером новостей прошло, данные получены, значит можно сбросить счетчик неудачных попыток соединения.
						Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
						Запись.ЛентаНовостей                        = ЛентаНовостей;
						Запись.Прочитать(); // Запись будет ниже.
						Запись.ЛентаНовостей                        = ЛентаНовостей;
						Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейНаКлиенте;
						Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
						Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
						Запись.Записать(Истина);
						Возврат;
					КонецЕсли;
				Иначе
					ДатаЗагрузкиПоследнихНовостейВФайле = '00010101';
					// Запись в журнал регистрации
					ТекстСообщения = НСтр("ru='В файле полученном для ленты новостей %ЛентаНовостей% отсутствует поле channel.lastBuildDate. Все новости будут прочитаны и загружены, но это займет больше времени.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
					ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
						НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
						НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей'"), // ИдентификаторШага
						УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
						Метаданные.Справочники.Новости, // ОбъектМетаданных
						, // Данные
						ТекстСообщения, // Комментарий
						ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				КонецЕсли;
			Иначе
				// Запись в журнал регистрации
				ТекстСообщения = НСтр("ru='В файле полученном для ленты новостей %ЛентаНовостей% отсутствует обязательное поле channel. Файл не был обработан.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Ошибка'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				Возврат;
			КонецЕсли;

			// Цикл по парсингу каждой новости.
			ЕстьЗначимыеНовости = Ложь;
			ДатаСамойПоследнейНовости = '00010101';
			СвойствоНовость = ОбъектХДТО.channel.Свойства().Получить("item");
			Если СвойствоНовость <> Неопределено Тогда
				Если ТипЗнч(СвойствоНовость) = ТипСвойствоXDTO
						И (СвойствоНовость.ВерхняяГраница = -1 ИЛИ СвойствоНовость.ВерхняяГраница > 1) Тогда // Несколько новостей
					СписокНовостей = ОбъектХДТО.channel.ПолучитьСписок(СвойствоНовость);
					Для каждого лкТекущаяНовость Из СписокНовостей Цикл
						лкЭтоЗначимаяНовость = Ложь;
						ЗагрузитьНовость(ФорматНовостей, лкТекущаяНовость, ЛентаНовостей, РезультатЗагрузкиНовостей, ДатаСамойПоследнейНовости, лкЭтоЗначимаяНовость);
						ЕстьЗначимыеНовости = ЕстьЗначимыеНовости ИЛИ лкЭтоЗначимаяНовость;
					КонецЦикла;
				Иначе // Одна новость
					лкТекущаяНовость = ОбъектХДТО.channel.Получить(СвойствоНовость);
					лкЭтоЗначимаяНовость = Ложь;
					ЗагрузитьНовость(ФорматНовостей, лкТекущаяНовость, ЛентаНовостей, РезультатЗагрузкиНовостей, ДатаСамойПоследнейНовости, лкЭтоЗначимаяНовость);
					ЕстьЗначимыеНовости = ЕстьЗначимыеНовости ИЛИ лкЭтоЗначимаяНовость;
				КонецЕсли;
			КонецЕсли;

			// Запись в регистр сведений идет в конце, чтобы (на случай сбоев) новости опять загрузились со старой даты.
			// В файле могли не передать параметр lastBuildDate (rss) или updated (atom),
			//  поэтому сравнить также с максимальным значением по каждой новости.
			// Все даты должны быть в часовом поясе +0.
			Если ДатаЗагрузкиПоследнихНовостейВФайле = '00010101' Тогда
				ДатаЗагрузкиПоследнихНовостейВФайле = ДатаСамойПоследнейНовости;
			КонецЕсли;
			// Если не было значимых новостей (возможно, были только новости о системных ошибках),
			//  то не надо обновлять дату последней загрузки, и не надо сбрасывать счетчик неудачных загрузок.
			Если ЕстьЗначимыеНовости = Истина Тогда
				Если ДатаЗагрузкиПоследнихНовостейНаКлиенте < ДатаЗагрузкиПоследнихНовостейВФайле Тогда
					// Соединение с сервером новостей прошло, данные получены, значит можно сбросить счетчик неудачных попыток соединения.
					Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
					Запись.ЛентаНовостей                        = ЛентаНовостей;
					Запись.Прочитать(); // Запись будет ниже.
					Запись.ЛентаНовостей                        = ЛентаНовостей;
					Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейВФайле;
					Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
					Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
					Запись.Записать(Истина);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли НРег(ФорматНовостей) = "feed" Тогда

		ТекстСообщения = НСтр("ru='Парсинг файла новостей для ленты новостей %ЛентаНовостей%
			|Определен формат ленты новостей: %ФорматНовостей%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", НРег(ФорматНовостей));
		// Запись в журнал регистрации
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Выполнение'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		// {Обновление стандартных списков (Atom).Начало
		// Загрузить дополнительные параметры - даты обновления стандартных справочников и т.п.
		СвойствоБлокОбновленийСписков = ОбъектХДТО.Свойства().Получить("lastUpdatesList");
		Если ТипЗнч(СвойствоБлокОбновленийСписков) = ТипСвойствоXDTO Тогда
			ОбъектБлокОбновленийСписков = ОбъектХДТО.Получить(СвойствоБлокОбновленийСписков);
			Если ТипЗнч(ОбъектБлокОбновленийСписков) = ТипОбъектXDTO Тогда
				// Загрузить даты последних обновлений в регистр сведений.
				СвойствоОбновленияСписков = ОбъектБлокОбновленийСписков.Свойства().Получить("updatesItem");
				Если ТипЗнч(СвойствоОбновленияСписков) = ТипСвойствоXDTO Тогда
					// Это может быть как одно значение, так и список.
					Если (СвойствоОбновленияСписков.ВерхняяГраница = -1 ИЛИ СвойствоОбновленияСписков.ВерхняяГраница > 1) Тогда // Список
						СписокОбновлений = ОбъектБлокОбновленийСписков.ПолучитьСписок(СвойствоОбновленияСписков);
						Для каждого ТекущееОбновление Из СписокОбновлений Цикл
							ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(ТекущееОбновление);
						КонецЦикла;
					Иначе // Одно значение
						ТекущееОбновление = ОбъектБлокОбновленийСписков.Получить(СвойствоОбновленияСписков);
						ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(ТекущееОбновление);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Если даты изменились - сразу запустить обработку по обновлению данных с серверов 1С.
		// Обновление справочников необходимо сделать ДО загрузки новостей для корректной работы парсера категорий.
		ТаблицаОбновляемыхДанных = ПолучитьСтандартныеСпискиТребующиеОбновления();
		Для каждого ТекущиеОбновляемыеДанные Из ТаблицаОбновляемыхДанных Цикл
			Результат = ОбновитьСтандартныйСписокССервера(
				ТекущиеОбновляемыеДанные.Список,
				ТекущиеОбновляемыеДанные.ТекущаяВерсияНаКлиенте,
				Прокси);
		КонецЦикла;
		// Обновление стандартных списков (Atom).Конец}

		// В файле новостей может передаваться ДатаПоследнегоОбновления (lastBuildDate для rss, updated для atom atom1C),
		//  которая сохраняется в регистре сведений ДатыЗагрузкиПоследнихНовостей.ДатаЗагрузкиПоследнихНовостей.
		// Если файл повторно пришел с такой же датой ДатаПоследнегоОбновления (т.е. нет новых новостей), то обрабатывать файл не нужно.
		// Возможны ситуации, когда в случае системных ошибок приходят незначимые новости о системных ошибках.
		//  В таком случае в регистр сведений писать ничего не нужно.
		Если ОбъектХДТО.Свойства().Получить("updated") <> Неопределено Тогда
			// Если дата обновления канала такая же как и была, то не обновлять канал вообще.
			ДатаЗагрузкиПоследнихНовостейВФайле = ПреобразоватьВДату(ОбъектХДТО.updated);
			Если ДатаЗагрузкиПоследнихНовостейНаКлиенте >= ДатаЗагрузкиПоследнихНовостейВФайле Тогда
				// Соединение с сервером новостей прошло, данные получены, значит можно сбросить счетчик неудачных попыток соединения.
				Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
				Запись.ЛентаНовостей                        = ЛентаНовостей;
				Запись.Прочитать(); // Запись будет ниже.
				Запись.ЛентаНовостей                        = ЛентаНовостей;
				Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейНаКлиенте;
				Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
				Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
				Запись.Записать(Истина);
				Возврат;
			КонецЕсли;
		Иначе // updated - обязательное поле, наверное формат некорректный
			ДатаЗагрузкиПоследнихНовостейВФайле = '00010101';
			// Запись в журнал регистрации
			ТекстСообщения = НСтр("ru='В файле полученном для ленты новостей %ЛентаНовостей% отсутствует поле feed.updated. Все новости будут прочитаны и загружены, но это займет больше времени.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Предупреждение'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
				Метаданные.Справочники.Новости, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		КонецЕсли;

		// Цикл по парсингу каждой новости.
		ЕстьЗначимыеНовости = Ложь;
		ДатаСамойПоследнейНовости = '00010101';
		СвойствоНовость = ОбъектХДТО.Свойства().Получить("entry");
		Если СвойствоНовость <> Неопределено Тогда
			Если ТипЗнч(СвойствоНовость) = ТипСвойствоXDTO
					И (СвойствоНовость.ВерхняяГраница = -1 ИЛИ СвойствоНовость.ВерхняяГраница > 1) Тогда // Несколько новостей
				СписокНовостей = ОбъектХДТО.ПолучитьСписок(СвойствоНовость);
				Для каждого лкТекущаяНовость Из СписокНовостей Цикл
					лкЭтоЗначимаяНовость = Ложь;
					ЗагрузитьНовость(ФорматНовостей, лкТекущаяНовость, ЛентаНовостей, РезультатЗагрузкиНовостей, ДатаСамойПоследнейНовости, лкЭтоЗначимаяНовость);
					ЕстьЗначимыеНовости = ЕстьЗначимыеНовости ИЛИ лкЭтоЗначимаяНовость;
				КонецЦикла;
			Иначе // Одна новость
				лкТекущаяНовость = ОбъектХДТО.Получить(СвойствоНовость);
				лкЭтоЗначимаяНовость = Ложь;
				ЗагрузитьНовость(ФорматНовостей, лкТекущаяНовость, ЛентаНовостей, РезультатЗагрузкиНовостей, ДатаСамойПоследнейНовости, лкЭтоЗначимаяНовость);
				ЕстьЗначимыеНовости = ЕстьЗначимыеНовости ИЛИ лкЭтоЗначимаяНовость;
			КонецЕсли;
		КонецЕсли;

		// Запись в регистр сведений идет в конце, чтобы (на случай сбоев) новости опять загрузились со старой даты.
		// В файле могли не передать параметр lastBuildDate (rss) или updated (atom),
		//  поэтому сравнить также с максимальным значением по каждой новости.
		// Все даты должны быть в часовом поясе +0.
		Если ДатаЗагрузкиПоследнихНовостейВФайле = '00010101' Тогда
			ДатаЗагрузкиПоследнихНовостейВФайле = ДатаСамойПоследнейНовости;
		КонецЕсли;
		// Если не было значимых новостей (возможно, были только новости о системных ошибках),
		//  то не надо обновлять дату последней загрузки, и не надо сбрасывать счетчик неудачных загрузок.
		Если ЕстьЗначимыеНовости = Истина Тогда
			Если ДатаЗагрузкиПоследнихНовостейНаКлиенте < ДатаЗагрузкиПоследнихНовостейВФайле Тогда
				// Соединение с сервером новостей прошло, данные получены, значит можно сбросить счетчик неудачных попыток соединения.
				Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
				Запись.ЛентаНовостей                        = ЛентаНовостей;
				Запись.Прочитать(); // Запись будет ниже.
				Запись.ЛентаНовостей                        = ЛентаНовостей;
				Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейВФайле;
				Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
				Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЕсли;

	Иначе

		РезультатЗагрузкиНовостей = НСтр("ru='Новости не загружены, т.к. передан необрабатываемый формат ленты новостей.'");

		ТекстСообщения = НСтр("ru='Парсинг файла новостей для ленты новостей %ЛентаНовостей%
			|Не обрабатываемый формат ленты новостей: %ФорматНовостей%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", НРег(ФорматНовостей));
		// Запись в журнал регистрации
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Выполнение'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли; // ИначеЕсли НРег(ФорматНовостей) = ... Тогда

	Т0Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Т0Длительность = Т0Конец - Т0Начало;
	ТекстСообщения = НСтр("ru='Завершение парсинга файла новостей для ленты новостей %ЛентаНовостей%.
		|Результат загрузки новостей:
		|%РезультатЗагрузкиНовостей%
		|Время начала (мс): %ТНачало%
		|Время окончания (мс): %ТКонец%
		|Длительность (мс): %ТДлительность%
		|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатЗагрузкиНовостей%", РезультатЗагрузкиНовостей);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т0Начало);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т0Конец);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т0Длительность);
	// Запись в журнал регистрации
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		Т0Длительность, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Заполнение регистра сведений необработанных категорий для новостей.
// При загрузке новостей категоризация не будет сразу заполняться,
//  т.к. может быть ситуация, что строка "География=Усть-Илимск" (category),
//  или "География", "Усть-Илимск", "eq" (category1C) не обработается из-за того,
//  что город "Усть-Илимск" еще не загружен с серверов (не обновились стандартные списки).
// Поэтому категории вначале будут загружаться в "сыром" (необработанном) виде, в виде строк в регистр "КатегорииНовостейПростыеНеобработанные",
// а затем отдельной обработкой преобразовываться и перемещаться в регистр сведений "КатегорииНовостейПростые" или "КатегорииНовостейИнтервалыВерсий".
//
// Параметры:
//  ОбъектНовость     - СправочникОбъект.Новости;
//  КатегорияЗначение - Строка - представление категоризации вида Категория=Значение.
//
Процедура ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияИЗначение)

	// Если это управляющая категория, то не добавлять ее в список категорий.
	// Если на одну новость назначено несколько управляющих категорий, то добавится последняя категория.
	Если ВРег(КатегорияИЗначение) = ВРег("Важность=Очень важная") Тогда
		ОбъектНовость.Важность = 1; // Перезапишет ОбъектНовость.Важность, если было установлено ранее из тега priority.
	ИначеЕсли ВРег(КатегорияИЗначение) = ВРег("Важность=Важная") Тогда
		ОбъектНовость.Важность = 2; // Перезапишет ОбъектНовость.Важность, если было установлено ранее из тега priority.
	Иначе
		// Разделить категорию и значение по знаку "=".
		ГдеРазделитель = Найти(КатегорияИЗначение, "=");
		Если ГдеРазделитель > 0 Тогда
			КатегорияНовостейСтрока         = Лев(КатегорияИЗначение, ГдеРазделитель - 1);
			ЗначениеКатегорииНовостейСтрока = Прав(КатегорияИЗначение, СтрДлина(КатегорияИЗначение) - ГдеРазделитель);

			Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
			Запись.КатегорияНовостейСтрока         = КатегорияНовостейСтрока;
			Запись.ЗначениеКатегорииНовостейСтрока = ЗначениеКатегорииНовостейСтрока;
			Запись.ЛентаНовостей                   = ОбъектНовость.ЛентаНовостей;
			Запись.УИННовости                      = ОбъектНовость.УИННовости;
			Запись.УсловиеОтбора                   = "eq"; // всегда
			Запись.Записать(Истина);
		Иначе
			// Могут передавать Категория / значение не с помощью "=", а через двухсимвольное "eq" - обработать и этот вариант.
			ГдеРазделитель = Найти(КатегорияИЗначение, " eq ");
			Если ГдеРазделитель > 0 Тогда
				КатегорияНовостейСтрока         = Лев(КатегорияИЗначение, ГдеРазделитель - 1);
				ЗначениеКатегорииНовостейСтрока = Прав(КатегорияИЗначение, СтрДлина(КатегорияИЗначение) - ГдеРазделитель - 3);

				Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
				Запись.КатегорияНовостейСтрока         = КатегорияНовостейСтрока;
				Запись.ЗначениеКатегорииНовостейСтрока = ЗначениеКатегорииНовостейСтрока;
				Запись.ЛентаНовостей                   = ОбъектНовость.ЛентаНовостей;
				Запись.УИННовости                      = ОбъектНовость.УИННовости;
				Запись.УсловиеОтбора                   = "eq"; // всегда
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Загрузить одну новость.
//
// Параметры:
//  ФорматНовостей            - Строка - формат новостей (rss, feed (для atom и atom1C));
//  НовостьХДТО               - ОбъектХДТО - полученная новость;
//  ЛентаНовостей             - СправочникСсылка.ЛентаНовостей - лента новостей, для которой происходит загрузка новости;
//  РезультатЗагрузкиНовостей - Строка - сюда будет добавляться информация о загрузке этой новости;
//  ДатаСамойПоследнейНовости - Дата - дата самой последней новости.
//                              Если дата обрабатываемой новости выше, то заменить значение этого параметра.
//                              Параметр не изменяется для новости о системной ошибке.
//  ЭтоЗначимаяНовость        - Булево - сюда будет возвращено, значимая ли это новость (Истина) или вспомогательная новость о системной ошибке (Ложь).
//
Процедура ЗагрузитьНовость(
			ФорматНовостей,
			НовостьХДТО,
			ЛентаНовостей,
			РезультатЗагрузкиНовостей,
			ДатаСамойПоследнейНовости,
			ЭтоЗначимаяНовость)

	Перем ОбъектНовость, ЗаписыватьНовость;

	ТипСтрока       = Тип("Строка");
	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	ДатаПубликацииИБ          = '00010101'; // " (в базе было %ДатаПубликацииИБ%)", " (в базе не было)".
	ЗначениеПометкаУдаленияИБ = Ложь; // " (в базе было %ЗначениеПометкаУдаленияИБ%)", " (в базе не было)".

	РезультатЗагрузкиНовости = "%ФорматНовостей%; %УИННовости%; %ЗаголовокНовости%; Дата публикации %ДатаПубликации%%ДатаПубликацииИБ%; ПометкаУдаления = %ЗначениеПометкаУдаления%%ЗначениеПометкаУдаленияИБ%; %ЗаписыватьНовость%; %СуществуетВБазе%; УИН в ИБ [%УИН_ИБ%]; Навигационная ссылка [%НавигационнаяСсылка%]";

	Если НРег(ФорматНовостей) = "rss" Тогда

		// Если новость существует и ее дата публикации не поменялась, то не записывать ее.
		ДатаПубликации   = ПреобразоватьВДату(СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "pubDate")));
		УИННовости       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "guid"));
		ЗаголовокНовости = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "title"));
		Если ПустаяСтрока(УИННовости) Тогда
			УИННовости = Формат(ДатаПубликации, "ДФ=yyyyMMddHHmmss");
		КонецЕсли;
		ЗначениеПометкаУдаления = ПолучитьЗначениеХДТО(НовостьХДТО, "deletionMark");
		Если ВРег(ЗначениеПометкаУдаления) = ВРег("true") Тогда
			ЗначениеПометкаУдаления = Истина;
		ИначеЕсли ВРег(ЗначениеПометкаУдаления) = ВРег("false") Тогда
			ЗначениеПометкаУдаления = Ложь;
		Иначе
			ЗначениеПометкаУдаления = ?(ЗначениеПометкаУдаления = Неопределено, Ложь, ЗначениеПометкаУдаления);
		КонецЕсли;

		// Если пришла новость о системной ошибке, то не изменять ДатаСамойПоследнейНовости,
		//  т.к. эта новость - не значимая и не должна влиять на даты загрузки значимых новостей.
		Если (СокрЛП(ВРег(УИННовости)) = ВРег("313f4928-a71c-4cef-96ee-a4b6106c1275"))
			ИЛИ (СокрЛП(ВРег(УИННовости)) = ВРег("Ошибка")) Тогда
			// ДатаСамойПоследнейНовости - должна остаться как есть.
			ЭтоЗначимаяНовость = Ложь;
		Иначе
			ДатаСамойПоследнейНовости = Макс(ДатаСамойПоследнейНовости, ДатаПубликации);
			ЭтоЗначимаяНовость = Истина;
		КонецЕсли;

		// Оптимизация: не перезаполнять новость, если она существует и ее ДатаПубликации не увеличилась.
		// Исключение:
		//  если новость была помечена на удаление, то перезагрузить ее;
		//  Такой сценарий возможен, если какое-то время новости получались без ввода логина/пароля
		//   для доступа к ВебИТС (т.е. могли приходить с урезанными текстами).
		//   Тогда можно пометить такие "сокращенные" новости на удаление,
		//   сбросить дату последнего получения новостей и загрузить заново.
		ЗаписыватьНовость = Истина;
		СтруктураНовости = ОбработкаНовостейВызовСервера.ПолучитьСсылкуНаНовость(ЛентаНовостей, УИННовости);
		Если СтруктураНовости.Ссылка.Пустая() Тогда
			Если ЗначениеПометкаУдаления = Истина Тогда
				// Мы эту новость еще не загружали, и она уже помечена на удаление (отменена публикация), значит не надо ее загружать вообще.
				ЗаписыватьНовость = Ложь;
			Иначе
				ОбъектНовость = ОбработкаНовостейВызовСервера.ПолучитьОбъектНовости(
					СтруктураНовости.Ссылка,
					ЛентаНовостей,
					УИННовости,
					ДатаПубликации);
			КонецЕсли;
		Иначе
			ДатаПубликацииИБ          = СтруктураНовости.ДатаПубликации;
			ЗначениеПометкаУдаленияИБ = СтруктураНовости.ПометкаУдаления;
			Если (СтруктураНовости.ДатаПубликации < ДатаПубликации)
					ИЛИ (СтруктураНовости.ПометкаУдаления <> ЗначениеПометкаУдаления) Тогда
				ОбъектНовость = ОбработкаНовостейВызовСервера.ПолучитьОбъектНовости(
					СтруктураНовости.Ссылка,
					ЛентаНовостей,
					УИННовости,
					ДатаПубликации,
					Истина); // Очищать табличные части
			Иначе
				ЗаписыватьНовость = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если ЗаписыватьНовость = Истина Тогда

			// Для нетипизированного чтения.
			ОбъектНовость.Наименование                       = ЗаголовокНовости;
			ОбъектНовость.СсылкаНаПолныйТекстНовости         = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "link"));
			ОбъектНовость.ТекстНовости                       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "description"));
			ОбъектНовость.ДатаПубликации                     = ДатаПубликации;
			ОбъектНовость.УИННовости                         = УИННовости;
			ОбъектНовость.Важность                           = ПолучитьЗначениеХДТО(НовостьХДТО, "priority"); // Неопределено = 0
			ОбъектНовость.ДатаСбросаВажности                 = ПреобразоватьВДату(ПолучитьЗначениеХДТО(НовостьХДТО, "priorityExpired"));
			ОбъектНовость.ПриОткрытииСразуПереходитьПоСсылке = ПолучитьЗначениеХДТО(НовостьХДТО, "onlyLink");
			ОбъектНовость.СкрыватьВОбщемСпискеНовостей       = ПолучитьЗначениеХДТО(НовостьХДТО, "hidden");
			ЗначениеАвтоСбросНапоминанияПриПрочтении         = ПолучитьЗначениеХДТО(НовостьХДТО, "autoMarkAsRead");
			ОбъектНовость.АвтоСбросНапоминанияПриПрочтении   = ?(ЗначениеАвтоСбросНапоминанияПриПрочтении = Неопределено, Ложь, ЗначениеАвтоСбросНапоминанияПриПрочтении);
			ОбъектНовость.ПометкаУдаления                    = ЗначениеПометкаУдаления;

			лкТекстНовости = ОбъектНовость.ТекстНовости;
			лкТекстНовости = ОбработкаНовостейКлиентСервер.ЗаменитьСпециальныеСимволыВHTML(лкТекстНовости);
			ОбъектНовость.ТекстНовости = лкТекстНовости;

			лкДатаЗавершения = ПолучитьЗначениеХДТО(НовостьХДТО, "dueDate");
			Если лкДатаЗавершения = Неопределено Тогда
				ОбъектНовость.ДатаЗавершения = '00010101';
			Иначе
				ОбъектНовость.ДатаЗавершения = ПреобразоватьВДату(лкДатаЗавершения);
			КонецЕсли;

			Если ПустаяСтрока(УИННовости) Тогда
				Если НЕ ПустаяСтрока(ОбъектНовость.Ссылка) Тогда
					ОбъектНовость.УИННовости = ОбъектНовость.Ссылка;
				КонецЕсли;
			КонецЕсли;

			// Категории могут передаваться как через стандартный "category", так и через специфичный для 1С "category1C" или "categoryVersions1C".
			ОбработкаНовостейВызовСервера.ОчиститьКатегорииНовости(ОбъектНовость);
			// Обработка "category".
			СвойствоКатегория = НовостьХДТО.Свойства().Получить("category"); // простой тип
			Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
				Если (СвойствоКатегория.ВерхняяГраница = -1
						ИЛИ СвойствоКатегория.ВерхняяГраница > 1) Тогда // Список значений
					СписокКатегорий = НовостьХДТО.ПолучитьСписок(СвойствоКатегория);
					Если ТипЗнч(СписокКатегорий) = ТипСписокXDTO Тогда
						Для каждого ТекущаяКатегория Из СписокКатегорий Цикл
							КатегорияЗначение = ТекущаяКатегория;
							ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияЗначение);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокКатегорий = НовостьХДТО.Получить(СвойствоКатегория);
					Если ТипЗнч(СписокКатегорий) = ТипСтрока Тогда // Когда нет атрибутов, то значение свойства = Строка, а не ОбъектXDTO.
						КатегорияЗначение = СписокКатегорий;
						ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияЗначение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ЗагрузитьБлокДанныхКатегорий1С(НовостьХДТО, ОбъектНовость);
			ЗагрузитьБлокДанныхКатегорийИнтерваловВерсий1С(НовостьХДТО, ОбъектНовость);
			ЗагрузитьБлокДанныхДействий1С(НовостьХДТО, ОбъектНовость);
			ЗагрузитьБлокДанныхПривязокКМетаданным1С(НовостьХДТО, ОбъектНовость);
			ЗагрузитьБлокДанныхБинарныеДанные(НовостьХДТО, ОбъектНовость);

			// Дополнительные проверки / обработки полей новости:
			// 1. В наименовании не должно быть пробелов.
			ОбъектНовость.Наименование = СокрЛП(ОбъектНовость.Наименование);
			// 2. Должен быть заполнен подзаголовок.
			Если ПустаяСтрока(ОбъектНовость.Подзаголовок) Тогда
				ОбъектНовость.Подзаголовок = ОбъектНовость.Наименование;
			КонецЕсли;
			// 3. Дата сброса важности должна быть установлена для очень важных новостей.
			Если ОбъектНовость.Важность = 1 Тогда // Очень важная
				Если (ОбъектНовость.ДатаСбросаВажности = '00010101') Тогда
					ОбъектНовость.ДатаСбросаВажности = ТекущаяУниверсальнаяДата() + 7*24*60*60; // + 1 неделя
				КонецЕсли;
			КонецЕсли;

			Попытка

				Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = НСтр("ru='Начало попытки записи новости с данными:
					|заголовок [%ЗаголовокНовости%], УИН [%УИННовости%], лента новостей [%ЛентаНовостей%], формат [%ФорматНовостей%], дата публикации [%ДатаПубликации%].
					|Время начала (мс): %ТНачало%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокНовости%", ЗаголовокНовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИННовости%", УИННовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПубликации%", ОбъектНовость.ДатаПубликации);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ОбъектНовость.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", ФорматНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Запись новости. Начало'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостьПослеПолученияПередЗаписью(ОбъектНовость, НовостьХДТО);
				ОбъектНовость.ДополнительныеСвойства.Вставить("СброситьПользовательскиеСвойстваПрочтенностиНовости", Истина);
				ОбъектНовость.Записать();
				ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи(ОбъектНовость.Ссылка);

				Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Т1Длительность = Т1Конец - Т1Начало;
				ТекстСообщения = НСтр("ru='Успешная попытка записи новости с данными:
					|заголовок [%ЗаголовокНовости%], УИН [%УИННовости%], лента новостей [%ЛентаНовостей%], формат [%ФорматНовостей%], дата публикации [%ДатаПубликации%], УИН в ИБ [%УИН_ИБ%].
					|Время начала (мс): %ТНачало%
					|Время окончания (мс): %ТКонец%
					|Длительность (мс): %ТДлительность%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокНовости%", ЗаголовокНовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИННовости%", УИННовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПубликации%", ОбъектНовость.ДатаПубликации);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ОбъектНовость.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", ФорматНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИН_ИБ%", ОбъектНовость.Ссылка.УникальныйИдентификатор());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Запись новости. Конец'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					Т1Длительность, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			Исключение

				ТекстСообщения = НСтр("ru='Неудачная попытка записи новости с данными:
					|заголовок [%ЗаголовокНовости%], УИН [%УИННовости%], лента новостей [%ЛентаНовостей%], формат [%ФорматНовостей%], дата публикации [%ДатаПубликации%],
					|по причине: %ИнформацияОбОшибке%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокНовости%", ЗаголовокНовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИННовости%", УИННовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПубликации%", ОбъектНовость.ДатаПубликации);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ОбъектНовость.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", ФорматНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Запись новости. Ошибка'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					ЗначениеВСтрокуВнутр(ОбъектНовость), // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				// Пропустить новость.

			КонецПопытки;

		Иначе

			ТекстСообщения = НСтр("ru='Новость пропущена, ее данные:
				|заголовок [%ЗаголовокНовости%], УИН [%УИННовости%], лента новостей [%ЛентаНовостей%], формат [%ФорматНовостей%], дата публикации [%ДатаПубликации%], %ЗначениеПометкаУдаления%, %СуществуетВБазе%.
				|Возможно, новость уже существует в базе с такой же датой публикации или (при отмене публикации) этой новости нет в базе.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокНовости%", ЗаголовокНовости); // ОбъектНовость не получен, т.к. новость не надо изменять.
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИННовости%", УИННовости);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПубликации%", ДатаПубликации);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", ФорматНовостей);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначениеПометкаУдаления%", ?(ЗначениеПометкаУдаления = Истина, НСтр("ru='на сервере публикация отменена'"), НСтр("ru='опубликована на сервере'")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуществуетВБазе%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='в базе еще не создана'"), НСтр("ru='существует в базе'")));
			// Запись в журнал регистрации
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Запись новости. Новость пропущена'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		КонецЕсли;

		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ФорматНовостей%", ФорматНовостей);
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%УИННовости%", УИННовости);
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗаголовокНовости%", ЗаголовокНовости);
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ДатаПубликации%", Формат(ДатаПубликации, "ДЛФ=DT"));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗначениеПометкаУдаления%", ЗначениеПометкаУдаления);
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗаписыватьНовость%", ?(ЗаписыватьНовость = Истина, НСтр("ru='Будет записана'"), НСтр("ru='Будет пропущена'")));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%СуществуетВБазе%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='В базе еще не создана'"), НСтр("ru='Уже существует в базе'")));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ДатаПубликацииИБ%", ?(СтруктураНовости.Ссылка.Пустая(), " " + НСтр("ru='(в базе не было)'"), " (" + Формат(ДатаПубликацииИБ, "ДЛФ=DT") + ")"));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗначениеПометкаУдаленияИБ%", ?(СтруктураНовости.Ссылка.Пустая(), " " + НСтр("ru='(в базе не было)'"), " (" + ЗначениеПометкаУдаленияИБ + ")"));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%УИН_ИБ%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='(еще не создана)'"), СтруктураНовости.УИН_ИБ));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%НавигационнаяСсылка%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='(еще не создана)'"), ПолучитьНавигационнуюСсылку(СтруктураНовости.Ссылка)));

	ИначеЕсли НРег(ФорматНовостей) = "feed" Тогда

		// Если новость существует и ее дата публикации не поменялась, то не записывать ее.
		ДатаПубликации   = ПреобразоватьВДату(ПолучитьЗначениеХДТО(НовостьХДТО, "published")); // published, а не updated.value. В противном случае новость при каждой перепубликации будет "прыгать" в начало списка новостей.
		УИННовости       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "id"));
		ЗаголовокНовости = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "title"));
		Если ПустаяСтрока(УИННовости) Тогда
			УИННовости = Формат(ДатаПубликации, "ДФ=yyyyMMddHHmmss");
		КонецЕсли;
		ЗначениеПометкаУдаления = ПолучитьЗначениеХДТО(НовостьХДТО, "deletionMark");
		Если ВРег(ЗначениеПометкаУдаления) = ВРег("true") Тогда
			ЗначениеПометкаУдаления = Истина;
		ИначеЕсли ВРег(ЗначениеПометкаУдаления) = ВРег("false") Тогда
			ЗначениеПометкаУдаления = Ложь;
		Иначе
			ЗначениеПометкаУдаления = ?(ЗначениеПометкаУдаления = Неопределено, Ложь, ЗначениеПометкаУдаления);
		КонецЕсли;

		// Если пришла новость о системной ошибке, то не изменять ДатаСамойПоследнейНовости,
		//  т.к. эта новость - не значимая и не должна влиять на даты загрузки значимых новостей.
		Если (СокрЛП(ВРег(УИННовости)) = ВРег("313f4928-a71c-4cef-96ee-a4b6106c1275"))
			ИЛИ (СокрЛП(ВРег(УИННовости)) = ВРег("Ошибка")) Тогда
			// ДатаСамойПоследнейНовости - должна остаться как есть.
			ЭтоЗначимаяНовость = Ложь;
		Иначе
			ДатаСамойПоследнейНовости = Макс(ДатаСамойПоследнейНовости, ДатаПубликации);
			ЭтоЗначимаяНовость = Истина;
		КонецЕсли;

		// Оптимизация: не перезаполнять новость, если она существует и ее ДатаПубликации не увеличилась.
		// Исключение:
		//  если новость была помечена на удаление, то перезагрузить ее.
		//  Такой сценарий возможен, если какое-то время новости получались без ввода логина/пароля
		//   для доступа к ВебИТС (т.е. могли приходить с урезанными текстами).
		//   Тогда можно пометить такие "сокращенные" новости на удаление,
		//   сбросить дату последнего получения новостей и загрузить заново.
		ЗаписыватьНовость = Истина;
		СтруктураНовости = ОбработкаНовостейВызовСервера.ПолучитьСсылкуНаНовость(ЛентаНовостей, УИННовости);
		Если СтруктураНовости.Ссылка.Пустая() Тогда
			Если ЗначениеПометкаУдаления = Истина Тогда
				// Мы эту новость еще не загружали, и она уже помечена на удаление (отменена публикация), значит не надо ее загружать вообще.
				ЗаписыватьНовость = Ложь;
			Иначе
				ОбъектНовость = ОбработкаНовостейВызовСервера.ПолучитьОбъектНовости(
					СтруктураНовости.Ссылка,
					ЛентаНовостей,
					УИННовости,
					ДатаПубликации);
			КонецЕсли;
		Иначе
			ДатаПубликацииИБ          = СтруктураНовости.ДатаПубликации;
			ЗначениеПометкаУдаленияИБ = СтруктураНовости.ПометкаУдаления;
			Если (СтруктураНовости.ДатаПубликации < ДатаПубликации)
					ИЛИ (СтруктураНовости.ПометкаУдаления <> ЗначениеПометкаУдаления) Тогда
				ОбъектНовость = ОбработкаНовостейВызовСервера.ПолучитьОбъектНовости(
					СтруктураНовости.Ссылка,
					ЛентаНовостей,
					УИННовости,
					ДатаПубликации,
					Истина); // Очищать табличные части
			Иначе
				ЗаписыватьНовость = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если ЗаписыватьНовость = Истина Тогда

			// Для нетипизированного чтения
			ОбъектНовость.Наименование                       = ЗаголовокНовости;
			ОбъектНовость.Подзаголовок                       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "subtitle"));
			ОбъектНовость.СсылкаНаПолныйТекстНовости         = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "link.href"));
			ОбъектНовость.ТекстНовости                       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "summary"));
			ОбъектНовость.ДатаПубликации                     = ДатаПубликации;
			ОбъектНовость.УИННовости                         = УИННовости;
			ОбъектНовость.Важность                           = ПолучитьЗначениеХДТО(НовостьХДТО, "priority"); // Неопределено = 0
			ОбъектНовость.ДатаСбросаВажности                 = ПреобразоватьВДату(ПолучитьЗначениеХДТО(НовостьХДТО, "priorityExpired"));
			ОбъектНовость.ПриОткрытииСразуПереходитьПоСсылке = ПолучитьЗначениеХДТО(НовостьХДТО, "onlyLink");
			ОбъектНовость.СкрыватьВОбщемСпискеНовостей       = ПолучитьЗначениеХДТО(НовостьХДТО, "hidden");
			ЗначениеАвтоСбросНапоминанияПриПрочтении         = ПолучитьЗначениеХДТО(НовостьХДТО, "autoMarkAsRead");
			ОбъектНовость.АвтоСбросНапоминанияПриПрочтении   = ?(ЗначениеАвтоСбросНапоминанияПриПрочтении = Неопределено, Ложь, ЗначениеАвтоСбросНапоминанияПриПрочтении);
			ОбъектНовость.ПометкаУдаления                    = ЗначениеПометкаУдаления;

			лкТекстНовости = ОбъектНовость.ТекстНовости;
			лкТекстНовости = ОбработкаНовостейКлиентСервер.ЗаменитьСпециальныеСимволыВHTML(лкТекстНовости);
			ОбъектНовость.ТекстНовости = лкТекстНовости;

			лкДатаЗавершения = ПолучитьЗначениеХДТО(НовостьХДТО, "dueDate");
			Если лкДатаЗавершения = Неопределено Тогда
				ОбъектНовость.ДатаЗавершения = '00010101';
			Иначе
				ОбъектНовость.ДатаЗавершения = ПреобразоватьВДату(лкДатаЗавершения);
			КонецЕсли;

			// Категории могут передаваться как через стандартный "category", так и через специфичный для 1С "category1C".
			ОбработкаНовостейВызовСервера.ОчиститьКатегорииНовости(ОбъектНовость);
			// Обработка "category"
			СвойствоКатегория = НовостьХДТО.Свойства().Получить("category"); // атрибуты term и label
			Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
				Если (СвойствоКатегория.ВерхняяГраница = -1
						ИЛИ СвойствоКатегория.ВерхняяГраница > 1) Тогда // Список значений
					СписокКатегорий = НовостьХДТО.ПолучитьСписок(СвойствоКатегория);
					Если ТипЗнч(СписокКатегорий) = ТипСписокXDTO Тогда
						Для каждого ТекущаяКатегория Из СписокКатегорий Цикл
							// В формате Atom нет простого содержимого для категории, только атрибуты term и label.
							КатегорияЗначение = "";
							СвойствоКатегорияЗначение = ТекущаяКатегория.Свойства().Получить("term");
							Если ТипЗнч(СвойствоКатегорияЗначение) = ТипСвойствоXDTO Тогда
								КатегорияЗначение = ТекущаяКатегория.Получить("term");
							КонецЕсли;
							ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияЗначение);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокКатегорий = НовостьХДТО.Получить(СвойствоКатегория);
					Если ТипЗнч(СписокКатегорий) = ТипОбъектXDTO Тогда
						ТекущаяКатегория = СписокКатегорий;
						// В формате Atom нет простого содержимого для категории, только атрибуты term и label.
						КатегорияЗначение = "";
						СвойствоКатегорияЗначение = ТекущаяКатегория.Свойства().Получить("term");
						Если ТипЗнч(СвойствоКатегорияЗначение) = ТипСвойствоXDTO Тогда
							КатегорияЗначение = ТекущаяКатегория.Получить("term");
						КонецЕсли;
						ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияЗначение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ЗагрузитьБлокДанныхКатегорий1С(НовостьХДТО, ОбъектНовость);
			ЗагрузитьБлокДанныхКатегорийИнтерваловВерсий1С(НовостьХДТО, ОбъектНовость);
			ЗагрузитьБлокДанныхДействий1С(НовостьХДТО, ОбъектНовость);
			ЗагрузитьБлокДанныхПривязокКМетаданным1С(НовостьХДТО, ОбъектНовость);
			ЗагрузитьБлокДанныхБинарныеДанные(НовостьХДТО, ОбъектНовость);

			// Дополнительные проверки / обработки полей новости:
			// 1. В наименовании не должно быть пробелов.
			ОбъектНовость.Наименование = СокрЛП(ОбъектНовость.Наименование);
			// 2. Должен быть заполнен подзаголовок.
			Если ПустаяСтрока(ОбъектНовость.Подзаголовок) Тогда
				ОбъектНовость.Подзаголовок = ОбъектНовость.Наименование;
			КонецЕсли;
			// 3. Дата сброса важности должна быть установлена для очень важных новостей.
			Если ОбъектНовость.Важность = 1 Тогда // Очень важная
				Если (ОбъектНовость.ДатаСбросаВажности = '00010101') Тогда
					ОбъектНовость.ДатаСбросаВажности = ТекущаяУниверсальнаяДата() + 7*24*60*60; // + 1 неделя
				КонецЕсли;
			КонецЕсли;

			Попытка

				Т1Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ТекстСообщения = НСтр("ru='Начало попытки записи новости с данными:
					|заголовок [%ЗаголовокНовости%], УИН [%УИННовости%], лента новостей [%ЛентаНовостей%], формат [%ФорматНовостей%], дата публикации [%ДатаПубликации%].
					|Время начала (мс): %ТНачало%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокНовости%", ЗаголовокНовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИННовости%", УИННовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПубликации%", ОбъектНовость.ДатаПубликации);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ОбъектНовость.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", ФорматНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Запись новости. Начало'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостьПослеПолученияПередЗаписью(ОбъектНовость, НовостьХДТО);
				ОбъектНовость.ДополнительныеСвойства.Вставить("СброситьПользовательскиеСвойстваПрочтенностиНовости", Истина);
				ОбъектНовость.Записать();
				ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи(ОбъектНовость.Ссылка);

				Т1Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Т1Длительность = Т1Конец - Т1Начало;
				ТекстСообщения = НСтр("ru='Успешная попытка записи новости с данными:
					|заголовок [%ЗаголовокНовости%], УИН [%УИННовости%], лента новостей [%ЛентаНовостей%], формат [%ФорматНовостей%], дата публикации [%ДатаПубликации%], УИН в ИБ [%УИН_ИБ%].
					|Время начала (мс): %ТНачало%
					|Время окончания (мс): %ТКонец%
					|Длительность (мс): %ТДлительность%
					|'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокНовости%", ЗаголовокНовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИННовости%", УИННовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПубликации%", ОбъектНовость.ДатаПубликации);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ОбъектНовость.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", ФорматНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИН_ИБ%", ОбъектНовость.Ссылка.УникальныйИдентификатор());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", Т1Начало);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТКонец%", Т1Конец);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТДлительность%", Т1Длительность);
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Запись новости. Конец'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					Т1Длительность, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

			Исключение

				ТекстСообщения = НСтр("ru='Неудачная попытка записи новости с данными:
					|заголовок [%ЗаголовокНовости%], УИН [%УИННовости%], лента новостей [%ЛентаНовостей%], формат [%ФорматНовостей%], дата публикации [%ДатаПубликации%],
					|по причине: %ИнформацияОбОшибке%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокНовости%", ЗаголовокНовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИННовости%", УИННовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПубликации%", ОбъектНовость.ДатаПубликации);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ОбъектНовость.ЛентаНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", ФорматНовостей);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Запись новости. Ошибка'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					Метаданные.Справочники.Новости, // ОбъектМетаданных
					ЗначениеВСтрокуВнутр(ОбъектНовость), // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

				// Пропустить новость.

			КонецПопытки;

		Иначе

			ТекстСообщения = НСтр("ru='Новость пропущена, ее данные:
				|заголовок [%ЗаголовокНовости%], УИН [%УИННовости%], лента новостей [%ЛентаНовостей%], формат [%ФорматНовостей%], дата публикации [%ДатаПубликации%], %ЗначениеПометкаУдаления%, %СуществуетВБазе%.
				|Возможно, новость уже существует в базе с такой же датой публикации или (при отмене публикации) этой новости нет в базе.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаголовокНовости%", ЗаголовокНовости); // ОбъектНовость не получен, т.к. новость не надо изменять.
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УИННовости%", УИННовости);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаПубликации%", ДатаПубликации);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ЛентаНовостей);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ФорматНовостей%", ФорматНовостей);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначениеПометкаУдаления%", ?(ЗначениеПометкаУдаления = Истина, НСтр("ru='на сервере публикация отменена'"), НСтр("ru='опубликована на сервере'")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуществуетВБазе%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='в базе еще не создана'"), НСтр("ru='существует в базе'")));
			// Запись в журнал регистрации
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Запись новости. Новость пропущена'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		КонецЕсли;

		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ФорматНовостей%", ФорматНовостей);
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%УИННовости%", УИННовости);
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗаголовокНовости%", ЗаголовокНовости);
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ДатаПубликации%", Формат(ДатаПубликации, "ДЛФ=DT"));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗначениеПометкаУдаления%", ЗначениеПометкаУдаления);
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗаписыватьНовость%", ?(ЗаписыватьНовость = Истина, НСтр("ru='Будет записана'"), НСтр("ru='Будет пропущена'")));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%СуществуетВБазе%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='В базе еще не создана'"), НСтр("ru='Уже существует в базе'")));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ДатаПубликацииИБ%", ?(СтруктураНовости.Ссылка.Пустая(), " " + НСтр("ru='(в базе не было)'"), " (" + Формат(ДатаПубликацииИБ, "ДЛФ=DT") + ")"));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗначениеПометкаУдаленияИБ%", ?(СтруктураНовости.Ссылка.Пустая(), " " + НСтр("ru='(в базе не было)'"), " (" + ЗначениеПометкаУдаленияИБ + ")"));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%УИН_ИБ%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='(еще не создана)'"), СтруктураНовости.УИН_ИБ));
		РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%НавигационнаяСсылка%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='(еще не создана)'"), ПолучитьНавигационнуюСсылку(СтруктураНовости.Ссылка)));

	КонецЕсли; // ИначеЕсли НРег(ФорматНовостей) = ... Тогда

	РезультатЗагрузкиНовостей = РезультатЗагрузкиНовостей + РезультатЗагрузкиНовости + Символы.ПС;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_КатегорииПростые

// Найден блок данных категорий 1С - загрузить его.
//
// Заполнение регистра сведений необработанных категорий для новостей.
// При загрузке новостей категоризация не будет сразу заполняться,
//  т.к. может быть ситуация, что строка "География=Усть-Илимск" (category),
//  или "География", "Усть-Илимск", "eq" (category1C) не обработается из-за того,
//  что город "Усть-Илимск" еще не загружен с серверов (не обновились стандартные списки).
// Поэтому категории вначале будут загружаться в "сыром" (необработанном) виде, в виде строк в регистр "КатегорииНовостейПростыеНеобработанные",
// а затем отдельной обработкой преобразовываться и перемещаться в регистр сведений "КатегорииНовостейПростые" или "КатегорииНовостейИнтервалыВерсий".
//
Процедура ЗагрузитьБлокДанныхКатегорий1С(НовостьХДТО, ОбъектНовость)

	// Регистр сведений необработанных категорий для этой новости уже очищен ранее методом "ОчиститьКатегорииНовости".

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Добавить необработанные простые категории.
	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("categories1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("category1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхКатегорий1С_Категория(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхКатегорий1С_Категория(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок данных 1С - загрузить его, загрузка единичной категории.
//
Процедура ЗагрузитьБлокДанныхКатегорий1С_Категория(ДанныеХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		КатегорияНовостейСтрока         = "";
		ЗначениеКатегорииНовостейСтрока = "";
		УсловиеОтбора                   = "";

		СвойствоКатегория = ДанныеХДТО.Свойства().Получить("categoryCode");
		Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
			КатегорияНовостейСтрока = ДанныеХДТО.Получить(СвойствоКатегория);
		КонецЕсли;

		СвойствоЗначениеКатегории = ДанныеХДТО.Свойства().Получить("categoryValue");
		Если ТипЗнч(СвойствоЗначениеКатегории) = ТипСвойствоXDTO Тогда
			ЗначениеКатегорииНовостейСтрока = ДанныеХДТО.Получить(СвойствоЗначениеКатегории);
		КонецЕсли;

		СвойствоУсловие = ДанныеХДТО.Свойства().Получить("condition");
		Если ТипЗнч(СвойствоУсловие) = ТипСвойствоXDTO Тогда
			УсловиеОтбора = ДанныеХДТО.Получить(СвойствоУсловие);
		КонецЕсли;

		Если ВРег(КатегорияНовостейСтрока) = ВРег("Важность") // Идентификатор.
				И ВРег(ЗначениеКатегорииНовостейСтрока) = ВРег("Очень важная") // Идентификатор.
				И ВРег(УсловиеОтбора) = ВРег("eq") Тогда
			ОбъектНовость.Важность = 1; // Перезапишет ОбъектНовость.Важность, если было установлено ранее из тега priority.
		ИначеЕсли ВРег(КатегорияНовостейСтрока) = ВРег("Важность")
				И ВРег(ЗначениеКатегорииНовостейСтрока) = ВРег("Важная") // Идентификатор.
				И ВРег(УсловиеОтбора) = ВРег("eq") Тогда
			ОбъектНовость.Важность = 2; // Перезапишет ОбъектНовость.Важность, если было установлено ранее из тега priority.
		Иначе
			// Добавить данные
			Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
			Запись.КатегорияНовостейСтрока         = КатегорияНовостейСтрока;
			Запись.ЗначениеКатегорииНовостейСтрока = ЗначениеКатегорииНовостейСтрока;
			Запись.УсловиеОтбора                   = УсловиеОтбора; // Это не измерение
			Запись.ЛентаНовостей                   = ОбъектНовость.ЛентаНовостей;
			Запись.УИННовости                      = ОбъектНовость.УИННовости;
			Запись.Записать(Истина);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_КатегорииИнтервалыВерсий

// Найден блок данных категорий (интервалы версий) 1С - загрузить его.
//
// Заполнение регистра сведений необработанных категорий (интервалов версий) для новостей.
// При загрузке новостей категоризация не будет сразу заполняться,
//  т.к. может быть ситуация, что не все категории еще загружены с сервера.
// Поэтому категории вначале будут загружаться в "сыром" (необработанном) виде, в виде строк,
//  в регистр "КатегорииНовостейИнтервалыВерсийНеобработанные",
//  а затем отдельной обработкой преобразовываться и перемещаться в регистр сведений
//  "КатегорииНовостейПростые" или "КатегорииНовостейИнтервалыВерсий".
//
Процедура ЗагрузитьБлокДанныхКатегорийИнтерваловВерсий1С(НовостьХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Регистр сведений необработанных категорий для этой новости уже очищен ранее методом "ОчиститьКатегорииНовости".

	// Добавить необработанные категории интервалов версий.
	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("categoriesVersions1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("categoryVersions1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхКатегорий1С_КатегорияИнтервалВерсий(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхКатегорий1С_КатегорияИнтервалВерсий(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок данных 1С (интервалы версий) - загрузить его, загрузка единичной привязки к интервалу версий.
//
Процедура ЗагрузитьБлокДанныхКатегорий1С_КатегорияИнтервалВерсий(ДанныеХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		КатегорияНовостейСтрока = "";
		Продукт                 = "";
		ВерсияОТ                = "";
		ВерсияДО                = "";

		СвойствоКатегория = ДанныеХДТО.Свойства().Получить("categoryCode");
		Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
			КатегорияНовостейСтрока = ДанныеХДТО.Получить(СвойствоКатегория);
		КонецЕсли;

		СвойствоПродукт = ДанныеХДТО.Свойства().Получить("productCode");
		Если ТипЗнч(СвойствоПродукт) = ТипСвойствоXDTO Тогда
			Продукт = ДанныеХДТО.Получить(СвойствоПродукт);
		КонецЕсли;

		СвойствоВерсияОТ = ДанныеХДТО.Свойства().Получить("versionFrom");
		Если ТипЗнч(СвойствоВерсияОТ) = ТипСвойствоXDTO Тогда
			ВерсияОТ = ДанныеХДТО.Получить(СвойствоВерсияОТ);
		КонецЕсли;

		СвойствоВерсияДО = ДанныеХДТО.Свойства().Получить("versionTo");
		Если ТипЗнч(СвойствоВерсияДО) = ТипСвойствоXDTO Тогда
			ВерсияДО = ДанныеХДТО.Получить(СвойствоВерсияДО);
		КонецЕсли;

		// Добавить данные.
		Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьМенеджерЗаписи();
		Запись.КатегорияНовостейСтрока = КатегорияНовостейСтрока;
		Запись.Продукт                 = Продукт;
		Запись.ВерсияОТ                = ВерсияОТ;
		Запись.ВерсияДО                = ВерсияДО;
		Запись.ЛентаНовостей           = ОбъектНовость.ЛентаНовостей;
		Запись.УИННовости              = ОбъектНовость.УИННовости;
		Запись.Записать(Истина);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_Действия

// Найден блок данных действий 1С - загрузить его.
//
Процедура ЗагрузитьБлокДанныхДействий1С(НовостьХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Предварительно очистить таблицу действий и параметров в объекте.
	ОбъектНовость.Действия.Очистить();
	ОбъектНовость.ПараметрыДействий.Очистить();

	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("actions1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("action1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхДействий1С_Действие(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхДействий1С_Действие(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок данных 1С - загрузить его, загрузка единичного действия.
//
Процедура ЗагрузитьБлокДанныхДействий1С_Действие(ДанныеХДТО, ОбъектНовость)

	СписокПараметров = Новый СписокЗначений;

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		УИНДействия = "";
		Действие = "";

		СвойствоУИНДействия = ДанныеХДТО.Свойства().Получить("actionID");
		Если ТипЗнч(СвойствоУИНДействия) = ТипСвойствоXDTO Тогда
			УИНДействия = ДанныеХДТО.Получить("actionID");
		КонецЕсли;

		СвойствоДействие = ДанныеХДТО.Свойства().Получить("action");
		Если ТипЗнч(СвойствоДействие) = ТипСвойствоXDTO Тогда
			Действие = ДанныеХДТО.Получить("action");
		КонецЕсли;

		// Возможно, есть параметры.
		СвойствоБлокСписокПараметров = ДанныеХДТО.Свойства().Получить("parametersList");
		Если ТипЗнч(СвойствоБлокСписокПараметров) = ТипСвойствоXDTO Тогда
			БлокСписокПараметров = ДанныеХДТО.Получить(СвойствоБлокСписокПараметров);
			Если ТипЗнч(БлокСписокПараметров) = ТипОбъектXDTO Тогда
				СвойствоПараметры = БлокСписокПараметров.Свойства().Получить("parameter");
				Если ТипЗнч(СвойствоПараметры) = ТипСвойствоXDTO Тогда
					Если (СвойствоПараметры.ВерхняяГраница = -1
							ИЛИ СвойствоПараметры.ВерхняяГраница > 1) Тогда // Список значений
						Список = БлокСписокПараметров.ПолучитьСписок(СвойствоПараметры);
						Если ТипЗнч(Список) = ТипСписокXDTO Тогда
							Для каждого ТекущийПараметр Из Список Цикл
								ЗагрузитьБлокДанныхДействий1С_ПараметрыДействия(СписокПараметров, ТекущийПараметр);
							КонецЦикла;
						КонецЕсли;
					Иначе // Одно значение
						Список = БлокСписокПараметров.Получить(СвойствоПараметры);
						Если ТипЗнч(Список) = ТипОбъектXDTO Тогда
							ТекущийПараметр = Список;
							ЗагрузитьБлокДанныхДействий1С_ПараметрыДействия(СписокПараметров, ТекущийПараметр);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Добавить данные.
		НоваяСтрокаДействие = ОбъектНовость.Действия.Добавить();
		НоваяСтрокаДействие.УИНДействия      = УИНДействия;
		НоваяСтрокаДействие.Действие         = Действие;
		Для каждого ТекущаяСтрока Из СписокПараметров Цикл
			НоваяСтрокаПараметр = ОбъектНовость.ПараметрыДействий.Добавить();
			НоваяСтрокаПараметр.УИНДействия       = УИНДействия;
			НоваяСтрокаПараметр.Параметр          = ТекущаяСтрока.Представление;
			НоваяСтрокаПараметр.ЗначениеПараметра = ТекущаяСтрока.Значение;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Найден блок данных 1С - загрузить его, загрузка единичного параметра каждого действия.
//
Процедура ЗагрузитьБлокДанныхДействий1С_ПараметрыДействия(СписокПараметров, ПараметрХДТО)

	ТипОбъектXDTO     = Тип("ОбъектXDTO");
	ТипСвойствоXDTO   = Тип("СвойствоXDTO");
	ТипСписокXDTO     = Тип("СписокXDTO");
	ТипСписокЗначений = Тип("СписокЗначений");

	Если ТипЗнч(СписокПараметров) <> ТипСписокЗначений Тогда
		СписокПараметров = Новый СписокЗначений;
	КонецЕсли;

	ПараметрИмя      = "";
	ПараметрЗначение = "";
	СвойствоПараметрИмя = ПараметрХДТО.Свойства().Получить("name");
	Если ТипЗнч(СвойствоПараметрИмя) = ТипСвойствоXDTO Тогда
		ПараметрИмя = ПараметрХДТО.Получить("name");
	КонецЕсли;
	СвойствоПараметрЗначение = ПараметрХДТО.Свойства().Получить("value");
	Если ТипЗнч(СвойствоПараметрЗначение) = ТипСвойствоXDTO Тогда
		ПараметрЗначение = ПараметрХДТО.Получить("value");
	КонецЕсли;

	СписокПараметров.Добавить(ПараметрЗначение, ПараметрИмя);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_ПривязкиКМетаданным

// Найден блок данных контекстных новостей 1С - загрузить его.
//
Процедура ЗагрузитьБлокДанныхПривязокКМетаданным1С(НовостьХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Предварительно очистить таблицу привязок к метаданным в объекте.
	ОбъектНовость.ПривязкаКМетаданным.Очистить();

	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("metadataLinks1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("metadataLink1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхПривязокКМетаданным1С_Привязки(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхПривязокКМетаданным1С_Привязки(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок данных привязок к метаданным 1С - загрузить его, загрузка единичной привязки.
//
Процедура ЗагрузитьБлокДанныхПривязокКМетаданным1С_Привязки(ДанныеХДТО, ОбъектНовость)

	СписокПараметров = Новый СписокЗначений;

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		лкМетаданные              = "";
		лкФорма                   = "";
		лкСобытие                 = "";
		лкВажность                = 0;
		лкДатаСбросаВажности      = '00010101';
		лкПоказыватьВФормеОбъекта = Ложь;
		лкЭтоПостояннаяНовость    = Ложь;

		СвойствоМетаданные = ДанныеХДТО.Свойства().Получить("metadataName");
		Если ТипЗнч(СвойствоМетаданные) = ТипСвойствоXDTO Тогда
			лкМетаданные = ДанныеХДТО.Получить("metadataName");
		КонецЕсли;

		СвойствоФорма = ДанныеХДТО.Свойства().Получить("formName");
		Если ТипЗнч(СвойствоФорма) = ТипСвойствоXDTO Тогда
			лкФорма = ДанныеХДТО.Получить("formName");
		КонецЕсли;

		СвойствоСобытие = ДанныеХДТО.Свойства().Получить("eventName");
		Если ТипЗнч(СвойствоСобытие) = ТипСвойствоXDTO Тогда
			лкСобытие = ДанныеХДТО.Получить("eventName");
		КонецЕсли;

		СвойствоВажность = ДанныеХДТО.Свойства().Получить("priority");
		Если ТипЗнч(СвойствоВажность) = ТипСвойствоXDTO Тогда
			лкВажность = ДанныеХДТО.Получить("priority");
		КонецЕсли;

		СвойствоДатаСбросаВажности = ДанныеХДТО.Свойства().Получить("priorityExpired");
		Если ТипЗнч(СвойствоДатаСбросаВажности) = ТипСвойствоXDTO Тогда
			лкДатаСбросаВажности = ПреобразоватьВДату(ДанныеХДТО.Получить("priorityExpired"));
		КонецЕсли;

		СвойствоПоказыватьВФормеОбъекта = ДанныеХДТО.Свойства().Получить("openWithinOwnerForm");
		Если ТипЗнч(СвойствоПоказыватьВФормеОбъекта) = ТипСвойствоXDTO Тогда
			лкПоказыватьВФормеОбъекта = ДанныеХДТО.Получить("openWithinOwnerForm");
		КонецЕсли;

		СвойствоЭтоПостояннаяНовость = ДанныеХДТО.Свойства().Получить("isPinned");
		Если ТипЗнч(СвойствоЭтоПостояннаяНовость) = ТипСвойствоXDTO Тогда
			лкЭтоПостояннаяНовость = ДанныеХДТО.Получить("isPinned");
		КонецЕсли;

		// Добавить данные.
		НоваяСтрокаДействие = ОбъектНовость.ПривязкаКМетаданным.Добавить();
		НоваяСтрокаДействие.Метаданные              = лкМетаданные;
		НоваяСтрокаДействие.Форма                   = лкФорма;
		НоваяСтрокаДействие.Событие                 = лкСобытие;
		НоваяСтрокаДействие.ПоказыватьВФормеОбъекта = лкПоказыватьВФормеОбъекта;
		НоваяСтрокаДействие.Важность                = лкВажность;
		НоваяСтрокаДействие.ДатаСбросаВажности      = лкДатаСбросаВажности;
		НоваяСтрокаДействие.ЭтоПостояннаяНовость    = лкЭтоПостояннаяНовость;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_БинарныеДанные

// Найден блок бинарных данных (картинки, внешние отчеты / обработки) - загрузить его.
//
Процедура ЗагрузитьБлокДанныхБинарныеДанные(НовостьХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Предварительно очистить таблицу бинарных данных.
	ОбъектНовость.БинарныеДанные.Очистить();

	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("binaryDataList1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("binaryData1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхБинарныеДанные_Элементы(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхБинарныеДанные_Элементы(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок бинарных данных 1С - загрузить его, загрузка единичного объекта.
//
Процедура ЗагрузитьБлокДанныхБинарныеДанные_Элементы(ДанныеХДТО, ОбъектНовость)

	СписокПараметров = Новый СписокЗначений;

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		УИН               = "";
		Данные            = Неопределено;
		Заголовок         = "";
		ИнтернетСсылка    = "";
		ПорядокСортировки = 0;

		СвойствоУИН = ДанныеХДТО.Свойства().Получить("id");
		Если ТипЗнч(СвойствоУИН) = ТипСвойствоXDTO Тогда
			УИН = ДанныеХДТО.Получить(СвойствоУИН);
		КонецЕсли;

		// Данные в формате base64 нельзя хранить в атрибутах, т.к. они потом не прочитаются (в атрибутах нельзя передавать переносы строк).
		СвойствоДвоичныеДанные = ДанныеХДТО.Свойства().Получить("binaryData");
		Если ТипЗнч(СвойствоДвоичныеДанные) = ТипСвойствоXDTO Тогда
			Попытка
				Данные = Новый ХранилищеЗначения(
					Base64Значение(ДанныеХДТО.Получить(СвойствоДвоичныеДанные)));
			Исключение
				Данные = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = НСтр("ru='Не удалось загрузить бинарные данные для новости с УИН %ОбъектНовость.УИННовости% по причине: %ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "ОбъектНовость.УИННовости", ОбъектНовость.УИННовости);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Чтение новости. Блок бинарных данных'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецПопытки;
		КонецЕсли;

		СвойствоЗаголовок = ДанныеХДТО.Свойства().Получить("title");
		Если ТипЗнч(СвойствоЗаголовок) = ТипСвойствоXDTO Тогда
			Заголовок = ДанныеХДТО.Получить(СвойствоЗаголовок);
		КонецЕсли;

		СвойствоИнтернетСсылка = ДанныеХДТО.Свойства().Получить("link");
		Если ТипЗнч(СвойствоИнтернетСсылка) = ТипСвойствоXDTO Тогда
			ИнтернетСсылка = ДанныеХДТО.Получить(СвойствоИнтернетСсылка);
		КонецЕсли;

		СвойствоПорядокСортировки = ДанныеХДТО.Свойства().Получить("order");
		Если ТипЗнч(СвойствоПорядокСортировки) = ТипСвойствоXDTO Тогда
			ПорядокСортировки = ДанныеХДТО.Получить(СвойствоПорядокСортировки);
		КонецЕсли;

		// Добавить данные.
		НоваяСтрокаДействие = ОбъектНовость.БинарныеДанные.Добавить();
		НоваяСтрокаДействие.УИН               = УИН;
		НоваяСтрокаДействие.Данные            = Данные;
		НоваяСтрокаДействие.ИнтернетСсылка    = ИнтернетСсылка;
		НоваяСтрокаДействие.Заголовок         = Заголовок;
		НоваяСтрокаДействие.ПорядокСортировки = ПорядокСортировки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Заполнение регистра сведений последних обновлений.
//
// Параметры:
//  Обновление   - ОбъектХДТО с полями:
//   * listName;
//   * categoryCode;
//   * categoryGuid;
//   * updated.
//
Процедура ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(Обновление)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(Обновление) = ТипОбъектXDTO Тогда
		Попытка
			Если Обновление.Свойства().Получить("listName") <> Неопределено Тогда
				listName = Обновление.Получить("listName"); // Строка
			Иначе
				listName = "";
			КонецЕсли;
			Если Обновление.Свойства().Получить("categoryCode") <> Неопределено Тогда
				categoryCode = Обновление.Получить("categoryCode"); // Строка
			Иначе
				categoryCode = "";
			КонецЕсли;
			Если Обновление.Свойства().Получить("categoryGuid") <> Неопределено Тогда
				categoryGuid = Обновление.Получить("categoryGuid"); // Строка
			Иначе
				categoryGuid = "";
			КонецЕсли;
			Если Обновление.Свойства().Получить("updated") <> Неопределено Тогда
				updated = ПреобразоватьВДату(Обновление.Получить("updated"));
			Иначе
				updated = '00010101';
			КонецЕсли;
		Исключение
				ТекстСообщения = НСтр("ru='Ошибка загрузки строки обновления списков: %ИнформацияОбОшибке%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				// Запись в журнал регистрации
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Блок дат обновления списков'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
				// Пропустить строку обновлений.
				Возврат;
		КонецПопытки;
		Если listName = "Список лент новостей" Тогда // Идентификатор.
			Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
			Запись.Список = listName;
			Запись.Прочитать(); // Запись будет ниже.
			Запись.ТекущаяВерсияНаСервере = updated;
			Запись.Записать(Истина);
		ИначеЕсли listName = "Список категорий новостей" Тогда // Идентификатор.
			Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
			Запись.Список = listName;
			Запись.Прочитать(); // Запись будет ниже.
			Запись.ТекущаяВерсияНаСервере = updated;
			Запись.Записать(Истина);
		ИначеЕсли listName = "Значения категории новостей" Тогда // Идентификатор.
			// Возможна ситуация, когда передается код элемента плана видов характеристик,
			//  а его еще нет в базе - не обновлен список категорий новостей.
			// Эту ситуацию отдельно не надо обрабатывать, т.к. тогда дата для списка
			//  "Список категорий новостей" будет неактуальной и все равно будет загружаться список категорий.
			Значение = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(categoryCode);
			Если Значение.Пустая() Тогда
				Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
				Запись.Список = "Значения категории новостей:" + categoryGuid; // Идентификатор.
				Запись.Прочитать(); // Запись будет ниже.
				Запись.ТекущаяВерсияНаСервере = updated;
				Запись.Записать(Истина);
			Иначе
				Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
				Запись.Список = Значение;
				Запись.Прочитать(); // Запись будет ниже.
				Запись.ТекущаяВерсияНаСервере = updated;
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СтандартныеСписки

// Функция возвращает объект базы данных по переданному объекту ХДТО.
//
// Параметры:
//  ОбъектХДТО    - Объект XDTO;
//  Режим         - Строка - в этот параметр передастся режим получения объекта - "Создание" или "Обновление".
//
// Возвращаемое значение:
//  ПланыВидовХарактеристикОбъект.КатегорииНовостей.
//
Функция ЗаполнитьОбъектКатегорияНовостей(ОбъектХДТО, Режим = "")

	КатегорияСсылка = ПланыВидовХарактеристик.КатегорииНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектХДТО.guid));
	Если ПустаяСтрока(КатегорияСсылка.ВерсияДанных) Тогда // Новый объект
		лкОбъект = ПланыВидовХарактеристик.КатегорииНовостей.СоздатьЭлемент();
		лкОбъект.УстановитьСсылкуНового(КатегорияСсылка);
		Режим = "Создание";
	Иначе // Объект есть в базе данных
		лкОбъект = КатегорияСсылка.ПолучитьОбъект();
		Режим = "Обновление";
	КонецЕсли;

	лкОбъект.ПометкаУдаления = ОбъектХДТО.DeletionMark;
	лкОбъект.Код             = ОбъектХДТО.Code;
	лкОбъект.Наименование    = ОбъектХДТО.Description;

	Если ВРег(ОбъектХДТО.ValueType) = ВРег("Булево") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Булево;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("Дата") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Дата;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("Строка") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Строка;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("Число") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Число;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ЗначенияКатегорийНовостей;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("СправочникСсылка.ИнтервалыВерсийПродукта") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов("Строка"); // В базе чтения новостей нет специального справочника ИнтервалыВерсийПродукта, он заменен на регистр сведений.
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта;
	Иначе
		// Ошибочный тип заменить на строку
		лкОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Строка;
	КонецЕсли;

	лкОбъект.ЗаполняетсяАвтоматически    = ОбъектХДТО.AutoFill;
	лкОбъект.ОтборНастраиваетсяНаСервере = ОбъектХДТО.FilterOnServer;
	// Только если это тип "СправочникСсылка.ЗначенияКатегорийНовостей", для других
	//  типов (булево, число, дата, строка) надо принудительно сбрасывать.
	лкОбъект.ОбновляетсяССервера         = Ложь;
	Если лкОбъект.ТипЗначения.Типы().Количество() >= 1 Тогда
		Если лкОбъект.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
			лкОбъект.ОбновляетсяССервера = Истина;
		КонецЕсли;
	КонецЕсли;

	// Любую загруженную с сервера категорию помечать как загруженную, чтобы ее нельзя было изменить интерактивно.
	лкОбъект.ЗагруженоССервера = Истина;

	Возврат лкОбъект;

КонецФункции

// Функция возвращает объект базы данных по переданному объекту ХДТО.
//
// Параметры:
//  ОбъектХДТО    - Объект XDTO;
//  Режим         - Строка - в этот параметр передастся режим получения объекта - "Создание" или "Обновление".
//
// Возвращаемое значение:
//  СправочникОбъект.ЗначенияКатегорийНовостей.
//
Функция ЗаполнитьОбъектЗначениеКатегорииНовостей(лкВладелец, ОбъектХДТО, Режим = "")

	ЗначениеКатегорииНовостейСсылка = Справочники.ЗначенияКатегорийНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектХДТО.guid));
	Если ПустаяСтрока(ЗначениеКатегорииНовостейСсылка.ВерсияДанных) Тогда // Новый объект
		лкОбъект = Справочники.ЗначенияКатегорийНовостей.СоздатьЭлемент();
		лкОбъект.УстановитьСсылкуНового(ЗначениеКатегорииНовостейСсылка);
		Режим = "Создание";
	Иначе // Объект есть в базе данных
		лкОбъект = ЗначениеКатегорииНовостейСсылка.ПолучитьОбъект();
		Режим = "Обновление";
	КонецЕсли;

	лкОбъект.ПометкаУдаления = ОбъектХДТО.DeletionMark;
	лкОбъект.Код             = ОбъектХДТО.Code;
	лкОбъект.Наименование    = ОбъектХДТО.Description;
	// Владельца берем не из xml, а из параметров функции.
	лкОбъект.Владелец        = лкВладелец;
	// Найти родителя. Если не найден - ничего не заполняем.
	лкОбъект.Родитель = Справочники.ЗначенияКатегорийНовостей.ПустаяСсылка();
	Если ОбъектХДТО.parentGuid <> Неопределено Тогда
		РодительСсылка = Справочники.ЗначенияКатегорийНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектХДТО.parentGuid));
		Если НЕ ПустаяСтрока(РодительСсылка.ВерсияДанных) Тогда // Есть такой элемент в базе данных
			лкОбъект.Родитель = РодительСсылка;
		КонецЕсли;
	КонецЕсли;

	Возврат лкОбъект;

КонецФункции

// Функция возвращает объект базы данных по переданному объекту ХДТО.
//
// Параметры:
//  ОбъектХДТО    - Объект XDTO;
//  Режим         - Строка - в этот параметр передастся режим получения объекта - "Создание" или "Обновление".
//
// Возвращаемое значение:
//  СправочникОбъект.ЛентыНовостей.
//
Функция ЗаполнитьОбъектЛентаНовостей(ОбъектХДТО, Режим = "")

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	ЛентаНовостейСсылка = Справочники.ЛентыНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектХДТО.guid));
	Если ПустаяСтрока(ЛентаНовостейСсылка.ВерсияДанных) Тогда // Новый объект
		лкОбъект = Справочники.ЛентыНовостей.СоздатьЭлемент();
		лкОбъект.УстановитьСсылкуНового(ЛентаНовостейСсылка);
		Режим = "Создание";
	Иначе // Объект есть в базе данных
		лкОбъект = ЛентаНовостейСсылка.ПолучитьОбъект();
		Режим = "Обновление";
	КонецЕсли;

	лкОбъект.ПометкаУдаления        = ОбъектХДТО.DeletionMark;
	лкОбъект.Код                    = ОбъектХДТО.Code;
	лкОбъект.Наименование           = ОбъектХДТО.Description;
	лкОбъект.Комментарий            = ОбъектХДТО.Comment;
	лкОбъект.ОбязательныйКанал      = ОбъектХДТО.alwaysEnabled;
	лкОбъект.Сайт                   = ОбъектХДТО.site;
	лкОбъект.ИмяФайла               = ОбъектХДТО.file;
	лкОбъект.Протокол               = ОбъектХДТО.protocol;
	лкОбъект.ЧастотаОбновления      = ОбъектХДТО.updateRate; // 0 - не обновлять автоматически (только вручную), 1 - ежедневно, 2 - каждый час, 3 - каждые 15 минут, 4 - каждую минуту.
	лкОбъект.ЗагруженоССервера      = Истина;
	лкОбъект.ЛокальнаяЛентаНовостей = Ложь; // Загруженная с сервера лента новостей не может быть локально-обновляемой.
	лкОбъект.ВариантЛогинаПароля    = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.ВебИТС; // Ленты новостей, загруженные с сервера 1С, проходят авторизацию по логину / паролю ВебИТС.
	// Если объект ленты новостей только что создан, то у него установлена видимость по-умолчанию = Ложь
	//  и нет списка исключений (табличная часть ИсключенияВидимости пустая).
	//  А это значит, что лента будет невидима для всех. Поэтому надо явно включить ВидимостьПоУмолчанию = Истина.
	Если лкОбъект.ВидимостьПоУмолчанию = Ложь Тогда
		Если лкОбъект.ИсключенияВидимости.Количество() = 0 Тогда
			лкОбъект.ВидимостьПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;

	// Табличная часть "ДоступныеКатегорииНовостей".
	Если ТипЗнч(ОбъектХДТО.categoriesRefList) = ТипОбъектXDTO Тогда
		СвойствоКатегория = ОбъектХДТО.categoriesRefList.Свойства().Получить("categoryRef"); // простой тип
		Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
			Если ТипЗнч(ОбъектХДТО.categoriesRefList.categoryRef) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

				// В справочнике лент новостей список доступных категорий новостей уже может быть заполнен.
				// Причем часть колонок заполняются на клиенте (например, РазрешеноНастраиватьПользователям).
				// Поэтому нельзя просто очистить табличную часть и загрузить ее заново -
				//  необходимо выгрузить список категорий в отдельный массив и потом пройти по доступным категориям
				//  в ленте новостей в текущей базе - добавить новые категории; удалить те, которые были удалены; остальные не трогать.

				МассивДоступныхКатегорий = Новый Массив;
				Для каждого ТекущаяКатегорияХДТО Из ОбъектХДТО.categoriesRefList.categoryRef Цикл
					// Найти категорию по Code.
					// Если такой категории нет, то не добавлять.
					лкКатегория = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(ТекущаяКатегорияХДТО.Code);
					Если НЕ лкКатегория.Пустая() Тогда
						МассивДоступныхКатегорий.Добавить(лкКатегория);
					КонецЕсли;
				КонецЦикла;

				// Удалить категории, которые были удалены.
				БылиУдаления = Истина;
				Пока БылиУдаления = Истина Цикл
					БылиУдаления = Ложь;
					Для каждого ТекущаяКатегория Из лкОбъект.ДоступныеКатегорииНовостей Цикл
						КатегорияЕстьНаСервере = ?(МассивДоступныхКатегорий.Найти(ТекущаяКатегория) = Неопределено, Ложь, Истина);
						Если КатегорияЕстьНаСервере = Ложь Тогда
							ТекстСообщения = НСтр("ru='Из ленты новостей %Наименование% удалена категория %Категория%.'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", СокрЛП(лкОбъект.Наименование));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Категория%", СокрЛП(ТекущаяКатегория.КатегорияНовостей.Наименование));
							ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
								НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
								НСтр("ru='Новости. Загрузка классификаторов. Список лент новостей. Лента новостей'"), // ИдентификаторШага
								УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
								, // ОбъектМетаданных
								, // Данные
								ТекстСообщения, // Комментарий
								ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
							лкОбъект.ДоступныеКатегорииНовостей.Удалить(ТекущаяКатегория);
							БылиУдаления = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;

				// Добавить новые категории.
				Для каждого ТекущаяКатегория Из МассивДоступныхКатегорий Цикл
					КатегорияЕстьНаКлиенте = ?(лкОбъект.ДоступныеКатегорииНовостей.Найти(ТекущаяКатегория, "КатегорияНовостей") = Неопределено, Ложь, Истина);
					Если КатегорияЕстьНаКлиенте = Ложь Тогда
						ТекстСообщения = НСтр("ru='В ленте новостей %Наименование% добавлена категория %Категория%.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", СокрЛП(лкОбъект.Наименование));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Категория%", СокрЛП(ТекущаяКатегория.Наименование));
						ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
							НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
							НСтр("ru='Новости. Загрузка классификаторов. Список лент новостей. Лента новостей'"), // ИдентификаторШага
							УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
							, // ОбъектМетаданных
							, // Данные
							ТекстСообщения, // Комментарий
							ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

						НоваяСтрока = лкОбъект.ДоступныеКатегорииНовостей.Добавить();
						НоваяСтрока.КатегорияНовостей                 = ТекущаяКатегория;
						НоваяСтрока.РазрешеноНастраиватьПользователям = Ложь;
						НоваяСтрока.ОтборНастраиваетсяНаСервере       = ТекущаяКатегория.ОтборНастраиваетсяНаСервере; // ОтборНастраиваетсяНаСервере берется из свойств самой категории.
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат лкОбъект;

КонецФункции

// Функция подключается к веб-сервису обновления стандартных классификаторов.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  WSПрокси или Неопределено (в случае ошибки).
//
Функция ПодключитьсяКВебСервисуОбновленияСтандартныхСписков()

	ТипWSПрокси = Тип("WSПрокси");

	МестоположениеWSDL = ОбработкаНовостей.ПолучитьАдресWSDLОпределенияВебСервисаInformation();

	ТекстСообщения = НСтр("ru='Начало загрузки стандартных списков
		|МестоположениеWSDL = %МестоположениеWSDL%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%МестоположениеWSDL%", МестоположениеWSDL);
	// Запись в журнал регистрации
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
		НСтр("ru='Новости. Загрузка классификаторов. Соединение с веб-сервисом обновления стандартных списков. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	// Таймаут и количество попыток соединения - брать из настроек.
	НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПолученияНовостей",
		,
		,
		""); // Для всех пользователей

	Таймаут = НастройкиПолученияНовостей.ВебСервисыТаймаутСоединенияСекунд;
	КоличествоПовторовСоединения = НастройкиПолученияНовостей.ВебСервисыКоличествоПопытокСоединения;

	// ////? Обработать таймауты и количество попыток подключения.

	Попытка

		ПараметрыПрокси = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПрокси.АдресWSDL              = МестоположениеWSDL;
		ПараметрыПрокси.URIПространстваИмен    = "http://v8.1c.ru/news1c/ws/Information";
		ПараметрыПрокси.ИмяСервиса             = "Information";
		ПараметрыПрокси.ИмяТочкиПодключения    = "InformationSoap";
		ПараметрыПрокси.ИмяПользователя        = "";
		ПараметрыПрокси.Пароль                 = "";
		ПараметрыПрокси.Таймаут                = Таймаут;
		ПараметрыПрокси.ДелатьКонтрольныйВызов = Ложь;
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПрокси);

		Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
			ТекстСообщения = НСтр("ru='Неудачное подключение к веб-сервису обновления стандартных списков'");
			// Запись в журнал регистрации
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка классификаторов. Соединение с веб-сервисом обновления стандартных списков. Ошибка'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		Иначе
			ТекстСообщения = НСтр("ru='Успешное подключение к веб-сервису обновления стандартных списков'");
			// Запись в журнал регистрации
			ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
				НСтр("ru='Новости. Загрузка классификаторов. Соединение с веб-сервисом обновления стандартных списков. Конец'"), // ИдентификаторШага
				УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных
				, // Данные
				ТекстСообщения, // Комментарий
				ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		КонецЕсли;

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru='Неудачное подключение к веб-сервису обновления стандартных списков по причине:
			|%ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		// Запись в журнал регистрации
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка классификаторов. Соединение с веб-сервисом обновления стандартных списков. Ошибка'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецПопытки;

	Возврат Прокси;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли