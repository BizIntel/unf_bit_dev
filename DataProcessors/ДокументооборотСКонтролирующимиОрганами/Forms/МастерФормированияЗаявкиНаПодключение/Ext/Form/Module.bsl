&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Реквизит = Параметры.Реквизит;
	ЗаполнитьСписокВыбораРегионовРФ();
	
	ДатаЗапускаМастера = ТекущаяДатаСеанса();
	
	// Получаем организацию для случая одной организации в базе 
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	Если ИспользуетсяОднаОрганизация Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
		
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда
			Отказ = Истина;
			Сообщить(НСтр("ru='Поддержка регламентированнной отчетности доступна только для индивидуальных предпринимателей!'"),СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		
		// Получаем организацию из параметров
		Организация = Параметры.Организация;
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Реквизит) Тогда 
			Организация = Реквизит.Организация;
		КонецЕсли;
		
		Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда
			Отказ = Истина;
			Сообщить(НСтр("ru='Поддержка регламентированнной отчетности доступна только для индивидуальных предпринимателей!'"),СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		// Получаем организацию из основной организации
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
		КонецЕсли;
		
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	Иначе
		Если ЗначениеЗаполнено(Организация) И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников") Тогда
			Элементы.СдаватьВПФР.Видимость = Ложь;
			Элементы.СдаватьВФСС.Видимость = Ложь;
		Иначе
			Элементы.СдаватьВПФР.Видимость = Истина;
			Элементы.СдаватьВФСС.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервиса");
		ДоступнаЭлектроннаяПодписьВМоделиСервиса = МодульЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно();
	Иначе
		ДоступнаЭлектроннаяПодписьВМоделиСервиса = Ложь;
	КонецЕсли;
	
	Элементы.МестоХраненияЭлектроннойПодписи.Видимость = ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	РежимРаботыСКлючами = ?(ДоступнаЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ДекорацияОтступ9");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "Организация");
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоВариантИнтерфейсаТакси() Тогда
		Элементы.Логотип1СОтчетность.Ширина = 20;
	Иначе
		Элементы.Логотип1СОтчетность.Ширина = 26;
	КонецЕсли;
	
	ФНС  = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ФСГС = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.ТелефонМобильный.Маска = "+9 999 999-99-99";
		ТелефонМобильный = "+7        -  -  ";
	#Иначе
		Элементы.ТелефонМобильный.Маска = "+7 999 999-99-99";
		ТелефонМобильный = "";
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.Закрыть.Заголовок = "Закрыть" Тогда
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Прервать работу помощника?'");
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, 
		Отказ, 
		ЗавершениеРаботы,
		ТекстПредупреждения, 
		"ПрограммноеЗакрытие");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		
		Если (Источник = Организация ИЛИ Параметр = Организация)
		И Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Реквизиты Тогда
		
			ОбновитьРеквизитыОрганизацииИСотрудника();
			ДанныеОрганизацииЗаполненыКопированием 	= Ложь;
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" Тогда	
		
		Если (Параметр = ВладелецЭЦП ИЛИ Параметр = Руководитель ИЛИ Параметр = ГлБухгалтер ИЛИ Параметр = СотрудникВыбор
			ИЛИ Источник = ВладелецЭЦП ИЛИ Источник = Руководитель ИЛИ Источник = ГлБухгалтер ИЛИ Источник = СотрудникВыбор)
			И Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ВладельцыЭЦП Тогда 
			
			ОбновитьРеквизитыОрганизацииИСотрудника();
			ИзменитьОформлениеВладельцаЭЦП();
			ДанныеОрганизацииЗаполненыКопированием 	= Ложь;
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПроверитьЧтоМастерФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыт" И Источник = Организация Тогда
		
		Параметр.ФормаМастераФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыта = Истина;
		
	ИначеЕсли ИмяСобытия = "Завершение редактирования направлений" Тогда
		
		Элементы.ПолучателиФНС.Обновить();
		СкрытьКнопкуУдаленияНаправления(ФНС);
		
	ИначеЕсли ИмяСобытия = "УстановленоДолжностноеЛицо" Тогда
		
		Если Параметр.ОтветственноеЛицо = ПредопределенноеЗначение("Перечисление.ТипыОтветственныхЛиц.Руководитель") Тогда
			Руководитель = Параметр.ФизическоеЛицо;
		ИначеЕсли Параметр.ОтветственноеЛицо = ПредопределенноеЗначение("Перечисление.ТипыОтветственныхЛиц.ГлавныйБухгалтер") Тогда
			ГлБухгалтер =  Параметр.ФизическоеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.Имя = "АдресЮридический" Тогда
		Адрес = АдрЮР;
	Иначе
		Адрес = АдрФакт;
	КонецЕсли;
	
	Если Лев(СокрЛП(ВерсияБСП) + ".", 4) = "2.1." Тогда
		НовыйАдрес = КонтекстЭДОКлиент.РедактироватьАдрес(Адрес, Элемент.Имя, Элемент);
		ОбновитьАдрес(НовыйАдрес, Элемент);
		
	Иначе
		ДополнительныеПараметры = Элемент;
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый(ТипЗначения, ПараметрыКонструктора);
		
		КонтекстЭДОКлиент.РедактироватьАдрес(Адрес, Элемент.Имя, Элемент, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПроверитьОрганизацию() Тогда
		Возврат
	КонецЕсли;
	
	ДанныеОрганизацииЗаполненыКопированием = Ложь;
	ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
	ОтключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера");
	
	ОбработатьИзменениеОрганизации(,Ложь);
	ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Истина;
	
	ИнициализацияЗначений(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьРеквизитыФормы();
	УстановитьЗаголовокФормы();
	ИзменитьОформлениеВладельцаЭЦП();
КонецПроцедуры

&НаКлиенте
Процедура АдресОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОчистка(Элемент, СтандартнаяОбработка)
	
	СотрудникВыбор = "";
	ОчиститьДанныеСотрудника(Истина);
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	СотрудникВыбор = Неопределено;
    СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СотрудникНачалоВыбораЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(Организация, Неопределено, ОписаниеОповещения);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СотрудникВыбор = Результат;
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(СотрудникВыбор) Тогда
		СтОбработка = Ложь;
		ПараметрФормы = Новый Структура("Ключ", СотрудникВыбор);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрФормы);
	Иначе
		СтОбработка = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	КонецЕсли;
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	
	СтандартнаяОбработка = СтОбработка;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецОператорПриИзменении(Элемент)
	
	ОбновитьДанныеСпецОператора();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СотрудникНачалоВыбораЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(Организация, Неопределено, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитОрганизации(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Декорация", "");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуОрганизацииНаРеквизите(Организация, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИОВладельцаЭЦП(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ВладелецЭЦП);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуВладельцаЭЦПНаРеквизите(ВладелецЭЦП,"ФИО");		
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВладелецЭЦПСНИЛСНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ВладелецЭЦП);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуВладельцаЭЦПНаРеквизите(ВладелецЭЦП,"СНИЛС");		
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРуководительНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
			
	Если ЗначениеЗаполнено(Руководитель) Тогда  
		ПоказатьЗначение(, Руководитель);
	Иначе	
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРуководителя(Организация);		
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя",1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГлБухгалтерНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
			
	Если ЗначениеЗаполнено(ГлБухгалтер) Тогда  
		ПоказатьЗначение(, ГлБухгалтер);
	Иначе	
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуГлБухгалтера(Организация);
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера",1);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРосстатПриИзменении(Элемент)
	
	Если СдаватьВРосстат И НЕ СдаватьВФНС Тогда 
		СдаватьВФНС = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", Организация);
	
	ПутьКОсновнойФормеСправочникаОрганизации = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПутьКОсновнойФормеСправочникаОрганизации();
	
	ОткрытьФорму(
		ПутьКОсновнойФормеСправочникаОрганизации, 
		СтруктураПараметров,
		,
		Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФНСПриИзменении(Элемент)
	
	Если НЕ СдаватьВФНС Тогда 
		СдаватьВРосстат = Ложь;
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОбособленногоПодразделенияПриИзменении(Элемент)
	
	Если ПризнакОбособленногоПодразделения Тогда
		ДополнительныйКодФСС = ДанныеОрганизации.РеквизитДопКодФСС;
	Иначе
		ДополнительныйКодФСС = "";
	КонецЕсли;
	
	ИзменитьОформлениеРеквизитовОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПТипПриИзменении(Элемент)
	
	ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
	
	ОчиститьДанныеСотрудника(Истина);
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаЕстьCSP12ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтИнфотекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПерейтиНаСайтКриптоПроОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтКриптоПро();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНетCSP3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтИнфотекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНетCSP5ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтКриптоПро();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйКодПриИзменении(Элемент)
	
	Если СтрДлина(СокрЛП(ПроверочныйКод)) = 6 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолученныйКод", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйКодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		ПроверочныйКод = Текст;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолученныйКод", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйКодПочтаПриИзменении(Элемент)
	
	Если СтрДлина(СокрЛП(ПроверочныйКодПочта)) = 6 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолученныйКодПочта", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверочныйКодПочтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		ПроверочныйКодПочта = Текст;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолученныйКодПочта", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаУкажитеКриптопровайдерВручнуюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// позволяем пользователю вручную выбрать криптопровайдера
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьКриптопровайдерВручнуюЗавершение", ЭтотОбъект);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаВыбораКриптопровайдера",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьЭДОПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаСервисЭДООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СсылкаОписаниеСервисаЭДО) Тогда
		ПерейтиПоНавигационнойСсылке(СсылкаОписаниеСервисаЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыСКлючамиПриИзменении(Элемент)
	
	КодОтправлен = Ложь;
	ТелефонПодтвержден = Ложь;
	ПроверочныйКод = Неопределено;
	ТелефонМобильныйДляАвторизации = Неопределено;
	
	КодОтправленПочта = Ложь;
	ПочтаПодтверждена = Ложь;
	ПроверочныйКодПочта = Неопределено;
	ЭлектроннаяПочтаДляПаролей = Неопределено;
	
	Таймер = 0;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПВидДокументаПриИзменении(Элемент)
	
	УстановитьВидимостьКодаПодразделения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы


#Область ФНС

&НаКлиенте
Процедура ПолучателиФНСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактироватьВыбранноеНаправлениеФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиФНСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РедактироватьВыбранноеНаправлениеФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиФНСПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		ПолучателиФНС, 
		"ПолучателиФНС", 
		"УдалитьНаправлениеФНС");

КонецПроцедуры

#КонецОбласти

#Область ФСГС

&НаКлиенте
Процедура ПолучателиФСГСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактироватьВыбранноеНаправлениеФСГС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиФСГСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РедактироватьВыбранноеНаправлениеФСГС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиФСГСПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		ПолучателиФСГС, 
		"ПолучателиФСГС", 
		"УдалитьНаправлениеФСГС");
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КоманднаяПанельМастерНазад(Команда)
	ПоказатьПредыдущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее(Команда)
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ОчиститьСообщения();
	МастерДалее = Истина;
	
	Если Не ДоступнаЭлектроннаяПодписьВМоделиСервиса И ТекущаяСтраница = Элементы.Старт Тогда
		МастерДалее = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КоманднаяПанельМастерДалееСтартЗавершение", ЭтотОбъект);
		Если РежимРаботыСКлючами = 2 И МастерДалее Тогда
			ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.МестоХраненияЭлектроннойПодписи Тогда
		
		МастерДалее = Истина;
		Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
			Если РежимРаботыСКлючами = 0 Тогда  // Не выбрали ничего
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите место хранения ключа электронной подписи'"), ,"РежимРаботыСКлючами");
				МастерДалее = Ложь;
			ИначеЕсли РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
				Если СтрДлина(СтрЗаменить(ТелефонМобильныйДляАвторизации, " ", "")) = 14 И Не ТелефонПодтвержден Тогда
					Подтвердить();
					Если Не ТелефонПодтвержден Тогда
						МастерДалее = Ложь;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) И Не ПочтаПодтверждена Тогда
					ПодтвердитьПочта();
					Если Не ПочтаПодтверждена Тогда
						МастерДалее = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрДлина(СтрЗаменить(ТелефонМобильныйДляАвторизации, " ", "")) <> 14 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Укажите номер мобильного телефона'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),, "ТелефонМобильныйДляАвторизации");
					МастерДалее = Ложь;
				ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ТелефонМобильныйДляАвторизации, НСтр("ru = 'Номер мобильного телефона'"), "ТелефонМобильныйДляАвторизации") Тогда
					МастерДалее = Ложь;
				КонецЕсли;			
			КонецЕсли;	
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("МастерДалее", МастерДалее);
		ОписаниеОповещения = Новый ОписаниеОповещения("КоманднаяПанельМастерДалееМестоХраненияЭлектроннойПодписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		Если РежимРаботыСКлючами = 2 И МастерДалее Тогда
			ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ИспользуемыйКриптопровайдер Тогда
		
		Если ВыборКриптопровайдера = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите криптопровайдер'"), ,"ВыборКриптопровайдера");
			МастерДалее = Ложь;
			Возврат;
		Иначе
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УдалитьВыборCSPИзВременныхНастроек();
		КонецЕсли;
		
		Если ВыборКриптопровайдера = 1 Тогда
			ТипКриптопровайдера = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_VipNet;
		Иначе
			ТипКриптопровайдера = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_CryptoPro;
		КонецЕсли;
		
		Криптопровайдер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(ТипКриптопровайдера);
		
		ЗаполнитьКонстанты(Криптопровайдер);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СоглашениеОПрисоединенииКРегламентуУЦ Тогда
		
		// проверка удостоверяющего центра
		Если Спецоператор = Неопределено ИЛИ Спецоператор= КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_СпецоператорыСвязи_ПустаяСсылка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Удостоверяющий центр""'"), ,"Спецоператор");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка принятия лицензионного соглашения
		Если НЕ СогласиеСЛицензионнымСоглашением Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для продолжения работы необходимо принять соглашение'"), ,"СогласиеСЛицензионнымСоглашением");
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если МастерДалее Тогда
			Если ЗначениеЗаполнено(Организация) Тогда
				ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Ложь;
			КонецЕсли;
			ИзменитьОформлениеВладельцаЭЦП();
			УстановитьДоступностьМобильногоТелефона();
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный)) И РежимРаботыСКлючами = 1 Тогда
			ТелефонМобильный = ТелефонМобильныйДляАвторизации;
			ПолучатьСМС = Истина;
			Элементы.ТелефонМобильный.Доступность = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаДанныхДляЗаявления Тогда 
		
		// проверка регистрационного номер
		Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Регистрационный номер программы""'"), ,"НомерОсновнойПоставки1с");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(НомерОсновнойПоставки1с, НСтр("ru = 'Регистрационный номер программы'"), "НомерОсновнойПоставки1с") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка организации
		Если ЗначениеЗаполнено(Организация) Тогда
			Если ЗадаватьВопросПроСуществованиеУчетнойЗаписи Тогда 
				ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Ложь;
				// Если организацию выбрали только на этом шаге или на этом шаге ее перевыбрали, тогда необходимо проверить наличие учетной записи абонента.
				
				ДополнительныеПараметры = Новый Структура("МастерДалее", МастерДалее);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПроСуществованиеУчетнойЗаписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				КонтекстЭДОКлиент.ПроверитьДляОрганизацииТребуетсяУчетнаяЗапись(Организация, ОписаниеОповещения);
			Иначе
				ГруппаДанныхДляЗаявления(МастерДалее);
			КонецЕсли;
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Организация, по которой будет сдаваться отчетность""'"), ,"Организация");
			МастерДалее = Ложь;
			ГруппаДанныхДляЗаявления(МастерДалее);
		КонецЕсли;
		
		Элементы.ПризнакОбособленногоПодразделения.Видимость = ЭтоЮридическоеЛицо;
		
		Возврат;
			
	ИначеЕсли ТекущаяСтраница = Элементы.Реквизиты Тогда 

		// краткое наименование
		Если ПустаяСтрока(КраткоеНаименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните краткое наименование'"), ,"ДекорацияКраткоеНаименование");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(КраткоеНаименование, НСтр("ru = 'Краткое наименование'"), "ДекорацияКраткоеНаименование") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// полное наименование
		Если ПустаяСтрока(ПолноеНаименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните полное наименование'"), ,"ДекорацияПолноеНаименование");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ПолноеНаименование, НСтр("ru = 'Полное наименование'"), "ДекорацияПолноеНаименование") Тогда
			МастерДалее = Ложь;
		КонецЕсли;	
                  	
		Если ЭтоЮридическоеЛицо Тогда
			
			// ИНН
			Если ПустаяСтрока(ИНН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ИНН'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,10) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ИНН должен состоять из 10 цифр'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// КПП
			Если ПустаяСтрока(КПП) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните КПП'"), ,"ДекорацияКПП");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьКПП(КПП)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'КПП должен состоять из 9 цифр'"), ,"ДекорацияКПП");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// ОГРН
			Если ПустаяСтрока(ОГРН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ОГРН'"), ,"ОГРН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,13)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОГРН должен состоять из 13 цифр'"), ,"ОГРН");
				МастерДалее = Ложь;
			КонецЕсли;
			
		Иначе
			
			// ИНН
			Если ПустаяСтрока(ИНН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ИНН'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,12) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ИНН должен состоять из 12 цифр'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// ОГРН
			Если ПустаяСтрока(ОГРН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ОГРНИП'"), ,"ОГРН");
				МастерДалее = Ложь;
			ИначеЕсли ЗначениеЗаполнено(ОГРН) И НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,15, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОГРНИП должен состоять из 15 цифр'"), ,"ОГРН");
				МастерДалее = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// регистрационный номер в ПФР
		Если СдаватьВПФР Тогда		
			Если ПустаяСтрока(СтрЗаменить(РегНомерПФР,"-","")) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер в ПФР'"), ,"ДекорацияРегНомерПФР");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьРегистрационныйНомерПФР(РегНомерПФР, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Регистрационный номер в ПФР должен состоять из 12 цифр (ХХХ-ХХХ-ХХХХХХ)'"), ,"ДекорацияРегНомерПФР");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
				
		Если СдаватьВФСС Тогда
			// регистрационный номер в ФСС
			Если ПустаяСтрока(РегНомерФСС) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер в ФСС'"), ,"ДекорацияРегНомерФСС");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(РегНомерФСС, 10, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Регистрационный номер в ФСС должен состоять из 10 цифр'"), ,"ДекорацияРегНомерФСС");
				МастерДалее = Ложь;
			КонецЕсли;
		
			// дополнительный код ФСС
			Если ПризнакОбособленногоПодразделения И ЭтоЮридическоеЛицо И СдаватьВФСС Тогда
				Если ПустаяСтрока(ДополнительныйКодФСС) Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните дополнительный код ФСС'"), ,"ДополнительныйКодФСС");
					МастерДалее = Ложь;
				ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ДополнительныйКодФСС, 10, Истина) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дополнительный код ФСС должен состоять из 10 цифр'"), ,"ДополнительныйКодФСС");
					МастерДалее = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// юридический адрес
		Если ПустаяСтрока(СтрЗаменить(АдрЮР,",","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Юридический адрес""'"), ,"АдресЮридический");
			МастерДалее = Ложь;
		Иначе	
			СтрокаОшибкаАдреса = КонтекстЭДОКлиент.ПроверитьАдрес(АдрЮР);
			Если НЕ ПустаяСтрока(СтрокаОшибкаАдреса) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Юридический адрес: %1'"),СтрокаОшибкаАдреса), ,"АдресЮридический");
				МастерДалее = Ложь;
			ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(АдрЮР, НСтр("ru = 'Юридический адрес'"), "АдресЮридический") Тогда
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// фактический адрес
		Если ПустаяСтрока(СтрЗаменить(АдрФакт,",","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Фактический адрес""'"), ,"АдресФактический");
			МастерДалее = Ложь;
		Иначе
			СтрокаОшибкаАдреса = КонтекстЭДОКлиент.ПроверитьАдрес(АдрФакт);
			Если НЕ ПустаяСтрока(СтрокаОшибкаАдреса) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Фактический адрес: %1'"),СтрокаОшибкаАдреса), ,"АдресФактический");
				МастерДалее = Ложь;
			ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(АдрФакт, НСтр("ru = 'Фактический адрес'"), "АдресФактический") Тогда
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// телефон организации
		Если СтрДлина(СокрЛП(ТелефонОсновной)) = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Телефон организации""'"), ,"ТелефонОсновной");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ТелефонОсновной, НСтр("ru = 'Телефон организации'"), "ТелефонОсновной") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// электронная почта (теперь обязательна)
		Если НЕ КонтекстЭДОКлиент.ЭлектроннаяПочтаВведенаКорректно(
				ЭлектроннаяПочта,
				ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное")) Тогда
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ЭлектроннаяПочта, НСтр("ru = 'Электронная почта организации'"), "ЭлектроннаяПочта") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если ПодатьЗаявкуНаСертификатДляФСРАР Тогда
			
			Если НЕ ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Регион""'"), ,"КодРегионаФСРАР");
				МастерДалее = Ложь;
			КонецЕсли;
			
			Если МастерДалее = Истина Тогда
				
				РегионЮрАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
				
				Если КодРегионаФСРАР <> РегионЮрАдреса И ЗначениеЗаполнено(РегионЮрАдреса) Тогда
					НаименованиеРегионаЮрАдреса = НаименованиеСубъектаРФ(Число(РегионЮрАдреса));
					КодРегионаСНаименованием = Формат(Число(РегионЮрАдреса), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;") + ?(ЗначениеЗаполнено(НаименованиеРегионаЮрАдреса), " - ", "") + НаименованиеРегионаЮрАдреса;
					ОписаниеОповещения = Новый ОписаниеОповещения("ВопросРегионЗаявкиРосалькогольрегулированияЗавершение", ЭтотОбъект);
					ТекстВопроса = "Регион заявки для Росалкогольрегулирования отличается от указанного в юридическом адресе (""" + КодРегионаСНаименованием + """). Продолжить?";
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
					Возврат;
				КонецЕсли;
				
				Если МастерДалее И ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
					
					ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(КодРегионаФСРАР);
					
					СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
					Если ИнформацияОРегионе <> Неопределено Тогда
						СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, КодРегионаФСРАР);
					КонецЕсли;
					
					Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ВопросФСРАРСдачаВручнуюЗавершение", ЭтотОбъект);
						ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете." + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС
							+ "Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") в текущей версии не поддерживается. Продолжить?";
						ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
						Возврат;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ МастерДалее Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ВладельцыЭцп Тогда
		
		// фамилия
		Если ПустаяСтрока(ВладелецЭЦПФамилия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните фамилию'"), ,"ВладелецЭЦПФамилия");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПФамилия, НСтр("ru = 'Фамилия'"), "ВладелецЭЦПФамилия") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// имя
		Если ПустаяСтрока(ВладелецЭЦПИмя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните имя'"), ,"ВладелецЭЦПИмя");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПИмя, НСтр("ru = 'Имя'"), "ВладелецЭЦПИмя") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// отчетство
		Если КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПОтчество, НСтр("ru = 'Отчество'"), "ВладелецЭЦПОтчество") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// СНИЛС
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПСНИЛС, "-","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните СНИЛС'"), ,"ВладелецЭЦПСНИЛС");
			МастерДалее = Ложь;
		Иначе	
			Если НЕ КонтекстЭДОКлиент.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'"), ,"ВладелецЭЦПСНИЛС");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'"), ,"ВладелецЭЦПСНИЛС");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Дата рождения
		Если Не ЗначениеЗаполнено(ВладелецЭЦПДатаРождения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Дата рождения""'"), ,"ВладелецЭЦПДатаРождения");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// Пол
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦППол) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Пол""'"), ,"ВладелецЭЦППол");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// должность
		Если ЭтоЮридическоеЛицо И ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Должность""'"), ,"ВладелецЭЦПДолжность");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПДолжность, НСтр("ru = 'Должность'"), "ВладелецЭЦПДолжность") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// Подразделение
		Если КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦППодразделение, НСтр("ru = 'Подразделение'"), "ВладелецЭЦППодразделение") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// Гражданство
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПГражданство) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Гражданство""'"), ,"ВладелецЭЦПГражданство");
			МастерДалее = Ложь;
		ИначеЕсли НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.КодАльфа2Заполнен(ВладелецЭЦПГражданство)
			И ВладелецЭЦПГражданство <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните код альфа-2 у страны, указанной в качестве гражданства сотрудника-владельца ЭП'"), ,"ВладелецЭЦПГражданство");
			МастерДалее = Ложь;
		КонецЕсли;
		
		ДокументУдЛичность = Новый Структура();
		ДокументУдЛичность.Вставить("ВладелецЭЦПВидДокумента",        ВладелецЭЦПВидДокумента);
		ДокументУдЛичность.Вставить("ВладелецЭЦПСерияДокумента",      ВладелецЭЦПСерияДокумента);
		ДокументУдЛичность.Вставить("ВладелецЭЦПНомерДокумента",      ВладелецЭЦПНомерДокумента);
		ДокументУдЛичность.Вставить("ВладелецЭЦПДатаВыдачиДокумента", ВладелецЭЦПДатаВыдачиДокумента);
		ДокументУдЛичность.Вставить("ВладелецЭЦПКемВыданДокумент",    ВладелецЭЦПКемВыданДокумент);

		// документ, удостоверяющий личность
		Если ПустаяСтрока(ВладелецЭЦПВидДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Документ, удостоверяющий личность""'"), ,"ВладелецЭЦПВидДокумента");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПВидДокумента, НСтр("ru = 'Документ, удостоверяющий личность'"), "ВладелецЭЦПВидДокумента") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// серия
		Если ПустаяСтрока(ВладелецЭЦПСерияДокумента) И НЕ КонтекстЭДОКлиент.ПроверитьСериюДокумента(ВладелецЭЦПВидДокумента,ВладелецЭЦПСерияДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Серия""'"), ,"ВладелецЭЦПСерияДокумента");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПСерияДокумента, НСтр("ru = 'Серия'"), "ВладелецЭЦПСерияДокумента") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// номер
		Если ПустаяСтрока(ВладелецЭЦПНомерДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Номер""'"), ,"ВладелецЭЦПНомерДокумента");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПНомерДокумента, НСтр("ru = 'Номер'"), "ВладелецЭЦПНомерДокумента") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// кем выдан
		Если ПустаяСтрока(ВладелецЭЦПКемВыданДокумент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Кем выдан""'"), ,"ВладелецЭЦПКемВыданДокумент");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПКемВыданДокумент, НСтр("ru = 'Кем выдан'"), "ВладелецЭЦПКемВыданДокумент") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// дата выдачи
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаВыдачиДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Дата выдачи""'"), ,"ВладелецЭЦПДатаВыдачиДокумента");
			МастерДалее = Ложь;
		ИначеЕсли ВладелецЭЦПДатаВыдачиДокумента > ДатаЗапускаМастера ИЛИ Год(ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указана дата выдачи'"), ,"ВладелецЭЦПДатаВыдачиДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// Код подразделения. Только для паспорта РФ.
		ПаспортРФ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
			"Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
			
		Если ВладелецЭЦПВидДокумента = ПаспортРФ Тогда
			КодПодразделенияБезТире = СтрЗаменить(ВладелецЭЦПКодПодразделения, "-","");
			Если ПустаяСтрока(КодПодразделенияБезТире) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код подразделения""'"), ,"ВладелецЭЦПКодПодразделения");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(ВладелецЭЦПКодПодразделения) <> 7
				ИЛИ НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(КодПодразделенияБезТире, 6, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан код подразделения. Не соответствует маске ХХХ-ХХХ, где X – любая цифра'"), ,"ВладелецЭЦПКодПодразделения");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Место рождения
		Если ПустаяСтрока(ВладелецЭЦПМестоРождения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Место рождения""'"), ,"ВладелецЭЦПМестоРождения");
			МастерДалее = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Направления Тогда
		
		// коды ФНС
		Если СдаватьВФНС И ПолучателиФНС.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните коды ФНС'"), ,"ПолучателиФНС");
			МастерДалее = Ложь;
		ИначеЕсли СдаватьВФНС Тогда
			Для каждого Получатель Из ПолучателиФНС Цикл
				Если КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(Получатель.КПП, НСтр("ru = 'КПП'"), "ПолучателиФНС") Тогда
					МастерДалее = Ложь;
					Прервать;
				КонецЕсли;
				Если КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(Получатель.КодПолучателя, НСтр("ru = 'Код ФНС'"), "ПолучателиФНС") Тогда
					МастерДалее = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		// код отделения ПФР
		Если СдаватьВПФР Тогда
			Если ПустаяСтрока(СтрЗаменить(КодПФР,"-","")) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код отделения ПФР""'"), ,"КодПФР");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодПФР))<> 7 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код отделения ПФР должен состоять из 6 цифр'"), ,"КодПФР");
				МастерДалее = Ложь;
			ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(КодПФР, НСтр("ru = 'Код отделения ПФР'"), "КодПФР") Тогда
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// код органа Росстата
		Если СдаватьВРосстат Тогда
			
			Если ПолучателиФСГС.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните коды органа Росстата'"), ,"ПолучателиФСГС");
				МастерДалее = Ложь;
				
			ИначеЕсли ПолучателиФСГС.Количество() > 0 Тогда
				
				Для каждого Получатель Из ПолучателиФСГС Цикл
					
					Если ПустаяСтрока(СтрЗаменить(Получатель.КодПолучателя,"-","")) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код органа Росстата""'"), ,"ПолучателиФСГС");
						МастерДалее = Ложь;
					ИначеЕсли СтрДлина(СокрЛП(Получатель.КодПолучателя))<> 5 Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код органа Росстата должен состоять из 4 цифр'"), ,"ПолучателиФСГС");
						МастерДалее = Ложь;
					ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(Получатель.КодПолучателя, НСтр("ru = 'Код органа Росстата'"), "ПолучателиФСГС") Тогда
						МастерДалее = Ложь;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если МастерДалее Тогда
			ЗаполнитьПараметрыЭДО();
			Если НЕ ОтображатьПодключениеЭДО Тогда
				СформироватьТаблицуДляПодтвержденияДанных();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПодключениеЭДО Тогда 
		
		// подключение ЭДО
		Если ПодключитьЭДО Тогда
			
			// оператор ЭДО
			Если НЕ ЗначениеЗаполнено(ОператорЭДО) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Оператор ЭДО""'"), ,"ОператорЭДО");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// код ФНС
			Если ПустаяСтрока(КодНалоговогоОрганаЭДО) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код ФНС""'"), ,"КодНалоговогоОрганаЭДО");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодНалоговогоОрганаЭДО))<> 4 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код ФНС должен состоять из 4 цифр'"), ,"КодНалоговогоОрганаЭДО");
				МастерДалее = Ложь;
			КонецЕсли;
		
		КонецЕсли;
		
		Если МастерДалее Тогда
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;

	ИначеЕсли ТекущаяСтраница = Элементы.Подтверждение Тогда 
		
		// создание документа заявления
		СоздатьНовыйДокументЗаявление(2);
		
		ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
				
		Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
						
	ИначеЕсли ТекущаяСтраница = Элементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда 
		
		// создание заявления и его отправка
		СформироватьИОтправитьЗаявление();
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления Тогда
		
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда
			
			ПараметрыФормы = Новый Структура("ЗначениеКопирования",ДокументЗаявление.Ссылка);
			ОткрытьФорму("Документ.ЗаявлениеАбонентаСпецоператораСвязи.ФормаОбъекта",ПараметрыФормы,,Истина);
			
			ПрограммноеЗакрытие = Истина;
			Закрыть();
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСоглашениеНапечать(Команда)
	Элементы.ПолеHTMLЛицензии.Документ.execCommand("Print");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПоПодключению(Команда)
	КонтекстЭДОКлиент.ОткрытьИнструкциюПоПодключениюК1СОтчетности();
КонецПроцедуры

&НаКлиенте
Процедура СкачатьViPNet(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СкачатьViPNetПослеУстановки", ЭтотОбъект);
	ОбщегоНазначенияЭДКОКлиент.УстановитьViPNetCSP(Оповещение, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьCryptoPro(Команда)
	
	КонтекстЭДОКлиент.СкачатьCryptoPro();
	СохранитьВыборCSPВоВременныеНастройки(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоУстановкеVipNet(Команда)
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://its.1c.ru/db/elreps#content:26:1:_%D0%A3%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0_ViPNet_CSP");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоУстановкеCryptoProCSP(Команда)
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://www.cryptopro.ru/sites/default/files/private/csp/36R2/6497/doc.zip");	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоУдостоверяющемуЦентру(Команда)
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиЧтоТакоеУдостоверяющийЦентр");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтУдостоверяющегоЦентра(Команда)
	КонтекстЭДОКлиент.ОткрытьСтраницуУЦНажатие(Спецоператор);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоРегистрационномуНомеру(Команда)
	ПриложениеЗапущеноВРежимеВебКлиента = Ложь;
	
	Если РазделениеВключено Тогда
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиКакУзнатьРегНомерВебКлиент");
	Иначе 
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиКакУзнатьРегНомер");
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЗаявление(Команда)
	
	СоздатьНовыйДокументЗаявление(3);
	
	ПараметрСпецоператора = КонтекстЭДОКлиент.ПолучитьПараметрСпецоператораКлиент(
		Спецоператор,
		Новый Структура("ЗаявлениеПолучатель"),
		СтруктураДанныхСпецоператорыСвязи.Макет);
		
	ЗаявлениеПолучатель = ПараметрСпецоператора.ЗаявлениеПолучатель;
		
	ТабДок = КонтекстЭДОКлиент.ПодготовитьМакет(
			ДокументЗаявление,
			ЗаявлениеПолучатель,
			"ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьЗаявка",
			"ПечатьЗаявка");
			
	ЗаголовокТабДок = "Заявление на подключение";
	
	КонтекстЭДОКлиент.НапечататьДокумент(ТабДок, ЗаголовокТабДок);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоЭЦП(Команда)
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиПоЭЦП");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоСозданиюКлючаЭЦП(Команда)
	
	КонтекстЭДОКлиент.ОткрытьИнструкциюИнструкциюПоСозданиюКлючаЭЦП(ТипКриптопровайдера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПартнеров1С(Команда)
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://www.1c.ru/rus/partners/onecrep.jsp");
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьКодЕщеРаз(Команда)
	
	ПроверочныйКод = Неопределено;
	КодОтправлен = ПроверитьТелефонНаСервере(ТелефонМобильныйДляАвторизации, Истина);
	
	ЗапуститьТаймерПовторнойОтправки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьКодЕщеРазПочта(Команда)
	
	ПроверочныйКодПочта = Неопределено;
	КодОтправленПочта = ПроверитьАдресЭлектроннойПочтыНаСервере(ЭлектроннаяПочтаДляПаролей, Истина);
	
	ЗапуститьТаймерПовторнойОтправкиПочта();	
	
КонецПроцедуры

#Область ПолучателиФНС

&НаКлиенте
Процедура УдалитьНаправлениеФНС(Команда)
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		ПолучателиФНС, 
		"ПолучателиФНС", 
		"УдалитьНаправлениеФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияФНС(Команда)
	
	ВосстановитьНаправления(ФНС);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьНаправлениеФНС(Команда)
	
	ОткрытьФормуНаправления("Добавить", "ПолучателиФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНаправлениеФНС(Команда)
	
	РедактироватьВыбранноеНаправлениеФНС();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучателиФСГС

&НаКлиенте
Процедура ДобавитьНаправлениеФСГС(Команда)
	
	ДобавитьНовоеНаправлениеФСГС();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНаправлениеФСГС(Команда)
	
	РедактироватьВыбранноеНаправлениеФСГС();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНаправлениеФСГС(Команда)
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		ПолучателиФСГС, 
		"ПолучателиФСГС", 
		"УдалитьНаправлениеФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияФСГС(Команда)
	
	ВосстановитьНаправления(ФСГС);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	СогласиеСЛицензионнымСоглашением 	 	  	= Ложь;
	ПрограммноеЗакрытие 				 	  	= Ложь;
	СохранитьИВыгрузить 				 	  	= 1;
	
	ЗаполнитьДанныеСлужбыПоддержки();
	ИнициализацияЗначений(Организация);
	
	// инициализация, выполняемая в случае, когда реквизиты мастера заполняются на основе уже существующего заявления
	ЗаявлениеСозданоКопированием = ЗначениеЗаполнено(Реквизит);
	Если ЗаявлениеСозданоКопированием Тогда
		ДействияДляСкопированногоЗаявления();
	Иначе
		ДействияДляНовогоПустогоЗаявления();
	КонецЕсли;
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура;
	СтруктураДанныхСпецоператорыСвязи.Вставить("Организация", Организация);
	КонтекстЭДОКлиент.ЗаполнитьДанныеСпецоператораСвязи(СтруктураДанныхСпецоператорыСвязи);

	ЗаполнитьСписокУЦ();
	ОбновитьДанныеСпецОператора();
	
	УправлениеКнопкамиНавигации();
	
	Элементы.ПолучателиФНС.Видимость  = Ложь;
	Элементы.КодПФР.Видимость 		  = Ложь;
	Элементы.ПолучателиФСГС.Видимость = Ложь;

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#Область ДобавлениеУдалениеРедактированиеКодовОрганов

#Область ДобавлениеИРедактированиеФНС

&НаКлиенте
Процедура РедактироватьВыбранноеНаправлениеФНС()
	
	ТекущаяСтрока = Элементы.ПолучателиФНС.ТекущаяСтрока;
	
	Если КонтекстЭДОКлиент.ТекущаяСтрокаВыбрана(ПолучателиФНС,ТекущаяСтрока,"редактирования") Тогда

		ОткрытьФормуНаправления("Редактировать", "ПолучателиФНС");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаправления(Действие, ИмяТаблицыФормы)
	
	ДанныеОрганизации.Вставить("ОбъектДополнительныйКодФСС", ДополнительныйКодФСС);
	АдресПолучателей = АдресПолучателей(ИмяТаблицыФормы);
	
	КонтекстЭДОКлиент.ОткрытьФормуНаправления(
		ЭтотОбъект, 
		Действие, 
		ИмяТаблицыФормы, 
		ДанныеОрганизации, 
		Истина,
		АдресПолучателей);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуНаправленияЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент.ОткрытьФормуНаправленияЗавершение(
		ЭтотОбъект, 
		ПолучателиФНС,
		Результат, 
		ВходящийКонтекст);
		
	СкрытьКнопкуУдаленияНаправления(ФНС);
		
КонецПроцедуры

&НаСервере
Функция АдресПолучателей(ИмяТаблицыФормы) Экспорт

	ТаблицаПолучателей = ЭтотОбъект[ИмяТаблицыФормы].Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПолучателей, Новый УникальныйИдентификатор);

КонецФункции

#КонецОбласти

#Область ВосстановлениеФНСиФСГС

&НаКлиенте
Процедура ВосстановитьНаправления(КонтролирующийОрган)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить(
		"КонтролирующийОрган", 
		КонтролирующийОрган);
	 
	ПодтвердитьВосстановлениеНаправления(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВосстановлениеНаправления(ДополнительныеПараметры)
	
	ОписаниеОповещения 	= Новый ОписаниеОповещения(
		"ВосстановитьНаправленияЗавершение", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ТекстВопроса = НСтр("ru = 'Восстановить значения кодов по умолчанию?'");
	
	ПоказатьВопрос(
		ОписаниеОповещения, 
		ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет
		,
		,
		КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
		
		Если КонтролирующийОрган = ФНС Тогда
		
			ПолучателиФНС.Очистить();
			ВосстановитьНаправленияПоУмолчанию(ФНС);
			
		ИначеЕсли КонтролирующийОрган = ФСГС Тогда
			
			ПолучателиФСГС.Очистить();
			ВосстановитьНаправленияПоУмолчанию(ФСГС);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияПоУмолчанию(КонтролирующийОрган = Неопределено)
	
	Если КонтролирующийОрган = ФНС ИЛИ КонтролирующийОрган = Неопределено Тогда
	
		КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчаниюФНС(
			ПолучателиФНС, 
			ДанныеОрганизации);
			
		СкрытьКнопкуУдаленияНаправления(ФНС);
		
	КонецЕсли;
	
	Если КонтролирующийОрган = ФСГС ИЛИ КонтролирующийОрган = Неопределено Тогда
		
		КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчаниюФСГС(
			ПолучателиФСГС, 
			ДанныеОрганизации);
			
		СкрытьКнопкуУдаленияНаправления(ФСГС);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеФСГС

&НаКлиенте
Процедура РедактироватьВыбранноеНаправлениеФСГС()

	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ПолучателиФСГС.ТекущаяСтрока;
	Если КонтекстЭДОКлиент.ТекущаяСтрокаВыбрана(ПолучателиФСГС, ТекущаяСтрока,"редактирования") Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеКодРосстатаЗавершение", ЭтотОбъект);
	
		КонтекстЭДОКлиент.КодРосстата(
			Элементы.ПолучателиФСГС.ТекущиеДанные.КодПолучателя, 
			Спецоператор, 
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактированиеКодРосстатаЗавершение(ВыбранныйОрганТОГС, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйОрганТОГС <> Неопределено Тогда
		
		НовыеЗначенияПолучателя = Новый Структура("ТипПолучателя, КодПолучателя, КПП");
		НовыеЗначенияПолучателя.Вставить("ТипПолучателя",	ФСГС);
		НовыеЗначенияПолучателя.Вставить("КодПолучателя", 	ВыбранныйОрганТОГС.КодТОГС);
		
		ПредыдущиеЗначенияПолучателя = Новый Структура("ТипПолучателя, КодПолучателя, КПП");
		ПредыдущиеЗначенияПолучателя.Вставить("ТипПолучателя",	ФСГС);
		ПредыдущиеЗначенияПолучателя.Вставить("КодПолучателя", 	Элементы.ПолучателиФСГС.ТекущиеДанные.КодПолучателя);
		
		Если КонтекстЭДОКлиент.НаправлениеУникально(ПолучателиФСГС, "Редактировать", НовыеЗначенияПолучателя, ПредыдущиеЗначенияПолучателя) Тогда
			
			ИдентификаторСтроки 		= Элементы.ПолучателиФСГС.ТекущаяСтрока;
			ТекущаяСтрока 				= ПолучателиФСГС.НайтиПоИдентификатору(ИдентификаторСтроки);
			ТекущаяСтрока.КодПолучателя = ВыбранныйОрганТОГС.КодТОГС;
			
			Элементы.ПолучателиФСГС.Обновить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеФСГС

&НаКлиенте
Процедура ДобавитьНовоеНаправлениеФСГС()

	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеКодРосстатаЗавершение", ЭтотОбъект);
	
	КонтекстЭДОКлиент.КодРосстата(
		Неопределено, 
		Спецоператор, 
		ОписаниеОповещения);

КонецПроцедуры 

&НаКлиенте
Процедура ДобавлениеКодРосстатаЗавершение(ВыбранныйОрганТОГС, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйОрганТОГС <> Неопределено Тогда
		
		НовыеЗначенияПолучателя = Новый Структура("ТипПолучателя, КодПолучателя, КПП");
		НовыеЗначенияПолучателя.Вставить("ТипПолучателя",	ФСГС);
		НовыеЗначенияПолучателя.Вставить("КодПолучателя", 	ВыбранныйОрганТОГС.КодТОГС);
		
		Если КонтекстЭДОКлиент.НаправлениеУникально(ПолучателиФСГС, "Добавить", НовыеЗначенияПолучателя) Тогда
		
			НоваяСтрока = ПолучателиФСГС.Добавить();
			НоваяСтрока.ТипПолучателя = ФСГС;
			НоваяСтрока.КодПолучателя = ВыбранныйОрганТОГС.КодТОГС;
			
			Элементы.ПолучателиФСГС.Обновить();
			СкрытьКнопкуУдаленияНаправления(ФСГС);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеФНСиФСГС

&НаКлиенте
Процедура УдалитьНаправлениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяТаблицыФормы = ДополнительныеПараметры.ИмяТаблицыФормы;
	
	КонтекстЭДОКлиент.УдалитьНаправлениеЗавершение(
		ЭтотОбъект, 
		ЭтотОбъект[ИмяТаблицыФормы],
		РезультатВопроса, 
		ДополнительныеПараметры);
	
КонецПроцедуры
	
#КонецОбласти 

&НаКлиенте
Процедура СкрытьКнопкуУдаленияНаправления(КонтролирующийОрган)
	
	Если КонтролирующийОрган = ФНС Тогда 
		Элементы.УдалитьНаправлениеФНС.Доступность 	= ПолучателиФНС.Количество() <> 0;
	ИначеЕсли КонтролирующийОрган = ФСГС Тогда
		Элементы.УдалитьНаправлениеФСГС.Доступность = ПолучателиФСГС.Количество() <> 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКодаПодразделения(Форма)
	
	ПаспортРФ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
			"Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
			
	ВидимостьКодаПодразделения = Форма.ВладелецЭЦПВидДокумента = ПаспортРФ;
	
	Форма.Элементы.ВладелецЭЦПКодПодразделения.Видимость = ВидимостьКодаПодразделения;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НовыйАдрес = КонтекстЭДОКлиент.РедактироватьАдресКонвертацияРезультата(РезультатЗакрытия);
	ОбновитьАдрес(НовыйАдрес, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдрес(НовыйАдрес, Элемент)
	
	Если НовыйАдрес.Модифицированность Тогда
		Если Элемент.Имя = "АдресЮридический" Тогда
			АдрЮР              = НовыйАдрес.Адрес;
			АдресЮридический   = НовыйАдрес.АдресПредставление;
		Иначе
			АдрФакт            = НовыйАдрес.Адрес;
			АдресФактический   = НовыйАдрес.АдресПредставление;
		КонецЕсли;
	КонецЕсли;
	
	КодРегионаФСРАР 		= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалееСтартЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьСледующуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалееМестоХраненияЭлектроннойПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МастерДалее = ДополнительныеПараметры.МастерДалее;
	
	Если РежимРаботыСКлючами = 1 И Не ЗначениеЗаполнено(Спецоператор) Тогда
		Спецоператор = ПредопределенноеЗначение("Перечисление.СпецоператорыСвязи.КалугаАстрал");
		ОбновитьДанныеСпецОператора();
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПроСуществованиеУчетнойЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МастерДалее = ДополнительныеПараметры.МастерДалее;
	Если Результат Тогда
		ГруппаДанныхДляЗаявления(МастерДалее);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаДанныхДляЗаявления(МастерДалее)
	
	// проверка заполненности сведений о руководителе
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") 
		И НЕ ЗначениеЗаполнено(Руководитель) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните сведения о руководителе'"), ,"ДекорацияРуководитель");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о бухгалтере
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер")
		И НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните сведения о бухгалтере'"), ,"ДекорацияГлБухгалтер");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о сотруднике
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И НЕ ЗначениеЗаполнено(СотрудникВыбор) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите сотрудника'"), ,"СотрудникВыбор");
		МастерДалее = Ложь;
	КонецЕсли;	
	
	// проверка сочетания выбранных контролирующих органов
	Если НЕ (СдаватьВФНС ИЛИ СдаватьВПФР ИЛИ СдаватьВФСС ИЛИ СдаватьВРосстат ИЛИ ПодатьЗаявкуНаСертификатДляФСРАР ИЛИ ПодатьЗаявкуНаПодключениеРПН ИЛИ ПодатьЗаявкуНаПодключениеФТС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите хотя бы один контролирующий орган, в который будет сдаваться отчетность'"), ,"СдаватьВФНС");
		МастерДалее = Ложь;
	ИначеЕсли НЕ СдаватьВФНС И НЕ СдаватьВПФР Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Среди контролирующих органов, в которые будет сдаваться отчетность, должены быть ФНС или ПФР'"), ,"СдаватьВФНС");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка мобильного телефона
	Если ПолучатьСМС Тогда
		ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
		Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните мобильный телефон'"), ,"ТелефонМобильный");
			МастерДалее = Ложь;
		ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Мобильный телефон должен иметь формат 
			|+7 XXX XXX-XX-XX'"), ,"ТелефонМобильный");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МастерДалее Тогда
		
		ОтключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера");
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
		УстановитьВидимостьКодовКонтролирующихОрганов();
		
		ОбновитьЭлементыСтраницыОтчетностьВФСРАР();
		ИзменитьОформлениеРеквизитовОрганизации();
		Элементы.НадписьОГРН.Заголовок = ?(ЭтоЮридическоеЛицо,"ОГРН:","ОГРНИП:");
		
		Если НЕ ДанныеВладельцаЭЦПЗаполненыКопированием Тогда
			ЗаполнитьДанныеСотрудника();
		КонецЕсли;
		
		ИзменитьОформлениеРеквизитовВладельцаЭЦП();
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросРегионЗаявкиРосалькогольрегулированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
		
		ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(КодРегионаФСРАР);
		
		СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
		Если ИнформацияОРегионе <> Неопределено Тогда
			СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, КодРегионаФСРАР);
		КонецЕсли;
		
		Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросФСРАРСдачаВручнуюЗавершение", ЭтотОбъект);
			
			ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, 
				|содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете.
				| 
				|Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") 
				|в текущей версии не поддерживается. Продолжить?";
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Иначе
			ПоказатьСледующуюСтраницу();
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросФСРАРСдачаВручнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОРегионеФСРАРНаСервере(Знач КодРегиона)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ИнформацияОРегионеФСРАР(КодРегиона);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокУЦ()
	
	Спецоператоры = КонтекстЭДОКлиент.ПолучитьСпецоператорыСвязи(
		СтруктураДанныхСпецоператорыСвязи.СпецоператорыСвязи,
		СтруктураДанныхСпецоператорыСвязи.Макет);
	
	Элементы.Спецоператор.СписокВыбора.ЗагрузитьЗначения(Спецоператоры);
		
	Если Элементы.Спецоператор.СписокВыбора.Количество() = 1 Тогда
		
		Спецоператор = Элементы.Спецоператор.СписокВыбора.Получить(0).Значение;
		ОбновитьДанныеСпецОператора();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СпецОператор) И НЕ СтруктураДанныхСпецоператорыСвязи.ЗначениеЗаполненияСпецоператораСвязи = Неопределено Тогда
		
		СпецОператор = СтруктураДанныхСпецоператорыСвязи.ЗначениеЗаполненияСпецоператораСвязи;
		ОбновитьДанныеСпецОператора();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКопирования()
	
	Спецоператор = Реквизит.СпецоператорСвязи;
	СпецоператорСвязи = Спецоператор;
	
	Если Реквизит.ТипКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.VipNet Тогда
		ВыборКриптопровайдера = 1;
	Иначе
		ВыборКриптопровайдера = 2;
	КонецЕсли;
	
	Организация										= Реквизит.Организация;
	КраткоеНаименование								= Реквизит.КраткоеНаименование;
	ПолноеНаименование								= Реквизит.ПолноеНаименование;
	ИНН												= Реквизит.ИНН;
	КПП												= Реквизит.КПП;
	РегНомерПФР										= Реквизит.РегНомерПФР;
	РегНомерФСС										= Реквизит.РегНомерФСС;
	ПризнакОбособленногоПодразделения				= Реквизит.ПризнакОбособленногоПодразделения;
	АдрЮР											= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(Реквизит.АдресЮридический);
	АдрФакт											= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(Реквизит.АдресФактический);
	АдресЮридический								= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Реквизит.АдресЮридический, Истина);
	АдресФактический								= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Реквизит.АдресФактический, Истина);
	Элементы.АдресФактический.КнопкаВыбора			= Истина;
	Элементы.АдресЮридический.КнопкаВыбора			= Истина;
	ТелефонОсновной									= Реквизит.ТелефонОсновной;
	ТелефонДополнительный							= Реквизит.ТелефонДополнительный;
	ТелефонМобильный								= Реквизит.ТелефонМобильный;
	ЭлектроннаяПочта								= Реквизит.ЭлектроннаяПочта;
	ЭтоЮридическоеЛицо								= Реквизит.ТипОрганизации;
	ВладелецЭЦП										= Реквизит.ВладелецЭЦП;
	ВладелецЭЦПФамилия								= Реквизит.ВладелецЭЦПФамилия;
	ВладелецЭЦПИмя									= Реквизит.ВладелецЭЦПИмя;
	ВладелецЭЦПОтчество								= Реквизит.ВладелецЭЦПОтчество;
	ВладелецЭЦПДолжность							= Реквизит.ВладелецЭЦПДолжность;
	ВладелецЭЦППодразделение						= Реквизит.ВладелецЭЦППодразделение;
	ВладелецЭЦПВидДокумента							= Реквизит.ВладелецЭЦПВидДокумента;
	ВладелецЭЦПСерияДокумента						= Реквизит.ВладелецЭЦПСерияДокумента;
	ВладелецЭЦПНомерДокумента						= Реквизит.ВладелецЭЦПНомерДокумента;
	ВладелецЭЦПДатаВыдачиДокумента					= Реквизит.ВладелецЭЦПДатаВыдачиДокумента;
	ВладелецЭЦПКемВыданДокумент						= Реквизит.ВладелецЭЦПКемВыданДокумент;
	ВладелецЭЦПДатаРождения							= Реквизит.ВладелецЭЦПДатаРождения;
	ВладелецЭЦПМестоРождения						= Реквизит.ВладелецЭЦПМестоРождения;
	ВладелецЭЦПКодПодразделения						= Реквизит.ВладелецЭЦПКодПодразделения;
	ВладелецЭЦППол									= Реквизит.ВладелецЭЦППол;
	ВладелецЭЦПГражданство							= Реквизит.ВладелецЭЦПГражданство;
	ДополнительныйКодФСС							= Реквизит.ДополнительныйКодФСС;
	НомерОсновнойПоставки1с							= Реквизит.НомерОсновнойПоставки1с;
	ПодатьЗаявкуНаСертификатДляФСРАР				= Реквизит.ПодатьЗаявкуНаСертификатДляФСРАР;
	ПодатьЗаявкуНаПодключениеРПН					= Реквизит.ПодатьЗаявкуНаПодключениеРПН;
	ПодатьЗаявкуНаПодключениеФТС					= Реквизит.ПодатьЗаявкуНаПодключениеФТС;
	КодРегионаФСРАР									= Реквизит.КодРегионаФСРАР;
	ВладелецЭЦПСНИЛС								= Реквизит.ВладелецЭЦПСНИЛС;
	ОГРН											= Реквизит.ОГРН;
	РежимРаботыСКлючами                             = ?(Реквизит.ЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	
	ПолучателиФНС.Очистить();
	Для Каждого СтрокаНаправления из Реквизит.Получатели цикл 
		
		Если СтрокаНаправления.ТипПолучателя = ФНС Тогда
			СдаватьВФНС = Истина;
			
			НоваяСтрокаНаправления = ПолучателиФНС.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			НоваяСтрокаНаправления.КПП				= СтрокаНаправления.КПП;
			
		ИначеЕсли СтрокаНаправления.ТипПолучателя	=  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			СдаватьВПФР = Истина;
			КодПФР = СтрокаНаправления.КодПолучателя;
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			СдаватьВФСС = Истина;	
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ФСГС Тогда	
			СдаватьВРосстат = Истина;
			
			НоваяСтрокаНаправления = ПолучателиФСГС.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			
		КонецЕсли;
	КонецЦикла;
	
	ВладелецЭЦПТип = Реквизит.ВладелецЭЦПТип;
	
	//подключение ЭДО
	ПодключитьЭДО 			= Реквизит.ПодключитьЭДО;
	ОператорЭДО 			= Реквизит.ОператорЭДО;
	КодНалоговогоОрганаЭДО 	= Реквизит.КодНалоговогоОрганаЭДО;
	
	//заполнение дополнительных реквизитов формы, которых нет в документе
	СогласиеСЛицензионнымСоглашением = Истина;
	
	Если НЕ ПустаяСтрока(ТелефонМобильный) Тогда
		ПолучатьСМС = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеров(ВыполняемоеОповещение)
	
	Контекст 	= Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
	Оповещение 	= Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	CryptoProCSP 	= КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro();
	ViPNetCSP 		= КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet();
	
	CryptoProCSPУстановлен	= Ложь;
	ViPNetCSPУстановлен 	= Ложь;
	
	Если Результат.Выполнено Тогда
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если Криптопровайдер.Имя = ViPNetCSP.Имя И Криптопровайдер.Тип = ViPNetCSP.Тип Тогда 
				ViPNetCSPУстановлен 	= Истина;
				ВыборКриптопровайдера 	= 1;
			ИначеЕсли Криптопровайдер.Имя = CryptoProCSP.Имя И Криптопровайдер.Тип = CryptoProCSP.Тип Тогда 
				CryptoProCSPУстановлен 	= Истина;
				ВыборКриптопровайдера 	= 2;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
	Если CryptoProCSPУстановлен И ViPNetCSPУстановлен Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаУстановленоДваКриптопровайдера;
	ИначеЕсли CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаУстановленХотяБыОдинКриптопровайдер;
	ИначеЕсли НЕ CryptoProCSPУстановлен И НЕ ViPNetCSPУстановлен Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаНеУстановленНиОдинКриптопровайдер;
	КонецЕсли;
	
	УстановитьНаименованияКриптопровайдеров();
	
	ВыполняемоеОповещение = ВходящийКонтекст.ВыполняемоеОповещение;
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредыдущуюСтраницу()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
	Если ИндексТекущейСтраницы > 0 Тогда
		
		Индекс = ИндексТекущейСтраницы;
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Индекс);
			Если Страница.Видимость Тогда		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КриптопровайдерВыбранВручную = Ложь;
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеКнопкамиНавигации()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	ВсегоСтраниц 			= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество();
	
	КнопкаДалее	  = Элементы.Далее;
	КнопкаНазад   = Элементы.Назад;
	КнопкаЗакрыть = Элементы.Закрыть;
	
	КнопкаДалее.Видимость 	= Истина;
	КнопкаНазад.Видимость 	= Истина;
	КнопкаЗакрыть.Видимость = Истина;
	
	Если ИндексТекущейСтраницы = 0 Тогда
		
		//Первая закладка
		УстановитьСвойстваКнопки(КнопкаНазад, 	"<  Назад", Ложь,	Ложь);
		УстановитьСвойстваКнопки(КнопкаДалее, 	"Далее  >", Истина,	Истина);
		УстановитьСвойстваКнопки(КнопкаЗакрыть, "Отмена", 	Истина,	Ложь);
		
	ИначеЕсли ИндексТекущейСтраницы = 2 Тогда
		
		КнопкаНазад.Заголовок 	= "<  Назад";
		КнопкаНазад.Видимость 	= Истина;
		
		// Если мы находимся на 2 шаге и ни один криптопровайдер не установлен
		// или установлено сразу два криптопровайдера, то не позволяем перейти на следующий шаг
		Если НЕ УстановленХотяБыОдинCSP(ЭтотОбъект) И МастерОткрытНаШагеУстановкиCSP() ИЛИ УстановленыОбаCSP(ЭтотОбъект) И НЕ КриптопровайдерВыбранВручную Тогда
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаЗакрыть.Заголовок = "Закрыть";
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
		Иначе 
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= "Далее  >";
			КнопкаДалее.Видимость 	= Истина;
			КнопкаДалее.КнопкаПоУмолчанию = Истина;
			КнопкаЗакрыть.Заголовок = "Отмена";
			
		КонецЕсли;
	
	ИначеЕсли ТекущаяСтраница = Элементы.Подтверждение Тогда
		
		КнопкаНазад.Заголовок = "<  Назад";
		КнопкаНазад.Видимость = Истина;
		
		Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
			КнопкаДалее.Заголовок = "Отправить";
		Иначе
			КнопкаДалее.Заголовок = "Далее >";
		КонецЕсли;
		КнопкаДалее.Видимость = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда
		
		КнопкаНазад.Заголовок = "<  Назад";
		КнопкаНазад.Видимость = Истина;
		
		КнопкаДалее.Заголовок = "Создать ключ электронной подписи";
		КнопкаДалее.Видимость = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления Тогда	
		
		//последняя закладка
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаЗакрыть.Заголовок = "Закрыть";
			ПрограммноеЗакрытие 	= Истина;
			КнопкаНазад.Видимость 	= Ложь;
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда   	
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= "Отправить заявление еще раз";
			КнопкаДалее.Видимость 	= Истина;
			КнопкаНазад.Видимость 	= Ложь
		ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 	
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= "Подготовить новое заявление";
			КнопкаДалее.Видимость 	= Истина;		
			КнопкаНазад.Видимость 	= Ложь
		КонецЕсли;
		
	Иначе
		
		//Все остальные закладки
		КнопкаДалее.Видимость 	= Ложь;		
		КнопкаДалее.Заголовок 	= "Далее  >";
		КнопкаДалее.Видимость 	= Истина;
		
		КнопкаНазад.Заголовок 	= "<  Назад";
		КнопкаНазад.Видимость 	= Истина;		
		КнопкаЗакрыть.Заголовок = "Отмена";
		
	КонецЕсли;
	
	ЭтотОбъект.Команды.КоманднаяПанельМастерНазад.Подсказка = КнопкаНазад.Заголовок;
	ЭтотОбъект.Команды.КоманднаяПанельМастерДалее.Подсказка = КнопкаДалее.Заголовок;
	ЭтотОбъект.Команды.ЗакрытьМастер.Подсказка 				= КнопкаЗакрыть.Заголовок;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКнопки(Кнопка, Заголовок, Видимость, КнопкаПоУмолчанию)
	
	 Кнопка.Заголовок 			= Заголовок; 
	 Кнопка.Видимость 			= Видимость;
	 Кнопка.КнопкаПоУмолчанию 	= КнопкаПоУмолчанию;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановленХотяБыОдинCSP(Форма)
	
	Возврат Форма.CryptoProCSPУстановлен ИЛИ Форма.ViPNetCSPУстановлен;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановленыОбаCSP(Форма)
	
	Возврат Форма.CryptoProCSPУстановлен И Форма.ViPNetCSPУстановлен;
	
КонецФункции

&НаСервере
Процедура ПоказатьСледующуюСтраницу()
	
	// Процедура должна выполняться на сервере, 
	// так изменение заголовокм кнопок приводит к серверным вызовам.
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	Пока Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) < Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество() - 1 Цикл
		
		Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) + 1);
		
		Если Страница.Видимость Тогда
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
			Прервать;
		Иначе
			ТекущаяСтраница = Страница;
	КонецЕсли;
	
	КонецЦикла;	
	
	УправлениеКнопкамиНавигации();
	ВстатьНаНезаполненноеПоле();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКонстанты(Криптопровайдер)
	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.Установить(Криптопровайдер.Тип);
	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера.Установить(Криптопровайдер.Имя);
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДокументЗаявление(СохранитьИВыгрузить)
	
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	НовыйДокументЗаявление.УстановитьНовыйНомер();
	НовыйДокументЗаявление.Дата									= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.ТипЗаявления							= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
	НовыйДокументЗаявление.ВладелецЭЦПТип						= ВладелецЭЦПТип;
	НовыйДокументЗаявление.ВладелецЭЦП							= ВладелецЭЦП;
	НовыйДокументЗаявление.ИдентификаторДокументооборота		= нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	НовыйДокументЗаявление.Статус								= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	НовыйДокументЗаявление.СпецоператорСвязи					= Спецоператор;
	НовыйДокументЗаявление.ТипКриптопровайдера					= ТипКриптопровайдера;
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= КПП;
	НовыйДокументЗаявление.ПолноеНаименование					= ПолноеНаименование;
	НовыйДокументЗаявление.КраткоеНаименование					= КраткоеНаименование;
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.НомерОсновнойПоставки1с				= НомерОсновнойПоставки1с;
	НовыйДокументЗаявление.ДополнительныйКодФСС					= ДополнительныйКодФСС;
	
	НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса    = РежимРаботыСКлючами = 1;
	НовыйДокументЗаявление.ТелефонМобильныйДляАвторизации      = ТелефонМобильныйДляАвторизации;
	НовыйДокументЗаявление.ЭлектроннаяПочтаАутентификация      = ЭлектроннаяПочтаДляПаролей;
	
	
	НовыйДокументЗаявление.Получатели.Очистить();
	
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из ПолучателиФНС Цикл
			
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СдаватьВПФР Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР");
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВФСС Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВРосстат Тогда
		
		Для Каждого СтрокаНаправлений Из ПолучателиФСГС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС");
			НоваяСтрокаНаправления.КодПолучателя = СтрокаНаправлений.КодПолучателя;
		КонецЦикла;

	КонецЕсли;
	
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР = ПодатьЗаявкуНаСертификатДляФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 					= КодРегионаФСРАР;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН		= ПодатьЗаявкуНаПодключениеРПН;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС		= ПодатьЗаявкуНаПодключениеФТС;
	Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
		НовыйДокументЗаявление.АдресЮридический = АдрЮР;
		НовыйДокументЗаявление.АдресФактический = АдрФакт;
	Иначе
		НовыйДокументЗаявление.АдресЮридический 				= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдрЮР);
		НовыйДокументЗаявление.АдресФактический 				= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдрФакт);
	КонецЕсли;
	НовыйДокументЗаявление.РегНомерПФР						= РегНомерПФР;
	НовыйДокументЗаявление.РегНомерФСС						= ?(СдаватьВФСС, РегНомерФСС, "");
	НовыйДокументЗаявление.ТелефонОсновной					= ТелефонОсновной;
	НовыйДокументЗаявление.ТелефонДополнительный			= ТелефонДополнительный;
	НовыйДокументЗаявление.ТелефонМобильный					= ?(ПолучатьСМС, ТелефонМобильный, "");
	НовыйДокументЗаявление.ЭлектроннаяПочта					= ЭлектроннаяПочта;
	НовыйДокументЗаявление.ВладелецЭЦПФамилия				= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя					= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество				= СокрЛП(ВладелецЭЦПОтчество);
	НовыйДокументЗаявление.ВладелецЭЦПДолжность				= ВладелецЭЦПДолжность;
	НовыйДокументЗаявление.ВладелецЭЦППодразделение			= ВладелецЭЦППодразделение;
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента			= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента		= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента		= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента	= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент		= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.ВладелецЭЦПДатаРождения			= ВладелецЭЦПДатаРождения;
	НовыйДокументЗаявление.ВладелецЭЦПМестоРождения			= ВладелецЭЦПМестоРождения;
	НовыйДокументЗаявление.ВладелецЭЦПКодПодразделения		= ВладелецЭЦПКодПодразделения;
	НовыйДокументЗаявление.ВладелецЭЦППол					= ВладелецЭЦППол;
	НовыйДокументЗаявление.ВладелецЭЦПГражданство			= ВладелецЭЦПГражданство;
	НовыйДокументЗаявление.Ответственный					= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи		= '00010101';
	НовыйДокументЗаявление.ОГРН								= ОГРН;
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС					= ВладелецЭЦПСНИЛС;
	
	Если ПодключитьЭДО Тогда
		НовыйДокументЗаявление.ПодключитьЭДО 			= Истина;
		НовыйДокументЗаявление.ОператорЭДО 				= ОператорЭДО;
		НовыйДокументЗаявление.КодНалоговогоОрганаЭДО 	= КодНалоговогоОрганаЭДО;
	КонецЕсли; 
	
	Если СохранитьИВыгрузить = 1 или СохранитьИВыгрузить = 2 Тогда
		НовыйДокументЗаявление.Записать();
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(ДанныеОрганизацииИОтветственныхЛиц = Неопределено,ПрограммноеЗаполнение = Истина)
	
	ИнициализацияЗначений(Организация);
	
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	ОчиститьДанныеСотрудника(НЕ ПрограммноеЗаполнение);
	
	ПолучателиФНС.Очистить();
	ОчиститьРеквизитыФормы();
	ОчиститьДанныеСотрудникаСервер();
	
	Если ЗначениеЗаполнено(Организация) Тогда
				
		СтруктураРеквизитов = Новый Структура();
		СтруктураРеквизитов.Вставить("Организация", Организация);
		СтруктураРеквизитов.Вставить("ПриОткрытии",	НЕ ДанныеОрганизацииИОтветственныхЛиц = Неопределено);
		Если ДанныеОрганизацииИОтветственныхЛиц <> Неопределено Тогда
			СтруктураРеквизитов.Вставить("АдресЮридический",);
			СтруктураРеквизитов.Вставить("АдресФактический",);
		КонецЕсли;
		
		КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
		ДанныеОрганизацииИОтветственныхЛиц 	= КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
		ДанныеОрганизации 	= ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
		
		ЗаполнитьДанныеПоОрганизации(ДанныеОрганизацииИОтветственныхЛиц);
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	ИзменитьОформлениеРеквизитовОрганизации();
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДобавитьОрганизациюВЗаголовок(
		ЭтотОбъект.Заголовок, 
		ИспользуетсяОднаОрганизация, 
		КраткоеНаименование,
		// Разный заголовок!
		НСтр("ru = 'Подключение к 1С-Отчетности'"));

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудника(Очистить = Ложь)
	
	Если ЗначениеЗаполнено(Реквизит) И НЕ Очистить Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецЭЦППодразделение       = "";
	ВладелецЭЦПДолжность           = "";
	ВладелецЭЦПФамилия             = "";
	ВладелецЭЦПИмя                 = "";
	ВладелецЭЦПОтчество            = "";
	ВладелецЭЦПСНИЛС               = "";
	ВладелецЭЦПВидДокумента        = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	ВладелецЭЦПСерияДокумента      = "";
	ВладелецЭЦПНомерДокумента      = "";
	ВладелецЭЦПДатаВыдачиДокумента = "";
	ВладелецЭЦПКемВыданДокумент    = "";
	ВладелецЭЦПДатаРождения        = Неопределено;
	ВладелецЭЦПМестоРождения       = Неопределено;
	ВладелецЭЦПКодПодразделения    = Неопределено;
	ВладелецЭЦППол                 = Неопределено;
	ВладелецЭЦПГражданство         = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СотрудникВыбор) Тогда
		СотрудникВыбор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудникаСервер()
	ГлБухгалтер  = Неопределено; 	
	Руководитель = Неопределено; 
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьДанныеСотрудника()
	
	ВидСотрудникаНеВыбран 		= ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка");
	ДругойСотрудникНеЗаполнен 	= ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И НЕ ЗначениеЗаполнено(СотрудникВыбор);
	ОрганизацияНеВыбрана 		= НЕ ЗначениеЗаполнено(Организация);
	
	Если ВидСотрудникаНеВыбран 
		ИЛИ ДругойСотрудникНеЗаполнен
		ИЛИ ОрганизацияНеВыбрана Тогда
		Возврат;
	КонецЕсли;
	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		ВладелецЭЦП = Руководитель;
	КонецЕсли;	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		ВладелецЭЦП = ГлБухгалтер;
	КонецЕсли;
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И ЗначениеЗаполнено(СотрудникВыбор)  Тогда
		ВладелецЭЦП = СотрудникВыбор;
	КонецЕсли;

	// Обновляем данные о сотрудниках
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("ПриОткрытии",	Ложь);
	СтруктураРеквизитов.Вставить("АдресЮридический",);
	СтруктураРеквизитов.Вставить("АдресФактический",);
	
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	
	Если ДанныеОрганизацииИОтветственныхЛиц.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации = ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	КонецЕсли;	

	ТипЗаполнения = КонтекстЭДОКлиент.ПолучитьТипИсполнителя(ВладелецЭЦПТип);
	ДанныеОрганизации.Вставить("Организация", Организация);
	
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВладелецЭЦПТип,
		ДанныеОрганизации,
		ВладелецЭЦП);
		
	ВладелецЭЦПИмя                 = ДанныеСотрудника.ФИО.Имя;
	ВладелецЭЦПФамилия             = ДанныеСотрудника.ФИО.Фамилия;
	ВладелецЭЦПОтчество            = ДанныеСотрудника.ФИО.Отчество;
	ВладелецЭЦПВидДокумента        = ПолучитьВидДокументаПоНаименованию(Строка(ДанныеСотрудника.ВидДокумента));
	ВладелецЭЦПСерияДокумента      = ДанныеСотрудника.Серия;
	ВладелецЭЦПНомерДокумента      = ДанныеСотрудника.Номер;
	ВладелецЭЦПДатаВыдачиДокумента = ДанныеСотрудника.ДатаВыдачи;
	ВладелецЭЦПКемВыданДокумент    = ДанныеСотрудника.КемВыдан;
	ВладелецЭЦПДолжность           = ДанныеСотрудника.Должность;
	ВладелецЭЦПСНИЛС			   = ДанныеСотрудника.СНИЛС;
	ВладелецЭЦПДатаРождения        = ДанныеСотрудника.ДатаРождения;
	ВладелецЭЦПМестоРождения       = ДанныеСотрудника.МестоРождения;
	ВладелецЭЦПКодПодразделения    = ДанныеСотрудника.КодПодразделения;
	ВладелецЭЦППол                 = ДанныеСотрудника.Пол;
	ВладелецЭЦПГражданство         = ДанныеСотрудника.Гражданство;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоОрганизации(ДанныеОрганизацииИОтветственныхЛиц)

	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка") Тогда
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
	// Определяем руководителя и гл бухгалтера
	ОпределитьОтветственныеЛицаОрганизации();
	
	ЭтоЮридическоеЛицо		 = ДанныеОрганизации.ТипОрганизации;
	ПолноеНаименование		 = ДанныеОрганизации.НаимЮЛПол;
	КраткоеНаименование		 = ДанныеОрганизации.КраткоеНаименование;
	ИНН						 = ДанныеОрганизации.ИННЮЛ;
	КПП						 = ДанныеОрганизации.КППЮЛ;
	ОГРН					 = ДанныеОрганизации.ОГРН;
	РегНомерПФР				 = ДанныеОрганизации.РегНомПФР;
	РегНомерФСС				 = ДанныеОрганизации.РегистрационныйНомерФСС;
	ТелефонОсновной			 = ДанныеОрганизации.ТелОрганизации;
	ТелефонДополнительный	 = ДанныеОрганизации.ТелРук;
	АдрЮР					 = ДанныеОрганизацииИОтветственныхЛиц.АдресЮридический;
	АдрФакт				 	 = ДанныеОрганизацииИОтветственныхЛиц.АдресФактический;
	АдресЮридический		 = ДанныеОрганизацииИОтветственныхЛиц.ЮрАдрес;
	АдресФактический		 = ДанныеОрганизацииИОтветственныхЛиц.ФактАдрес;
	
	Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
		НомерОсновнойПоставки1с = ДанныеОрганизации.НомерОсновнойПоставки1с;
	КонецЕсли;
	
	Если АдресЮридический = ",,,,,,,,," Тогда
		АдресЮридический = "";
	КонецЕсли;
	
	Если АдресФактический = ",,,,,,,,," Тогда
		АдресФактический = "";
	КонецЕсли;
	
	Элементы.АдресЮридический.КнопкаВыбора = Истина;
	Элементы.АдресФактический.КнопкаВыбора = Истина;
	
	ЭлектроннаяПочта = ДанныеОрганизации.ЭлектроннаяПочта;
	
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения = ДанныеОрганизации.ПризнакОбособленногоПодразделения;
	КонецЕсли;
	Элементы.ВладелецЭЦПДолжность.АвтоОтметкаНезаполненного = ЭтоЮридическоеЛицо;
	Элементы.ВладелецЭЦПДолжность.ОтметкаНезаполненного		= ЭтоЮридическоеЛицо и не ЗначениеЗаполнено(ВладелецЭЦПДолжность);	
	
	ДополнительныйКодФСС 	= ДанныеОрганизации.РеквизитДопКодФСС;
	КодРегионаФСРАР 		= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
	
	// Заполняем значения кодов контролирующих органов по умолчанию
	ВосстановитьНаправленияПоУмолчанию();
	КодПФР = КодПФР(ДанныеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеВладельцаЭЦП()
	
	ЗаполнитьСписокВыбораСотрудника();
	
	ОформитьРуководителя();
	ОформитьБухгалтера();
	ОформитьДругогоСотрудника();
		
КонецПроцедуры

&НаСервере
Процедура ОформитьРуководителя()

	ПоказыватьТриТипаСотрудников = ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Организация);
	
	ВыбранДиректор = ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.Руководитель;
	
	ОформитьЭлементФормы("ДекорацияРуководитель", Руководитель, Истина);
	
	Если ПоказыватьТриТипаСотрудников Тогда
		Элементы.ДекорацияРуководитель.ЦветТекста  = ЦветГиперссылки(ВыбранДиректор, Руководитель);
	Иначе
		
		СерыйЦвет 	= Новый Цвет(192,192,192);
		ЧерныйЦвет 	= Новый Цвет(51,51,51);
		Элементы.ДекорацияРуководитель.ЦветТекста  = ?(ВыбранДиректор, ЧерныйЦвет, СерыйЦвет); 
		
		Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
			Элементы.ДекорацияРуководитель.Заголовок = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияРуководитель.Гиперссылка = ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Организация);
	Элементы.ДекорацияРуководитель.Доступность = ВыбранДиректор;

КонецПроцедуры

&НаСервере
Процедура ОформитьБухгалтера()
	
	ПоказыватьТриТипаСотрудников = ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Организация);

	Элементы.ДекорацияГлБухгалтер.Видимость = ПоказыватьТриТипаСотрудников;
	
	Если ПоказыватьТриТипаСотрудников Тогда
		
		ОформитьЭлементФормы("ДекорацияГлБухгалтер",  ГлБухгалтер,  Истина);

		ВыбранБухгалтер = ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер;
		
		Элементы.ДекорацияГлБухгалтер.Гиперссылка = Истина;
		Элементы.ДекорацияГлБухгалтер.Доступность = ВыбранБухгалтер;
		Элементы.ДекорацияГлБухгалтер.ЦветТекста  = ЦветГиперссылки(ВыбранБухгалтер, ГлБухгалтер);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОформитьДругогоСотрудника()

	ВыбранИсполнитель = ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник;
	
	Элементы.СотрудникВыбор.Доступность 				= ВыбранИсполнитель;
	Элементы.СотрудникВыбор.АвтоОтметкаНезаполненного 	= ВыбранИсполнитель;
	Элементы.СотрудникВыбор.ОтметкаНезаполненного 		= НЕ ЗначениеЗаполнено(СотрудникВыбор);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСотрудника()
	
	ПоказыватьТриТипаСотрудников = ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Организация);
	
	СписокВыбора = Элементы.ВладелецЭЦПТип.СписокВыбора;
	СписокВыбора.Очистить();
	
	НаименованиеРуководителя = ?(
		ПоказыватьТриТипаСотрудников, 
		НСтр("ru = 'Руководитель'"), 
		НСтр("ru = 'Предприниматель'"));
	
	СписокВыбора.Добавить(
		Перечисления.ТипыВладельцевЭЦП.Руководитель, 
		НаименованиеРуководителя);
		
	Если ПоказыватьТриТипаСотрудников Тогда
		СписокВыбора.Добавить(
			Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер, 
			НСтр("ru = 'Главный бухгалтер'"));
	КонецЕсли;
		
	СписокВыбора.Добавить(
		Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник, 
		НСтр("ru = 'Другой сотрудник:'"));
	
КонецПроцедуры

&НаСервере
Функция ЦветГиперссылки(ЗначениеВыбрано, Значение)
	
	СинийЦвет 	= Новый Цвет(28,85,174);
	КрасныйЦвет = Новый Цвет(178,34,34);
	СерыйЦвет 	= Новый Цвет(192,192,192);
	ЧерныйЦвет 	= Новый Цвет();
	
	Цвет = ЧерныйЦвет;
	Если ЭтоЮридическоеЛицо Тогда
	 	Цвет = ?(ЗначениеВыбрано,?(не ЗначениеЗаполнено(Значение),КрасныйЦвет,СинийЦвет),СерыйЦвет);
	КонецЕсли;
		
	Возврат Цвет;
	
КонецФункции
 
&НаКлиенте
Процедура ОчиститьРеквизитыФормы() 

	АдресФактический                       = "";
	АдресЮридический                       = "";
	СотрудникВыбор                         = Неопределено;
	ИНН                                    = "";
	КПП                                    = "";
	ОГРН                                   = "";
	КраткоеНаименование                    = "";
	ПолноеНаименование                     = "";
	ТелефонДополнительный                  = "";
	ТелефонОсновной                        = "";
	ЭлектроннаяПочта                       = "";
	РегНомерПФР                            = "";
	РегНомерФСС                            = "";
	ПризнакОбособленногоПодразделения      = Ложь;
	Элементы.АдресЮридический.КнопкаВыбора = Ложь;
	Элементы.АдресФактический.КнопкаВыбора = Ложь;
	СотрудникВыбор                         = "";
	ОчиститьДанныеСотрудника();
	ПолучателиФНС.Очистить();
	ОчиститьДанныеСотрудникаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМастер()
	
	Закрыть();
	
КонецПроцедуры

// - заполняется текст лицензии 
// - определяется, будет ли сдаваться отчетность в Росалкогольрегулирование 
// и в зависимости от этого настраивается видимость соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДанныеСпецОператора()
	
	ПолеHTMLЛицензии = КонтекстЭДОКлиент.ЗаменитьЭлементыВСоглашении(СтруктураДанныхСпецоператорыСвязи, Спецоператор);
	
	ОбновитьДоступностьПодачиВФСРАР();
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР();	
	
	ОбновитьДоступностьПодачиВРПН();
	
	ОбновитьДоступностьПодачиВФТС();
	
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра 		    = Элементы.ОткрытьСайтУдостоверяющегоЦентра;
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра.Видимость  = ЗначениеЗаполнено(СпецОператор);
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра.Заголовок  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сайт %1'"),Строка(Спецоператор));
	
	ОператорПоддерживаетСМСУведомление 			= (ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ПризнакПоддержкиСМС") = "Истина");
	
	Элементы.ГруппаДанныхПоСМСОповещению.Видимость 	= ОператорПоддерживаетСМСУведомление;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьЭлементыСтраницыОтчетностьВФСРАР()
	
	//Если организация не сдает отчетность в Росалкогольрегулирование, тогда часть элементов делаем невидимыми
	Элементы.КодРегионаФСРАР.Видимость = ПодатьЗаявкуНаСертификатДляФСРАР;
	
	Элементы.КодРегионаФСРАР.ТолькоПросмотр 		   = НЕ ПодатьЗаявкуНаСертификатДляФСРАР;
	Элементы.КодРегионаФСРАР.АвтоВыборНезаполненного   = ПодатьЗаявкуНаСертификатДляФСРАР;
	Элементы.КодРегионаФСРАР.АвтоОтметкаНезаполненного = ПодатьЗаявкуНаСертификатДляФСРАР;
	
КонецПроцедуры

// Определяется, будет ли сдаваться отчетность в Росалкогольрегулирование 
// и в зависимости от этого настраивается доступность соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДоступностьПодачиВФСРАР()
	
	ПризнакПоддержкиФСРАР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ФСРАРПризнак");
	ПризнакПоддержкиФСРАР = (ПризнакПоддержкиФСРАР = Истина ИЛИ ПризнакПоддержкиФСРАР = "Истина");
	
	Если НЕ ПризнакПоддержкиФСРАР Тогда
		ПодатьЗаявкуНаСертификатДляФСРАР = Ложь;
	КонецЕсли;
	Элементы.ПодатьЗаявкуНаСертификатДляФСРАР.ТолькоПросмотр = НЕ ПризнакПоддержкиФСРАР;
	Элементы.ПодатьЗаявкуНаСертификатДляФСРАР.Подсказка = ?(ПризнакПоддержкиФСРАР, НСтр("ru = 'Федеральная служба по регулированию алкогольного рынка'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная служба по регулированию алкогольного рынка (не поддерживается %1)'"), Строка(Спецоператор)));
	
КонецПроцедуры

// Определяется, будет ли сдаваться отчетность в Росприроднадзор 
// и в зависимости от этого настраивается доступность соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДоступностьПодачиВРПН()
	
	ПризнакПоддержкиРПН = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "РПНПризнак");
	ПризнакПоддержкиРПН = (ПризнакПоддержкиРПН = Истина ИЛИ ПризнакПоддержкиРПН = "Истина");
	
	Если НЕ ПризнакПоддержкиРПН Тогда
		ПодатьЗаявкуНаПодключениеРПН = Ложь;
	КонецЕсли;
	Элементы.ПодатьЗаявкуНаПодключениеРПН.ТолькоПросмотр = НЕ ПризнакПоддержкиРПН;
	Элементы.ПодатьЗаявкуНаПодключениеРПН.Подсказка = ?(ПризнакПоддержкиРПН, НСтр("ru = 'Федеральная служба по надзору в сфере природопользования'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная служба по надзору в сфере природопользования (не поддерживается %1)'"), Строка(Спецоператор)));
	
КонецПроцедуры

// Определяется, будет ли сдаваться отчетность в ФТС 
// и в зависимости от этого настраивается доступность соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДоступностьПодачиВФТС()
	
	ПризнакПоддержкиФТС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ФТСПризнак");
	ПризнакПоддержкиФТС = (ПризнакПоддержкиФТС = Истина ИЛИ ПризнакПоддержкиФТС = "Истина");
	
	Если НЕ ПризнакПоддержкиФТС Тогда
		ПодатьЗаявкуНаПодключениеФТС = Ложь;
	КонецЕсли;
	Элементы.ПодатьЗаявкуНаПодключениеФТС.ТолькоПросмотр = НЕ ПризнакПоддержкиФТС;
	Элементы.ПодатьЗаявкуНаПодключениеФТС.Подсказка = ?(ПризнакПоддержкиФТС, НСтр("ru = 'Федеральная таможенная служба'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная таможенная служба (не поддерживается %1)'"), Строка(Спецоператор)));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеСубъектаРФ(КодРегиона)
	
	Результат = "";
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетКодыРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	НомерКолонкиКодРегиона = МакетКодыРегионов.Область("КодРегиона").Лево;
	НомерКолонкиНаименованиеРегиона = МакетКодыРегионов.Область("НаименованиеРегиона").Лево;
	ОбластьПоискаКодаРегиона = МакетКодыРегионов.Область(1, НомерКолонкиКодРегиона, МакетКодыРегионов.ВысотаТаблицы, НомерКолонкиКодРегиона);
	
	ОбластьСКодомРегиона = МакетКодыРегионов.НайтиТекст(Формат(Число(КодРегиона), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;"), , ОбластьПоискаКодаРегиона, , Истина);
	
	Если ОбластьСКодомРегиона <> Неопределено Тогда
		Результат = МакетКодыРегионов.Область(ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона, ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона).Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораРегионовРФ()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	Для НомСтр = 1 По МакетРегионов.ВысотаТаблицы Цикл
		
		КодРегиона = СокрЛП(МакетРегионов.Область(НомСтр, 1, НомСтр, 1).Текст);
		НазваниеРегиона = СокрЛП(МакетРегионов.Область(НомСтр, 2, НомСтр, 2).Текст);
		
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			Элементы.КодРегионаФСРАР.СписокВыбора.Добавить(КодРегиона, КодРегиона + " - " + НазваниеРегиона);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСлужбыПоддержки()

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-700-86-68";
	АдресЭлектроннойПочтыСлужбыПоддержки = "1c@astralnalog.ru";

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтКриптоПро()
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://www.cryptopro.ru/");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтИнфотекс()
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("http://infotecs.ru/");
КонецПроцедуры 

&НаСервере
Функция МастерОткрытНаШагеУстановкиCSP()
		
	Возврат  (Элементы.ГруппаНеУстановленНиОдинКриптопровайдер = Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница); 	
	
КонецФункции

&НаКлиенте
Процедура ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключения()
	
	//Если это продолжение подключения, тогда открываем на втором шаге 
	Если ДокументооборотСКОВызовСервера.ПолучитьВыбранныйCSPИзВременныхНастроек() = Организация Тогда
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УдалитьВыборCSPИзВременныхНастроек();
		
		РежимРаботыСКлючами = 2;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеЗаполненияСпискаКриптопровайдеров", ЭтотОбъект);
		ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеЗаполненияСпискаКриптопровайдеров(Результат, ДополнительныеПараметры) Экспорт

	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ИспользуемыйКриптопровайдер;
	Если УстановленыОбаCSP(ЭтотОбъект) Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаУстановленоДваКриптопровайдера; 	
	ИначеЕсли УстановленХотяБыОдинCSP(ЭтотОбъект) Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаУстановленХотяБыОдинКриптопровайдер; 	
	Иначе 	
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаНеУстановленНиОдинКриптопровайдер; 	
	КонецЕсли;

	
	РегистрационныеДанные = ПолучитьСохраненныеРегистрационныеДанныеViPNetCSP();
	Если ЗначениеЗаполнено(РегистрационныеДанные) Тогда // Была попытка установки ViPNet CSP
		// Проверяем установлен ли ViPNet CSP
		Оповещение = Новый ОписаниеОповещения(
			"ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеСозданияМенеджераКриптографии", ЭтотОбъект, РегистрационныеДанные);
		КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь, КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияОбновитьДанныеРуководителя()
	
	Результат = Неопределено;
	Если не ЗначениеЗаполнено(Руководитель) Тогда
		 Результат =   ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Руководитель = Результат;
		ЗаполнитьДанныеСотрудника();
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
	КонецЕсли;
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеГлБухгалтера()
	
	Результат = Неопределено;
	Если НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		Результат = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		ГлБухгалтер = Результат;
		ЗаполнитьДанныеСотрудника();
		ОтключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера");
	КонецЕсли;
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРеквизитовОрганизации()
	
	ОформитьЭлементФормы("ДекорацияКраткоеНаименование", КраткоеНаименование, 	Истина);
	ОформитьЭлементФормы("ДекорацияПолноеНаименование",  ПолноеНаименование,  	Истина);
	ОформитьЭлементФормы("ДекорацияИНН", 				 ИНН, 				 	Истина);
	ОформитьЭлементФормы("ДекорацияКПП", 				 КПП, 				 	Истина);
	ОформитьЭлементФормы("ДекорацияОГРН", 				 ОГРН, 				 	Истина);
	ОформитьЭлементФормы("ДекорацияРегНомерПФР", 		 РегНомерПФР, 		 	СдаватьВПФР);
	ОформитьЭлементФормы("ДекорацияРегНомерФСС", 		 РегНомерФСС, 		 	СдаватьВФСС);
	
	Если НЕ ЭтоЮридическоеЛицо Тогда 		
		Элементы.ДекорацияКПП.Видимость = Ложь;
		Элементы.НадписьКПП.Видимость 	= Ложь;
		КПП = "";
	КонецЕсли;	
	
	// Доп код ФСС
	Если НЕ (ПризнакОбособленногоПодразделения И ЭтоЮридическоеЛицо) Тогда
		// Доп код ФСС не виден
		Элементы.ГруппаДополнительныйКодФСС.Видимость 	= Ложь;
		ДополнительныйКодФСС = "";
	Иначе
		// Доп код ФСС виден
		Элементы.ГруппаДополнительныйКодФСС.Видимость 	= Истина;
		
		// Определяем способ отображения доп кода ФСС - гиперссылка или поле
		Если РеквизитыНеХранящиесяВБазе.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) = Неопределено Тогда
			Элементы.ГруппаСпособовВводаДополнительногоКодаФСС.ТекущаяСтраница = Элементы.СтраницаДекорацияДополнительныйКодФСС;
			ОформитьЭлементФормы("ДекорацияДополнительныйКодФСС", ДополнительныйКодФСС,	СдаватьВФСС);
		Иначе
			Элементы.ГруппаСпособовВводаДополнительногоКодаФСС.ТекущаяСтраница = Элементы.СтраницаДополнительныйКодФСС;
		КонецЕсли;
	КонецЕсли;
	
	// Сдача в ФСС и ПФР за себя и сотрудников.
	ЭтоИП = НЕ ЭтоЮридическоеЛицо;
	Если ЭтоИП Тогда
		
		ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация);

		Если ИПИспользуетТрудНаемныхРаботников Тогда
			Элементы.НадписьРегистрационныйНомерВФСС.Заголовок = НСтр("ru = 'Рег. номер в ФСС (за сотрудников):'");
			Элементы.НадписьРегистрационныйНомерВПФР.Заголовок = НСтр("ru = 'Рег. номер в ПФР (за сотрудников):'");
		Иначе
			Элементы.НадписьРегистрационныйНомерВФСС.Заголовок = НСтр("ru = 'Рег. номер в ФСС (за себя):'");
			Элементы.НадписьРегистрационныйНомерВПФР.Заголовок = НСтр("ru = 'Рег. номер в ПФР (за себя):'");
		КонецЕсли;
		
	Иначе
		
		Элементы.НадписьРегистрационныйНомерВФСС.Заголовок = НСтр("ru = 'Регистрационный номер в ФСС:'");
		Элементы.НадписьРегистрационныйНомерВПФР.Заголовок = НСтр("ru = 'Регистрационный номер в ПФР:'");
		
	КонецЕсли;
	
	// Видимость элементов в зависимости от подключенных направлений.
	Элементы.НадписьРегистрационныйНомерВФСС.Видимость 	= СдаватьВФСС;
	Элементы.ДекорацияРегНомерФСС.Видимость 			= СдаватьВФСС;
	
	Элементы.НадписьРегистрационныйНомерВПФР.Видимость 	= СдаватьВПФР;
	Элементы.ДекорацияРегНомерПФР.Видимость 			= СдаватьВПФР;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеРеквизитовВладельцаЭЦП()
	
	СНИЛСДоступенДляРедактирования = 
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.СНИЛСДоступенДляРедактирования(ВладелецЭЦП);
	ИзменитьОформлениеРеквизитовВладельцаЭЦПСервер();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРеквизитовВладельцаЭЦПСервер()
	
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПФамилия",  ВладелецЭЦПФамилия,  Истина);
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПИмя", 	 ВладелецЭЦПИмя, 	  Истина);
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПОтчество", ВладелецЭЦПОтчество, Ложь);
	
	Если СНИЛСДоступенДляРедактирования Тогда
		Элементы.ГруппаСпособовВводаВладелецЭЦПСНИЛС.ТекущаяСтраница = Элементы.СтраницаДекорацияВладелецЭЦПСНИЛС;
		ОформитьЭлементФормы("ДекорацияВладелецЭЦПСНИЛС", ВладелецЭЦПСНИЛС, Истина);
	Иначе
		Элементы.ГруппаСпособовВводаВладелецЭЦПСНИЛС.ТекущаяСтраница = Элементы.СтраницаВладелецЭЦПСНИЛС;
	КонецЕсли;
	
	УстановитьВидимостьКодаПодразделения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьЭлементФормы(ИмяЭлемента, Знач Значение, ОбязательныйДляЗаполнения)
	
	СинийЦвет 				= Новый Цвет(28,85,174); 
	КрасныйЦвет 			= Новый Цвет(178,34,34);    
	СерыйЦвет 				= Новый Цвет(192,192,192);
	ЦветТекстаФормы			= Новый Цвет(65,48,3);
	
	Элемент 				= Элементы[ИмяЭлемента];
	
	ПроверяемоеЗначение 	= Строка(Значение);
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение,"-","");
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение,",","");
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение," ","");
	
	ЗначениеЗаполнено 		= ЗначениеЗаполнено(ПроверяемоеЗначение);	
	Элемент.Гиперссылка 	= не ЗначениеЗаполнено;	
	
	Если ЗначениеЗаполнено тогда 		
		Элемент.ЦветТекста 	= ЦветТекстаФормы;
		Элемент.Заголовок  	= Строка(Значение);
	Иначе	
		Элемент.ЦветТекста 	= ?(ОбязательныйДляЗаполнения,КрасныйЦвет,СинийЦвет);
		Элемент.Заголовок  	= "Заполнить";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизации(ДанныеОрганизацииПредыдущие, ДанныеОрганизацииИОтветственныхЛицПредыдущие)

	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка") Тогда
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
	ЭтоЮридическоеЛицо	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация);
	
	Если ДанныеОрганизацииПредыдущие = Неопределено ИЛИ ДанныеОрганизацииИОтветственныхЛицПредыдущие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ТипОрганизации",
		ЭтоЮридическоеЛицо,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"НаимЮЛПол",
		ПолноеНаименование,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"КраткоеНаименование",
		КраткоеНаименование,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ИННЮЛ",
		ИНН,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	Если ЭтоЮридическоеЛицо Тогда
		ПопытатьсяОбновитьРеквизит(
			ДанныеОрганизацииПредыдущие,
			"КППЮЛ",
			КПП,
			ДанныеОрганизации,
			ДанныеОрганизацииЗаполненыКопированием);
	Иначе
		КПП = "";	
	КонецЕсли;	
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ОГРН",
		ОГРН,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"РегНомПФР",
		РегНомерПФР,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"РегистрационныйНомерФСС",
		РегНомерФСС,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
	
	Если РеквизитыНеХранящиесяВБазе.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) = Неопределено Тогда 
		
		ПопытатьсяОбновитьРеквизит(
			ДанныеОрганизацииПредыдущие,
			"РеквизитДопКодФСС",
			ДополнительныйКодФСС,
			ДанныеОрганизации,
			ДанныеОрганизацииЗаполненыКопированием);
		
	КонецЕсли;
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ТелОрганизации",
		ТелефонОсновной,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ТелРук",
		ТелефонДополнительный,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"АдресЮридический",
		АдрЮР,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"АдресФактический",
		АдрФакт,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"ЮрАдрес",
		АдресЮридический,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"ФактАдрес",
		АдресФактический,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ЭлектроннаяПочта",
		ЭлектроннаяПочта,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
	
	Если ДанныеОрганизацииИОтветственныхЛицПредыдущие.Свойство("АдресЮридический")
		И ДанныеОрганизацииИОтветственныхЛиц.Свойство("АдресЮридический") Тогда
		
		КодРегионаФСРАРПредыдущиее 	= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеОрганизацииИОтветственныхЛицПредыдущие.АдресЮридический).Регион;
		КодРегионаФСРАРНовое 		= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеОрганизацииИОтветственныхЛиц.АдресЮридический).Регион;
		
		ПопытатьсяОбновитьРеквизит(
			КодРегионаФСРАРПредыдущиее,
			,
			КодРегионаФСРАР,
			КодРегионаФСРАРНовое,
			ДанныеОрганизацииЗаполненыКопированием);
		
	КонецЕсли;
	
	Если АдресЮридический = ",,,,,,,,," Тогда
		АдресЮридический = "";
	КонецЕсли;
	
	Если АдресФактический = ",,,,,,,,," Тогда
		АдресФактический = "";
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		Если ДанныеОрганизацииПредыдущие.Свойство("ПризнакОбособленногоПодразделения") Тогда
			
			ПопытатьсяОбновитьРеквизит(
				ДанныеОрганизацииПредыдущие, 
				"ПризнакОбособленногоПодразделения", 	
				ПризнакОбособленногоПодразделения,
				ДанныеОрганизации, 
				ДанныеОрганизацииЗаполненыКопированием);
				
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьОформлениеРеквизитовОрганизации();
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР();
	Элементы.НадписьОГРН.Заголовок = ?(ЭтоЮридическоеЛицо,"ОГРН:","ОГРНИП:");
	
	// Заполняем значения кодов контролирующих органов по умолчанию
	ВосстановитьНаправленияПоУмолчанию();
	
	НовыйКодПФР = КодПФР();
	Если НовыйКодПФР <> КодПФР Тогда
		КодПФР = НовыйКодПФР;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПопытатьсяОбновитьРеквизит(
		СтарыеДанные,
		ИмяРеквизита,
		ТекущееЗначение,
		НовыеДанные,
		ДанныеЗаполненыКопированием = Ложь)
	
	СтароеЗначение = Неопределено;
	НовоеЗначение = Неопределено;
	
	// проверяем старые данные
	Если ТипЗнч(СтарыеДанные) = Тип("Структура") Тогда
		НайденоПолеВСтарыхДанных = СтарыеДанные.Свойство(ИмяРеквизита, СтароеЗначение);
	Иначе
		НайденоПолеВСтарыхДанных = Истина;
		СтароеЗначение = СтарыеДанные;
	КонецЕсли;
	
	// проверяем новые данные
	Если ТипЗнч(НовыеДанные) = Тип("Структура") Тогда
		НайденоПолеВНовыхДанных = НовыеДанные.Свойство(ИмяРеквизита, НовоеЗначение);
	Иначе
		НайденоПолеВНовыхДанных = Истина;
		НовоеЗначение = НовыеДанные;
	КонецЕсли;
	
	// если поле присутствует и в старых данных и новых, тогда пытаемся обновить значение
	Если НайденоПолеВСтарыхДанных И НайденоПолеВНовыхДанных Тогда
		Если СтароеЗначение <> НовоеЗначение ИЛИ ТекущееЗначение <> НовоеЗначение И ДанныеЗаполненыКопированием Тогда
			ТекущееЗначение = НовоеЗначение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПопытатьсяОбновитьРеквизитДляВидаДокумента(СтарыеДанные, ИмяРеквизита, ТекущееЗначение, НовыеДанные)
	
	СтароеЗначение = Неопределено;
	НовоеЗначение = Неопределено;
	
	НайденоПолеВСтарыхДанных 	= СтарыеДанные.Свойство(ИмяРеквизита, СтароеЗначение);
	НайденоПолеВНовыхДанных 	= НовыеДанные.Свойство(ИмяРеквизита, НовоеЗначение);
	
	// если поле присутствует и в старых данных и новых, тогда пытаемся обновить значение
	Если НайденоПолеВСтарыхДанных И НайденоПолеВНовыхДанных Тогда
		НовоеЗначениеВидаДокумента = ПолучитьВидДокументаПоНаименованию(НовоеЗначение);
		Если ПолучитьВидДокументаПоНаименованию(СтароеЗначение) <> НовоеЗначениеВидаДокумента 
			ИЛИ ТекущееЗначение <> НовоеЗначениеВидаДокумента Тогда
			ТекущееЗначение = НовоеЗначениеВидаДокумента;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьВидДокументаПоНаименованию(Знач Наименование)
	
	Наименование = Строка(Наименование);
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Результат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
			"Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	ИНаче
		Результат = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Строка(Наименование));
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	Иначе 	
		Возврат Результат;
	КонецЕсли;	

КонецФункции

&НаКлиенте
Процедура СформироватьТаблицуДляПодтвержденияДанных()

	ТаблицаДанныхЗаявленияНаПодключение.Очистить();
	
	Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		Если РежимРаботыСКлючами = 1 Тогда // В облаке
			ДобавитьВТаблицу("Место хранения ключа электронной подписи"  , "В защищенном хранилище", Ложь);
			ДобавитьВТаблицу("Телефон для получения временных паролей", ТелефонМобильныйДляАвторизации, Ложь);
			Если ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) Тогда
				ДобавитьВТаблицу("Электронная почта для получения временных паролей", ЭлектроннаяПочтаДляПаролей, Ложь);
			КонецЕсли;
		Иначе
			ДобавитьВТаблицу("Место хранения ключа электронной подписи", "На компьютере", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Криптопровайдер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПолучитьПараметрыКриптопровайдера(ТипКриптопровайдера);
	ОтображаемоеНазваниеКриптопровайдера = "";
	Если ЗначениеЗаполнено(Криптопровайдер) Тогда
		ОтображаемоеНазваниеКриптопровайдера = Криптопровайдер.ОтображаемоеНазвание;
	КонецЕсли;

	ДобавитьВТаблицу("Удостоверяющий центр", 			Спецоператор);
	
	Если РежимРаботыСКлючами = 2 Тогда
	ДобавитьВТаблицу("Используемый криптопровайдер", 	ОтображаемоеНазваниеКриптопровайдера);
	КонецЕсли;
	ДобавитьВТаблицу("Регистрационный номер программы",НомерОсновнойПоставки1с);
	
	// Сведения об организации
	ДобавитьВТаблицу("Сведения об организации", , Истина); // заголовок 
	
	ДобавитьВТаблицу("Краткое наименование", 			КраткоеНаименование);
	ДобавитьВТаблицу("Полное наименование", 			ПолноеНаименование);
	ДобавитьВТаблицу("ИНН", 							ИНН);
	ДобавитьВТаблицу("КПП", 							КПП);
	
	Если ЭтоЮридическоеЛицо Тогда
		ДобавитьВТаблицу("ОГРН", 						ОГРН);
	Иначе 
		ДобавитьВТаблицу("ОГРНИП", 					ОГРН);
	КОнецЕсли;		
	
	ДобавитьВТаблицу("Регистрационный номер в ПФР", 	РегНомерПФР);
	ДобавитьВТаблицу("Регистрационный номер в ФСС", 	РегНомерФСС);
	ДобавитьВТаблицу("Организация является обособленным подразделением", 	ПризнакОбособленногоПодразделения);
	ДобавитьВТаблицу("Юридический адрес", 				АдресЮридический);
	ДобавитьВТаблицу("Фактический адрес", 				АдресФактический);
	ДобавитьВТаблицу("Телефон основной", 				ТелефонОсновной);
	ДобавитьВТаблицу("Телефон дополнительный", 		ТелефонДополнительный);
	Если ОператорПоддерживаетСМСУведомление Тогда
		ДобавитьВТаблицу("Телефон мобильный", 		?(ПолучатьСМС, ТелефонМобильный, ""));
	КонецЕсли;
	
	ДобавитьВТаблицу("Электронная почта", 				ЭлектроннаяПочта);
	Если ПодатьЗаявкуНаСертификатДляФСРАР Тогда 
		ДобавитьВТаблицу("Регион", 					КодРегионаФСРАР);
	КонецЕсли;	
	
	// Сведения о сотруднике - владельце электронной подписи
	ДобавитьВТаблицу("Сведения владельце электронной подписи", , Истина); // заголовок
	
	ДобавитьВТаблицу("Фамилия", 		ВладелецЭЦПФамилия);
	ДобавитьВТаблицу("Имя", 			ВладелецЭЦПИмя);
	ДобавитьВТаблицу("Отчество",		ВладелецЭЦПОтчество);
	ДобавитьВТаблицу("СНИЛС",			ВладелецЭЦПСНИЛС);
	ДобавитьВТаблицу("Дата рождения", 	Формат(ВладелецЭЦПДатаРождения, "ДЛФ=D"));
	ДобавитьВТаблицу("Пол", 			ВладелецЭЦППол);
	ДобавитьВТаблицу("Должность", 		ВладелецЭЦПДолжность);
	ДобавитьВТаблицу("Подразделение", 	ВладелецЭЦППодразделение);
	ДобавитьВТаблицу("Гражданство", 	ВладелецЭЦПГражданство);	
	ДобавитьВТаблицу("Документ, удостоверяющий личность", ВладелецЭЦПВидДокумента);
	ДобавитьВТаблицу("Серия, номер", 	Строка(ВладелецЭЦПСерияДокумента)+ "," + Строка(ВладелецЭЦПНомерДокумента));
	ДобавитьВТаблицу("Кем выдан", 		ВладелецЭЦПКемВыданДокумент);
	ДобавитьВТаблицу("Дата выдачи", 	Формат(ВладелецЭЦПДатаВыдачиДокумента, "ДЛФ=D"));
	
	ПаспортРФ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
		"Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
		
	Если ВладелецЭЦПВидДокумента = ПаспортРФ Тогда
		ДобавитьВТаблицу("Код подразделения", ВладелецЭЦПКодПодразделения);
	КонецЕсли;
	
	ДобавитьВТаблицу("Место рождения", ВладелецЭЦПМестоРождения);

	// Сведения о контролирующих органах
	ДобавитьВТаблицу("Сведения о контролирующих органах", , Истина);
	
	// Отображение данных для ФНС
	ДобавитьВТаблицу("Отчетность сдается в ФНС", СдаватьВФНС); // заголовок
	Для каждого СтрокаФНС Из ПолучателиФНС Цикл
		ДобавитьВТаблицу("Код ФНС, КПП", Строка(СтрокаФНС.КодПолучателя) + "," + Строка(СтрокаФНС.КПП));
	КонецЦикла; 		
	
	// Отображение данных для ПФР
	ДобавитьВТаблицу("Отчетность сдается в ПФР", СдаватьВПФР);
	ОтображаемыйКодПФР = "";
	ОтображаемыйКодПФР = ?(СдаватьВПФР,КодПФР,"");
	ДобавитьВТаблицу("Код ПФР", ОтображаемыйКодПФР);
	
	// Отображение данных для ФСС
	ДобавитьВТаблицу("Отчетность сдается в ФСС", СдаватьВФСС);
	
	Если ПризнакОбособленногоПодразделения И ЭтоЮридическоеЛицо Тогда
		ОтображаемыйДополнительныйКодФСС = "";
		ОтображаемыйДополнительныйКодФСС = ?(СдаватьВФСС,ДополнительныйКодФСС,"");	
		ДобавитьВТаблицу("Дополнительный код ФСС", ОтображаемыйДополнительныйКодФСС);
	КонецЕсли;
	
	// Отображение данных для Росстат
	ДобавитьВТаблицу("Отчетность сдается в Росстат", СдаватьВРосстат);
	Если СдаватьВРосстат Тогда 
		
		Для каждого СтрокаФСГС Из ПолучателиФСГС Цикл
			ДобавитьВТаблицу("Код Росстата", Строка(СтрокаФСГС.КодПолучателя));
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьВТаблицу("Отчетность сдается в Росалкогольрегулирование", ПодатьЗаявкуНаСертификатДляФСРАР);
	ДобавитьВТаблицу("Отчетность сдается в Росприроднадзор", ПодатьЗаявкуНаПодключениеРПН);
	ДобавитьВТаблицу("Отчетность сдается в ФТС", ПодатьЗаявкуНаПодключениеФТС);
	
	// Отображение данных по подключению ЭДО
	Если ОтображатьПодключениеЭДО Тогда
		ДобавитьВТаблицу("Подключение к сервису 1С-ЭДО", , Истина); // заголовок 
		ДобавитьВТаблицу("Подключиться к сервису", ПодключитьЭДО);
		Если ПодключитьЭДО Тогда
			ДобавитьВТаблицу("Оператор ЭДО", ОператорЭДО);
			ДобавитьВТаблицу("Код ФНС", КодНалоговогоОрганаЭДО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТаблицу(НазваниеРеквизита,  ЗначениеРеквизита = "", ВыделятьЖирным = Ложь )
	
	НоваяСтрока 						= ТаблицаДанныхЗаявленияНаПодключение.Добавить();
	НоваяСтрока.ВыделятьСтрокуЖирным 	= ВыделятьЖирным;
	НоваяСтрока.НазваниеРеквизита 		= НазваниеРеквизита;
	НоваяСтрока.ЗначениеРеквизита		= ЗначениеРеквизита;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление()
	
	Если РежимРаботыСКлючами = 1 И Не ТелефонПодтвержден Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите и подтвердите телефон для получения временных паролей'"),, "ТелефонМобильныйДляАвторизации");
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьИОтправитьЗаявлениеЗавершение", ЭтотОбъект);
	
	КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(
		ДокументЗаявление, , 
		Истина, 
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("ТекстОшибки") Тогда
	ПолученныйТекстОшибокОтправки = Результат.ТекстОшибки;
	ИначеЕсли Результат.Свойство("ОписаниеОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если ТекстОшибокОтправки <> ПолученныйТекстОшибокОтправки Тогда
		ТекстОшибокОтправки = ПолученныйТекстОшибокОтправки;
	КонецЕсли;
		
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	
	ОткрытьФормуНаСтраницеРезультатаОтправки();
	
	ПоказатьСледующуюСтраницу();
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаСтраницеРезультатаОтправки()
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления;
	Если  ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда 
		Элементы.ГруппаРезультатовОтправки.ТекущаяСтраница = Элементы.ГруппаНеОтправлено;
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
		Элементы.ГруппаРезультатовОтправки.ТекущаяСтраница = Элементы.ГруппаОтправленоИПринято;
		ПрограммноеЗакрытие = Истина;
		Оповестить("СозданоЗаявлениеНаПодключениеКЭДОСКО",,ДокументЗаявление);
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 
		Элементы.ГруппаРезультатовОтправки.ТекущаяСтраница = Элементы.ГруппаОтправленоИОтклонено;
		ПрограммноеЗакрытие = Истина;
	Иначе 	
		Элементы.ГруппаРезультатовОтправки.ТекущаяСтраница = Элементы.ГруппаНеОтправлено;
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	// Формируем текст заголовока 
	Элементы.ПодсказкаПоРезультатам8.Заголовок = НСтр("ru='Что делать?
			|1. Попробуйте отправить заявление еще раз.
			|2. Проверьте, что отключен контроль учетных записей (UAC) в Windows.'");
	Если ВыборКриптопровайдера = 1 Тогда
		 Элементы.ПодсказкаПоРезультатам8.Заголовок = Элементы.ПодсказкаПоРезультатам8.Заголовок + Символы.ПС + 
		 	НСтр("ru='3. Проверьте, что VipNet зарегистрирован.'");
	КонецЕсли;
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьКодовКонтролирующихОрганов()
	
	Элементы.ПолучателиФНС.Видимость	= СдаватьВФНС;
    Элементы.КодПФР.Видимость			= СдаватьВПФР;
	Элементы.ПолучателиФСГС.Видимость	= СдаватьВРосстат;
	
КонецПроцедуры

&НаКлиенте 
Функция КодПФР(РеквизитыОрганизации = Неопределено)
	
	Если РеквизитыОрганизации = Неопределено Тогда 
		РеквизитыОрганизации = ДанныеОрганизации;
	КонецЕсли;
	
	ПолученыйКодПФР = "";
	
	Если ПустаяСтрока(РеквизитыОрганизации.КодОрганаПФР) ИЛИ СтрДлина(РеквизитыОрганизации.КодОрганаПФР) < 7 Тогда
		ПолученыйКодПФР = Лев(РеквизитыОрганизации.КодОрганаПФР,7); 
	Иначе
		ПолученыйКодПФР = РеквизитыОрганизации.КодОрганаПФР;
	КонецЕсли;
	
	Возврат ПолученыйКодПФР;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьВыборCSPВоВременныеНастройки(Значение, РегистрационныеДанныеViPNetCSP = Неопределено) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"МастерФормированияЗаявкиНаПодключение",
		"ВыбранныйКриптопровайдер",
		Значение,,
	);	
	
	Если ЗначениеЗаполнено(РегистрационныеДанныеViPNetCSP) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"МастерФормированияЗаявкиНаПодключение",
			"РегистрационныеДанныеViPNetCSP",
			РегистрационныеДанныеViPNetCSP,,
			);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТелефон(Команда)
	
	НомерТелефона = ТелефонМобильныйДляАвторизации;
	Если ЗначениеЗаполнено(НомерТелефона) И СтрДлина(СтрЗаменить(НомерТелефона, " ", "")) = 14 Тогда 
		ПроверочныйКод = Неопределено;
		КодОтправлен = ПроверитьТелефонНаСервере(НомерТелефона);
		
		Если Не КодОтправлен Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Сервис отправки SMS-сообщений временно недоступен. Повторите попытку позже.'"));
			Возврат;
		КонецЕсли;
		
		ТелефонПодтвержден = Ложь;
		ЗапуститьТаймерПовторнойОтправки();
		
		ТекущийЭлемент = Элементы.ПроверочныйКод;
		
		УправлениеФормой(ЭтаФорма);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите номер мобильного телефона'"),, "ТелефонМобильныйДляАвторизации");
	КонецЕсли;
	ТелефонМобильныйДляАвторизации = НомерТелефона;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьТелефонНаСервере(ТелефонМобильныйДляАвторизации, Повторно = Ложь)
	
	Возврат КриптосервисВМоделиСервиса.ПолучитьПроверочныйКод(ТелефонМобильныйДляАвторизации, Повторно, "phone");
	
КонецФункции

&НаКлиенте
Процедура Подтвердить()
	
	Если Не ЗначениеЗаполнено(ПроверочныйКод)
		ИЛИ СтрДлина(СокрЛП(ПроверочныйКод)) <> 6 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите код подтверждения из SMS-сообщения'"),, "ПроверочныйКод");
		Возврат;	
	КонецЕсли;
	
	ТелефонПодтвержден = ПодтвердитьНаСервере(ТелефонМобильныйДляАвторизации, ПроверочныйКод);
	Если Не ТелефонПодтвержден Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Указан неверный код подтверждения'"),, "ПроверочныйКод");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПочта()
	
	Если Не ЗначениеЗаполнено(ПроверочныйКодПочта)
		ИЛИ СтрДлина(СокрЛП(ПроверочныйКодПочта)) <> 6 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите код подтверждения из письма'"),, "ПроверочныйКодПочта");
		Возврат;	
	КонецЕсли;
	
	ПочтаПодтверждена = ПодтвердитьПочтаНаСервере(ЭлектроннаяПочтаДляПаролей, ПроверочныйКодПочта);
	Если Не ПочтаПодтверждена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Указан неверный код подтверждения'"),, "ПроверочныйКодПочта");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодтвердитьНаСервере(ТелефонМобильныйДляАвторизации, ПроверочныйКод)
	
	Возврат КриптосервисВМоделиСервиса.ПроверитьНомерТелефона(ТелефонМобильныйДляАвторизации, ПроверочныйКод);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодтвердитьПочтаНаСервере(ЭлектроннаяПочтаДляПаролей, ПроверочныйКод)
	
	Возврат КриптосервисВМоделиСервиса.ПроверитьАдресЭлектроннойПочты(ЭлектроннаяПочтаДляПаролей, ПроверочныйКод);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ИспользуемыйКриптопровайдер.Видимость = Форма.РежимРаботыСКлючами <> 1;
		
	Элементы.ГруппаПодсказокПоУЦ.Видимость = Форма.РежимРаботыСКлючами <> 1;
	Элементы.ГруппаСсылокУЦ.Видимость = Форма.РежимРаботыСКлючами <> 1;
		
	Элементы.ГруппаПроверкаНомера.Доступность = Форма.РежимРаботыСКлючами = 1;
	Элементы.ГруппаПроверкаПочты.Доступность = Форма.РежимРаботыСКлючами = 1 И Форма.ТелефонПодтвержден;
	
	// Телефон подтвержден
	Элементы.КартинкаТелефонПроверен.Видимость = Форма.ТелефонПодтвержден;
	Элементы.ГруппаНадписьПовторнаяОтправкаСМС.Видимость = Не Форма.ТелефонПодтвержден;
	Элементы.ПроверитьТелефон.Видимость = Не Форма.ТелефонПодтвержден;
	Элементы.ПроверитьТелефон.Доступность = Не Форма.КодОтправлен;
	Элементы.ГруппаПолеПроверочногоКода.Видимость = Форма.КодОтправлен И Не Форма.ТелефонПодтвержден;
	Элементы.ТелефонМобильныйДляАвторизации.ТолькоПросмотр = Форма.КодОтправлен;
	Если Форма.КодОтправлен Тогда // Обход ошибки веб-клиента
		Элементы.ТелефонМобильныйДляАвторизации.Маска = "";
	Иначе
		Элементы.ТелефонМобильныйДляАвторизации.Маска = "+7 999 999-99-99";
	КонецЕсли;
	
	// Почта
	Элементы.КартинкаПочтаПроверена.Видимость = Форма.ПочтаПодтверждена;
	Элементы.ГруппаНадписьПовторнаяОтправкаПочта.Видимость = Не Форма.ПочтаПодтверждена И Форма.ТелефонПодтвержден;
	Элементы.ПроверитьПочту.Видимость = Не Форма.ПочтаПодтверждена;
	Элементы.ПроверитьПочту.Доступность = Не Форма.КодОтправленПочта;
	Элементы.ГруппаПроверочныйКодПочта.Видимость = Форма.КодОтправленПочта И Не Форма.ПочтаПодтверждена;
	Элементы.ЭлектроннаяПочтаДляПаролей.ТолькоПросмотр = Форма.КодОтправленПочта;
	
	//Подключение ЭДО
	Элементы.ПодключениеЭДО.Видимость 	= Форма.ОтображатьПодключениеЭДО;
	
	Если Форма.ОтображатьПодключениеЭДО Тогда
		Элементы.ГруппаПараметрыСервиса.Доступность = Форма.ПодключитьЭДО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьОбработногоОтчета()
	
	Если Таймер > 0 И Не ТелефонПодтвержден Тогда
		Таймер = Таймер - 1;
		Элементы.ВыслатьКодЕщеРаз.Доступность = Ложь;
		НадписьПовторнойОтправкиСМС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(через %1 сек...)'"), Таймер);

		ПодключитьОбработчикОжидания("ОбновитьНадписьОбработногоОтчета", 1, Истина);
	Иначе
		Элементы.ВыслатьКодЕщеРаз.Доступность = Истина;
		НадписьПовторнойОтправкиСМС = "";
	КонецЕсли;
	
	Если ТелефонПодтвержден Тогда
		Элементы.ВыслатьКодЕщеРаз.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьОбработногоОтчетаПочта()
	
	Если Таймер > 0 И Не ПочтаПодтверждена Тогда
		Таймер = Таймер - 1;
		Элементы.ВыслатьКодЕщеРазПочта.Доступность = Ложь;
		НадписьПовторнойОтправкиПочты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(через %1 сек...)'"), Таймер);

		ПодключитьОбработчикОжидания("ОбновитьНадписьОбработногоОтчетаПочта", 1, Истина);
	Иначе
		Элементы.ВыслатьКодЕщеРазПочта.Доступность = Истина;
		НадписьПовторнойОтправкиПочты = "";
	КонецЕсли;
	
	Если ПочтаПодтверждена Тогда
		Элементы.ВыслатьКодЕщеРазПочта.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТаймерПовторнойОтправки()
	
	Таймер = 60;
	ПодключитьОбработчикОжидания("ОбновитьНадписьОбработногоОтчета", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТаймерПовторнойОтправкиПочта()
	
	Таймер = 60;
	ПодключитьОбработчикОжидания("ОбновитьНадписьОбработногоОтчетаПочта", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьМобильногоТелефона()
	
	// доступность
	Элементы.ТелефонМобильный.Доступность = ПолучатьСМС;
	// отметка незаполненность
	Элементы.ТелефонМобильный.АвтоОтметкаНезаполненного = ПолучатьСМС;
	
	Если НЕ ПолучатьСМС Тогда
		#Если ВебКлиент Тогда
			ТелефонМобильный = "+7        -  -  ";
		#Иначе
			ТелефонМобильный = "";
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьСМСПриИзменении(Элемент)
	УстановитьДоступностьМобильногоТелефона();
КонецПроцедуры

&НаКлиенте
Процедура УказатьКриптопровайдерВручнуюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыборКриптопровайдера = Результат;
	
	Если ЗначениеЗаполнено(ВыборКриптопровайдера) Тогда
		
		УстановитьНаименованияКриптопровайдеров();
		КриптопровайдерВыбранВручную = Истина;
		
	Иначе
		
		ВыборКриптопровайдера = 0;
		КриптопровайдерВыбранВручную = Ложь;
		
	КонецЕсли;
	
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьПолученныйКод()
	
	Попытка
		Если СтрДлина(СокрЛП(ПроверочныйКод)) = 6 Тогда
			ТелефонПодтвержден = ПодтвердитьНаСервере(ТелефонМобильныйДляАвторизации, ПроверочныйКод);
			УправлениеФормой(ЭтаФорма);
			Если ТелефонПодтвержден Тогда
				ТекущийЭлемент = Элементы.Далее;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан неверный код подтверждения'"),,"ПроверочныйКод"); 		
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить проверку'"),,"ПроверочныйКод");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьПолученныйКодПочта()
	
	Попытка
		Если СтрДлина(СокрЛП(ПроверочныйКодПочта)) = 6 Тогда
			ПочтаПодтверждена = ПодтвердитьПочтаНаСервере(ЭлектроннаяПочтаДляПаролей, ПроверочныйКодПочта);
			УправлениеФормой(ЭтаФорма);
			Если ПочтаПодтверждена Тогда
				ТекущийЭлемент = Элементы.Далее;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан неверный код подтверждения'"),,"ПроверочныйКодПочта"); 		
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить проверку'"),,"ПроверочныйКодПочта");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияЗначений(Организация)
	
	Если Организация <> Неопределено Тогда
		
		Реквизиты = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.РеквизитыНеХранящиесяВБазе(Организация);
		Для каждого РеквизитНеХранящиесяВБазе Из Реквизиты Цикл
			РеквизитыНеХранящиесяВБазе.Добавить(РеквизитНеХранящиесяВБазе);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАдресЭлектроннойПочты(Команда)
	
	АдресПочты = ЭлектроннаяПочтаДляПаролей;
	Если ЗначениеЗаполнено(АдресПочты) Тогда 
		ПроверочныйКодПочта = Неопределено;
		КодОтправленПочта = ПроверитьАдресЭлектроннойПочтыНаСервере(АдресПочты);
		
		Если Не КодОтправленПочта Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Сервис отправки электронной почты недоступен. Повторите попытку позже.'"));
			Возврат;
		КонецЕсли;
		
		ПочтаПодтверждена = Ложь;
		ЗапуститьТаймерПовторнойОтправкиПочта();
		
		ТекущийЭлемент = Элементы.ПроверочныйКодПочта;
		
		УправлениеФормой(ЭтаФорма);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите адрес электронной почты'"),, "ЭлектроннаяПочтаДляПаролей");
	КонецЕсли;
	ЭлектроннаяПочтаДляПаролей = АдресПочты;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьАдресЭлектроннойПочтыНаСервере(ЭлектроннаяПочтаДляПаролей, Повторно = Ложь)
	
	Возврат КриптосервисВМоделиСервиса.ПолучитьПроверочныйКод(ЭлектроннаяПочтаДляПаролей, Повторно, "email");
	
КонецФункции

&НаКлиенте
Процедура ОпределитьОтветственныеЛицаОрганизации()
	
	Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаименованияКриптопровайдеров()

	Если ВыборКриптопровайдера = 1 ИЛИ ВыборКриптопровайдера = 2 Тогда
		
		Если ВыборКриптопровайдера Тогда
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet().Представление;
		Иначе
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Представление;
		КонецЕсли;
		
		ПредставлениеВыбранногоКриптопровайдера = ПредставлениеКриптопровайдера;
		
		Элементы.СтраницыРекомендацияПоУдалениюКриптопровайдера.ТекущаяСтраница =
			Элементы["СтраницаРекомендацияПоУдалениюКриптопровайдера" + Строка(ВыборКриптопровайдера)];
			
		Элементы.СтраницыПодсказкаУстановленныйКриптопровайдер.ТекущаяСтраница =
			Элементы["СтраницаПодсказкаУстановленныйКриптопровайдер" + Строка(ВыборКриптопровайдера)];
			
		Элементы.СтраницыКриптопровайдерДляСозданияКлюча.ТекущаяСтраница =
			Элементы["СтраницаКриптопровайдерДляСозданияКлюча" + Строка(ВыборКриптопровайдера)];
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЭДО()
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() ИЛИ РежимРаботыСКлючами = 1 Тогда 
		// Облачная ЭП
		ОтображатьПодключениеЭДО 	= Ложь;
		ПодключитьЭДО 				= Ложь;
		ОператорЭДО 				= "";
		КодНалоговогоОрганаЭДО 		= "";
	Иначе
		// Локальная ЭП
		Если ЗначениеЗаполнено(Элементы.ОператорЭДО.СписокВыбора) Тогда
			// на этой странице уже были
			// повторного заполнения параметров не требуется
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("ЕстьПодключениеЭДО, МассивОператоровЭДО, СсылкаОписаниеСервиса");
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗаполнитьПараметрыСервисаЭлектронныхДокументовДляФормыПодключенияК1СООтчетности(Организация, СтруктураПараметров);
		
		//заполнение вспомогательных элементов: списка выбора операторов ЭДО, ссылки на описание сервиса
		Если ЗначениеЗаполнено(СтруктураПараметров.МассивОператоровЭДО) Тогда
			Элементы.ОператорЭДО.СписокВыбора.ЗагрузитьЗначения(СтруктураПараметров.МассивОператоровЭДО);
			Если СтруктураПараметров.МассивОператоровЭДО.Количество() = 1 Тогда
				ОператорЭДО = СтруктураПараметров.МассивОператоровЭДО[0]; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.СсылкаОписаниеСервиса) Тогда
				СсылкаОписаниеСервисаЭДО = СтруктураПараметров.СсылкаОписаниеСервиса;	
			КонецЕсли;
			
			Если СтруктураПараметров.ЕстьПодключениеЭДО = Ложь Тогда
				// Организация не подключена к ЭДО
				ОтображатьПодключениеЭДО 	= Истина;
				ПодключитьЭДО 				= Истина;
				
				Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаЭДО) Тогда
					КодНалоговогоОрганаЭДО = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
				КонецЕсли;
				
			Иначе
				
				ОтображатьПодключениеЭДО 	= Ложь;
				ПодключитьЭДО 				= Ложь;
				ОператорЭДО 				= "";
				КодНалоговогоОрганаЭДО 		= "";
				
			КонецЕсли;
			
		Иначе
			// сервис не работает
			ОтображатьПодключениеЭДО 	= Ложь;
			ПодключитьЭДО 				= Ложь;
			ОператорЭДО 				= "";
			КодНалоговогоОрганаЭДО 		= "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьViPNetПослеУстановки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		СохранитьВыборCSPВоВременныеНастройки(Организация, Результат.РегистрационныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровЗавершение", ЭтотОбъект, ВходящийКонтекст);
		КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение);
	Иначе
		ЗаполнитьСписокКриптопровайдеровЗавершение(Новый Структура("Выполнено", Ложь), ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Не Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыУстановкаViPNetCSPРезультатУстановки", ЭтотОбъект);
		ОткрытьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.УстановкаViPNetCSPРезультатУстановки",, ЭтотОбъект,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыУстановкаViPNetCSPРезультатУстановки(Результат, ВходящийКонтекст) Экспорт

	ПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСохраненныеРегистрационныеДанныеViPNetCSP() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"МастерФормированияЗаявкиНаПодключение",
		"РегистрационныеДанныеViPNetCSP",
		,,
		
	);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизацииИСотрудника()
	
	ДанныеОрганизацииПредыдущие = ДанныеОрганизации;
	ДанныеОрганизацииИОтветственныхЛицПредыдущие  = ДанныеОрганизацииИОтветственныхЛиц;
	ДанныеСотрудникаПредыдущие 	= ДанныеСотрудника;

	//получаем новые данные по организации
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	ДополнительныеПараметры.Вставить("ПриОткрытии", Ложь);
	
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(ДополнительныеПараметры);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(ДополнительныеПараметры);
	
	Если ТипЗнч(ДанныеОрганизацииИОтветственныхЛиц) = Тип("Структура") 
		И ДанныеОрганизацииИОтветственныхЛиц.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации 	= ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации.Вставить("Организация", Организация);
	
	ОбновитьРеквизитыОрганизации(ДанныеОрганизацииПредыдущие, ДанныеОрганизацииИОтветственныхЛицПредыдущие);
	ОбновитьРеквизитыСотрудника(ДанныеСотрудникаПредыдущие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыСотрудника(ДанныеСотрудникаПредыдущие)
	
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВладелецЭЦПТип, 
		ДанныеОрганизации, 
		ВладелецЭЦП);
	
	// Если документ заполнен копированием, то заполняем структуру ДанныеСотрудникаПредыдущие из скопированных данных
	Если ДанныеСотрудникаПредыдущие = Неопределено И ДанныеВладельцаЭЦПЗаполненыКопированием Тогда
		
		ДанныеСотрудникаПредыдущие = Новый Структура;
		
		// ФИО
		ФИО = Новый Структура;
		ФИО.Вставить("Имя", 		ВладелецЭЦПИмя); 
		ФИО.Вставить("Фамилия", 	ВладелецЭЦПФамилия); 
		ФИО.Вставить("Отчество", 	ВладелецЭЦПОтчество);
		
		ДанныеСотрудникаПредыдущие.Вставить("ФИО", ФИО);
		
		// Паспортные данные
		ДанныеСотрудникаПредыдущие.Вставить("ВидДокумента", 	ВладелецЭЦПВидДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("Серия", 			ВладелецЭЦПСерияДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("Номер", 			ВладелецЭЦПНомерДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("ДатаВыдачи", 		ВладелецЭЦПДатаВыдачиДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("КемВыдан", 		ВладелецЭЦПКемВыданДокумент);
		ДанныеСотрудникаПредыдущие.Вставить("Должность", 		ВладелецЭЦПДолжность);
		ДанныеСотрудникаПредыдущие.Вставить("Подразделение",	ВладелецЭЦППодразделение);
		ДанныеСотрудникаПредыдущие.Вставить("СНИЛС", 			ВладелецЭЦПСНИЛС);
		ДанныеСотрудникаПредыдущие.Вставить("ДатаРождения", 	ВладелецЭЦПДатаРождения);
		ДанныеСотрудникаПредыдущие.Вставить("МестоРождения", 	ВладелецЭЦПМестоРождения);
		ДанныеСотрудникаПредыдущие.Вставить("КодПодразделения", ВладелецЭЦПКодПодразделения);
		ДанныеСотрудникаПредыдущие.Вставить("Пол", 				ВладелецЭЦППол);
		ДанныеСотрудникаПредыдущие.Вставить("Гражданство", 		ВладелецЭЦПГражданство);
		
	КонецЕсли;
	
	Если ДанныеСотрудникаПредыдущие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФИО
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Имя", 		ВладелецЭЦПИмя, 				ДанныеСотрудника.ФИО);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Фамилия", 	ВладелецЭЦПФамилия, 			ДанныеСотрудника.ФИО);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Отчество", 	ВладелецЭЦПОтчество, 			ДанныеСотрудника.ФИО);
	
	// Паспортные данные
	ПопытатьсяОбновитьРеквизитДляВидаДокумента(ДанныеСотрудникаПредыдущие, "ВидДокумента",					ВладелецЭЦПВидДокумента, ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Серия",			ВладелецЭЦПСерияДокумента, 		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Номер", 		ВладелецЭЦПНомерДокумента, 		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "ДатаВыдачи", 	ВладелецЭЦПДатаВыдачиДокумента, ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "КемВыдан", 		ВладелецЭЦПКемВыданДокумент, 	ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Должность", 	ВладелецЭЦПДолжность, 			ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Подразделение", ВладелецЭЦППодразделение,		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "СНИЛС", 		ВладелецЭЦПСНИЛС, 				ДанныеСотрудника);
	
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "ДатаРождения", 	   	ВладелецЭЦПДатаРождения,		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "МестоРождения",    	ВладелецЭЦПМестоРождения,		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "КодПодразделения", 	ВладелецЭЦПКодПодразделения,	ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Пол", 				ВладелецЭЦППол,					ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Гражданство", 		ВладелецЭЦПГражданство,			ДанныеСотрудника);
	
	ИзменитьОформлениеРеквизитовВладельцаЭЦП();
	
КонецПроцедуры

&НаСервере
Процедура ВстатьНаНезаполненноеПоле()
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.МестоХраненияЭлектроннойПодписи Тогда
		
		ЭтотОбъект.ТекущийЭлемент = Элементы.РежимРаботыСКлючамиВМоделиСервиса;
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СоглашениеОПрисоединенииКРегламентуУЦ Тогда
		
		Если НЕ ЗначениеЗаполнено(СпецОператор) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.СпецОператор;
			Возврат;
		КонецЕсли;
		
		Если НЕ СогласиеСЛицензионнымСоглашением Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.СогласиеСЛицензионнымСоглашением;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаДанныхДляЗаявления Тогда 
		
		// Регистрационный номер
		Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.НомерОсновнойПоставки1с;
			Возврат;
		КонецЕсли;
		
		// Организация
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.Организация;
			Возврат;
		КонецЕсли;
		
		// Направление сдачи отчетности
		Если НЕ СдаватьВФНС
			И НЕ СдаватьВПФР
			И НЕ СдаватьВФСС
			И НЕ СдаватьВРосстат
			И НЕ ПодатьЗаявкуНаСертификатДляФСРАР
			И НЕ ПодатьЗаявкуНаПодключениеРПН
			И НЕ ПодатьЗаявкуНаПодключениеФТС Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.СдаватьВФНС;
			Возврат;
		КонецЕсли;
		
		Если ПолучатьСМС Тогда
			Если НЕ ЗначениеЗаполнено(ТелефонМобильный) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.ТелефонМобильный;
				Возврат;
			КонецЕсли;
		Иначе
			ЭтотОбъект.ТекущийЭлемент = Элементы.ПолучатьСМС;
			Возврат;
		КонецЕсли;
			
	ИначеЕсли ТекущаяСтраница = Элементы.Реквизиты Тогда 

		Если СдаватьВФСС Тогда
		
			// дополнительный код ФСС
			Если ПризнакОбособленногоПодразделения И ЭтоЮридическоеЛицо И СдаватьВФСС Тогда
				
				Если РеквизитыНеХранящиесяВБазе.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) = Неопределено Тогда
					ЭтотОбъект.ТекущийЭлемент = Элементы.ДополнительныйКодФСС;
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// юридический адрес
		Если ПустаяСтрока(СтрЗаменить(АдрЮР,",","")) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.АдресЮридический;
			Возврат;
		КонецЕсли;
		
		// фактический адрес
		Если ПустаяСтрока(СтрЗаменить(АдрФакт,",","")) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.АдресФактический;
			Возврат;
		КонецЕсли;
		
		// телефон организации
		Если СтрДлина(СокрЛП(ТелефонОсновной)) = 0 Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТелефонОсновной;
			Возврат;
		КонецЕсли;
		
		// телефон дополнительный
		Если НЕ ЗначениеЗаполнено(ТелефонДополнительный) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТелефонДополнительный;
			Возврат;
		КонецЕсли;
		
		// электронная почта (теперь обязательна)
		Если НЕ ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ЭлектроннаяПочта;
			Возврат;
		КонецЕсли;
		
		Если ПодатьЗаявкуНаСертификатДляФСРАР Тогда
			
			Если НЕ ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.КодРегионаФСРАР;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоЮридическоеЛицо И НЕ ПризнакОбособленногоПодразделения Тогда
			
			ЭтотОбъект.ТекущийЭлемент = Элементы.ПризнакОбособленногоПодразделения;
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ВладельцыЭцп Тогда
		
		// Последовательность проверок соответствует последовательности элементов на форме.
		
		// Дата рождения
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаРождения) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПДатаРождения;
			Возврат;
		КонецЕсли;
		
		// Пол
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦППол) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦППол;
			Возврат;
		КонецЕсли;
		
		// должность
		Если ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПДолжность;
			Возврат;
		КонецЕсли;
		
		// Подразделение
		Если ПустаяСтрока(ВладелецЭЦППодразделение) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦППодразделение;
			Возврат;
		КонецЕсли;
		
		// Гражданство
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПГражданство) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПГражданство;
			Возврат;
		КонецЕсли;
		
		// документ, удостоверяющий личность
		Если ПустаяСтрока(ВладелецЭЦПВидДокумента) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПВидДокумента;
			Возврат;
		КонецЕсли;
		
		// серия
		Если ПустаяСтрока(ВладелецЭЦПСерияДокумента) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПСерияДокумента;
			Возврат;
		КонецЕсли;
		
		// номер
		Если ПустаяСтрока(ВладелецЭЦПНомерДокумента) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПНомерДокумента;
			Возврат;
		КонецЕсли;
		
		// кем выдан
		Если ПустаяСтрока(ВладелецЭЦПКемВыданДокумент) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПКемВыданДокумент;
			Возврат;
		КонецЕсли;
		
		// дата выдачи
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаВыдачиДокумента) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПДатаВыдачиДокумента;
			Возврат;
		КонецЕсли;
		
		// Код подразделения
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПКодПодразделения,"-","")) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПКодПодразделения;
			Возврат;
		КонецЕсли;
		
		// Место рождения
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПМестоРождения) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПМестоРождения;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Направления Тогда
		
		// Коды ФНС. 
		// Проверки нет, так как таблицу не удается сделать текущим элементов (она не выделяется).
		
		// код отделения ПФР
		Если СдаватьВПФР Тогда
			Если ПустаяСтрока(СтрЗаменить(КодПФР,"-","")) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.КодПФР;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Коды Росстата. 
		// Проверки нет, так как таблицу не удается сделать текущим элементов (она не выделяется).
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПодключениеЭДО Тогда 
		
		// подключение ЭДО
		Если ПодключитьЭДО Тогда
			
			// оператор ЭДО
			Если НЕ ЗначениеЗаполнено(ОператорЭДО) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.ОператорЭДО;
				Возврат;
			КонецЕсли;
			
			// код ФНС
			Если ПустаяСтрока(КодНалоговогоОрганаЭДО) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.КодНалоговогоОрганаЭДО;
				Возврат;
			КонецЕсли;
			
		Иначе
			ЭтотОбъект.ТекущийЭлемент = Элементы.ПодключитьЭДО;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияДляСкопированногоЗаявления()
		
	ДанныеОрганизацииЗаполненыКопированием 	= Истина;
	ДанныеВладельцаЭЦПЗаполненыКопированием = Истина;
	
	Организация = КонтекстЭДОКлиент.ПолучитьРеквизит(Реквизит, "Организация");
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Организация", 	?(ЗначениеЗаполнено(Организация),Организация,Неопределено));
	СтруктураРеквизитов.Вставить("ПриОткрытии",		Истина);
	СтруктураРеквизитов.Вставить("АдресЮридический",);
	СтруктураРеквизитов.Вставить("АдресФактический",);
	
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	
	Если ДанныеОрганизацииИОтветственныхЛиц.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации = ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	КонецЕсли;
	
	// Заполняем заявление на основе скопированного документа
	ЗаполнитьДанныеКопирования();
	
	УстановитьЗаголовокФормы();
	
	// Заполняем данные организации
	ИзменитьОформлениеРеквизитовОрганизации();
	
	// Определяем руководителя и гл бухгалтера
	ОпределитьОтветственныеЛицаОрганизации();

	Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		
		Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") И Руководитель <> ВладелецЭЦП 
			ИЛИ ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") И ГлБухгалтер <> ВладелецЭЦП Тогда
			
			// Если в предыдущем заявлении был сохранен владелец ЭЦП, и это был Руководитель или ГлБухгалтер, а
			// теперь Руководитель или ГлБухгалтер сменились в организации, то все данные по владельцу ЭЦП 
			// данные заполняются текущими сведениями, а не скопированными
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
			
		ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
			
			// Если в предыдущем заявлении был сохранен владелец ЭЦП, и это Сотрудник, то все данные по владельцу ЭЦП 
			// данные заполняются скопированными сведениями
			СотрудникВыбор = ВладелецЭЦП;
		КонецЕсли;
	Иначе
		// Если реквизит предыдущего заявления Владелец ЭЦП пустой, то сохраняем только позицию переключателя:
		// руководитель, гл. бухгалтер или сотрудник, все остальные данные заполняются текущими сведениями,
		// а не скопированными
		ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
	КонецЕсли;
	
	ИзменитьОформлениеВладельцаЭЦП();

КонецПроцедуры

&НаКлиенте
Процедура ДействияДляНовогоПустогоЗаявления()
	
	// переключатель ставим по умолчанию в состоянии Руководитель
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	ДанныеОрганизацииИОтветственныхЛиц = Новый Структура();
	ОбработатьИзменениеОрганизации(ДанныеОрганизацииИОтветственныхЛиц);
	
	// Если на втором шаге пользователем был установлен криптопровайдер и компьютер был перезагружен, то 
	// при повторном открытии базы сразу откроется мастер подключения к 1С-Отчетности на втором шаге.
	ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключения();

КонецПроцедуры

&НаСервере
Функция ПроверитьОрганизацию()
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
		Сообщить(НСтр("ru='Поддержка регламентированнной отчетности доступна только для индивидуальных предпринимателей!'"),СтатусСообщения.Внимание);
		Возврат Ложь;
	Иначе
		Если ЗначениеЗаполнено(Организация) И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИПИспользуетТрудНаемныхРаботников") Тогда
			Элементы.СдаватьВПФР.Видимость = Ложь;
			Элементы.СдаватьВФСС.Видимость = Ложь;
		Иначе
			Элементы.СдаватьВПФР.Видимость = Истина;
			Элементы.СдаватьВФСС.Видимость = Истина;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

