&НаКлиенте
Перем Хранилище Экспорт;
&НаКлиенте
Перем КонтекстЭДО Экспорт;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// инициализируем контекст ЭДО
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьСертификат(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КоманднаяПанельСертификатыПоказать(Команда)
	
	ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите в таблице сертификат для показа.");
	Иначе
		СертификатДляПоказа = Новый Структура("СерийныйНомер, Поставщик", ТекДанные.СерийныйНомер, ТекДанные.Поставщик);
		КриптографияЭДКОКлиент.ПоказатьСертификат(СертификатДляПоказа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФормыВыбрать(Кнопка)
	
	ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите сертификат!");
		Возврат;
	КонецЕсли;
	
	ВыбратьСертификат();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФормыПоказыватьПросроченные(Команда)
	
	Элементы.ПоказыватьПросроченные.Пометка = НЕ Элементы.ПоказыватьПросроченные.Пометка;
	ОтобразитьТаблицуСертификатов();

КонецПроцедуры


&НаКлиенте
Процедура КоманднаяПанельСертификатыМножественныйВыбор(Команда)
	
	Элементы.МножественныйВыбор.Пометка = НЕ Элементы.МножественныйВыбор.Пометка;
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСертификатыУстановитьВсеФлажки(Команда)
	
	Для Каждого Стр Из Сертификаты Цикл
		Стр.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСертификатыСнятьВсеФлажки(Команда)
	
	Для Каждого Стр Из Сертификаты Цикл
		Стр.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДО = Результат.КонтекстЭДО;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыЗавершение", ЭтотОбъект, Новый Структура("КонтекстЭДО", КонтекстЭДО));
		
	КриптографияЭДКОКлиент.ПолучитьСертификаты(
		ОписаниеОповещения, Новый Структура("Хранилище,ЭтоЛокальноеХранилище", ОбрабатываемоеХранилище, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСертификатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Выполнено Тогда
		СписокСертификаты = Результат.Сертификаты;
		КонтекстЭДО = ДополнительныеПараметры.КонтекстЭДО;
	Иначе
		СписокСертификаты = Новый Массив;
	КонецЕсли;
	
	// заполняем полную таблицу сертификатов из хранилища
	Для Каждого ЭлементСертификат Из СписокСертификаты Цикл
		НовСтр = ПолнаяТаблицаСертификатов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ЭлементСертификат);
	КонецЦикла;
	
	ПостОбработкаПолнойТаблицыСертификатовНаСервере();
	
	// если один из сертификатов начального значения выбора просрочен, то включим показ просроченных
	ТекДата = КонтекстЭДО.ТекущаяДатаНаСервере();
	Для Каждого ЭлНачальноеЗначениеВыбора Из НачальноеЗначениеВыбора Цикл
		Если ЗначениеЗаполнено(ЭлНачальноеЗначениеВыбора.Значение) Тогда
			ТекСертСтроки = ПолнаяТаблицаСертификатов.НайтиСтроки(Новый Структура("Отпечаток", ЭлНачальноеЗначениеВыбора.Значение));
			Если ТекСертСтроки.Количество() > 0 Тогда
				Для Каждого ТекСертСтрока Из ТекСертСтроки Цикл
					Если НЕ Элементы.ПоказыватьПросроченные.Пометка И (ТекДата < ТекСертСтрока.ДействителенС ИЛИ ТекДата > ТекСертСтрока.ДействителенПо) Тогда
						Элементы.ПоказыватьПросроченные.Пометка = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// отображаем на форме таблицу сертификатов на основе полной таблицы сертификатов
	ОтобразитьТаблицуСертификатов();
	
	// активизируем начальные значения выбора
	Для Каждого ЭлНачальноеЗначениеВыбора Из НачальноеЗначениеВыбора Цикл
		Если ЗначениеЗаполнено(ЭлНачальноеЗначениеВыбора.Значение) Тогда
			ТекСертСтроки = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ЭлНачальноеЗначениеВыбора.Значение));
			Если ТекСертСтроки.Количество() > 0 Тогда
				Для Каждого Стр Из ТекСертСтроки Цикл
					Стр.Пометка = Истина;
					Элементы.Сертификаты.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
				КонецЦикла;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сертификат с отпечатком ""%1"" не найден в хранилище сертификатов.'"),
					ЭлНачальноеЗначениеВыбора);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекДата = КонтекстЭДО.ТекущаяДатаНаСервере();
	
	УправлениеЭУ();
	
КонецПроцедуры

&НаСервере
Процедура ПостОбработкаПолнойТаблицыСертификатовНаСервере()
	
	Для Каждого СтрСертификат Из ПолнаяТаблицаСертификатов Цикл
		
		СтрСертификат.Поставщик = ЗначениеПоля(СтрСертификат.Поставщик);
		СтрСертификат.СерийныйНомер = ЗначениеПоля(СтрСертификат.СерийныйНомер);
		СтрСертификат.Владелец = ЗначениеПоля(СтрСертификат.Владелец);
		СтрСертификат.Наименование = ЗначениеПоля(СтрСертификат.Наименование);
		СтрСертификат.Отпечаток = нрег(СтрСертификат.Отпечаток);
		
		ПараметрыВладельца = РазложитьСтрокуВладелец(СтрСертификат.Владелец);
		СтрСертификат.ИмяВладельца = ЗначениеПоля(ПараметрыВладельца.Имя);
		СтрСертификат.Организация = ЗначениеПоля(ПараметрыВладельца.Организация);
		СтрСертификат.Должность = ЗначениеПоля(?(ЗначениеЗаполнено(ПараметрыВладельца.Должность) И ПараметрыВладельца.Должность <> "0", ПараметрыВладельца.Должность, ПараметрыВладельца.Подразделение));
		СтрСертификат.EMail = ЗначениеПоля(ПараметрыВладельца.ЭлектроннаяПочта);
		СтрСертификат.ИНН = ЗначениеПоля(ПараметрыВладельца.ИНН);
	
	КонецЦикла;
	
	ПолнаяТаблицаСертификатов.Сортировать("ИмяВладельца");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПоля(СтрЗначениеПоля)
	
	Возврат ?(НЕ ЗначениеЗаполнено(СтрЗначениеПоля) ИЛИ СокрЛП(СтрЗначениеПоля) = "0", "", СтрЗначениеПоля);
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьТаблицуСертификатов()
	
	// запоминаем выбранные сертификаты
	ВыбранныеСертификаты = Новый Массив;
	ПомеченныеСертификатыСтр = Сертификаты.НайтиСтроки(Новый Структура("Пометка", Истина));
	Для Каждого ЭлСертификат Из ПомеченныеСертификатыСтр Цикл
		ВыбранныеСертификаты.Добавить(ЭлСертификат.Отпечаток);
	КонецЦикла;
	
	// запоминаем текущий сертификат
	Если Элементы.Сертификаты.ТекущиеДанные <> Неопределено Тогда
		ТекущийСертификат = Элементы.Сертификаты.ТекущиеДанные.Отпечаток;
	КонецЕсли;
	
	// очищаем таблицу перед новым заполнением
	Сертификаты.Очистить();
	
	// заполняем таблицу заново
	ТекущаяДата = КонтекстЭДО.ТекущаяДатаНаСервере();
	Для Каждого Серт Из ПолнаяТаблицаСертификатов Цикл
		Если НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайрФоксХромИлиСафари() Тогда
			Если НЕ Элементы.ПоказыватьПросроченные.Пометка И (ТекущаяДата < Серт.ДействителенС ИЛИ ТекущаяДата > Серт.ДействителенПо) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовСтр = Сертификаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Серт);
	КонецЦикла;
	
	// устанавливаем выбранные сертификаты
	Для Каждого ВыбранныйСертификат Из ВыбранныеСертификаты Цикл
		СтрНайденныеСертификаты = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ВыбранныйСертификат));
		Для Каждого СтрНайденныйСертификат Из СтрНайденныеСертификаты Цикл
			СтрНайденныйСертификат.Пометка = Истина;
		КонецЦикла;
	КонецЦикла;
	
	// устанавливаем текущий сертификат
	Если ТекущийСертификат <> Неопределено Тогда
		СтрокаСертификат = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ТекущийСертификат));
		Если СтрокаСертификат.Количество() > 0 Тогда
			Элементы.Сертификаты.ТекущаяСтрока = СтрокаСертификат[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазобратьСтрокуСвойств(Знач СтрокаСвойств) 
	
	СоответствиеРезультат = Новый Соответствие;
	ИсходнаяДлинаСтрокиСвойств = СтрДлина(СтрокаСвойств);
	
	Для ОбрИнд = 0 По ИсходнаяДлинаСтрокиСвойств - 1 Цикл
		Инд = ИсходнаяДлинаСтрокиСвойств - ОбрИнд;
		Если Сред(СтрокаСвойств, Инд, 1) = "," Тогда
			СтрокаСвойства = Сред(СтрокаСвойств, Инд + 1);
			СтрокаСвойств = Лев(СтрокаСвойств, Инд - 1);
			ВхождениеРавно = СтрНайти(СтрокаСвойства, "=");
			Если ВхождениеРавно <> 0 Тогда
				ИмяПараметра = СокрЛП(Лев(СтрокаСвойства, ВхождениеРавно - 1));
				ЗначениеПараметра = СокрЛП(Сред(СтрокаСвойства, ВхождениеРавно + 1));
				Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
					СоответствиеРезультат.Вставить(ИмяПараметра, ЗначениеПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаСвойств) Тогда
		ВхождениеРавно = СтрНайти(СтрокаСвойств, "=");
		Если ВхождениеРавно <> 0 Тогда
			ИмяПараметра = СокрЛП(Лев(СтрокаСвойств, ВхождениеРавно - 1));
			ЗначениеПараметра = СокрЛП(Сред(СтрокаСвойств, ВхождениеРавно + 1));
			Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
				СоответствиеРезультат.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СоответствиеРезультат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьФИОСтрокойИзСвойствСертификата(СвойстваСертификата)
	
	Если СертификатЯвляетсяКвалифицированным(СвойстваСертификата) Тогда
		Если СвойстваСертификата.Получить("G") <> Неопределено Тогда
			Возврат СтрЗаменить(СокрЛП(СвойстваСертификата["SN"]) + " " + СокрЛП(СвойстваСертификата["G"]), "_", " ");	
		Иначе
			Возврат СтрЗаменить(СокрЛП(СвойстваСертификата["SN"]) + " " + СокрЛП(СвойстваСертификата["GN"]), "_", " ");	
		КонецЕсли;
	Иначе
		Возврат СокрЛП(СвойстваСертификата["CN"]);
	КонецЕсли;
	
КонецФункции 
 
&НаКлиентеНаСервереБезКонтекста
Функция СертификатЯвляетсяКвалифицированным(СвойстваСертификата)
	
	Возврат НЕ (СвойстваСертификата.Получить("OID.1.2.643.100.3") = Неопределено И СвойстваСертификата.Получить("СНИЛС") = Неопределено И СвойстваСертификата.Получить("SNILS") = Неопределено);
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВладелец(Знач Владелец)
	
	НачалоOIDИНН = "OID.1.2.643.3.";
	
	СоответствиеКодаИмениСвойства = Новый Соответствие;
	//закомментированно использование CN: СоответствиеКодаИмениСвойства.Вставить("CN", "Имя");
	СоответствиеКодаИмениСвойства.Вставить("O", "Организация");
	СоответствиеКодаИмениСвойства.Вставить("OU", "Подразделение");
	СоответствиеКодаИмениСвойства.Вставить("E", "ЭлектроннаяПочта");
	СоответствиеКодаИмениСвойства.Вставить("T", "Должность");
	
	СвойстваРезультат = Новый Структура("Имя, Организация, Подразделение, ЭлектроннаяПочта, Должность, ИНН", "", "", "", "", "", "");
	
	СвойстваСертификата = РазобратьСтрокуСвойств(Владелец);
	СвойстваРезультат.Вставить("Имя", ПолучитьФИОСтрокойИзСвойствСертификата(СвойстваСертификата));

	Пока НЕ ПустаяСтрока(Владелец) Цикл
		ВхождениеЗапятой = СтрНайти(Владелец, ",");
		СтрокаДоЗапятой = ?(ВхождениеЗапятой = 0, СокрЛП(Владелец), СокрЛП(Лев(Владелец, ВхождениеЗапятой - 1)));
		ВхождениеРавно = СтрНайти(СтрокаДоЗапятой, "=");
		Если ВхождениеРавно <> 0 Тогда
			ДоРавно = СокрЛП(Лев(СтрокаДоЗапятой, ВхождениеРавно - 1));
			ПослеРавно = СокрЛП(Сред(СтрокаДоЗапятой, ВхождениеРавно + 1));
			Если ДоРавно <> "" И ПослеРавно <> "" Тогда
				ИмяСвойства = СоответствиеКодаИмениСвойства[ДоРавно];
				Если ИмяСвойства <> Неопределено Тогда
					СвойстваРезультат.Вставить(ИмяСвойства, ПослеРавно);
				ИначеЕсли Лев(ДоРавно, СтрДлина(НачалоOIDИНН)) = НачалоOIDИНН И Прав(ДоРавно, СтрДлина(".1.1")) = ".1.1" Тогда
					СвойстваРезультат.Вставить("ИНН", ПослеРавно);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Владелец = ?(ВхождениеЗапятой = 0, "", СокрЛП(Сред(Владелец, ВхождениеЗапятой + 1)));
	КонецЦикла;

	Возврат СвойстваРезультат;

КонецФункции

&НаКлиенте
Процедура УправлениеЭУ()
	
	Если Элементы.ГруппаМножественныйВыбор.Видимость И Элементы.МножественныйВыбор.Пометка Тогда
		Элементы.СертификатыПометка.Видимость = Истина;
		Элементы.УстановитьВсеФлажки.Доступность = Истина;
		Элементы.СнятьВсеФлажки.Доступность = Истина;
	Иначе
		Элементы.СертификатыПометка.Видимость = Ложь;
		Элементы.УстановитьВсеФлажки.Доступность = Ложь;
		Элементы.СнятьВсеФлажки.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// переопределяем параметры в реквизиты
	МножественныйВыбор = Параметры.МножественныйВыбор;
	
	// если форма открыта не для множественного выбора, то скроем ЭУ, связанные с ним
	Если НЕ МножественныйВыбор Тогда
		Элементы.ГруппаМножественныйВыбор.Видимость = Ложь;
	КонецЕсли;
	
	// определяем с каким хранилищем будем работать
	ОбрабатываемоеХранилище = ?(ЗначениеЗаполнено(Параметры.Хранилище), Параметры.Хранилище, "MY");
	
	// регулируем пометку у кнопки показа просроченных сертификатов
	Элементы.ПоказыватьПросроченные.Пометка = (Параметры.ПоказыватьПросроченные = Истина);
	
	// регулируем видимость колонки ИНН (если показывается хранилище Личные, то ИНН показываем)
	Элементы.СертификатыИНН.Видимость = (ОбрабатываемоеХранилище = "MY");
	
	// инициализируем массив с начальными значениями
	Если НЕ ЗначениеЗаполнено(Параметры.НачальноеЗначениеВыбора) Тогда
		НачальноеЗначениеВыбора = Новый СписокЗначений;
	ИначеЕсли ТипЗнч(Параметры.НачальноеЗначениеВыбора) = Тип("Массив") Тогда
		НачальноеЗначениеВыбора = Новый СписокЗначений;
		НачальноеЗначениеВыбора.ЗагрузитьЗначения(Параметры.НачальноеЗначениеВыбора);
	ИначеЕсли ТипЗнч(Параметры.НачальноеЗначениеВыбора) = Тип("Строка") Тогда
		НачальноеЗначениеВыбора = Новый СписокЗначений;
		НачальноеЗначениеВыбора.Добавить(Параметры.НачальноеЗначениеВыбора);
	Иначе
		НачальноеЗначениеВыбора = Новый СписокЗначений;
		НачальноеЗначениеВыбора.ЗагрузитьЗначения(Параметры.НачальноеЗначениеВыбора.Выгрузить( ,"Сертификат").ВыгрузитьКолонку("Сертификат"));
	КонецЕсли;
	
	Если НачальноеЗначениеВыбора.Количество() > 1 Тогда
		Элементы.МножественныйВыбор.Пометка = Истина;
	КонецЕсли;
	
	//
	ТекДата = ТекущаяДатаСеанса();
	
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Для Каждого Эл Из ЭлементУсловногоОформления.Отбор.Элементы Цикл
			Эл.ПравоеЗначение = ТекДата;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Получение контекста ЭДО" И КонтекстЭДО <> Неопределено И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Параметр.КонтекстЭДО = КонтекстЭДО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификат(парамМножественныйВыбор = Неопределено)
	
	ТекДата = КонтекстЭДО.ТекущаяДатаНаСервере();
	
	// если принудительно установлен режим выбора при вызове метода (множ. или нет) - используеи его
	Если парамМножественныйВыбор <> Неопределено Тогда
		ПризнакВыбораНесколькихСтрок = парамМножественныйВыбор;
	Иначе
		ПризнакВыбораНесколькихСтрок = Элементы.МножественныйВыбор.Пометка;
	КонецЕсли;
	
	Если ПризнакВыбораНесколькихСтрок Тогда
		// помещаем сертификаты в массив и анализируем их периоды действия
		ТекСертификаты = Новый Массив;
		ОдинИзСертификатовПросрочен = Ложь;
		Для Каждого СтрСертификат Из Сертификаты Цикл
			
			// если строка не помечена, то продолжим
			Если НЕ СтрСертификат.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайрФоксХромИлиСафари() Тогда
				// если сертификат просрочен, то взведем флаг
				СрокИстек = ТекДата > СтрСертификат.ДействителенПо;
				СрокНеНачался = ТекДата < СтрСертификат.ДействителенС;
				Если СрокИстек ИЛИ СрокНеНачался Тогда
					ОдинИзСертификатовПросрочен = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// добавляем элемент в массив выбранных сертификатов
			ТекСертификат = Новый Структура;
			ТекСертификат.Вставить("ДействителенС",			СтрСертификат.ДействителенС);
			ТекСертификат.Вставить("ДействителенПо",		СтрСертификат.ДействителенПо);
			ТекСертификат.Вставить("Отпечаток",				СтрСертификат.Отпечаток);
			ТекСертификат.Вставить("Поставщик",				СтрСертификат.Поставщик);
			ТекСертификат.Вставить("СерийныйНомер",			СтрСертификат.СерийныйНомер);
			ТекСертификат.Вставить("Владелец",				СтрСертификат.Владелец);
			ТекСертификат.Вставить("Наименование",			СтрСертификат.Наименование);
			ТекСертификат.Вставить("ВозможностьПодписи",	СтрСертификат.ПригоденДляПодписания);
			ТекСертификат.Вставить("ВозможностьШифрования",	СтрСертификат.ПригоденДляШифрования);
			ТекСертификаты.Добавить(ТекСертификат);
			
		КонецЦикла;
		
		// если один из сертификатов просрочен, то задаем уточняющий вопрос
		Если ОдинИзСертификатовПросрочен Тогда
			ДополнительныеПараметры = Новый Структура("ТекСертификаты", ТекСертификаты);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСредиВыбранныеЕстьПросроченныеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = "Среди выбранных сертификатов есть такие, срок действия которых истек.
				|Вы уверены, что хотите продолжить выбор?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			Закрыть(ТекСертификаты);
		КонецЕсли;
		
	Иначе
		
		ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
		
		Если НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ЭтоФайрФоксХромИлиСафари() Тогда
			СрокИстек = ТекДата > ТекДанные.ДействителенПо;
			СрокНеНачался = ТекДата < ТекДанные.ДействителенС;
			Если СрокИстек ИЛИ СрокНеНачался Тогда
				ДополнительныеПараметры = Новый Структура("ТекДанные", ТекДанные);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСертификатПросроченЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ТекстВопроса = "Вы уверены, что хотите выбрать сертификат, срок действия которого " + ?(СрокИстек, "истек", "еще не начался") + "?";
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СвойстваСертификата = Новый Структура;
		СвойстваСертификата.Вставить("ДействителенС",			ТекДанные.ДействителенС);
		СвойстваСертификата.Вставить("ДействителенПо",			ТекДанные.ДействителенПо);
		СвойстваСертификата.Вставить("Отпечаток",				ТекДанные.Отпечаток);
		СвойстваСертификата.Вставить("Поставщик",				ТекДанные.Поставщик);
		СвойстваСертификата.Вставить("СерийныйНомер",			ТекДанные.СерийныйНомер);
		СвойстваСертификата.Вставить("Владелец",				ТекДанные.Владелец);
		СвойстваСертификата.Вставить("Наименование",			ТекДанные.Наименование);
		СвойстваСертификата.Вставить("ВозможностьПодписи",		ТекДанные.ПригоденДляПодписания);
		СвойстваСертификата.Вставить("ВозможностьШифрования",	ТекДанные.ПригоденДляШифрования);
		
		Закрыть(СвойстваСертификата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСертификатПросроченЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СвойстваСертификата = Новый Структура;
		СвойстваСертификата.Вставить("ДействителенС",			ТекДанные.ДействителенС);
		СвойстваСертификата.Вставить("ДействителенПо",			ТекДанные.ДействителенПо);
		СвойстваСертификата.Вставить("Отпечаток",				ТекДанные.Отпечаток);
		СвойстваСертификата.Вставить("Поставщик",				ТекДанные.Поставщик);
		СвойстваСертификата.Вставить("СерийныйНомер",			ТекДанные.СерийныйНомер);
		СвойстваСертификата.Вставить("Владелец",				ТекДанные.Владелец);
		СвойстваСертификата.Вставить("Наименование",			ТекДанные.Наименование);
		СвойстваСертификата.Вставить("ВозможностьПодписи",		ТекДанные.ПригоденДляПодписания);
		СвойстваСертификата.Вставить("ВозможностьШифрования",	ТекДанные.ПригоденДляШифрования);
		
		Закрыть(СвойстваСертификата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросСредиВыбранныеЕстьПросроченныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекСертификаты = ДополнительныеПараметры.ТекСертификаты;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Закрыть(ТекСертификаты);
	
КонецПроцедуры

#КонецОбласти

