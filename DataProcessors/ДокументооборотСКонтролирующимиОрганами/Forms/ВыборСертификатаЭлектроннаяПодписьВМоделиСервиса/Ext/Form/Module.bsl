#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого ЭлементСписка Из НеНайденныеСертификаты Цикл 
		ШаблонСообщения = НСтр("ru = 'Сертификат с отпечатком ""%1"" не найден в хранилище сертификатов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементСписка.Значение));
	КонецЦикла;
	
	УправлениеПросроченными();
	
	Для Каждого СтрокаТаблицы Из Сертификаты Цикл
		Если СтрокаТаблицы.Пометка Тогда
			Элементы.Сертификаты.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	МножественныйВыбор = Параметры.МножественныйВыбор;
	ПоказыватьПросроченные = Параметры.ПоказыватьПросроченные;
	
	// Определяем с каким хранилищем будем работать
	Если ЗначениеЗаполнено(Параметры.Хранилище) Тогда
		ОбрабатываемоеХранилище = XMLЗначение(Тип("ПеречислениеСсылка.ЛогическиеХранилищаСертификатов"), Параметры.Хранилище);
	Иначе
		ОбрабатываемоеХранилище = Перечисления.ЛогическиеХранилищаСертификатов.MY;
	КонецЕсли;
	
		
	// Инициализируем массив с начальными значениями
	Если НЕ ЗначениеЗаполнено(Параметры.НачальноеЗначениеВыбора) Тогда
		НачальноеЗначениеВыбора = Новый СписокЗначений;
	ИначеЕсли ТипЗнч(Параметры.НачальноеЗначениеВыбора) = Тип("Массив") Тогда
		НачальноеЗначениеВыбора = Новый СписокЗначений;
		НачальноеЗначениеВыбора.ЗагрузитьЗначения(Параметры.НачальноеЗначениеВыбора);
	ИначеЕсли ТипЗнч(Параметры.НачальноеЗначениеВыбора) = Тип("Строка") Тогда
		НачальноеЗначениеВыбора = Новый СписокЗначений;
		НачальноеЗначениеВыбора.Добавить(Параметры.НачальноеЗначениеВыбора);
	Иначе
		НачальноеЗначениеВыбора = Новый СписокЗначений;
		НачальноеЗначениеВыбора.ЗагрузитьЗначения(Параметры.НачальноеЗначениеВыбора.Выгрузить( ,"Сертификат").ВыгрузитьКолонку("Сертификат"));
	КонецЕсли;

	ТекущаяДата = ТекущаяДатаСеанса();
	
	ЗаполнитьТаблицуСертификатовИзЗащищенногоХранилищаНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСертификаты

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьСертификат(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КоманднаяПанельСертификатыПоказать(Команда)
	
	ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите в таблице сертификат для показа.");
	Иначе
		СертификатДляПоказа = Новый Структура("Отпечаток, ЭтоЭлектроннаяПодписьВМоделиСервиса", ТекДанные.Отпечаток, Истина);
		КриптографияЭДКОКлиент.ПоказатьСертификат(СертификатДляПоказа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФормыВыбрать(Кнопка)
	
	ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Сертификат не выбран.");
		Возврат;
	КонецЕсли;
	
	ВыбратьСертификат();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельФормыПоказыватьПросроченные(Команда)
	
	Элементы.ПоказыватьПросроченные.Пометка = НЕ Элементы.ПоказыватьПросроченные.Пометка;
	ПоказыватьПросроченные = Элементы.ПоказыватьПросроченные.Пометка;
	
	УправлениеПросроченными();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСертификатыМножественныйВыбор(Команда)
	
	Элементы.МножественныйВыбор.Пометка = НЕ Элементы.МножественныйВыбор.Пометка;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСертификатыУстановитьВсеФлажки(Команда)
	
	Для Каждого Стр Из Сертификаты Цикл
		Стр.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельСертификатыСнятьВсеФлажки(Команда)
	
	Для Каждого Стр Из Сертификаты Цикл
		Стр.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеПросроченными()
	
	Если ПоказыватьПросроченные Тогда
		Элементы.Сертификаты.ОтборСтрок = Неопределено;
	Иначе
		ОтборСтрок = Новый ФиксированнаяСтруктура("Просрочен", Ложь);
		Элементы.Сертификаты.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	// Если форма открыта не для множественного выбора, то скроем ЭУ, связанные с ним
	Элементы.ГруппаМножественныйВыбор.Видимость = Форма.МножественныйВыбор;
	
	Элементы.ПоказыватьПросроченные.Пометка = Форма.ПоказыватьПросроченные;
	Элементы.СертификатыИНН.Видимость = 
		Форма.ОбрабатываемоеХранилище = ПредопределенноеЗначение("Перечисление.ЛогическиеХранилищаСертификатов.MY");

		
	Если Форма.НачальноеЗначениеВыбора.Количество() > 1 Тогда
		Элементы.МножественныйВыбор.Пометка = Истина;
	КонецЕсли;
	
	Если Элементы.ГруппаМножественныйВыбор.Видимость И Элементы.МножественныйВыбор.Пометка Тогда
		Элементы.СертификатыПометка.Видимость = Истина;
		Элементы.УстановитьВсеФлажки.Доступность = Истина;
		Элементы.СнятьВсеФлажки.Доступность = Истина;
	Иначе
		Элементы.СертификатыПометка.Видимость = Ложь;
		Элементы.УстановитьВсеФлажки.Доступность = Ложь;
		Элементы.СнятьВсеФлажки.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПоля(СтрЗначениеПоля)
	
	Возврат ?(НЕ ЗначениеЗаполнено(СтрЗначениеПоля) ИЛИ СокрЛП(СтрЗначениеПоля) = "0", "", СтрЗначениеПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВладелец(Знач Владелец)
	
	НачалоOIDИНН = "OID.1.2.643.3.";
	
	СоответствиеКодаИмениСвойства = Новый Соответствие;
	//закомментированно использование CN: СоответствиеКодаИмениСвойства.Вставить("CN", "Имя");
	СоответствиеКодаИмениСвойства.Вставить("O", "Организация");
	СоответствиеКодаИмениСвойства.Вставить("OU", "Подразделение");
	СоответствиеКодаИмениСвойства.Вставить("E", "ЭлектроннаяПочта");
	СоответствиеКодаИмениСвойства.Вставить("T", "Должность");
	
	СвойстваРезультат = Новый Структура("Имя, Организация, Подразделение, ЭлектроннаяПочта, Должность, ИНН", "", "", "", "", "", "");
	
	СвойстваСертификата = РазобратьСтрокуСвойств(Владелец);
	СвойстваРезультат.Вставить("Имя", ПолучитьФИОСтрокойИзСвойствСертификата(СвойстваСертификата));

	Пока НЕ ПустаяСтрока(Владелец) Цикл
		ВхождениеЗапятой = СтрНайти(Владелец, ",");
		СтрокаДоЗапятой = ?(ВхождениеЗапятой = 0, СокрЛП(Владелец), СокрЛП(Лев(Владелец, ВхождениеЗапятой - 1)));
		ВхождениеРавно = СтрНайти(СтрокаДоЗапятой, "=");
		Если ВхождениеРавно <> 0 Тогда
			ДоРавно = СокрЛП(Лев(СтрокаДоЗапятой, ВхождениеРавно - 1));
			ПослеРавно = СокрЛП(Сред(СтрокаДоЗапятой, ВхождениеРавно + 1));
			Если ДоРавно <> "" И ПослеРавно <> "" Тогда
				ИмяСвойства = СоответствиеКодаИмениСвойства[ДоРавно];
				Если ИмяСвойства <> Неопределено Тогда
					СвойстваРезультат.Вставить(ИмяСвойства, ПослеРавно);
				ИначеЕсли Лев(ДоРавно, СтрДлина(НачалоOIDИНН)) = НачалоOIDИНН И Прав(ДоРавно, СтрДлина(".1.1")) = ".1.1" Тогда
					СвойстваРезультат.Вставить("ИНН", ПослеРавно);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Владелец = ?(ВхождениеЗапятой = 0, "", СокрЛП(Сред(Владелец, ВхождениеЗапятой + 1)));
	КонецЦикла;

	Возврат СвойстваРезультат;

КонецФункции

&НаКлиенте
Процедура ВыбратьСертификат(парамМножественныйВыбор = Неопределено)
	
	// если принудительно установлен режим выбора при вызове метода (множ. или нет) - используеи его
	Если парамМножественныйВыбор <> Неопределено Тогда
		ПризнакВыбораНесколькихСтрок = парамМножественныйВыбор;
	Иначе
		ПризнакВыбораНесколькихСтрок = Элементы.МножественныйВыбор.Пометка;
	КонецЕсли;
	
	Если ПризнакВыбораНесколькихСтрок Тогда
		// помещаем сертификаты в массив и анализируем их периоды действия
		ТекСертификаты = Новый Массив;
		ОдинИзСертификатовПросрочен = Ложь;
		Для Каждого СтрокаТаблицы Из Сертификаты Цикл
			
			Если НЕ СтрокаТаблицы.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.Просрочен Тогда
				ОдинИзСертификатовПросрочен = Истина;
			КонецЕсли;
			
			// добавляем элемент в массив выбранных сертификатов
			ТекСертификат = Новый Структура;
			ТекСертификат.Вставить("ДействителенС",			СтрокаТаблицы.ДействителенС);
			ТекСертификат.Вставить("ДействителенПо",		СтрокаТаблицы.ДействителенПо);
			ТекСертификат.Вставить("Отпечаток",				СтрокаТаблицы.Отпечаток);
			ТекСертификат.Вставить("Поставщик",				СтрокаТаблицы.Поставщик);
			ТекСертификат.Вставить("СерийныйНомер",			СтрокаТаблицы.СерийныйНомер);
			ТекСертификат.Вставить("Владелец",				СтрокаТаблицы.Владелец);
			ТекСертификат.Вставить("Наименование",			СтрокаТаблицы.Наименование);
			ТекСертификат.Вставить("ВозможностьПодписи",	СтрокаТаблицы.ПригоденДляПодписывания);
			ТекСертификат.Вставить("ВозможностьШифрования",	СтрокаТаблицы.ПригоденДляШифрования);
			ТекСертификаты.Добавить(ТекСертификат);
			
		КонецЦикла;
		
		// если один из сертификатов просрочен, то задаем уточняющий вопрос
		Если ОдинИзСертификатовПросрочен Тогда
			ДополнительныеПараметры = Новый Структура("ТекСертификаты", ТекСертификаты);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОдинИзСертификатовПросроченЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Среди выбранных сертификатов есть такие, срок действия которых истек.
				|Вы уверены, что хотите продолжить выбор?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			Закрыть(ТекСертификаты);
		КонецЕсли;
		
	Иначе
		
		ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
		
		Если ТекДанные.Просрочен Тогда
			ДополнительныеПараметры = Новый Структура("ТекДанные", ТекДанные);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСертификатПросроченЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите выбрать сертификат, срок действия которого истек?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			
			СвойстваСертификата = Новый Структура;
			СвойстваСертификата.Вставить("ДействителенС",			ТекДанные.ДействителенС);
			СвойстваСертификата.Вставить("ДействителенПо",			ТекДанные.ДействителенПо);
			СвойстваСертификата.Вставить("Отпечаток",				ТекДанные.Отпечаток);
			СвойстваСертификата.Вставить("Поставщик",				ТекДанные.Поставщик);
			СвойстваСертификата.Вставить("СерийныйНомер",			ТекДанные.СерийныйНомер);
			СвойстваСертификата.Вставить("Владелец",				ТекДанные.Владелец);
			СвойстваСертификата.Вставить("Наименование",			ТекДанные.Наименование);
			СвойстваСертификата.Вставить("ВозможностьПодписи",		ТекДанные.ПригоденДляПодписывания);
			СвойстваСертификата.Вставить("ВозможностьШифрования",	ТекДанные.ПригоденДляШифрования);
			
			Закрыть(СвойстваСертификата);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОдинИзСертификатовПросроченЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Закрыть(ДополнительныеПараметры.ТекСертификаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСертификатПросроченЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СвойстваСертификата = Новый Структура;
		СвойстваСертификата.Вставить("ДействителенС",			ТекДанные.ДействителенС);
		СвойстваСертификата.Вставить("ДействителенПо",			ТекДанные.ДействителенПо);
		СвойстваСертификата.Вставить("Отпечаток",				ТекДанные.Отпечаток);
		СвойстваСертификата.Вставить("Поставщик",				ТекДанные.Поставщик);
		СвойстваСертификата.Вставить("СерийныйНомер",			ТекДанные.СерийныйНомер);
		СвойстваСертификата.Вставить("Владелец",				ТекДанные.Владелец);
		СвойстваСертификата.Вставить("Наименование",			ТекДанные.Наименование);
		СвойстваСертификата.Вставить("ВозможностьПодписи",		ТекДанные.ПригоденДляПодписывания);
		СвойстваСертификата.Вставить("ВозможностьШифрования",	ТекДанные.ПригоденДляШифрования);
		
		Закрыть(СвойстваСертификата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазобратьСтрокуСвойств(Знач СтрокаСвойств) 
	
	СоответствиеРезультат = Новый Соответствие;
	ИсходнаяДлинаСтрокиСвойств = СтрДлина(СтрокаСвойств);
	
	Для ОбрИнд = 0 По ИсходнаяДлинаСтрокиСвойств - 1 Цикл
		Инд = ИсходнаяДлинаСтрокиСвойств - ОбрИнд;
		Если Сред(СтрокаСвойств, Инд, 1) = "," Тогда
			СтрокаСвойства = Сред(СтрокаСвойств, Инд + 1);
			СтрокаСвойств = Лев(СтрокаСвойств, Инд - 1);
			ВхождениеРавно = СтрНайти(СтрокаСвойства, "=");
			Если ВхождениеРавно <> 0 Тогда
				ИмяПараметра = СокрЛП(Лев(СтрокаСвойства, ВхождениеРавно - 1));
				ЗначениеПараметра = СокрЛП(Сред(СтрокаСвойства, ВхождениеРавно + 1));
				Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
					СоответствиеРезультат.Вставить(ИмяПараметра, ЗначениеПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаСвойств) Тогда
		ВхождениеРавно = СтрНайти(СтрокаСвойств, "=");
		Если ВхождениеРавно <> 0 Тогда
			ИмяПараметра = СокрЛП(Лев(СтрокаСвойств, ВхождениеРавно - 1));
			ЗначениеПараметра = СокрЛП(Сред(СтрокаСвойств, ВхождениеРавно + 1));
			Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
				СоответствиеРезультат.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СоответствиеРезультат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьФИОСтрокойИзСвойствСертификата(СвойстваСертификата)
	
	Если СертификатЯвляетсяКвалифицированным(СвойстваСертификата) Тогда
		Если СвойстваСертификата.Получить("G") <> Неопределено Тогда
			Возврат СтрЗаменить(СокрЛП(СвойстваСертификата["SN"]) + " " + СокрЛП(СвойстваСертификата["G"]), "_", " ");	
		Иначе
			Возврат СтрЗаменить(СокрЛП(СвойстваСертификата["SN"]) + " " + СокрЛП(СвойстваСертификата["GN"]), "_", " ");	
		КонецЕсли;
	Иначе
		Возврат СокрЛП(СвойстваСертификата["CN"]);
	КонецЕсли;
	
КонецФункции 
 
&НаКлиентеНаСервереБезКонтекста
Функция СертификатЯвляетсяКвалифицированным(СвойстваСертификата)
	
	Возврат НЕ (СвойстваСертификата.Получить("OID.1.2.643.100.3") = Неопределено И СвойстваСертификата.Получить("СНИЛС") = Неопределено И СвойстваСертификата.Получить("SNILS") = Неопределено);
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьТаблицуСертификатовИзЗащищенногоХранилищаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХранилищеСертификатовБРО.ЛогическоеХранилище,
	|	ХранилищеСертификатовБРО.Отпечаток,
	|	ХранилищеСертификатовБРО.Сертификат,
	|	ХранилищеСертификатовБРО.ДействителенС,
	|	ХранилищеСертификатовБРО.ДействителенДо,
	|	ХранилищеСертификатовБРО.Издатель,
	|	ХранилищеСертификатовБРО.СерийныйНомер,
	|	ХранилищеСертификатовБРО.Субъект,
	|	ХранилищеСертификатовБРО.Наименование,
	|	ХранилищеСертификатовБРО.ИспользоватьДляПодписи,
	|	ВЫБОР
	|		КОГДА &ТекущаяДата МЕЖДУ ХранилищеСертификатовБРО.ДействителенС И ХранилищеСертификатовБРО.ДействителенДо
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Просрочен
	|ИЗ
	|	РегистрСведений.ХранилищеСертификатовБРО КАК ХранилищеСертификатовБРО
	|ГДЕ
	|	ХранилищеСертификатовБРО.ЛогическоеХранилище = &ЛогическоеХранилище";
	Запрос.УстановитьПараметр("ЛогическоеХранилище", ОбрабатываемоеХранилище);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Сертификаты.Добавить();
		
		НоваяСтрока.Просрочен               = Выборка.Просрочен;
		НоваяСтрока.ДействителенС           = Выборка.ДействителенС;
		НоваяСтрока.ДействителенПо          = Выборка.ДействителенДо;	
		НоваяСтрока.Отпечаток               = НРег(Выборка.Отпечаток);
		НоваяСтрока.ПригоденДляПодписывания = Выборка.ИспользоватьДляПодписи;
		НоваяСтрока.Поставщик               = ЗначениеПоля(Выборка.Издатель);
		НоваяСтрока.Наименование            = ЗначениеПоля(Выборка.Наименование);
		НоваяСтрока.Владелец                = ЗначениеПоля(Выборка.Субъект);
		НоваяСтрока.СерийныйНомер           = ЗначениеПоля(Выборка.СерийныйНомер);		
			
		ПараметрыВладельца = РазложитьСтрокуВладелец(НоваяСтрока.Владелец);
		НоваяСтрока.ИмяВладельца = ЗначениеПоля(ПараметрыВладельца.Имя);
		НоваяСтрока.Организация  = ЗначениеПоля(ПараметрыВладельца.Организация);
		НоваяСтрока.Должность    = ЗначениеПоля(?(ЗначениеЗаполнено(ПараметрыВладельца.Должность) И ПараметрыВладельца.Должность <> "0", ПараметрыВладельца.Должность, ПараметрыВладельца.Подразделение));
		НоваяСтрока.EMail        = ЗначениеПоля(ПараметрыВладельца.ЭлектроннаяПочта);
		НоваяСтрока.ИНН          = ЗначениеПоля(ПараметрыВладельца.ИНН);
		
		Если Не ПоказыватьПросроченные И НоваяСтрока.Просрочен
			И НачальноеЗначениеВыбора.НайтиПоЗначению(НоваяСтрока.Отпечаток) <> Неопределено Тогда
			ПоказыватьПросроченные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Сертификаты.Сортировать("ИмяВладельца");
	
	НеНайденныеСертификаты = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из НачальноеЗначениеВыбора Цикл
		НайденныеСтроки = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ЭлементСписка.Значение));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НеНайденныеСертификаты.Добавить(ЭлементСписка.Значение);
		Иначе
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				СтрокаТаблицы.Пометка = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти