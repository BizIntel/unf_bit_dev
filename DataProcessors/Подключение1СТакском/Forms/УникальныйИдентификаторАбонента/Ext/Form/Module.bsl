
#Область ОписаниеПеременных

// Хранение контекста взаимодействия с сервисом
&НаКлиенте
Перем КонтекстВзаимодействия Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДобавлениеСертификата = (Параметры.ToAddCert = "YES");
	
	Элементы.НадписьЛогина.Заголовок = НСтр("ru = 'Логин:'") + " " + Параметры.login;
	
	СтатусЗаявки           = Параметры.applicationStatusED;
	НомерЗаявки            = Параметры.numberRequestED;
	ИдентификаторУчастника = Параметры.identifierTaxcomED;
	СтрокаДатыЗаявки       = Параметры.dateRequestED;
	СертификатЭП           = Параметры.IDCertificateED;
	Организация            = Параметры.IDOrganizationED;
	
	// Преобразование строковых параметров к нужному виду
	ДатаЗаявки             = ПолучитьДатуИзСтрокиДатыССервера(СтрокаДатыЗаявки);
	
	УстановитьСтатусФормы();
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		Элементы.ГруппаИнформации.Отображение = ОтображениеОбычнойГруппы.Нет;
		Элементы.ГруппаСведенийОСертификате.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнтернетПоддержкаПользователейКлиент.ОбработатьОткрытиеФормы(КонтекстВзаимодействия, ЭтотОбъект);
	
	Если СтатусЗаявки = "notconsidered" Тогда
		ВремяОжиданияСек = 60;
		УстановитьНадписьНаГиперссылкеОбновленияСтатуса();
		ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияСтатусаЭДО", 1, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("ОбработчикОжиданияОбновленияСтатусаЭДО");
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусЗаявки = "obtained" Тогда
		
		Если КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса <> Неопределено
			И КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса.Обработчик <> Неопределено Тогда
			ОбработчикЗавершения = КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса.Обработчик;
		Иначе
			ОбработчикЗавершения = Неопределено;
		КонецЕсли;
		
		Если ОбработчикЗавершения <> Неопределено Тогда
			// Вызов через новый программный интерфейс.
			
			КонтекстВзаимодействия.ОбработчикиЗавершенияБизнесПроцесса.Обработано = Истина;
			
			Если ЭтоДобавлениеСертификата Тогда
				ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
			Иначе
				ВыполнитьОбработкуОповещения(ОбработчикЗавершения, ИдентификаторУчастника);
			КонецЕсли;
			
		Иначе
			
			// Поддержка устаревшего программного интерфейса.
			ИдентификаторФормы = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
				КонтекстВзаимодействия.КСКонтекст,
				"IDParentForm");
			
			Оповестить(
				"ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД",
				ИдентификаторУчастника,
				ИдентификаторФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПрограммноеЗакрытие
		И Не ИнтернетПоддержкаПользователейКлиент.ФормаОткрыта(
			КонтекстВзаимодействия,
			"Обработка.Подключение1СТакском.Форма.ЛичныйКабинетАбонента") Тогда
		ИнтернетПоддержкаПользователейКлиент.ЗавершитьБизнесПроцесс(КонтекстВзаимодействия, ЗавершениеРаботы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьОбновитьНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("ОбработчикОжиданияОбновленияСтатусаЭДО");
	// Обновить статус заявки
	ИнтернетПоддержкаПользователейКлиент.ОбработатьКомандуФормы(
		КонтекстВзаимодействия,
		ЭтотОбъект,
		"getApplicationStatus");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаявкаНажатие(Элемент)
	
	// Открытие заявки на просмотр
	ИнтернетПоддержкаПользователейКлиент.ОбработатьКомандуФормы(
		КонтекстВзаимодействия,
		Неопределено,
		"showEDRequest");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетНажатие(Элемент)
	
	// Переход в личный кабинет
	ИнтернетПоддержкаПользователейКлиент.ОбработатьКомандуФормы(
		КонтекстВзаимодействия,
		Неопределено,
		"showPrivateED");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаявка1Нажатие(Элемент)
	
	// Открытие заявки на просмотр
	ИнтернетПоддержкаПользователейКлиент.ОбработатьКомандуФормы(
		КонтекстВзаимодействия,
		Неопределено,
		"showEDRequest");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИзменитьНажатие(Элемент)
	
	Подключение1СТакскомКлиент.ПоказатьПричинуОтклоненияЗаявкиЭДО(КонтекстВзаимодействия);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВыходНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОбработатьВыходПользователя(КонтекстВзаимодействия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиТехПоддержка(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "TechSupport" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения =
			НСтр("ru = 'Не получается отправить заявку на регистрацию участника обмена ЭД.
				|
				|%1'");
		
		ЛогинПользователя = ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
			КонтекстВзаимодействия.КСКонтекст,
			"login");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Подключение1СТакскомКлиент.ТекстТехническихПараметровЭДО(КонтекстВзаимодействия, СертификатЭП));
		
		ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
			НСтр("ru = 'Интернет-поддержка. Заявка на регистрацию участника обмена ЭД в 1С-Такском.'"),
			ТекстСообщения,
			"taxcom",
			,
			Новый Структура("Логин, Пароль",
				ЛогинПользователя,
				ИнтернетПоддержкаПользователейКлиентСервер.ЗначениеСессионногоПараметра(
					КонтекстВзаимодействия.КСКонтекст,
					"password")));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	Если НЕ ЗначениеЗаполнено(СтатусЗаявки)
		ИЛИ СтатусЗаявки = "none"
		ИЛИ СтатусЗаявки = "rejected" Тогда
		// Новая заявка
		
		ИнтернетПоддержкаПользователейКлиент.ОбработатьКомандуФормы(
			КонтекстВзаимодействия,
			ЭтотОбъект,
			"newApplicationED");
		
	ИначеЕсли СтатусЗаявки = "obtained" Тогда
		
		// При закрытии формы будет выполнено оповещение о получении идентификатора,
		// а также будет закрыт бизнес-процесс.
		Закрыть();
		
		// В других случаях кнопка не видна.
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет преобразование строки даты из формата сервиса ИПП
// во внутреннее представление даты в платформе.
//
// Параметры:
// - СтрокаДаты (Строка) - строка даты в формате "YYYY-MM-DD hh:mm:ss".
//
// Возвращаемое значение: Дата - дата, преобразованная в формат даты платформы
&НаСервере
Функция ПолучитьДатуИзСтрокиДатыССервера(СтрокаДаты)
	
	Если ПустаяСтрока(СтрокаДаты) Тогда
		ПеремДата = Дата(1,1,1);
	Иначе
		Попытка
			ПеремДата = Дата(СтрЗаменить
								(СтрЗаменить
									(СтрЗаменить
										(СтрЗаменить
											(СтрокаДаты,
											".",
											""),
										"-",
										""),
									" ",
									""),
								":",
								""));
		Исключение
			ПеремДата = Дата(1,1,1);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПеремДата;
	
КонецФункции

// Процедура для установки внешнего вида формы
// в зависимости от статуса заявки.
&НаСервере
Процедура УстановитьСтатусФормы()
	
	Если НЕ ЗначениеЗаполнено(СтатусЗаявки)
		ИЛИ СтатусЗаявки = "none" Тогда
		// Новая заявка
		
		Элементы.СтраницаНеЗарегистрировано.Видимость = Истина;
		Элементы.СтраницаНеРассмотрено.Видимость      = Ложь;
		Элементы.СтраницаРассмотрено.Видимость        = Ложь;
		Элементы.СтраницаОтказано.Видимость           = Ложь;
		
		Элементы.ПанельИнформацииОРегистрации.ТекущаяСтраница = Элементы.СтраницаНеЗарегистрировано;
		Элементы.ВыполнитьДействие.Заголовок = НСтр("ru = 'Создать заявку'");
		Элементы.ВыполнитьДействие.Видимость  = Истина;
		
	ИначеЕсли СтатусЗаявки = "notconsidered" Тогда
		// Ожидается
		
		Элементы.СтраницаНеЗарегистрировано.Видимость = Ложь;
		Элементы.СтраницаНеРассмотрено.Видимость      = Истина;
		Элементы.СтраницаРассмотрено.Видимость        = Ложь;
		Элементы.СтраницаОтказано.Видимость           = Ложь;
		
		Элементы.ПанельИнформацииОРегистрации.ТекущаяСтраница = Элементы.СтраницаНеРассмотрено;
		
		Элементы.ВыполнитьДействие.Видимость = Ложь;
		Элементы.Закрыть.КнопкаПоУмолчанию   = Истина;
		Элементы.НадписьЗаявка.Заголовок = НСтр("ru = 'Заявка №'")
			+ " " + ?(ЗначениеЗаполнено(НомерЗаявки), НомерЗаявки, "");
		Если ДатаЗаявки <> Дата(1,1,1) Тогда
			Элементы.НадписьЗаявка.Заголовок = Элементы.НадписьЗаявка.Заголовок
				+ " " + НСтр("ru = 'от'") + " "
				+ Формат(ДатаЗаявки, "ДЛФ=DDT");
		КонецЕсли;
		
		Элементы.ДекорацияЗаголовокРегистрацияСертификата.Видимость = ЭтоДобавлениеСертификата;
		Элементы.ДекорацияЗаголовокПолучениеИдентификатора.Видимость = НЕ Элементы.ДекорацияЗаголовокРегистрацияСертификата.Видимость;
		
	ИначеЕсли СтатусЗаявки = "rejected" Тогда
		// Отклонена
		
		Элементы.СтраницаНеЗарегистрировано.Видимость = Ложь;
		Элементы.СтраницаНеРассмотрено.Видимость      = Ложь;
		Элементы.СтраницаРассмотрено.Видимость        = Ложь;
		Элементы.СтраницаОтказано.Видимость           = Истина;
		
		Элементы.ПанельИнформацииОРегистрации.ТекущаяСтраница = Элементы.СтраницаОтказано;
		Элементы.ВыполнитьДействие.Заголовок = НСтр("ru = 'Создать заявку'");
		Элементы.ВыполнитьДействие.Видимость = Истина;
		Элементы.НадписьЗаявка1.Заголовок = НСтр("ru = 'Заявка №'")
			+ " " + ?(ЗначениеЗаполнено(НомерЗаявки), НомерЗаявки, "");
		Если ДатаЗаявки <> Дата(1,1,1) Тогда
			Элементы.НадписьЗаявка1.Заголовок = Элементы.НадписьЗаявка1.Заголовок
				+ " " + НСтр("ru = 'от'") + " "
				+ Формат(ДатаЗаявки, "ДЛФ=DDT");
		КонецЕсли;
		
		Элементы.ДекорацияОтказРегистрацияСертификата.Видимость = ЭтоДобавлениеСертификата;
		Элементы.ДекорацияОтказПолучениеИдентификатора.Видимость   = НЕ Элементы.ДекорацияОтказРегистрацияСертификата.Видимость;
		
	Иначе
		
		// Получена СтатусЗаявки = "obtained"
		
		Элементы.СтраницаНеЗарегистрировано.Видимость = Ложь;
		Элементы.СтраницаНеРассмотрено.Видимость      = Ложь;
		Элементы.СтраницаРассмотрено.Видимость        = Истина;
		Элементы.СтраницаОтказано.Видимость           = Ложь;
		
		Элементы.ПанельИнформацииОРегистрации.ТекущаяСтраница = Элементы.СтраницаРассмотрено;
		Элементы.ВыполнитьДействие.Заголовок                  = "ОК";
		Элементы.ВыполнитьДействие.Видимость                  = Истина;
		Элементы.НадписьУникальныйИдентификатор.Заголовок     = ?(ЗначениеЗаполнено(ИдентификаторУчастника),
			ИдентификаторУчастника,
			"");
		
		Элементы.ДекорацияСертификатДобавлен.Видимость = ЭтоДобавлениеСертификата;
		Элементы.ДекорацияИдентификаторПолучен.Видимость   = НЕ Элементы.ДекорацияСертификатДобавлен.Видимость;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает надпись на гиперссылке обновления статуса заявки - количество
// секунд до автоматического обновления.
&НаКлиенте
Процедура УстановитьНадписьНаГиперссылкеОбновленияСтатуса()
	
	ТекстЗаголовка = НСтр("ru = 'Проверить выполнение заявки (осталось %1 сек.)'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Строка(ВремяОжиданияСек));
	Элементы.НадписьОбновить.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

// Обрабатывает ожидание обновления статуса заявки
&НаКлиенте
Процедура ОбработчикОжиданияОбновленияСтатусаЭДО()
	
	Если ВремяОжиданияСек < 1 Тогда
		
		ОтключитьОбработчикОжидания("ОбработчикОжиданияОбновленияСтатусаЭДО");
		// Обновить статус заявки
		ИнтернетПоддержкаПользователейКлиент.ОбработатьКомандуФормы(
			КонтекстВзаимодействия,
			ЭтотОбъект,
			"getApplicationStatus");
		
	Иначе
		
		ВремяОжиданияСек = ВремяОжиданияСек - 1;
		УстановитьНадписьНаГиперссылкеОбновленияСтатуса();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
