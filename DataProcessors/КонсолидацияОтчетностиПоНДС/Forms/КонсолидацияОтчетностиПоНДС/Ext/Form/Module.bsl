&НаКлиенте
Перем ПоддерживаетсяРасширениеРаботыСФайлами;

&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаСервере
Перем КэшВалют;

&НаСервере
Перем КэшКонтрагентов;

&НаСервере
Перем ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		ОргПоУмолчанию = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
		Организация = ОргПоУмолчанию;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаетсяРасширенияРаботыСФайлами = Неопределено;
	ТребуетсяПодтверждениеЗакрытияФормы = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы = Истина Тогда
		Если ТребуетсяПодтверждениеЗакрытияФормы Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='Работа в форме не завершена.
				|Закройте окно вручную, до выхода из программы.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяПодтверждениеЗакрытияФормы Тогда
		
		Отказ = Истина;
	
		ТекстВопроса = НСтр("ru = 'Закрыть форму?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Не закрывать'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФайлыВыгрузки

&НаКлиенте
Процедура ДобавитьФайлы(Команда)
	
	ВыбратьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьФайлы(Команда)
	
	ИсключитьФайлыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыгрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "НаименованиеФайла" Тогда
			
			ВыбратьФайлы(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КонсолидироватьИСформироватьДекларациюПоНДС(Команда);
	
	Если ФайлыВыгрузки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не добавлены файлы для консолидации'"));
		Возврат;
	КонецЕсли;
	
	ОшибкаНаСервере     = Новый Структура;
	ТекстВыгрузки       = Неопределено;
	ЗаполнятьВФоне      = Ложь;
	
	Успешно = КонсолидироватьНаСервере(ТекстВыгрузки, ОшибкаНаСервере, Истина, Истина); // Получаем только параметры из файлов
	
	Если Не Успешно Тогда
		ПоказатьОшибку(ОшибкаНаСервере);
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		ПараметрОписания = ?(ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг), "с ", "");
		ПараметрОписания = ПараметрОписания + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг), "ИНН:" + ПараметрыВыгрузки.ИННОрг, "");
		ПараметрОписания = ПараметрОписания + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) И ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг), " и ", "");
		ПараметрОписания = ПараметрОписания + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг), "КПП:" + ПараметрыВыгрузки.КППОрг, "");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не выбрана или не найдена организация %1 для формирования декларации по НДС'"), ПараметрОписания);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыОтчета = Неопределено;
	Если НЕ ПараметрыВыгрузки.Свойство("ПараметрыФормыОтчета", ПараметрыФормыОтчета) ИЛИ ПараметрыФормыОтчета = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Не сформированы параметры для создания декларации по НДС!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "");
		Возврат;
	КонецЕсли;
	
	ФормаДекларации = ПолучитьФормуОтчетаНаКлиенте(ПараметрыФормыОтчета); // Возвращает форму отчета для формирования сохраненного документа
	
	Если ФормаДекларации = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Декларация по НДС не сформирована!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "");
		Возврат;
	КонецЕсли;
	
	КодИФНС = ПараметрыВыгрузки.КодИФНС;
	КПП     = ПараметрыВыгрузки.КППОрг;
	Вариант = ЧислоИзСтроки(ПараметрыВыгрузки.ВидДок);
	НаименованиеТекущегоРаздела = ФормаДекларации.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	ФормаДекларации.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ФормаДекларации, Ложь);
	
	ФормаДекларации.Сохранить(, КодИФНС, КПП, Вариант,, НаименованиеТекущегоРаздела);
	
	СохраненныйДокумент = ФормаДекларации.СтруктураРеквизитовФормы.мСохраненныйДок;
	ФормаДекларации = Неопределено;
	
	Если ЗаполнятьВФоне Тогда
		
		// Заполняем сохраненный документ декларации в фоновом задании
		Результат = КонсолидироватьВФоновомЗадании(ТекстВыгрузки, ОшибкаНаСервере, Истина, Ложь, СохраненныйДокумент);
		
		Если Результат.ЗаданиеВыполнено Тогда
			ОткрытьФормуЗаполненногоОтчета(СохраненныйДокумент);
		Иначе
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Успешно = КонсолидироватьНаСервере(ТекстВыгрузки, ОшибкаНаСервере, Истина, Ложь, СохраненныйДокумент); // Заполняем сохраненный документ декларации
	
	Если Успешно Тогда
		ОткрытьФормуЗаполненногоОтчета(СохраненныйДокумент);
	Иначе
		УдалитьДополнительныеФайлыДекларацииНДС(СохраненныйДокумент);
		ПоказатьОшибку(ОшибкаНаСервере);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсолидироватьИЗагрузитьВЭлектронноеПредставление(Команда);
	
	Если ФайлыВыгрузки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не добавлены файлы для консолидации'"));
		Возврат;
	КонецЕсли;
	
	ОшибкаНаСервере = Новый Структура;
	ТекстВыгрузки = Неопределено;
	
	Успешно = КонсолидироватьНаСервере(ТекстВыгрузки, ОшибкаНаСервере);
	
	Если Успешно Тогда
		ЗагрузитьВЭлектронноеПредставление(ТекстВыгрузки);
	Иначе
		ПоказатьОшибку(ОшибкаНаСервере);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПроверкаКонтрагентов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФайлыВыгрузки.ПроверкаКонтрагентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "Не используется");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлы(ЗаменитьСтроку = Ложь)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ЗаменитьСтроку", ЗаменитьСтроку);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлыПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, Контекст);
	
	Если ПоддерживаетсяРасширениеРаботыСФайлами = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Для множественного выбора файлов выгрузки рекомендуется установить расширение работы с файлами.'");
		ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения, ТекстСообщения, Истина);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПоддерживаетсяРасширениеРаботыСФайлами);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлыПослеПодключенияРасширенияРаботыСФайлами(Подключено, Контекст) Экспорт
	
	ПоддерживаетсяРасширениеРаботыСФайлами = Подключено;
	
	Если ПоддерживаетсяРасширениеРаботыСФайлами <> Истина Тогда
		ОбработкаПродолжения = Новый ОписаниеОповещения(
			"ВыбратьФайлыПриНачалеПомещенияФайла", ЭтотОбъект, Контекст);
		
		НачатьПомещениеФайла(ОбработкаПродолжения, , , , УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Истина;
	Диалог.Заголовок = НСтр("ru = 'Выберите файл(ы) выгрузки декларации по НДС'");
	Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файлы выгрузки (*.%1)|*.%1|Все файлы(*.*)|*.*'"), "xml");
	
	Если Контекст.ЗаменитьСтроку Тогда
		Диалог.ПолноеИмяФайла = Элементы.ФайлыВыгрузки.ТекущиеДанные.НаименованиеФайла;
	КонецЕсли;
	
	НачатьПомещениеФайлов(Новый ОписаниеОповещения(
		"ВыбратьФайлыПослеПомещенияФайлов", ЭтотОбъект, Контекст), , Диалог, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлыПослеПомещенияФайлов(ПомещенныеФайлы, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ПомещенныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомещенныхФайлов = Новый Массив;
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		
		СоставИмени = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВРег(ПомещенныйФайл.Имя));
		ДанныеПомещенныхФайлов.Добавить(Новый Структура("Адрес,ИмяФайла", ПомещенныйФайл.Хранение, СоставИмени.Имя));
		
	КонецЦикла;
	
	Контекст.Вставить("ПомещенныеФайлы", ДанныеПомещенныхФайлов);
	
	ВыбратьФайлыПослеПомещенияФайловЗавершение(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлыПриНачалеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, Контекст) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомещенныхФайлов = Новый Массив;
	СоставИмени = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВРег(ВыбранноеИмяФайла));
	ДанныеПомещенныхФайлов.Добавить(Новый Структура("Адрес,ИмяФайла", Адрес, СоставИмени.Имя));
	Контекст.Вставить("ПомещенныеФайлы", ДанныеПомещенныхФайлов);
	
	ВыбратьФайлыПослеПомещенияФайловЗавершение(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлыПослеПомещенияФайловЗавершение(Контекст)
	
	Контекст.Вставить("ОшибкаНаСервере", Новый Структура);
	
	Успешно = ДобавитьСтрокиНаСервере(Контекст);
	
	Если Успешно Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОшибку(Контекст.ОшибкаНаСервере);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокиНаСервере(Контекст)
	
	ПомещенныеФайлы = Контекст.ПомещенныеФайлы;
	
	Если Контекст.ЗаменитьСтроку Тогда
		
		ТекущиеДанные = ФайлыВыгрузки.НайтиПоИдентификатору(Элементы.ФайлыВыгрузки.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			УдалитьСтрокуТаблицыИФайлы(ЭтаФорма, ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		
		НайденныеСтрокиФайлыВыгрузки = ФайлыВыгрузки.НайтиСтроки(Новый Структура("НаименованиеФайла", ПомещенныйФайл.ИмяФайла));
		Для Каждого СтрокаФайлВыгрузки Из НайденныеСтрокиФайлыВыгрузки Цикл
			УдалитьСтрокуТаблицыИФайлы(ЭтаФорма, СтрокаФайлВыгрузки);
		КонецЦикла;
		
		Если НЕ ЭтоАдресВременногоХранилища(ПомещенныйФайл.Адрес) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайлаНаСервере = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Адрес);
		ДвоичныеДанныеФайла.Записать(ИмяФайлаНаСервере);
		
		ОписаниеОшибки = Неопределено;
		ПараметрыФайлаВыгрузки = СформироватьСтруктуруПараметровФайлаВыгрузки(ИмяФайлаНаСервере, ОписаниеОшибки);
		Если ПараметрыФайлаВыгрузки = Неопределено Тогда
			Контекст.ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении параметров из файла выгрузки ""%1"" произошла ошибка:
			           |%2'"), ПомещенныйФайл.ИмяФайла, ОписаниеОшибки));
			УдалитьВременныйФайл(ИмяФайлаНаСервере);
			Возврат Ложь;
		КонецЕсли;
		
		НомКорр = СокрЛП(ПараметрыФайлаВыгрузки["НомКорр"]);
		
		ИндексРаздела = СокрЛП(ПараметрыФайлаВыгрузки["Индекс"]);
		ПризнСвед = "";
		Если      ИндексРаздела = "0000080" Тогда
			ПризнСвед = СокрЛП(ПараметрыФайлаВыгрузки["ПризнСвед8"]);
		ИначеЕсли ИндексРаздела = "0000081" Тогда
			ПризнСвед = СокрЛП(ПараметрыФайлаВыгрузки["ПризнСвед81"]);
		ИначеЕсли ИндексРаздела = "0000090" Тогда
			ПризнСвед = СокрЛП(ПараметрыФайлаВыгрузки["ПризнСвед9"]);
		ИначеЕсли ИндексРаздела = "0000091" Тогда
			ПризнСвед = СокрЛП(ПараметрыФайлаВыгрузки["ПризнСвед91"]);
		ИначеЕсли ИндексРаздела = "0000100" Тогда
			ПризнСвед = СокрЛП(ПараметрыФайлаВыгрузки["ПризнСвед10"]);
		ИначеЕсли ИндексРаздела = "0000110" Тогда
			ПризнСвед = СокрЛП(ПараметрыФайлаВыгрузки["ПризнСвед11"]);
		ИначеЕсли ИндексРаздела = "0000120" Тогда
			ПризнСвед = СокрЛП(ПараметрыФайлаВыгрузки["ПризнСвед12"]);
		КонецЕсли;
		Если (НомКорр <> "0" И НомКорр <> "") И ПризнСвед = "1" Тогда
			Контекст.ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В файла выгрузки ""%1"" установлен признак актуальности ранее представленных сведений для корректирующего отчета:
			           |%2'"), ПомещенныйФайл.ИмяФайла, "Консолидировать можно разделы 8-12 корректирующих отчетов только с неактуальными ранее представленными сведениями"));
			УдалитьВременныйФайл(ИмяФайлаНаСервере);
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыВыгрузкиИзИДФайла = ПараметрыИзИДФайлаВыгрузки(ПараметрыФайлаВыгрузки["ИдФайл"]);
		Если ПараметрыВыгрузкиИзИДФайла = Неопределено ИЛИ ПустаяСтрока(ПараметрыВыгрузкиИзИДФайла.ИНН) Тогда
			Контекст.ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При получении параметров из идентификатора файла выгрузки ""%1"" произошла ошибка:
			           |%2'"), ПомещенныйФайл.ИмяФайла, "Идентификатор файла не соответствует принятому для декларации по НДС"));
			УдалитьВременныйФайл(ИмяФайлаНаСервере);
			Возврат Ложь;
		КонецЕсли;
		
		Если ФайлыВыгрузки.Количество() > 0 Тогда
			НайденныеСтрокиФайлыВыгрузки = ФайлыВыгрузки.НайтиСтроки(Новый Структура("ИНН", ПараметрыВыгрузкиИзИДФайла.ИНН));
			Если НайденныеСтрокиФайлыВыгрузки.Количество() = 0 Тогда
				Контекст.ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При добавлении файла выгрузки ""%1"" произошла ошибка:
				           |%2'"), ПомещенныйФайл.ИмяФайла, "Код ИНН в файле не совпадает с кодами ИНН уже добавленных файлов"));
				УдалитьВременныйФайл(ИмяФайлаНаСервере);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ИНН", ПараметрыВыгрузкиИзИДФайла.ИНН);
		ДанныеФайла.Вставить("КПП", ПараметрыВыгрузкиИзИДФайла.КПП);
		ДанныеФайла.Вставить("Вид", ?(НЕ ЗначениеЗаполнено(НомКорр) ИЛИ НомКорр = "0", "П", "К/" + НомКорр));
		ДанныеФайла.Вставить("Период", ПериодПоКодуНП(ПараметрыФайлаВыгрузки["Период"], ПараметрыФайлаВыгрузки["ОтчетГод"]));
		ДанныеФайла.Вставить("Адрес", ПомещенныйФайл.Адрес);
		ДанныеФайла.Вставить("НаименованиеФайла", ПомещенныйФайл.ИмяФайла);
		ДанныеФайла.Вставить("ПолноеИмяФайлаНаСервере", ИмяФайлаНаСервере);
		ДанныеФайла.Вставить("Индекс", СокрЛП(ПараметрыФайлаВыгрузки["Индекс"]));
		
		ДобавитьСтроку(ЭтотОбъект, ДанныеФайла);
		
	КонецЦикла;
	
	ФайлыВыгрузки.Сортировать("ИНН,КПП,Индекс,Вид");
	Для Каждого СтрокаФайлВыгрузки Из ФайлыВыгрузки Цикл
		СтрокаФайлВыгрузки.ПорядковыйНомер = ФайлыВыгрузки.Индекс(СтрокаФайлВыгрузки) + 1;
	КонецЦикла;
	
	ТребуетсяПодтверждениеЗакрытияФормы = (ФайлыВыгрузки.Количество() > 0);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтроку(Форма, ДанныеФайла)
	
	ТекущиеДанные = Форма.ФайлыВыгрузки.Добавить();
	
	ТекущиеДанные.ИНН    = ДанныеФайла.ИНН;
	ТекущиеДанные.КПП    = ДанныеФайла.КПП;
	ТекущиеДанные.Вид    = ДанныеФайла.Вид;
	ТекущиеДанные.Период = ДанныеФайла.Период;
	
	ТекущиеДанные.Адрес                   = ДанныеФайла.Адрес;
	ТекущиеДанные.НаименованиеФайла       = ДанныеФайла.НаименованиеФайла;
	ТекущиеДанные.ПолноеИмяФайлаНаСервере = ДанныеФайла.ПолноеИмяФайлаНаСервере;
	
	ТекущиеДанные.Индекс = ДанныеФайла.Индекс;
	
КонецПроцедуры

&НаСервере
Процедура ИсключитьФайлыНаСервере()
	
	ФайлыВыгрузкиВыделенныеСтроки = Элементы.ФайлыВыгрузки.ВыделенныеСтроки;
	Для Каждого ФайлВыгрузкиИдентификаторСтроки Из ФайлыВыгрузкиВыделенныеСтроки Цикл
		
		ТекущиеДанные = ФайлыВыгрузки.НайтиПоИдентификатору(ФайлВыгрузкиИдентификаторСтроки);
		Если ТекущиеДанные <> Неопределено Тогда
			УдалитьСтрокуТаблицыИФайлы(ЭтаФорма, ТекущиеДанные);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаФайлВыгрузки Из ФайлыВыгрузки Цикл
		СтрокаФайлВыгрузки.ПорядковыйНомер = ФайлыВыгрузки.Индекс(СтрокаФайлВыгрузки) + 1;
	КонецЦикла;
	
	ТребуетсяПодтверждениеЗакрытияФормы = (ФайлыВыгрузки.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлыНаСервере()
	
	Для Каждого СтрокаФайлВыгрузки Из ФайлыВыгрузки Цикл
		УдалитьСтрокуТаблицыИФайлы(ЭтаФорма, СтрокаФайлВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСтрокуТаблицыИФайлы(Форма, ДанныеСтрокиТаблицы)
	
	Если ЭтоАдресВременногоХранилища(ДанныеСтрокиТаблицы.Адрес) Тогда
		УдалитьИзВременногоХранилища(ДанныеСтрокиТаблицы.Адрес);
	КонецЕсли;
	
	УдалитьВременныйФайл(ДанныеСтрокиТаблицы.ПолноеИмяФайлаНаСервере);
	
	Форма.ФайлыВыгрузки.Удалить(ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	ОграничитьсяКоличествомЭлементов = 2;
	
	ПоказателиВыгрузки = Новый Соответствие;
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ОграничитьсяКоличествомЭлементов = ОграничитьсяКоличествомЭлементов - 1;
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
						ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
				Если ОграничитьсяКоличествомЭлементов <= 0 Тогда
					Возврат ПоказателиВыгрузки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ПоказателиВыгрузки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыИзИДФайлаВыгрузки(ИДФайла)
	
	Префикс = "NO_NDS";
	
	Если НЕ ЗначениеЗаполнено(ИДФайла) Тогда
		Возврат Неопределено;
	ИначеЕсли Лев(ИДФайла, СтрДлина(Префикс)) <> Префикс Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаИДФайла = Сред(ИДФайла, СтрДлина(Префикс) + 1);
	
	ПодстрокиИДФайла = РазложитьСтрокуВМассивПодстрок(СтрокаИДФайла, "_");
	
	ДопПрефикс     = ?(ПодстрокиИДФайла.Количество() > 0, ПодстрокиИДФайла[0], "");
	ИФНСПосредника = ?(ПодстрокиИДФайла.Количество() > 1, ПодстрокиИДФайла[1], "");
	ИФНС           = ?(ПодстрокиИДФайла.Количество() > 2, ПодстрокиИДФайла[2], "");
	ИНН_КПП        = ?(ПодстрокиИДФайла.Количество() > 3, ПодстрокиИДФайла[3], "");
	ДатаСоздания   = ?(ПодстрокиИДФайла.Количество() > 4, ПодстрокиИДФайла[4], "");
	Если СтрДлина(ИНН_КПП) > 12 Тогда
		ИНН = Лев(ИНН_КПП, СтрДлина(ИНН_КПП) - 9);
		КПП = Прав(ИНН_КПП, 9);
	Иначе
		ИНН = ИНН_КПП;
		КПП = "";
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Префикс", Префикс + СтрЗаменить(ДопПрефикс, ".", ""));
	СтруктураПараметров.Вставить("ДатаСоздания", Дата(ДатаСоздания));
	СтруктураПараметров.Вставить("ИФНСПосредника", ИФНСПосредника);
	СтруктураПараметров.Вставить("ИФНС", ИФНС);
	СтруктураПараметров.Вставить("ИНН",  ИНН);
	СтруктураПараметров.Вставить("КПП",  КПП);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПериодПоКодуНП(КодНП, СтрГодОтчета)
	
	СоответствиеКодовПериоду = Новый Соответствие;
	СоответствиеКодовПериоду.Вставить("01", "Январь");
	СоответствиеКодовПериоду.Вставить("02", "Февраль");
	СоответствиеКодовПериоду.Вставить("03", "Март");
	СоответствиеКодовПериоду.Вставить("04", "Апрель");
	СоответствиеКодовПериоду.Вставить("05", "Май");
	СоответствиеКодовПериоду.Вставить("06", "Июнь");
	СоответствиеКодовПериоду.Вставить("07", "Июль");
	СоответствиеКодовПериоду.Вставить("08", "Август");
	СоответствиеКодовПериоду.Вставить("09", "Сентябрь");
	СоответствиеКодовПериоду.Вставить("10", "Октябрь");
	СоответствиеКодовПериоду.Вставить("11", "Ноябрь");
	СоответствиеКодовПериоду.Вставить("12", "Декабрь");
	СоответствиеКодовПериоду.Вставить("21", "1 квартал");
	СоответствиеКодовПериоду.Вставить("22", "2 квартал");
	СоответствиеКодовПериоду.Вставить("23", "3 квартал");
	СоответствиеКодовПериоду.Вставить("24", "4 квартал");
	// Коды ниже для случая реорганизации (ликвидации) организации
	СоответствиеКодовПериоду.Вставить("51", "1 квартал"); 
	СоответствиеКодовПериоду.Вставить("54", "2 квартал");
	СоответствиеКодовПериоду.Вставить("55", "3 квартал");
	СоответствиеКодовПериоду.Вставить("56", "4 квартал");
	СоответствиеКодовПериоду.Вставить("71", "Январь");
	СоответствиеКодовПериоду.Вставить("72", "Февраль");
	СоответствиеКодовПериоду.Вставить("73", "Март");
	СоответствиеКодовПериоду.Вставить("74", "Апрель");
	СоответствиеКодовПериоду.Вставить("75", "Май");
	СоответствиеКодовПериоду.Вставить("76", "Июнь");
	СоответствиеКодовПериоду.Вставить("77", "Июль");
	СоответствиеКодовПериоду.Вставить("78", "Август");
	СоответствиеКодовПериоду.Вставить("79", "Сентябрь");
	СоответствиеКодовПериоду.Вставить("80", "Октябрь");
	СоответствиеКодовПериоду.Вставить("81", "Ноябрь");
	СоответствиеКодовПериоду.Вставить("82", "Декабрь");
	
	СтрПериод = СокрЛП(СоответствиеКодовПериоду[Прав("00" + СокрЛП(КодНП), 2)]);
	
	Возврат СтрПериод + ?(ЗначениеЗаполнено(СтрГодОтчета), " " + СокрЛП(СтрГодОтчета) + " г.", "");
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьОрганизациюПоИННиКПП(ИНН, КПП)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации");
	
	Если НЕ ЗначениеЗаполнено(КПП) Тогда
		Запрос.Текст = Запрос.Текст + "	ГДЕ ";
	Иначе
		Запрос.Текст = Запрос.Текст + "
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
							|		ПО Организации.Ссылка = РегистрацииВНалоговомОргане.Владелец
							|	ГДЕ РегистрацииВНалоговомОргане.КПП = &КПП
							|		И ";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " Организации.ИНН = &ИНН И Организации.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибку(ОшибкаНаСервере, ИмяРеквизитаФормы = "")
	
	Если ОшибкаНаСервере.Свойство("ОписаниеОшибки") Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОшибкаНаСервере.ОписаниеОшибки, , ИмяРеквизитаФормы);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВалютуПоКоду(КодВалюты)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КодВалюты", СокрЛП(КодВалюты));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Валюты.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПоИНН(ИНН)
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ОтборИНН";
		
		Запрос.УстановитьПараметр("ОтборИНН", СокрЛП(ИНН));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьВременныйФайл(ИмяФайла)
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		// Обработка исключения не требуется, временный файл будет удален при следующем
		// запуске исполняемого файла платформы.
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = "_")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивВСтрокуСРазделителями(ИсходныйМассив, Разделитель = ",")
	
	СтрокаСРазделителями = "";
	Для Каждого ЭлементМассива Из ИсходныйМассив Цикл
		СтрокаСРазделителями = СтрокаСРазделителями + ?(ПустаяСтрока(СтрокаСРазделителями), "", Разделитель) + ЭлементМассива;
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаСРазделителями);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоИзСтроки(Стр)
	
	Если ЗначениеЗаполнено(Стр) Тогда
		
		Попытка
			Зн = Число(СокрЛП(СтрЗаменить(Стр, Символы.НПП, "")));
		Исключение
			Зн = 0;
		КонецПопытки;
		
		Возврат Зн;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаИзСтроки(СтрДата)
	
	Разделители = "-.,/";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если Найти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли Найти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	День  = Макс(1, Число("0" + СокрЛП(МассивПолей[0])));
	Месяц = Макс(1, Число("0" + ?(МассивПолей.ВГраница() < 1, "1", СокрЛП(МассивПолей[1]))));
	Год   = Макс(1, Число("0" + ?(МассивПолей.ВГраница() < 2, "1", СокрЛП(МассивПолей[2]))));
	
	Возврат Дата(Год, Месяц, День);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФорматСтрДата(СтрДата)
	
	Разделители = "-.,/";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если Найти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли Найти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	ДеньПром  = Число("0" + СокрЛП(МассивПолей[0]));
	МесяцПром = Число("0" + ?(МассивПолей.ВГраница() < 1, "0", СокрЛП(МассивПолей[1])));
	ГодПром   = Число("0" + ?(МассивПолей.ВГраница() < 2, "0", СокрЛП(МассивПолей[2])));
	
	Если ДеньПром = 0 И МесяцПром = 0 И ГодПром = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ГодПром < 30 Тогда
		ГодПром = 2000 + ГодПром;
	ИначеЕсли ГодПром < 100 Тогда
		ГодПром = 1900 + ГодПром;
	КонецЕсли;
	
	День  = Макс(1, ДеньПром);
	Месяц = Макс(1, МесяцПром);
	Год   = Макс(1, ГодПром);
	
	Возврат Формат(День, "ЧЦ=2; ЧВН=") + "." + Формат(Месяц, "ЧЦ=2; ЧВН=") + "." + Формат(Год, "ЧЦ=4; ЧВН=; ЧГ=");
	
КонецФункции

&НаСервереБезКонтекста
Функция СкопироватьСтруктуру(СтруктураИсточник)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Заполнение консолидированной декларации по НДС'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Закрыть" Тогда
		ТребуетсяПодтверждениеЗакрытияФормы = Ложь;
		УдалитьФайлыНаСервере();
		Закрыть(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ЭтаФорма.Доступность = Истина;
		ИначеЕсли ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОткрытьФормуЗаполненногоОтчета();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ЭтаФорма.Доступность = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область ЗагрузкаВЭлектронныеПредставления

&НаКлиенте
Процедура ЗагрузитьВЭлектронноеПредставление(ФайлыРазделовДекларации)
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ТекстОшибкиИнициализацииКонтекстаЭДО'"));
		Возврат;
	КонецЕсли;
	
	ФайлыДляИмпорта = ФайлыДляИмпорта(ФайлыРазделовДекларации);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ФайлыДляИмпорта", 									ФайлыДляИмпорта);
	ДополнительныеПараметры.Вставить("ЭтоФайлВыгрузкиУведомленияОКонтролируемыхСделках", 	Ложь);
	ДополнительныеПараметры.Вставить("ВыполнитьРазделениеФайла", 							Ложь);
	ДополнительныеПараметры.Вставить("ВыполнятьПроверкуКомплектаУведомлений", 				Ложь);
	
	КонтекстЭДОКлиент.ПолучениеФайловДляИмпортаЗавершение(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Функция ФайлыДляИмпорта(ФайлыРазделовДекларации)
	
	ФайлыДляИмпорта = Новый Массив;
	Для Каждого ФайлРазделаДекларации Из ФайлыРазделовДекларации Цикл
		
		ИмяФайла 		= ФайлРазделаДекларации.ИмяФайлаВыгрузки;
		СвойстваФайла 	= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
		
		ФайлДляИмпорта = Новый Структура();
		ФайлДляИмпорта.Вставить("Имя", 			ИмяФайла);
		ФайлДляИмпорта.Вставить("АдресДанных", 	ФайлРазделаДекларации.АдресФайлаВыгрузки);
		ФайлДляИмпорта.Вставить("ПолноеИмя",  	"");
		ФайлДляИмпорта.Вставить("Расширение", 	СвойстваФайла.Расширение);
		
		ФайлыДляИмпорта.Добавить(ФайлДляИмпорта);
		
	КонецЦикла; 

	Возврат ФайлыДляИмпорта;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииКонсолидации

&НаСервере
Функция КонсолидироватьНаСервере(ТекстВыгрузки, ОшибкаНаСервере, ЗаполнитьДекларацию = Ложь, ЗаполнитьТолькоПараметры = Ложь, СохраненныйДок = Неопределено) Экспорт
	
	ПараметрыВыгрузки.Очистить();
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы", "NO_NDS_1_003_00_05_04_05.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_NDS");
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДС");
	
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел8",       "0");
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел8_Прил1", "0");
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел9",       "0");
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел9_Прил1", "0");
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел10",      "0");
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел11",      "0");
	ПараметрыВыгрузки.Вставить("АктуальностьСведенийРаздел12",      "0");
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ЗаполнитьДекларацию", ЗаполнитьДекларацию);
	СтруктураПараметров.Вставить("СохраненныйДок", СохраненныйДок);
	
	НайденДокументГО = Ложь;
	
	Для Каждого ДанныеФайлаВыгрузки Из ФайлыВыгрузки Цикл
		
		СтруктураПараметров.Вставить("ЭтоПервыйДокумент1_7", Ложь);
		
		ОписаниеОшибки = Неопределено;
		
		Если НЕ ЗначениеЗаполнено(ДанныеФайлаВыгрузки.Индекс) ИЛИ ДанныеФайлаВыгрузки.Индекс = "0000000" Тогда
			
			КодППУ = Сред(ДанныеФайлаВыгрузки.КПП, 5, 2);
			ЭтоКодГО = (КодППУ = "01" ИЛИ КодППУ = "50" ИЛИ КодППУ = "51");
			Если НЕ НайденДокументГО И (ЭтоКодГО ИЛИ НЕ ПараметрыВыгрузки.Свойство("ИдФайл")) Тогда
				Если ЭтоКодГО Тогда
					НайденДокументГО = Истина;
				КонецЕсли;
				СтруктураПараметров.ЭтоПервыйДокумент1_7 = Истина;
				Если НЕ СформироватьПараметрыВыгрузки(ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
					ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При формировании параметров выгрузки из файла ""%1"" произошла ошибка:
						           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗаполнитьДанныеРазделов1_7(СтруктураПараметров, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении данных разделов 1-7 из файла выгрузки ""%1"" произошла ошибка:
					           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			// Сохраним имя последнего обработанного файла соответствующего раздела
			СтруктураПараметров.Вставить("ИД" + ДанныеФайлаВыгрузки.Индекс, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ ПараметрыВыгрузки.Свойство("ИдФайл") Тогда
		ОшибкаНаСервере.Вставить("ОписаниеОшибки", НСтр("ru = 'Не сформированы параметры для консолидации. Нет файлов выгрузки разделов 1-7.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ОрганизацияОтчета       = Неопределено;
	ПараметрыВыгрузки.Свойство("ОрганизацияОтчета", ОрганизацияОтчета);
	ДатаНачалаПериодаОтчета = Неопределено;
	ПараметрыВыгрузки.Свойство("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ДатаКонцаПериодаОтчета  = Неопределено;
	ПараметрыВыгрузки.Свойство("ДатаКонцаПериодаОтчета",  ДатаКонцаПериодаОтчета);
	ПериодичностьОтчета     = Неопределено;
	ПараметрыВыгрузки.Свойство("ПериодичностьОтчета", ПериодичностьОтчета);
	
	ПараметрыФормыОтчета = ПараметрыФормыОтчетаНаСервере("РегламентированныйОтчетНДС", ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ПериодичностьОтчета);
	ПараметрыВыгрузки.Вставить("ПараметрыФормыОтчета", ПараметрыФормыОтчета);
	
	Если ЗаполнитьДекларацию И (Организация.Пустая() И ОрганизацияОтчета <> Неопределено) Тогда
		Организация = ОрганизацияОтчета;
	КонецЕсли;
	
	Если ЗаполнитьТолькоПараметры Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗаполнитьДекларацию Тогда
		КэшВалют =        Новый ТаблицаЗначений;
		КэшВалют.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(3));
		КэшВалют.Колонки.Добавить("Название", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		КэшВалют.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		КэшВалют.Индексы.Добавить("Код");
		
		КэшКонтрагентов = Новый ТаблицаЗначений;
		КэшКонтрагентов.Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
		КэшКонтрагентов.Колонки.Добавить("Название", ОбщегоНазначения.ОписаниеТипаСтрока(250));
		КэшКонтрагентов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		КэшКонтрагентов.Индексы.Добавить("ИНН");
		
		ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС = ?(Константы.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС.Получить() <> 0, 
			Константы.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС.Получить(), 10000);
	КонецЕсли;
	
	ИнициализироватьТаблицыРазделов8_81(СтруктураПараметров);
	ИнициализироватьТаблицыРазделов9_91(СтруктураПараметров);
	ИнициализироватьТаблицыРазделов10_12(СтруктураПараметров);
	
	Для Каждого ДанныеФайлаВыгрузки Из ФайлыВыгрузки Цикл
		
		ОписаниеОшибки = Неопределено;
		
		Если ДанныеФайлаВыгрузки.Индекс = "0000080" Тогда
			
			Если НЕ ЗаполнитьТаблицуРаздела8(СтруктураПараметров, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении данных раздела 8 из файла выгрузки ""%1"" произошла ошибка:
					           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ДанныеФайлаВыгрузки.Индекс = "0000081" Тогда
			
			Если НЕ ЗаполнитьТаблицуРаздела8_1(СтруктураПараметров, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении данных приложения 1 к разделу 8 из файла выгрузки ""%1"" произошла ошибка:
					           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ДанныеФайлаВыгрузки.Индекс = "0000090" Тогда
			
			Если НЕ ЗаполнитьТаблицуРаздела9(СтруктураПараметров, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении данных раздела 9 из файла выгрузки ""%1"" произошла ошибка:
					           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ДанныеФайлаВыгрузки.Индекс = "0000091" Тогда
			
			Если НЕ ЗаполнитьТаблицуРаздела9_1(СтруктураПараметров, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении данных приложения 1 к разделу 9 из файла выгрузки ""%1"" произошла ошибка:
					           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ДанныеФайлаВыгрузки.Индекс = "0000100" Тогда
			
			Если НЕ ЗаполнитьТаблицуРаздела10(СтруктураПараметров, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении данных раздела 10 из файла выгрузки ""%1"" произошла ошибка:
					           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ДанныеФайлаВыгрузки.Индекс = "0000110" Тогда
			
			Если НЕ ЗаполнитьТаблицуРаздела11(СтруктураПараметров, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении данных раздела 11 из файла выгрузки ""%1"" произошла ошибка:
					           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ДанныеФайлаВыгрузки.Индекс = "0000120" Тогда
			
			Если НЕ ЗаполнитьТаблицуРаздела12(СтруктураПараметров, ДанныеФайлаВыгрузки.ПолноеИмяФайлаНаСервере, ОписаниеОшибки) Тогда
				ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При заполнении данных раздела 12 из файла выгрузки ""%1"" произошла ошибка:
					           |%2'"), ДанныеФайлаВыгрузки.НаименованиеФайла, ОписаниеОшибки));
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	КорректироватьИтоги81_91(СтруктураПараметров);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, СтруктураПараметров);
	
	Если ЗаполнитьДекларацию Тогда
		
		Если СохраненныйДок = Неопределено Тогда
			ОшибкаНаСервере.Вставить("ОписаниеОшибки", НСтр("ru = 'Не сформирован документ для заполнения консолидированными данными.'"));
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьПоследнийСегментДанныхРаздела8( СтруктураПараметров);
		ЗаписатьПоследнийСегментДанныхРаздела81(СтруктураПараметров);
		ЗаписатьПоследнийСегментДанныхРаздела9( СтруктураПараметров);
		ЗаписатьПоследнийСегментДанныхРаздела91(СтруктураПараметров);
		ЗаписатьПоследнийСегментДанныхРаздела10(СтруктураПараметров);
		ЗаписатьПоследнийСегментДанныхРаздела11(СтруктураПараметров);
		ЗаписатьПоследнийСегментДанныхРаздела12(СтруктураПараметров);
		
		ОписаниеОшибки = Неопределено;
		
		Если НЕ ЗаполнитьДаннымиСохраненныйДокумент(СохраненныйДок, ДеревоВыгрузки, СтруктураПараметров, ОписаниеОшибки) Тогда
			ОшибкаНаСервере.Вставить("ОписаниеОшибки", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При заполнении сохраненного отчета ""%1"" произошла ошибка:
				           |%2'"), РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СохраненныйДок), ОписаниеОшибки));
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	
	КонецЕсли;
	
	ТекстВыгрузки = Новый Массив;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел8(СтруктураПараметров);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел8_Прил1(СтруктураПараметров);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел9(СтруктураПараметров);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел9_Прил1(СтруктураПараметров);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел10(СтруктураПараметров);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел11(СтруктураПараметров);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ВыгрузкаРаздела = ВыгрузкаРаздел12(СтруктураПараметров);
	Если ВыгрузкаРаздела <> Неопределено Тогда
		ТекстВыгрузки.Добавить(ВыгрузкаРаздела);
	КонецЕсли;
	
	ЗаполнитьСведенияОРазделах8_12(ДеревоВыгрузки);
	
	ТекстВыгрузкиРазделов1_7 = ВыгрузитьДеревоВXML(ДеревоВыгрузки);
	
	ТекстВыгрузки.Добавить(РезультатВыгрузкиВоВременномХранилище(ТекстВыгрузкиРазделов1_7, ПараметрыВыгрузки.ИдФайл + ".xml", "НДС2015Разделы1_7"));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция КонсолидироватьВФоновомЗадании(ТекстВыгрузки, ОшибкаНаСервере, ЗаполнитьДекларацию = Ложь, ЗаполнитьТолькоПараметры = Ложь, СохраненныйДок = Неопределено)

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Форма", ЭтаФорма);
	ПараметрыЗадания.Вставить("ТекстВыгрузки", ТекстВыгрузки);
	ПараметрыЗадания.Вставить("ОшибкаНаСервере", ОшибкаНаСервере);
	ПараметрыЗадания.Вставить("ЗаполнитьДекларацию", ЗаполнитьДекларацию);
	ПараметрыЗадания.Вставить("ЗаполнитьТолькоПараметры", ЗаполнитьТолькоПараметры);
	ПараметрыЗадания.Вставить("СохраненныйДок", СохраненныйДок);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Обработки.КонсолидацияОтчетностиПоНДС.КонсолидироватьДанныеНаСервере",
		ПараметрыЗадания,
		НСтр("ru = 'Выполняется заполнение отчета консолидированными данными. Пожалуйста, подождите...'"));
		
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция РезультатВыгрузкиВоВременномХранилище(ТекстВыгрузки, ИмяФайлаВыгрузки, ТипФайлаВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки);
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", ТипФайлаВыгрузки);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыВыгрузки(ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	ПараметрыВыгрузки.Вставить("ВерсПрог",     РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",          "1151001");
	ПараметрыВыгрузки.Вставить("ДатаДок",      Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ИдФайл",       "");
	
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", "");
	ПараметрыВыгрузки.Вставить("ПериодОтч",    "");
	ПараметрыВыгрузки.Вставить("КодИФНС",      "");
	ПараметрыВыгрузки.Вставить("ВидДок",      "0");
	ПараметрыВыгрузки.Вставить("ПоМесту",      "");
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",     "");
	ПараметрыВыгрузки.Вставить("ТелОрг",       "");
	ПараметрыВыгрузки.Вставить("НаимОрг",      "");
	ПараметрыВыгрузки.Вставить("ИННОрг",       "");
	ПараметрыВыгрузки.Вставить("КППОрг",       "");
	ПараметрыВыгрузки.Вставить("КодФормРеорг", "");
	ПараметрыВыгрузки.Вставить("ИННОргРеорг",  "");
	ПараметрыВыгрузки.Вставить("КППОргРеорг",  "");
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",    "");
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",       "1");
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", "");
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", "");
	
	ПараметрыВыгрузки.Вставить("ФамилияИП",  "");
	ПараметрыВыгрузки.Вставить("ИмяИП",      "");
	ПараметрыВыгрузки.Вставить("ОтчествоИП", "");
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", Ложь);
	
	ПараметрыВыгрузки.Вставить("ДолжОтв",       "");
	ПараметрыВыгрузки.Вставить("ФамилияОтв",    "");
	ПараметрыВыгрузки.Вставить("ИмяОтв",        "");
	ПараметрыВыгрузки.Вставить("ОтчествоОтв",   "");
	ПараметрыВыгрузки.Вставить("ТелОтв",        "");
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",     "");
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",         "");
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",    "");
	
	ОграничитьсяКоличествомЭлементов = 10;
	
	АтрибутыУзла = Новый Соответствие;
	ПредИмяУзла = "";
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				ОграничитьсяКоличествомЭлементов = ОграничитьсяКоличествомЭлементов - 1;
				Если ОграничитьсяКоличествомЭлементов <= 0 ИЛИ ИмяУзла = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
					Прервать;
				КонецЕсли;
				АтрибутыУзла.Очистить();
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					АтрибутыУзла.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
				Если ИмяУзла = "Файл" Тогда
					ПараметрыВыгрузки.ИдФайл = СокрЛП(АтрибутыУзла["ИдФайл"]);
				ИначеЕсли ИмяУзла = "Документ" Тогда
					ПараметрыВыгрузки.КНД          = СокрЛП(АтрибутыУзла["КНД"]);
					ПараметрыВыгрузки.ГодПериодОтч = СокрЛП(АтрибутыУзла["ОтчетГод"]);
					ПараметрыВыгрузки.ПериодОтч    = СокрЛП(АтрибутыУзла["Период"]);
					ПараметрыВыгрузки.КодИФНС      = СокрЛП(АтрибутыУзла["КодНО"]);
					ПараметрыВыгрузки.ВидДок       = СокрЛП(АтрибутыУзла["НомКорр"]);
					ПараметрыВыгрузки.ПоМесту      = СокрЛП(АтрибутыУзла["ПоМесту"]);
				ИначеЕсли ИмяУзла = "СвНП" Тогда
					ПараметрыВыгрузки.ОКВЭДОрг = СокрЛП(АтрибутыУзла["ОКВЭД"]);
					ПараметрыВыгрузки.ТелОрг   = СокрЛП(АтрибутыУзла["Тлф"]);
				ИначеЕсли ИмяУзла = "СвРеоргЮЛ" Тогда
					ПараметрыВыгрузки.КодФормРеорг = СокрЛП(АтрибутыУзла["ФормРеорг"]);
					ПараметрыВыгрузки.ИННОргРеорг  = СокрЛП(АтрибутыУзла["ИННЮЛ"]);
					ПараметрыВыгрузки.КППОргРеорг  = СокрЛП(АтрибутыУзла["КПП"]);
				ИначеЕсли ИмяУзла = "Подписант" Тогда
					ПараметрыВыгрузки.ТипПодписанта  = СокрЛП(АтрибутыУзла["ПрПодп"]);
				ИначеЕсли ИмяУзла = "СвПред" Тогда
					ПараметрыВыгрузки.НаимОргПредставителя  = СокрЛП(АтрибутыУзла["НаимОрг"]);
					ПараметрыВыгрузки.НаимДокПредставителя  = СокрЛП(АтрибутыУзла["НаимДок"]);
				ИначеЕсли ИмяУзла = "НПЮЛ" Тогда
					ПараметрыВыгрузки.НаимОрг  = СокрЛП(АтрибутыУзла["НаимОрг"]);
					ПараметрыВыгрузки.ИННОрг   = СокрЛП(АтрибутыУзла["ИННЮЛ"]);
					ПараметрыВыгрузки.КППОрг   = СокрЛП(АтрибутыУзла["КПП"]);
				ИначеЕсли ИмяУзла = "НПФЛ" Тогда
					ПараметрыВыгрузки.ИННОрг  = СокрЛП(АтрибутыУзла["ИННФЛ"]);
					ПараметрыВыгрузки.ЭтоПБОЮЛ = Истина;
				ИначеЕсли ИмяУзла = "ФИО" Тогда
					Если ПредИмяУзла = "НПФЛ" Тогда
						ПараметрыВыгрузки.ФамилияИП  = СокрЛП(АтрибутыУзла["Фамилия"]);
						ПараметрыВыгрузки.ИмяИП      = СокрЛП(АтрибутыУзла["Имя"]);
						ПараметрыВыгрузки.ОтчествоИП = СокрЛП(АтрибутыУзла["Отчество"]);
					ИначеЕсли ПредИмяУзла = "Подписант" Тогда
						ПараметрыВыгрузки.ФамилияПодписанта  = СокрЛП(АтрибутыУзла["Фамилия"]);
						ПараметрыВыгрузки.ИмяПодписанта      = СокрЛП(АтрибутыУзла["Имя"]);
						ПараметрыВыгрузки.ОтчествоПодписанта = СокрЛП(АтрибутыУзла["Отчество"]);
					КонецЕсли;
				КонецЕсли;
				ПредИмяУзла = ИмяУзла;
			КонецЕсли;
		КонецЦикла;
		
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	ПараметрыИзИДФайла = ПараметрыИзИДФайлаВыгрузки(ПараметрыВыгрузки.ИДФайл);
	
	Если ПараметрыИзИДФайла <> Неопределено Тогда
		ПараметрыВыгрузки.КодИФНСПосредника = ПараметрыИзИДФайла.ИФНСПосредника;
		Если ЗначениеЗаполнено(ПараметрыИзИДФайла.ИФНС) Тогда
			ПараметрыВыгрузки.КодИФНС = ПараметрыИзИДФайла.ИФНС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыИзИДФайла.ИНН) Тогда
			ПараметрыВыгрузки.ИННОрг = ПараметрыИзИДФайла.ИНН;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыИзИДФайла.КПП) Тогда
			ПараметрыВыгрузки.КППОрг = ПараметрыИзИДФайла.КПП;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки));
	
	СформироватьПараметрыДляДекларацииПоНДС();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СформироватьПараметрыДляДекларацииПоНДС()
	
	ПараметрыВыгрузки.Вставить("ОрганизацияОтчета", Организация);
	ПараметрыВыгрузки.Вставить("ДатаНачалаПериодаОтчета", НачалоМесяца(ДобавитьМесяц(КонецКвартала(ТекущаяДатаСеанса()), -3)));
	ПараметрыВыгрузки.Вставить("ДатаКонцаПериодаОтчета", КонецМесяца(ДобавитьМесяц(КонецКвартала(ТекущаяДатаСеанса()), -3)));
	ПараметрыВыгрузки.Вставить("ПериодичностьОтчета", Перечисления.Периодичность.Месяц);
	
	// определение организации
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ = Ложь Тогда
		НаимОрганизации = ?(ПараметрыВыгрузки["НаимОрг"] = Неопределено, "", ПараметрыВыгрузки["НаимОрг"]);
		ИННОрг = ?(ПараметрыВыгрузки["ИННОрг"] = Неопределено, "", ПараметрыВыгрузки["ИННОрг"]);
		КППОрг = ?(ПараметрыВыгрузки["КППОрг"] = Неопределено, "", ПараметрыВыгрузки["КППОрг"]);
	Иначе
		ФамилияИП  = ?(ПараметрыВыгрузки["ФамилияИП"] = Неопределено, "", ПараметрыВыгрузки["ФамилияИП"]);
		ИмяИП      = ?(ПараметрыВыгрузки["ИмяИП"] = Неопределено, "", ПараметрыВыгрузки["ИмяИП"]);
		ОтчествоИП = ?(ПараметрыВыгрузки["ОтчествоИП"] = Неопределено, "", ПараметрыВыгрузки["ОтчествоИП"]);
		НаимОрганизации = СокрЛП(ФамилияИП) + " " + СокрЛП(ИмяИП) + " " + СокрЛП(ОтчествоИП);
		ИННОрг = ?(ПараметрыВыгрузки["ИННОрг"] = Неопределено, "", ПараметрыВыгрузки["ИННОрг"]);
		КППОрг = "";
	КонецЕсли;
	
	Если ИННОрг <> "" ИЛИ КППОрг <> "" Тогда
		ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИННОрг, КППОрг);
		Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() И Организация.Пустая() Тогда
			ПараметрыВыгрузки.Вставить("ОрганизацияОтчета", ОрганизацияВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	ГодОтчета = ЧислоИзСтроки(ПараметрыВыгрузки.ГодПериодОтч);
	ГодОтчета = ?(ГодОтчета = 0, Год(ТекущаяДатаСеанса()), ГодОтчета);
	СтрПериод = ПериодПоКодуНП(ПараметрыВыгрузки.ПериодОтч, "");
	
	ДатаНачалаПериодаОтчета = ПараметрыВыгрузки.ДатаНачалаПериодаОтчета;
	
	Если СтрПериод      = "Январь" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 1, 1);
	ИначеЕсли СтрПериод = "Февраль" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 2, 1);
	ИначеЕсли СтрПериод = "Март" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 3, 1);
	ИначеЕсли СтрПериод = "Апрель" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 4, 1);
	ИначеЕсли СтрПериод = "Май" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 5, 1);
	ИначеЕсли СтрПериод = "Июнь" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 6, 1);
	ИначеЕсли СтрПериод = "Июль" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 7, 1);
	ИначеЕсли СтрПериод = "Август" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 8, 1);
	ИначеЕсли СтрПериод = "Сентябрь" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 9, 1);
	ИначеЕсли СтрПериод = "Октябрь" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 10, 1);
	ИначеЕсли СтрПериод = "Ноябрь" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 11, 1);
	ИначеЕсли СтрПериод = "Декабрь" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 12, 1);
	ИначеЕсли СтрПериод = "1 квартал" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 1, 1);
		ПараметрыВыгрузки.Вставить("ПериодичностьОтчета", Перечисления.Периодичность.Квартал);
	ИначеЕсли СтрПериод = "2 квартал" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 4, 1);
		ПараметрыВыгрузки.Вставить("ПериодичностьОтчета", Перечисления.Периодичность.Квартал);
	ИначеЕсли СтрПериод = "3 квартал" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 7, 1);
		ПараметрыВыгрузки.Вставить("ПериодичностьОтчета", Перечисления.Периодичность.Квартал);
	ИначеЕсли СтрПериод = "4 квартал" Тогда
		ДатаНачалаПериодаОтчета = Дата(ГодОтчета, 10, 1);
		ПараметрыВыгрузки.Вставить("ПериодичностьОтчета", Перечисления.Периодичность.Квартал);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПериодичностьОтчета = Перечисления.Периодичность.Квартал Тогда
		ПараметрыВыгрузки.Вставить("ДатаНачалаПериодаОтчета", НачалоКвартала(ДатаНачалаПериодаОтчета));
		ПараметрыВыгрузки.Вставить("ДатаКонцаПериодаОтчета", КонецКвартала(ДатаНачалаПериодаОтчета));
	Иначе
		ПараметрыВыгрузки.Вставить("ДатаНачалаПериодаОтчета", НачалоМесяца(ДатаНачалаПериодаОтчета));
		ПараметрыВыгрузки.Вставить("ДатаКонцаПериодаОтчета", КонецМесяца(ДатаНачалаПериодаОтчета));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицыРазделов8_81(СтруктураПараметров)

	Раздел8 = Новый ТаблицаЗначений;
	
	Раздел8.Колонки.Добавить("НомерПор", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
	
	Раздел8.Колонки.Добавить("НомСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел8.Колонки.Добавить("ДатаСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел8.Колонки.Добавить("НомИспрСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	Раздел8.Колонки.Добавить("ДатаИспрСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел8.Колонки.Добавить("НомКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел8.Колонки.Добавить("ДатаКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел8.Колонки.Добавить("НомИспрКСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	Раздел8.Колонки.Добавить("ДатаИспрКСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел8.Колонки.Добавить("НомТД", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел8.Колонки.Добавить("ОКВ", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	
	Раздел8.Колонки.Добавить("СтоимПокупВ", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел8.Колонки.Добавить("СумНДСВыч", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	Раздел8.Колонки.Добавить("КодВидОпер", Новый ОписаниеТипов("Массив"));
	
	Раздел8.Колонки.Добавить("ДокПдтвУпл", Новый ОписаниеТипов("Массив"));
	Раздел8.Колонки.Добавить("ДатаУчТов", Новый ОписаниеТипов("Массив"));
	
	Раздел8.Колонки.Добавить("СвПрод", Новый ОписаниеТипов("Массив"));
	Раздел8.Колонки.Добавить("СвПос"); // Тип не задается
	
	Раздел81 = Раздел8.СкопироватьКолонки();
	Раздел81.Колонки.СумНДСВыч.Имя = "СумНДС";
	
	СтруктураПараметров.Вставить("ТаблицаРаздел8", Раздел8);
	СтруктураПараметров.Вставить("ТаблицаРаздел81", Раздел81);
	
	ИтогиРаздел8 = Новый Структура("СумНДСВсКПк", 0);
	ИтогиРаздел81 = Новый Структура("СумНДСИтКПк,СумНДСИтП1Р8", 0, 0);
	
	СтруктураПараметров.Вставить("ИтогиРаздел8", ИтогиРаздел8);
	СтруктураПараметров.Вставить("ИтогиРаздел81", ИтогиРаздел81);
	
	СтруктураПараметров.Вставить("ПараметрыРаздел8", Новый Структура("НомерПП, СчетчикСтрокТекущегоСегмента, ПоследняяСтрока", 0, 0, Ложь));
	СтруктураПараметров.Вставить("ПараметрыРаздел81", Новый Структура("НомерПП, СчетчикСтрокТекущегоСегмента, ПоследняяСтрока", 0, 0, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицыРазделов9_91(СтруктураПараметров)

	Раздел9 = Новый ТаблицаЗначений;
	
	Раздел9.Колонки.Добавить("НомерПор", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
	
	Раздел9.Колонки.Добавить("НомСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел9.Колонки.Добавить("ДатаСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
		
	Раздел9.Колонки.Добавить("НомИспрСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	Раздел9.Колонки.Добавить("ДатаИспрСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел9.Колонки.Добавить("НомКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел9.Колонки.Добавить("ДатаКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел9.Колонки.Добавить("НомИспрКСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	Раздел9.Колонки.Добавить("ДатаИспрКСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел9.Колонки.Добавить("ОКВ", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	
	Раздел9.Колонки.Добавить("СтоимПродСФВ", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел9.Колонки.Добавить("СтоимПродСФ", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	Раздел9.Колонки.Добавить("СтоимПродСФ18", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел9.Колонки.Добавить("СтоимПродСФ10", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел9.Колонки.Добавить("СтоимПродСФ0", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел9.Колонки.Добавить("СумНДССФ18", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел9.Колонки.Добавить("СумНДССФ10", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел9.Колонки.Добавить("СтоимПродОсв", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	Раздел9.Колонки.Добавить("КодВидОпер", Новый ОписаниеТипов("Массив"));
	Раздел9.Колонки.Добавить("ДокПдтвОпл", Новый ОписаниеТипов("Массив"));
	
	
	Раздел9.Колонки.Добавить("СвПокуп", Новый ОписаниеТипов("Массив"));
	Раздел9.Колонки.Добавить("СвПос"); // Тип не задается
	
	Раздел91 = Раздел9.СкопироватьКолонки();
	
	СтруктураПараметров.Вставить("ТаблицаРаздел9", Раздел9);
	СтруктураПараметров.Вставить("ТаблицаРаздел91", Раздел91);
	
	ИтогиРаздел9 = Новый Структура;
	ИтогиРаздел9.Вставить("СтПродБезНДС18",  0);
	ИтогиРаздел9.Вставить("СтПродБезНДС10",  0);
	ИтогиРаздел9.Вставить("СтПродБезНДС0",   0);
	ИтогиРаздел9.Вставить("СумНДСВсКПр18",   0);
	ИтогиРаздел9.Вставить("СумНДСВсКПр10",   0);
	ИтогиРаздел9.Вставить("СтПродОсвВсКПр",  0);
	
	ИтогиРаздел91 = Новый Структура;
	ИтогиРаздел91.Вставить("ИтСтПродКПр18",   0);
	ИтогиРаздел91.Вставить("ИтСтПродКПр10",   0);
	ИтогиРаздел91.Вставить("ИтСтПродКПр0",    0);
	ИтогиРаздел91.Вставить("СумНДСИтКПр18",   0);
	ИтогиРаздел91.Вставить("СумНДСИтКПр10",   0);
	ИтогиРаздел91.Вставить("ИтСтПродОсвКПр",  0);
	ИтогиРаздел91.Вставить("СтПродВсП1Р9_18", 0);
	ИтогиРаздел91.Вставить("СтПродВсП1Р9_10", 0);
	ИтогиРаздел91.Вставить("СтПродВсП1Р9_0",  0);
	ИтогиРаздел91.Вставить("СумНДСВсП1Р9_18", 0);
	ИтогиРаздел91.Вставить("СумНДСВсП1Р9_10", 0);
	ИтогиРаздел91.Вставить("СтПродОсвП1Р9Вс", 0);
	
	СтруктураПараметров.Вставить("ИтогиРаздел9", ИтогиРаздел9);
	СтруктураПараметров.Вставить("ИтогиРаздел91", ИтогиРаздел91);
	
	СтруктураПараметров.Вставить("ПараметрыРаздел9", Новый Структура("НомерПП, СчетчикСтрокТекущегоСегмента, ПоследняяСтрока", 0, 0, Ложь));
	СтруктураПараметров.Вставить("ПараметрыРаздел91", Новый Структура("НомерПП, СчетчикСтрокТекущегоСегмента, ПоследняяСтрока", 0, 0, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицыРазделов10_12(СтруктураПараметров)
	
	Раздел10 = Новый ТаблицаЗначений; // Часть 1: выставленные счета-фактуры
	
	Раздел10.Колонки.Добавить("НомерПор", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
	Раздел10.Колонки.Добавить("ДатаВыст", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел10.Колонки.Добавить("НомСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел10.Колонки.Добавить("ДатаСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел10.Колонки.Добавить("НомИспрСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	Раздел10.Колонки.Добавить("ДатаИспрСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел10.Колонки.Добавить("НомКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел10.Колонки.Добавить("ДатаКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел10.Колонки.Добавить("НомИспрКСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	Раздел10.Колонки.Добавить("ДатаИспрКСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел10.Колонки.Добавить("КодВидОпер", Новый ОписаниеТипов("Массив"));
	
	Раздел10.Колонки.Добавить("СвПокуп");
	
	Раздел10.Колонки.Добавить("СвПосрДеят", Новый ОписаниеТипов("Массив")); 
	
	СтруктураПараметров.Вставить("ТаблицаРаздел10", Раздел10);
	СтруктураПараметров.Вставить("ПараметрыРаздел10", Новый Структура("НомерПП, СчетчикСтрокТекущегоСегмента, ПоследняяСтрока", 0, 0, Ложь));

	Раздел11 = Новый ТаблицаЗначений; // Часть 2: полученные счета-фактуры
	
	Раздел11.Колонки.Добавить("НомерПор", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
	Раздел11.Колонки.Добавить("ДатаПолуч", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел11.Колонки.Добавить("НомСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел11.Колонки.Добавить("ДатаСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел11.Колонки.Добавить("НомИспрСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	Раздел11.Колонки.Добавить("ДатаИспрСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел11.Колонки.Добавить("НомКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел11.Колонки.Добавить("ДатаКСчФПрод", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел11.Колонки.Добавить("НомИспрКСчФ", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0));
	Раздел11.Колонки.Добавить("ДатаИспрКСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Раздел11.Колонки.Добавить("КодВидСд", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	Раздел11.Колонки.Добавить("ОКВ", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	
	Раздел11.Колонки.Добавить("СтоимТовСчФВс", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел11.Колонки.Добавить("СумНДССчФ", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	Раздел11.Колонки.Добавить("РазСтКСчФУм", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел11.Колонки.Добавить("РазСтКСчФУв", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел11.Колонки.Добавить("РазНДСКСчФУм", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел11.Колонки.Добавить("РазНДСКСчФУв", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	Раздел11.Колонки.Добавить("КодВидОпер", Новый ОписаниеТипов("Массив"));
	Раздел11.Колонки.Добавить("СвПрод");
	Раздел11.Колонки.Добавить("СвКомис");
	
	СтруктураПараметров.Вставить("ТаблицаРаздел11", Раздел11);
	СтруктураПараметров.Вставить("ПараметрыРаздел11", Новый Структура("НомерПП, СчетчикСтрокТекущегоСегмента, ПоследняяСтрока", 0, 0, Ложь));

	Раздел12 = Новый ТаблицаЗначений;
	
	Раздел12.Колонки.Добавить("НомерПор", ОбщегоНазначения.ОписаниеТипаЧисло(12, 0));
	Раздел12.Колонки.Добавить("НомСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Раздел12.Колонки.Добавить("ДатаСчФ", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Раздел12.Колонки.Добавить("СвПокуп");
	Раздел12.Колонки.Добавить("ОКВ", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	Раздел12.Колонки.Добавить("СтоимТовБНалВс", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел12.Колонки.Добавить("СумНалПокуп", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Раздел12.Колонки.Добавить("СтоимТовСНалВс", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	СтруктураПараметров.Вставить("ТаблицаРаздел12", Раздел12);
	СтруктураПараметров.Вставить("ПараметрыРаздел12", Новый Структура("НомерПП, СчетчикСтрокТекущегоСегмента, ПоследняяСтрока", 0, 0, Ложь));
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеРазделов1_7(СтруктураПараметров, ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	Перем ДокументDOM;
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM  = ПостроительDOM.Прочитать(ОбъектЧтениеXML);
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка чтения XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	Если НЕ СтруктураПараметров.Свойство("ДокументРазделов1_7") Тогда
		СтруктураПараметров.Вставить("ДокументРазделов1_7", Новый Массив);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ЭтоПервыйДокумент1_7") И СтруктураПараметров["ЭтоПервыйДокумент1_7"] = Истина Тогда
		СтруктураПараметров.ДокументРазделов1_7.Вставить(0, ДокументDOM);
		СтруктураПараметров.ЭтоПервыйДокумент1_7 = Ложь;
	Иначе
		СтруктураПараметров.ДокументРазделов1_7.Добавить(ДокументDOM);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРаздела8(СтруктураПараметров, ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	АтрибутыУзла = Новый Соответствие;
	ТекущиеДанные = Неопределено;
	ПредИмяУзла = "";
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				АтрибутыУзла.Очистить();
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					АтрибутыУзла.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
				Если ИмяУзла = "КнигаПокуп" Тогда
					СтруктураПараметров.ИтогиРаздел8.СумНДСВсКПк = СтруктураПараметров.ИтогиРаздел8.СумНДСВсКПк + ЧислоИзСтроки(АтрибутыУзла["СумНДСВсКПк"]);
				ИначеЕсли ИмяУзла = "КнПокСтр" Тогда
					Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
						ЗаписатьВСегментДанныхСтрокуРаздела8(ТекущиеДанные, СтруктураПараметров);
					КонецЕсли;
					ТекущиеДанные = СтруктураПараметров.ТаблицаРаздел8.Добавить();
					Для Каждого АтрибутУзла Из АтрибутыУзла Цикл
						Если СтруктураПараметров.ТаблицаРаздел8.Колонки.Найти(АтрибутУзла.Ключ) <> Неопределено Тогда
							ТекущиеДанные[АтрибутУзла.Ключ] = ?(Лев(АтрибутУзла.Ключ, 4) = "Дата", ФорматСтрДата(АтрибутУзла.Значение), АтрибутУзла.Значение);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ИмяУзла = "КодВидОпер" Тогда
					ОбъектЧтениеXML.Прочитать();
					ТекущиеДанные.КодВидОпер.Добавить(ОбъектЧтениеXML.Значение);
				ИначеЕсли ИмяУзла = "ДатаУчТов" Тогда
					ОбъектЧтениеXML.Прочитать();
					ТекущиеДанные.ДатаУчТов.Добавить(ФорматСтрДата(ОбъектЧтениеXML.Значение));
				ИначеЕсли ИмяУзла = "ДокПдтвУпл" Тогда
					АтрУзла = Новый Структура("НомДокПдтвУпл,ДатаДокПдтвУпл", СокрЛП(АтрибутыУзла["НомДокПдтвУпл"]), ФорматСтрДата(СокрЛП(АтрибутыУзла["ДатаДокПдтвУпл"])));
					ТекущиеДанные.ДокПдтвУпл.Добавить(АтрУзла);
				ИначеЕсли ИмяУзла = "СведЮЛ" Тогда
					АтрУзла = Новый Структура("ИННЮЛ,КПП", СокрЛП(АтрибутыУзла["ИННЮЛ"]), СокрЛП(АтрибутыУзла["КПП"]));
					Если ПредИмяУзла = "СвПрод" Тогда
						ТекущиеДанные.СвПрод.Добавить(АтрУзла);
					ИначеЕсли ПредИмяУзла = "СвПос" Тогда
						ТекущиеДанные.СвПос = АтрУзла;
					КонецЕсли;
				ИначеЕсли ИмяУзла = "СведИП" Тогда
					АтрУзла = Новый Структура("ИННФЛ", СокрЛП(АтрибутыУзла["ИННФЛ"]));
					Если ПредИмяУзла = "СвПрод" Тогда
						ТекущиеДанные.СвПрод.Добавить(АтрУзла);
					ИначеЕсли ПредИмяУзла = "СвПос" Тогда
						ТекущиеДанные.СвПос = АтрУзла;
					КонецЕсли;
				КонецЕсли;
				ПредИмяУзла = ИмяУзла;
			КонецЕсли;
		КонецЦикла;
		
		// записать последнюю добавленную строку
		Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
			ИмяПоследнегоФайлаРаздела = Неопределено;
			Если СтруктураПараметров.Свойство("ИД0000080", ИмяПоследнегоФайлаРаздела) И ИмяПоследнегоФайлаРаздела = ФайлВыгрузки Тогда
				СтруктураПараметров.ПараметрыРаздел8.ПоследняяСтрока = Истина;
			КонецЕсли;
			ЗаписатьВСегментДанныхСтрокуРаздела8(ТекущиеДанные, СтруктураПараметров);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРаздела8_1(СтруктураПараметров, ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	АтрибутыУзла = Новый Соответствие;
	ТекущиеДанные = Неопределено;
	ПредИмяУзла = "";
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				АтрибутыУзла.Очистить();
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					АтрибутыУзла.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
				Если ИмяУзла = "КнигаПокупДЛ" Тогда
					СтруктураПараметров.ИтогиРаздел81.СумНДСИтКПк = СтруктураПараметров.ИтогиРаздел81.СумНДСИтКПк + ЧислоИзСтроки(АтрибутыУзла["СумНДСИтКПк"]);
					СтруктураПараметров.ИтогиРаздел81.СумНДСИтП1Р8 = СтруктураПараметров.ИтогиРаздел81.СумНДСИтП1Р8 + ЧислоИзСтроки(АтрибутыУзла["СумНДСИтП1Р8"]);
				ИначеЕсли ИмяУзла = "КнПокДЛСтр" Тогда
					Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
						ЗаписатьВСегментДанныхСтрокуРаздела81(ТекущиеДанные, СтруктураПараметров);
					КонецЕсли;
					ТекущиеДанные = СтруктураПараметров.ТаблицаРаздел81.Добавить();
					Для Каждого АтрибутУзла Из АтрибутыУзла Цикл
						Если СтруктураПараметров.ТаблицаРаздел81.Колонки.Найти(АтрибутУзла.Ключ) <> Неопределено Тогда
							ТекущиеДанные[АтрибутУзла.Ключ] = ?(Лев(АтрибутУзла.Ключ, 4) = "Дата", ФорматСтрДата(АтрибутУзла.Значение), АтрибутУзла.Значение);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ИмяУзла = "КодВидОпер" Тогда
					ОбъектЧтениеXML.Прочитать();
					ТекущиеДанные.КодВидОпер.Добавить(ОбъектЧтениеXML.Значение);
				ИначеЕсли ИмяУзла = "ДатаУчТов" Тогда
					ОбъектЧтениеXML.Прочитать();
					ТекущиеДанные.ДатаУчТов.Добавить(ФорматСтрДата(ОбъектЧтениеXML.Значение));
				ИначеЕсли ИмяУзла = "ДокПдтвУпл" ИЛИ ИмяУзла = "ДокПдтвОпл" Тогда
					АтрУзла = Новый Структура("НомДокПдтвУпл,ДатаДокПдтвУпл", СокрЛП(АтрибутыУзла["НомДокПдтвУпл"]), ФорматСтрДата(СокрЛП(АтрибутыУзла["ДатаДокПдтвУпл"])));
					ТекущиеДанные.ДокПдтвУпл.Добавить(АтрУзла);
				ИначеЕсли ИмяУзла = "СведЮЛ" Тогда
					АтрУзла = Новый Структура("ИННЮЛ,КПП", СокрЛП(АтрибутыУзла["ИННЮЛ"]), СокрЛП(АтрибутыУзла["КПП"]));
					Если ПредИмяУзла = "СвПрод" Тогда
						ТекущиеДанные.СвПрод.Добавить(АтрУзла);
					ИначеЕсли ПредИмяУзла = "СвПос" Тогда
						ТекущиеДанные.СвПос = АтрУзла;
					КонецЕсли;
				ИначеЕсли ИмяУзла = "СведИП" Тогда
					АтрУзла = Новый Структура("ИННФЛ", СокрЛП(АтрибутыУзла["ИННФЛ"]));
					Если ПредИмяУзла = "СвПрод" Тогда
						ТекущиеДанные.СвПрод.Добавить(АтрУзла);
					ИначеЕсли ПредИмяУзла = "СвПос" Тогда
						ТекущиеДанные.СвПос = АтрУзла;
					КонецЕсли;
				КонецЕсли;
				ПредИмяУзла = ИмяУзла;
			КонецЕсли;
		КонецЦикла;
		
		// записать последнюю добавленную строку
		Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
			ИмяПоследнегоФайлаРаздела = Неопределено;
			Если СтруктураПараметров.Свойство("ИД0000081", ИмяПоследнегоФайлаРаздела) И ИмяПоследнегоФайлаРаздела = ФайлВыгрузки Тогда
				СтруктураПараметров.ПараметрыРаздел81.ПоследняяСтрока = Истина;
			КонецЕсли;
			ЗаписатьВСегментДанныхСтрокуРаздела81(ТекущиеДанные, СтруктураПараметров);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРаздела9(СтруктураПараметров, ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	АтрибутыУзла = Новый Соответствие;
	ТекущиеДанные = Неопределено;
	ПредИмяУзла = "";
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				АтрибутыУзла.Очистить();
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					АтрибутыУзла.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
				Если ИмяУзла = "КнигаПрод" Тогда
					СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС18 = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС18 + ЧислоИзСтроки(АтрибутыУзла["СтПродБезНДС18"]);
					СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС10 = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС10 + ЧислоИзСтроки(АтрибутыУзла["СтПродБезНДС10"]);
					СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС0  = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС0  + ЧислоИзСтроки(АтрибутыУзла["СтПродБезНДС0"]);
					СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр18  = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр18  + ЧислоИзСтроки(АтрибутыУзла["СумНДСВсКПр18"]);
					СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр10  = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр10  + ЧислоИзСтроки(АтрибутыУзла["СумНДСВсКПр10"]);
					СтруктураПараметров.ИтогиРаздел9.СтПродОсвВсКПр = СтруктураПараметров.ИтогиРаздел9.СтПродОсвВсКПр + ЧислоИзСтроки(АтрибутыУзла["СтПродОсвВсКПр"]);
				ИначеЕсли ИмяУзла = "КнПродСтр" Тогда
					Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
						ЗаписатьВСегментДанныхСтрокуРаздела9(ТекущиеДанные, СтруктураПараметров);
					КонецЕсли;
					ТекущиеДанные = СтруктураПараметров.ТаблицаРаздел9.Добавить();
					Для Каждого АтрибутУзла Из АтрибутыУзла Цикл
						Если СтруктураПараметров.ТаблицаРаздел9.Колонки.Найти(АтрибутУзла.Ключ) <> Неопределено Тогда
							ТекущиеДанные[АтрибутУзла.Ключ] = ?(Лев(АтрибутУзла.Ключ, 4) = "Дата", ФорматСтрДата(АтрибутУзла.Значение), АтрибутУзла.Значение);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ИмяУзла = "КодВидОпер" Тогда
					ОбъектЧтениеXML.Прочитать();
					ТекущиеДанные.КодВидОпер.Добавить(ОбъектЧтениеXML.Значение);
				ИначеЕсли ИмяУзла = "ДокПдтвОпл" Тогда
					АтрУзла = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл", СокрЛП(АтрибутыУзла["НомДокПдтвОпл"]), ФорматСтрДата(СокрЛП(АтрибутыУзла["ДатаДокПдтвОпл"])));
					ТекущиеДанные.ДокПдтвОпл.Добавить(АтрУзла);
				ИначеЕсли ИмяУзла = "СведЮЛ" Тогда
					АтрУзла = Новый Структура("ИННЮЛ,КПП", СокрЛП(АтрибутыУзла["ИННЮЛ"]), СокрЛП(АтрибутыУзла["КПП"]));
					Если ПредИмяУзла = "СвПокуп" Тогда
						ТекущиеДанные.СвПокуп.Добавить(АтрУзла);
					ИначеЕсли ПредИмяУзла = "СвПос" Тогда
						ТекущиеДанные.СвПос = АтрУзла;
					КонецЕсли;
				ИначеЕсли ИмяУзла = "СведИП" Тогда
					АтрУзла = Новый Структура("ИННФЛ", СокрЛП(АтрибутыУзла["ИННФЛ"]));
					Если ПредИмяУзла = "СвПокуп" Тогда
						ТекущиеДанные.СвПокуп.Добавить(АтрУзла);
					ИначеЕсли ПредИмяУзла = "СвПос" Тогда
						ТекущиеДанные.СвПос = АтрУзла;
					КонецЕсли;
				КонецЕсли;
				ПредИмяУзла = ИмяУзла;
			КонецЕсли;
		КонецЦикла;
		
		// записать последнюю добавленную строку
		Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
			ИмяПоследнегоФайлаРаздела = Неопределено;
			Если СтруктураПараметров.Свойство("ИД0000090", ИмяПоследнегоФайлаРаздела) И ИмяПоследнегоФайлаРаздела = ФайлВыгрузки Тогда
				СтруктураПараметров.ПараметрыРаздел9.ПоследняяСтрока = Истина;
			КонецЕсли;
			ЗаписатьВСегментДанныхСтрокуРаздела9(ТекущиеДанные, СтруктураПараметров);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРаздела9_1(СтруктураПараметров, ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	АтрибутыУзла = Новый Соответствие;
	ТекущиеДанные = Неопределено;
	ПредИмяУзла = "";
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				АтрибутыУзла.Очистить();
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					АтрибутыУзла.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
				Если ИмяУзла = "КнигаПродДЛ" Тогда
					СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр18   = СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр18   + ЧислоИзСтроки(АтрибутыУзла["ИтСтПродКПр18"]);
					СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр10   = СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр10   + ЧислоИзСтроки(АтрибутыУзла["ИтСтПродКПр10"]);
					СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр0    = СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр0    + ЧислоИзСтроки(АтрибутыУзла["ИтСтПродКПр0"]);
					СтруктураПараметров.ИтогиРаздел91.СумНДСИтКПр18   = СтруктураПараметров.ИтогиРаздел91.СумНДСИтКПр18   + ЧислоИзСтроки(АтрибутыУзла["СумНДСИтКПр18"]);
					СтруктураПараметров.ИтогиРаздел91.СумНДСИтКПр10   = СтруктураПараметров.ИтогиРаздел91.СумНДСИтКПр10   + ЧислоИзСтроки(АтрибутыУзла["СумНДСИтКПр10"]);
					СтруктураПараметров.ИтогиРаздел91.ИтСтПродОсвКПр  = СтруктураПараметров.ИтогиРаздел91.ИтСтПродОсвКПр  + ЧислоИзСтроки(АтрибутыУзла["ИтСтПродОсвКПр"]);
					СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_18 = СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_18 + ЧислоИзСтроки(АтрибутыУзла["СтПродВсП1Р9_18"]);
					СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_10 = СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_10 + ЧислоИзСтроки(АтрибутыУзла["СтПродВсП1Р9_10"]);
					СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_0  = СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_0  + ЧислоИзСтроки(АтрибутыУзла["СтПродВсП1Р9_0"]);
					СтруктураПараметров.ИтогиРаздел91.СумНДСВсП1Р9_18 = СтруктураПараметров.ИтогиРаздел91.СумНДСВсП1Р9_18 + ЧислоИзСтроки(АтрибутыУзла["СумНДСВсП1Р9_18"]);
					СтруктураПараметров.ИтогиРаздел91.СумНДСВсП1Р9_10 = СтруктураПараметров.ИтогиРаздел91.СумНДСВсП1Р9_10 + ЧислоИзСтроки(АтрибутыУзла["СумНДСВсП1Р9_10"]);
					СтруктураПараметров.ИтогиРаздел91.СтПродОсвП1Р9Вс = СтруктураПараметров.ИтогиРаздел91.СтПродОсвП1Р9Вс + ЧислоИзСтроки(АтрибутыУзла["СтПродОсвП1Р9Вс"]);
				ИначеЕсли ИмяУзла = "КнПродДЛСтр" Тогда
					Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
						ЗаписатьВСегментДанныхСтрокуРаздела91(ТекущиеДанные, СтруктураПараметров);
					КонецЕсли;
					ТекущиеДанные = СтруктураПараметров.ТаблицаРаздел91.Добавить();
					Для Каждого АтрибутУзла Из АтрибутыУзла Цикл
						Если СтруктураПараметров.ТаблицаРаздел91.Колонки.Найти(АтрибутУзла.Ключ) <> Неопределено Тогда
							ТекущиеДанные[АтрибутУзла.Ключ] = ?(Лев(АтрибутУзла.Ключ, 4) = "Дата", ФорматСтрДата(АтрибутУзла.Значение), АтрибутУзла.Значение);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ИмяУзла = "КодВидОпер" Тогда
					ОбъектЧтениеXML.Прочитать();
					ТекущиеДанные.КодВидОпер.Добавить(ОбъектЧтениеXML.Значение);
				ИначеЕсли ИмяУзла = "ДокПдтвОпл" Тогда
					АтрУзла = Новый Структура("НомДокПдтвОпл,ДатаДокПдтвОпл", СокрЛП(АтрибутыУзла["НомДокПдтвОпл"]), ФорматСтрДата(СокрЛП(АтрибутыУзла["ДатаДокПдтвОпл"])));
					ТекущиеДанные.ДокПдтвОпл.Добавить(АтрУзла);
				ИначеЕсли ИмяУзла = "СведЮЛ" Тогда
					АтрУзла = Новый Структура("ИННЮЛ,КПП", СокрЛП(АтрибутыУзла["ИННЮЛ"]), СокрЛП(АтрибутыУзла["КПП"]));
					Если ПредИмяУзла = "СвПокуп" Тогда
						ТекущиеДанные.СвПокуп.Добавить(АтрУзла);
					ИначеЕсли ПредИмяУзла = "СвПос" Тогда
						ТекущиеДанные.СвПос = АтрУзла;
					КонецЕсли;
				ИначеЕсли ИмяУзла = "СведИП" Тогда
					АтрУзла = Новый Структура("ИННФЛ", СокрЛП(АтрибутыУзла["ИННФЛ"]));
					Если ПредИмяУзла = "СвПокуп" Тогда
						ТекущиеДанные.СвПокуп.Добавить(АтрУзла);
					ИначеЕсли ПредИмяУзла = "СвПос" Тогда
						ТекущиеДанные.СвПос = АтрУзла;
					КонецЕсли;
				КонецЕсли;
				ПредИмяУзла = ИмяУзла;
			КонецЕсли;
		КонецЦикла;
		
		// записать последнюю добавленную строку
		Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
			ИмяПоследнегоФайлаРаздела = Неопределено;
			Если СтруктураПараметров.Свойство("ИД0000091", ИмяПоследнегоФайлаРаздела) И ИмяПоследнегоФайлаРаздела = ФайлВыгрузки Тогда
				СтруктураПараметров.ПараметрыРаздел91.ПоследняяСтрока = Истина;
			КонецЕсли;
			ЗаписатьВСегментДанныхСтрокуРаздела91(ТекущиеДанные, СтруктураПараметров);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРаздела10(СтруктураПараметров, ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	АтрибутыУзла = Новый Соответствие;
	ТекущиеДанные = Неопределено;
	ПредИмяУзла = "";
	АтрУзлаПД = Неопределено;
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				АтрибутыУзла.Очистить();
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					АтрибутыУзла.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
				Если ИмяУзла = "ЖУчВыстСчФСтр" Тогда
					Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
						ЗаписатьВСегментДанныхСтрокуРаздела10(ТекущиеДанные, СтруктураПараметров);
					КонецЕсли;
					ТекущиеДанные = СтруктураПараметров.ТаблицаРаздел10.Добавить();
					Для Каждого АтрибутУзла Из АтрибутыУзла Цикл
						Если СтруктураПараметров.ТаблицаРаздел10.Колонки.Найти(АтрибутУзла.Ключ) <> Неопределено Тогда
							ТекущиеДанные[АтрибутУзла.Ключ] = ?(Лев(АтрибутУзла.Ключ, 4) = "Дата", ФорматСтрДата(АтрибутУзла.Значение), АтрибутУзла.Значение);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ИмяУзла = "КодВидОпер" Тогда
					ОбъектЧтениеXML.Прочитать();
					ТекущиеДанные.КодВидОпер.Добавить(ОбъектЧтениеXML.Значение);
				ИначеЕсли ИмяУзла = "СвПосрДеят" Тогда
					АтрУзлаПД = Новый Структура;
					АтрУзлаПД.Вставить("НомСчФОтПрод", СокрЛП(АтрибутыУзла["НомСчФОтПрод"]));
					АтрУзлаПД.Вставить("ДатаСчФОтПрод", ФорматСтрДата(СокрЛП(АтрибутыУзла["ДатаСчФОтПрод"])));
					АтрУзлаПД.Вставить("ОКВ", СокрЛП(АтрибутыУзла["ОКВ"]));
					АтрУзлаПД.Вставить("СтоимТовСчФВс", ЧислоИзСтроки(АтрибутыУзла["СтоимТовСчФВс"]));
					АтрУзлаПД.Вставить("СумНДССчФ", ЧислоИзСтроки(АтрибутыУзла["СумНДССчФ"]));
					АтрУзлаПД.Вставить("РазСтКСчФУм", ЧислоИзСтроки(АтрибутыУзла["РазСтКСчФУм"]));
					АтрУзлаПД.Вставить("РазСтКСчФУв", ЧислоИзСтроки(АтрибутыУзла["РазСтКСчФУв"]));
					АтрУзлаПД.Вставить("РазНДСКСчФУм", ЧислоИзСтроки(АтрибутыУзла["РазНДСКСчФУм"]));
					АтрУзлаПД.Вставить("РазНДСКСчФУв", ЧислоИзСтроки(АтрибутыУзла["РазНДСКСчФУв"]));
					АтрУзлаПД.Вставить("СвПрод", Неопределено);
					ТекущиеДанные.СвПосрДеят.Добавить(АтрУзлаПД);
				ИначеЕсли ИмяУзла = "СведЮЛ" Тогда
					АтрУзла = Новый Структура("ИННЮЛ,КПП", СокрЛП(АтрибутыУзла["ИННЮЛ"]), СокрЛП(АтрибутыУзла["КПП"]));
					Если ПредИмяУзла = "СвПрод" Тогда
						АтрУзлаПД.СвПрод = АтрУзла;
					ИначеЕсли ПредИмяУзла = "СвПокуп" Тогда
						ТекущиеДанные.СвПокуп = АтрУзла;
					КонецЕсли;
				ИначеЕсли ИмяУзла = "СведИП" Тогда
					АтрУзла = Новый Структура("ИННФЛ", СокрЛП(АтрибутыУзла["ИННФЛ"]));
					Если ПредИмяУзла = "СвПрод" Тогда
						АтрУзлаПД.СвПрод = АтрУзла;
					ИначеЕсли ПредИмяУзла = "СвПокуп" Тогда
						ТекущиеДанные.СвПокуп = АтрУзла;
					КонецЕсли;
				КонецЕсли;
				ПредИмяУзла = ИмяУзла;
			КонецЕсли;
		КонецЦикла;
		
		// записать последнюю добавленную строку
		Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
			ИмяПоследнегоФайлаРаздела = Неопределено;
			Если СтруктураПараметров.Свойство("ИД0000100", ИмяПоследнегоФайлаРаздела) И ИмяПоследнегоФайлаРаздела = ФайлВыгрузки Тогда
				СтруктураПараметров.ПараметрыРаздел10.ПоследняяСтрока = Истина;
			КонецЕсли;
			ЗаписатьВСегментДанныхСтрокуРаздела10(ТекущиеДанные, СтруктураПараметров);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРаздела11(СтруктураПараметров, ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	АтрибутыУзла = Новый Соответствие;
	ТекущиеДанные = Неопределено;
	ПредИмяУзла = "";
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				АтрибутыУзла.Очистить();
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					АтрибутыУзла.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
				Если ИмяУзла = "ЖУчПолучСчФСтр" Тогда
					Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
						ЗаписатьВСегментДанныхСтрокуРаздела11(ТекущиеДанные, СтруктураПараметров);
					КонецЕсли;
					ТекущиеДанные = СтруктураПараметров.ТаблицаРаздел11.Добавить();
					Для Каждого АтрибутУзла Из АтрибутыУзла Цикл
						Если СтруктураПараметров.ТаблицаРаздел11.Колонки.Найти(АтрибутУзла.Ключ) <> Неопределено Тогда
							ТекущиеДанные[АтрибутУзла.Ключ] = ?(Лев(АтрибутУзла.Ключ, 4) = "Дата", ФорматСтрДата(АтрибутУзла.Значение), АтрибутУзла.Значение);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ИмяУзла = "КодВидОпер" Тогда
					ОбъектЧтениеXML.Прочитать();
					ТекущиеДанные.КодВидОпер.Добавить(ОбъектЧтениеXML.Значение);
				ИначеЕсли ИмяУзла = "СведЮЛ" Тогда
					АтрУзла = Новый Структура("ИННЮЛ,КПП", СокрЛП(АтрибутыУзла["ИННЮЛ"]), СокрЛП(АтрибутыУзла["КПП"]));
					Если ПредИмяУзла = "СвПрод" Тогда
						ТекущиеДанные.СвПрод = АтрУзла;
					ИначеЕсли ПредИмяУзла = "СвКомис" Тогда
						ТекущиеДанные.СвКомис = АтрУзла;
					КонецЕсли;
				ИначеЕсли ИмяУзла = "СведИП" Тогда
					АтрУзла = Новый Структура("ИННФЛ", СокрЛП(АтрибутыУзла["ИННФЛ"]));
					Если ПредИмяУзла = "СвПрод" Тогда
						ТекущиеДанные.СвПрод = АтрУзла;
					ИначеЕсли ПредИмяУзла = "СвКомис" Тогда
						ТекущиеДанные.СвКомис = АтрУзла;
					КонецЕсли;
				КонецЕсли;
				ПредИмяУзла = ИмяУзла;
			КонецЕсли;
		КонецЦикла;
		
		// записать последнюю добавленную строку
		Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
			ИмяПоследнегоФайлаРаздела = Неопределено;
			Если СтруктураПараметров.Свойство("ИД0000110", ИмяПоследнегоФайлаРаздела) И ИмяПоследнегоФайлаРаздела = ФайлВыгрузки Тогда
				СтруктураПараметров.ПараметрыРаздел11.ПоследняяСтрока = Истина;
			КонецЕсли;
			ЗаписатьВСегментДанныхСтрокуРаздела11(ТекущиеДанные, СтруктураПараметров);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРаздела12(СтруктураПараметров, ФайлВыгрузки, ОписаниеОшибки = Неопределено)
	
	АтрибутыУзла = Новый Соответствие;
	ТекущиеДанные = Неопределено;
	ПредИмяУзла = "";
	
	ОбъектЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяУзла = ОбъектЧтениеXML.Имя;
				АтрибутыУзла.Очистить();
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					АтрибутыУзла.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
				Если ИмяУзла = "ВыстСчФ_173.5" Тогда
					Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
						ЗаписатьВСегментДанныхСтрокуРаздела12(ТекущиеДанные, СтруктураПараметров);
					КонецЕсли;
					ТекущиеДанные = СтруктураПараметров.ТаблицаРаздел12.Добавить();
					Для Каждого АтрибутУзла Из АтрибутыУзла Цикл
						Если СтруктураПараметров.ТаблицаРаздел12.Колонки.Найти(АтрибутУзла.Ключ) <> Неопределено Тогда
							ТекущиеДанные[АтрибутУзла.Ключ] = ?(Лев(АтрибутУзла.Ключ, 4) = "Дата", ФорматСтрДата(АтрибутУзла.Значение), АтрибутУзла.Значение);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ИмяУзла = "СведЮЛ" Тогда
					АтрУзла = Новый Структура("ИННЮЛ,КПП", СокрЛП(АтрибутыУзла["ИННЮЛ"]), СокрЛП(АтрибутыУзла["КПП"]));
					Если ПредИмяУзла = "СвПокуп" Тогда
						ТекущиеДанные.СвПокуп = АтрУзла;
					КонецЕсли;
				ИначеЕсли ИмяУзла = "СведИП" Тогда
					АтрУзла = Новый Структура("ИННФЛ", СокрЛП(АтрибутыУзла["ИННФЛ"]));
					Если ПредИмяУзла = "СвПокуп" Тогда
						ТекущиеДанные.СвПокуп = АтрУзла;
					КонецЕсли;
				КонецЕсли;
				ПредИмяУзла = ИмяУзла;
			КонецЕсли;
		КонецЦикла;
		
		// записать последнюю добавленную строку
		Если СтруктураПараметров.ЗаполнитьДекларацию = Истина И ТекущиеДанные <> Неопределено Тогда
			ИмяПоследнегоФайлаРаздела = Неопределено;
			Если СтруктураПараметров.Свойство("ИД0000120", ИмяПоследнегоФайлаРаздела) И ИмяПоследнегоФайлаРаздела = ФайлВыгрузки Тогда
				СтруктураПараметров.ПараметрыРаздел12.ПоследняяСтрока = Истина;
			КонецЕсли;
			ЗаписатьВСегментДанныхСтрокуРаздела12(ТекущиеДанные, СтруктураПараметров);
		КонецЕсли;
		
		ОбъектЧтениеXML.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
	                   + "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
	                   + "_" + ПараметрыВыгрузки.КодИФНС
	                   + "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	                   + "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	                   + "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Процедура УстановитьАтрибутЕслиНеЗаполнен(УзелПриемникДерево, УзелИсточникDOM, ИмяАтрибута)
	
	УзелАтрибутПриемника = ПолучитьПодчиненныйЭлемент(УзелПриемникДерево, ИмяАтрибута);
	
	Если УзелПуст(УзелАтрибутПриемника) Тогда
		
		Если УзелАтрибутПриемника.Формат = "N" Тогда
			ЗначениеАтрибута = ЧислоИзСтроки(УзелИсточникDOM.ПолучитьАтрибут(ИмяАтрибута));
		Иначе
			ЗначениеАтрибута = СокрЛП(УзелИсточникDOM.ПолучитьАтрибут(ИмяАтрибута));
		КонецЕсли;
		
		ВывестиПоказательВXML(УзелАтрибутПриемника, ЗначениеАтрибута);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАтрибутСуммаЗначений(УзелПриемникДерево, УзелИсточникDOM, ИмяАтрибута)
	
	УзелАтрибутПриемника = ПолучитьПодчиненныйЭлемент(УзелПриемникДерево, ИмяАтрибута);
	
	НовоеЗначениеАтрибута = ЧислоИзСтроки(УзелАтрибутПриемника.Значение) + ЧислоИзСтроки(УзелИсточникDOM.ПолучитьАтрибут(ИмяАтрибута));
	
	ВывестиПоказательВXML(УзелАтрибутПриемника, НовоеЗначениеАтрибута);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЭлектронногоПредставленияКонсолидированныхСведенийРазделов8_12

&НаСервере
Функция ВыгрузкаРаздел8(СтруктураПараметров)
	
	ИмяРаздела = "Раздел8";
	
	Данные = Новый Структура("Записи,Итоги", СтруктураПараметров.ТаблицаРаздел8, СтруктураПараметров.ИтогиРаздел8);
	
	Если Данные.Записи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.8");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000080");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед8", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнигаПокуп");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВсКПк", Данные.Итоги.СумНДСВсКПк, "Ч,19,2");
		
		Для Каждого СтрокаДанных Из Данные.Записи Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнПокСтр");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", Данные.Записи.Индекс(СтрокаДанных) + 1, "Ч,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомТД", СтрокаДанных.НомТД, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимПокупВ", СтрокаДанных.СтоимПокупВ, "Ч,19,2");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСВыч", СтрокаДанных.СумНДСВыч, "Ч,19,2");
			
			Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.ДокПдтвУпл.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДокПдтвУпл");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].НомДокПдтвУпл, "Т,256");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].ДатаДокПдтвУпл, "Т,10");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.ДатаУчТов.Количество() - 1 Цикл
				Если ЗначениеЗаполнено(СокрЛП(СтрЗаменить(СтрокаДанных.ДатаУчТов[Инд], ".", "")))
					И СтрокаДанных.ДатаУчТов[Инд] <> "0" И СтрокаДанных.ДатаУчТов[Инд] <> "01.01.0000" Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаУчТов");
					КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.ДатаУчТов[Инд]);
				КонецЕсли;
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.СвПрод.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПрод");
				
				Если СтрокаДанных.СвПрод[Инд].Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод[Инд].ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод[Инд].ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПрод[Инд].КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Если СтрокаДанных.СвПос <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПос");
				
				Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаРаздел8_Прил1(СтруктураПараметров)
	
	ИмяРаздела = "Раздел8_Прил1";
	
	Данные = Новый Структура("Записи,Итоги", СтруктураПараметров.ТаблицаРаздел81, СтруктураПараметров.ИтогиРаздел81);
	
	Если Данные.Записи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.81");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000081");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед81", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнигаПокупДЛ");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСИтКПк",  Данные.Итоги.СумНДСИтКПк,  "Ч,19,2");
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДСИтП1Р8", Данные.Итоги.СумНДСИтП1Р8, "Ч,19,2");
		
		Для Каждого СтрокаДанных Из Данные.Записи Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнПокДЛСтр");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", Данные.Записи.Индекс(СтрокаДанных) + 1, "Ч,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомТД", СтрокаДанных.НомТД, "Т,1000");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимПокупВ", СтрокаДанных.СтоимПокупВ, "Ч,19,2");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДС", СтрокаДанных.СумНДС, "Ч,19,2");
			
			Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.ДокПдтвУпл.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДокПдтвУпл");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].НомДокПдтвУпл, "Т,256");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвУпл", СтрокаДанных.ДокПдтвУпл[Инд].ДатаДокПдтвУпл, "Т,10");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.ДатаУчТов.Количество() - 1 Цикл
				Если ЗначениеЗаполнено(СокрЛП(СтрЗаменить(СтрокаДанных.ДатаУчТов[Инд], ".", "")))
					И СтрокаДанных.ДатаУчТов[Инд] <> "0" И СтрокаДанных.ДатаУчТов[Инд] <> "01.01.0000" Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДатаУчТов");
					КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.ДатаУчТов[Инд]);
				КонецЕсли;
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.СвПрод.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПрод");
				
				Если СтрокаДанных.СвПрод[Инд].Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод[Инд].ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод[Инд].ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПрод[Инд].КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Если СтрокаДанных.СвПос <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПос");
				
				Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаРаздел9(СтруктураПараметров)
	
	ИмяРаздела = "Раздел9";
	
	Данные = Новый Структура("Записи,Итоги", СтруктураПараметров.ТаблицаРаздел9, СтруктураПараметров.ИтогиРаздел9);
	
	Если Данные.Записи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.9");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000090");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед9", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнигаПрод");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродБезНДС18", Данные.Итоги.СтПродБезНДС18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродБезНДС10", Данные.Итоги.СтПродБезНДС10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродБезНДС0",  Данные.Итоги.СтПродБезНДС0,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСВсКПр18",  Данные.Итоги.СумНДСВсКПр18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСВсКПр10",  Данные.Итоги.СумНДСВсКПр10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвВсКПр", Данные.Итоги.СтПродОсвВсКПр, "Ч,19,2");
		
		Для Каждого СтрокаДанных Из Данные.Записи Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнПродСтр");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", Данные.Записи.Индекс(СтрокаДанных) + 1, "Ч,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФВ",  СтрокаДанных.СтоимПродСФВ,  "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ",   СтрокаДанных.СтоимПродСФ,   "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ18", СтрокаДанных.СтоимПродСФ18, "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ10", СтрокаДанных.СтоимПродСФ10, "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ0",  СтрокаДанных.СтоимПродСФ0,  "Ч,19,2");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18, "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10, "Ч,19,2");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродОсв", СтрокаДанных.СтоимПродОсв, "Ч,19,2");
			
			Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.ДокПдтвОпл.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДокПдтвОпл");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомДокПдтвОпл",  СтрокаДанных.ДокПдтвОпл[Инд].НомДокПдтвОпл,  "Т,256");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", СтрокаДанных.ДокПдтвОпл[Инд].ДатаДокПдтвОпл, "Т,10");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.СвПокуп.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
				
				Если СтрокаДанных.СвПокуп[Инд].Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп[Инд].ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп[Инд].ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп[Инд].КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Если СтрокаДанных.СвПос <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПос");
				
				Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
		
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаРаздел9_Прил1(СтруктураПараметров)
	
	ИмяРаздела = "Раздел9_Прил1";
	
	Данные = Новый Структура("Записи,Итоги", СтруктураПараметров.ТаблицаРаздел91, СтруктураПараметров.ИтогиРаздел91);
	
	Если Данные.Записи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.91");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000091");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед91", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнигаПродДЛ");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИтСтПродКПр18",   Данные.Итоги.ИтСтПродКПр18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИтСтПродКПр10",   Данные.Итоги.ИтСтПродКПр10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИтСтПродКПр0",    Данные.Итоги.ИтСтПродКПр0,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСИтКПр18",   Данные.Итоги.СумНДСИтКПр18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСИтКПр10",   Данные.Итоги.СумНДСИтКПр10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ИтСтПродОсвКПр",  Данные.Итоги.ИтСтПродОсвКПр, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродВсП1Р9_18", Данные.Итоги.СтПродВсП1Р9_18,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродВсП1Р9_10", Данные.Итоги.СтПродВсП1Р9_10, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродВсП1Р9_0",  Данные.Итоги.СтПродВсП1Р9_0,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСВсП1Р9_18", Данные.Итоги.СумНДСВсП1Р9_18, "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДСВсП1Р9_10", Данные.Итоги.СумНДСВсП1Р9_10,  "Ч,19,2");
		КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтПродОсвП1Р9Вс", Данные.Итоги.СтПродОсвП1Р9Вс, "Ч,19,2");
		
		Для Каждого СтрокаДанных Из Данные.Записи Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КнПродДЛСтр");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", Данные.Записи.Индекс(СтрокаДанных) + 1, "Ч,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФВ",  СтрокаДанных.СтоимПродСФВ,  "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ",   СтрокаДанных.СтоимПродСФ,   "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ18", СтрокаДанных.СтоимПродСФ18, "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ10", СтрокаДанных.СтоимПродСФ10, "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродСФ0",  СтрокаДанных.СтоимПродСФ0,  "Ч,19,2");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССФ18", СтрокаДанных.СумНДССФ18, "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССФ10", СтрокаДанных.СумНДССФ10, "Ч,19,2");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимПродОсв", СтрокаДанных.СтоимПродОсв,  "Ч,19,2");
			
			Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.ДокПдтвОпл.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ДокПдтвОпл");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомДокПдтвОпл",  СтрокаДанных.ДокПдтвОпл[Инд].НомДокПдтвОпл,  "Т,256");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаДокПдтвОпл", СтрокаДанных.ДокПдтвОпл[Инд].ДатаДокПдтвОпл, "Т,10");
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Для Инд = 0 По СтрокаДанных.СвПокуп.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
				
				Если СтрокаДанных.СвПокуп[Инд].Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп[Инд].ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп[Инд].ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп[Инд].КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			Если СтрокаДанных.СвПос <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПос");
				
				Если СтрокаДанных.СвПос.Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПос.ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПос.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПос.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаРаздел10(СтруктураПараметров)
	
	ИмяРаздела = "Раздел10";
	
	Данные = Новый Структура("Записи", СтруктураПараметров.ТаблицаРаздел10);
	
	Если Данные.Записи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.10");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000100");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед10", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ЖУчВыстСчФ");
		
		Для Каждого СтрокаДанных Из Данные.Записи Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ЖУчВыстСчФСтр");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", Данные.Записи.Индекс(СтрокаДанных) + 1, "Ч,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаВыст", СтрокаДанных.ДатаВыст, "Т,10");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
			
			Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
			КонецЦикла;
			
			Если СтрокаДанных.СвПокуп <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
				
				Если СтрокаДанных.СвПокуп.Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп.ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			Для Инд = 0 По СтрокаДанных.СвПосрДеят.Количество() -1 Цикл
				ДанныеОДеятельности = СтрокаДанных.СвПосрДеят[Инд];
				
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПосрДеят");
				
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФОтПрод", ДанныеОДеятельности.НомСчФОтПрод, "Т,1000");
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФОтПрод", ДанныеОДеятельности.ДатаСчФОтПрод, "Т,10");
				
				КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", ДанныеОДеятельности.ОКВ, "Т,3");
				
				Если ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) Тогда
					КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СтоимТовСчФВс", ДанныеОДеятельности.СтоимТовСчФВс, "Ч,19,2");
					КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССчФ",     ДанныеОДеятельности.СумНДССчФ,     "Ч,19,2");
				Иначе
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимТовСчФВс", ДанныеОДеятельности.СтоимТовСчФВс, "Ч,19,2");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДССчФ",     ДанныеОДеятельности.СумНДССчФ,     "Ч,19,2");
				КонецЕсли;
				
				КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазСтКСчФУм",   ДанныеОДеятельности.РазСтКСчФУм,   "Ч,19,2");
				КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазСтКСчФУв",   ДанныеОДеятельности.РазСтКСчФУв,   "Ч,19,2");
				КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазНДСКСчФУм",  ДанныеОДеятельности.РазНДСКСчФУм,  "Ч,19,2");
				КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазНДСКСчФУв",  ДанныеОДеятельности.РазНДСКСчФУв,  "Ч,19,2");
				
				Если ДанныеОДеятельности.СвПрод <> Неопределено Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПрод");
					
					Если ДанныеОДеятельности.СвПрод.Свойство("ИННФЛ") Тогда
						КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
						
						КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", ДанныеОДеятельности.СвПрод.ИННФЛ, "Т,12");
						
						КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
					Иначе
						КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
						
						КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", ДанныеОДеятельности.СвПрод.ИННЮЛ, "Т,10");
						КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", ДанныеОДеятельности.СвПрод.КПП, "Т,9");
						
						КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
					КонецЕсли;
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЦикла;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаРаздел11(СтруктураПараметров)
	
	ИмяРаздела = "Раздел11";
	
	Данные = Новый Структура("Записи", СтруктураПараметров.ТаблицаРаздел11);
	
	Если Данные.Записи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.11");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000110");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед11", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ЖУчПолучСчФ");
		
		Для Каждого СтрокаДанных Из Данные.Записи Цикл
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ЖУчПолучСчФСтр");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомерПор", Данные.Записи.Индекс(СтрокаДанных) + 1, "Ч,12");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаПолуч", СтрокаДанных.ДатаПолуч, "Т,10");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФПрод", СтрокаДанных.НомСчФПрод, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФПрод", СтрокаДанных.ДатаСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрСчФ", СтрокаДанных.НомИспрСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрСчФ", СтрокаДанных.ДатаИспрСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомКСчФПрод", СтрокаДанных.НомКСчФПрод, "Т,256");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаКСчФПрод", СтрокаДанных.ДатаКСчФПрод, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "НомИспрКСчФ", СтрокаДанных.НомИспрКСчФ, "Ч,3");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ДатаИспрКСчФ", СтрокаДанных.ДатаИспрКСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КодВидСд", СтрокаДанных.КодВидСд, "Т,1");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимТовСчФВс", СтрокаДанных.СтоимТовСчФВс, "Ч,19,2");
			Если ЗначениеЗаполнено(СтрокаДанных.НомКСчФПрод) ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаКСчФПрод)
			 ИЛИ ЗначениеЗаполнено(СтрокаДанных.НомИспрКСчФ) ИЛИ ЗначениеЗаполнено(СтрокаДанных.ДатаИспрКСчФ) Тогда
				КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "СумНДССчФ", СтрокаДанных.СумНДССчФ, "Ч,19,2");
			Иначе
				КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНДССчФ", СтрокаДанных.СумНДССчФ, "Ч,19,2");
			КонецЕсли;
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазСтКСчФУм",  СтрокаДанных.РазСтКСчФУм,  "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазСтКСчФУв",  СтрокаДанных.РазСтКСчФУв,  "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазНДСКСчФУм", СтрокаДанных.РазНДСКСчФУм, "Ч,19,2");
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "РазНДСКСчФУв", СтрокаДанных.РазНДСКСчФУв, "Ч,19,2");
			
			Для Инд = 0 По СтрокаДанных.КодВидОпер.Количество() - 1 Цикл
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "КодВидОпер");
				КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, СтрокаДанных.КодВидОпер[Инд]);
			КонецЦикла;
			
			Если СтрокаДанных.СвПрод <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПрод");
				
				Если СтрокаДанных.СвПрод.Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПрод.ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПрод.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПрод.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			Если СтрокаДанных.СвКомис <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвКомис");
				
				Если СтрокаДанных.СвКомис.Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвКомис.ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвКомис.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвКомис.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
		КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузкаРаздел12(СтруктураПараметров)
	
	ИмяРаздела = "Раздел12";
	
	Данные = Новый Структура("Записи", СтруктураПараметров.ТаблицаРаздел12);
	
	Если Данные.Записи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдФайл = СформироватьИдентификаторФайлаВыгрузкиНДС(ПараметрыВыгрузки, "NO_NDS.12");
	ПараметрыВыгрузки.Вставить("ИдФайл" + ИмяРаздела, ИдФайл);
	
	КомпоновщикXML = КомпоновщикXML_Новый();
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Файл");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИдФайл", ИдФайл);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсПрог", ПараметрыВыгрузки.ВерсПрог);
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ВерсФорм", "5.04");
	
	КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "Документ");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "Индекс", "0000120");
	КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомКорр", ПараметрыВыгрузки.ВидДок);
	
	Если ПараметрыВыгрузки.ВидДок <> "0" Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ПризнСвед12", ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела]);
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ВидДок = "0" ИЛИ ПараметрыВыгрузки["АктуальностьСведений" + ИмяРаздела] = "0" Тогда
		
		Для Каждого СтрокаДанных Из Данные.Записи Цикл
			
			КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "ВыстСчФ_173.5");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "НомСчФ", СтрокаДанных.НомСчФ, "Т,1000");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ДатаСчФ", СтрокаДанных.ДатаСчФ, "Т,10");
			
			КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, "ОКВ", СтрокаДанных.ОКВ, "Т,3");
			
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимТовБНалВс", СтрокаДанных.СтоимТовБНалВс, "Ч,19,2");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СумНалПокуп",    СтрокаДанных.СумНалПокуп,    "Ч,19,2");
			КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "СтоимТовСНалВс", СтрокаДанных.СтоимТовСНалВс, "Ч,19,2");
			
			Если СтрокаДанных.СвПокуп <> Неопределено Тогда
				КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СвПокуп");
				
				Если СтрокаДанных.СвПокуп.Свойство("ИННФЛ") Тогда
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведИП");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННФЛ", СтрокаДанных.СвПокуп.ИННФЛ, "Т,12");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				Иначе
					КомпоновщикXML_СоздатьУзел(КомпоновщикXML, "СведЮЛ");
					
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "ИННЮЛ", СтрокаДанных.СвПокуп.ИННЮЛ, "Т,10");
					КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, "КПП", СтрокаДанных.СвПокуп.КПП, "Т,9");
					
					КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
				КонецЕсли;
				
				КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
			КонецЕсли;
			
			КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
		КонецЦикла;
		
	КонецЕсли;
	
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML));
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НДС2015" + ИмяРаздела);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", "windows-1251");
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция КомпоновщикXML_Новый()
	
	КомпоновщикXML = Новый Структура;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ЗаписьТекста.Записать("<?xml version=""1.0"" encoding=""windows-1251""?>");
	
	КомпоновщикXML.Вставить("ИмяФайла", ИмяВременногоФайла);
	КомпоновщикXML.Вставить("ЗаписьТекста", ЗаписьТекста);
	КомпоновщикXML.Вставить("СтэкУзлов", Новый Массив);
	КомпоновщикXML.Вставить("НовыйУзелЗакрыт", Истина);
	КомпоновщикXML.Вставить("Табуляция", "");
	
	Возврат КомпоновщикXML;
	
КонецФункции

&НаСервере
Процедура КомпоновщикXML_СоздатьУзел(КомпоновщикXML, ИмяУзла)
	
	Если НЕ КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.ЗаписьТекста.Записать(">");
		КомпоновщикXML.Табуляция = КомпоновщикXML.Табуляция + Символы.Таб;
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Вставить(0, ИмяУзла);
	
	КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "<" + ИмяУзла);
	
	КомпоновщикXML.НовыйУзелЗакрыт = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т")
	
	ОписаниеТипаАтрибута = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипАтрибута);
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
	КонецЕсли;
	
	КомпоновщикXML.ЗаписьТекста.Записать(" " + ИмяАтрибута + "=""" + ПредставлениеЗначения + """");
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикXML_ВывестиНеобязательныйАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута)
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		КомпоновщикXML_ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикXML_ВывестиЗначениеИЗакрытьУзел(КомпоновщикXML, Значение)
	
	КомпоновщикXML.ЗаписьТекста.Записать(">" + Значение + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	КомпоновщикXML.НовыйУзелЗакрыт = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КомпоновщикXML_ЗакрытьУзел(КомпоновщикXML)
	
	Если КомпоновщикXML.НовыйУзелЗакрыт Тогда
		КомпоновщикXML.Табуляция = Сред(КомпоновщикXML.Табуляция, 2);
		КомпоновщикXML.ЗаписьТекста.Записать(Символы.ПС + КомпоновщикXML.Табуляция + "</" + КомпоновщикXML.СтэкУзлов[0] + ">");
		
	Иначе
		КомпоновщикXML.ЗаписьТекста.Записать("/>");
		КомпоновщикXML.НовыйУзелЗакрыт = Истина;
		
	КонецЕсли;
	
	КомпоновщикXML.СтэкУзлов.Удалить(0);
	
КонецПроцедуры

&НаСервере
Функция КомпоновщикXML_СсылкаНаВременноеХранилище(КомпоновщикXML)
	
	КомпоновщикXML.ЗаписьТекста.Закрыть();
	КомпоновщикXML.ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(КомпоновщикXML.ИмяФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(КомпоновщикXML.ИмяФайла);
	
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлектронногоПредставленияКонсолидированныхСведенийРазделов1_7

&НаСервере
Процедура ЗаполнитьСведенияОРазделах8_12(ДеревоВыгрузки)
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти(ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти, "Код", Истина);
	
	Если УзелНДС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакиЗаполненностиРазделов8_12 = Новый Структура;
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал8",  "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал81", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал9",  "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал91", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал10", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал11", "0");
	ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал12", "0");
	
	ЕстьРазделы8_12 = Ложь;
	
	ИмяФайлаСведенийРаздела = Неопределено;
	
	УзелКнигаПокуп = ПолучитьПодчиненныйЭлемент(УзелНДС, "КнигаПокуп");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел8", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелКнигаПокуп, "НаимКнПок", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал8", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПокуп);
	КонецЕсли;
	
	УзелКнигаПокупДЛ = ПолучитьПодчиненныйЭлемент(УзелНДС, "КнигаПокупДЛ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел8_Прил1", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелКнигаПокупДЛ, "НаимКнПокДЛ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал81", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПокупДЛ);
	КонецЕсли;
	
	УзелКнигаПрод = ПолучитьПодчиненныйЭлемент(УзелНДС, "КнигаПрод");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел9", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелКнигаПрод, "НаимКнПрод", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал9", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПрод);
	КонецЕсли;
	
	УзелКнигаПродДЛ = ПолучитьПодчиненныйЭлемент(УзелНДС, "КнигаПродДЛ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел9_Прил1", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелКнигаПродДЛ, "НаимКнПродДЛ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал91", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелКнигаПродДЛ);
	КонецЕсли;
	
	УзелЖУчВыстСчФ = ПолучитьПодчиненныйЭлемент(УзелНДС, "ЖУчВыстСчФ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел10", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелЖУчВыстСчФ, "НаимЖУчВыстСчФ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал10", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелЖУчВыстСчФ);
	КонецЕсли;
	
	УзелЖУчПолучСчФ = ПолучитьПодчиненныйЭлемент(УзелНДС, "ЖУчПолучСчФ");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел11", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелЖУчПолучСчФ, "НаимЖУчПолучСчФ", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал11", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелЖУчПолучСчФ);
	КонецЕсли;
	
	УзелВыстСчФ_173_5 = ПолучитьПодчиненныйЭлемент(УзелНДС, "ВыстСчФ_173.5");
	Если ПараметрыВыгрузки.Свойство("ИдФайлРаздел12", ИмяФайлаСведенийРаздела) Тогда
		ЗадатьЗначениеЭлемента(УзелВыстСчФ_173_5, "НаимВыстСчФ_173.5", ИмяФайлаСведенийРаздела + ".xml");
		ПризнакиЗаполненностиРазделов8_12.Вставить("ПризнНал12", "1");
		ЕстьРазделы8_12 = Истина;
	Иначе
		РегламентированнаяОтчетность.УдалитьУзел(УзелВыстСчФ_173_5);
	КонецЕсли;
	
	Если ЕстьРазделы8_12 Тогда
		ЗадатьЗначениеЭлемента(ДеревоВыгрузки, "ПризнНал8-12", "1");
	КонецЕсли;
	
	Для Каждого ИмяПризнакаИЗначение Из ПризнакиЗаполненностиРазделов8_12 Цикл
		УзелПризнакаЗаполненностиРаздела = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, ИмяПризнакаИЗначение.Ключ);
		Если ЕстьРазделы8_12 Тогда
			ВывестиПоказательВXML(УзелПризнакаЗаполненностиРаздела, ИмяПризнакаИЗначение.Значение);
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(УзелПризнакаЗаполненностиРаздела);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ДополнительныеПараметры)
	
	ОбработатьУсловныеЭлементы(ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ДеревоВыгрузки,, ДополнительныеПараметры);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(Узел, НомерСтроки = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ДополнительныеПараметры);
			Иначе
				ЗаполнитьДаннымиУзел(Стр,, ДополнительныеПараметры);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзелИзДокумента(Узел, ОбъектDOM, СуммироватьЧисла = Ложь)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДочерниеОбъектыDOM = ОбъектDOM.ПолучитьЭлементыПоИмени(Стр.Код);
			Если ДочерниеОбъектыDOM.Количество() > 0 Тогда
				ЗаполнитьДаннымиУзелИзДокумента(Стр, ДочерниеОбъектыDOM[0], СуммироватьЧисла);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если СуммироватьЧисла И Стр.Формат = "N" Тогда
					НовоеЗначениеАтрибута = ЧислоИзСтроки(Стр.Значение) + ЧислоИзСтроки(ОбъектDOM.ПолучитьАтрибут(Стр.Код));
					ВывестиПоказательВXML(Стр, НовоеЗначениеАтрибута);
				Иначе
					Стр.Значение = СокрЛП(ОбъектDOM.ПолучитьАтрибут(Стр.Код));
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (Найти(Узел.Обязательность, "Н") <> 0 ИЛИ Найти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (Найти(Узел.Обязательность, "М") <> 0 ИЛИ Найти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(Найти(Узел.Обязательность, "О") <> 0 ИЛИ Найти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти("НДС", "Код", Истина);
	
	// решаем, оставлять ли узел НалИсчСМР (раздел 3)
	УзелНалИсчСМР = УзелНДС.Строки.Найти("НалИсчСМР", "Код", Истина);
	Если УзелНалИсчСМР <> Неопределено И УзелПуст(УзелНалИсчСМР) И УзелНалИсчСМР.Родитель.Родитель.Строки.Найти("ВыпСМРСоб", "Код", Истина) = Неопределено Тогда
		
		// удаляем НалИсчСМР
		УзелНалИсчСМР.Родитель.Строки.Удалить(УзелНалИсчСМР);
		
	КонецЕсли;
	
	// решаем, оставлять ли узел СумНалВосст (раздел 3)
	УзелСумНалВосст = УзелНДС.Строки.Найти("СумНалВосст", "Код", Истина);
	Если УзелСумНалВосст <> Неопределено И УзелПуст(УзелСумНалВосст) Тогда
		
		// определяем, пусты ли все узлы ДатаИсп170
		УзлыДатаИсп170 = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "ДатаИсп170"), Истина);
		Если УзлыДатаИсп170.Количество() = 0 Тогда
			
			// удаляем узел СумНалВосст
			УзелСумНалВосст.Родитель.Строки.Удалить(УзелСумНалВосст);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если узел СумНалОб пуст и СумНалИсч отсутствует, то удалим СумНалОб (раздел 3)
	// узел СумНалОб проверяем на пустоту именно по количеству подчиненных строк,
	// потому что возможны ситуации, когда узлу подчинен пустой узел СумНалВосст (см. выше)
	УзелСумНалОб = УзелНДС.Строки.Найти("СумНалОб", "Код", Истина);
	Если УзелСумНалОб <> Неопределено И УзелСумНалОб.Строки.Количество() = 1 И УзелПуст(УзелСумНалОб.Строки[0]) Тогда
		
		// определяем, пусты ли все узлы СумНалИсч
		УзлыСумНалИсч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СумНалИсч"), Истина);
		Если УзлыСумНалИсч.Количество() = 0 Тогда
			
			// удаляем узел СумНалОб
			УзелСумНалОб.Родитель.Строки.Удалить(УзелСумНалОб);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если узел СумНалВыч пуст и нет ни одного (СумНалВыч, подчиненного СумВычИн),
	// то удалим СумНалВыч
	УзелСумУпл164 = УзелНДС.Строки.Найти("СумУпл164", "Код", Истина);
	Если УзелСумУпл164 <> Неопределено Тогда
		
		// ищем СумНалВыч в подчинении СумУпл164
		УзелСумНалВычСложный = УзелСумУпл164.Строки.Найти("СумНалВыч", "Код");
		Если УзелСумНалВычСложный <> Неопределено Тогда
			
			// если остался только НалВычОбщ и он пустой
			Если УзелСумНалВычСложный.Строки.Количество() = 1 И УзелПуст(УзелСумНалВычСложный.Строки[0]) Тогда
				
				// если при этом нет ни одного заполненного СумНалВыч(П000320000103), то удаляем сложный СумНалВыч
				УзлыСумНалВыч = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код, Ключ", "СумНалВыч", "П000320000103"), Истина);
				Если УзлыСумНалВыч.Количество() = 0 Тогда
					УзелСумНалВычСложный.Родитель.Строки.Удалить(УзелСумНалВычСложный);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// решаем, оставлять ли узлы ДоляНеОбл и НалГод
	УзлыСведНалГод = УзелНДС.Строки.НайтиСтроки(Новый Структура("Код", "СведНалГод"), Истина);
	Для Каждого УзелСведНалГод Из УзлыСведНалГод Цикл
		
		УзелДатаИсп170 = УзелСведНалГод.Строки.Найти("ДатаИсп170", "Код");
		Если УзелДатаИсп170 = Неопределено ИЛИ УзелПуст(УзелДатаИсп170) Тогда
			
			УзелДоляНеОбл = УзелСведНалГод.Строки.Найти("ДоляНеОбл", "Код");
			Если УзелПуст(УзелДоляНеОбл) Тогда
				УзелСведНалГод.Строки.Удалить(УзелДоляНеОбл);
			КонецЕсли;
			
			УзелНалГод = УзелСведНалГод.Строки.Найти("НалГод", "Код");
			Если УзелПуст(УзелНалГод) Тогда
				УзелСведНалГод.Строки.Удалить(УзелНалГод);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// решаем, оставлять ли узел СумОпер1010447 (раздел 4)
	СумОпер1010447 = УзелНДС.Строки.Найти("СумОпер1010447", "Код", Истина);
	Если СумОпер1010447 <> Неопределено Тогда
		УзелНалБаза = СумОпер1010447.Строки.Найти("НалБаза", "Код", Истина);
		Если УзелНалБаза = Неопределено ИЛИ (УзелНалБаза <> Неопределено И УзелПуст(УзелНалБаза)) Тогда
			СумОпер1010447.Родитель.Строки.Удалить(СумОпер1010447);
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел СумОпер1010448 (раздел 4)
	СумОпер1010448 = УзелНДС.Строки.Найти("СумОпер1010448", "Код", Истина);
	Если СумОпер1010448 <> Неопределено Тогда
		УзелКорНалБазаУв = СумОпер1010448.Строки.Найти("КорНалБазаУв", "Код", Истина);
		УзелКорНалБазаУм = СумОпер1010448.Строки.Найти("КорНалБазаУм", "Код", Истина);
		Если УзелКорНалБазаУв = Неопределено ИЛИ (УзелКорНалБазаУв <> Неопределено И УзелПуст(УзелКорНалБазаУв)) Тогда
			Если УзелКорНалБазаУм = Неопределено ИЛИ (УзелКорНалБазаУм <> Неопределено И УзелПуст(УзелКорНалБазаУм)) Тогда
				СумОпер1010448.Родитель.Строки.Удалить(СумОпер1010448);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел НалВычПред0 (раздел 5)
	НалВычПред0 = УзелНДС.Строки.Найти("НалВычПред0", "Код", Истина);
	Если НалВычПред0 <> Неопределено Тогда
		СумВозмПдтв = НалВычПред0.Строки.Найти("СумВозмПдтв", "Код", Истина);
		СумВозмНеПдтв = НалВычПред0.Строки.Найти("СумВозмНеПдтв", "Код", Истина);
		Если СумВозмПдтв = Неопределено И СумВозмНеПдтв = Неопределено Тогда
			НалВычПред0.Родитель.Строки.Удалить(НалВычПред0);
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел СумОпер1010449 (раздел 6)
	СумОпер1010449 = УзелНДС.Строки.Найти("СумОпер1010449", "Код", Истина);
	Если СумОпер1010449 <> Неопределено Тогда
		УзелНалБаза = СумОпер1010449.Строки.Найти("НалБаза", "Код", Истина);
		УзелКорИсч_164_23 = СумОпер1010449.Строки.Найти("КорИсч.164.23", "Код", Истина);
		УзелНалВосст = СумОпер1010449.Строки.Найти("НалВосст", "Код", Истина);
		Если (УзелНалБаза = Неопределено ИЛИ (УзелНалБаза <> Неопределено И УзелПуст(УзелНалБаза)))
		   И (УзелКорИсч_164_23 = Неопределено ИЛИ (УзелКорИсч_164_23 <> Неопределено И УзелПуст(УзелКорИсч_164_23)))
		   И (УзелНалВосст = Неопределено ИЛИ (УзелНалВосст <> Неопределено И УзелПуст(УзелНалВосст))) Тогда
			СумОпер1010449.Родитель.Строки.Удалить(СумОпер1010449);
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел СумОпер1010450 (раздел 6)
	СумОпер1010450 = УзелНДС.Строки.Найти("СумОпер1010450", "Код", Истина);
	Если СумОпер1010450 <> Неопределено Тогда
		УзелКорНалБазаУв = СумОпер1010450.Строки.Найти("КорНалБазаУв", "Код", Истина);
		УзелКорНалБазаУм = СумОпер1010450.Строки.Найти("КорНалБазаУм", "Код", Истина);
		УзелКорИсч_164_23Ув = СумОпер1010450.Строки.Найти("КорИсч.164.23Ув", "Код", Истина);
		УзелКорИсч_164_23Ум = СумОпер1010450.Строки.Найти("КорИсч.164.23Ум", "Код", Истина);
		
		Если (УзелКорНалБазаУв = Неопределено ИЛИ (УзелКорНалБазаУв <> Неопределено И УзелПуст(УзелКорНалБазаУв)))
		   И (УзелКорИсч_164_23Ув = Неопределено ИЛИ (УзелКорИсч_164_23Ув <> Неопределено И УзелПуст(УзелКорИсч_164_23Ув))) Тогда
			Если (УзелКорНалБазаУм = Неопределено ИЛИ (УзелКорНалБазаУм <> Неопределено И УзелПуст(УзелКорНалБазаУм)))
			   И (УзелКорИсч_164_23Ум = Неопределено ИЛИ (УзелКорИсч_164_23Ум <> Неопределено И УзелПуст(УзелКорИсч_164_23Ум))) Тогда
				СумОпер1010450.Родитель.Строки.Удалить(СумОпер1010450);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// решаем, оставлять ли узел СумНал164Ит раздел 6)
	УзелСумНал164Ит = УзелНДС.Строки.Найти("СумНал164Ит", "Код", Истина);
	МногострочнаяЧастьЗаполнена = (УзелНДС.Строки.Найти("СумОпер6", "Код", Истина) <> Неопределено);
	Если УзелСумНал164Ит <> Неопределено И НЕ МногострочнаяЧастьЗаполнена И УзелПуст(УзелСумНал164Ит) Тогда
		РегламентированнаяОтчетность.УдалитьУзел(УзелСумНал164Ит);
	КонецЕсли;
	
	// удалить пустые необязательные родительские узлы после предварительной обработки
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
	// решаем, оставлять ли узел СумПУ_173.1 (раздел 1)
	УзелСумПУ_173_1 = УзелНДС.Строки.Найти("СумПУ_173.1", "Код", Истина);
	Если УзелПуст(УзелСумПУ_173_1) Тогда
		
		// если узел пуст и не выполняются условия его присутствия, то удаляем узел
		Если УзелСумПУ_173_1.Родитель.Строки.Найти("СумПУ_173.5", "Код") <> Неопределено
			ИЛИ УзелСумПУ_173_1.Родитель.Строки.Найти("ОКТМО", "Код") = Неопределено Тогда
			Если УзелНДС.Строки.Найти("СумУпл164", "Код") = Неопределено
				И УзелНДС.Строки.Найти("НалПодтв0", "Код") = Неопределено
				И УзелНДС.Строки.Найти("НалВычПред0", "Код") = Неопределено
				И УзелНДС.Строки.Найти("НалНеПодтв0", "Код") = Неопределено Тогда
				УзелСумПУ_173_1.Родитель.Строки.Удалить(УзелСумПУ_173_1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист Из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ДополнительныеПараметры = Неопределено)
	
	// Разделы 8-12 (признаки и файлы)
	УзелКнигаПокуп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "КнигаПокуп");
	ЗадатьЗначениеЭлемента(УзелКнигаПокуп, "НаимКнПок", "NO_NDS.8");
	
	УзелКнигаПокупДЛ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "КнигаПокупДЛ");
	ЗадатьЗначениеЭлемента(УзелКнигаПокупДЛ, "НаимКнПокДЛ", "NO_NDS.81");
	
	УзелКнигаПрод = ПолучитьПодчиненныйЭлемент(УзелРодитель, "КнигаПрод");
	ЗадатьЗначениеЭлемента(УзелКнигаПрод, "НаимКнПрод", "NO_NDS.9");
	
	УзелКнигаПродДЛ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "КнигаПродДЛ");
	ЗадатьЗначениеЭлемента(УзелКнигаПродДЛ, "НаимКнПродДЛ", "NO_NDS.91");
	
	УзелЖУчВыстСчФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ЖУчВыстСчФ");
	ЗадатьЗначениеЭлемента(УзелЖУчВыстСчФ, "НаимЖУчВыстСчФ", "NO_NDS.10");
	
	УзелЖУчПолучСчФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ЖУчПолучСчФ");
	ЗадатьЗначениеЭлемента(УзелЖУчПолучСчФ, "НаимЖУчПолучСчФ", "NO_NDS.11");
	
	УзелВыстСчФ_173_5 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ВыстСчФ_173.5");
	ЗадатьЗначениеЭлемента(УзелВыстСчФ_173_5, "НаимВыстСчФ_173.5", "NO_NDS.12");
	
	// Разделы 1-7
	Если ДополнительныеПараметры = Неопределено ИЛИ НЕ ДополнительныеПараметры.Свойство("ДокументРазделов1_7") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяУзлаСодержательнойЧасти = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти;
	
	ДокументыРазделов = ДополнительныеПараметры.ДокументРазделов1_7; // массив элементов ДокументDOM
	
	Для Каждого ДокументРазделов Из ДокументыРазделов Цикл
		
		УзлыСодержательнойЧасти = ДокументРазделов.ПолучитьЭлементыПоИмени(ИмяУзлаСодержательнойЧасти);
		Если УзлыСодержательнойЧасти.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокУзелРодитель = УзлыСодержательнойЧасти[0];
		
		// Раздел 1.
		УзелСумУплНП = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУплНП");
		ДокУзлыСумУплНП = ДокУзелРодитель.ПолучитьЭлементыПоИмени(УзелСумУплНП.Код);
		Если ДокУзлыСумУплНП.Количество() > 0 Тогда
			УстановитьАтрибутЕслиНеЗаполнен(УзелСумУплНП, ДокУзлыСумУплНП[0], "ОКТМО");
			УстановитьАтрибутЕслиНеЗаполнен(УзелСумУплНП, ДокУзлыСумУплНП[0], "КБК");
			
			УстановитьАтрибутСуммаЗначений(УзелСумУплНП, ДокУзлыСумУплНП[0], "СумПУ_173.5");
			УстановитьАтрибутСуммаЗначений(УзелСумУплНП, ДокУзлыСумУплНП[0], "СумПУ_173.1");
			
			УстановитьАтрибутЕслиНеЗаполнен(УзелСумУплНП, ДокУзлыСумУплНП[0], "НомДогИТ");
			УстановитьАтрибутЕслиНеЗаполнен(УзелСумУплНП, ДокУзлыСумУплНП[0], "ДатаНачДогИТ");
			УстановитьАтрибутЕслиНеЗаполнен(УзелСумУплНП, ДокУзлыСумУплНП[0], "ДатаКонДогИТ");
		КонецЕсли;
		
		// Раздел 2.
		УзелСумУплНАШаблон = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУплНА");
		ДокУзлыСумУплНА = ДокУзелРодитель.ПолучитьЭлементыПоИмени(УзелСумУплНАШаблон.Код);
		Для Каждого ДокУзелСумУплНА Из ДокУзлыСумУплНА Цикл
			УзелСумУплНА = СкопироватьУзел(УзелРодитель, УзелСумУплНАШаблон);
			ЗаполнитьДаннымиУзелИзДокумента(УзелСумУплНА, ДокУзелСумУплНА);
			
			Если ДокУзелСумУплНА.ПолучитьЭлементыПоИмени("СведПродФЛ").Количество() = 0 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелСумУплНА, "СведПродФЛ"));
			ИначеЕсли ДокУзелСумУплНА.ПолучитьЭлементыПоИмени("СведПродЮЛ").Количество() = 0 Тогда
				РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(УзелСумУплНА, "СведПродЮЛ"));
			КонецЕсли;
		КонецЦикла;
		
		// Раздел 3.
		УзелСумУпл164 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумУпл164");
		ДокУзлыСумУпл164 = ДокУзелРодитель.ПолучитьЭлементыПоИмени(УзелСумУпл164.Код);
		Если ДокУзлыСумУпл164.Количество() > 0 Тогда
			УстановитьАтрибутСуммаЗначений(УзелСумУпл164, ДокУзлыСумУпл164[0], "НалПУ164");
			ДокУзлыСумНалОб = ДокУзлыСумУпл164[0].ПолучитьЭлементыПоИмени("СумНалОб");
			Если ДокУзлыСумНалОб.Количество() > 0 Тогда
				ЗаполнитьДаннымиУзелИзДокумента(ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумНалОб"), ДокУзлыСумНалОб[0], Истина);
			КонецЕсли;
			ДокУзлыСумНалВыч = ДокУзлыСумУпл164[0].ПолучитьЭлементыПоИмени("СумНалВыч");
			Если ДокУзлыСумНалВыч.Количество() > 0 Тогда
				ЗаполнитьДаннымиУзелИзДокумента(ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумНалВыч"), ДокУзлыСумНалВыч[0], Истина);
			КонецЕсли;
		КонецЕсли;
		
		// Раздел 3 приложение 1.
		УзелСумВосУплШаблон = ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумВосУпл");
		Если ДокУзлыСумУпл164.Количество() > 0 Тогда
			ДокУзлыСумВосУпл = ДокУзлыСумУпл164[0].ПолучитьЭлементыПоИмени(УзелСумВосУплШаблон.Код);
			Для Каждого ДокУзелСумВосУпл Из ДокУзлыСумВосУпл Цикл
				УзелСумВосУпл = СкопироватьУзел(УзелСумУпл164, УзелСумВосУплШаблон);
				
				Для Каждого Узел Из УзелСумВосУпл.Строки Цикл
					Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
						Узел.Значение = СокрЛП(ДокУзелСумВосУпл.ПолучитьАтрибут(Узел.Код));
					ИначеЕсли Узел.Код = "АдрМННед" Тогда
						ДокУзлыАдрМННед = ДокУзелСумВосУпл.ПолучитьЭлементыПоИмени("АдрМННед");
						Если ДокУзлыАдрМННед.Количество() > 0 Тогда
							ЗаполнитьДаннымиУзелИзДокумента(Узел, ДокУзлыАдрМННед[0]);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				УзелСведНалГодШаблон = ПолучитьПодчиненныйЭлемент(УзелСумВосУпл, "СведНалГод");
				ДокУзлыСведНалГод = ДокУзелСумВосУпл.ПолучитьЭлементыПоИмени("СведНалГод");
				Для Каждого ДокУзелСведНалГод Из ДокУзлыСведНалГод Цикл
					УзелСведНалГод = СкопироватьУзел(УзелСумВосУпл, УзелСведНалГодШаблон);
					ЗаполнитьДаннымиУзелИзДокумента(УзелСведНалГод, ДокУзелСведНалГод);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Раздел 3 приложение 2.
		УзелСумВычИн = ПолучитьПодчиненныйЭлемент(УзелСумУпл164, "СумВычИн");
		Если ДокУзлыСумУпл164.Количество() > 0 Тогда
			ДокУзлыСумВычИн = ДокУзлыСумУпл164[0].ПолучитьЭлементыПоИмени(УзелСумВычИн.Код);
			Если ДокУзлыСумВычИн.Количество() > 0 Тогда
				УзелСведНалГодИШаблон = ПолучитьПодчиненныйЭлемент(УзелСумВычИн, "СведНалГодИ");
				ДокУзлыСведНалГодИ = ДокУзлыСумВычИн[0].ПолучитьЭлементыПоИмени(УзелСведНалГодИШаблон.Код);
				Для Каждого ДокУзелСведНалГодИ Из ДокУзлыСведНалГодИ Цикл
					УзлыКППИнУч = УзелСумВычИн.Строки.НайтиСтроки(Новый Структура("Код,Значение", "КППИнУч", ДокУзелСведНалГодИ.ПолучитьАтрибут("КППИнУч")), Истина);
					Если УзлыКППИнУч.Количество() > 0 И ЗначениеЗаполнено(ДокУзелСведНалГодИ.ПолучитьАтрибут("КППИнУч")) Тогда
						УзелСведНалГодИ = УзлыКППИнУч[0].Родитель;
						ЗаполнитьДаннымиУзелИзДокумента(УзелСведНалГодИ, ДокУзелСведНалГодИ, Истина);
					Иначе
						УзелСведНалГодИ = СкопироватьУзел(УзелСумВычИн, УзелСведНалГодИШаблон);
						ЗаполнитьДаннымиУзелИзДокумента(УзелСведНалГодИ, ДокУзелСведНалГодИ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Раздел 4.
		УзелНалПодтв0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалПодтв0");
		ДокУзлыУзелНалПодтв0 = ДокУзелРодитель.ПолучитьЭлементыПоИмени(УзелНалПодтв0.Код);
		Если ДокУзлыУзелНалПодтв0.Количество() > 0 Тогда
			УстановитьАтрибутСуммаЗначений(УзелНалПодтв0, ДокУзлыУзелНалПодтв0[0], "СумИсчислИтог");
			
			УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелНалПодтв0, "СумОпер4");
			ДокУзлыСумОпер = ДокУзлыУзелНалПодтв0[0].ПолучитьЭлементыПоИмени(УзелСумОперШаблон.Код);
			Для Каждого ДокУзелСумОпер Из ДокУзлыСумОпер Цикл
				АтрибутКодОпер = ДокУзелСумОпер.ПолучитьАтрибут("КодОпер");
				НайденУзел = Ложь;
				Если ЗначениеЗаполнено(АтрибутКодОпер) Тогда
					УзлыКодОпер = УзелНалПодтв0.Строки.НайтиСтроки(Новый Структура("Код,Значение", "КодОпер", АтрибутКодОпер), Истина);
					Для Каждого УзелКодОпер Из УзлыКодОпер Цикл
						Если УзелКодОпер.Родитель.Код = "СумОпер4" Тогда
							УзелСумОпер = УзелКодОпер.Родитель;
							НайденУзел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не НайденУзел Тогда
					УзелСумОпер = СкопироватьУзел(УзелНалПодтв0, УзелСумОперШаблон);
				КонецЕсли;
				ЗаполнитьДаннымиУзелИзДокумента(УзелСумОпер, ДокУзелСумОпер, НайденУзел);
			КонецЦикла;
			
			УзелСумОпер1010447 = ПолучитьПодчиненныйЭлемент(УзелНалПодтв0, "СумОпер1010447");
			ДокУзлыСумОпер1010447 = ДокУзлыУзелНалПодтв0[0].ПолучитьЭлементыПоИмени(УзелСумОпер1010447.Код);
			Если ДокУзлыСумОпер1010447.Количество() > 0 Тогда
				ЗаполнитьДаннымиУзелИзДокумента(УзелСумОпер1010447, ДокУзлыСумОпер1010447[0], Истина);
			КонецЕсли;
			УзелСумОпер1010448 = ПолучитьПодчиненныйЭлемент(УзелНалПодтв0, "СумОпер1010448");
			ДокУзлыСумОпер1010448 = ДокУзлыУзелНалПодтв0[0].ПолучитьЭлементыПоИмени(УзелСумОпер1010448.Код);
			Если ДокУзлыСумОпер1010448.Количество() > 0 Тогда
				ЗаполнитьДаннымиУзелИзДокумента(УзелСумОпер1010448, ДокУзлыСумОпер1010448[0], Истина);
			КонецЕсли;
		КонецЕсли;
		
		// Раздел 5.
		УзелНалВычПред0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалВычПред0");
		ДокУзлыНалВычПред0 = ДокУзелРодитель.ПолучитьЭлементыПоИмени(УзелНалВычПред0.Код);
		Если ДокУзлыНалВычПред0.Количество() > 0 Тогда
			УзелСумПерШаблон = ПолучитьПодчиненныйЭлемент(УзелНалВычПред0, "СумПер");
			ДокУзлыСумПер = ДокУзлыНалВычПред0[0].ПолучитьЭлементыПоИмени(УзелСумПерШаблон.Код);
			Для Каждого ДокУзелСумПер Из ДокУзлыСумПер Цикл
				
				НайденУзел = Ложь;
				Для Каждого СтрУзелНалВычПред0 Из УзелНалВычПред0.Строки Цикл // ищем узлы в которых совпадает Год и Период
					Если СтрУзелНалВычПред0.Код = "СумПер" Тогда
						Если СтрУзелНалВычПред0.Строки.НайтиСтроки(Новый Структура("Код,Значение", "ОтчетГод", СокрЛП(ДокУзелСумПер.ПолучитьАтрибут("ОтчетГод")))).Количество() > 0
						   И СтрУзелНалВычПред0.Строки.НайтиСтроки(Новый Структура("Код,Значение", "Период", СокрЛП(ДокУзелСумПер.ПолучитьАтрибут("Период")))).Количество() > 0 Тогда
							УзелЛистаРаздела5 = СтрУзелНалВычПред0;
							НайденУзел = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если Не НайденУзел Тогда
					УзелЛистаРаздела5 = СкопироватьУзел(УзелНалВычПред0, УзелСумПерШаблон);
				КонецЕсли;
				
				Для Каждого Узел Из УзелЛистаРаздела5.Строки Цикл
					Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда
						Узел.Значение = СокрЛП(ДокУзелСумПер.ПолучитьАтрибут(Узел.Код));
					КонецЕсли;
				КонецЦикла;
				
				УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелЛистаРаздела5, "СумОпер5");
				ДокУзлыСумОпер = ДокУзелСумПер.ПолучитьЭлементыПоИмени(УзелСумОперШаблон.Код);
				Для Каждого ДокУзелСумОпер Из ДокУзлыСумОпер Цикл
					УзлыКодОпер = УзелЛистаРаздела5.Строки.НайтиСтроки(Новый Структура("Код,Значение", "КодОпер", ДокУзелСумОпер.ПолучитьАтрибут("КодОпер")), Истина);
					Если УзлыКодОпер.Количество() > 0 И ЗначениеЗаполнено(ДокУзелСумОпер.ПолучитьАтрибут("КодОпер")) Тогда
						УзелСумОпер = УзлыКодОпер[0].Родитель;
						ЗаполнитьДаннымиУзелИзДокумента(УзелСумОпер, ДокУзелСумОпер, Истина);
					Иначе
						УзелСумОпер = СкопироватьУзел(УзелЛистаРаздела5, УзелСумОперШаблон);
						ЗаполнитьДаннымиУзелИзДокумента(УзелСумОпер, ДокУзелСумОпер);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			УстановитьАтрибутСуммаЗначений(УзелНалВычПред0, ДокУзлыНалВычПред0[0], "СумВозмПдтв");
			УстановитьАтрибутСуммаЗначений(УзелНалВычПред0, ДокУзлыНалВычПред0[0], "СумВозмНеПдтв");
		КонецЕсли;
		
		// Раздел 6.
		УзелНалНеПодтв0 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "НалНеПодтв0");
		ДокУзлыНалНеПодтв0 = ДокУзелРодитель.ПолучитьЭлементыПоИмени(УзелНалНеПодтв0.Код);
		Если ДокУзлыНалНеПодтв0.Количество() > 0 Тогда
			УстановитьАтрибутСуммаЗначений(УзелНалНеПодтв0, ДокУзлыНалНеПодтв0[0], "СумНал164Ит");
			УстановитьАтрибутСуммаЗначений(УзелНалНеПодтв0, ДокУзлыНалНеПодтв0[0], "НалВычНеПодИт");
			УстановитьАтрибутСуммаЗначений(УзелНалНеПодтв0, ДокУзлыНалНеПодтв0[0], "НалИсчислИт");
			
			УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелНалНеПодтв0, "СумОпер6");
			ДокУзлыСумОпер = ДокУзлыНалНеПодтв0[0].ПолучитьЭлементыПоИмени(УзелСумОперШаблон.Код);
			Для Каждого ДокУзелСумОпер Из ДокУзлыСумОпер Цикл
				АтрибутКодОпер = ДокУзелСумОпер.ПолучитьАтрибут("КодОпер");
				НайденУзел = Ложь;
				Если ЗначениеЗаполнено(АтрибутКодОпер) Тогда
					УзлыКодОпер = УзелНалНеПодтв0.Строки.НайтиСтроки(Новый Структура("Код,Значение", "КодОпер", АтрибутКодОпер), Истина);
					Для Каждого УзелКодОпер Из УзлыКодОпер Цикл
						Если УзелКодОпер.Родитель.Код = "СумОпер6" Тогда
							УзелСумОпер = УзелКодОпер.Родитель;
							НайденУзел = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не НайденУзел Тогда
					УзелСумОпер = СкопироватьУзел(УзелНалНеПодтв0, УзелСумОперШаблон);
				КонецЕсли;
				ЗаполнитьДаннымиУзелИзДокумента(УзелСумОпер, ДокУзелСумОпер, НайденУзел);
			КонецЦикла;
			
			ДокУзлыСумОпер1010449 = ДокУзлыНалНеПодтв0[0].ПолучитьЭлементыПоИмени("СумОпер1010449");
			Если ДокУзлыСумОпер1010449.Количество() > 0 Тогда
				ЗаполнитьДаннымиУзелИзДокумента(ПолучитьПодчиненныйЭлемент(УзелНалНеПодтв0, "СумОпер1010449"), ДокУзлыСумОпер1010449[0], Истина);
			КонецЕсли;
			ДокУзлыСумОпер1010450 = ДокУзлыНалНеПодтв0[0].ПолучитьЭлементыПоИмени("СумОпер1010450");
			Если ДокУзлыСумОпер1010450.Количество() > 0 Тогда
				ЗаполнитьДаннымиУзелИзДокумента(ПолучитьПодчиненныйЭлемент(УзелНалНеПодтв0, "СумОпер1010450"), ДокУзлыСумОпер1010450[0], Истина);
			КонецЕсли;
		КонецЕсли;
		
		// Раздел 7.
		УзелОперНеНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ОперНеНал");
		ДокУзлыОперНеНал = ДокУзелРодитель.ПолучитьЭлементыПоИмени(УзелОперНеНал.Код);
		Если ДокУзлыОперНеНал.Количество() > 0 Тогда
			УстановитьАтрибутСуммаЗначений(УзелОперНеНал, ДокУзлыОперНеНал[0], "ОплПостСв6Мес");
			
			УзелСумОперШаблон = ПолучитьПодчиненныйЭлемент(УзелОперНеНал, "СумОпер7");
			ДокУзлыСумОпер = ДокУзлыОперНеНал[0].ПолучитьЭлементыПоИмени(УзелСумОперШаблон.Код);
			Для Каждого ДокУзелСумОпер Из ДокУзлыСумОпер Цикл
					УзлыКодОпер = УзелОперНеНал.Строки.НайтиСтроки(Новый Структура("Код,Значение", "КодОпер", ДокУзелСумОпер.ПолучитьАтрибут("КодОпер")), Истина);
					Если УзлыКодОпер.Количество() > 0 И ЗначениеЗаполнено(ДокУзелСумОпер.ПолучитьАтрибут("КодОпер")) Тогда
						УзелСумОпер = УзлыКодОпер[0].Родитель;
						ЗаполнитьДаннымиУзелИзДокумента(УзелСумОпер, ДокУзелСумОпер, Истина);
					Иначе
						УзелСумОпер = СкопироватьУзел(УзелОперНеНал, УзелСумОперШаблон);
						ЗаполнитьДаннымиУзелИзДокумента(УзелСумОпер, ДокУзелСумОпер);
					КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" ИЛИ Узел.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу	
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр Из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ИмяМакетаСтруктурыВыгрузки = "СхемаВыгрузки_NO_NDS_1_003_00_05_04_05";
	
	ЗначениеОбъект = РеквизитФормыВЗначение("Объект");
	
	Макет = ЗначениеОбъект.ПолучитьМакет(ИмяМакетаСтруктурыВыгрузки);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда	
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#КонецОбласти

#Область ФормированиеКонсолидированногоОтчетаДекларацияПоНДС

&НаКлиенте
Процедура ОткрытьФормуЗаполненногоОтчета(СохраненныйДок = Неопределено)
	
	ФормаОтчета = ПолучитьФормуОтчетаИзДокумента(СохраненныйДок);
	ФормаОтчета.Открыть();
	ФормаОтчета.ЗапуститьПроверки();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОтчетаНаКлиенте(ПараметрыФормыОтчета)
	
	Если ПараметрыФормыОтчета = "Недостаточно прав" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Недостаточно прав!'"));
		Возврат Неопределено;
		
	ИначеЕсли ПараметрыФормыОтчета = "Отчет не найден" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Отчет не найден!'"));
		Возврат Неопределено;
		
	ИначеЕсли ПараметрыФормыОтчета = "Не удалось открыть отчет" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Не удалось открыть отчет!'"));
		Возврат Неопределено;
		
	ИначеЕсли ПараметрыФормыОтчета = "Открыть внутренний отчет-документ" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Заполнение отчета-документа не предусмотрено!'"));
		Возврат Неопределено;
		
	ИначеЕсли ТипЗнч(ПараметрыФормыОтчета) = Тип("Структура") Тогда
		
		ВариантОткрытия = ?(ПараметрыФормыОтчета.ВнешнийОтчетИспользовать, "ВнешнийОтчет.", "Отчет.");
		ИмяФормыОтчета = ВариантОткрытия + ПараметрыФормыОтчета.ИсточникОтчета + ".Форма.ОсновнаяФорма";
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Недостаточно параметров для создания отчета!'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыФормыОтчета.Вставить("мСохраненныйДок");
	ПараметрыФормыОтчета.Вставить("мСкопированаФорма");
	
	ОсновнаяФормаОтчета = ПолучитьФорму(ИмяФормыОтчета, ПараметрыФормыОтчета, , Новый УникальныйИдентификатор);
	Если ОсновнаяФормаОтчета = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Не удалось получить основную форму отчета!'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтрВыбраннаяФорма = ОсновнаяФормаОтчета.мВыбраннаяФорма;
	ОсновнаяФормаОтчета = Неопределено;
	
	Если СтрВыбраннаяФорма <> "ФормаОтчета2015Кв1" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Консолидация отчетов по НДС реализована только для формы "
			+ """Приложение № 1 к приказу ФНС России от 29 октября 2014 г. № ММВ-7-3/558@""!'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыФормыОтчета.Вставить("мВыбраннаяФорма", СтрВыбраннаяФорма);
	ПараметрыФормыОтчета.Вставить("БезОткрытияФормы", Истина);
	ПараметрыФормыОтчета.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417",
		РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
	
	ВыбраннаяФормаОтчета = ПолучитьФорму(СтрЗаменить(ИмяФормыОтчета, "ОсновнаяФорма", "") + СтрВыбраннаяФорма, ПараметрыФормыОтчета);
	
	Если ВыбраннаяФормаОтчета = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Не удалось получить форму отчета по периоду!'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ВыбраннаяФормаОтчета;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыФормыОтчетаНаСервере(ИсточникОтчета, ОрганизацияОтчета, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, ПериодичностьОтчета = Неопределено)
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	
	Если ПравоДоступаКОтчету = Ложь Тогда
		Возврат "Недостаточно прав";
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Возврат "Отчет не найден";
	КонецЕсли;
	
	Если Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
		Возврат "Открыть внутренний отчет-документ";
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ПараметрыТекФормы = Новый Структура;
	ПараметрыТекФормы.Вставить("Организация");
	ПараметрыТекФормы.Вставить("мДатаНачалаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мДатаКонцаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мПериодичность");
	
	ПараметрыТекФормы.Организация = ОрганизацияОтчета;
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) ИЛИ ЗначениеЗаполнено(ДатаОкончанияПериодаОтчета) Тогда
		
		Если ТипЗнч(ДатаНачалаПериодаОтчета) = Тип("Дата") Тогда
			ПараметрыТекФормы.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаПериодаОтчета);
		КонецЕсли;
		Если ТипЗнч(ДатаОкончанияПериодаОтчета) = Тип("Дата") Тогда
			ПараметрыТекФормы.мДатаКонцаПериодаОтчета = КонецДня(ДатаОкончанияПериодаОтчета);
		КонецЕсли;
		Если ПериодичностьОтчета <> Неопределено Тогда
			ПараметрыТекФормы.мПериодичность = ПериодичностьОтчета;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТекФормы.Вставить("ВнешнийОтчетИспользовать", РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета));
	ПараметрыТекФормы.Вставить("ИсточникОтчета", ИсточникОтчета);
	
	Возврат ПараметрыТекФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФормуОтчетаИзДокумента(СохраненныйДок)
	
		ФормаОтчета = Неопределено;
		
		ПараметрыФормы = ПолучитьПараметрыОтчетаИзДокументаНаСервере(СохраненныйДок);
		
		Если ПараметрыФормы = Неопределено Тогда
		
			ПоказатьПредупреждение(, НСтр("ru='Не удалось открыть отчет!'"));
			Возврат Неопределено;
		
		КонецЕсли;
		
		ЭтоСтартоваяФорма = ПараметрыФормы.мВыбраннаяФорма = "ОсновнаяФорма";
		
		Попытка
			
			КлючУникальности = СохраненныйДок;
			
			ИмяФормыОтчета = ПараметрыФормы.ИмяФормыОтчета;
			
			Если ЭтоСтартоваяФорма Тогда
				ФормаОтчета = ПолучитьФорму(ИмяФормыОтчета, ПараметрыФормы, , ИмяФормыОтчета);
			Иначе
				ФормаОтчета = ПолучитьФорму(ИмяФормыОтчета, ПараметрыФормы, , КлючУникальности);
			КонецЕсли;
			
			ФормаОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыФормы.Организация;
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Если ИнформацияОбОшибке.Причина = Неопределено Тогда
				Сообщение.Текст = НСтр("ru='При открытии формы регламентированного отчета произошла ошибка!'");
			ИначеЕсли Найти(ИнформацияОбОшибке.Причина.Описание, ".Форма.") > 0 Тогда
				Сообщение.Текст = НСтр("ru='Отчет не может быть открыт! Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.'");
			Иначе
				Сообщение.Текст = ИнформацияОбОшибке.Причина.Описание;
			КонецЕсли;
			
			Сообщение.Сообщить();
			
			Возврат Неопределено;
			
		КонецПопытки;
		
		Если ЭтоСтартоваяФорма Тогда
			
			// Сначала попробуем найти его среди открытых стартовых форм.
			// Необходимо для предотвращения открытия нескольких стартовых форм одного отчета.
			НайденоОкно = Ложь;
			
			РегламентированнаяОтчетностьКлиент.ВебКлиентНайтиАктивизироватьОкно(ИмяФормыОтчета, ЭтаФорма, НайденоОкно);
			
			Если НайденоОкно <> Неопределено Тогда
				Если НайденоОкно Тогда
					
					Возврат Неопределено;
					
				КонецЕсли;
			КонецЕсли;
			
			ФормаОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			
		КонецЕсли;
		
		ФормаОтчета.ЗакрыватьПриЗакрытииВладельца = Ложь;
		
		Возврат ФормаОтчета;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыОтчетаИзДокументаНаСервере(СохраненныйДок)
	
	Если СохраненныйДок = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОбъектОтчет = РегламентированнаяОтчетность.РеглОтчеты(СохраненныйДок.ИсточникОтчета);
	
	Если ОбъектОтчет = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось открыть сохраненные данные! Отчет не найден!'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ВариантФормыОтчета = ?(Найти(ОбъектОтчет, "ОтчетМенеджер") > 0, "Отчет.", "ВнешнийОтчет.");
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", НачалоДня(СохраненныйДок.ДатаНачала));
	ПараметрыФормы.Вставить("мСкопированаФорма",        Неопределено);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  КонецДня(СохраненныйДок.ДатаОкончания));
	ПараметрыФормы.Вставить("мПериодичность",           СохраненныйДок.Периодичность);
	ПараметрыФормы.Вставить("Организация",              СохраненныйДок.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          СохраненныйДок.ВыбраннаяФорма);
	ПараметрыФормы.Вставить("ВидДокумента",             СохраненныйДок.Вид);
	ПараметрыФормы.Вставить("НеОтображатьПредупреждение", Истина);
	ПараметрыФормы.Вставить("ПредставлениеВидаОтчета",  СохраненныйДок.НаименованиеОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          СохраненныйДок);
	
	ИмяФормыОтчета = ВариантФормыОтчета + СохраненныйДок.ИсточникОтчета + ".Форма." + СохраненныйДок.ВыбраннаяФорма;
	
	ПараметрыФормы.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДаннымиСохраненныйДокумент(СохраненныйДок, ДеревоВыгрузки, СтруктураПараметров, ОписаниеОшибки = Неопределено)
	
	Перем ПоказателиОтчета;
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариантовАвтоЗаполнения;
	
	СохраненныйДокОбъект = СохраненныйДок.ПолучитьОбъект();
	СохраненныйДокОбъект.Комментарий = "Консолидированная (" + Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг ЧЧ:мм:сс") + ")";

	// Извлекаем структуру сохраненных данных отчета
	СтруктураДанныхОтчета = СохраненныйДокОбъект.ДанныеОтчета.Получить();
	
	// Данные редактируемых ячеек
	СтруктураДанныхОтчета.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	// Данные многострочных разделов
	СтруктураДанныхОтчета.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	// Данные многостраничных разделов.
	СтруктураДанныхОтчета.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	// Данные вариантов автозаполнения ячеек
	СтруктураДанныхОтчета.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	ЗаполнитьДаннымиСохраненныйДокумент_ОсновныеРазделы(ДеревоВыгрузки
	, ПоказателиОтчета, ДанныеМногострочныхРазделов, ДанныеМногостраничныхРазделов, ДанныеВариантовАвтоЗаполнения);
	
	СтруктураДанныхОтчета.Вставить("УспешноеАвтозаполнение", Истина);
	
	// Сохраняем структуру данных отчета
	ХранилищеДанных = Новый ХранилищеЗначения(СтруктураДанныхОтчета);
	СохраненныйДокОбъект.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СохраненныйДокОбъект.Записать();
	Исключение
		ОписаниеОшибки = РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиСохраненныйДокумент_ОсновныеРазделы(ДеревоВыгрузки
															, ПоказателиОтчета
															, ДанныеМногострочныхРазделов
															, ДанныеМногостраничныхРазделов
															, ДанныеВариантовАвтоЗаполнения)
	Префикс = "ПолеТабличногоДокумента";
	
	УзелНДС = ДеревоВыгрузки.Строки.Найти("НДС", "Код", Истина);
	
	// Не многостраничные разделы
	Если ТипЗнч(ПоказателиОтчета) = Тип("Структура") Тогда
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			
			ИмяРаздела = СтрЗаменить(Раздел.Ключ, Префикс, "");
			ДанныеРаздела = Раздел.Значение;
			УзлыСтрок = Новый Массив;
			ГруппаСтрок = Неопределено;
			
			// Титульный
			Если ИмяРаздела = "Титульный" Тогда
				
				ДанныеРаздела.НомерКорректировки = ЧислоИзСтроки(ПараметрыВыгрузки.ВидДок);
				
				ДанныеРаздела.ОтчетГод = ПараметрыВыгрузки.ГодПериодОтч;
				ДанныеРаздела.Период   = ПараметрыВыгрузки.ПериодОтч;
				ДанныеРаздела.ПоМесту  = ПараметрыВыгрузки.ПоМесту;
				
				Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
					ДанныеРаздела.НаимОрг = СокрЛП(СтрЗаменить(
						ПараметрыВыгрузки.ФамилияИП + " " + ПараметрыВыгрузки.ИмяИП + " " + ПараметрыВыгрузки.ОтчествоИП, "  ", " "));
				Иначе
					ДанныеРаздела.НаимОрг  = ПараметрыВыгрузки.НаимОрг;
				КонецЕсли;
				ДанныеРаздела.КодИМНС  = ПараметрыВыгрузки.КодИФНС;
				ДанныеРаздела.ОКВЭД    = ПараметрыВыгрузки.ОКВЭДОрг;
				ДанныеРаздела.ТелОрганизации = ПараметрыВыгрузки.ТелОрг;
				
				ДанныеРаздела.ИНН1 = ПараметрыВыгрузки.ИННОрг;
				ДанныеРаздела.КПП1 = ПараметрыВыгрузки.КППОрг;
				
				ДанныеРаздела.КодФормыРеорганизации          = ПараметрыВыгрузки.КодФормРеорг;
				ДанныеРаздела.ИННРеорганизованнойОрганизации = ПараметрыВыгрузки.ИННОргРеорг;
				ДанныеРаздела.КППРеорганизованнойОрганизации = ПараметрыВыгрузки.КППОргРеорг;
				
				ДанныеРаздела.ОргУп     = ПараметрыВыгрузки.НаимОргПредставителя;
				ДанныеРаздела.ДокУпПред = ПараметрыВыгрузки.НаимДокПредставителя;
				
				ДанныеРаздела.ПрПодп = ПараметрыВыгрузки.ТипПодписанта;
				ДанныеРаздела.ОргПодписант = СокрЛП(СтрЗаменить(
					ПараметрыВыгрузки.ФамилияПодписанта + " " + ПараметрыВыгрузки.ИмяПодписанта + " " + ПараметрыВыгрузки.ОтчествоПодписанта, "  ", " "));
					
			// Другие не многостраничные разделы
			Иначе
				
				УзлыРаздела = УзелНДС.Строки.НайтиСтроки(Новый Структура("Раздел", ИмяРаздела), Истина);
				
				Для Каждого УзелРаздела Из УзлыРаздела Цикл
					Если ЗначениеЗаполнено(УзелРаздела.Ключ) Тогда
						
						Если УзелРаздела.Родитель.Многострочность Тогда
							Продолжить;
						КонецЕсли;
						
						Ключ = УзелРаздела.Ключ;
						Значение = УзелРаздела.Значение;
						
						Если Ключ = "П000100004003" Тогда
							Если Лев(Значение, 1) = "-" Тогда
								Ключ = "П000100005003";
								Значение = Сред(Значение, 2);
							КонецЕсли;
						ИначеЕсли Ключ = "П000300020003" Тогда
							Если Лев(Значение, 1) = "-" Тогда
								Ключ = "П000300021003";
								Значение = Сред(Значение, 2);
							КонецЕсли;
						ИначеЕсли Ключ = "П000400012003" Тогда
							Если Лев(Значение, 1) = "-" Тогда
								Ключ = "П000400013003";
								Значение = Сред(Значение, 2);
							КонецЕсли;
						ИначеЕсли Ключ = "П000600016003" Тогда
							Если Лев(Значение, 1) = "-" Тогда
								Ключ = "П000600017003";
								Значение = Сред(Значение, 2);
							КонецЕсли;
						КонецЕсли;
						
						ЗначениеПоказателя = Неопределено;
						Если ДанныеРаздела.Свойство(Ключ, ЗначениеПоказателя) Тогда
							ДанныеРаздела[Ключ] = ?(ТипЗнч(ЗначениеПоказателя) = Тип("Число"), ЧислоИзСтроки(Значение)
												, ?(ТипЗнч(ЗначениеПоказателя) = Тип("Дата"), ДатаИзСтроки(Значение), СокрЛП(Значение)));
						КонецЕсли;
							
					ИначеЕсли УзелРаздела.Многострочность Тогда
						
						УзлыСтрок.Добавить(УзелРаздела);
						
					КонецЕсли;
				КонецЦикла;
				
				// Заполняем многострочные части разделов, если существуют
				Если УзлыСтрок.Количество() > 0 И ТипЗнч(ДанныеМногострочныхРазделов) = Тип("Структура") Тогда
					
					Для Каждого ГруппаСтрокРаздела Из ДанныеМногострочныхРазделов Цикл
						ГруппаНайдена = Ложь;
						Для Каждого УзелСтроки Из УзлыСтрок[0].Строки Цикл
							Если ВРег(ГруппаСтрокРаздела.Ключ) = ВРег(Лев(УзелСтроки.Ключ, СтрДлина(ГруппаСтрокРаздела.Ключ))) Тогда
								ГруппаНайдена = Истина;
								Прервать;
							КонецЕсли; 
						КонецЦикла;
						Если ГруппаНайдена Тогда
							ГруппаСтрок = ГруппаСтрокРаздела.Значение;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ГруппаСтрок <> Неопределено Тогда
						ИндексСтроки = 0;
						Для Каждого УзелСтроки Из УзлыСтрок Цикл
							
							СтрокаТаблицы = ?(ГруппаСтрок.Количество() > ИндексСтроки, ГруппаСтрок[ИндексСтроки], ГруппаСтрок.Добавить());
							
							Для Каждого УзелПоказатель Из УзелСтроки.Строки Цикл
								Если ЗначениеЗаполнено(УзелПоказатель.Ключ) Тогда
									НайденнаяКолонка = ГруппаСтрок.Колонки.Найти(УзелПоказатель.Ключ);
									Если НайденнаяКолонка <> Неопределено Тогда
										ЗначениеПоказателя = ?(НайденнаяКолонка.ТипЗначения.СодержитТип(Тип("Число")), ЧислоИзСтроки(УзелПоказатель.Значение)
											, ?(НайденнаяКолонка.ТипЗначения.СодержитТип(Тип("Дата")), ДатаИзСтроки(УзелПоказатель.Значение), СокрЛП(УзелПоказатель.Значение)));
										СтрокаТаблицы[УзелПоказатель.Ключ] = НайденнаяКолонка.ТипЗначения.ПривестиЗначение(ЗначениеПоказателя);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							ИндексСтроки = ИндексСтроки + 1;
							
							Для Каждого Колонка Из ГруппаСтрок.Колонки Цикл
								ДанныеРаздела.Вставить(Колонка.Имя + "_" + Формат(ИндексСтроки, "ЧН=; ЧГ=0"), СтрокаТаблицы[Колонка.Имя]);
							КонецЦикла;
						КонецЦикла;
						
						Если ИмяРаздела = "Раздел3_Прил2" Тогда
							ДанныеРаздела.Вставить("П000320000202", ГруппаСтрок.Итог("П000320000102"));
							ДанныеРаздела.Вставить("П000320000203", ГруппаСтрок.Итог("П000320000103"));
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Многостраничные разделы
	Если ТипЗнч(ДанныеМногостраничныхРазделов) = Тип("Структура") Тогда
		Для Каждого Раздел Из ДанныеМногостраничныхРазделов Цикл
			
			ИмяРаздела = СтрЗаменить(Раздел.Ключ, Префикс, "");
			СтраницыРаздела = Раздел.Значение;
			
			УзлыСтраницРаздела = УзелНДС.Строки.НайтиСтроки(Новый Структура("Раздел,Многостраничность", ИмяРаздела, Истина), Истина);
			
			Если СтраницыРаздела.Количество() > 0 Тогда
				
				ДанныеШаблон = СкопироватьСтруктуру(СтраницыРаздела[0].Данные);
				АвтоматическоеПредставление = СтраницыРаздела[0].АвтоматическоеПредставление;
				
				ИндексСтраницы = 0;
				Для Каждого УзелСтраницыРаздела Из УзлыСтраницРаздела Цикл
					ТекущаяСтраница = ?(СтраницыРаздела.Количество() > ИндексСтраницы, СтраницыРаздела[ИндексСтраницы], СтраницыРаздела.Добавить());
					ИндексСтраницы = ИндексСтраницы + 1;
					
					ТекущаяСтраница.Представление = "Лист N " + Формат(ИндексСтраницы, "ЧН=; ЧГ=0");
					ТекущаяСтраница.Данные = СкопироватьСтруктуру(ДанныеШаблон);
					ТекущаяСтраница.АктивнаяСтраница = Ложь;
					ТекущаяСтраница.АвтоматическоеПредставление = АвтоматическоеПредставление;
					
					УзлыСтраницы = УзелСтраницыРаздела.Строки.НайтиСтроки(Новый Структура("Раздел", ИмяРаздела), Истина);
					ДанныеСтраницы = ТекущаяСтраница.Данные;
					УзлыСтрок = Новый Массив;
					ГруппаСтрок = Неопределено;
					
					//Заполняем данными страницу раздела
					Для Каждого УзелСтраницы Из УзлыСтраницы Цикл
						Если ЗначениеЗаполнено(УзелСтраницы.Ключ) Тогда
							
							Если УзелСтраницы.Родитель.Многострочность Тогда
								Продолжить;
							КонецЕсли;
							
							Ключ = УзелСтраницы.Ключ;
							Значение = УзелСтраницы.Значение;
							
							Если Ключ = "П000200002003_1" Тогда
								Ключ = "П000200002003";
								Фамилия = СокрЛП(Значение);
								УзелИмя = УзелСтраницы.Родитель.Строки.Найти("П000200002003_2", "Ключ");
								Имя = ?(УзелИмя = Неопределено, "", СокрЛП(УзелИмя.Значение));
								УзелОтчество = УзелСтраницы.Родитель.Строки.Найти("П000200002003_3", "Ключ");
								Отчество = ?(УзелОтчество = Неопределено, "", СокрЛП(УзелОтчество.Значение));
								Значение = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
							ИначеЕсли Ключ = "П100310002002" Тогда
								Ключ = "П000310002002";
							КонецЕсли;
							
							ЗначениеПоказателя = Неопределено;
							Если ДанныеСтраницы.Свойство(Ключ, ЗначениеПоказателя) Тогда
								ДанныеСтраницы[Ключ] = ?(ТипЗнч(ЗначениеПоказателя) = Тип("Число"), ЧислоИзСтроки(Значение)
													 , ?(ТипЗнч(ЗначениеПоказателя) = Тип("Дата"), ДатаИзСтроки(Значение), СокрЛП(Значение)));
							КонецЕсли;
							
						ИначеЕсли УзелСтраницы.Многострочность Тогда
							
							УзлыСтрок.Добавить(УзелСтраницы);
							
						КонецЕсли;
					КонецЦикла;
					
					// Заполняем многострочную часть страницы, если существует
					Если УзлыСтрок.Количество() > 0 И ТипЗнч(ДанныеМногострочныхРазделов) = Тип("Структура") Тогда
						
						Для Каждого ГруппаСтрокРаздела Из ДанныеМногострочныхРазделов Цикл
							ГруппаНайдена = Ложь;
							Для Каждого УзелСтроки Из УзлыСтрок[0].Строки Цикл
								Если ВРег(ГруппаСтрокРаздела.Ключ) = ВРег(Лев(УзелСтроки.Ключ, СтрДлина(ГруппаСтрокРаздела.Ключ))) Тогда
									ГруппаНайдена = Истина;
									Прервать;
								КонецЕсли; 
							КонецЦикла;
							Если ГруппаНайдена Тогда
								ГруппаСтрок = ГруппаСтрокРаздела.Значение.Скопировать();
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ГруппаСтрок <> Неопределено Тогда
							ИндексСтроки = 0;
							Для Каждого УзелСтроки Из УзлыСтрок Цикл
								
								СтрокаТаблицы = ?(ГруппаСтрок.Количество() > ИндексСтроки, ГруппаСтрок[ИндексСтроки], ГруппаСтрок.Добавить());
								
								Для Каждого УзелПоказатель Из УзелСтроки.Строки Цикл
									Если ЗначениеЗаполнено(УзелПоказатель.Ключ) Тогда
										НайденнаяКолонка = ГруппаСтрок.Колонки.Найти(УзелПоказатель.Ключ);
										Если НайденнаяКолонка <> Неопределено Тогда
											ЗначениеПоказателя = ?(НайденнаяКолонка.ТипЗначения.СодержитТип(Тип("Число")), ЧислоИзСтроки(УзелПоказатель.Значение)
												, ?(НайденнаяКолонка.ТипЗначения.СодержитТип(Тип("Дата")), ДатаИзСтроки(УзелПоказатель.Значение), СокрЛП(УзелПоказатель.Значение)));
											СтрокаТаблицы[УзелПоказатель.Ключ] = НайденнаяКолонка.ТипЗначения.ПривестиЗначение(ЗначениеПоказателя);
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								
								ИндексСтроки = ИндексСтроки + 1;
								
								Для Каждого Колонка Из ГруппаСтрок.Колонки Цикл
									ДанныеСтраницы.Вставить(Колонка.Имя + "_" + Формат(ИндексСтроки, "ЧН=; ЧГ=0"), СтрокаТаблицы[Колонка.Имя]);
								КонецЦикла;
							КонецЦикла;
							
							Если ИмяРаздела = "Раздел3_Прил1" Тогда
								ДанныеСтраницы.Вставить("П000310009004", ГруппаСтрок.Итог("П000310008004"));
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтраницыРаздела.Колонки.Найти("ДанныеДопСтраниц") <> Неопределено Тогда
						Если ГруппаСтрок <> Неопределено Тогда
							ТекущаяСтраница.ДанныеДопСтраниц = ГруппаСтрок;
						Иначе
							ТекущаяСтраница.ДанныеДопСтраниц = Новый Структура;
						КонецЕсли;
					КонецЕсли;
					
					Если ИмяРаздела = "Раздел5" Тогда
						УзелСумВозмПдтв    = УзелСтраницыРаздела.Родитель.Строки.Найти("СумВозмПдтв", "Код");
						УзелСумВозмНеПдтв  = УзелСтраницыРаздела.Родитель.Строки.Найти("СумВозмНеПдтв", "Код");
						ДанныеСтраницы.Вставить("П000500008003", ?(УзелСумВозмПдтв = Неопределено, 0, ЧислоИзСтроки(УзелСумВозмПдтв.Значение)));
						ДанныеСтраницы.Вставить("П000500009003", ?(УзелСумВозмНеПдтв = Неопределено, 0, ЧислоИзСтроки(УзелСумВозмНеПдтв.Значение)));
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВСегментДанныхСтрокуРаздела8(СтрокаРаздела8, СтруктураПараметров)
	
	Если СтруктураПараметров.СохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел8;
	
	Если ПараметрыРаздела.НомерПП = 0 Тогда
	
		ПараметрыРаздела.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупок";
		ПараметрыРаздела.ТабличныйДокумент.АвтоМасштаб = Истина;
		ПараметрыРаздела.ТабличныйДокумент.ЧерноБелаяПечать = Истина;
		
		ПараметрыРаздела.Вставить("Макет", РеквизитФормыВЗначение("Объект").ПолучитьМакет("КнигаПокупок735"));
		
		ПараметрыРаздела.Вставить("ШапкаРаздел8", ПараметрыРаздела.Макет.ПолучитьОбласть("ШапкаРаздел8"));
		ПараметрыРаздела.Вставить("СтрокиДляПовтора", ПараметрыРаздела.Макет.ПолучитьОбласть("СтрокиДляПовтора"));
		ПараметрыРаздела.Вставить("СекцияСтрока", ПараметрыРаздела.Макет.ПолучитьОбласть("Строка"));
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел8);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СтрокиДляПовтора);
	
	КонецЕсли;
	
	ПараметрыСтроки = ПараметрыРаздела.СекцияСтрока.Параметры;
		
	ПараметрыРаздела.НомерПП = ПараметрыРаздела.НомерПП + 1;
	ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
	
	СтрокаРаздела8.НомерПор = ПараметрыРаздела.НомерПП;
	
	ПараметрыСтроки.Ном = СтрокаРаздела8.НомерПор;
	ПараметрыСтроки.КодОперации = МассивВСтрокуСРазделителями(СтрокаРаздела8.КодВидОпер, ";");
	ПараметрыСтроки.НомерДата = ?(ЗначениеЗаполнено(СтрокаРаздела8.НомСчФПрод), "" + СтрокаРаздела8.НомСчФПрод + ";", "")
		+ СтрокаРаздела8.ДатаСчФПрод;
	ПараметрыСтроки.НомерДатаИсправления = ?(ЗначениеЗаполнено(СтрокаРаздела8.НомИспрСчФ), "" + СтрокаРаздела8.НомИспрСчФ + ";", "")
		+ СтрокаРаздела8.ДатаИспрСчФ;
	ПараметрыСтроки.НомерДатаКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела8.НомКСчФПрод), "" + СтрокаРаздела8.НомКСчФПрод + ";", "")
		+ СтрокаРаздела8.ДатаКСчФПрод;
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела8.НомИспрКСчФ), "" + СтрокаРаздела8.НомИспрКСчФ + ";", "")
		+ СтрокаРаздела8.ДатаИспрКСчФ;
	
	ПродавцыИНН_КПП = "";  ПродавцыНаименование = "";
	Для Каждого СведенияОПродавце Из СтрокаРаздела8.СвПрод Цикл
		ИННПродавца = Неопределено; КПППродавца = Неопределено;
		ПолучитьИНН_КПП_ИзСтруктуры(ИННПродавца, КПППродавца, СведенияОПродавце);
		ИНН_КПП = СокрЛП(ИННПродавца) + ?(ЗначениеЗаполнено(КПППродавца), "/" + СокрЛП(КПППродавца), "");
		ПродавцыИНН_КПП = ПродавцыИНН_КПП + ?(ЗначениеЗаполнено(ПродавцыИНН_КПП), "; ", "") + ИНН_КПП;
		
		ПродавецНаименование = Неопределено;
		Продавец = КонтрагентПоИННСУчетомКэша(ИННПродавца, ПродавецНаименование, КэшКонтрагентов);
		ПродавцыНаименование = ПродавцыНаименование + ?(ЗначениеЗаполнено(ПродавцыНаименование), "; ", "") + ПродавецНаименование;
	КонецЦикла;
	ПараметрыСтроки.Продавец = ПродавцыНаименование;
	ПараметрыСтроки.Графа10 = ПродавцыИНН_КПП;
	
	ИННПосредника = Неопределено; КПППосредника = Неопределено;
	ПолучитьИНН_КПП_ИзСтруктуры(ИННПосредника, КПППосредника, СтрокаРаздела8.СвПос);
	ПараметрыСтроки.ПосредникИНН_КПП = СокрЛП(ИННПосредника) + ?(ЗначениеЗаполнено(КПППосредника), "/" + СокрЛП(КПППосредника), "");
	Посредник = КонтрагентПоИННСУчетомКэша(ИННПосредника, ПараметрыСтроки.Посредник, КэшКонтрагентов);
	
	НомераДатыДокументов = "";
	Для Каждого НомерДатаДок Из СтрокаРаздела8.ДокПдтвУпл Цикл
		НомерДокумента = Неопределено;
		НомерДатаДок.Свойство("НомДокПдтвУпл", НомерДокумента);
		ДатаДокумента = Неопределено;
		НомерДатаДок.Свойство("ДатаДокПдтвУпл", ДатаДокумента);
		НомерДатаДокумента = ?(ЗначениеЗаполнено(НомерДокумента), "" + НомерДокумента + ";", "") + ДатаДокумента;
		НомераДатыДокументов = НомераДатыДокументов + ?(ЗначениеЗаполнено(НомераДатыДокументов), "," + Символы.ПС, "") + НомерДатаДокумента;
	КонецЦикла;
	ПараметрыСтроки.НомерДатаОплаты = НомераДатыДокументов;
	
	НаименованиеВалюты = Неопределено;
	Если ВалютаПоКодуСУчетомКэша(СтрокаРаздела8.ОКВ, НаименованиеВалюты, КэшВалют).Пустая() Тогда
		ПараметрыСтроки.Валюта = СокрЛП(СтрокаРаздела8.ОКВ);
	Иначе
		ПараметрыСтроки.Валюта = СокрЛП(НаименованиеВалюты) + ", " + СтрокаРаздела8.ОКВ;
	КонецЕсли;
	
	ПараметрыСтроки.ДатаОприходования = МассивВСтрокуСРазделителями(СтрокаРаздела8.ДатаУчТов, ";");
	ПараметрыСтроки.НомерГТД_ = ?(ЗначениеЗаполнено(СтрокаРаздела8.НомТД), СтрокаРаздела8.НомТД, Неопределено);
	ПараметрыСтроки.ВсегоПокупок = СтрокаРаздела8.СтоимПокупВ;
	ПараметрыСтроки.НДС = СтрокаРаздела8.СумНДСВыч;
	
	ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СекцияСтрока);
	
	Если ПараметрыРаздела.ПоследняяСтрока = Истина Тогда
		СекцияВсего = ПараметрыРаздела.Макет.ПолучитьОбласть("Всего");
		
		СтруктураПараметров.ИтогиРаздел8.Свойство("СумНДСВсКПк", СекцияВсего.Параметры.НДС);
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(СекцияВсего);
	КонецЕсли;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Запишем сегмент
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел8);
		
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
		// Очистим табличный документ и таблицу
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел8);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СтрокиДляПовтора);
		
		СтруктураПараметров.ТаблицаРаздел8.Очистить();
		
		// Обнулим счетчик текущего сегмента
		ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоследнийСегментДанныхРаздела8(СтруктураПараметров)
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел8;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> 0
		И ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Записать сегменты
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел8);
			
		СтруктураПараметров.ТаблицаРаздел8.Очистить();
			
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
	КонецЕсли;
	
	Если ПараметрыРаздела.НомерПП > 0 Тогда
		РегламентированнаяОтчетность.ЗаписатьИтогиРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8",
			СтруктураПараметров.ИтогиРаздел8);
			
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 8'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВСегментДанныхСтрокуРаздела81(СтрокаРаздела81, СтруктураПараметров)
	
	Если СтруктураПараметров.СохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел81;
	
	Если ПараметрыРаздела.НомерПП = 0 Тогда
	
		ПараметрыРаздела.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
		ПараметрыРаздела.ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПараметрыРаздела.ТабличныйДокумент.ЧерноБелаяПечать = Истина;
		ПараметрыРаздела.ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупокДопЛист";
		ПараметрыРаздела.ТабличныйДокумент.АвтоМасштаб = Истина;
		
		ПараметрыРаздела.Вставить("Макет", РеквизитФормыВЗначение("Объект").ПолучитьМакет("ДополнительныйЛистКнигиПокупок735"));
		
		ПараметрыРаздела.Вставить("ШапкаРаздел81", ПараметрыРаздела.Макет.ПолучитьОбласть("ШапкаРаздел81"));
		ПараметрыРаздела.Вставить("СтрокиДляПовтора", ПараметрыРаздела.Макет.ПолучитьОбласть("СтрокиДляПовтора"));
		ПараметрыРаздела.Вставить("СекцияСтрока", ПараметрыРаздела.Макет.ПолучитьОбласть("Строка"));
		ПараметрыРаздела.Вставить("СекцияИтого", ПараметрыРаздела.Макет.ПолучитьОбласть("Итого"));
		
		ВывестиШапкуРаздела81Декларации(ПараметрыРаздела.ТабличныйДокумент, ПараметрыРаздела.Макет, ТекущаяДатаСеанса(), 1);
		
		СтруктураПараметров.ИтогиРаздел81.Свойство("СумНДСИтКПк", ПараметрыРаздела.СекцияИтого.Параметры.НДС);
		//ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СекцияИтого);
	
	КонецЕсли;
	
	ПараметрыСтроки = ПараметрыРаздела.СекцияСтрока.Параметры;
	
	ПараметрыРаздела.НомерПП = ПараметрыРаздела.НомерПП + 1;
	ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
	
	СтрокаРаздела81.НомерПор = ПараметрыРаздела.НомерПП;
	
	ПараметрыСтроки.Ном = СтрокаРаздела81.НомерПор;
	ПараметрыСтроки.КодОперации = МассивВСтрокуСРазделителями(СтрокаРаздела81.КодВидОпер, ";");
	ПараметрыСтроки.НомерДата = ?(ЗначениеЗаполнено(СтрокаРаздела81.НомСчФПрод), "" + СтрокаРаздела81.НомСчФПрод + ";", "")
		+ СтрокаРаздела81.ДатаСчФПрод;
	ПараметрыСтроки.НомерДатаИсправления = ?(ЗначениеЗаполнено(СтрокаРаздела81.НомИспрСчФ), "" + СтрокаРаздела81.НомИспрСчФ + ";", "")
		+ СтрокаРаздела81.ДатаИспрСчФ;
	ПараметрыСтроки.НомерДатаКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела81.НомКСчФПрод), "" + СтрокаРаздела81.НомКСчФПрод + ";", "")
		+ СтрокаРаздела81.ДатаКСчФПрод;
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела81.НомИспрКСчФ), "" + СтрокаРаздела81.НомИспрКСчФ + ";", "")
		+ СтрокаРаздела81.ДатаИспрКСчФ;
	
	ПараметрыСтроки.ДатаОприходования = МассивВСтрокуСРазделителями(СтрокаРаздела81.ДатаУчТов, ";");
	
	ПродавцыИНН_КПП = "";  ПродавцыНаименование = "";
	Для Каждого СведенияОПродавце Из СтрокаРаздела81.СвПрод Цикл
		ИННПродавца = Неопределено; КПППродавца = Неопределено;
		ПолучитьИНН_КПП_ИзСтруктуры(ИННПродавца, КПППродавца, СведенияОПродавце);
		ИНН_КПП = СокрЛП(ИННПродавца) + ?(ЗначениеЗаполнено(КПППродавца), "/" + СокрЛП(КПППродавца), "");
		ПродавцыИНН_КПП = ПродавцыИНН_КПП + ?(ЗначениеЗаполнено(ПродавцыИНН_КПП), "; ", "") + ИНН_КПП;
		
		ПродавецНаименование = Неопределено;
		Продавец = КонтрагентПоИННСУчетомКэша(ИННПродавца, ПродавецНаименование, КэшКонтрагентов);
		ПродавцыНаименование = ПродавцыНаименование + ?(ЗначениеЗаполнено(ПродавцыНаименование), "; ", "") + ПродавецНаименование;
	КонецЦикла;
	ПараметрыСтроки.Продавец = ПродавцыНаименование;
	ПараметрыСтроки.Графа10 = ПродавцыИНН_КПП;
	
	ИННПосредника = Неопределено; КПППосредника = Неопределено;
	ПолучитьИНН_КПП_ИзСтруктуры(ИННПосредника, КПППосредника, СтрокаРаздела81.СвПос);
	ПараметрыСтроки.ПосредникИНН_КПП = СокрЛП(ИННПосредника) + ?(ЗначениеЗаполнено(КПППосредника), "/" + СокрЛП(КПППосредника), "");
	Посредник = КонтрагентПоИННСУчетомКэша(ИННПосредника, ПараметрыСтроки.Посредник, КэшКонтрагентов);
	
	НомераДатыДокументов = "";
	Для Каждого НомерДатаДок Из СтрокаРаздела81.ДокПдтвУпл Цикл
		НомерДокумента = Неопределено;
		НомерДатаДок.Свойство("НомДокПдтвУпл", НомерДокумента);
		ДатаДокумента = Неопределено;
		НомерДатаДок.Свойство("ДатаДокПдтвУпл", ДатаДокумента);
		НомерДатаДокумента = ?(ЗначениеЗаполнено(НомерДокумента), "" + НомерДокумента + ";", "") + ДатаДокумента;
		НомераДатыДокументов = НомераДатыДокументов + ?(ЗначениеЗаполнено(НомераДатыДокументов), "," + Символы.ПС, "") + НомерДатаДокумента;
	КонецЦикла;
	ПараметрыСтроки.НомерДатаОплаты = НомераДатыДокументов;
	
	НаименованиеВалюты = Неопределено;
	Если ВалютаПоКодуСУчетомКэша(СтрокаРаздела81.ОКВ, НаименованиеВалюты, КэшВалют).Пустая() Тогда
		ПараметрыСтроки.Валюта = СокрЛП(СтрокаРаздела81.ОКВ);
	Иначе
		ПараметрыСтроки.Валюта = СокрЛП(НаименованиеВалюты) + ", " + СтрокаРаздела81.ОКВ;
	КонецЕсли;
	
	ПараметрыСтроки.ВсегоПокупок = СтрокаРаздела81.СтоимПокупВ;
	ПараметрыСтроки.НДС = СтрокаРаздела81.СумНДС;
	
	ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СекцияСтрока);
	
	Если ПараметрыРаздела.ПоследняяСтрока Тогда
		СекцияВсего = ПараметрыРаздела.Макет.ПолучитьОбласть("Всего");
		
		СекцияВсего.Параметры.НДС = СтруктураПараметров.ИтогиРаздел8.СумНДСВсКПк - СтруктураПараметров.ИтогиРаздел81.СумНДСИтКПк + СтруктураПараметров.ИтогиРаздел81.СумНДСИтП1Р8;
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(СекцияВсего);
	КонецЕсли;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Запишем сегмент
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8_Прил1",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел81);
		
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8_Прил1",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
		// Очистим табличный документ и таблицу
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел81);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СтрокиДляПовтора);
		
		СтруктураПараметров.ТаблицаРаздел81.Очистить();
		
		// Обнулим счетчик текущего сегмента
		ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоследнийСегментДанныхРаздела81(СтруктураПараметров)
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел81;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> 0
		И ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Записать сегменты
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8_Прил1",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел81);
			
			СтруктураПараметров.ТаблицаРаздел81.Очистить();
			
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8_Прил1",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
	КонецЕсли;
	
	Если ПараметрыРаздела.НомерПП > 0 Тогда
		РегламентированнаяОтчетность.ЗаписатьИтогиРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел8_Прил1",
			СтруктураПараметров.ИтогиРаздел81);
			
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 8 приложение 1'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВСегментДанныхСтрокуРаздела9(СтрокаРаздела9, СтруктураПараметров)
	
	Если СтруктураПараметров.СохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел9;
	
	Если ПараметрыРаздела.НомерПП = 0 Тогда
	
		ПараметрыРаздела.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.ЧерноБелаяПечать = Истина;
		ПараметрыРаздела.ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПродаж";
		
		ПараметрыРаздела.Вставить("Макет", РеквизитФормыВЗначение("Объект").ПолучитьМакет("КнигаПродаж735"));
		
		ПараметрыРаздела.Вставить("ШапкаРаздел9", ПараметрыРаздела.Макет.ПолучитьОбласть("ШапкаРаздел9"));
		ПараметрыРаздела.Вставить("СтрокиДляПовтора", ПараметрыРаздела.Макет.ПолучитьОбласть("СтрокиДляПовтора"));
		ПараметрыРаздела.Вставить("СекцияСтрока", ПараметрыРаздела.Макет.ПолучитьОбласть("Строка"));
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел9);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СтрокиДляПовтора);
		
	КонецЕсли;
	
	ПараметрыСтроки = ПараметрыРаздела.СекцияСтрока.Параметры;
	
	ПараметрыРаздела.НомерПП = ПараметрыРаздела.НомерПП + 1;
	ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
	
	СтрокаРаздела9.НомерПор = ПараметрыРаздела.НомерПП;
	
	ПараметрыСтроки.Ном = СтрокаРаздела9.НомерПор;
	ПараметрыСтроки.КодОперации = МассивВСтрокуСРазделителями(СтрокаРаздела9.КодВидОпер, ";");
	ПараметрыСтроки.НомерДата = ?(ЗначениеЗаполнено(СтрокаРаздела9.НомСчФПрод), "" + СтрокаРаздела9.НомСчФПрод + ";", "")
		+ СтрокаРаздела9.ДатаСчФПрод;
	ПараметрыСтроки.НомерДатаИсправления = ?(ЗначениеЗаполнено(СтрокаРаздела9.НомИспрСчФ), "" + СтрокаРаздела9.НомИспрСчФ + ";", "")
		+ СтрокаРаздела9.ДатаИспрСчФ;
	ПараметрыСтроки.НомерДатаКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела9.НомКСчФПрод), "" + СтрокаРаздела9.НомКСчФПрод + ";", "")
		+ СтрокаРаздела9.ДатаКСчФПрод;
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела9.НомИспрКСчФ), "" + СтрокаРаздела9.НомИспрКСчФ + ";", "")
		+ СтрокаРаздела9.ДатаИспрКСчФ;
	
	ПокупателиИНН_КПП = "";  ПокупателиНаименование = "";
	Для Каждого СведенияОПокупателе Из СтрокаРаздела9.СвПокуп Цикл
		ИННПокупателя = Неопределено; КПППокупателя = Неопределено;
		ПолучитьИНН_КПП_ИзСтруктуры(ИННПокупателя, КПППокупателя, СведенияОПокупателе);
		ИНН_КПП = СокрЛП(ИННПокупателя) + ?(ЗначениеЗаполнено(КПППокупателя), "/" + СокрЛП(КПППокупателя), "");
		ПокупателиИНН_КПП = ПокупателиИНН_КПП + ?(ЗначениеЗаполнено(ПокупателиИНН_КПП), "; ", "") + ИНН_КПП;
		
		ПокупательНаименование = Неопределено;
		Покупатель = КонтрагентПоИННСУчетомКэша(ИННПокупателя, ПокупательНаименование, КэшКонтрагентов);
		ПокупателиНаименование = ПокупателиНаименование + ?(ЗначениеЗаполнено(ПокупателиНаименование), "; ", "") + ПокупательНаименование;
	КонецЦикла;
	ПараметрыСтроки.Покупатель = ПокупателиНаименование;
	ПараметрыСтроки.Графа8 = ПокупателиИНН_КПП;
	
	ИННПосредника = Неопределено; КПППосредника = Неопределено;
	ПолучитьИНН_КПП_ИзСтруктуры(ИННПосредника, КПППосредника, СтрокаРаздела9.СвПос);
	ПараметрыСтроки.ПосредникИНН_КПП = СокрЛП(ИННПосредника) + ?(ЗначениеЗаполнено(КПППосредника), "/" + СокрЛП(КПППосредника), "");
	Посредник = КонтрагентПоИННСУчетомКэша(ИННПосредника, ПараметрыСтроки.Посредник, КэшКонтрагентов);
	
	НомераДатыДокументов = "";
	Для Каждого НомерДатаДок Из СтрокаРаздела9.ДокПдтвОпл Цикл
		НомерДокумента = Неопределено;
		НомерДатаДок.Свойство("НомДокПдтвОпл", НомерДокумента);
		ДатаДокумента = Неопределено;
		НомерДатаДок.Свойство("ДатаДокПдтвОпл", ДатаДокумента);
		НомерДатаДокумента = ?(ЗначениеЗаполнено(НомерДокумента), "" + НомерДокумента + ";", "") + ДатаДокумента;
		НомераДатыДокументов = НомераДатыДокументов + ?(ЗначениеЗаполнено(НомераДатыДокументов), "," + Символы.ПС, "") + НомерДатаДокумента;
	КонецЦикла;
	ПараметрыСтроки.НомерДатаОплаты = НомераДатыДокументов;
	
	НаименованиеВалюты = Неопределено;
	Если ВалютаПоКодуСУчетомКэша(СтрокаРаздела9.ОКВ, НаименованиеВалюты, КэшВалют).Пустая() Тогда
		ПараметрыСтроки.Валюта = СокрЛП(СтрокаРаздела9.ОКВ);
	Иначе
		ПараметрыСтроки.Валюта = СокрЛП(НаименованиеВалюты) + ", " + СтрокаРаздела9.ОКВ;
	КонецЕсли;
	
	ПараметрыСтроки.ВсегоПродажВВалюте = ?(ЗначениеЗаполнено(СтрокаРаздела9.СтоимПродСФВ), СтрокаРаздела9.СтоимПродСФВ, Неопределено);
	ПараметрыСтроки.ВсегоПродаж = ?(ЗначениеЗаполнено(СтрокаРаздела9.СтоимПродСФ), СтрокаРаздела9.СтоимПродСФ, Неопределено);
	ПараметрыСтроки.СуммаБезНДС18 = ?(ЗначениеЗаполнено(СтрокаРаздела9.СтоимПродСФ18), СтрокаРаздела9.СтоимПродСФ18, Неопределено);
	ПараметрыСтроки.СуммаБезНДС10 = ?(ЗначениеЗаполнено(СтрокаРаздела9.СтоимПродСФ10), СтрокаРаздела9.СтоимПродСФ10, Неопределено);
	ПараметрыСтроки.НДС0 = ?(ЗначениеЗаполнено(СтрокаРаздела9.СтоимПродСФ0), СтрокаРаздела9.СтоимПродСФ0, Неопределено);
	ПараметрыСтроки.НДС18 = ?(ЗначениеЗаполнено(СтрокаРаздела9.СумНДССФ18), СтрокаРаздела9.СумНДССФ18, Неопределено);
	ПараметрыСтроки.НДС10 = ?(ЗначениеЗаполнено(СтрокаРаздела9.СумНДССФ10), СтрокаРаздела9.СумНДССФ10, Неопределено);
	ПараметрыСтроки.СуммаСовсемБезНДС = ?(ЗначениеЗаполнено(СтрокаРаздела9.СтоимПродОсв), СтрокаРаздела9.СтоимПродОсв, Неопределено);
	
	ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СекцияСтрока);
	
	Если ПараметрыРаздела.ПоследняяСтрока = Истина Тогда
		СекцияВсего = ПараметрыРаздела.Макет.ПолучитьОбласть("Всего");
		
		ЗначениеСвойства = Неопределено;
		СтруктураПараметров.ИтогиРаздел9.Свойство("СтПродБезНДС18", ЗначениеСвойства);
		СекцияВсего.Параметры.СуммаБезНДС18 = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Неопределено);
		СтруктураПараметров.ИтогиРаздел9.Свойство("СтПродБезНДС10", ЗначениеСвойства);
		СекцияВсего.Параметры.СуммаБезНДС10 = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Неопределено);
		СтруктураПараметров.ИтогиРаздел9.Свойство("СтПродБезНДС0", ЗначениеСвойства);
		СекцияВсего.Параметры.НДС0 = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Неопределено);
		СтруктураПараметров.ИтогиРаздел9.Свойство("СумНДСВсКПр18", ЗначениеСвойства);
		СекцияВсего.Параметры.НДС18 = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Неопределено);
		СтруктураПараметров.ИтогиРаздел9.Свойство("СумНДСВсКПр10", ЗначениеСвойства);
		СекцияВсего.Параметры.НДС10 = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Неопределено);
		СтруктураПараметров.ИтогиРаздел9.Свойство("СтПродОсвВсКПр", ЗначениеСвойства);
		СекцияВсего.Параметры.СуммаСовсемБезНДС = ?(ЗначениеЗаполнено(ЗначениеСвойства), ЗначениеСвойства, Неопределено);
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(СекцияВсего);
	КонецЕсли;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Запишем сегмент
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел9);
		
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
		// Очистим табличный документ и таблицу
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел9);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СтрокиДляПовтора);
		
		СтруктураПараметров.ТаблицаРаздел9.Очистить();
		
		// Обнулим счетчик текущего сегмента
		ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоследнийСегментДанныхРаздела9(СтруктураПараметров)
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел9;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> 0
		И ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Записать сегменты
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел9);
			
			СтруктураПараметров.ТаблицаРаздел9.Очистить();
			
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
	КонецЕсли;
	
	Если ПараметрыРаздела.НомерПП > 0 Тогда
		РегламентированнаяОтчетность.ЗаписатьИтогиРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9",
			СтруктураПараметров.ИтогиРаздел9);
			
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 9'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВСегментДанныхСтрокуРаздела91(СтрокаРаздела91, СтруктураПараметров)
	
	Если СтруктураПараметров.СохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел91;
	
	Если ПараметрыРаздела.НомерПП = 0 Тогда
		
		ПараметрыРаздела.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПараметрыРаздела.ТабличныйДокумент.АвтоМасштаб = Истина;
		
		ПараметрыРаздела.Вставить("Макет", РеквизитФормыВЗначение("Объект").ПолучитьМакет("ДополнительныйЛистКнигиПродаж735"));
		
		ПараметрыРаздела.Вставить("ШапкаРаздел91", ПараметрыРаздела.Макет.ПолучитьОбласть("ШапкаРаздел91"));
		ПараметрыРаздела.Вставить("СтрокиДляПовтора", ПараметрыРаздела.Макет.ПолучитьОбласть("СтрокиДляПовтора"));
		ПараметрыРаздела.Вставить("СекцияСтрока", ПараметрыРаздела.Макет.ПолучитьОбласть("Строка"));
		ПараметрыРаздела.Вставить("СекцияИтого", ПараметрыРаздела.Макет.ПолучитьОбласть("Итого"));
		
		ВывестиШапкуРаздела91Декларации(ПараметрыРаздела.ТабличныйДокумент, ПараметрыРаздела.Макет, ТекущаяДатаСеанса(), 1);
		
		ИтогиРаздел91 = СтруктураПараметров.ИтогиРаздел91;
		
		ИтСтПродКПр18 = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС18;
		ПараметрыРаздела.СекцияИтого.Параметры.СуммаБезНДС18 = ?(ЗначениеЗаполнено(ИтСтПродКПр18), ИтСтПродКПр18, Неопределено);
		
		ИтСтПродКПр10 = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС10;
		ПараметрыРаздела.СекцияИтого.Параметры.СуммаБезНДС10 = ?(ЗначениеЗаполнено(ИтСтПродКПр10), ИтСтПродКПр10, Неопределено);
		
		ИтСтПродКПр0  = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС0;
		ПараметрыРаздела.СекцияИтого.Параметры.НДС0 = ?(ЗначениеЗаполнено(ИтСтПродКПр0), ИтСтПродКПр0, Неопределено);
		
		СумНДСИтКПр18 = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр18;
		ПараметрыРаздела.СекцияИтого.Параметры.НДС18 = ?(ЗначениеЗаполнено(СумНДСИтКПр18), СумНДСИтКПр18, Неопределено);
		
		СумНДСИтКПр10 = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр10;
		ПараметрыРаздела.СекцияИтого.Параметры.НДС10 = ?(ЗначениеЗаполнено(СумНДСИтКПр10), СумНДСИтКПр10, Неопределено);
		
		ИтСтПродОсвКПр = СтруктураПараметров.ИтогиРаздел9.СтПродОсвВсКПр;
		ПараметрыРаздела.СекцияИтого.Параметры.СуммаСовсемБезНДС = ?(ЗначениеЗаполнено(ИтСтПродОсвКПр), ИтСтПродОсвКПр, Неопределено);
		
		//ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СекцияИтого);
		
	КонецЕсли;
	
	ПараметрыСтроки = ПараметрыРаздела.СекцияСтрока.Параметры;
	
	ПараметрыРаздела.НомерПП = ПараметрыРаздела.НомерПП + 1;
	ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
	
	СтрокаРаздела91.НомерПор = ПараметрыРаздела.НомерПП;
	
	ПараметрыСтроки.Ном = СтрокаРаздела91.НомерПор;
	ПараметрыСтроки.КодОперации = МассивВСтрокуСРазделителями(СтрокаРаздела91.КодВидОпер, ";");
	ПараметрыСтроки.НомерДата = ?(ЗначениеЗаполнено(СтрокаРаздела91.НомСчФПрод), "" + СтрокаРаздела91.НомСчФПрод + ";", "")
		+ СтрокаРаздела91.ДатаСчФПрод;
	ПараметрыСтроки.НомерДатаИсправления = ?(ЗначениеЗаполнено(СтрокаРаздела91.НомИспрСчФ), "" + СтрокаРаздела91.НомИспрСчФ + ";", "")
		+ СтрокаРаздела91.ДатаИспрСчФ;
	ПараметрыСтроки.НомерДатаКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела91.НомКСчФПрод), "" + СтрокаРаздела91.НомКСчФПрод + ";", "")
		+ СтрокаРаздела91.ДатаКСчФПрод;
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела91.НомИспрКСчФ), "" + СтрокаРаздела91.НомИспрКСчФ + ";", "")
		+ СтрокаРаздела91.ДатаИспрКСчФ;
	
	ПокупателиИНН_КПП = "";  ПокупателиНаименование = "";
	Для Каждого СведенияОПокупателе Из СтрокаРаздела91.СвПокуп Цикл
		ИННПокупателя = Неопределено; КПППокупателя = Неопределено;
		ПолучитьИНН_КПП_ИзСтруктуры(ИННПокупателя, КПППокупателя, СведенияОПокупателе);
		ИНН_КПП = СокрЛП(ИННПокупателя) + ?(ЗначениеЗаполнено(КПППокупателя), "/" + СокрЛП(КПППокупателя), "");
		ПокупателиИНН_КПП = ПокупателиИНН_КПП + ?(ЗначениеЗаполнено(ПокупателиИНН_КПП), "; ", "") + ИНН_КПП;
		
		ПокупательНаименование = Неопределено;
		Покупатель = КонтрагентПоИННСУчетомКэша(ИННПокупателя, ПокупательНаименование, КэшКонтрагентов);
		ПокупателиНаименование = ПокупателиНаименование + ?(ЗначениеЗаполнено(ПокупателиНаименование), "; ", "") + ПокупательНаименование;
	КонецЦикла;
	ПараметрыСтроки.Покупатель = ПокупателиНаименование;
	ПараметрыСтроки.Графа8 = ПокупателиИНН_КПП;
	
	ИННПосредника = Неопределено; КПППосредника = Неопределено;
	ПолучитьИНН_КПП_ИзСтруктуры(ИННПосредника, КПППосредника, СтрокаРаздела91.СвПос);
	ПараметрыСтроки.ПосредникИНН_КПП = СокрЛП(ИННПосредника) + ?(ЗначениеЗаполнено(КПППосредника), "/" + СокрЛП(КПППосредника), "");
	Посредник = КонтрагентПоИННСУчетомКэша(ИННПосредника, ПараметрыСтроки.Посредник, КэшКонтрагентов);
	
	НомераДатыДокументов = "";
	Для Каждого НомерДатаДок Из СтрокаРаздела91.ДокПдтвОпл Цикл
		НомерДокумента = Неопределено;
		НомерДатаДок.Свойство("НомДокПдтвОпл", НомерДокумента);
		ДатаДокумента = Неопределено;
		НомерДатаДок.Свойство("ДатаДокПдтвОпл", ДатаДокумента);
		НомерДатаДокумента = ?(ЗначениеЗаполнено(НомерДокумента), "" + НомерДокумента + ";", "") + ДатаДокумента;
		НомераДатыДокументов = НомераДатыДокументов + ?(ЗначениеЗаполнено(НомераДатыДокументов), "," + Символы.ПС, "") + НомерДатаДокумента;
	КонецЦикла;
	ПараметрыСтроки.НомерДатаОплаты = НомераДатыДокументов;
	
	НаименованиеВалюты = Неопределено;
	Если ВалютаПоКодуСУчетомКэша(СтрокаРаздела91.ОКВ, НаименованиеВалюты, КэшВалют).Пустая() Тогда
		ПараметрыСтроки.Валюта = СокрЛП(СтрокаРаздела91.ОКВ);
	Иначе
		ПараметрыСтроки.Валюта = СокрЛП(НаименованиеВалюты) + ", " + СтрокаРаздела91.ОКВ;
	КонецЕсли;
	
	ПараметрыСтроки.ВсегоПродажВВалюте = ?(ЗначениеЗаполнено(СтрокаРаздела91.СтоимПродСФВ), СтрокаРаздела91.СтоимПродСФВ, Неопределено);
	ПараметрыСтроки.ВсегоПродаж = ?(ЗначениеЗаполнено(СтрокаРаздела91.СтоимПродСФ), СтрокаРаздела91.СтоимПродСФ, Неопределено);
	ПараметрыСтроки.СуммаБезНДС18 = ?(ЗначениеЗаполнено(СтрокаРаздела91.СтоимПродСФ18), СтрокаРаздела91.СтоимПродСФ18, Неопределено);
	ПараметрыСтроки.СуммаБезНДС10 = ?(ЗначениеЗаполнено(СтрокаРаздела91.СтоимПродСФ10), СтрокаРаздела91.СтоимПродСФ10, Неопределено);
	ПараметрыСтроки.НДС0 = ?(ЗначениеЗаполнено(СтрокаРаздела91.СтоимПродСФ0), СтрокаРаздела91.СтоимПродСФ0, Неопределено);
	ПараметрыСтроки.НДС18 = ?(ЗначениеЗаполнено(СтрокаРаздела91.СумНДССФ18), СтрокаРаздела91.СумНДССФ18, Неопределено);
	ПараметрыСтроки.НДС10 = ?(ЗначениеЗаполнено(СтрокаРаздела91.СумНДССФ10), СтрокаРаздела91.СумНДССФ10, Неопределено);
	ПараметрыСтроки.СуммаСовсемБезНДС = ?(ЗначениеЗаполнено(СтрокаРаздела91.СтоимПродОсв), СтрокаРаздела91.СтоимПродОсв, Неопределено);
	
	ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СекцияСтрока);
	
	Если ПараметрыРаздела.ПоследняяСтрока = Истина Тогда
		СекцияВсего = ПараметрыРаздела.Макет.ПолучитьОбласть("Всего");
		ИтогиРаздел91 = СтруктураПараметров.ИтогиРаздел91;
	
		СтПродВсП1Р9_18 = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС18 - ИтогиРаздел91.ИтСтПродКПр18 + ИтогиРаздел91.СтПродВсП1Р9_18;
		СекцияВсего.Параметры.СуммаБезНДС18 = ?(ЗначениеЗаполнено(СтПродВсП1Р9_18), СтПродВсП1Р9_18, Неопределено);
		
		СтПродВсП1Р9_10 = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС10 - ИтогиРаздел91.ИтСтПродКПр10 + ИтогиРаздел91.СтПродВсП1Р9_10;
		СекцияВсего.Параметры.СуммаБезНДС10 = ?(ЗначениеЗаполнено(СтПродВсП1Р9_10), СтПродВсП1Р9_10, Неопределено);
		
		СтПродВсП1Р9_0  = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС0 - ИтогиРаздел91.ИтСтПродКПр0 + ИтогиРаздел91.СтПродВсП1Р9_0;
		СекцияВсего.Параметры.НДС0 = ?(ЗначениеЗаполнено(СтПродВсП1Р9_0), СтПродВсП1Р9_0, Неопределено);
		
		СумНДСВсП1Р9_18 = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр18 - ИтогиРаздел91.СумНДСИтКПр18 + ИтогиРаздел91.СумНДСВсП1Р9_18;
		СекцияВсего.Параметры.НДС18 = ?(ЗначениеЗаполнено(СумНДСВсП1Р9_18), СумНДСВсП1Р9_18, Неопределено);
		
		СумНДСВсП1Р9_10 = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр10 - ИтогиРаздел91.СумНДСИтКПр10 + ИтогиРаздел91.СумНДСВсП1Р9_10;
		СекцияВсего.Параметры.НДС10 = ?(ЗначениеЗаполнено(СумНДСВсП1Р9_10), СумНДСВсП1Р9_10, Неопределено);
		
		СтПродОсвП1Р9Вс = СтруктураПараметров.ИтогиРаздел9.СтПродОсвВсКПр - ИтогиРаздел91.ИтСтПродОсвКПр + ИтогиРаздел91.СтПродОсвП1Р9Вс;
		СекцияВсего.Параметры.СуммаСовсемБезНДС = ?(ЗначениеЗаполнено(СтПродОсвП1Р9Вс), СтПродОсвП1Р9Вс, Неопределено);
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(СекцияВсего);
	КонецЕсли;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Запишем сегмент
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9_Прил1",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел91);
		
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9_Прил1",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
		// Очистим табличный документ и таблицу
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел91);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.СтрокиДляПовтора);
		
		СтруктураПараметров.ТаблицаРаздел91.Очистить();
		
		// Обнулим счетчик текущего сегмента
		ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоследнийСегментДанныхРаздела91(СтруктураПараметров)
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел91;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> 0
		И ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Записать сегменты
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9_Прил1",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел91);
			
			СтруктураПараметров.ТаблицаРаздел91.Очистить();
			
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9_Прил1",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
	КонецЕсли;
	
	Если ПараметрыРаздела.НомерПП > 0 Тогда
		РегламентированнаяОтчетность.ЗаписатьИтогиРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел9_Прил1",
			СтруктураПараметров.ИтогиРаздел91);
			
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 9 приложение 1'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВСегментДанныхСтрокуРаздела10(СтрокаРаздела10, СтруктураПараметров)
	
	Если СтруктураПараметров.СохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел10;
	
	Если ПараметрыРаздела.НомерПП = 0 Тогда
	
		ПараметрыРаздела.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналУчетаСчетовФактур";
		
		ПараметрыРаздела.Вставить("Макет", РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЖурналУчетаСчетовФактур735"));
		
		ПараметрыРаздела.Вставить("ШапкаРаздел10", ПараметрыРаздела.Макет.ПолучитьОбласть("ШапкаРаздел10"));
		ПараметрыРаздела.Вставить("ШапкаТаблицыРаздел10", ПараметрыРаздела.Макет.ПолучитьОбласть("ШапкаТаблицыРаздел10"));
		ПараметрыРаздела.Вставить("Часть1Строка", ПараметрыРаздела.Макет.ПолучитьОбласть("Часть1Строка"));
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел10);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаТаблицыРаздел10);
		
	КонецЕсли;
	
	ПараметрыСтроки = ПараметрыРаздела.Часть1Строка.Параметры;
	
	ПараметрыРаздела.НомерПП = ПараметрыРаздела.НомерПП + 1;
	ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
	
	СтрокаРаздела10.НомерПор = ПараметрыРаздела.НомерПП;
	
	МаксимальныйИндекс = Макс(0, СтрокаРаздела10.СвПосрДеят.ВГраница());
	Для Инд = 0 По МаксимальныйИндекс Цикл
		
		Если Инд = 0 Тогда
			
			Если МаксимальныйИндекс = 0 Тогда
				ПараметрыРаздела.Часть1Строка = ПараметрыРаздела.Макет.ПолучитьОбласть("Часть1Строка");
			Иначе
				ПараметрыРаздела.Часть1Строка = ПараметрыРаздела.Макет.ПолучитьОбласть("Часть1Строка_Многострочная1");
			КонецЕсли;
			ПараметрыСтроки = ПараметрыРаздела.Часть1Строка.Параметры;
			
			ПараметрыСтроки.Ном = СтрокаРаздела10.НомерПор;
			ПараметрыСтроки.ДатаПередачиПолучения = СтрокаРаздела10.ДатаВыст;
			ПараметрыСтроки.КодВидаОперации = МассивВСтрокуСРазделителями(СтрокаРаздела10.КодВидОпер, ";");
			ПараметрыСтроки.НомерДата = ?(ЗначениеЗаполнено(СтрокаРаздела10.НомСчФПрод), "" + СтрокаРаздела10.НомСчФПрод + ";", "")
				+ СтрокаРаздела10.ДатаСчФПрод;
			ПараметрыСтроки.НомерДатаИсправления = ?(ЗначениеЗаполнено(СтрокаРаздела10.НомИспрСчФ), "" + СтрокаРаздела10.НомИспрСчФ + ";", "")
				+ СтрокаРаздела10.ДатаИспрСчФ;
			ПараметрыСтроки.НомерДатаКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела10.НомКСчФПрод), "" + СтрокаРаздела10.НомКСчФПрод + ";", "")
				+ СтрокаРаздела10.ДатаКСчФПрод;
			ПараметрыСтроки.НомерДатаИсправленияКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела10.НомИспрКСчФ), "" + СтрокаРаздела10.НомИспрКСчФ + ";", "")
				+ СтрокаРаздела10.ДатаИспрКСчФ;
			
			ИННКонтрагента = Неопределено; КППКонтрагента = Неопределено;
			ПолучитьИНН_КПП_ИзСтруктуры(ИННКонтрагента, КППКонтрагента, СтрокаРаздела10.СвПокуп);
			
			ПараметрыСтроки.КонтрагентИННКПП = СокрЛП(ИННКонтрагента) + ?(ЗначениеЗаполнено(КППКонтрагента), "/" + СокрЛП(КППКонтрагента), "");
			
			Контрагент = КонтрагентПоИННСУчетомКэша(ИННКонтрагента, ПараметрыСтроки.КонтрагентНаименование, КэшКонтрагентов);
			
		КонецЕсли;
		
		Если Инд <= СтрокаРаздела10.СвПосрДеят.ВГраница() Тогда
			
			Если Инд > 0 Тогда
				Если Инд = СтрокаРаздела10.СвПосрДеят.ВГраница() Тогда
					ПараметрыРаздела.Часть1Строка = ПараметрыРаздела.Макет.ПолучитьОбласть("Часть1Строка_Многострочная3");
				Иначе
					ПараметрыРаздела.Часть1Строка = ПараметрыРаздела.Макет.ПолучитьОбласть("Часть1Строка_Многострочная2");
				КонецЕсли;
				ПараметрыСтроки = ПараметрыРаздела.Часть1Строка.Параметры;
			КонецЕсли;
			
			СвПосрДеят = СтрокаРаздела10.СвПосрДеят[Инд];
			Если ТипЗнч(СвПосрДеят) = Тип("Структура") Тогда
				
				СвПрод = Неопределено;
				СвПосрДеят.Свойство("СвПрод", СвПрод);
				ИННКомитента = Неопределено; КППКомитента = Неопределено;
				ПолучитьИНН_КПП_ИзСтруктуры(ИННКомитента, КППКомитента, СвПрод);
				
				ПараметрыСтроки.КомитентИНН_КПП = СокрЛП(ИННКомитента) + ?(ЗначениеЗаполнено(КППКомитента), "/" + СокрЛП(КППКомитента), "");
				
				Комитент = КонтрагентПоИННСУчетомКэша(ИННКомитента, ПараметрыСтроки.Комитент, КэшКонтрагентов);
				
				НомерСчетаФактурыКомитента = Неопределено;
				СвПосрДеят.Свойство("НомСчФОтПрод", НомерСчетаФактурыКомитента);
				ДатаСчетаФактурыКомитента = Неопределено;
				СвПосрДеят.Свойство("ДатаСчФОтПрод", ДатаСчетаФактурыКомитента);
				ПараметрыСтроки.НомерДатаСчетаФактурыКомитента = ?(ЗначениеЗаполнено(НомерСчетаФактурыКомитента)
					, "" + НомерСчетаФактурыКомитента + ";", "") + ДатаСчетаФактурыКомитента;
				
				КодВалюты = Неопределено; НаименованиеВалюты = Неопределено;
				Если СвПосрДеят.Свойство("ОКВ", КодВалюты) И НЕ ВалютаПоКодуСУчетомКэша(КодВалюты, НаименованиеВалюты, КэшВалют).Пустая() Тогда
					ПараметрыСтроки.Валюта = СокрЛП(НаименованиеВалюты) + ", " + КодВалюты;
				Иначе
					ПараметрыСтроки.Валюта = СокрЛП(КодВалюты);
				КонецЕсли;
				
				ЗначениеСвойства = Неопределено;
				Если СвПосрДеят.Свойство("СтоимТовСчФВс", ЗначениеСвойства)
					И (ЗначениеЗаполнено(ЗначениеСвойства) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРаздела10.НомКСчФПрод)) Тогда
					ПараметрыСтроки.СуммаДокумента = ЗначениеСвойства;
				Иначе
					ПараметрыСтроки.СуммаДокумента = Неопределено;
				КонецЕсли;
				Если СвПосрДеят.Свойство("СумНДССчФ", ЗначениеСвойства)
					И (ЗначениеЗаполнено(ЗначениеСвойства) ИЛИ НЕ ЗначениеЗаполнено(СтрокаРаздела10.НомКСчФПрод)) Тогда
					ПараметрыСтроки.СуммаНДС = ЗначениеСвойства;
				Иначе
					ПараметрыСтроки.СуммаНДС = Неопределено;
				КонецЕсли;
				Если СвПосрДеят.Свойство("РазСтКСчФУм", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					ПараметрыСтроки.СуммаДокументаРазницаУменьшение = ЗначениеСвойства;
				Иначе
					ПараметрыСтроки.СуммаДокументаРазницаУменьшение = Неопределено;
				КонецЕсли;
				Если СвПосрДеят.Свойство("РазСтКСчФУв", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					ПараметрыСтроки.СуммаДокументаРазницаУвеличение = ЗначениеСвойства;
				Иначе
					ПараметрыСтроки.СуммаДокументаРазницаУвеличение = Неопределено;
				КонецЕсли;
				Если СвПосрДеят.Свойство("РазНДСКСчФУм", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					ПараметрыСтроки.СуммаНДСРазницаУменьшение = ЗначениеСвойства;
				Иначе
					ПараметрыСтроки.СуммаНДСРазницаУменьшение = Неопределено;
				КонецЕсли;
				Если СвПосрДеят.Свойство("РазНДСКСчФУв", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
					ПараметрыСтроки.СуммаНДСРазницаУвеличение = ЗначениеСвойства;
				Иначе
					ПараметрыСтроки.СуммаНДСРазницаУвеличение = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.Часть1Строка);
		
	КонецЦикла;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Запишем сегмент
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел10",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел10);
		
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел10",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
		// Очистим табличный документ и таблицу
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел10);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаТаблицыРаздел10);
		
		СтруктураПараметров.ТаблицаРаздел10.Очистить();
		
		// Обнулим счетчик текущего сегмента
		ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоследнийСегментДанныхРаздела10(СтруктураПараметров)
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел10;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> 0
		И ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Записать сегменты
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел10",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел10);
			
			СтруктураПараметров.ТаблицаРаздел10.Очистить();
			
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел10",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
	КонецЕсли;
	
	Если ПараметрыРаздела.НомерПП > 0 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 10'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВСегментДанныхСтрокуРаздела11(СтрокаРаздела11, СтруктураПараметров)
	
	Если СтруктураПараметров.СохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел11;
	
	Если ПараметрыРаздела.НомерПП = 0 Тогда
	
		ПараметрыРаздела.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЖурналУчетаСчетовФактур";
		
		ПараметрыРаздела.Вставить("Макет", РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЖурналУчетаСчетовФактур735"));
		
		ПараметрыРаздела.Вставить("ШапкаРаздел11", ПараметрыРаздела.Макет.ПолучитьОбласть("ШапкаРаздел11"));
		ПараметрыРаздела.Вставить("ШапкаТаблицыРаздел11", ПараметрыРаздела.Макет.ПолучитьОбласть("ШапкаТаблицыРаздел11"));
		ПараметрыРаздела.Вставить("Часть2Строка", ПараметрыРаздела.Макет.ПолучитьОбласть("Часть2Строка"));
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел11);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаТаблицыРаздел11);
		
	КонецЕсли;
	
	ПараметрыСтроки = ПараметрыРаздела.Часть2Строка.Параметры;
	
	ПараметрыРаздела.НомерПП = ПараметрыРаздела.НомерПП + 1;
	ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
	
	СтрокаРаздела11.НомерПор = ПараметрыРаздела.НомерПП;
	
	ПараметрыСтроки.Ном = СтрокаРаздела11.НомерПор;
	ПараметрыСтроки.ДатаПередачиПолучения = СтрокаРаздела11.ДатаПолуч;
	ПараметрыСтроки.КодВидаОперации = МассивВСтрокуСРазделителями(СтрокаРаздела11.КодВидОпер, ";");
	ПараметрыСтроки.НомерДата = ?(ЗначениеЗаполнено(СтрокаРаздела11.НомСчФПрод), "" + СтрокаРаздела11.НомСчФПрод + ";", "")
		+ СтрокаРаздела11.ДатаСчФПрод;
	ПараметрыСтроки.НомерДатаИсправления = ?(ЗначениеЗаполнено(СтрокаРаздела11.НомИспрСчФ), "" + СтрокаРаздела11.НомИспрСчФ + ";", "")
		+ СтрокаРаздела11.ДатаИспрСчФ;
	ПараметрыСтроки.НомерДатаКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела11.НомКСчФПрод), "" + СтрокаРаздела11.НомКСчФПрод + ";", "")
		+ СтрокаРаздела11.ДатаКСчФПрод;
	ПараметрыСтроки.НомерДатаИсправленияКорректировки = ?(ЗначениеЗаполнено(СтрокаРаздела11.НомИспрКСчФ), "" + СтрокаРаздела11.НомИспрКСчФ + ";", "")
		+ СтрокаРаздела11.ДатаИспрКСчФ;
	
	ИННКонтрагента = Неопределено; КППКонтрагента = Неопределено;
	ПолучитьИНН_КПП_ИзСтруктуры(ИННКонтрагента, КППКонтрагента, СтрокаРаздела11.СвПрод);
	
	ПараметрыСтроки.КонтрагентИННКПП = СокрЛП(ИННКонтрагента) + ?(ЗначениеЗаполнено(КППКонтрагента), "/" + СокрЛП(КППКонтрагента), "");
	Контрагент = КонтрагентПоИННСУчетомКэша(ИННКонтрагента, ПараметрыСтроки.КонтрагентНаименование, КэшКонтрагентов);
	
	ИННСубкомиссионера = Неопределено; КППСубкомиссионера = Неопределено;
	ПолучитьИНН_КПП_ИзСтруктуры(ИННСубкомиссионера, КППСубкомиссионера, СтрокаРаздела11.СвКомис);
	
	ПараметрыСтроки.СубкомиссионерИНН_КПП = СокрЛП(ИННСубкомиссионера) + ?(ЗначениеЗаполнено(КППСубкомиссионера), "/" + СокрЛП(КППСубкомиссионера), "");
	Субкомиссионер = КонтрагентПоИННСУчетомКэша(ИННСубкомиссионера, ПараметрыСтроки.Субкомиссионер, КэшКонтрагентов);
	
	ПараметрыСтроки.КодВидаСделки = СтрокаРаздела11.КодВидСд;
	
	НаименованиеВалюты = Неопределено;
	Если ВалютаПоКодуСУчетомКэша(СтрокаРаздела11.ОКВ, НаименованиеВалюты, КэшВалют).Пустая() Тогда
		ПараметрыСтроки.Валюта = СокрЛП(СтрокаРаздела11.ОКВ);
	Иначе
		ПараметрыСтроки.Валюта = СокрЛП(НаименованиеВалюты) + ", " + СтрокаРаздела11.ОКВ;
	КонецЕсли;
	
	ПараметрыСтроки.СуммаДокумента = СтрокаРаздела11.СтоимТовСчФВс;
	
	Если ЗначениеЗаполнено(СтрокаРаздела11.СумНДССчФ)
		 ИЛИ (НЕ ЗначениеЗаполнено(СтрокаРаздела11.НомКСчФПрод) И НЕ ЗначениеЗаполнено(СтрокаРаздела11.ДатаКСчФПрод)
		 И НЕ ЗначениеЗаполнено(СтрокаРаздела11.НомИспрКСчФ) И НЕ ЗначениеЗаполнено(СтрокаРаздела11.ДатаИспрКСчФ)) Тогда
		ПараметрыСтроки.СуммаНДС = СтрокаРаздела11.СумНДССчФ;
	Иначе
		ПараметрыСтроки.СуммаНДС = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРаздела11.РазСтКСчФУм) Тогда
		ПараметрыСтроки.СуммаДокументаРазницаУменьшение = СтрокаРаздела11.РазСтКСчФУм;
	Иначе
		ПараметрыСтроки.СуммаДокументаРазницаУменьшение = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРаздела11.РазСтКСчФУв) Тогда
		ПараметрыСтроки.СуммаДокументаРазницаУвеличение = СтрокаРаздела11.РазСтКСчФУв;
	Иначе
		ПараметрыСтроки.СуммаДокументаРазницаУвеличение = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРаздела11.РазНДСКСчФУм) Тогда
		ПараметрыСтроки.СуммаНДСРазницаУменьшение = СтрокаРаздела11.РазНДСКСчФУм;
	Иначе
		ПараметрыСтроки.СуммаНДСРазницаУменьшение = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаРаздела11.РазНДСКСчФУв) Тогда
		ПараметрыСтроки.СуммаНДСРазницаУвеличение = СтрокаРаздела11.РазНДСКСчФУв;
	Иначе
		ПараметрыСтроки.СуммаНДСРазницаУвеличение = Неопределено;
	КонецЕсли;
	
	ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.Часть2Строка);
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Запишем сегмент
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел11",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел11);
		
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел11",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
		// Очистим табличный документ и таблицу
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаРаздел11);
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ШапкаТаблицыРаздел11);
		
		СтруктураПараметров.ТаблицаРаздел11.Очистить();
		
		// Обнулим счетчик текущего сегмента
		ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоследнийСегментДанныхРаздела11(СтруктураПараметров)
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел11;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> 0
		И ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Записать сегменты
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел11",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел11);
			
			СтруктураПараметров.ТаблицаРаздел11.Очистить();
			
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел11",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
	КонецЕсли;
	
	Если ПараметрыРаздела.НомерПП > 0 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 11'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВСегментДанныхСтрокуРаздела12(СтрокаРаздела12, СтруктураПараметров)
	
	Если СтруктураПараметров.СохраненныйДок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел12;
	
	Если ПараметрыРаздела.НомерПП = 0 Тогда
	
		ПараметрыРаздела.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		
		ПараметрыРаздела.Вставить("Макет", РеквизитФормыВЗначение("Объект").ПолучитьМакет("СведенияИзСчетовФактур"));
		
		ПараметрыРаздела.Вставить("ОбластьШапка", ПараметрыРаздела.Макет.ПолучитьОбласть("Шапка"));
		ПараметрыРаздела.Вставить("ОбластьСтрока", ПараметрыРаздела.Макет.ПолучитьОбласть("Строка"));
		
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ОбластьШапка);
		
		ПараметрыРаздела.Вставить("ИтогПоРазделу12", 0);
		
	КонецЕсли;
	
	ПараметрыСтроки = ПараметрыРаздела.ОбластьСтрока.Параметры;
	
	ПараметрыРаздела.НомерПП = ПараметрыРаздела.НомерПП + 1;
	ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
	
	СтрокаРаздела12.НомерПор = ПараметрыРаздела.НомерПП;
	
	ПараметрыСтроки.Ном                    = ПараметрыРаздела.НомерПП;
	ПараметрыСтроки.НомерДата              = "" + СтрокаРаздела12.НомСчФ + ";" +  СтрокаРаздела12.ДатаСчФ;
	
	НаименованиеВалюты = Неопределено;
	Если ВалютаПоКодуСУчетомКэша(СтрокаРаздела12.ОКВ, НаименованиеВалюты, КэшВалют).Пустая() Тогда
		ПараметрыСтроки.Валюта = СокрЛП(СтрокаРаздела12.ОКВ);
	Иначе
		ПараметрыСтроки.Валюта = СокрЛП(НаименованиеВалюты) + ", " + СтрокаРаздела12.ОКВ;
	КонецЕсли;
	
	ПараметрыСтроки.СуммаДокумента         = СтрокаРаздела12.СтоимТовСНалВс;
	ПараметрыСтроки.СуммаНДС               = СтрокаРаздела12.СумНалПокуп;
	ПараметрыСтроки.СчетФактураРасшифровка = Неопределено; 
	
	ИННПокупателя = Неопределено; КПППокупателя = Неопределено;
	ПолучитьИНН_КПП_ИзСтруктуры(ИННПокупателя, КПППокупателя, СтрокаРаздела12.СвПокуп);
	
	ПараметрыСтроки.КонтрагентИННКПП = СокрЛП(ИННПокупателя) + ?(ЗначениеЗаполнено(КПППокупателя), "/" + СокрЛП(КПППокупателя), "");
	
	Контрагент = КонтрагентПоИННСУчетомКэша(ИННПокупателя, ПараметрыСтроки.КонтрагентНаименование, КэшКонтрагентов);
	
	ПараметрыРаздела.ОбластьСтрока.Область(1, , ПараметрыРаздела.ОбластьСтрока.ВысотаТаблицы).Имя = "Строка_" + Формат(ПараметрыРаздела.НомерПП, "ЧГ=");
	ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ОбластьСтрока);
	
	ПараметрыРаздела.ИтогПоРазделу12 = ПараметрыРаздела.ИтогПоРазделу12 + СтрокаРаздела12.СумНалПокуп;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		// Запишем сегмент
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел12",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел12);
		
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел12",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
		// Очистим табличный документ и таблицу
		ПараметрыРаздела.ТабличныйДокумент.Очистить();
		ПараметрыРаздела.ТабличныйДокумент.Вывести(ПараметрыРаздела.ОбластьШапка);
		
		СтруктураПараметров.ТаблицаРаздел12.Очистить();
		
		// Обнулим счетчик текущего сегмента
		ПараметрыРаздела.СчетчикСтрокТекущегоСегмента = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПоследнийСегментДанныхРаздела12(СтруктураПараметров)
	
	ПараметрыРаздела = СтруктураПараметров.ПараметрыРаздел12;
	
	Если ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> 0
		И ПараметрыРаздела.СчетчикСтрокТекущегоСегмента <> ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС Тогда
		
		ПерваяСтрокаСегмента = ПараметрыРаздела.НомерПП - ПараметрыРаздела.СчетчикСтрокТекущегоСегмента + 1;
		
		РегламентированнаяОтчетность.ЗаписатьСегментДанныхРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел12",
			ПерваяСтрокаСегмента,
			СтруктураПараметров.ТаблицаРаздел12);
			
			СтруктураПараметров.ТаблицаРаздел12.Очистить();
			
		РегламентированнаяОтчетность.ЗаписатьСегментТабличногоДокументаРазделаДекларацииНДС(
			СтруктураПараметров.СохраненныйДок,
			"Раздел12",
			ПерваяСтрокаСегмента,
			ПараметрыРаздела.ТабличныйДокумент);
		
	КонецЕсли;
	
	Если ПараметрыРаздела.НомерПП > 0 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Заполнен раздел 12'"));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура КорректироватьИтоги81_91(СтруктураПараметров)
	
	СтруктураПараметров.ИтогиРаздел81.СумНДСИтП1Р8    = СтруктураПараметров.ИтогиРаздел8.СумНДСВсКПк    + СтруктураПараметров.ИтогиРаздел81.СумНДСИтП1Р8    - СтруктураПараметров.ИтогиРаздел81.СумНДСИтКПк;
	СтруктураПараметров.ИтогиРаздел81.СумНДСИтКПк     = СтруктураПараметров.ИтогиРаздел8.СумНДСВсКПк;
	
	СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_18 = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС18 + СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_18 - СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр18;
	СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр18   = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС18;
	
	СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_10 = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС10 + СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_10 - СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр10;
	СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр10   = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС10;
	
	СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_0  = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС0  + СтруктураПараметров.ИтогиРаздел91.СтПродВсП1Р9_0  - СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр0;
	СтруктураПараметров.ИтогиРаздел91.ИтСтПродКПр0    = СтруктураПараметров.ИтогиРаздел9.СтПродБезНДС0;
	
	СтруктураПараметров.ИтогиРаздел91.СумНДСВсП1Р9_18 = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр18  + СтруктураПараметров.ИтогиРаздел91.СумНДСВсП1Р9_18 - СтруктураПараметров.ИтогиРаздел91.СумНДСИтКПр18;
	СтруктураПараметров.ИтогиРаздел91.СумНДСИтКПр18   = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр18;
	
	СтруктураПараметров.ИтогиРаздел91.СумНДСВсП1Р9_10 = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр10  + СтруктураПараметров.ИтогиРаздел91.СумНДСВсП1Р9_10 - СтруктураПараметров.ИтогиРаздел91.СумНДСИтКПр10;
	СтруктураПараметров.ИтогиРаздел91.СумНДСИтКПр10   = СтруктураПараметров.ИтогиРаздел9.СумНДСВсКПр10;
	
	СтруктураПараметров.ИтогиРаздел91.СтПродОсвП1Р9Вс = СтруктураПараметров.ИтогиРаздел9.СтПродОсвВсКПр + СтруктураПараметров.ИтогиРаздел91.СтПродОсвП1Р9Вс - СтруктураПараметров.ИтогиРаздел91.ИтСтПродОсвКПр;
	СтруктураПараметров.ИтогиРаздел91.ИтСтПродОсвКПр  = СтруктураПараметров.ИтогиРаздел9.СтПродОсвВсКПр;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьДополнительныеФайлыДекларацииНДС(СохраненныйДок)
	
	Если СохраненныйДок <> Неопределено Тогда
	
		РегламентированнаяОтчетность.УдалитьДополнительныеФайлыДекларацииНДС(СохраненныйДок);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиШапкуРаздела91Декларации(ТабличныйДокумент, Макет, ДатаОформления, НомерДополнительногоЛиста)
	
	Если НомерДополнительногоЛиста = 1 Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаРаздел91");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("ШапкаРаздел91НомерЛиста");
	Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;
	Секция.Параметры.ДатаСоставления = Формат(ДатаОформления, "ДФ=dd.MM.yyyy");
	ТабличныйДокумент.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("СтрокиДляПовтора");
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиШапкуРаздела81Декларации(ТабличныйДокумент, Макет, ДатаОформления, НомерДополнительногоЛиста)
	
	Если НомерДополнительногоЛиста = 1 Тогда
		Секция = Макет.ПолучитьОбласть("ШапкаРаздел81");
		ТабличныйДокумент.Вывести(Секция);
	КонецЕсли;
	
	Секция = Макет.ПолучитьОбласть("ШапкаРаздел81НомерЛиста");
	Секция.Параметры.НомерЛиста = НомерДополнительногоЛиста;
	Секция.Параметры.ДатаСоставления = Формат(ДатаОформления, "ДФ=dd.MM.yyyy");
	ТабличныйДокумент.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("СтрокиДляПовтора");
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьИНН_КПП_ИзСтруктуры(ИНН, КПП, СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		Если СтруктураДанных.Свойство("ИННЮЛ", ИНН) Тогда
			СтруктураДанных.Свойство("КПП", КПП);
		Иначе
			СтруктураДанных.Свойство("ИННФЛ", ИНН);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентПоИННСУчетомКэша(ИНН, НазваниеКонтрагента, КэшТаблицаКонтрагентов)
	
	НазваниеКонтрагента = Неопределено;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		НайденнаяСтрока = КэшТаблицаКонтрагентов.Найти(ИНН, "ИНН");
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			Контрагент = ПолучитьКонтрагентаПоИНН(ИНН);
			
			Если НЕ Контрагент.Пустая() Тогда
								
				Если Контрагент.Метаданные().Реквизиты.Найти("НаименованиеПолное") = Неопределено Тогда
					
					НазваниеКонтрагента = Контрагент.Наименование;
					
				Иначе
					
					НазваниеКонтрагента = Контрагент.НаименованиеПолное;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если КэшТаблицаКонтрагентов.Количество() < 500000 Тогда
				НоваяЗапись = КэшТаблицаКонтрагентов.Добавить();
				НоваяЗапись.ИНН = ИНН;
				НоваяЗапись.Название = НазваниеКонтрагента;
				НоваяЗапись.Ссылка = Контрагент;
			КонецЕсли;
			
			Возврат Контрагент;
			
		Иначе
			
			НазваниеКонтрагента = НайденнаяСтрока.Название;
			
			Возврат НайденнаяСтрока.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаПоКодуСУчетомКэша(Код, НазваниеВалюты, КэшТаблицаВалют)
	
	НазваниеВалюты = Неопределено;
	
	Если ЗначениеЗаполнено(Код) Тогда
		
		НайденнаяСтрока = КэшТаблицаВалют.Найти(Код, "Код");
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			Валюта = ПолучитьВалютуПоКоду(Код);
			Если Не Валюта.Пустая() Тогда
				НазваниеВалюты = Валюта.НаименованиеПолное;
			КонецЕсли;
			
			НоваяЗапись = КэшТаблицаВалют.Добавить();
			НоваяЗапись.Код = Код;
			НоваяЗапись.Название = НазваниеВалюты;
			НоваяЗапись.Ссылка = Валюта;
			
			Возврат Валюта;
			
		Иначе
			
			НазваниеВалюты = НайденнаяСтрока.Название;
			
			Возврат НайденнаяСтрока.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Валюты.ПустаяСсылка();
	
КонецФункции

#КонецОбласти