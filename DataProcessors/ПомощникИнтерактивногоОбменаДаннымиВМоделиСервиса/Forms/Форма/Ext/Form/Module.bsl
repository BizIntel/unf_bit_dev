////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры формы:
//
//     УзелИнформационнойБазы  - ПланОбменаСсылка - Ссылка на узле плана обмена, для которого 
//                                                  выполняется помощник (корреспондент обмена).
//
//     ЗапретитьВыгрузкуТолькоИзмененного - Булево - Если Истина, то вариант отправки только измененного недоступен.
//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = Неопределено;
	
	Если Не ОбменДаннымиВМоделиСервисаПовтИсп.СинхронизацияДанныхПоддерживается() Тогда
		ТекстОшибки = НСтр("ru='Синхронизация данных для конфигурации не поддерживается!'");
		
	ИначеЕсли Не Параметры.Свойство("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы) Тогда
		ТекстОшибки = НСтр("ru='Обработка не предназначена для непосредственного использования.'");
		
	ИначеЕсли Объект.УзелИнформационнойБазы.Пустая() Тогда
		ТекстОшибки = НСтр("ru='Настройка обмена данными не найдена.'");
		
	КонецЕсли;
	
	Если ТекстОшибки<>Неопределено Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Устанавливаем заголовки, зависящие от узла
	УстановитьКорреспондентаВЗаголовок(ЭтотОбъект);
	
	// Дополнение выгрузки
	ИнициализироватьРеквизитыДополненияВыгрузки();
	
	// Устанавливаем таблицу переходов в зависимости от параметров
	ПорядковыйНомерПерехода = 0;
	
	Если ДополнениеВыгрузки.ВариантВыгрузки = -1 Тогда
		СценарийБезДобавления();
	Иначе
		СценарийПолныйВручную();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗакрытьФормуБезусловно = Ложь;
	
	// На первый шаг
	УстановитьПорядковыйНомерПерехода(1);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПодтверждения = НСтр("ru='Прервать синхронизацию данных?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПодтверждения, "ЗакрытьФормуБезусловно");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеДлительнойОперации <> Неопределено Тогда
		ЗавершитьФоновоеЗадание(СостояниеДлительнойОперации.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Проверяем на событие дополнения выгрузки. 
	Если ОбменДаннымиКлиент.ОбработкаВыбораДополненияВыгрузки(ВыбранноеЗначение, ИсточникВыбора, ДополнениеВыгрузки) Тогда
		// Событие обработано, обновим отображение типовых
		УстановитьОписаниеОтборовДополненияВыгрузки();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ПерейтиДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ПерейтиНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиСоставВыгрузки(Команда)
	
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиСоставДанных(ДополнениеВыгрузки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаОбщегоОтбора(Команда)
	
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить общий отбор?'");
	
	Оповещение = Новый ОписаниеОповещения("ДополнениеВыгрузкиОчисткаОбщегоОтбораЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,ТекстЗаголовка);
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаДетальногоОтбора(Команда)
	
	ТекстЗаголовка = НСтр("ru='Подтверждение'");
	ТекстВопроса   = НСтр("ru='Очистить детальный отбор?'");
	
	Оповещение = Новый ОписаниеОповещения("ДополнениеВыгрузкиОчисткаДетальногоОтбораЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,ТекстЗаголовка);
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиИсторияОтборов(Команда)
	
	// Организуем выбор из меню-списка, все варианты сохраненных настроек
	СписокВариантов = ДополнениеВыгрузкиИсторияНастроекСервер();
	
	// Добавляем вариант сохранения текущих
	Текст = НСтр("ru='Сохранить текущую настройку...'");
	СписокВариантов.Добавить(1, Текст, , БиблиотекаКартинок.СохранитьНастройкиОтчета);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнениеВыгрузкиИсторияОтборовВыборИзМеню", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВариантов, Элементы.ДополнениеВыгрузкиИсторияОтборов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Страница "ИзменениеСоставаВыгрузки"

&НаКлиенте
Процедура ДополнениеВыгрузкиВариантВыгрузкиПриИзменении(Элемент)
	
	ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОбщийОтборДокументовНажатие(Элемент)
	
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиВсеДокументы(ДополнениеВыгрузки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиДетальныйОтборНажатие(Элемент)
	
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиДетальныйОтбор(ДополнениеВыгрузки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОтборПоСценариюУзлаНажатие(Элемент)
	
	ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиСценарийУзла(ДополнениеВыгрузки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиПериодОтбораСценарияУзлаПриИзменении(Элемент)
	
	ДополнениеВыгрузкиИзменениеПериодаСценарияУзла();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиПериодОтбораСценарияУзлаОчистка(Элемент, СтандартнаяОбработка)
	
	// Запрещаем очистку периода
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаОбщегоОтбораЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДополнениеВыгрузкиОчисткаОбщегоОтбораСервер();
КонецПроцедуры

&НаСервере
Процедура ДополнениеВыгрузкиОчисткаОбщегоОтбораСервер()
	
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОчисткаОбщегоОтбора(ДополнениеВыгрузки);
	УстановитьОписаниеДополненияОбщегоОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиОчисткаДетальногоОтбораЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ДополнениеВыгрузкиОчисткаДетальногоОтбораСервер();
КонецПроцедуры

&НаСервере
Процедура ДополнениеВыгрузкиОчисткаДетальногоОтбораСервер()
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОчисткаДетально(ДополнениеВыгрузки);
	УстановитьОписаниеДополненияДетально();
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиИсторияОтборовВыборИзМеню(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПредставлениеНастройки = ВыбранныйЭлемент.Значение;
	Если ТипЗнч(ПредставлениеНастройки)=Тип("Строка") Тогда
		// Выбрали вариант - имя ранее сохраненной настройки
		
		ТекстЗаголовка = НСтр("ru='Подтверждение'");
		ТекстВопроса = СтрШаблон(НСтр("ru='Восстановить настройки ""%1""?'"), ПредставлениеНастройки
		);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДополнениеВыгрузкиИсторияОтборовЗавершение", ЭтотОбъект, ПредставлениеНастройки);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ТекстЗаголовка);
		
	ИначеЕсли ПредставлениеНастройки = 1 Тогда
		// Выбран вариант сохранения, открываем форму всех настроек
		ОбменДаннымиКлиент.ОткрытьФормуДополненияВыгрузкиСохранениеНастроек(ДополнениеВыгрузки, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВыгрузкиИсторияОтборовЗавершение(Ответ, ПредставлениеНастройки) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнениеВыгрузкиУстановитьНастройкиСервер(ПредставлениеНастройки);
		ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнениеВыгрузкиИзменениеПериодаСценарияУзла()
	
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиУстановитьПериодаСценарияУзла(ДополнениеВыгрузки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура УстановитьКорреспондентаВЗаголовок(ВладелецЗаголовка)
	
	ВладелецЗаголовка.Заголовок = СтрШаблон(ВладелецЗаголовка.Заголовок, Строка(Объект.УзелИнформационнойБазы));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура(
        "ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
	Иначе
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		Если КнопкаГотово <> Неопределено Тогда
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки( Новый Структура(
            "ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		Если СтрокиПерехода.Количество() > 0 Тогда
			СтрокаПерехода = СтрокиПерехода[0];
			// обработчик ПриПереходеДалее
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) И Не СтрокаПерехода.ДлительнаяОперация Тогда
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				Отказ = Ложь;
				
				РезультатВычисления = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура(
			"ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		Если СтрокиПерехода.Количество() > 0 Тогда
			СтрокаПерехода = СтрокиПерехода[0];
			// обработчик ПриПереходеНазад
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) И Не СтрокаПерехода.ДлительнаяОперация Тогда
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				Отказ = Ложь;
				
				РезультатВычисления = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура(
        "ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура(
        "ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПерейтиДалее Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
		КонецЕсли;
		
	Иначе
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

//
//  Добавляет новую строку в конец текущей таблицы переходов
//
//  Параметры:
//      ПорядковыйНомерПерехода             - Число  - Порядковый номер перехода, который соответствует текущему шагу перехода
//      ИмяОсновнойСтраницы                 - Строка - Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//      ИмяСтраницыНавигации                - Строка - Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//      ИмяСтраницыДекорации                - Строка - Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//      ИмяОбработчикаПриОткрытии           - Строка - Имя функции-обработчика события открытия текущей страницы помощника
//      ИмяОбработчикаПриПереходеДалее      - Строка - Имя функции-обработчика события перехода на следующую страницу помощника
//      ИмяОбработчикаПриПереходеНазад      - Строка - Имя функции-обработчика события перехода на предыдущую страницу помощника
//      ДлительнаяОперация                  - Булево - Признак отображения страницы длительной операции. Ложь - отображается обычная страница.
//      ИмяОбработчикаДлительнойОперации    - Строка - Имя функции-обработчика длительной операции.
//
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода, ИмяОсновнойСтраницы, ИмяСтраницыНавигации, 
    ИмяСтраницыДекорации = "",
    ИмяОбработчикаПриОткрытии = "", ИмяОбработчикаПриПереходеДалее = "", ИмяОбработчикаПриПереходеНазад = "",
	ДлительнаяОперация = Ложь, ИмяОбработчикаДлительнойОперации = "")

	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			Если ЭлементФормыПоИмениКоманды<>Неопределено Тогда
				Возврат ЭлементФормыПоИмениКоманды;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент)=Тип("КнопкаФормы") И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды)>0 Тогда
			Возврат Элемент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПерейтиДалее()
	ИзменитьПорядковыйНомерПерехода(+1);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазад()
	ИзменитьПорядковыйНомерПерехода(-1);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Дополнение выгрузки
//

&НаСервере
Процедура ИнициализироватьРеквизитыДополненияВыгрузки()
	
	// Получаем настройки в виде структуры, настройки будут неявно сохранены во временном хранилище формы.
	НастройкиДополненияВыгрузки = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузки(
		Объект.УзелИнформационнойБазы, ЭтотОбъект.УникальныйИдентификатор, Истина
	);
		
	// Настраиваем форму.
	// Преобразуем в реквизит формы типа ОбработкаОбъект. Используется для упрощения связи данных с формой.
	ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиРеквизитПоНастройкам(ЭтотОбъект, НастройкиДополненияВыгрузки, "ДополнениеВыгрузки");
	
	ПараметрыСценарияДополнения = ДополнениеВыгрузки.ПараметрыСценарияДополнения;
	
	// Перестраиваем интерфейс по уточненному сценарию.
	
	// Особые случаи
	ТиповыеВариантыЗапрещены = Не ПараметрыСценарияДополнения.ВариантБезДополнения.Использование
		И Не ПараметрыСценарияДополнения.ВариантВсеДокументы.Использование
		И Не ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Использование;
		
	Если ТиповыеВариантыЗапрещены Тогда
		Если ПараметрыСценарияДополнения.ВариантДополнительно.Использование Тогда
			// Остается один вариант по сценарию узла
			Элементы.ДополнениеВыгрузкиВариантВыгрузкиУзелСтрокой.Видимость = Истина;
			Элементы.ДополнениеВыгрузкиВариантВыгрузкиУзел.Видимость        = Ложь;
			Элементы.ДекорацияОтступГруппыНастраиваемый.Видимость           = Ложь;
			ДополнениеВыгрузки.ВариантВыгрузки = 3;
		Иначе
			// Нет ни одного варианта, поднимаем флаг пропуска страницы и выходим
			ДополнениеВыгрузки.ВариантВыгрузки = -1;
			Элементы.ВариантыДополненияВыгрузки.Видимость = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Устанавливаем типовые поля ввода
	Элементы.ТиповойВариантДополненияНет.Видимость = ПараметрыСценарияДополнения.ВариантБезДополнения.Использование;
	Если Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантБезДополнения.Заголовок) Тогда
		Элементы.ДополнениеВыгрузкиВариантВыгрузки0.СписокВыбора[0].Представление = ПараметрыСценарияДополнения.ВариантБезДополнения.Заголовок;
	КонецЕсли;
	Элементы.ТиповойВариантДополненияНетПояснение.Заголовок = ПараметрыСценарияДополнения.ВариантБезДополнения.Пояснение;
	Если ПустаяСтрока(Элементы.ТиповойВариантДополненияНетПояснение.Заголовок) Тогда
		Элементы.ТиповойВариантДополненияНетПояснение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТиповойВариантДополненияДокументы.Видимость = ПараметрыСценарияДополнения.ВариантВсеДокументы.Использование;
	Если Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантВсеДокументы.Заголовок) Тогда
		Элементы.ДополнениеВыгрузкиВариантВыгрузки1.СписокВыбора[0].Представление = ПараметрыСценарияДополнения.ВариантВсеДокументы.Заголовок;
	КонецЕсли;
	Элементы.ТиповойВариантДополненияДокументыПояснение.Заголовок = ПараметрыСценарияДополнения.ВариантВсеДокументы.Пояснение;
	Если ПустаяСтрока(Элементы.ТиповойВариантДополненияДокументыПояснение.Заголовок) Тогда
		Элементы.ТиповойВариантДополненияДокументыПояснение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТиповойВариантДополненияПроизвольный.Видимость = ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Использование;
	Если Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Заголовок) Тогда
		Элементы.ДополнениеВыгрузкиВариантВыгрузки2.СписокВыбора[0].Представление = ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Заголовок;
	КонецЕсли;
	Элементы.ТиповойВариантДополненияПроизвольныйПояснение.Заголовок = ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Пояснение;
	Если ПустаяСтрока(Элементы.ТиповойВариантДополненияПроизвольныйПояснение.Заголовок) Тогда
		Элементы.ТиповойВариантДополненияПроизвольныйПояснение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.НастраиваемыйВариантДополнения.Видимость           = ПараметрыСценарияДополнения.ВариантДополнительно.Использование;
	Элементы.ГруппаПериодВыгрузкиСценарийУзла.Видимость         = ПараметрыСценарияДополнения.ВариантДополнительно.ИспользоватьПериодОтбора;
	Элементы.ДополнениеВыгрузкиОтборПоСценариюУзла.Видимость    = Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантДополнительно.ИмяФормыОтбора);
	
	Элементы.ДополнениеВыгрузкиВариантВыгрузкиУзел.СписокВыбора[0].Представление = ПараметрыСценарияДополнения.ВариантДополнительно.Заголовок;
	Элементы.ДополнениеВыгрузкиВариантВыгрузкиУзелСтрокой.Заголовок              = ПараметрыСценарияДополнения.ВариантДополнительно.Заголовок;
	
	Элементы.НастраиваемыйВариантДополненияПояснение.Заголовок = ПараметрыСценарияДополнения.ВариантДополнительно.Пояснение;
	Если ПустаяСтрока(Элементы.НастраиваемыйВариантДополненияПояснение.Заголовок) Тогда
		Элементы.НастраиваемыйВариантДополненияПояснение.Видимость = Ложь;
	КонецЕсли;
	
	// Заголовки команды
	Если Не ПустаяСтрока(ПараметрыСценарияДополнения.ВариантДополнительно.ЗаголовокКомандыФормы) Тогда
		Элементы.ДополнениеВыгрузкиОтборПоСценариюУзла.Заголовок = ПараметрыСценарияДополнения.ВариантДополнительно.ЗаголовокКомандыФормы;
	КонецЕсли;
	
	// Выстраиваем доступные в нужном порядке
	ПорядокГруппДополнения = Новый СписокЗначений;
	Если Элементы.ТиповойВариантДополненияНет.Видимость Тогда
		ПорядокГруппДополнения.Добавить(Элементы.ТиповойВариантДополненияНет, 
			Формат(ПараметрыСценарияДополнения.ВариантБезДополнения.Порядок, "ЧЦ=10; ЧН=; ЧВН=; ЧГ="));
	КонецЕсли;
	Если Элементы.ТиповойВариантДополненияДокументы.Видимость Тогда
		ПорядокГруппДополнения.Добавить(Элементы.ТиповойВариантДополненияДокументы, 
			Формат(ПараметрыСценарияДополнения.ВариантВсеДокументы.Порядок, "ЧЦ=10; ЧН=; ЧВН=; ЧГ="));
	КонецЕсли;
	Если Элементы.ТиповойВариантДополненияПроизвольный.Видимость Тогда
		ПорядокГруппДополнения.Добавить(Элементы.ТиповойВариантДополненияПроизвольный, 
			Формат(ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Порядок, "ЧЦ=10; ЧН=; ЧВН=; ЧГ="));
	КонецЕсли;
	Если Элементы.НастраиваемыйВариантДополнения.Видимость Тогда
		ПорядокГруппДополнения.Добавить(Элементы.НастраиваемыйВариантДополнения, 
			Формат(ПараметрыСценарияДополнения.ВариантДополнительно.Порядок, "ЧЦ=10; ЧН=; ЧВН=; ЧГ="));
	КонецЕсли;
	ПорядокГруппДополнения.СортироватьПоПредставлению();
	Для Каждого ЭлементГруппыДополнения Из ПорядокГруппДополнения Цикл
		Элементы.Переместить(ЭлементГруппыДополнения.Значение, Элементы.ВариантыДополненияВыгрузки);
	КонецЦикла;
	
	// С настройками можно работать только есть право
	ЕстьПравоНаНастройки = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	Элементы.ГруппаЗагрузкаТиповыхВариантовНастроек.Видимость = ЕстьПравоНаНастройки;
	Если ЕстьПравоНаНастройки Тогда
		// Восстанавливаем предопределенные настройки
		УстанавливатьПервыйЭлемент = Не ДополнениеВыгрузкиУстановитьНастройкиСервер(ОбменДаннымиСервер.ДополнениеВыгрузкиИмяАвтоСохраненияНастроек());
		ДополнениеВыгрузки.ПредставлениеТекущейНастройки = "";
	Иначе
		УстанавливатьПервыйЭлемент = Истина;
	КонецЕсли;
		
	УстанавливатьПервыйЭлемент = УстанавливатьПервыйЭлемент
		Или
		ДополнениеВыгрузки.ВариантВыгрузки<0 
		Или
		( (ДополнениеВыгрузки.ВариантВыгрузки=0) И (Не ПараметрыСценарияДополнения.ВариантБезДополнения.Использование) )
		Или
		( (ДополнениеВыгрузки.ВариантВыгрузки=1) И (Не ПараметрыСценарияДополнения.ВариантВсеДокументы.Использование) )
		Или
		( (ДополнениеВыгрузки.ВариантВыгрузки=2) И (Не ПараметрыСценарияДополнения.ВариантПроизвольныйОтбор.Использование) )
		Или
		( (ДополнениеВыгрузки.ВариантВыгрузки=3) И (Не ПараметрыСценарияДополнения.ВариантДополнительно.Использование) );
	
	Если УстанавливатьПервыйЭлемент Тогда
		Для Каждого ЭлементГруппыДополнения Из ПорядокГруппДополнения[0].Значение.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементГруппыДополнения)=Тип("ПолеФормы") И ЭлементГруппыДополнения.Вид = ВидПоляФормы.ПолеПереключателя Тогда
				ДополнениеВыгрузки.ВариантВыгрузки = ЭлементГруппыДополнения.СписокВыбора[0].Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Начальное отображение, аналог клиентской ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость.
	Элементы.ГруппаОтборВсеДокументы.Доступность  = ДополнениеВыгрузки.ВариантВыгрузки=1;
	Элементы.ГруппаОтборДетальный.Доступность     = ДополнениеВыгрузки.ВариантВыгрузки=2;
	Элементы.ГруппаОтборНастраиваемый.Доступность = ДополнениеВыгрузки.ВариантВыгрузки=3;
	
	// Описание начальных типовых отборов
	УстановитьОписаниеОтборовДополненияВыгрузки();
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеОтборовДополненияВыгрузки()
	
	УстановитьОписаниеДополненияОбщегоОтбора();
	УстановитьОписаниеДополненияДетально();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеДополненияОбщегоОтбора()
	
	Текст = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОписаниеДополненияОбщегоОтбора(ДополнениеВыгрузки);
	НетОтбора = ПустаяСтрока(Текст);
	Если НетОтбора Тогда
		Текст = НСтр("ru='Все документы'");
	КонецЕсли;
	
	Элементы.ДополнениеВыгрузкиОбщийОтборДокументов.Заголовок = Текст;
	Элементы.ДополнениеВыгрузкиОчисткаОбщегоОтбора.Видимость = Не НетОтбора;
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеДополненияДетально()
	
	Текст = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиОписаниеДетальногоОтбора(ДополнениеВыгрузки);
	НетОтбора = ПустаяСтрока(Текст);
	Если НетОтбора Тогда
		Текст = НСтр("ru='Дополнительные данные не выбраны'");
	КонецЕсли;
	
	Элементы.ДополнениеВыгрузкиДетальныйОтбор.Заголовок = Текст;
	Элементы.ДополнениеВыгрузкиОчисткаДетальногоОтбора.Видимость = Не НетОтбора;
КонецПроцедуры

// Возвращает булево - успешно/нет (настройка не найдена)
&НаСервере 
Функция ДополнениеВыгрузкиУстановитьНастройкиСервер(ПредставлениеНастройки)
	
	Результат = ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиВосстановитьНастройки(ДополнениеВыгрузки, ПредставлениеНастройки);
	УстановитьОписаниеОтборовДополненияВыгрузки();
	
	Возврат Результат;
КонецФункции

&НаСервере 
Функция ДополнениеВыгрузкиИсторияНастроекСервер()
	
	Возврат ОбменДаннымиСервер.ИнтерактивноеИзменениеВыгрузкиИсторияНастроек(ДополнениеВыгрузки);
	
КонецФункции

&НаСервере
Процедура ДополнениеВыгрузкиВариантВыгрузкиУстановитьВидимость()
	
	Элементы.ГруппаОтборВсеДокументы.Доступность  = ДополнениеВыгрузки.ВариантВыгрузки=1;
	Элементы.ГруппаОтборДетальный.Доступность     = ДополнениеВыгрузки.ВариантВыгрузки=2;
	Элементы.ГруппаОтборНастраиваемый.Доступность = ДополнениеВыгрузки.ВариантВыгрузки=3;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработчики событий перехода и вспомогательное
//

&НаКлиенте
Функция Подключаемый_ОжиданиеВыгрузки_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	// Запуск длительной операции
	ФоновоеЗадание = ФоновоеЗаданиеВыгрузкиНаСервере();
	
	СостояниеДлительнойОперации = НовоеСостояниеДлительнойОперации();
	СостояниеДлительнойОперации.Идентификатор   = ФоновоеЗадание.Идентификатор;
	СостояниеДлительнойОперации.АдресРезультата = ФоновоеЗадание.АдресРезультата;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРегистрацииИВыгрузки", 0.1, Истина);
КонецФункции

&НаКлиенте
Функция Подключаемый_Окончание_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	УспешноеЗавершение = СостояниеДлительнойОперации.ИнформацияОбОшибке = Неопределено;
	
	Элементы.ГруппаЗавершеноУспешно.Видимость = УспешноеЗавершение;
	Элементы.ГруппаЗавершеноСОшибками.Видимость = Не УспешноеЗавершение;
КонецФункции

// Периодический обработчик ожидания первой фазы - фоновая регистрация
&НаКлиенте
Процедура ОбработчикОжиданияРегистрацииИВыгрузки()
	
	СостояниеОбмена = СостояниеФоновогоЗаданияНаСервере(СостояниеДлительнойОперации.Идентификатор);
	
	Если Не СостояниеОбмена.Завершено Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияРегистрацииИВыгрузки", СостояниеДлительнойОперации.ИнтервалОжидания, Истина);
		Возврат;
	КонецЕсли;
	
	СостояниеДлительнойОперации.ИнформацияОбОшибке = СостояниеОбмена.ИнформацияОбОшибке;
	Если СостояниеДлительнойОперации.ИнформацияОбОшибке <> Неопределено Тогда
		// Завершено с ошибкой, идем на страницу завершения
		ПерейтиДалее();
		Возврат;
	КонецЕсли;
	
	// Выгрузка завершена, будем ожидать завершения сессии
	Сессия = ПолучитьИзВременногоХранилища(СостояниеДлительнойОперации.АдресРезультата);
	
	СостояниеДлительнойОперации = НовоеСостояниеДлительнойОперации();
	СостояниеДлительнойОперации.Идентификатор  = Сессия.Сессия;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияКорреспондента", СостояниеДлительнойОперации.ИнтервалОжидания, Истина);
КонецПроцедуры

// Периодический обработчик ожидания второй фазы - фоновая выгрузка
&НаКлиенте
Процедура ОбработчикОжиданияКорреспондента()
	
	Статус = СтатусСессииСообщения(СостояниеДлительнойОперации.Идентификатор);
	
	Если Статус = "Выполняется" Тогда
		ПодключитьОбработчикОжидания("ОбработчикОжиданияКорреспондента", СостояниеДлительнойОперации.ИнтервалОжидания, Истина);
		
	ИначеЕсли Статус = "Успешно" Тогда
		ПерейтиДалее();
		
	Иначе
		СостояниеДлительнойОперации.ИнформацияОбОшибке = НСтр("ru = 'Ошибка сообщения корреспонденту'");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции
// 

&НаКлиентеНаСервереБезКонтекста
Функция НовоеСостояниеДлительнойОперации()
	
	СостояниеДлительнойОперации = Новый Структура("ИнформацияОбОшибке, Идентификатор, АдресРезультата");
	СостояниеДлительнойОперации.Вставить("ИнтервалОжидания", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 5, 3) );
	
	Возврат СостояниеДлительнойОперации;
КонецФункции

&НаСервереБезКонтекста
Функция СостояниеФоновогоЗаданияНаСервере(Знач ИдентификаторФоновогоЗадания)
	
	Результат = Новый Структура("Завершено, ИнформацияОбОшибке", Истина);
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторФоновогоЗадания);
	Если Задание <> Неопределено Тогда
		// Все непонятное - завершено
		Результат.Завершено = Задание.Состояние <> СостояниеФоновогоЗадания.Активно;
		Если Результат.Завершено И Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Результат.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СтатусСессииСообщения(Знач Идентификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.СессииОбменаСообщениямиСистемы.СтатусСессии(Идентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗавершитьФоновоеЗадание(Знач Идентификатор)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание <> Неопределено Тогда
		Задание.Отменить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеВыгрузкиНаСервере()
	
	Результат = Новый Структура("АдресРезультата", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор) );
	
	ПараметрыФоновогоВыполнения = Новый Массив;
	
	ПараметрыВыгрузки = Новый Структура;
	МетаОбработка = Метаданные.Обработки.ИнтерактивноеИзменениеВыгрузки;
	Для Каждого МетаРеквизит Из МетаОбработка.Реквизиты Цикл
		ИмяРеквизита = МетаРеквизит.Имя;
		Если ИмяРеквизита = "КомпоновщикОтбораВсехДокументов" Тогда
			ПараметрыВыгрузки.Вставить(ИмяРеквизита, ДополнениеВыгрузки[ИмяРеквизита].ПолучитьНастройки());
		Иначе
			ПараметрыВыгрузки.Вставить(ИмяРеквизита, ДополнениеВыгрузки[ИмяРеквизита]);
		КонецЕсли;
	КонецЦикла;
	ПараметрыВыгрузки.Вставить("ДополнительнаяРегистрацияСценарияУзла", ДополнениеВыгрузки.ДополнительнаяРегистрацияСценарияУзла.Выгрузить() );
	ПараметрыВыгрузки.Вставить("ДополнительнаяРегистрация",             ДополнениеВыгрузки.ДополнительнаяРегистрация.Выгрузить() );
	
	ПараметрыФоновогоВыполнения.Добавить( ПараметрыВыгрузки );
	ПараметрыФоновогоВыполнения.Добавить( Результат.АдресРезультата );
	
	Задание = ФоновыеЗадания.Выполнить("ОбменДаннымиВМоделиСервиса.ОбменПоТребованию", 
		ПараметрыФоновогоВыполнения, , НСтр("ru = 'Интерактивный обмен по требованию.'"));
		
	Результат.Вставить("Идентификатор", Задание.УникальныйИдентификатор);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМАЯ ЧАСТЬ: Инициализация переходов помощника
//

&НаСервере
Процедура СценарийПолныйВручную()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ИзменениеСоставаВыгрузки", "СтраницаНавигацииНачало");
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеВыгрузки",         "СтраницаНавигацииОжидание" , , "ОжиданиеВыгрузки_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(3, "Окончание",                "СтраницаНавигацииОкончание", , "Окончание_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура СценарийБезДобавления()
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "ОжиданиеВыгрузки", "СтраницаНавигацииОжидание" , , "ОжиданиеВыгрузки_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(2, "Окончание",        "СтраницаНавигацииОкончание", , "Окончание_ПриОткрытии");
КонецПроцедуры

#КонецОбласти