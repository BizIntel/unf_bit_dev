
#Область ПеременныеФормы

// Параметры опроса завершения фонового задания. См. общий модуль ДлительныеОперацииКлиент
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

// Используется для сравнения имеющегося и нового значения реквизита ДатаФормированияДокументовСчета.
// См. Процедуру ДатаФормированияДокументовСчетаОкончаниеВводаТекста
&НаКлиенте
Перем ДатаФормированияДокументовСчетаКэш, ДатаФормированияДокументовАктыКэш;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КлючНастроекПечатныеФормыСчета = ИмяФормы + "/Документ.СчетНаОплату";
	КлючНастроекПечатныеФормыАкта  = ИмяФормы + "/Документ.АктВыполненныхРабот";
	
	УстановитьУсловноеОформлениеФормы();
	
	// Настройки формы
	ВосстановитьНастройкиФормы();
	
	ЗаполнитьСписокПечатныхФорм();
	
	// Выбор периода
	ПолучитьПериодичностиДоговоровОбслуживания();
	ПолучитьПериодОтбораПоПериодичности(ОтборПериод, ПредставлениеПериода, ПериодичностьПериода, ДатаФормированияДокументовСчета, ДатаФормированияДокументовАкты);
	
	СписокСчетаНаОплату.Параметры.УстановитьЗначениеПараметра("АкутальнаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(СписокСчетаНаОплату);
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(СписокАктыВыполненныхРабот);
	
	ПоказатьСкрытьГруппуОпрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
	ПодключитьОбработчикОжидания("ЗапуститьОбновлениеДанныхФормы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборПечатныхФормДляОтправки" Тогда
		ЗаполнитьСписокПечатныхФорм();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЛевойПанелиФормы

&НаКлиенте
Процедура ДатаФормированияДокументовСчетаПриИзменении(Элемент)
	
	ИзменениеДаты = Истина;
	
	Если ДатаФормированияДокументовСчетаКэш <> Неопределено Тогда
		ИзменениеДаты = ПроверитьКорректностьВыбораДатыФормированияДокументов("Счет", ДатаФормированияДокументовСчета);
	КонецЕсли;
	
	Если НЕ ИзменениеДаты Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаФормированияДокументовАктыИзменятьАвтоматически Тогда
		ДатаФормированияДокументовАкты = ДатаФормированияДокументовСчета;
	КонецЕсли;
	
	ЗапуститьОбновлениеДанныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаФормированияДокументовСчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьКорректностьВыбораДатыФормированияДокументов("Счет", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаФормированияДокументовСчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДатаФормированияДокументовСчетаКэш = ДатаФормированияДокументовСчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаФормированияДокументовАктыПриИзменении(Элемент)
	
	Если ДатаФормированияДокументовАктыКэш <> Неопределено Тогда
		ПроверитьКорректностьВыбораДатыФормированияДокументов("Акт", ДатаФормированияДокументовАкты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаФормированияДокументовАктыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьКорректностьВыбораДатыФормированияДокументов("Акт", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаФормированияДокументовАктыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДатаФормированияДокументовАктыКэш = ДатаФормированияДокументовАкты;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговорыОбслуживанияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьСписокРасшифровкаДоговораОбслуживания", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговорыОбслуживанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СписокДоговорыОбслуживания.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Неопределено;
	
	Если Поле.Имя = "СписокДоговорыОбслуживанияКонтрагент" Тогда
		ПоказатьЗначение(, ТекущаяСтрока.Контрагент);
	ИначеЕсли Поле.Имя = "СписокДоговорыОбслуживанияДоговор" Тогда
		ПоказатьЗначение(, ТекущаяСтрока.Договор);
	ИначеЕсли Поле.Имя = "СписокДоговорыОбслуживанияТарифныйПлан" Тогда
		ПоказатьЗначение(, ТекущаяСтрока.ТарифныйПлан);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговорыОбслуживанияФормироватьСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СписокДоговорыОбслуживания.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.ФормироватьСчет Тогда
		ТекущаяСтрока.ФормироватьАкт = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговорыОбслуживанияФормироватьАктПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СписокДоговорыОбслуживания.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ФормироватьАкт Тогда
		ТекущаяСтрока.ФормироватьСчет = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасшифровкаДоговораОбслуживанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.СписокРасшифровкаДоговораОбслуживания.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураОтбора = ТекущаяСтрока.Номенклатура;
	
	Если Поле = Элементы.СписокРасшифровкаДоговораОбслуживанияНоменклатура Тогда
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", ТекущаяСтрока.Номенклатура));
		
	ИначеЕсли Поле = Элементы.СписокРасшифровкаДоговораОбслуживанияХарактеристика
		И ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", ТекущаяСтрока.Характеристика));
		
	ИначеЕсли Поле = Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноСЦеной
		ИЛИ Поле = Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноСЦеной
		ИЛИ Поле = Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноБезЦены
		ИЛИ Поле = Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноБезЦены Тогда
		
		ПереключитьСписокГруппыПодробностиПоДоговору(Элементы.СписокДвиженияПоДоговоруОбслуживания.Имя);
	ИначеЕсли Поле = Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаВыставлено
		ИЛИ Поле = Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоВыставлено Тогда
		
		ПереключитьСписокГруппыПодробностиПоДоговору(Элементы.СписокСчетаНаОплату.Имя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПравойПанелиФормы

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьВыборИзМеню(
		Новый ОписаниеОповещения("ПредставлениеПериодаНажатиеЗавершение", ЭтотОбъект),
		ПериодичностиДоговоров,
		Элемент
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбратьПериодичность(Результат.Значение);
	ПолучитьПериодОтбораПоПериодичности(ОтборПериод, ПредставлениеПериода, ПериодичностьПериода, ДатаФормированияДокументовСчета, ДатаФормированияДокументовАкты);
	
	ЗапуститьОбновлениеДанныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПоказыватьКолонкуДатаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьКолонкуДоговорыПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьКолонкуТарифыПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеСчетовОтправлятьПоПочтеПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеСчетовПечататьПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеАктовПриИзменении(Элемент)
	
	Если НЕ ФормированиеАктов Тогда
		ФормированиеАктовПроводить = Ложь;
		ФормированиеАктовФормироватьСчетаФактуры = Ложь;
		ФормированиеАктовОтправлятьПоПочте = Ложь;
		ФормированиеАктовПечатать = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеАктовПроводитьПриИзменении(Элемент)
	
	Если НЕ ФормированиеАктовПроводить Тогда
		ФормированиеАктовФормироватьСчетаФактуры = Ложь;
		ФормированиеАктовОтправлятьПоПочте = Ложь;
		ФормированиеАктовПечатать = Ложь;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеАктовОтправлятьПоПочтеПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеАктовПечататьПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеСчетовПечатныеФормыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы",          Нстр("ru='Выбор печатной формы'"));
	ПараметрыФормы.Вставить("ИмяМенеджераОбъекта",     "Документ.СчетНаОплату");
	ПараметрыФормы.Вставить("ИмяФормыОбъектаПечати",   "Документ.СчетНаОплату.Форма.ФормаСписка");
	ПараметрыФормы.Вставить("КлючНастроек",            КлючНастроекПечатныеФормыСчета);
	ПараметрыФормы.Вставить("РежимВыбораПечатныхФорм", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПечатныхФормДляОтправки", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеАктовПечатныеФормыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы",          Нстр("ru='Выбор печатной формы'"));
	ПараметрыФормы.Вставить("ИмяМенеджераОбъекта",     "Документ.АктВыполненныхРабот");
	ПараметрыФормы.Вставить("ИмяФормыОбъектаПечати",   "Документ.АктВыполненныхРабот.Форма.ФормаСписка");
	ПараметрыФормы.Вставить("КлючНастроек",            КлючНастроекПечатныеФормыАкта);
	ПараметрыФормы.Вставить("РежимВыбораПечатныхФорм", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПечатныхФормДляОтправки", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если ФормированиеСчетовОтправлятьПоПочте ИЛИ (ФормированиеАктов И ФормированиеАктовОтправлятьПоПочте) Тогда
		ПроверитьНастройкиПочтовойУчетнойЗаписи();
	Иначе
		ПроверитьНастройкиОбработкиПередФормированиемДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеСчетовСнятьПометки(Команда)
	
	СчетчикПометокСчета = 0;
	СчетчикПометокАкты = 0;
	Для каждого Эл Из СписокДоговорыОбслуживания Цикл
		
		Эл.ФормироватьСчет = Ложь;
		Эл.ФормироватьАкт = Ложь;
		
	КонецЦикла;
	НастроитьКомандыПроставленияПометок(Элементы, СчетчикПометокСчета, СчетчикПометокАкты);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеСчетовПроставитьПометки(Команда)
	
	СчетчикПометокСчета = 0;
	Для каждого Эл Из СписокДоговорыОбслуживания Цикл
		
		Если НЕ ЗначениеЗаполнено(Эл.Сумма) Тогда
			Продолжить;
		КонецЕсли;
		
		Эл.ФормироватьСчет = Истина;
		СчетчикПометокСчета = СчетчикПометокСчета + 1;
		
	КонецЦикла;
	
	НастроитьКомандыПроставленияПометок(Элементы, СчетчикПометокСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеАктовСнятьПометки(Команда)
	
	СчетчикПометокАкты = 0;
	Для каждого Эл Из СписокДоговорыОбслуживания Цикл
		
		Эл.ФормироватьАкт = Ложь;
		
	КонецЦикла;
	НастроитьКомандыПроставленияПометок(Элементы,, СчетчикПометокАкты);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеАктовПроставитьПометки(Команда)
	
	СчетчикПометокСчета = 0;
	СчетчикПометокАкты = 0;
	Для каждого Эл Из СписокДоговорыОбслуживания Цикл
		
		Если НЕ ЗначениеЗаполнено(Эл.Сумма) Тогда
			Продолжить;
		КонецЕсли;
		
		Эл.ФормироватьСчет = Истина;
		Эл.ФормироватьАкт = Истина;
		СчетчикПометокАкты = СчетчикПометокАкты + 1;
		
	КонецЦикла;
	СчетчикПометокСчета = СчетчикПометокАкты;
	
	НастроитьКомандыПроставленияПометок(Элементы, СчетчикПометокСчета, СчетчикПометокАкты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы(Команда)
	
	ПериодичностьИзменена = ПолучитьПериодичностиДоговоровОбслуживания();
	Если ПериодичностьИзменена Тогда
		ПолучитьПериодОтбораПоПериодичности(ОтборПериод, ПредставлениеПериода, ПериодичностьПериода, ДатаФормированияДокументовСчета, ДатаФормированияДокументовАкты);
	КонецЕсли;
	ЗапуститьОбновлениеДанныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПредыдущийПериод(Команда)
	
	ПолучитьПериодОтбораПоПериодичности(ОтборПериод, ПредставлениеПериода, ПериодичностьПериода, ДатаФормированияДокументовСчета, ДатаФормированияДокументовАкты, -1);
	ЗапуститьОбновлениеДанныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСледующийПериод(Команда)
	
	ПолучитьПериодОтбораПоПериодичности(ОтборПериод, ПредставлениеПериода, ПериодичностьПериода, ДатаФормированияДокументовСчета, ДатаФормированияДокументовАкты, 1);
	ЗапуститьОбновлениеДанныхФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельНавигацииРасшифровка(Команда)
	ПереключитьСписокГруппыПодробностиПоДоговору(Элементы.СписокРасшифровкаДоговораОбслуживания.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПанельНавигацииПервичныеДокументы(Команда)
	ПереключитьСписокГруппыПодробностиПоДоговору(Элементы.СписокДвиженияПоДоговоруОбслуживания.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПанельНавигацииСчетаНаОплату(Команда)
	ПереключитьСписокГруппыПодробностиПоДоговору(Элементы.СписокСчетаНаОплату.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПанельНавигацииАктыВыполненныхРабот(Команда)
	ПереключитьСписокГруппыПодробностиПоДоговору(Элементы.СписокАктыВыполненныхРабот.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОпрос(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФормаОпросаБиллингЗавершение",
		ЭтотОбъект
	);
	
	ОткрытьФорму("ОбщаяФорма.ФормаОпросаБиллинг",,,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПериодомИПериодичностью

&НаСервере
Функция ПолучитьПериодичностиДоговоровОбслуживания()
	
	ПериодичностьИзмененаАвтоматически = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность = ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.Квартал)
	|				ИЛИ ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность = ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.Полгода)
	|				ИЛИ ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность = ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.Год)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц)
	|		ИНАЧЕ ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность
	|	КОНЕЦ КАК ДоговорОбслуживанияПериодичность
	|ПОМЕСТИТЬ ВТПериодичностиДоговоров
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.БиллингПериодичностьДоговораОбслуживания КАК БиллингПериодичностьДоговораОбслуживания
	|		ПО ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность = БиллингПериодичностьДоговораОбслуживания.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность = ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.Квартал)
	|				ИЛИ ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность = ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.Полгода)
	|				ИЛИ ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность = ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.Год)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц)
	|		ИНАЧЕ ДоговорыКонтрагентов.ДоговорОбслуживанияПериодичность
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериодичностиДоговоров.ДоговорОбслуживанияПериодичность КАК Периодичность,
	|	ВТПериодичностиДоговоров.ДоговорОбслуживанияПериодичность.Порядок КАК ДоговорОбслуживанияПериодичностьПорядок
	|ИЗ
	|	ВТПериодичностиДоговоров КАК ВТПериодичностиДоговоров
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорОбслуживанияПериодичностьПорядок";
	
	ПериодичностиДоговоров.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПериодичностьПредставление = ПредставлениеПериодичности(Выборка.Периодичность);
		ПериодичностиДоговоров.Добавить(Выборка.Периодичность, ПериодичностьПредставление);
	КонецЦикла;
	
	Если ПериодичностиДоговоров.Количество() <> 0 И ПериодичностиДоговоров.НайтиПоЗначению(ПериодичностьПериода) = Неопределено Тогда
		ПериодичностьПериода = ПериодичностиДоговоров[0].Значение;
		ПериодичностьИзмененаАвтоматически = Истина;
	КонецЕсли;
	
	Если ПериодичностиДоговоров.Количество() > 1 Тогда
		Элементы.ПредставлениеПериода.Гиперссылка = Истина;
		Элементы.ПредставлениеПериода.Подсказка = Нстр("ru='Изменить периодичность'");
	Иначе
		Элементы.ПредставлениеПериода.Гиперссылка = Ложь;
		Элементы.ПредставлениеПериода.Подсказка = "";
	КонецЕсли;
	
	Возврат ПериодичностьИзмененаАвтоматически;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПериодичности(Периодичность)
	
	Представление = Неопределено;
	
	Если Периодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.День Тогда
		Представление = НСтр("ru='Этот день'");
	ИначеЕсли Периодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Неделя Тогда
		Представление = НСтр("ru='Эта неделя'");
	ИначеЕсли Периодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Месяц Тогда
		Представление = НСтр("ru='Этот месяц'");
	ИначеЕсли Периодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Квартал Тогда
		Представление = НСтр("ru='Этот квартал'");
	ИначеЕсли Периодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Полгода Тогда
		Представление = НСтр("ru='Это полугодие'");
	ИначеЕсли Периодичность = Перечисления.БиллингПериодичностьДоговораОбслуживания.Год Тогда
		Представление = НСтр("ru='Этот год'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ВыбратьПериодичность(ВыбраннаяПериодичность)
	
	ПериодичностьПериода = ВыбраннаяПериодичность;
	
	Если ПериодичностьПериода = Перечисления.БиллингПериодичностьДоговораОбслуживания.День Тогда
		ПодсказкаПредыдущийИнтервал = НСтр("ru='Предыдущий день'");
		ПодсказкаСледующийИнтервал  = НСтр("ru='Следующий день'");
	ИначеЕсли ПериодичностьПериода = Перечисления.БиллингПериодичностьДоговораОбслуживания.Неделя Тогда
		ПодсказкаПредыдущийИнтервал = НСтр("ru='Предыдущая нелеля '");
		ПодсказкаСледующийИнтервал  = НСтр("ru='Следующая неделя'");
	ИначеЕсли ПериодичностьПериода = Перечисления.БиллингПериодичностьДоговораОбслуживания.Месяц Тогда
		ПодсказкаПредыдущийИнтервал = НСтр("ru='Предыдущий месяц'");
		ПодсказкаСледующийИнтервал  = НСтр("ru='Следующий месяц'");
	ИначеЕсли ПериодичностьПериода = Перечисления.БиллингПериодичностьДоговораОбслуживания.Квартал Тогда
		ПодсказкаПредыдущийИнтервал = НСтр("ru='Предыдущий квартал'");
		ПодсказкаСледующийИнтервал  = НСтр("ru='Следующий квартал'");
	ИначеЕсли ПериодичностьПериода = Перечисления.БиллингПериодичностьДоговораОбслуживания.Год Тогда
		ПодсказкаПредыдущийИнтервал = НСтр("ru='Предыдущий год'");
		ПодсказкаСледующийИнтервал  = НСтр("ru='Следующий год'");
	КонецЕсли;
	
	Команды.Найти("ВыбратьПредыдущийПериод").Подсказка = ПодсказкаПредыдущийИнтервал;
	Команды.Найти("ВыбратьСледующийПериод").Подсказка = ПодсказкаСледующийИнтервал;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьПериодОтбораПоПериодичности(ОтборПериод, ПредставлениеПериода, Периодичность, ДатаФормированияДокументовСчета, ДатаФормированияДокументовАкты, Направление = 0)
	
	ТекущаяДатаСеанса = УправлениеНебольшойФирмойПовтИсп.ПолучитьТекущуюДатаСеанса();
	Если Направление = 0 Тогда
		ДатаОтсчета = ТекущаяДатаСеанса;
	ИначеЕсли Направление > 0 Тогда
		ДатаОтсчета = ОтборПериод.ДатаОкончания;
	Иначе
		ДатаОтсчета = ОтборПериод.ДатаНачала;
	КонецЕсли;
	
	Если Периодичность       = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.День") Тогда
		
		ОтборПериод.ДатаНачала    = НачалоДня(ДатаОтсчета + Направление);
		ОтборПериод.ДатаОкончания = КонецДня(ОтборПериод.ДатаНачала);
		
	ИначеЕсли Периодичность  = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Неделя") Тогда
		
		ОтборПериод.ДатаНачала    = НачалоНедели(ДатаОтсчета + Направление);
		ОтборПериод.ДатаОкончания = КонецНедели(ОтборПериод.ДатаНачала);
		
	ИначеЕсли Периодичность  = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Месяц") Тогда
		
		ОтборПериод.ДатаНачала    = НачалоМесяца(ДатаОтсчета + Направление);
		ОтборПериод.ДатаОкончания = КонецМесяца(ОтборПериод.ДатаНачала);
		
	ИначеЕсли Периодичность  = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Квартал") Тогда
		
		ОтборПериод.ДатаНачала    = НачалоКвартала(ДатаОтсчета + Направление);
		ОтборПериод.ДатаОкончания = КонецКвартала(ОтборПериод.ДатаНачала);
		
	ИначеЕсли Периодичность  = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Полгода") Тогда
		
		Если Направление = 0 Тогда
			
			ОтборПериод = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтоПолугодие);
			
		Иначе
			
			НачалоГода      = НачалоГода(ДатаОтсчета + Направление);
			НачалоПолугодия = ДобавитьМесяц(НачалоГода, 6);
			
			Если ДатаОтсчета + Направление >= НачалоПолугодия Тогда
				ОтборПериод.ДатаНачала    = НачалоПолугодия;
				ОтборПериод.ДатаОкончания = КонецГода(ДатаОтсчета + Направление);
			Иначе
				ОтборПериод.ДатаНачала    = НачалоГода;
				ОтборПериод.ДатаОкончания = КонецМесяца(ДобавитьМесяц(НачалоГода, 5));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Периодичность  = ПредопределенноеЗначение("Перечисление.БиллингПериодичностьДоговораОбслуживания.Год") Тогда
		
		ОтборПериод.ДатаНачала    = НачалоГода(ДатаОтсчета + Направление);
		ОтборПериод.ДатаОкончания = КонецГода(ОтборПериод.ДатаНачала);
		
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	
	Если ТекущаяДатаСеанса >= ОтборПериод.ДатаНачала
		И ТекущаяДатаСеанса <= ОтборПериод.ДатаОкончания Тогда
		// Актуальный период; Дата формирования документов = текущая дата.
		ДатаФормированияДокументовСчета = ТекущаяДатаСеанса;
	Иначе
		// Предыдущий/будущий период; Дата формирования документов = конец периода.
		ДатаФормированияДокументовСчета = ОтборПериод.ДатаОкончания;
	КонецЕсли;
	
	ДатаФормированияДокументовАкты = ДатаФормированияДокументовСчета;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьВыбораДатыФормированияДокументов(ДокументТип, НовоеЗначение, СтандартнаяОбработка = Неопределено)
	
	Если НовоеЗначение >= ОтборПериод.ДатаНачала
		И НовоеЗначение <= ОтборПериод.ДатаОкончания Тогда
		
		// Дата корректна; принимает новое значение.
		ИзменениеДаты = Истина;
		
		Если ДокументТип = "Счет" Тогда
			Если ДатаФормированияДокументовСчетаКэш = Неопределено Тогда
				ДатаФормированияДокументовАктыИзменятьАвтоматически = (ДатаФормированияДокументовСчета = ДатаФормированияДокументовАкты);
			Иначе
				ДатаФормированияДокументовАктыИзменятьАвтоматически = (ДатаФормированияДокументовСчетаКэш = ДатаФормированияДокументовАкты);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Дата некорректна; устанавливается предыдущее значение.
		ИзменениеДаты = Ложь;
		
		Если СтандартнаяОбработка <> Неопределено Тогда
			// Дата изменялась через стандартный диалог выбора даты.
			СтандартнаяОбработка = Ложь;
		Иначе
			// Дата изменялась через редактирование текста поля ввода.
			Если ДокументТип = "Счет" Тогда
				ДатаФормированияДокументовСчета = ДатаФормированияДокументовСчетаКэш;
			ИначеЕсли ДокументТип = "Акт" Тогда
				ДатаФормированияДокументовАкты = ДатаФормированияДокументовАктыКэш;
			КонецЕсли;
		КонецЕсли;
		
		ПоказатьПредупреждение(,
			СтрШаблон(
				НСтр("ru='Дата формируемых документов должна находиться в интервале выбранного периода: %1 — %2'"),
				Формат(ОтборПериод.ДатаНачала, "ДЛФ=D"),
				Формат(ОтборПериод.ДатаОкончания, "ДЛФ=D")
			)
		);
		
	КонецЕсли;
	
	Если ДокументТип = "Счет" Тогда
		ДатаФормированияДокументовСчетаКэш = Неопределено;
	ИначеЕсли ДокументТип = "Акт" Тогда
		ДатаФормированияДокументовАктыКэш = Неопределено;
	КонецЕсли;
	
	Возврат ИзменениеДаты;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеФоновыхЗаданий

&НаКлиенте
Процедура ЗапуститьОбновлениеДанныхФормы()
	
	ФоновоеЗадание = Неопределено;
	ФоновоеЗаданиеАдресРезультата = Неопределено;
	ФоновоеЗаданиеВыполнено = Ложь;
	ФоновоеЗаданиеЗапущено = Ложь;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	ОчиститьСообщения();
	
	ЗапуститьФоновоеЗаданиеОбновлениеДанныхФормы();
	УправлениеФормой();
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСозданиеПакетаДокументов()
	
	ФоновоеЗадание = Неопределено;
	ФоновоеЗаданиеАдресРезультата = Неопределено;
	ФоновоеЗаданиеВыполнено = Ложь;
	ФоновоеЗаданиеЗапущено = Ложь;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	ОчиститьСообщения();
	
	ЗапуститьФоновоеЗаданиеСозданиеПакетаДокументов();
	Если ФоновоеЗаданиеВыполнено Тогда
		ОбработатьЗавершениеФоновогоЗадания();
	КонецЕсли;
	УправлениеФормой();
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновоеЗаданиеОбновлениеДанныхФормы()
	
	Если МонопольныйРежим() Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено И НЕ ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		// Фоновое задание было запущено раньше, необходимо дождаться завершения.
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Периодичности = Новый СписокЗначений;
	Периодичности.Добавить(ПериодичностьПериода);
	Если ПериодичностьПериода = Перечисления.БиллингПериодичностьДоговораОбслуживания.Месяц Тогда
		Периодичности.Добавить(Перечисления.БиллингПериодичностьДоговораОбслуживания.Квартал);
		Периодичности.Добавить(Перечисления.БиллингПериодичностьДоговораОбслуживания.Полгода);
		Периодичности.Добавить(Перечисления.БиллингПериодичностьДоговораОбслуживания.Год);
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Периодичности", Периодичности);
	ПараметрыПроцедуры.Вставить("ДатаНачала",    ОтборПериод.ДатаНачала);
	ПараметрыПроцедуры.Вставить("ДатаОкончания", ОтборПериод.ДатаОкончания);
	ПараметрыПроцедуры.Вставить("ДатаФормированияДокументовСчета", ДатаФормированияДокументовСчета);
	
	НаименованиеЗадания = НСтр("ru = 'Получение данных по договорам обслуживания'");
	
	Результат = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ВыставлениеСчетовПоДоговорамОбслуживания.ПолучитьДанныеПоДоговорамОбслуживания",
		ПараметрыПроцедуры,
		НаименованиеЗадания,,
		Ложь
	);
	
	ФоновоеЗадание = "ФоновоеЗаданиеОбновлениеДанныхФормы";
	ФоновоеЗаданиеАдресРезультата = Результат.АдресХранилища;
	ФоновоеЗаданиеИдентификатор   = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Фоновое задание завершилось за время вызова, то данные уже получены.
		ФоновоеЗаданиеВыполнено = Истина;
		ОбработатьЗавершениеФоновогоЗаданияНаСервере();
	Иначе
		// Ожидаем завершения фонового задания.
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьФоновоеЗаданиеСозданиеПакетаДокументов()
	
	Если МонопольныйРежим() Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено И НЕ ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		// Фоновое задание было запущено раньше, необходимо дождаться завершения.
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ОтборПериодичностиДоговоров = Новый СписокЗначений;
	ОтборПериодичностиДоговоров.Добавить(ПериодичностьПериода);
	Если ПериодичностьПериода = Перечисления.БиллингПериодичностьДоговораОбслуживания.Месяц Тогда
		ОтборПериодичностиДоговоров.Добавить(Перечисления.БиллингПериодичностьДоговораОбслуживания.Квартал);
		ОтборПериодичностиДоговоров.Добавить(Перечисления.БиллингПериодичностьДоговораОбслуживания.Полгода);
		ОтборПериодичностиДоговоров.Добавить(Перечисления.БиллингПериодичностьДоговораОбслуживания.Год);
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДатаНачала",                      ОтборПериод.ДатаНачала);
	ПараметрыПроцедуры.Вставить("ДатаОкончания",                   ОтборПериод.ДатаОкончания);
	ПараметрыПроцедуры.Вставить("ДатаФормированияДокументовСчета", ДатаФормированияДокументовСчета);
	ПараметрыПроцедуры.Вставить("ДатаФормированияДокументовАкты",  ДатаФормированияДокументовАкты);
	ПараметрыПроцедуры.Вставить("Периодичности",                   ОтборПериодичностиДоговоров);
	ПараметрыПроцедуры.Вставить("СписокДоговорыОбслуживания",            СписокДоговорыОбслуживания.Выгрузить());
	ПараметрыПроцедуры.Вставить("СписокВыполнениеДоговоровОбслуживания", СписокВыполнениеДоговоровОбслуживания.Выгрузить());
	ПараметрыПроцедуры.Вставить("СписокРасшифровкаБиллинга",             СписокРасшифровкаБиллинга.Выгрузить());
	ПараметрыПроцедуры.Вставить("ФормированиеАктов",                        ФормированиеАктов);
	ПараметрыПроцедуры.Вставить("ФормированиеАктовПроводить",               ФормированиеАктовПроводить);
	ПараметрыПроцедуры.Вставить("ФормированиеАктовОтправлятьПоПочте",       ФормированиеАктовОтправлятьПоПочте);
	ПараметрыПроцедуры.Вставить("ФормированиеАктовФормироватьСчетаФактуры", ФормированиеАктовФормироватьСчетаФактуры);
	ПараметрыПроцедуры.Вставить("ФормированиеСчетовОтправлятьПоПочте", ФормированиеСчетовОтправлятьПоПочте);
	ПараметрыПроцедуры.Вставить("ШаблонСообщения", ФормированиеСчетовШаблонСообщения);
	
	НаименованиеЗадания = НСтр("ru = 'Получение данных по договорам обслуживания'");
	
	Результат = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ВыставлениеСчетовПоДоговорамОбслуживания.СоздатьПакетДокументов",
		ПараметрыПроцедуры,
		НаименованиеЗадания,,
		Ложь
	);
	
	ФоновоеЗадание = "ФоновоеЗаданиеСозданиеПакетаДокументов";
	ФоновоеЗаданиеАдресРезультата = Результат.АдресХранилища;
	ФоновоеЗаданиеИдентификатор   = Результат.ИдентификаторЗадания;
	
	Если Результат.ЗаданиеВыполнено Тогда
		// Фоновое задание завершилось за время вызова, то данные уже получены.
		ФоновоеЗаданиеВыполнено = Истина;
	Иначе
		// Ожидаем завершения фонового задания.
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте()
	
	Если НЕ ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	// Начнем опрос окончания фонового задания
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	Если ФоновоеЗаданиеЗапущено Тогда
		
		Если ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
			// Данные расчитаны, обновим данные формы
			ФоновоеЗаданиеЗапущено = Ложь;
			ФоновоеЗаданиеВыполнено = Истина;
			
			ОбработатьЗавершениеФоновогоЗадания();
			
			УправлениеФормой();
			
		Иначе
			// Продолжим ожидание
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

// Вызывает серверную обработку заполнения таблиц формы. Если в фоновом задании выполнялось формирование документов,..
// то на клиентскую сторону возвращается массив созданных документов для дальнейшей обработки (вызов команд печати и т.д.)
//
&НаКлиенте
Процедура ОбработатьЗавершениеФоновогоЗадания()
	
	Результат = Новый Структура;
	ОбработатьЗавершениеФоновогоЗаданияНаСервере(Результат);
	
	Если ФоновоеЗадание = "ФоновоеЗаданиеСозданиеПакетаДокументов" Тогда
		
		ТекстОповещениеАкты = "";
		ТекстОповещениеСчета = "";
		ТекстОповещениеЭлектронныеПисьма = "";
		
		Если Результат.Свойство("АктыВыполненныхРабот") Тогда
			
			ТекстОповещениеАкты = СтрШаблон(
				НСтр("ru='Актов выполненных работ — %1'"),
				Результат.АктыВыполненныхРабот.Количество()
			);
			
			Если ФормированиеАктовПечатать Тогда
				
				ИменаМакетовАктВыполненныхРабот = "";
				Для каждого Эл Из ФормированиеАктовПечатныеФормы Цикл
					Если ИменаМакетовАктВыполненныхРабот <> "" Тогда
						ИменаМакетовАктВыполненныхРабот = ИменаМакетовАктВыполненныхРабот + ",";
					КонецЕсли;
					ИменаМакетовАктВыполненныхРабот = ИменаМакетовАктВыполненныхРабот + Эл.Значение;
				КонецЦикла;
				
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.АктВыполненныхРабот", ИменаМакетовАктВыполненныхРабот, Результат.АктыВыполненныхРабот, ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.Свойство("СчетаНаОплату") Тогда
			
			ТекстОповещениеСчета = СтрШаблон(
				НСтр("ru='Счетов на оплату — %1'"),
				Результат.СчетаНаОплату.Количество()
			);
			
			Если ФормированиеСчетовПечатать Тогда
				
				ИменаМакетовСчетНаОплату = "";
				Для каждого Эл Из ФормированиеСчетовПечатныеФормы Цикл
					Если ИменаМакетовСчетНаОплату <> "" Тогда
						ИменаМакетовСчетНаОплату = ИменаМакетовСчетНаОплату + ",";
					КонецЕсли;
					ИменаМакетовСчетНаОплату = ИменаМакетовСчетНаОплату + Эл.Значение;
				КонецЦикла;
				
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.СчетНаОплату", ИменаМакетовСчетНаОплату, Результат.СчетаНаОплату, ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат.Свойство("ЭлектронныеПисьма") Тогда
			
			ТекстОповещениеЭлектронныеПисьма = СтрШаблон(
				НСтр("ru='Электронных писем — %1'"),
				Результат.ЭлектронныеПисьма.Количество()
			);
			
		КонецЕсли;
		
		ТекстОповещение = СтрШаблон(
			НСтр("ru='Создано документов:%1%2%3'"),
			ТекстОповещениеСчета,
			ТекстОповещениеАкты,
			ТекстОповещениеЭлектронныеПисьма
		);
		
		Текст = НСтр("ru='Создано документов:'");
		Пояснение = СтрШаблон(
			"%1%2%3",
			ТекстОповещениеСчета,
			?(ЗначениеЗаполнено(ТекстОповещениеАкты), Символы.ПС + ТекстОповещениеАкты, ""),
			?(ЗначениеЗаполнено(ТекстОповещениеЭлектронныеПисьма), Символы.ПС + ТекстОповещениеЭлектронныеПисьма, "")
		);
		
		ПоказатьОповещениеПользователя(Текст,, Пояснение);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицы формы: СписокВыполнениеДоговоровОбслуживания, СписокДоговорыОбслуживания.
// В случае если в фоновом задании создавались документы, они будут добавлены в возвращаемый параметр Результат.
//
&НаСервере
Процедура ОбработатьЗавершениеФоновогоЗаданияНаСервере(Результат = Неопределено)
	
	ДанныеФормы = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
	
	Если ДанныеФормы.Свойство("Ошибки") Тогда
		Для каждого Ошибка Из ДанныеФормы.Ошибки Цикл
			СообщениеПользователю = Новый СообщениеПользователю;
			ЗаполнитьЗначенияСвойств(СообщениеПользователю, Ошибка);
			СообщениеПользователю.ИдентификаторНазначения = УникальныйИдентификатор;
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		
		Если ДанныеФормы.Свойство("СчетаНаОплату") Тогда
			Результат.Вставить("СчетаНаОплату", ДанныеФормы.СчетаНаОплату);
		КонецЕсли;
		
		Если ДанныеФормы.Свойство("АктыВыполненныхРабот") Тогда
			Результат.Вставить("АктыВыполненныхРабот", ДанныеФормы.АктыВыполненныхРабот);
		КонецЕсли;
		
		Если ДанныеФормы.Свойство("ЭлектронныеПисьма") Тогда
			Результат.Вставить("ЭлектронныеПисьма", ДанныеФормы.ЭлектронныеПисьма);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокДоговорыОбслуживания.Загрузить(ДанныеФормы.СписокДоговорыОбслуживания);
	СписокВыполнениеДоговоровОбслуживания.Загрузить(ДанныеФормы.СписокВыполнениеДоговоровОбслуживания);
	СписокРасшифровкаБиллинга.Загрузить(ДанныеФормы.СписокРасшифровкаБиллинга);
	СписокРасшифровкаДоговораОбслуживания.Очистить();
	СчетчикПометокСчета = ДанныеФормы.СчетчикПометокСчета;
	СчетчикПометокАкты = ДанныеФормы.СчетчикПометокАкты;
	
	Если ЗначениеЗаполнено(ТекущийКонтрагент)
		И ЗначениеЗаполнено(ТекущийДоговор) Тогда
		
		// После обновления данных на форме выделить строку, которая была выбрана до обновления.
		ПараметрыОтбора = Новый Структура("Контрагент,Договор", ТекущийКонтрагент, ТекущийДоговор);
		Строки = СписокДоговорыОбслуживания.НайтиСтроки(ПараметрыОтбора);
		Если Строки.Количество() <> 0 Тогда
			Элементы.СписокДоговорыОбслуживания.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
			ЗаполнитьСписокРасшифровкаДоговораОбслуживанияСервер();
			
			ЕстьПродажиСЦеной = Строки[0].ЕстьПозицииСЦеной;
			ЕстьПродажиБезЦены = Строки[0].ЕстьПозицииБезЦены;
			
		Иначе
			ТекущийКонтрагент = Неопределено;
			ТекущийДоговор    = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборыДинамическихСписков();
	НастроитьВидимостьКолонокСпискаРасшифровкаДоговораОбслуживания();
	НастроитьКомандыПроставленияПометок(Элементы, СчетчикПометокСчета, СчетчикПометокАкты);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиФормы

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	КлючОбъекта = "ОбработкаОбъект.ВыставлениеСчетовПоДоговорамОбслуживания";
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПериодичностьПериода", Перечисления.БиллингПериодичностьДоговораОбслуживания.Месяц);
	Настройки.Вставить("ФормаПоказыватьКолонкуДата", Ложь);
	Настройки.Вставить("ФормаПоказыватьКолонкуДоговоры", Ложь);
	Настройки.Вставить("ФормаПоказыватьКолонкуТарифы", Истина);
	
	Настройки.Вставить("ФормированиеАктов", Ложь);
	Настройки.Вставить("ФормированиеАктовПроводить", Ложь);
	Настройки.Вставить("ФормированиеАктовПечатать", Ложь);
	Настройки.Вставить("ФормированиеАктовФормироватьСчетаФактуры", Ложь);
	Настройки.Вставить("ФормированиеАктовОтправлятьПоПочте", Ложь);
	
	Настройки.Вставить("ФормированиеСчетовОтправлятьПоПочте", Ложь);
	Настройки.Вставить("ФормированиеСчетовПечатать", Ложь);
	Настройки.Вставить("ФормированиеСчетовШаблонСообщения");
	
	Для каждого Настройка Из Настройки Цикл
		
		ЗначениеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, Настройка.Ключ, Настройка.Значение);
		ЭтаФорма[Настройка.Ключ] = ЗначениеНастройки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	Настройки = Новый Массив;
	Настройки.Добавить("ПериодичностьПериода");
	Настройки.Добавить("ФормаПоказыватьКолонкуДата");
	Настройки.Добавить("ФормаПоказыватьКолонкуДоговоры");
	Настройки.Добавить("ФормаПоказыватьКолонкуТарифы");
	
	Настройки.Добавить("ФормированиеАктов");
	Настройки.Добавить("ФормированиеАктовПроводить");
	Настройки.Добавить("ФормированиеАктовПечатать");
	Настройки.Добавить("ФормированиеАктовФормироватьСчетаФактуры");
	Настройки.Добавить("ФормированиеАктовОтправлятьПоПочте");
	
	Настройки.Добавить("ФормированиеСчетовОтправлятьПоПочте");
	Настройки.Добавить("ФормированиеСчетовПечатать");
	Настройки.Добавить("ФормированиеСчетовШаблонСообщения");
	
	КлючОбъекта = "ОбработкаОбъект.ВыставлениеСчетовПоДоговорамОбслуживания";
	
	Для каждого КлючНастройки Из Настройки Цикл
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастройки, ЭтаФорма[КлючНастройки]);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаКлиенте
Процедура УправлениеФормой()
	
	// Выполнение фонового задания
	Если ФоновоеЗаданиеЗапущено И ФоновоеЗадание = "ФоновоеЗаданиеОбновлениеДанныхФормы" Тогда
		Элементы.СтраницыДоговоры.ТекущаяСтраница = Элементы.СтраницаОжиданиеВыполненияОперации;
		Элементы.НадписьОжиданиеОбновлениеДанных.Видимость = Истина;
		Элементы.НадписьОжиданиеФормированиеДокументов.Видимость = Ложь;
	ИначеЕсли ФоновоеЗаданиеЗапущено И ФоновоеЗадание = "ФоновоеЗаданиеСозданиеПакетаДокументов" Тогда
		Элементы.СтраницыДоговоры.ТекущаяСтраница = Элементы.СтраницаОжиданиеВыполненияОперации;
		Элементы.НадписьОжиданиеОбновлениеДанных.Видимость = Ложь;
		Элементы.НадписьОжиданиеФормированиеДокументов.Видимость = Истина;
	ИначеЕсли НЕ ФоновоеЗаданиеЗапущено Тогда
		Элементы.СтраницыДоговоры.ТекущаяСтраница = Элементы.СтраницаСписокДоговорыОбслуживания;
	КонецЕсли;
	
	Элементы.ГруппаКоманднаяПанельФормы.Доступность  = НЕ ФоновоеЗаданиеЗапущено;
	Элементы.ГруппаПодробностиПоДоговору.Доступность = НЕ ФоновоеЗаданиеЗапущено;
	Элементы.ПраваяПанель.Доступность                = НЕ ФоновоеЗаданиеЗапущено;
	
	// ГруппаКолонки
	Элементы.СписокДоговорыОбслуживанияГруппаДатаВыставленияДокументов.Видимость = ФормаПоказыватьКолонкуДата;
	Элементы.СписокДоговорыОбслуживанияДоговор.Видимость      = ФормаПоказыватьКолонкуДоговоры;
	Элементы.СписокДоговорыОбслуживанияТарифныйПлан.Видимость = ФормаПоказыватьКолонкуТарифы;
	
	// ГруппаФормированиеСчетов
	Элементы.ФормированиеСчетовПечатныеФормыПредставление.Видимость = ФормированиеСчетовПечатать;
	
	// ГруппаФормированиеАктов
	Элементы.ФормированиеАктовПроводить.Доступность                = ФормированиеАктов;
	Элементы.ФормированиеАктовПечатать.Доступность                 = ФормированиеАктов И ФормированиеАктовПроводить;
	Элементы.ФормированиеАктовПечатныеФормыПредставление.Видимость = ФормированиеАктов И ФормированиеАктовПечатать;
	Элементы.ФормированиеАктовФормироватьСчетаФактуры.Доступность  = ФормированиеАктов И ФормированиеАктовПроводить;
	Элементы.ФормированиеАктовОтправлятьПоПочте.Доступность        = ФормированиеАктов И ФормированиеАктовПроводить;
	
	Элементы.ФормированиеСчетовШаблонСообщения.Видимость = ФормированиеСчетовОтправлятьПоПочте ИЛИ ФормированиеАктовОтправлятьПоПочте;
	
	Элементы.СписокДоговорыОбслуживанияФормироватьАкт.Видимость = ФормированиеАктов;
	НастроитьКомандыПроставленияПометок(Элементы,, СчетчикПометокАкты);
	
	Элементы.ПанельНавигацииАктыВыполненныхРабот.Видимость = ФормированиеАктов;
	
	Если Элементы.СписокАктыВыполненныхРабот.Видимость Тогда
		ПереключитьСписокГруппыПодробностиПоДоговору(Элементы.СписокРасшифровкаДоговораОбслуживания.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеФормы()
	
	// Если СписокДоговорыОбслуживания.Сумма = 0, тогда неактивны флаги: ФормироватьСчет, ФормироватьАкт.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Отбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Отбор1 = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	Отбор1.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	Отбор1.Использование  = Истина;
	Отбор1.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокДоговорыОбслуживанияСумма.ПутьКДанным);
	Отбор1.ПравоеЗначение = 0;
	
	Отбор2 = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	Отбор2.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	Отбор2.Использование  = Истина;
	Отбор2.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокДоговорыОбслуживания.ЕстьПозицииБезСуммыВыставления");
	Отбор2.ПравоеЗначение = Ложь;
	
	ОформляемоеПоле                = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле           = Новый ПолеКомпоновкиДанных(Элементы.СписокДоговорыОбслуживанияФормироватьСчет.Имя);
	ОформляемоеПоле.Использование  = Истина;
	
	ОформляемоеПоле                = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле           = Новый ПолеКомпоновкиДанных(Элементы.СписокДоговорыОбслуживанияФормироватьАкт.Имя);
	ОформляемоеПоле.Использование  = Истина;
	
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("ТолькоПросмотр");
	Оформление.Значение      = Истина;
	Оформление.Использование = Истина;
	
	// Для оборотов номенклатуры, где УказанаСтоимость=Ложь.
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	Отбор = НовоеУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.Использование  = Истина;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноБезЦены.ПутьКДанным);
	Отбор.ПравоеЗначение = 0;
	
	ОформляемоеПоле                = НовоеУсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле           = Новый ПолеКомпоновкиДанных(Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноБезЦены.Имя);
	ОформляемоеПоле.Использование  = Истина;
	
	Текст = НСтр("ru='Без цены'");
	Оформление = НовоеУсловноеОформление.Оформление.Элементы.Найти("Текст");
	Оформление.Значение      = Текст;
	Оформление.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКолонокСпискаРасшифровкаДоговораОбслуживания()
	
	Если ЕстьПродажиСЦеной И НЕ ЕстьПродажиБезЦены
		ИЛИ НЕ ЕстьПродажиСЦеной И НЕ ЕстьПродажиБезЦены Тогда
		
		Элементы.СписокРасшифровкаДоговораОбслуживанияГруппаОказаноСЦеной.Видимость = Истина;
		Элементы.СписокРасшифровкаДоговораОбслуживанияГруппаОказаноБезЦены.Видимость = Ложь;
		
		Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноСЦеной.ОтображатьВШапке = Истина;
		Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноСЦеной.ОтображатьВШапке = Истина;
		Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноБезЦены.ОтображатьВШапке = Ложь;
		Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноБезЦены.ОтображатьВШапке = Ложь;
		
	ИначеЕсли НЕ ЕстьПродажиСЦеной И ЕстьПродажиБезЦены Тогда
		
		Элементы.СписокРасшифровкаДоговораОбслуживанияГруппаОказаноСЦеной.Видимость = Ложь;
		Элементы.СписокРасшифровкаДоговораОбслуживанияГруппаОказаноБезЦены.Видимость = Истина;
		
		Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноСЦеной.ОтображатьВШапке = Ложь;
		Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноСЦеной.ОтображатьВШапке = Ложь;
		Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноБезЦены.ОтображатьВШапке = Истина;
		Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноБезЦены.ОтображатьВШапке = Истина;
		
	ИначеЕсли ЕстьПродажиСЦеной И ЕстьПродажиБезЦены Тогда
		
		Элементы.СписокРасшифровкаДоговораОбслуживанияГруппаОказаноСЦеной.Видимость = Истина;
		Элементы.СписокРасшифровкаДоговораОбслуживанияГруппаОказаноБезЦены.Видимость = Истина;
		
		Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноСЦеной.ОтображатьВШапке = Истина;
		Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноСЦеной.ОтображатьВШапке = Истина;
		Элементы.СписокРасшифровкаДоговораОбслуживанияКоличествоОказаноБезЦены.ОтображатьВШапке = Ложь;
		Элементы.СписокРасшифровкаДоговораОбслуживанияСуммаОказаноБезЦены.ОтображатьВШапке = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьКомандыПроставленияПометок(Элементы, СчетчикПометокСчета = Неопределено, СчетчикПометокАкты = Неопределено)
	
	Если СчетчикПометокСчета <> Неопределено Тогда
		Элементы.ФормированиеСчетовСнятьПометки.Видимость      = СчетчикПометокСчета > 0;
		Элементы.ФормированиеСчетовПроставитьПометки.Видимость = СчетчикПометокСчета = 0;
	КонецЕсли;
	Если СчетчикПометокАкты <> Неопределено Тогда
		Элементы.ФормированиеАктовСнятьПометки.Видимость       = СчетчикПометокАкты > 0 И Элементы.СписокДоговорыОбслуживанияФормироватьАкт.Видимость;
		Элементы.ФормированиеАктовПроставитьПометки.Видимость  = СчетчикПометокАкты = 0 И Элементы.СписокДоговорыОбслуживанияФормироватьАкт.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСписокГруппыПодробностиПоДоговору(СписокИмя)
	
	Для каждого Эл Из Элементы.ГруппаПодробностиПоДоговоруСписки.ПодчиненныеЭлементы Цикл
		Эл.Видимость = (Эл.Имя = СписокИмя);
	КонецЦикла;
	
	Если СписокИмя = Элементы.СписокРасшифровкаДоговораОбслуживания.Имя Тогда
		АктивнаяКнопкаПанели = Элементы.ПанельНавигацииРасшифровка.Имя;
	ИначеЕсли СписокИмя = Элементы.СписокДвиженияПоДоговоруОбслуживания.Имя Тогда
		АктивнаяКнопкаПанели = Элементы.ПанельНавигацииПервичныеДокументы.Имя;
	ИначеЕсли СписокИмя = Элементы.СписокСчетаНаОплату.Имя Тогда
		АктивнаяКнопкаПанели = Элементы.ПанельНавигацииСчетаНаОплату.Имя;
	ИначеЕсли СписокИмя = Элементы.СписокАктыВыполненныхРабот.Имя Тогда
		АктивнаяКнопкаПанели = Элементы.ПанельНавигацииАктыВыполненныхРабот.Имя;
	КонецЕсли;
	
	Для каждого Эл Из Элементы.ПанельНавигации.ПодчиненныеЭлементы Цикл
		
		Если НЕ (ТипЗнч(Эл.Вид) = Тип("ВидКнопкиФормы") И Эл.Вид = ВидКнопкиФормы.Гиперссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Эл.Имя = АктивнаяКнопкаПанели Тогда
			Эл.ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ПанельНавигацииАктивнаяСсылка");
		Иначе
			Эл.ЦветТекста = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ПанельНавигацииНеактивнаяСсылка");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьГруппуОпрос(ОпросЗавершен = Неопределено)
	
	Если ОпросЗавершен = Неопределено Тогда
		ОпросЗавершен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОпросПоПодсистемеБиллингЗавершен");
	КонецЕсли;
	
	Элементы.ГруппаОпрос.Видимость = НЕ ОпросЗавершен;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборыДинамическихСписков()
	
	СписокСчетаНаОплату.Параметры.УстановитьЗначениеПараметра("Договор",       ТекущийДоговор);
	СписокСчетаНаОплату.Параметры.УстановитьЗначениеПараметра("НачалоПериода", ОтборПериод.ДатаНачала);
	СписокСчетаНаОплату.Параметры.УстановитьЗначениеПараметра("КонецПериода",  ОтборПериод.ДатаОкончания);
	
	СписокАктыВыполненныхРабот.Параметры.УстановитьЗначениеПараметра("Договор", ТекущийДоговор);
	СписокАктыВыполненныхРабот.Параметры.УстановитьЗначениеПараметра("НачалоПериода", ОтборПериод.ДатаНачала);
	СписокАктыВыполненныхРабот.Параметры.УстановитьЗначениеПараметра("КонецПериода", ОтборПериод.ДатаОкончания);
	
	СписокДвиженияПоДоговоруОбслуживания.Параметры.УстановитьЗначениеПараметра("Договор",       ТекущийДоговор);
	СписокДвиженияПоДоговоруОбслуживания.Параметры.УстановитьЗначениеПараметра("НачалоПериода", ОтборПериод.ДатаНачала);
	СписокДвиженияПоДоговоруОбслуживания.Параметры.УстановитьЗначениеПараметра("КонецПериода",  ОтборПериод.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкиПочтовойУчетнойЗаписи()
	
	ОбработчикРезультата = Новый ОписаниеОповещения("ПроверитьНастройкиПочтовойУчетнойЗаписиЗавершение", ЭтотОбъект);
	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОбработчикРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкиПочтовойУчетнойЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Булево") И Результат Тогда
		ПроверитьНастройкиОбработкиПередФормированиемДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкиОбработкиПередФормированиемДокументов()
	
	Отказ = Ложь;
	
	Если ФормированиеСчетовОтправлятьПоПочте ИЛИ ФормированиеАктовОтправлятьПоПочте Тогда
		Если НЕ ЗначениеЗаполнено(ФормированиеСчетовШаблонСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не выбран шаблон рассылки электронных сообщений!'"),,
				"ФормированиеСчетовШаблонСообщения"
			);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормированиеСчетовПечатать Тогда
		Если ФормированиеСчетовПечатныеФормы.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не выбрана ни одна печатная форма для Счетов на оплату!'"),,
				"ФормированиеСчетовПечатныеФормыПредставление"
			);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормированиеАктовПечатать Тогда
		Если ФормированиеАктовПечатныеФормы.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не выбрана ни одна печатная форма для Актов выполненных работ!'"),,
				"ФормированиеАктовПечатныеФормыПредставление"
			);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьСозданиеПакетаДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРасшифровкаДоговораОбслуживания()
	
	Если Элементы.СписокДоговорыОбслуживания.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.СписокДоговорыОбслуживания.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Договор = ТекущийДоговор
		И ТекущаяСтрока.Контрагент = ТекущийКонтрагент Тогда
		Возврат;
	КонецЕсли;
	
	СписокРасшифровкаДоговораОбслуживания.Очистить();
	
	ТекущийДоговор    = ТекущаяСтрока.Договор;
	ТекущийКонтрагент = ТекущаяСтрока.Контрагент;
	
	ЕстьПродажиБезЦены = ТекущаяСтрока.ЕстьПозицииБезЦены;
	ЕстьПродажиСЦеной  = ТекущаяСтрока.ЕстьПозицииСЦеной;
	
	ЗаполнитьСписокРасшифровкаДоговораОбслуживанияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРасшифровкаДоговораОбслуживанияСервер()
	
	Если НЕ ЗначениеЗаполнено(ТекущийДоговор) Тогда
		Возврат;
	КонецЕсли;
	
	Строки = СписокВыполнениеДоговоровОбслуживания.НайтиСтроки(Новый Структура("Договор", ТекущийДоговор));
	Для каждого Стр Из Строки Цикл
		
		НоваяСтрока = СписокРасшифровкаДоговораОбслуживания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		
	КонецЦикла;
	
	УстановитьОтборыДинамическихСписков();
	НастроитьВидимостьКолонокСпискаРасшифровкаДоговораОбслуживания();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПечатныхФорм()
	
	// Счета на оплату.
	ФормированиеСчетовПечатныеФормы.Очистить();
	ФормированиеСчетовПечатныеФормыПредставление = "";
	ИмяФормыОбъектаПечати = "Документ.СчетНаОплату.Форма.ФормаСписка";
	КомандыПечати = УправлениеПечатьюПовтИсп.КомандыПечатиФормы(ИмяФормыОбъектаПечати);
	
	НастройкаПечатныхФорм = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОтправкаПечатныхФорм", КлючНастроекПечатныеФормыСчета);
	Если НастройкаПечатныхФорм <> Неопределено Тогда
		Для каждого ВыбраннаяПечатнаяФорма Из НастройкаПечатныхФорм Цикл
			Команда = КомандыПечати.Найти(ВыбраннаяПечатнаяФорма, "Идентификатор");
			Если Команда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ФормированиеСчетовПечатныеФормы.Добавить(ВыбраннаяПечатнаяФорма);
			
			Если ЗначениеЗаполнено(ФормированиеСчетовПечатныеФормыПредставление) Тогда
				ФормированиеСчетовПечатныеФормыПредставление = ФормированиеСчетовПечатныеФормыПредставление + ", ";
			КонецЕсли;
			ФормированиеСчетовПечатныеФормыПредставление = ФормированиеСчетовПечатныеФормыПредставление + Команда.Представление;
		КонецЦикла;
	Иначе
		ПечатнаяФормаПоУмолчанию = "СчетНаОплату";
		Команда = КомандыПечати.Найти(ПечатнаяФормаПоУмолчанию, "Идентификатор");
		Если Команда <> Неопределено Тогда
			ФормированиеСчетовПечатныеФормы.Добавить(ПечатнаяФормаПоУмолчанию);
			ФормированиеСчетовПечатныеФормыПредставление = Команда.Представление
		КонецЕсли;
	КонецЕсли;
	
	ФормированиеСчетовКомандыПечатиАдрес = ПоместитьВоВременноеХранилище(КомандыПечати, УникальныйИдентификатор);
	
	Если НЕ ЗначениеЗаполнено(ФормированиеСчетовПечатныеФормыПредставление) Тогда
		ФормированиеСчетовПечатныеФормыПредставление = НСтр("ru='<Не выбрана печатная форма>'");
	КонецЕсли;
	
	// Акты выполненных работ.
	ФормированиеАктовПечатныеФормы.Очистить();
	ФормированиеАктовПечатныеФормыПредставление = "";
	ИмяФормыОбъектаПечати = "Документ.АктВыполненныхРабот.Форма.ФормаСписка";
	КомандыПечати = УправлениеПечатьюПовтИсп.КомандыПечатиФормы(ИмяФормыОбъектаПечати);
	
	НастройкаПечатныхФорм = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОтправкаПечатныхФорм", КлючНастроекПечатныеФормыАкта);
	Если НастройкаПечатныхФорм <> Неопределено Тогда
		Для каждого ВыбраннаяПечатнаяФорма Из НастройкаПечатныхФорм Цикл
			Команда = КомандыПечати.Найти(ВыбраннаяПечатнаяФорма, "Идентификатор");
			Если Команда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ФормированиеАктовПечатныеФормы.Добавить(ВыбраннаяПечатнаяФорма);
			
			Если ЗначениеЗаполнено(ФормированиеАктовПечатныеФормыПредставление) Тогда
				ФормированиеАктовПечатныеФормыПредставление = ФормированиеАктовПечатныеФормыПредставление + ", ";
			КонецЕсли;
			ФормированиеАктовПечатныеФормыПредставление = ФормированиеАктовПечатныеФормыПредставление + Команда.Представление;
		КонецЦикла;
	Иначе
		ПечатнаяФормаПоУмолчанию = "Акт";
		Команда = КомандыПечати.Найти(ПечатнаяФормаПоУмолчанию, "Идентификатор");
		Если Команда <> Неопределено Тогда
			ФормированиеАктовПечатныеФормы.Добавить(ПечатнаяФормаПоУмолчанию);
			ФормированиеАктовПечатныеФормыПредставление = Команда.Представление
		КонецЕсли;
	КонецЕсли;
	
	ФормированиеАктовКомандыПечатиАдрес = ПоместитьВоВременноеХранилище(КомандыПечати, УникальныйИдентификатор);
	
	Если НЕ ЗначениеЗаполнено(ФормированиеАктовПечатныеФормыПредставление) Тогда
		ФормированиеАктовПечатныеФормыПредставление = НСтр("ru='<Не выбрана печатная форма>'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОпросаБиллингЗавершение(ОпросЗавершен, ДополнительныеПараметры) Экспорт
	
	Если ОпросЗавершен <> Неопределено И ОпросЗавершен Тогда
		ПоказатьСкрытьГруппуОпрос(ОпросЗавершен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	СтруктураИменЭлементов = Новый Структура;
	СтруктураИменЭлементов.Вставить("ФильтрыНастройкиИДопИнфо", Элементы.ФильтрыНастройкиИДопИнфо.Имя);
	СтруктураИменЭлементов.Вставить("ДекорацияРазвернутьОтборы", Элементы.ГруппаПанельУправления.Имя);
	СтруктураИменЭлементов.Вставить("ПраваяПанель", Элементы.ФильтрыНастройкиИДопИнфо.Имя);
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость, СтруктураИменЭлементов);
		
КонецПроцедуры

#КонецОбласти

