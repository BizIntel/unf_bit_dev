
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТолькоРаботы") Тогда
		ТолькоРаботы = Параметры.ТолькоРаботы;
	Иначе
		ТолькоРаботы = Истина;
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеОтмененногоЗаказа(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление
	);
	
	УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
	
	ВидОперацииЗаказНаряд = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаряд;
	
	ДатаКалендаря = ТекущаяДатаСеанса();
	
	Если РасписаниеРаботПереключатель = "Неделя" Тогда
		
		ДатаКалендаряНачало = НачалоНедели(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецНедели(ДатаКалендаря);
		
	ИначеЕсли РасписаниеРаботПереключатель = "Месяц" Тогда
		
		ДатаКалендаряНачало = НачалоМесяца(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецМесяца(ДатаКалендаря);
		
	ИначеЕсли РасписаниеРаботПереключатель= "4дня" Тогда
		
		ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецДня(ДатаКалендаря) + 3 *60 * 60 * 24;
		
	Иначе
		
		ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецДня(ДатаКалендаря);
		
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() ИЛИ (РольДоступна("ВыводНаПринтерФайлБуферОбмена")
		И РаботаСПочтовымиСообщениями.ПроверитьСистемнаяУчетнаяЗаписьДоступна())Тогда
		СистемнаяУчетнаяЗаписьЭлектроннойПочты = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	Иначе
		Элементы.ИнформацияЭлектроннаяПочтаКонтрагента.Гиперссылка = Ложь;
		Элементы.ИнформацияЭлектроннаяПочтаКонтактногоЛица.Гиперссылка = Ложь;
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия.Получить() Тогда
		Элементы.ПанельЗагрузкаРесурсов.Видимость = Ложь;
		Элементы.Тело.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик;
		Элементы.КомандыСпискаИДиаграммы.ОтображатьЗаголовок = Истина;
		Элементы.КомандыСпискаИДиаграммы.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
		Элементы.СписокКлючевыеРесурсы.Видимость = Ложь;
		ОтборКлючевойРесурс = Неопределено;
	КонецЕсли;
	
	УстановитьПериодОтбораСписка();
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если Элементы.ГруппаРедактированияСпискаИДиаграммы.ТекущаяСтраница = Элементы.КомандыДиаграммыПланГрафика Тогда
			Элементы.СписокИДиаграмма.ТекущаяСтраница = Элементы.ДиаграммаПланГрафик;
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			ОбновитьСписокПланГрафика();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНаФорме();
	
	// Установим формат для текущей даты: ДФ=Ч:мм
	УправлениеНебольшойФирмойСервер.УстановитьОформлениеКолонкиДата(Список);
	
	// УНФ.ПанельКонтактнойИнформации
	КонтактнаяИнформацияПанельУНФ.ПриСозданииНаСервере(ЭтотОбъект, "КонтактнаяИнформация");
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриОткрытии формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьПериодРасписанияРабот();
	УстановитьДоступностьЭлементовНаФорме();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик оповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОповещениеОбИзмененииДолга"
		И Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик
		И ВидПланГрафикаПереключатель = "Список" Тогда
		// План-график: список.
		ОбновитьСписокНаСервере();
	КонецЕсли;
		
	Если ИмяСобытия = "Запись_СостоянияЗаказовПокупателей"
	 ИЛИ ИмяСобытия = "Запись_СостоянияЗаказовНаПроизводство" Тогда
		
		// План-график.
		Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
			// План-график: диаграмма.
			Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
				ОбновитьДиаграммуПланГрафика();
			Иначе // План-график: список.
			КонецЕсли;
		ИначеЕсли ВидКалендаряПереключатель = "Диаграмма" Тогда // Загрузка ресурсов: диаграмма.
			ОбновитьДиаграммуРесурсов();
		КонецЕсли;
		
		УстановитьУсловноеОформлениеПоЦветамСостоянийСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЗаказНаряды"
	 ИЛИ ИмяСобытия = "ИзмененЗаказНаПроизводство"
	 ИЛИ ИмяСобытия = "Запись_КлючевыеРесурсы" Тогда
		
		// План-график.
		Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
			// План-график: диаграмма.
			Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
				ОбновитьДиаграммуПланГрафика();
			Иначе // План-график: список.
				ОбновитьСписокПланГрафика();
			КонецЕсли;
			
		Иначе // Загрузка ресурсов.
			// Загрузка ресурсов: диаграмма.
			Если ВидКалендаряПереключатель = "Диаграмма" Тогда
				ОбновитьДиаграммуРесурсов();
			Иначе // Загрузка ресурсов: календарь
				ОбновитьКалендарь();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// УНФ.ПанельКонтактнойИнформации
	Если КонтактнаяИнформацияПанельУНФКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьПанельКонтактнойИнформацииСервер();
	КонецЕсли;
	// Конец УНФ.ПанельКонтактнойИнформации
	
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик команды Календарь.
//
&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("ДатаКалендаря", ДатаКалендаря);
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаНачалоВыбораЗавершение",ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры // ПредставлениеПериодаНачалоВыбора()

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбораЗавершение(Результат,Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаКалендаряНачало = Результат;
	
	ДатаКалендаря = КонецДня(ДатаКалендаряНачало);
	СформироватьПериодРасписанияРабот();
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УстановитьПериодОтбораСписка();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды День, 4 дня, Неделя, Месяц.
//
&НаКлиенте
Процедура ПереключательПриИзменении(Элемент)
	
	Если РасписаниеРаботПереключатель = "Месяц" Тогда
		ПериодМесяц();
	ИначеЕсли РасписаниеРаботПереключатель = "4дня" Тогда
		Период4Дня();
	ИначеЕсли РасписаниеРаботПереключатель = "Неделя" Тогда
		ПериодНеделя();
	Иначе
		ПериодДень();
	КонецЕсли;
	
КонецПроцедуры // ПереключательПриИзменении()

// Процедура - обработчик команды День.
//
&НаКлиенте
Процедура ПериодДень()
	
	СформироватьПериодРасписанияРабот();
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УстановитьПериодОтбораСписка();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПериодДень()

// Процедура - обработчик команды 2 дня.
//
&НаКлиенте
Процедура Период4Дня()
	
	СформироватьПериодРасписанияРабот();
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УстановитьПериодОтбораСписка();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Период4Дня()

// Процедура - обработчик команды Неделя.
//
&НаКлиенте
Процедура ПериодНеделя()
	
	СформироватьПериодРасписанияРабот();
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УстановитьПериодОтбораСписка();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПериодНеделя()

// Процедура - обработчик команды Месяц.
//
&НаКлиенте
Процедура ПериодМесяц()
	
	СформироватьПериодРасписанияРабот();
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УстановитьПериодОтбораСписка();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПериодМесяц()

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		КонтрагентАктивнойСтроки = ?(Элемент.ТекущиеДанные = Неопределено, Неопределено, Элемент.ТекущиеДанные.Контрагент);
		Если КонтрагентАктивнойСтроки <> ТекущийКонтрагент Тогда
		
			ТекущийКонтрагент = КонтрагентАктивнойСтроки;
			ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийБыстрогоОтбора

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Контрагент", ОтборКонтрагент, ЗначениеЗаполнено(ОтборКонтрагент));
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборКонтрагентПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Ресурс.
//
&НаКлиенте
Процедура ОтборКлючевойРесурсПриИзменении(Элемент)
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КлючевыеРесурсы", СокрЛП(ОтборКлючевойРесурс), ЗначениеЗаполнено(ОтборКлючевойРесурс), ВидСравненияКомпоновкиДанных.Содержит);
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборКлючевойРесурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Ответственный.
//
&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	// План-график: список.
	Если ВидПланГрафикаПереключатель = "Список" Тогда
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, ЗначениеЗаполнено(ОтборОтветственный));
	// План-график: диаграмма.
	ИначеЕсли ВидПланГрафикаПереключатель = "Диаграмма" Тогда
		ОбновитьДиаграммуПланГрафика();
	КонецЕсли;
	
КонецПроцедуры // ОтборОтветственныйПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ВидРесурса.
//
&НаКлиенте
Процедура ОтборРесурсовВидРесурсаПриИзменении(Элемент)
	
	// Загрузка ресурсов: диаграмма.
	Если ВидКалендаряПереключатель = "Диаграмма" Тогда
		ОбновитьДиаграммуРесурсов();
	Иначе // Загрузка ресурсов: календарь
		ОбновитьКалендарь();
	КонецЕсли;
	
КонецПроцедуры // ОтборРесурсовВидРесурсаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийТабличногоДокумента

// Процедура - обработчик события Выбор.
//
&НаКлиенте
Процедура ЗагрузкаРесурсовВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Гиперссылка
		И Область.Текст = "Заполнить ресурсы" Тогда
		ОткрытьФорму("Справочник.КлючевыеРесурсы.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаРесурсовВыбор()

// Процедура - обработчик события ОбработкаРасшифровки.
//
&НаКлиенте
Процедура ЗагрузкаРесурсовОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровка.СписокЗаказов <> Неопределено Тогда
			ОбработкаРасшифровкиИнформацияОЗаказах();
		Иначе
			ОбработкаРасшифровкиСоздатьНовыйЗаказ(Расшифровка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаРесурсовОбработкаРасшифровки()

// Процедура - обработчик команды ПросмотретьИнформациюОЗаказах.
//
&НаКлиенте
Процедура ПросмотретьИнформациюОЗаказах(Команда)
	
	ОбработкаРасшифровкиИнформацияОЗаказах();
	
КонецПроцедуры // ПросмотретьИнформациюОЗаказах()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды УменьшитьПериод.
//
&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	Если РасписаниеРаботПереключатель = "Неделя" Тогда
		
		ДатаКалендаря = КонецДня(НачалоНедели(НачалоНедели(ДатаКалендаря) - 60 * 60 * 24));
		
	ИначеЕсли РасписаниеРаботПереключатель = "Месяц" Тогда
		
		ДатаКалендаря = КонецДня(НачалоМесяца(НачалоМесяца(ДатаКалендаря) - 60 * 60 * 24));
		
	ИначеЕсли РасписаниеРаботПереключатель= "4дня" Тогда
		
		ДатаКалендаря = КонецДня(ДатаКалендаря - 3 * 60 * 60 * 24);
		
	Иначе
		
		ДатаКалендаря = КонецДня(ДатаКалендаря - 60 * 60 * 24);
		
	КонецЕсли;
	
	СформироватьПериодРасписанияРабот();
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УстановитьПериодОтбораСписка();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УменьшитьПериод()

// Процедура - обработчик команды УвеличитьПериод.
//
&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	Если РасписаниеРаботПереключатель = "Неделя" Тогда
		
		ДатаКалендаря = КонецДня(КонецНедели(ДатаКалендаря) + 60 * 60 * 24);
		
	ИначеЕсли РасписаниеРаботПереключатель = "Месяц" Тогда
		
		ДатаКалендаря = КонецДня(КонецМесяца(ДатаКалендаря) + 60 * 60 * 24);
		
	ИначеЕсли РасписаниеРаботПереключатель= "4дня" Тогда
		
		ДатаКалендаря = КонецДня(ДатаКалендаря + 3 * 60 * 60 * 24);
		
	Иначе
		
		ДатаКалендаря = КонецДня(ДатаКалендаря + 60 * 60 * 24);
		
	КонецЕсли;
	
	СформироватьПериодРасписанияРабот();
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			УстановитьПериодОтбораСписка();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УвеличитьПериод()

// Процедура - обработчик команды Настройки.
//
&НаКлиенте
Процедура Настройки(Команда)
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ОграничениеВремениС", ОграничениеВремениС);
	СтруктураПараметров.Вставить("ОграничениеВремениПо", ОграничениеВремениПо);
	
	СтруктураПараметров.Вставить("ОтображатьЗаказНаряды", ОтображатьЗаказНаряды);
	СтруктураПараметров.Вставить("ОтображатьЗаказыНаПроизводство", ОтображатьЗаказыНаПроизводство);
	
	СтруктураПараметров.Вставить("КратностьДня", КратностьДня);
	
	СтруктураПараметров.Вставить("ПланироватьРаботы", ТолькоРаботы);
	
	Оповещение = Новый ОписаниеОповещения("НастройкиЗавершение",ЭтаФорма);
	ОткрытьФорму("Обработка.Планировщик.Форма.Настройка", СтруктураПараметров,,,,,Оповещение);
	
КонецПроцедуры // Настройки()

&НаКлиенте
Процедура НастройкиЗавершение(СтруктураВозврата,Параметры) Экспорт
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") И СтруктураВозврата.БылиВнесеныИзменения Тогда
		
		ОграничениеВремениС = СтруктураВозврата.ОграничениеВремениС;
		ОграничениеВремениПо = СтруктураВозврата.ОграничениеВремениПо;
		
		ОтображатьЗаказНаряды = СтруктураВозврата.ОтображатьЗаказНаряды;
		ОтображатьЗаказыНаПроизводство = СтруктураВозврата.ОтображатьЗаказыНаПроизводство;
		
		УстановитьДоступностьЭлементовНаФорме();
		
		КратностьДня = СтруктураВозврата.КратностьДня;
		
		// План-график.
		Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
			// План-график: диаграмма.
			Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
				ОбновитьДиаграммуПланГрафика();
			Иначе // План-график: список.
				СписокДоступныхДокументов = Новый СписокЗначений;
				Если ОтображатьЗаказНаряды Тогда
					СписокДоступныхДокументов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
				КонецЕсли;
				Если ОтображатьЗаказыНаПроизводство Тогда
					СписокДоступныхДокументов.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
				КонецЕсли;
				УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Тип", СписокДоступныхДокументов, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
			
		Иначе // Загрузка ресурсов.
			// Загрузка ресурсов: диаграмма.
			Если ВидКалендаряПереключатель = "Диаграмма" Тогда
				ОбновитьДиаграммуРесурсов();
			Иначе // Загрузка ресурсов: календарь
				ОбновитьКалендарь();
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьЭлементовНаФорме();
		
	КонецЕсли;
	
	ОбновитьКалендарь();
	
КонецПроцедуры

#Область ОбработчикиКомандПланГрафикаИЗагрузкиРесурсов

// Процедура - обработчик команды Добавить заказ на производство.
//
&НаКлиенте
Процедура ДобавитьЗаказНаПроизводство(Команда)
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта",,Элементы.Список);
		Иначе // План-график: список.
			ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта",,Элементы.Список);
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ПараметрыОткрытия = ПараметрыОткрытияЗаявки(Истина);
			ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаЗаявки", ПараметрыОткрытия);
		Иначе // Загрузка ресурсов: календарь
			ПараметрыОткрытия = ПараметрыОткрытияЗаявки();
			ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаЗаявки", ПараметрыОткрытия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗаказНаПроизводство()

// Процедура - обработчик команды Добавить заказ-наряд.
//
&НаКлиенте
Процедура ДобавитьЗаказНаряд(Команда)
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ЗначениеЗаполнения = УправлениеНебольшойФирмойКлиент.ПрочитатьЗначенияОтбораДинамическогоСписка(Список);
			ЗначениеЗаполнения.Вставить("ВидОперации", ВидОперацииЗаказНаряд);
			ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначениеЗаполнения), Элементы.Список);
		Иначе // План-график: список.
			ЗначениеЗаполнения = УправлениеНебольшойФирмойКлиент.ПрочитатьЗначенияОтбораДинамическогоСписка(Список);
			ЗначениеЗаполнения.Вставить("ВидОперации", ВидОперацииЗаказНаряд);
			ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначениеЗаполнения), Элементы.Список);
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ПараметрыОткрытия = ПараметрыОткрытияЗаявки(Истина);
		Иначе // Загрузка ресурсов: календарь
			ПараметрыОткрытия = ПараметрыОткрытияЗаявки();
		КонецЕсли;
		
		Если Не ПараметрыОткрытия.Свойство("ЗначенияЗаполнения") Тогда
			ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
		КонецЕсли;
		
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперацииЗаказНаряд);
		ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаявки", ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗаказНаряд()

// Процедура - обработчик команды Обновить.
//
&НаКлиенте
Процедура Обновить(Команда)
	
	// План-график.
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		// План-график: диаграмма.
		Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуПланГрафика();
		Иначе // План-график: список.
			ОбновитьСписокНаСервере();
		КонецЕсли;
		
	Иначе // Загрузка ресурсов.
		// Загрузка ресурсов: диаграмма.
		Если ВидКалендаряПереключатель = "Диаграмма" Тогда
			ОбновитьДиаграммуРесурсов();
		Иначе // Загрузка ресурсов: календарь
			ОбновитьКалендарь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Обновить()

// Процедура - обработчик команды Список, Диаграмма
//
&НаКлиенте
Процедура ВидПланГрафикаПереключательПриИзменении(Элемент)
	
	Если ВидПланГрафикаПереключатель = "Диаграмма" Тогда
		ПланГрафикДиаграмма();
	Иначе
		ПланГрафикСписок();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды Список список.
//
&НаКлиенте
Процедура ПланГрафикСписок()
	
	Элементы.ГруппаРедактированияСпискаИДиаграммы.ТекущаяСтраница = Элементы.КомандыСписка;
	Элементы.СписокИДиаграмма.ТекущаяСтраница = Элементы.СписокПланГрафик;
	
	ОбновитьСписокПланГрафика();
	
КонецПроцедуры // ПланГрафикСписок()

// Процедура - обработчик команды Диаграмма список.
//
&НаКлиенте
Процедура ПланГрафикДиаграмма()
	
	Элементы.ГруппаРедактированияСпискаИДиаграммы.ТекущаяСтраница = Элементы.КомандыДиаграммыПланГрафика;
	Элементы.СписокИДиаграмма.ТекущаяСтраница = Элементы.ДиаграммаПланГрафик;
	
	ОбновитьДиаграммуПланГрафика();
	
КонецПроцедуры // ПланГрафикДиаграмма()

// Процедура - обработчик команды Календарь, Диаграмма
//
&НаКлиенте
Процедура ВидКалендаряПереключательПриИзменении(Элемент)
	
	Если ВидКалендаряПереключатель = "Диаграмма" Тогда
		РесурсыДиаграмма();
	Иначе
		РесурсыКалендарь();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды Календарь - ресурсы.
//
&НаКлиенте
Процедура РесурсыКалендарь()
	
	Элементы.ГруппаРедактированияКалендаряИДиаграммы.ТекущаяСтраница = Элементы.КомандыКалендаря;
	Элементы.КалендарьИДиаграмма.ТекущаяСтраница = Элементы.КалендарьРесурсы;
	
	ОбновитьКалендарь();
	
КонецПроцедуры // РесурсыКалендарь()

// Процедура - обработчик команды Диаграмма - ресурсы.
//
&НаКлиенте
Процедура РесурсыДиаграмма()
	
	Элементы.ГруппаРедактированияКалендаряИДиаграммы.ТекущаяСтраница = Элементы.КомандыДиаграммыРесурсов;
	Элементы.КалендарьИДиаграмма.ТекущаяСтраница = Элементы.ДиаграммаРесурсы;
	
	ОбновитьДиаграммуРесурсов();
	
КонецПроцедуры // РесурсыДиаграмма()

// Процедура - обработчик события ПриСменеСтраницы.
//
&НаКлиенте
Процедура ТелоПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик Тогда
		
		Если ВидПланГрафикаПереключатель = "Список" Тогда
			ОбновитьСписокПланГрафика();
		Иначе
			ОбновитьДиаграммуПланГрафика();
		КонецЕсли;
		
	Иначе
		
		Если ВидКалендаряПереключатель = "Календарь" Тогда
			ОбновитьКалендарь();
		Иначе
			ОбновитьДиаграммуРесурсов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТелоПриСменеСтраницы()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирует период расписания работ.
//
&НаКлиенте
Процедура СформироватьПериодРасписанияРабот()
	
	Если РасписаниеРаботПереключатель = "Неделя" Тогда
		
		ДатаКалендаряНачало = НачалоНедели(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецНедели(ДатаКалендаря);
		
		Если Месяц(ДатаКалендаряНачало) = Месяц(ДатаКалендаряОкончание) Тогда
			
			ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
			ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
			МесяцРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=МММ");
			ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
			ПредставлениеПериода = ДеньРасписанияНачало + " - " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + ", " + ГодРасписания;
			
		Иначе
			
			ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
			МесяцРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=МММ");
			ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
			МесяцРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=МММ");
			
			Если Год(ДатаКалендаряНачало) = Год(ДатаКалендаряОкончание) Тогда
				ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
				ПредставлениеПериода = ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " - " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + ", " + ГодРасписания;
			Иначе
				ГодРасписанияНачало = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
				ГодРасписанияОкончание = Формат(Год(ДатаКалендаряОкончание), "ЧГ=0");
				ПредставлениеПериода = ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " " + ГодРасписанияНачало + " - " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + " " + ГодРасписанияОкончание;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РасписаниеРаботПереключатель = "Месяц" Тогда
		
		ДатаКалендаряНачало = НачалоМесяца(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецМесяца(ДатаКалендаря);
		
		МесяцРасписания = Формат(ДатаКалендаряНачало, "ДФ=МММ");
		ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
		ПредставлениеПериода = МесяцРасписания + " " + ГодРасписания;
		
	ИначеЕсли РасписаниеРаботПереключатель= "4дня" Тогда
		
		ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецДня(ДатаКалендаря) + 3 *60 * 60 * 24;
		
		Если Месяц(ДатаКалендаряНачало) = Месяц(ДатаКалендаряОкончание) Тогда
			
			ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
			ДеньНеделиРасписанияНачало = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
			ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
			ДеньНеделиРасписанияОкончание = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
			
			МесяцРасписания = Формат(ДатаКалендаряНачало, "ДФ=МММ");
			ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
			
			ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписания + ", " + ГодРасписания;
			
		Иначе
			
			ДеньРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=дд");
			ДеньНеделиРасписанияНачало = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
			МесяцРасписанияНачало = Формат(ДатаКалендаряНачало, "ДФ=МММ");
			ДеньРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=дд");
			ДеньНеделиРасписанияОкончание = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряОкончание);
			МесяцРасписанияОкончание = Формат(ДатаКалендаряОкончание, "ДФ=МММ");
			
			Если Год(ДатаКалендаряНачало) = Год(ДатаКалендаряОкончание) Тогда
				ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
				ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + ", " + ГодРасписания;
			Иначе
				ГодРасписанияНачало = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
				ГодРасписанияОкончание = Формат(Год(ДатаКалендаряОкончание), "ЧГ=0");
				ПредставлениеПериода = ДеньНеделиРасписанияНачало + " " + ДеньРасписанияНачало + " " + МесяцРасписанияНачало + " " + ГодРасписанияНачало + " - " + ДеньНеделиРасписанияОкончание + " " + ДеньРасписанияОкончание + " " + МесяцРасписанияОкончание + " " + ГодРасписанияОкончание;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // ПериодДень
		
		ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецДня(ДатаКалендаря);
		
		ДеньРасписания = Формат(ДатаКалендаряНачало, "ДФ=дд");
		МесяцРасписания = Формат(ДатаКалендаряНачало, "ДФ=МММ");
		ГодРасписания = Формат(Год(ДатаКалендаряНачало), "ЧГ=0");
		ДеньНеделиРасписания = УправлениеНебольшойФирмойКлиент.ПолучитьПредставлениеДняНедели(ДатаКалендаряНачало);
		
		ПредставлениеПериода = ДеньНеделиРасписания + " " + ДеньРасписания + " " + МесяцРасписания + " " + ГодРасписания;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьПериодРасписанияРабот()

// Функция возвращает список ресурсов по виду ресурса.
//
&НаСервере
Функция ПолучитьСписокРесурсовПоВидамРесурсов()
	
	СписокВидовРесурсов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	РегистрСведений.ВидыРесурсовПредприятия КАК ВидыРесурсовПредприятия
	|ГДЕ
	|	ВидыРесурсовПредприятия.ВидРесурсаПредприятия = &ВидРесурсаПредприятия";
	
	Запрос.УстановитьПараметр("ВидРесурсаПредприятия", ОтборВидРесурса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СписокВидовРесурсов;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВидовРесурсов.Добавить(Выборка.РесурсПредприятия);
	КонецЦикла;
	
	Возврат СписокВидовРесурсов;
	
КонецФункции // ПолучитьСписокРесурсовПоВидамРесурсов()

// Функция возвращает список ресурсов для быстрого отбора.
//
&НаСервере
Функция ПолучитьСписокРесурсовДляОтбора()
	
	Если ЗначениеЗаполнено(ОтборКлючевойРесурс) Тогда
		СписокВидовРесурсов = Новый СписокЗначений;
		СписокВидовРесурсов.Добавить(ОтборКлючевойРесурс);
	ИначеЕсли ЗначениеЗаполнено(ОтборВидРесурса) Тогда
		СписокВидовРесурсов = ПолучитьСписокРесурсовПоВидамРесурсов();
	Иначе
		СписокВидовРесурсов = Неопределено;
	КонецЕсли;
	
	Возврат СписокВидовРесурсов;
	
КонецФункции // ПолучитьСписокРесурсовДляОтбора()

// Функция возвращает параметры открытия заявки.
//
&НаКлиенте
Функция ПараметрыОткрытияЗаявки(ТолькоДень = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("ОграничениеВремениС", ОграничениеВремениС);
	Результат.Вставить("ОграничениеВремениПо", ОграничениеВремениПо);
	Результат.Вставить("КратностьДня", КратностьДня);
	Результат.Вставить("ОтборКлючевойРесурс", ОтборКлючевойРесурс);
	Результат.Вставить("ОтборВидРесурса", ОтборВидРесурса);
	
	Если ТолькоДень Тогда
		Результат.Вставить("ТолькоДень", ДатаКалендаряНачало);
		Возврат Результат;
	КонецЕсли;
	
	МассивРасшифровки = Новый Массив;
	ТекущаяОбластьКалендаря = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
	
	Если ТипЗнч(ТекущаяОбластьКалендаря) = Тип("РисунокТабличногоДокумента") Тогда
		Результат.Вставить("Расшифровка", МассивРасшифровки);
		Возврат Результат;
	КонецЕсли;
	
	ПерваяСтрока = ТекущаяОбластьКалендаря.Верх;
	ПоследняяСтрока = ТекущаяОбластьКалендаря.Низ;
	ПоследняяКолонка = ТекущаяОбластьКалендаря.Право;
	Пока ПерваяСтрока <= ПоследняяСтрока Цикл
		ПерваяКолонка = ТекущаяОбластьКалендаря.Лево;
		Пока ПерваяКолонка <= ПоследняяКолонка Цикл
			РасшифровкаЯчейки = ЗагрузкаРесурсов.Область(ПерваяСтрока, ПерваяКолонка).Расшифровка;
			Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") Тогда
				МассивРасшифровки.Добавить(РасшифровкаЯчейки);
			КонецЕсли;
			ПерваяКолонка = ПерваяКолонка + 1;
		КонецЦикла;
		ПерваяСтрока = ПерваяСтрока + 1;
	КонецЦикла;
	
	Результат.Вставить("Расшифровка", МассивРасшифровки);
	
	Возврат Результат;
	
КонецФункции // ПолучитьПараметрыОткрытияЗаявки()

#Область СписокПланГрафик

// Процедура обновляет данные списка.
//
&НаСервере
Процедура ОбновитьСписокНаСервере()
	
	Элементы.Список.Обновить();
	
КонецПроцедуры // ОбновитьСписокНаСервере()

// Процедура обновляет данные в таблице списка.
//
&НаСервере
Процедура ОбновитьСписокПланГрафика()
	
	СохранитьНастройкиФормы();
	
	СписокДоступныхДокументов = Новый СписокЗначений;
	Если ОтображатьЗаказНаряды Тогда
		СписокДоступныхДокументов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	КонецЕсли;
	Если ОтображатьЗаказыНаПроизводство Тогда
		СписокДоступныхДокументов.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	КонецЕсли;
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Тип", СписокДоступныхДокументов, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Контрагент", ОтборКонтрагент, ЗначениеЗаполнено(ОтборКонтрагент));
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "КлючевыеРесурсы", СокрЛП(ОтборКлючевойРесурс), ЗначениеЗаполнено(ОтборКлючевойРесурс), ВидСравненияКомпоновкиДанных.Содержит);
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, ЗначениеЗаполнено(ОтборОтветственный));
	
	УстановитьПериодОтбораСписка();
	
КонецПроцедуры // ОбновитьСписокПланГрафика()

// Процедура устанавливает отбор по периоду для списка.
//
&НаСервере
Процедура УстановитьПериодОтбораСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ДатаКалендаряНачало);
	Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", ДатаКалендаряОкончание);
	
КонецПроцедуры // УстановитьПериодОтбораСписка()

#КонецОбласти

#Область ДиаграммаПланГрафик

// Процедура формирует шкалу времени для диаграммы Ганта.
//
&НаСервере
Процедура СформироватьШкалуВремениДиаграммыГанта(ДиаграммаГанта)
	
	// Настройка шкалы времени.
	Для н = 0 По ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Количество() - 1 Цикл
		Если ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Количество() = 1 Тогда
			Прервать;
		КонецЕсли;
		УдаляемаяСтрокаШкалы = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[н];
		Если УдаляемаяСтрокаШкалы.Единица <> ТипЕдиницыШкалыВремени.День Тогда
			ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Удалить(УдаляемаяСтрокаШкалы);
		КонецЕсли;
	КонецЦикла;
	
	ЦветНеРабочегоВремени = ЦветаСтиля.РабочееВремяЗанятоПолностью;
	ЦветВыходногоДня = ЦветаСтиля.НерабочееВремяВыходной;
	
	Если РасписаниеРаботПереключатель = "Неделя" Тогда
		
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		ДиаграммаГанта.КратностьПериодическогоВарианта = 5;
		
		ДиаграммаГанта.УстановитьПолныйИнтервал(ДатаКалендаряНачало, ДатаКалендаряОкончание);
		
		ДиаграммаГанта.ИнтервалыФона.Очистить();
		
		ЭлементШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[0];
		ЭлементШкалыВремени.Формат = "ДФ=""дд ддд""";
		
		КратностьШкалы = 0;
		Пока КратностьШкалы <> 7 Цикл
			
			Если ЗначениеЗаполнено(ОграничениеВремениС) Тогда
				НачалоИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60;
				КонецИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60 + Час(ОграничениеВремениС) * 60 *60 + Минута(ОграничениеВремениС) * 60;
				НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецИнтервалаФона);
				НовыйИнтервалФона.Цвет = ЦветНеРабочегоВремени;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОграничениеВремениПо) Тогда
				НачалоИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60 + Час(ОграничениеВремениПо) * 60 *60 + Минута(ОграничениеВремениПо) * 60;
				КонецИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60;
				НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецДня(КонецИнтервалаФона));
				НовыйИнтервалФона.Цвет = ЦветНеРабочегоВремени;
			КонецЕсли;
			
			НачалоИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60;
			Если ДеньНедели(НачалоИнтервалаФона) = 6 ИЛИ ДеньНедели(НачалоИнтервалаФона) = 7 Тогда
				НачалоИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60 + Час(ОграничениеВремениС) * 60 *60 + Минута(ОграничениеВремениС) * 60;
				КонецИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60 + Час(ОграничениеВремениПо) * 60 *60 + Минута(ОграничениеВремениПо) * 60;
				НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецДня(КонецИнтервалаФона));
				НовыйИнтервалФона.Цвет = ЦветВыходногоДня;
			КонецЕсли;
			
			КратностьШкалы = КратностьШкалы +1;
			
		КонецЦикла;
		
		НовыйЭлементШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		НовыйЭлементШкалыВремени.Единица = ТипЕдиницыШкалыВремени.Неделя;
		НовыйЭлементШкалыВремени.Кратность = 1;
		ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Сдвинуть(НовыйЭлементШкалыВремени, -1);
		
	ИначеЕсли РасписаниеРаботПереключатель = "Месяц" Тогда
		
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		ДиаграммаГанта.КратностьПериодическогоВарианта = 15;
		
		ДиаграммаГанта.УстановитьПолныйИнтервал(ДатаКалендаряНачало, ДатаКалендаряОкончание);
		
		ДиаграммаГанта.ИнтервалыФона.Очистить();
		
		ЭлементШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[0];
		ЭлементШкалыВремени.Формат = "ДФ=""дд ддд""";
		
		НачалоИнтервалаФона = ДатаКалендаряНачало;
		Пока НачалоИнтервалаФона < ДатаКалендаряОкончание Цикл
			
			Если ДеньНедели(НачалоИнтервалаФона) = 6 ИЛИ ДеньНедели(НачалоИнтервалаФона) = 7 Тогда
				НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецДня(НачалоИнтервалаФона));
				НовыйИнтервалФона.Цвет = ЦветВыходногоДня;
			КонецЕсли;
			
			НачалоИнтервалаФона = НачалоИнтервалаФона + 24 * 60 * 60;
			
		КонецЦикла;
		
		НовыйЭлементШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		НовыйЭлементШкалыВремени.Единица = ТипЕдиницыШкалыВремени.Месяц;
		НовыйЭлементШкалыВремени.Кратность = 1;
		ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Сдвинуть(НовыйЭлементШкалыВремени, -1);
		
	ИначеЕсли РасписаниеРаботПереключатель= "4дня" Тогда
		
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		ДиаграммаГанта.КратностьПериодическогоВарианта = 1;
		
		ДиаграммаГанта.УстановитьПолныйИнтервал(ДатаКалендаряНачало, ДатаКалендаряОкончание);
		
		ДиаграммаГанта.ИнтервалыФона.Очистить();
		
		ЭлементШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[0];
		ЭлементШкалыВремени.Формат = "ДФ=""дд ММММ гггг дддд""";
		
		КратностьШкалы = 0;
		Пока КратностьШкалы <> 4 Цикл
			
			Если ЗначениеЗаполнено(ОграничениеВремениС) Тогда
				НачалоИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60;
				КонецИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60 + Час(ОграничениеВремениС) * 60 *60 + Минута(ОграничениеВремениС) * 60;
				НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецИнтервалаФона);
				НовыйИнтервалФона.Цвет = ЦветНеРабочегоВремени;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОграничениеВремениПо) Тогда
				НачалоИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60 + Час(ОграничениеВремениПо) * 60 *60 + Минута(ОграничениеВремениПо) * 60;
				КонецИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60;
				НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецДня(КонецИнтервалаФона));
				НовыйИнтервалФона.Цвет = ЦветНеРабочегоВремени;
			КонецЕсли;
			
			НачалоИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60;
			Если ДеньНедели(НачалоИнтервалаФона) = 6 ИЛИ ДеньНедели(НачалоИнтервалаФона) = 7 Тогда
				НачалоИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60 + Час(ОграничениеВремениС) * 60 *60 + Минута(ОграничениеВремениС) * 60;
				КонецИнтервалаФона = ДатаКалендаряНачало + КратностьШкалы * 24 * 60 * 60 + Час(ОграничениеВремениПо) * 60 *60 + Минута(ОграничениеВремениПо) * 60;
				НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецДня(КонецИнтервалаФона));
				НовыйИнтервалФона.Цвет = ЦветВыходногоДня;
			КонецЕсли;
			
			КратностьШкалы = КратностьШкалы +1;
			
		КонецЦикла;
		
		НовыйЭлементШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		НовыйЭлементШкалыВремени.Единица = ТипЕдиницыШкалыВремени.Час;
		НовыйЭлементШкалыВремени.Кратность = 1;
		НовыйЭлементШкалыВремени.Формат = "ДФ=""ЧЧ""";
		
	Иначе // ПериодДень
		
		ДиаграммаГанта.ПоддержкаМасштаба=ПоддержкаМасштабаДиаграммыГанта.Авто;
		ДиаграммаГанта.УстановитьПолныйИнтервал(ДатаКалендаряНачало, ДатаКалендаряОкончание);
		
		ДиаграммаГанта.ИнтервалыФона.Очистить();
		
		ЭлементШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[0];
		ЭлементШкалыВремени.Формат = "ДФ=""дд ММММ гггг дддд""";
		
		Если ЗначениеЗаполнено(ОграничениеВремениС) Тогда
			НачалоИнтервалаФона = ДатаКалендаряНачало;
			КонецИнтервалаФона = ДатаКалендаряНачало + Час(ОграничениеВремениС) * 60 *60 + Минута(ОграничениеВремениС) * 60;
			НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецИнтервалаФона);
			НовыйИнтервалФона.Цвет = ЦветНеРабочегоВремени;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОграничениеВремениПо) Тогда
			НачалоИнтервалаФона = ДатаКалендаряНачало + Час(ОграничениеВремениПо) * 60 *60 + Минута(ОграничениеВремениПо) * 60;
			КонецИнтервалаФона = ДатаКалендаряОкончание;
			НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецИнтервалаФона);
			НовыйИнтервалФона.Цвет = ЦветНеРабочегоВремени;
		КонецЕсли;
		
		Если ДеньНедели(ДатаКалендаряНачало) = 6 ИЛИ ДеньНедели(ДатаКалендаряНачало) = 7 Тогда
			НачалоИнтервалаФона = ДатаКалендаряНачало + Час(ОграничениеВремениС) * 60 *60 + Минута(ОграничениеВремениС) * 60;
			КонецИнтервалаФона = ДатаКалендаряНачало + Час(ОграничениеВремениПо) * 60 *60 + Минута(ОграничениеВремениПо) * 60;
			НовыйИнтервалФона = ДиаграммаГанта.ИнтервалыФона.Добавить(НачалоИнтервалаФона, КонецДня(КонецИнтервалаФона));
			НовыйИнтервалФона.Цвет = ЦветВыходногоДня;
		КонецЕсли;
		
		НовыйЭлементШкалыВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		НовыйЭлементШкалыВремени.Единица = ТипЕдиницыШкалыВремени.Час;
		НовыйЭлементШкалыВремени.Кратность = 1;
		НовыйЭлементШкалыВремени.Формат = "ДФ=""ЧЧ""";
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьШкалуВремениДиаграммыГанта()

// Процедура обновляет данные диаграммы план графика.
//
&НаСервере
Процедура ОбновитьДиаграммуПланГрафика()
	
	СохранитьНастройкиФормы();
	
	// Инициализация.
	ДиаграммаГантаПланГрафик.ОтображатьЛегенду = Ложь;
	ДиаграммаГантаПланГрафик.Обновление = Ложь;
	
	ДиаграммаГантаПланГрафик.Очистить();
	
	ДиаграммаГантаПланГрафик.АвтоОпределениеПолногоИнтервала = Ложь;
	ДиаграммаГантаПланГрафик.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	
	СформироватьШкалуВремениДиаграммыГанта(ДиаграммаГантаПланГрафик);
	
	// Заполнение.
	РезультатЗапроса = ПолучитьПланГрафик();
	Выборка = РезультатЗапроса.Выбрать();
	Серия = ДиаграммаГантаПланГрафик.Серии.Добавить();
	
	Пока Выборка.Следующий() Цикл
		
		ЗначениеТочки = НСтр("ru='" + Формат(Выборка.Старт, "ДФ=""ЧЧ:мм""") + " - "
							+ Формат(Выборка.Финиш, "ДФ=""ЧЧ:мм""") + " (№ "
							+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Истина) + " от " 
							+ Формат(Выборка.Дата, "ДФ=dd.MM.yy") + ") '");
		
		Точка = ДиаграммаГантаПланГрафик.УстановитьТочку(ЗначениеТочки);
		Точка.Расшифровка = Выборка.Ссылка;
		
		Если Выборка.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен
			Или Выборка.СостояниеЗаказа = Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
			
			Точка.Картинка = БиблиотекаКартинок.ЗанятьФайл;
		Иначе
			Точка.Картинка = БиблиотекаКартинок.ОсвободитьФайл;
		КонецЕсли;
		
		ЗначениеЗаказа = ДиаграммаГантаПланГрафик.ПолучитьЗначение(Точка, Серия);
		ЗначениеЗаказа.Редактирование = Ложь;
		
		Интервал = ЗначениеЗаказа.Добавить();
		Интервал.Расшифровка = Выборка.Ссылка;
		Интервал.Начало = Выборка.Старт;
		Интервал.Конец = Выборка.Финиш;
		ЦветФона = Выборка.Цвет.Получить();
		Если ТипЗнч(ЦветФона) = Тип("Цвет") Тогда
			Интервал.Цвет = ЦветФона;
		КонецЕсли;
		
		Интервал.Значение.Текст = Выборка.Контрагент;
		
		ТекстЗначения = НСтр("ru='Номенклатура: " + Выборка.Номенклатура + "
							|Ресурсы: " + Выборка.КлючевыеРесурсы + "
							|Контрагент: " + Выборка.Контрагент + "
							|Ответственный: " + Выборка.Ответственный + "
							|Подразделение: " + Выборка.Подразделение + "'");
		
		Интервал.Текст  = ТекстЗначения;
		
	КонецЦикла;
	
	ДиаграммаГантаПланГрафик.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграммуПланГрафика()

// Функция возвращает результат выполнения запроса.
//
&НаСервере
Функция ПолучитьПланГрафик()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖурналДокументовДокументыПланированияРесурсов.Ссылка,
	|	ЖурналДокументовДокументыПланированияРесурсов.Дата,
	|	ЖурналДокументовДокументыПланированияРесурсов.Номер,
	|	ЖурналДокументовДокументыПланированияРесурсов.ВидОперации,
	|	ЖурналДокументовДокументыПланированияРесурсов.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ЖурналДокументовДокументыПланированияРесурсов.ВариантЗавершения,
	|	ЖурналДокументовДокументыПланированияРесурсов.СостояниеЗаказа.Цвет КАК Цвет,
	|	ЖурналДокументовДокументыПланированияРесурсов.Старт КАК Старт,
	|	ЖурналДокументовДокументыПланированияРесурсов.Финиш КАК Финиш,
	|	ЖурналДокументовДокументыПланированияРесурсов.Номенклатура,
	|	ЖурналДокументовДокументыПланированияРесурсов.КлючевыеРесурсы,
	|	ВЫБОР
	|		КОГДА ЖурналДокументовДокументыПланированияРесурсов.Тип = ТИП(Документ.ЗаказНаПроизводство)
	|			ТОГДА ЖурналДокументовДокументыПланированияРесурсов.ЗаказПокупателя.Контрагент
	|		ИНАЧЕ ЖурналДокументовДокументыПланированияРесурсов.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ЖурналДокументовДокументыПланированияРесурсов.Подразделение,
	|	ЖурналДокументовДокументыПланированияРесурсов.Ответственный
	|ИЗ
	|	ЖурналДокументов.ДокументыПланированияРесурсов КАК ЖурналДокументовДокументыПланированияРесурсов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЖурналДокументовДокументыПланированияРесурсов.Тип = ТИП(Документ.ЗаказПокупателя)
	|				ТОГДА ВЫБОР
	|						КОГДА ЖурналДокументовДокументыПланированияРесурсов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (&ДатаНачала МЕЖДУ ЖурналДокументовДокументыПланированияРесурсов.Старт И ЖурналДокументовДокументыПланированияРесурсов.Финиш
	|			ИЛИ &ДатаОкончания МЕЖДУ ЖурналДокументовДокументыПланированияРесурсов.Старт И ЖурналДокументовДокументыПланированияРесурсов.Финиш
	|			ИЛИ ЖурналДокументовДокументыПланированияРесурсов.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ ЖурналДокументовДокументыПланированияРесурсов.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|	И (&ОтборКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ ВЫБОР
	|				КОГДА ЖурналДокументовДокументыПланированияРесурсов.Тип = ТИП(Документ.ЗаказНаПроизводство)
	|					ТОГДА ЖурналДокументовДокументыПланированияРесурсов.ЗаказПокупателя.Контрагент = &ОтборКонтрагент
	|				ИНАЧЕ ЖурналДокументовДокументыПланированияРесурсов.Контрагент = &ОтборКонтрагент
	|			КОНЕЦ)
	|	И (&ОтборКлючевойРесурс = """"
	|			ИЛИ ЖурналДокументовДокументыПланированияРесурсов.КлючевыеРесурсы ПОДОБНО &ОтборКлючевойРесурс)
	|	И (&ОтборОтветственный = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|			ИЛИ ЖурналДокументовДокументыПланированияРесурсов.Ответственный = &ОтборОтветственный)
	|	И ВЫБОР
	|			КОГДА ЖурналДокументовДокументыПланированияРесурсов.Тип = ТИП(Документ.ЗаказНаПроизводство)
	|				ТОГДА &ОтображатьЗаказыНаПроизводство
	|			ИНАЧЕ &ОтображатьЗаказНаряды
	|		КОНЕЦ
	|	И ЖурналДокументовДокументыПланированияРесурсов.Проведен
	|	И НЕ ЖурналДокументовДокументыПланированияРесурсов.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Старт,
	|	Финиш";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаКалендаряНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКалендаряОкончание);
	Запрос.УстановитьПараметр("ОтборКонтрагент", ОтборКонтрагент);
	Запрос.УстановитьПараметр("ОтборКлючевойРесурс", СокрЛП(ОтборКлючевойРесурс));
	Запрос.УстановитьПараметр("ОтборОтветственный", ОтборОтветственный);
	Запрос.УстановитьПараметр("ОтображатьЗаказНаряды", ОтображатьЗаказНаряды);
	Запрос.УстановитьПараметр("ОтображатьЗаказыНаПроизводство", ОтображатьЗаказыНаПроизводство);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьПланГрафик()

#КонецОбласти

#Область КалендарьЗагрузкаРесурсов

// Процедура формирует календарь загрузки ресурсов.
//
&НаСервере
Процедура ОбновитьКалендарь()
	
	СохранитьНастройкиФормы();
	
	ТабДок = ЗагрузкаРесурсов;
	ТабДок.Очистить();
	
	ВыборкаРесурсов = Справочники.КлючевыеРесурсы.Выбрать();
	Если ВыборкаРесурсов.Следующий() Тогда
		
		СписокРесурсов = ПолучитьСписокРесурсовДляОтбора();
		
		Если РасписаниеРаботПереключатель = "Неделя" Тогда
			
			ОбновитьКалендарьПериодНеделя(ТабДок, СписокРесурсов);
			
		ИначеЕсли РасписаниеРаботПереключатель = "Месяц" Тогда
			
			ОбновитьКалендарьПериодМесяц(ТабДок, СписокРесурсов);
			
		ИначеЕсли РасписаниеРаботПереключатель= "4дня" Тогда
			
			ОбновитьКалендарьПериодДень(ТабДок, СписокРесурсов, Истина);
			
		Иначе // ПериодДень
			
			ОбновитьКалендарьПериодДень(ТабДок, СписокРесурсов);
			
		КонецЕсли;
		
	Иначе
		
		ВывестиПомощник(ТабДок);
		
	КонецЕсли;
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
КонецПроцедуры // ОбновитьКалендарь()

// Процедура формирует календарь загрузки ресурсов - период неделя.
//
&НаСервере
Процедура ОбновитьКалендарьПериодНеделя(ТабДок, СписокРесурсов)
	
	МакетШкалы = Обработки.Планировщик.ПолучитьМакет("ШкалаНеделя");
	
	// Вывод шкалы.
	НачалоШкалы = 2;
	СдвигПоШкале = 2;
	ВысотаЯчейкиДня = 6;
	
	МассивКоординат = Новый Массив();
	ОбластьШкалы = МакетШкалы.Область("ШкалаСтроки|ШкалаКолонки");
	ТабДок.ВставитьОбласть(ОбластьШкалы, ТабДок.Область(ОбластьШкалы.Имя));
	
	// Пн.
	ДатаКалендаряПн = ДатаКалендаряНачало;
	КоординатыПн = "R" + СдвигПоШкале + "C" + НачалоШкалы;
	КоординатыТекстПн = "R" + (СдвигПоШкале + 1) + "C" + НачалоШкалы;
	КоординатыРасшифровкиПн = "R" + СдвигПоШкале + "C" + НачалоШкалы + ":R" + (ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 1);
	ТабДок.Область(КоординатыПн).Текст = Формат(ДатаКалендаряПн, "ДФ=""д ММММ""");
	ТабДок.Область(КоординатыРасшифровкиПн).Расшифровка = ПолучитьРасшифровкуЯчейкиНеделяМесяц(ДатаКалендаряПн);
	
	// Вт.
	ДатаКалендаряВт = ДатаКалендаряПн + 24 * 60 * 60;
	КоординатыВт = "R" + СдвигПоШкале + "C" + (НачалоШкалы + 2);
	КоординатыТекстВт = "R" + (СдвигПоШкале + 1) + "C" + (НачалоШкалы + 2);
	КоординатыРасшифровкиВт = "R" + СдвигПоШкале + "C" + (НачалоШкалы + 2) + ":R" + (ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 3);
	ТабДок.Область(КоординатыВт).Текст = Формат(ДатаКалендаряВт, "ДФ=""д ММММ""");
	ТабДок.Область(КоординатыРасшифровкиВт).Расшифровка = ПолучитьРасшифровкуЯчейкиНеделяМесяц(ДатаКалендаряВт);
	
	// Ср.
	ДатаКалендаряСр = ДатаКалендаряВт + 24 * 60 * 60;
	КоординатыСр = "R" + СдвигПоШкале + "C" + (НачалоШкалы + 4);
	КоординатыТекстСр = "R" + (СдвигПоШкале + 1) + "C" + (НачалоШкалы + 4);
	КоординатыРасшифровкиСр = "R" + СдвигПоШкале + "C" + (НачалоШкалы + 4) + ":R" + (ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 5);
	ТабДок.Область(КоординатыСр).Текст = Формат(ДатаКалендаряСр, "ДФ=""д ММММ""");
	ТабДок.Область(КоординатыРасшифровкиСр).Расшифровка = ПолучитьРасшифровкуЯчейкиНеделяМесяц(ДатаКалендаряСр);
	
	// Чт.
	ДатаКалендаряЧт = ДатаКалендаряСр + 24 * 60 * 60;
	КоординатыЧт = "R" + (СдвигПоШкале + ВысотаЯчейкиДня) + "C" + НачалоШкалы;
	КоординатыТекстЧт = "R" + (СдвигПоШкале + ВысотаЯчейкиДня + 1) + "C" + НачалоШкалы;
	КоординатыРасшифровкиЧт = "R" + (СдвигПоШкале + ВысотаЯчейкиДня) + "C" + НачалоШкалы + ":R" + (2 * ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 1);
	ТабДок.Область(КоординатыЧт).Текст = Формат(ДатаКалендаряЧт, "ДФ=""д ММММ""");
	ТабДок.Область(КоординатыРасшифровкиЧт).Расшифровка = ПолучитьРасшифровкуЯчейкиНеделяМесяц(ДатаКалендаряЧт);
	
	// Пт.
	КоординатыПт = "R" + (СдвигПоШкале + ВысотаЯчейкиДня) + "C" + (НачалоШкалы + 2);
	КоординатыТекстПт = "R" + (СдвигПоШкале + ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 2);
	КоординатыРасшифровкиПт = "R" + (СдвигПоШкале + ВысотаЯчейкиДня) + "C" + (НачалоШкалы + 2) + ":R" + (2 * ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 3);
	ДатаКалендаряПт = ДатаКалендаряЧт + 24 * 60 * 60;
	ТабДок.Область(КоординатыПт).Текст = Формат(ДатаКалендаряПт, "ДФ=""д ММММ""");
	ТабДок.Область(КоординатыРасшифровкиПт).Расшифровка = ПолучитьРасшифровкуЯчейкиНеделяМесяц(ДатаКалендаряПт);
	
	// Сб.
	ДатаКалендаряСб = ДатаКалендаряПт + 24 * 60 * 60;
	КоординатыСб = "R" + (СдвигПоШкале + ВысотаЯчейкиДня) + "C" + (НачалоШкалы + 4);
	КоординатыТекстСб = "R" + (СдвигПоШкале + ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 4);
	КоординатыРасшифровкиСб = "R" + (СдвигПоШкале + ВысотаЯчейкиДня) + "C" + (НачалоШкалы + 4) + ":R" + (2 * ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 5);
	ТабДок.Область(КоординатыСб).Текст = Формат(ДатаКалендаряСб, "ДФ=""д ММММ""");
	ТабДок.Область(КоординатыРасшифровкиСб).Расшифровка = ПолучитьРасшифровкуЯчейкиНеделяМесяц(ДатаКалендаряСб);
	
	// Вс.
	ДатаКалендаряВс = ДатаКалендаряСб + 24 * 60 * 60;
	КоординатыВс = "R" + (СдвигПоШкале + ВысотаЯчейкиДня * 2) + "C" + НачалоШкалы;
	КоординатыТекстВс = "R" + (СдвигПоШкале + ВысотаЯчейкиДня * 2 + 1) + "C" + НачалоШкалы;
	КоординатыРасшифровкиВс = "R" + (СдвигПоШкале + ВысотаЯчейкиДня * 2) + "C" + НачалоШкалы + ":R" + (3 * ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + 1);
	ТабДок.Область(КоординатыВс).Текст = Формат(ДатаКалендаряВс, "ДФ=""д ММММ""");
	ТабДок.Область(КоординатыРасшифровкиВс).Расшифровка = ПолучитьРасшифровкуЯчейкиНеделяМесяц(ДатаКалендаряВс);
	
	РезультатЗапроса = ПолучитьРасписаниеЗагрузкиРесурсовНеделяМесяц(СписокРесурсов, ДатаКалендаряНачало, ДатаКалендаряОкончание);
	
	// Список ресурсов.
	ВыборкаРесурс = РезультатЗапроса[1].Выбрать();
	R = НачалоШкалы;
	Пока ВыборкаРесурс.Следующий() Цикл
		ТабДок.Область(R, 1).Текст = ВыборкаРесурс.РесурсПредприятия;
		ТабДок.Область(R, 1).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабДок.Область(R, 1).Расшифровка = ВыборкаРесурс.РесурсПредприятия;
		ТабДок.Область(R, 1).ВысотаСтроки = 21;
		R = R + 1;
	КонецЦикла;
	
	// Расписание.
	ВыборкаВремяНачала = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВремяНачала");
	Пока ВыборкаВремяНачала.Следующий() Цикл
		КоличествоРесурсов = ВыборкаВремяНачала.КолРесурсов;
		ДеньНеделиВТабДок = ДеньНедели(ВыборкаВремяНачала.ВремяНачала);
		СписокРесурсовДня = "" + Символы.ПС;
		СписокЗаказов = Новый Массив();
		ВыборкаРесурс = ВыборкаВремяНачала.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
		СчРесурсов = 1;
		Пока ВыборкаРесурс.Следующий() Цикл
			Если СчРесурсов = 8 И СчРесурсов < КоличествоРесурсов Тогда
				СписокРесурсовДня = СписокРесурсовДня + СокрЛП(СчРесурсов) + ". " + "еще..." + Символы.ПС;
			ИначеЕсли СчРесурсов <= 8 Тогда
				СписокРесурсовДня = СписокРесурсовДня + СокрЛП(СчРесурсов) + ". " + СокрЛП(ВыборкаРесурс.РесурсПредприятия) + Символы.ПС;
			КонецЕсли;
			Выборка = ВыборкаРесурс.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокЗаказов.Добавить(Выборка.Заказ);
			КонецЦикла;
			СчРесурсов = СчРесурсов + 1;
		КонецЦикла;
		Если ДеньНеделиВТабДок = 1 Тогда
			КоординатыДня = КоординатыТекстПн;
			КоординатыДняРасшифровка = КоординатыРасшифровкиПн;
		ИначеЕсли ДеньНеделиВТабДок = 2 Тогда
			КоординатыДня = КоординатыТекстВт;
			КоординатыДняРасшифровка = КоординатыРасшифровкиВт;
		ИначеЕсли ДеньНеделиВТабДок = 3 Тогда
			КоординатыДня = КоординатыТекстСр;
			КоординатыДняРасшифровка = КоординатыРасшифровкиСр;
		ИначеЕсли ДеньНеделиВТабДок = 4 Тогда
			КоординатыДня = КоординатыТекстЧт;
			КоординатыДняРасшифровка = КоординатыРасшифровкиЧт;
		ИначеЕсли ДеньНеделиВТабДок = 5 Тогда
			КоординатыДня = КоординатыТекстПт;
			КоординатыДняРасшифровка = КоординатыРасшифровкиПт;
		ИначеЕсли ДеньНеделиВТабДок = 6 Тогда
			КоординатыДня = КоординатыТекстСб;
			КоординатыДняРасшифровка = КоординатыРасшифровкиСб;
		Иначе
			КоординатыДня = КоординатыТекстВс;
			КоординатыДняРасшифровка = КоординатыРасшифровкиВс;
		КонецЕсли;
		ТабДок.Область(КоординатыДня).Текст = СписокРесурсовДня;
		РасшифровкаЯчейки = ТабДок.Область(КоординатыДняРасшифровка).Расшифровка;
		РасшифровкаЯчейки.СписокЗаказов = СписокЗаказов;
	КонецЦикла;
	
	// Иницаилизация размеров шкалы.
	ТабДок.Область(1,,1,).ВысотаСтроки = 16;
	ТабДок.Область(,1,,1).ШиринаКолонки = 25;
	
	ВерхШкалы = НачалоШкалы;
	НизШкалы = ОбластьШкалы.Низ;
	Пока ВерхШкалы <= НизШкалы Цикл
		ТабДок.Область(ВерхШкалы, 1).ВысотаСтроки = 21;
		ВерхШкалы = ВерхШкалы + 1;
	КонецЦикла;
	
	ТабДок.Область(,НачалоШкалы,,НачалоШкалы).ШиринаКолонки = 34;
	ТабДок.Область(,НачалоШкалы + 1,,НачалоШкалы + 1).ШиринаКолонки = 5;
	ТабДок.Область(,НачалоШкалы + 2,,НачалоШкалы + 2).ШиринаКолонки = 34;
	ТабДок.Область(,НачалоШкалы + 3,,НачалоШкалы + 3).ШиринаКолонки = 5;
	ТабДок.Область(,НачалоШкалы + 4,,НачалоШкалы + 4).ШиринаКолонки = 34;
	ТабДок.Область(,НачалоШкалы + 5,,НачалоШкалы + 5).ШиринаКолонки = 5;
	
	ТабДок.ФиксацияСверху = 1;
	ТабДок.ФиксацияСлева = 1;
	
КонецПроцедуры // ОбновитьКалендарьПериодНеделя()

// Процедура формирует календарь загрузки ресурсов - период месяц.
//
&НаСервере
Процедура ОбновитьКалендарьПериодМесяц(ТабДок, СписокРесурсов)
	
	МакетШкалы = Обработки.Планировщик.ПолучитьМакет("ШкалаМесяц");
	
	// Вывод шкалы.
	НачалоШкалы = 2;
	СдвигПоШкале = 1;
	ВысотаЯчейкиДня = 5;
	
	ОбластьШкалы = МакетШкалы.Область("ШкалаСтроки|ШкалаКолонки");
	ТабДок.ВставитьОбласть(ОбластьШкалы, ТабДок.Область(ОбластьШкалы.Имя));
	
	// Первый день.
	Если ДеньНедели(ДатаКалендаряНачало) > 1 Тогда
		ПерваяДатаМесяца = НачалоМесяца(ДатаКалендаряНачало) - (ДеньНедели(ДатаКалендаряНачало) - 1) * 60 * 60 * 24;
	Иначе
		ПерваяДатаМесяца = НачалоМесяца(ДатаКалендаряНачало);
	КонецЕсли;
	
	// Песледний день.
	Если ДеньНедели(ДатаКалендаряОкончание) < 7 Тогда
		ПоследняяДатаМесяца = КонецМесяца(ДатаКалендаряОкончание) + (7 - ДеньНедели(ДатаКалендаряОкончание)) * 60 * 60 * 24;
	Иначе
		ПоследняяДатаМесяца = КонецМесяца(ДатаКалендаряОкончание);
	КонецЕсли;
	Если ДеньНедели(ДатаКалендаряНачало) <= 5 Тогда
		ПоследняяДатаМесяца = ПоследняяДатаМесяца + 7 * 60 * 60 * 24;
	КонецЕсли;
	
	РезультатЗапроса = ПолучитьРасписаниеЗагрузкиРесурсовНеделяМесяц(СписокРесурсов, ПерваяДатаМесяца, ПоследняяДатаМесяца);
	
	ШагШкалы = 0;
	НомерСтрокиШкалы = 2;
	СоответствиеКоординат = Новый Соответствие;
	Пока ПерваяДатаМесяца <= НачалоДня(ПоследняяДатаМесяца) Цикл
		
		КоординатыДня = "R" + (НомерСтрокиШкалы + 1) + "C" + (НачалоШкалы + ШагШкалы);
		КоординатыРасшифровкиДня = "R" + (НомерСтрокиШкалы + 1) + "C" + (НачалоШкалы + ШагШкалы) + ":R" + (НомерСтрокиШкалы + ВысотаЯчейкиДня + 1) + "C" + (НачалоШкалы + ШагШкалы + 1);;
		
		ТабДок.Область(КоординатыДня).Текст = Формат(ПерваяДатаМесяца, "ДФ=""д""");
		ТабДок.Область(КоординатыРасшифровкиДня).Расшифровка = ПолучитьРасшифровкуЯчейкиНеделяМесяц(ПерваяДатаМесяца);
		
		СоответствиеКоординат.Вставить(ПерваяДатаМесяца, КоординатыРасшифровкиДня);
		
		Если НачалоМесяца(ПерваяДатаМесяца) <> НачалоМесяца(ДатаКалендаряНачало) Тогда
			ТабДок.Область(КоординатыРасшифровкиДня).ЦветТекста = ЦветаСтиля.РабочееВремяСвободноДоступно;
		КонецЕсли;
		
		ПерваяДатаМесяца = ПерваяДатаМесяца + 60 * 60 * 24;
		Если (НачалоШкалы + ШагШкалы) = ОбластьШкалы.Право - 1 Тогда
			ШагШкалы = 0;
			НомерСтрокиШкалы = НомерСтрокиШкалы + ВысотаЯчейкиДня + 1;
		Иначе
			ШагШкалы = ШагШкалы + 2;
		КонецЕсли;
		
	КонецЦикла;
	
	//Список ресурсов.
	ВыборкаРесурс = РезультатЗапроса[1].Выбрать();
	R = НачалоШкалы + 1;
	Пока ВыборкаРесурс.Следующий() Цикл
		ТабДок.Область(R, 1).ВысотаСтроки = 10;
		ТабДок.Область(R + 1, 1).ВысотаСтроки = 11;
		ТабДок.Область(R + 1, 1).Текст = ВыборкаРесурс.РесурсПредприятия;
		ТабДок.Область(R + 1, 1).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабДок.Область(R + 1, 1).Расшифровка = ВыборкаРесурс.РесурсПредприятия;
		R = R + 2;
	КонецЦикла;
	
	// Расписание.
	ВыборкаВремяНачала = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВремяНачала");
	Пока ВыборкаВремяНачала.Следующий() Цикл
		
		КоличествоРесурсов = ВыборкаВремяНачала.КолРесурсов;
		СписокРесурсовДня = "";
		СписокЗаказов = Новый Массив();
		ВыборкаРесурс = ВыборкаВремяНачала.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
		СчРесурсов = 1;
		Пока ВыборкаРесурс.Следующий() Цикл
			Если СчРесурсов = 5 И СчРесурсов < КоличествоРесурсов Тогда
				СписокРесурсовДня = СписокРесурсовДня + СокрЛП(СчРесурсов) + ". " + "еще..." + Символы.ПС;
			ИначеЕсли СчРесурсов <= 5 Тогда
				СписокРесурсовДня = СписокРесурсовДня + СокрЛП(СчРесурсов) + ". " + СокрЛП(ВыборкаРесурс.РесурсПредприятия) + Символы.ПС;
			КонецЕсли;
			Выборка = ВыборкаРесурс.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокЗаказов.Добавить(Выборка.Заказ);
			КонецЦикла;
			СчРесурсов = СчРесурсов + 1;
		КонецЦикла;
		
		КоординатыРасшифровкиДня = СоответствиеКоординат.Получить(ВыборкаВремяНачала.ВремяНачала);
		Если КоординатыРасшифровкиДня <> Неопределено Тогда
			ОбластьДня = ТабДок.Область(КоординатыРасшифровкиДня);
			РасшифровкаЯчейки = ОбластьДня.Расшифровка;
			РасшифровкаЯчейки.СписокЗаказов = СписокЗаказов;
			ТабДок.Область(ОбластьДня.Верх + 1, ОбластьДня.Лево, ОбластьДня.Низ, ОбластьДня.Право).Текст = СписокРесурсовДня;
		КонецЕсли;
		
	КонецЦикла;
	
	// Иницаилизация размеров шкалы.
	ТабДок.Область(1,,1,).ВысотаСтроки = 8;
	ТабДок.Область(2,,2,).ВысотаСтроки = 8;
	ТабДок.Область(,1,,1).ШиринаКолонки = 25;
	//
	ВерхШкалы = ОбластьШкалы.Верх + 2;
	НизШкалы = ОбластьШкалы.Низ;
	Пока ВерхШкалы <= НизШкалы Цикл
		ТабДок.Область(ВерхШкалы, 1).ВысотаСтроки = 10;
		ТабДок.Область(ВерхШкалы + 1, 1).ВысотаСтроки = 11;
		ВерхШкалы = ВерхШкалы + 2;
	КонецЦикла;
	//
	НомерКолонки = НачалоШкалы - 1;
	Пока НомерКолонки <= ОбластьШкалы.Право Цикл
		ТабДок.Область(,НомерКолонки + 1,,НомерКолонки + 1).ШиринаКолонки = 16.38;
		ТабДок.Область(,НомерКолонки + 2,,НомерКолонки + 2).ШиринаКолонки = 1;
		НомерКолонки = НомерКолонки + 2;
	КонецЦикла;
	
	ТабДок.ФиксацияСверху = 2;
	ТабДок.ФиксацияСлева = 1;
	
КонецПроцедуры // ОбновитьКалендарьПериодМесяц()

// Процедура формирует календарь загрузки ресурсов - период день.
//
&НаСервере
Процедура ОбновитьКалендарьПериодДень(ТабДок, СписокРесурсов, Период4Дня = Ложь)
	
	МакетШкалы = Обработки.Планировщик.ПолучитьМакет("ШкалаДень");
	
	// Вывод шкалы.
	Отступ = 1;
	ШагШкалы = 3;
	НачалоШкалы = 6;
	СдвигПоШкале = 1;
	НизРазделителяШкалы = 3;
	ВерхРазделителяШкалы = 2;
	
	Если ЗначениеЗаполнено(ОграничениеВремениС) Тогда
		ЧасС = Час(ОграничениеВремениС);
		МинутаС = Минута(ОграничениеВремениС);
	Иначе
		ЧасС = 0;
		МинутаС = 0;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОграничениеВремениПо) Тогда
		ЧасПо = Час(ОграничениеВремениПо);
		МинутаПо = Минута(ОграничениеВремениПо);
	Иначе
		ЧасПо = 24;
		МинутаПо = 0;
	КонецЕсли;
	
	ОбластьСписокРесурсов = МакетШкалы.Область("Шкала60|СписокРесурсов");
	ТабДок.ВставитьОбласть(ОбластьСписокРесурсов, ТабДок.Область(ОбластьСписокРесурсов.Имя));
	Если КратностьДня = 60 Тогда
		Если ЧасС = ЧасПо Тогда
			ЧасПо = ЧасС + СдвигПоШкале;
		ИначеЕсли МинутаПо <> 0 Тогда
			ЧасПо = ЧасПо + СдвигПоШкале;
		КонецЕсли;
		ВсегоМинутС =  ЧасС * 60;
		ВсегоМинутПо = ЧасПо * 60;
		НомерКолонкиС = НачалоШкалы + ?(ЧасС-Цел(ЧасС/2)*2 = 1, (ЧасС - СдвигПоШкале), ЧасС) / 2 * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(ЧасС-Цел(ЧасС/2)*2 = 1, (ЧасС - СдвигПоШкале), ЧасС)) * 60 * 60;
		НомерКолонкиПо = НачалоШкалы + ?(ЧасПо-Цел(ЧасПо/2)*2 = 1, (ЧасПо + СдвигПоШкале), ЧасПо) / 2 * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(ЧасПо-Цел(ЧасПо/2)*2 = 1, (ЧасПо + СдвигПоШкале), ЧасПо)) * 60 * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала60|Кратность60");
	ИначеЕсли КратностьДня = 15 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 30) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 30) = (ВсегоМинутС / 30), ВсегоМинутС, Цел(ВсегоМинутС / 30) * 30)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 30) = (ВсегоМинутПо / 30), (ВсегоМинутПо / 30), Цел(ВсегоМинутПо / 30) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 30) = (ВсегоМинутПо / 30), ВсегоМинутПо, Цел(ВсегоМинутПо / 30) * 30 + 30)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала15|Кратность15");
	ИначеЕсли КратностьДня = 10 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 20) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 20) = (ВсегоМинутС / 20), ВсегоМинутС, Цел(ВсегоМинутС / 20) * 20)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 20) = (ВсегоМинутПо / 20), (ВсегоМинутПо / 20), Цел(ВсегоМинутПо / 20) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 20) = (ВсегоМинутПо / 20), ВсегоМинутПо, Цел(ВсегоМинутПо / 20) * 20 + 20)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала10|Кратность10");
	ИначеЕсли КратностьДня = 5 Тогда
		ВсегоМинутС = ЧасС * 60 + МинутаС;
		ВсегоМинутПо = ЧасПо * 60 + МинутаПо;
		Если ВсегоМинутС = ВсегоМинутПо Тогда
			ВсегоМинутПо = ВсегоМинутС + 60;
		КонецЕсли;
		НомерКолонкиС = НачалоШкалы + Цел(ВсегоМинутС / 10) * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 10) = (ВсегоМинутС / 10), ВсегоМинутС, Цел(ВсегоМинутС / 10) * 10)) * 60;
		НомерКолонкиПо = НачалоШкалы + ?(Цел(ВсегоМинутПо / 10) = (ВсегоМинутПо / 10), (ВсегоМинутПо / 10), Цел(ВсегоМинутПо / 10) + 1) * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 10) = (ВсегоМинутПо / 10), ВсегоМинутПо, Цел(ВсегоМинутПо / 10) * 10 + 10)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала5|Кратность5");
	Иначе // 30 мин
		Если ЧасС = ЧасПо Тогда
			ЧасПо = ЧасС + СдвигПоШкале;
		ИначеЕсли МинутаПо <> 0 Тогда
			ЧасПо = ЧасПо + СдвигПоШкале;
		КонецЕсли;
		ВсегоМинутС =  ЧасС * 60;
		ВсегоМинутПо = ЧасПо * 60;
		НомерКолонкиС = НачалоШкалы + ЧасС * ШагШкалы;
		КратноеОграничениеС = Дата('00010101') + (?(Цел(ВсегоМинутС / 60) = (ВсегоМинутС / 60), ВсегоМинутС, ВсегоМинутС - 30)) * 60;
		НомерКолонкиПо = НачалоШкалы + ЧасПо * ШагШкалы - СдвигПоШкале;
		КратноеОграничениеПо = Дата('00010101') + (?(Цел(ВсегоМинутПо / 60) = (ВсегоМинутПо / 60), ВсегоМинутПо, ВсегоМинутПо + 30)) * 60;
		ОбластьШкалы = МакетШкалы.Область("Шкала30|Кратность30");
	КонецЕсли;
	ОбластьМакета = МакетШкалы.Область("R" + ОбластьШкалы.Верх + "C"+ НомерКолонкиС +":R"+ ОбластьШкалы.Низ +"C" + НомерКолонкиПо);
	ОбластьТабДок = ТабДок.Область("R" + СдвигПоШкале + "C" + НачалоШкалы + ":R"+ (ШагШкалы + 1) +"C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС));
	ТабДок.ВставитьОбласть(ОбластьМакета, ОбластьТабДок);
	
	// Инициализация массива дней.
	МассивДней = Новый Массив;
	МассивДней.Добавить(ДатаКалендаряНачало);
	
	// Оформление первой колонки.
	КоординатыПервойКолонки = "R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале);
	ТабДок.Область(КоординатыПервойКолонки).Текст = Формат(ДатаКалендаряНачало, "ДФ=""дд ММММ гггг дддд""");
	ТабДок.Область("R" + ВерхРазделителяШкалы + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + НизРазделителяШкалы + "C" + (НачалоШкалы + СдвигПоШкале)).ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	// Оформление последней колонки.
	КоординатыПоследнейКолонки = "R" + СдвигПоШкале + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС) + ":R" + (ШагШкалы + 1) + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
	ТабДок.Область(КоординатыПоследнейКолонки).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	ТабДок.Область(КоординатыПоследнейКолонки).ЦветРамки = ЦветаСтиля.ЦветРамки;
	
	КоординатыДляОбъединения = "R" + СдвигПоШкале + "C" + (НачалоШкалы + СдвигПоШкале) + ":R" + СдвигПоШкале + "C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
	ОбластьОбъединения = ТабДок.Область(КоординатыДляОбъединения);
	ОбластьОбъединения.Объединить();
	
	// Координаты конца дня.
	КоординатыОкончанияДня = КоординатыПоследнейКолонки;
	
	// Оформление выходного дня.
	Если Деньнедели(ДатаКалендаряНачало) = 6 
		ИЛИ Деньнедели(ДатаКалендаряНачало) = 7 Тогда
		КоординатыВыходногоДня = "R" + (СдвигПоШкале + 1) + "C" + НачалоШкалы + ":R"+ (ШагШкалы + 1) +"C" + (НачалоШкалы + НомерКолонкиПо - НомерКолонкиС);
		ТабДок.Область(КоординатыВыходногоДня).Цветфона = ЦветаСтиля.НерабочееВремяВыходной;
	КонецЕсли;
	
	// Период - 4 дня.
	Если Период4Дня Тогда
		НачалоСледДня = НачалоШкалы + НомерКолонкиПо - НомерКолонкиС;
		КоличествоДней = 1;
		Пока КоличествоДней <= 3 Цикл
			ОбластьТабДок = ТабДок.Область("R" + СдвигПоШкале + "C" + (НачалоСледДня + КоличествоДней) + ":R"+ (ШагШкалы + 1) +"C" + (НачалоСледДня + КоличествоДней + НомерКолонкиПо - НомерКолонкиС));
			ТабДок.ВставитьОбласть(ОбластьМакета, ОбластьТабДок);
			
			// Оформление начала дня.
			КоординатыНачалаДня = "R" + СдвигПоШкале + "C" + (НачалоСледДня + КоличествоДней + СдвигПоШкале) + ":R" + СдвигПоШкале + "C" + (НачалоСледДня + КоличествоДней + СдвигПоШкале);
			СледДатаКалендаря = ДатаКалендаряНачало + КоличествоДней * 24 * 60 * 60;
			ТабДок.Область(КоординатыНачалаДня).Текст = Формат(СледДатаКалендаря, "ДФ=""дд ММММ гггг дддд""");
			ТабДок.Область("R" + ВерхРазделителяШкалы + "C" + (НачалоСледДня + КоличествоДней + СдвигПоШкале) + ":R" + НизРазделителяШкалы + "C" + (НачалоСледДня + КоличествоДней + СдвигПоШкале)).ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			
			// Оформление последней колонки.
			КоординатыПоследнейКолонки = "R" + СдвигПоШкале + "C" + (НачалоСледДня + КоличествоДней + НомерКолонкиПо - НомерКолонкиС) + ":R" + (ШагШкалы + 1) + "C" + (НачалоСледДня + КоличествоДней + НомерКолонкиПо - НомерКолонкиС);
			ТабДок.Область(КоординатыПоследнейКолонки).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ТабДок.Область(КоординатыПоследнейКолонки).ЦветРамки = ЦветаСтиля.ЦветРамки;
			
			КоординатыДляОбъединения = "R" + СдвигПоШкале + "C" + (НачалоСледДня + КоличествоДней + СдвигПоШкале) + ":R" + СдвигПоШкале + "C" + (НачалоСледДня + КоличествоДней + НомерКолонкиПо - НомерКолонкиС);
			ОбластьОбъединения = ТабДок.Область(КоординатыДляОбъединения);
			ОбластьОбъединения.Объединить();
			
			// Оформление выходного дня.
			Если Деньнедели(СледДатаКалендаря) = 6 
				ИЛИ Деньнедели(СледДатаКалендаря) = 7 Тогда
				КоординатыВыходногоДня = "R" + (СдвигПоШкале + 1) + "C" + (НачалоСледДня + КоличествоДней) + ":R"+ (ШагШкалы + 1) +"C" + (НачалоСледДня + КоличествоДней + НомерКолонкиПо - НомерКолонкиС);
				ТабДок.Область(КоординатыВыходногоДня).Цветфона = ЦветаСтиля.НерабочееВремяВыходной;
			КонецЕсли;
			
			МассивДней.Добавить(ДатаКалендаряНачало + КоличествоДней * 24 * 60 * 60);
			
			НачалоСледДня = НачалоСледДня + НомерКолонкиПо - НомерКолонкиС;
			КоличествоДней = КоличествоДней + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	// Иницаилизация размеров шкалы.
	ТабДок.Область(1,,1,).ВысотаСтроки = 16;
	ТабДок.Область(2,,2,).ВысотаСтроки = 6;
	ТабДок.Область(3,,3,).ВысотаСтроки = 5;
	ТабДок.Область(4,,4,).ВысотаСтроки = 5;
	
	ТабДок.Область(,1,,1).ШиринаКолонки = 22;
	ТабДок.Область(,2,,2).ШиринаКолонки = 1;
	ТабДок.Область(,3,,3).ШиринаКолонки = 3;
	ТабДок.Область(,4,,4).ШиринаКолонки = 1;
	ТабДок.Область(,5,,5).ШиринаКолонки = 3;
	
	НомерКолонки = НачалоШкалы;
	НомерПоследнейКолонки = ТабДок.ШиринаТаблицы;
	Пока НомерКолонки <= НомерПоследнейКолонки Цикл
		
		ТабДок.Область(,НомерКолонки,,НомерКолонки).ШиринаКолонки = 0.8;
		ТабДок.Область(,НомерКолонки + 1,,НомерКолонки + 1).ШиринаКолонки = 6;
		ТабДок.Область(,НомерКолонки + 2,,НомерКолонки + 2).ШиринаКолонки = 6;
		НомерКолонки = НомерКолонки + 3;
		
	КонецЦикла;
	
	// Вывод расписания загрузки ресурсов.
	ЦветЯчейкиРесурсЗанят = ЦветаСтиля.РесурсЗанят;
	ЦветЯчейкиРесурсСвободен = ЦветаСтиля.РабочееВремяЗанятоПолностью;
	ЦветЯчейкиРесурсНеРедактируется = ЦветаСтиля.РабочееВремяСвободноДоступно;
	ЦветРамкиЯчейки = ЦветаСтиля.РамкаЯчейки;
	
	РезультатЗапроса = ПолучитьРасписаниеЗагрузкиРесурсов(СписокРесурсов, МассивДней);
	
	// Расписание по графику, без графика (список ресурсов).
	НачалоСпискаРесурсов = ОбластьСписокРесурсов.Низ + Отступ;
	ВыборкаРесурс = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	НомерСтроки = 1;
	Пока ВыборкаРесурс.Следующий() Цикл
		
		КоличествоСвободныхИнтервалов = 0;
		МощностьРесурса = ?(ВыборкаРесурс.Мощность = 1, 0, ВыборкаРесурс.Мощность);
		
		// Список ресурсов.
		R = НачалоСпискаРесурсов + НомерСтроки;
		ТабДок.Область(R, 1).Текст = ВыборкаРесурс.РесурсПредприятия;
		ТабДок.Область(R, 1).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабДок.Область(R, 1).Расшифровка = ВыборкаРесурс.РесурсПредприятия;
		
		// Все интервалы нерабочие.
		НомерПервойКолонки = ТабДок.Область(КоординатыПервойКолонки).Лево - 1;
		НомерПоследнейКолонкиДня = ТабДок.Область(КоординатыОкончанияДня).Право;
		НомерПоследнейКолонкиШкалы = ТабДок.Область(КоординатыПоследнейКолонки).Право;
		
		Интервал = 0;
		СледующаяПерваяКолонка = 0;
		СледующаяПоследняяКолонка = 0;
		Для каждого ДеньМассива Из МассивДней Цикл
			
			КратноеВремяС = КратноеОграничениеС;
			СледующаяПерваяКолонка = СледующаяПерваяКолонка + НомерПервойКолонки;
			СледующаяПоследняяКолонка = СледующаяПоследняяКолонка + НомерПоследнейКолонкиДня + Интервал;
			
			Интервал = 0;
			R = НачалоСпискаРесурсов + НомерСтроки;
			Пока СледующаяПерваяКолонка <= СледующаяПоследняяКолонка Цикл
				// Ячейка 1.
				ИнтервалПоиска = ДеньМассива + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсНеРедактируется;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветРамки = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Шрифт = Новый Шрифт(, 8, Истина, , , );
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, 1);
				// Ячейка 2.
				КратноеВремяС = КратноеВремяС + КратностьДня * 60;
				ИнтервалПоиска = ДеньМассива + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсНеРедактируется;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).ЦветТекста = ЦветРамкиЯчейки;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Шрифт = Новый Шрифт(, 8, Истина, , , );
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, 1);
				
				КратноеВремяС = КратноеВремяС + КратностьДня * 60;
				СледующаяПерваяКолонка = СледующаяПерваяКолонка + 3;
				Интервал = Интервал + 3;
				
			КонецЦикла;
			
			НомерПервойКолонки = 0;
			НомерПоследнейКолонкиДня = 0;
			
		КонецЦикла;
		
		НомерПервойКолонки = ТабДок.Область(КоординатыПервойКолонки).Лево - 1;
		НомерПоследнейКолонкиДня = ТабДок.Область(КоординатыОкончанияДня).Право;
		НомерПоследнейКолонкиШкалы = ТабДок.Область(КоординатыПоследнейКолонки).Право;
		
		// Работа по графика.
		МассивИнтервалов = Новый Массив();
		МассивДнейПоГрафику = Новый Массив();
		ВыборкаПериод = ВыборкаРесурс.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
		Пока ВыборкаПериод.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПериод.Период) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивДнейПоГрафику.Добавить(ВыборкаПериод.Период);
			
			Выборка = ВыборкаПериод.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выборка.ВремяНачала)
					И НЕ ЗначениеЗаполнено(Выборка.ОтклоненияВремяНачала)
					ИЛИ Выборка.ОтклоненияНеРабочийДень Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(Выборка.ОтклоненияВремяНачала) Тогда
					РассчитатьИнтервалы(МассивИнтервалов, КратноеОграничениеС, КратноеОграничениеПо, Выборка.ОтклоненияВремяНачала, Выборка.ОтклоненияВремяОкончания);
				Иначе
					РассчитатьИнтервалы(МассивИнтервалов, КратноеОграничениеС, КратноеОграничениеПо, Выборка.ВремяНачала, Выборка.ВремяОкончания);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если МассивИнтервалов.Количество() > 0 Тогда
			
			Интервал = 0;
			СледующаяПерваяКолонка = 0;
			СледующаяПоследняяКолонка = 0;
			Для каждого ДеньМассива Из МассивДней Цикл
				
				КратноеВремяС = КратноеОграничениеС;
				СледующаяПерваяКолонка = СледующаяПерваяКолонка + НомерПервойКолонки;
				СледующаяПоследняяКолонка = СледующаяПоследняяКолонка + НомерПоследнейКолонкиДня + Интервал;
				
				Интервал = 0;
				R = НачалоСпискаРесурсов + НомерСтроки;
				Пока СледующаяПерваяКолонка <= СледующаяПоследняяКолонка Цикл
					
					ИнтервалПоиска = ДеньМассива + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
					РезультатПоиска = МассивИнтервалов.Найти(ИнтервалПоиска);
					Если РезультатПоиска <> Неопределено Тогда
						// Ячейка 1.
						КоличествоСвободныхИнтервалов = КоличествоСвободныхИнтервалов + 1;
						ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
						ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
						ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, 2);
					Иначе
						ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, 1);
					КонецЕсли;
					
					КратноеВремяС = КратноеВремяС + КратностьДня * 60;
					ИнтервалПоиска = ДеньМассива + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
					РезультатПоиска = МассивИнтервалов.Найти(ИнтервалПоиска);
					Если РезультатПоиска <> Неопределено Тогда
						// Ячейка 2.
						КоличествоСвободныхИнтервалов = КоличествоСвободныхИнтервалов + 1;
						ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
						ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
						ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, 2);
					Иначе
						ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, 1);
					КонецЕсли;
					
					КратноеВремяС = КратноеВремяС + КратностьДня * 60;
					СледующаяПерваяКолонка = СледующаяПерваяКолонка + 3;
					Интервал = Интервал + 3;
					
				КонецЦикла;
				
				НомерПервойКолонки = 0;
				НомерПоследнейКолонкиДня = 0;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Работа без графика.
		Если МассивДнейПоГрафику.Количество() = 0 Тогда
			КоличествоРабочихДней = МассивДней.Количество();
			ПоГрафикуС = МассивДней[КоличествоРабочихДней - 1] + 24 * 60 *60
		ИначеЕсли МассивДнейПоГрафику.Количество() < МассивДней.Количество() Тогда
			ПоГрафикуС = МассивДнейПоГрафику[0];
		ИначеЕсли МассивДнейПоГрафику.Количество() = МассивДней.Количество() Тогда
			ПоГрафикуС = МассивДней[0];
		КонецЕсли;
		
		Интервал = 0;
		СледующаяПерваяКолонка = 0;
		СледующаяПоследняяКолонка = 0;
		ДеньМассива = МассивДней[0];
		Пока ДеньМассива < ПоГрафикуС Цикл
			
			КратноеВремяС = КратноеОграничениеС;
			СледующаяПерваяКолонка = СледующаяПерваяКолонка + НомерПервойКолонки;
			СледующаяПоследняяКолонка = СледующаяПоследняяКолонка + НомерПоследнейКолонкиДня + Интервал;
			
			Интервал = 0;
			R = НачалоСпискаРесурсов + НомерСтроки;
			Пока СледующаяПерваяКолонка <= СледующаяПоследняяКолонка Цикл
				
				ИнтервалПоиска = ДеньМассива + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
				КоличествоСвободныхИнтервалов = КоличествоСвободныхИнтервалов + 2;
				
				// Ячейка 1.
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, 2);
				
				// Ячейка 2.
				КратноеВремяС = КратноеВремяС + КратностьДня * 60;
				ИнтервалПоиска = ДеньМассива + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = МощностьРесурса;
				ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, 2);
				
				КратноеВремяС = КратноеВремяС + КратностьДня * 60;
				СледующаяПерваяКолонка = СледующаяПерваяКолонка + 3;
				Интервал = Интервал + 3;
				
			КонецЦикла;
			
			НомерПервойКолонки = 0;
			НомерПоследнейКолонкиДня = 0;
			
			ДеньМассива = ДеньМассива + 24 * 60 *60;
			
		КонецЦикла;
		
		// Вывод итогов.
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,3);
		ТабДок.Область(R, 2).Обвести(Линия, Линия, Линия, Линия);
		ТабДок.Область(R, 2).ЦветРамки = ЦветРамкиЯчейки;
		ТабДок.Область(R, 2).Цветфона = ЦветЯчейкиРесурсСвободен;
		ТабДок.Область(R, 3).Текст = ?(КоличествоСвободныхИнтервалов = 0, "0", КоличествоСвободныхИнтервалов);
		ТабДок.Область(R, 3).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабДок.Область(R, 3).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,3);
		ТабДок.Область(R, 4).Обвести(Линия, Линия, Линия, Линия);
		ТабДок.Область(R, 4).ЦветРамки = ЦветРамкиЯчейки;
		ТабДок.Область(R, 4).Цветфона = ЦветЯчейкиРесурсЗанят;
		ТабДок.Область(R, 5).Текст = "0";
		ТабДок.Область(R, 5).ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ТабДок.Область(R, 5).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		НомерСтроки = НомерСтроки + 2;
		
	КонецЦикла;
	
	// Расписание загрузки ресурсов по заказам.
	ТаблицаИнтервалов = Новый ТаблицаЗначений();
	ТаблицаИнтервалов.Колонки.Добавить("Интервал");
	ТаблицаИнтервалов.Колонки.Добавить("Заказ");
	ТаблицаИнтервалов.Колонки.Добавить("Загрузка");
	ТаблицаИнтервалов.Индексы.Добавить("Интервал");
	
	НомерСтроки = 1;
	ВыборкаРесурс = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	Пока ВыборкаРесурс.Следующий() Цикл
		
		R = НачалоСпискаРесурсов + НомерСтроки;
		
		КоличествоЗанятыхИнтервалов = 0;
		КоличествоСвободныхИнтервалов = 0;
		МощностьРесурса = ?(ВыборкаРесурс.Мощность = 1, 0, ВыборкаРесурс.Мощность);
		
		НомерПервойКолонки = ТабДок.Область(КоординатыПервойКолонки).Лево - 1;
		НомерПоследнейКолонкиДня = ТабДок.Область(КоординатыОкончанияДня).Право;
		НомерПоследнейКолонкиШкалы = ТабДок.Область(КоординатыПоследнейКолонки).Право;
		
		ТаблицаИнтервалов.Очистить();
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ВремяНачала)Тогда
				Продолжить;
			КонецЕсли;
			РассчитатьИнтервалыСРасшифровкой(Выборка, ТаблицаИнтервалов, КратноеОграничениеС, КратноеОграничениеПо);
		КонецЦикла;
		
		Если ТаблицаИнтервалов.Количество() > 0 Тогда
			
			Интервал = 0;
			СледующаяПерваяКолонка = 0;
			СледующаяПоследняяКолонка = 0;
			Для каждого ДеньМассива Из МассивДней Цикл
				
				КратноеВремяС = КратноеОграничениеС;
				СледующаяПерваяКолонка = СледующаяПерваяКолонка + НомерПервойКолонки;
				СледующаяПоследняяКолонка = СледующаяПоследняяКолонка + НомерПоследнейКолонкиДня + Интервал;
				
				Интервал = 0;
				R = НачалоСпискаРесурсов + НомерСтроки;
				Пока СледующаяПерваяКолонка <= СледующаяПоследняяКолонка Цикл
					
					ИнтервалПоиска = ДеньМассива + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
					СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
					РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
					Если РезультатПоиска.Количество() > 0 Тогда
						// Ячейка 1.
						ВсегоЗагрузка = 0;
						МассивЗаказов = Новый Массив;
						Для каждого СтрокаЗагрузки Из РезультатПоиска Цикл
							ВсегоЗагрузка = ВсегоЗагрузка + СтрокаЗагрузки.Загрузка;
							МассивЗаказов.Добавить(СтрокаЗагрузки.Заказ);
						КонецЦикла;
						Если МощностьРесурса = 0 Тогда
							ЗагрузкаРесурса = 0;
						Иначе
							ТекстЗагрузкаРесурса = ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст;
							ЗагрузкаРесурса = Число(ТекстЗагрузкаРесурса);
							ЗагрузкаРесурса = ЗагрузкаРесурса - ВсегоЗагрузка;
						КонецЕсли;
						Если ЗагрузкаРесурса = 0 Тогда
							ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
							ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = ЗагрузкаРесурса;
							ВидИнтервала = 3;
						ИначеЕсли ЗагрузкаРесурса < 0 Тогда
							ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
							ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = ЗагрузкаРесурса * (-1);
							ВидИнтервала = 3;
						Иначе
							ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
							ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Текст = ЗагрузкаРесурса;
							ВидИнтервала = 2;
						КонецЕсли;
						
						ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, ВидИнтервала, МассивЗаказов);
						
					КонецЕсли;
					
					КратноеВремяС = КратноеВремяС + КратностьДня * 60;
					ИнтервалПоиска = ДеньМассива + Час(КратноеВремяС) * 60 * 60 + Минута(КратноеВремяС) * 60;
					СтурктураПоиска = Новый Структура("Интервал", ИнтервалПоиска);
					РезультатПоиска = ТаблицаИнтервалов.НайтиСтроки(СтурктураПоиска);
					Если РезультатПоиска.Количество() > 0 Тогда
						// Ячейка 2.
						ВсегоЗагрузка = 0;
						МассивЗаказов = Новый Массив;
						Для каждого СтрокаЗагрузки Из РезультатПоиска Цикл
							ВсегоЗагрузка = ВсегоЗагрузка + СтрокаЗагрузки.Загрузка;
							МассивЗаказов.Добавить(СтрокаЗагрузки.Заказ);
						КонецЦикла;
						Если МощностьРесурса = 0 Тогда
							ЗагрузкаРесурса = 0;
						Иначе
							ТекстЗагрузкаРесурса = ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст;
							ЗагрузкаРесурса = Число(ТекстЗагрузкаРесурса);
							ЗагрузкаРесурса = ЗагрузкаРесурса - ВсегоЗагрузка;
						КонецЕсли;
						Если ЗагрузкаРесурса = 0 Тогда
							ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
							ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = ЗагрузкаРесурса;
							ВидИнтервала = 3;
						ИначеЕсли ЗагрузкаРесурса < 0 Тогда
							ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсЗанят;
							ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = ЗагрузкаРесурса * (-1);
							ВидИнтервала = 3;
						Иначе
							ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Цветфона = ЦветЯчейкиРесурсСвободен;
							ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Текст = ЗагрузкаРесурса;
							ВидИнтервала = 2;
						КонецЕсли;
						
						ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка = ПолучитьРасшифровкуЯчейки(ВыборкаРесурс.РесурсПредприятия, ИнтервалПоиска, ВидИнтервала, МассивЗаказов);
						
					КонецЕсли;
					
					РасшифровкаЯчейки1 = ТабДок.Область(R, СледующаяПерваяКолонка + Отступ).Расшифровка;
					Если РасшифровкаЯчейки1.ВидИнтервала = 2 Тогда
						КоличествоСвободныхИнтервалов = КоличествоСвободныхИнтервалов + 1;
					КонецЕсли;
					Если РасшифровкаЯчейки1.ВидИнтервала = 3 Тогда
						КоличествоЗанятыхИнтервалов = КоличествоЗанятыхИнтервалов + 1;
					КонецЕсли;
					РасшифровкаЯчейки2 = ТабДок.Область(R, СледующаяПерваяКолонка + СдвигПоШкале + Отступ).Расшифровка;
					Если РасшифровкаЯчейки2.ВидИнтервала = 2 Тогда
						КоличествоСвободныхИнтервалов = КоличествоСвободныхИнтервалов + 1;
					КонецЕсли;
					Если РасшифровкаЯчейки2.ВидИнтервала = 3 Тогда
						КоличествоЗанятыхИнтервалов = КоличествоЗанятыхИнтервалов + 1;
					КонецЕсли;
					
					КратноеВремяС = КратноеВремяС + КратностьДня * 60;
					СледующаяПерваяКолонка = СледующаяПерваяКолонка + 3;
					Интервал = Интервал + 3;
					
				КонецЦикла;
				
				НомерПервойКолонки = 0;
				НомерПоследнейКолонкиДня = 0;
				
			КонецЦикла;
			
			// Вывод итогов.
			ТабДок.Область(R, 3).Текст = ?(КоличествоСвободныхИнтервалов = 0, "0", КоличествоСвободныхИнтервалов);
			ТабДок.Область(R, 5).Текст = ?(КоличествоЗанятыхИнтервалов = 0, "0", КоличествоЗанятыхИнтервалов);
			
		КонецЕсли;
		
		// Инициализация размеров строк.
		R = ШагШкалы + НомерСтроки + СдвигПоШкале;
		ТабДок.Область(R, 1).ВысотаСтроки = 5;
		ТабДок.Область(R + Отступ, 1).ВысотаСтроки = 18;
		
		НомерСтроки = НомерСтроки + 2;
		
	КонецЦикла;
	
	ТабДок.ФиксацияСверху = 4;
	ТабДок.ФиксацияСлева = 5;
	
КонецПроцедуры // ОбновитьКалендарьПериодДень()

// Процедура расчитывает интервалы планирования для шкалы календаря.
//
&НаСервере
Процедура РассчитатьИнтервалы(МассивИнтервалов, ВремяС, ВремяПо, ВремяНачала, ВремяОкончания)
	
	КратноеОграничениеВремениС = НачалоДня(ВремяНачала) + Час(ВремяС) * 60 * 60 + Минута(ВремяС) * 60;
	КратноеОграничениеВремениПо = НачалоДня(ВремяНачала) + Час(ВремяПо) * 60 * 60 + Минута(ВремяПо) * 60;
	
	// Если 24 часа.
	Если КратноеОграничениеВремениС >= КратноеОграничениеВремениПо Тогда
		КратноеОграничениеВремениПо = КратноеОграничениеВремениПо + 24 * 60 * 60;
	КонецЕсли;
	
	Если КратностьДня = 60 Тогда
		
		ЧасВремяНачала = Час(ВремяНачала);
		КратноеВремяНачала = НачалоДня(ВремяНачала) + ЧасВремяНачала * 60 * 60;
		ЧасВремяОкончания = ?(Минута(ВремяОкончания) <> 0, Час(ВремяОкончания) + 1, Час(ВремяОкончания));
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + ЧасВремяОкончания * 60 * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если Час(КратноеВремяНачала) >= Час(КратноеОграничениеВремениС) И Час(КратноеВремяНачала) <= Час(КратноеОграничениеВремениПо) Тогда
				МассивИнтервалов.Добавить(КратноеВремяНачала);
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 15 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 15) * 15;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 15) = Минута(ВремяОкончания) / 15, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 15) * 15 + 15);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				МассивИнтервалов.Добавить(КратноеВремяНачала);
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 10 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 10) * 10;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 10) = Минута(ВремяОкончания) / 10, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 10) * 10 + 10);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				МассивИнтервалов.Добавить(КратноеВремяНачала);
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 5 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 5) * 5;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 5) = Минута(ВремяОкончания) / 5, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 5) * 5 + 5);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				МассивИнтервалов.Добавить(КратноеВремяНачала);
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
		ВремяС = КратноеОграничениеВремениС;
		
	Иначе // Кратность = 30
		
		МинутВремяНачала = ?(Минута(ВремяНачала) < 30, Час(ВремяНачала) * 60, Час(ВремяНачала) * 60 + 30);
		КратноеВремяНачала = НачалоДня(ВремяНачала) + МинутВремяНачала * 60;
		Если Минута(ВремяОкончания) <= 30 Тогда
			МинутВремяОкончания = ?(Минута(ВремяОкончания) = 0, Час(ВремяОкончания) * 60, Час(ВремяОкончания) * 60 + 30);
		Иначе
			МинутВремяОкончания = (Час(ВремяОкончания) + 1) * 60;
		КонецЕсли;
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				МассивИнтервалов.Добавить(КратноеВремяНачала);
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьИнтервалы()

// Процедура расчитывает интервалы планирования для шкалы календаря с расшифровкой.
//
&НаСервере
Процедура РассчитатьИнтервалыСРасшифровкой(Выборка, ТаблицаИнтервалов, ВремяС, ВремяПо)
	
	ВремяНачала = Выборка.ВремяНачала;
	ВремяОкончания = Выборка.ВремяОкончания;
	
	КратноеОграничениеВремениС = НачалоДня(ВремяНачала) + Час(ВремяС) * 60 * 60 + Минута(ВремяС) * 60;
	КратноеОграничениеВремениПо = НачалоДня(ВремяНачала) + Час(ВремяПо) * 60 * 60 + Минута(ВремяПо) * 60;
	
	// Если 24 часа.
	Если КратноеОграничениеВремениС >= КратноеОграничениеВремениПо Тогда
		КратноеОграничениеВремениПо = КратноеОграничениеВремениПо + 24 * 60 * 60;
	КонецЕсли;
	
	Если КратностьДня = 60 Тогда
		
		ЧасВремяНачала = Час(ВремяНачала);
		КратноеВремяНачала = НачалоДня(ВремяНачала) + ЧасВремяНачала * 60 * 60;
		ЧасВремяОкончания = ?(Минута(ВремяОкончания) <> 0, Час(ВремяОкончания) + 1, Час(ВремяОкончания));
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + ЧасВремяОкончания * 60 * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если Час(КратноеВремяНачала) >= Час(КратноеОграничениеВремениС) И Час(КратноеВремяНачала) <= Час(КратноеОграничениеВремениПо) Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Заказ = Выборка.Ссылка;
				НоваяСтрока.Загрузка = Выборка.Загрузка;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 15 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 15) * 15;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 15) = Минута(ВремяОкончания) / 15, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 15) * 15 + 15);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Заказ = Выборка.Ссылка;
				НоваяСтрока.Загрузка = Выборка.Загрузка;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 10 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 10) * 10;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 10) = Минута(ВремяОкончания) / 10, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 10) * 10 + 10);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Заказ = Выборка.Ссылка;
				НоваяСтрока.Загрузка = Выборка.Загрузка;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	ИначеЕсли КратностьДня = 5 Тогда
		
		МинутВремяНачала = Цел(Минута(ВремяНачала) / 5) * 5;
		КратноеВремяНачала = НачалоДня(ВремяНачала) + Час(ВремяНачала) * 60 * 60 + МинутВремяНачала * 60;
		
		МинутВремяОкончания = ?(Цел(Минута(ВремяОкончания) / 5) = Минута(ВремяОкончания) / 5, Минута(ВремяОкончания), Цел(Минута(ВремяОкончания) / 5) * 5 + 5);
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + Час(ВремяОкончания) * 60 * 60 + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Заказ = Выборка.Ссылка;
				НоваяСтрока.Загрузка = Выборка.Загрузка;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
		ВремяС = КратноеОграничениеВремениС;
		
	Иначе // Кратность = 30
		
		МинутВремяНачала = ?(Минута(ВремяНачала) < 30, Час(ВремяНачала) * 60, Час(ВремяНачала) * 60 + 30);
		КратноеВремяНачала = НачалоДня(ВремяНачала) + МинутВремяНачала * 60;
		Если Минута(ВремяОкончания) <= 30 Тогда
			МинутВремяОкончания = ?(Минута(ВремяОкончания) = 0, Час(ВремяОкончания) * 60, Час(ВремяОкончания) * 60 + 30);
		Иначе
			МинутВремяОкончания = (Час(ВремяОкончания) + 1) * 60;
		КонецЕсли;
		КратноеВремяОкончания = НачалоДня(ВремяОкончания) + МинутВремяОкончания * 60;
		
		Пока КратноеВремяНачала < КратноеВремяОкончания Цикл
			Если КратноеВремяНачала >= КратноеОграничениеВремениС И КратноеВремяНачала <= КратноеОграничениеВремениПо Тогда
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				НоваяСтрока.Интервал = КратноеВремяНачала;
				НоваяСтрока.Заказ = Выборка.Ссылка;
				НоваяСтрока.Загрузка = Выборка.Загрузка;
			КонецЕсли;
			КратноеВремяНачала = КратноеВремяНачала + КратностьДня * 60;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьИнтервалы()

// Функция возвращает расписание загрузки ресурсов.
//
&НаСервере
Функция ПолучитьРасписаниеЗагрузкиРесурсов(СписокРесурсов, МассивДней)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиРаботыРесурсов.Период КАК Период,
	|	ГрафикиРаботыРесурсов.РесурсПредприятия КАК РесурсПредприятия,
	|	ГрафикиРаботыРесурсов.ГрафикРаботы
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыРесурсов КАК ГрафикиРаботыРесурсов
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсПредприятия,
	|	Период УБЫВ
	|ИТОГИ ПО
	|	РесурсПредприятия";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРесурс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РесурсПредприятия");
	
	ТаблицаГрафиков = Новый ТаблицаЗначений;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("Период", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.КлючевыеРесурсы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("РесурсПредприятия", ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ГрафикиРаботы"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив, ,);
	Массив.Очистить();
	
	ТаблицаГрафиков.Колонки.Добавить("ГрафикРаботы", ОписаниеТипов);
	
	Пока ВыборкаРесурс.Следующий() Цикл
		
		МассивДнейГрафиков = Новый Массив();
		Для каждого ЭлМассива Из МассивДней Цикл
			МассивДнейГрафиков.Добавить(ЭлМассива);
		КонецЦикла;
		
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Инд = 0;
			Пока Инд <= МассивДнейГрафиков.Количество() - 1 Цикл
				
				Если Выборка.Период <= МассивДнейГрафиков[Инд] Тогда
					
					НоваяСтрока = ТаблицаГрафиков.Добавить();
					НоваяСтрока.РесурсПредприятия = Выборка.РесурсПредприятия;
					НоваяСтрока.Период = МассивДнейГрафиков[Инд];
					НоваяСтрока.ГрафикРаботы = Выборка.ГрафикРаботы;
					МассивДнейГрафиков.Удалить(Инд);
					
				Иначе
					Инд = Инд + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Мощность КАК Мощность,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование
	|ПОМЕСТИТЬ ВременнаяТаблицаРесурсовПредприятия
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	(&ОтборПоКлючевомуРесурсу
	|			ИЛИ КлючевыеРесурсы.Ссылка В (&ОтборСписокКлючевыхРесурсов))
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаГрафиков.Период КАК Период,
	|	ТаблицаГрафиков.РесурсПредприятия КАК РесурсПредприятия,
	|	ТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВременнаяТаблицаГрафиков
	|ИЗ
	|	&ТаблицаГрафиков КАК ТаблицаГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВременнаяТаблицаГрафиков.Период КАК Период,
	|	ВременнаяТаблицаГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботы.ВремяНачала КАК ВремяНачала,
	|	ГрафикиРаботы.ВремяОкончания КАК ВремяОкончания,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала КАК ОтклоненияВремяНачала,
	|	ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания КАК ОтклоненияВремяОкончания,
	|	ЕСТЬNULL(ОтклоненияОтГрафиковРаботыРесурсов.НеРабочийДень, ЛОЖЬ) КАК ОтклоненияНеРабочийДень
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаГрафиков КАК ВременнаяТаблицаГрафиков
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ВременнаяТаблицаГрафиков.РесурсПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботы КАК ГрафикиРаботы
	|		ПО (ВременнаяТаблицаГрафиков.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
	|			И (ГрафикиРаботы.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ГрафикиРаботы.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ))
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтклоненияОтГрафиковРаботыРесурсов КАК ОтклоненияОтГрафиковРаботыРесурсов
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ОтклоненияОтГрафиковРаботыРесурсов.РесурсПредприятия
	|			И (ВременнаяТаблицаГрафиков.Период = НАЧАЛОПЕРИОДА(ОтклоненияОтГрафиковРаботыРесурсов.День, ДЕНЬ))
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяНачала МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			И (ОтклоненияОтГрафиковРаботыРесурсов.ВремяОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование,
	|	Период,
	|	ВремяНачала,
	|	ВремяОкончания
	|ИТОГИ
	|	МИНИМУМ(Мощность)
	|ПО
	|	РесурсПредприятия,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Ответственный,
	|	ВложенныйЗапрос.Старт КАК ВремяНачала,
	|	ВложенныйЗапрос.Финиш КАК ВремяОкончания,
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.Мощность КАК Мощность,
	|	ВложенныйЗапрос.Мощность КАК Загрузка
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказНаПроизводствоРесурсыПредприятия.Ссылка КАК Ссылка,
	|			ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Мощность КАК Мощность,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Старт КАК Старт,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Финиш КАК Финиш,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ЗаказПокупателя.Контрагент КАК Контрагент,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Ответственный КАК Ответственный,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.СтруктурнаяЕдиница КАК Подразделение
	|		ИЗ
	|			Документ.ЗаказНаПроизводство.РесурсыПредприятия КАК ЗаказНаПроизводствоРесурсыПредприятия
	|		ГДЕ
	|			НЕ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Проведен
	|			И НЕ ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ЗаказПокупателя.Контрагент = &ОтборКонтрагент)
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка,
	|			ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия,
	|			ЗаказПокупателяРесурсыПредприятия.Мощность,
	|			ЗаказПокупателяРесурсыПредприятия.Старт,
	|			ЗаказПокупателяРесурсыПредприятия.Финиш,
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка.Контрагент,
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка.Ответственный,
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка.СтруктурнаяЕдиницаПродажи
	|		ИЗ
	|			Документ.ЗаказПокупателя.РесурсыПредприятия КАК ЗаказПокупателяРесурсыПредприятия
	|		ГДЕ
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			И НЕ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|			И ЗаказПокупателяРесурсыПредприятия.Ссылка.Проведен
	|			И НЕ ЗаказПокупателяРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			И ЗаказПокупателяРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ЗаказПокупателяРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ ЗаказПокупателяРесурсыПредприятия.Ссылка.Контрагент = &ОтборКонтрагент)
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))) КАК ВложенныйЗапрос
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ВложенныйЗапрос.РесурсПредприятия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование,
	|	ВремяНачала,
	|	ВремяОкончания
	|ИТОГИ
	|	МИНИМУМ(Мощность)
	|ПО
	|	РесурсПредприятия";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаКалендаряНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКалендаряОкончание);
	Запрос.УстановитьПараметр("ОтборКонтрагент", ОтборКонтрагент);
	Запрос.УстановитьПараметр("ОтборПоКлючевомуРесурсу", СписокРесурсов = Неопределено);
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	Запрос.УстановитьПараметр("ТаблицаГрафиков", ТаблицаГрафиков);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // ПолучитьРасписаниеЗагрузкиРесурсов()

// Функция возвращает расписание загрузки ресурсов для недели и месяца.
//
&НаСервере
Функция ПолучитьРасписаниеЗагрузкиРесурсовНеделяМесяц(СписокРесурсов, ДатаНачала, ДатаОкончания)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючевыеРесурсы.Ссылка КАК РесурсПредприятия,
	|	КлючевыеРесурсы.Наименование КАК РесурсНаименование
	|ПОМЕСТИТЬ ВременнаяТаблицаРесурсовПредприятия
	|ИЗ
	|	Справочник.КлючевыеРесурсы КАК КлючевыеРесурсы
	|ГДЕ
	|	(&ОтборПоКлючевомуРесурсу
	|			ИЛИ КлючевыеРесурсы.Ссылка В (&ОтборСписокКлючевыхРесурсов))
	|	И НЕ КлючевыеРесурсы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование КАК РесурсНаименование
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Заказ,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Старт, ДЕНЬ) КАК ВремяНачала,
	|	ВложенныйЗапрос.Финиш КАК ВремяОкончания,
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсНаименование КАК РесурсНаименование,
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК КолРесурсов,
	|	ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия КАК РесурсПредприятия
	|ИЗ
	|	ВременнаяТаблицаРесурсовПредприятия КАК ВременнаяТаблицаРесурсовПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказНаПроизводствоРесурсыПредприятия.Ссылка КАК Ссылка,
	|			ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Старт КАК Старт,
	|			ЗаказНаПроизводствоРесурсыПредприятия.Финиш КАК Финиш
	|		ИЗ
	|			Документ.ЗаказНаПроизводство.РесурсыПредприятия КАК ЗаказНаПроизводствоРесурсыПредприятия
	|		ГДЕ
	|			НЕ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Проведен
	|			И НЕ ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ЗаказНаПроизводствоРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ЗаказПокупателя.Контрагент = &ОтборКонтрагент)
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка,
	|			ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия,
	|			ЗаказПокупателяРесурсыПредприятия.Старт,
	|			ЗаказПокупателяРесурсыПредприятия.Финиш
	|		ИЗ
	|			Документ.ЗаказПокупателя.РесурсыПредприятия КАК ЗаказПокупателяРесурсыПредприятия
	|		ГДЕ
	|			ЗаказПокупателяРесурсыПредприятия.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|			И НЕ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|			И ЗаказПокупателяРесурсыПредприятия.Ссылка.Проведен
	|			И НЕ ЗаказПокупателяРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|			И ЗаказПокупателяРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И ЗаказПокупателяРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			И (&ОтборКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ИЛИ ЗаказПокупателяРесурсыПредприятия.Ссылка.Контрагент = &ОтборКонтрагент)
	|			И (&ОтборПоКлючевомуРесурсу
	|					ИЛИ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))) КАК ВложенныйЗапрос
	|		ПО ВременнаяТаблицаРесурсовПредприятия.РесурсПредприятия = ВложенныйЗапрос.РесурсПредприятия
	|ГДЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.Старт, &ПустаяДата) <> &ПустаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсНаименование
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КолРесурсов)
	|ПО
	|	ВремяНачала,
	|	РесурсПредприятия";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ОтборКонтрагент", ОтборКонтрагент);
	Запрос.УстановитьПараметр("ОтборПоКлючевомуРесурсу", СписокРесурсов = Неопределено);
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // ПолучитьРасписаниеЗагрузкиРесурсовНеделяМесяц()

// Функция возвращает значение расшифровки ячейки.
//
&НаСервере
Функция ПолучитьРасшифровкуЯчейки(РесурсПредприятия, Интервал, ВидИнтервала, СписокЗаказов = Неопределено)
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("РесурсПредприятия", РесурсПредприятия);
	СтруктураРасшифровки.Вставить("Интервал", Интервал);
	СтруктураРасшифровки.Вставить("ВидИнтервала", ВидИнтервала);
	СтруктураРасшифровки.Вставить("СписокЗаказов", СписокЗаказов);
	
	Возврат СтруктураРасшифровки;
	
КонецФункции // ПолучитьРасшифровкуЯчейки()

// Функция возвращает значение расшифровки ячейки для недели и месяца.
//
&НаСервере
Функция ПолучитьРасшифровкуЯчейкиНеделяМесяц(Интервал, СписокЗаказов = Неопределено)
	
	СтруктураРасшифровки = Новый Структура;
	СтруктураРасшифровки.Вставить("Интервал", Интервал);
	СтруктураРасшифровки.Вставить("СписокЗаказов", СписокЗаказов);
	
	Возврат СтруктураРасшифровки;
	
КонецФункции // ПолучитьРасшифровкуЯчейкиНеделяМесяц()

// Процедура вывод помощник, если нет ресурсов.
//
&НаСервере
Процедура ВывестиПомощник(ТабДок)
	
	МакетПомощник = Обработки.Планировщик.ПолучитьМакет("Помощник");
	ТабДок.Вывести(МакетПомощник);
	
КонецПроцедуры // ВывестиПомощник()

// Процедура добавления новой заявки в календаре.
//
&НаКлиенте
Процедура ОбработкаРасшифровкиСоздатьНовыйЗаказ(Расшифровка)
	
	Если РасписаниеРаботПереключатель = "День" ИЛИ РасписаниеРаботПереключатель = "4дня" Тогда
		ПараметрыОткрытия = ПараметрыОткрытияЗаявки();
		Если ОтображатьЗаказыНаПроизводство И ОтображатьЗаказНаряды Тогда
			СписокЗаказов = Новый СписокЗначений();
			СписокЗаказов.Добавить("ЗаказНаПроизводство", "Заказ на производство");
			СписокЗаказов.Добавить("ЗаказНаряд", "Заказ-наряд");
			Оповещение = Новый ОписаниеОповещения("ОбработкаРасшифровкиСоздатьНовыйЗаказЗавершение",ЭтаФорма,ПараметрыОткрытия);
			СписокЗаказов.ПоказатьВыборЭлемента(Оповещение,"Выберете тип заказа");
		ИначеЕсли ОтображатьЗаказыНаПроизводство Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаЗаявки", ПараметрыОткрытия);
		Иначе
			ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаявки", ПараметрыОткрытия);
		КонецЕсли;
	ИначеЕсли РасписаниеРаботПереключатель = "Неделя" Тогда
		ДеньВКалендаре = Расшифровка.Интервал;
		РасписаниеРаботПереключатель = "День";
		ДатаКалендаря = ДеньВКалендаре;
		ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецДня(ДатаКалендаря);
		СформироватьПериодРасписанияРабот();
		ОбновитьКалендарь();
	ИначеЕсли РасписаниеРаботПереключатель = "Месяц" Тогда
		ДеньВКалендаре = Расшифровка.Интервал;
		РасписаниеРаботПереключатель = "День";
		ДатаКалендаря = ДеньВКалендаре;
		ДатаКалендаряНачало = НачалоДня(ДатаКалендаря);
		ДатаКалендаряОкончание = КонецДня(ДатаКалендаря);
		СформироватьПериодРасписанияРабот();
		ОбновитьКалендарь();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровкиСоздатьНовыйЗаказ()

&НаКлиенте
Процедура ОбработкаРасшифровкиСоздатьНовыйЗаказЗавершение(ВыбранныйЗаказ,ПараметрыОткрытия) Экспорт
	
	Если ВыбранныйЗаказ <> Неопределено Тогда
		Если ВыбранныйЗаказ.Значение = "ЗаказНаПроизводство" Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаЗаявки", ПараметрыОткрытия);
		Иначе
			ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаявки", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура позволяет просматривать информацию о заказах на интервале времени.
//
&НаКлиенте
Процедура ОбработкаРасшифровкиИнформацияОЗаказах()
	
	ТекущаяОбластьКалендаря = Элементы.ЗагрузкаРесурсов.ТекущаяОбласть;
	Если ТипЗнч(ТекущаяОбластьКалендаря) = Тип("РисунокТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = Новый СписокЗначений;
	
	Если РасписаниеРаботПереключатель = "День" ИЛИ РасписаниеРаботПереключатель= "4дня" Тогда
		ПерваяСтрока = ТекущаяОбластьКалендаря.Верх;
		ПоследняяСтрока = ТекущаяОбластьКалендаря.Низ;
		ПоследняяКолонка = ТекущаяОбластьКалендаря.Право;
		Пока ПерваяСтрока <= ПоследняяСтрока Цикл
			ПерваяКолонка = ТекущаяОбластьКалендаря.Лево;
			Пока ПерваяКолонка <= ПоследняяКолонка Цикл
				РасшифровкаЯчейки = ЗагрузкаРесурсов.Область(ПерваяСтрока, ПерваяКолонка).Расшифровка;
				Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") Тогда
					Если РасшифровкаЯчейки.СписокЗаказов <> Неопределено Тогда
						Для каждого ЭлЗаказ Из РасшифровкаЯчейки.СписокЗаказов Цикл
							СписокЗаказов.Добавить(ЭлЗаказ);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ПерваяКолонка = ПерваяКолонка + 1;
			КонецЦикла;
			ПерваяСтрока = ПерваяСтрока + 1;
		КонецЦикла;
	Иначе
		РасшифровкаЯчейки = ТекущаяОбластьКалендаря.Расшифровка;
		Если ТипЗнч(РасшифровкаЯчейки) = Тип("Структура") Тогда
			Если РасшифровкаЯчейки.СписокЗаказов <> Неопределено Тогда
				Для каждого ЭлЗаказ Из РасшифровкаЯчейки.СписокЗаказов Цикл
					СписокЗаказов.Добавить(ЭлЗаказ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОтборЗаказы", СписокЗаказов);
	ПараметрыОтбора.Вставить("ОграничениеВремениС", ОграничениеВремениС);
	ПараметрыОтбора.Вставить("ОграничениеВремениПо", ОграничениеВремениПо);
	ПараметрыОтбора.Вставить("ОтображатьЗаказНаряды", ОтображатьЗаказНаряды);
	ПараметрыОтбора.Вставить("ОтображатьЗаказыНаПроизводство", ОтображатьЗаказыНаПроизводство);
	ПараметрыОтбора.Вставить("КратностьДня", КратностьДня);
	
	Если СписокЗаказов.Количество() = 1 Тогда
		ПараметрыОтбора.Вставить("Ключ", СписокЗаказов[0].Значение);
		Если ТипЗнч(СписокЗаказов[0].Значение) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаЗаявки", ПараметрыОтбора,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаявки", ПараметрыОтбора,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОткрытьФорму("Обработка.Планировщик.Форма.ФормаВыбораЗаказов", Новый Структура("ПараметрыОтбора", ПараметрыОтбора),,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаРасшифровкиИнформацияОЗаказах()

#КонецОбласти

#Область ДиаграммаЗагрузкаРесурсов

// Процедура обновляет данные диаграммы план графика.
//
&НаСервере
Процедура ОбновитьДиаграммуРесурсов()
	
	СохранитьНастройкиФормы();
	
	// Инициализация.
	ДиаграммаГантаЗагрузкаРесурсов.ОтображатьЛегенду = Ложь;
	ДиаграммаГантаЗагрузкаРесурсов.Обновление = Ложь;
	
	ДиаграммаГантаЗагрузкаРесурсов.Очистить();
	
	ДиаграммаГантаЗагрузкаРесурсов.АвтоОпределениеПолногоИнтервала = Ложь;
	ДиаграммаГантаЗагрузкаРесурсов.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	
	СформироватьШкалуВремениДиаграммыГанта(ДиаграммаГантаЗагрузкаРесурсов);
	
	СписокРесурсов = ПолучитьСписокРесурсовДляОтбора();
	
	// Заполнение.
	РезультатЗапроса = ПолучитьЗагрузкуРесурсов(СписокРесурсов);
	Серия = ДиаграммаГантаЗагрузкаРесурсов.Серии.Добавить();
	
	ЦветПерекрывающихсяИнтервалов = Новый Цвет(255, 0, 0);
	
	Серия.ДополнительныйЦвет = ЦветПерекрывающихсяИнтервалов;
	Серия.ШтриховкаПерекрывающихсяИнтервалов = Истина;
	
	ВыборкаРесурс = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ресурс");
	Пока ВыборкаРесурс.Следующий() Цикл
		
		ТочкаРесурс = ДиаграммаГантаЗагрузкаРесурсов.УстановитьТочку(ВыборкаРесурс.Ресурс);
		ЗначениеРесурс = ДиаграммаГантаЗагрузкаРесурсов.ПолучитьЗначение(ТочкаРесурс, Серия);
		
		ТочкаРесурс.Расшифровка = ВыборкаРесурс.Ресурс;
		
		Выборка = ВыборкаРесурс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗначениеТочки = СтрЗаменить(Строка(Выборка.Ссылка.УникальныйИдентификатор()), "-", "") + СтрЗаменить(Строка(ВыборкаРесурс.Ресурс.УникальныйИдентификатор()), "-", "");
			Точка = ДиаграммаГантаЗагрузкаРесурсов.УстановитьТочку(ЗначениеТочки, ВыборкаРесурс.Ресурс);
			Точка.Текст = НСтр("ru='" + Формат(Выборка.Старт, "ДФ=""ЧЧ:мм""") + " - "
							+ Формат(Выборка.Финиш, "ДФ=""ЧЧ:мм""") + " (№ "
							+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Истина) + " от " 
							+ Формат(Выборка.Дата, "ДФ=dd.MM.yy") + ") '");
			Точка.Расшифровка = Выборка.Ссылка;
			
			Интервал = ЗначениеРесурс.Добавить();
			Интервал.Расшифровка = Выборка.Ресурс;
			Интервал.Начало = Выборка.Старт;
			Интервал.Конец = Выборка.Финиш;
			Интервал.Цвет = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
			
			Если Выборка.СостояниеЗаказа = Справочники.СостоянияЗаказНарядов.Завершен
				Или Выборка.СостояниеЗаказа = Справочники.СостоянияЗаказовНаПроизводство.Завершен Тогда
				
				Точка.Картинка = БиблиотекаКартинок.ЗанятьФайл;
			Иначе
				Точка.Картинка = БиблиотекаКартинок.ОсвободитьФайл;
			КонецЕсли;
			
			ЗначениеЗаказа = ДиаграммаГантаЗагрузкаРесурсов.ПолучитьЗначение(Точка, Серия);
			ЗначениеЗаказа.Редактирование = Ложь;
			
			Интервал = ЗначениеЗаказа.Добавить();
			Интервал.Расшифровка = Выборка.Ссылка;
			Интервал.Начало = Выборка.Старт;
			Интервал.Конец = Выборка.Финиш;
			ЦветФона = Выборка.Цвет.Получить();
			Если ТипЗнч(ЦветФона) = Тип("Цвет") Тогда
				Интервал.Цвет = ЦветФона;
			КонецЕсли;
			
			Интервал.Значение.Текст = Выборка.Контрагент;
			
			ТекстЗначения = НСтр("ru='Загрузка: " + Выборка.Загрузка + "
								|Контрагент: " + Выборка.Контрагент + "
								|Ответственный: " + Выборка.Ответственный + "
								|Подразделение: " + Выборка.Подразделение + "'");
			
			Интервал.Текст  = ТекстЗначения;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого ТочкаДиаграммыГанта из ДиаграммаГантаЗагрузкаРесурсов.Точки Цикл
		
		ДиаграммаГантаЗагрузкаРесурсов.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
		
	КонецЦикла;
	
	ДиаграммаГантаЗагрузкаРесурсов.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграммуРесурсов()

// Функция возвращает результат выполнения запроса.
//
&НаСервере
Функция ПолучитьЗагрузкуРесурсов(СписокРесурсов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Дата,
	|	ВложенныйЗапрос.Номер,
	|	ВложенныйЗапрос.ВидОперации,
	|	ВложенныйЗапрос.СостояниеЗаказа КАК СостояниеЗаказа,
	|	ВложенныйЗапрос.Цвет КАК Цвет,
	|	ВложенныйЗапрос.Старт КАК Старт,
	|	ВложенныйЗапрос.Финиш КАК Финиш,
	|	ВложенныйЗапрос.РесурсПредприятия КАК Ресурс,
	|	ВложенныйЗапрос.Мощность КАК Загрузка,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Ответственный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка КАК Ссылка,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Дата КАК Дата,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Номер КАК Номер,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ВидОперации КАК ВидОперации,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.СостояниеЗаказа КАК СостояниеЗаказа,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.СостояниеЗаказа.Цвет КАК Цвет,
	|		ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия КАК РесурсПредприятия,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Мощность КАК Мощность,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Старт КАК Старт,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Финиш КАК Финиш,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ЗаказПокупателя.Контрагент КАК Контрагент,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Ответственный КАК Ответственный,
	|		ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.СтруктурнаяЕдиница КАК Подразделение
	|	ИЗ
	|		Документ.ЗаказНаПроизводство.РесурсыПредприятия КАК ЗаказНаПроизводствоРесурсыПредприятия
	|	ГДЕ
	|		НЕ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|		И ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.Проведен
	|		И НЕ ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|		И ЗаказНаПроизводствоРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ЗаказНаПроизводствоРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (&ОтборКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаказНаПроизводствоРесурсыПредприятия.Ссылка.ЗаказПокупателя.Контрагент = &ОтборКонтрагент)
	|		И (&ОтборПоКлючевомуРесурсу
	|				ИЛИ ЗаказНаПроизводствоРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка,
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.Дата,
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.Номер,
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.ВидОперации,
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.СостояниеЗаказа,
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.СостояниеЗаказа.Цвет,
	|		ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия,
	|		ЗаказПокупателяРесурсыПредприятия.Мощность,
	|		ЗаказПокупателяРесурсыПредприятия.Старт,
	|		ЗаказПокупателяРесурсыПредприятия.Финиш,
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.Контрагент,
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.Ответственный,
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.СтруктурнаяЕдиницаПродажи
	|	ИЗ
	|		Документ.ЗаказПокупателя.РесурсыПредприятия КАК ЗаказПокупателяРесурсыПредприятия
	|	ГДЕ
	|		ЗаказПокупателяРесурсыПредприятия.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
	|		И НЕ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия.ПометкаУдаления
	|		И ЗаказПокупателяРесурсыПредприятия.Ссылка.Проведен
	|		И НЕ ЗаказПокупателяРесурсыПредприятия.Ссылка.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.Отменен)
	|		И ЗаказПокупателяРесурсыПредприятия.Старт МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И ЗаказПокупателяРесурсыПредприятия.Финиш МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (&ОтборКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗаказПокупателяРесурсыПредприятия.Ссылка.Контрагент = &ОтборКонтрагент)
	|		И (&ОтборПоКлючевомуРесурсу
	|				ИЛИ ЗаказПокупателяРесурсыПредприятия.РесурсПредприятия В (&ОтборСписокКлючевыхРесурсов))) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ресурс,
	|	Старт,
	|	Финиш
	|ИТОГИ ПО
	|	Ресурс";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаКалендаряНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКалендаряОкончание);
	Запрос.УстановитьПараметр("ОтборКонтрагент", ОтборКонтрагент);
	Запрос.УстановитьПараметр("ОтборПоКлючевомуРесурсу", СписокРесурсов = Неопределено);
	Запрос.УстановитьПараметр("ОтборСписокКлючевыхРесурсов", СписокРесурсов);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьЗагрузкуРесурсов()

// Процедура - обработчик события ОбработкаРасшифровки.
//
&НаКлиенте
Процедура ДиаграммаГантаРесурсовОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	ВыбранныйЗаказ = Неопределено;
	
	Если ТипЗнч(Расшифровки) = Тип("ДокументСсылка.ЗаказНапроизводство")
		ИЛИ ТипЗнч(Расшифровки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВыбранныйЗаказ = Расшифровки;
	ИначеЕсли ТипЗнч(Расшифровки) = Тип("Массив") Тогда
		Для каждого ЭлРасшифровки Из Расшифровки Цикл
			
			Если ТипЗнч(ЭлРасшифровки) = Тип("ДокументСсылка.ЗаказНапроизводство")
				ИЛИ ТипЗнч(ЭлРасшифровки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				ВыбранныйЗаказ = ЭлРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ВыбранныйЗаказ <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", ВыбранныйЗаказ);
		Если ЗначениеЗаполнено(Дата) Тогда
			ПараметрыОткрытия.Вставить("ДатаКалендаря", Дата);
		КонецЕсли;
		ПараметрыОткрытия.Вставить("КратностьДня", КратностьДня);
		ПараметрыОткрытия.Вставить("ОграничениеВремениПо", ОграничениеВремениПо);
		ПараметрыОткрытия.Вставить("ОграничениеВремениС", ОграничениеВремениС);
		ПараметрыОткрытия.Вставить("ОтображатьЗаказНаряды", ОтображатьЗаказНаряды);
		ПараметрыОткрытия.Вставить("ОтображатьЗаказыНаПроизводство", ОтображатьЗаказыНаПроизводство);
		
		Если ТипЗнч(ВыбранныйЗаказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ФормаЗаявки", ПараметрыОткрытия, Элементы.Список,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОткрытьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаявки", ПараметрыОткрытия, Элементы.Список,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДиаграммаГантаРесурсовОбработкаРасшифровки()

#КонецОбласти

#Область НастройкиФормы

// Процедура сохраняет настройки формы.
//
&НаСервере
Процедура СохранитьНастройкиФормы()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("РасписаниеРаботПереключатель", РасписаниеРаботПереключатель);
	
	СтруктураНастроек.Вставить("ОграничениеВремениС", ОграничениеВремениС);
	СтруктураНастроек.Вставить("ОграничениеВремениПо", ОграничениеВремениПо);
	
	СтруктураНастроек.Вставить("КратностьДня", КратностьДня);
	
	СтруктураНастроек.Вставить("ВидПланГрафикаПереключатель", ВидПланГрафикаПереключатель);
	СтруктураНастроек.Вставить("ВидКалендаряПереключатель", ВидКалендаряПереключатель);
	
	СтруктураНастроек.Вставить("ОтборВидРесурса", ОтборВидРесурса);
	СтруктураНастроек.Вставить("ОтборКлючевойРесурс", ОтборКлючевойРесурс);
	СтруктураНастроек.Вставить("ОтборКонтрагент", ОтборКонтрагент);
	СтруктураНастроек.Вставить("ОтборОтветственный", ОтборОтветственный);
	СтруктураНастроек.Вставить("ОтображатьЗаказНаряды", ОтображатьЗаказНаряды);
	СтруктураНастроек.Вставить("ОтображатьЗаказыНаПроизводство", ОтображатьЗаказыНаПроизводство);
	
	СтруктураНастроек.Вставить("ТекущаяСтраницаПланировщика", Элементы.Тело.ТекущаяСтраница.Имя);
	
	Если ТолькоРаботы Тогда
		ХранилищеНастроекДанныхФорм.Сохранить("ПланировщикРабот", "СтруктураНастроек", СтруктураНастроек);
	Иначе
		ХранилищеНастроекДанныхФорм.Сохранить("ПланировщикПроизводство", "СтруктураНастроек", СтруктураНастроек);
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Сохранить("Планировщик", "СтруктураНастроек", Неопределено);
	
КонецПроцедуры // СохранитьНастройкиФормы()

// Процедура загружает настройки формы.
//
&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("Планировщик", "СтруктураНастроек");
	Если СтруктураНастроек = Неопределено Тогда
		
		Если ТолькоРаботы Тогда
			СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ПланировщикРабот", "СтруктураНастроек");
		Иначе
			СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ПланировщикПроизводство", "СтруктураНастроек");
		КонецЕсли;
		
	КонецЕсли;
		
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("РасписаниеРаботПереключатель") Тогда
			РасписаниеРаботПереключатель = СтруктураНастроек.РасписаниеРаботПереключатель;
		Иначе
			РасписаниеРаботПереключатель = "День";
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ОграничениеВремениС") Тогда
			ОграничениеВремениС = СтруктураНастроек.ОграничениеВремениС;
		Иначе
			ОграничениеВремениС = '00010101090000';
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ОграничениеВремениПо") Тогда
			ОграничениеВремениПо = СтруктураНастроек.ОграничениеВремениПо;
		Иначе
			ОграничениеВремениПо = '00010101210000';
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КратностьДня") Тогда
			КратностьДня = СтруктураНастроек.КратностьДня;
		Иначе
			КратностьДня = 30;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТекущаяСтраницаПланировщика") Тогда
			Элементы.Тело.ТекущаяСтраница = Элементы[СтруктураНастроек.ТекущаяСтраницаПланировщика];
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВидПланГрафикаПереключатель") Тогда
			
			ВидПланГрафикаПереключатель = СтруктураНастроек.ВидПланГрафикаПереключатель;
			
			Если ВидПланГрафикаПереключатель = "Список" Тогда
				Элементы.ГруппаРедактированияСпискаИДиаграммы.ТекущаяСтраница = Элементы.КомандыСписка;
				Элементы.СписокИДиаграмма.ТекущаяСтраница = Элементы.СписокПланГрафик;
			Иначе
				Элементы.ГруппаРедактированияСпискаИДиаграммы.ТекущаяСтраница = Элементы.КомандыДиаграммыПланГрафика;
				Элементы.СписокИДиаграмма.ТекущаяСтраница = Элементы.ДиаграммаПланГрафик;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВидКалендаряПереключатель") Тогда
			
			ВидКалендаряПереключатель = СтруктураНастроек.ВидКалендаряПереключатель;
			
			Если ВидКалендаряПереключатель = "Календарь" Тогда
				Элементы.ГруппаРедактированияКалендаряИДиаграммы.ТекущаяСтраница = Элементы.КомандыКалендаря;
				Элементы.КалендарьИДиаграмма.ТекущаяСтраница = Элементы.КалендарьРесурсы;
			Иначе
				Элементы.ГруппаРедактированияКалендаряИДиаграммы.ТекущаяСтраница = Элементы.КомандыДиаграммыРесурсов;
				Элементы.КалендарьИДиаграмма.ТекущаяСтраница = Элементы.ДиаграммаРесурсы;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ОтборКонтрагент") Тогда
			ОтборКонтрагент = СтруктураНастроек.ОтборКонтрагент;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ОтборКлючевойРесурс") Тогда
			ОтборКлючевойРесурс = СтруктураНастроек.ОтборКлючевойРесурс;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ОтборВидРесурса") Тогда
			ОтборВидРесурса = СтруктураНастроек.ОтборВидРесурса;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ОтборОтветственный") Тогда
			ОтборОтветственный = СтруктураНастроек.ОтборОтветственный;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ОтображатьЗаказНаряды") Тогда
			ОтображатьЗаказНаряды = СтруктураНастроек.ОтображатьЗаказНаряды;
		ИначеЕсли ТолькоРаботы Тогда
			ОтображатьЗаказНаряды = Истина;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ОтображатьЗаказыНаПроизводство") Тогда
			ОтображатьЗаказыНаПроизводство = СтруктураНастроек.ОтображатьЗаказыНаПроизводство;
		ИначеЕсли НЕ ТолькоРаботы Тогда
			ОтображатьЗаказыНаПроизводство = Истина;
		КонецЕсли;
		
	Иначе
		
		РасписаниеРаботПереключатель = "День";
		
		ОграничениеВремениС = '00010101090000';
		ОграничениеВремениПо = '00010101210000';
		
		КратностьДня = 30;
		
		Если ТолькоРаботы Тогда
			ОтображатьЗаказНаряды = Истина;
		Иначе
			ОтображатьЗаказыНаПроизводство = Истина;
		КонецЕсли;
		
		Элементы.Тело.ТекущаяСтраница = Элементы.ПанельПланГрафик;
		
		ВидПланГрафикаПереключатель = "Список";
		ВидКалендаряПереключатель = "Календарь";
		
		Элементы.ГруппаРедактированияСпискаИДиаграммы.ТекущаяСтраница = Элементы.КомандыСписка;
		Элементы.СписокИДиаграмма.ТекущаяСтраница = Элементы.СписокПланГрафик;
		Элементы.ГруппаРедактированияКалендаряИДиаграммы.ТекущаяСтраница = Элементы.КомандыКалендаря;
		Элементы.КалендарьИДиаграмма.ТекущаяСтраница = Элементы.КалендарьРесурсы;
		
		ОбновитьСписокПланГрафика();
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиФормы()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Процедура управляет доступностью элементов формы.
//
&НаКлиенте
Процедура УстановитьДоступностьЭлементовНаФорме()
	
	Элементы.ДобавитьЗаказНарядСписок.Доступность = ОтображатьЗаказНаряды;
	Элементы.ДобавитьЗаказНаПроизводствоСписок.Доступность = ОтображатьЗаказыНаПроизводство;
	
	Элементы.КМДобавитьЗаказНаряд.Доступность = ОтображатьЗаказНаряды;
	Элементы.КМДобавитьЗаказНаПроизводство.Доступность = ОтображатьЗаказыНаПроизводство;
	
	Элементы.ДобавитьЗаказНарядДиаграммаПланГрафик.Доступность = ОтображатьЗаказНаряды;
	Элементы.ДобавитьЗаказНаПроизводствоДиаграммаПланГрафик.Доступность = ОтображатьЗаказыНаПроизводство;
	
	Элементы.РесурсыДобавитьЗаказНаряд.Доступность = ОтображатьЗаказНаряды;
	Элементы.РесурсыДобавитьЗаказНаПроизводство.Доступность = ОтображатьЗаказыНаПроизводство;
	
	Элементы.РесурсыДобавитьЗаказНарядДиаграмма.Доступность = ОтображатьЗаказНаряды;
	Элементы.РесурсыДобавитьЗаказНаПроизводствоДиаграмма.Доступность = ОтображатьЗаказыНаПроизводство;
	
	Элементы.КМДобавитьЗаказНарядЗР.Доступность = ОтображатьЗаказНаряды;
	Элементы.КМДобавитьЗаказНаПроизводствоЗР.Доступность = ОтображатьЗаказыНаПроизводство;
	
КонецПроцедуры // УстановитьДоступностьЭлементовНаФорме()

// Процедура управляет видимостью элементов формы.
//
&НаСервере
Процедура УстановитьВидимостьЭлементовНаФорме()
	
	Если ОтображатьЗаказНаряды И ОтображатьЗаказыНаПроизводство Тогда
		
		Элементы.ГруппаДобавить.Видимость = Истина;
		Элементы.ГруппаДобавитьДиаграммаПланГрафик.Видимость = Истина;
		
		Элементы.РесурсыГруппаДобавить.Видимость = Истина;
		Элементы.РесурсыГруппаДобавитьДиаграмма.Видимость = Истина;
		
		Элементы.СоздатьЗаказНарядСписок.Видимость = Ложь;
		Элементы.СоздатьЗаказНаПроизводствоСписок.Видимость = Ложь;
		
		Элементы.КМГруппаДобавить.Видимость = Истина;
		
		Элементы.КМСоздатьЗаказНаряд.Видимость = Ложь;
		Элементы.КМСоздатьЗаказНаПроизводство.Видимость = Ложь;
		
		Элементы.СоздатьЗаказНарядДиаграммаПланГрафик.Видимость = Ложь;
		Элементы.СоздатьЗаказНаПроизводствоДиаграммаПланГрафик.Видимость = Ложь;
		
		Элементы.РесурсыСоздатьЗаказНаряд.Видимость = Ложь;
		Элементы.РесурсыСоздатьЗаказНаПроизводство.Видимость = Ложь;
		
		Элементы.КМГруппаДобавитьЗР.Видимость = Истина;
		
		Элементы.КМСоздатьЗаказНарядЗР.Видимость = Ложь;
		Элементы.КМСоздатьЗаказНаПроизводствоЗР.Видимость = Ложь;
		
		Элементы.РесурсыСоздатьЗаказНарядДиаграмма.Видимость = Ложь;
		Элементы.РесурсыСоздатьЗаказНаПроизводствоДиаграмма.Видимость = Ложь;
		
	ИначеЕсли ОтображатьЗаказНаряды Тогда
		
		Элементы.ГруппаДобавить.Видимость = Ложь;
		Элементы.ГруппаДобавитьДиаграммаПланГрафик.Видимость = Ложь;
		
		Элементы.РесурсыГруппаДобавить.Видимость = Ложь;
		Элементы.РесурсыГруппаДобавитьДиаграмма.Видимость = Ложь;
		
		Элементы.СоздатьЗаказНарядСписок.Видимость = Истина;
		Элементы.СоздатьЗаказНаПроизводствоСписок.Видимость = Ложь;
		
		Элементы.КМГруппаДобавить.Видимость = Ложь;
		
		Элементы.КМСоздатьЗаказНаряд.Видимость = Истина;
		Элементы.КМСоздатьЗаказНаПроизводство.Видимость = Ложь;
		
		Элементы.СоздатьЗаказНарядДиаграммаПланГрафик.Видимость = Истина;
		Элементы.СоздатьЗаказНаПроизводствоДиаграммаПланГрафик.Видимость = Ложь;
		
		Элементы.РесурсыСоздатьЗаказНаряд.Видимость = Истина;
		Элементы.РесурсыСоздатьЗаказНаПроизводство.Видимость = Ложь;
		
		Элементы.КМГруппаДобавитьЗР.Видимость = Ложь;
		
		Элементы.КМСоздатьЗаказНарядЗР.Видимость = Истина;
		Элементы.КМСоздатьЗаказНаПроизводствоЗР.Видимость = Ложь;
		
		Элементы.РесурсыСоздатьЗаказНарядДиаграмма.Видимость = Истина;
		Элементы.РесурсыСоздатьЗаказНаПроизводствоДиаграмма.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаДобавить.Видимость = Ложь;
		Элементы.ГруппаДобавитьДиаграммаПланГрафик.Видимость = Ложь;
		
		Элементы.РесурсыГруппаДобавить.Видимость = Ложь;
		Элементы.РесурсыГруппаДобавитьДиаграмма.Видимость = Ложь;
		
		Элементы.СоздатьЗаказНарядСписок.Видимость = Ложь;
		Элементы.СоздатьЗаказНаПроизводствоСписок.Видимость = Истина;
		
		Элементы.КМГруппаДобавить.Видимость = Ложь;
		
		Элементы.КМСоздатьЗаказНаряд.Видимость = Ложь;
		Элементы.КМСоздатьЗаказНаПроизводство.Видимость = Истина;
		
		Элементы.СоздатьЗаказНарядДиаграммаПланГрафик.Видимость = Ложь;
		Элементы.СоздатьЗаказНаПроизводствоДиаграммаПланГрафик.Видимость = Истина;
		
		Элементы.РесурсыСоздатьЗаказНаряд.Видимость = Ложь;
		Элементы.РесурсыСоздатьЗаказНаПроизводство.Видимость = Истина;
		
		Элементы.КМГруппаДобавитьЗР.Видимость = Ложь;
		
		Элементы.КМСоздатьЗаказНарядЗР.Видимость = Ложь;
		Элементы.КМСоздатьЗаказНаПроизводствоЗР.Видимость = Истина;
		
		Элементы.РесурсыСоздатьЗаказНарядДиаграмма.Видимость = Ложь;
		Элементы.РесурсыСоздатьЗаказНаПроизводствоДиаграмма.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭлементовНаФорме()

&НаСервере
Процедура УстановитьУсловноеОформлениеПоЦветамСостоянийСервер()
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеПоЦветамСостояний(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление,
		Метаданные.Справочники.СостоянияЗаказНарядов.ПолноеИмя()
	);
	
	СостоянияЗаказов.УстановитьУсловноеОформлениеПоЦветамСостояний(
		Список.КомпоновщикНастроек.Настройки.УсловноеОформление,
		Метаданные.Справочники.СостоянияЗаказовНаПроизводство.ПолноеИмя()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	ОбновитьПанельКонтактнойИнформацииСервер();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПанельКонтактнойИнформации

// УНФ.ПанельКонтактнойИнформации
&НаСервере
Процедура ОбновитьПанельКонтактнойИнформацииСервер()
	
	КонтактнаяИнформацияПанельУНФ.ОбновитьДанныеПанели(ЭтотОбъект, ТекущийКонтрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(Элемент)
	
	КонтактнаяИнформацияПанельУНФКлиент.ДанныеПанелиКонтактнойИнформацииПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПанелиКонтактнойИнформацииВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияПанельУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец УНФ.ПанельКонтактнойИнформации

#КонецОбласти
