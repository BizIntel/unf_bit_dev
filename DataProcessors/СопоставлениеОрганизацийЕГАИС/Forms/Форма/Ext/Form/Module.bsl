
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьПолнотекстовыйПоиск = ПолучитьФункциональнуюОпцию("ИспользоватьПолнотекстовыйПоиск");
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
			
			ИндексПолнотекстовогоПоискаАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
			
			ИсторияПоиска = ХранилищеОбщихНастроек.Загрузить("ИсторияПоискаКонтрагентов");
			Если ИсторияПоиска <> Неопределено Тогда
				Элементы.СтрокаПоискаКонтрагенты.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
			КонецЕсли;
			
			ИсторияПоиска = ХранилищеОбщихНастроек.Загрузить("ИсторияПоискаОрганизацийЕГАИС");
			Если ИсторияПоиска <> Неопределено Тогда
				Элементы.СтрокаПоискаОрганизацииЕГАИС.СписокВыбора.ЗагрузитьЗначения(ИсторияПоиска);
			КонецЕсли;
			
		Иначе
			
			Элементы.СтрокаПоискаКонтрагенты.Видимость = Ложь;
			Элементы.СтрокаПоискаОрганизацииЕГАИС.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВосстановитьНастройкиНаСервере();
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		Если СтруктураДанных.Свойство("ОрганизацииЕГАИС") Тогда
			УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(СписокОрганизацийЕГАИС, "Ссылка", СтруктураДанных.ОрганизацииЕГАИС, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьОтборПоСвойствам Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаКонтрагентыОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск("Контрагенты", СписокКонтрагентов, СтрокаПоискаКонтрагенты);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаКонтрагентыПриИзменении(Элемент)
	
	ПрименитьПоиск("Контрагенты", СписокКонтрагентов, СтрокаПоискаКонтрагенты);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаКонтрагентыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СпискиВыбораКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОрганизацииЕГАИСОчистка(Элемент, СтандартнаяОбработка)
	
	ПрименитьПоиск("ОрганизацииЕГАИС", СписокОрганизацийЕГАИС, СтрокаПоискаОрганизацииЕГАИС);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОрганизацииЕГАИСПриИзменении(Элемент)
	
	ПрименитьПоиск("ОрганизацииЕГАИС", СписокОрганизацийЕГАИС, СтрокаПоискаОрганизацииЕГАИС);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОрганизацииЕГАИСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СпискиВыбораКлиент.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИННПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборКонтрагентов", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКПППриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборКонтрагентов", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораСоответствийОрганизацииЕГАИСПриИзменении(Элемент)
	
	УстановитьОтборПоСоответствиюОрганизацииЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораСоответствийКонтрагентыПриИзменении(Элемент)
	
	УстановитьОтборПоСоответствиюКонтрагенты();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСвойствамПриИзменении(Элемент)
	
	УстановитьВидимостьСвойствОтбора();
	
	УстановитьОтборКонтрагентовПоСвойствамОрганизацииЕГАИС();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура СписокОрганизацийЕГАИСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Контрагент.Пустая() Тогда
		Элементы.СписокКонтрагентов.ТекущаяСтрока = Элемент.ТекущиеДанные.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.ЕстьСоответствие Тогда
		СвязанныеОрганизацииЕГАИС = ПолучитьСписокСвязанныхОрганизацийЕГАИС(Элемент.ТекущиеДанные.Ссылка);
		
		Если СвязанныеОрганизацииЕГАИС.Количество() > 0 Тогда
			Элементы.СписокОрганизацийЕГАИС.ВыделенныеСтроки.Очистить();
			Элементы.СписокОрганизацийЕГАИС.ТекущаяСтрока = СвязанныеОрганизацииЕГАИС[0];
			
			Для каждого ОрганизацияЕГАИС Из СвязанныеОрганизацииЕГАИС Цикл
				Элементы.СписокОрганизацийЕГАИС.ВыделенныеСтроки.Добавить(ОрганизацияЕГАИС);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийЕГАИСПриАктивизацииСтроки(Элемент)
	
	Если ИспользоватьОтборПоСвойствам Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтборКонтрагентов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСоответствие(Команда)
	
	Если Элементы.СписокОрганизацийЕГАИС.ТекущиеДанные = Неопределено 
		ИЛИ Элементы.СписокКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ ПроверитьВозможностьУстановкиСоответствия(Элементы.СписокОрганизацийЕГАИС.ТекущиеДанные.Ссылка, Элементы.СписокКонтрагентов.ТекущиеДанные.Ссылка, ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОрганизацияЕГАИС", Элементы.СписокОрганизацийЕГАИС.ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("Контрагент", Элементы.СписокКонтрагентов.ТекущиеДанные.Ссылка);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("УстановитьСоответствие_Завершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.СопоставлениеОрганизацийЕГАИС.Форма.ФормаСопоставленияКонтрагентов", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствие_Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Истина Тогда
		Элементы.СписокОрганизацийЕГАИС.Обновить();
		Элементы.СписокКонтрагентов.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСоответствие(Команда)
	
	МассивЭлементов = Новый Массив;
	
	Для каждого ОрганизацияЕГАИС Из Элементы.СписокОрганизацийЕГАИС.ВыделенныеСтроки Цикл
	
		ДанныеСтроки = Элементы.СписокОрганизацийЕГАИС.ДанныеСтроки(ОрганизацияЕГАИС);
		Если НЕ ДанныеСтроки.Контрагент.Пустая() Тогда
			МассивЭлементов.Добавить(ОрганизацияЕГАИС);
		КонецЕсли;
	
	КонецЦикла;
	
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресМассиваОрганизацийЕГАИС = ПоместитьВоВременноеХранилище(МассивЭлементов);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОтменитьСоответствие_Завершение", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеПриЗавершении, НСтр("ru = 'Отменить связь выбранных организаций?'"), РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСоответствие_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтменитьСоответствие", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	МассивЭлементов = Элементы.СписокОрганизацийЕГАИС.ВыделенныеСтроки;
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ ПроверитьВозможностьСозданияКонтрагентов(МассивЭлементов, ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("СоздатьКонтрагентов_Подтверждение", ЭтотОбъект, МассивЭлементов);
	ПоказатьВопрос(ОповещениеПриЗавершении, НСтр("ru = 'Создать контрагентов по выделенным строкам организаций ЕГАИС?'"), РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентов_Подтверждение(РезультатВопроса, ВыделенныеСтроки) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	АдресСпискаОрганизацийЕГАИС = ПоместитьВоВременноеХранилище(ВыделенныеСтроки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСпискаОрганизацийЕГАИС", АдресСпискаОрганизацийЕГАИС);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("СоздатьКонтрагентов_Завершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.СопоставлениеОрганизацийЕГАИС.Форма.ФормаСозданияКонтрагентов", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентов_Завершение(ПараметрыСозданияКонтрагентов, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыСозданияКонтрагентов) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	АдресПараметровСозданияКонтрагентов = ПоместитьВоВременноеХранилище(ПараметрыСозданияКонтрагентов);
	
	ПодключитьОбработчикОжидания("Подключаемый_СоздатьКонтрагентов", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_СоздатьКонтрагентов()
	
	СозданныеКонтрагенты = СоздатьКонтрагентовНаСервере(АдресПараметровСозданияКонтрагентов);
	
	Элементы.СписокОрганизацийЕГАИС.Обновить();
	Элементы.СписокКонтрагентов.Обновить();
	
	Элементы.СписокКонтрагентов.ВыделенныеСтроки.Очистить();
	
	Для каждого Контрагент Из СозданныеКонтрагенты Цикл
		Элементы.СписокКонтрагентов.ВыделенныеСтроки.Добавить(Контрагент);
	КонецЦикла;
	
	Если СозданныеКонтрагенты.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Создан контрагент %Наименование%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", СокрЛП(СозданныеКонтрагенты[0]));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СозданныеКонтрагенты[0]);
	Иначе
		ТекстСообщения = НСтр("ru = 'Создано %Количество% контрагентов.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", СозданныеКонтрагенты.Количество());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтменитьСоответствие()
	
	ОтменитьСоответствиеНаСервере(ПолучитьИзВременногоХранилища(АдресМассиваОрганизацийЕГАИС));
	
	Элементы.СписокОрганизацийЕГАИС.Обновить();
	Элементы.СписокКонтрагентов.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКонтрагентовНаСервере(АдресПараметровСозданияКонтрагентов)
	
	СозданныеКонтрагенты = Новый Массив;
	
	ПараметрыСозданияКонтрагентов = ПолучитьИзВременногоХранилища(АдресПараметровСозданияКонтрагентов);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ОрганизацияЕГАИС Из ПараметрыСозданияКонтрагентов.МассивЭлементов Цикл
		
		РеквизитыОрганизацииЕГАИС = ПолучитьРеквизитыОрганизацииЕГАИС(ОрганизацияЕГАИС);
		
		КонтрагентОбъект  = Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(КонтрагентОбъект, РеквизитыОрганизацииЕГАИС);
		
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		КонтрагентОбъект.Поставщик = Истина;
		КонтрагентОбъект.Родитель = ПараметрыСозданияКонтрагентов.Родитель;
		КонтрагентОбъект.ВидКонтрагента = ПараметрыСозданияКонтрагентов.ВидКонтрагента;
		
		Если НЕ ПустаяСтрока(РеквизитыОрганизацииЕГАИС.ПредставлениеАдреса) Тогда
			СтрокаКИ = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			СтрокаКИ.Представление = СокрЛП(РеквизитыОрганизацииЕГАИС.ПредставлениеАдреса);
			СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Вид);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.Ответственный) Тогда
			ОсновнойОтветственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				Пользователи.ТекущийПользователь(),
				"ОсновнойОтветственный"
			);
			КонтрагентОбъект.Ответственный = ОсновнойОтветственный;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.СчетУчетаРасчетовСПокупателем) Тогда
			КонтрагентОбъект.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.СчетУчетаАвансовПокупателя) Тогда
			КонтрагентОбъект.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.СчетУчетаРасчетовСПоставщиком) Тогда
			КонтрагентОбъект.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.СчетУчетаАвансовПоставщику) Тогда
			КонтрагентОбъект.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		КонецЕсли;
		КонтрагентОбъект.ВестиРасчетыПоДоговорам = Истина;
		КонтрагентОбъект.ВестиРасчетыПоДокументам = Истина;
		КонтрагентОбъект.ВестиРасчетыПоЗаказам = Истина;
		КонтрагентОбъект.ВестиУчетОплатыПоСчетам = Истина;
		
		КонтрагентОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
		КонтрагентОбъект.ГруппаДоступа = Справочники.ГруппыДоступаКонтрагентов.ГруппаДоступаПоУмолчанию();
		
		КонтрагентОбъект.Записать();
		
		Запись = РегистрыСведений.СоответствиеОрганизацийЕГАИС.СоздатьМенеджерЗаписи();
		Запись.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
		Запись.Контрагент = КонтрагентОбъект.Ссылка;
		Запись.Записать();
		
		СозданныеКонтрагенты.Добавить(КонтрагентОбъект.Ссылка);
		
	КонецЦикла;
	
	Возврат СозданныеКонтрагенты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыОрганизацииЕГАИС(ОрганизацияЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Наименование,
	|	КлассификаторОрганизацийЕГАИС.НаименованиеПолное,
	|	КлассификаторОрганизацийЕГАИС.ИНН,
	|	КлассификаторОрганизацийЕГАИС.КПП,
	|	КлассификаторОрганизацийЕГАИС.ПредставлениеАдреса
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьСоответствиеНаСервере(МассивОрганизацийЕГАИС)
	
	Для каждого ОрганизацияЕГАИС Из МассивОрганизацийЕГАИС Цикл
	
		Запись = РегистрыСведений.СоответствиеОрганизацийЕГАИС.СоздатьМенеджерЗаписи();
		Запись.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
		Запись.Прочитать();
		
		Если Запись.Выбран() Тогда
			Запись.Удалить();
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьУстановкиСоответствия(ОрганизацияЕГАИС, Контрагент, ТекстОшибки)
	
	Если Контрагент.ЭтоГруппа Тогда
		ТекстОшибки = НСтр("ru = 'Связка организации ЕГАИС с группой контрагентов невозможна.'");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС
	|ИЗ
	|	РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
	|ГДЕ
	|	СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И СоответствиеОрганизацийЕГАИС.Контрагент <> &Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Выбранная организация уже имеет связку.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьСозданияКонтрагентов(МассивОрганизацийЕГАИС, ТекстОшибки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизацийЕГАИС", МассивОрганизацийЕГАИС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
	|		ПО КлассификаторОрганизацийЕГАИС.Ссылка = СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка В(&МассивОрганизацийЕГАИС)
	|	И СоответствиеОрганизацийЕГАИС.Контрагент ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если МассивОрганизацийЕГАИС.Количество() > 1 Тогда
			ТекстОшибки = НСтр("ru = 'Все выбранные организации уже имеют связку.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Выбранная организация уже имеет связку.'");
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСвязанныхОрганизацийЕГАИС(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС
	|ИЗ
	|	РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
	|ГДЕ
	|	СоответствиеОрганизацийЕГАИС.Контрагент = &Контрагент";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОрганизацияЕГАИС");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолнотекстовыйПоискНаСервереБезКонтекста(ОбластьПоиска, СтрокаПоиска, РезультатПоиска)
	
	ОписаниеОшибки = "";
	
	Если ОбластьПоиска = "Контрагенты" Тогда
		МетаданныеСправочника = Метаданные.Справочники.Контрагенты;
	Иначе
		МетаданныеСправочника = Метаданные.Справочники.КлассификаторОрганизацийЕГАИС;
	КонецЕсли;
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить(ОбластьПоиска, Новый Массив);
	
	РазмерПорции = 200;
	
	ОбластьПоискаМассив = Новый Массив;
	ОбластьПоискаМассив.Добавить(МетаданныеСправочника);
	
	СтрокаПоискаРасширенная = СтрЗаменить(СтрокаПоиска, """", "");
	СтрокаПоискаРасширенная = ?(ПустаяСтрока(СтрокаПоискаРасширенная), СтрокаПоискаРасширенная, СтрокаПоискаРасширенная + "*");
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоискаРасширенная, РазмерПорции);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластьПоискаМассив;
	СписокПоиска.ПерваяЧасть();
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		ОписаниеОшибки = НСтр("ru = 'Слишком много результатов. Уточните запрос.'");
		ПоискНеУдачный = Истина;
		Возврат ПоискНеУдачный;
	КонецЕсли;
	
	КоличествоНайденныхЭлементов = СписокПоиска.ПолноеКоличество();
	Если КоличествоНайденныхЭлементов = 0 Тогда
		ОписаниеОшибки = НСтр("ru = 'Ничего не найдено'");
		ПоискНеУдачный = Истина;
		Возврат ПоискНеУдачный;
	КонецЕсли;
	
	// Обработка данных
	НачальнаяПозиция    = 0;
	КонечнаяПозиция     = ?(КоличествоНайденныхЭлементов > РазмерПорции, РазмерПорции, КоличествоНайденныхЭлементов) - 1;
	ЕстьСледующаяПорция = Истина;

	Пока ЕстьСледующаяПорция Цикл
		
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			
			Если Элемент.Метаданные = МетаданныеСправочника Тогда
				РезультатПоиска[ОбластьПоиска].Добавить(Элемент.Значение);
			Иначе
				ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
			КонецЕсли;
			
		КонецЦикла;
		
		НачальнаяПозиция    = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоНайденныхЭлементов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			
			КонечнаяПозиция = ?(КоличествоНайденныхЭлементов > НачальнаяПозиция + РазмерПорции,
			                    РазмерПорции,
			                    КоличествоНайденныхЭлементов - НачальнаяПозиция
			                    ) - 1;
			СписокПоиска.СледующаяЧасть();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоискНеУдачный = ЗначениеЗаполнено(ОписаниеОшибки);
	
	Возврат ПоискНеУдачный;
	
КонецФункции

&НаКлиенте
Процедура ПоискПоПодстрокеНаКлиенте(ОбластьПоиска, Список, СтрокаПоиска)
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска);
	
	ГруппаОтбора = УправлениеНебольшойФирмойКлиент.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Наименование",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"Код",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"НаименованиеПолное",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ИНН",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"КПП",
		СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	Если ОбластьПоиска = "ОрганизацииЕГАИС" Тогда
		УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбора,
			"ПредставлениеАдреса",
			СтрокаПоиска,
			Использование, ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
			
	СпискиВыбораКлиент.ОбновитьСписокВыбора(Элементы["СтрокаПоиска" + ОбластьПоиска].СписокВыбора, СтрокаПоиска);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИндексПолнотекстовогоПоиска()
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИндексаПолнотекстовогоПоискаДанных()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	ОбновитьИндексПолнотекстовогоПоиска();
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
	
	ИндексПолнотекстовогоПоискаАктуален = Истина;
	
	Если ТекущаяОбластьПоиска = "Контрагенты" Тогда
		Список = СписокКонтрагентов;
		СтрокаПоиска = СтрокаПоискаКонтрагенты;
	Иначе
		Список = СписокОрганизацийЕГАИС;
		СтрокаПоиска = СтрокаПоискаОрганизацииЕГАИС;
	КонецЕсли;
	
	ПолнотекстовыйПоискНаКлиенте(ТекущаяОбластьПоиска, Список, СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоискНаКлиенте(ОбластьПоиска, Список, СтрокаПоиска)
	
	Если Не ИндексПолнотекстовогоПоискаАктуален 
		И ИнформационнаяБазаФайловая Тогда
		
		ТекущаяОбластьПоиска = ОбластьПоиска;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыполнитьПолнотекстовыйПоискНаКлиенте", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"),
			РежимДиалогаВопрос.ДаНет); 
		
	Иначе
		
		ПолнотекстовыйПоискНаКлиенте(ОбластьПоиска, Список, СтрокаПоиска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыполнитьПолнотекстовыйПоискНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновлениеИндексаПолнотекстовогоПоискаДанных",0.2,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПолнотекстовыйПоискНаКлиенте(ОбластьПоиска, Список, СтрокаПоиска)
		
	ГруппаОтбора = УправлениеНебольшойФирмойКлиент.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаПоиска)) Тогда
		
		ПоискНеУдачный = Ложь;
		
		УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
			ГруппаОтбора,
			"Ссылка",
			Неопределено,
			Ложь, ВидСравненияКомпоновкиДанных.ВСписке);
						
	Иначе
		
		РезультатПоиска = Неопределено;
		ПоискНеУдачный = ПолнотекстовыйПоискНаСервереБезКонтекста(ОбластьПоиска, СтрокаПоиска, РезультатПоиска);
		
		Если Не ПоискНеУдачный Тогда
			
			Использование = РезультатПоиска[ОбластьПоиска].Количество() > 0;
			
			УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
				ГруппаОтбора,
				"Ссылка",
				?(Использование, РезультатПоиска[ОбластьПоиска], Неопределено),
				Использование, ВидСравненияКомпоновкиДанных.ВСписке);
						
			СпискиВыбораКлиент.ОбновитьСписокВыбора(Элементы["СтрокаПоиска" + ОбластьПоиска].СписокВыбора, СтрокаПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтотОбъект["ПоискНеУдачный" + ОбластьПоиска] = ПоискНеУдачный;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск(ОбластьПоиска, Список, СтрокаПоиска)
	
	Если ИспользоватьПолнотекстовыйПоиск Тогда
		
		ВыполнитьПолнотекстовыйПоискНаКлиенте(ОбластьПоиска, Список, СтрокаПоиска);
		
	Иначе
		
		ПоискПоПодстрокеНаКлиенте(ОбластьПоиска, Список, СтрокаПоиска);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьОтборКонтрагентов()
	
	УстановитьОтборКонтрагентовПоСвойствамОрганизацииЕГАИС();
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.СписокОрганизацийЕГАИС;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКонтрагентовПоСвойствамОрганизацииЕГАИС()
	
	ТекущиеДанные = Элементы.СписокОрганизацийЕГАИС.ТекущиеДанные;
	
	ИспользованиеОтборов = ИспользоватьОтборПоСвойствам И ТекущиеДанные <> Неопределено;
	
	ГруппаОтбора = УправлениеНебольшойФирмойКлиент.СоздатьГруппуЭлементовОтбора(
		СписокКонтрагентов.Отбор.Элементы,
		"ОтборПоСвойствамОрганизацииЕГАИС",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"ИНН",
		?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ИНН),
		ИспользованиеОтборов И ОтборПоИНН И НЕ ПустаяСтрока(ТекущиеДанные.ИНН), ВидСравненияКомпоновкиДанных.Равно);
		
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора,
		"КПП",
		?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.КПП),
		ИспользованиеОтборов И ОтборПоКПП И НЕ ПустаяСтрока(ТекущиеДанные.КПП), ВидСравненияКомпоновкиДанных.Равно);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСвойствОтбора()
	
	Элементы.ГруппаВидыОтборовПоСвойтвамЕГАИС.Видимость = ИспользоватьОтборПоСвойствам;
	Элементы.ДекорацияОтборПоСвойствам.Видимость = ИспользоватьОтборПоСвойствам;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСвойствОтбораНаСервере()
	
	Элементы.ГруппаВидыОтборовПоСвойтвамЕГАИС.Видимость = ИспользоватьОтборПоСвойствам;
	Элементы.ДекорацияОтборПоСвойствам.Видимость = ИспользоватьОтборПоСвойствам;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСоответствиюОрганизацииЕГАИС()
	
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораСписка(
			СписокОрганизацийЕГАИС,
			"Контрагент",
			ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"),
			НЕ ВариантОтбораСоответствийОрганизацииЕГАИС = "Все", 
			?(ВариантОтбораСоответствийОрганизацииЕГАИС = "Связанные", ВидСравненияКомпоновкиДанных.НеРавно, ВидСравненияКомпоновкиДанных.Равно));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСоответствиюОрганизацииЕГАИСНаСервере()
	
	УправлениеНебольшойФирмойКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокОрганизацийЕГАИС,
			"Контрагент",
			ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"),
			НЕ ВариантОтбораСоответствийОрганизацииЕГАИС = "Все", 
			?(ВариантОтбораСоответствийОрганизацииЕГАИС = "Связанные", ВидСравненияКомпоновкиДанных.НеРавно, ВидСравненияКомпоновкиДанных.Равно));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСоответствиюКонтрагенты()
	
	УправлениеНебольшойФирмойКлиент.ИзменитьЭлементОтбораСписка(
			СписокКонтрагентов,
			"ЕстьСоответствие",
			Истина,
			НЕ ВариантОтбораСоответствийКонтрагенты = "Все", 
			?(ВариантОтбораСоответствийКонтрагенты = "Связанные", ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.НеРавно));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСоответствиюКонтрагентыНаСервере()
	
	УправлениеНебольшойФирмойКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокКонтрагентов,
			"ЕстьСоответствие",
			Истина,
			НЕ ВариантОтбораСоответствийКонтрагенты = "Все", 
			?(ВариантОтбораСоответствийКонтрагенты = "Связанные", ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.НеРавно));
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИсторияПоискаКонтрагентов","ИсторияПоискаКонтрагентов",
		Элементы.СтрокаПоискаКонтрагенты.СписокВыбора.ВыгрузитьЗначения());
		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИсторияПоискаОрганизацийЕГАИС","ИсторияПоискаОрганизацийЕГАИС",
		Элементы.СтрокаПоискаОрганизацииЕГАИС.СписокВыбора.ВыгрузитьЗначения());
	
	Настройки = Новый Структура;
	Настройки.Вставить("ВариантОтбораСоответствийКонтрагенты"     , ВариантОтбораСоответствийКонтрагенты);
	Настройки.Вставить("ВариантОтбораСоответствийОрганизацииЕГАИС", ВариантОтбораСоответствийОрганизацииЕГАИС);
	Настройки.Вставить("ИспользоватьОтборПоСвойствам"             , ИспользоватьОтборПоСвойствам);
	Настройки.Вставить("ОтборПоИНН"                               , ОтборПоИНН);
	Настройки.Вставить("ОтборПоКПП"                               , ОтборПоКПП);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СопоставлениеОрганизацийЕГАИС","СопоставлениеОрганизацийЕГАИС", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиНаСервере()
	
	ВариантОтбораСоответствийОрганизацииЕГАИС = "Все";
	ВариантОтбораСоответствийКонтрагенты = "Все";
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СопоставлениеОрганизацийЕГАИС", "СопоставлениеОрганизацийЕГАИС");
	
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
	КонецЕсли;
	
	УстановитьОтборПоСоответствиюОрганизацииЕГАИСНаСервере();
	УстановитьОтборПоСоответствиюКонтрагентыНаСервере();
	
	УстановитьВидимостьСвойствОтбораНаСервере();
	
КонецПроцедуры

#КонецОбласти
