&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область СлужебныеМетоды

&НаКлиенте
Процедура ПрайсЛистНеактуален()
	
	ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка = БиблиотекаКартинок.ИнтернетПоддержкаПользователейВнимание;
	ОтображениеСостояния.Текст = НСтр("ru = 'Возможно данные прайс-листа изменились. 
		|Рекомендуется повторно сформировать прайс-лист.'");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьОЦенеСуществует(Знач ДанныеРасшифровки, КэшЗначений)
	
	КлючЗаписи = Новый Структура("Период, ВидЦен, Номенклатура, Характеристика");
	
	Если ТипЗнч(ДанныеРасшифровки) <> Тип("Структура") Тогда
		
		ДанныеРасшифровки = Новый Структура;
		
	КонецЕсли;
	
	Если НЕ ДанныеРасшифровки.Свойство("Период", КлючЗаписи.Период) Тогда
		
		КлючЗаписи.Период = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Если НЕ ДанныеРасшифровки.Свойство("ВидЦен", КлючЗаписи.ВидЦен) Тогда
		
		КлючЗаписи.ВидЦен = КэшЗначений.ВидЦен;
		
	КонецЕсли;
	
	Если НЕ ДанныеРасшифровки.Свойство("Номенклатура", КлючЗаписи.Номенклатура) Тогда
		
		КлючЗаписи.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		
	КонецЕсли;
	
	Если НЕ ДанныеРасшифровки.Свойство("Характеристика", КлючЗаписи.Характеристика) Тогда
		
		КлючЗаписи.Характеристика =  Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ЦенообразованиеСервер.ЗаписьОЦенеСуществует(КлючЗаписи);
	
КонецФункции

&НаКлиенте
// Процедура открывает запись реистра.
//
Процедура ОткрытьФормуЗаписиРегистра(ДанныеРасшифровки)
	
	КлючЗаписи = ЗаписьОЦенеСуществует(ДанныеРасшифровки, КэшЗначений);
	
	Если КлючЗаписи.ЗаписьСуществует Тогда
		
		КлючЗаписи.Удалить("ЗаписьСуществует");
		
		ПараметрыМассив = Новый Массив;
		ПараметрыМассив.Добавить(КлючЗаписи);
		
		КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ЦеныНоменклатуры", ПараметрыМассив);
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
		
	Иначе
		
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатуры.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", КлючЗаписи));
		
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФормуЗаписиРегистра()

&НаКлиенте
Процедура ОбработатьРасшифровкуЯчейки(ДанныеРасшифровки)
	
	Если ДанныеРасшифровки.Свойство("ВидЦен")
		И ДанныеРасшифровки.Свойство("Номенклатура") Тогда
		
		ОткрытьФормуЗаписиРегистра(ДанныеРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюЗаписьОЦене(ДанныеРасшифровки)
	
	ОткрытьФормуЗаписиРегистра(ДанныеРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаписьОЦене(ДанныеРасшифровки)
	
	ОткрытьФормуЗаписиРегистра(ДанныеРасшифровки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьЗаписьОЦене(ДанныеРасшифровки)
	
	Если ТипЗнч(ДанныеРасшифровки) = Тип("Структура") 
		И ДанныеРасшифровки.Свойство("Номенклатура") Тогда
		
		Характеристика = Неопределено;
		ДанныеРасшифровки.Свойство("Характеристика", Характеристика);
		ДобавитьИсключение(ДанныеРасшифровки.Номенклатура, Характеристика, ПрайсЛист);
		
		ПрайсЛистНеактуален();
		
	ИначеЕсли ТипЗнч(ДанныеРасшифровки) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ДобавитьИсключение(ДанныеРасшифровки, Неопределено, ПрайсЛист);
		
	Иначе
		
		ТекстСообщения = Нстр("ru ='Для исключения позиции из прайс-листа необходимо указать номенклатуру.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИсключение(Номенклатура, Характеристика, ПрайсЛист)
	
	РегистрыСведений.ИсключенияПрайсЛистов.ДобавитьИсключение(Номенклатура, Характеристика, ПрайсЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияПрайсЛиста()
	
	ОтображениеСостояния = Элементы.ТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФормированиеПрайсЛиста()
	
	РезультатПроверки = ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	
	Если РезультатПроверки.ЗаданиеВыполнено Тогда
		
		//СтандартныеПодсистемы.ОценкаПроизводительности
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(КэшЗначений.УИДЗамера);
		//Конец СтандартныеПодсистемы.ОценкаПроизводительности
		
		ПослеФормированияПрайсЛиста();
		
	Иначе
		
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьФормированиеПрайсЛиста", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПрайсЛистНаКлиенте()
	
	//СтандартныеПодсистемы.ОценкаПроизводительности
	КэшЗначений.УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ФормированиеПрайсЛиста");
	//Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ДокументСформирован = Ложь;
	СформироватьПрайсЛистНаСервере(ДокументСформирован);
	Если ДокументСформирован Тогда
		
		//СтандартныеПодсистемы.ОценкаПроизводительности
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(КэшЗначений.УИДЗамера);
		//Конец СтандартныеПодсистемы.ОценкаПроизводительности
		
		ПослеФормированияПрайсЛиста();
		
	Иначе
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьФормированиеПрайсЛиста", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПрайсЛистНаСервере(ДокументСформирован)
	
	ПараметрыФЗ			= Новый Структура("ПрайсЛист", ПрайсЛист);
	ЗаданиеРезультат	= ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, "Обработки.ФормированиеПрайсЛистов.СформироватьПЛ", ПараметрыФЗ, НСтр("ru = 'Формирование прайс-листа.'"));
	ДокументСформирован = ЗаданиеРезультат.ЗаданиеВыполнено;
	
	Если ДокументСформирован Тогда
		
		Результат = ПолучитьИзВременногоХранилища(ЗаданиеРезультат.АдресХранилища);
		Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
			
			ТабличныйДокумент = Результат;
			
		КонецЕсли;
		
	Иначе
		
		ФоновоеЗаданиеИдентификатор  = ЗаданиеРезультат.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = ЗаданиеРезультат.АдресХранилища;
		
		УправлениеНебольшойФирмойСервер.СостояниеТабличногоДокументаДлительнаяОперация(Элементы.ТабличныйДокумент, НСтр("ru = 'Отчет формируется...'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища)
	
	РезультатПроверки = Новый Структура("ЗаданиеВыполнено, Значение", Ложь, Неопределено);
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		
		РезультатПроверки.ЗаданиеВыполнено	= Истина;
		ТабличныйДокумент					= ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Процедура ИзменитьНастройкуОсновнойФормыПрайсЛистов()
	
	Элементы.ЭтоОсновнаяФормаПрайсЛистов.Пометка = НЕ Элементы.ЭтоОсновнаяФормаПрайсЛистов.Пометка;
	ЗначениеНастройки = Перечисления.ОсновнаяФормаПрайсЛиста[?(Элементы.ЭтоОсновнаяФормаПрайсЛистов.Пометка, "ФормированиеПрайсЛистов", "СписокПрайсЛистов")];
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(ЗначениеНастройки, "ОсновнаяФормаПрайсЛиста");
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПечатныеФормы()
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ПрайсЛист);
	
	ПараметрыСохранения = Новый Структура;
	ПараметрыСохранения.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ОткрытьФорму("ОбщаяФорма.СохранениеПечатнойФормы", ПараметрыСохранения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПечатныеФормыПоПочте()
	
	ОткрытьФорму("ОбщаяФорма.ВыборФорматаВложений", , ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый Массив;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	// сохранение печатных форм
	ПечатнаяФорма = ТабличныйДокумент;
	
	Если ПечатнаяФорма.ВысотаТаблицы = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
		
		ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы("Price", НастройкиФормата.Расширение, ИспользованныеИменаФайлов);
		ПолноеИмяФайла = УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
		
		ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Представление", ИмяФайла);
			ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
			Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
				ОписаниеФайла.Вставить("Кодировка", "windows-1251");
			КонецЕсли;
			Результат.Добавить(ОписаниеФайла);
		КонецЕсли;
	КонецЦикла;
	
	// если архив подготовлен, записываем и помещаем его во временное хранилище
	Если ЗаписьZipФайла <> Неопределено Тогда
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", Нстр("ru ='Price.zip'"));
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		Результат.Добавить(ОписаниеФайла);
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов)
	
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
		
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
							ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
							1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// если имя уже было ранее использовано, прибавляем счетчик в конце имени
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонИмениФайла,
				ИмяМакета,
				" (" + НомерИспользования + ")",
				Расширение));
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// ожидается, что в папке будут только картинки
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПечатныеФормыВПапку(СписокФайловВоВременномХранилище, Знач Папка = "")
	
	#Если ВебКлиент Тогда
		Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
			ПолучитьФайл(ФайлДляЗаписи.АдресВоВременномХранилище, ФайлДляЗаписи.Представление);
		КонецЦикла;
		Возврат;
	#КонецЕсли
	
	Папка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Папка);
	Для Каждого ФайлДляЗаписи Из СписокФайловВоВременномХранилище Цикл
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлДляЗаписи.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(УникальноеИмяФайла(Папка + ФайлДляЗаписи.Представление));
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Сохранение успешно завершено'"), , НСтр("ru = 'в папку:'") + " " + Папка);
	
КонецПроцедуры

&НаСервере
Функция ПрисоединитьПечатныеФормыКОбъекту(ФайлыВоВременномХранилище, ОбъектДляПрисоединения)
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		
		МодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлы");
		Для Каждого Файл Из ФайлыВоВременномХранилище Цикл
			
			Результат.Добавить(МодульПрисоединенныеФайлы.ДобавитьФайл(ОбъектДляПрисоединения, 
				Файл.Представление, , , , Файл.АдресВоВременномХранилище, , ТекущаяДата()));
				
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УникальноеИмяФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;
	
КонецФункции

&НаСервере
Процедура ОбновитьКэшЗначений()
	
	КэшЗначений.Вставить("Организация", 			ПрайсЛист.Организация);
	КэшЗначений.Вставить("ОрганизацияНаименование", ПрайсЛист.Организация.Наименование);
	КэшЗначений.Вставить("ВыводитьДатуФормирования",ПрайсЛист.ВыводитьДатуФормирования);
	КэшЗначений.Вставить("ДатаФормирования",		ПрайсЛист.ДатаФормирования);
	КэшЗначений.Вставить("ВидЦен",					?(ПрайсЛист.ВидыЦен.Количество()> 0, ПрайсЛист.ВидыЦен[0].ВидЦен, Справочники.ВидыЦен.Оптовая));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуКонтекстногоМеню(ИмяКоманды)
	
	ВыделанныеОбласти = Элементы.ТабличныйДокумент.ПолучитьВыделенныеОбласти();
	Если ВыделанныеОбласти.Количество() > 0 Тогда
		
		ДанныеРасшифровки = ВыделанныеОбласти[0].Расшифровка;
		
		Если ИмяКоманды = "Добавить" Тогда
			
			ДобавитьНовуюЗаписьОЦене(ДанныеРасшифровки);
			
		КонецЕсли;
		
		Если ИмяКоманды = "Изменить"
			И ТипЗнч(ДанныеРасшифровки) = Тип("Структура") Тогда
			
			ИзменитьЗаписьОЦене(ДанныеРасшифровки); // поведение отличается от выбора ячейки в 2 клика!
			
		КонецЕсли;
		
		Если ИмяКоманды = "Исключить" Тогда
			
			ИсключитьЗаписьОЦене(ДанныеРасшифровки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ЭтоОсновнаяФормаПрайсЛистов.Пометка = (УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяФормаПрайсЛиста") = Перечисления.ОсновнаяФормаПрайсЛиста.ФормированиеПрайсЛистов);
	
	Если Параметры.Свойство("ОткрытьОсновнойРабочийПрайсЛист") Тогда
		
		ПрайсЛист = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнойРабочийПрайсЛист");
		
	Иначе
		
		Параметры.Свойство("ПрайсЛист", ПрайсЛист);
		
	КонецЕсли;
	
	АвтоматическиФормироватьОбновлятьПрайсЛист = (ЗначениеЗаполнено(ПрайсЛист) И УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("АвтоматическиФормироватьОбновлятьПрайсЛист"));
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("АвтоматическиФормироватьОбновлятьПрайсЛист", АвтоматическиФормироватьОбновлятьПрайсЛист);
	КэшЗначений.Вставить("УИДЗамера", Неопределено);
	ОбновитьКэшЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ПрайсЛист) Тогда
		
		СформироватьПрайсЛистНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.СохранениеПечатнойФормы") Тогда
		
		Если ВыбранноеЗначение <> Неопределено 
			И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			
			ФайлыВоВременномХранилище = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение);
			Если ВыбранноеЗначение.ВариантСохранения = "СохранитьВПапку" Тогда
				
				СохранитьПечатныеФормыВПапку(ФайлыВоВременномХранилище, ВыбранноеЗначение.ПапкаДляСохранения);
				
			ИначеЕсли ВыбранноеЗначение.ВариантСохранения = "Присоединить" Тогда
				
				ЗаписанныеОбъекты = ПрисоединитьПечатныеФормыКОбъекту(ФайлыВоВременномХранилище, ВыбранноеЗначение.ОбъектДляПрикрепления);
				Если ЗаписанныеОбъекты.Количество() > 0 Тогда
					
					ОповеститьОбИзменении(ТипЗнч(ЗаписанныеОбъекты[0]));
					
				КонецЕсли;
				
				Для Каждого ЗаписанныйОбъект Из ЗаписанныеОбъекты Цикл
					
					Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ЗаписанныйОбъект);
					
				КонецЦикла;
				
				Состояние(НСтр("ru = 'Сохранение успешно завершено.'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборФорматаВложений") Тогда
		
		Если ВыбранноеЗначение <> Неопределено 
			И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			
			СписокВложений = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение);
			
			ПараметрыНовогоПисьма = Новый Структура;
			
			Тема = НСтр("ru ='Прайс-лист '") + ?(ЗначениеЗаполнено(КэшЗначений.Организация), КэшЗначений.ОрганизацияНаименование, "");
			ПараметрыНовогоПисьма.Вставить("Тема", Тема);
			
			Тело = ?(ЗначениеЗаполнено(КэшЗначений.ВыводитьДатуФормирования), Нстр("ru ='Сформирован '") + Формат(КэшЗначений.ДатаФормирования, "ДЛФ=DD"), "");
			ПараметрыНовогоПисьма.Вставить("Текст", Тело);
			
			ПараметрыНовогоПисьма.Вставить("Вложения", СписокВложений);
			
			ДокументыОснования = Новый Массив;
			ДокументыОснования.Добавить(ПрайсЛист);
			ПараметрыНовогоПисьма.Вставить("ДокументыОснования", ДокументыОснования);
			
			РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыНовогоПисьма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаЦена" Тогда
		
		Если КэшЗначений.АвтоматическиФормироватьОбновлятьПрайсЛист Тогда
			
			СформироватьПрайсЛистНаКлиенте();
			
		Иначе
			
			ПрайсЛистНеактуален();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Если Расшифровка.Свойство("ЭтоХарактеристика") Тогда
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", Расшифровка.Характеристика), ЭтаФорма);
			
		Иначе
			
			СтандартнаяОбработка = Ложь;
			ОбработатьРасшифровкуЯчейки(Расшифровка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрайсЛистПриИзменении(Элемент)
	
	ОбновитьКэшЗначений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьПрайсЛистНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоОсновнаяФормаПрайсЛистов(Команда)
	
	ИзменитьНастройкуОсновнойФормыПрайсЛистов();
	
КонецПроцедуры

// Процедура - обработчик команды Сохранить.
//
&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьПечатныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьПечатныеФормыПоПочте();
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	
	ОбработатьКомандуКонтекстногоМеню("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ОбработатьКомандуКонтекстногоМеню("Изменить");
	
КонецПроцедуры

&НаКлиенте
Процедура Исключить(Команда)
	
	ОбработатьКомандуКонтекстногоМеню("Исключить");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключенияПрайсЛиста(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрайсЛист", ПрайсЛист);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.ИсключенияПрайсЛистов.ФормаСписка", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетНеИспользуемаяНоменклатура(Команда)
	
	ОткрытьФорму("Обработка.ФормированиеПрайсЛистов.Форма.ФормаНеИспользуемаяНоменклатура");
	
КонецПроцедуры

#КонецОбласти

