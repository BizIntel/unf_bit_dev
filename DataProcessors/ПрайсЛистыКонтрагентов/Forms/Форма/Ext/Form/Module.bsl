
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// По переданным параметрам формируем структуру отбора
//
// СоответствиеРасшифровок - соответствие полученное из расшифровок
//
Функция ПолучитьСписокВыбораВидаЦенКонтрагента(СоответствиеРасшифровок, КопированиеИзменениеУдаление = ЛОЖЬ)
	
	СписокВыбора = Новый СписокЗначений;
	
	Если ТипЗнч(СоответствиеРасшифровок) = Тип("Соответствие") Тогда
		
		Для каждого ЭлементСоответствия Из СоответствиеРасшифровок Цикл
			
			Если (КопированиеИзменениеУдаление
				И НЕ ТипЗнч(ЭлементСоответствия.Значение) = Тип("Структура"))
				ИЛИ (ТипЗнч(ЭлементСоответствия.Значение) = Тип("Структура")
					И ЭлементСоответствия.Значение.Свойство("Цена")
					И НЕ ЗначениеЗаполнено(ЭлементСоответствия.Значение.Цена)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СписокВыбора.Добавить(ЭлементСоответствия.Ключ, СокрЛП(ЭлементСоответствия.Ключ));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСтруктуруОтбора()

&НаСервере
// Создает соответствие видов цен для расшифровки полей табличного документа
//
Функция СоздатьШаблонСоответствия()
	
	СоответствиеДляРасшифровки = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТаблицаВидыЦенКонтрагента Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидЦенКонтрагента) Тогда
			
			СоответствиеДляРасшифровки.Вставить(СтрокаТаблицы.ВидЦенКонтрагента, Справочники.ВидыЦен.ПустаяСсылка());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеДляРасшифровки;
	
КонецФункции //СоздатьШаблонСоответствия()

&НаСервере
// Процедура обновляет заголовок формы
//
Процедура ОбновитьЗаголовокФормыНаСервере()
	
	ЭтаФорма.Заголовок	= НСтр("ru = 'Прайс-листы поставщиков'") + 
		?(ЗначениеЗаполнено(НаДату), Нстр("ru = ' на '") + Формат(НаДату, "ДЛФ=DD"), Нстр("ru = '.'"));
	
КонецПроцедуры // ОбновитьЗаголовокФормыНаСервере()

&НаСервере
// Процедура заполняет табличный документ.
//
Процедура ОбновитьНаСервере()
	
	ОбновитьЗаголовокФормыНаСервере();
	
	ТабличныйДокумент.Очистить();
	
	Запрос = Новый Запрос;
	
	ПараметрыВиртуальнойТаблицы = "&Период, Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас) ";
	
	Союз = "И ";
	
	Если ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						" + Союз + " ВидЦенКонтрагента = &ВидЦенКонтрагента ";
		Союз = "И ";
		
		Запрос.УстановитьПараметр("ВидЦенКонтрагента", ВидЦенКонтрагента);
		
	ИначеЕсли Объект.ВидыЦенКонтрагента.Количество() > 0 Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						" + Союз + " ВидЦенКонтрагента В (&МассивВидЦенКонтрагента) ";
		Союз = "И ";
		
		Запрос.УстановитьПараметр("МассивВидЦенКонтрагента", Объект.ВидыЦенКонтрагента.Выгрузить(,"Ссылка"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЦеноваяГруппа) Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						" + Союз + "Номенклатура.ЦеноваяГруппа В ИЕРАРХИИ (&ЦеноваяГруппа) ";
		Союз = "И ";	
		
		Запрос.УстановитьПараметр("ЦеноваяГруппа",  	ЦеноваяГруппа);
		
	ИначеЕсли Объект.ЦеновыеГруппы.Количество() > 0 Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						" + Союз + "Номенклатура.ЦеноваяГруппа В ИЕРАРХИИ (&МассивЦеноваяГруппа) ";
		Союз = "И ";	
		
		Запрос.УстановитьПараметр("МассивЦеноваяГруппа", Объект.ЦеновыеГруппы.Выгрузить(,"Ссылка"));
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						" + Союз + "Номенклатура В ИЕРАРХИИ (&Номенклатура) ";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
	ИначеЕсли Объект.Номенклатура.Количество() > 0 Тогда
		ПараметрыВиртуальнойТаблицы = ПараметрыВиртуальнойТаблицы + "
		|						" + Союз + "Номенклатура В ИЕРАРХИИ (&МассивНоменклатура) ";
		
		Запрос.УстановитьПараметр("МассивНоменклатура", Объект.Номенклатура.Выгрузить(,"Ссылка"));
		
	КонецЕсли; 
	
	Условие = "";	
	Если Актуальность Тогда
		Условие = "
		|ГДЕ
		|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность";	
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Период",  			НаДату);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Группировки.Номенклатура КАК Номенклатура,
	|	Группировки.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Группировки.Родитель КАК Родитель,
	|	Группировки.Характеристика КАК Характеристика,
	|	Группировки.ВидЦенКонтрагента КАК ВидЦенКонтрагента,
	|	Группировки.ВидЦенКонтрагента.Владелец КАК Контрагент,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Актуальность,
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
	|	Группировки.ВидЦенКонтрагента.ВалютаЦены КАК Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		НоменклатураХарактеристика.Номенклатура КАК Номенклатура,
	|		НоменклатураХарактеристика.Характеристика КАК Характеристика,
	|		Колонки.ВидЦенКонтрагента КАК ВидЦенКонтрагента,
	|		НоменклатураХарактеристика.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|		НоменклатураХарактеристика.Родитель КАК Родитель,
	|		НоменклатураХарактеристика.Порядок КАК Порядок,
	|		НоменклатураХарактеристика.РодительПорядок КАК РодительПорядок
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента КАК ВидЦенКонтрагента
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|					" + ПараметрыВиртуальнойТаблицы + ") КАК ЦеныНоменклатурыКонтрагентовСрезПоследних) КАК Колонки,
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика КАК Характеристика,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ЦеноваяГруппа.Родитель = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ЦеноваяГруппа
	|				ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ЦеноваяГруппа.Родитель
	|			КОНЕЦ КАК Родитель,
	|			ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ЦеноваяГруппа.Порядок КАК Порядок,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ЦеноваяГруппа.Родитель = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ЦеноваяГруппа.Порядок
	|				ИНАЧЕ ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура.ЦеноваяГруппа.Родитель.Порядок
	|			КОНЕЦ КАК РодительПорядок
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|					" + ПараметрыВиртуальнойТаблицы + ") КАК ЦеныНоменклатурыКонтрагентовСрезПоследних) КАК НоменклатураХарактеристика) КАК Группировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|					" + ПараметрыВиртуальнойТаблицы + ") КАК ЦеныНоменклатурыКонтрагентовСрезПоследних
	|		ПО Группировки.Номенклатура = ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
	|			И Группировки.Характеристика = ЦеныНоменклатурыКонтрагентовСрезПоследних.Характеристика
	|			И Группировки.ВидЦенКонтрагента = ЦеныНоменклатурыКонтрагентовСрезПоследних.ВидЦенКонтрагента" + Условие + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Группировки.РодительПорядок,
	|	Группировки.Порядок,
	|	Группировки.Номенклатура.Наименование,
	|	Группировки.Характеристика.Наименование,
	|	ВидЦенКонтрагента,
	|	Контрагент
	|ИТОГИ ПО 
	|	Родитель,
	|	ЦеноваяГруппа,
	|	Номенклатура,
	|	Характеристика,
	|	ВидЦенКонтрагента";
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Макет = Обработки.ПрайсЛистыКонтрагентов.ПолучитьМакет("Макет");
	
	ОбластьОтступ	 				= Макет.ПолучитьОбласть("Отступ|Номенклатура");
	ОбластьЗаголовок 				= Макет.ПолучитьОбласть("Заголовок|Номенклатура");
	ОбластьШапкаНоменклатура 		= Макет.ПолучитьОбласть("Шапка|Номенклатура");
	ОбластьШапкаХарактеристика 		= Макет.ПолучитьОбласть("Шапка|Характеристика");
	ОбластьЦеноваяГруппа 			= Макет.ПолучитьОбласть("ЦеноваяГруппа|Номенклатура");
	ОбластьШапкаВидЦенКонтрагента 	= Макет.ПолучитьОбласть("Шапка|ВидЦенКонтрагента");
		
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Если РезультатЗапрос.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ТабличныйДокумент.Вывести(ОбластьОтступ);
	
	Если Элементы.ОтображатьЗаголовок.Пометка Тогда
	
		ОбластьЗаголовок.Параметры.Заголовок	 = "ПРАЙС-ЛИСТ";
		ОбластьЗаголовок.Параметры.НаДату		 = Формат(НаДату, "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);	
		
	КонецЕсли;	
		
	ТабличныйДокумент.Вывести(ОбластьШапкаНоменклатура);
	Если ИспользоватьХарактеристики Тогда
		ТабличныйДокумент.Присоединить(ОбластьШапкаХарактеристика);	
	КонецЕсли;
	
	НПП = 0;
	ТаблицаВидыЦенКонтрагента.Очистить();
	
	ВыборкаВидЦенКонтрагента = РезультатЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЦенКонтрагента");
	Пока ВыборкаВидЦенКонтрагента.Следующий() Цикл
		ОбластьШапкаВидЦенКонтрагента.Параметры.ВидЦенКонтрагента = ВыборкаВидЦенКонтрагента.ВидЦенКонтрагента;
		ОбластьШапкаВидЦенКонтрагента.Параметры.Контрагент = ВыборкаВидЦенКонтрагента.Контрагент;
		ОбластьШапкаВидЦенКонтрагента.Параметры.Валюта = ВыборкаВидЦенКонтрагента.Валюта;
		ТабличныйДокумент.Присоединить(ОбластьШапкаВидЦенКонтрагента);
		
		НоваяСтрока = ТаблицаВидыЦенКонтрагента.Добавить();
		НоваяСтрока.ВидЦенКонтрагента = ВыборкаВидЦенКонтрагента.ВидЦенКонтрагента;
		НоваяСтрока.НПП = НПП;
		НПП = НПП + 1;
	КонецЦикла; 
	
	ВыборкаРодитель = РезультатЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Родитель");
	Пока ВыборкаРодитель.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаРодитель.Родитель) Тогда
				
			ОбластьЦеноваяГруппа.Параметры.ЦеноваяГруппа = ВыборкаРодитель.Родитель;
			ТабличныйДокумент.Вывести(ОбластьЦеноваяГруппа);
			ТекущаяОбластьЦеноваяГруппа = ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
			ТекущаяОбластьЦеноваяГруппа.Объединить();
			ТекущаяОбластьЦеноваяГруппа.ЦветФона = Новый Цвет(252, 249, 226);
			ТекущаяОбластьЦеноваяГруппа.Расшифровка = ВыборкаРодитель.Родитель;
			ТабличныйДокумент.НачатьГруппуСтрок();	
			
			ВыборкаЦеноваяГруппа = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЦеноваяГруппа");
			Пока ВыборкаЦеноваяГруппа.Следующий() Цикл
				
				Если ВыборкаЦеноваяГруппа.ЦеноваяГруппа = ВыборкаЦеноваяГруппа.Родитель Тогда
					
					ВывестиДетали(ВыборкаЦеноваяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"), ИспользоватьХарактеристики, Ложь, Макет);
					
				Иначе					
					
					ОбластьЦеноваяГруппа.Параметры.ЦеноваяГруппа = ВыборкаЦеноваяГруппа.ЦеноваяГруппа;
					ТабличныйДокумент.Вывести(ОбластьЦеноваяГруппа);
					
					ТекущаяОбластьЦеноваяГруппа 			= ТабличныйДокумент.Область(ТабличныйДокумент.ВысотаТаблицы, 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
					ТекущаяОбластьЦеноваяГруппа.Объединить();
					ТекущаяОбластьЦеноваяГруппа.ЦветФона	= Новый Цвет(252, 249, 226);
					ТекущаяОбластьЦеноваяГруппа.Расшифровка = ВыборкаЦеноваяГруппа.ЦеноваяГруппа;
					ТабличныйДокумент.НачатьГруппуСтрок();
					
					ВывестиДетали(ВыборкаЦеноваяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"), ИспользоватьХарактеристики, Истина, Макет);
					
					ТабличныйДокумент.ЗакончитьГруппуСтрок();
					
				КонецЕсли;
			
			КонецЦикла;
			
			ТабличныйДокумент.ЗакончитьГруппуСтрок();
			
		Иначе
			
			ВыборкаЦеноваяГруппа = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЦеноваяГруппа");
			Пока ВыборкаЦеноваяГруппа.Следующий() Цикл
				ВывестиДетали(ВыборкаЦеноваяГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура"), ИспользоватьХарактеристики, Ложь, Макет);
			КонецЦикла;	
				
		КонецЕсли;
	
	КонецЦикла;
	
	ОбластьТаблица = ТабличныйДокумент.Область(?(Элементы.ОтображатьЗаголовок.Пометка, 5, 2), 2, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
 
	ОбластьТаблица.ГраницаСверху 	= Линия;
	ОбластьТаблица.ГраницаСнизу 	= Линия;
	ОбластьТаблица.ГраницаСлева 	= Линия;
	ОбластьТаблица.ГраницаСправа 	= Линия;
	
КонецПроцедуры

&НаСервере
// Процедура выводит детальные записи в табличный документ.
//
Процедура ВывестиДетали(ВыборкаНоменклатура, ИспользоватьХарактеристики, ИспользоватьЦеновыеГруппы, Макет)
	
	ОбластьДеталиНоменклатура 		= Макет.ПолучитьОбласть("Детали|Номенклатура");
	ОбластьДеталиХарактеристика 	= Макет.ПолучитьОбласть("Детали|Характеристика");
	ОбластьДеталиВидЦенКонтрагента	= Макет.ПолучитьОбласть("Детали|ВидЦенКонтрагента");
		
	Пока ВыборкаНоменклатура.Следующий() Цикл
			
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Характеристика");
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			СтруктураРасшифровкиНоменклатурыХарактеристики = Новый Структура;
			СтруктураРасшифровкиНоменклатурыХарактеристики.Вставить("Номенклатура",				ВыборкаНоменклатура.Номенклатура);
			СтруктураРасшифровкиНоменклатурыХарактеристики.Вставить("Характеристика",			Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			СтруктураРасшифровкиНоменклатурыХарактеристики.Вставить("СоответствиеРасшифровок",	СоздатьШаблонСоответствия());
			
			ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
			ШиринаТаблицы = ?(ИспользоватьХарактеристики, 3, 2);
			
			ОбластьДеталиНоменклатура.Параметры.Номенклатура = ВыборкаХарактеристика.Номенклатура;
			ТабличныйДокумент.Вывести(ОбластьДеталиНоменклатура);
			Если ИспользоватьХарактеристики Тогда
				ОбластьДеталиХарактеристика.Параметры.Характеристика = ВыборкаХарактеристика.Характеристика;
				ТабличныйДокумент.Присоединить(ОбластьДеталиХарактеристика);
			КонецЕсли;
			
			//Запомним используемые цены в Списке значений
			ИспользуемыеЦены = Новый СписокЗначений;
			
			ВыборкаВидЦенКонтрагента = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЦенКонтрагента");
			Пока ВыборкаВидЦенКонтрагента.Следующий() Цикл
				
				Выборка = ВыборкаВидЦенКонтрагента.Выбрать();
				Пока Выборка.Следующий() Цикл	
					
					СтруктураРасшифровки = Новый Структура;
					СтруктураРасшифровки.Вставить("Номенклатура", 		Выборка.Номенклатура);
					СтруктураРасшифровки.Вставить("Характеристика", 	Выборка.Характеристика);
					СтруктураРасшифровки.Вставить("ВидЦенКонтрагента", 	Выборка.ВидЦенКонтрагента);
					СтруктураРасшифровки.Вставить("Период", 			НаДату);
					СтруктураРасшифровки.Вставить("Цена", 				Выборка.Цена);
					СтруктураРасшифровки.Вставить("Актуальность", 		Выборка.Актуальность);
					СтруктураРасшифровки.Вставить("ЕдиницаИзмерения", 	Выборка.ЕдиницаИзмерения);
					
					НПП = ТаблицаВидыЦенКонтрагента.НайтиСтроки(Новый Структура("ВидЦенКонтрагента", Выборка.ВидЦенКонтрагента))[0].НПП;
					
					ОбластьЕдиница 				= ТабличныйДокумент.Область(ВысотаТаблицы + 1, ШиринаТаблицы + НПП*2 + 1);
					ОбластьЕдиница.Текст 		= Выборка.ЕдиницаИзмерения;
					ОбластьЕдиница.Расшифровка 	= СтруктураРасшифровки;
					ОбластьЕдиница.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
					
					ОбластьЦена 				= ТабличныйДокумент.Область(ВысотаТаблицы + 1, ШиринаТаблицы + НПП*2 + 2);
					ОбластьЦена.Текст 			= Формат(Выборка.Цена, "ЧЦ=15; ЧДЦ=2");
					ОбластьЦена.Расшифровка 	= СтруктураРасшифровки;
					
					СтруктураРасшифровкиНоменклатурыХарактеристики.СоответствиеРасшифровок.Вставить(Выборка.ВидЦенКонтрагента, СтруктураРасшифровки);
					ИспользуемыеЦены.Добавить(Выборка.ВидЦенКонтрагента);
					
				КонецЦикла;
				
			КонецЦикла;
			
			//Заполним расшифровку для остальных видов цен.
			Для каждого СтрокаТаблицыВидовЦенКонтрагента Из ТаблицаВидыЦенКонтрагента Цикл
				
				Если ИспользуемыеЦены.НайтиПоЗначению(СтрокаТаблицыВидовЦенКонтрагента.ВидЦенКонтрагента) = Неопределено Тогда
					
					ОбластьЕдиница	= ТабличныйДокумент.Область(ВысотаТаблицы + 1, ШиринаТаблицы + СтрокаТаблицыВидовЦенКонтрагента.НПП*2 + 1);
					ОбластьЦена 	= ТабличныйДокумент.Область(ВысотаТаблицы + 1, ШиринаТаблицы + СтрокаТаблицыВидовЦенКонтрагента.НПП*2 + 2);
					
					СтруктураРасшифровки = Новый Структура;
					СтруктураРасшифровки.Вставить("Номенклатура", 		ВыборкаНоменклатура.Номенклатура);
					СтруктураРасшифровки.Вставить("Характеристика", 	ВыборкаХарактеристика.Характеристика);
					СтруктураРасшифровки.Вставить("ВидЦенКонтрагента", 	СтрокаТаблицыВидовЦенКонтрагента.ВидЦенКонтрагента);
					СтруктураРасшифровки.Вставить("Период", 			НаДату);
					СтруктураРасшифровки.Вставить("ЕдиницаИзмерения", 	ВыборкаНоменклатура.Номенклатура.ЕдиницаИзмерения);
					
					ОбластьЕдиница.Расшифровка	= СтруктураРасшифровки;
					ОбластьЦена.Расшифровка 	= СтруктураРасшифровки;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбластьНоменклатура 			= ТабличныйДокумент.Область(ВысотаТаблицы + 1, 2);
			ОбластьНоменклатура.Текст 		= ?(ПолноеНаименование, ВыборкаНоменклатура.Номенклатура.НаименованиеПолное, ВыборкаНоменклатура.Номенклатура.Наименование);
			ОбластьНоменклатура.Расшифровка	= СтруктураРасшифровкиНоменклатурыХарактеристики;
			
			Если ИспользоватьХарактеристики Тогда
				
				ОбластьХарактеристика 				= ТабличныйДокумент.Область(ВысотаТаблицы + 1, 3);
				ОбластьХарактеристика.Расшифровка 	= СтруктураРасшифровкиНоменклатурыХарактеристики;
				
			КонецЕсли;
			
			ТабличныйДокумент.Область(ВысотаТаблицы + 1, 2, ТабличныйДокумент.ВысотаТаблицы, 2).Объединить();
			Если ИспользоватьХарактеристики Тогда
				
				ТабличныйДокумент.Область(ВысотаТаблицы + 1, 3, ТабличныйДокумент.ВысотаТаблицы, 3).Объединить();
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает ключ записи регистра.
//
Функция ПолучитьКлючЗаписи(СтруктураПараметров, ТолькоАктуальные = Ложь)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатурыКонтрагентовСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|			&НаДату,
	|			ВидЦенКонтрагента = &ВидЦенКонтрагента
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И &ТолькоАктуальные) КАК ЦеныНоменклатурыКонтрагентовСрезПоследних";
	
	Если ТолькоАктуальные Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТолькоАктуальные", "Актуальность");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТолькоАктуальные", "Истина");
		
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("НаДату", 					СтруктураПараметров.Период);
	Запрос.УстановитьПараметр("Номенклатура", 				СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", 			СтруктураПараметров.Характеристика);
	Запрос.УстановитьПараметр("ВидЦенКонтрагента", 			СтруктураПараметров.ВидЦенКонтрагента);

	СтруктураВозврата = Новый Структура("НоваяЗаписьРегистра, Период, ВидЦенКонтрагента, Номенклатура, Характеристика", Истина);
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтруктураПараметров);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультат.Количество() > 0 Тогда
		
		СтруктураВозврата.Период 				= ТаблицаРезультат[0].Период;
		СтруктураВозврата.НоваяЗаписьРегистра	= Ложь;
		
	КонецЕсли; 

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьКлючЗаписи()

&НаКлиенте
// Формирует заголовок декорации по первым значениям элементов указанной табличной части
//
Функция ПолучитьСодержаниеЗаголовкаДекорации(ИмяТабличнойЧасти) 
	
	Если Объект[ИмяТабличнойЧасти].Количество() < 1 Тогда
		
		ЗаголовокДекорации = "Множественный отбор не заполнен";
		
	ИначеЕсли Объект[ИмяТабличнойЧасти].Количество() = 2 Тогда
		
		ЗаголовокДекорации = Строка(Объект[ИмяТабличнойЧасти][0].Ссылка) + "; " + Строка(Объект[ИмяТабличнойЧасти][1].Ссылка);
		
	ИначеЕсли Объект[ИмяТабличнойЧасти].Количество() > 2 Тогда
		
		ЗаголовокДекорации = Строка(Объект[ИмяТабличнойЧасти][0].Ссылка) + "; " + Строка(Объект[ИмяТабличнойЧасти][1].Ссылка) + "...";
		
	Иначе
		
		ЗаголовокДекорации = Строка(Объект[ИмяТабличнойЧасти][0].Ссылка);
		
	КонецЕсли;
	
	Возврат ЗаголовокДекорации;
	
КонецФункции //ПолучитьСодержаниеЗаголовкаДекорации()

&НаКлиенте
// Процедура анализирует произведенные установленные отборы
//
Процедура АнализироватьВыбор(ИмяТабличнойЧасти)
	
	КоличествоЭлементов = Объект[ИмяТабличнойЧасти].Количество();
	
	ИзменитьСтраницуОтбора(ИмяТабличнойЧасти, КоличествоЭлементов > 0);
	
КонецПроцедуры // АнализироватьВыбор()

&НаКлиенте
// Процедура открывает запись реистра.
//
Процедура ОткрытьФормуЗаписиРегистра(СтруктураПараметров)

	КлючЗаписи = ПолучитьКлючЗаписи(СтруктураПараметров, Актуальность);
	Если ЗначениеЗаполнено(КлючЗаписи)
		И ТипЗНЧ(КлючЗаписи) = Тип("Структура") 
		И НЕ КлючЗаписи.НоваяЗаписьРегистра Тогда
		
		КлючЗаписи.Удалить("НоваяЗаписьРегистра");
		
		ПараметрыМассив = Новый Массив;
		ПараметрыМассив.Добавить(КлючЗаписи);
		КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.ЦеныНоменклатурыКонтрагентов", ПараметрыМассив);
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатурыКонтрагентов.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
		
	Иначе
		
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатурыКонтрагентов.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", КлючЗаписи));
		
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФормуЗаписиРегистра()

&НаСервере
// Процедура удаляет запись регистра.
//
Процедура УдалитьНаСервере(СтруктураПараметров)

	КлючЗаписи = ПолучитьКлючЗаписи(СтруктураПараметров);

	Если НЕ ЗначениеЗаполнено(КлючЗаписи) 
		ИЛИ ТипЗнч(КлючЗаписи) <> Тип("Структура") 
		ИЛИ КлючЗаписи.НоваяЗаписьРегистра Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	КлючЗаписи.Удалить("НоваяЗаписьРегистра");
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
	
	Для каждого ЭлементСтруктуры Из КлючЗаписи Цикл
		
		НаборЗаписей.Отбор[ЭлементСтруктуры.Ключ].Установить(ЭлементСтруктуры.Значение);
		
	КонецЦикла; 
	
	НаборЗаписей.Записать();

КонецПроцедуры // Удалить()

&НаСервереБезКонтекста
// Процедура сохраняет настройки формы.
//
Процедура СохранитьНастройкиФормы(СтруктураНастроек)
	
	ХранилищеНастроекДанныхФорм.Сохранить("ОбработкаПрайсЛистыКонтрагентовФорма", "СтруктураНастроек", СтруктураНастроек);
	
КонецПроцедуры

&НаКлиенте
// Функция позвращает массив значений состоящий из элементов табличной части
//
// ИмяТабличнойЧасти - идентификатор табличной части, элементами которой заполняется массив
//
Функция ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте(ИмяТабличнойЧасти)
	
	МассивЗначений = Новый Массив;
	
	Для каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
		
		МассивЗначений.Добавить(СтрокаТаблицы.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции //ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте()

&НаКлиенте
// Заполняет указанную табличную часть значениями из переданного массива
//
Процедура ЗаполнитьТабличнуюЧастьИзЭлементовМассиваНаКлиенте(ИмяТабличнойЧасти, МассивЭлементов, ОчиститьТаблицу)
	
	Если ОчиститьТаблицу Тогда
		
		Объект[ИмяТабличнойЧасти].Очистить();
		
	КонецЕсли;
	
	Для каждого ЭлементМассива Из МассивЭлементов Цикл
		
		НоваяСтрока 		= Объект[ИмяТабличнойЧасти].Добавить();
		НоваяСтрока.Ссылка	= ЭлементМассива;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьИзЭлементовМассиваНаКлиенте()

&НаКлиенте
// Переключение страниц с отборами (Быстрый/Множественный)
//
Процедура ИзменитьСтраницуОтбора(ИмяТабличнойЧасти, Списком)
	
	ГруппаСтраницы = Элементы["СтраницыОтбора" + ИмяТабличнойЧасти];
	
	УстановитьТекущейСтраницей = Неопределено;
	
	Для каждого СтраницаГруппы из ГруппаСтраницы.ПодчиненныеЭлементы Цикл
		
		Если Списком Тогда
			
			Если СтрНайти(СтраницаГруппы.Имя, "МножественныйОтбор") > 0 Тогда
			
				УстановитьТекущейСтраницей = СтраницаГруппы;
				Прервать;
			
			КонецЕсли;
			
		Иначе
			
			Если СтрНайти(СтраницаГруппы.Имя, "БыстрыйОтбор") > 0 Тогда
			
				УстановитьТекущейСтраницей = СтраницаГруппы;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы["ДекорацияМножетвенныйОтбор" + ИмяТабличнойЧасти].Заголовок = ПолучитьСодержаниеЗаголовкаДекорации(ИмяТабличнойЧасти);
	
	ГруппаСтраницы.ТекущаяСтраница = УстановитьТекущейСтраницей;
	
КонецПроцедуры // ИзменитьСтраницуОтбора()

&НаСервере
//Процедура заполняет отборы значениями из сохранненых настроек
//
Процедура ВосстановитьЗначенияОтборов(СтруктураНастроек, СтруктураИменТЧ)
	
	Для каждого ЭлементСтруктурыИмен Из СтруктураИменТЧ Цикл
		
		ИмяТабличнойЧасти	= ЭлементСтруктурыИмен.Ключ;
		Если СтруктураНастроек.Свойство(ЭлементСтруктурыИмен.Значение) Тогда
			
			МассивЭлементов		= СтруктураНастроек[ЭлементСтруктурыИмен.Значение];
			
		КонецЕсли;
		
		Если НЕ ТипЗнч(МассивЭлементов) = Тип("Массив") 
			ИЛИ МассивЭлементов.Количество() < 1 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Объект[ИмяТабличнойЧасти].Очистить();
		
		Для каждого ЭлементМассива Из МассивЭлементов Цикл
			
			НоваяСтрока 		= Объект[ИмяТабличнойЧасти].Добавить();
			НоваяСтрока.Ссылка	= ЭлементМассива;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Если Объект.ВидыЦенКонтрагента.Количество() < 1 Тогда
		
		ВидЦенКонтрагента = СтруктураНастроек.ВидЦенКонтрагента;
		
	КонецЕсли;
	
	Если Объект.ЦеновыеГруппы.Количество() < 1 Тогда 
		
		ЦеноваяГруппа = СтруктураНастроек.ЦеноваяГруппа;
	
	КонецЕсли;
	
	Если Объект.Номенклатура.Количество() < 1 Тогда
		
		Номенклатура = СтруктураНастроек.Номенклатура;
		
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("НаДату") Тогда
		
		НаДату = СтруктураНастроек.НаДату;
		
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("Актуальность") Тогда
		
		Актуальность = СтруктураНастроек.Актуальность;
		
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ПолноеНаименование") Тогда
		
		ПолноеНаименование = СтруктураНастроек.ПолноеНаименование;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьЗначенияОтборов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ОбработкаПрайсЛистыКонтрагентовФорма", "СтруктураНастроек");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		СтруктураИменТЧ = Новый Структура("ВидыЦенКонтрагента, ЦеновыеГруппы, Номенклатура", "ТЧ_ВидыЦенКонтрагента", "ТЧ_ЦеновыеГруппы", "ТЧ_Номенклатура");
		ВосстановитьЗначенияОтборов(СтруктураНастроек, СтруктураИменТЧ);
		
	Иначе
		
		НаДату 			= ТекущаяДата();
		Актуальность	= Истина;
		
	КонецЕсли;	
	
	ИспользоватьХарактеристики 				= Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить();
	Элементы.ОтображатьЗаголовок.Пометка	= Ложь;
	
	ОбновитьЗаголовокФормыНаСервере();
	
	ОбновитьНаСервере();
	
	ТекущаяОбласть = "R1C1";
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	
	//Установим текущие страницы формы в зависимости от сохраненных отборов
	АнализироватьВыбор("ВидыЦенКонтрагента");
	АнализироватьВыбор("ЦеновыеГруппы");
	АнализироватьВыбор("Номенклатура");
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ТЧ_ВидыЦенКонтрагента", ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("ВидыЦенКонтрагента"));
	СтруктураНастроек.Вставить("ВидЦенКонтрагента", 	ВидЦенКонтрагента);
	
	СтруктураНастроек.Вставить("ТЧ_ЦеновыеГруппы",		ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("ЦеновыеГруппы"));
	СтруктураНастроек.Вставить("ЦеноваяГруппа", 		ЦеноваяГруппа);
	
	СтруктураНастроек.Вставить("ТЧ_Номенклатура",		ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("Номенклатура"));
	СтруктураНастроек.Вставить("Номенклатура",			Номенклатура);
	
	СтруктураНастроек.Вставить("НаДату", 				НаДату);
	СтруктураНастроек.Вставить("Актуальность",			Актуальность);
	СтруктураНастроек.Вставить("ПолноеНаименование",	ПолноеНаименование);
	
	СохранитьНастройкиФормы(СтруктураНастроек);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик оповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаЦенаКонтрагента" Тогда
		
		Если Параметр Тогда
			
			ОбновитьНаСервере();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "МножественныеОтборыПрайсЛистыКонтрагентов" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		НаДату 					= Параметр.НаДату;
		Актуальность			= Параметр.Актуальность;
		ПолноеНаименование		= Параметр.ПолноеНаименование;
		
		// Виды цен контрагентов
		ЭтоМножественныйОтбор = (ТипЗнч(Параметр.ВидЦенКонтрагента) = Тип("Массив"));
		Если ЭтоМножественныйОтбор Тогда
			
			ЗаполнитьТабличнуюЧастьИзЭлементовМассиваНаКлиенте("ВидыЦенКонтрагента", Параметр.ВидЦенКонтрагента, Истина);
			ВидЦенКонтрагента = Неопределено;
			
		Иначе
			
			ВидЦенКонтрагента = Параметр.ВидЦенКонтрагента;
			Объект.ВидыЦенКонтрагента.Очистить();
			
		КонецЕсли;
		
		ИзменитьСтраницуОтбора("ВидыЦенКонтрагента", ЭтоМножественныйОтбор);
		
		// Ценовые группы
		ЭтоМножественныйОтбор = (ТипЗнч(Параметр.ЦеноваяГруппа) = Тип("Массив"));
		Если ЭтоМножественныйОтбор Тогда
			
			ЗаполнитьТабличнуюЧастьИзЭлементовМассиваНаКлиенте("ЦеновыеГруппы", Параметр.ЦеноваяГруппа, Истина);
			ЦеноваяГруппа = Неопределено;
			
		Иначе
			
			ЦеноваяГруппа = Параметр.ЦеноваяГруппа;
			Объект.ЦеновыеГруппы.Очистить();
			
		КонецЕсли;
		
		ИзменитьСтраницуОтбора("ЦеновыеГруппы", ЭтоМножественныйОтбор);
		
		// Номенклатура
		ЭтоМножественныйОтбор = (ТипЗнч(Параметр.Номенклатура) = Тип("Массив"));
		Если ЭтоМножественныйОтбор Тогда
			
			ЗаполнитьТабличнуюЧастьИзЭлементовМассиваНаКлиенте("Номенклатура", Параметр.Номенклатура, Истина);
			Номенклатура = Неопределено;
			
		Иначе
			
			Номенклатура = Параметр.Номенклатура;
			Объект.Номенклатура.Очистить();
			
		КонецЕсли;
		
		ИзменитьСтраницуОтбора("Номенклатура", ЭтоМножественныйОтбор);
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		ОчиститьТаблицу = Истина;
		
		Если ИсточникВыбора.ИмяФормы = "Обработка.ПрайсЛистыКонтрагентов.Форма.ФормаРедактированияВидовЦенКонтрагента" Тогда
			
			ЗаполнитьТабличнуюЧастьИзЭлементовМассиваНаКлиенте("ВидыЦенКонтрагента", ВыбранноеЗначение, ОчиститьТаблицу);
			АнализироватьВыбор("ВидыЦенКонтрагента");
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПрайсЛистыКонтрагентов.Форма.ФормаРедактированияЦеновыхГрупп" Тогда
			
			ЗаполнитьТабличнуюЧастьИзЭлементовМассиваНаКлиенте("ЦеновыеГруппы", ВыбранноеЗначение, ОчиститьТаблицу);
			АнализироватьВыбор("ЦеновыеГруппы");
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПрайсЛистыКонтрагентов.Форма.ФормаРедактированияНоменклатуры" Тогда
			
			ЗаполнитьТабличнуюЧастьИзЭлементовМассиваНаКлиенте("Номенклатура", ВыбранноеЗначение, ОчиститьТаблицу);
			АнализироватьВыбор("Номенклатура");
			
		КонецЕсли;
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
// Процедура - обработчик команды Обновить.
//
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды Добавить.
//
Процедура Добавить(Команда)
	
	РасшифровкаИзОбласти = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	
	Если НЕ ТипЗнч(РасшифровкаИзОбласти) = Тип("Структура") Тогда
		
		ЗначенияЗаполнения = Новый Структура("Номенклатура", Номенклатура);
		
		Если ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
			
			ЗначенияЗаполнения.Вставить("ВидЦенКонтрагента", ВидЦенКонтрагента);
			
		ИначеЕсли Объект.ВидыЦенКонтрагента.Количество() = 1 Тогда
			
			ЗначенияЗаполнения.Вставить("ВидЦенКонтрагента", Объект.ВидыЦенКонтрагента[0].Ссылка);
			
		КонецЕсли;
		
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатурыКонтрагентов.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		Возврат;
		
	ИначеЕсли РасшифровкаИзОбласти.Свойство("СоответствиеРасшифровок") Тогда
		
		СписокДоступныхВидовЦен = ПолучитьСписокВыбораВидаЦенКонтрагента(РасшифровкаИзОбласти.СоответствиеРасшифровок);
		
		Если СписокДоступныхВидовЦен.Количество() > 0 Тогда
			
			ВыбранныйВидЦен = СписокДоступныхВидовЦен[0].Значение;
			Расшифровка 	= РасшифровкаИзОбласти.СоответствиеРасшифровок.Получить(ВыбранныйВидЦен);
			
		Иначе
			
			Расшифровка 	= Неопределено;
			
		КонецЕсли;
			
	Иначе
		
		Расшифровка = РасшифровкаИзОбласти;
		
	КонецЕсли;
	
	ЗначенияЗаполнения	= Новый Структура("Контрагент, ВидЦенКонтрагента, Номенклатура, Характеристика, Актуальность", , , , , Истина);
	
	Если Расшифровка = Неопределено
		ИЛИ НЕ ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Если Объект.ВидыЦенКонтрагента.Количество() < 1 
			И ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
			
			ЗначенияЗаполнения.Вставить("ВидЦенКонтрагента", ВидЦенКонтрагента);
			
		ИначеЕсли ТипЗнч(ВыбранныйВидЦен) = Тип("ЭлементСпискаЗначений") Тогда
			
			ЗначенияЗаполнения.Вставить("ВидЦенКонтрагента", ВыбранныйВидЦен.Значение);
			
		КонецЕсли;
		
		Если Объект.Номенклатура.Количество() < 1 
			И ЗначениеЗаполнено(Номенклатура) Тогда
			
			ЗначенияЗаполнения.Вставить("Номенклатура", Номенклатура);
			
		ИначеЕсли РасшифровкаИзОбласти.Свойство("Номенклатура")
			И ЗначениеЗаполнено(РасшифровкаИзОбласти.Номенклатура) Тогда
			
			ЗначенияЗаполнения.Вставить("Номенклатура", РасшифровкаИзОбласти.Номенклатура);
			
			Если РасшифровкаИзОбласти.Свойство("Характеристика")
				И ЗначениеЗаполнено(РасшифровкаИзОбласти.Характеристика) Тогда
				
				ЗначенияЗаполнения.Вставить("Характеристика", РасшифровкаИзОбласти.Характеристика);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ЗначенияЗаполнения.Вставить("Номенклатура", Расшифровка);
			
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			
			ЗначенияЗаполнения.Вставить("Номенклатура", УправлениеНебольшойФирмойКлиент.ПрочитатьЗначениеРеквизита_Владелец(Расшифровка));
			
		КонецЕсли;
		
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатурыКонтрагентов.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ЗначенияЗаполнения.Контрагент			= УправлениеНебольшойФирмойКлиент.ПрочитатьЗначениеРеквизита_Владелец(Расшифровка.ВидЦенКонтрагента);
		ЗначенияЗаполнения.ВидЦенКонтрагента 	= Расшифровка.ВидЦенКонтрагента;
		ЗначенияЗаполнения.Номенклатура			= Расшифровка.Номенклатура;
		ЗначенияЗаполнения.Характеристика		= Расшифровка.Характеристика;
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатурыКонтрагентов.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения),,,,, Новый ОписаниеОповещения("ДобавитьЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбновитьНаСервере();

КонецПроцедуры

&НаКлиенте
// Процедура - команды Скопировать.
//
Процедура Скопировать(Команда)
	
	РасшифровкаИзОбласти = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	
	Если НЕ ТипЗнч(РасшифровкаИзОбласти) = Тип("Структура") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Невозможно скопировать цену.
					|Возможно выбрана пустая ячейка.'")
					);
		Возврат;
		
	ИначеЕсли РасшифровкаИзОбласти.Свойство("СоответствиеРасшифровок") Тогда
		
		СписокДоступныхВидовЦен = ПолучитьСписокВыбораВидаЦенКонтрагента(РасшифровкаИзОбласти.СоответствиеРасшифровок, ИСТИНА);
		Если СписокДоступныхВидовЦен.Количество() < 1 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'В текущем прайс-листе для данной номенклатурной позиции нет цен, доступных для копирования.'")
						);
						
			Возврат;
			
		ИначеЕсли СписокДоступныхВидовЦен.Количество() > 0 Тогда
			
			ВыбранныйВидЦен = СписокДоступныхВидовЦен[0].Значение;
			Расшифровка 	= РасшифровкаИзОбласти.СоответствиеРасшифровок.Получить(ВыбранныйВидЦен);
			
		КонецЕсли;
		
	Иначе
		
		Расшифровка = РасшифровкаИзОбласти;
		
	КонецЕсли;

	Если Расшифровка = Неопределено 
		ИЛИ НЕ ТипЗнч(Расшифровка) = Тип("Структура") 
		ИЛИ НЕ Расшифровка.Свойство("Цена") //Нет цены в расшифровке
		ИЛИ (Расшифровка.Свойство("Цена") И НЕ ЗначениеЗаполнено(Расшифровка.Цена)) //цена есть, но не заполнена
		Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Возможно указана пустая ячейка.
				|Копирование не возможно.'")
				);
				
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ЦеныНоменклатурыКонтрагентов.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", Расшифровка));
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - команды Изменить.
//
Процедура Изменить(Команда)
	
	РасшифровкаИзОбласти = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	
	Если НЕ ТипЗнч(РасшифровкаИзОбласти) = Тип("Структура")
		ИЛИ (НЕ РасшифровкаИзОбласти.Свойство("СоответствиеРасшифровок")
		И НЕ РасшифровкаИзОбласти.Свойство("Цена")) //Нет цены в расшифровке
		Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Невозможно изменить цену.
					|Возможно выбрана пустая ячейка.'")
					);
		Возврат;
		
	ИначеЕсли РасшифровкаИзОбласти.Свойство("СоответствиеРасшифровок") Тогда
		
		СписокДоступныхВидовЦен = ПолучитьСписокВыбораВидаЦенКонтрагента(РасшифровкаИзОбласти.СоответствиеРасшифровок, ИСТИНА);
		Если СписокДоступныхВидовЦен.Количество() < 1 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'В текущем прайс-листе для данной номенклатурной позиции нет цен, доступных для изменения.'")
						);
						
			Возврат;
			
		ИначеЕсли СписокДоступныхВидовЦен.Количество() > 0 Тогда
			
			ВыбранныйВидЦен = СписокДоступныхВидовЦен[0].Значение;
			Расшифровка 	= РасшифровкаИзОбласти.СоответствиеРасшифровок.Получить(ВыбранныйВидЦен);
			
		КонецЕсли;
		
	Иначе
		
		Расшифровка = РасшифровкаИзОбласти;
		
	КонецЕсли;
	
	ОткрытьФормуЗаписиРегистра(Расшифровка);
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды Удалить.
//
Процедура Удалить(Команда)
	
	РасшифровкаИзОбласти = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	
	Если НЕ ТипЗнч(РасшифровкаИзОбласти) = Тип("Структура") 
		ИЛИ (НЕ РасшифровкаИзОбласти.Свойство("СоответствиеРасшифровок")
		И НЕ РасшифровкаИзОбласти.Свойство("Цена")) //Нет цены в расшифровке
		Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Невозможно удалить цену.
					|Возможно выбрана пустая ячейка.'")
					);
		Возврат;
		
	ИначеЕсли РасшифровкаИзОбласти.Свойство("СоответствиеРасшифровок") Тогда
		
		СписокДоступныхВидовЦен = ПолучитьСписокВыбораВидаЦенКонтрагента(РасшифровкаИзОбласти.СоответствиеРасшифровок, ИСТИНА);
		Если СписокДоступныхВидовЦен.Количество() < 1 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'В текущем прайс-листе для данной номенклатурной позиции нет цен, доступных для удаления.'")
						);
						
			Возврат;
			
		ИначеЕсли СписокДоступныхВидовЦен.Количество() > 0 Тогда
			
			ВыбранныйВидЦен = СписокДоступныхВидовЦен[0].Значение;
			Расшифровка 	= РасшифровкаИзОбласти.СоответствиеРасшифровок.Получить(ВыбранныйВидЦен);
			
		КонецЕсли;
		
	Иначе
		
		Расшифровка = РасшифровкаИзОбласти;
		
	КонецЕсли;
	
	УдалитьНаСервере(Расшифровка);
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды История.
//
Процедура История(Команда)
	
	РасшифровкаИзОбласти = ТабличныйДокумент.Область(ТекущаяОбласть).Расшифровка;
	
	Если НЕ ТипЗнч(РасшифровкаИзОбласти) = Тип("Структура")
		ИЛИ (НЕ РасшифровкаИзОбласти.Свойство("СоответствиеРасшифровок")
		И НЕ РасшифровкаИзОбласти.Свойство("Цена")) //Нет цены в расшифровке
		Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Невозможно отобразить историю формирования цен.'")
					);
		Возврат;
		
	ИначеЕсли РасшифровкаИзОбласти.Свойство("СоответствиеРасшифровок") Тогда
		
		СписокДоступныхВидовЦен = ПолучитьСписокВыбораВидаЦенКонтрагента(РасшифровкаИзОбласти.СоответствиеРасшифровок, ИСТИНА);
		Если СписокДоступныхВидовЦен.Количество() < 1 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Невозможно отобразить историю формирорвания цен для данной номенклатурной позиции.'")
						);
						
			Возврат;
			
		ИначеЕсли СписокДоступныхВидовЦен.Количество() > 0 Тогда
			
			ВыбранныйВидЦен = СписокДоступныхВидовЦен[0].Значение;
			Расшифровка 	= РасшифровкаИзОбласти.СоответствиеРасшифровок.Получить(ВыбранныйВидЦен);
			
		КонецЕсли;
		
	Иначе
		
		Расшифровка = РасшифровкаИзОбласти;
		
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтруктураОтбор.Вставить("Характеристика", Расшифровка.Характеристика);
		СтруктураОтбор.Вставить("Номенклатура", Расшифровка.Номенклатура);
		
		Если ЗначениеЗаполнено(Расшифровка.ВидЦенКонтрагента) Тогда
			
			СтруктураОтбор.Вставить("ВидЦенКонтрагента", Расшифровка.ВидЦенКонтрагента);
			
		КонецЕсли;
		
		ОткрытьФорму("РегистрСведений.ЦеныНоменклатурыКонтрагентов.ФормаСписка", Новый Структура("Отбор", СтруктураОтбор),,,,, Новый ОписаниеОповещения("ИсторияЗавершение", ЭтотОбъект));
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ИсторияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбновитьНаСервере();

КонецПроцедуры

&НаКлиенте
// Процедура - команды Печать.
//
Процедура Печать(Команда)
	
	Если ТабличныйДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;

	ТабличныйДокумент.КоличествоЭкземпляров = 1;

	Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.ИмяПринтера) Тогда
		ТабличныйДокумент.АвтоМасштаб = Истина;
	КонецЕсли;
	
	ТабличныйДокумент.Напечатать(Ложь);

КонецПроцедуры

&НаКлиенте
// Процедура изменяет пометку кнопки ОтображатьЗаголовок.
//
Процедура ОтображатьЗаголовок(Команда)
	
	Элементы.ОтображатьЗаголовок.Пометка = НЕ Элементы.ОтображатьЗаголовок.Пометка;
	
	ОбновитьНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события Выбор реквизита ТабличныйДокумент.
//
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область.Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Если Область.Лево = 2 Тогда
			СтруктураОткрытия = Новый Структура("Ключ", Область.Расшифровка.Номенклатура);
			ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", СтруктураОткрытия);
		ИначеЕсли ИспользоватьХарактеристики И Область.Лево = 3 Тогда
		СтруктураОткрытия = Новый Структура("Ключ", Область.Расшифровка.Характеристика);
			ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", СтруктураОткрытия);
		Иначе
			ОткрытьФормуЗаписиРегистра(Область.Расшифровка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриАктивизацииОбласти реквизита ТабличныйДокумент.
//
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть.Имя;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ВидЦенКонтрагента.
//
Процедура ВидЦенКонтрагентаПриИзменении(Элемент)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита ЦеноваяГруппа.
//
Процедура ЦеноваяГруппаПриИзменении(Элемент)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении реквизита Номенклатура.
//
Процедура НоменклатураПриИзменении(Элемент)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка реквизита ВидЦен.
//
Процедура ВидЦенОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка реквизита ЦеноваяГруппа.
//
Процедура ЦеноваяГруппаОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка реквизита Номенклатура.
//
Процедура НоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
//Процедура - обработчик события нажатия кнопки ПерейтиКМножественнымОтборам
Процедура ПерейтиКМножественнымОтборам(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	// Передадим заполненные отборы
	ПараметрыФормы.Вставить("НаДату", 				НаДату);
	ПараметрыФормы.Вставить("Актуальность",			Актуальность);
	ПараметрыФормы.Вставить("ПолноеНаименование",	ПолноеНаименование);
	
	ЗначениеПараметра = ?(Объект.ВидыЦенКонтрагента.Количество() > 0, ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("ВидыЦенКонтрагента"), ВидЦенКонтрагента);
	ПараметрыФормы.Вставить("ВидЦенКонтрагента", ЗначениеПараметра);
	
	ЗначениеПараметра = ?(Объект.ЦеновыеГруппы.Количество() > 0, ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("ЦеновыеГруппы"), ЦеноваяГруппа);
	ПараметрыФормы.Вставить("ЦеноваяГруппа", ЗначениеПараметра);
	
	ЗначениеПараметра = ?(Объект.Номенклатура.Количество() > 0, ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("Номенклатура"), Номенклатура);
	ПараметрыФормы.Вставить("Номенклатура", ЗначениеПараметра);
	
	ОткрытьФорму("Обработка.ПрайсЛистыКонтрагентов.Форма.ФормаМножественныхОтборов", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры //ПерейтиКМножественнымОтборам()

&НаКлиенте
//Процедура - обработчик события нажатия декорации МножественныйОтборПоВидуЦен
//
Процедура МножественныйОтборПоВидуЦенНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПрайсЛистыКонтрагентов.Форма.ФормаРедактированияВидовЦенКонтрагента", Новый Структура("МассивВидыЦенКонтрагента", ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("ВидыЦенКонтрагента")), ЭтаФорма);
	
КонецПроцедуры // МножественныйОтборПоВидуЦенНажатие()

&НаКлиенте
//Процедура - обработчик события нажатия декорации МножественныйОтборПоЦенновойГруппе
//
Процедура МножественныйОтборПоЦенновойГруппеНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПрайсЛистыКонтрагентов.Форма.ФормаРедактированияЦеновыхГрупп", Новый Структура("МассивЦеновыеГруппы", ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("ЦеновыеГруппы")), ЭтаФорма);
	
КонецПроцедуры // МножественныйОтборПоЦенновойГруппеНажатие()

&НаКлиенте
//Процедура - обработчик события нажатия декорации МножественныйОтборПоНоменклатуре
//
Процедура МножественныйОтборПоНоменклатуреНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПрайсЛистыКонтрагентов.Форма.ФормаРедактированияНоменклатуры", Новый Структура("МассивНоменклатуры", ЗаполнитьМассивПоТаблицнойЧастиНаКлиенте("Номенклатура")), ЭтаФорма);
	
КонецПроцедуры // МножественныйОтборПоНоменклатуреНажатие()
