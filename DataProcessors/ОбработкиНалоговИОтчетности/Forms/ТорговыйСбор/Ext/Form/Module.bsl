
&НаКлиенте
Перем СтруктураЗаписейПараметровУчета;

&НаКлиенте
Перем ВыводилисьДанныеДляБанка;


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		Иначе
			Сообщить(НСтр("ru='Не выбрана текущая организация'"));
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СобытиеКалендаря) Тогда
		Объект.СобытиеКалендаря = Параметры.СобытиеКалендаря;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеСобытия) Тогда
		
		Если ЗначениеЗаполнено(Параметры.СостояниеСобытия) Тогда
			
			Объект.СостояниеСобытия = Параметры.СостояниеСобытия;
			
		Иначе
			
			Объект.СостояниеСобытия = КалендарьОтчетности.ПолучитьСостояниеСобытияКалендаря(
				Объект.Организация,
				Объект.СобытиеКалендаря);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ДатыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СобытиеКалендаря, "ДатаДокументаОбработкиСобытия,ДатаОкончанияСобытия,ДатаНачалаДокументов,ДатаОкончанияДокументов");
	
	ПолучитьДанныеОтчетности();
	СверстатьФорму();
	
	ОбновитьДанныеРегистрацииРасходов();
	
	ПериодЗадачиПредставление = ПредставлениеПериода(
		ДатыСобытия.ДатаНачалаДокументов,
		КонецДня(ДатыСобытия.ДатаОкончанияДокументов),
		"ФП=Истина");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться") Тогда
		
		Элементы.СтраницаТорговыйСбор.ТекущаяСтраница = Элементы.РезультатРасчета;
		
	ИначеЕсли Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить") Тогда
		
		Элементы.СтраницаТорговыйСбор.ТекущаяСтраница = Элементы.РезультатРасчета;
		
	Иначе
		
		Элементы.СтраницаТорговыйСбор.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	ВыводилисьДанныеДляБанка = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаТекущаяОрганизация" Тогда
		Если Окно.Основное Тогда
			ПерейтиПоНавигационнойСсылке("e1cib/navigationpoint/НалогиИОтчетность");
		Иначе
			Закрыть();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСостоянияСобытияКалендаря" Тогда
		Если Параметр = Объект.СобытиеКалендаря
				И Источник <> ЭтаФорма
				И Окно<> Неопределено
				И Не Окно.Основное Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


&НаКлиенте
Процедура ВсегоНалогаКУплатеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьПолнуюТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьРасходыВПрограмме(Команда)
	
	ДатаУплаты = ТекущаяДата();
	
	Если ТаблицаТорговыйСбор.Количество() > 1 Тогда
		
		Список = Новый СписокЗначений;
		Для Каждого Строка Из ТаблицаТорговыйСбор Цикл
			Список.Добавить(Строка.ДокументВзаиморасчетовСБюджетом,НСтр("ru='ОКАТО: '")+Строка.ОКАТО);
		КонецЦикла;
		
		ОткрытьФорму(
			"Обработка.ОбработкиНалоговИОтчетности.Форма.ГрупповаяРегистрацияРасходов", 
			Новый Структура(
				"Организация,СписокКПоиску",
				Объект.Организация,
				Список));
		
	Иначе
		
		Если НЕ ТаблицаТорговыйСбор[0].НаличнаяУплата.Пустая() Тогда
			ПоказатьЗначение(,ТаблицаТорговыйСбор[0].НаличнаяУплата);
			Возврат;
		КонецЕсли;
		
		оп = Новый ОписаниеОповещения("ОповещениеВыбораДаты", ЭтотОбъект);
		
		ПоказатьВводДаты(оп, ДатаУплаты, НСтр("ru='Когда был уплачен торговый сбор?'"));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаТорговыйСбор[0].НаличнаяУплата = РегламентированнаяОтчетностьУСН.ЗарегистрироватьРасходыПоНалогамИВзносамНаличные(
		Объект.Организация,
		ТаблицаТорговыйСбор[0].ДокументВзаиморасчетовСБюджетом,
		ВыбраннаяДата);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Расходы зарегестрированы'"),
		ПолучитьНавигационнуюСсылку(ТаблицаТорговыйСбор[0].НаличнаяУплата),
		НСтр("ru='Документ регистрации расходов на налоги'"),
		БиблиотекаКартинок.Информация32);
	ОбновитьДанныеРегистрацииРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручение(Команда)
	
	Если ВсегоНалогаКУплате = "0,00 р." Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ВыводилисьДанныеДляБанка = Истина;
	
	оп = Новый ОписаниеОповещения("ОповещениеПолученияСпискаПлатежек", ЭтотОбъект, Новый Структура("Файл", Ложь));
	ПолучитьСписокПлатежек(оп);
	
КонецПроцедуры


&НаКлиенте
Процедура ОповещениеПолученияСпискаПлатежек(БанкСчетСтруктура, Параметры) Экспорт
	
	Если БанкСчетСтруктура <> Неопределено Тогда
		Если Параметры.Файл Тогда
			Если ПроверитьНаличиеГосОргана("ПолучитьФайлКлиентБанка") Тогда
				ПолучитьСписокПлатежекНаСервере();
				СписокПлатежек = Новый СписокЗначений;
				Для Каждого Строка Из ТаблицаТорговыйСбор Цикл
					СписокПлатежек.Добавить(Строка.БезналичнаяУплата);
				КонецЦикла;
				
				БанкСчетСтруктура.Вставить("СписокПлатежек", СписокПлатежек);
				ОткрытьФорму(
					"Обработка.КлиентБанк.Форма.СохранениеПлатежек",
					БанкСчетСтруктура);
			КонецЕсли;
		Иначе
			Если ПроверитьНаличиеГосОргана("РаспечататьПлатежноеПоручениеЗавершение") Тогда
				РаспечататьПлатежноеПоручениеЗавершение();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиДляКлиентБанка(Команда)
	
	Если ВсегоНалогаКУплате = "0,00 р." Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ВыводилисьДанныеДляБанка = Истина;
	оп = Новый ОписаниеОповещения("ОповещениеПолученияСпискаПлатежек", ЭтотОбъект, Новый Структура("Файл", Истина));
	ПолучитьСписокПлатежек(оп);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьКвитанциюДляСбербанка(Команда)
	Если ПроверитьНаличиеГосОргана("РаспечататьКвитанциюЗавершение") Тогда
		РаспечататьКвитанциюЗавершение();
	КонецЕсли;

КонецПроцедуры


//-----------------------------------------------------------------------------
// События переходов


&НаКлиенте
Процедура ПереходЗаполнение(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Заполнить");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		"");
	
	ПараметрыФормы = Новый Структура("СобытиеКалендаря", Объект.СобытиеКалендаря);
	
	КалендарьОтчетностиКлиент.ОткрытьФормуНачалаЗаполнения(ЭтаФорма,ПараметрыФормы);
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходУплата(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		0);
	
	Элементы.СтраницаТорговыйСбор.ТекущаяСтраница = Элементы.РезультатРасчета;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходРезультатРасчета1Нажатие(Элемент)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		0);
	
	Элементы.СтраницаТорговыйСбор.ТекущаяСтраница = Элементы.РезультатРасчета;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходВыполнил(Команда)
	
		Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Завершить");
		
		КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
			Объект.Организация,
			Объект.СобытиеКалендаря,
			Объект.СостояниеСобытия,
			0);
		
		Элементы.СтраницаТорговыйСбор.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
		НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
		Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
		
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьЗадачуИзСпискаЗадач(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Завершить");
	
	КалендарьОтчетности.ЗавершитьСобытиеКалендаряОтчетности(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		"");
	
	ПерейтиПоНавигационнойСсылке("e1cib/navigationpoint/desktop");
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
	Если Окно <> Неопределено И Не Окно.Основное Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Конец событий переходов
//-----------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


&НаКлиенте
Процедура РаспечататьКвитанциюЗавершение() Экспорт
	СписокДокументов = Новый Массив;
	
	Для Каждого Строка Из ТаблицаТорговыйСбор Цикл
		СписокДокументов.Добавить(Строка.ДокументВзаиморасчетовСБюджетом);
	КонецЦикла;
	
	СтруктураПечати = ВыгрузитьДокументВФайл(СписокДокументов, "Квитанция");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, СтруктураПечати.НаименованиеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручениеЗавершение() Экспорт
	
	ПолучитьСписокПлатежекНаСервере();
	СписокДокументов = Новый Массив;
	
	Для Каждого Строка Из ТаблицаТорговыйСбор Цикл
		СписокДокументов.Добавить(Строка.БезналичнаяУплата);
	КонецЦикла;
	
	СтруктураПечати = ВыгрузитьДокументВФайл(СписокДокументов, "ПлатежноеПоручение");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, СтруктураПечати.НаименованиеФайла, Истина);
	
КонецПроцедуры


&наСервере
Функция ПолучитьСписокПлатежекНаСервере()
	
	Для Каждого Строка Из ТаблицаТорговыйСбор Цикл
		Ссылка = РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(Строка.ДокументВзаиморасчетовСБюджетом, БанковскийСчетПоУмолчанию);
		Строка.БезналичнаяУплата = Ссылка;
	КонецЦикла;
	
КонецФункции



// Процедура заполняет данные формы по данным ранее сформированной отчетности
//
&НаСервере
Процедура ПолучитьДанныеОтчетности()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности КАК ПоказательОтчетности
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности В ИЕРАРХИИ(&ГруппаПоказателя)");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", Объект.СобытиеКалендаря.ДатаДокументаОбработкиСобытия);
	
	Запрос.УстановитьПараметр("ГруппаПоказателя", ПланыВидовХарактеристик.ПоказателиОтчетности.ТорговыйСбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПоказательОтчетности = ПланыВидовХарактеристик.ПоказателиОтчетности.хзТаблицаТорговыхТочек Тогда
			
			Табличка = РегламентированнаяОтчетностьУСН.ПолучитьЗначениеПроизвольногоПоказателя(
				Объект.Организация,
				Объект.СобытиеКалендаря.ДатаДокументаОбработкиСобытия,
				ПланыВидовХарактеристик.ПоказателиОтчетности.хзТаблицаТорговыхТочек);
			
			Если Табличка = Неопределено Тогда
				ЗаписьЖурналаРегистрации(
					НСтр("ru='ТорговыйСбор.Заполнение задачи'"),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					НСтр("ru='Не удалось получить данные для ТаблицаТорговыйСбор'"));
			Иначе
				
				Табличка = Табличка.Получить();
				СсылкиИФНС = ПолучитьСсылкиИФНС(Табличка.ВыгрузитьКолонку("КодИФНС"));
				
				Для Каждого стр из Табличка Цикл
					
					новСтр = ТаблицаТорговыйСбор.Добавить();
					Если СсылкиИФНС.Получить(Стр.КодИФНС) = Неопределено Тогда
						Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
							ЗаписьЖурналаРегистрации(НСтр("ru='Не загружены классификаторы налоговых органов'"),УровеньЖурналаРегистрации.Ошибка,Метаданные.Справочники.НалоговыеОрганы, , НСтр("ru='Необходимо выполнить загрузку налоговых органов'"));
						Иначе
							Сообщить(НСтр("ru='Не загружены классификаторы налоговых органов'"));
						КонецЕсли;
					Иначе
						новСтр.КодИФНС = СсылкиИФНС[стр.КодИФНС].Ссылка;
					КонецЕсли;
					новСтр.СуммаВзаиморасчетовСБюджетом = стр.СуммаВзаиморасчетов;
					новСтр.ДокументВзаиморасчетовСБюджетом = стр.ДокументВзаиморасчетовСБюджетом;
					
					
				КонецЦикла;
				
				АдресТаблицаТорговыйСбор = ПоместитьВоВременноеХранилище(Табличка,УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоНалогаКУплате = ""+ТаблицаТорговыйСбор.Итог("СуммаВзаиморасчетовСБюджетом") + " р.";
	Если ТаблицаТорговыйСбор.Количество() = 1 Тогда
		Элементы.ВсегоНалогаКУплате.Видимость= Ложь;
	Иначе
		Элементы.ВсегоНалогаКУплате.Видимость= Истина;
	КонецЕсли;
	
	НайтиДокументОплаты();
	
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов управления
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
КонецПроцедуры


&НаКлиенте
Процедура НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок()
	
	ИмяКнопки = ПолучитьИмяЭлементаКнопкиПоУмолчанию(Элементы.СтраницаТорговыйСбор.ТекущаяСтраница.Имя);
	
	Если НЕ ПустаяСтрока(ИмяКнопки) Тогда
		Элементы[ИмяКнопки].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Попытка
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.СтраницаТорговыйСбор.ТекущаяСтраница.Заголовок, ПериодЗадачиПредставление);
		РегламентированнаяОтчетностьУСНКлиентСервер.УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Объект.Организация);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяЭлементаКнопкиПоУмолчанию(ИмяСтраницы)
	
	Если ИмяСтраницы = "РезультатРасчета" Тогда
		Возврат "ПереходВыполнил";
	ИначеЕсли ИмяСтраницы = "ЗадачаВыполнена" Тогда
		Возврат "";
	Иначе
		ВызватьИсключение НСтр("ru='Неизвестное имя текущей страницы'");
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура НайтиДокументОплаты()
	
	
КонецПроцедуры

&НаСервере
Процедура СверстатьФорму()
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолнуюТаблицу(НомерСтрокиТаблицы = Неопределено)
	//
	//ОткрытьФорму(
	//	"Обработка.ОбработкиНалоговИОтчетности.Форма.ТаблицаЕНВДРасшифровка",
	//	Новый Структура(
	//		"АдресОбщейТаблицы,АдресТаблицыПоОкато,ПолнаяТаблица,НомерСтроки",
	//		АдресТаблицаТорговыйСбор,
	//		АдресТаблицаЕНВДПоОкато,
	//		НомерСтрокиТаблицы = Неопределено,
	//		НомерСтрокиТаблицы));
	//
	//
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокПлатежек(ОповещениеВыбораПлатежек)
	
	СписокПлатежек = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(БанковскийСчетПоУмолчанию) Тогда
		оп = Новый ОписаниеОповещения("ПолучениеБанкСчета", ЭтотОбъект, Новый Структура("ОповещениеВыбораПлатежек", ОповещениеВыбораПлатежек));
		РегламентированнаяОтчетностьУСНКлиент.ПолучитьБанковскийСчетДляУплатыНалога(оп, Объект.Организация);
		Возврат;
	КонецЕсли;
	
	ПолучитьСписокПлатежекНаСервере();
	Возвращаем = Новый Структура ("СписокПлатежек, БанковскийСчет",СписокПлатежек, БанковскийСчетПоУмолчанию);
	ВыполнитьОбработкуОповещения(ОповещениеВыбораПлатежек, Возвращаем);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеБанкСчета(Счет, Параметры) Экспорт
	Если ЗначениеЗаполнено(Счет) Тогда
		БанковскийСчетПоУмолчанию = Счет;
		СписокПлатежек = Новый СписокЗначений;
		ПолучитьСписокПлатежекНаСервере();
		Возвращаем = Новый Структура ("СписокПлатежек, БанковскийСчет",СписокПлатежек, Счет);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбораПлатежек, Возвращаем);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ОбновитьДанныеРегистрацииРасходов()
	Если ТаблицаТорговыйСбор.Количество() > 1 Тогда
		Элементы.ОтразитьРасходыВПрограмме.Заголовок = НСтр("ru='Зарегистрировать расходы в программе'");
	Иначе
		Элементы.ОтразитьРасходыВПрограмме.Заголовок = ТаблицаТорговыйСбор[0].НаличнаяУплата;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ГосОрганСуществует( КодГосОргана)
	
	ТаблицаДокументов = ТаблицаТорговыйСбор.Выгрузить(,"ДокументВзаиморасчетовСБюджетом");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачислениеНалоговНалоги.КодИФНС КАК КодИФНС
	|ИЗ
	|	Документ.НачислениеНалогов.Налоги КАК НачислениеНалоговНалоги
	|ГДЕ
	|	НачислениеНалоговНалоги.Ссылка В(&МассивДокументов)
	|	И НачислениеНалоговНалоги.НомерСтроки = 1
	|	И НачислениеНалоговНалоги.ВидНалога = &ВидНалога");
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаДокументаВзаиморасчетов Из ТаблицаДокументов Цикл
		МассивДокументов.Добавить( СтрокаДокументаВзаиморасчетов.ДокументВзаиморасчетовСБюджетом);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ВидНалога", Справочники.ВидыНалогов.ТорговыйСбор);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодГосОргана = Выборка.КодИФНС;
		ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, КодГосОргана);
		Если Не ЗначениеЗаполнено(ГосОрган.Ссылка) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	

	
КонецФункции


Функция ПолучитьСсылкиИФНС(ИФНС)
	
	
	
	Соответствия = Новый Соответствие();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НалоговыеОрганы.Ссылка КАК Ссылка,
		|	РегистрацииВНалоговомОргане.Код КАК КодИФНС,
		|	НалоговыеОрганы.Ссылка.Наименование КАК Наименование,
		|	РегистрацииВНалоговомОргане.Код КАК Код
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НалоговыеОрганы КАК НалоговыеОрганы
		|		ПО РегистрацииВНалоговомОргане.Код = НалоговыеОрганы.Код
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Код В(&Ссылки)");

	Запрос.УстановитьПараметр("Ссылки", ИФНС);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Соответствия.Вставить(Выборка.КодИФНС, Новый Структура("Ссылка,Наименование",Выборка.Ссылка, Выборка.Наименование));
	КонецЦикла;
	
	Возврат Соответствия;
	
КонецФункции


&НаСервереБезКонтекста
Функция ВыгрузитьДокументВФайл(МассивОбъектов, ВидФайла)
	
	
	ТабДок = Новый ТабличныйДокумент;
	
	Если ВидФайла = "Квитанция" Тогда
		Для Каждого Объект Из МассивОбъектов Цикл
			ТабДокОбъекта = Документы.НачислениеНалогов.СформироватьКвитанцию(Объект);
			ТабДокОбъекта.Область().СоздатьФорматСтрок();
			Если ТабДок = Неопределено Тогда
				ТабДок = ТабДокОбъекта;
			Иначе
				ТабДок.Вывести(ТабДокОбъекта);
			КонецЕсли;
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
	ИначеЕсли ВидФайла = "ПлатежноеПоручение" Тогда
		ОбъектыПечати = Новый СписокЗначений;
		ТабДок = Документы.ПлатежноеПоручение.ПечатнаяФорма(МассивОбъектов, ОбъектыПечати);
	КонецЕсли;
	
	СтруктураПечати = Новый Структура ("АдресФайла, НаименованиеФайла");
	
	Если ТабДок = Неопределено Тогда
		Возврат СтруктураПечати;
	Конецесли;
	
	Каталог = КаталогВременныхФайлов()+ОбщегоНазначения.ЗначениеРазделителяСеанса()+"\";
	
	ПроверкаКаталога = Новый Файл(Каталог);
	Если НЕ ПроверкаКаталога.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;
	ПризнакОшибки = Ложь;
	РасширениеФайла = ".pdf" ;
	НаименованиеФайла = Строка(?(МассивОбъектов.Количество() > 0,МассивОбъектов[0], НСтр("ru='Результат'")));
	НаименованиеФайла = ?(СтрДлина(НаименованиеФайла)+СтрДлина(РасширениеФайла)>64, Лев(НаименованиеФайла,64 - СтрДлина(РасширениеФайла)),НаименованиеФайла);
	НаименованиеФайла = СтрЗаменить(НаименованиеФайла, ":","_");
	
	ПолноеИмяФайла = Каталог + НаименованиеФайла + РасширениеФайла;
	ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, """","");
	
	Попытка
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
	Исключение
		ПризнакОшибки = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка сохранения файла на сервере'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При сохранении файла на сервере в области данных %1 произошла ошибка:
						|%2'"),
				ОбщегоНазначения.ЗначениеРазделителяСеанса(),
				ОписаниеОшибки()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		Возврат СтруктураПечати;
		
	Конецпопытки;
	ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ПолноеИмяФайла);
	УдалитьФайлы(Каталог);
	СтруктураПечати.АдресФайла = АдресФайла;
	СтруктураПечати.НаименованиеФайла = НаименованиеФайла+РасширениеФайла;
	
	Возврат СтруктураПечати;

	
КонецФункции

&НаКлиенте
Функция ПроверитьНаличиеГосОргана(ИмяПроцедурыПоЗавершениюСозданияГосОргана)
	КодГосОргана = "";
	
	Если ГосОрганСуществует( КодГосОргана) Тогда
		Возврат Истина;
	Иначе
		ДопПараметры = Новый Структура("ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана", ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана);
		ТекстВопроса = НСтр("ru='В справочнике «Контрагенты» не задан налоговый орган для уплаты налога.
			|Создать его автоматически?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОСозданииГосОргана",
			ЭтаФорма, ДопПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать автоматически'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Создать вручную'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да, НСтр("ru='Отсутствует налоговый орган'"));
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросОСозданииГосОргана(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
		ПараметрыФормы.Вставить("КодГосударственногоОргана", ДопПараметры.КодГосОргана);
		ПараметрыФормы.Вставить("ИмяПроцедурыПоЗавершениюСозданияГосОргана",ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана);
		ПараметрыФормы.Вставить("ЗапретРедактированияКода", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры)
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки, ДопПараметры.КодГосОргана);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания налогового органа
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения,ИмяПроцедурыПоЗавершениюСозданияГосОргана", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду, КодГосОргана", ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана, ДопПараметры.КодГосОргана);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьПлатежноеПоручениеЗавершение" Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "ПолучитьФайлКлиентБанка" Тогда
			ПолучитьФайлКлиентБанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлКлиентБанка() Экспорт
	
	БанкСчетСтруктура = Новый Структура("БанковскийСчет", БанковскийСчетПоУмолчанию);
	
	ПолучитьСписокПлатежекНаСервере();
	СписокПлатежек = Новый СписокЗначений;
	СписокПлатежек = Новый СписокЗначений;
	Для Каждого Строка Из ТаблицаТорговыйСбор Цикл
		СписокПлатежек.Добавить(Строка.БезналичнаяУплата);
	КонецЦикла;
	
	БанкСчетСтруктура.Вставить("СписокПлатежек", СписокПлатежек);
	
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.СохранениеПлатежек",
		БанкСчетСтруктура);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "", КодНалоговогоОрганаПолучателя)
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОрганаПолучателя);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

