
&НаКлиенте
Перем СтруктураЗаписейПараметровУчета;

&НаКлиенте
Перем ВыводилисьДанныеДляБанка;


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		Иначе
			Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Организация =УправлениеНебольшойФирмойСервер.ПолучитьПредопределеннуюОрганизацию();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СобытиеКалендаря) Тогда
		Объект.СобытиеКалендаря = Параметры.СобытиеКалендаря;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеСобытия) Тогда
		
		Если ЗначениеЗаполнено(Параметры.СостояниеСобытия) Тогда
			
			Объект.СостояниеСобытия = Параметры.СостояниеСобытия;
			
		Иначе
			
			Объект.СостояниеСобытия = КалендарьОтчетности.ПолучитьСостояниеСобытияКалендаря(
				Объект.Организация,
				Объект.СобытиеКалендаря);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектНалогообложения = РегламентированнаяОтчетностьУСН.ОбъектНалогообложенияНаДату(Объект.Организация,Объект.СобытиеКалендаря);
	
	ДатыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СобытиеКалендаря, "ДатаДокументаОбработкиСобытия,ДатаОкончанияСобытия,ДатаНачалаДокументов,ДатаОкончанияДокументов");
	
	ДокументВзаиморасчетовСБюджетом = РегламентированнаяОтчетностьУСН.ПолучитьДокументВзаиморасчетовСБюджетом(
		Объект.Организация,
		Справочники.ВидыНалогов.АвансовыйПлатежПриУСН,
		ДатыСобытия.ДатаДокументаОбработкиСобытия,
		ДатыСобытия.ДатаОкончанияСобытия,
		Истина);
	
	ПолучитьДанныеОтчетности();
	
	Элементы.ГруппаУплатыЧерезБанкОписание.Видимость = Ложь;
	Элементы.ГруппаУплатыЧерезКассуОписание.Видимость = Ложь;
	
	ПериодЗадачиПредставление = ПредставлениеПериода(
		ДатыСобытия.ДатаНачалаДокументов,
		КонецДня(ДатыСобытия.ДатаОкончанияДокументов),
		"ФП=Истина");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться") Тогда
		
		Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница = Элементы.РезультатРасчета;
		
	ИначеЕсли Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить") Тогда
		
		Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница = Элементы.УплатаАвансовогоПлатежа;
		
	Иначе
		
		Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
		
	КонецЕсли;
	
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	ВыводилисьДанныеДляБанка = Ложь;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСостоянияСобытияКалендаря" Тогда
		Если Параметр = Объект.СобытиеКалендаря
				И Источник <> ЭтаФорма
				И Окно<> Неопределено
				И Не Окно.Основное Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


&НаКлиенте
Процедура УплатаЧерезБанк(Команда)
	Элементы.ГруппаУплатыЧерезБанкОписание.Видимость = Истина;
	Элементы.ГруппаУплатыЧерезКассуОписание.Видимость = Ложь;
	Элементы.УплатаЧерезБанк.Шрифт = Новый Шрифт(Элементы.УплатаЧерезБанк.Шрифт,,,Истина);
	Элементы.УплатаЧерезКассу.Шрифт = Новый Шрифт(Элементы.УплатаЧерезКассу.Шрифт,,,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УплатаЧерезКассу(Команда)
	Элементы.ГруппаУплатыЧерезБанкОписание.Видимость = Ложь;
	Элементы.ГруппаУплатыЧерезКассуОписание.Видимость = Истина;
	Элементы.УплатаЧерезБанк.Шрифт = Новый Шрифт(Элементы.УплатаЧерезБанк.Шрифт,,,Ложь);
	Элементы.УплатаЧерезКассу.Шрифт = Новый Шрифт(Элементы.УплатаЧерезКассу.Шрифт,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтраницыРезультатаРасчетаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "РезультатРасчетаПредставляение" Тогда
		// Возможно необходимо перерасчет
		// пересчитаем
		ОбновитьРасчет();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	
	ОбновитьРасчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьРасходыВПрограмме(Команда)
	
	ДатаУплаты = ТекущаяДата();
	
	оп = Новый ОписаниеОповещения("ОповещениеВыбораДаты", ЭтотОбъект);
	
	ПоказатьВводДаты(оп, ДатаУплаты, НСтр("ru='Когда был уплачен авансовый платеж?'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = РегламентированнаяОтчетностьУСН.ЗарегистрироватьРасходыПоНалогамИВзносамНаличные(
		Объект.Организация,
		ДокументВзаиморасчетовСБюджетом,
		ВыбраннаяДата);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Расходы зарегестрированы'"),
		ПолучитьНавигационнуюСсылку(Ссылка),
		НСтр("ru='Документ регистрации расходов на налоги'"),
		БиблиотекаКартинок.Информация32);
	
	ВыводилисьДанныеДляБанка = Истина;
	
	СсылкаДокументаНаличнойУплаты = Ссылка;
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоходовЗаГодЕННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
	
	ОткрытьФорму(
		"Отчет.ДоходыРасходы.ФормаОбъекта",
		Новый Структура("Организация,СформироватьПриОткрытии, Период,ВидОтчета", Объект.Организация, Истина, ПериодПараметр, "Доходы"));
КонецПроцедуры

&НаКлиенте
Процедура СуммаРасходовЗаГодЕННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбъектНалогообложения = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНалогообложения.Доходы") Тогда
		
		СпсКнопок = Новый СписокЗначений;
		СпсКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Показать расходы'"));
		СпсКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть'"));
		оп = Новый ОписаниеОповещения("ОповещениеПоказатьРасходы", ЭтотОбъект);
		ПоказатьВопрос(
			оп,
			НСтр("ru='Вы используете объект налоогообложения «Доходы».
					|В этом случае расходы не учитываются при расчете налога.'"),
			СпсКнопок);
		Возврат;
	
	КонецЕсли;
	
	ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
	
	ОткрытьФорму(
		"Отчет.ДоходыРасходы.ФормаОбъекта",
		Новый Структура("Организация, СформироватьПриОткрытии, Период,ВидОтчета",Объект.Организация, Истина, ПериодПараметр, "Расходы"));
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоказатьРасходы(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
		
		ОткрытьФорму(
			"Отчет.ДоходыРасходы.ФормаОбъекта",
			Новый Структура("Организация, СформироватьПриОткрытии, Период,ВидОтчета",Объект.Организация, Истина, ПериодПараметр, "Расходы"));
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СуммаАвансовыхПлатежейЗаГодЕННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
	
	СпсВидов = Новый СписокЗначений;
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.АвансовыйПлатежПриУСН"));
	
	ОткрытьФорму(
		"Отчет.УплатыНалоговИВзносов.ФормаОбъекта",
		Новый Структура(
			"Организация, СформироватьПриОткрытии, Период,ВидВзаиморасчетов, УчетВыплатТекущегоГода",
			Объект.Организация,
			Истина,
			ПериодПараметр,
			СпсВидов,
			Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСтраховыхВзносовЕННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбъектНалогообложения = ПредопределенноеЗначение("Перечисление.ВидыОбъектовНалогообложения.ДоходыМинусРасходы") Тогда
		
		СпсКнопок = Новый СписокЗначений;
		СпсКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Показать страховые взносы'"));
		СпсКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть'"));
		
		оп = Новый ОписаниеОповещения("ОповещениеПоказСтраховыхВзносов", ЭтотОбъект);
		ПоказатьВопрос(
			оп,
			НСтр("ru='Вы используете объект налоогообложения «Доходы, уменьшенные на величину расходов».
					|В этом случае страховые взносы включены в состав расходов.'"),
			СпсКнопок);
		Возврат;
	ИначеЕсли СуммаСтраховыхВзносовКУплатеАП <> СуммаСтраховыхВзносовАП Тогда
		
		// К вычету принимается 50 процентов от суммы налога
		СпсКнопок = Новый СписокЗначений;
		СпсКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Показать страховые взносы'"));
		СпсКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть'"));
		оп = Новый ОписаниеОповещения("ОповещениеПоказСтраховыхВзносов", ЭтотОбъект);
		Если Зачет100ПроцСтрахВзносовАП Тогда
			ПоказатьВопрос(
				оп,
				НСтр("ru='Сумма страховых взносов превысила сумму налога.
						|В этом случае сумма страховых взносов вычитается не полностью.'"),
				СпсКнопок);
			
		Иначе
			ПоказатьВопрос(
				оп,
				НСтр("ru='Сумма страховых взносов превысила 50% от суммы налога.
						|В этом случае сумма налога уменьшается на 50%.'"),
				СпсКнопок);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуСтраховыхВзносов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСтраховыхВзносов() 
	
	ПериодПараметр = КалендарьОтчетностиПовтИсп.ПолучитьСтандартныйПериодДокументовДляСобытия(Объект.СобытиеКалендаря);
	
	СпсВидов = Новый СписокЗначений;
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРНакопительная"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСтраховая"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСвыше300тр"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ТФОМС"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФФОМС"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРНакопительнаяСотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ПФРСтраховаяСотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФСССотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФССТравматизмСотрудники"));
	СпсВидов.Добавить(ПредопределенноеЗначение("Справочник.ВидыНалогов.ФОМССотрудники"));
	
	ОткрытьФорму(
		"Отчет.УплатыНалоговИВзносов.ФормаОбъекта",
		Новый Структура(
			"Организация, СформироватьПриОткрытии, Период,ВидВзаиморасчетов",
			Объект.Организация,
			Истина,
			ПериодПараметр,
			СпсВидов));

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПоказСтраховыхВзносов(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуСтраховыхВзносов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаЕННажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗаписейПараметровУчета) Тогда
		СтруктураЗаписейПараметровУчета = ПолучитьСтруктуруЗаписиПараметровУчета(Объект.Организация, Объект.СобытиеКалендаря);
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.СистемыНалогообложенияОрганизаций.ФормаЗаписи",
		СтруктураЗаписейПараметровУчета);
	

КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручение(Команда)
	
	Если ВсегоКУплатеАП = "0,00 р." Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ВыводилисьДанныеДляБанка = Истина;
	
	Если ПлатежноеПоручение.Пустая() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеВыбораСчета", ЭтотОбъект, Новый Структура("Файл", Ложь));
		РегламентированнаяОтчетностьУСНКлиент.ПолучитьБанковскийСчетДляУплатыНалога(оп, Объект.Организация);
		Возврат;
	КонецЕсли;
	
	РаспечататьПлатежноеПоручениеЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораСчета(БанковскийСчет, Параметры) Экспорт
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	БанковскийСчетПоУмолчанию = БанковскийСчет;
	
	Если Параметры.Файл Тогда
		БанкСчетСтруктура = Новый Структура("БанковскийСчет", БанковскийСчетПоУмолчанию);
		
		ПлатежноеПоручение = РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(ДокументВзаиморасчетовСБюджетом, БанковскийСчетПоУмолчанию);
		
		СписокПлатежек = Новый СписокЗначений;
		СписокПлатежек.Добавить(ПлатежноеПоручение);
		ОткрытьФорму(
			"Обработка.КлиентБанк.Форма.СохранениеПлатежек",
			Новый Структура("БанковскийСчет, СписокПлатежек",БанковскийСчетПоУмолчанию ,СписокПлатежек),,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если ПроверитьНаличиеГосОргана("РаспечататьПлатежноеПоручениеЗавершение") Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиДляКлиентБанка(Команда)
	
	ВыводилисьДанныеДляБанка = Истина;
	
	Если ВсегоКУплатеАП = "0,00 р." Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;
	
	Если ПлатежноеПоручение.Пустая() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеВыбораСчета", ЭтотОбъект, Новый Структура("Файл", Истина));
		РегламентированнаяОтчетностьУСНКлиент.ПолучитьБанковскийСчетДляУплатыНалога(оп, Объект.Организация);
		Возврат;
	КонецЕсли;
	СписокПлатежек = Новый СписокЗначений;
	СписокПлатежек.Добавить(ПлатежноеПоручение);
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.СохранениеПлатежек",
		Новый Структура("БанковскийСчет, СписокПлатежек",БанковскийСчетПоУмолчанию ,СписокПлатежек),,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьКвитанциюДляСбербанка(Команда)
	
	Если ПроверитьНаличиеГосОргана("РаспечататьКвитанциюЗавершение") Тогда
		РаспечататьКвитанциюЗавершение();
	КонецЕсли;
	
КонецПроцедуры


//-----------------------------------------------------------------------------
// События переходов


&НаКлиенте
Процедура ПереходЗаполнение(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Заполнить");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		"");
	
	ПараметрыФормы = Новый Структура("Организация,СобытиеКалендаря", Объект.Организация,Объект.СобытиеКалендаря);
	
	КалендарьОтчетностиКлиент.ОткрытьФормуНачалаЗаполнения(ЭтаФорма,ПараметрыФормы);
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходУплата(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить");
	
	ЗафиксироватьПереходкУплате(Объект.Организация, Объект.СобытиеКалендаря, Объект.СостояниеСобытия, ВсегоКУплатеАП);
	
	Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница = Элементы.УплатаАвансовогоПлатежа;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗафиксироватьПереходкУплате(Организация, Событие, Состояние, ВсегоКУплате)
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		Событие,
		Состояние,
		ВсегоКУплате);
	
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация, Событие);
	Если ЗаписьКалендаря <> Неопределено Тогда
		ОбъектЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
		ОбъектЗаписьКалендаря.Завершено = Истина;
		ОбъектЗаписьКалендаря.Записать();
	КонецЕсли;
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация, Событие);
	Если ЗаписьКалендаря <> Неопределено Тогда
		ОбъектЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
		ОбъектЗаписьКалендаря.Завершено = Ложь;
		ОбъектЗаписьКалендаря.Записать();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПереходРезультатРасчета1Нажатие(Элемент)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		ВсегоКУплатеАП);
	
	Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница = Элементы.РезультатРасчета;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходВыполнил(Команда)
	
	БезСозданияПлатежек = Ложь;
	// ВыводилисьДанныеДляБанка - не инициализируется изначально
	Если СсылкаДокументаНаличнойУплаты.Пустая() И НЕ ВыводилисьДанныеДляБанка И ВсегоКУплатеАП <> "0,00 р." Тогда
		
		оп = Новый ОписаниеОповещения("ПодтверждениеПереходВыполнил", ЭтотОбъект);
		ПоказатьВопрос(
			оп,
			НСтр("ru='Платежки не создавались. Расходы через кассу не зарегистрированы.
			         |Вы уверены, что все выполнено?'"),
			РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	БезСозданияПлатежек = Истина;
	
	ПереходВыполнил1(БезСозданияПлатежек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПереходВыполнил(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереходВыполнил1(Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПереходВыполнил1(БезСозданияПлатежек)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Завершено");
	
	КалендарьОтчетности.ЗавершитьСобытиеКалендаряОтчетности(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		"");
	
	Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности"));
	Оповестить("Запись_ЗаписиКалендаряПодготовкиОтчетности");
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияТекстОписание6ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ОткрытаИзФормыСобытия,СобытиеКалендаря, Организация", Истина, Объект.СобытиеКалендаря, Объект.Организация);
	ОткрытьФорму("Документ.ЗаписиУСН.Форма.ФормаСпискаЗаписиПрочие", ПараметрыФормы);
КонецПроцедуры


// Конец событий переходов
//-----------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


// Процедура заполняет данные формы по данным ранее сформированной отчетности
//
&НаСервере
Процедура ПолучитьДанныеОтчетности()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности.Код КАК КодОтчетности
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности В ИЕРАРХИИ(&ГруппаПоказателя)");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", Объект.СобытиеКалендаря.ДатаДокументаОбработкиСобытия);
	
	Запрос.УстановитьПараметр("ГруппаПоказателя", ПланыВидовХарактеристик.ПоказателиОтчетности.АвансовыйПлатеж);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.КодОтчетности = "СтавкаНалогаАП" Тогда
			ЭтаФорма[Выборка.КодОтчетности] = Формат(Выборка.ЗначениеПоказателя, "ЧЦ=2; ЧДЦ=0; ЧН=" ) + "%";
		ИначеЕсли Выборка.КодОтчетности = "Зачет100ПроцСтрахВзносовАП" Тогда
			Зачет100ПроцСтрахВзносовАП = Выборка.ЗначениеПоказателя;
		Иначе
			ЭтаФорма[Выборка.КодОтчетности] = Формат(Выборка.ЗначениеПоказателя, "ЧДЦ=2; ЧРГ=; ЧН=" ) + " р.";
		КонецЕсли;
	КонецЦикла;
	
	НайтиДокументОплаты();
	
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов управления
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовокНаКлиенте();
	
	Если ЗначениеЗаполнено(СсылкаДокументаНаличнойУплаты) Тогда
		Элементы.ГруппаСтрока10.Видимость = Ложь;
		Элементы.ГруппаСтрока11.Видимость = Ложь;
		Элементы.ГруппаСтрока12.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтрока10.Видимость = Истина;
		Элементы.ГруппаСтрока11.Видимость = Истина;
		Элементы.ГруппаСтрока12.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасчет()
	
	РегламентированнаяОтчетностьУСН.ВыполнитьРасчетАвансовогоПлатежа(
		Объект.Организация,
		КонецДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СобытиеКалендаря,"ДатаДокументаОбработкиСобытия")),
		Объект.СобытиеКалендаря);
		
	
	ПолучитьДанныеОтчетности();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок()
	
	ИмяКнопки = ПолучитьИмяЭлементаКнопкиПоУмолчанию(Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница.Имя);
	
	Если НЕ ПустаяСтрока(ИмяКнопки) Тогда
		Элементы[ИмяКнопки].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница.Заголовок, ПериодЗадачиПредставление);
	РегламентированнаяОтчетностьУСНКлиентСервер.УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовокНаКлиенте()
	
	ИмяСтраницы = Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница.Имя;
	ИмяКнопки = ПолучитьИмяЭлементаКнопкиПоУмолчанию(ИмяСтраницы);
	
	Если НЕ ПустаяСтрока(ИмяКнопки) Тогда
		Элементы[ИмяКнопки].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.СтраницаАвансовогоПлатежа.ТекущаяСтраница.Заголовок, ПериодЗадачиПредставление);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяЭлементаКнопкиПоУмолчанию(ИмяСтраницы)
	
	Если ИмяСтраницы = "РезультатРасчета" Тогда
		Возврат "ПереходДалее";
	ИначеЕсли ИмяСтраницы = "УплатаАвансовогоПлатежа" Тогда
		Возврат "ПереходВыполнил";
	ИначеЕсли ИмяСтраницы = "ЗадачаВыполнена" Тогда
		Возврат "";
	Иначе
		ВызватьИсключение НСтр("ru='Неизвестное имя текущей страницы'");
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗаписиПараметровУчета(Организация, СобытиеКалендаря)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СистемыНалогообложенияОрганизацийСрезПоследних.Период,
	|	СистемыНалогообложенияОрганизацийСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(
	|			&Дата,
	|			 Организация = &Организация) КАК СистемыНалогообложенияОрганизацийСрезПоследних");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Ключ = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьКлючЗаписи(
			Новый Структура(
				"Период,Организация",
				Выборка.Период,
				Выборка.Организация));
		
		Возврат Новый Структура("Ключ",Ключ);
		
	Иначе
		Возврат Новый Структура; // мы не должны попадать в эту форму, если параметры на дату события не заполнены
	КонецЕсли;
	
	
КонецФункции

&НаСервере
Процедура НайтиДокументОплаты()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходДенежныхСредствИзКассы.Ссылка
	|ИЗ
	|	Документ.РасходИзКассы КАК РасходДенежныхСредствИзКассы
	|ГДЕ
	|	РасходДенежныхСредствИзКассы.Организация = &Организация
	|	И РасходДенежныхСредствИзКассы.ДокументОснование = &ДокументОснование
	|	И РасходДенежныхСредствИзКассы.Проведен");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументВзаиморасчетовСБюджетом);
	
	Выборка  = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаДокументаНаличнойУплаты = Выборка.Ссылка;
	Иначе
		СсылкаДокументаНаличнойУплаты = Документы.РасходИзКассы.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьКвитанциюЗавершение() Экспорт
	
	СтруктураПечати = ВыгрузитьДокументВФайл(ДокументВзаиморасчетовСБюджетом, "Квитанция");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, СтруктураПечати.НаименованиеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручениеЗавершение() Экспорт
	
	ПлатежноеПоручение = РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(ДокументВзаиморасчетовСБюджетом, БанковскийСчетПоУмолчанию);
	СтруктураПечати = ВыгрузитьДокументВФайл(ПлатежноеПоручение, "ПлатежноеПоручение");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, СтруктураПечати.НаименованиеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеГосОргана(ИмяПроцедурыПоЗавершениюСозданияГосОргана)
	КодГосОргана = "";
	Если ГосОрганСуществует(Объект.Организация, КодГосОргана) Тогда
		Возврат Истина;
	Иначе
		ДопПараметры = Новый Структура("ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана", ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана);
		ТекстВопроса = НСтр("ru='В справочнике «Контрагенты» не задан налоговый орган для уплаты налога.
			|Создать его автоматически?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОСозданииГосОргана",
			ЭтаФорма, ДопПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать автоматически'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Создать вручную'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да, НСтр("ru='Отсутствует налоговый орган'"));
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросОСозданииГосОргана(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
		ПараметрыФормы.Вставить("КодГосударственногоОргана", ДопПараметры.КодГосОргана);
		ПараметрыФормы.Вставить("ИмяПроцедурыПоЗавершениюСозданияГосОргана",ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана);
		ПараметрыФормы.Вставить("ЗапретРедактированияКода", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры)
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки, ДопПараметры.КодГосОргана);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания налогового органа
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения,ИмяПроцедурыПоЗавершениюСозданияГосОргана", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду, КодГосОргана", ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана, ДопПараметры.КодГосОргана);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьПлатежноеПоручениеЗавершение" Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда
			
			Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду" Тогда
				
				ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(,ДополнительныеПараметры.КодГосОргана);
				
				Если ДополнительныеПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
					РаспечататьКвитанциюЗавершение();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "", КодНалоговогоОрганаПолучателя)
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОрганаПолучателя);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГосОрганСуществует(Организация, КодГосОргана)
	КодГосОргана = Организация.КодНалоговогоОрганаПолучателя;
	ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, КодГосОргана);
	
	Возврат ЗначениеЗаполнено(ГосОрган.Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьДокументВФайл(Объект, ВидФайла)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Если ВидФайла = "Квитанция" Тогда
		ТабДок = Документы.НачислениеНалогов.СформироватьКвитанцию(Объект);
	ИначеЕсли ВидФайла = "ПлатежноеПоручение" Тогда
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Объект);
		ОбъектыПечати = Новый СписокЗначений;
		ТабДок = Документы.ПлатежноеПоручение.ПечатнаяФорма(МассивОбъектов, ОбъектыПечати);
	КонецЕсли;
	
	СтруктураПечати = Новый Структура ("АдресФайла, НаименованиеФайла");
	
	Если ТабДок = Неопределено Тогда
		Возврат СтруктураПечати;
	Конецесли;
	
	Каталог = КаталогВременныхФайлов()+ОбщегоНазначения.ЗначениеРазделителяСеанса()+"\";
	
	ПроверкаКаталога = Новый Файл(Каталог);
	Если НЕ ПроверкаКаталога.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;
	ПризнакОшибки = Ложь;
	РасширениеФайла = ".pdf" ;
	НаименованиеФайла = Строка(Объект);
	НаименованиеФайла = ?(СтрДлина(НаименованиеФайла)+СтрДлина(РасширениеФайла)>64, Лев(НаименованиеФайла,64 - СтрДлина(РасширениеФайла)),НаименованиеФайла);
	НаименованиеФайла = СтрЗаменить(НаименованиеФайла, ":","_");
	
	ПолноеИмяФайла = Каталог + НаименованиеФайла + РасширениеФайла;
	ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, """","");
	
	Попытка
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
	Исключение
		ПризнакОшибки = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка сохранения файла на сервере'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При сохранении файла на сервере в области данных %1 произошла ошибка:
						|%2'"),
				ОбщегоНазначения.ЗначениеРазделителяСеанса(),
				ОписаниеОшибки()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		Возврат СтруктураПечати;
		
	Конецпопытки;
	ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ПолноеИмяФайла);
	УдалитьФайлы(Каталог);
	СтруктураПечати.АдресФайла = АдресФайла;
	СтруктураПечати.НаименованиеФайла = НаименованиеФайла+РасширениеФайла;
	
	Возврат СтруктураПечати;
	
КонецФункции





