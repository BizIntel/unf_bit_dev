#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");

	ЭтаФорма.Ежемесячно_ПоДням_ДниМесяца.Очистить();
	Для С=1 По 31 Цикл
		ЭтаФорма.Ежемесячно_ПоДням_ДниМесяца.Добавить(С, С, Ложь);
	КонецЦикла;
	ЭтаФорма.Ежемесячно_ПоДням_ДниМесяца.Добавить(32, "Последний", Ложь);

	ЭтаФорма.Еженедельно_ДниНедели.Очистить();
	ЭтаФорма.Еженедельно_ДниНедели.Добавить(1, НСтр("ru='Понедельник'"), Ложь);
	ЭтаФорма.Еженедельно_ДниНедели.Добавить(2, НСтр("ru='Вторник'"), Ложь);
	ЭтаФорма.Еженедельно_ДниНедели.Добавить(3, НСтр("ru='Среда'"), Ложь);
	ЭтаФорма.Еженедельно_ДниНедели.Добавить(4, НСтр("ru='Четверг'"), Ложь);
	ЭтаФорма.Еженедельно_ДниНедели.Добавить(5, НСтр("ru='Пятница'"), Ложь);
	ЭтаФорма.Еженедельно_ДниНедели.Добавить(6, НСтр("ru='Суббота'"), Ложь);
	ЭтаФорма.Еженедельно_ДниНедели.Добавить(7, НСтр("ru='Воскресенье'"), Ложь);

	ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.Очистить();
	ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.Добавить(1, НСтр("ru='Понедельник'"), Ложь);
	ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.Добавить(2, НСтр("ru='Вторник'"), Ложь);
	ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.Добавить(3, НСтр("ru='Среда'"), Ложь);
	ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.Добавить(4, НСтр("ru='Четверг'"), Ложь);
	ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.Добавить(5, НСтр("ru='Пятница'"), Ложь);
	ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.Добавить(6, НСтр("ru='Суббота'"), Ложь);
	ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.Добавить(7, НСтр("ru='Воскресенье'"), Ложь);

	Если ТипЗнч(Параметры.РасписаниеАвтоматическогоРезервногоКопирования) = ТипСтруктура Тогда

		// Обязательные поля:
		//  ** РасписаниеВключено - Булево;
		//  ** Вариант - Строка - "Ежедневно_ОдинРазВДень", "Ежедневно_НесколькоРазВДень", "Еженедельно",
		//               "Ежемесячно_ПоДням", "Ежемесячно_ПоДнямНедели".
		//               Возможно добавление варианта "Однократно" перед остальными вариантами.
		//  ** Ежедневно_ОдинРазВДень:
		//    *** Время (Время);
		//  ** Ежедневно_НесколькоРазВДень:
		//    *** ВремяНачала (Время);
		//    *** ВремяОкончания (Время);
		//    *** КоличествоЧасовПовтора (Число 1..23);
		//  ** Еженедельно:
		//    *** Время (Время);
		//    *** ДниНедели (Массив (числа 1..7));
		//  ** Ежемесячно_ПоДням:
		//    *** Время (Время);
		//    *** ДниМесяца (Массив (числа 1..32));
		//  ** Ежемесячно_ПоДнямНедели:
		//    *** Время (Время);
		//    *** НомерНедели (Число 1..5) (first, second, third, fourth, last);
		//    *** ДниНедели (Массив (числа 1..7)).

		лкРасписание = ПровестиВалидациюНастроекНаСервере(Параметры.РасписаниеАвтоматическогоРезервногоКопирования);

		ЭтаФорма.Вариант = лкРасписание.Вариант;

		Если ЭтаФорма.Вариант = "Ежедневно_ОдинРазВДень" Тогда
			ЭтаФорма.Ежедневно_ОдинРазВДень_Время = лкРасписание.Ежедневно_ОдинРазВДень.Время;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
		ИначеЕсли ЭтаФорма.Вариант = "Ежедневно_НесколькоРазВДень" Тогда
			ЭтаФорма.Ежедневно_НесколькоРазВДень_ВремяНачала            = лкРасписание.Ежедневно_НесколькоРазВДень.ВремяНачала;
			ЭтаФорма.Ежедневно_НесколькоРазВДень_ВремяОкончания         = лкРасписание.Ежедневно_НесколькоРазВДень.ВремяОкончания;
			ЭтаФорма.Ежедневно_НесколькоРазВДень_КоличествоЧасовПовтора = лкРасписание.Ежедневно_НесколькоРазВДень.КоличествоЧасовПовтора;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
		ИначеЕсли ЭтаФорма.Вариант = "Еженедельно" Тогда
			ЭтаФорма.Еженедельно_Время = лкРасписание.Еженедельно.Время;
			Для Каждого ТекущийЭлементМассива Из лкРасписание.Еженедельно.ДниНедели Цикл
				НайденнаяСтрока = ЭтаФорма.Еженедельно_ДниНедели.НайтиПоЗначению(ТекущийЭлементМассива);
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
		ИначеЕсли ЭтаФорма.Вариант = "Ежемесячно_ПоДням" Тогда
			ЭтаФорма.Ежемесячно_ПоДням_Время = лкРасписание.Ежемесячно_ПоДням.Время;
			Для Каждого ТекущийЭлементМассива Из лкРасписание.Ежемесячно_ПоДням.ДниМесяца Цикл
				НайденнаяСтрока = ЭтаФорма.Ежемесячно_ПоДням_ДниМесяца.НайтиПоЗначению(ТекущийЭлементМассива);
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
		ИначеЕсли ЭтаФорма.Вариант = "Ежемесячно_ПоДнямНедели" Тогда
			ЭтаФорма.Ежемесячно_ПоДнямНедели_Время = лкРасписание.Ежемесячно_ПоДнямНедели.Время;
			ЭтаФорма.Ежемесячно_ПоДнямНедели_НомерНедели = лкРасписание.Ежемесячно_ПоДнямНедели.НомерНедели;
			Для Каждого ТекущийЭлементМассива Из лкРасписание.Ежемесячно_ПоДнямНедели.ДниНедели Цикл
				НайденнаяСтрока = ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели.НайтиПоЗначению(ТекущийЭлементМассива);
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Ежедневно_ОдинРазВДень_ВремяПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Ежедневно_НесколькоРазВДень_ВремяНачалаПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Ежедневно_НесколькоРазВДень_ВремяОкончанияПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Ежедневно_НесколькоРазВДень_КоличествоЧасовПовтораПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Еженедельно_ВремяПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Еженедельно_ДниНеделиПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Ежемесячно_ПоДням_ВремяПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Ежемесячно_ПоДням_ДниМесяцаПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Ежемесячно_ПоДнямНедели_ВремяПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Ежемесячно_ПоДнямНедели_НомерНеделиПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура Ежемесячно_ПоДнямНедели_ДниНеделиПриИзменении(Элемент)

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

&НаКлиенте
Процедура ВариантПриИзменении(Элемент)

	Если ЭтаФорма.Вариант = "Ежедневно_ОдинРазВДень" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
	ИначеЕсли ЭтаФорма.Вариант = "Ежедневно_НесколькоРазВДень" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
	ИначеЕсли ЭтаФорма.Вариант = "Еженедельно" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
	ИначеЕсли ЭтаФорма.Вариант = "Ежемесячно_ПоДням" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
	ИначеЕсли ЭтаФорма.Вариант = "Ежемесячно_ПоДнямНедели" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + ЭтаФорма.Вариант];
	КонецЕсли;

	лкРасписание = СформироватьРезультат();
	ЭтаФорма.РасписаниеТекстом = ОблачныйАрхивКлиентСервер.ПолучитьТекстовоеОписаниеРасписания(лкРасписание, "Подробно");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)

	Если ПустаяСтрока(ЭтаФорма.Вариант) Тогда
		ПоказатьОповещениеПользователя(
			,
			,
			НСтр("ru='Расписание не было настроено'"),
			БиблиотекаКартинок.ИнтернетПоддержкаПользователейВнимание);
		ЭтаФорма.Закрыть(Неопределено);
	Иначе
		Результат = СформироватьРезультат();
		Результат = ПровестиВалидациюНастроекНаСервере(Результат);
		ОповеститьОВыборе(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)

	ЭтаФорма.Закрыть(Ложь);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Правильно заполняет структуру настроек расписания.
//
// Параметры:
//  Результат - Структура - структура настроек.
//
// Возвращаемое значение:
//   Структура - структура с правильными ключами, как настроено в ХранилищеНастроек.НастройкиОблачногоАрхива.
//
&НаСервереБезКонтекста
Функция ПровестиВалидациюНастроекНаСервере(Результат)

	Результат = ХранилищаНастроек.НастройкиОблачногоАрхива.ПровестиВалидациюНастроек(Результат, "РасписаниеАвтоматическогоРезервногоКопирования", "");

	Возврат Результат;

КонецФункции

// Формирует структуру расписания для сохранения в хранилище настроек.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура   - Структура расписания.
//
&НаКлиенте
Функция СформироватьРезультат()

	// В Агенте резервного копирования необходимо передавать даты в GMT.
	// Функция УниверсальноеВремя('00010101121314') вернет другое значение  смещения, чем УниверсальноеВремя('20160527121314'),
	//  поэтому все время необходимо привести к текущей дате.

	Результат = Новый Структура("
			|РасписаниеВключено, Вариант, Ежедневно_ОдинРазВДень, Ежедневно_НесколькоРазВДень, Еженедельно, Ежемесячно_ПоДням, Ежемесячно_ПоДнямНедели",
		Истина, // Если сумели открыть эту форму, значит расписание было включено.
		ЭтаФорма.Вариант,
		Новый Структура("Время",
			ПривестиКТекущейДате(ЭтаФорма.Ежедневно_ОдинРазВДень_Время)),
		Новый Структура("ВремяНачала,ВремяОкончания,КоличествоЧасовПовтора",
			ПривестиКТекущейДате(ЭтаФорма.Ежедневно_НесколькоРазВДень_ВремяНачала),
			ПривестиКТекущейДате(ЭтаФорма.Ежедневно_НесколькоРазВДень_ВремяОкончания),
			ЭтаФорма.Ежедневно_НесколькоРазВДень_КоличествоЧасовПовтора),
		Новый Структура("Время, ДниНедели",
			ПривестиКТекущейДате(ЭтаФорма.Еженедельно_Время),
			ИнтернетПоддержкаПользователейКлиентСервер.ОтмеченныеЭлементыСпискаЗначений(ЭтаФорма.Еженедельно_ДниНедели, Истина)),
		Новый Структура("Время, ДниМесяца",
			ПривестиКТекущейДате(ЭтаФорма.Ежемесячно_ПоДням_Время),
			ИнтернетПоддержкаПользователейКлиентСервер.ОтмеченныеЭлементыСпискаЗначений(ЭтаФорма.Ежемесячно_ПоДням_ДниМесяца, Истина)),
		Новый Структура("Время, НомерНедели, ДниНедели",
			ПривестиКТекущейДате(ЭтаФорма.Ежемесячно_ПоДнямНедели_Время),
			ЭтаФорма.Ежемесячно_ПоДнямНедели_НомерНедели,
			ИнтернетПоддержкаПользователейКлиентСервер.ОтмеченныеЭлементыСпискаЗначений(ЭтаФорма.Ежемесячно_ПоДнямНедели_ДниНедели, Истина)));

	Возврат Результат;

КонецФункции

// Функция меняет параметр таким образом, что время остается как есть, а дата подставляется текущая.
//
// Параметры:
//  Дата - Дата - дата, которую необходимо преобразовать.
//
// Возвращаемое значение:
//   Дата - преобразованная дата.
//
&НаКлиенте
Функция ПривестиКТекущейДате(Дата)

	лкТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();

	Результат = Дата(
		Год(лкТекущаяДата),
		Месяц(лкТекущаяДата),
		День(лкТекущаяДата),
		Час(Дата),
		Минута(Дата),
		Секунда(Дата));

	Возврат Результат;

КонецФункции

#КонецОбласти
