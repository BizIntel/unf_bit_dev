&НаКлиенте
Перем ХТТПСоединение;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	#Если ВебКлиент Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	#КонецЕсли

	ЭтотОбъект.ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;

	// Инициализировать заново КонтекстВыполнения.
	ЭтотОбъект.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЭтотОбъект.КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		ЭтотОбъект.КонтекстВыполнения,
		"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Инициализация",
		НСтр("ru='Загрузка файла резервной копии'"));

	// 1. Настройки страницы "Загрузка файла"
#Область НастройкаСтраницы_ЗагрузкаФайла

	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		Параметры,
		"authKey, DBName, UIDName, filesize, UIDFile, Логин, Пароль, ЛогинДоступаКБэкап1СПриватный, ПарольДоступаКБэкап1СПриватный");

	Если ЭтотОбъект.filesize = 0 Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;

		// Завершить сбор лога и сделать запись в журнал регистрации.
		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			ЭтотОбъект.КонтекстВыполнения,
			1003,
			СтрШаблон(
				НСтр("ru='Попытка загрузки файла с нулевым размером. Загрузка отменена.
					|Логин: %1
					|UIDFile: %2
					|DBName: %3
					|UIDName: %4
					|Размер файла: %5'"),
				ЭтотОбъект.Логин,
				ЭтотОбъект.UIDFile,
				ЭтотОбъект.DBName,
				ЭтотОбъект.UIDName,
				ЭтотОбъект.filesize),
			Неопределено);

		ЗаписатьСообщениеВЛогНаСервере();

		Возврат;
	КонецЕсли;

	ВложенныйКонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Заполнить таблицу "Части файла".
	КоличествоЧастей = 100;
	Если ЭтотОбъект.filesize < 1*1024*1024 Тогда
		КоличествоЧастей = 1;
	ИначеЕсли ЭтотОбъект.filesize < 10*1024*1024 Тогда
		КоличествоЧастей = 10;
	ИначеЕсли ЭтотОбъект.filesize < 100*1024*1024 Тогда
		КоличествоЧастей = 50;
	ИначеЕсли ЭтотОбъект.filesize < 500*1024*1024 Тогда
		КоличествоЧастей = 100;
	Иначе // > 500 Мб
		КоличествоЧастей = 200;
	КонецЕсли;

	Элементы.ПроцентВыполнения.МаксимальноеЗначение = КоличествоЧастей;

	// 1.1. Создание структуры каталогов для резервной копии.
#Область НастройкаСтраницы_ЗагрузкаФайла_СозданиеСтруктурыКаталогов
	// Структура каталога для восстановления из резервной копии:
	//  Временный каталог + "\backup1C\";
	//    Каталог %UIDName, с заменой запрещенных символов;
	//      Каталог %UIDFile, с заменой запрещенных символов;
	//        Каталог "BackUp" - перед восстановлением, сюда будет помещен предыдущий 1Cv8.1CD;
	//        Каталог "Downloads":
	//          загруженные части файла (part.001...part.999),
	//          объединенная часть с именем backup.7z;
	//          контрольная сумма объединенной части с расширением *.md5 (в файле: md5, пробел, "*", имя файла);
	//        Каталог "Scripts" - необходимые скрипты.
	лкКаталогВременныхФайлов =
		ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПоследнийСимвол(КаталогВременныхФайлов(), "\/")
		+ ПолучитьРазделительПути()
		+ "backup1C";
	ЭтотОбъект.КаталогРабочий = лкКаталогВременныхФайлов;

	// 1.1.1. Каталог UIDName.
#Область НастройкаСтраницы_ЗагрузкаФайла_СозданиеСтруктурыКаталогов_UIDName
	КодРезультата      = 0;
	ОписаниеРезультата = "";
	ВложенныйШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
	ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
		ВложенныйШагВыполнения,
		"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Инициализация.НастройкаЗагрузки.UIDName",
		НСтр("ru='Настройка загрузки файла резервной копии, создание структуры каталогов (UIDName)'"));

		лкКаталогВременныхФайлов =
			лкКаталогВременныхФайлов
			+ ПолучитьРазделительПути()
			+ ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ЭтотОбъект.UIDName, "_");
		Попытка
			СоздатьКаталог(лкКаталогВременныхФайлов);
			ЭтотОбъект.КаталогРабочий = лкКаталогВременныхФайлов;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			КодРезультата = 1004;
			ОписаниеРезультата = СтрШаблон(
				НСтр("ru='Ошибка создания структуры рабочего каталога:
					|%1
					|по причине:
					|%2'"),
				лкКаталогВременныхФайлов,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
		ВложенныйШагВыполнения,
		КодРезультата,
		СтрШаблон(
			НСтр("ru='Завершено создание каталога
				|%1
				|Описание результата:
				|%2'"),
			лкКаталогВременныхФайлов,
			ОписаниеРезультата),
		Неопределено);
	ВложенныйКонтекстВыполнения.ЛогШаговВыполнения.Добавить(ВложенныйШагВыполнения);
#КонецОбласти

	// 1.1.2 Каталог UIDName\UIDFile.
#Область НастройкаСтраницы_ЗагрузкаФайла_СозданиеСтруктурыКаталогов_UIDName_UIDFile
	КодРезультата      = 0;
	ОписаниеРезультата = "";
	ВложенныйШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
	ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
		ВложенныйШагВыполнения,
		"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Инициализация.НастройкаЗагрузки.UIDName.UIDFile",
		НСтр("ru='Настройка загрузки файла резервной копии, создание структуры каталогов (UIDName\UIDFile)'"));

		лкКаталогВременныхФайлов =
			лкКаталогВременныхФайлов
			+ ПолучитьРазделительПути()
			+ ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ЭтотОбъект.UIDFile, "_");
		Попытка
			СоздатьКаталог(лкКаталогВременныхФайлов);
			ЭтотОбъект.КаталогРабочий = лкКаталогВременныхФайлов;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			КодРезультата = 1004;
			ОписаниеРезультата = СтрШаблон(
				НСтр("ru='Ошибка создания структуры рабочего каталога:
					|%1
					|по причине:
					|%2'"),
				лкКаталогВременныхФайлов,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
		ВложенныйШагВыполнения,
		КодРезультата,
		СтрШаблон(
			НСтр("ru='Завершено создание каталога
				|%1
				|Описание результата:
				|%2'"),
			лкКаталогВременныхФайлов,
			ОписаниеРезультата),
		Неопределено);
	ВложенныйКонтекстВыполнения.ЛогШаговВыполнения.Добавить(ВложенныйШагВыполнения);
#КонецОбласти

	// 1.1.3 Каталог UIDName\UIDFile\BackUp.
#Область НастройкаСтраницы_ЗагрузкаФайла_СозданиеСтруктурыКаталогов_UIDName_UIDFile_BackUp
	КодРезультата      = 0;
	ОписаниеРезультата = "";
	ВложенныйШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
	ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
		ВложенныйШагВыполнения,
		"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Инициализация.НастройкаЗагрузки.UIDName.UIDFile.BackUp",
		НСтр("ru='Настройка загрузки файла резервной копии, создание структуры каталогов (UIDName\UIDFile\BackUp)'"));

		лкКаталог =
			ЭтотОбъект.КаталогРабочий
			+ ПолучитьРазделительПути()
			+ "BackUp"; // Идентификатор.
		Попытка
			СоздатьКаталог(лкКаталог);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			КодРезультата = 1004;
			ОписаниеРезультата = СтрШаблон(
				НСтр("ru='Ошибка создания структуры рабочего каталога:
					|%1
					|по причине:
					|%2'"),
				лкКаталог,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
		ВложенныйШагВыполнения,
		КодРезультата,
		СтрШаблон(
			НСтр("ru='Завершено создание каталога
				|%1
				|Описание результата:
				|%2'"),
			лкКаталог,
			ОписаниеРезультата),
		Неопределено);
	ВложенныйКонтекстВыполнения.ЛогШаговВыполнения.Добавить(ВложенныйШагВыполнения);
#КонецОбласти

	// 1.1.4 Каталог UIDName\UIDFile\Downloads.
#Область НастройкаСтраницы_ЗагрузкаФайла_СозданиеСтруктурыКаталогов_UIDName_UIDFile_Downloads
	КодРезультата      = 0;
	ОписаниеРезультата = "";
	ВложенныйШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
	ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
		ВложенныйШагВыполнения,
		"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Инициализация.НастройкаЗагрузки.UIDName.UIDFile.Downloads",
		НСтр("ru='Настройка загрузки файла резервной копии, создание структуры каталогов (UIDName\UIDFile\Downloads)'"));

		лкКаталог =
			ЭтотОбъект.КаталогРабочий
			+ ПолучитьРазделительПути()
			+ "Downloads"; // Идентификатор.
		Попытка
			СоздатьКаталог(лкКаталог);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			КодРезультата = 1004;
			ОписаниеРезультата = СтрШаблон(
				НСтр("ru='Ошибка создания структуры рабочего каталога:
					|%1
					|по причине:
					|%2'"),
				лкКаталог,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
		ВложенныйШагВыполнения,
		КодРезультата,
		СтрШаблон(
			НСтр("ru='Завершено создание каталога
				|%1
				|Описание результата:
				|%2'"),
			лкКаталог,
			ОписаниеРезультата),
		Неопределено);
	ВложенныйКонтекстВыполнения.ЛогШаговВыполнения.Добавить(ВложенныйШагВыполнения);
#КонецОбласти

	// 1.1.5 Каталог UIDName\UIDFile\Scripts.
#Область НастройкаСтраницы_ЗагрузкаФайла_СозданиеСтруктурыКаталогов_UIDName_UIDFile_Scripts
	КодРезультата      = 0;
	ОписаниеРезультата = "";
	ВложенныйШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
	ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
		ВложенныйШагВыполнения,
		"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Инициализация.НастройкаЗагрузки.UIDName.UIDFile.Scripts",
		НСтр("ru='Настройка загрузки файла резервной копии, создание структуры каталогов (UIDName\UIDFile\Scripts)'"));

		лкКаталог =
			ЭтотОбъект.КаталогРабочий
			+ ПолучитьРазделительПути()
			+ "Scripts"; // Идентификатор.
		Попытка
			СоздатьКаталог(лкКаталог);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			КодРезультата = 1004;
			ОписаниеРезультата = СтрШаблон(
				НСтр("ru='Ошибка создания структуры рабочего каталога:
					|%1
					|по причине:
					|%2'"),
				лкКаталог,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
		ВложенныйШагВыполнения,
		КодРезультата,
		СтрШаблон(
			НСтр("ru='Завершено создание каталога
				|%1
				|Описание результата:
				|%2'"),
			лкКаталогВременныхФайлов,
			ОписаниеРезультата),
		Неопределено);
	ВложенныйКонтекстВыполнения.ЛогШаговВыполнения.Добавить(ВложенныйШагВыполнения);
#КонецОбласти

#КонецОбласти

	// 1.2. Создание таблицы частей файла.
#Область НастройкаСтраницы_ЗагрузкаФайла_СозданиеСпискаЧастейФайла
	РазмерЧасти = Макс(1, Окр(ЭтотОбъект.filesize / КоличествоЧастей, 0, РежимОкругления.Окр15как20)); // Округлять всегда вверх, чтобы последняя часть была меньше размером
	Смещение = 0;
	Для С=1 По КоличествоЧастей Цикл
		НоваяСтрока = ЭтотОбъект.ЧастиФайла.Добавить();
		НоваяСтрока.Смещение                     = Смещение;
		НоваяСтрока.БылоПопытокЗагрузки          = 0;
		НоваяСтрока.УспешноЗагружено             = Ложь;
		НоваяСтрока.КонтрольнаяСумма             = "";
		НоваяСтрока.КонтрольнаяСуммаЗагруженного = "";
		НоваяСтрока.РазмерЗагруженного           = 0;
		НоваяСтрока.ИмяВременногоФайла           =
			ЭтотОбъект.КаталогРабочий
			+ ПолучитьРазделительПути()
			+ "Downloads"
			+ ПолучитьРазделительПути()
			+ "part." + Формат(С, "ЧЦ=3; ЧДЦ=; ЧВН=; ЧГ=0");
		Если С = КоличествоЧастей Тогда // Последнюю часть загрузить целиком
			РазмерПоследнейЧасти = ЭтотОбъект.filesize - Смещение;
			НоваяСтрока.Размер = РазмерПоследнейЧасти;
			Смещение = Смещение + РазмерПоследнейЧасти;
		Иначе
			НоваяСтрока.Размер = РазмерЧасти;
			Смещение = Смещение + РазмерЧасти;
		КонецЕсли;
	КонецЦикла;
#КонецОбласти

	// 1.3. Получение настроек Агента резервного копирования этого компьютера (путь к архиватору).
#Область НастройкаСтраницы_ЗагрузкаФайла_ИнформацияОКлиентскомКомпьютере
	// Данные по клиенту уже собраны в форме "РаботаСРезервнымиКопиями", поэтому их можно просто прочитать из настроек.
	ИнформацияОКлиенте = ОблачныйАрхив.ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
	ЭтотОбъект.КаталогУстановкиАгентаКопирования = ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования;
#КонецОбласти

#КонецОбласти

	// 2. Если КлючАвторизации не передан, получить его заранее.
#Область ПолучениеКлючаАвторизации
	Если ПустаяСтрока(ЭтотОбъект.authKey) Тогда

		ВложенныйКонтекстВыполненияПолученияКлючаАвторизации = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

		ВложенныйШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
		ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
			ВложенныйШагВыполнения,
			"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Инициализация.ПолучениеAuthKey",
			НСтр("ru='Получение ключа авторизации (authKey) из приватных веб-сервисов'"));

			Прокси = ОблачныйАрхив.ПолучитьПроксиВебСервисаБэкап1СПриватный(ВложенныйКонтекстВыполненияПолученияКлючаАвторизации);

			Если ВложенныйКонтекстВыполненияПолученияКлючаАвторизации.КодРезультата = 0 Тогда
				ЭтотОбъект.authKey                        = ВложенныйКонтекстВыполненияПолученияКлючаАвторизации.КлючАвторизации;
				ЭтотОбъект.ЛогинДоступаКБэкап1СПриватный  = ВложенныйКонтекстВыполненияПолученияКлючаАвторизации.ЛогинДоступаКБэкап1СПриватный;
				ЭтотОбъект.ПарольДоступаКБэкап1СПриватный = ВложенныйКонтекстВыполненияПолученияКлючаАвторизации.ПарольДоступаКБэкап1СПриватный;
			КонецЕсли;

		ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
			ВложенныйШагВыполнения,
			ВложенныйКонтекстВыполненияПолученияКлючаАвторизации.КодРезультата,
			СтрШаблон(
				НСтр("ru='Завершено получение ключа авторизации.
					|Код результата: %1
					|Описание результата:
					|%2'"),
				ВложенныйКонтекстВыполненияПолученияКлючаАвторизации.КодРезультата,
				ВложенныйКонтекстВыполненияПолученияКлючаАвторизации.ОписаниеРезультата),
			ВложенныйКонтекстВыполненияПолученияКлючаАвторизации);
		ВложенныйКонтекстВыполнения.ЛогШаговВыполнения.Добавить(ВложенныйШагВыполнения);

	КонецЕсли;
#КонецОбласти

	// 3. Прочие действия.
#Область ПрочиеДействия

		// Сбросить признак ошибки.
		Элементы.ДекорацияВыборКаталогаОшибкаТекст.Заголовок = "";

#КонецОбласти

	// Завершить сбор лога и сделать запись в журнал регистрации.
	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		ЭтотОбъект.КонтекстВыполнения,
		0,
		СтрШаблон(
			НСтр("ru='Завершена инициализация (ПриСозданииНаСервере):
				|Логин: %1
				|UIDFile: %2
				|DBName: %3
				|UIDName: %4
				|Размер файла: %5'"),
			ЭтотОбъект.Логин,
			ЭтотОбъект.UIDFile,
			ЭтотОбъект.DBName,
			ЭтотОбъект.UIDName,
			ЭтотОбъект.filesize),
		ВложенныйКонтекстВыполнения);

	ЗаписатьСообщениеВЛогНаСервере();

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла" Тогда // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
		ПоказатьОповещениеПользователя(
			, // Текст.
			, // НавигационнаяСсылка.
			НСтр("ru='Нельзя закрывать форму, пока происходит загрузка файла.
				|Вначале отмените загрузку.'"), // Пояснение.
			БиблиотекаКартинок.Предупреждение32); // Картинка.
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	// Удалить временные файлы.
	// Если архив загрузился как backup.7z, то при следующем открытии это будет понятно.
	УдалитьВременныеФайлы();

	Если ЗавершениеРаботы = Истина Тогда
		// Ничего не делать.
	Иначе
		ЗаписатьСообщениеВЛогНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Открытие формы всегда начинается с загрузки файла.
	// Во время загрузки файла недоступны кнопки "Вперед", "Назад", "Закрыть".

	#Если НЕ ВебКлиент Тогда

		// Инициализировать заново КонтекстВыполнения.
		ЭтотОбъект.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ЭтотОбъект.КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

		ПереключитьсяНаСтраницуНаКлиенте("СтраницаЗагрузкаФайла");

		ЭтотОбъект.Заголовок = СтрШаблон(
			НСтр("ru='Загрузка резервной копии базы %1'"),
			ЭтотОбъект.DBName);

		// Текущее состояние загрузки.
		ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Проверка загруженного файла...'");
		ЭтотОбъект.ОбновитьОтображениеДанных();
		Элементы.ДекорацияОшибкаТекст.Подсказка = "";
		Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаСостояние;

		// Перед скачиванием надо проверить, может файл уже загружен и его размер совпадает с необходимым.
		// Если это так, то автоматически приступить к распаковке архива.
		ИмяАрхива =
			ЭтотОбъект.КаталогРабочий
			+ ПолучитьРазделительПутиКлиента()
			+ "Downloads"
			+ ПолучитьРазделительПутиКлиента()
			+ "backup.7z";
		ФайлАрхива = Новый Файл(ИмяАрхива);
		Если (ФайлАрхива.Существует())
				И (ФайлАрхива.Размер() = ЭтотОбъект.filesize) Тогда
			// Т.к. контрольную сумму всего архива с сервера нам не передают, то считаем, что если размер совпал, то файл уже был загружен.
			ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ФайлЗагружен"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
			ЭтотОбъект.НажатаОтмена = Ложь;
			ЭтотОбъект.КоличествоСбойныхЧастей = 0;
			ЭтотОбъект.ВсегоЗагруженоБайт = ЭтотОбъект.filesize;

			УправлениеФормой(ЭтотОбъект);

		Иначе
			ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
			// Если это повторная загрузка, то счетчики количества попыток загрузки (БылоПопытокЗагрузки) должны быть сброшены.
			ЭтотОбъект.НажатаОтмена = Ложь;
			ЭтотОбъект.КоличествоСбойныхЧастей = 0;
			ЭтотОбъект.ВсегоЗагруженоБайт = 0;

			// Текущее состояние загрузки.
			ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Загрузка файла...'");
			ЭтотОбъект.ОбновитьОтображениеДанных();
			Элементы.ДекорацияОшибкаТекст.Подсказка = "";
			Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаСостояние;

			УправлениеФормой(ЭтотОбъект);
			ЭтотОбъект.ПодключитьОбработчикОжидания("ЗагрузитьФайлРезервнойКопии", 0.1, Истина);

		КонецЕсли;

	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьДругогоКаталогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	#Если Не ВебКлиент Тогда

		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбора.Заголовок = НСтр("ru = 'Выбор каталога восстановления резервной копии'");
		ДиалогВыбора.Каталог = ЭтотОбъект.ПутьДругогоКаталога;
		ДиалогВыбора.МножественныйВыбор = Ложь;
		ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
		Если ДиалогВыбора.Выбрать() Тогда
			ЭтотОбъект.ПутьДругогоКаталога = ДиалогВыбора.Каталог;
		КонецЕсли;

	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПутьДругогоКаталогаПриИзменении(Элемент)

	Если НЕ ПустаяСтрока(ЭтотОбъект.ПутьДругогоКаталога) Тогда
		ЭтотОбъект.ПутьДругогоКаталога = ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПоследнийСимвол(ЭтотОбъект.ПутьДругогоКаталога, "\/");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если Элемент.Имя = "ДекорацияУспешноеЗавершениеТекст" Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Истина;

	ПрочиеПараметры = Новый Структура;
	ОблачныйАрхивКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ПрочиеПараметры);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВосстановить(Команда)

	Результат = ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПоследнийСимвол(ЭтотОбъект.ПутьДругогоКаталога, "\/");
	Если НЕ ПустаяСтрока(Результат) Тогда
		// Проверить, что указанный каталог существует
		Каталог = Новый Файл(Результат);
		Если Каталог.Существует() Тогда
			Если Каталог.ЭтоКаталог() Тогда
				ЭтотОбъект.Закрыть(Результат);
			Иначе
				ТекстСообщения = НСтр("ru='Необходимо указать имя каталога, а не имя файла.'");
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Поле  = "ПутьДругогоКаталога";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
			КонецЕсли;
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Каталога %1 не существует. проверьте правильность написания имени каталога.'"),
				Результат);
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле  = "ПутьДругогоКаталога";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='Необходимо выбрать каталог восстановления резервной копии.'");
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле  = "ПутьДругогоКаталога";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)

	Результат = Неопределено;
	ЭтотОбъект.Закрыть(Результат);

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменаЗагрузки(Команда)

	// Отменять только если происходит процесс загрузки.
	Если ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла" Тогда // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
		ОписаниеОповещенияПослеВопросаПодтвержденияОтменыЗагрузки = Новый ОписаниеОповещения(
			"ПослеВопросаПодтвержденияОтменыЗагрузки",
			ЭтотОбъект,
			Новый Структура);
		ПоказатьВопрос(
			ОписаниеОповещенияПослеВопросаПодтвержденияОтменыЗагрузки, // ОписаниеОповещенияОЗавершении
			НСтр("ru='Отменить загрузку?'"), // ТекстВопроса
			РежимДиалогаВопрос.ДаНет, // Кнопки
			10, // Таймаут
			КодВозвратаДиалога.Нет, // КнопкаПоУмолчанию
			НСтр("ru='Подтверждение'"), // Заголовок
			КодВозвратаДиалога.Нет); // КнопкаТаймаута
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)

	ОчиститьСообщения();

	// Каждое нажатие на Далее должно вести к записи новой строки в журнал регистрации.
	ЭтотОбъект.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;

	// Вначале необходимо проверить, возможен ли переход.
	Если ТекущаяСтраница = Элементы.СтраницаЗагрузкаФайла Тогда
		// Переход Далее, к выбору каталога - автоматический, из процедуры разархивирования.
		// В некоторых случаях (в случае ошибок загрузки или разархивирования), кнопка далее выполняет роль "Повторить".

		// Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
		Если ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла" Тогда
			// В этом состоянии кнопка Далее недоступна.
		ИначеЕсли ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ОтменаЗагрузки"
				ИЛИ ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ОшибкиЗагрузки"
				ИЛИ ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ОшибкиРаспаковки" Тогда
			// Повторить загрузку или распаковку.

			// Перед скачиванием надо проверить, может файл уже загружен и его размер совпадает с необходимым.
			// Если это так, то автоматически приступить к распаковке архива.
			ИмяАрхива =
				ЭтотОбъект.КаталогРабочий
				+ ПолучитьРазделительПутиКлиента()
				+ "Downloads"
				+ ПолучитьРазделительПутиКлиента()
				+ "backup.7z";
			ФайлАрхива = Новый Файл(ИмяАрхива);
				Если (ФайлАрхива.Существует())
						И (ФайлАрхива.Размер() = ЭтотОбъект.filesize) Тогда
				// Т.к. контрольную сумму всего архива с сервера нам не передают, то считаем, что если размер совпал, то файл уже был загружен.
				ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ФайлЗагружен"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
				ЭтотОбъект.НажатаОтмена = Ложь;
				ЭтотОбъект.КоличествоСбойныхЧастей = 0;
				ЭтотОбъект.ВсегоЗагруженоБайт = ЭтотОбъект.filesize;

			Иначе
				ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.

				// Сбросить счетчики неудачных загрузок.
				Для Каждого ТекущаяСтрока Из ЭтотОбъект.ЧастиФайла Цикл
					ТекущаяСтрока.БылоПопытокЗагрузки = 0;
				КонецЦикла;

				ЭтотОбъект.НажатаОтмена = Ложь;
				ЭтотОбъект.КоличествоСбойныхЧастей = 0;
				ЭтотОбъект.ВсегоЗагруженоБайт = 0;

				// Текущее состояние загрузки.
				ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Загрузка файла...'");
				ЭтотОбъект.ОбновитьОтображениеДанных();
				Элементы.ДекорацияОшибкаТекст.Подсказка = "";
				Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаСостояние;

				УправлениеФормой(ЭтотОбъект);
				ЭтотОбъект.ПодключитьОбработчикОжидания("ЗагрузитьФайлРезервнойКопии", 0.1, Истина);

			КонецЕсли;

		ИначеЕсли ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ФайлЗагружен" Тогда
			// В этом состоянии кнопка Далее недоступна.
			// После загрузки файла начинается автоматическая распаковка.
		ИначеЕсли ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "РаспаковкаФайла" Тогда
			// В этом состоянии кнопка Далее недоступна.
		ИначеЕсли ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ФайлРаспакован" Тогда
			// В этом состоянии кнопка Далее недоступна.
			// После загрузки файла автоматически переходит на страницу выбора каталога.
		КонецЕсли;

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборКаталога Тогда
		// Переход Далее возможен, если выбран вариант каталога восстановления.
		// Если выбран вариант каталога "Другой каталог", то каталог должен существовать
		//  и не должен совпадать с текущим каталогом информационной базы.
		Элементы.ГруппаВыборКаталогаПодвал.ТекущаяСтраница = Элементы.ГруппаВыборКаталогаПодвалПредупреждения;

		ЕстьОшибки = Ложь;
		ПодробноеПредставлениеОшибки = "";
		Если ПустаяСтрока(ЭтотОбъект.ПутьДругогоКаталога) Тогда
			ЕстьОшибки = Истина;
			ТекстСообщения = НСтр("ru='Необходимо выбрать каталог для восстановления.'");
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле  = "ПутьДругогоКаталога";
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
		Иначе
			// Проверить, что каталог не является текущим каталогом ИБ.
			ТекущийКаталогИБ = ВРег(ОбщегоНазначенияКлиентСервер.КаталогФайловойИнформационнойБазы());

			// Удалить завершающие символы "\" и "/".
			НайденРазделитель = СтрЗаканчиваетсяНа(ТекущийКаталогИБ, "/") ИЛИ СтрЗаканчиваетсяНа(ТекущийКаталогИБ, "\");
			Пока НайденРазделитель = Истина Цикл
				ТекущийКаталогИБ = Лев(ТекущийКаталогИБ, СтрДлина(ТекущийКаталогИБ) - 1);
				НайденРазделитель = СтрЗаканчиваетсяНа(ТекущийКаталогИБ, "/") ИЛИ СтрЗаканчиваетсяНа(ТекущийКаталогИБ, "\");
			КонецЦикла;

			КаталогВосстановления = ВРег(ЭтотОбъект.ПутьДругогоКаталога);
			НайденРазделитель = СтрЗаканчиваетсяНа(КаталогВосстановления, "/") ИЛИ СтрЗаканчиваетсяНа(КаталогВосстановления, "\");
			Пока НайденРазделитель = Истина Цикл
				КаталогВосстановления = Лев(КаталогВосстановления, СтрДлина(КаталогВосстановления) - 1);
				НайденРазделитель = СтрЗаканчиваетсяНа(КаталогВосстановления, "/") ИЛИ СтрЗаканчиваетсяНа(КаталогВосстановления, "\");
			КонецЦикла;

			Если ТекущийКаталогИБ = КаталогВосстановления Тогда
				Элементы.ДекорацияВыборКаталогаОшибкаТекст.Заголовок =
					НСтр("ru='Нельзя восстанавливать резервную копию в каталог с текущей информационной базой.'");
				Элементы.ГруппаВыборКаталогаПодвал.ТекущаяСтраница = Элементы.ГруппаВыборКаталогаПодвалОшибка;
			Иначе
				// Проверить, что каталог существует.
				Каталог = Новый Файл(ЭтотОбъект.КаталогРабочий);
				Если Каталог.Существует() Тогда
					РазархивироватьФайлРезервнойКопии();
				Иначе
					Элементы.ДекорацияВыборКаталогаОшибкаТекст.Заголовок =
						СтрШаблон(
							НСтр("ru='Каталог %1 не существует.'"),
							ЭтотОбъект.ПутьДругогоКаталога);
					Элементы.ГруппаВыборКаталогаПодвал.ТекущаяСтраница = Элементы.ГруппаВыборКаталогаПодвалОшибка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтключениеСеансов Тогда
		// Кнопка Далее отсутствует, т.к. это фактически страница сообщения об ошибке.
		// Переход Далее невозможен.
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУспешноеЗавершение Тогда
		// Кнопки Назад и Далее отсутствуют.
		// Переход Назад и Далее невозможен.
	КонецЕсли;

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)

	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;

	// Вначале необходимо проверить, возможен ли переход.
	Если ТекущаяСтраница = Элементы.СтраницаЗагрузкаФайла Тогда
		// Переход Назад невозможен, кнопка скрыта.
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборКаталога Тогда
		// Переход Назад невозможен, кнопка скрыта.
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтключениеСеансов Тогда
		// По кнопке Назад без проверок переходить на страницу выбора каталога.
		ТекущаяСтраница = Элементы.СтраницаВыборКаталога;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУспешноеЗавершение Тогда
		// Переход Назад невозможен, кнопка скрыта.
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПодробности(Команда)

	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;

	ТекущаяПодсказка = "";
	Если ТекущаяСтраница = Элементы.СтраницаЗагрузкаФайла Тогда
		ТекущаяПодсказка = Элементы.ДекорацияОшибкаТекст.Подсказка;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборКаталога Тогда
		ТекущаяПодсказка = Элементы.ДекорацияВыборКаталогаОшибкаТекст.Подсказка;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТекущаяПодсказка) Тогда
		Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ТекущаяПодсказка);
		Текст.Показать("Подробности", "");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Управляет видимостью и доступностью элементов управления.
//
// Параметры:
//  Форма  - Управляемая форма - форма, в которой необходимо установить видимость / доступность.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;

	лкОтмена      = Элементы.КомандаОтменаЗагрузки;
	лкНазад       = Элементы.КомандаНазад;
	лкДалее       = Элементы.КомандаДалее;
	лкЗакрыть     = Элементы.КомандаЗакрыть;
	лкРазделитель = Элементы.ДекорацияРазделительНазадДалее;

	Элементы.КоманднаяПанельФормы.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Авто;
	лкРазделитель.Видимость = Истина;

	Если ТекущаяСтраница = Элементы.СтраницаЗагрузкаФайла Тогда
#Область СтраницаЗагрузкаФайла

		Форма.Заголовок = СтрШаблон(
			НСтр("ru='Загрузка резервной копии базы %1'"),
			Форма.DBName);

		лкОтмена.Видимость      = Ложь;
		лкНазад.Видимость       = Ложь;
		лкДалее.Видимость       = Истина;
		лкЗакрыть.Видимость     = Истина;
		лкДалее.Заголовок       = НСтр("ru='Загрузить'");

		// Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
		Если Форма.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла" Тогда
			лкРазделитель.Видимость = Ложь;
			лкДалее.Видимость   = Ложь;
			лкЗакрыть.Видимость = Ложь;
			лкОтмена.Видимость  = Истина;
			Элементы.КоманднаяПанельФормы.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
			Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаСостояние;
		ИначеЕсли Форма.ИдентификаторСостоянияЗагрузкиФайла = "ОтменаЗагрузки" Тогда
			лкДалее.Заголовок   = НСтр("ru='Загрузить'");
			лкДалее.Доступность    = Истина;
			лкЗакрыть.Доступность  = Истина;
			Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаСостояние;
		ИначеЕсли Форма.ИдентификаторСостоянияЗагрузкиФайла = "ФайлЗагружен" Тогда
			// После загрузки должна идти распаковка, поэтому кнопки перехода и закрытия все еще недоступны.
			лкДалее.Заголовок   = НСтр("ru='Распаковать'");
			лкДалее.Доступность    = Ложь;
			лкЗакрыть.Доступность  = Ложь;
			Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаСостояние;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыборКаталога;
			УправлениеФормой(Форма);
		ИначеЕсли Форма.ИдентификаторСостоянияЗагрузкиФайла = "ОшибкиЗагрузки" Тогда
			лкДалее.Заголовок   = НСтр("ru='Загрузить заново'");
			лкДалее.Доступность    = Истина;
			лкЗакрыть.Доступность  = Истина;
			Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаОшибка;
		КонецЕсли;

#КонецОбласти

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборКаталога Тогда
#Область СтраницаВыборКаталога

		Форма.Заголовок = НСтр("ru='Выберите каталог для разархивации'");

		лкОтмена.Видимость    = Ложь;
		лкНазад.Видимость     = Ложь;
		лкДалее.Видимость     = Истина;
		лкДалее.Доступность   = Истина;
		лкДалее.Заголовок     = НСтр("ru='Разархивировать'");
		лкЗакрыть.Видимость   = Истина;
		лкЗакрыть.Доступность = Истина;

		Если ПустаяСтрока(Элементы.ДекорацияВыборКаталогаОшибкаТекст.Заголовок) Тогда
			Элементы.ГруппаВыборКаталогаПодвал.ТекущаяСтраница = Элементы.ГруппаВыборКаталогаПодвалПредупреждения;
		Иначе
			Элементы.ГруппаВыборКаталогаПодвал.ТекущаяСтраница = Элементы.ГруппаВыборКаталогаПодвалОшибка;
		КонецЕсли;

#КонецОбласти

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтключениеСеансов Тогда
#Область СтраницаОтключениеСеансов

		Форма.Заголовок = НСтр("ru='Отключение активных сеансов'");

		лкОтмена.Видимость  = Ложь;
		лкНазад.Видимость   = Истина;
		лкДалее.Видимость   = Истина;
		лкЗакрыть.Видимость = Истина;

		лкНазад.Доступность   = Истина;
		лкДалее.Доступность   = Истина;
		лкЗакрыть.Доступность = Истина;

		// Если активных сеансов нет, то нажатие на кнопку Далее = "Разархивировать", иначе "Повторить проверку количества сеансов".
		Если Форма.КоличествоАктивныхСеансов = 0 Тогда
			лкДалее.Заголовок = НСтр("ru='Разархивировать'");
		Иначе
			лкДалее.Заголовок = НСтр("ru='Обновить'");
		КонецЕсли;

#КонецОбласти

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУспешноеЗавершение Тогда
#Область СтраницаУспешноеЗавершение

		Форма.Заголовок = НСтр("ru='Данные успешно восстановлены из резервной копии'");

		лкОтмена.Видимость  = Ложь;
		лкНазад.Видимость   = Ложь;
		лкДалее.Видимость   = Ложь;
		лкЗакрыть.Видимость = Истина;
		лкЗакрыть.Доступность = Истина;
		лкЗакрыть.КнопкаПоУмолчанию = Истина;
		лкЗакрыть.Заголовок = НСтр("ru='Готово'");

#КонецОбласти

	КонецЕсли;

КонецПроцедуры

// Рассчитывает хеш сумму для указанного файла.
//
// Параметры:
//  ИмяФайла - Строка - имя файла, для которого необходимо рассчитать хеш сумму md5.
//
// Возвращаемое значение:
//   Двоичные данные - хеш-сумма файла.
//
&НаСервереБезКонтекста
Функция ПолучитьХешСуммуНаСервере(ИмяФайла)

	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.ДобавитьФайл(ИмяФайла);

	Возврат Хеширование.ХешСумма;

КонецФункции

// Загружает файл резервной копии по частям.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ЗагрузитьФайлРезервнойКопии()

	#Если НЕ ВебКлиент Тогда

		// Текущее состояние загрузки.
		ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Загрузка файла...'");
		ЭтотОбъект.ОбновитьОтображениеДанных();
		Элементы.ДекорацияОшибкаТекст.Подсказка = "";
		Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаСостояние;

		ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
		// Если это повторная загрузка, то счетчики количества попыток загрузки (БылоПопытокЗагрузки) должны быть сброшены.

		ЭтотОбъект.КоличествоСбойныхЧастей = 0;

		ЕстьОшибки = Ложь;
		ПодробноеПредставлениеОшибки = "";
		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
		Попытка
			ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
				ШагВыполнения,
				"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.СоединениеССервером",
				НСтр("ru='Соединение с сервером для загрузки файла резервной копии'"));

			ТаймаутСоединения = 30;
			Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https");
			ХТТПСоединение = Новый HTTPСоединение(
				"backup.1c.ru", // Сервер
				443, // Порт
				ЭтотОбъект.ЛогинДоступаКБэкап1СПриватный, // Пользователь
				ЭтотОбъект.ПарольДоступаКБэкап1СПриватный, // Пароль
				, // Прокси
				ТаймаутСоединения, // Таймаут
				Новый ЗащищенноеСоединениеOpenSSL(), // ЗащищенноеСоединение
				Ложь); // ИспользоватьАутентификациюОС

			ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
				ШагВыполнения,
				0,
				НСтр("ru='Успешное подключение к серверу для загрузки файла резервной копии'"),
				Неопределено);
			ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

		Исключение
			ЕстьОшибки = Истина;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

			ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
				ШагВыполнения,
				1001,
				СтрШаблон(
					НСтр("ru='Ошибка подключения к серверу:
						|%1'"),
					ПодробноеПредставлениеОшибки),
				Неопределено);
			ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

		КонецПопытки;

		Если ЕстьОшибки = Ложь Тогда
			ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
			// Если это повторная загрузка, то счетчики количества попыток загрузки (БылоПопытокЗагрузки) должны быть сброшены.
			ЭтотОбъект.ПодключитьОбработчикОжидания("ЗагрузитьОчереднуюЧастьФайлаРезервнойКопии", 0.1, Истина);
		Иначе
			ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ОшибкиЗагрузки"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
			// Текущее состояние загрузки.
			ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Ошибка подключения к http-сервисам.'");
			ЭтотОбъект.ОбновитьОтображениеДанных();
			Элементы.ДекорацияОшибкаТекст.Подсказка =
				СтрШаблон(
					НСтр("ru='Ошибка подключения к http-сервисам:
						|%1'"),
					ПодробноеПредставлениеОшибки);
			Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаОшибка;
		КонецЕсли;

		УправлениеФормой(ЭтотОбъект);

	#КонецЕсли

КонецПроцедуры

// Загружает файл резервной копии по частям.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ЗагрузитьОчереднуюЧастьФайлаРезервнойКопии()

	#Если НЕ ВебКлиент Тогда

		Если ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ЗагрузкаФайла" Тогда // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.

			ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
			ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
				ШагВыполнения,
				"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.ЗагрузкаЧастиФайла",
				НСтр("ru='Загрузка части файла резервной копии'"));
			КодРезультата = 0;
			ОписаниеРезультата = "";

			ШаблонАдресаФайла = "api/private/v1/get_part_file.php?authKey=%1&UIDFile=%2&size=%3&offset=%4"; // Идентификатор
			РазрешеноПопытокЗагрузки = 5;
			ТекущаяСтрока = Неопределено;

			// Найти "кандидата" (очередную незагруженную часть файла) на загрузку.
			Для Каждого ТекущаяСтрока Из ЭтотОбъект.ЧастиФайла Цикл
				Если (ТекущаяСтрока.УспешноЗагружено = Ложь) И (ЭтотОбъект.НажатаОтмена = Ложь) Тогда
					Если ТекущаяСтрока.БылоПопытокЗагрузки < РазрешеноПопытокЗагрузки Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			// Загрузить "кандидата" (очередную незагруженную часть файла).
			Если ТекущаяСтрока <> Неопределено Тогда
				ТекущаяСтрока.БылоПопытокЗагрузки = ТекущаяСтрока.БылоПопытокЗагрузки + 1;
				ЕстьОшибки = Ложь;
				ВсеЗаголовки = "";
				КодВозврата = 0;
				ИнформацияОбОшибке = Неопределено;
				Попытка
					ХТТПЗапрос = Новый HTTPЗапрос(
						СтрШаблон(
							ШаблонАдресаФайла,
							ЭтотОбъект.authKey,
							ЭтотОбъект.UIDFile,
							Формат(ТекущаяСтрока.Размер, "ЧЦ=20; ЧДЦ=; ЧН=0; ЧГ=0"),
							Формат(ТекущаяСтрока.Смещение, "ЧЦ=20; ЧДЦ=; ЧН=0; ЧГ=0")),
						Новый Соответствие);
					ХТТПОтвет = ХТТПСоединение.Получить(ХТТПЗапрос, ТекущаяСтрока.ИмяВременногоФайла);
					Для каждого ТекущийЗаголовок Из ХТТПОтвет.Заголовки Цикл
						ВсеЗаголовки = ВсеЗаголовки + ТекущийЗаголовок.Ключ + ":" + ТекущийЗаголовок.Значение + Символы.ПС;
						Если ВРег(ТекущийЗаголовок.Ключ) = ВРег("Content-MD5") Тогда
							ТекущаяСтрока.КонтрольнаяСумма = Строка(Base64Значение(ТекущийЗаголовок.Значение)); // "NTX3SSS33ibQMC+qEyxhvg==" -> "35 35 F7 49 24 B7 DE 26 D0 30 2F AA 13 2C 61 BE"
						ИначеЕсли ВРег(ТекущийЗаголовок.Ключ) = ВРег("errorCode") Тогда
							КодВозврата = СокрЛП(ТекущийЗаголовок.Значение);
						КонецЕсли;
					КонецЦикла;
				Исключение
					// Возможен таймаут.
					ЕстьОшибки = Истина;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ОписаниеРезультата = ОписаниеРезультата
						+ СтрШаблон(
							НСтр("ru='Произошла ошибка загрузки части файла:
								|%1
								|'"),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				КонецПопытки;
				Если (ЕстьОшибки = Истина) Тогда
					// Информация в лог уже записана.
					ЭтотОбъект.КоличествоСбойныхЧастей = ЭтотОбъект.КоличествоСбойныхЧастей + 1;
				ИначеЕсли (ХТТПОтвет.КодСостояния <> 200) Тогда
					// Ошибка, записать в лог.
					ОписаниеРезультата = ОписаниеРезультата
						+ СтрШаблон(
							НСтр("ru='Неправильный код возврата (в HTTP ответе):
								|%1
								|%2
								|'"),
							ХТТПОтвет.КодСостояния,
							ВсеЗаголовки);
					ЭтотОбъект.КоличествоСбойныхЧастей = ЭтотОбъект.КоличествоСбойныхЧастей + 1;
				Иначе
					Если КодВозврата = "0" Тогда // Нет ошибки
					ИначеЕсли КодВозврата = "7" Тогда // Переполучить ключ авторизации
						ПолучитьНовыйКлючАвторизацииНаСервере();
						ОписаниеРезультата = ОписаниеРезультата
							+ НСтр("ru='Процесс загрузки был слишком длительный, ключ авторизации просрочился и будет получен заново.
								|'");
					Иначе
						ОписаниеРезультата = ОписаниеРезультата
							+ СтрШаблон(
								НСтр("ru='Код возврата (errorCode) вернул ошибку: %1
									|'"),
								КодВозврата);
					КонецЕсли;
					// Проверить контрольную сумму файла и сравнить ее с загруженной частью.
					Файл = Новый Файл(ТекущаяСтрока.ИмяВременногоФайла);
					Если Файл.Существует() Тогда
						ТекущаяСтрока.РазмерЗагруженного = Файл.Размер();
						Если ТекущаяСтрока.Размер = ТекущаяСтрока.РазмерЗагруженного Тогда
							ТекущаяСтрока.КонтрольнаяСуммаЗагруженного = ПолучитьХешСуммуНаСервере(ТекущаяСтрока.ИмяВременногоФайла);
							Если ТекущаяСтрока.КонтрольнаяСумма = ТекущаяСтрока.КонтрольнаяСуммаЗагруженного Тогда
								ТекущаяСтрока.УспешноЗагружено = Истина;
								ЭтотОбъект.ВсегоЗагруженоБайт = ЭтотОбъект.ВсегоЗагруженоБайт + ТекущаяСтрока.РазмерЗагруженного;
								ОписаниеРезультата = ОписаниеРезультата
									+ СтрШаблон(
										НСтр("ru='Успешно загружена часть файла.
											|Имя временного файла: %1
											|Размер файла (байт): %2
											|Контрольная сумма (md5): %3
											|'"),
										ТекущаяСтрока.ИмяВременногоФайла,
										ТекущаяСтрока.Размер,
										ТекущаяСтрока.КонтрольнаяСумма);
							Иначе
								ЭтотОбъект.КоличествоСбойныхЧастей = ЭтотОбъект.КоличествоСбойныхЧастей + 1;
								ОписаниеРезультата = ОписаниеРезультата
									+ СтрШаблон(
										НСтр("ru='Не совпадает ожидаемая (%1) и реальная (%2) контрольная сумма (md5) части файла.
											|'"),
										ТекущаяСтрока.КонтрольнаяСумма,
										ТекущаяСтрока.КонтрольнаяСуммаЗагруженного);
							КонецЕсли;
						Иначе
							ЭтотОбъект.КоличествоСбойныхЧастей = ЭтотОбъект.КоличествоСбойныхЧастей + 1;
							ОписаниеРезультата = ОписаниеРезультата
								+ СтрШаблон(
									НСтр("ru='Не совпадает ожидаемый (%1) и реальный (%2) размер части файла.
										|'"),
									ТекущаяСтрока.Размер,
									ТекущаяСтрока.РазмерЗагруженного);
						КонецЕсли;
					Иначе
						ЭтотОбъект.КоличествоСбойныхЧастей = ЭтотОбъект.КоличествоСбойныхЧастей + 1;
						ОписаниеРезультата = ОписаниеРезультата
							+ СтрШаблон(
								НСтр("ru='Не найден временный файл (%1). Возможно, он не был загружен.
									|'"),
								ТекущаяСтрока.ИмяВременногоФайла);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Вывести количество успешно загруженных.
			МассивУспешноЗагруженных = ЭтотОбъект.ЧастиФайла.НайтиСтроки(Новый Структура("УспешноЗагружено", Истина));
			ЭтотОбъект.ПроцентВыполнения = МассивУспешноЗагруженных.Количество();
			Если ЭтотОбъект.КоличествоСбойныхЧастей = 0 Тогда
				ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = СтрШаблон(
					НСтр("ru='Загружено %1 частей из %2 (%3 из %4).'"),
					ЭтотОбъект.ЧастиФайла.Индекс(ТекущаяСтрока) + 1,
					ЭтотОбъект.ЧастиФайла.Количество(),
					ОблачныйАрхивКлиентСервер.ПолучитьПредставлениеРазмера(ЭтотОбъект.ВсегоЗагруженоБайт),
					ОблачныйАрхивКлиентСервер.ПолучитьПредставлениеРазмера(ЭтотОбъект.filesize));
			Иначе
				ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = СтрШаблон(
					НСтр("ru='Загружено %1 частей из %2 (%3 из %4).
						|Во время загрузки были сбои: %5'"),
					ЭтотОбъект.ЧастиФайла.Индекс(ТекущаяСтрока) + 1,
					ЭтотОбъект.ЧастиФайла.Количество(),
					ОблачныйАрхивКлиентСервер.ПолучитьПредставлениеРазмера(ЭтотОбъект.ВсегоЗагруженоБайт),
					ОблачныйАрхивКлиентСервер.ПолучитьПредставлениеРазмера(ЭтотОбъект.filesize),
					ЭтотОбъект.КоличествоСбойныхЧастей);
			КонецЕсли;
			ЭтотОбъект.ОбновитьОтображениеДанных();

			// Определить, есть что еще скачивать?
			ЕстьЧтоЗагружать = Ложь;
			Для Каждого ТекущаяСтрока Из ЭтотОбъект.ЧастиФайла Цикл
				Если (ТекущаяСтрока.УспешноЗагружено = Ложь) И (ТекущаяСтрока.БылоПопытокЗагрузки < РазрешеноПопытокЗагрузки) Тогда
					ЕстьЧтоЗагружать = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ЕстьЧтоЗагружать = Истина Тогда
				ЭтотОбъект.ПодключитьОбработчикОжидания("ЗагрузитьОчереднуюЧастьФайлаРезервнойКопии", 0.1, Истина);
			КонецЕсли;

			ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
				ШагВыполнения,
				0,
				НСтр("ru='Загрузка части файла резервной копии'"),
				Неопределено);
			ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

			// Если все скачалось, то объединить все файлы в один и вернуть ссылку на него.
			ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
			ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
				ШагВыполнения,
				"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.ЗавершениеЗагрузкиФайлаРезервнойКопии",
				НСтр("ru='Завершение загрузки файла резервной копии'"));
			КодРезультата = 0;
			ОписаниеРезультата = "";

			МассивНеЗагруженных = ЭтотОбъект.ЧастиФайла.НайтиСтроки(Новый Структура("УспешноЗагружено", Ложь));
			Если МассивНеЗагруженных.Количество() = 0 Тогда

				ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Объединение частей файла в один архив...'");
				ЭтотОбъект.ОбновитьОтображениеДанных();
				// Объединить все части файла (если их > 1)
				ИмяАрхива =
					ЭтотОбъект.КаталогРабочий
						+ ПолучитьРазделительПутиКлиента()
						+ "Downloads"
						+ ПолучитьРазделительПутиКлиента()
						+ "backup.7z";
				Если ЭтотОбъект.ЧастиФайла.Количество() > 1 Тогда
					МассивЧастейФайла = Новый Массив;
					Для Каждого ТекущаяСтрока Из ЭтотОбъект.ЧастиФайла Цикл
						МассивЧастейФайла.Добавить(ТекущаяСтрока.ИмяВременногоФайла);
					КонецЦикла;
					ОбъединитьФайлы(МассивЧастейФайла, ИмяАрхива);
				ИначеЕсли ЭтотОбъект.ЧастиФайла.Количество() = 1 Тогда
					ПереместитьФайл(ЭтотОбъект.ЧастиФайла[0].ИмяВременногоФайла, ИмяАрхива);
				КонецЕсли;

				// Удалить временные файлы.
				УдалитьВременныеФайлы();
				ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ФайлЗагружен"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.

				ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
					ШагВыполнения,
					0,
					НСтр("ru='Загрузка файла резервной копии успешно завершена'"),
					Неопределено);
				ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

				УправлениеФормой(ЭтотОбъект);

			Иначе // Есть незагруженные части файлов

				// Есть незагруженные части файлов, но у них количество попыток загрузки превышено.
				Если ЕстьЧтоЗагружать = Ложь Тогда
					// НЕ удалять временные файлы, т.к. могут нажать "Продолжить загрузку".
					ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ОшибкиЗагрузки"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
					// Текущее состояние загрузки.
					ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Остались незагруженные части файла.'");
					Элементы.ДекорацияОшибкаТекст.Подсказка =
						НСтр("ru='Остались незагруженные части файла,
							|по которым не осталось попыток загрузки.
							|Загрузка завершена с ошибками.'");
					Элементы.ГруппаСтраницыСостояниеЗагрузки.ТекущаяСтраница = Элементы.ГруппаОшибка;

					ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
						ШагВыполнения,
						1002,
						НСтр("ru='Загрузка файла резервной копии не завершена из-за ошибок'"),
						Неопределено);
					ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

					УправлениеФормой(ЭтотОбъект);
				Иначе
					// Обработка загрузки продолжается.
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	#КонецЕсли

КонецПроцедуры

// Распаковывает загруженный файл резервной копии.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура РазархивироватьФайлРезервнойКопии()

	#Если НЕ ВебКлиент Тогда

		ПодробноеПредставлениеОшибки = "";

		ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "РаспаковкаФайла"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
		УправлениеФормой(ЭтотОбъект);

		Элементы.ДекорацияУспешноеЗавершениеТекст.Заголовок =
			Новый ФорматированнаяСтрока(
				НСтр("ru='Информационная база из резервной копии успешно восстановлена в каталог'"),
				Символы.ПС,
				Новый ФорматированнаяСтрока(
					ЭтотОбъект.ПутьДругогоКаталога,
					,
					ЭтотОбъект.ЦветГиперссылки,
					,
					"file://" + ЭтотОбъект.ПутьДругогоКаталога));

		ПутьКАрхиватору = ЭтотОбъект.КаталогУстановкиАгентаКопирования
			+ ПолучитьРазделительПутиКлиента()
			+ "7za.exe";
		ПутьКЗагруженномуФайлу =
			ЭтотОбъект.КаталогРабочий
				+ ПолучитьРазделительПутиКлиента()
				+ "Downloads"
				+ ПолучитьРазделительПутиКлиента()
				+ "backup.7z";
		РазмерЗагруженногоФайла = 0;
		ПутьДляРаспаковки =
			ЭтотОбъект.ПутьДругогоКаталога;
		ПутьКФайлуЛогов =
			ЭтотОбъект.КаталогРабочий
				+ ПолучитьРазделительПутиКлиента()
				+ "Downloads"
				+ ПолучитьРазделительПутиКлиента()
				+ "7za.log";
		ПутьККомандномуФайлу =
			ЭтотОбъект.КаталогРабочий
				+ ПолучитьРазделительПутиКлиента()
				+ "Scripts"
				+ ПолучитьРазделительПутиКлиента()
				+ "unpack.bat";
		КоманднаяСтрока = "";

		// 1. Очистка каталога распаковки от всех файлов.
		// Текущее состояние загрузки.
		ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Очистка каталога перед распаковкой файла...'");
		Элементы.ДекорацияВыборКаталогаОшибкаТекст.Заголовок = "";
		Элементы.ГруппаВыборКаталогаПодвал.ТекущаяСтраница = Элементы.ГруппаВыборКаталогаПодвалПредупреждения;

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
		ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
			ШагВыполнения,
			"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Разархивация.ОчисткаКаталогаПолучателя",
			НСтр("ru='Очистка каталога-получателя перед разархивацией загруженного файла резервной копии'"));

		ЕстьОшибкиУдаления = Ложь;
		Попытка
			УдалитьФайлы(ПутьДляРаспаковки, "*.*");
			// Удалять скрипты?
		Исключение
			ЕстьОшибкиУдаления = Истина;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		Если ЕстьОшибкиУдаления = Истина Тогда
			// Вывести сообщение об ошибке и остаться на странице "СтраницаВыборКаталога".
			// Текущее состояние загрузки.
			ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Ошибка разархивации файла.'");
			ЭтотОбъект.ОбновитьОтображениеДанных();

			ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ОшибкиРаспаковки"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
			Элементы.ДекорацияВыборКаталогаОшибкаТекст.Подсказка =
				СтрШаблон(
					НСтр("ru='Информация об ошибке:
						|%1'"),
					ПодробноеПредставлениеОшибки);
			Элементы.ДекорацияВыборКаталогаОшибкаТекст.Заголовок =
					НСтр("ru='Ошибка очистки каталога.
						|Возможно, запущена информационная база, связанная с этим каталогом.'");
			Элементы.ГруппаВыборКаталогаПодвал.ТекущаяСтраница = Элементы.ГруппаВыборКаталогаПодвалОшибка;
			УправлениеФормой(ЭтотОбъект);

			ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
				ШагВыполнения,
				1006,
				СтрШаблон(
					НСтр("ru='Ошибки очистки каталога-приемника перед распаковкой резервной копии.
						|Путь к архиватору: %1
						|Путь к загруженному файлу: %2
						|Путь для очистки: %3
						|Ошибка:
						|%4
						|'"),
					ПутьКАрхиватору,
					ПутьКЗагруженномуФайлу,
					ПутьДляРаспаковки,
					ПодробноеПредставлениеОшибки),
				Неопределено);
			ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

		Иначе

			ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
				ШагВыполнения,
				0,
				СтрШаблон(
					НСтр("ru='Успешная очистка каталога-приемника.
						|Путь к архиватору: %1
						|Путь к загруженному файлу: %2
						|Путь для очистки: %3
						|'"),
					ПутьКАрхиватору,
					ПутьКЗагруженномуФайлу,
					ПутьДляРаспаковки),
				Неопределено);
			ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

			// 2. Распаковка всех файлов.
			// Текущее состояние загрузки.
			ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Распаковка файла...'");

			ЕстьОшибки = Ложь;
			КодВозвратаПрограммы = 0;
			ПодробноеПредставлениеОшибки = "";

			Попытка
				ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
				ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
					ШагВыполнения,
					"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Разархивация.ЗапускПрограммы",
					НСтр("ru='Разархивация загруженного файла резервной копии'"));

					КоманднаяСтрока =
						"""" +ПутьКАрхиватору + """" // Путь к архиватору.
						+ " x " // Извлечь все файлы, с подкаталогами.
						+ " -r " // Искать внутри подкаталогов в архиве.
						+ " -y " // Отвечать YES на все вопросы ("Перезаписать файл?").
						+ СтрШаблон(
							" -o""%1"" ",
							ПутьДляРаспаковки) // Куда распаковывать.
						+ """" + ПутьКЗагруженномуФайлу + """" // Имя файла архива.
						+ " > " + ПутьКФайлуЛогов; // Перенаправление вывода. Работает только если запускается из bat-файла, а не через ЗапуститьПриложение.

					// Нельзя запустить через ЗапуститьПриложение разархивацию с перенаправлением ввода ("команда > файл.лога").
					// Поэтому создадим bat файл и запустим его.
					ТекстКомандногоФайла = Новый ЗаписьТекста(
						ПутьККомандномуФайлу,
						КодировкаТекста.OEM, // bat файлы должны создаваться в кодировке OEM, чтобы корректно воспринимать русские буквы.
						,
						Ложь);
						ТекстКомандногоФайла.ЗаписатьСтроку("@echo off");
						ТекстКомандногоФайла.ЗаписатьСтроку("echo Unpacking...");
						ТекстКомандногоФайла.ЗаписатьСтроку(КоманднаяСтрока);
						ТекстКомандногоФайла.ЗаписатьСтроку("echo Exiting...");
						ТекстКомандногоФайла.ЗаписатьСтроку("exit /b errorlevel");
					ТекстКомандногоФайла.Закрыть();
					ЗапуститьПриложение(ПутьККомандномуФайлу, ЭтотОбъект.КаталогУстановкиАгентаКопирования, Истина, КодВозвратаПрограммы);

				Если КодВозвратаПрограммы = 0 Тогда
					ФайлЗагруженный   = Новый Файл(ПутьКЗагруженномуФайлу);
					РазмерЗагруженногоФайла = ФайлЗагруженный.Размер();
				Иначе
					ЕстьОшибки = Истина;
					ПодробноеПредставлениеОшибки = НСтр("ru='Код возврата программы разархивации отличается от 0.'");
				КонецЕсли;

			Исключение
				ЕстьОшибки = Истина;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецПопытки;

			Если ЕстьОшибки = Ложь Тогда

				ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
					ШагВыполнения,
					0,
					СтрШаблон(
						НСтр("ru='Успешная разархивация файла резервной копии.
							|Путь к архиватору: %1
							|Путь к загруженному файлу: %2
							|Размер загруженного файла: %3
							|Код возврата программы: %4
							|Командная строка: %5
							|Путь к командному файлу: %6
							|'"),
						ПутьКАрхиватору,
						ПутьКЗагруженномуФайлу,
						РазмерЗагруженногоФайла,
						КодВозвратаПрограммы,
						ПутьККомандномуФайлу,
						КоманднаяСтрока),
					Неопределено);
				ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

				// Зарегистрировать шаг выполнения.
				// Удалить все файлы DoNotCopy.txt из всех подкаталогов.
				МассивНайденныхФайлов = НайтиФайлы(ПутьДляРаспаковки, "DoNotCopy.txt", Истина);
				Если МассивНайденныхФайлов.Количество() > 0 Тогда
					Для Каждого ТекущийФайл Из МассивНайденныхФайлов Цикл
						Попытка
							УдалитьФайлы(ТекущийФайл.ПолноеИмя);
						Исключение
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;

			Иначе

				ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
					ШагВыполнения,
					1005,
					СтрШаблон(
						НСтр("ru='Ошибка разархивации файла резервной копии.
							|Путь к архиватору: %1
							|Путь к загруженному файлу: %2
							|Размер загруженного файла: %3
							|Код возврата программы: %4
							|Командная строка: %5
							|Путь к командному файлу: %6
							|Ошибка:
							|%7
							|'"),
						ПутьКАрхиватору,
						ПутьКЗагруженномуФайлу,
						РазмерЗагруженногоФайла,
						КодВозвратаПрограммы,
						КоманднаяСтрока,
						ПутьККомандномуФайлу,
						ПодробноеПредставлениеОшибки),
					Неопределено);
				ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

			КонецЕсли;

			Если ЕстьОшибки = Ложь Тогда
				// Перейти на страницу "СтраницаУспешноеЗавершение".
				ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ФайлРаспакован"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
				ПереключитьсяНаСтраницуНаКлиенте("СтраницаУспешноеЗавершение");
				УправлениеФормой(ЭтотОбъект);
			Иначе
				// Вывести сообщение об ошибке и остаться на странице "СтраницаВыборКаталога".
				// Текущее состояние загрузки.
				ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Ошибка разархивации файла.'");
				ЭтотОбъект.ОбновитьОтображениеДанных();
				ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ОшибкиРаспаковки"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.
				Элементы.ДекорацияВыборКаталогаОшибкаТекст.Подсказка =
					СтрШаблон(
						НСтр("ru='Информация об ошибке:
							|%1'"),
						ПодробноеПредставлениеОшибки);
				Элементы.ДекорацияВыборКаталогаОшибкаТекст.Заголовок =
					СтрШаблон(
						НСтр("ru='Ошибка разархивации файла:
							|%1'"),
						ПодробноеПредставлениеОшибки);
				УправлениеФормой(ЭтотОбъект);
			КонецЕсли;

		КонецЕсли;

	#КонецЕсли

КонецПроцедуры

// Процедура получает заново ключ авторизации. Такая ситуация возможна, если загрузка очередной части файла длилась более 5 минут,
//  после чего ключ авторизации authKey стал недействителен.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ПолучитьНовыйКлючАвторизацииНаСервере()

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	Прокси = ОблачныйАрхив.ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполнения);
	ЭтотОбъект.authKey                        = КонтекстВыполнения.КлючАвторизации;
	ЭтотОбъект.ЛогинДоступаКБэкап1СПриватный  = КонтекстВыполнения.ЛогинДоступаКБэкап1СПриватный;
	ЭтотОбъект.ПарольДоступаКБэкап1СПриватный = КонтекстВыполнения.ПарольДоступаКБэкап1СПриватный;

КонецПроцедуры

// Процедура удаляет все созданные временные файлы.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УдалитьВременныеФайлы()

	ЭтотОбъект.ПредставлениеТекущегоСостоянияЗагрузкиФайла = НСтр("ru='Удаление временных файлов...'");
	ЭтотОбъект.ОбновитьОтображениеДанных();
	УдалитьФайлы(
		ЭтотОбъект.КаталогРабочий
			+ ПолучитьРазделительПутиКлиента()
			+ "Downloads",
		"part.*");

КонецПроцедуры

// Процедура записывает результат загрузки файла резервной копии в журнал регистрации.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаписатьСообщениеВЛогНаСервере()

	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСообщения = СтрШаблон(
		НСтр("ru='Загрузка файла резервной копии, итоговый отчет.
			|Время начала (мс): %1
			|Время окончания (мс): %2
			|Длительность (мс): %3
			|Результат выполнения:
			|%4
			|'"),
		ЭтотОбъект.ВремяНачала,
		ВремяОкончания,
		ВремяОкончания - ЭтотОбъект.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			ЭтотОбъект.КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));

	// Запись в журнал регистрации.
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Веб-сервисы'"), // Имя события
		НСтр("ru='Облачный архив. Веб-сервисы. Загрузка файла резервной копии'"), // ИмяСобытия
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ВремяОкончания - ЭтотОбъект.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	// Начать вести лог заново.
	ЭтотОбъект.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЭтотОбъект.КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

КонецПроцедуры

// Вызывается из КнопкаОтменаНажатие, после вопроса "Отменить загрузку?".
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - результат выбора пользователя: значение системного перечисления или значение, связанное с нажатой кнопкой;
//  ДополнительныеПараметры - Произвольный - Произвольные параметры.
//
&НаКлиенте
Процедура ПослеВопросаПодтвержденияОтменыЗагрузки(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.СтруктураШагаВыполнения();
		ОблачныйАрхивКлиентСервер.ЗарегистрироватьНачалоШагаВыполнения(
			ШагВыполнения,
			"ОблачныйАрхив.ЗагрузкаФайлаРезервнойКопии.Отмена",
			НСтр("ru='Отмена загрузки файла резервной копии'"));

			// Установить признаки отмены загрузки.
			ЭтотОбъект.НажатаОтмена = Истина;
			ЭтотОбъект.ИдентификаторСостоянияЗагрузкиФайла = "ОтменаЗагрузки"; // Идентификатор: ЗагрузкаФайла, ОтменаЗагрузки, ФайлЗагружен, ОшибкиЗагрузки, РаспаковкаФайла, ФайлРаспакован, ОшибкиРаспаковки.

		ОблачныйАрхивКлиентСервер.ЗарегистрироватьКонецШагаВыполнения(
			ШагВыполнения,
			0,
			НСтр("ru='Отменена загрузка файла резервной копии'"),
			Неопределено);
		ЭтотОбъект.КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ШагВыполнения);

		УправлениеФормой(ЭтотОбъект);

		ЭтотОбъект.Закрыть(Ложь);

	КонецЕсли;

КонецПроцедуры

// Выполняет переключение на выбранную страницу с перерисовкой формы.
//
// Параметры:
//  ИмяСтраницы - Строка - имя страницы.
//
&НаКлиенте
Процедура ПереключитьсяНаСтраницуНаКлиенте(ИмяСтраницы)

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяСтраницы];
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти
