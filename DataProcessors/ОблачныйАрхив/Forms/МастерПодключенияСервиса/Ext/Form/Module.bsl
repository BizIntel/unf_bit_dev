#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	ДатаДляПроверки = ТекущаяУниверсальнаяДата();

	ЭтотОбъект.ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;

	// 1. Сбросить видимость всех сообщений об ошибках. Они видны для удобства компоновки формы.
#Область ОтключениеВидимости

	// СтраницаПодключениеКВебИТС:
	Элементы.ПанельОшибкаПодключения.Видимость = Ложь;
	// СтраницаУстановкаАгентаРезервногоКопирования:
	// - Нет.
	// СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками:
	// - Нет.
	// СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно:
	// - Нет.

#КонецОбласти

	// 2. Получение параметров.
#Область ПолучениеПараметров

	// Сбор информации запускается сразу, а не фоновым заданием.
	ЗагрузитьСтатистику(300);

	// Получить все необходимые параметры.
	ПараметрыАвторизацииИПП = ОблачныйАрхив.ПолучитьНастройкиОблачногоАрхива("ПараметрыАвторизацииИПП");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыАвторизацииИПП, "Логин, Пароль");

	ПараметрыОкруженияСервер = ОблачныйАрхив.ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		ПараметрыОкруженияСервер,
		"ПодсистемаНастроена, ПредыдущееСостояниеПодсистемаНастроена, ДатаИзмененияПодсистемаНастроена");
	ЭтотОбъект.ПредыдущееСостояниеПодсистемаНастроена = ЭтотОбъект.ПодсистемаНастроена;

	ИнформацияОКлиенте = ОблачныйАрхив.ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		ИнформацияОКлиенте,
		"АгентКопированияУстановлен, ИдентификаторКомпьютера, ВерсияУстановленногоАгентаКопирования, КаталогУстановкиАгентаКопирования");

	ПроверкаНеобходимостиОбновленияАгента = ОблачныйАрхив.ПроверкаАктуальностиУстановленногоАгентаРезервногоКопирования(ИнформацияОКлиенте);
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		ПроверкаНеобходимостиОбновленияАгента,
		"ТребуетсяУстановка, ТребуетсяОбновление, ВерсияНовейшегоАгентаКопирования, РазмерДистрибутиваБайт, СсылкаНаСкачивание, КонтрольнаяСумма");

	Элементы.ДекорацияВерсияИРазмерАгентаТекст.Заголовок =
		Новый ФорматированнаяСтрока(
			НСтр("ru='Версия дистрибутива:'"),
			" ",
			Новый ФорматированнаяСтрока(
				ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(ЭтотОбъект.ВерсияНовейшегоАгентаКопирования, Ложь),
				Новый Шрифт(Элементы.ДекорацияВерсияИРазмерАгентаТекст.Шрифт,,,Истина)), // Жирный.
			Символы.ПС,
			НСтр("ru='Размер дистрибутива:'"),
			" ",
			Новый ФорматированнаяСтрока(
				Формат(ЭтотОбъект.РазмерДистрибутиваБайт, "ЧЦ=10; ЧДЦ=2; ЧС=6; ЧРД=,; ЧРГ=' '; ЧН=0,00; ЧГ=3,0") + " " + НСтр("ru='МБайт'"),
				Новый Шрифт(Элементы.ДекорацияВерсияИРазмерАгентаТекст.Шрифт,,,Истина))); // Жирный.

	АктивацииАгентовКопирования = ОблачныйАрхив.ПолучитьНастройкиОблачногоАрхива("АктивацииАгентовКопирования", ИмяКомпьютера());
	Если (ИнформацияОКлиенте.АгентКопированияАктивирован_ЕстьФайлыСертификатов = Истина)
			И (АктивацииАгентовКопирования.АгентКопированияАктивирован_ДанныеВебСервисов = Истина)
			И ((АктивацииАгентовКопирования.СрокОкончанияПодписки > ДатаДляПроверки)
					ИЛИ (АктивацииАгентовКопирования.СрокОкончанияПодписки = '00010101')) Тогда
		ЭтотОбъект.АгентКопированияАктивированНаТекущийЛогин = Истина;
	КонецЕсли;

	// Возможно, что не осталось доступных активаций Агентов резервного копирования.
	// Количество доступных активаций хранится в регистре сведений "СвойстваХранилищаОблачногоАрхива".
	// Количество активированных агентов можно подсчитать в регистре сведений "АктивированныеАгентыРезервногоКопирования",
	//  но "за вычетом" активации текущего компьютера - на ранее активированный компьютер можно активировать повторно,
	//  без отключения активации в личном кабинете на сайте.
	Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
	Запись.Свойство = "Количество купленных агентов копирования"; // Идентификатор.
	Запись.Прочитать(); // Только чтение, без последующей записи.
	Если Запись.Выбран() Тогда
		ЭтотОбъект.КоличествоДоступныхАктивацийАгентов = Запись.Значение;
	Иначе
		ЭтотОбъект.КоличествоДоступныхАктивацийАгентов = 0;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Рег.MachineGuid) КАК КоличествоАктивированныхАгентов
		|ИЗ
		|	РегистрСведений.АктивированныеАгентыРезервногоКопирования КАК Рег
		|ГДЕ
		|	Рег.АгентКопированияАктивированНаТекущийЛогин = ИСТИНА
		|	И Рег.MachineGuid <> &ИдентификаторЭтогоКомпьютера
		|";
	Запрос.УстановитьПараметр("ИдентификаторЭтогоКомпьютера", ИнформацияОКлиенте.ИдентификаторКомпьютера);

	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Если Выборка.Следующий() Тогда
			ЭтотОбъект.КоличествоАктивированныхАгентов = Выборка.КоличествоАктивированныхАгентов;
		КонецЕсли;
	Иначе
		ЭтотОбъект.КоличествоАктивированныхАгентов = 0;
	КонецЕсли;

	НастройкиВебСервисов = ОблачныйАрхив.ПолучитьНастройкиОблачногоАрхива("НастройкиВебСервисов");
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		НастройкиВебСервисов,
		"Таймаут");

#КонецОбласти

	// 3. Создание структуры каталогов для резервной копии.
#Область СозданиеСтруктурыКаталогов
	// Структура каталога для загрузки Агента резервного копирования:
	//  Временный каталог + "\backup1C\BackupAgent\<ФирмаПроизводитель>\Arch".
	// Имена загруженных файлов будут формироваться так:
	//  Setup_vА.Б.В.Г.msi, где А.Б.В.Г - версия.
	ЕстьОшибки = Ложь;
	лкКаталогАгента = ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПоследнийСимвол(КаталогВременныхФайлов(), "\/");

	лкКаталогАгента =
		лкКаталогАгента
		+ ПолучитьРазделительПути()
		+ "backup1C";
	Попытка
		СоздатьКаталог(лкКаталогАгента);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЕстьОшибки = Истина;
	КонецПопытки;

	Если ЕстьОшибки = Ложь Тогда
		лкКаталогАгента =
			лкКаталогАгента
			+ ПолучитьРазделительПути()
			+ "BackupAgent";
		Попытка
			СоздатьКаталог(лкКаталогАгента);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЕстьОшибки = Истина;
		КонецПопытки;

		Если ЕстьОшибки = Ложь Тогда
			лкКаталогАгента =
				лкКаталогАгента
				+ ПолучитьРазделительПути()
				+ "Acronis"; // Имя фирмы-производителя.
			Попытка
				СоздатьКаталог(лкКаталогАгента);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЕстьОшибки = Истина;
			КонецПопытки;

			Если ЕстьОшибки = Ложь Тогда
				ЭтотОбъект.КаталогАгента = лкКаталогАгента;

				лкКаталогЗагрузкиАгента =
					ЭтотОбъект.КаталогАгента
					+ ПолучитьРазделительПути()
					+ "Arch"; // Подкаталог инсталляторов.
				Попытка
					СоздатьКаталог(лкКаталогЗагрузкиАгента);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЕстьОшибки = Истина;
				КонецПопытки;

				Если ЕстьОшибки = Ложь Тогда
					ЭтотОбъект.КаталогЗагрузкиАгента = лкКаталогЗагрузкиАгента;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ЭтотОбъект.ИмяФайлаУстановки =
		ЭтотОбъект.КаталогЗагрузкиАгента
		+ ПолучитьРазделительПути()
		+ СтрШаблон(
			"Setup_v%1.msi",
			ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(ЭтотОбъект.ВерсияНовейшегоАгентаКопирования, Ложь));

	ЭтотОбъект.ИмяФайлаЛоговУстановки =
		ЭтотОбъект.КаталогЗагрузкиАгента
		+ ПолучитьРазделительПути()
		+ СтрШаблон(
			"Setup_v%1_%2.log",
			ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(ЭтотОбъект.ВерсияНовейшегоАгентаКопирования, Ложь),
			Формат(ДатаДляПроверки, "ДФ=yyyyMMdd_HHmmss"));

#КонецОбласти

	// 4. Значения по-умолчанию
#Область ЗначенияПоУмолчанию

	ЭтотОбъект.НастройкаАгентаРезервногоКопированияНаКомпьютере = "СкачатьИУстановитьАгентаРезервногоКопирования";
	ЭтотОбъект.РежимУстановкиАгентаРезервногоКопирования = "УстановкаСНастройкамиПоУмолчанию";
	ЭтотОбъект.КаталогЛогов      = ЭтотОбъект.КаталогАгента + ПолучитьРазделительПути() + "Logs";
	ЭтотОбъект.КаталогРабочий    = ЭтотОбъект.КаталогАгента + ПолучитьРазделительПути() + "WorkingDirectory";
	ЭтотОбъект.КаталогСтатистики = ЭтотОбъект.КаталогАгента + ПолучитьРазделительПути() + "Statistics";

	ЭтотОбъект.ТекстНастроекАгента    = Обработки.ОблачныйАрхив.ПолучитьМакет("НастройкиАгента").ПолучитьТекст();
	ЭтотОбъект.ТекстНастроекАплоадера = Обработки.ОблачныйАрхив.ПолучитьМакет("НастройкиАплоадера").ПолучитьТекст();

#КонецОбласти

	// Если логин и пароль введены, то проверить их правильность (попробовать получить тикет).
	Если ПустаяСтрока(ЭтотОбъект.Логин) ИЛИ ПустаяСтрока(ЭтотОбъект.Пароль) Тогда
		// Начать с ввода логина / пароля для ВебИТС.
		ПереключитьсяНаСтраницуНаСервере("СтраницаПодключениеКВебИТС");
	Иначе
		Результат = ПроверкаВозможностиПереходаНаСервере("СтраницаПодключениеКВебИТС", "Далее");
		Если Результат = Истина Тогда
			// Если логин и пароль - правильные, то открыть на следующей странице.
			// Алгоритм: проверка необходимости установки новой версии Агента резервного копирования.
			Если (ЭтотОбъект.АгентКопированияУстановлен) И (ЭтотОбъект.ТребуетсяОбновление = 0) Тогда
				Если (ЭтотОбъект.АгентКопированияАктивированНаТекущийЛогин = Истина) Тогда
					Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаУспешноТекст.Заголовок =
						Новый ФорматированнаяСтрока(
							СтрШаблон(
								НСтр("ru='Установлена версия Агента резервного копирования: %1'"),
								ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(ЭтотОбъект.ВерсияУстановленногоАгентаКопирования, Ложь)),
							Символы.ПС,
							Символы.ПС,
							НСтр("ru='Для настройки расписания автоматического резервного копирования необходимо запустить 1С:Предприятие на компьютере, на котором установлен Агент резервного копирования.'"),
							Символы.ПС,
							Символы.ПС,
							НСтр("ru='Просматривать список созданных резервных копий можно с любого компьютера.'"));
					ПереключитьсяНаСтраницуНаСервере("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно");
					ЭтотОбъект.ПодсистемаНастроена = 2;
				Иначе
					Если ЭтотОбъект.КоличествоДоступныхАктивацийАгентов > ЭтотОбъект.КоличествоАктивированныхАгентов Тогда
						РезультатОперацииСАгентом = ВыполнитьОперацииСАгентомНаСервере("Активация");
						Если РезультатОперацииСАгентом.Результат = Истина Тогда
							Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаУспешноТекст.Заголовок =
								РезультатОперацииСАгентом.ОписаниеРезультата;
							ПереключитьсяНаСтраницуНаСервере("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно");
							ЭтотОбъект.ПодсистемаНастроена = 2;
						Иначе
							Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаСОшибкамиТекст.Заголовок =
								РезультатОперацииСАгентом.ОписаниеРезультата;
							ПереключитьсяНаСтраницуНаСервере("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками");
						КонецЕсли;
					Иначе
						Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаСОшибкамиТекст.Заголовок =
							Новый ФорматированнаяСтрока(
							НСтр("ru='Недостаточно свободных лицензий для активации Агента резервного копирования.'"),
							Символы.ПС,
							Символы.ПС,
							НСтр("ru='Купить дополнительные лицензии на использование Агента резервного копирования на этом компьютере можно в'"),
							" ",
							Новый ФорматированнаяСтрока(
								НСтр("ru='личном кабинете'"),
								,
								ЭтотОбъект.ЦветГиперссылки,
								,
								"backup1C:OpenWebPersonalAccount_BuyAgent"),
							".",
							Символы.ПС,
							НСтр("ru='Также в личном кабинете можно освободить лицензии с других компьютеров.
								|Для этого из'"),
							" ",
							Новый ФорматированнаяСтрока(
								НСтр("ru='личного кабинета'"),
								,
								ЭтотОбъект.ЦветГиперссылки,
								,
								"backup1C:OpenWebPersonalAccount_DeactivateAgent"),
							" ",
							НСтр("ru='необходимо выбрать неиспользуемого Агента резервного копирования и нажать кнопку Освободить.'"),
							Символы.ПС);
						ПереключитьсяНаСтраницуНаСервере("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками");
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПереключитьсяНаСтраницуНаСервере("СтраницаУстановкаАгентаРезервногоКопирования");
			КонецЕсли;
		Иначе
			// Начать с ввода логина / пароля для ВебИТС.
			ПереключитьсяНаСтраницуНаСервере("СтраницаПодключениеКВебИТС");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы = Истина Тогда
		// Ничего не делать.
	Иначе
		ПриЗакрытииНаСервере();
	КонецЕсли;

	Оповестить("ОблачныйАрхив:УстановленАгент", ЭтотОбъект.ПодсистемаНастроена, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	ПрочиеПараметры = Новый Структура("Логин, Пароль", ЭтотОбъект.Логин, ЭтотОбъект.Пароль);
	ОблачныйАрхивКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка,
		ПрочиеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	#Если Не ВебКлиент Тогда

		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Если Элемент.Имя = "КаталогЛогов" Тогда
			ДиалогВыбора.Заголовок = НСтр("ru = 'Выбор каталога для сохранения лог-файлов'");
			ДиалогВыбора.Каталог = ЭтотОбъект.КаталогЛогов;
		ИначеЕсли Элемент.Имя = "КаталогСтатистики" Тогда
			ДиалогВыбора.Заголовок = НСтр("ru = 'Выбор каталога для сохранения файлов статистики'");
			ДиалогВыбора.Каталог = ЭтотОбъект.КаталогСтатистики;
		ИначеЕсли Элемент.Имя = "КаталогРабочий" Тогда
			ДиалогВыбора.Заголовок = НСтр("ru = 'Выбор каталога для сохранения рабочих и временных файлов'");
			ДиалогВыбора.Каталог = ЭтотОбъект.КаталогРабочий;
		КонецЕсли;
		ДиалогВыбора.МножественныйВыбор = Ложь;
		ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
		Если ДиалогВыбора.Выбрать() Тогда
			Если Элемент.Имя = "КаталогЛогов" Тогда
				ЭтотОбъект.КаталогЛогов = ДиалогВыбора.Каталог;
			ИначеЕсли Элемент.Имя = "КаталогСтатистики" Тогда
				ЭтотОбъект.КаталогСтатистики = ДиалогВыбора.Каталог;
			ИначеЕсли Элемент.Имя = "КаталогРабочий" Тогда
				ЭтотОбъект.КаталогРабочий = ДиалогВыбора.Каталог;
			КонецЕсли;
		КонецЕсли;

	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияЗарегистрироватьсяНаПортале1СИТСНажатие(Элемент)

	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("https://login.1c.ru/registration");

КонецПроцедуры

&НаКлиенте
Процедура НастройкаАгентаРезервногоКопированияНаКомпьютереПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура РежимУстановкиАгентаРезервногоКопированияПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)

	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;

	// Проверить возможность перехода "Далее".
	Если ПроверкаВозможностиПереходаНаКлиенте(ИмяТекущейСтраницы, "Далее") Тогда
		// Выполнить переход "Далее".
		ВыполнитьПереходНаКлиенте(ИмяТекущейСтраницы, "Далее");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)

	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;

	// Проверить возможность перехода "Назад".
	Если ПроверкаВозможностиПереходаНаКлиенте(ИмяТекущейСтраницы, "Назад") Тогда
		// Выполнить переход "Назад".
		ВыполнитьПереходНаКлиенте(ИмяТекущейСтраницы, "Назад");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Загружает из веб-сервисов статистику и список резервных копий и собирает информацию о клиентском компьютере.
//
// Параметры:
//  СрокЖизниСтатистики - Число - количество секунд, сколько собранная статистика считается актуальной,
//                        если 0 - обновить принудительно;
//  СписокШагов - Строка - Список шагов, которые необходимо собрать, или пустая строка.
//
&НаСервере
Процедура ЗагрузитьСтатистику(СрокЖизниСтатистики=300, СписокШагов = "")

	МассивШагов = Новый Массив;

		ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьСтруктуруШагаСбораДанных();
			ШагСбораДанных.КодШага               = "СвойстваХранилищаОблачногоАрхива"; // Идентификатор
			ШагСбораДанных.ОписаниеШага          = НСтр("ru='Сбор информации об использовании облачного хранилища'");
			ШагСбораДанных.СрокУстареванияСекунд = СрокЖизниСтатистики; // Обновлять только если данные были собраны > 5 минут назад.
		Если (ПустаяСтрока(СписокШагов))
				ИЛИ (НЕ ПустаяСтрока(СписокШагов) И СтрНайти(СписокШагов, ШагСбораДанных.КодШага)) Тогда
			МассивШагов.Добавить(ШагСбораДанных);
		КонецЕсли;

		ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьСтруктуруШагаСбораДанных();
			ШагСбораДанных.КодШага               = "АктивацииАгентовКопирования"; // Идентификатор
			ШагСбораДанных.ОписаниеШага          = НСтр("ru='Проверка активации Агента резервного копирования на этом компьютере'");
			ШагСбораДанных.СрокУстареванияСекунд = СрокЖизниСтатистики; // Обновлять только если данные были собраны > 5 минут назад.
		Если (ПустаяСтрока(СписокШагов))
				ИЛИ (НЕ ПустаяСтрока(СписокШагов) И СтрНайти(СписокШагов, ШагСбораДанных.КодШага)) Тогда
			МассивШагов.Добавить(ШагСбораДанных);
		КонецЕсли;

		ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьСтруктуруШагаСбораДанных();
			ШагСбораДанных.КодШага               = "ИнформацияОКлиенте"; // Идентификатор
			ШагСбораДанных.ОписаниеШага          = НСтр("ru='Сбор информации о клиентском компьютере'");
			ШагСбораДанных.СрокУстареванияСекунд = СрокЖизниСтатистики; // Обновлять только если данные были собраны > 5 минут назад.
		Если (ПустаяСтрока(СписокШагов))
				ИЛИ (НЕ ПустаяСтрока(СписокШагов) И СтрНайти(СписокШагов, ШагСбораДанных.КодШага)) Тогда
			МассивШагов.Добавить(ШагСбораДанных);
		КонецЕсли;

		ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьСтруктуруШагаСбораДанных();
			ШагСбораДанных.КодШага               = "ДоступныеВерсииАгентаКопированияОблачногоАрхива"; // Идентификатор (это НЕ настройка).
			ШагСбораДанных.ОписаниеШага          = НСтр("ru='Сбор информации об актуальных версиях Агентов резервного копирования'");
			ШагСбораДанных.СрокУстареванияСекунд = СрокЖизниСтатистики; // Обновлять только если данные были собраны > 5 минут назад.
		Если (ПустаяСтрока(СписокШагов))
				ИЛИ (НЕ ПустаяСтрока(СписокШагов) И СтрНайти(СписокШагов, ШагСбораДанных.КодШага)) Тогда
			МассивШагов.Добавить(ШагСбораДанных);
		КонецЕсли;

	ОблачныйАрхив.СобратьДанныеПоОблачномуАрхиву(Новый Структура("МассивШагов", МассивШагов), "");

КонецПроцедуры

// Управляет видимостью и доступностью элементов управления.
//
// Параметры:
//  Форма  - Управляемая форма - форма, в которой необходимо установить видимость / доступность.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;

	лкНазад      = Элементы.КомандаНазад;
	лкДалее      = Элементы.КомандаДалее;
	лкЗакрыть    = Элементы.КомандаЗакрыть;

	Если ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
#Область СтраницаДлительнаяОперация

		лкНазад.Видимость   = Ложь;
		лкДалее.Видимость   = Ложь;
		лкЗакрыть.Видимость = Ложь;

#КонецОбласти

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодключениеКВебИТС Тогда
#Область СтраницаПодключениеКВебИТС

		лкНазад.Видимость   = Ложь;
		лкДалее.Видимость   = Истина;
		лкЗакрыть.Видимость = Истина;

		лкДалее.Заголовок = НСтр("ru='Подключиться'");
		лкДалее.КнопкаПоУмолчанию = Истина;

		лкЗакрыть.Заголовок = НСтр("ru='Отмена'");

#КонецОбласти

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУстановкаАгентаРезервногоКопирования Тогда
#Область СтраницаУстановкаАгентаРезервногоКопирования

		лкНазад.Видимость   = Истина;
		лкДалее.Видимость   = Истина;
		лкЗакрыть.Видимость = Истина;

		лкДалее.Заголовок = НСтр("ru='Установить'");
		лкДалее.КнопкаПоУмолчанию = Истина;

		лкЗакрыть.Заголовок = НСтр("ru='Отмена'");

		Элементы.КаталогЛогов.АвтоотметкаНезаполненного      = Ложь;
		Элементы.КаталогСтатистики.АвтоотметкаНезаполненного = Ложь;
		Элементы.КаталогРабочий.АвтоотметкаНезаполненного    = Ложь;
		Если Форма.НастройкаАгентаРезервногоКопированияНаКомпьютере = "АгентРезервногоКопированияУжеУстановленНаДругомКомпьютере" Тогда
			Элементы.ГруппаОтступСкачатьИУстановитьАгентаРезервногоКопирования.Доступность = Ложь;
		ИначеЕсли Форма.НастройкаАгентаРезервногоКопированияНаКомпьютере = "СкачатьИУстановитьАгентаРезервногоКопирования" Тогда
			Элементы.ГруппаОтступСкачатьИУстановитьАгентаРезервногоКопирования.Доступность = Истина;
			Если Форма.РежимУстановкиАгентаРезервногоКопирования = "УстановкаСНастройкамиПоУмолчанию" Тогда
				Элементы.ГруппаОтступКаталогиАгентаРезервногоКопирования.Доступность = Ложь;
			ИначеЕсли Форма.РежимУстановкиАгентаРезервногоКопирования = "УстановкаСРучнымиНастройками" Тогда
				Элементы.ГруппаОтступКаталогиАгентаРезервногоКопирования.Доступность = Истина;
				Элементы.КаталогЛогов.АвтоотметкаНезаполненного      = Истина;
				Элементы.КаталогСтатистики.АвтоотметкаНезаполненного = Истина;
				Элементы.КаталогРабочий.АвтоотметкаНезаполненного    = Истина;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками Тогда
#Область СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками

		лкНазад.Видимость   = Истина;
		лкДалее.Видимость   = Ложь;
		лкЗакрыть.Видимость = Истина;

		лкЗакрыть.КнопкаПоУмолчанию = Истина;
		лкЗакрыть.Заголовок = НСтр("ru='Закрыть'");

#КонецОбласти

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно Тогда
#Область СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно

		лкНазад.Видимость   = Ложь;
		лкДалее.Видимость   = Истина;
		лкЗакрыть.Видимость = Истина;

		лкДалее.Заголовок = НСтр("ru='Настроить'");
		лкДалее.КнопкаПоУмолчанию = Истина;
		лкЗакрыть.Заголовок = НСтр("ru='Готово'");

#КонецОбласти

	КонецЕсли;

КонецПроцедуры

// Функция определяет возможность перехода на другую страницу (на клиенте).
//
// Параметры:
//  ИмяТекущейСтраницы  - Строка - имя текущей страницы;
//  НаправлениеПерехода - Строка - "Далее" или "Назад".
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если переход возможен.
//
&НаКлиенте
Функция ПроверкаВозможностиПереходаНаКлиенте(ИмяТекущейСтраницы, НаправлениеПерехода)

	Результат = Истина;

	Если ИмяТекущейСтраницы = "СтраницаДлительнаяОперация" Тогда
		// Такой переход невозможен.
		Результат = Ложь;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПодключениеКВебИТС" Тогда
		Если НаправлениеПерехода = "Далее" Тогда
			// Всегда переключаться на страницу длительных операций.
			Элементы.ДекорацияДлительнаяОперацияТекст.Заголовок =
				НСтр("ru='Подключение к сервисам интернет-поддержки.
					|Проверка правильности логина и пароля.'");
			ПереключитьсяНаСтраницуНаКлиенте("СтраницаДлительнаяОперация");
			// Проверка подключения к веб-сервисам.
			Результат = ПроверкаВозможностиПереходаНаСервере(ИмяТекущейСтраницы, НаправлениеПерехода);
			// Вернуться на текущую страницу.
			ПереключитьсяНаСтраницуНаКлиенте("СтраницаПодключениеКВебИТС");
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			// Такой переход невозможен.
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопирования" Тогда
		Если НаправлениеПерехода = "Далее" Тогда
			// Всегда переключаться на страницу длительных операций.
			Элементы.ДекорацияДлительнаяОперацияТекст.Заголовок =
				НСтр("ru='Проверка установки Агента резервного копирования.'");
			ПереключитьсяНаСтраницуНаКлиенте("СтраницаДлительнаяОперация");
			// Переход возможен, если заполнены все параметры.
			Если НастройкаАгентаРезервногоКопированияНаКомпьютере = "АгентРезервногоКопированияУжеУстановленНаДругомКомпьютере" Тогда
				Результат = Истина;
			ИначеЕсли НастройкаАгентаРезервногоКопированияНаКомпьютере = "СкачатьИУстановитьАгентаРезервногоКопирования" Тогда
				Если РежимУстановкиАгентаРезервногоКопирования = "УстановкаСНастройкамиПоУмолчанию" Тогда
					Результат = Истина;
				ИначеЕсли РежимУстановкиАгентаРезервногоКопирования = "УстановкаСРучнымиНастройками" Тогда
					Если (НЕ ПустаяСтрока(ЭтотОбъект.КаталогЛогов))
							И (НЕ ПустаяСтрока(ЭтотОбъект.КаталогРабочий))
							И (НЕ ПустаяСтрока(ЭтотОбъект.КаталогСтатистики)) Тогда
						Результат = Истина;
					Иначе
						Результат = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Вернуться на текущую страницу.
			ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопирования");
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками" Тогда
		// С этой страницы можно перейти только назад.
		Если НаправлениеПерехода = "Далее" Тогда
			Результат = Ложь;
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно" Тогда
		// С этой страницы возможно только закрытие формы.
		Если НаправлениеПерехода = "Далее" Тогда
			Результат = Истина; // На последней странице "Далее" переименована в "Настройки".
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция определяет возможность перехода на другую страницу (на сервере).
//
// Параметры:
//  ИмяТекущейСтраницы  - Строка - имя текущей страницы;
//  НаправлениеПерехода - Строка - "Далее" или "Назад".
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если переход возможен.
//
&НаСервере
Функция ПроверкаВозможностиПереходаНаСервере(ИмяТекущейСтраницы, НаправлениеПерехода)

	Результат = Истина;

	Если ИмяТекущейСтраницы = "СтраницаДлительнаяОперация" Тогда
		// На сервере не проверяется.
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПодключениеКВебИТС" Тогда
		// Попробовать подключиться к приватным сервисам backup.1c.ru.
		Элементы.ПанельОшибкаПодключения.Видимость = Ложь;
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
		КонтекстВыполнения.Вставить("Логин", ЭтотОбъект.Логин);
		КонтекстВыполнения.Вставить("Пароль", ЭтотОбъект.Пароль);
		ОблачныйАрхив.ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполнения);
		Если КонтекстВыполнения.КодРезультата <> 0 Тогда
			Результат = Ложь;
			// Вывести сообщение об ошибке.
			Элементы.ПанельОшибкаПодключения.Видимость = Истина;
			Элементы.ДекорацияОшибкаПодключенияКВебИТСТекст.Заголовок = НСтр("ru='Произошла ошибка подключения к веб-сервисам.
				|Проверьте правильность логина и пароля и повторите попытку.'");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопирования" Тогда
		// На сервере не проверяется.
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками" Тогда
		// На сервере не проверяется.
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно" Тогда
		// На сервере не проверяется.
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура выполняет переход на другую страницу (на клиенте).
//
// Параметры:
//  ИмяТекущейСтраницы  - Строка - имя текущей страницы;
//  НаправлениеПерехода - Строка - "Далее" или "Назад".
//
&НаКлиенте
Процедура ВыполнитьПереходНаКлиенте(ИмяТекущейСтраницы, НаправлениеПерехода)

	Если ИмяТекущейСтраницы = "СтраницаДлительнаяОперация" Тогда
		// Такой переход невозможен.
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПодключениеКВебИТС" Тогда
		Если НаправлениеПерехода = "Далее" Тогда
			// Всегда переключаться на страницу длительных операций.
			Элементы.ДекорацияДлительнаяОперацияТекст.Заголовок =
				НСтр("ru='Подключение к сервисам интернет-поддержки.'");
			ПереключитьсяНаСтраницуНаКлиенте("СтраницаДлительнаяОперация");
			// Сохранять логин и пароль всегда.
			ВыполнитьПереходНаСервере(ИмяТекущейСтраницы, НаправлениеПерехода);
			// Активировать следующую страницу.
			// В зависимости от того, установлен ли Агент резервного копирования, активирован ли он и т.п.,
			//  переключаться на другую страницу.
			// Алгоритм: проверка необходимости установки новой версии Агента резервного копирования.
			Если (ЭтотОбъект.АгентКопированияУстановлен) И (ЭтотОбъект.ТребуетсяОбновление = 0) Тогда
				Если (ЭтотОбъект.АгентКопированияАктивированНаТекущийЛогин = Истина) Тогда
					Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаУспешноТекст.Заголовок =
						Новый ФорматированнаяСтрока(
							СтрШаблон(
								НСтр("ru='Установлена версия Агента резервного копирования: %1'"),
								ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(ЭтотОбъект.ВерсияУстановленногоАгентаКопирования, Ложь)),
							Символы.ПС,
							Символы.ПС,
							НСтр("ru='Для настройки расписания автоматического резервного копирования необходимо запустить 1С:Предприятие на компьютере, на котором установлен Агент резервного копирования.'"),
							Символы.ПС,
							Символы.ПС,
							НСтр("ru='Просматривать список созданных резервных копий можно с любого компьютера.'"));
					ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно");
					ЭтотОбъект.ПодсистемаНастроена = 2;
				Иначе
					Если ЭтотОбъект.КоличествоДоступныхАктивацийАгентов > ЭтотОбъект.КоличествоАктивированныхАгентов Тогда
						РезультатОперацииСАгентом = ВыполнитьОперацииСАгентомНаСервере("Активация");
						Если РезультатОперацииСАгентом.Результат = Истина Тогда
							Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаУспешноТекст.Заголовок =
								РезультатОперацииСАгентом.ОписаниеРезультата;
							ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно");
							ЭтотОбъект.ПодсистемаНастроена = 2;
						Иначе
							Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаСОшибкамиТекст.Заголовок =
								РезультатОперацииСАгентом.ОписаниеРезультата;
							ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками");
						КонецЕсли;
					Иначе
						Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаСОшибкамиТекст.Заголовок =
							Новый ФорматированнаяСтрока(
							НСтр("ru='Недостаточно свободных лицензий для активации Агента резервного копирования.'"),
							Символы.ПС,
							Символы.ПС,
							НСтр("ru='Купить дополнительные лицензии на использование Агента резервного копирования на этом компьютере можно в'"),
							" ",
							Новый ФорматированнаяСтрока(
								НСтр("ru='личном кабинете'"),
								,
								ЭтотОбъект.ЦветГиперссылки,
								,
								"backup1C:OpenWebPersonalAccount_BuyAgent"),
							".",
							Символы.ПС,
							НСтр("ru='Также в личном кабинете можно освободить лицензии с других компьютеров.
								|Для этого из'"),
							" ",
							Новый ФорматированнаяСтрока(
								НСтр("ru='личного кабинета'"),
								,
								ЭтотОбъект.ЦветГиперссылки,
								,
								"backup1C:OpenWebPersonalAccount_DeactivateAgent"),
							" ",
							НСтр("ru='необходимо выбрать неиспользуемого Агента резервного копирования и нажать кнопку Освободить.'"),
							Символы.ПС);
						ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками");
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопирования");
			КонецЕсли;
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			// Такой переход невозможен.
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопирования" Тогда
		Если НаправлениеПерехода = "Далее" Тогда
			// Всегда переключаться на страницу длительных операций.
			Элементы.ДекорацияДлительнаяОперацияТекст.Заголовок =
				НСтр("ru='Загрузка и установка Агента резервного копирования.'");
			ПереключитьсяНаСтраницуНаКлиенте("СтраницаДлительнаяОперация");
			// Выполнить все необходимые операции с агентом.
			Если ЭтотОбъект.КоличествоДоступныхАктивацийАгентов > ЭтотОбъект.КоличествоАктивированныхАгентов Тогда
				РезультатОперацииСАгентом = ВыполнитьОперацииСАгентомНаСервере("ЗагрузкаУстановкаАктивация");
				Если РезультатОперацииСАгентом.Результат = Истина Тогда
					Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаУспешноТекст.Заголовок =
						РезультатОперацииСАгентом.ОписаниеРезультата;
					ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно");
					ЭтотОбъект.ПодсистемаНастроена = 2;
				Иначе
					Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаСОшибкамиТекст.Заголовок =
						РезультатОперацииСАгентом.ОписаниеРезультата;
					ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками");
				КонецЕсли;
			Иначе
				Элементы.ДекорацияУстановкаАгентаРезервногоКопированияЗавершенаСОшибкамиТекст.Заголовок =
					НСтр("ru='Недостаточно свободных лицензий для активации Агента резервного копирования.'");
				ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками");
			КонецЕсли;
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			ПереключитьсяНаСтраницуНаКлиенте("СтраницаПодключениеКВебИТС");
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками" Тогда
		// С этой страницы возможно только перейти назад.
		Если НаправлениеПерехода = "Далее" Тогда
			// Такой переход невозможен.
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			// Если страница установки агенты была пропущена (например, агент резервного копирования уже был установлен),
			//  то перейти к СтраницаПодключениеКВебИТС.
			Если ЭтотОбъект.АгентКопированияУстановлен = Истина Тогда
				ПереключитьсяНаСтраницуНаКлиенте("СтраницаПодключениеКВебИТС");
			Иначе
				ПереключитьсяНаСтраницуНаКлиенте("СтраницаУстановкаАгентаРезервногоКопирования");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно" Тогда
		// С этой страницы возможен переход к настройкам и закрытие формы.
		Если НаправлениеПерехода = "Далее" Тогда
			ЭтотОбъект.Закрыть(Истина);
			ОблачныйАрхивКлиент.НастройкаРезервногоКопирования();
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			// Такой переход невозможен.
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет переход на другую страницу (на сервере).
//
// Параметры:
//  ИмяТекущейСтраницы  - Строка - имя текущей страницы;
//  НаправлениеПерехода - Строка - "Далее" или "Назад".
//
&НаСервере
Процедура ВыполнитьПереходНаСервере(ИмяТекущейСтраницы, НаправлениеПерехода)

	Если ИмяТекущейСтраницы = "СтраницаДлительнаяОперация" Тогда
		// Такой переход невозможен.
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПодключениеКВебИТС" Тогда
		Если НаправлениеПерехода = "Далее" Тогда
			// Сохранять логин и пароль всегда.
			УстановитьПривилегированныйРежим(Истина);
				ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(
					Новый Структура("Логин, Пароль",
						ЭтотОбъект.Логин,
						ЭтотОбъект.Пароль));
			УстановитьПривилегированныйРежим(Ложь);
		ИначеЕсли НаправлениеПерехода = "Назад" Тогда
			// Такой переход невозможен.
		КонецЕсли;
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопирования" Тогда
		// Такой переход невозможен.
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопированияЗавершенаСОшибками" Тогда
		// Такой переход невозможен.
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаУстановкаАгентаРезервногоКопированияЗавершенаУспешно" Тогда
		// Такой переход невозможен.
	КонецЕсли;

КонецПроцедуры

// Выполняет переключение на выбранную страницу с перерисовкой формы.
//
// Параметры:
//  ИмяСтраницы - Строка - имя страницы.
//
&НаКлиенте
Процедура ПереключитьсяНаСтраницуНаКлиенте(ИмяСтраницы)

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяСтраницы];
	УправлениеФормой(ЭтотОбъект);
	ОбновитьОтображениеДанных();

КонецПроцедуры

// Выполняет переключение на выбранную страницу с перерисовкой формы.
//
// Параметры:
//  ИмяСтраницы - Строка - имя страницы.
//
&НаСервере
Процедура ПереключитьсяНаСтраницуНаСервере(ИмяСтраницы)

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяСтраницы];
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

// Функция выполняет операции с агентом резервного копирования: загрузка, установка, активация.
//
// Параметры:
//  ОперацияСАгентом - Строка - идентификатор выполняемых операций. Возможные значения: "Активация", "ЗагрузкаУстановкаАктивация".
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * Результат - Булево - Истина, если успешно;
//     * ОписаниеРезультата - ФорматированнаяСтрока, Строка - описание результата.
//
&НаСервере
Функция ВыполнитьОперацииСАгентомНаСервере(ОперацияСАгентом)

	#Если НЕ ВебКлиент Тогда

	РезультатОперацииСАгентом = Новый Структура("Результат, ОписаниеРезультата", Истина, "");
	ОписаниеРезультата = Новый ФорматированнаяСтрока("");

	ДатаДляПроверки = ТекущаяУниверсальнаяДата();

	ЕстьОшибки = Ложь;

	Если (ОперацияСАгентом = "ЗагрузкаУстановкаАктивация") Тогда

		// 1. Загрузка файла инсталляции агента резервного копирования.
#Область ЗагрузкаФайлаИнсталляции

		ОбновитьНадписиНаСервере(НСтр("ru='Загрузка файла установки агента резервного копирования.'"));

		// Проверить наличие файла установки в каталоге, сравнить его размер и контрольную сумму.
		НеобходимаЗагрузка = Истина;
		ФайлУстановки = Новый Файл(ЭтотОбъект.ИмяФайлаУстановки);
		Если ФайлУстановки.Существует() Тогда
			// Проверить размер.
			Если ФайлУстановки.Размер() = ЭтотОбъект.РазмерДистрибутиваБайт Тогда
				// Проверить контрольную сумму.
				Если СовпадаетКонтрольнаяСумма(ЭтотОбъект.ИмяФайлаУстановки, ЭтотОбъект.КонтрольнаяСумма) Тогда
					НеобходимаЗагрузка = Ложь;
					ОписаниеРезультата = Новый ФорматированнаяСтрока(
						ОписаниеРезультата,
						Символы.ПС,
						НСтр("ru='Агент резервного копирования успешно загружен'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НеобходимаЗагрузка = Истина Тогда
			Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https");
			ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.СтруктураПараметровПолученияФайла();
			ПараметрыПолучения.Вставить("ПутьДляСохранения", ЭтотОбъект.ИмяФайлаУстановки);
			ПараметрыПолучения.Вставить("Таймаут", ЭтотОбъект.Таймаут);

			НастройкаСохранения = Новый Соответствие;
			НастройкаСохранения.Вставить("МестоХранения", "Клиент");
			НастройкаСохранения.Вставить("Путь", ЭтотОбъект.ИмяФайлаУстановки);

			РезультатЗагрузки = ПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(
				ЭтотОбъект.СсылкаНаСкачивание,
				ПараметрыПолучения,
				НастройкаСохранения);
			Если РезультатЗагрузки.Статус = Истина Тогда
				ФайлУстановки = Новый Файл(ЭтотОбъект.ИмяФайлаУстановки);
				ФайлУстановкиСуществует = ФайлУстановки.Существует();
				Если ФайлУстановки.Существует() Тогда
					// Проверить размер.
					Если ФайлУстановки.Размер() = ЭтотОбъект.РазмерДистрибутиваБайт Тогда
						// Проверить контрольную сумму.
						Если НЕ СовпадаетКонтрольнаяСумма(ЭтотОбъект.ИмяФайлаУстановки, ЭтотОбъект.КонтрольнаяСумма) Тогда
							ЕстьОшибки = Истина;
							ОписаниеРезультата = Новый ФорматированнаяСтрока(
								ОписаниеРезультата,
								Символы.ПС,
								НСтр("ru='Файл дистрибутива повреждён (контрольная сумма загруженного дистрибутива отличается от указанной на сайте)'"));
						Иначе
							ОписаниеРезультата = Новый ФорматированнаяСтрока(
								ОписаниеРезультата,
								Символы.ПС,
								НСтр("ru='Агент резервного копирования успешно загружен'"));
						КонецЕсли;
					Иначе
						ЕстьОшибки = Истина;
						ОписаниеРезультата = Новый ФорматированнаяСтрока(
							ОписаниеРезультата,
							Символы.ПС,
							НСтр("ru='Файл дистрибутива повреждён (размер загруженного дистрибутива отличается от указанного на сайте)'"));
					КонецЕсли;
				Иначе
					ЕстьОшибки = Истина;
					ОписаниеРезультата = Новый ФорматированнаяСтрока(
						ОписаниеРезультата,
						Символы.ПС,
						НСтр("ru='Файл дистрибутива отсутствует во временном каталоге.'"));
				КонецЕсли;
			Иначе // Не удалось загрузить...
				ЕстьОшибки = Истина;
				ОписаниеРезультата = Новый ФорматированнаяСтрока(
					ОписаниеРезультата,
					Символы.ПС,
					НСтр("ru='Файл дистрибутива не загружен. Произошли непредвиденные ошибки.'"));
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

		// 2. Запуск инсталляции агента резервного копирования.
#Область ЗапускИнсталляции

		// Строка команды зависит от настроек, заданных при начале инсталляции.
		Если ЕстьОшибки <> Истина Тогда
			ОбновитьНадписиНаСервере(НСтр("ru='Запуск установки агента резервного копирования.'"));
			ОписаниеРезультата = Новый ФорматированнаяСтрока(
				ОписаниеРезультата,
				Символы.ПС,
				НСтр("ru='Агент резервного копирования успешно установлен'"));

			КодВозврата = 0;
			ФайлУстановки = Новый Файл(ЭтотОбъект.ИмяФайлаУстановки);
			ФайлУстановкиСуществует = ФайлУстановки.Существует();
			Если ФайлУстановки.Существует() Тогда

				Если ЭтотОбъект.ВерсияУстановленногоАгентаКопирования = "00.00.000.0000" Тогда // Установить "с нуля".

					// В комбинации ключей "/qb-" и "/promptrestart" может победить "/qb-"
					//  и тогда компьютер перезагрузится без предупреждения.
					// Для этого будет выведена надпись на форме.

					СтрокаКоманды =
						"msiexec /package "
						+ """"
						+ ЭтотОбъект.ИмяФайлаУстановки
						+ """"
						+ " /liwearucmopvx " // Ключи установки
						+ """"
						+ ЭтотОбъект.ИмяФайлаЛоговУстановки
						+ """"
						+ " /qb- " // Минимум диалоговых окон.
						+ " /promptrestart " // Если нужно перезагрузить компьютер, то сделать это.
						+ " NEED_CREATE_NEW_USER=1 "; // Создать нового пользователя 1CBackupAgent. Варианты: NEED_CREATE_NEW_USER=0 AGENT_USERNAME=Admin001 AGENT_PASSWORD=AdminPass001.

				Иначе // Переустановить.

					СтрокаКоманды =
						"msiexec /package "
						+ """"
						+ ЭтотОбъект.ИмяФайлаУстановки
						+ """"
						+ " /liwearucmopvx " // Ключи установки
						+ """"
						+ ЭтотОбъект.ИмяФайлаЛоговУстановки
						+ """"
						+ " /qf " // Все диалоговые окна.
						+ " /promptrestart " // Если нужно перезагрузить компьютер, то сделать это.
						+ " REINSTALL=ALL REINSTALLMODE=vamus "; // Необходимость переинсталляции.

				КонецЕсли;

				ЗапуститьПриложение(СтрокаКоманды, , Истина, КодВозврата); // Каталог установки агента НЕ указывать, т.к. он еще не создан.

			КонецЕсли;
		КонецЕсли;

#КонецОбласти

		// 3. Заново собрать настройки (каталог установки).
#Область СборИнформации_ИнформацияОКлиенте

		Если ЕстьОшибки <> Истина Тогда
			ОбновитьНадписиНаСервере(НСтр("ru='Сбор данных для агента резервного копирования (анализ состояния компьютера).'"));
			ОписаниеРезультата = Новый ФорматированнаяСтрока(
				ОписаниеРезультата,
				Символы.ПС,
				НСтр("ru='Все операции с агентом на компьютере завершены.'"));

			ЗагрузитьСтатистику(0, "ИнформацияОКлиенте");
			ИнформацияОКлиенте = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
			ЗаполнитьЗначенияСвойств(
				ЭтотОбъект,
				ИнформацияОКлиенте,
				"АгентКопированияУстановлен, ИдентификаторКомпьютера, ВерсияУстановленногоАгентаКопирования, КаталогУстановкиАгентаКопирования");
		КонецЕсли;

#КонецОбласти

		// 4. Записать настройки по-умолчанию для текущей ИБ.
#Область СозданиеФайловНастроек

		Если ЕстьОшибки <> Истина Тогда
			ОбновитьНадписиНаСервере(НСтр("ru='Создание настроек по-умолчанию для агента резервного копирования.'"));
			ОписаниеРезультата = Новый ФорматированнаяСтрока(
				ОписаниеРезультата,
				Символы.ПС,
				НСтр("ru='Успешно сохранены настройки для агента резервного копирования'"));

			ИмяФайлаНастроекАгента =
				ЭтотОбъект.КаталогУстановкиАгентаКопирования
				+ ПолучитьРазделительПути()
				+ "config"
				+ ПолучитьРазделительПути()
				+ "BackupAgent.xml";

			// 6.1. Изменить настройки агента.
			// Если при установке указали другие пути, то настроить их.
			Если ЭтотОбъект.НастройкаАгентаРезервногоКопированияНаКомпьютере = "СкачатьИУстановитьАгентаРезервногоКопирования" Тогда
				Если ЭтотОбъект.РежимУстановкиАгентаРезервногоКопирования = "УстановкаСРучнымиНастройками" Тогда

					// Частично прочитать предыдущие настройки, если они были созданы при инсталляции.
					// Например, если при инсталляции был создан локальный администратор 1CBackupAgent, то в настройках
					//  уже сохранен в зашифрованном виде его логин и пароль.
					// Из этих настроек надо взять только <LocalUserInfo>...</LocalUserInfo>.
					ЛогинПарольДляЗапускаАгента = "";
					ФайлНастроекАгента = Новый Файл(ИмяФайлаНастроекАгента);
					Если ФайлНастроекАгента.Существует() Тогда
						ЧтениеТекст = Новый ЧтениеТекста(ИмяФайлаНастроекАгента, КодировкаТекста.UTF8, Символы.ПС, Символы.ПС, Ложь);
							ТекстНастроекАгентаПослеИнсталляции = ЧтениеТекст.Прочитать();
						ЧтениеТекст.Закрыть();

						ОткрывающийТег = "<LocalUserInfo>";
						ЗакрывающийТег = "</LocalUserInfo>";
						ЧемЗаменять    = "";
						ГдеОткрывающийТег = СтрНайти(ВРег(ТекстНастроекАгентаПослеИнсталляции), ВРег(ОткрывающийТег));
						ГдеЗакрывающийТег = СтрНайти(ВРег(ТекстНастроекАгентаПослеИнсталляции), ВРег(ЗакрывающийТег));
						Если (ГдеОткрывающийТег > 0) И (ГдеЗакрывающийТег > 0) Тогда
							ЛогинПарольДляЗапускаАгента = Сред(
								ТекстНастроекАгентаПослеИнсталляции,
								ГдеОткрывающийТег + СтрДлина(ОткрывающийТег),
								ГдеЗакрывающийТег - (ГдеОткрывающийТег + СтрДлина(ОткрывающийТег)));
						КонецЕсли;
					КонецЕсли;

					// Настроить Каталоги.
					МассивЗамен = Новый Массив();
					МассивЗамен.Добавить(Новый Структура("ОткрывающийТег, ЗакрывающийТег, ЧемЗаменять, Условие",
						"<LogPath>",
						"</LogPath>",
						ЭтотОбъект.КаталогЛогов,
						Истина));
					МассивЗамен.Добавить(Новый Структура("ОткрывающийТег, ЗакрывающийТег, ЧемЗаменять, Условие",
						"<StatPath>",
						"</StatPath>",
						ЭтотОбъект.КаталогСтатистики,
						Истина));
					МассивЗамен.Добавить(Новый Структура("ОткрывающийТег, ЗакрывающийТег, ЧемЗаменять, Условие",
						"<OperationDirectory>",
						"</OperationDirectory>",
						ЭтотОбъект.КаталогРабочий,
						Истина));
					МассивЗамен.Добавить(Новый Структура("ОткрывающийТег, ЗакрывающийТег, ЧемЗаменять, Условие",
						"<LocalUserInfo>",
						"</LocalUserInfo>",
						ЛогинПарольДляЗапускаАгента,
						НЕ ПустаяСтрока(ЛогинПарольДляЗапускаАгента))); // Заменять, только если текст логина / пароля заполнен.
					Для Каждого ТекущаяЗамена Из МассивЗамен Цикл
						ОткрывающийТег = ТекущаяЗамена.ОткрывающийТег;
						ЗакрывающийТег = ТекущаяЗамена.ЗакрывающийТег;
						ЧемЗаменять    = ТекущаяЗамена.ЧемЗаменять;
						Если ТекущаяЗамена.Условие = Истина Тогда
							ГдеОткрывающийТег = СтрНайти(ВРег(ЭтотОбъект.ТекстНастроекАгента), ВРег(ОткрывающийТег));
							ГдеЗакрывающийТег = СтрНайти(ВРег(ЭтотОбъект.ТекстНастроекАгента), ВРег(ЗакрывающийТег));
							Если (ГдеОткрывающийТег > 0) И (ГдеЗакрывающийТег > 0) И (СтрДлина(ЧемЗаменять) > 0) Тогда
								СколькоВзятьСлева  = ГдеОткрывающийТег + СтрДлина(ОткрывающийТег) - 1;
								СколькоВзятьСправа = СтрДлина(ЭтотОбъект.ТекстНастроекАгента) - ГдеЗакрывающийТег + 1;
								ЭтотОбъект.ТекстНастроекАгента =
									Лев(ЭтотОбъект.ТекстНастроекАгента, СколькоВзятьСлева)
									+ ЧемЗаменять
									+ Прав(ЭтотОбъект.ТекстНастроекАгента, СколькоВзятьСправа);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

				КонецЕсли;
			КонецЕсли;

			// Записать настройки.
			ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаНастроекАгента, КодировкаТекста.UTF8, Символы.ПС, Ложь, Символы.ПС);
				ЗаписьТекста.Записать(ЭтотОбъект.ТекстНастроекАгента);
			ЗаписьТекста.Закрыть();

			// 6.2. Изменить настройки аплоадера.
			// Не требуется изменение - при инсталляции они всегда корректные.

		КонецЕсли;

#КонецОбласти

	КонецЕсли;

	Если (ОперацияСАгентом = "Активация") ИЛИ (ОперацияСАгентом = "ЗагрузкаУстановкаАктивация") Тогда

		// 5. Запуск активации Агента резервного копирования, получение данных из веб-сервиса, первый запуск.
#Область АктивацияАгентаКопирования

		Если ЕстьОшибки <> Истина Тогда
			ОбновитьНадписиНаСервере(НСтр("ru='Активация агента резервного копирования (получение ключей, первый запуск).'"));
			ОписаниеРезультата = Новый ФорматированнаяСтрока(
				ОписаниеРезультата,
				Символы.ПС,
				НСтр("ru='Активация Агента резервного копирования: успешно получены коды запуска, завершён первый запуск'"));

			КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
			РезультатАктивацииАгента = АктивироватьАккаунтОблачногоАрхиваНаСервере(КонтекстВыполнения);
			Если (НЕ ПустаяСтрока(РезультатАктивацииАгента.ЛогинАктивации))
					И (НЕ ПустаяСтрока(РезультатАктивацииАгента.ПарольАктивации)) Тогда
				КодВозврата = -1;
				Попытка
					// Если в логине присутствуют запрещенные для командной строки символы, то надо обрамить параметр в кавычки.
					Если ОблачныйАрхивКлиентСервер.ЕстьЗапрещенныеСимволыДляКоманднойСтроки(РезультатАктивацииАгента.ЛогинАктивации) = Истина Тогда
						ПараметрЛогин = " -login=" + """" + РезультатАктивацииАгента.ЛогинАктивации + """";
					Иначе
						ПараметрЛогин = " -login=" + РезультатАктивацииАгента.ЛогинАктивации;
					КонецЕсли;

					// Если в пароле присутствуют запрещенные для командной строки символы, то надо обрамить параметр в кавычки.
					Если ОблачныйАрхивКлиентСервер.ЕстьЗапрещенныеСимволыДляКоманднойСтроки(РезультатАктивацииАгента.ПарольАктивации) = Истина Тогда
						ПараметрПароль = " -password=" + """" + РезультатАктивацииАгента.ПарольАктивации + """";
					Иначе
						ПараметрПароль = " -password=" + РезультатАктивацииАгента.ПарольАктивации;
					КонецЕсли;

					СтрокаКоманды =
						""""
						+ ЭтотОбъект.КаталогУстановкиАгентаКопирования
						+ ПолучитьРазделительПути()
						+ "BackupAgent.exe"
						+ """"
						+ " activate_account"
						+ ПараметрЛогин
						+ ПараметрПароль;
					ЗапуститьПриложение(СтрокаКоманды, ЭтотОбъект.КаталогУстановкиАгентаКопирования, Истина, КодВозврата);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					ОписаниеРезультата = Новый ФорматированнаяСтрока(
						ОписаниеРезультата,
						Символы.ПС,
						НСтр("ru='Не удалось активировать аккаунт.'"));
				КонецПопытки;
				// Если программа так и не запустилась (недостаточно прав), то КодВозврата = Неопределено.
				Если КодВозврата = Неопределено Тогда
					ОписаниеРезультата = Новый ФорматированнаяСтрока(
						ОписаниеРезультата,
						Символы.ПС,
						НСтр("ru='Не удалось запустить Агент резервного копирования для активации аккаунта.'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

#КонецОбласти

		// 6. Заново собрать настройки (наличие сертификатов).
#Область СборИнформации_ИнформацияОКлиенте_АктивацииАгентовКопирования

		Если ЕстьОшибки <> Истина Тогда
			ОбновитьНадписиНаСервере(НСтр("ru='Сбор данных для агента резервного копирования (анализ состояния компьютера, состояние активации).'"));
			ОписаниеРезультата = Новый ФорматированнаяСтрока(
				ОписаниеРезультата,
				Символы.ПС,
				НСтр("ru='Проверка состояния активации завершена.'"));

			ЗагрузитьСтатистику(0, "ИнформацияОКлиенте,АктивацииАгентовКопирования");

			ИнформацияОКлиенте = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
			ЗаполнитьЗначенияСвойств(
				ЭтотОбъект,
				ИнформацияОКлиенте,
				"АгентКопированияУстановлен, ИдентификаторКомпьютера, ВерсияУстановленногоАгентаКопирования, КаталогУстановкиАгентаКопирования");

			АктивацииАгентовКопирования = ОблачныйАрхивВызовСервера.ПолучитьНастройкиОблачногоАрхива("АктивацииАгентовКопирования", ИмяКомпьютера());
			Если (ИнформацияОКлиенте.АгентКопированияАктивирован_ЕстьФайлыСертификатов = Истина)
					И (АктивацииАгентовКопирования.АгентКопированияАктивирован_ДанныеВебСервисов = Истина)
					И ((АктивацииАгентовКопирования.СрокОкончанияПодписки > ДатаДляПроверки)
							ИЛИ (АктивацииАгентовКопирования.СрокОкончанияПодписки = '00010101')) Тогда
				ЭтотОбъект.АгентКопированияАктивированНаТекущийЛогин = Истина;
			КонецЕсли;

		КонецЕсли;

#КонецОбласти

		// 7. Заново собрать настройки (состояние активации).
#Область Окончание

		ОбновитьНадписиНаСервере(НСтр("ru='Всё готово'"));
		// Предыдущие описания не важны, их можно очищать.
		ОписаниеРезультата = 
			Новый ФорматированнаяСтрока(
				СтрШаблон(
					НСтр("ru='Установлена версия Агента резервного копирования: %1'"),
					ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(ЭтотОбъект.ВерсияНовейшегоАгентаКопирования, Ложь)),
				Символы.ПС,
				Символы.ПС,
				НСтр("ru='Для настройки расписания автоматического резервного копирования необходимо запустить 1С:Предприятие на компьютере, на котором установлен Агент резервного копирования.'"),
				Символы.ПС,
				Символы.ПС,
				НСтр("ru='Просматривать список созданных резервных копий можно с любого компьютера.'"));

#КонецОбласти

	КонецЕсли;

	РезультатОперацииСАгентом.Вставить("ОписаниеРезультата", ОписаниеРезультата);

	Если ЕстьОшибки <> Истина Тогда
		Если ЭтотОбъект.НастройкаАгентаРезервногоКопированияНаКомпьютере = "АгентРезервногоКопированияУжеУстановленНаДругомКомпьютере" Тогда
			ЭтотОбъект.ПодсистемаНастроена = 1;
		ИначеЕсли ЭтотОбъект.НастройкаАгентаРезервногоКопированияНаКомпьютере = "СкачатьИУстановитьАгентаРезервногоКопирования" Тогда
			ЭтотОбъект.ПодсистемаНастроена = 2;
		КонецЕсли;
	КонецЕсли;

	Возврат РезультатОперацииСАгентом;

	#КонецЕсли

КонецФункции

// Процедура для обновления заголовков декорации длительных операций на форме.
//
// Параметры:
//  Надпись - Форматированная строка - заголовок декорации.
//
&НаСервере
Процедура ОбновитьНадписиНаСервере(Надпись)

	Элементы.ДекорацияДлительнаяОперацияТекст.Заголовок = Надпись;

КонецПроцедуры

// Функция сравнивает эталонную контрольную сумму с контрольной суммой файла.
//
// Параметры:
//  ИмяФайла - Строка - Имя проверяемого файла. Так как подсистема рассчитана на работу в файловом варианте,
//                      то на клиенте и на сервере имя файла одинаковое.
//  КонтрольнаяСумма - Строка - эталонная контрольная сумма.
//
// Возвращаемое значение:
//   Булево - Истина, если контрольная сумма файла совпадает с эталонной.
//
&НаСервереБезКонтекста
Функция СовпадаетКонтрольнаяСумма(ИмяФайла, КонтрольнаяСумма)

	Результат = Ложь;

	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.ДобавитьФайл(ИмяФайла);
	РассчитаннаяКонтрольнаяСумма = СтрЗаменить(Строка(Хеш.ХешСумма), " ", "");
	Результат = (НРег(КонтрольнаяСумма) = НРег(РассчитаннаяКонтрольнаяСумма));

	Возврат Результат;

КонецФункции

// Функция активирует эту копию Агента резервного копирования.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//     * ЛогинАктивации - Строка;
//     * ПарольАктивации - Строка;
//
&НаСервереБезКонтекста
Функция АктивироватьАккаунтОблачногоАрхиваНаСервере(КонтекстВыполнения)

	Результат = Новый Структура("ЛогинАктивации, ПарольАктивации", "", "");

	// После активации необходимые данные запишутся в регистр сведений "СвойстваХранилищаОблачногоАрхива".
	// Активировать аккаунт в любом случае, чтобы получить пару логин / пароль для активации Агента копирования.
	ОблачныйАрхив.АктивироватьАккаунтОблачногоАрхива(КонтекстВыполнения);
	Если КонтекстВыполнения.КодРезультата= 0 Тогда
		Результат.Вставить("ЛогинАктивации", КонтекстВыполнения.ЛогинАктивации);
		Результат.Вставить("ПарольАктивации", КонтекстВыполнения.ПарольАктивации);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Сохраняет параметры "ПараметрыОкруженияСервер".
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ПриЗакрытииНаСервере()

	// Сохранять параметры только если ПодсистемаНастроена > ПредыдущееСостояниеПодсистемаНастроена.
	Если ЭтотОбъект.ПодсистемаНастроена > ЭтотОбъект.ПредыдущееСостояниеПодсистемаНастроена Тогда

		ЭтотОбъект.ДатаИзмененияПодсистемаНастроена = ТекущаяУниверсальнаяДата();
		ПараметрыОкруженияСервер = ОблачныйАрхив.ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
		//    * ПодсистемаНастроена; // Число (0 - не настроена, 1 - настроена, но не введены настройки на клиентах, 2 - настроена);
		//    * ПредыдущееСостояниеПодсистемаНастроена;
		//    * ДатаИзмененияПодсистемаНастроена;
		//    * ВерсияПодсистемы;
		//    * ИмяИБ;
		//    * ИдентификаторИБ;
		//    * ИдентификаторИБ_СтрокаСоединения;
		//    * ИдентификаторИБ_ИмяКомпьютера;
		//    * ИнформационнаяБазаФайловая.
		ЗаполнитьЗначенияСвойств(
			ПараметрыОкруженияСервер,
			ЭтотОбъект,
			"ПодсистемаНастроена, ПредыдущееСостояниеПодсистемаНастроена, ДатаИзмененияПодсистемаНастроена");

		ОблачныйАрхив.ЗаписатьНастройкиОблачногоАрхива(ПараметрыОкруженияСервер, "ПараметрыОкруженияСервер");

	КонецЕсли;

КонецПроцедуры

#КонецОбласти
